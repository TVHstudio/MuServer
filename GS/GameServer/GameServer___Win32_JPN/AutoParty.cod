; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\AutoParty.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	03e8H
	DD	0118H
	DD	03e8H
	DD	03e8H
	DD	04afH
	DD	03e8H
	DD	04afH
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0cAutoParty@@QAE@XZ				; cAutoParty::cAutoParty
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\autoparty.cpp
;	COMDAT ??0cAutoParty@@QAE@XZ
_TEXT	SEGMENT
??0cAutoParty@@QAE@XZ PROC				; cAutoParty::cAutoParty, COMDAT
; _this$ = ecx

; 21   : {

  00000	8b c1		 mov	 eax, ecx

; 22   : 
; 23   : }

  00002	c3		 ret	 0
??0cAutoParty@@QAE@XZ ENDP				; cAutoParty::cAutoParty
_TEXT	ENDS
PUBLIC	??1cAutoParty@@QAE@XZ				; cAutoParty::~cAutoParty
; Function compile flags: /Ogtp
;	COMDAT ??1cAutoParty@@QAE@XZ
_TEXT	SEGMENT
??1cAutoParty@@QAE@XZ PROC				; cAutoParty::~cAutoParty, COMDAT
; _this$ = ecx

; 27   : 
; 28   : }

  00000	c3		 ret	 0
??1cAutoParty@@QAE@XZ ENDP				; cAutoParty::~cAutoParty
_TEXT	ENDS
PUBLIC	?CheckDistance@cAutoParty@@QAE_NHHH@Z		; cAutoParty::CheckDistance
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CheckDistance@cAutoParty@@QAE_NHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?CheckDistance@cAutoParty@@QAE_NHHH@Z PROC		; cAutoParty::CheckDistance, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 	LPOBJ lpObj = &gObj[aIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 33   : 
; 34   : 	int DisViewe = 2;
; 35   : 
; 36   : 	if(x < lpObj->X - DisViewe  || x > lpObj->X + DisViewe || y < lpObj->Y - DisViewe || y > lpObj->Y + DisViewe)

  00006	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00009	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0000f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	56		 push	 esi
  00016	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0001d	8d 71 fe	 lea	 esi, DWORD PTR [ecx-2]
  00020	3b d6		 cmp	 edx, esi
  00022	5e		 pop	 esi
  00023	7c 25		 jl	 SHORT $LN1@CheckDista
  00025	83 c1 02	 add	 ecx, 2
  00028	3b d1		 cmp	 edx, ecx
  0002a	7f 1e		 jg	 SHORT $LN1@CheckDista
  0002c	0f bf 80 46 01
	00 00		 movsx	 eax, WORD PTR [eax+326]
  00033	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00036	8d 50 fe	 lea	 edx, DWORD PTR [eax-2]
  00039	3b ca		 cmp	 ecx, edx
  0003b	7c 0d		 jl	 SHORT $LN1@CheckDista
  0003d	83 c0 02	 add	 eax, 2
  00040	3b c8		 cmp	 ecx, eax
  00042	7f 06		 jg	 SHORT $LN1@CheckDista

; 39   : 	}
; 40   : 
; 41   : 	return true;

  00044	b0 01		 mov	 al, 1

; 42   : }

  00046	5d		 pop	 ebp
  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN1@CheckDista:

; 37   : 	{
; 38   : 		return false;

  0004a	32 c0		 xor	 al, al

; 42   : }

  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?CheckDistance@cAutoParty@@QAE_NHHH@Z ENDP		; cAutoParty::CheckDistance
_TEXT	ENDS
PUBLIC	?Party@cAutoParty@@QAEXHH@Z			; cAutoParty::Party
EXTRN	?CGPartyListAll@@YAXH@Z:PROC			; CGPartyListAll
EXTRN	?Paint@PartyClass@@QAEXH@Z:PROC			; PartyClass::Paint
EXTRN	?Add@PartyClass@@QAEHHHHH@Z:PROC		; PartyClass::Add
EXTRN	?g_MaxPartyMember@@3HA:DWORD			; g_MaxPartyMember
EXTRN	?GetCount@PartyClass@@QAEHH@Z:PROC		; PartyClass::GetCount
EXTRN	?Isleader@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::Isleader
EXTRN	?Create@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::Create
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?CheckTerrain@cOffExp@@QAE_NPAUOBJECTSTRUCT@@@Z:PROC ; cOffExp::CheckTerrain
EXTRN	?OffExp@@3VcOffExp@@A:BYTE			; OffExp
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::GetGensInfluence
EXTRN	?gGensSystem@@3VGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGENS@@3HA:DWORD				; gGENS
; Function compile flags: /Ogtp
;	COMDAT ?Party@cAutoParty@@QAEXHH@Z
_TEXT	SEGMENT
_lpObj$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_number$ = 12						; size = 4
?Party@cAutoParty@@QAEXHH@Z PROC			; cAutoParty::Party, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 76   : 	if(gGENS)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  0000b	56		 push	 esi
  0000c	74 47		 je	 SHORT $LN24@Party

; 77   : 	{
; 78   : 		if( gGensSystem.CheckPartyEnter )

  0000e	80 3d ae 00 00
	00 00		 cmp	 BYTE PTR ?gGensSystem@@3VGensSystem@@A+174, 0
  00015	74 3e		 je	 SHORT $LN24@Party

; 79   : 		{
; 80   : 			if( gGensSystem.GetGensInfluence(&gObj[aIndex]) != gGensSystem.GetGensInfluence(&gObj[number]) )

  00017	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00020	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::GetGensInfluence
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _number$[ebp]
  00034	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0003a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	8b f0		 mov	 esi, eax
  00042	51		 push	 ecx
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  00048	e8 00 00 00 00	 call	 ?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::GetGensInfluence
  0004d	3b f0		 cmp	 esi, eax
  0004f	0f 85 9c 01 00
	00		 jne	 $LN1@Party
$LN24@Party:

; 81   : 			{
; 82   : 				return;
; 83   : 			}
; 84   : 		}
; 85   : 	}
; 86   : 
; 87   : 	int pnumber = -1;
; 88   : 
; 89   : 	LPOBJ lpObj = &gObj[aIndex];

  00055	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005d	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00063	53		 push	 ebx
  00064	57		 push	 edi

; 90   : 	LPOBJ lpParty = &gObj[number];

  00065	8b 7d 0c	 mov	 edi, DWORD PTR _number$[ebp]
  00068	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0006e	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]

; 91   : 
; 92   : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  00071	6a 20		 push	 32			; 00000020H
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00078	89 55 fc	 mov	 DWORD PTR _lpObj$[ebp], edx
  0007b	8d 1c 07	 lea	 ebx, DWORD PTR [edi+eax]
  0007e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00083	84 c0		 test	 al, al
  00085	75 20		 jne	 SHORT $LN17@Party
  00087	6a 22		 push	 34			; 00000022H
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0008e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00093	84 c0		 test	 al, al
  00095	75 10		 jne	 SHORT $LN17@Party
  00097	6a 21		 push	 33			; 00000021H
  00099	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0009e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000a3	84 c0		 test	 al, al
  000a5	74 0d		 je	 SHORT $LN16@Party
$LN17@Party:

; 93   : 	{
; 94   : 		if(!lpParty->bAutoPt)

  000a7	80 bb f9 28 00
	00 00		 cmp	 BYTE PTR [ebx+10489], 0
  000ae	0f 84 3b 01 00
	00		 je	 $LN26@Party
$LN16@Party:

; 95   : 		{
; 96   : 			return;
; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	if(lpObj->AutoPt == 0)

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000b7	0f b7 81 10 28
	00 00		 movzx	 eax, WORD PTR [ecx+10256]
  000be	66 85 c0	 test	 ax, ax
  000c1	0f 84 28 01 00
	00		 je	 $LN26@Party

; 101  : 	{
; 102  : 		return;		
; 103  : 	}
; 104  : 
; 105  : 	if(lpParty->AutoPt != 0) return;

  000c7	66 83 bb 10 28
	00 00 00	 cmp	 WORD PTR [ebx+10256], 0
  000cf	0f 85 1a 01 00
	00		 jne	 $LN26@Party

; 106  : 
; 107  : 	if(lpParty->Level > lpObj->AutoPt) 

  000d5	66 39 83 be 00
	00 00		 cmp	 WORD PTR [ebx+190], ax
  000dc	0f 8f 0d 01 00
	00		 jg	 $LN26@Party

; 108  : 	{
; 109  : 		return;
; 110  : 	}
; 111  : 
; 112  : 	if(lpObj->AutoPt && lpParty->AutoPt) return; //fix 2 auto party
; 113  : 
; 114  : 	//BYTE attr = MapC[lpObj->MapNumber].GetAttr(lpObj->X, lpObj->Y);
; 115  : 	//if ( (attr&1) != 1 )
; 116  : 	//{
; 117  : 	//	return true;
; 118  : 	//}
; 119  : 	//else
; 120  : 	//{
; 121  : 	//	return false;
; 122  : 	//}
; 123  : 
; 124  : 	if(!OffExp.CheckTerrain(lpObj))

  000e2	51		 push	 ecx
  000e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?OffExp@@3VcOffExp@@A ; OffExp
  000e8	e8 00 00 00 00	 call	 ?CheckTerrain@cOffExp@@QAE_NPAUOBJECTSTRUCT@@@Z ; cOffExp::CheckTerrain
  000ed	84 c0		 test	 al, al
  000ef	0f 84 fa 00 00
	00		 je	 $LN26@Party

; 125  : 	{
; 126  : 		return;
; 127  : 	}
; 128  : 
; 129  : 	if ( gObj[aIndex].PartyNumber < 0 )

  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fa	83 bc 06 2c 04
	00 00 00	 cmp	 DWORD PTR [esi+eax+1068], 0
  00102	7d 2e		 jge	 SHORT $LN25@Party

; 130  : 	{
; 131  : 		gObj[aIndex].PartyNumber = gParty.Create(aIndex, gObj[aIndex].DBNumber, gObj[aIndex].Level);

  00104	0f bf 8c 06 be
	00 00 00	 movsx	 ecx, WORD PTR [esi+eax+190]
  0010c	8b 54 06 2c	 mov	 edx, DWORD PTR [esi+eax+44]
  00110	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00113	51		 push	 ecx
  00114	52		 push	 edx
  00115	50		 push	 eax
  00116	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0011b	e8 00 00 00 00	 call	 ?Create@PartyClass@@QAEHHHH@Z ; PartyClass::Create
  00120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00126	89 84 0e 2c 04
	00 00		 mov	 DWORD PTR [esi+ecx+1068], eax
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN25@Party:

; 132  : 	}
; 133  : 
; 134  : 	if ( gObj[aIndex].PartyNumber >= 0  && gObj[number].PartyNumber == -1)

  00132	8b 8c 06 2c 04
	00 00		 mov	 ecx, DWORD PTR [esi+eax+1068]
  00139	85 c9		 test	 ecx, ecx
  0013b	0f 88 ae 00 00
	00		 js	 $LN26@Party
  00141	83 bc 07 2c 04
	00 00 ff	 cmp	 DWORD PTR [edi+eax+1068], -1
  00149	0f 85 a0 00 00
	00		 jne	 $LN26@Party

; 135  : 	{
; 136  : 		if( !gParty.Isleader(gObj[aIndex].PartyNumber, aIndex, gObj[aIndex].DBNumber) )

  0014f	8b 54 06 2c	 mov	 edx, DWORD PTR [esi+eax+44]
  00153	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00156	52		 push	 edx
  00157	50		 push	 eax
  00158	51		 push	 ecx
  00159	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0015e	e8 00 00 00 00	 call	 ?Isleader@PartyClass@@QAEHHHH@Z ; PartyClass::Isleader
  00163	85 c0		 test	 eax, eax
  00165	0f 84 84 00 00
	00		 je	 $LN26@Party

; 137  : 		{
; 138  : 			return;
; 139  : 		}
; 140  : #if _NEW_PARTY_SYSTEM_ == TRUE
; 141  : 		if( gParty.GetCount(gObj[aIndex].PartyNumber) >= g_MaxPartyMember )

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00171	8b 94 0e 2c 04
	00 00		 mov	 edx, DWORD PTR [esi+ecx+1068]
  00178	52		 push	 edx
  00179	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0017e	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount
  00183	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_MaxPartyMember@@3HA ; g_MaxPartyMember
  00189	7d 64		 jge	 SHORT $LN26@Party

; 142  : #else
; 143  : 		if( gParty.GetCount(gObj[aIndex].PartyNumber) => 5 )
; 144  : #endif
; 145  : 		{
; 146  : 			return;
; 147  : 		}
; 148  : 
; 149  : 		pnumber = gObj[aIndex].PartyNumber;

  0018b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 150  : 
; 151  : 		int iPartyPos = gParty.Add(gObj[aIndex].PartyNumber, number, gObj[number].DBNumber, gObj[number].Level);

  00190	0f bf 8c 07 be
	00 00 00	 movsx	 ecx, WORD PTR [edi+eax+190]
  00198	8b 54 07 2c	 mov	 edx, DWORD PTR [edi+eax+44]
  0019c	8b 9c 06 2c 04
	00 00		 mov	 ebx, DWORD PTR [esi+eax+1068]
  001a3	8b 45 0c	 mov	 eax, DWORD PTR _number$[ebp]
  001a6	51		 push	 ecx
  001a7	52		 push	 edx
  001a8	50		 push	 eax
  001a9	53		 push	 ebx
  001aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  001af	e8 00 00 00 00	 call	 ?Add@PartyClass@@QAEHHHHH@Z ; PartyClass::Add

; 152  : 
; 153  : 		if ( iPartyPos >= 0 )

  001b4	85 c0		 test	 eax, eax
  001b6	78 20		 js	 SHORT $LN6@Party

; 154  : 		{
; 155  : 			gObj[number].PartyNumber = gObj[aIndex].PartyNumber;

  001b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001bd	8b 8c 06 2c 04
	00 00		 mov	 ecx, DWORD PTR [esi+eax+1068]
  001c4	89 8c 07 2c 04
	00 00		 mov	 DWORD PTR [edi+eax+1068], ecx

; 156  : 
; 157  : 			gParty.Paint(pnumber);

  001cb	53		 push	 ebx
  001cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  001d1	e8 00 00 00 00	 call	 ?Paint@PartyClass@@QAEXH@Z ; PartyClass::Paint
  001d6	eb 0a		 jmp	 SHORT $LN2@Party
$LN6@Party:

; 158  : 		}
; 159  : 		else if ( iPartyPos == -1 )

  001d8	83 f8 ff	 cmp	 eax, -1
  001db	74 12		 je	 SHORT $LN26@Party

; 160  : 		{
; 161  : 			return;
; 162  : 		}
; 163  : 		else if ( iPartyPos == -2 )

  001dd	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  001e0	74 0d		 je	 SHORT $LN26@Party
$LN2@Party:

; 164  : 		{
; 165  : 			return;
; 166  : 		}
; 167  : 	}
; 168  : 
; 169  : 	if ( pnumber >= 0 )

  001e2	85 db		 test	 ebx, ebx
  001e4	78 09		 js	 SHORT $LN26@Party

; 170  : 	{
; 171  : 		CGPartyListAll(pnumber);

  001e6	53		 push	 ebx
  001e7	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  001ec	83 c4 04	 add	 esp, 4
$LN26@Party:
  001ef	5f		 pop	 edi
  001f0	5b		 pop	 ebx
$LN1@Party:
  001f1	5e		 pop	 esi

; 172  : 	}
; 173  : }

  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c2 08 00	 ret	 8
?Party@cAutoParty@@QAEXHH@Z ENDP			; cAutoParty::Party
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SendPartyList@cAutoParty@@QAEXH@Z		; cAutoParty::SendPartyList
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_strncpy:PROC
EXTRN	?PHeadSubSetW@@YAXPAEEEH@Z:PROC			; PHeadSubSetW
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SendPartyList@cAutoParty@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$GSCopy$ = -1724					; size = 4
tv284 = -1720						; size = 4
_number$214704 = -1716					; size = 4
_ztSend$ = -1712					; size = 1706
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?SendPartyList@cAutoParty@@QAEXH@Z PROC			; cAutoParty::SendPartyList, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 06 00
	00		 sub	 esp, 1724		; 000006bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 177  : 	if(!ZtConfig.ZtCustom.AutoParty) return;

  00013	80 3d 08 00 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+8, 0
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 187  : 	for (int  number=OBJ_STARTUSERINDZT;number<OBJMAX;number++)

  0001e	89 b5 44 f9 ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  00024	0f 84 5e 01 00
	00		 je	 $LN10@SendPartyL

; 178  : 
; 179  : 	GCPartyList ztSend;
; 180  : 	ZeroMemory(&ztSend,sizeof(ztSend));

  0002a	57		 push	 edi
  0002b	68 aa 06 00 00	 push	 1706			; 000006aaH
  00030	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _ztSend$[ebp]
  00036	6a 00		 push	 0
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memset

; 181  : 	PHeadSubSetW((LPBYTE)&ztSend, 0xFA, 0x05, sizeof(ztSend));

  0003e	68 aa 06 00 00	 push	 1706			; 000006aaH
  00043	6a 05		 push	 5
  00045	8d 8d 50 f9 ff
	ff		 lea	 ecx, DWORD PTR _ztSend$[ebp]
  0004b	68 fa 00 00 00	 push	 250			; 000000faH
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW

; 182  : 
; 183  : 	int Count = 0;
; 184  : 
; 185  : 	LPOBJ lpObj = &gObj[aIndex];

  00056	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 186  : 	if(lpObj->Connected < PLAYER_PLAYING) return;

  0005c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00062	83 c4 1c	 add	 esp, 28			; 0000001cH
  00065	33 ff		 xor	 edi, edi
  00067	83 7c 16 04 03	 cmp	 DWORD PTR [esi+edx+4], 3
  0006c	0f 8c 15 01 00
	00		 jl	 $LN18@SendPartyL

; 187  : 	for (int  number=OBJ_STARTUSERINDZT;number<OBJMAX;number++)

  00072	b8 00 a7 40 09	 mov	 eax, 155232000		; 0940a700H
  00077	53		 push	 ebx
  00078	c7 85 4c f9 ff
	ff b0 36 00 00	 mov	 DWORD PTR _number$214704[ebp], 14000 ; 000036b0H
  00082	89 85 48 f9 ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  00088	8d 9d 55 f9 ff
	ff		 lea	 ebx, DWORD PTR _ztSend$[ebp+5]
  0008e	8b ff		 npad	 2
$LL17@SendPartyL:

; 188  : 	{
; 189  : 		LPOBJ lpTempObj = &gObj[number];

  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 190  : 
; 191  : 		if(lpTempObj->Connected == PLAYER_PLAYING && lpTempObj->Type == OBJ_USER && lpTempObj->AutoPt )

  00096	83 7c 08 04 03	 cmp	 DWORD PTR [eax+ecx+4], 3
  0009b	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  0009e	0f 85 ab 00 00
	00		 jne	 $LN6@SendPartyL
  000a4	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  000a9	0f 85 a0 00 00
	00		 jne	 $LN6@SendPartyL
  000af	66 83 be 10 28
	00 00 00	 cmp	 WORD PTR [esi+10256], 0
  000b7	0f 84 92 00 00
	00		 je	 $LN6@SendPartyL

; 192  : 		{
; 193  : 			if(lpTempObj->PartyNumber >= 0)

  000bd	83 be 2c 04 00
	00 00		 cmp	 DWORD PTR [esi+1068], 0
  000c4	7c 20		 jl	 SHORT $LN2@SendPartyL

; 194  : 			{
; 195  : 				if( !gParty.Isleader(gObj[number].PartyNumber, number, gObj[number].DBNumber) )

  000c6	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c9	8b 85 4c f9 ff
	ff		 mov	 eax, DWORD PTR _number$214704[ebp]
  000cf	8b 8e 2c 04 00
	00		 mov	 ecx, DWORD PTR [esi+1068]
  000d5	52		 push	 edx
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  000dd	e8 00 00 00 00	 call	 ?Isleader@PartyClass@@QAEHHHH@Z ; PartyClass::Isleader
  000e2	85 c0		 test	 eax, eax
  000e4	74 63		 je	 SHORT $LN15@SendPartyL
$LN2@SendPartyL:

; 196  : 				{
; 197  : 					continue;
; 198  : 				}
; 199  : 			}
; 200  : 
; 201  : 			strncpy(ztSend.Name[Count],lpTempObj->Name,10);

  000e6	6a 0a		 push	 10			; 0000000aH
  000e8	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  000eb	52		 push	 edx
  000ec	53		 push	 ebx
  000ed	e8 00 00 00 00	 call	 _strncpy

; 202  : 			ztSend.Level[Count] = lpTempObj->AutoPt;

  000f2	66 8b 86 10 28
	00 00		 mov	 ax, WORD PTR [esi+10256]
  000f9	66 89 84 7d a2
	fd ff ff	 mov	 WORD PTR _ztSend$[ebp+edi*2+1106], ax

; 203  : 			ztSend.Map[Count] = lpTempObj->MapNumber;

  00101	8a 8e 49 01 00
	00		 mov	 cl, BYTE PTR [esi+329]
  00107	88 8c 3d 6a fe
	ff ff		 mov	 BYTE PTR _ztSend$[ebp+edi+1306], cl

; 204  : 			ztSend.X[Count] = lpTempObj->X;

  0010e	8a 96 44 01 00
	00		 mov	 dl, BYTE PTR [esi+324]
  00114	88 94 3d ce fe
	ff ff		 mov	 BYTE PTR _ztSend$[ebp+edi+1406], dl

; 205  : 			ztSend.Y[Count] = lpTempObj->Y;

  0011b	8a 86 46 01 00
	00		 mov	 al, BYTE PTR [esi+326]
  00121	88 84 3d 32 ff
	ff ff		 mov	 BYTE PTR _ztSend$[ebp+edi+1506], al

; 206  : 			ztSend.Total[Count]  = gParty.GetCount(lpTempObj->PartyNumber);

  00128	8b 8e 2c 04 00
	00		 mov	 ecx, DWORD PTR [esi+1068]
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	51		 push	 ecx
  00132	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00137	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount
  0013c	88 44 3d 96	 mov	 BYTE PTR _ztSend$[ebp+edi+1606], al

; 207  : 			Count++;

  00140	47		 inc	 edi
  00141	83 c3 0b	 add	 ebx, 11			; 0000000bH

; 208  : 			if(Count == 100) break;

  00144	83 ff 64	 cmp	 edi, 100		; 00000064H
  00147	74 22		 je	 SHORT $LN13@SendPartyL
$LN15@SendPartyL:
  00149	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR tv284[ebp]
$LN6@SendPartyL:

; 187  : 	for (int  number=OBJ_STARTUSERINDZT;number<OBJMAX;number++)

  0014f	ff 85 4c f9 ff
	ff		 inc	 DWORD PTR _number$214704[ebp]
  00155	05 50 2b 00 00	 add	 eax, 11088		; 00002b50H
  0015a	89 85 48 f9 ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  00160	3d 80 d7 e9 09	 cmp	 eax, 166320000		; 09e9d780H
  00165	0f 8c 25 ff ff
	ff		 jl	 $LL17@SendPartyL
$LN13@SendPartyL:

; 209  : 		}
; 210  : 	}
; 211  : 
; 212  : 	DataSend(aIndex,(LPBYTE)&ztSend,sizeof(ztSend));

  0016b	8b 85 44 f9 ff
	ff		 mov	 eax, DWORD PTR _aIndex$GSCopy$[ebp]
  00171	68 aa 06 00 00	 push	 1706			; 000006aaH
  00176	8d 95 50 f9 ff
	ff		 lea	 edx, DWORD PTR _ztSend$[ebp]
  0017c	52		 push	 edx
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00183	83 c4 0c	 add	 esp, 12			; 0000000cH
  00186	5b		 pop	 ebx
$LN18@SendPartyL:
  00187	5f		 pop	 edi
$LN10@SendPartyL:

; 213  : }

  00188	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018b	33 cd		 xor	 ecx, ebp
  0018d	5e		 pop	 esi
  0018e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 04 00	 ret	 4
?SendPartyList@cAutoParty@@QAEXH@Z ENDP			; cAutoParty::SendPartyList
_TEXT	ENDS
PUBLIC	?Work@cAutoParty@@QAEXXZ			; cAutoParty::Work
; Function compile flags: /Ogtp
;	COMDAT ?Work@cAutoParty@@QAEXXZ
_TEXT	SEGMENT
_lpObj$214653 = -16					; size = 4
tv230 = -12						; size = 4
_this$ = -8						; size = 4
_aIndex$214649 = -4					; size = 4
?Work@cAutoParty@@QAEXXZ PROC				; cAutoParty::Work, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 46   : 	if(!ZtConfig.ZtCustom.AutoParty) return;

  00006	80 3d 08 00 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+8, 0
  0000d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00010	0f 84 b3 00 00
	00		 je	 $LN9@Work

; 47   : 	for (int  aIndex=OBJ_STARTUSERINDZT;aIndex<OBJMAX;aIndex++)

  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	ba b0 36 00 00	 mov	 edx, 14000		; 000036b0H
  0001d	b8 00 a7 40 09	 mov	 eax, 155232000		; 0940a700H
  00022	57		 push	 edi
  00023	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	89 55 fc	 mov	 DWORD PTR _aIndex$214649[ebp], edx
  0002c	89 45 f4	 mov	 DWORD PTR tv230[ebp], eax
  0002f	90		 npad	 1
$LL11@Work:

; 48   : 	{
; 49   : 		LPOBJ lpObj = &gObj[aIndex];
; 50   : 		if(lpObj->Connected < PLAYER_PLAYING) continue;

  00030	83 7c 38 04 03	 cmp	 DWORD PTR [eax+edi+4], 3
  00035	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00038	89 4d f0	 mov	 DWORD PTR _lpObj$214653[ebp], ecx
  0003b	7c 72		 jl	 SHORT $LN10@Work

; 51   : 		for(int number = 0; number < OBJMAX; number++)

  0003d	33 db		 xor	 ebx, ebx
  0003f	33 f6		 xor	 esi, esi
  00041	eb 03		 jmp	 SHORT $LN7@Work
$LL22@Work:
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$214653[ebp]
$LN7@Work:

; 52   : 		{
; 53   : 			if(aIndex == number) continue;

  00046	3b d3		 cmp	 edx, ebx
  00048	74 50		 je	 SHORT $LN6@Work

; 54   : 
; 55   : 			LPOBJ lpTempObj = &gObj[number];
; 56   : 
; 57   : 			if(lpTempObj->Connected == PLAYER_PLAYING && lpTempObj->Type == OBJ_USER)

  0004a	83 7c 3e 04 03	 cmp	 DWORD PTR [esi+edi+4], 3
  0004f	75 49		 jne	 SHORT $LN6@Work
  00051	66 83 7c 3e 68
	01		 cmp	 WORD PTR [esi+edi+104], 1
  00057	75 41		 jne	 SHORT $LN6@Work

; 58   : 			{
; 59   : 				//if(lpTempObj->m_State == 1 || lpTempObj->m_State == 2)
; 60   : 				{
; 61   : 					if(lpObj->MapNumber == lpTempObj->MapNumber)

  00059	8a 81 49 01 00
	00		 mov	 al, BYTE PTR [ecx+329]
  0005f	3a 84 3e 49 01
	00 00		 cmp	 al, BYTE PTR [esi+edi+329]
  00066	75 32		 jne	 SHORT $LN6@Work

; 62   : 					{
; 63   : 						if(this->CheckDistance(aIndex,lpTempObj->X,lpTempObj->Y) == 1)

  00068	0f bf 8c 3e 46
	01 00 00	 movsx	 ecx, WORD PTR [esi+edi+326]
  00070	0f bf 84 3e 44
	01 00 00	 movsx	 eax, WORD PTR [esi+edi+324]
  00078	51		 push	 ecx
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	50		 push	 eax
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?CheckDistance@cAutoParty@@QAE_NHHH@Z ; cAutoParty::CheckDistance
  00083	3c 01		 cmp	 al, 1
  00085	75 13		 jne	 SHORT $LN6@Work

; 64   : 						{
; 65   : 							this->Party(aIndex, number);

  00087	8b 4d fc	 mov	 ecx, DWORD PTR _aIndex$214649[ebp]
  0008a	53		 push	 ebx
  0008b	51		 push	 ecx
  0008c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?Party@cAutoParty@@QAEXHH@Z ; cAutoParty::Party
  00094	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN6@Work:

; 51   : 		for(int number = 0; number < OBJMAX; number++)

  0009a	8b 55 fc	 mov	 edx, DWORD PTR _aIndex$214649[ebp]
  0009d	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  000a3	43		 inc	 ebx
  000a4	81 fe 80 d7 e9
	09		 cmp	 esi, 166320000		; 09e9d780H
  000aa	7c 97		 jl	 SHORT $LL22@Work
  000ac	8b 45 f4	 mov	 eax, DWORD PTR tv230[ebp]
$LN10@Work:

; 47   : 	for (int  aIndex=OBJ_STARTUSERINDZT;aIndex<OBJMAX;aIndex++)

  000af	05 50 2b 00 00	 add	 eax, 11088		; 00002b50H
  000b4	42		 inc	 edx
  000b5	89 55 fc	 mov	 DWORD PTR _aIndex$214649[ebp], edx
  000b8	89 45 f4	 mov	 DWORD PTR tv230[ebp], eax
  000bb	3d 80 d7 e9 09	 cmp	 eax, 166320000		; 09e9d780H
  000c0	0f 8c 6a ff ff
	ff		 jl	 $LL11@Work
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
$LN9@Work:

; 66   : 						}
; 67   : 					}
; 68   : 				}
; 69   : 			}
; 70   : 		}
; 71   : 	}
; 72   : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
?Work@cAutoParty@@QAEXXZ ENDP				; cAutoParty::Work
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgAutoParty@@YAXXZ
text$yc	SEGMENT
??__EgAutoParty@@YAXXZ PROC				; `dynamic initializer for 'gAutoParty'', COMDAT

; 18   : cAutoParty gAutoParty;

  00000	68 00 00 00 00	 push	 OFFSET ??__FgAutoParty@@YAXXZ ; `dynamic atexit destructor for 'gAutoParty''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EgAutoParty@@YAXXZ ENDP				; `dynamic initializer for 'gAutoParty''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgAutoParty@@YAXXZ
text$yd	SEGMENT
??__FgAutoParty@@YAXXZ PROC				; `dynamic atexit destructor for 'gAutoParty'', COMDAT
  00000	c3		 ret	 0
??__FgAutoParty@@YAXXZ ENDP				; `dynamic atexit destructor for 'gAutoParty''
text$yd	ENDS
PUBLIC	?gAutoParty@@3VcAutoParty@@A			; gAutoParty
_BSS	SEGMENT
?gAutoParty@@3VcAutoParty@@A DB 01H DUP (?)		; gAutoParty
_BSS	ENDS
CRT$XCU	SEGMENT
_gAutoParty$initializer$ DD FLAT:??__EgAutoParty@@YAXXZ
CRT$XCU	ENDS
END
