; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\BanSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	?Read@CBanSystem@@QAEXPAD@Z			; CBanSystem::Read
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
; File e:\work\tranet_version\gs\gameserver\bansystem.cpp
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@CBanSystem@@QAEXPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?Read@CBanSystem@@QAEXPAD@Z PROC			; CBanSystem::Read, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 	this->Enable = GetPrivateProfileInt("ZtTeam", "Enable", 1, filename);

  00003	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	6a 01		 push	 1
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00014	8b f1		 mov	 esi, ecx
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0001c	85 c0		 test	 eax, eax
  0001e	0f 95 c1	 setne	 cl
  00021	88 0e		 mov	 BYTE PTR [esi], cl
  00023	5e		 pop	 esi

; 42   : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?Read@CBanSystem@@QAEXPAD@Z ENDP			; CBanSystem::Read
_TEXT	ENDS
PUBLIC	?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 880  : 		}

  00016	c3		 ret	 0
?size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000b	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]

; 941  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEAAUBANHDD_DATA@@I@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBE_NPBUBANHDD_DATA@@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXPAUBANHDD_DATA@@0@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ PROC		; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UBANHDD_DATA@@@std@@QAE@XZ ENDP		; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 778  : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UBANHDD_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<BANHDD_DATA>::allocator<BANHDD_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z PROC ; std::allocator<BANHDD_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@I@Z ENDP ; std::allocator<BANHDD_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=, COMDAT
; _this$ = ecx

; 151  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 152  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 153  : 		if (this->_Getcont() == 0
; 154  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 155  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 156  : 			{	// report error
; 157  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 158  : 			_SCL_SECURE_OUT_OF_RANGE;
; 159  : 			}
; 160  : 
; 161  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 162  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 163  : 		_SCL_SECURE_VALIDATE_RANGE(
; 164  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 165  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 167  : 
; 168  : 		_Ptr += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0000b	03 c9		 add	 ecx, ecx
  0000d	03 c9		 add	 ecx, ecx
  0000f	03 c9		 add	 ecx, ecx
  00011	01 08		 add	 DWORD PTR [eax], ecx

; 169  : 		return (*this);
; 170  : 		}

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ ; std::allocator<BANHDD_DATA>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ PROC	; std::allocator<BANHDD_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UBANHDD_DATA@@@std@@QBEIXZ ENDP	; std::allocator<BANHDD_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z ; std::addressof<BANHDD_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z PROC ; std::addressof<BANHDD_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUBANHDD_DATA@@@std@@YAPBUBANHDD_DATA@@ABU1@@Z ENDP ; std::addressof<BANHDD_DATA const >
_TEXT	ENDS
PUBLIC	??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z PROC ; std::forward<BANHDD_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUBANHDD_DATA@@@std@@YAAAUBANHDD_DATA@@AAU1@@Z ENDP ; std::forward<BANHDD_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z ; std::allocator<BANHDD_DATA>::construct<BANHDD_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z PROC ; std::allocator<BANHDD_DATA>::construct<BANHDD_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@construct:

; 209  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??$construct@AAUBANHDD_DATA@@@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@AAU2@@Z ENDP ; std::allocator<BANHDD_DATA>::construct<BANHDD_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z ; std::forward<BANHDD_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z PROC ; std::forward<BANHDD_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUBANHDD_DATA@@@std@@YAABUBANHDD_DATA@@ABU1@@Z ENDP ; std::forward<BANHDD_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z PROC ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UBANHDD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUBANHDD_DATA@@0@Z ENDP ; std::_Ptr_cat<BANHDD_DATA,BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z ; std::_Construct<BANHDD_DATA,BANHDD_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z PROC ; std::_Construct<BANHDD_DATA,BANHDD_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@Construct:

; 49   : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Construct@UBANHDD_DATA@@ABU1@@std@@YAXPAUBANHDD_DATA@@ABU1@@Z ENDP ; std::_Construct<BANHDD_DATA,BANHDD_DATA const &>
_TEXT	ENDS
PUBLIC	??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ; std::move<BANHDD_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z PROC ; std::move<BANHDD_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ENDP ; std::move<BANHDD_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z ; std::_Val_type<BANHDD_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z PROC ; std::_Val_type<BANHDD_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@PAU1@@Z ENDP ; std::_Val_type<BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z ; std::_Destroy<BANHDD_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z PROC ; std::_Destroy<BANHDD_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UBANHDD_DATA@@@std@@YAXPAUBANHDD_DATA@@@Z ENDP ; std::_Destroy<BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ; std::forward<BANHDD_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z PROC ; std::forward<BANHDD_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UBANHDD_DATA@@@std@@YA$$QAUBANHDD_DATA@@AAU1@@Z ENDP ; std::forward<BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?Chat@CBanSystem@@QAE_NH@Z			; CBanSystem::Chat
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\bansystem.cpp
;	COMDAT ?Chat@CBanSystem@@QAE_NH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?Chat@CBanSystem@@QAE_NH@Z PROC				; CBanSystem::Chat, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 	if(!this->Enable)

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	75 06		 jne	 SHORT $LN5@Chat

; 47   : 	{
; 48   : 		return true;

  00008	b0 01		 mov	 al, 1

; 58   : 		}
; 59   : 	}
; 60   : 
; 61   : 	return true;
; 62   : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN5@Chat:
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 49   : 	}	
; 50   : 
; 51   : 	for(int i = 0; i < this->m_HddData.size(); i++)

  00011	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00014	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00017	2b cf		 sub	 ecx, edi
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 e9		 imul	 ecx
  00020	c1 fa 02	 sar	 edx, 2
  00023	8b ca		 mov	 ecx, edx
  00025	33 f6		 xor	 esi, esi
  00027	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0002a	03 ca		 add	 ecx, edx
  0002c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0002f	74 40		 je	 SHORT $LN15@Chat
  00031	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00034	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003a	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00040	8b 9c 1a 8c 28
	00 00		 mov	 ebx, DWORD PTR [edx+ebx+10380]
  00047	8d 57 10	 lea	 edx, DWORD PTR [edi+16]
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL4@Chat:

; 52   : 	{
; 53   : 		BANHDD_DATA & ritem = this->m_HddData[i];
; 54   : 
; 55   : 		if(ritem.Hdd == gObj[aIndex].hdd_id && ritem.Time > 0 && ritem.Type == 1)

  00050	39 5a fc	 cmp	 DWORD PTR [edx-4], ebx
  00053	75 0a		 jne	 SHORT $LN3@Chat
  00055	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00058	76 05		 jbe	 SHORT $LN3@Chat
  0005a	39 42 04	 cmp	 DWORD PTR [edx+4], eax
  0005d	74 10		 je	 SHORT $LN13@Chat
$LN3@Chat:

; 49   : 	}	
; 50   : 
; 51   : 	for(int i = 0; i < this->m_HddData.size(); i++)

  0005f	03 f0		 add	 esi, eax
  00061	83 c2 18	 add	 edx, 24			; 00000018H
  00064	3b f1		 cmp	 esi, ecx
  00066	72 e8		 jb	 SHORT $LL4@Chat
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx

; 58   : 		}
; 59   : 	}
; 60   : 
; 61   : 	return true;
; 62   : }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN13@Chat:

; 56   : 		{
; 57   : 			return false;

  0006f	32 c0		 xor	 al, al
$LN15@Chat:
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 58   : 		}
; 59   : 	}
; 60   : 
; 61   : 	return true;
; 62   : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?Chat@CBanSystem@@QAE_NH@Z ENDP				; CBanSystem::Chat
_TEXT	ENDS
PUBLIC	?Player@CBanSystem@@QAE_NH@Z			; CBanSystem::Player
; Function compile flags: /Ogtp
;	COMDAT ?Player@CBanSystem@@QAE_NH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?Player@CBanSystem@@QAE_NH@Z PROC			; CBanSystem::Player, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	if(!this->Enable)

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	75 06		 jne	 SHORT $LN5@Player

; 67   : 	{
; 68   : 		return true;

  00008	b0 01		 mov	 al, 1

; 82   : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN5@Player:
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 69   : 	}	
; 70   : 
; 71   : 	for(int i = 0; i < this->m_HddData.size(); i++)

  00010	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00013	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00016	2b cf		 sub	 ecx, edi
  00018	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001d	f7 e9		 imul	 ecx
  0001f	c1 fa 02	 sar	 edx, 2
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	33 f6		 xor	 esi, esi
  00029	03 c2		 add	 eax, edx
  0002b	74 31		 je	 SHORT $LN2@Player
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0003c	8b 94 11 8c 28
	00 00		 mov	 edx, DWORD PTR [ecx+edx+10380]
  00043	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
$LL4@Player:

; 72   : 	{
; 73   : 		BANHDD_DATA & ritem = this->m_HddData[i];
; 74   : 
; 75   : 		if(ritem.Hdd == gObj[aIndex].hdd_id && ritem.Time > 0 && ritem.Type == 0)

  00046	39 51 fc	 cmp	 DWORD PTR [ecx-4], edx
  00049	75 0b		 jne	 SHORT $LN3@Player
  0004b	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0004e	76 06		 jbe	 SHORT $LN3@Player
  00050	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00054	74 10		 je	 SHORT $LN13@Player
$LN3@Player:

; 69   : 	}	
; 70   : 
; 71   : 	for(int i = 0; i < this->m_HddData.size(); i++)

  00056	46		 inc	 esi
  00057	83 c1 18	 add	 ecx, 24			; 00000018H
  0005a	3b f0		 cmp	 esi, eax
  0005c	72 e8		 jb	 SHORT $LL4@Player
$LN2@Player:
  0005e	5f		 pop	 edi

; 78   : 		}
; 79   : 	}
; 80   : 
; 81   : 	return true;

  0005f	b0 01		 mov	 al, 1
  00061	5e		 pop	 esi

; 82   : }

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
$LN13@Player:
  00066	5f		 pop	 edi

; 76   : 		{
; 77   : 			return false;

  00067	32 c0		 xor	 al, al
  00069	5e		 pop	 esi

; 82   : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?Player@CBanSystem@@QAE_NH@Z ENDP			; CBanSystem::Player
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z PROC ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@V?$allocator@UBANHDD_DATA@@@1@@Z ENDP ; std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=, COMDAT
; _this$ = ecx

; 357  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 358  : 		*(_Mybase *)this += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0000b	03 c9		 add	 ecx, ecx
  0000d	03 c9		 add	 ecx, ecx
  0000f	03 c9		 add	 ecx, ecx
  00011	01 08		 add	 DWORD PTR [eax], ecx

; 359  : 		return (*this);
; 360  : 		}

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]
  00008	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000d	f7 ea		 imul	 edx
  0000f	c1 fa 02	 sar	 edx, 2
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00019	8b c8		 mov	 ecx, eax
  0001b	d1 e9		 shr	 ecx, 1
  0001d	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00022	2b d1		 sub	 edx, ecx
  00024	3b d0		 cmp	 edx, eax
  00026	73 04		 jae	 SHORT $LN4@Grow_to
  00028	33 c0		 xor	 eax, eax
  0002a	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0002c	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00035	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Grow_to@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@Cons_val:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z ; std::_Allocate<BANHDD_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T210967 = -12						; size = 12
$T210972 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z PROC ; std::_Allocate<BANHDD_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 46		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN1@Allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002b	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T210972[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T210967[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T210972[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T210967[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T210967[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UBANHDD_DATA@@@std@@YAPAUBANHDD_DATA@@IPAU1@@Z ENDP ; std::_Allocate<BANHDD_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z ; std::allocator<BANHDD_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z PROC ; std::allocator<BANHDD_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN5@construct@2:

; 198  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@ABU3@@Z ENDP ; std::allocator<BANHDD_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 2e		 je	 SHORT $LN1@Move
  00010	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0001e	89 70 08	 mov	 DWORD PTR [eax+8], esi
  00021	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00024	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  00027	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  0002a	89 70 10	 mov	 DWORD PTR [eax+16], esi
  0002d	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00030	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00033	83 c1 18	 add	 ecx, 24			; 00000018H
  00036	83 c0 18	 add	 eax, 24			; 00000018H
  00039	3b ca		 cmp	 ecx, edx
  0003b	75 d4		 jne	 SHORT $LL3@Move
  0003d	5e		 pop	 esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z ; std::allocator<BANHDD_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z PROC ; std::allocator<BANHDD_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@@Z ENDP ; std::allocator<BANHDD_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z ; std::allocator<BANHDD_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z PROC ; std::allocator<BANHDD_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@construct@3:

; 203  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?construct@?$allocator@UBANHDD_DATA@@@std@@QAEXPAUBANHDD_DATA@@$$QAU3@@Z ENDP ; std::allocator<BANHDD_DATA>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+
; Function compile flags: /Ogtp
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+, COMDAT
; _this$ = ecx

; 363  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 364  : 		_Myiter _Tmp = *this;
; 365  : 		return (_Tmp += _Off);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000b	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 10		 mov	 DWORD PTR [eax], edx

; 366  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??H?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator+
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QAE@PAUBANHDD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::_Vector_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<BANHDD_DATA,std::allocator<BANHDD_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z
_TEXT	SEGMENT
$T211085 = -12						; size = 12
$T211083 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z PROC ; std::allocator<BANHDD_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 46		 je	 SHORT $LN1@allocate
  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN3@allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T211083[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T211085[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T211083[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T211085[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T211085[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z ENDP ; std::allocator<BANHDD_DATA>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN9@Cons_val@2:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$211146 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z PROC ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$211146[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00@Z ENDP ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z PROC ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<BANHDD_DATA>,BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@Cons_val@3:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<BANHDD_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@U3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA>
  0001e	83 c6 18	 add	 esi, 24			; 00000018H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 18	 add	 edi, 24			; 00000018H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<BANHDD_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAXPAUBANHDD_DATA@@0AAV?$allocator@UBANHDD_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z ; std::_Uninitialized_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$211262 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z PROC ; std::_Uninitialized_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$211262[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXPAUBANHDD_DATA@@0@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Umove<BANHDD_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$211295 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Umove<BANHDD_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$211295[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUBANHDD_DATA@@@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEPAUBANHDD_DATA@@PAU2@00@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Umove<BANHDD_DATA *>
_TEXT	ENDS
PUBLIC	??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::~vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$211334 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Cat$211334[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 c0 18	 add	 eax, 24			; 00000018H
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1183 : 		--this->_Mylast;
; 1184 : 		return (_Make_iter(_Where));

  0001b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]
  00021	83 c4 10	 add	 esp, 16			; 00000010H
  00024	83 46 04 e8	 add	 DWORD PTR [esi+4], -24	; ffffffe8H
  00028	89 10		 mov	 DWORD PTR [eax], edx
  0002a	5e		 pop	 esi

; 1185 : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$211436 = 12					; size = 1
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00006	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	89 07		 mov	 DWORD PTR [edi], eax
  00012	3b c2		 cmp	 eax, edx
  00014	74 17		 je	 SHORT $LN30@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00019	53		 push	 ebx
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR __Cat$211436[ebp]
  0001d	53		 push	 ebx
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00029	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002c	5b		 pop	 ebx
$LN30@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 1214 : 		}

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$210038 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$211493 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00036	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004c	f7 e9		 imul	 ecx
  0004e	c1 fa 02	 sar	 edx, 2
  00051	8b c2		 mov	 eax, edx
  00053	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00056	03 c2		 add	 eax, edx
  00058	3b c3		 cmp	 eax, ebx
  0005a	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005c	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005f	53		 push	 ebx
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@UBANHDD_DATA@@@std@@QAEPAUBANHDD_DATA@@I@Z ; std::allocator<BANHDD_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00067	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$211493[ebp]
  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006d	8b 16		 mov	 edx, DWORD PTR [esi]
  0006f	53		 push	 ebx
  00070	6a 00		 push	 0
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	89 45 ec	 mov	 DWORD PTR __Ptr$210038[ebp], eax
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00080	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUBANHDD_DATA@@PAU1@V?$allocator@UBANHDD_DATA@@@std@@U1@@std@@YAPAUBANHDD_DATA@@PAU1@00AAV?$allocator@UBANHDD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<BANHDD_DATA *,BANHDD_DATA *,std::allocator<BANHDD_DATA>,BANHDD_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00085	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00087	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008a	2b cb		 sub	 ecx, ebx
  0008c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00091	f7 e9		 imul	 ecx
  00093	c1 fa 02	 sar	 edx, 2
  00096	8b fa		 mov	 edi, edx
  00098	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	03 fa		 add	 edi, edx

; 761  : 			if (this->_Myfirst != 0)

  000a0	85 db		 test	 ebx, ebx
  000a2	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000ad	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000b0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000b3	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$210038[ebp]
  000b6	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000b9	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000bc	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000bf	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  000c2	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000c5	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000db	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$210038[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000e7	6a 00		 push	 0
  000e9	6a 00		 push	 0
  000eb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000f0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve
PUBLIC	??1CBanSystem@@QAE@XZ				; CBanSystem::~CBanSystem
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\bansystem.cpp
;	COMDAT ??1CBanSystem@@QAE@XZ
_TEXT	SEGMENT
??1CBanSystem@@QAE@XZ PROC				; CBanSystem::~CBanSystem, COMDAT
; _this$ = ecx

; 21   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 22   : }

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@CBanSystem
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@CBanSystem:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1CBanSystem@@QAE@XZ ENDP				; CBanSystem::~CBanSystem
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DSReqDelete@CBanSystem@@QAEXPAD@Z		; CBanSystem::DSReqDelete
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
; Function compile flags: /Ogtp
;	COMDAT ?DSReqDelete@CBanSystem@@QAEXPAD@Z
_TEXT	SEGMENT
tv378 = -32						; size = 4
__Cat$211667 = -28					; size = 1
_this$GSCopy$ = -28					; size = 4
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_Name$ = 8						; size = 4
?DSReqDelete@CBanSystem@@QAEXPAD@Z PROC			; CBanSystem::DSReqDelete, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _Name$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 134  : 	if(!this->Enable)

  00017	80 3f 00	 cmp	 BYTE PTR [edi], 0

; 147  : 		{
; 148  : 			this->m_HddData.erase(this->m_HddData.begin()+i);

  0001a	89 7d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0001d	0f 84 cf 00 00
	00		 je	 $LN2@DSReqDelet

; 141  : 	memcpy(&pMsg.Name, Name, sizeof(pMsg.Name));

  00023	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	66 8b 56 08	 mov	 dx, WORD PTR [esi+8]
  0002c	53		 push	 ebx
  0002d	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 142  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00030	6a 14		 push	 20			; 00000014H
  00032	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00035	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  00038	8a 46 0a	 mov	 al, BYTE PTR [esi+10]
  0003b	51		 push	 ecx
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00041	c7 45 e8 c1 14
	eb 22		 mov	 DWORD PTR _pMsg$[ebp], 585831617 ; 22eb14c1H
  00048	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+12], dx
  0004c	88 45 f6	 mov	 BYTE PTR _pMsg$[ebp+14], al
  0004f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 143  : 
; 144  : 	for(int i = 0; i < this->m_HddData.size(); i++)

  00054	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00057	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0005a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005f	f7 e9		 imul	 ecx
  00061	c1 fa 02	 sar	 edx, 2
  00064	8b fa		 mov	 edi, edx
  00066	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00069	33 db		 xor	 ebx, ebx
  0006b	03 fa		 add	 edi, edx
  0006d	0f 84 7e 00 00
	00		 je	 $LN50@DSReqDelet

; 135  : 	{
; 136  : 		return;
; 137  : 	}
; 138  : 
; 139  : 	PMSG_DELETE_BANSYSTEM pMsg;
; 140  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x22, sizeof(pMsg));

  00073	8b 55 e4	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00076	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00079	89 45 e0	 mov	 DWORD PTR tv378[ebp], eax
  0007c	8d 64 24 00	 npad	 4
$LL49@DSReqDelet:

; 145  : 	{
; 146  : 		if(!strcmp(this->m_HddData[i].Name, Name))

  00080	8b 45 e0	 mov	 eax, DWORD PTR tv378[ebp]
  00083	8b ce		 mov	 ecx, esi
$LL45@DSReqDelet:
  00085	8a 10		 mov	 dl, BYTE PTR [eax]
  00087	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00089	75 1a		 jne	 SHORT $LN46@DSReqDelet
  0008b	84 d2		 test	 dl, dl
  0008d	74 12		 je	 SHORT $LN47@DSReqDelet
  0008f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00092	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00095	75 0e		 jne	 SHORT $LN46@DSReqDelet
  00097	83 c0 02	 add	 eax, 2
  0009a	83 c1 02	 add	 ecx, 2
  0009d	84 d2		 test	 dl, dl
  0009f	75 e4		 jne	 SHORT $LL45@DSReqDelet
$LN47@DSReqDelet:
  000a1	33 c0		 xor	 eax, eax
  000a3	eb 05		 jmp	 SHORT $LN48@DSReqDelet
$LN46@DSReqDelet:
  000a5	1b c0		 sbb	 eax, eax
  000a7	83 d8 ff	 sbb	 eax, -1
$LN48@DSReqDelet:
  000aa	85 c0		 test	 eax, eax
  000ac	74 1c		 je	 SHORT $LN43@DSReqDelet

; 143  : 
; 144  : 	for(int i = 0; i < this->m_HddData.size(); i++)

  000ae	83 45 e0 18	 add	 DWORD PTR tv378[ebp], 24 ; 00000018H
  000b2	43		 inc	 ebx
  000b3	3b df		 cmp	 ebx, edi
  000b5	72 c9		 jb	 SHORT $LL49@DSReqDelet
  000b7	5b		 pop	 ebx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi

; 149  : 			break;
; 150  : 		}
; 151  : 	}
; 152  : 
; 153  : }

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	33 cd		 xor	 ecx, ebp
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
$LN43@DSReqDelet:

; 147  : 		{
; 148  : 			this->m_HddData.erase(this->m_HddData.begin()+i);

  000ca	8b 55 e4	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  000cd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000d0	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  000d3	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  000d6	8b 4d e4	 mov	 ecx, DWORD PTR __Cat$211667[ebp]
  000d9	51		 push	 ecx
  000da	50		 push	 eax
  000db	8b f2		 mov	 esi, edx
  000dd	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000e0	52		 push	 edx
  000e1	83 c0 18	 add	 eax, 24			; 00000018H
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  000ea	83 c4 10	 add	 esp, 16			; 00000010H
  000ed	83 46 08 e8	 add	 DWORD PTR [esi+8], -24	; ffffffe8H
$LN50@DSReqDelet:
  000f1	5b		 pop	 ebx
$LN2@DSReqDelet:

; 149  : 			break;
; 150  : 		}
; 151  : 	}
; 152  : 
; 153  : }

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f5	5f		 pop	 edi
  000f6	33 cd		 xor	 ecx, ebp
  000f8	5e		 pop	 esi
  000f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
?DSReqDelete@CBanSystem@@QAEXPAD@Z ENDP			; CBanSystem::DSReqDelete
_TEXT	ENDS
PUBLIC	?Run@CBanSystem@@QAEXXZ				; CBanSystem::Run
; Function compile flags: /Ogtp
;	COMDAT ?Run@CBanSystem@@QAEXXZ
_TEXT	SEGMENT
?Run@CBanSystem@@QAEXXZ PROC				; CBanSystem::Run, COMDAT
; _this$ = ecx

; 156  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 157  : 	for(int i = 0; i < this->m_HddData.size(); i++)

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	2b 4e 04	 sub	 ecx, DWORD PTR [esi+4]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	f7 e9		 imul	 ecx
  00010	c1 fa 02	 sar	 edx, 2
  00013	8b c2		 mov	 eax, edx
  00015	57		 push	 edi
  00016	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00019	33 ff		 xor	 edi, edi
  0001b	03 c2		 add	 eax, edx
  0001d	74 44		 je	 SHORT $LN4@Run
  0001f	53		 push	 ebx
  00020	33 db		 xor	 ebx, ebx
$LL6@Run:

; 158  : 	{
; 159  : 		BANHDD_DATA & ritem = this->m_HddData[i];

  00022	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 160  : 
; 161  : 		if(ritem.Time > 0)

  00025	8b 4c 18 10	 mov	 ecx, DWORD PTR [eax+ebx+16]
  00029	03 c3		 add	 eax, ebx
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 14		 je	 SHORT $LN5@Run

; 162  : 		{
; 163  : 			if(ritem.Hdd != NULL)

  0002f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00033	74 0e		 je	 SHORT $LN5@Run

; 164  : 			{
; 165  : 				ritem.Time--;

  00035	49		 dec	 ecx
  00036	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 166  : 
; 167  : 				if(ritem.Time <= 0)

  00039	75 08		 jne	 SHORT $LN5@Run

; 168  : 				{
; 169  : 					this->DSReqDelete(ritem.Name);

  0003b	50		 push	 eax
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ?DSReqDelete@CBanSystem@@QAEXPAD@Z ; CBanSystem::DSReqDelete
$LN5@Run:

; 157  : 	for(int i = 0; i < this->m_HddData.size(); i++)

  00043	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00046	2b 4e 04	 sub	 ecx, DWORD PTR [esi+4]
  00049	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004e	f7 e9		 imul	 ecx
  00050	c1 fa 02	 sar	 edx, 2
  00053	8b ca		 mov	 ecx, edx
  00055	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00058	47		 inc	 edi
  00059	03 ca		 add	 ecx, edx
  0005b	83 c3 18	 add	 ebx, 24			; 00000018H
  0005e	3b f9		 cmp	 edi, ecx
  00060	72 c0		 jb	 SHORT $LL6@Run
  00062	5b		 pop	 ebx
$LN4@Run:
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 170  : 				}
; 171  : 			}
; 172  : 		}
; 173  : 	}
; 174  : }

  00065	c3		 ret	 0
?Run@CBanSystem@@QAEXXZ ENDP				; CBanSystem::Run
_TEXT	ENDS
PUBLIC	?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Cat$211869 = -4					; size = 1
?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1218 : 		erase(begin(), end());

  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	3b c8		 cmp	 ecx, eax
  0000e	74 12		 je	 SHORT $LN19@clear
  00010	8b 55 fc	 mov	 edx, DWORD PTR __Cat$211869[ebp]
  00013	52		 push	 edx
  00014	51		 push	 ecx
  00015	50		 push	 eax
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN19@clear:
  00022	5e		 pop	 esi

; 1219 : 		}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?clear@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 39		 mov	 edi, DWORD PTR [ecx]
  0000a	2b d7		 sub	 edx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 ea		 imul	 edx

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	c1 fa 02	 sar	 edx, 2
  00019	8b f2		 mov	 esi, edx
  0001b	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001e	03 f2		 add	 esi, edx
  00020	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00025	2b d0		 sub	 edx, eax
  00027	3b d6		 cmp	 edx, esi
  00029	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00030	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	03 f0		 add	 esi, eax
  0003a	2b d7		 sub	 edx, edi
  0003c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00041	f7 ea		 imul	 edx
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	3b f0		 cmp	 esi, eax
  0004f	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00051	8b d0		 mov	 edx, eax
  00053	d1 ea		 shr	 edx, 1
  00055	bf aa aa aa 0a	 mov	 edi, 178956970		; 0aaaaaaaH
  0005a	2b fa		 sub	 edi, edx
  0005c	3b f8		 cmp	 edi, eax
  0005e	73 04		 jae	 SHORT $LN23@Reserve
  00060	33 c0		 xor	 eax, eax
  00062	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00064	03 c2		 add	 eax, edx
$LN24@Reserve:
  00066	3b c6		 cmp	 eax, esi
  00068	73 02		 jae	 SHORT $LN20@Reserve
  0006a	8b c6		 mov	 eax, esi
$LN20@Reserve:
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::reserve
$LN1@Reserve:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi

; 1298 : 		}

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CBanSystem@@QAE@XZ				; CBanSystem::CBanSystem
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\bansystem.cpp
;	COMDAT ??0CBanSystem@@QAE@XZ
_TEXT	SEGMENT
__Cat$212188 = -4					; size = 1
??0CBanSystem@@QAE@XZ PROC				; CBanSystem::CBanSystem, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	33 c0		 xor	 eax, eax
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 17   : 	this->m_HddData.clear();

  00009	8b c8		 mov	 ecx, eax
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00011	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00014	3b c8		 cmp	 ecx, eax
  00016	74 12		 je	 SHORT $LN59@CBanSystem@2
  00018	8b 55 fc	 mov	 edx, DWORD PTR __Cat$212188[ebp]
  0001b	52		 push	 edx
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN59@CBanSystem@2:

; 18   : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CBanSystem@@QAE@XZ ENDP				; CBanSystem::CBanSystem
_TEXT	ENDS
PUBLIC	??_C@_0BG@GAOGKOGC@ZtData?2BanChatHdd?4dat?$AA@	; `string'
PUBLIC	?Load@CBanSystem@@QAEXXZ			; CBanSystem::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0BG@GAOGKOGC@ZtData?2BanChatHdd?4dat?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BG@GAOGKOGC@ZtData?2BanChatHdd?4dat?$AA@ DB 'ZtData\BanChatHdd.dat'
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\bansystem.cpp
CONST	ENDS
;	COMDAT ?Load@CBanSystem@@QAEXXZ
_TEXT	SEGMENT
__Cat$212421 = -4					; size = 1
?Load@CBanSystem@@QAEXXZ PROC				; CBanSystem::Load, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 26   : 	this->Enable = 0;

  00007	c6 06 00	 mov	 BYTE PTR [esi], 0

; 27   : 
; 28   : 	this->m_HddData.clear();

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00010	3b c8		 cmp	 ecx, eax
  00012	74 12		 je	 SHORT $LN23@Load
  00014	8b 55 fc	 mov	 edx, DWORD PTR __Cat$212421[ebp]
  00017	52		 push	 edx
  00018	51		 push	 ecx
  00019	50		 push	 eax
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN23@Load:

; 29   : 
; 30   : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || 
; 31   : 	   g_ZtLicense.CheckUser(eZtUB::GredyLocal) || 
; 32   : 	   g_ZtLicense.CheckUser(eZtUB::Gredy2) || 
; 33   : 	   g_ZtLicense.CheckUser(eZtUB::Escalate))

  00026	6a 20		 push	 32			; 00000020H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00032	84 c0		 test	 al, al
  00034	75 30		 jne	 SHORT $LN1@Load
  00036	6a 21		 push	 33			; 00000021H
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00042	84 c0		 test	 al, al
  00044	75 20		 jne	 SHORT $LN1@Load
  00046	6a 22		 push	 34			; 00000022H
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0004d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00052	84 c0		 test	 al, al
  00054	75 10		 jne	 SHORT $LN1@Load
  00056	6a 40		 push	 64			; 00000040H
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00062	84 c0		 test	 al, al
  00064	74 17		 je	 SHORT $LN2@Load
$LN1@Load:

; 34   : 	{
; 35   : 		this->Read(gDirPath.GetNewPath("ZtData\\BanChatHdd.dat"));

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GAOGKOGC@ZtData?2BanChatHdd?4dat?$AA@
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00070	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00075	50		 push	 eax
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?Read@CBanSystem@@QAEXPAD@Z ; CBanSystem::Read
$LN2@Load:
  0007d	5e		 pop	 esi

; 36   : 	}
; 37   : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?Load@CBanSystem@@QAEXXZ ENDP				; CBanSystem::Load
_TEXT	ENDS
PUBLIC	?DSReqSelect@CBanSystem@@QAEXXZ			; CBanSystem::DSReqSelect
; Function compile flags: /Ogtp
;	COMDAT ?DSReqSelect@CBanSystem@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
__Cat$212649 = -7					; size = 1
?DSReqSelect@CBanSystem@@QAEXXZ PROC			; CBanSystem::DSReqSelect, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 86   : 	if(!this->Enable)

  00009	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000c	74 37		 je	 SHORT $LN2@DSReqSelec

; 87   : 	{
; 88   : 		return;
; 89   : 	}
; 90   : 
; 91   : 	this->m_HddData.clear();

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00014	3b c8		 cmp	 ecx, eax
  00016	74 12		 je	 SHORT $LN22@DSReqSelec
  00018	8b 55 f9	 mov	 edx, DWORD PTR __Cat$212649[ebp]
  0001b	52		 push	 edx
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUBANHDD_DATA@@PAU1@@std@@YAPAUBANHDD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<BANHDD_DATA *,BANHDD_DATA *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN22@DSReqSelec:

; 92   : 
; 93   : 	PMSG_REQ_BANSYSTEM pMsg;
; 94   : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x20, sizeof(pMsg));
; 95   : 	pMsg.Result = 1;
; 96   : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0002a	6a 05		 push	 5
  0002c	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0002f	50		 push	 eax
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00035	c7 45 f8 c1 05
	eb 20		 mov	 DWORD PTR _pMsg$[ebp], 552273345 ; 20eb05c1H
  0003c	c6 45 fc 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1
  00040	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@DSReqSelec:
  00045	5e		 pop	 esi

; 97   : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?DSReqSelect@CBanSystem@@QAEXXZ ENDP			; CBanSystem::DSReqSelect
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z PROC ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4a		 jae	 SHORT $LN4@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 44		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 02	 sar	 edx, 2
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0003d	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	52		 push	 edx
  00044	50		 push	 eax
  00045	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@AAU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00051	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0005b	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005e	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00060	6a 01		 push	 1
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00069	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0006c	57		 push	 edi
  0006d	52		 push	 edx
  0006e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UBANHDD_DATA@@@std@@UBANHDD_DATA@@ABU3@@std@@YAXAAV?$allocator@UBANHDD_DATA@@@0@PAUBANHDD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<BANHDD_DATA>,BANHDD_DATA,BANHDD_DATA const &>
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0007a	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ENDP ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z ; CBanSystem::DSAnsSelect
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\bansystem.cpp
;	COMDAT ?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z
_TEXT	SEGMENT
_list$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z PROC ; CBanSystem::DSAnsSelect, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 101  : 	BANHDD_DATA list;
; 102  : 	memcpy(list.Name, lpMsg->Name, sizeof(list.Name));

  00013	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00016	89 55 e4	 mov	 DWORD PTR _list$[ebp], edx
  00019	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001c	89 55 e8	 mov	 DWORD PTR _list$[ebp+4], edx
  0001f	66 8b 50 0c	 mov	 dx, WORD PTR [eax+12]
  00023	66 89 55 ec	 mov	 WORD PTR _list$[ebp+8], dx
  00027	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0002a	88 55 ee	 mov	 BYTE PTR _list$[ebp+10], dl

; 103  : 	list.Hdd = lpMsg->Hdd;

  0002d	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00030	89 55 f0	 mov	 DWORD PTR _list$[ebp+12], edx

; 104  : 	list.Time = lpMsg->Time;

  00033	8b 50 14	 mov	 edx, DWORD PTR [eax+20]

; 105  : 	list.Type = lpMsg->Type;

  00036	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00039	89 55 f4	 mov	 DWORD PTR _list$[ebp+16], edx

; 106  : 	this->m_HddData.push_back(list);

  0003c	8d 55 e4	 lea	 edx, DWORD PTR _list$[ebp]
  0003f	52		 push	 edx
  00040	83 c1 04	 add	 ecx, 4
  00043	89 45 f8	 mov	 DWORD PTR _list$[ebp+20], eax
  00046	e8 00 00 00 00	 call	 ?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back

; 107  : }

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004e	33 cd		 xor	 ecx, ebp
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z ENDP ; CBanSystem::DSAnsSelect
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DSReqInsert@CBanSystem@@QAEXPADKKK@Z		; CBanSystem::DSReqInsert
; Function compile flags: /Ogtp
;	COMDAT ?DSReqInsert@CBanSystem@@QAEXPADKKK@Z
_TEXT	SEGMENT
_list$ = -56						; size = 24
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_Name$ = 8						; size = 4
_Hdd$ = 12						; size = 4
_Time$ = 16						; size = 4
_Type$ = 20						; size = 4
?DSReqInsert@CBanSystem@@QAEXPADKKK@Z PROC		; CBanSystem::DSReqInsert, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b c1		 mov	 eax, ecx

; 111  : 	if(!this->Enable)

  00012	80 38 00	 cmp	 BYTE PTR [eax], 0
  00015	56		 push	 esi
  00016	8b 75 08	 mov	 esi, DWORD PTR _Name$[ebp]
  00019	74 77		 je	 SHORT $LN2@DSReqInser

; 112  : 	{
; 113  : 		return;
; 114  : 	}
; 115  : 
; 116  : 	BANHDD_DATA list;
; 117  : 	memcpy(&list.Name, Name, sizeof(list.Name));

  0001b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00020	89 4d c8	 mov	 DWORD PTR _list$[ebp], ecx
  00023	66 8b 4e 08	 mov	 cx, WORD PTR [esi+8]
  00027	89 55 cc	 mov	 DWORD PTR _list$[ebp+4], edx
  0002a	8a 56 0a	 mov	 dl, BYTE PTR [esi+10]
  0002d	53		 push	 ebx

; 118  : 	list.Hdd = Hdd;
; 119  : 	list.Time = Time;

  0002e	8b 5d 10	 mov	 ebx, DWORD PTR _Time$[ebp]
  00031	66 89 4d d0	 mov	 WORD PTR _list$[ebp+8], cx

; 120  : 	list.Type = Type;

  00035	8b 4d 14	 mov	 ecx, DWORD PTR _Type$[ebp]
  00038	57		 push	 edi
  00039	8b 7d 0c	 mov	 edi, DWORD PTR _Hdd$[ebp]
  0003c	88 55 d2	 mov	 BYTE PTR _list$[ebp+10], dl

; 121  : 	this->m_HddData.push_back(list);

  0003f	8d 55 c8	 lea	 edx, DWORD PTR _list$[ebp]
  00042	89 4d dc	 mov	 DWORD PTR _list$[ebp+20], ecx
  00045	52		 push	 edx
  00046	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00049	89 7d d4	 mov	 DWORD PTR _list$[ebp+12], edi
  0004c	89 5d d8	 mov	 DWORD PTR _list$[ebp+16], ebx
  0004f	e8 00 00 00 00	 call	 ?push_back@?$vector@UBANHDD_DATA@@V?$allocator@UBANHDD_DATA@@@std@@@std@@QAEXABUBANHDD_DATA@@@Z ; std::vector<BANHDD_DATA,std::allocator<BANHDD_DATA> >::push_back

; 122  : 
; 123  : 	PMSG_INSERT_BANSYSTEM pMsg;
; 124  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x21, sizeof(pMsg));
; 125  : 	memcpy(&pMsg.Name, Name, sizeof(pMsg.Name));

  00054	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00057	66 8b 56 08	 mov	 dx, WORD PTR [esi+8]
  0005b	8b 06		 mov	 eax, DWORD PTR [esi]
  0005d	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 126  : 	pMsg.Hdd = Hdd;
; 127  : 	pMsg.Time = Time;
; 128  : 	pMsg.Type = Type;

  00060	8b 4d 14	 mov	 ecx, DWORD PTR _Type$[ebp]
  00063	66 89 55 ec	 mov	 WORD PTR _pMsg$[ebp+12], dx
  00067	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0006a	8a 46 0a	 mov	 al, BYTE PTR [esi+10]

; 129  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0006d	6a 1c		 push	 28			; 0000001cH
  0006f	8d 55 e0	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00072	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  00075	52		 push	 edx
  00076	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0007b	c7 45 e0 c1 1c
	eb 21		 mov	 DWORD PTR _pMsg$[ebp], 569056449 ; 21eb1cc1H
  00082	88 45 ee	 mov	 BYTE PTR _pMsg$[ebp+14], al
  00085	89 7d f0	 mov	 DWORD PTR _pMsg$[ebp+16], edi
  00088	89 5d f4	 mov	 DWORD PTR _pMsg$[ebp+20], ebx
  0008b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  00090	5f		 pop	 edi
  00091	5b		 pop	 ebx
$LN2@DSReqInser:

; 130  : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	5e		 pop	 esi
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 10 00	 ret	 16			; 00000010H
?DSReqInsert@CBanSystem@@QAEXPADKKK@Z ENDP		; CBanSystem::DSReqInsert
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_BanSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_BanSystem@@YAXXZ PROC				; `dynamic initializer for 'g_BanSystem'', COMDAT

; 13   : CBanSystem g_BanSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BanSystem@@3VCBanSystem@@A ; g_BanSystem
  00005	e8 00 00 00 00	 call	 ??0CBanSystem@@QAE@XZ	; CBanSystem::CBanSystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_BanSystem@@YAXXZ ; `dynamic atexit destructor for 'g_BanSystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_BanSystem@@YAXXZ ENDP				; `dynamic initializer for 'g_BanSystem''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_BanSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_BanSystem@@YAXXZ PROC				; `dynamic atexit destructor for 'g_BanSystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BanSystem@@3VCBanSystem@@A ; g_BanSystem
  00005	e9 00 00 00 00	 jmp	 ??1CBanSystem@@QAE@XZ	; CBanSystem::~CBanSystem
??__Fg_BanSystem@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_BanSystem''
text$yd	ENDS
PUBLIC	?g_BanSystem@@3VCBanSystem@@A			; g_BanSystem
_BSS	SEGMENT
?g_BanSystem@@3VCBanSystem@@A DB 014H DUP (?)		; g_BanSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_BanSystem$initializer$ DD FLAT:??__Eg_BanSystem@@YAXXZ
CRT$XCU	ENDS
END
