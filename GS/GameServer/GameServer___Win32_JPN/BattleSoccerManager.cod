; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\BattleSoccerManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CBattleSoccerManager@@6B@			; CBattleSoccerManager::`vftable'
PUBLIC	??0CBattleSoccerManager@@QAE@XZ			; CBattleSoccerManager::CBattleSoccerManager
PUBLIC	??_R4CBattleSoccerManager@@6B@			; CBattleSoccerManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBattleSoccerManager@@@8		; CBattleSoccerManager `RTTI Type Descriptor'
PUBLIC	??_R3CBattleSoccerManager@@8			; CBattleSoccerManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBattleSoccerManager@@8			; CBattleSoccerManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBattleSoccerManager@@8		; CBattleSoccerManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECBattleSoccerManager@@UAEPAXI@Z:PROC	; CBattleSoccerManager::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CBattleSoccerManager@@8
; File e:\work\tranet_version\gs\gameserver\battlesoccermanager.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CBattleSoccerManager@@8 DD FLAT:??_R0?AVCBattleSoccerManager@@@8 ; CBattleSoccerManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBattleSoccerManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CBattleSoccerManager@@8
rdata$r	SEGMENT
??_R2CBattleSoccerManager@@8 DD FLAT:??_R1A@?0A@EA@CBattleSoccerManager@@8 ; CBattleSoccerManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBattleSoccerManager@@8
rdata$r	SEGMENT
??_R3CBattleSoccerManager@@8 DD 00H			; CBattleSoccerManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBattleSoccerManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBattleSoccerManager@@@8
_DATA	SEGMENT
??_R0?AVCBattleSoccerManager@@@8 DD FLAT:??_7type_info@@6B@ ; CBattleSoccerManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBattleSoccerManager@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBattleSoccerManager@@6B@
rdata$r	SEGMENT
??_R4CBattleSoccerManager@@6B@ DD 00H			; CBattleSoccerManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBattleSoccerManager@@@8
	DD	FLAT:??_R3CBattleSoccerManager@@8
rdata$r	ENDS
;	COMDAT ??_7CBattleSoccerManager@@6B@
CONST	SEGMENT
??_7CBattleSoccerManager@@6B@ DD FLAT:??_R4CBattleSoccerManager@@6B@ ; CBattleSoccerManager::`vftable'
	DD	FLAT:??_ECBattleSoccerManager@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CBattleSoccerManager@@QAE@XZ
_TEXT	SEGMENT
??0CBattleSoccerManager@@QAE@XZ PROC			; CBattleSoccerManager::CBattleSoccerManager, COMDAT
; _this$ = ecx

; 8    : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBattleSoccerManager@@6B@

; 9    : 	return;
; 10   : }

  00008	c3		 ret	 0
??0CBattleSoccerManager@@QAE@XZ ENDP			; CBattleSoccerManager::CBattleSoccerManager
_TEXT	ENDS
PUBLIC	??1CBattleSoccerManager@@UAE@XZ			; CBattleSoccerManager::~CBattleSoccerManager
; Function compile flags: /Ogtp
;	COMDAT ??1CBattleSoccerManager@@UAE@XZ
_TEXT	SEGMENT
??1CBattleSoccerManager@@UAE@XZ PROC			; CBattleSoccerManager::~CBattleSoccerManager, COMDAT
; _this$ = ecx

; 13   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBattleSoccerManager@@6B@

; 14   : 	return;
; 15   : }

  00006	c3		 ret	 0
??1CBattleSoccerManager@@UAE@XZ ENDP			; CBattleSoccerManager::~CBattleSoccerManager
_TEXT	ENDS
PUBLIC	?InitBattleSoccer@@YAXXZ			; InitBattleSoccer
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?SetGoalRightRect@CBattleSoccer@@QAEXHHHH@Z:PROC ; CBattleSoccer::SetGoalRightRect
EXTRN	?SetGoalLeftRect@CBattleSoccer@@QAEXHHHH@Z:PROC	; CBattleSoccer::SetGoalLeftRect
EXTRN	?SetGroundRect@CBattleGround@@QAEXHHHHH@Z:PROC	; CBattleGround::SetGroundRect
EXTRN	?SetBattleType@CBattleGround@@QAEXH@Z:PROC	; CBattleGround::SetBattleType
EXTRN	?gBSGround@@3PAPAVCBattleSoccer@@A:DWORD	; gBSGround
EXTRN	??0CBattleSoccer@@QAE@XZ:PROC			; CBattleSoccer::CBattleSoccer
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitBattleSoccer@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitBattleSoccer@@YAXXZ$0
__ehfuncinfo$?InitBattleSoccer@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitBattleSoccer@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?InitBattleSoccer@@YAXXZ
_TEXT	SEGMENT
$T202537 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitBattleSoccer@@YAXXZ PROC				; InitBattleSoccer, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InitBattleSoccer@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 19   : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)
; 20   : 	{
; 21   : 		gBSGround[n] = new CBattleSoccer;

  00023	68 90 00 00 00	 push	 144			; 00000090H
  00028	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f0	 mov	 DWORD PTR $T202537[ebp], eax
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	85 c0		 test	 eax, eax
  0003c	74 09		 je	 SHORT $LN6@InitBattle
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ??0CBattleSoccer@@QAE@XZ ; CBattleSoccer::CBattleSoccer
  00045	eb 02		 jmp	 SHORT $LN7@InitBattle
$LN6@InitBattle:
  00047	33 c0		 xor	 eax, eax
$LN7@InitBattle:
  00049	a3 00 00 00 00	 mov	 DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A, eax ; gBSGround

; 22   : 		gBSGround[n]->m_BlueTeam = NULL;

  0004e	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 23   : 		gBSGround[n]->m_RedTeam = NULL;

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A ; gBSGround
  0005d	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0

; 24   : 	}
; 25   : 
; 26   : 	gBSGround[0]->SetBattleType(1);

  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A ; gBSGround
  0006d	6a 01		 push	 1
  0006f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	e8 00 00 00 00	 call	 ?SetBattleType@CBattleGround@@QAEXH@Z ; CBattleGround::SetBattleType

; 27   : 	gBSGround[0]->SetGroundRect(6, 54, 141, 70, 180);

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A ; gBSGround
  00081	68 b4 00 00 00	 push	 180			; 000000b4H
  00086	6a 46		 push	 70			; 00000046H
  00088	68 8d 00 00 00	 push	 141			; 0000008dH
  0008d	6a 36		 push	 54			; 00000036H
  0008f	6a 06		 push	 6
  00091	e8 00 00 00 00	 call	 ?SetGroundRect@CBattleGround@@QAEXHHHHH@Z ; CBattleGround::SetGroundRect

; 28   : 	gBSGround[0]->SetGoalLeftRect(60, 139, 64, 140);

  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A ; gBSGround
  0009c	68 8c 00 00 00	 push	 140			; 0000008cH
  000a1	6a 40		 push	 64			; 00000040H
  000a3	68 8b 00 00 00	 push	 139			; 0000008bH
  000a8	6a 3c		 push	 60			; 0000003cH
  000aa	e8 00 00 00 00	 call	 ?SetGoalLeftRect@CBattleSoccer@@QAEXHHHH@Z ; CBattleSoccer::SetGoalLeftRect

; 29   : 	gBSGround[0]->SetGoalRightRect(60, 181, 64, 182);

  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A ; gBSGround
  000b5	68 b6 00 00 00	 push	 182			; 000000b6H
  000ba	6a 40		 push	 64			; 00000040H
  000bc	68 b5 00 00 00	 push	 181			; 000000b5H
  000c1	6a 3c		 push	 60			; 0000003cH
  000c3	e8 00 00 00 00	 call	 ?SetGoalRightRect@CBattleSoccer@@QAEXHHHH@Z ; CBattleSoccer::SetGoalRightRect

; 30   : }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitBattleSoccer@@YAXXZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T202537[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?InitBattleSoccer@@YAXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitBattleSoccer@@YAXXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitBattleSoccer@@YAXXZ ENDP				; InitBattleSoccer
PUBLIC	?ClearBattleSoccer@@YAXXZ			; ClearBattleSoccer
; Function compile flags: /Ogtp
;	COMDAT ?ClearBattleSoccer@@YAXXZ
_TEXT	SEGMENT
?ClearBattleSoccer@@YAXXZ PROC				; ClearBattleSoccer, COMDAT

; 34   : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)
; 35   : 	{
; 36   : 		delete gBSGround[n];

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A ; gBSGround
  00006	85 c9		 test	 ecx, ecx
  00008	74 08		 je	 SHORT $LN2@ClearBattl
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	6a 01		 push	 1
  00010	ff d2		 call	 edx
$LN2@ClearBattl:

; 37   : 	}
; 38   : }

  00012	c3		 ret	 0
?ClearBattleSoccer@@YAXXZ ENDP				; ClearBattleSoccer
_TEXT	ENDS
PUBLIC	?gCheckBlankBattleGround@@YAHXZ			; gCheckBlankBattleGround
EXTRN	?GetUsed@CBattleGround@@QAEHXZ:PROC		; CBattleGround::GetUsed
; Function compile flags: /Ogtp
;	COMDAT ?gCheckBlankBattleGround@@YAHXZ
_TEXT	SEGMENT
?gCheckBlankBattleGround@@YAHXZ PROC			; gCheckBlankBattleGround, COMDAT

; 41   : {

  00000	56		 push	 esi

; 42   : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)

  00001	33 f6		 xor	 esi, esi
$LL4@gCheckBlan:

; 43   : 	{
; 44   : 		if ( gBSGround[n]->GetUsed() == FALSE )

  00003	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  0000a	e8 00 00 00 00	 call	 ?GetUsed@CBattleGround@@QAEHXZ ; CBattleGround::GetUsed
  0000f	85 c0		 test	 eax, eax
  00011	74 0d		 je	 SHORT $LN8@gCheckBlan

; 42   : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)

  00013	46		 inc	 esi
  00014	83 fe 01	 cmp	 esi, 1
  00017	7c ea		 jl	 SHORT $LL4@gCheckBlan

; 47   : 		}
; 48   : 	}
; 49   : 	return 0xFF;

  00019	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0001e	5e		 pop	 esi

; 50   : }

  0001f	c3		 ret	 0
$LN8@gCheckBlan:

; 45   : 		{
; 46   : 			return n;

  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 50   : }

  00023	c3		 ret	 0
?gCheckBlankBattleGround@@YAHXZ ENDP			; gCheckBlankBattleGround
_TEXT	ENDS
PUBLIC	?gCheckBattleGroundTimer@@YAHXZ			; gCheckBattleGroundTimer
; Function compile flags: /Ogtp
;	COMDAT ?gCheckBattleGroundTimer@@YAHXZ
_TEXT	SEGMENT
?gCheckBattleGroundTimer@@YAHXZ PROC			; gCheckBattleGroundTimer, COMDAT

; 54   : 	int time=0;
; 55   : 	int  i;
; 56   : 	
; 57   : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 58   : 
; 59   : 	int n;
; 60   : 
; 61   : 	if( gBSGround[n]->m_BlueTeam ) //HermeX Add-on for fixing registers
; 62   : 	{
; 63   : 		/*//for( i=0; i<MAX_USER_GUILD; i++)
; 64   : 		{
; 65   : 			int index = gBSGround[n]->m_RedTeam->Index[i];					
; 66   : 			if( index != -1 )
; 67   : 			{
; 68   : 				//GCServerMsgStringSend(szTemp, index, 1);
; 69   : 				GCTimeViewSend(index, time);
; 70   : 			}
; 71   : 		}*/
; 72   : 	}
; 73   : 
; 74   : 	for( i=0; i<MAX_USER_GUILD; i++)
; 75   : 	{
; 76   : 		int index = gBSGround[n]->m_BlueTeam->Index[i];					
; 77   : 		if( index != -1 )
; 78   : 		{
; 79   : 			//GCServerMsgStringSend(szTemp, index, 1);
; 80   : 			GCTimeViewSend(index, time);
; 81   : 		}
; 82   : 	}
; 83   : 
; 84   : 	if( gBSGround[n]->m_RedTeam )
; 85   : 	{
; 86   : 		for( i=0; i<MAX_USER_GUILD; i++)
; 87   : 		{
; 88   : 			int index = gBSGround[n]->m_RedTeam->Index[i];					
; 89   : 			if( index != -1 )
; 90   : 			{
; 91   : 				//GCServerMsgStringSend(szTemp, index, 1);
; 92   : 				GCTimeViewSend(index, time);
; 93   : 			}
; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	return time;
; 98   : }

  00002	c3		 ret	 0
?gCheckBattleGroundTimer@@YAHXZ ENDP			; gCheckBattleGroundTimer
_TEXT	ENDS
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
PUBLIC	?gBattleGroundEnable@@YAXHH@Z			; gBattleGroundEnable
EXTRN	?SetTeamMaster@CBattleGround@@QAEXHPAD@Z:PROC	; CBattleGround::SetTeamMaster
EXTRN	?SetTimer@CBattleGround@@QAEXH@Z:PROC		; CBattleGround::SetTimer
EXTRN	?Enable@CBattleGround@@QAEXH@Z:PROC		; CBattleGround::Enable
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gBattleGroundEnable@@YAXHH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_enable$ = 12						; size = 4
?gBattleGroundEnable@@YAXHH@Z PROC			; gBattleGroundEnable, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 102  : 	if ( BATTLE_SOCCER_GROUND_RANGE(n)  == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 88 83 00 00
	00		 js	 $LN1@gBattleGro
  0000f	33 c0		 xor	 eax, eax
  00011	83 fe 01	 cmp	 esi, 1
  00014	0f 9c c0	 setl	 al
  00017	85 c0		 test	 eax, eax
  00019	74 77		 je	 SHORT $LN1@gBattleGro

; 103  : 	{
; 104  : 		return;
; 105  : 	}
; 106  : 
; 107  : 	if ( enable == TRUE )

  0001b	83 7d 0c 01	 cmp	 DWORD PTR _enable$[ebp], 1

; 108  : 	{
; 109  : 		gBSGround[n]->Enable(enable);

  0001f	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  00026	75 1b		 jne	 SHORT $LN2@gBattleGro
  00028	6a 01		 push	 1
  0002a	e8 00 00 00 00	 call	 ?Enable@CBattleGround@@QAEXH@Z ; CBattleGround::Enable

; 110  : 		gBSGround[n]->SetTimer(MAX_BATTLESOCCER_TIME);

  0002f	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  00036	68 c0 27 09 00	 push	 600000			; 000927c0H
  0003b	e8 00 00 00 00	 call	 ?SetTimer@CBattleGround@@QAEXH@Z ; CBattleGround::SetTimer
  00040	5e		 pop	 esi

; 119  : 	}
; 120  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN2@gBattleGro:

; 111  : 	}
; 112  : 	else
; 113  : 	{
; 114  : 		gBSGround[n]->Enable(FALSE);

  00043	6a 00		 push	 0
  00045	e8 00 00 00 00	 call	 ?Enable@CBattleGround@@QAEXH@Z ; CBattleGround::Enable

; 115  : 		gBSGround[n]->SetTeamMaster(0, "none");

  0004a	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_04CGFJFPFD@none?$AA@
  00056	6a 00		 push	 0
  00058	e8 00 00 00 00	 call	 ?SetTeamMaster@CBattleGround@@QAEXHPAD@Z ; CBattleGround::SetTeamMaster

; 116  : 		gBSGround[n]->SetTeamMaster(1, "none");

  0005d	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_04CGFJFPFD@none?$AA@
  00069	6a 01		 push	 1
  0006b	e8 00 00 00 00	 call	 ?SetTeamMaster@CBattleGround@@QAEXHPAD@Z ; CBattleGround::SetTeamMaster

; 117  : 		gBSGround[n]->m_RedTeam = 0;

  00070	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  00077	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0

; 118  : 		gBSGround[n]->m_BlueTeam = 0;

  00081	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  00088	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0
$LN1@gBattleGro:
  00092	5e		 pop	 esi

; 119  : 	}
; 120  : }

  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?gBattleGroundEnable@@YAXHH@Z ENDP			; gBattleGroundEnable
_TEXT	ENDS
PUBLIC	?gSetBattleTeamMaster@@YAXHHPADPAU_GUILD_INFO_STRUCT@@@Z ; gSetBattleTeamMaster
EXTRN	?SetTeamName@CBattleGround@@QAEXHPAD@Z:PROC	; CBattleGround::SetTeamName
; Function compile flags: /Ogtp
;	COMDAT ?gSetBattleTeamMaster@@YAXHHPADPAU_GUILD_INFO_STRUCT@@@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
_team$ = 12						; size = 4
_szname$ = 16						; size = 4
_lpGuild$ = 20						; size = 4
?gSetBattleTeamMaster@@YAXHHPADPAU_GUILD_INFO_STRUCT@@@Z PROC ; gSetBattleTeamMaster, COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 124  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _ground$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 5b		 js	 SHORT $LN1@gSetBattle
  0000b	33 c0		 xor	 eax, eax
  0000d	83 fe 01	 cmp	 esi, 1
  00010	0f 9c c0	 setl	 al
  00013	85 c0		 test	 eax, eax
  00015	74 4f		 je	 SHORT $LN1@gSetBattle

; 125  : 		return;
; 126  : 
; 127  : 	gBSGround[ground]->SetTeamMaster(team, szname);

  00017	8b 45 10	 mov	 eax, DWORD PTR _szname$[ebp]
  0001a	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  00021	53		 push	 ebx
  00022	57		 push	 edi
  00023	8b 7d 0c	 mov	 edi, DWORD PTR _team$[ebp]
  00026	50		 push	 eax
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ?SetTeamMaster@CBattleGround@@QAEXHPAD@Z ; CBattleGround::SetTeamMaster

; 128  : 	gBSGround[ground]->SetTeamName(team, lpGuild->Name );

  0002d	8b 5d 14	 mov	 ebx, DWORD PTR _lpGuild$[ebp]
  00030	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00033	51		 push	 ecx
  00034	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  0003b	57		 push	 edi
  0003c	e8 00 00 00 00	 call	 ?SetTeamName@CBattleGround@@QAEXHPAD@Z ; CBattleGround::SetTeamName

; 129  : 
; 130  : 	if ( team == 0 )

  00041	85 ff		 test	 edi, edi
  00043	75 12		 jne	 SHORT $LN2@gSetBattle

; 131  : 	{
; 132  : 		gBSGround[ground]->m_RedTeam = lpGuild;

  00045	8b 14 b5 00 00
	00 00		 mov	 edx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  0004c	5f		 pop	 edi
  0004d	89 9a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ebx
  00053	5b		 pop	 ebx
  00054	5e		 pop	 esi

; 137  : 	}
; 138  : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN2@gSetBattle:

; 133  : 	}
; 134  : 	else
; 135  : 	{
; 136  : 		gBSGround[ground]->m_BlueTeam = lpGuild;

  00057	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[esi*4]
  0005e	5f		 pop	 edi
  0005f	89 98 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ebx
  00065	5b		 pop	 ebx
$LN1@gSetBattle:
  00066	5e		 pop	 esi

; 137  : 	}
; 138  : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?gSetBattleTeamMaster@@YAXHHPADPAU_GUILD_INFO_STRUCT@@@Z ENDP ; gSetBattleTeamMaster
_TEXT	ENDS
PUBLIC	?gBattleGetTeamPosition@@YAXHHAAF0@Z		; gBattleGetTeamPosition
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?gBattleGetTeamPosition@@YAXHHAAF0@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
_team$ = 12						; size = 4
_X$ = 16						; size = 4
_Y$ = 20						; size = 4
?gBattleGetTeamPosition@@YAXHHAAF0@Z PROC		; gBattleGetTeamPosition, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 142  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _ground$[ebp]
  00007	85 db		 test	 ebx, ebx
  00009	78 69		 js	 SHORT $LN4@gBattleGet
  0000b	33 c0		 xor	 eax, eax
  0000d	83 fb 01	 cmp	 ebx, 1
  00010	0f 9c c0	 setl	 al
  00013	85 c0		 test	 eax, eax
  00015	74 5d		 je	 SHORT $LN4@gBattleGet

; 143  : 		return;
; 144  : 
; 145  : 
; 146  : 	int w = gBSGround[ground]->m_rect.right - gBSGround[ground]->m_rect.left;

  00017	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ebx*4]
  0001e	56		 push	 esi
  0001f	8b 70 40	 mov	 esi, DWORD PTR [eax+64]
  00022	2b 70 38	 sub	 esi, DWORD PTR [eax+56]
  00025	57		 push	 edi

; 147  : 	int h = gBSGround[ground]->m_rect.bottom - gBSGround[ground]->m_rect.top;

  00026	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  00029	2b 78 3c	 sub	 edi, DWORD PTR [eax+60]

; 148  : 
; 149  : 	if ( w < 1 )

  0002c	83 fe 01	 cmp	 esi, 1
  0002f	7d 05		 jge	 SHORT $LN2@gBattleGet

; 150  : 	{
; 151  : 		w = 1;

  00031	be 01 00 00 00	 mov	 esi, 1
$LN2@gBattleGet:

; 152  : 	}
; 153  : 
; 154  : 	if ( h < 1 )

  00036	83 ff 01	 cmp	 edi, 1
  00039	7d 05		 jge	 SHORT $LN1@gBattleGet

; 155  : 	{
; 156  : 		h = 1;

  0003b	bf 01 00 00 00	 mov	 edi, 1
$LN1@gBattleGet:

; 157  : 	}
; 158  : 
; 159  : 	X = gBSGround[ground]->m_rect.left + (rand()%w);

  00040	e8 00 00 00 00	 call	 _rand
  00045	99		 cdq
  00046	f7 fe		 idiv	 esi
  00048	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ebx*4]
  0004f	8b 4d 10	 mov	 ecx, DWORD PTR _X$[ebp]
  00052	66 03 50 38	 add	 dx, WORD PTR [eax+56]
  00056	66 89 11	 mov	 WORD PTR [ecx], dx

; 160  : 	Y = gBSGround[ground]->m_rect.top + (rand()%h);

  00059	e8 00 00 00 00	 call	 _rand
  0005e	99		 cdq
  0005f	f7 ff		 idiv	 edi
  00061	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ebx*4]
  00068	8b 4d 14	 mov	 ecx, DWORD PTR _Y$[ebp]
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	66 03 50 3c	 add	 dx, WORD PTR [eax+60]
  00071	66 89 11	 mov	 WORD PTR [ecx], dx
$LN4@gBattleGet:
  00074	5b		 pop	 ebx

; 161  : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?gBattleGetTeamPosition@@YAXHHAAF0@Z ENDP		; gBattleGetTeamPosition
_TEXT	ENDS
PUBLIC	?GetBattleTeamName@@YAPADHH@Z			; GetBattleTeamName
EXTRN	?GetTeamName@CBattleGround@@QAEPADH@Z:PROC	; CBattleGround::GetTeamName
; Function compile flags: /Ogtp
;	COMDAT ?GetBattleTeamName@@YAPADHH@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
_team$ = 12						; size = 4
?GetBattleTeamName@@YAPADHH@Z PROC			; GetBattleTeamName, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 166  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ground$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 0c		 js	 SHORT $LN6@GetBattleT
  0000a	33 c0		 xor	 eax, eax
  0000c	83 f9 01	 cmp	 ecx, 1
  0000f	0f 9c c0	 setl	 al
  00012	85 c0		 test	 eax, eax
  00014	75 04		 jne	 SHORT $LN1@GetBattleT
$LN6@GetBattleT:

; 167  : 		return NULL;

  00016	33 c0		 xor	 eax, eax

; 170  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN1@GetBattleT:

; 168  : 
; 169  : 	return gBSGround[ground]->GetTeamName(team);

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _team$[ebp]
  0001d	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ecx*4]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?GetTeamName@CBattleGround@@QAEPADH@Z ; CBattleGround::GetTeamName

; 170  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GetBattleTeamName@@YAPADHH@Z ENDP			; GetBattleTeamName
_TEXT	ENDS
PUBLIC	?SetBattleTeamScore@@YAXHHH@Z			; SetBattleTeamScore
EXTRN	?SetScore@CBattleGround@@QAEXHH@Z:PROC		; CBattleGround::SetScore
; Function compile flags: /Ogtp
;	COMDAT ?SetBattleTeamScore@@YAXHHH@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
_team$ = 12						; size = 4
_score$ = 16						; size = 4
?SetBattleTeamScore@@YAXHHH@Z PROC			; SetBattleTeamScore, COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 174  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ground$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 20		 js	 SHORT $LN2@SetBattleT
  0000a	33 c0		 xor	 eax, eax
  0000c	83 f9 01	 cmp	 ecx, 1
  0000f	0f 9c c0	 setl	 al
  00012	85 c0		 test	 eax, eax
  00014	74 14		 je	 SHORT $LN2@SetBattleT

; 175  : 		return;
; 176  : 
; 177  : 	gBSGround[ground]->SetScore(team, score);

  00016	8b 45 10	 mov	 eax, DWORD PTR _score$[ebp]
  00019	8b 55 0c	 mov	 edx, DWORD PTR _team$[ebp]
  0001c	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ecx*4]
  00023	50		 push	 eax
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?SetScore@CBattleGround@@QAEXHH@Z ; CBattleGround::SetScore
$LN2@SetBattleT:

; 178  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?SetBattleTeamScore@@YAXHHH@Z ENDP			; SetBattleTeamScore
_TEXT	ENDS
PUBLIC	?GetBattleTeamScore@@YAHHH@Z			; GetBattleTeamScore
EXTRN	?GetScore@CBattleGround@@QAEHH@Z:PROC		; CBattleGround::GetScore
; Function compile flags: /Ogtp
;	COMDAT ?GetBattleTeamScore@@YAHHH@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
_team$ = 12						; size = 4
?GetBattleTeamScore@@YAHHH@Z PROC			; GetBattleTeamScore, COMDAT

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ground$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 0c		 js	 SHORT $LN6@GetBattleT@2
  0000a	33 c0		 xor	 eax, eax
  0000c	83 f9 01	 cmp	 ecx, 1
  0000f	0f 9c c0	 setl	 al
  00012	85 c0		 test	 eax, eax
  00014	75 04		 jne	 SHORT $LN1@GetBattleT@2
$LN6@GetBattleT@2:

; 183  : 		return 0;

  00016	33 c0		 xor	 eax, eax

; 186  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN1@GetBattleT@2:

; 184  : 
; 185  : 	return gBSGround[ground]->GetScore(team);

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _team$[ebp]
  0001d	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ecx*4]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?GetScore@CBattleGround@@QAEHH@Z ; CBattleGround::GetScore

; 186  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GetBattleTeamScore@@YAHHH@Z ENDP			; GetBattleTeamScore
_TEXT	ENDS
PUBLIC	?BattleSoccerGoalStart@@YAXH@Z			; BattleSoccerGoalStart
EXTRN	?SetGoalMove@CBattleSoccer@@QAEXH@Z:PROC	; CBattleSoccer::SetGoalMove
; Function compile flags: /Ogtp
;	COMDAT ?BattleSoccerGoalStart@@YAXH@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
?BattleSoccerGoalStart@@YAXH@Z PROC			; BattleSoccerGoalStart, COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ground$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 1a		 js	 SHORT $LN2@BattleSocc
  0000a	33 c0		 xor	 eax, eax
  0000c	83 f9 01	 cmp	 ecx, 1
  0000f	0f 9c c0	 setl	 al
  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN2@BattleSocc

; 191  : 		return;
; 192  : 
; 193  : 	gBSGround[ground]->SetGoalMove(1);

  00016	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ecx*4]
  0001d	6a 01		 push	 1
  0001f	e8 00 00 00 00	 call	 ?SetGoalMove@CBattleSoccer@@QAEXH@Z ; CBattleSoccer::SetGoalMove
$LN2@BattleSocc:

; 194  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?BattleSoccerGoalStart@@YAXH@Z ENDP			; BattleSoccerGoalStart
_TEXT	ENDS
PUBLIC	?BattleSoccerGoalEnd@@YAXH@Z			; BattleSoccerGoalEnd
; Function compile flags: /Ogtp
;	COMDAT ?BattleSoccerGoalEnd@@YAXH@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
?BattleSoccerGoalEnd@@YAXH@Z PROC			; BattleSoccerGoalEnd, COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _ground$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 1a		 js	 SHORT $LN2@BattleSocc@2
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 f8 01	 cmp	 eax, 1
  0000f	0f 9c c1	 setl	 cl
  00012	85 c9		 test	 ecx, ecx
  00014	74 0e		 je	 SHORT $LN2@BattleSocc@2

; 199  : 		return;
; 200  : 
; 201  : 	gBSGround[ground]->SetGoalMove(0);

  00016	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[eax*4]
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?SetGoalMove@CBattleSoccer@@QAEXH@Z ; CBattleSoccer::SetGoalMove
$LN2@BattleSocc@2:

; 202  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?BattleSoccerGoalEnd@@YAXH@Z ENDP			; BattleSoccerGoalEnd
_TEXT	ENDS
PUBLIC	?GetBattleSoccerGoalMove@@YAHH@Z		; GetBattleSoccerGoalMove
EXTRN	?GetGoalMove@CBattleSoccer@@QAEHXZ:PROC		; CBattleSoccer::GetGoalMove
; Function compile flags: /Ogtp
;	COMDAT ?GetBattleSoccerGoalMove@@YAHH@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
?GetBattleSoccerGoalMove@@YAHH@Z PROC			; GetBattleSoccerGoalMove, COMDAT

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ground$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 0c		 js	 SHORT $LN6@GetBattleS
  0000a	33 c0		 xor	 eax, eax
  0000c	83 f9 01	 cmp	 ecx, 1
  0000f	0f 9c c0	 setl	 al
  00012	85 c0		 test	 eax, eax
  00014	75 04		 jne	 SHORT $LN1@GetBattleS
$LN6@GetBattleS:

; 207  : 		return 0;

  00016	33 c0		 xor	 eax, eax

; 210  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN1@GetBattleS:

; 208  : 
; 209  : 	return gBSGround[ground]->GetGoalMove();

  0001a	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[ecx*4]

; 210  : }

  00021	5d		 pop	 ebp

; 208  : 
; 209  : 	return gBSGround[ground]->GetGoalMove();

  00022	e9 00 00 00 00	 jmp	 ?GetGoalMove@CBattleSoccer@@QAEHXZ ; CBattleSoccer::GetGoalMove
?GetBattleSoccerGoalMove@@YAHH@Z ENDP			; GetBattleSoccerGoalMove
_TEXT	ENDS
PUBLIC	?gBattleSoccerScoreUpdate@@YAHHH@Z		; gBattleSoccerScoreUpdate
EXTRN	?BattleInfoSend@CGMMng@@QAEXPADE0E@Z:PROC	; CGMMng::BattleInfoSend
EXTRN	?cManager@@3VCGMMng@@A:BYTE			; cManager
EXTRN	?gObjGuildWarEnd@@YAXPAU_GUILD_INFO_STRUCT@@0@Z:PROC ; gObjGuildWarEnd
EXTRN	?gObjGuildWarEndSend@@YAXPAU_GUILD_INFO_STRUCT@@0EE@Z:PROC ; gObjGuildWarEndSend
EXTRN	?gObjGuildWarProc@@YAHPAU_GUILD_INFO_STRUCT@@0H@Z:PROC ; gObjGuildWarProc
; Function compile flags: /Ogtp
;	COMDAT ?gBattleSoccerScoreUpdate@@YAHHH@Z
_TEXT	SEGMENT
_ground$ = 8						; size = 4
_team$ = 12						; size = 4
?gBattleSoccerScoreUpdate@@YAHHH@Z PROC			; gBattleSoccerScoreUpdate, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  : 	if ( BATTLE_SOCCER_GROUND_RANGE(ground)  == FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _ground$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 0c		 js	 SHORT $LN11@gBattleSoc
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 f8 01	 cmp	 eax, 1
  0000f	0f 9c c1	 setl	 cl
  00012	85 c9		 test	 ecx, ecx
  00014	75 04		 jne	 SHORT $LN6@gBattleSoc
$LN11@gBattleSoc:

; 215  : 		return FALSE;

  00016	33 c0		 xor	 eax, eax

; 253  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN6@gBattleSoc:

; 216  : 
; 217  : 	int score = 20;
; 218  : 	int totalscore = 1;
; 219  : 	_GUILD_INFO_STRUCT * lpGuild;
; 220  : 	_GUILD_INFO_STRUCT * lpTargetGuild;
; 221  : 	bool bGoalTeam;
; 222  : 
; 223  : 	if ( team == 0 )

  0001a	83 7d 0c 00	 cmp	 DWORD PTR _team$[ebp], 0

; 224  : 	{
; 225  : 		lpGuild = gBSGround[ground]->m_BlueTeam;

  0001e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[eax*4]
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	75 0e		 jne	 SHORT $LN5@gBattleSoc
  00029	8b b0 8c 00 00
	00		 mov	 esi, DWORD PTR [eax+140]

; 226  : 		lpTargetGuild = gBSGround[ground]->m_RedTeam;

  0002f	8b b8 88 00 00
	00		 mov	 edi, DWORD PTR [eax+136]

; 227  : 		bGoalTeam = true;
; 228  : 	}
; 229  : 	else

  00035	eb 0c		 jmp	 SHORT $LN4@gBattleSoc
$LN5@gBattleSoc:

; 230  : 	{
; 231  : 		lpGuild = gBSGround[ground]->m_RedTeam ;

  00037	8b b0 88 00 00
	00		 mov	 esi, DWORD PTR [eax+136]

; 232  : 		lpTargetGuild = gBSGround[ground]->m_BlueTeam;

  0003d	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
$LN4@gBattleSoc:

; 233  : 		bGoalTeam = FALSE;
; 234  : 	}
; 235  : 
; 236  : 	if ( lpGuild == NULL )

  00043	85 f6		 test	 esi, esi
  00045	75 06		 jne	 SHORT $LN3@gBattleSoc

; 237  : 	{
; 238  : 		return FALSE;

  00047	5f		 pop	 edi
  00048	33 c0		 xor	 eax, eax
  0004a	5e		 pop	 esi

; 253  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN3@gBattleSoc:

; 239  : 	}
; 240  : 
; 241  : 	if (gObjGuildWarProc(lpGuild, lpTargetGuild, score) == TRUE )

  0004d	6a 14		 push	 20			; 00000014H
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ?gObjGuildWarProc@@YAHPAU_GUILD_INFO_STRUCT@@0H@Z ; gObjGuildWarProc
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	83 f8 01	 cmp	 eax, 1
  0005c	75 59		 jne	 SHORT $LN1@gBattleSoc

; 242  : 	{
; 243  : 		if ( lpGuild->WarType == 1 )

  0005e	38 86 92 05 00
	00		 cmp	 BYTE PTR [esi+1426], al
  00064	75 51		 jne	 SHORT $LN1@gBattleSoc

; 244  : 		{
; 245  : 			gObjGuildWarEndSend(lpGuild, lpTargetGuild, 1, 0);

  00066	6a 00		 push	 0
  00068	50		 push	 eax
  00069	57		 push	 edi
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 ?gObjGuildWarEndSend@@YAXPAU_GUILD_INFO_STRUCT@@0EE@Z ; gObjGuildWarEndSend

; 246  : 			gBattleGroundEnable(lpGuild->BattleGroundIndex, FALSE);

  00070	0f b6 86 93 05
	00 00		 movzx	 eax, BYTE PTR [esi+1427]
  00077	6a 00		 push	 0
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?gBattleGroundEnable@@YAXHH@Z ; gBattleGroundEnable

; 247  : 			gObjGuildWarEnd(lpGuild, lpTargetGuild);

  0007f	57		 push	 edi
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ?gObjGuildWarEnd@@YAXPAU_GUILD_INFO_STRUCT@@0@Z ; gObjGuildWarEnd
  00086	83 c4 20	 add	 esp, 32			; 00000020H

; 248  : 			cManager.BattleInfoSend(GetBattleTeamName(0, 0), -1, GetBattleTeamName(0, 1), -1);

  00089	68 ff 00 00 00	 push	 255			; 000000ffH
  0008e	6a 01		 push	 1
  00090	6a 00		 push	 0
  00092	e8 00 00 00 00	 call	 ?GetBattleTeamName@@YAPADHH@Z ; GetBattleTeamName
  00097	83 c4 08	 add	 esp, 8
  0009a	50		 push	 eax
  0009b	68 ff 00 00 00	 push	 255			; 000000ffH
  000a0	6a 00		 push	 0
  000a2	6a 00		 push	 0
  000a4	e8 00 00 00 00	 call	 ?GetBattleTeamName@@YAPADHH@Z ; GetBattleTeamName
  000a9	83 c4 08	 add	 esp, 8
  000ac	50		 push	 eax
  000ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?cManager@@3VCGMMng@@A ; cManager
  000b2	e8 00 00 00 00	 call	 ?BattleInfoSend@CGMMng@@QAEXPADE0E@Z ; CGMMng::BattleInfoSend
$LN1@gBattleSoc:

; 249  : 		}
; 250  : 	}
; 251  : 
; 252  : 	return TRUE;

  000b7	5f		 pop	 edi
  000b8	b8 01 00 00 00	 mov	 eax, 1
  000bd	5e		 pop	 esi

; 253  : }

  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
?gBattleSoccerScoreUpdate@@YAHHH@Z ENDP			; gBattleSoccerScoreUpdate
_TEXT	ENDS
PUBLIC	?gCheckGoal@@YAHHHAAH@Z				; gCheckGoal
; Function compile flags: /Ogtp
;	COMDAT ?gCheckGoal@@YAHHHAAH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_ground$ = 16						; size = 4
?gCheckGoal@@YAHHHAAH@Z PROC				; gCheckGoal, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)

  00003	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	b8 01 00 00 00	 mov	 eax, 1
$LL6@gCheckGoal:

; 258  : 	{
; 259  : 		if ( gBSGround[n]->m_Set == TRUE )

  00012	8b 0c bd 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[edi*4]
  00019	39 41 48	 cmp	 DWORD PTR [ecx+72], eax
  0001c	75 2e		 jne	 SHORT $LN5@gCheckGoal

; 260  : 		{
; 261  : 			if ( x >= gBSGround[n]->m_GoalLeft.left && x <= gBSGround[n]->m_GoalLeft.right && y >= gBSGround[n]->m_GoalLeft.top && y <= gBSGround[n]->m_GoalLeft.bottom ) 

  0001e	3b 71 68	 cmp	 esi, DWORD PTR [ecx+104]
  00021	7c 0f		 jl	 SHORT $LN2@gCheckGoal
  00023	3b 71 70	 cmp	 esi, DWORD PTR [ecx+112]
  00026	7f 0a		 jg	 SHORT $LN2@gCheckGoal
  00028	3b 51 6c	 cmp	 edx, DWORD PTR [ecx+108]
  0002b	7c 05		 jl	 SHORT $LN2@gCheckGoal
  0002d	3b 51 74	 cmp	 edx, DWORD PTR [ecx+116]
  00030	7e 27		 jle	 SHORT $LN10@gCheckGoal
$LN2@gCheckGoal:

; 265  : 			}
; 266  : 
; 267  : 			if ( x >= gBSGround[n]->m_GoalRight.left && x <= gBSGround[n]->m_GoalRight.right && y >= gBSGround[n]->m_GoalRight.top && y <= gBSGround[n]->m_GoalRight.bottom ) 

  00032	3b 71 78	 cmp	 esi, DWORD PTR [ecx+120]
  00035	7c 15		 jl	 SHORT $LN5@gCheckGoal
  00037	3b b1 80 00 00
	00		 cmp	 esi, DWORD PTR [ecx+128]
  0003d	7f 0d		 jg	 SHORT $LN5@gCheckGoal
  0003f	3b 51 7c	 cmp	 edx, DWORD PTR [ecx+124]
  00042	7c 08		 jl	 SHORT $LN5@gCheckGoal
  00044	3b 91 84 00 00
	00		 cmp	 edx, DWORD PTR [ecx+132]
  0004a	7e 18		 jle	 SHORT $LN11@gCheckGoal
$LN5@gCheckGoal:

; 257  : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)

  0004c	03 f8		 add	 edi, eax
  0004e	3b f8		 cmp	 edi, eax
  00050	7c c0		 jl	 SHORT $LL6@gCheckGoal

; 270  : 				return 1;
; 271  : 			}
; 272  : 		}
; 273  : 	}
; 274  : 
; 275  : 	return -1;

  00052	5f		 pop	 edi
  00053	83 c8 ff	 or	 eax, -1
  00056	5e		 pop	 esi

; 276  : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN10@gCheckGoal:

; 262  : 			{
; 263  : 				ground = n;

  00059	8b 45 10	 mov	 eax, DWORD PTR _ground$[ebp]
  0005c	89 38		 mov	 DWORD PTR [eax], edi
  0005e	5f		 pop	 edi

; 264  : 				return 0;

  0005f	33 c0		 xor	 eax, eax
  00061	5e		 pop	 esi

; 276  : }

  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN11@gCheckGoal:

; 268  : 			{
; 269  : 				ground = n;

  00064	8b 4d 10	 mov	 ecx, DWORD PTR _ground$[ebp]
  00067	89 39		 mov	 DWORD PTR [ecx], edi
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi

; 276  : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?gCheckGoal@@YAHHHAAH@Z ENDP				; gCheckGoal
_TEXT	ENDS
PUBLIC	?gCheckBattleGround@@YAHPAUOBJECTSTRUCT@@@Z	; gCheckBattleGround
; Function compile flags: /Ogtp
;	COMDAT ?gCheckBattleGround@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gCheckBattleGround@@YAHPAUOBJECTSTRUCT@@@Z PROC	; gCheckBattleGround, COMDAT

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 280  : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL7@gCheckBatt:

; 281  : 	{
; 282  : 		if ( gBSGround[n]->m_Set == TRUE )

  00010	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?gBSGround@@3PAPAVCBattleSoccer@@A[eax*4]
  00017	83 79 48 01	 cmp	 DWORD PTR [ecx+72], 1
  0001b	75 5e		 jne	 SHORT $LN6@gCheckBatt

; 283  : 		{
; 284  : 			if ( lpObj->X >= gBSGround[n]->m_rect.left && lpObj->X <= gBSGround[n]->m_rect.right && lpObj->Y >= gBSGround[n]->m_rect.top && lpObj->Y <= gBSGround[n]->m_rect.bottom ) 

  0001d	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  00024	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00027	7c 16		 jl	 SHORT $LN3@gCheckBatt
  00029	3b 51 40	 cmp	 edx, DWORD PTR [ecx+64]
  0002c	7f 11		 jg	 SHORT $LN3@gCheckBatt
  0002e	0f bf b7 46 01
	00 00		 movsx	 esi, WORD PTR [edi+326]
  00035	3b 71 3c	 cmp	 esi, DWORD PTR [ecx+60]
  00038	7c 05		 jl	 SHORT $LN3@gCheckBatt
  0003a	3b 71 44	 cmp	 esi, DWORD PTR [ecx+68]
  0003d	7e 45		 jle	 SHORT $LN8@gCheckBatt
$LN3@gCheckBatt:

; 285  : 			{
; 286  : 				return n;
; 287  : 			}
; 288  : 
; 289  : 			if ( lpObj->X >= gBSGround[n]->m_GoalLeft.left && lpObj->X <= gBSGround[n]->m_GoalLeft.right && lpObj->Y >= gBSGround[n]->m_GoalLeft.top && lpObj->Y <= gBSGround[n]->m_GoalLeft.bottom ) 

  0003f	3b 51 68	 cmp	 edx, DWORD PTR [ecx+104]
  00042	7c 16		 jl	 SHORT $LN2@gCheckBatt
  00044	3b 51 70	 cmp	 edx, DWORD PTR [ecx+112]
  00047	7f 11		 jg	 SHORT $LN2@gCheckBatt
  00049	0f bf b7 46 01
	00 00		 movsx	 esi, WORD PTR [edi+326]
  00050	3b 71 6c	 cmp	 esi, DWORD PTR [ecx+108]
  00053	7c 05		 jl	 SHORT $LN2@gCheckBatt
  00055	3b 71 74	 cmp	 esi, DWORD PTR [ecx+116]
  00058	7e 2a		 jle	 SHORT $LN8@gCheckBatt
$LN2@gCheckBatt:

; 290  : 			{
; 291  : 				return n;
; 292  : 			}
; 293  : 
; 294  : 			if ( lpObj->X >= gBSGround[n]->m_GoalRight.left && lpObj->X <= gBSGround[n]->m_GoalRight.right && lpObj->Y >= gBSGround[n]->m_GoalRight.top && lpObj->Y <= gBSGround[n]->m_GoalRight.bottom ) 

  0005a	3b 51 78	 cmp	 edx, DWORD PTR [ecx+120]
  0005d	7c 1c		 jl	 SHORT $LN6@gCheckBatt
  0005f	3b 91 80 00 00
	00		 cmp	 edx, DWORD PTR [ecx+128]
  00065	7f 14		 jg	 SHORT $LN6@gCheckBatt
  00067	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  0006e	3b 51 7c	 cmp	 edx, DWORD PTR [ecx+124]
  00071	7c 08		 jl	 SHORT $LN6@gCheckBatt
  00073	3b 91 84 00 00
	00		 cmp	 edx, DWORD PTR [ecx+132]
  00079	7e 09		 jle	 SHORT $LN8@gCheckBatt
$LN6@gCheckBatt:

; 280  : 	for ( int n=0;n<MAX_BATTLESOCCER_GROUND;n++)

  0007b	40		 inc	 eax
  0007c	83 f8 01	 cmp	 eax, 1
  0007f	7c 8f		 jl	 SHORT $LL7@gCheckBatt

; 295  : 			{
; 296  : 				return n;
; 297  : 			}
; 298  : 		}
; 299  : 	}
; 300  : 	return -1;

  00081	83 c8 ff	 or	 eax, -1
$LN8@gCheckBatt:
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi

; 301  : }

  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?gCheckBattleGround@@YAHPAUOBJECTSTRUCT@@@Z ENDP	; gCheckBattleGround
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCBattleSoccerManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBattleSoccerManager@@UAEPAXI@Z PROC		; CBattleSoccerManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBattleSoccerManager@@UAE@XZ ; CBattleSoccerManager::~CBattleSoccerManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCBattleSoccerManager@@UAEPAXI@Z ENDP		; CBattleSoccerManager::`scalar deleting destructor'
_TEXT	ENDS
END
