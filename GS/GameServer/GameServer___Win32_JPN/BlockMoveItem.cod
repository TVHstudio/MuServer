; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\BlockMoveItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gBlockMoveIteml@@3VcBlockMoveItem@@A		; gBlockMoveIteml
_BSS	SEGMENT
?gBlockMoveIteml@@3VcBlockMoveItem@@A DB 01f50H DUP (?)	; gBlockMoveIteml
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_09DCMJNHKM@MaxExlOpt?$AA@			; `string'
PUBLIC	??_C@_08BFKFNBGC@MaxLevel?$AA@			; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cBlockMoveItem@@QAEXXZ			; cBlockMoveItem::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
; File e:\work\tranet_version\gs\gameserver\blockmoveitem.cpp
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09DCMJNHKM@MaxExlOpt?$AA@
CONST	SEGMENT
??_C@_09DCMJNHKM@MaxExlOpt?$AA@ DB 'MaxExlOpt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFKFNBGC@MaxLevel?$AA@
CONST	SEGMENT
??_C@_08BFKFNBGC@MaxLevel?$AA@ DB 'MaxLevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@
CONST	SEGMENT
??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@ DB '..\Data\ZtD'
	DB	'ata\BlockMoveItem.ini', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@cBlockMoveItem@@QAEXXZ
_TEXT	SEGMENT
_n$202199 = -272					; size = 8
_Flag$ = -264						; size = 4
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Load@cBlockMoveItem@@QAEXXZ PROC			; cBlockMoveItem::Load, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 11   : 	this->Enable = GetPrivateProfileInt("Common","Enable",0,BLOCK_MOVE_ITEM_DIR);

  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@
  00021	33 db		 xor	 ebx, ebx
  00023	53		 push	 ebx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0002e	8b f1		 mov	 esi, ecx
  00030	ff d7		 call	 edi

; 12   : 	this->MaxLevel = GetPrivateProfileInt("Common","MaxLevel",0,BLOCK_MOVE_ITEM_DIR);

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@
  00037	53		 push	 ebx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_08BFKFNBGC@MaxLevel?$AA@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00042	89 06		 mov	 DWORD PTR [esi], eax
  00044	ff d7		 call	 edi

; 13   : 	this->MaxExlOpt = GetPrivateProfileInt("Common","MaxExlOpt",0,BLOCK_MOVE_ITEM_DIR);

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@
  0004b	53		 push	 ebx
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_09DCMJNHKM@MaxExlOpt?$AA@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00056	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00059	ff d7		 call	 edi
  0005b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 14   : 	for(int i(0);i<BMI_MAX_ITEM;i++)
; 15   : 	{
; 16   : 		this->bmi[i].Type = 0;

  0005e	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00061	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
$LL9@Load:
  00066	89 58 fc	 mov	 DWORD PTR [eax-4], ebx

; 17   : 		this->bmi[i].Index = 0;

  00069	89 18		 mov	 DWORD PTR [eax], ebx
  0006b	83 c0 08	 add	 eax, 8
  0006e	49		 dec	 ecx
  0006f	75 f5		 jne	 SHORT $LL9@Load

; 18   : 	}
; 19   : 	FILE * file = fopen(BLOCK_MOVE_ITEM_DIR,"r");

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@
  0007b	e8 00 00 00 00	 call	 _fopen
  00080	8b f8		 mov	 edi, eax
  00082	83 c4 08	 add	 esp, 8

; 20   : 	if(file == NULL)

  00085	3b fb		 cmp	 edi, ebx
  00087	75 25		 jne	 SHORT $LN6@Load

; 21   : 	{
; 22   : 		MessageBoxA(0,BLOCK_MOVE_ITEM_DIR,"LOAD FILE ERROR",0);

  00089	53		 push	 ebx
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OFEBBCJ@?4?4?2Data?2ZtData?2BlockMoveItem?4ini@
  00094	53		 push	 ebx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0009b	5f		 pop	 edi

; 23   : 		this->Enable = false;

  0009c	89 1e		 mov	 DWORD PTR [esi], ebx
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx

; 46   : }

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a3	33 cd		 xor	 ecx, ebp
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN6@Load:

; 24   : 	}
; 25   : 	if(!this->Enable)return;

  000ae	39 1e		 cmp	 DWORD PTR [esi], ebx
  000b0	0f 84 b8 00 00
	00		 je	 $LN10@Load

; 26   : 
; 27   : 	char Buff[256];
; 28   : 	int Flag = 0;
; 29   : 	this->Count = 0;
; 30   : 
; 31   : 	while(!feof(file)) // Проверяем есть ли строка ?документ?

  000b6	57		 push	 edi
  000b7	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], ebx
  000bd	89 9e 4c 1f 00
	00		 mov	 DWORD PTR [esi+8012], ebx
  000c3	e8 00 00 00 00	 call	 _feof
  000c8	83 c4 04	 add	 esp, 4
  000cb	85 c0		 test	 eax, eax
  000cd	0f 85 92 00 00
	00		 jne	 $LN3@Load
$LL4@Load:

; 32   : 	{
; 33   : 		fgets(Buff,256,file);//Функция читает текущу?строку

  000d3	57		 push	 edi
  000d4	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  000da	68 00 01 00 00	 push	 256			; 00000100H
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _fgets

; 34   : 		if(Zt_IsBadFileLine(Buff, Flag)) //Вспомогательная функция

  000e5	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  000eb	51		 push	 ecx
  000ec	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  000f8	83 c4 14	 add	 esp, 20			; 00000014H
  000fb	84 c0		 test	 al, al
  000fd	75 55		 jne	 SHORT $LN1@Load

; 35   : 			continue;
; 36   : 		if(Flag == 1)

  000ff	bb 01 00 00 00	 mov	 ebx, 1
  00104	39 9d f8 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], ebx
  0010a	75 48		 jne	 SHORT $LN1@Load

; 37   : 		{
; 38   : 			int n[2];
; 39   : 			sscanf(Buff, "%d %d", &n[0], &n[1]);

  0010c	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _n$202199[ebp+4]
  00112	50		 push	 eax
  00113	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202199[ebp]
  00119	51		 push	 ecx
  0011a	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  00125	52		 push	 edx
  00126	e8 00 00 00 00	 call	 _sscanf

; 40   : 			this->bmi[this->Count].Type = n[0];

  0012b	8b 86 4c 1f 00
	00		 mov	 eax, DWORD PTR [esi+8012]
  00131	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _n$202199[ebp]
  00137	89 4c c6 0c	 mov	 DWORD PTR [esi+eax*8+12], ecx

; 41   : 			this->bmi[this->Count].Index = n[1];

  0013b	8b 96 4c 1f 00
	00		 mov	 edx, DWORD PTR [esi+8012]
  00141	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _n$202199[ebp+4]
  00147	83 c4 10	 add	 esp, 16			; 00000010H
  0014a	89 44 d6 10	 mov	 DWORD PTR [esi+edx*8+16], eax

; 42   : 			this->Count++;

  0014e	01 9e 4c 1f 00
	00		 add	 DWORD PTR [esi+8012], ebx
$LN1@Load:

; 26   : 
; 27   : 	char Buff[256];
; 28   : 	int Flag = 0;
; 29   : 	this->Count = 0;
; 30   : 
; 31   : 	while(!feof(file)) // Проверяем есть ли строка ?документ?

  00154	57		 push	 edi
  00155	e8 00 00 00 00	 call	 _feof
  0015a	83 c4 04	 add	 esp, 4
  0015d	85 c0		 test	 eax, eax
  0015f	0f 84 6e ff ff
	ff		 je	 $LL4@Load
$LN3@Load:

; 43   : 		}
; 44   : 	}
; 45   : 	fclose(file);

  00165	57		 push	 edi
  00166	e8 00 00 00 00	 call	 _fclose
  0016b	83 c4 04	 add	 esp, 4
$LN10@Load:

; 46   : }

  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	33 cd		 xor	 ecx, ebp
  00175	5b		 pop	 ebx
  00176	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c3		 ret	 0
?Load@cBlockMoveItem@@QAEXXZ ENDP			; cBlockMoveItem::Load
_TEXT	ENDS
PUBLIC	?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z	; cBlockMoveItem::ItemMoveBlockExlOpt
; Function compile flags: /Ogtp
;	COMDAT ?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z
_TEXT	SEGMENT
_exlopt_num$ = 8					; size = 4
?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z PROC	; cBlockMoveItem::ItemMoveBlockExlOpt, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   : //#ifdef DEBUG_CODE
; 51   : 	//LogAddC(2,"EXL MOVE %d",exlopt_num);
; 52   : //#endif
; 53   : 	if(this->MaxExlOpt == 0) return true;

  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN69@ItemMoveBl
  0000a	b0 01		 mov	 al, 1

; 73   : 	else return true;
; 74   : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN69@ItemMoveBl:

; 54   : 	int ExlOptCount = 0;
; 55   : 	switch (exlopt_num)

  00010	8b 55 08	 mov	 edx, DWORD PTR _exlopt_num$[ebp]
  00013	33 c0		 xor	 eax, eax
  00015	83 fa 3f	 cmp	 edx, 63			; 0000003fH
  00018	77 5d		 ja	 SHORT $LN67@ItemMoveBl
  0001a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN72@ItemMoveBl[edx*4]
$LN66@ItemMoveBl:

; 56   : 	{
; 57   : 		case 0: ExlOptCount = 0; break; case 1: ExlOptCount = 1; break; case 2: ExlOptCount = 1; break; case 3: ExlOptCount = 2; break; case 4: ExlOptCount = 1; break;

  00021	33 c0		 xor	 eax, eax

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  00023	3b c1		 cmp	 eax, ecx
  00025	0f 9e c0	 setle	 al

; 73   : 	else return true;
; 74   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN65@ItemMoveBl:

; 56   : 	{
; 57   : 		case 0: ExlOptCount = 0; break; case 1: ExlOptCount = 1; break; case 2: ExlOptCount = 1; break; case 3: ExlOptCount = 2; break; case 4: ExlOptCount = 1; break;

  0002c	b8 01 00 00 00	 mov	 eax, 1

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  00031	3b c1		 cmp	 eax, ecx
  00033	0f 9e c0	 setle	 al

; 73   : 	else return true;
; 74   : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN63@ItemMoveBl:

; 56   : 	{
; 57   : 		case 0: ExlOptCount = 0; break; case 1: ExlOptCount = 1; break; case 2: ExlOptCount = 1; break; case 3: ExlOptCount = 2; break; case 4: ExlOptCount = 1; break;

  0003a	b8 02 00 00 00	 mov	 eax, 2

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  0003f	3b c1		 cmp	 eax, ecx
  00041	0f 9e c0	 setle	 al

; 73   : 	else return true;
; 74   : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN59@ItemMoveBl:

; 58   : 		case 5: ExlOptCount = 2; break; case 6: ExlOptCount = 2; break; case 7: ExlOptCount = 3; break; case 8: ExlOptCount = 1; break; case 9: ExlOptCount = 2; break;

  00048	b8 03 00 00 00	 mov	 eax, 3

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  0004d	3b c1		 cmp	 eax, ecx
  0004f	0f 9e c0	 setle	 al

; 73   : 	else return true;
; 74   : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN51@ItemMoveBl:

; 59   : 		case 10:ExlOptCount = 2; break; case 11:ExlOptCount = 3; break; case 12:ExlOptCount = 2; break; case 13:ExlOptCount = 3; break; case 14:ExlOptCount = 3; break;
; 60   : 		case 15:ExlOptCount = 4; break; case 16:ExlOptCount = 1; break; case 17:ExlOptCount = 2; break; case 18:ExlOptCount = 2; break; case 19:ExlOptCount = 3; break;

  00056	b8 04 00 00 00	 mov	 eax, 4

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  0005b	3b c1		 cmp	 eax, ecx
  0005d	0f 9e c0	 setle	 al

; 73   : 	else return true;
; 74   : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN35@ItemMoveBl:

; 61   : 		case 20:ExlOptCount = 2; break; case 21:ExlOptCount = 3; break; case 22:ExlOptCount = 3; break; case 23:ExlOptCount = 4; break; case 24:ExlOptCount = 2; break;
; 62   : 		case 25:ExlOptCount = 3; break; case 26:ExlOptCount = 3; break; case 27:ExlOptCount = 4; break; case 28:ExlOptCount = 3; break; case 29:ExlOptCount = 4; break;
; 63   : 		case 30:ExlOptCount = 4; break; case 31:ExlOptCount = 5; break; case 32:ExlOptCount = 1; break; case 33:ExlOptCount = 2; break; case 34:ExlOptCount = 2; break;

  00064	b8 05 00 00 00	 mov	 eax, 5

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  00069	3b c1		 cmp	 eax, ecx
  0006b	0f 9e c0	 setle	 al

; 73   : 	else return true;
; 74   : }

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
$LN3@ItemMoveBl:

; 64   : 		case 35:ExlOptCount = 3; break; case 36:ExlOptCount = 2; break; case 37:ExlOptCount = 3; break; case 38:ExlOptCount = 3; break; case 39:ExlOptCount = 4; break;
; 65   : 		case 40:ExlOptCount = 2; break; case 41:ExlOptCount = 3; break; case 42:ExlOptCount = 3; break; case 43:ExlOptCount = 4; break; case 44:ExlOptCount = 3; break;
; 66   : 		case 45:ExlOptCount = 4; break; case 46:ExlOptCount = 4; break; case 47:ExlOptCount = 5; break; case 48:ExlOptCount = 2; break; case 49:ExlOptCount = 3; break;
; 67   : 		case 50:ExlOptCount = 3; break; case 51:ExlOptCount = 4; break; case 52:ExlOptCount = 3; break; case 53:ExlOptCount = 4; break; case 54:ExlOptCount = 4; break;
; 68   : 		case 55:ExlOptCount = 5; break; case 56:ExlOptCount = 3; break; case 57:ExlOptCount = 4; break; case 58:ExlOptCount = 4; break; case 59:ExlOptCount = 5; break;
; 69   : 		case 60:ExlOptCount = 4; break; case 61:ExlOptCount = 5; break; case 62:ExlOptCount = 5; break; case 63:ExlOptCount = 6; break; 

  00072	b8 06 00 00 00	 mov	 eax, 6
$LN67@ItemMoveBl:

; 70   : 	}
; 71   : 	//LogAddC(2,"EXL MOVE %d",ExlOptCount);
; 72   : 	if(ExlOptCount > this->MaxExlOpt) return false;

  00077	3b c1		 cmp	 eax, ecx
  00079	0f 9e c0	 setle	 al

; 73   : 	else return true;
; 74   : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
$LN72@ItemMoveBl:
  00080	00 00 00 00	 DD	 $LN66@ItemMoveBl
  00084	00 00 00 00	 DD	 $LN65@ItemMoveBl
  00088	00 00 00 00	 DD	 $LN65@ItemMoveBl
  0008c	00 00 00 00	 DD	 $LN63@ItemMoveBl
  00090	00 00 00 00	 DD	 $LN65@ItemMoveBl
  00094	00 00 00 00	 DD	 $LN63@ItemMoveBl
  00098	00 00 00 00	 DD	 $LN63@ItemMoveBl
  0009c	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000a0	00 00 00 00	 DD	 $LN65@ItemMoveBl
  000a4	00 00 00 00	 DD	 $LN63@ItemMoveBl
  000a8	00 00 00 00	 DD	 $LN63@ItemMoveBl
  000ac	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000b0	00 00 00 00	 DD	 $LN63@ItemMoveBl
  000b4	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000b8	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000bc	00 00 00 00	 DD	 $LN51@ItemMoveBl
  000c0	00 00 00 00	 DD	 $LN65@ItemMoveBl
  000c4	00 00 00 00	 DD	 $LN63@ItemMoveBl
  000c8	00 00 00 00	 DD	 $LN63@ItemMoveBl
  000cc	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000d0	00 00 00 00	 DD	 $LN63@ItemMoveBl
  000d4	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000d8	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000dc	00 00 00 00	 DD	 $LN51@ItemMoveBl
  000e0	00 00 00 00	 DD	 $LN63@ItemMoveBl
  000e4	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000e8	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000ec	00 00 00 00	 DD	 $LN51@ItemMoveBl
  000f0	00 00 00 00	 DD	 $LN59@ItemMoveBl
  000f4	00 00 00 00	 DD	 $LN51@ItemMoveBl
  000f8	00 00 00 00	 DD	 $LN51@ItemMoveBl
  000fc	00 00 00 00	 DD	 $LN35@ItemMoveBl
  00100	00 00 00 00	 DD	 $LN65@ItemMoveBl
  00104	00 00 00 00	 DD	 $LN63@ItemMoveBl
  00108	00 00 00 00	 DD	 $LN63@ItemMoveBl
  0010c	00 00 00 00	 DD	 $LN59@ItemMoveBl
  00110	00 00 00 00	 DD	 $LN63@ItemMoveBl
  00114	00 00 00 00	 DD	 $LN59@ItemMoveBl
  00118	00 00 00 00	 DD	 $LN59@ItemMoveBl
  0011c	00 00 00 00	 DD	 $LN51@ItemMoveBl
  00120	00 00 00 00	 DD	 $LN63@ItemMoveBl
  00124	00 00 00 00	 DD	 $LN59@ItemMoveBl
  00128	00 00 00 00	 DD	 $LN59@ItemMoveBl
  0012c	00 00 00 00	 DD	 $LN51@ItemMoveBl
  00130	00 00 00 00	 DD	 $LN59@ItemMoveBl
  00134	00 00 00 00	 DD	 $LN51@ItemMoveBl
  00138	00 00 00 00	 DD	 $LN51@ItemMoveBl
  0013c	00 00 00 00	 DD	 $LN35@ItemMoveBl
  00140	00 00 00 00	 DD	 $LN63@ItemMoveBl
  00144	00 00 00 00	 DD	 $LN59@ItemMoveBl
  00148	00 00 00 00	 DD	 $LN59@ItemMoveBl
  0014c	00 00 00 00	 DD	 $LN51@ItemMoveBl
  00150	00 00 00 00	 DD	 $LN59@ItemMoveBl
  00154	00 00 00 00	 DD	 $LN51@ItemMoveBl
  00158	00 00 00 00	 DD	 $LN51@ItemMoveBl
  0015c	00 00 00 00	 DD	 $LN35@ItemMoveBl
  00160	00 00 00 00	 DD	 $LN59@ItemMoveBl
  00164	00 00 00 00	 DD	 $LN51@ItemMoveBl
  00168	00 00 00 00	 DD	 $LN51@ItemMoveBl
  0016c	00 00 00 00	 DD	 $LN35@ItemMoveBl
  00170	00 00 00 00	 DD	 $LN51@ItemMoveBl
  00174	00 00 00 00	 DD	 $LN35@ItemMoveBl
  00178	00 00 00 00	 DD	 $LN35@ItemMoveBl
  0017c	00 00 00 00	 DD	 $LN3@ItemMoveBl
?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z ENDP	; cBlockMoveItem::ItemMoveBlockExlOpt
_TEXT	ENDS
PUBLIC	?Move@cBlockMoveItem@@QAE_NHH@Z			; cBlockMoveItem::Move
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?Move@cBlockMoveItem@@QAE_NHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Pos$ = 12						; size = 4
?Move@cBlockMoveItem@@QAE_NHH@Z PROC			; cBlockMoveItem::Move, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 78   : 	if(!this->Enable)return true;

  00006	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00009	75 07		 jne	 SHORT $LN7@Move
  0000b	b0 01		 mov	 al, 1
  0000d	5e		 pop	 esi

; 101  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
$LN7@Move:

; 79   : 
; 80   : 	LPOBJ lpObj = &gObj[aIndex];

  00012	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 81   : 
; 82   : 	if(lpObj->pInventory[Pos].m_Level > this->MaxLevel)

  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _Pos$[ebp]
  00018	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00024	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0002a	57		 push	 edi
  0002b	8b b8 24 0e 00
	00		 mov	 edi, DWORD PTR [eax+3620]
  00031	0f bf 44 0f 08	 movsx	 eax, WORD PTR [edi+ecx+8]
  00036	03 f9		 add	 edi, ecx
  00038	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]

; 83   : 	{
; 84   : 		return false;

  0003b	7f 42		 jg	 SHORT $LN11@Move

; 85   : 	}
; 86   : 
; 87   : 	if(this->ItemMoveBlockExlOpt(lpObj->pInventory[Pos].m_NewOption) == false)

  0003d	0f b6 8f 97 00
	00 00		 movzx	 ecx, BYTE PTR [edi+151]
  00044	51		 push	 ecx
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z ; cBlockMoveItem::ItemMoveBlockExlOpt
  0004c	84 c0		 test	 al, al

; 88   : 	{
; 89   : 		return false;

  0004e	74 2f		 je	 SHORT $LN11@Move

; 90   : 	}
; 91   : 
; 92   : 	for(int i=0;i<this->Count;i++)

  00050	8b 96 4c 1f 00
	00		 mov	 edx, DWORD PTR [esi+8012]
  00056	33 c9		 xor	 ecx, ecx
  00058	85 d2		 test	 edx, edx
  0005a	7e 1b		 jle	 SHORT $LN2@Move
  0005c	0f bf 7f 06	 movsx	 edi, WORD PTR [edi+6]
  00060	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
$LL4@Move:

; 93   : 	{
; 94   : 		if(lpObj->pInventory[Pos].m_Type == ITEMGET(this->bmi[i].Type,this->bmi[i].Index))

  00063	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00066	c1 e6 09	 shl	 esi, 9
  00069	03 30		 add	 esi, DWORD PTR [eax]
  0006b	3b fe		 cmp	 edi, esi
  0006d	74 10		 je	 SHORT $LN11@Move

; 90   : 	}
; 91   : 
; 92   : 	for(int i=0;i<this->Count;i++)

  0006f	41		 inc	 ecx
  00070	83 c0 08	 add	 eax, 8
  00073	3b ca		 cmp	 ecx, edx
  00075	7c ec		 jl	 SHORT $LL4@Move
$LN2@Move:
  00077	5f		 pop	 edi

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return true;

  00078	b0 01		 mov	 al, 1
  0007a	5e		 pop	 esi

; 101  : }

  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
$LN11@Move:
  0007f	5f		 pop	 edi

; 95   : 		{
; 96   : 			return false;

  00080	32 c0		 xor	 al, al
  00082	5e		 pop	 esi

; 101  : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?Move@cBlockMoveItem@@QAE_NHH@Z ENDP			; cBlockMoveItem::Move
_TEXT	ENDS
PUBLIC	?Sell@cBlockMoveItem@@QAE_NHH@Z			; cBlockMoveItem::Sell
; Function compile flags: /Ogtp
;	COMDAT ?Sell@cBlockMoveItem@@QAE_NHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Pos$ = 12						; size = 4
?Sell@cBlockMoveItem@@QAE_NHH@Z PROC			; cBlockMoveItem::Sell, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 105  : 	if(!this->Enable)return true;

  00006	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00009	75 07		 jne	 SHORT $LN9@Sell
  0000b	b0 01		 mov	 al, 1
  0000d	5f		 pop	 edi

; 126  : 		}
; 127  : 	}
; 128  : 
; 129  : 	return true;
; 130  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
$LN9@Sell:

; 106  : 
; 107  : 	LPOBJ lpObj = &gObj[aIndex];

  00012	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 108  : 
; 109  : 	if(lpObj->pInventory[Pos].m_Number == 1 || lpObj->pInventory[Pos].m_Number == 2 ) return true;

  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _Pos$[ebp]
  00018	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00024	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0002a	56		 push	 esi
  0002b	8b b0 24 0e 00
	00		 mov	 esi, DWORD PTR [eax+3620]
  00031	8b 04 0e	 mov	 eax, DWORD PTR [esi+ecx]
  00034	03 f1		 add	 esi, ecx
  00036	83 f8 01	 cmp	 eax, 1
  00039	74 49		 je	 SHORT $LN7@Sell
  0003b	83 f8 02	 cmp	 eax, 2
  0003e	74 44		 je	 SHORT $LN7@Sell

; 110  : 
; 111  : 	if(lpObj->pInventory[Pos].m_Level > this->MaxLevel)

  00040	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  00044	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]

; 112  : 	{
; 113  : 		return false;

  00047	7f 43		 jg	 SHORT $LN13@Sell

; 114  : 	}
; 115  : 
; 116  : 	if(this->ItemMoveBlockExlOpt(lpObj->pInventory[Pos].m_NewOption) == false)

  00049	0f b6 8e 97 00
	00 00		 movzx	 ecx, BYTE PTR [esi+151]
  00050	51		 push	 ecx
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?ItemMoveBlockExlOpt@cBlockMoveItem@@QAE_NH@Z ; cBlockMoveItem::ItemMoveBlockExlOpt
  00058	84 c0		 test	 al, al

; 117  : 	{
; 118  : 		return false;

  0005a	74 30		 je	 SHORT $LN13@Sell

; 119  : 	}
; 120  : 
; 121  : 	for(int i=0;i<this->Count;i++)

  0005c	8b 97 4c 1f 00
	00		 mov	 edx, DWORD PTR [edi+8012]
  00062	33 c9		 xor	 ecx, ecx
  00064	85 d2		 test	 edx, edx
  00066	7e 1c		 jle	 SHORT $LN7@Sell
  00068	0f bf 76 06	 movsx	 esi, WORD PTR [esi+6]
  0006c	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0006f	90		 npad	 1
$LL4@Sell:

; 122  : 	{
; 123  : 		if(lpObj->pInventory[Pos].m_Type == ITEMGET(this->bmi[i].Type,this->bmi[i].Index))

  00070	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  00073	c1 e7 09	 shl	 edi, 9
  00076	03 38		 add	 edi, DWORD PTR [eax]
  00078	3b f7		 cmp	 esi, edi
  0007a	74 10		 je	 SHORT $LN13@Sell

; 119  : 	}
; 120  : 
; 121  : 	for(int i=0;i<this->Count;i++)

  0007c	41		 inc	 ecx
  0007d	83 c0 08	 add	 eax, 8
  00080	3b ca		 cmp	 ecx, edx
  00082	7c ec		 jl	 SHORT $LL4@Sell
$LN7@Sell:
  00084	5e		 pop	 esi

; 108  : 
; 109  : 	if(lpObj->pInventory[Pos].m_Number == 1 || lpObj->pInventory[Pos].m_Number == 2 ) return true;

  00085	b0 01		 mov	 al, 1
  00087	5f		 pop	 edi

; 126  : 		}
; 127  : 	}
; 128  : 
; 129  : 	return true;
; 130  : }

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN13@Sell:
  0008c	5e		 pop	 esi

; 124  : 		{
; 125  : 			return false;

  0008d	32 c0		 xor	 al, al
  0008f	5f		 pop	 edi

; 126  : 		}
; 127  : 	}
; 128  : 
; 129  : 	return true;
; 130  : }

  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?Sell@cBlockMoveItem@@QAE_NHH@Z ENDP			; cBlockMoveItem::Sell
_TEXT	ENDS
END
