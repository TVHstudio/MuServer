; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\BossRewardItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gBossRewardItem@@3VcBossRewardItem@@A		; gBossRewardItem
_BSS	SEGMENT
?gBossRewardItem@@3VcBossRewardItem@@A DB 0128ecH DUP (?) ; gBossRewardItem
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0DD@FCJECPLA@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ ; `string'
PUBLIC	??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@		; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CC@DAGOHMAP@?4?4?2Data?2ZtData?2BossRewardItem?4in@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Init@cBossRewardItem@@QAEXXZ			; cBossRewardItem::Init
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0DD@FCJECPLA@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
; File e:\work\tranet_version\gs\gameserver\bossrewarditem.cpp
CONST	SEGMENT
??_C@_0DD@FCJECPLA@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ DB '%'
	DB	'd %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@
CONST	SEGMENT
??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@ DB 'LOAD ERROR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DAGOHMAP@?4?4?2Data?2ZtData?2BossRewardItem?4in@
CONST	SEGMENT
??_C@_0CC@DAGOHMAP@?4?4?2Data?2ZtData?2BossRewardItem?4in@ DB '..\Data\Zt'
	DB	'Data\BossRewardItem.ini', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@cBossRewardItem@@QAEXXZ
_TEXT	SEGMENT
_Flag$ = -332						; size = 4
_n$203237 = -328					; size = 68
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Init@cBossRewardItem@@QAEXXZ PROC			; cBossRewardItem::Init, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f1		 mov	 esi, ecx

; 16   : 	ZeroMemory(&this->Drop,sizeof(this->Drop));

  00018	68 a0 09 01 00	 push	 68000			; 000109a0H
  0001d	33 ff		 xor	 edi, edi
  0001f	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memset
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 17   : 
; 18   : 	this->Enable = GetPrivateProfileInt("ZtTeam","Enable",0,BOSS_REWARD_DIR);

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DAGOHMAP@?4?4?2Data?2ZtData?2BossRewardItem?4in@
  00031	57		 push	 edi
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 19   : 	
; 20   : 
; 21   : 	FILE *file = fopen(BOSS_REWARD_DIR,"r");

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DAGOHMAP@?4?4?2Data?2ZtData?2BossRewardItem?4in@
  0004c	89 06		 mov	 DWORD PTR [esi], eax
  0004e	e8 00 00 00 00	 call	 _fopen
  00053	8b d8		 mov	 ebx, eax
  00055	83 c4 08	 add	 esp, 8

; 22   : 	if (file == NULL)

  00058	3b df		 cmp	 ebx, edi
  0005a	75 25		 jne	 SHORT $LN5@Init

; 23   : 	{
; 24   : 		this->Enable = 0;
; 25   : 		MessageBoxA(0,BOSS_REWARD_DIR,"LOAD ERROR",0);

  0005c	57		 push	 edi
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DBBEOKP@LOAD?5ERROR?$AA@
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DAGOHMAP@?4?4?2Data?2ZtData?2BossRewardItem?4in@
  00067	57		 push	 edi
  00068	89 3e		 mov	 DWORD PTR [esi], edi
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx

; 66   : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN5@Init:

; 26   : 		return;
; 27   : 	}
; 28   : 
; 29   : 	this->DropCount = 0;
; 30   : 	this->BlockCount = 0;
; 31   : 
; 32   : 	char Buff[256];
; 33   : 	int Flag = 0;
; 34   : 	while (!feof(file))

  00081	53		 push	 ebx
  00082	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00085	89 be a8 09 01
	00		 mov	 DWORD PTR [esi+68008], edi
  0008b	89 bd b4 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], edi
  00091	e8 00 00 00 00	 call	 _feof
  00096	83 c4 04	 add	 esp, 4
  00099	85 c0		 test	 eax, eax
  0009b	0f 85 33 02 00
	00		 jne	 $LN3@Init
  000a1	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL4@Init:

; 35   : 	{
; 36   : 		fgets(Buff,256,file);

  000a4	53		 push	 ebx
  000a5	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  000ab	68 00 01 00 00	 push	 256			; 00000100H
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _fgets

; 37   : 
; 38   : 		if(Zt_IsBadFileLine(Buff, Flag))

  000b6	8d 95 b4 fe ff
	ff		 lea	 edx, DWORD PTR _Flag$[ebp]
  000bc	52		 push	 edx
  000bd	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  000c9	83 c4 14	 add	 esp, 20			; 00000014H
  000cc	84 c0		 test	 al, al
  000ce	0f 85 ef 01 00
	00		 jne	 $LN1@Init

; 39   : 			continue;
; 40   : 
; 41   : 		if (Flag == 1)

  000d4	39 bd b4 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], edi
  000da	0f 85 e3 01 00
	00		 jne	 $LN1@Init

; 42   : 		{
; 43   : 			int n[17];
; 44   : 			sscanf(Buff,"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", &n[0],&n[1],&n[2],&n[3],&n[4],&n[5],&n[6],&n[7],&n[8],&n[9],&n[10],&n[11],&n[12],&n[13],&n[14],&n[15],&n[16]);

  000e0	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$203237[ebp+64]
  000e6	51		 push	 ecx
  000e7	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _n$203237[ebp+60]
  000ed	52		 push	 edx
  000ee	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _n$203237[ebp+56]
  000f4	50		 push	 eax
  000f5	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _n$203237[ebp+52]
  000fb	51		 push	 ecx
  000fc	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _n$203237[ebp+48]
  00102	52		 push	 edx
  00103	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _n$203237[ebp+44]
  00109	50		 push	 eax
  0010a	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$203237[ebp+40]
  00110	51		 push	 ecx
  00111	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _n$203237[ebp+36]
  00117	52		 push	 edx
  00118	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _n$203237[ebp+32]
  0011e	50		 push	 eax
  0011f	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$203237[ebp+28]
  00125	51		 push	 ecx
  00126	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR _n$203237[ebp+24]
  0012c	52		 push	 edx
  0012d	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _n$203237[ebp+20]
  00133	50		 push	 eax
  00134	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$203237[ebp+16]
  0013a	51		 push	 ecx
  0013b	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR _n$203237[ebp+12]
  00141	52		 push	 edx
  00142	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _n$203237[ebp+8]
  00148	50		 push	 eax
  00149	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _n$203237[ebp+4]
  0014f	51		 push	 ecx
  00150	8d 95 b8 fe ff
	ff		 lea	 edx, DWORD PTR _n$203237[ebp]
  00156	52		 push	 edx
  00157	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FCJECPLA@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _sscanf

; 45   : 			this->Drop[this->DropCount].MonsterID		= n[0];

  00168	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0016b	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp]
  00171	8b c8		 mov	 ecx, eax
  00173	c1 e1 04	 shl	 ecx, 4
  00176	03 c8		 add	 ecx, eax
  00178	89 54 8e 08	 mov	 DWORD PTR [esi+ecx*4+8], edx

; 46   : 			this->Drop[this->DropCount].Type			= n[1];

  0017c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017f	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+4]
  00185	8b c8		 mov	 ecx, eax
  00187	c1 e1 04	 shl	 ecx, 4
  0018a	03 c8		 add	 ecx, eax
  0018c	89 54 8e 0c	 mov	 DWORD PTR [esi+ecx*4+12], edx

; 47   : 			this->Drop[this->DropCount].Index			= n[2];

  00190	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00193	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+8]
  00199	8b c8		 mov	 ecx, eax
  0019b	c1 e1 04	 shl	 ecx, 4
  0019e	03 c8		 add	 ecx, eax
  001a0	89 54 8e 10	 mov	 DWORD PTR [esi+ecx*4+16], edx

; 48   : 			this->Drop[this->DropCount].MinLevel		= n[3];

  001a4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001a7	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+12]
  001ad	8b c8		 mov	 ecx, eax
  001af	c1 e1 04	 shl	 ecx, 4
  001b2	03 c8		 add	 ecx, eax
  001b4	89 54 8e 14	 mov	 DWORD PTR [esi+ecx*4+20], edx

; 49   : 			this->Drop[this->DropCount].MaxLevel		= n[4];

  001b8	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001bb	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+16]
  001c1	8b c8		 mov	 ecx, eax
  001c3	c1 e1 04	 shl	 ecx, 4
  001c6	03 c8		 add	 ecx, eax
  001c8	89 54 8e 18	 mov	 DWORD PTR [esi+ecx*4+24], edx

; 50   : 			this->Drop[this->DropCount].Dur				= n[5];

  001cc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001cf	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+20]
  001d5	8b c8		 mov	 ecx, eax
  001d7	c1 e1 04	 shl	 ecx, 4
  001da	03 c8		 add	 ecx, eax
  001dc	89 54 8e 1c	 mov	 DWORD PTR [esi+ecx*4+28], edx

; 51   : 			this->Drop[this->DropCount].OptionRate		= n[6];

  001e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001e3	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+24]
  001e9	8b c8		 mov	 ecx, eax
  001eb	c1 e1 04	 shl	 ecx, 4
  001ee	83 c4 4c	 add	 esp, 76			; 0000004cH
  001f1	03 c8		 add	 ecx, eax
  001f3	89 54 8e 20	 mov	 DWORD PTR [esi+ecx*4+32], edx

; 52   : 			this->Drop[this->DropCount].MaxOption		= n[7];

  001f7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001fa	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+28]
  00200	8b c8		 mov	 ecx, eax
  00202	c1 e1 04	 shl	 ecx, 4
  00205	03 c8		 add	 ecx, eax
  00207	89 54 8e 24	 mov	 DWORD PTR [esi+ecx*4+36], edx

; 53   : 			this->Drop[this->DropCount].LuckRate		= n[8];

  0020b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0020e	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+32]
  00214	8b c8		 mov	 ecx, eax
  00216	c1 e1 04	 shl	 ecx, 4
  00219	03 c8		 add	 ecx, eax
  0021b	89 54 8e 28	 mov	 DWORD PTR [esi+ecx*4+40], edx

; 54   : 			this->Drop[this->DropCount].LuckOption		= n[9];

  0021f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00222	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+36]
  00228	8b c8		 mov	 ecx, eax
  0022a	c1 e1 04	 shl	 ecx, 4
  0022d	03 c8		 add	 ecx, eax
  0022f	89 54 8e 2c	 mov	 DWORD PTR [esi+ecx*4+44], edx

; 55   : 			this->Drop[this->DropCount].SkillRate		= n[10];

  00233	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00236	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+40]
  0023c	8b c8		 mov	 ecx, eax
  0023e	c1 e1 04	 shl	 ecx, 4
  00241	03 c8		 add	 ecx, eax
  00243	89 54 8e 30	 mov	 DWORD PTR [esi+ecx*4+48], edx

; 56   : 			this->Drop[this->DropCount].SkillOption		= n[11];

  00247	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024a	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+44]
  00250	8b c8		 mov	 ecx, eax
  00252	c1 e1 04	 shl	 ecx, 4
  00255	03 c8		 add	 ecx, eax
  00257	89 54 8e 34	 mov	 DWORD PTR [esi+ecx*4+52], edx

; 57   : 			this->Drop[this->DropCount].ExlRate			= n[12];

  0025b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0025e	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+48]
  00264	8b c8		 mov	 ecx, eax
  00266	c1 e1 04	 shl	 ecx, 4
  00269	03 c8		 add	 ecx, eax
  0026b	89 54 8e 38	 mov	 DWORD PTR [esi+ecx*4+56], edx

; 58   : 			this->Drop[this->DropCount].ExlOption		= n[13];

  0026f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00272	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+52]
  00278	8b c8		 mov	 ecx, eax
  0027a	c1 e1 04	 shl	 ecx, 4
  0027d	03 c8		 add	 ecx, eax
  0027f	89 54 8e 3c	 mov	 DWORD PTR [esi+ecx*4+60], edx

; 59   : 			this->Drop[this->DropCount].AncRate			= n[14];

  00283	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00286	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+56]
  0028c	8b c8		 mov	 ecx, eax
  0028e	c1 e1 04	 shl	 ecx, 4
  00291	03 c8		 add	 ecx, eax
  00293	89 54 8e 40	 mov	 DWORD PTR [esi+ecx*4+64], edx

; 60   : 			this->Drop[this->DropCount].AncOption		= n[15];

  00297	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0029a	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+60]
  002a0	03 c7		 add	 eax, edi
  002a2	8b c8		 mov	 ecx, eax
  002a4	c1 e1 04	 shl	 ecx, 4
  002a7	03 c8		 add	 ecx, eax
  002a9	89 14 8e	 mov	 DWORD PTR [esi+ecx*4], edx

; 61   : 			this->Drop[this->DropCount].ItemDropRate	= n[16];

  002ac	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  002af	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _n$203237[ebp+64]
  002b5	8b c8		 mov	 ecx, eax
  002b7	c1 e1 04	 shl	 ecx, 4
  002ba	03 c8		 add	 ecx, eax
  002bc	89 54 8e 48	 mov	 DWORD PTR [esi+ecx*4+72], edx

; 62   : 			this->DropCount++;

  002c0	01 7e 04	 add	 DWORD PTR [esi+4], edi
$LN1@Init:

; 26   : 		return;
; 27   : 	}
; 28   : 
; 29   : 	this->DropCount = 0;
; 30   : 	this->BlockCount = 0;
; 31   : 
; 32   : 	char Buff[256];
; 33   : 	int Flag = 0;
; 34   : 	while (!feof(file))

  002c3	53		 push	 ebx
  002c4	e8 00 00 00 00	 call	 _feof
  002c9	83 c4 04	 add	 esp, 4
  002cc	85 c0		 test	 eax, eax
  002ce	0f 84 d0 fd ff
	ff		 je	 $LL4@Init
$LN3@Init:

; 63   : 		}
; 64   : 	}
; 65   : 	fclose(file);

  002d4	53		 push	 ebx
  002d5	e8 00 00 00 00	 call	 _fclose

; 66   : }

  002da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002dd	83 c4 04	 add	 esp, 4
  002e0	5f		 pop	 edi
  002e1	5e		 pop	 esi
  002e2	33 cd		 xor	 ecx, ebp
  002e4	5b		 pop	 ebx
  002e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ea	8b e5		 mov	 esp, ebp
  002ec	5d		 pop	 ebp
  002ed	c3		 ret	 0
?Init@cBossRewardItem@@QAEXXZ ENDP			; cBossRewardItem::Init
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ProccessItemDrop@cBossRewardItem@@QAE_NPAUOBJECTSTRUCT@@@Z ; cBossRewardItem::ProccessItemDrop
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ProccessItemDrop@cBossRewardItem@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iAncOpt$203260 = -424					; size = 4
_iOption$203256 = -420					; size = 4
_iLevel$203255 = -416					; size = 4
_iExlOpt$203259 = -412					; size = 4
_this$GSCopy$ = -408					; size = 4
_iLuck$203257 = -408					; size = 4
_ArrayDropItem$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
_lpMobObj$ = 8						; size = 4
?ProccessItemDrop@cBossRewardItem@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; cBossRewardItem::ProccessItemDrop, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 01 00
	00		 sub	 esp, 424		; 000001a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 70   : 	if (!this->Enable)	

  00016	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _lpMobObj$[ebp]

; 76   : 	for (int i=0; i < this->DropCount; i++)

  0001d	89 9d 68 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00023	75 14		 jne	 SHORT $LN21@ProccessIt

; 71   : 	{
; 72   : 		return false;

  00025	5f		 pop	 edi
  00026	32 c0		 xor	 al, al
  00028	5b		 pop	 ebx

; 156  : 	}
; 157  : 
; 158  : 	return false;
; 159  : }

  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN21@ProccessIt:
  00039	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003c	56		 push	 esi

; 73   : 	}
; 74   : 	int ArrayDropItem[100];
; 75   : 	int CountItem = 0;

  0003d	33 f6		 xor	 esi, esi

; 76   : 	for (int i=0; i < this->DropCount; i++)

  0003f	33 c0		 xor	 eax, eax
  00041	85 c9		 test	 ecx, ecx
  00043	0f 8e de 01 00
	00		 jle	 $LN14@ProccessIt

; 73   : 	}
; 74   : 	int ArrayDropItem[100];
; 75   : 	int CountItem = 0;

  00049	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  0004c	8d 64 24 00	 npad	 4
$LL20@ProccessIt:

; 77   : 	{
; 78   : 		if(CountItem >= 100)

  00050	83 fe 64	 cmp	 esi, 100		; 00000064H
  00053	7d 21		 jge	 SHORT $LN25@ProccessIt

; 79   : 		{
; 80   : 			break;
; 81   : 		}
; 82   : 		if( lpMobObj->Class == this->Drop[i].MonsterID )

  00055	0f b7 9f b8 00
	00 00		 movzx	 ebx, WORD PTR [edi+184]
  0005c	3b 1a		 cmp	 ebx, DWORD PTR [edx]
  0005e	75 08		 jne	 SHORT $LN19@ProccessIt

; 83   : 		{
; 84   : 			ArrayDropItem[CountItem] = i;

  00060	89 84 b5 6c fe
	ff ff		 mov	 DWORD PTR _ArrayDropItem$[ebp+esi*4], eax

; 85   : 			CountItem++;

  00067	46		 inc	 esi
$LN19@ProccessIt:

; 76   : 	for (int i=0; i < this->DropCount; i++)

  00068	8b 9d 68 fe ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  0006e	40		 inc	 eax
  0006f	83 c2 44	 add	 edx, 68			; 00000044H
  00072	3b c1		 cmp	 eax, ecx
  00074	7c da		 jl	 SHORT $LL20@ProccessIt
$LN25@ProccessIt:

; 86   : 		}
; 87   : 	}
; 88   : 	
; 89   : 	if (CountItem == 0)

  00076	85 f6		 test	 esi, esi

; 90   : 	{
; 91   : 		return false;

  00078	0f 84 a9 01 00
	00		 je	 $LN14@ProccessIt

; 92   : 	}
; 93   : 	//srand(time(NULL));
; 94   : 	int ItemIndex = ArrayDropItem[rand()%CountItem];

  0007e	e8 00 00 00 00	 call	 _rand
  00083	99		 cdq
  00084	f7 fe		 idiv	 esi
  00086	8b 94 95 6c fe
	ff ff		 mov	 edx, DWORD PTR _ArrayDropItem$[ebp+edx*4]

; 95   : 	//srand(time(NULL));
; 96   : 	if ( (rand()%10000) < this->Drop[ItemIndex].ItemDropRate )

  0008d	8b c2		 mov	 eax, edx
  0008f	c1 e0 04	 shl	 eax, 4
  00092	03 c2		 add	 eax, edx
  00094	8d 34 83	 lea	 esi, DWORD PTR [ebx+eax*4]
  00097	e8 00 00 00 00	 call	 _rand
  0009c	99		 cdq
  0009d	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000a2	f7 f9		 idiv	 ecx
  000a4	3b 56 48	 cmp	 edx, DWORD PTR [esi+72]
  000a7	0f 8d 7a 01 00
	00		 jge	 $LN14@ProccessIt

; 97   : 	{
; 98   : 		int iLevel	= 0;
; 99   : 		int iOption	= 0;
; 100  : 		int iLuck	= 0;
; 101  : 		int iSkill	= 0;
; 102  : 		int iExlOpt	= 0;
; 103  : 		int iAncOpt	= 0;
; 104  : 
; 105  : 		if( this->Drop[ItemIndex].MaxLevel == this->Drop[ItemIndex].MinLevel )

  000ad	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000b0	33 c9		 xor	 ecx, ecx
  000b2	89 8d 5c fe ff
	ff		 mov	 DWORD PTR _iOption$203256[ebp], ecx
  000b8	89 8d 68 fe ff
	ff		 mov	 DWORD PTR _iLuck$203257[ebp], ecx
  000be	89 8d 64 fe ff
	ff		 mov	 DWORD PTR _iExlOpt$203259[ebp], ecx
  000c4	89 8d 58 fe ff
	ff		 mov	 DWORD PTR _iAncOpt$203260[ebp], ecx
  000ca	39 46 18	 cmp	 DWORD PTR [esi+24], eax
  000cd	75 08		 jne	 SHORT $LN13@ProccessIt

; 106  : 		{
; 107  : 			iLevel = this->Drop[ItemIndex].MinLevel;

  000cf	89 85 60 fe ff
	ff		 mov	 DWORD PTR _iLevel$203255[ebp], eax

; 108  : 		}
; 109  : 		else

  000d5	eb 1a		 jmp	 SHORT $LN12@ProccessIt
$LN13@ProccessIt:

; 110  : 		{
; 111  : 			iLevel = this->Drop[ItemIndex].MinLevel + (rand() % (this->Drop[ItemIndex].MaxLevel - this->Drop[ItemIndex].MinLevel + 1));

  000d7	8b d8		 mov	 ebx, eax
  000d9	e8 00 00 00 00	 call	 _rand
  000de	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000e1	2b cb		 sub	 ecx, ebx
  000e3	41		 inc	 ecx
  000e4	99		 cdq
  000e5	f7 f9		 idiv	 ecx
  000e7	03 d3		 add	 edx, ebx
  000e9	89 95 60 fe ff
	ff		 mov	 DWORD PTR _iLevel$203255[ebp], edx
  000ef	33 c9		 xor	 ecx, ecx
$LN12@ProccessIt:

; 112  : 		}	
; 113  : 
; 114  : 		if( this->Drop[ItemIndex].MaxOption != 0 )

  000f1	39 4e 24	 cmp	 DWORD PTR [esi+36], ecx
  000f4	74 2a		 je	 SHORT $LN31@ProccessIt

; 115  : 		{
; 116  : 			if( rand() % 100 < this->Drop[ItemIndex].OptionRate )

  000f6	e8 00 00 00 00	 call	 _rand
  000fb	99		 cdq
  000fc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00101	f7 f9		 idiv	 ecx
  00103	3b 56 20	 cmp	 edx, DWORD PTR [esi+32]
  00106	7d 18		 jge	 SHORT $LN31@ProccessIt

; 117  : 			{
; 118  : 				iOption = rand() % this->Drop[ItemIndex].MaxOption + 1;

  00108	e8 00 00 00 00	 call	 _rand
  0010d	99		 cdq
  0010e	f7 7e 24	 idiv	 DWORD PTR [esi+36]
  00111	bb 01 00 00 00	 mov	 ebx, 1
  00116	03 d3		 add	 edx, ebx
  00118	89 95 5c fe ff
	ff		 mov	 DWORD PTR _iOption$203256[ebp], edx
  0011e	eb 05		 jmp	 SHORT $LN10@ProccessIt
$LN31@ProccessIt:
  00120	bb 01 00 00 00	 mov	 ebx, 1
$LN10@ProccessIt:

; 119  : 			}
; 120  : 		}
; 121  : 
; 122  : 		if( this->Drop[ItemIndex].LuckOption == 1 )

  00125	39 5e 2c	 cmp	 DWORD PTR [esi+44], ebx
  00128	75 18		 jne	 SHORT $LN8@ProccessIt

; 123  : 		{
; 124  : 			if( rand() % 100 < this->Drop[ItemIndex].LuckRate )

  0012a	e8 00 00 00 00	 call	 _rand
  0012f	99		 cdq
  00130	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00135	f7 f9		 idiv	 ecx
  00137	3b 56 28	 cmp	 edx, DWORD PTR [esi+40]
  0013a	7d 06		 jge	 SHORT $LN8@ProccessIt

; 125  : 			{
; 126  : 				iLuck = 1;

  0013c	89 9d 68 fe ff
	ff		 mov	 DWORD PTR _iLuck$203257[ebp], ebx
$LN8@ProccessIt:

; 127  : 			}
; 128  : 		}
; 129  : 
; 130  : 		if( this->Drop[ItemIndex].SkillOption == 1 )

  00142	39 5e 34	 cmp	 DWORD PTR [esi+52], ebx
  00145	75 18		 jne	 SHORT $LN6@ProccessIt

; 131  : 		{
; 132  : 			if( rand() % 100 < this->Drop[ItemIndex].SkillRate )

  00147	e8 00 00 00 00	 call	 _rand
  0014c	99		 cdq
  0014d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00152	f7 f9		 idiv	 ecx
  00154	3b 56 30	 cmp	 edx, DWORD PTR [esi+48]
  00157	7d 06		 jge	 SHORT $LN6@ProccessIt

; 133  : 			{
; 134  : 				iLuck = 1;

  00159	89 9d 68 fe ff
	ff		 mov	 DWORD PTR _iLuck$203257[ebp], ebx
$LN6@ProccessIt:

; 135  : 			}
; 136  : 		}
; 137  : 
; 138  : 		if(this->Drop[ItemIndex].ExlOption)

  0015f	83 7e 3c 00	 cmp	 DWORD PTR [esi+60], 0
  00163	74 24		 je	 SHORT $LN4@ProccessIt

; 139  : 		{
; 140  : 			if( rand() % 100 < this->Drop[ItemIndex].ExlRate )

  00165	e8 00 00 00 00	 call	 _rand
  0016a	99		 cdq
  0016b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00170	f7 f9		 idiv	 ecx
  00172	3b 56 38	 cmp	 edx, DWORD PTR [esi+56]
  00175	7d 12		 jge	 SHORT $LN4@ProccessIt

; 141  : 			{
; 142  : 				iExlOpt = GenExcOpt(this->Drop[ItemIndex].ExlOption);

  00177	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  0017a	52		 push	 edx
  0017b	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  00180	83 c4 04	 add	 esp, 4
  00183	89 85 64 fe ff
	ff		 mov	 DWORD PTR _iExlOpt$203259[ebp], eax
$LN4@ProccessIt:

; 143  : 			}
; 144  : 		}
; 145  : 
; 146  : 		if(this->Drop[ItemIndex].AncOption == 5 || this->Drop[ItemIndex].AncOption == 10)

  00189	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0018c	83 f8 05	 cmp	 eax, 5
  0018f	74 05		 je	 SHORT $LN2@ProccessIt
  00191	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00194	75 1b		 jne	 SHORT $LN1@ProccessIt
$LN2@ProccessIt:

; 147  : 		{
; 148  : 			if( rand() % 100 < this->Drop[ItemIndex].AncRate )

  00196	e8 00 00 00 00	 call	 _rand
  0019b	99		 cdq
  0019c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a1	f7 f9		 idiv	 ecx
  001a3	3b 56 40	 cmp	 edx, DWORD PTR [esi+64]
  001a6	7d 09		 jge	 SHORT $LN1@ProccessIt

; 149  : 			{
; 150  : 				iAncOpt = this->Drop[ItemIndex].AncOption;

  001a8	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  001ab	89 95 58 fe ff
	ff		 mov	 DWORD PTR _iAncOpt$203260[ebp], edx
$LN1@ProccessIt:

; 151  : 			}
; 152  : 		}
; 153  : 
; 154  : 		ItemSerialCreateSend(lpMobObj->m_Index,lpMobObj->MapNumber,lpMobObj->X,lpMobObj->Y,ITEMGET(this->Drop[ItemIndex].Type,this->Drop[ItemIndex].Index),iLevel,this->Drop[ItemIndex].Dur,iSkill,iLuck,iOption,gObjMonsterTopHitDamageUser(lpMobObj),iExlOpt,iAncOpt);

  001b1	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _iAncOpt$203260[ebp]
  001b7	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _iExlOpt$203259[ebp]
  001bd	50		 push	 eax
  001be	51		 push	 ecx
  001bf	57		 push	 edi
  001c0	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser
  001c5	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _iOption$203256[ebp]
  001cb	0f b6 4e 1c	 movzx	 ecx, BYTE PTR [esi+28]
  001cf	83 c4 04	 add	 esp, 4
  001d2	50		 push	 eax
  001d3	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _iLuck$203257[ebp]
  001d9	52		 push	 edx
  001da	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR _iLevel$203255[ebp]
  001e0	50		 push	 eax
  001e1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001e4	6a 00		 push	 0
  001e6	51		 push	 ecx
  001e7	0f b6 8f 46 01
	00 00		 movzx	 ecx, BYTE PTR [edi+326]
  001ee	52		 push	 edx
  001ef	0f b6 97 44 01
	00 00		 movzx	 edx, BYTE PTR [edi+324]
  001f6	c1 e0 09	 shl	 eax, 9
  001f9	03 46 10	 add	 eax, DWORD PTR [esi+16]
  001fc	50		 push	 eax
  001fd	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  00204	51		 push	 ecx
  00205	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00207	52		 push	 edx
  00208	50		 push	 eax
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0020f	83 c4 34	 add	 esp, 52			; 00000034H
  00212	5e		 pop	 esi
  00213	5f		 pop	 edi

; 155  : 		return true;

  00214	b0 01		 mov	 al, 1
  00216	5b		 pop	 ebx

; 156  : 	}
; 157  : 
; 158  : 	return false;
; 159  : }

  00217	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021a	33 cd		 xor	 ecx, ebp
  0021c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c2 04 00	 ret	 4
$LN14@ProccessIt:
  00227	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022a	5e		 pop	 esi
  0022b	5f		 pop	 edi
  0022c	33 cd		 xor	 ecx, ebp
  0022e	32 c0		 xor	 al, al
  00230	5b		 pop	 ebx
  00231	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c2 04 00	 ret	 4
?ProccessItemDrop@cBossRewardItem@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; cBossRewardItem::ProccessItemDrop
_TEXT	ENDS
END
