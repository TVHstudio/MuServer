; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\BuffEffect.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CBuffEffect@@6B@				; CBuffEffect::`vftable'
PUBLIC	??0CBuffEffect@@QAE@XZ				; CBuffEffect::CBuffEffect
PUBLIC	??_R4CBuffEffect@@6B@				; CBuffEffect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBuffEffect@@@8				; CBuffEffect `RTTI Type Descriptor'
PUBLIC	??_R3CBuffEffect@@8				; CBuffEffect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBuffEffect@@8				; CBuffEffect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBuffEffect@@8			; CBuffEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECBuffEffect@@UAEPAXI@Z:PROC			; CBuffEffect::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CBuffEffect@@8
; File e:\work\tranet_version\gs\gameserver\buffeffect.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CBuffEffect@@8 DD FLAT:??_R0?AVCBuffEffect@@@8 ; CBuffEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_R2CBuffEffect@@8
rdata$r	SEGMENT
??_R2CBuffEffect@@8 DD FLAT:??_R1A@?0A@EA@CBuffEffect@@8 ; CBuffEffect::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBuffEffect@@8
rdata$r	SEGMENT
??_R3CBuffEffect@@8 DD 00H				; CBuffEffect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBuffEffect@@@8
_DATA	SEGMENT
??_R0?AVCBuffEffect@@@8 DD FLAT:??_7type_info@@6B@	; CBuffEffect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBuffEffect@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBuffEffect@@6B@
rdata$r	SEGMENT
??_R4CBuffEffect@@6B@ DD 00H				; CBuffEffect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBuffEffect@@@8
	DD	FLAT:??_R3CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_7CBuffEffect@@6B@
CONST	SEGMENT
??_7CBuffEffect@@6B@ DD FLAT:??_R4CBuffEffect@@6B@	; CBuffEffect::`vftable'
	DD	FLAT:??_ECBuffEffect@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CBuffEffect@@QAE@XZ
_TEXT	SEGMENT
??0CBuffEffect@@QAE@XZ PROC				; CBuffEffect::CBuffEffect, COMDAT
; _this$ = ecx

; 18   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBuffEffect@@6B@

; 19   : 
; 20   : }

  00008	c3		 ret	 0
??0CBuffEffect@@QAE@XZ ENDP				; CBuffEffect::CBuffEffect
_TEXT	ENDS
PUBLIC	??1CBuffEffect@@UAE@XZ				; CBuffEffect::~CBuffEffect
; Function compile flags: /Ogtp
;	COMDAT ??1CBuffEffect@@UAE@XZ
_TEXT	SEGMENT
??1CBuffEffect@@UAE@XZ PROC				; CBuffEffect::~CBuffEffect, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBuffEffect@@6B@

; 24   : 
; 25   : }

  00006	c3		 ret	 0
??1CBuffEffect@@UAE@XZ ENDP				; CBuffEffect::~CBuffEffect
_TEXT	ENDS
PUBLIC	?Init@CBuffEffect@@QAEXXZ			; CBuffEffect::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CBuffEffect@@QAEXXZ
_TEXT	SEGMENT
?Init@CBuffEffect@@QAEXXZ PROC				; CBuffEffect::Init, COMDAT
; _this$ = ecx

; 30   : 	this->iLoadCount = 0;	

  00000	33 d2		 xor	 edx, edx
  00002	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00005	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  00008	b9 fe 00 00 00	 mov	 ecx, 254		; 000000feH
  0000d	8d 49 00	 npad	 3
$LL3@Init:

; 31   : 
; 32   : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )
; 33   : 	{
; 34   : 		this->m_EffectData[i].btIndex			= 0xFF;

  00010	c6 40 e8 ff	 mov	 BYTE PTR [eax-24], 255	; 000000ffH

; 35   : 		this->m_EffectData[i].btType			= 0;

  00014	88 10		 mov	 BYTE PTR [eax], dl

; 36   : 		this->m_EffectData[i].btClearType		= 0;

  00016	66 89 50 01	 mov	 WORD PTR [eax+1], dx

; 37   : 		this->m_EffectData[i].btNotification	= 0;
; 38   : 		this->m_EffectData[i].szBuffInfo[0]		= 0;

  0001a	88 50 03	 mov	 BYTE PTR [eax+3], dl
  0001d	83 c0 7f	 add	 eax, 127		; 0000007fH
  00020	49		 dec	 ecx
  00021	75 ed		 jne	 SHORT $LL3@Init

; 39   : 	}
; 40   : }

  00023	c3		 ret	 0
?Init@CBuffEffect@@QAEXXZ ENDP				; CBuffEffect::Init
_TEXT	ENDS
PUBLIC	?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z		; CBuffEffect::Insert
; Function compile flags: /Ogtp
;	COMDAT ?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z
_TEXT	SEGMENT
_Index$ = 8						; size = 1
_ViewPortIndex$ = 12					; size = 1
_ItemType$ = 16						; size = 1
_ItemIndex$ = 20					; size = 1
_BuffName$ = 24						; size = 4
_Type$ = 28						; size = 1
_Notification$ = 32					; size = 1
_ClearType$ = 36					; size = 1
_BuffInfo$ = 40						; size = 4
?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z PROC		; CBuffEffect::Insert, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 114  : 	this->m_EffectData[this->iLoadCount].btIndex = Index;

  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	8a 55 08	 mov	 dl, BYTE PTR _Index$[ebp]
  0000b	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  0000e	88 54 01 08	 mov	 BYTE PTR [ecx+eax+8], dl

; 115  : 	this->m_EffectData[this->iLoadCount].btViewPortIndex = ViewPortIndex;

  00012	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00015	8a 55 0c	 mov	 dl, BYTE PTR _ViewPortIndex$[ebp]
  00018	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  0001b	88 54 01 09	 mov	 BYTE PTR [ecx+eax+9], dl

; 116  : 	this->m_EffectData[this->iLoadCount].btItemType = ItemType;

  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	8a 55 10	 mov	 dl, BYTE PTR _ItemType$[ebp]
  00025	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00028	88 54 01 0a	 mov	 BYTE PTR [ecx+eax+10], dl

; 117  : 	this->m_EffectData[this->iLoadCount].btItemIndex = ItemIndex;

  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002f	8a 55 14	 mov	 dl, BYTE PTR _ItemIndex$[ebp]
  00032	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00035	88 54 01 0b	 mov	 BYTE PTR [ecx+eax+11], dl

; 118  : 	this->m_EffectData[this->iLoadCount].btType = Type;

  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	8a 55 1c	 mov	 dl, BYTE PTR _Type$[ebp]
  0003f	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00042	88 54 01 20	 mov	 BYTE PTR [ecx+eax+32], dl

; 119  : 	this->m_EffectData[this->iLoadCount].btNotification = Notification;

  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	8a 55 20	 mov	 dl, BYTE PTR _Notification$[ebp]
  0004c	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  0004f	88 54 01 21	 mov	 BYTE PTR [ecx+eax+33], dl

; 120  : 	this->m_EffectData[this->iLoadCount].btClearType = ClearType;

  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	8a 55 24	 mov	 dl, BYTE PTR _ClearType$[ebp]
  00059	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  0005c	88 54 01 22	 mov	 BYTE PTR [ecx+eax+34], dl

; 121  : 
; 122  : 	memcpy(this->m_EffectData[this->iLoadCount].szBuffName,	BuffName, sizeof(this->m_EffectData[this->iLoadCount].szBuffName));

  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	8b 55 18	 mov	 edx, DWORD PTR _BuffName$[ebp]
  00066	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00069	56		 push	 esi
  0006a	8b 32		 mov	 esi, DWORD PTR [edx]
  0006c	89 74 01 0c	 mov	 DWORD PTR [ecx+eax+12], esi
  00070	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00073	8d 4c 01 0c	 lea	 ecx, DWORD PTR [ecx+eax+12]
  00077	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  0007a	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  0007d	89 71 08	 mov	 DWORD PTR [ecx+8], esi
  00080	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  00083	89 71 0c	 mov	 DWORD PTR [ecx+12], esi
  00086	8b 52 10	 mov	 edx, DWORD PTR [edx+16]

; 123  : 	memcpy(this->m_EffectData[this->iLoadCount].szBuffInfo,	BuffInfo, sizeof(this->m_EffectData[this->iLoadCount].szBuffInfo));

  00089	8b 75 28	 mov	 esi, DWORD PTR _BuffInfo$[ebp]
  0008c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	6b c9 7f	 imul	 ecx, 127		; 0000007fH
  00095	57		 push	 edi
  00096	8d 7c 01 23	 lea	 edi, DWORD PTR [ecx+eax+35]
  0009a	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0009f	f3 a5		 rep movsd

; 124  : 
; 125  : 	this->iLoadCount++;

  000a1	ff 40 04	 inc	 DWORD PTR [eax+4]
  000a4	5f		 pop	 edi

; 126  : 
; 127  : 	return true;

  000a5	b0 01		 mov	 al, 1
  000a7	5e		 pop	 esi

; 128  : }

  000a8	5d		 pop	 ebp
  000a9	c2 24 00	 ret	 36			; 00000024H
?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z ENDP		; CBuffEffect::Insert
_TEXT	ENDS
PUBLIC	?IsValidIndex@CBuffEffect@@QAE_NE@Z		; CBuffEffect::IsValidIndex
; Function compile flags: /Ogtp
;	COMDAT ?IsValidIndex@CBuffEffect@@QAE_NE@Z
_TEXT	SEGMENT
_btBuffIndex$ = 8					; size = 1
?IsValidIndex@CBuffEffect@@QAE_NE@Z PROC		; CBuffEffect::IsValidIndex, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 	if ( btBuffIndex < 0 || btBuffIndex > MAX_BUFF_EFFECT-1 )

  00003	80 7d 08 fe	 cmp	 BYTE PTR _btBuffIndex$[ebp], 254 ; 000000feH
  00007	0f 96 c0	 setbe	 al

; 134  : 	{
; 135  : 		return false;
; 136  : 	}
; 137  : 
; 138  : 	return true;
; 139  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?IsValidIndex@CBuffEffect@@QAE_NE@Z ENDP		; CBuffEffect::IsValidIndex
_TEXT	ENDS
PUBLIC	?GetBuffData@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@E@Z ; CBuffEffect::GetBuffData
; Function compile flags: /Ogtp
;	COMDAT ?GetBuffData@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@E@Z
_TEXT	SEGMENT
_btBuffIndex$ = 8					; size = 1
?GetBuffData@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@E@Z PROC ; CBuffEffect::GetBuffData, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 144  : 	int loc2 = 0;
; 145  : 
; 146  : 	if ( this->IsValidIndex(btBuffIndex) == false )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _btBuffIndex$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?IsValidIndex@CBuffEffect@@QAE_NE@Z ; CBuffEffect::IsValidIndex
  00010	84 c0		 test	 al, al

; 147  : 	{
; 148  : 		return NULL;

  00012	74 1b		 je	 SHORT $LN2@GetBuffDat

; 149  : 	}
; 150  : 
; 151  : #ifdef DEBUG_CODE
; 152  : 	LogAddC(1,"btBuffIndex: %d",btBuffIndex);
; 153  : #endif
; 154  : 
; 155  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00014	33 c0		 xor	 eax, eax
  00016	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL4@GetBuffDat:

; 156  : 	{
; 157  : 		if ( this->m_EffectData[i].btIndex == btBuffIndex )

  00020	38 1a		 cmp	 BYTE PTR [edx], bl
  00022	74 13		 je	 SHORT $LN9@GetBuffDat

; 149  : 	}
; 150  : 
; 151  : #ifdef DEBUG_CODE
; 152  : 	LogAddC(1,"btBuffIndex: %d",btBuffIndex);
; 153  : #endif
; 154  : 
; 155  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00024	40		 inc	 eax
  00025	83 c2 7f	 add	 edx, 127		; 0000007fH
  00028	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  0002d	7c f1		 jl	 SHORT $LL4@GetBuffDat
$LN2@GetBuffDat:
  0002f	5e		 pop	 esi

; 160  : 		}
; 161  : 	}
; 162  : 
; 163  : 	return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	5b		 pop	 ebx

; 164  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN9@GetBuffDat:

; 158  : 		{
; 159  : 			return &this->m_EffectData[i];

  00037	6b c0 7f	 imul	 eax, 127		; 0000007fH
  0003a	8d 44 30 08	 lea	 eax, DWORD PTR [eax+esi+8]
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 164  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?GetBuffData@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@E@Z ENDP ; CBuffEffect::GetBuffData
_TEXT	ENDS
PUBLIC	?GetBuffDataFromItemCode@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@G@Z ; CBuffEffect::GetBuffDataFromItemCode
; Function compile flags: /Ogtp
;	COMDAT ?GetBuffDataFromItemCode@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@G@Z
_TEXT	SEGMENT
_wItemCode$ = 8						; size = 2
?GetBuffDataFromItemCode@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@G@Z PROC ; CBuffEffect::GetBuffDataFromItemCode, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 168  : 	LPBUFF_EFFECT_DATA lpBuffData = 0;
; 169  : 
; 170  : #ifdef DEBUG_CODE
; 171  : 	LogAddC(1,"wItemCode: %d",wItemCode);
; 172  : #endif
; 173  : 
; 174  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00005	0f b7 75 08	 movzx	 esi, WORD PTR _wItemCode$[ebp]
  00009	57		 push	 edi
  0000a	33 c0		 xor	 eax, eax
  0000c	8d 51 0b	 lea	 edx, DWORD PTR [ecx+11]
  0000f	90		 npad	 1
$LL4@GetBuffDat@2:

; 175  : 	{
; 176  : 		if( ITEMGET(this->m_EffectData[i].btItemType,this->m_EffectData[i].btItemIndex) == wItemCode )

  00010	0f b6 7a ff	 movzx	 edi, BYTE PTR [edx-1]
  00014	0f b6 1a	 movzx	 ebx, BYTE PTR [edx]
  00017	c1 e7 09	 shl	 edi, 9
  0001a	03 fb		 add	 edi, ebx
  0001c	3b fe		 cmp	 edi, esi
  0001e	74 14		 je	 SHORT $LN8@GetBuffDat@2

; 168  : 	LPBUFF_EFFECT_DATA lpBuffData = 0;
; 169  : 
; 170  : #ifdef DEBUG_CODE
; 171  : 	LogAddC(1,"wItemCode: %d",wItemCode);
; 172  : #endif
; 173  : 
; 174  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00020	40		 inc	 eax
  00021	83 c2 7f	 add	 edx, 127		; 0000007fH
  00024	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  00029	7c e5		 jl	 SHORT $LL4@GetBuffDat@2

; 179  : 		}
; 180  : 	}
; 181  : 	return NULL;

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	33 c0		 xor	 eax, eax
  0002f	5b		 pop	 ebx

; 182  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN8@GetBuffDat@2:

; 177  : 		{
; 178  : 			return &this->m_EffectData[i];

  00034	6b c0 7f	 imul	 eax, 127		; 0000007fH
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	8d 44 08 08	 lea	 eax, DWORD PTR [eax+ecx+8]
  0003d	5b		 pop	 ebx

; 182  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?GetBuffDataFromItemCode@CBuffEffect@@QAEPAUBUFF_EFFECT_DATA@@G@Z ENDP ; CBuffEffect::GetBuffDataFromItemCode
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCBuffEffect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBuffEffect@@UAEPAXI@Z PROC				; CBuffEffect::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBuffEffect@@UAE@XZ	; CBuffEffect::~CBuffEffect
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCBuffEffect@@UAEPAXI@Z ENDP				; CBuffEffect::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CBuffEffect@@QAE_NPAD@Z			; CBuffEffect::Load
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CBuffEffect@@QAE_NPAD@Z
_TEXT	SEGMENT
_szBuffInfo$ = -152					; size = 100
_szBuffName$ = -52					; size = 20
_btClearType$ = -32					; size = 1
_btNotification$ = -28					; size = 1
_btIndex$ = -24						; size = 1
_btType$ = -20						; size = 1
_btViewPortIndex$ = -16					; size = 1
_btItemType$ = -12					; size = 1
_btItemIndex$ = -8					; size = 1
tv188 = -4						; size = 4
tv186 = -4						; size = 4
tv180 = -4						; size = 4
tv178 = -4						; size = 4
tv172 = -4						; size = 4
tv170 = -4						; size = 4
tv163 = -4						; size = 4
tv159 = -4						; size = 4
tv157 = -4						; size = 4
tv139 = -4						; size = 4
tv133 = -4						; size = 4
tv94 = -4						; size = 4
tv92 = -4						; size = 4
tv86 = -4						; size = 4
_filename$ = 8						; size = 4
tv194 = 10						; size = 2
tv183 = 10						; size = 2
tv175 = 10						; size = 2
tv167 = 10						; size = 2
tv136 = 10						; size = 2
tv130 = 10						; size = 2
tv79 = 10						; size = 2
?Load@CBuffEffect@@QAE_NPAD@Z PROC			; CBuffEffect::Load, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx

; 45   : 	this->Init();

  0000c	e8 00 00 00 00	 call	 ?Init@CBuffEffect@@QAEXXZ ; CBuffEffect::Init

; 46   : 
; 47   : 	if ( (SMDFile = fopen(filename, "r")) == NULL )

  00011	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _fopen
  0001f	83 c4 08	 add	 esp, 8
  00022	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  00027	85 c0		 test	 eax, eax
  00029	75 09		 jne	 SHORT $LN8@Load

; 48   : 	{
; 49   : 		return false;

  0002b	32 c0		 xor	 al, al
  0002d	5b		 pop	 ebx

; 109  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN8@Load:

; 50   : 	}
; 51   : 
; 52   : 	SMDToken Token;
; 53   : 	int iIndex = 0;
; 54   : 	BYTE btIndex = 0;
; 55   : 	BYTE btViewPortIndex = 0;
; 56   : 	BYTE btItemType = 0;
; 57   : 	BYTE btItemIndex = 0;
; 58   : 	BYTE btType = 0;
; 59   : 	BYTE btNotification = 0;
; 60   : 	BYTE btClearType = 0;
; 61   : 	char szBuffName[20];
; 62   : 	char szBuffInfo[100];
; 63   : 
; 64   : 	while ( TRUE )
; 65   : 	{
; 66   : 		Token = GetToken();

  00034	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 67   : 
; 68   : 		if ( Token == END )

  00039	83 f8 02	 cmp	 eax, 2
  0003c	0f 84 30 02 00
	00		 je	 $LN15@Load
  00042	56		 push	 esi
  00043	57		 push	 edi
$LL7@Load:

; 69   : 		{
; 70   : 			break;
; 71   : 		}
; 72   : 		
; 73   : 		if ( Token == NUMBER )

  00044	83 f8 01	 cmp	 eax, 1
  00047	0f 85 15 02 00
	00		 jne	 $LN14@Load

; 74   : 		{
; 75   : 			iIndex = (int)TokenNumber;
; 76   : 
; 77   : 			while ( TRUE )
; 78   : 			{
; 79   : 				Token = GetToken();

  0004d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 
; 81   : 				if ( strcmp("end", TokenString) == 0 )

  00052	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00057	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0005c	8d 64 24 00	 npad	 4
$LL17@Load:
  00060	8a 10		 mov	 dl, BYTE PTR [eax]
  00062	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00064	75 1a		 jne	 SHORT $LN18@Load
  00066	84 d2		 test	 dl, dl
  00068	74 12		 je	 SHORT $LN19@Load
  0006a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0006d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00070	75 0e		 jne	 SHORT $LN18@Load
  00072	83 c0 02	 add	 eax, 2
  00075	83 c1 02	 add	 ecx, 2
  00078	84 d2		 test	 dl, dl
  0007a	75 e4		 jne	 SHORT $LL17@Load
$LN19@Load:
  0007c	33 c0		 xor	 eax, eax
  0007e	eb 05		 jmp	 SHORT $LN20@Load
$LN18@Load:
  00080	1b c0		 sbb	 eax, eax
  00082	83 d8 ff	 sbb	 eax, -1
$LN20@Load:
  00085	85 c0		 test	 eax, eax
  00087	0f 84 d5 01 00
	00		 je	 $LN14@Load
  0008d	8d 49 00	 npad	 3
$LL3@Load:

; 82   : 				{
; 83   : 					break;
; 84   : 				}
; 85   : 
; 86   : 				btIndex			= (BYTE)TokenNumber; Token = GetToken();

  00090	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00096	d9 7d 0a	 fnstcw	 WORD PTR tv194[ebp]
  00099	0f b7 45 0a	 movzx	 eax, WORD PTR tv194[ebp]
  0009d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000a2	89 45 fc	 mov	 DWORD PTR tv163[ebp], eax
  000a5	d9 6d fc	 fldcw	 WORD PTR tv163[ebp]
  000a8	db 5d fc	 fistp	 DWORD PTR tv139[ebp]
  000ab	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv139[ebp]
  000af	88 4d e8	 mov	 BYTE PTR _btIndex$[ebp], cl
  000b2	d9 6d 0a	 fldcw	 WORD PTR tv194[ebp]
  000b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 87   : 				btViewPortIndex	= (BYTE)TokenNumber; Token = GetToken();

  000ba	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c0	d9 7d 0a	 fnstcw	 WORD PTR tv130[ebp]
  000c3	0f b7 45 0a	 movzx	 eax, WORD PTR tv130[ebp]
  000c7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000cc	89 45 fc	 mov	 DWORD PTR tv94[ebp], eax
  000cf	d9 6d fc	 fldcw	 WORD PTR tv94[ebp]
  000d2	db 5d fc	 fistp	 DWORD PTR tv86[ebp]
  000d5	0f b6 55 fc	 movzx	 edx, BYTE PTR tv86[ebp]
  000d9	88 55 f0	 mov	 BYTE PTR _btViewPortIndex$[ebp], dl
  000dc	d9 6d 0a	 fldcw	 WORD PTR tv130[ebp]
  000df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 				btItemType		= (BYTE)TokenNumber; Token = GetToken();

  000e4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ea	d9 7d 0a	 fnstcw	 WORD PTR tv79[ebp]
  000ed	0f b7 45 0a	 movzx	 eax, WORD PTR tv79[ebp]
  000f1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000f6	89 45 fc	 mov	 DWORD PTR tv159[ebp], eax
  000f9	d9 6d fc	 fldcw	 WORD PTR tv159[ebp]
  000fc	db 5d fc	 fistp	 DWORD PTR tv157[ebp]
  000ff	0f b6 45 fc	 movzx	 eax, BYTE PTR tv157[ebp]
  00103	88 45 f4	 mov	 BYTE PTR _btItemType$[ebp], al
  00106	d9 6d 0a	 fldcw	 WORD PTR tv79[ebp]
  00109	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 				btItemIndex		= (BYTE)TokenNumber; Token = GetToken();

  0010e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00114	d9 7d 0a	 fnstcw	 WORD PTR tv136[ebp]
  00117	0f b7 45 0a	 movzx	 eax, WORD PTR tv136[ebp]
  0011b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00120	89 45 fc	 mov	 DWORD PTR tv133[ebp], eax
  00123	d9 6d fc	 fldcw	 WORD PTR tv133[ebp]
  00126	db 5d fc	 fistp	 DWORD PTR tv92[ebp]
  00129	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv92[ebp]
  0012d	88 4d f8	 mov	 BYTE PTR _btItemIndex$[ebp], cl
  00130	d9 6d 0a	 fldcw	 WORD PTR tv136[ebp]
  00133	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 
; 91   : 				memcpy(szBuffName, TokenString, sizeof(szBuffName));

  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _TokenString
  0013e	a1 04 00 00 00	 mov	 eax, DWORD PTR _TokenString+4
  00143	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _TokenString+8
  00149	89 55 cc	 mov	 DWORD PTR _szBuffName$[ebp], edx
  0014c	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _TokenString+12
  00152	89 45 d0	 mov	 DWORD PTR _szBuffName$[ebp+4], eax
  00155	a1 10 00 00 00	 mov	 eax, DWORD PTR _TokenString+16
  0015a	89 4d d4	 mov	 DWORD PTR _szBuffName$[ebp+8], ecx
  0015d	89 55 d8	 mov	 DWORD PTR _szBuffName$[ebp+12], edx
  00160	89 45 dc	 mov	 DWORD PTR _szBuffName$[ebp+16], eax

; 92   : 
; 93   : 				Token = GetToken();

  00163	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 94   : 
; 95   : 				btType			= (BYTE)TokenNumber; Token = GetToken();

  00168	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016e	d9 7d 0a	 fnstcw	 WORD PTR tv167[ebp]
  00171	0f b7 45 0a	 movzx	 eax, WORD PTR tv167[ebp]
  00175	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0017a	89 45 fc	 mov	 DWORD PTR tv170[ebp], eax
  0017d	d9 6d fc	 fldcw	 WORD PTR tv170[ebp]
  00180	db 5d fc	 fistp	 DWORD PTR tv172[ebp]
  00183	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv172[ebp]
  00187	88 4d ec	 mov	 BYTE PTR _btType$[ebp], cl
  0018a	d9 6d 0a	 fldcw	 WORD PTR tv167[ebp]
  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 96   : 				btNotification	= (BYTE)TokenNumber; Token = GetToken();

  00192	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00198	d9 7d 0a	 fnstcw	 WORD PTR tv175[ebp]
  0019b	0f b7 45 0a	 movzx	 eax, WORD PTR tv175[ebp]
  0019f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001a4	89 45 fc	 mov	 DWORD PTR tv178[ebp], eax
  001a7	d9 6d fc	 fldcw	 WORD PTR tv178[ebp]
  001aa	db 5d fc	 fistp	 DWORD PTR tv180[ebp]
  001ad	0f b6 55 fc	 movzx	 edx, BYTE PTR tv180[ebp]
  001b1	88 55 e4	 mov	 BYTE PTR _btNotification$[ebp], dl
  001b4	d9 6d 0a	 fldcw	 WORD PTR tv175[ebp]
  001b7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 				btClearType		= (BYTE)TokenNumber; Token = GetToken();

  001bc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c2	d9 7d 0a	 fnstcw	 WORD PTR tv183[ebp]
  001c5	0f b7 45 0a	 movzx	 eax, WORD PTR tv183[ebp]
  001c9	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001ce	89 45 fc	 mov	 DWORD PTR tv186[ebp], eax
  001d1	d9 6d fc	 fldcw	 WORD PTR tv186[ebp]
  001d4	db 5d fc	 fistp	 DWORD PTR tv188[ebp]
  001d7	0f b6 45 fc	 movzx	 eax, BYTE PTR tv188[ebp]
  001db	88 45 e0	 mov	 BYTE PTR _btClearType$[ebp], al
  001de	d9 6d 0a	 fldcw	 WORD PTR tv183[ebp]
  001e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 
; 99   : 				memcpy(szBuffInfo, TokenString, sizeof(szBuffInfo));
; 100  : 
; 101  : 				this->Insert(btIndex, btViewPortIndex, btItemType, btItemIndex, szBuffName, btType, btNotification, btClearType, szBuffInfo);

  001e6	8b 55 e0	 mov	 edx, DWORD PTR _btClearType$[ebp]
  001e9	8b 45 e4	 mov	 eax, DWORD PTR _btNotification$[ebp]
  001ec	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  001f1	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  001f6	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR _szBuffInfo$[ebp]
  001fc	f3 a5		 rep movsd
  001fe	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _szBuffInfo$[ebp]
  00204	51		 push	 ecx
  00205	8b 4d ec	 mov	 ecx, DWORD PTR _btType$[ebp]
  00208	52		 push	 edx
  00209	50		 push	 eax
  0020a	8b 45 f8	 mov	 eax, DWORD PTR _btItemIndex$[ebp]
  0020d	51		 push	 ecx
  0020e	8b 4d f4	 mov	 ecx, DWORD PTR _btItemType$[ebp]
  00211	8d 55 cc	 lea	 edx, DWORD PTR _szBuffName$[ebp]
  00214	52		 push	 edx
  00215	8b 55 f0	 mov	 edx, DWORD PTR _btViewPortIndex$[ebp]
  00218	50		 push	 eax
  00219	8b 45 e8	 mov	 eax, DWORD PTR _btIndex$[ebp]
  0021c	51		 push	 ecx
  0021d	52		 push	 edx
  0021e	50		 push	 eax
  0021f	8b cb		 mov	 ecx, ebx
  00221	e8 00 00 00 00	 call	 ?Insert@CBuffEffect@@QAE_NEEEEPADEEE0@Z ; CBuffEffect::Insert
  00226	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0022b	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00230	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL21@Load:

; 80   : 
; 81   : 				if ( strcmp("end", TokenString) == 0 )

  00235	8a 10		 mov	 dl, BYTE PTR [eax]
  00237	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00239	75 1a		 jne	 SHORT $LN22@Load
  0023b	84 d2		 test	 dl, dl
  0023d	74 12		 je	 SHORT $LN23@Load
  0023f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00242	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00245	75 0e		 jne	 SHORT $LN22@Load
  00247	83 c0 02	 add	 eax, 2
  0024a	83 c1 02	 add	 ecx, 2
  0024d	84 d2		 test	 dl, dl
  0024f	75 e4		 jne	 SHORT $LL21@Load
$LN23@Load:
  00251	33 c0		 xor	 eax, eax
  00253	eb 05		 jmp	 SHORT $LN24@Load
$LN22@Load:
  00255	1b c0		 sbb	 eax, eax
  00257	83 d8 ff	 sbb	 eax, -1
$LN24@Load:
  0025a	85 c0		 test	 eax, eax
  0025c	0f 85 2e fe ff
	ff		 jne	 $LL3@Load
$LN14@Load:

; 50   : 	}
; 51   : 
; 52   : 	SMDToken Token;
; 53   : 	int iIndex = 0;
; 54   : 	BYTE btIndex = 0;
; 55   : 	BYTE btViewPortIndex = 0;
; 56   : 	BYTE btItemType = 0;
; 57   : 	BYTE btItemIndex = 0;
; 58   : 	BYTE btType = 0;
; 59   : 	BYTE btNotification = 0;
; 60   : 	BYTE btClearType = 0;
; 61   : 	char szBuffName[20];
; 62   : 	char szBuffInfo[100];
; 63   : 
; 64   : 	while ( TRUE )
; 65   : 	{
; 66   : 		Token = GetToken();

  00262	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 67   : 
; 68   : 		if ( Token == END )

  00267	83 f8 02	 cmp	 eax, 2
  0026a	0f 85 d4 fd ff
	ff		 jne	 $LL7@Load
  00270	5f		 pop	 edi
  00271	5e		 pop	 esi
$LN15@Load:

; 102  : 			}
; 103  : 		}
; 104  : 	}
; 105  : 
; 106  : 	fclose(SMDFile);

  00272	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00278	51		 push	 ecx
  00279	e8 00 00 00 00	 call	 _fclose
  0027e	83 c4 04	 add	 esp, 4

; 107  : 
; 108  : 	return true;

  00281	b0 01		 mov	 al, 1
  00283	5b		 pop	 ebx

; 109  : }

  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c2 04 00	 ret	 4
?Load@CBuffEffect@@QAE_NPAD@Z ENDP			; CBuffEffect::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_BuffEffect@@YAXXZ
text$yc	SEGMENT
??__Eg_BuffEffect@@YAXXZ PROC				; `dynamic initializer for 'g_BuffEffect'', COMDAT

; 15   : CBuffEffect g_BuffEffect;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00005	e8 00 00 00 00	 call	 ??0CBuffEffect@@QAE@XZ	; CBuffEffect::CBuffEffect
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_BuffEffect@@YAXXZ ; `dynamic atexit destructor for 'g_BuffEffect''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_BuffEffect@@YAXXZ ENDP				; `dynamic initializer for 'g_BuffEffect''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_BuffEffect@@YAXXZ
text$yd	SEGMENT
??__Fg_BuffEffect@@YAXXZ PROC				; `dynamic atexit destructor for 'g_BuffEffect'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00005	e9 00 00 00 00	 jmp	 ??1CBuffEffect@@UAE@XZ	; CBuffEffect::~CBuffEffect
??__Fg_BuffEffect@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_BuffEffect''
text$yd	ENDS
PUBLIC	?g_BuffEffect@@3VCBuffEffect@@A			; g_BuffEffect
_BSS	SEGMENT
?g_BuffEffect@@3VCBuffEffect@@A DB 07e8cH DUP (?)	; g_BuffEffect
_BSS	ENDS
CRT$XCU	SEGMENT
_g_BuffEffect$initializer$ DD FLAT:??__Eg_BuffEffect@@YAXXZ
CRT$XCU	ENDS
END
