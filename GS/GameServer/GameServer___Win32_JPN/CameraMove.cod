; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CameraMove.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1CCameraMove@@QAE@XZ				; CCameraMove::~CCameraMove
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\cameramove.cpp
;	COMDAT ??1CCameraMove@@QAE@XZ
_TEXT	SEGMENT
??1CCameraMove@@QAE@XZ PROC				; CCameraMove::~CCameraMove, COMDAT
; _this$ = ecx

; 19   : }

  00000	c3		 ret	 0
??1CCameraMove@@QAE@XZ ENDP				; CCameraMove::~CCameraMove
_TEXT	ENDS
PUBLIC	?Init@CCameraMove@@QAEXXZ			; CCameraMove::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CCameraMove@@QAEXXZ
_TEXT	SEGMENT
?Init@CCameraMove@@QAEXXZ PROC				; CCameraMove::Init, COMDAT
; _this$ = ecx

; 23   : }

  00000	c3		 ret	 0
?Init@CCameraMove@@QAEXXZ ENDP				; CCameraMove::Init
_TEXT	ENDS
PUBLIC	?Load@CCameraMove@@QAEXXZ			; CCameraMove::Load
; Function compile flags: /Ogtp
;	COMDAT ?Load@CCameraMove@@QAEXXZ
_TEXT	SEGMENT
?Load@CCameraMove@@QAEXXZ PROC				; CCameraMove::Load, COMDAT
; _this$ = ecx

; 27   : 	this->Init();
; 28   : 
; 29   : 	if(g_ZtLicense.user.CustomCameraMove)
; 30   : 	{
; 31   : 		return;
; 32   : 	}
; 33   : 
; 34   : }

  00000	c3		 ret	 0
?Load@CCameraMove@@QAEXXZ ENDP				; CCameraMove::Load
_TEXT	ENDS
PUBLIC	?CGReqViewe@CCameraMove@@QAEXPAUPMSG_REQ_CAMERAMOVE_VIEWE@@H@Z ; CCameraMove::CGReqViewe
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
;	COMDAT ?CGReqViewe@CCameraMove@@QAEXPAUPMSG_REQ_CAMERAMOVE_VIEWE@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqViewe@CCameraMove@@QAEXPAUPMSG_REQ_CAMERAMOVE_VIEWE@@H@Z PROC ; CCameraMove::CGReqViewe, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	if(!g_ZtLicense.user.CustomCameraMove)

  00003	80 3d f5 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+245, 0
  0000a	74 35		 je	 SHORT $LN3@CGReqViewe

; 39   : 	{
; 40   : 		return;
; 41   : 	}
; 42   : 
; 43   : 	if(!lpMsg->Result)

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  0000f	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00013	74 2c		 je	 SHORT $LN3@CGReqViewe

; 44   : 	{
; 45   : 		return;
; 46   : 	}
; 47   : 
; 48   : 	int iActive = lpMsg->Active;
; 49   : 
; 50   : 	int iX = lpMsg->X;
; 51   : 
; 52   : 	int iY = lpMsg->Y;
; 53   : 
; 54   : 	LPOBJ lpUser = &gObj[aIndex];

  00015	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00018	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00021	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	56		 push	 esi
  00028	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]

; 55   : 
; 56   : 	//// =====
; 57   : 
; 58   : 	////gObjViewportClose(lpUser);
; 59   : 	////gObjViewportListProtocolDestroy(lpUser);
; 60   : 
; 61   : 	//	gObjViewportListProtocolDestroy(&gObj[aIndex]); //season4 add-on
; 62   : 
; 63   : 	//	//GCTeleportSend(&gObj[aIndex],gt,mapNumber,gObj[aIndex].X,gObj[aIndex].Y,gObj[aIndex].Dir);
; 64   : 	//	
; 65   : 	//	gObjViewportListProtocolCreate(&gObj[aIndex]); //season4 add-on
; 66   : 
; 67   : 	//	gObjClearViewport(&gObj[aIndex]);
; 68   : 
; 69   : 	//					//	gObjViewportListDestroy(aIndex);
; 70   : 	//					//}
; 71   : 	//					//for (int  n=0;n<OBJMAX;n++)
; 72   : 	//					//{
; 73   : 	//					//	gObjViewportListCreate(n);
; 74   : 	//					//}
; 75   : 	//					//for (int n=0;n<OBJMAX;n++)
; 76   : 	//					//{
; 77   : 	//					//	gObjViewportListProtocol(n);	return;
; 78   : 
; 79   : 	//// =====
; 80   : 
; 81   : 	lpUser->m_CamMove = iActive;

  0002b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 82   : 	lpUser->m_CamX = iX;
; 83   : 	lpUser->m_CamY = iY;

  0002e	89 b0 3c 2b 00
	00		 mov	 DWORD PTR [eax+11068], esi
  00034	89 88 34 2b 00
	00		 mov	 DWORD PTR [eax+11060], ecx
  0003a	89 90 38 2b 00
	00		 mov	 DWORD PTR [eax+11064], edx
  00040	5e		 pop	 esi
$LN3@CGReqViewe:

; 84   : 
; 85   : 	//this->GCAnsViewe(aIndex);
; 86   : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?CGReqViewe@CCameraMove@@QAEXPAUPMSG_REQ_CAMERAMOVE_VIEWE@@H@Z ENDP ; CCameraMove::CGReqViewe
_TEXT	ENDS
PUBLIC	?GCAnsViewe@CCameraMove@@QAEXH@Z		; CCameraMove::GCAnsViewe
; Function compile flags: /Ogtp
;	COMDAT ?GCAnsViewe@CCameraMove@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?GCAnsViewe@CCameraMove@@QAEXH@Z PROC			; CCameraMove::GCAnsViewe, COMDAT
; _this$ = ecx

; 90   : 	LPOBJ lpUser = &gObj[aIndex];
; 91   : 
; 92   : 	//gObjClearViewport(lpUser);
; 93   : 	//gObjViewportListCreate(lpUser->m_Index);
; 94   : 	//gObjViewportListProtocolCreate(lpUser);
; 95   : }

  00000	c2 04 00	 ret	 4
?GCAnsViewe@CCameraMove@@QAEXH@Z ENDP			; CCameraMove::GCAnsViewe
_TEXT	ENDS
PUBLIC	?CheckViewport@CCameraMove@@QAEHHHH@Z		; CCameraMove::CheckViewport
; Function compile flags: /Ogtp
;	COMDAT ?CheckViewport@CCameraMove@@QAEHHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?CheckViewport@CCameraMove@@QAEHHHH@Z PROC		; CCameraMove::CheckViewport, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   : 	LPOBJ lpUser = &gObj[aIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 100  : 
; 101  : 	int iCamViewe = 20;
; 102  : 	int iCamX = lpUser->m_CamX;
; 103  : 	int iCamY = lpUser->m_CamY;
; 104  : 
; 105  : 	if(x < iCamX - iCamViewe  || x > iCamX + iCamViewe || y < iCamY - iCamViewe || y > iCamY + iCamViewe)

  00006	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00009	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0000f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	56		 push	 esi
  00016	8b 88 38 2b 00
	00		 mov	 ecx, DWORD PTR [eax+11064]
  0001c	8b 80 3c 2b 00
	00		 mov	 eax, DWORD PTR [eax+11068]
  00022	8d 71 ec	 lea	 esi, DWORD PTR [ecx-20]
  00025	3b d6		 cmp	 edx, esi
  00027	5e		 pop	 esi
  00028	7c 21		 jl	 SHORT $LN1@CheckViewp
  0002a	83 c1 14	 add	 ecx, 20			; 00000014H
  0002d	3b d1		 cmp	 edx, ecx
  0002f	7f 1a		 jg	 SHORT $LN1@CheckViewp
  00031	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00034	8d 50 ec	 lea	 edx, DWORD PTR [eax-20]
  00037	3b ca		 cmp	 ecx, edx
  00039	7c 10		 jl	 SHORT $LN1@CheckViewp
  0003b	83 c0 14	 add	 eax, 20			; 00000014H
  0003e	3b c8		 cmp	 ecx, eax
  00040	7f 09		 jg	 SHORT $LN1@CheckViewp

; 108  : 	}
; 109  : 
; 110  : 	return true;

  00042	b8 01 00 00 00	 mov	 eax, 1

; 111  : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
$LN1@CheckViewp:

; 106  : 	{
; 107  : 		return false;

  0004b	33 c0		 xor	 eax, eax

; 111  : }

  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?CheckViewport@CCameraMove@@QAEHHHH@Z ENDP		; CCameraMove::CheckViewport
_TEXT	ENDS
PUBLIC	??0CCameraMove@@QAE@XZ				; CCameraMove::CCameraMove
; Function compile flags: /Ogtp
;	COMDAT ??0CCameraMove@@QAE@XZ
_TEXT	SEGMENT
??0CCameraMove@@QAE@XZ PROC				; CCameraMove::CCameraMove, COMDAT
; _this$ = ecx

; 13   : {

  00000	8b c1		 mov	 eax, ecx

; 14   : 	this->Init();
; 15   : }

  00002	c3		 ret	 0
??0CCameraMove@@QAE@XZ ENDP				; CCameraMove::CCameraMove
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CameraMove@@YAXXZ
text$yc	SEGMENT
??__Eg_CameraMove@@YAXXZ PROC				; `dynamic initializer for 'g_CameraMove'', COMDAT

; 10   : CCameraMove g_CameraMove;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fg_CameraMove@@YAXXZ ; `dynamic atexit destructor for 'g_CameraMove''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Eg_CameraMove@@YAXXZ ENDP				; `dynamic initializer for 'g_CameraMove''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CameraMove@@YAXXZ
text$yd	SEGMENT
??__Fg_CameraMove@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CameraMove'', COMDAT
  00000	c3		 ret	 0
??__Fg_CameraMove@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CameraMove''
text$yd	ENDS
PUBLIC	?g_CameraMove@@3VCCameraMove@@A			; g_CameraMove
_BSS	SEGMENT
?g_CameraMove@@3VCCameraMove@@A DB 01H DUP (?)		; g_CameraMove
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CameraMove$initializer$ DD FLAT:??__Eg_CameraMove@@YAXXZ
CRT$XCU	ENDS
END
