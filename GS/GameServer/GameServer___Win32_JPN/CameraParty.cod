; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CameraParty.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CCameraParty@@QAE@XZ				; CCameraParty::CCameraParty
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\cameraparty.cpp
;	COMDAT ??0CCameraParty@@QAE@XZ
_TEXT	SEGMENT
??0CCameraParty@@QAE@XZ PROC				; CCameraParty::CCameraParty, COMDAT
; _this$ = ecx

; 11   : {

  00000	8b c1		 mov	 eax, ecx

; 12   : 	this->m_Active = false;

  00002	c6 00 00	 mov	 BYTE PTR [eax], 0

; 13   : }

  00005	c3		 ret	 0
??0CCameraParty@@QAE@XZ ENDP				; CCameraParty::CCameraParty
_TEXT	ENDS
PUBLIC	??1CCameraParty@@QAE@XZ				; CCameraParty::~CCameraParty
; Function compile flags: /Ogtp
;	COMDAT ??1CCameraParty@@QAE@XZ
_TEXT	SEGMENT
??1CCameraParty@@QAE@XZ PROC				; CCameraParty::~CCameraParty, COMDAT
; _this$ = ecx

; 17   : 
; 18   : }

  00000	c3		 ret	 0
??1CCameraParty@@QAE@XZ ENDP				; CCameraParty::~CCameraParty
_TEXT	ENDS
PUBLIC	?Load@CCameraParty@@QAEXXZ			; CCameraParty::Load
; Function compile flags: /Ogtp
;	COMDAT ?Load@CCameraParty@@QAEXXZ
_TEXT	SEGMENT
?Load@CCameraParty@@QAEXXZ PROC				; CCameraParty::Load, COMDAT
; _this$ = ecx

; 22   : 	
; 23   : }

  00000	c3		 ret	 0
?Load@CCameraParty@@QAEXXZ ENDP				; CCameraParty::Load
_TEXT	ENDS
PUBLIC	?CheckViewport@CCameraParty@@QAEHHHH@Z		; CCameraParty::CheckViewport
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CheckViewport@CCameraParty@@QAEHHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?CheckViewport@CCameraParty@@QAEHHHH@Z PROC		; CCameraParty::CheckViewport, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : 	LPOBJ lpUser = &gObj[aIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 65   : 
; 66   : 	int aCamIndex = lpUser->m_CameraPartyIndex;

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00012	8b 84 08 48 2b
	00 00		 mov	 eax, DWORD PTR [eax+ecx+11080]

; 67   : 
; 68   : 	if (!OBJMAX_RANGE(aCamIndex))

  00019	85 c0		 test	 eax, eax
  0001b	78 51		 js	 SHORT $LN1@CheckViewp
  0001d	33 d2		 xor	 edx, edx
  0001f	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00024	0f 9e c2	 setle	 dl
  00027	85 d2		 test	 edx, edx

; 69   : 	{
; 70   : 		return false;

  00029	74 43		 je	 SHORT $LN1@CheckViewp

; 71   : 	}
; 72   : 
; 73   : 	LPOBJ lpCamUser = &gObj[aCamIndex];
; 74   : 
; 75   : 	int iCamViewe = 20;
; 76   : 	int iCamX = lpCamUser->X;
; 77   : 	int iCamY = lpCamUser->Y;
; 78   : 
; 79   : 	if(x < iCamX - iCamViewe  || x > iCamX + iCamViewe || y < iCamY - iCamViewe || y > iCamY + iCamViewe)

  0002b	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  0002e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00034	03 c1		 add	 eax, ecx
  00036	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  0003d	0f bf 80 46 01
	00 00		 movsx	 eax, WORD PTR [eax+326]
  00044	56		 push	 esi
  00045	8d 71 ec	 lea	 esi, DWORD PTR [ecx-20]
  00048	3b d6		 cmp	 edx, esi
  0004a	5e		 pop	 esi
  0004b	7c 21		 jl	 SHORT $LN1@CheckViewp
  0004d	83 c1 14	 add	 ecx, 20			; 00000014H
  00050	3b d1		 cmp	 edx, ecx
  00052	7f 1a		 jg	 SHORT $LN1@CheckViewp
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00057	8d 50 ec	 lea	 edx, DWORD PTR [eax-20]
  0005a	3b ca		 cmp	 ecx, edx
  0005c	7c 10		 jl	 SHORT $LN1@CheckViewp
  0005e	83 c0 14	 add	 eax, 20			; 00000014H
  00061	3b c8		 cmp	 ecx, eax
  00063	7f 09		 jg	 SHORT $LN1@CheckViewp

; 82   : 	}
; 83   : 
; 84   : 	return true;

  00065	b8 01 00 00 00	 mov	 eax, 1

; 85   : }

  0006a	5d		 pop	 ebp
  0006b	c2 0c 00	 ret	 12			; 0000000cH
$LN1@CheckViewp:

; 80   : 	{
; 81   : 		return false;

  0006e	33 c0		 xor	 eax, eax

; 85   : }

  00070	5d		 pop	 ebp
  00071	c2 0c 00	 ret	 12			; 0000000cH
?CheckViewport@CCameraParty@@QAEHHHH@Z ENDP		; CCameraParty::CheckViewport
_TEXT	ENDS
PUBLIC	?CGReqPartyMember@CCameraParty@@QAEXPAUPMSG_REQ_PARTY_MEMBER@@H@Z ; CCameraParty::CGReqPartyMember
EXTRN	?GetIndexUser@PartyClass@@QAEHHHAAH0@Z:PROC	; PartyClass::GetIndexUser
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
; Function compile flags: /Ogtp
;	COMDAT ?CGReqPartyMember@CCameraParty@@QAEXPAUPMSG_REQ_PARTY_MEMBER@@H@Z
_TEXT	SEGMENT
_dbnumber$ = 8						; size = 4
_lpMsg$ = 8						; size = 4
_usernumber$ = 12					; size = 4
_aIndex$ = 12						; size = 4
?CGReqPartyMember@CCameraParty@@QAEXPAUPMSG_REQ_PARTY_MEMBER@@H@Z PROC ; CCameraParty::CGReqPartyMember, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 89   : 	if (!OBJMAX_RANGE(aIndex))

  00004	8b 7d 0c	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	78 78		 js	 SHORT $LN6@CGReqParty
  0000b	33 c0		 xor	 eax, eax
  0000d	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 69		 je	 SHORT $LN6@CGReqParty

; 90   : 	{
; 91   : 		return;
; 92   : 	}
; 93   : 
; 94   : 	LPOBJ lpUser = &gObj[aIndex];

  0001a	56		 push	 esi
  0001b	8b f7		 mov	 esi, edi
  0001d	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00023	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 95   : 
; 96   : 	if(lpUser->Connected < PLAYER_PLAYING)

  00029	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  0002d	7c 53		 jl	 SHORT $LN10@CGReqParty

; 97   : 	{
; 98   : 		return;
; 99   : 	}
; 100  : 
; 101  : 	if(lpMsg->PartyNumber == -1)

  0002f	8b 55 08	 mov	 edx, DWORD PTR _lpMsg$[ebp]
  00032	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00035	83 c9 ff	 or	 ecx, -1
  00038	3b c1		 cmp	 eax, ecx
  0003a	75 0d		 jne	 SHORT $LN3@CGReqParty

; 102  : 	{
; 103  : 		lpUser->m_CameraPartyActive = false;

  0003c	c6 86 44 2b 00
	00 00		 mov	 BYTE PTR [esi+11076], 0
  00043	5e		 pop	 esi
  00044	5f		 pop	 edi

; 125  : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN3@CGReqParty:

; 104  : 
; 105  : 		return;
; 106  : 	}
; 107  : 
; 108  : 	int usernumber = -1;

  00049	89 4d 0c	 mov	 DWORD PTR _usernumber$[ebp], ecx

; 109  : 
; 110  : 	int dbnumber = -1;

  0004c	89 4d 08	 mov	 DWORD PTR _dbnumber$[ebp], ecx

; 111  : 
; 112  : 	if (!gParty.GetIndexUser(gObj[aIndex].PartyNumber, lpMsg->PartyNumber, usernumber, dbnumber))

  0004f	8d 4d 08	 lea	 ecx, DWORD PTR _dbnumber$[ebp]
  00052	51		 push	 ecx
  00053	8d 55 0c	 lea	 edx, DWORD PTR _usernumber$[ebp]
  00056	52		 push	 edx
  00057	50		 push	 eax
  00058	8b 86 2c 04 00
	00		 mov	 eax, DWORD PTR [esi+1068]
  0005e	50		 push	 eax
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00064	e8 00 00 00 00	 call	 ?GetIndexUser@PartyClass@@QAEHHHAAH0@Z ; PartyClass::GetIndexUser
  00069	85 c0		 test	 eax, eax
  0006b	74 15		 je	 SHORT $LN10@CGReqParty

; 113  : 	{
; 114  : 		return;
; 115  : 	}
; 116  : 
; 117  : 	if(aIndex == usernumber)

  0006d	3b 7d 0c	 cmp	 edi, DWORD PTR _usernumber$[ebp]
  00070	74 10		 je	 SHORT $LN10@CGReqParty

; 118  : 	{
; 119  : 		return;
; 120  : 	}
; 121  : 
; 122  : 	lpUser->m_CameraPartyActive = true;

  00072	c6 86 44 2b 00
	00 01		 mov	 BYTE PTR [esi+11076], 1

; 123  : 
; 124  : 	lpUser->m_CameraPartyIndex = usernumber;

  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _usernumber$[ebp]
  0007c	89 8e 48 2b 00
	00		 mov	 DWORD PTR [esi+11080], ecx
$LN10@CGReqParty:
  00082	5e		 pop	 esi
$LN6@CGReqParty:
  00083	5f		 pop	 edi

; 125  : }

  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?CGReqPartyMember@CCameraParty@@QAEXPAUPMSG_REQ_PARTY_MEMBER@@H@Z ENDP ; CCameraParty::CGReqPartyMember
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCPartyMemberSend@CCameraParty@@QAEXHH@Z	; CCameraParty::GCPartyMemberSend
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GCPartyMemberSend@CCameraParty@@QAEXHH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
?GCPartyMemberSend@CCameraParty@@QAEXHH@Z PROC		; CCameraParty::GCPartyMemberSend, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]

; 129  : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00013	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00019	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 130  : 
; 131  : 	PMSG_ANS_PARTY_MEMBER pMsg;
; 132  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xEC, sizeof(pMsg));

  0001f	c7 45 ec c1 10
	fb ec		 mov	 DWORD PTR _pMsg$[ebp], -319090495 ; ecfb10c1H

; 133  : 	pMsg.Result = 1;

  00026	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+4], 1

; 134  : 	pMsg.MapX = lpTargetObj->X;

  0002d	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00034	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 135  : 	pMsg.MapY = lpTargetObj->Y;

  00037	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]

; 136  : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00041	6a 10		 push	 16			; 00000010H
  00043	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  0004b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 137  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?GCPartyMemberSend@CCameraParty@@QAEXHH@Z ENDP		; CCameraParty::GCPartyMemberSend
_TEXT	ENDS
PUBLIC	?Move@CCameraParty@@QAEXH@Z			; CCameraParty::Move
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?IsParty@PartyClass@@QAEHH@Z:PROC		; PartyClass::IsParty
; Function compile flags: /Ogtp
;	COMDAT ?Move@CCameraParty@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Move@CCameraParty@@QAEXH@Z PROC			; CCameraParty::Move, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 27   : 	LPOBJ lpUser = &gObj[aIndex];

  00004	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00007	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 
; 29   : 	int iPartyNumber = lpUser->PartyNumber;

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	56		 push	 esi
  00017	8b b4 08 2c 04
	00 00		 mov	 esi, DWORD PTR [eax+ecx+1068]

; 30   : 
; 31   : 	if(!gParty.IsParty(iPartyNumber))

  0001e	56		 push	 esi
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00024	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00029	85 c0		 test	 eax, eax
  0002b	74 62		 je	 SHORT $LN4@Move

; 32   : 	{
; 33   : 		return;
; 34   : 	}
; 35   : 
; 36   : 	for(int i = 0; i < MAX_USER_IN_PARTY; i++ )

  0002d	6b f6 68	 imul	 esi, 104		; 00000068H
  00030	53		 push	 ebx
  00031	57		 push	 edi
  00032	33 ff		 xor	 edi, edi
  00034	81 c6 0c 00 00
	00		 add	 esi, OFFSET ?gParty@@3VPartyClass@@A+12
  0003a	8b de		 mov	 ebx, esi
  0003c	8d 64 24 00	 npad	 4
$LL6@Move:

; 37   : 	{
; 38   : 		int aCamIndex = gParty.m_PartyS[iPartyNumber].Number[i];

  00040	8b 33		 mov	 esi, DWORD PTR [ebx]

; 39   : 
; 40   : 		if (!gObjIsConnected(aCamIndex))

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00048	83 c4 04	 add	 esp, 4
  0004b	85 c0		 test	 eax, eax
  0004d	74 22		 je	 SHORT $LN5@Move

; 41   : 		{
; 42   : 			continue;
; 43   : 		}
; 44   : 
; 45   : 		LPOBJ lpCamUser = &gObj[aCamIndex];

  0004f	8b c6		 mov	 eax, esi
  00051	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00057	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 46   : 
; 47   : 		if(!lpCamUser->m_CameraPartyActive)

  0005d	80 b8 44 2b 00
	00 00		 cmp	 BYTE PTR [eax+11076], 0
  00064	74 0b		 je	 SHORT $LN5@Move

; 48   : 		{
; 49   : 			continue;
; 50   : 		}
; 51   : 
; 52   : 		if(lpCamUser->m_CameraPartyIndex == aIndex)

  00066	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00069	39 88 48 2b 00
	00		 cmp	 DWORD PTR [eax+11080], ecx
  0006f	74 12		 je	 SHORT $LN11@Move
$LN5@Move:

; 32   : 	{
; 33   : 		return;
; 34   : 	}
; 35   : 
; 36   : 	for(int i = 0; i < MAX_USER_IN_PARTY; i++ )

  00071	47		 inc	 edi
  00072	83 c3 04	 add	 ebx, 4
  00075	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  00078	7c c6		 jl	 SHORT $LL6@Move
  0007a	5f		 pop	 edi
  0007b	5b		 pop	 ebx
  0007c	5e		 pop	 esi

; 55   : 
; 56   : 			break;
; 57   : 
; 58   : 		}
; 59   : 	}
; 60   : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
$LN11@Move:

; 53   : 		{
; 54   : 			this->GCPartyMemberSend(aCamIndex, aIndex);

  00083	51		 push	 ecx
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?GCPartyMemberSend@CCameraParty@@QAEXHH@Z ; CCameraParty::GCPartyMemberSend
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx
$LN4@Move:
  0008f	5e		 pop	 esi

; 55   : 
; 56   : 			break;
; 57   : 
; 58   : 		}
; 59   : 	}
; 60   : }

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?Move@CCameraParty@@QAEXH@Z ENDP			; CCameraParty::Move
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CameraParty@@YAXXZ
text$yc	SEGMENT
??__Eg_CameraParty@@YAXXZ PROC				; `dynamic initializer for 'g_CameraParty'', COMDAT

; 8    : CCameraParty g_CameraParty;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CameraParty@@3VCCameraParty@@A ; g_CameraParty
  00005	e8 00 00 00 00	 call	 ??0CCameraParty@@QAE@XZ	; CCameraParty::CCameraParty
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CameraParty@@YAXXZ ; `dynamic atexit destructor for 'g_CameraParty''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CameraParty@@YAXXZ ENDP				; `dynamic initializer for 'g_CameraParty''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CameraParty@@YAXXZ
text$yd	SEGMENT
??__Fg_CameraParty@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CameraParty'', COMDAT
  00000	c3		 ret	 0
??__Fg_CameraParty@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CameraParty''
text$yd	ENDS
PUBLIC	?g_CameraParty@@3VCCameraParty@@A		; g_CameraParty
_BSS	SEGMENT
?g_CameraParty@@3VCCameraParty@@A DB 01H DUP (?)	; g_CameraParty
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CameraParty$initializer$ DD FLAT:??__Eg_CameraParty@@YAXXZ
CRT$XCU	ENDS
END
