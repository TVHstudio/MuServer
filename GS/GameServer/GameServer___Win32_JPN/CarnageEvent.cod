; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CarnageEvent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@ ; `string'
PUBLIC	?SetStateClose@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateClose
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
CONST	SEGMENT
??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@ DB 'Carnage Event Close'
	DB	'!', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetStateClose@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?SetStateClose@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::SetStateClose, COMDAT
; _this$ = ecx

; 444  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx

; 445  : 	this->m_TickCount = GetTickCount();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000b	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 446  : 	this->m_TickRemain = 0;

  0000e	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 447  : 	this->m_EventStatus = eCARNAGE_STATUS_CLOSE;

  00015	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 448  : 
; 449  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00020	bf b0 36 00 00	 mov	 edi, 14000		; 000036b0H
  00025	be 00 a7 40 09	 mov	 esi, 155232000		; 0940a700H
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL4@SetStateCl:

; 450  : 	{
; 451  : 		if(gObj[aIndex].Connected >= PLAYER_PLAYING && gObj[aIndex].MapNumber == this->m_MapNumber)

  00030	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00035	7c 1d		 jl	 SHORT $LN3@SetStateCl
  00037	0f b6 8c 06 49
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+329]
  0003f	3b 4b 18	 cmp	 ecx, DWORD PTR [ebx+24]
  00042	75 10		 jne	 SHORT $LN3@SetStateCl

; 452  : 		{
; 453  : 			gObjMoveGate(aIndex, 17);

  00044	6a 11		 push	 17			; 00000011H
  00046	57		 push	 edi
  00047	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	83 c4 08	 add	 esp, 8
$LN3@SetStateCl:

; 448  : 
; 449  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00054	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  0005a	47		 inc	 edi
  0005b	81 fe 80 d7 e9
	09		 cmp	 esi, 166320000		; 09e9d780H
  00061	7c cd		 jl	 SHORT $LL4@SetStateCl

; 454  : 		}
; 455  : 	}
; 456  : 
; 457  : 	AllSendServerMsg("Carnage Event Close!");

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HOCCICLF@Carnage?5Event?5Close?$CB?$AA@
  00068	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  0006d	83 c4 04	 add	 esp, 4
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx

; 458  : }

  00073	c3		 ret	 0
?SetStateClose@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::SetStateClose
_TEXT	ENDS
PUBLIC	?SetStateWait@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateWait
; Function compile flags: /Ogtp
;	COMDAT ?SetStateWait@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?SetStateWait@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::SetStateWait, COMDAT
; _this$ = ecx

; 461  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 462  : 	this->m_TickCount = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 463  : 	this->m_TickRemain = 60000 * this->m_OpenTime;

  0000c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000f	69 c0 60 ea 00
	00		 imul	 eax, 60000		; 0000ea60H
  00015	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 464  : 	this->m_EventStatus = eCARNAGE_STATUS_WAIT;

  00018	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  0001e	5e		 pop	 esi

; 465  : }

  0001f	c3		 ret	 0
?SetStateWait@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::SetStateWait
_TEXT	ENDS
PUBLIC	??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ ; `string'
PUBLIC	??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ ; `string'
PUBLIC	??_C@_0BB@OMOCFJLD@CarnageEvent?4cpp?$AA@	; `string'
PUBLIC	?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z	; CCarnageEvent::GetMonsterPos
EXTRN	_rand:PROC
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?CheckMapCanMove@CMapServerManager@@QAEHH@Z:PROC ; CMapServerManager::CheckMapCanMove
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
;	COMDAT ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
CONST	SEGMENT
??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ DB '[Atta'
	DB	'ckerAdd] No need to load monster for map %d [%d,%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ DB 'Monst'
	DB	'er attribute max over %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMOCFJLD@CarnageEvent?4cpp?$AA@
CONST	SEGMENT
??_C@_0BB@OMOCFJLD@CarnageEvent?4cpp?$AA@ DB 'CarnageEvent.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 2
_Map$ = 12						; size = 1
_X$ = 16						; size = 1
_Y$ = 20						; size = 1
?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z PROC		; CCarnageEvent::GetMonsterPos, COMDAT
; _this$ = ecx

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 546  : 	if(gMSetBase.m_Count >= OBJ_MAXMONSTER-1)

  00003	81 3d 84 2c 03
	00 c7 32 00 00	 cmp	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, 12999 ; 000032c7H
  0000d	7c 1e		 jl	 SHORT $LN2@GetMonster

; 547  : 	{
; 548  : 		MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  0000f	68 24 02 00 00	 push	 548			; 00000224H
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OMOCFJLD@CarnageEvent?4cpp?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  0001e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 549  : 		return -1;

  00026	83 c8 ff	 or	 eax, -1

; 570  : }

  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
$LN2@GetMonster:
  0002d	53		 push	 ebx

; 550  : 	}
; 551  : 
; 552  : 	if(g_MapServerManager.CheckMapCanMove(Map) == FALSE)

  0002e	8a 5d 0c	 mov	 bl, BYTE PTR _Map$[ebp]
  00031	56		 push	 esi
  00032	0f b6 f3	 movzx	 esi, bl
  00035	56		 push	 esi
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0003b	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  00040	85 c0		 test	 eax, eax
  00042	75 29		 jne	 SHORT $LN1@GetMonster

; 553  : 	{
; 554  : 		LogAddC(3,"[AttackerAdd] No need to load monster for map %d [%d,%d,%d]",Map,Type,X,Y);

  00044	0f b6 45 14	 movzx	 eax, BYTE PTR _Y$[ebp]
  00048	0f b6 4d 10	 movzx	 ecx, BYTE PTR _X$[ebp]
  0004c	0f b7 55 08	 movzx	 edx, WORD PTR _Type$[ebp]
  00050	50		 push	 eax
  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	56		 push	 esi
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
  00059	6a 03		 push	 3
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00061	83 c4 18	 add	 esp, 24			; 00000018H
  00064	5e		 pop	 esi

; 555  : 		return -1;

  00065	83 c8 ff	 or	 eax, -1
  00068	5b		 pop	 ebx

; 570  : }

  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
$LN1@GetMonster:

; 556  : 	}
; 557  : 
; 558  : 	gMSetBase.m_Count++;

  0006d	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004

; 559  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dis			= 6;
; 560  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Type		= Type;

  00072	66 8b 4d 08	 mov	 cx, WORD PTR _Type$[ebp]
  00076	40		 inc	 eax
  00077	a3 84 2c 03 00	 mov	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, eax
  0007c	c1 e0 04	 shl	 eax, 4
  0007f	c6 80 09 00 00
	00 06		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+9], 6
  00086	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0008b	c1 e0 04	 shl	 eax, 4
  0008e	66 89 88 06 00
	00 00		 mov	 WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6], cx

; 561  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_MapNumber	= Map;

  00095	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004

; 562  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_W			= X;

  0009b	8a 45 10	 mov	 al, BYTE PTR _X$[ebp]
  0009e	c1 e2 04	 shl	 edx, 4
  000a1	88 9a 08 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+8], bl
  000a7	8b 0d 84 2c 03
	00		 mov	 ecx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000ad	c1 e1 04	 shl	 ecx, 4
  000b0	88 81 0d 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[ecx+13], al

; 563  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_H			= Y;

  000b6	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000bc	8a 4d 14	 mov	 cl, BYTE PTR _Y$[ebp]
  000bf	c1 e2 04	 shl	 edx, 4
  000c2	88 8a 0e 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+14], cl

; 564  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_X			= X;

  000c8	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000ce	c1 e2 04	 shl	 edx, 4
  000d1	88 82 0a 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+10], al

; 565  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Y			= Y;

  000d7	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000dc	c1 e0 04	 shl	 eax, 4
  000df	88 88 0b 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+11], cl

; 566  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_ArrangeType = 0;

  000e5	8b 0d 84 2c 03
	00		 mov	 ecx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000eb	c1 e1 04	 shl	 ecx, 4
  000ee	c6 81 04 00 00
	00 00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[ecx+4], 0

; 567  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dir			= rand() % 8;

  000f5	e8 00 00 00 00	 call	 _rand
  000fa	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000ff	79 05		 jns	 SHORT $LN7@GetMonster
  00101	48		 dec	 eax
  00102	83 c8 f8	 or	 eax, -8			; fffffff8H
  00105	40		 inc	 eax
$LN7@GetMonster:
  00106	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0010c	c1 e2 04	 shl	 edx, 4
  0010f	5e		 pop	 esi
  00110	88 82 0c 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+12], al

; 568  : 
; 569  : 	return gMSetBase.m_Count;

  00116	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0011b	5b		 pop	 ebx

; 570  : }

  0011c	5d		 pop	 ebp
  0011d	c2 10 00	 ret	 16			; 00000010H
?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z ENDP		; CCarnageEvent::GetMonsterPos
_TEXT	ENDS
PUBLIC	?AddMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::AddMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
; Function compile flags: /Ogtp
;	COMDAT ?AddMonster@CCarnageEvent@@QAEXHH@Z
_TEXT	SEGMENT
_i$213893 = -4						; size = 4
_Stage$ = 8						; size = 4
_Type$ = 12						; size = 4
?AddMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::AddMonster, COMDAT
; _this$ = ecx

; 645  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 646  : 	if(this->m_EventStatus != eCARNAGE_STATUS_START)

  00007	83 3b 02	 cmp	 DWORD PTR [ebx], 2
  0000a	75 6f		 jne	 SHORT $LN4@AddMonster

; 647  : 	{
; 648  : 		return;
; 649  : 	}
; 650  : 
; 651  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  0000c	83 7b 58 00	 cmp	 DWORD PTR [ebx+88], 0
  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$213893[ebp], 0
  00017	7e 62		 jle	 SHORT $LN4@AddMonster
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d b3 98 00 00
	00		 lea	 esi, DWORD PTR [ebx+152]
$LL6@AddMonster:

; 652  : 	{
; 653  : 		if(this->m_MonsterBase[i].Stage == Stage && this->m_MonsterBase[i].Type == Type)

  00021	8b 45 08	 mov	 eax, DWORD PTR _Stage$[ebp]
  00024	39 46 f8	 cmp	 DWORD PTR [esi-8], eax
  00027	75 41		 jne	 SHORT $LN5@AddMonster
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  0002c	39 4e fc	 cmp	 DWORD PTR [esi-4], ecx
  0002f	75 39		 jne	 SHORT $LN5@AddMonster

; 654  : 		{
; 655  : 			int iMobIndex = gObjAddMonster(this->m_MapNumber);

  00031	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0003a	0f bf f8	 movsx	 edi, ax
  0003d	83 c4 04	 add	 esp, 4

; 656  : 
; 657  : 			if(iMobIndex >= 0 && iMobIndex < OBJ_MAXMONSTER)

  00040	81 ff c7 32 00
	00		 cmp	 edi, 12999		; 000032c7H
  00046	77 22		 ja	 SHORT $LN5@AddMonster

; 658  : 			{
; 659  : 				this->m_MonsterBase[i].aIndex = iMobIndex; 
; 660  : 
; 661  : 				gObjSetPosMonster(iMobIndex, this->m_MonsterBase[i].Pos);

  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	50		 push	 eax
  0004c	57		 push	 edi
  0004d	89 3e		 mov	 DWORD PTR [esi], edi
  0004f	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 662  : 				gObjSetMonster(iMobIndex, this->m_MonsterBase[i].Class);

  00054	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00057	51		 push	 ecx
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  0005e	83 c4 10	 add	 esp, 16			; 00000010H

; 663  : 
; 664  : 				if(this->m_MonsterBase[i].Type == 0)

  00061	83 7e fc 00	 cmp	 DWORD PTR [esi-4], 0
  00065	75 03		 jne	 SHORT $LN5@AddMonster

; 665  : 				{
; 666  : 					this->m_StageMonsterCount++;

  00067	ff 43 5c	 inc	 DWORD PTR [ebx+92]
$LN5@AddMonster:

; 647  : 	{
; 648  : 		return;
; 649  : 	}
; 650  : 
; 651  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _i$213893[ebp]
  0006d	40		 inc	 eax
  0006e	83 c6 14	 add	 esi, 20			; 00000014H
  00071	89 45 fc	 mov	 DWORD PTR _i$213893[ebp], eax
  00074	3b 43 58	 cmp	 eax, DWORD PTR [ebx+88]
  00077	7c a8		 jl	 SHORT $LL6@AddMonster
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
$LN4@AddMonster:
  0007b	5b		 pop	 ebx

; 667  : 				}
; 668  : 			}
; 669  : 		}
; 670  : 	}
; 671  : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
?AddMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::AddMonster
_TEXT	ENDS
PUBLIC	?DelMonster@CCarnageEvent@@QAEXXZ		; CCarnageEvent::DelMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Ogtp
;	COMDAT ?DelMonster@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?DelMonster@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::DelMonster, COMDAT
; _this$ = ecx

; 674  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 675  : 	if(this->m_EventStatus != eCARNAGE_STATUS_START)

  00003	83 3b 02	 cmp	 DWORD PTR [ebx], 2
  00006	75 60		 jne	 SHORT $LN3@DelMonster

; 676  : 	{
; 677  : 		return;
; 678  : 	}
; 679  : 
; 680  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	39 7b 58	 cmp	 DWORD PTR [ebx+88], edi
  0000e	7e 57		 jle	 SHORT $LN11@DelMonster
  00010	56		 push	 esi
  00011	8d b3 98 00 00
	00		 lea	 esi, DWORD PTR [ebx+152]
$LL5@DelMonster:

; 681  : 	{
; 682  : 		int iMobIndex = this->m_MonsterBase[i].aIndex;

  00017	8b 06		 mov	 eax, DWORD PTR [esi]

; 683  : 
; 684  : 		if(iMobIndex >= 0 && iMobIndex < OBJ_MAXMONSTER)

  00019	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  0001e	77 3d		 ja	 SHORT $LN4@DelMonster

; 685  : 		{
; 686  : 			int iMobPos = this->m_MonsterBase[i].Pos;
; 687  : 			int iMobClass = this->m_MonsterBase[i].Class;
; 688  : 
; 689  : 			if(iMobClass == gObj[iMobIndex].Class && gMSetBase.m_Mp[iMobPos].m_MapNumber == gObj[iMobIndex].MapNumber)

  00020	8b c8		 mov	 ecx, eax
  00022	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00028	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002e	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  00035	39 56 08	 cmp	 DWORD PTR [esi+8], edx
  00038	75 23		 jne	 SHORT $LN4@DelMonster
  0003a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003d	c1 e2 04	 shl	 edx, 4
  00040	8a 92 08 00 00
	00		 mov	 dl, BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+8]
  00046	3a 91 49 01 00
	00		 cmp	 dl, BYTE PTR [ecx+329]
  0004c	75 0f		 jne	 SHORT $LN4@DelMonster

; 690  : 			{
; 691  : 				gObjDel(iMobIndex);

  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00054	83 c4 04	 add	 esp, 4

; 692  : 
; 693  : 				this->m_MonsterBase[i].aIndex = -1; 

  00057	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN4@DelMonster:

; 676  : 	{
; 677  : 		return;
; 678  : 	}
; 679  : 
; 680  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  0005d	47		 inc	 edi
  0005e	83 c6 14	 add	 esi, 20			; 00000014H
  00061	3b 7b 58	 cmp	 edi, DWORD PTR [ebx+88]
  00064	7c b1		 jl	 SHORT $LL5@DelMonster
  00066	5e		 pop	 esi
$LN11@DelMonster:
  00067	5f		 pop	 edi
$LN3@DelMonster:
  00068	5b		 pop	 ebx

; 694  : 			}
; 695  : 		}
; 696  : 	}
; 697  : }

  00069	c3		 ret	 0
?DelMonster@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::DelMonster
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCMapAttribute@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::GCMapAttribute
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?GCMapAttribute@CCarnageEvent@@QAEXHH@Z
_TEXT	SEGMENT
_pMsg$ = -272						; size = 7
_pBodyMsg$ = -264					; size = 2
_btPacket$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_maptype$ = 12						; size = 4
?GCMapAttribute@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::GCMapAttribute, COMDAT
; _this$ = ecx

; 847  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 848  : 	if(!OBJMAX_RANGE(aIndex))

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00016	33 d2		 xor	 edx, edx
  00018	3b ca		 cmp	 ecx, edx
  0001a	0f 8c 93 00 00
	00		 jl	 $LN2@GCMapAttri
  00020	33 c0		 xor	 eax, eax
  00022	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00028	0f 9e c0	 setle	 al
  0002b	3b c2		 cmp	 eax, edx
  0002d	0f 84 80 00 00
	00		 je	 $LN2@GCMapAttri

; 849  : 	{
; 850  : 		return;
; 851  : 	}
; 852  : 
; 853  : 	int iSizePacket = 0;
; 854  : 	unsigned char btPacket[256];
; 855  : 	
; 856  : 	PMSG_SETMAPATTR_COUNT pMsg;
; 857  : 	PMSG_SETMAPATTR pBodyMsg;
; 858  : 
; 859  : 	iSizePacket += sizeof(pMsg);
; 860  : 
; 861  : 	pMsg.btType = 0;
; 862  : 	pMsg.btMapAttr = 1;
; 863  : 	pMsg.btMapSetType = maptype;
; 864  : 	pMsg.btCount = 1;
; 865  : 
; 866  : 	pBodyMsg.btX = 0;

  00033	66 89 95 f8 fe
	ff ff		 mov	 WORD PTR _pBodyMsg$[ebp], dx

; 867  : 	pBodyMsg.btY = 0;
; 868  : 	memcpy(&btPacket[iSizePacket], &pBodyMsg, sizeof(pBodyMsg));

  0003a	0f b7 d2	 movzx	 edx, dx
  0003d	66 89 95 03 ff
	ff ff		 mov	 WORD PTR _btPacket$[ebp+7], dx

; 869  : 	iSizePacket += sizeof(pBodyMsg);
; 870  : 	pBodyMsg.btX   = 255;

  00044	66 c7 85 f8 fe
	ff ff ff ff	 mov	 WORD PTR _pBodyMsg$[ebp], 65535 ; 0000ffffH

; 871  : 	pBodyMsg.btY   = 255;
; 872  : 	memcpy(&btPacket[iSizePacket], &pBodyMsg, sizeof(pBodyMsg));

  0004d	0f b7 95 f8 fe
	ff ff		 movzx	 edx, WORD PTR _pBodyMsg$[ebp]
  00054	53		 push	 ebx
  00055	8a 5d 0c	 mov	 bl, BYTE PTR _maptype$[ebp]
  00058	66 89 95 05 ff
	ff ff		 mov	 WORD PTR _btPacket$[ebp+9], dx
  0005f	b0 01		 mov	 al, 1
  00061	66 c7 85 f3 fe
	ff ff 00 01	 mov	 WORD PTR _pMsg$[ebp+3], 256 ; 00000100H

; 873  : 	iSizePacket += sizeof(pBodyMsg);
; 874  : 
; 875  : 	pMsg.h.c = 0xC1;

  0006a	66 c7 85 f0 fe
	ff ff c1 0b	 mov	 WORD PTR _pMsg$[ebp], 3009 ; 00000bc1H

; 876  : 	pMsg.h.size = iSizePacket;
; 877  : 	pMsg.h.headcode = 0x46;

  00073	c6 85 f2 fe ff
	ff 46		 mov	 BYTE PTR _pMsg$[ebp+2], 70 ; 00000046H

; 878  : 	memcpy(&btPacket, &pMsg, sizeof(pMsg));

  0007a	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _pMsg$[ebp]
  00080	88 85 02 ff ff
	ff		 mov	 BYTE PTR _btPacket$[ebp+6], al
  00086	89 95 fc fe ff
	ff		 mov	 DWORD PTR _btPacket$[ebp], edx

; 879  : 	
; 880  : 	DataSend(aIndex, (LPBYTE)&btPacket, iSizePacket);

  0008c	6a 0b		 push	 11			; 0000000bH
  0008e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _btPacket$[ebp]
  00094	88 9d f5 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], bl
  0009a	0f b7 95 f4 fe
	ff ff		 movzx	 edx, WORD PTR _pMsg$[ebp+4]
  000a1	50		 push	 eax
  000a2	51		 push	 ecx
  000a3	66 89 95 00 ff
	ff ff		 mov	 WORD PTR _btPacket$[ebp+4], dx
  000aa	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b2	5b		 pop	 ebx
$LN2@GCMapAttri:

; 881  : }

  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
?GCMapAttribute@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::GCMapAttribute
_TEXT	ENDS
PUBLIC	?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 04	 sar	 edx, 4
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 880  : 		}

  00016	c3		 ret	 0
?size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	c1 e0 05	 shl	 eax, 5
  0000c	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEAAUCARNAGE_MONSTER_DATA@@I@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 05	 sar	 eax, 5

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 05	 shl	 eax, 5
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEAAUCARNAGE_ITEM@@I@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBE_NPBUCARNAGE_TIME@@@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXPAUCARNAGE_TIME@@0@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ	; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ PROC		; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@XZ ENDP		; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@2
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@2:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBE_NPBUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXPAUCARNAGE_MONSTER_DATA@@0@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ PROC	; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@XZ ENDP	; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@3
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@3
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@3:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBE_NPBUCARNAGE_ITEM@@@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXPAUCARNAGE_ITEM@@0@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ	; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ PROC		; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@XZ ENDP		; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEXXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z PROC	; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCARNAGE_TIME@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CARNAGE_TIME>::allocator<CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z PROC ; std::allocator<CARNAGE_TIME>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@I@Z ENDP ; std::allocator<CARNAGE_TIME>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 04	 sar	 edx, 4
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 778  : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::allocator<CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@I@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 05	 sar	 eax, 5

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEXXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z ; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z PROC	; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCARNAGE_ITEM@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CARNAGE_ITEM>::allocator<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z PROC ; std::allocator<CARNAGE_ITEM>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@I@Z ENDP ; std::allocator<CARNAGE_ITEM>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEABUCARNAGE_TIME@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ ; std::allocator<CARNAGE_TIME>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ PROC	; std::allocator<CARNAGE_TIME>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCARNAGE_TIME@@@std@@QBEIXZ ENDP	; std::allocator<CARNAGE_TIME>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ ; std::allocator<CARNAGE_MONSTER_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ PROC ; std::allocator<CARNAGE_MONSTER_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 02	 mov	 eax, 44739242		; 02aaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QBEIXZ ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ ; std::allocator<CARNAGE_ITEM>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ PROC	; std::allocator<CARNAGE_ITEM>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCARNAGE_ITEM@@@std@@QBEIXZ ENDP	; std::allocator<CARNAGE_ITEM>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z ; std::addressof<CARNAGE_TIME const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z PROC ; std::addressof<CARNAGE_TIME const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCARNAGE_TIME@@@std@@YAPBUCARNAGE_TIME@@ABU1@@Z ENDP ; std::addressof<CARNAGE_TIME const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::addressof<CARNAGE_MONSTER_DATA const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z PROC ; std::addressof<CARNAGE_MONSTER_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCARNAGE_MONSTER_DATA@@@std@@YAPBUCARNAGE_MONSTER_DATA@@ABU1@@Z ENDP ; std::addressof<CARNAGE_MONSTER_DATA const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z ; std::addressof<CARNAGE_ITEM const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z PROC ; std::addressof<CARNAGE_ITEM const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCARNAGE_ITEM@@@std@@YAPBUCARNAGE_ITEM@@ABU1@@Z ENDP ; std::addressof<CARNAGE_ITEM const >
_TEXT	ENDS
PUBLIC	??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z PROC ; std::forward<CARNAGE_TIME &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCARNAGE_TIME@@@std@@YAAAUCARNAGE_TIME@@AAU1@@Z ENDP ; std::forward<CARNAGE_TIME &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z ; std::allocator<CARNAGE_TIME>::construct<CARNAGE_TIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z PROC ; std::allocator<CARNAGE_TIME>::construct<CARNAGE_TIME &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUCARNAGE_TIME@@@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@AAU2@@Z ENDP ; std::allocator<CARNAGE_TIME>::construct<CARNAGE_TIME &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z ; std::forward<CARNAGE_TIME const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z PROC ; std::forward<CARNAGE_TIME const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCARNAGE_TIME@@@std@@YAABUCARNAGE_TIME@@ABU1@@Z ENDP ; std::forward<CARNAGE_TIME const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z PROC ; std::forward<CARNAGE_MONSTER_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCARNAGE_MONSTER_DATA@@@std@@YAAAUCARNAGE_MONSTER_DATA@@AAU1@@Z ENDP ; std::forward<CARNAGE_MONSTER_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct<CARNAGE_MONSTER_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::construct<CARNAGE_MONSTER_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@2:
  00017	5f		 pop	 edi

; 209  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@AAUCARNAGE_MONSTER_DATA@@@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@AAU2@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::construct<CARNAGE_MONSTER_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::forward<CARNAGE_MONSTER_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z PROC ; std::forward<CARNAGE_MONSTER_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCARNAGE_MONSTER_DATA@@@std@@YAABUCARNAGE_MONSTER_DATA@@ABU1@@Z ENDP ; std::forward<CARNAGE_MONSTER_DATA const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z PROC ; std::forward<CARNAGE_ITEM &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCARNAGE_ITEM@@@std@@YAAAUCARNAGE_ITEM@@AAU1@@Z ENDP ; std::forward<CARNAGE_ITEM &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z ; std::allocator<CARNAGE_ITEM>::construct<CARNAGE_ITEM &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z PROC ; std::allocator<CARNAGE_ITEM>::construct<CARNAGE_ITEM &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@3:
  00017	5f		 pop	 edi

; 209  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@AAUCARNAGE_ITEM@@@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@AAU2@@Z ENDP ; std::allocator<CARNAGE_ITEM>::construct<CARNAGE_ITEM &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z ; std::forward<CARNAGE_ITEM const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z PROC ; std::forward<CARNAGE_ITEM const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCARNAGE_ITEM@@@std@@YAABUCARNAGE_ITEM@@ABU1@@Z ENDP ; std::forward<CARNAGE_ITEM const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z PROC ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCARNAGE_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_TIME@@0@Z ENDP ; std::_Ptr_cat<CARNAGE_TIME,CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z PROC ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCARNAGE_MONSTER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_MONSTER_DATA@@0@Z ENDP ; std::_Ptr_cat<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z PROC ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCARNAGE_ITEM@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCARNAGE_ITEM@@0@Z ENDP ; std::_Ptr_cat<CARNAGE_ITEM,CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z ; std::_Construct<CARNAGE_TIME,CARNAGE_TIME const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z PROC ; std::_Construct<CARNAGE_TIME,CARNAGE_TIME const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UCARNAGE_TIME@@ABU1@@std@@YAXPAUCARNAGE_TIME@@ABU1@@Z ENDP ; std::_Construct<CARNAGE_TIME,CARNAGE_TIME const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z ; std::_Construct<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z PROC ; std::_Construct<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@Construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@Construct@2:
  00017	5f		 pop	 edi

; 49   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Construct@UCARNAGE_MONSTER_DATA@@ABU1@@std@@YAXPAUCARNAGE_MONSTER_DATA@@ABU1@@Z ENDP ; std::_Construct<CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z ; std::_Construct<CARNAGE_ITEM,CARNAGE_ITEM const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z PROC ; std::_Construct<CARNAGE_ITEM,CARNAGE_ITEM const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@Construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@Construct@3:
  00017	5f		 pop	 edi

; 49   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Construct@UCARNAGE_ITEM@@ABU1@@std@@YAXPAUCARNAGE_ITEM@@ABU1@@Z ENDP ; std::_Construct<CARNAGE_ITEM,CARNAGE_ITEM const &>
_TEXT	ENDS
PUBLIC	??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ; std::move<CARNAGE_TIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z PROC ; std::move<CARNAGE_TIME &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ENDP ; std::move<CARNAGE_TIME &>
_TEXT	ENDS
PUBLIC	??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::move<CARNAGE_MONSTER_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z PROC ; std::move<CARNAGE_MONSTER_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ENDP ; std::move<CARNAGE_MONSTER_DATA &>
_TEXT	ENDS
PUBLIC	??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ; std::move<CARNAGE_ITEM &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z PROC ; std::move<CARNAGE_ITEM &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ENDP ; std::move<CARNAGE_ITEM &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z ; std::_Val_type<CARNAGE_TIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z PROC ; std::_Val_type<CARNAGE_TIME *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@PAU1@@Z ENDP ; std::_Val_type<CARNAGE_TIME *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z ; std::_Val_type<CARNAGE_MONSTER_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z PROC ; std::_Val_type<CARNAGE_MONSTER_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@@Z ENDP ; std::_Val_type<CARNAGE_MONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z ; std::_Val_type<CARNAGE_ITEM *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z PROC ; std::_Val_type<CARNAGE_ITEM *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@PAU1@@Z ENDP ; std::_Val_type<CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z ; std::_Destroy<CARNAGE_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z PROC ; std::_Destroy<CARNAGE_TIME>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCARNAGE_TIME@@@std@@YAXPAUCARNAGE_TIME@@@Z ENDP ; std::_Destroy<CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z ; std::_Destroy<CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z PROC ; std::_Destroy<CARNAGE_MONSTER_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCARNAGE_MONSTER_DATA@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::_Destroy<CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z ; std::_Destroy<CARNAGE_ITEM>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z PROC ; std::_Destroy<CARNAGE_ITEM>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCARNAGE_ITEM@@@std@@YAXPAUCARNAGE_ITEM@@@Z ENDP ; std::_Destroy<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ; std::forward<CARNAGE_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z PROC ; std::forward<CARNAGE_TIME>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCARNAGE_TIME@@@std@@YA$$QAUCARNAGE_TIME@@AAU1@@Z ENDP ; std::forward<CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ; std::forward<CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z PROC ; std::forward<CARNAGE_MONSTER_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCARNAGE_MONSTER_DATA@@@std@@YA$$QAUCARNAGE_MONSTER_DATA@@AAU1@@Z ENDP ; std::forward<CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ; std::forward<CARNAGE_ITEM>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z PROC ; std::forward<CARNAGE_ITEM>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCARNAGE_ITEM@@@std@@YA$$QAUCARNAGE_ITEM@@AAU1@@Z ENDP ; std::forward<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@ ; `string'
PUBLIC	?ProcessStateEnd@CCarnageEvent@@QAEXXZ		; CCarnageEvent::ProcessStateEnd
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
;	COMDAT ??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
CONST	SEGMENT
??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@ DB '%d '
	DB	'second(s) left before Carnage close.', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ProcessStateEnd@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
_iEndSec$213792 = -4					; size = 4
?ProcessStateEnd@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateEnd, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 416  : 	int iTickMsec = (GetTickCount() - this->m_TickCount);

  00005	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	ff d6		 call	 esi
  00010	2b 47 08	 sub	 eax, DWORD PTR [edi+8]

; 417  : 
; 418  : 	if(iTickMsec >= 1000)

  00013	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00018	0f 8c 7e 00 00
	00		 jl	 $LN3@ProcessSta

; 419  : 	{
; 420  : 		this->m_TickRemain -= iTickMsec;			

  0001e	29 47 0c	 sub	 DWORD PTR [edi+12], eax

; 421  : 		this->m_TickCount = GetTickCount();

  00021	ff d6		 call	 esi

; 422  : 
; 423  : 		if(this->m_TickRemain >= 1000 && this->m_TickRemain < (CARNAGE_TIME_END + 1000))

  00023	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00026	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00029	81 f9 e8 03 00
	00		 cmp	 ecx, 1000		; 000003e8H
  0002f	7c 6b		 jl	 SHORT $LN3@ProcessSta
  00031	81 f9 70 17 00
	00		 cmp	 ecx, 6000		; 00001770H
  00037	7d 63		 jge	 SHORT $LN3@ProcessSta

; 424  : 		{
; 425  : 			int iEndSec = (this->m_TickRemain / 1000);

  00039	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0003e	f7 e9		 imul	 ecx
  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00046	c1 fa 06	 sar	 edx, 6
  00049	8b c2		 mov	 eax, edx
  0004b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004e	03 c2		 add	 eax, edx
  00050	53		 push	 ebx
  00051	89 45 fc	 mov	 DWORD PTR _iEndSec$213792[ebp], eax

; 426  : 
; 427  : 			for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00054	bb b0 36 00 00	 mov	 ebx, 14000		; 000036b0H
  00059	be 00 a7 40 09	 mov	 esi, 155232000		; 0940a700H
  0005e	8b ff		 npad	 2
$LL5@ProcessSta:

; 428  : 			{
; 429  : 				if(gObj[aIndex].Connected >= PLAYER_PLAYING && gObj[aIndex].MapNumber == this->m_MapNumber)

  00060	83 7c 0e 04 03	 cmp	 DWORD PTR [esi+ecx+4], 3
  00065	7c 25		 jl	 SHORT $LN4@ProcessSta
  00067	0f b6 94 0e 49
	01 00 00	 movzx	 edx, BYTE PTR [esi+ecx+329]
  0006f	3b 57 18	 cmp	 edx, DWORD PTR [edi+24]
  00072	75 18		 jne	 SHORT $LN4@ProcessSta

; 430  : 				{
; 431  : 					MsgOutput(aIndex, "%d second(s) left before Carnage close.", iEndSec);

  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPPBNCDH@?$CFd?5second?$CIs?$CJ?5left?5before?5Carnage@
  0007a	53		 push	 ebx
  0007b	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00080	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00086	8b 45 fc	 mov	 eax, DWORD PTR _iEndSec$213792[ebp]
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@ProcessSta:

; 426  : 
; 427  : 			for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  0008c	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  00092	43		 inc	 ebx
  00093	81 fe 80 d7 e9
	09		 cmp	 esi, 166320000		; 09e9d780H
  00099	7c c5		 jl	 SHORT $LL5@ProcessSta
  0009b	5b		 pop	 ebx
$LN3@ProcessSta:

; 432  : 				}
; 433  : 			}
; 434  : 		}
; 435  : 	}
; 436  : 
; 437  : 	if(this->m_TickRemain <= 0)

  0009c	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  000a0	7f 07		 jg	 SHORT $LN1@ProcessSta

; 438  : 	{
; 439  : 		this->SetStateClose();

  000a2	8b cf		 mov	 ecx, edi
  000a4	e8 00 00 00 00	 call	 ?SetStateClose@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateClose
$LN1@ProcessSta:
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi

; 440  : 	}
; 441  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?ProcessStateEnd@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateEnd
_TEXT	ENDS
PUBLIC	??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@ ; `string'
PUBLIC	?SetStateStart@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateStart
;	COMDAT ??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@
CONST	SEGMENT
??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@ DB 'Carnage '
	DB	'Event Start to fight!', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetStateStart@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?SetStateStart@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::SetStateStart, COMDAT
; _this$ = ecx

; 468  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 469  : 	this->m_TickCount = GetTickCount();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 470  : 	this->m_TickRemain = 60000 * this->m_PlayTime;

  0000e	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00011	69 c0 60 ea 00
	00		 imul	 eax, 60000		; 0000ea60H

; 471  : 	this->m_EventStatus = eCARNAGE_STATUS_START;
; 472  : 	this->m_EventStage = 0;
; 473  : 
; 474  : 	AllSendServerMsg("Carnage Event Start to fight!");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BPGBFDCD@Carnage?5Event?5Start?5to?5fight?$CB?$AA@
  0001c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001f	c7 06 02 00 00
	00		 mov	 DWORD PTR [esi], 2
  00025	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0002c	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	83 c4 04	 add	 esp, 4

; 475  : 
; 476  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00039	bb b0 36 00 00	 mov	 ebx, 14000		; 000036b0H
  0003e	bf 00 a7 40 09	 mov	 edi, 155232000		; 0940a700H
$LL4@SetStateSt:

; 477  : 	{
; 478  : 		LPOBJ lpUser = &gObj[aIndex];
; 479  : 
; 480  : 		if(lpUser->Connected >= PLAYER_PLAYING && lpUser->MapNumber == this->m_MapNumber)

  00043	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  00048	7c 1c		 jl	 SHORT $LN3@SetStateSt
  0004a	0f b6 8c 07 49
	01 00 00	 movzx	 ecx, BYTE PTR [edi+eax+329]
  00052	3b 4e 18	 cmp	 ecx, DWORD PTR [esi+24]
  00055	75 0f		 jne	 SHORT $LN3@SetStateSt

; 481  : 		{
; 482  : 			this->GCMapAttribute(aIndex, 1);

  00057	6a 01		 push	 1
  00059	53		 push	 ebx
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?GCMapAttribute@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::GCMapAttribute
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN3@SetStateSt:

; 475  : 
; 476  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00066	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  0006c	43		 inc	 ebx
  0006d	81 ff 80 d7 e9
	09		 cmp	 edi, 166320000		; 09e9d780H
  00073	7c ce		 jl	 SHORT $LL4@SetStateSt

; 483  : 		}
; 484  : 	}
; 485  : 
; 486  : 	this->AddMonster(this->m_EventStage, 0);

  00075	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00078	6a 00		 push	 0
  0007a	52		 push	 edx
  0007b	8b ce		 mov	 ecx, esi
  0007d	e8 00 00 00 00	 call	 ?AddMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::AddMonster
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 487  : }

  00085	c3		 ret	 0
?SetStateStart@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::SetStateStart
_TEXT	ENDS
PUBLIC	??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@ ; `string'
PUBLIC	?SetStateEnd@CCarnageEvent@@QAEXXZ		; CCarnageEvent::SetStateEnd
;	COMDAT ??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@
CONST	SEGMENT
??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@ DB 'Carnage Event Ended'
	DB	'!', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetStateEnd@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?SetStateEnd@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::SetStateEnd, COMDAT
; _this$ = ecx

; 490  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 491  : 	this->DelMonster();

  00003	e8 00 00 00 00	 call	 ?DelMonster@CCarnageEvent@@QAEXXZ ; CCarnageEvent::DelMonster

; 492  : 
; 493  : 	this->m_TickCount = GetTickCount();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000e	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 494  : 	this->m_TickRemain = this->m_PlayTime * 60000;

  00011	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00014	69 c0 60 ea 00
	00		 imul	 eax, 60000		; 0000ea60H

; 495  : 	this->m_EventStatus = eCARNAGE_STATUS_END;
; 496  : 
; 497  : 	AllSendServerMsg("Carnage Event Ended!");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FDFKEFOB@Carnage?5Event?5Ended?$CB?$AA@
  0001f	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00022	c7 06 03 00 00
	00		 mov	 DWORD PTR [esi], 3
  00028	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  0002d	83 c4 04	 add	 esp, 4
  00030	5e		 pop	 esi

; 498  : }

  00031	c3		 ret	 0
?SetStateEnd@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::SetStateEnd
_TEXT	ENDS
PUBLIC	??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@	; `string'
PUBLIC	??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@ ; `string'
PUBLIC	?NpcDialog@CCarnageEvent@@QAE_NHH@Z		; CCarnageEvent::NpcDialog
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?gObjDeleteItemsCount@@YAHHFFH@Z:PROC		; gObjDeleteItemsCount
EXTRN	?gObjGetItemCountInInventory@@YAHHHH@Z:PROC	; gObjGetItemCountInInventory
;	COMDAT ??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@
CONST	SEGMENT
??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@ DB 'Carnage Event Close.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@
CONST	SEGMENT
??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@ DB 'Carnage '
	DB	'Event need ticket item (%d, %d).', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?NpcDialog@CCarnageEvent@@QAE_NHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aNpcIndex$ = 12					; size = 4
?NpcDialog@CCarnageEvent@@QAE_NHH@Z PROC		; CCarnageEvent::NpcDialog, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 502  : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aNpcIndex))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	0f 88 24 01 00
	00		 js	 $LN7@NpcDialog
  00012	33 c0		 xor	 eax, eax
  00014	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 11 01 00
	00		 je	 $LN7@NpcDialog
  00025	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  00028	85 c0		 test	 eax, eax
  0002a	0f 88 06 01 00
	00		 js	 $LN7@NpcDialog
  00030	33 c9		 xor	 ecx, ecx
  00032	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00037	0f 9e c1	 setle	 cl
  0003a	85 c9		 test	 ecx, ecx
  0003c	0f 84 f4 00 00
	00		 je	 $LN7@NpcDialog

; 505  : 	}
; 506  : 
; 507  : 	LPOBJ lpUser = &gObj[aIndex];
; 508  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  00042	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00048	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 509  : 
; 510  : 	if( lpNpc->Class == this->m_NpcClass && 
; 511  : 		lpNpc->MapNumber == this->m_NpcMap && 
; 512  : 		lpNpc->X == this->m_NpcX && 
; 513  : 		lpNpc->Y == this->m_NpcY )

  0004e	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00055	3b 4e 30	 cmp	 ecx, DWORD PTR [esi+48]
  00058	0f 85 d8 00 00
	00		 jne	 $LN7@NpcDialog
  0005e	0f b6 90 49 01
	00 00		 movzx	 edx, BYTE PTR [eax+329]
  00065	3b 56 34	 cmp	 edx, DWORD PTR [esi+52]
  00068	0f 85 c8 00 00
	00		 jne	 $LN7@NpcDialog
  0006e	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00075	3b 4e 38	 cmp	 ecx, DWORD PTR [esi+56]
  00078	0f 85 b8 00 00
	00		 jne	 $LN7@NpcDialog
  0007e	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]
  00085	3b 56 3c	 cmp	 edx, DWORD PTR [esi+60]
  00088	0f 85 a8 00 00
	00		 jne	 $LN7@NpcDialog

; 514  : 	{
; 515  : 		if(this->m_EventStatus == eCARNAGE_STATUS_WAIT)

  0008e	83 3e 01	 cmp	 DWORD PTR [esi], 1
  00091	0f 85 89 00 00
	00		 jne	 $LN5@NpcDialog

; 516  : 		{
; 517  : 			if(this->m_TicketActive)

  00097	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0009b	0f 84 95 00 00
	00		 je	 $LN7@NpcDialog

; 518  : 			{
; 519  : 				if(gObjGetItemCountInInventory(aIndex, ITEMGET(this->m_TicketType, this->m_TicketIndex), this->m_TicketLevel) > 0)

  000a1	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000a4	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000a7	c1 e1 09	 shl	 ecx, 9
  000aa	03 4e 48	 add	 ecx, DWORD PTR [esi+72]
  000ad	50		 push	 eax
  000ae	51		 push	 ecx
  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	85 c0		 test	 eax, eax
  000ba	7e 46		 jle	 SHORT $LN3@NpcDialog

; 520  : 				{
; 521  : 					gObjDeleteItemsCount(aIndex, ITEMGET(this->m_TicketType, this->m_TicketIndex), this->m_TicketLevel, 1);

  000bc	0f b7 56 4c	 movzx	 edx, WORD PTR [esi+76]
  000c0	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  000c5	66 0f af 46 44	 imul	 ax, WORD PTR [esi+68]
  000ca	66 03 46 48	 add	 ax, WORD PTR [esi+72]
  000ce	6a 01		 push	 1
  000d0	0f b7 c8	 movzx	 ecx, ax
  000d3	52		 push	 edx
  000d4	51		 push	 ecx
  000d5	57		 push	 edi
  000d6	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount

; 522  : 
; 523  : 					gObjTeleport(aIndex, this->m_MapNumber, this->m_MapX, this->m_MapY);	

  000db	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  000de	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000e1	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000e4	52		 push	 edx
  000e5	50		 push	 eax
  000e6	51		 push	 ecx
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  000ed	83 c4 20	 add	 esp, 32			; 00000020H

; 524  : 
; 525  : 					this->GCMapAttribute(aIndex, 0);

  000f0	6a 00		 push	 0
  000f2	57		 push	 edi
  000f3	8b ce		 mov	 ecx, esi
  000f5	e8 00 00 00 00	 call	 ?GCMapAttribute@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::GCMapAttribute
  000fa	5f		 pop	 edi

; 526  : 
; 527  : 					return true;

  000fb	b0 01		 mov	 al, 1
  000fd	5e		 pop	 esi

; 538  : 		}	
; 539  : 	}
; 540  : 
; 541  : 	return false;
; 542  : }

  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
$LN3@NpcDialog:

; 528  : 				}
; 529  : 				else
; 530  : 				{
; 531  : 					MsgOutput(aIndex, "Carnage Event need ticket item (%d, %d).", this->m_TicketType, this->m_TicketIndex);

  00102	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00105	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00108	52		 push	 edx
  00109	50		 push	 eax
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JPOKFCJO@Carnage?5Event?5need?5ticket?5item?5?$CI@

; 532  : 				}
; 533  : 			}
; 534  : 		}
; 535  : 		else
; 536  : 		{
; 537  : 			MsgOutput(aIndex, "Carnage Event Close.", this->m_TicketType, this->m_TicketIndex);

  0010f	57		 push	 edi
  00110	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00115	83 c4 10	 add	 esp, 16			; 00000010H
  00118	5f		 pop	 edi
  00119	32 c0		 xor	 al, al
  0011b	5e		 pop	 esi

; 538  : 		}	
; 539  : 	}
; 540  : 
; 541  : 	return false;
; 542  : }

  0011c	5d		 pop	 ebp
  0011d	c2 08 00	 ret	 8
$LN5@NpcDialog:

; 532  : 				}
; 533  : 			}
; 534  : 		}
; 535  : 		else
; 536  : 		{
; 537  : 			MsgOutput(aIndex, "Carnage Event Close.", this->m_TicketType, this->m_TicketIndex);

  00120	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00123	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00126	51		 push	 ecx
  00127	52		 push	 edx
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJLKJOHK@Carnage?5Event?5Close?4?$AA@
  0012d	57		 push	 edi
  0012e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00133	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@NpcDialog:

; 503  : 	{
; 504  : 		return false;

  00136	5f		 pop	 edi
  00137	32 c0		 xor	 al, al
  00139	5e		 pop	 esi

; 538  : 		}	
; 539  : 	}
; 540  : 
; 541  : 	return false;
; 542  : }

  0013a	5d		 pop	 ebp
  0013b	c2 08 00	 ret	 8
?NpcDialog@CCarnageEvent@@QAE_NHH@Z ENDP		; CCarnageEvent::NpcDialog
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@ ; `string'
PUBLIC	?LoadMonster@CCarnageEvent@@QAEXXZ		; CCarnageEvent::LoadMonster
;	COMDAT ??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@ DB 'Carnage max load '
	DB	'monster', 00H				; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
CONST	ENDS
;	COMDAT ?LoadMonster@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
_iMobCount$213871 = -20					; size = 4
_iMobX$213869 = -16					; size = 4
_iMobY$213870 = -12					; size = 4
_n$213872 = -8						; size = 4
tv613 = -4						; size = 4
?LoadMonster@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::LoadMonster, COMDAT
; _this$ = ecx

; 573  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 574  : 	if(this->m_EventStatus == eCARNAGE_STATUS_WAIT || this->m_EventStatus == eCARNAGE_STATUS_START)

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	83 f8 01	 cmp	 eax, 1
  0000e	0f 84 b1 01 00
	00		 je	 $LN15@LoadMonste
  00014	83 f8 02	 cmp	 eax, 2
  00017	0f 84 a8 01 00
	00		 je	 $LN15@LoadMonste

; 575  : 	{
; 576  : 		return;
; 577  : 	}
; 578  : 
; 579  : 	this->m_MonsterCount = 0;

  0001d	53		 push	 ebx
  0001e	33 db		 xor	 ebx, ebx
  00020	89 5e 58	 mov	 DWORD PTR [esi+88], ebx
  00023	8d 86 98 00 00
	00		 lea	 eax, DWORD PTR [esi+152]
  00029	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  0002e	8b ff		 npad	 2
$LL14@LoadMonste:

; 580  : 
; 581  : 	for(int i = 0; i < CARNAGE_MONSTER_MAX; i++)
; 582  : 	{
; 583  : 		this->m_MonsterBase[i].Stage  = -1;

  00030	83 ca ff	 or	 edx, -1
  00033	89 50 f8	 mov	 DWORD PTR [eax-8], edx

; 584  : 		this->m_MonsterBase[i].aIndex = -1;

  00036	89 10		 mov	 DWORD PTR [eax], edx

; 585  : 		this->m_MonsterBase[i].Pos	 = -1;

  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 586  : 		this->m_MonsterBase[i].Class  = -1;

  0003b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0003e	83 c0 14	 add	 eax, 20			; 00000014H
  00041	49		 dec	 ecx
  00042	75 ec		 jne	 SHORT $LL14@LoadMonste

; 587  : 	}
; 588  : 
; 589  : 	for(int i = 0; i < this->m_MonsterData.size(); i++)

  00044	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00047	2b 4e 70	 sub	 ecx, DWORD PTR [esi+112]
  0004a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004f	f7 e9		 imul	 ecx
  00051	c1 fa 04	 sar	 edx, 4
  00054	8b c2		 mov	 eax, edx
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	03 c2		 add	 eax, edx
  0005b	0f 84 63 01 00
	00		 je	 $LN48@LoadMonste
  00061	89 5d fc	 mov	 DWORD PTR tv613[ebp], ebx
  00064	57		 push	 edi
  00065	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL47@LoadMonste:

; 590  : 	{
; 591  : 		int iMobClass = this->m_MonsterData[i].MobClass;

  00070	8b 45 fc	 mov	 eax, DWORD PTR tv613[ebp]
  00073	03 46 70	 add	 eax, DWORD PTR [esi+112]

; 592  : 		int iMobX = this->m_MonsterData[i].MobX;
; 593  : 		int iMobY = this->m_MonsterData[i].MobY;
; 594  : 		int iMobCount = this->m_MonsterData[i].MobCount;
; 595  : 
; 596  : 		for(int n = 0; n < iMobCount; n++)

  00076	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$213872[ebp], 0
  0007d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00080	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00083	8b 38		 mov	 edi, DWORD PTR [eax]
  00085	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00088	89 4d f0	 mov	 DWORD PTR _iMobX$213869[ebp], ecx
  0008b	89 55 f4	 mov	 DWORD PTR _iMobY$213870[ebp], edx
  0008e	89 45 ec	 mov	 DWORD PTR _iMobCount$213871[ebp], eax
  00091	85 c0		 test	 eax, eax
  00093	7e 7b		 jle	 SHORT $LN6@LoadMonste
$LL45@LoadMonste:

; 597  : 		{
; 598  : 			int iMobPos = this->GetMonsterPos(iMobClass, this->m_MapNumber, iMobX, iMobY);

  00095	8b 45 f4	 mov	 eax, DWORD PTR _iMobY$213870[ebp]
  00098	8b 4d f0	 mov	 ecx, DWORD PTR _iMobX$213869[ebp]
  0009b	0f b6 56 18	 movzx	 edx, BYTE PTR [esi+24]
  0009f	50		 push	 eax
  000a0	51		 push	 ecx
  000a1	52		 push	 edx
  000a2	57		 push	 edi
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z ; CCarnageEvent::GetMonsterPos

; 599  : 
; 600  : 			if(iMobPos >= 0)

  000aa	85 c0		 test	 eax, eax
  000ac	78 49		 js	 SHORT $LN46@LoadMonste

; 601  : 			{
; 602  : 				this->m_MonsterBase[this->m_MonsterCount].Type = 0;

  000ae	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000b1	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  000b4	c7 84 8e 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+ecx*4+148], 0

; 603  : 				this->m_MonsterBase[this->m_MonsterCount].Stage = i;

  000bf	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000c2	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  000c5	89 9c 96 90 00
	00 00		 mov	 DWORD PTR [esi+edx*4+144], ebx

; 604  : 				this->m_MonsterBase[this->m_MonsterCount].aIndex = -1;

  000cc	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000cf	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  000d2	c7 84 8e 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [esi+ecx*4+152], -1

; 605  : 				this->m_MonsterBase[this->m_MonsterCount].Pos = iMobPos;

  000dd	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000e0	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  000e3	89 84 96 9c 00
	00 00		 mov	 DWORD PTR [esi+edx*4+156], eax

; 606  : 				this->m_MonsterBase[this->m_MonsterCount].Class = iMobClass;

  000ea	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000ed	8d 44 80 28	 lea	 eax, DWORD PTR [eax+eax*4+40]
  000f1	89 3c 86	 mov	 DWORD PTR [esi+eax*4], edi

; 607  : 				this->m_MonsterCount++;

  000f4	ff 46 58	 inc	 DWORD PTR [esi+88]
$LN46@LoadMonste:

; 608  : 			}	
; 609  : 
; 610  : 			if(this->m_MonsterCount >= CARNAGE_MONSTER_MAX)

  000f7	81 7e 58 f4 01
	00 00		 cmp	 DWORD PTR [esi+88], 500	; 000001f4H
  000fe	0f 8d b2 00 00
	00		 jge	 $LN41@LoadMonste

; 592  : 		int iMobX = this->m_MonsterData[i].MobX;
; 593  : 		int iMobY = this->m_MonsterData[i].MobY;
; 594  : 		int iMobCount = this->m_MonsterData[i].MobCount;
; 595  : 
; 596  : 		for(int n = 0; n < iMobCount; n++)

  00104	8b 45 f8	 mov	 eax, DWORD PTR _n$213872[ebp]
  00107	40		 inc	 eax
  00108	89 45 f8	 mov	 DWORD PTR _n$213872[ebp], eax
  0010b	3b 45 ec	 cmp	 eax, DWORD PTR _iMobCount$213871[ebp]
  0010e	7c 85		 jl	 SHORT $LL45@LoadMonste
$LN6@LoadMonste:

; 611  : 			{
; 612  : 				MsgBox("Carnage max load monster");
; 613  : 				return;
; 614  : 			}
; 615  : 		}
; 616  : 
; 617  : 		if(this->m_MonsterData[i].BossActive)

  00110	8b 45 fc	 mov	 eax, DWORD PTR tv613[ebp]
  00113	03 46 70	 add	 eax, DWORD PTR [esi+112]
  00116	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0011a	74 6f		 je	 SHORT $LN10@LoadMonste

; 618  : 		{
; 619  : 			int iBossClass = this->m_MonsterData[i].BossClass;
; 620  : 			int iBossX = this->m_MonsterData[i].BossX;

  0011c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0011f	8b 78 14	 mov	 edi, DWORD PTR [eax+20]

; 621  : 			int iBossY = this->m_MonsterData[i].BossY;

  00122	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 622  : 
; 623  : 			int iBossPos = this->GetMonsterPos(iBossClass, this->m_MapNumber, iBossX, iBossY);

  00125	50		 push	 eax
  00126	0f b6 46 18	 movzx	 eax, BYTE PTR [esi+24]
  0012a	51		 push	 ecx
  0012b	50		 push	 eax
  0012c	57		 push	 edi
  0012d	8b ce		 mov	 ecx, esi
  0012f	e8 00 00 00 00	 call	 ?GetMonsterPos@CCarnageEvent@@QAEHGEEE@Z ; CCarnageEvent::GetMonsterPos

; 624  : 
; 625  : 			if(iBossPos >= 0)

  00134	85 c0		 test	 eax, eax
  00136	78 4a		 js	 SHORT $LN2@LoadMonste

; 626  : 			{
; 627  : 				this->m_MonsterBase[this->m_MonsterCount].Type = 1;

  00138	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0013b	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0013e	ba 01 00 00 00	 mov	 edx, 1
  00143	89 94 8e 94 00
	00 00		 mov	 DWORD PTR [esi+ecx*4+148], edx

; 628  : 				this->m_MonsterBase[this->m_MonsterCount].Stage = i;

  0014a	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0014d	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00150	89 9c 8e 90 00
	00 00		 mov	 DWORD PTR [esi+ecx*4+144], ebx

; 629  : 				this->m_MonsterBase[this->m_MonsterCount].aIndex = -1;

  00157	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0015a	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0015d	c7 84 8e 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [esi+ecx*4+152], -1

; 630  : 				this->m_MonsterBase[this->m_MonsterCount].Pos = iBossPos;

  00168	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0016b	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0016e	89 84 8e 9c 00
	00 00		 mov	 DWORD PTR [esi+ecx*4+156], eax

; 631  : 				this->m_MonsterBase[this->m_MonsterCount].Class = iBossClass;

  00175	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00178	8d 44 80 28	 lea	 eax, DWORD PTR [eax+eax*4+40]
  0017c	89 3c 86	 mov	 DWORD PTR [esi+eax*4], edi

; 632  : 				this->m_MonsterCount++;

  0017f	01 56 58	 add	 DWORD PTR [esi+88], edx
$LN2@LoadMonste:

; 633  : 			}
; 634  : 
; 635  : 			if(this->m_MonsterCount >= CARNAGE_MONSTER_MAX)

  00182	81 7e 58 f4 01
	00 00		 cmp	 DWORD PTR [esi+88], 500	; 000001f4H
  00189	7d 2b		 jge	 SHORT $LN41@LoadMonste
$LN10@LoadMonste:

; 587  : 	}
; 588  : 
; 589  : 	for(int i = 0; i < this->m_MonsterData.size(); i++)

  0018b	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  0018e	2b 4e 70	 sub	 ecx, DWORD PTR [esi+112]
  00191	83 45 fc 60	 add	 DWORD PTR tv613[ebp], 96 ; 00000060H
  00195	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0019a	f7 e9		 imul	 ecx
  0019c	c1 fa 04	 sar	 edx, 4
  0019f	8b ca		 mov	 ecx, edx
  001a1	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001a4	43		 inc	 ebx
  001a5	03 ca		 add	 ecx, edx
  001a7	3b d9		 cmp	 ebx, ecx
  001a9	0f 82 c1 fe ff
	ff		 jb	 $LL47@LoadMonste
  001af	5f		 pop	 edi
  001b0	5b		 pop	 ebx
  001b1	5e		 pop	 esi

; 638  : 				return;
; 639  : 			}
; 640  : 		}
; 641  : 	}
; 642  : }

  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c3		 ret	 0
$LN41@LoadMonste:

; 636  : 			{
; 637  : 				MsgBox("Carnage max load monster");

  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GDLLADGH@Carnage?5max?5load?5monster?$AA@
  001bb	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001c0	83 c4 04	 add	 esp, 4
  001c3	5f		 pop	 edi
$LN48@LoadMonste:
  001c4	5b		 pop	 ebx
$LN15@LoadMonste:
  001c5	5e		 pop	 esi

; 638  : 				return;
; 639  : 			}
; 640  : 		}
; 641  : 	}
; 642  : }

  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c3		 ret	 0
?LoadMonster@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::LoadMonster
_TEXT	ENDS
PUBLIC	?RewardMonster@CCarnageEvent@@QAEXHHH@Z		; CCarnageEvent::RewardMonster
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	?MakeRewardSetItem@@YAXHEEHH@Z:PROC		; MakeRewardSetItem
EXTRN	?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z:PROC ; gObjGetRandomItemDropLocation
; Function compile flags: /Ogtp
;	COMDAT ?RewardMonster@CCarnageEvent@@QAEXHHH@Z
_TEXT	SEGMENT
_lpUser$ = -36						; size = 4
_iSkill$213952 = -32					; size = 4
_iLuck$213953 = -28					; size = 4
_iAdd$213954 = -24					; size = 4
_iExl$213955 = -20					; size = 4
tv569 = -16						; size = 4
_lpMonster$ = -12					; size = 4
_i$213944 = -8						; size = 4
_cDropX$ = -4						; size = 1
_aIndex$ = 8						; size = 4
_cDropY$ = 12						; size = 1
_aMonsterIndex$ = 12					; size = 4
tv556 = 16						; size = 4
_MonsterType$ = 16					; size = 4
?RewardMonster@CCarnageEvent@@QAEXHHH@Z PROC		; CCarnageEvent::RewardMonster, COMDAT
; _this$ = ecx

; 730  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx

; 731  : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aMonsterIndex))

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	85 db		 test	 ebx, ebx
  0000f	0f 88 06 02 00
	00		 js	 $LN11@RewardMons
  00015	33 c0		 xor	 eax, eax
  00017	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0001d	0f 9e c0	 setle	 al
  00020	85 c0		 test	 eax, eax
  00022	0f 84 f3 01 00
	00		 je	 $LN11@RewardMons
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _aMonsterIndex$[ebp]
  0002b	85 c9		 test	 ecx, ecx
  0002d	0f 88 e8 01 00
	00		 js	 $LN11@RewardMons
  00033	33 c0		 xor	 eax, eax
  00035	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  0003b	0f 9e c0	 setle	 al
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 d5 01 00
	00		 je	 $LN11@RewardMons

; 732  : 	{
; 733  : 		return;
; 734  : 	}
; 735  : 
; 736  : 	LPOBJ lpUser = &gObj[aIndex];

  00046	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 737  : 	LPOBJ lpMonster = &gObj[aMonsterIndex];

  0004c	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00052	8b c3		 mov	 eax, ebx
  00054	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0005a	56		 push	 esi
  0005b	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 738  : 
; 739  : 	BYTE cDropX = lpMonster->X;

  0005e	8a 8e 44 01 00
	00		 mov	 cl, BYTE PTR [esi+324]
  00064	03 c2		 add	 eax, edx
  00066	88 4d fc	 mov	 BYTE PTR _cDropX$[ebp], cl

; 740  : 	BYTE cDropY = lpMonster->Y;

  00069	8a 96 46 01 00
	00		 mov	 dl, BYTE PTR [esi+326]

; 741  : 
; 742  : 	if(MonsterType == 0)

  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _MonsterType$[ebp]
  00072	88 55 0c	 mov	 BYTE PTR _cDropY$[ebp], dl
  00075	33 d2		 xor	 edx, edx
  00077	89 45 dc	 mov	 DWORD PTR _lpUser$[ebp], eax
  0007a	89 75 f4	 mov	 DWORD PTR _lpMonster$[ebp], esi
  0007d	3b ca		 cmp	 ecx, edx
  0007f	75 6e		 jne	 SHORT $LN10@RewardMons

; 743  : 	{
; 744  : 		if(!gObjGetRandomItemDropLocation(lpUser->MapNumber, cDropX, cDropY, 4, 4, 10))

  00081	0f b6 80 49 01
	00 00		 movzx	 eax, BYTE PTR [eax+329]
  00088	6a 0a		 push	 10			; 0000000aH
  0008a	6a 04		 push	 4
  0008c	6a 04		 push	 4
  0008e	8d 4d 0c	 lea	 ecx, DWORD PTR _cDropY$[ebp]
  00091	51		 push	 ecx
  00092	8d 55 fc	 lea	 edx, DWORD PTR _cDropX$[ebp]
  00095	52		 push	 edx
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z ; gObjGetRandomItemDropLocation
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	85 c0		 test	 eax, eax
  000a1	75 12		 jne	 SHORT $LN9@RewardMons

; 745  : 		{
; 746  : 			cDropX = lpMonster->X;

  000a3	8a 8e 44 01 00
	00		 mov	 cl, BYTE PTR [esi+324]
  000a9	88 4d fc	 mov	 BYTE PTR _cDropX$[ebp], cl

; 747  : 			cDropY = lpMonster->Y;

  000ac	8a 96 46 01 00
	00		 mov	 dl, BYTE PTR [esi+326]
  000b2	88 55 0c	 mov	 BYTE PTR _cDropY$[ebp], dl
$LN9@RewardMons:

; 748  : 		}
; 749  : 
; 750  : 		if(this->m_RewardAncentRate > (rand()%10000))

  000b5	e8 00 00 00 00	 call	 _rand
  000ba	99		 cdq
  000bb	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000c0	f7 f9		 idiv	 ecx
  000c2	39 57 54	 cmp	 DWORD PTR [edi+84], edx
  000c5	0f 8e 4f 01 00
	00		 jle	 $LN49@RewardMons

; 751  : 		{
; 752  : 			MakeRewardSetItem(aIndex, cDropX, cDropY, 0, lpMonster->MapNumber);

  000cb	0f b6 96 49 01
	00 00		 movzx	 edx, BYTE PTR [esi+329]
  000d2	8b 45 0c	 mov	 eax, DWORD PTR _cDropY$[ebp]
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _cDropX$[ebp]
  000d8	52		 push	 edx
  000d9	6a 00		 push	 0
  000db	50		 push	 eax
  000dc	51		 push	 ecx
  000dd	53		 push	 ebx
  000de	e8 00 00 00 00	 call	 ?MakeRewardSetItem@@YAXHEEHH@Z ; MakeRewardSetItem
  000e3	83 c4 14	 add	 esp, 20			; 00000014H
  000e6	5e		 pop	 esi
  000e7	5f		 pop	 edi
  000e8	5b		 pop	 ebx

; 780  : 		}
; 781  : 	}
; 782  : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 0c 00	 ret	 12			; 0000000cH
$LN10@RewardMons:

; 753  : 		}
; 754  : 	}
; 755  : 	else if(MonsterType == 1)

  000ef	83 f9 01	 cmp	 ecx, 1
  000f2	0f 85 22 01 00
	00		 jne	 $LN49@RewardMons

; 756  : 	{
; 757  : 		for(int i = 0; i < this->m_RewardItemCount; i++)

  000f8	89 55 f8	 mov	 DWORD PTR _i$213944[ebp], edx
  000fb	39 57 50	 cmp	 DWORD PTR [edi+80], edx
  000fe	0f 8e 16 01 00
	00		 jle	 $LN49@RewardMons
  00104	89 55 10	 mov	 DWORD PTR tv556[ebp], edx
  00107	eb 0a		 jmp	 SHORT $LN5@RewardMons
  00109	8d a4 24 00 00
	00 00		 npad	 7
$LL47@RewardMons:
  00110	8b 75 f4	 mov	 esi, DWORD PTR _lpMonster$[ebp]
$LN5@RewardMons:

; 758  : 		{
; 759  : 			if(!gObjGetRandomItemDropLocation(lpMonster->MapNumber, cDropX, cDropY, 4, 4, 10))

  00113	0f b6 8e 49 01
	00 00		 movzx	 ecx, BYTE PTR [esi+329]
  0011a	6a 0a		 push	 10			; 0000000aH
  0011c	6a 04		 push	 4
  0011e	6a 04		 push	 4
  00120	8d 55 0c	 lea	 edx, DWORD PTR _cDropY$[ebp]
  00123	52		 push	 edx
  00124	8d 45 fc	 lea	 eax, DWORD PTR _cDropX$[ebp]
  00127	50		 push	 eax
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 ?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z ; gObjGetRandomItemDropLocation
  0012e	83 c4 18	 add	 esp, 24			; 00000018H
  00131	85 c0		 test	 eax, eax
  00133	75 12		 jne	 SHORT $LN2@RewardMons

; 760  : 			{
; 761  : 				cDropX = lpMonster->X;

  00135	8a 96 44 01 00
	00		 mov	 dl, BYTE PTR [esi+324]
  0013b	88 55 fc	 mov	 BYTE PTR _cDropX$[ebp], dl

; 762  : 				cDropY = lpMonster->Y;

  0013e	8a 86 46 01 00
	00		 mov	 al, BYTE PTR [esi+326]
  00144	88 45 0c	 mov	 BYTE PTR _cDropY$[ebp], al
$LN2@RewardMons:

; 763  : 			}
; 764  : 
; 765  : 			int iRand = rand() % this->m_ItemData.size();

  00147	8b b7 84 00 00
	00		 mov	 esi, DWORD PTR [edi+132]
  0014d	2b b7 80 00 00
	00		 sub	 esi, DWORD PTR [edi+128]
  00153	c1 fe 05	 sar	 esi, 5
  00156	e8 00 00 00 00	 call	 _rand
  0015b	33 d2		 xor	 edx, edx
  0015d	f7 f6		 div	 esi

; 766  : 
; 767  : 			int iItem = ITEMGET(this->m_ItemData[iRand].Type, this->m_ItemData[iRand].Index);

  0015f	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  00165	c1 e2 05	 shl	 edx, 5
  00168	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]

; 768  : 			int iLevel = this->m_ItemData[iRand].MinLevel;

  0016b	8b 5c 0a 08	 mov	 ebx, DWORD PTR [edx+ecx+8]
  0016f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 769  : 			int iSkill =  this->m_ItemData[iRand].Skill;

  00172	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 770  : 			int iLuck =  this->m_ItemData[iRand].Luck;

  00175	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00178	c1 e6 09	 shl	 esi, 9
  0017b	03 70 04	 add	 esi, DWORD PTR [eax+4]
  0017e	89 55 e0	 mov	 DWORD PTR _iSkill$213952[ebp], edx

; 771  : 			int iAdd =  this->m_ItemData[iRand].Add;

  00181	8b 50 18	 mov	 edx, DWORD PTR [eax+24]

; 772  : 			int iExl =  GenExcOpt(this->m_ItemData[iRand].Exc);

  00184	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00187	50		 push	 eax
  00188	89 4d e4	 mov	 DWORD PTR _iLuck$213953[ebp], ecx
  0018b	89 55 e8	 mov	 DWORD PTR _iAdd$213954[ebp], edx
  0018e	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt

; 773  : 
; 774  : 			if(this->m_ItemData[i].MaxLevel > this->m_ItemData[i].MinLevel)

  00193	8b 97 80 00 00
	00		 mov	 edx, DWORD PTR [edi+128]
  00199	8b 4d 10	 mov	 ecx, DWORD PTR tv556[ebp]
  0019c	89 45 ec	 mov	 DWORD PTR _iExl$213955[ebp], eax
  0019f	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  001a2	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  001a5	83 c4 04	 add	 esp, 4
  001a8	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  001ab	7e 23		 jle	 SHORT $LN48@RewardMons

; 775  : 			{
; 776  : 				iLevel = this->m_ItemData[i].MinLevel + (rand() % (this->m_ItemData[i].MaxLevel - this->m_ItemData[i].MinLevel + 1));

  001ad	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  001b3	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  001b6	89 5d f0	 mov	 DWORD PTR tv569[ebp], ebx
  001b9	e8 00 00 00 00	 call	 _rand
  001be	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  001c1	2b 4b 08	 sub	 ecx, DWORD PTR [ebx+8]
  001c4	99		 cdq
  001c5	41		 inc	 ecx
  001c6	f7 f9		 idiv	 ecx
  001c8	8b da		 mov	 ebx, edx
  001ca	8b 55 f0	 mov	 edx, DWORD PTR tv569[ebp]
  001cd	03 5a 08	 add	 ebx, DWORD PTR [edx+8]
$LN48@RewardMons:

; 777  : 			}	
; 778  : 
; 779  : 			ItemSerialCreateSend(aIndex, lpUser->MapNumber, cDropX, cDropY, iItem, iLevel, 0, iSkill, iLuck, iAdd, aIndex, iExl, 0);

  001d0	8b 45 ec	 mov	 eax, DWORD PTR _iExl$213955[ebp]
  001d3	8b 4d e8	 mov	 ecx, DWORD PTR _iAdd$213954[ebp]
  001d6	8b 55 e4	 mov	 edx, DWORD PTR _iLuck$213953[ebp]
  001d9	6a 00		 push	 0
  001db	50		 push	 eax
  001dc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001df	50		 push	 eax
  001e0	51		 push	 ecx
  001e1	8b 4d e0	 mov	 ecx, DWORD PTR _iSkill$213952[ebp]
  001e4	52		 push	 edx
  001e5	8b 55 0c	 mov	 edx, DWORD PTR _cDropY$[ebp]
  001e8	51		 push	 ecx
  001e9	8b 4d fc	 mov	 ecx, DWORD PTR _cDropX$[ebp]
  001ec	6a 00		 push	 0
  001ee	53		 push	 ebx
  001ef	56		 push	 esi
  001f0	52		 push	 edx
  001f1	8b 55 dc	 mov	 edx, DWORD PTR _lpUser$[ebp]
  001f4	51		 push	 ecx
  001f5	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  001fc	51		 push	 ecx
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00203	8b 45 f8	 mov	 eax, DWORD PTR _i$213944[ebp]
  00206	83 45 10 20	 add	 DWORD PTR tv556[ebp], 32 ; 00000020H
  0020a	40		 inc	 eax
  0020b	83 c4 34	 add	 esp, 52			; 00000034H
  0020e	89 45 f8	 mov	 DWORD PTR _i$213944[ebp], eax
  00211	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  00214	0f 8c f6 fe ff
	ff		 jl	 $LL47@RewardMons
$LN49@RewardMons:
  0021a	5e		 pop	 esi
$LN11@RewardMons:
  0021b	5f		 pop	 edi
  0021c	5b		 pop	 ebx

; 780  : 		}
; 781  : 	}
; 782  : }

  0021d	8b e5		 mov	 esp, ebp
  0021f	5d		 pop	 ebp
  00220	c2 0c 00	 ret	 12			; 0000000cH
?RewardMonster@CCarnageEvent@@QAEXHHH@Z ENDP		; CCarnageEvent::RewardMonster
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MessageMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::MessageMonster
EXTRN	?ChatSend@@YAXPAUOBJECTSTRUCT@@PAD@Z:PROC	; ChatSend
EXTRN	_sprintf:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MessageMonster@CCarnageEvent@@QAEXHH@Z
_TEXT	SEGMENT
_szBossMessage$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_aMonsterIndex$ = 8					; size = 4
_MonsterType$ = 12					; size = 4
?MessageMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::MessageMonster, COMDAT
; _this$ = ecx

; 785  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 786  : 	if(MonsterType != 1)

  00010	83 7d 0c 01	 cmp	 DWORD PTR _MonsterType$[ebp], 1
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _aMonsterIndex$[ebp]
  00018	8b c1		 mov	 eax, ecx
  0001a	75 76		 jne	 SHORT $LN5@MessageMon

; 787  : 	{
; 788  : 		return;
; 789  : 	}
; 790  : 
; 791  : 	if(!OBJMAX_RANGE(aMonsterIndex))

  0001c	85 ff		 test	 edi, edi
  0001e	78 72		 js	 SHORT $LN5@MessageMon
  00020	33 c9		 xor	 ecx, ecx
  00022	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00028	0f 9e c1	 setle	 cl
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 63		 je	 SHORT $LN5@MessageMon

; 792  : 	{
; 793  : 		return;
; 794  : 	}
; 795  : 
; 796  : 	int iStage = this->m_EventStage;
; 797  : 
; 798  : 	if(this->m_EventStage >= this->m_MonsterData.size())

  0002f	8b 50 74	 mov	 edx, DWORD PTR [eax+116]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	56		 push	 esi
  00036	8b 70 70	 mov	 esi, DWORD PTR [eax+112]
  00039	2b d6		 sub	 edx, esi
  0003b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00040	f7 ea		 imul	 edx
  00042	c1 fa 04	 sar	 edx, 4
  00045	8b c2		 mov	 eax, edx
  00047	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004a	03 c2		 add	 eax, edx
  0004c	3b c8		 cmp	 ecx, eax
  0004e	73 41		 jae	 SHORT $LN16@MessageMon

; 799  : 	{
; 800  : 		return;
; 801  : 	}
; 802  : 
; 803  : 	if(strlen(this->m_MonsterData[iStage].BossDie) < 1)

  00050	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00053	c1 e1 05	 shl	 ecx, 5
  00056	8d 54 31 20	 lea	 edx, DWORD PTR [ecx+esi+32]
  0005a	8b c2		 mov	 eax, edx
  0005c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0005f	90		 npad	 1
$LL15@MessageMon:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL15@MessageMon
  00067	2b c6		 sub	 eax, esi
  00069	83 f8 01	 cmp	 eax, 1
  0006c	72 23		 jb	 SHORT $LN16@MessageMon

; 804  : 	{
; 805  : 		return;
; 806  : 	}
; 807  : 
; 808  : 	LPOBJ lpMonster = &gObj[aMonsterIndex];

  0006e	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00074	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 809  : 
; 810  : 	char szBossMessage[64];
; 811  : 	sprintf(szBossMessage, this->m_MonsterData[this->m_EventStage].BossDie);

  0007a	52		 push	 edx
  0007b	8d 55 bc	 lea	 edx, DWORD PTR _szBossMessage$[ebp]
  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 _sprintf

; 812  : 
; 813  : 	ChatSend(lpMonster, szBossMessage);

  00084	8d 45 bc	 lea	 eax, DWORD PTR _szBossMessage$[ebp]
  00087	50		 push	 eax
  00088	57		 push	 edi
  00089	e8 00 00 00 00	 call	 ?ChatSend@@YAXPAUOBJECTSTRUCT@@PAD@Z ; ChatSend
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@MessageMon:
  00091	5e		 pop	 esi
$LN5@MessageMon:

; 814  : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	5f		 pop	 edi
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
?MessageMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::MessageMonster
_TEXT	ENDS
PUBLIC	?StageMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::StageMonster
; Function compile flags: /Ogtp
;	COMDAT ?StageMonster@CCarnageEvent@@QAEXHH@Z
_TEXT	SEGMENT
_aMonsterIndex$ = 8					; size = 4
_MonsterType$ = 12					; size = 4
?StageMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::StageMonster, COMDAT
; _this$ = ecx

; 817  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 818  : 	if(!OBJMAX_RANGE(aMonsterIndex))

  00003	8b 45 08	 mov	 eax, DWORD PTR _aMonsterIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 68		 js	 SHORT $LN2@StageMonst
  0000a	33 d2		 xor	 edx, edx
  0000c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00011	0f 9e c2	 setle	 dl
  00014	8b c2		 mov	 eax, edx
  00016	85 c0		 test	 eax, eax
  00018	74 58		 je	 SHORT $LN2@StageMonst

; 819  : 	{
; 820  : 		return;
; 821  : 	}
; 822  : 
; 823  : 	if(MonsterType == 0)

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _MonsterType$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	75 17		 jne	 SHORT $LN5@StageMonst

; 824  : 	{
; 825  : 		this->m_StageMonsterCount--;

  00021	ff 49 5c	 dec	 DWORD PTR [ecx+92]

; 826  : 
; 827  : 		if(this->m_StageMonsterCount <= 0)

  00024	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00027	7f 49		 jg	 SHORT $LN2@StageMonst

; 828  : 		{
; 829  : 			this->AddMonster(this->m_EventStage, 1);

  00029	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002c	6a 01		 push	 1
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?AddMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::AddMonster

; 843  : 	}
; 844  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN5@StageMonst:

; 830  : 		}
; 831  : 	}
; 832  : 	else if(MonsterType == 1)

  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 35		 jne	 SHORT $LN2@StageMonst

; 833  : 	{
; 834  : 		this->m_EventStage++;

  0003d	ff 41 04	 inc	 DWORD PTR [ecx+4]

; 835  : 
; 836  : 		if(this->m_EventStage >= this->m_MonsterData.size())

  00040	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00043	2b 51 70	 sub	 edx, DWORD PTR [ecx+112]
  00046	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004b	f7 ea		 imul	 edx
  0004d	c1 fa 04	 sar	 edx, 4
  00050	8b c2		 mov	 eax, edx
  00052	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00055	56		 push	 esi
  00056	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00059	03 c2		 add	 eax, edx
  0005b	3b f0		 cmp	 esi, eax
  0005d	72 0a		 jb	 SHORT $LN1@StageMonst

; 837  : 		{
; 838  : 			this->SetStateEnd();

  0005f	e8 00 00 00 00	 call	 ?SetStateEnd@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateEnd
  00064	5e		 pop	 esi

; 843  : 	}
; 844  : }

  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
$LN1@StageMonst:

; 839  : 			return;
; 840  : 		}
; 841  : 
; 842  : 		this->AddMonster(this->m_EventStage, 0);

  00069	6a 00		 push	 0
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ?AddMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::AddMonster
  00071	5e		 pop	 esi
$LN2@StageMonst:

; 843  : 	}
; 844  : }

  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?StageMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::StageMonster
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z PROC ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@V?$allocator@UCARNAGE_TIME@@@1@@Z ENDP ; std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z PROC ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@V?$allocator@UCARNAGE_MONSTER_DATA@@@1@@Z ENDP ; std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z PROC ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@V?$allocator@UCARNAGE_ITEM@@@1@@Z ENDP ; std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEAAUCARNAGE_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IBEII@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 02	 mov	 eax, 44739242		; 02aaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]
  00008	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000d	f7 ea		 imul	 edx
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00019	8b c8		 mov	 ecx, eax
  0001b	d1 e9		 shr	 ecx, 1
  0001d	ba aa aa aa 02	 mov	 edx, 44739242		; 02aaaaaaH
  00022	2b d1		 sub	 edx, ecx
  00024	3b d0		 cmp	 edx, eax
  00026	73 04		 jae	 SHORT $LN4@Grow_to@2
  00028	33 c0		 xor	 eax, eax
  0002a	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  0002c	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	73 02		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00035	8b c1		 mov	 eax, ecx
$LN1@Grow_to@2:

; 1282 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBEIXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 07	 mov	 edx, 134217727		; 07ffffffH
  0000d	c1 f8 05	 sar	 eax, 5
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@3
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@3:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to@3

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to@3:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IBEII@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@2:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@3:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z ; std::_Allocate<CARNAGE_TIME>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z
_TEXT	SEGMENT
$T217274 = -12						; size = 12
$T217279 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z PROC ; std::_Allocate<CARNAGE_TIME>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T217279[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T217274[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T217279[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T217274[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T217274[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UCARNAGE_TIME@@@std@@YAPAUCARNAGE_TIME@@IPAU1@@Z ENDP ; std::_Allocate<CARNAGE_TIME>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z ; std::_Allocate<CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T217287 = -12						; size = 12
$T217291 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z PROC ; std::_Allocate<CARNAGE_MONSTER_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 43		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	02		 cmp	 ecx, 44739242		; 02aaaaaaH
  00015	77 13		 ja	 SHORT $LN1@Allocate@2
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	c1 e0 05	 shl	 eax, 5
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	83 c4 04	 add	 esp, 4
  00026	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00028	75 28		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR $T217291[ebp]
  0002d	51		 push	 ecx
  0002e	8d 4d f4	 lea	 ecx, DWORD PTR $T217287[ebp]
  00031	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T217291[ebp], 0
  00038	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003d	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00042	8d 55 f4	 lea	 edx, DWORD PTR $T217287[ebp]
  00045	52		 push	 edx
  00046	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T217287[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UCARNAGE_MONSTER_DATA@@@std@@YAPAUCARNAGE_MONSTER_DATA@@IPAU1@@Z ENDP ; std::_Allocate<CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z ; std::_Allocate<CARNAGE_ITEM>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z
_TEXT	SEGMENT
$T217296 = -12						; size = 12
$T217300 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z PROC ; std::_Allocate<CARNAGE_ITEM>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 40		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	07		 cmp	 ecx, 134217727		; 07ffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@3
  00017	c1 e1 05	 shl	 ecx, 5
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 28		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	8d 45 08	 lea	 eax, DWORD PTR $T217300[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T217296[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T217300[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T217296[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T217296[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UCARNAGE_ITEM@@@std@@YAPAUCARNAGE_ITEM@@IPAU1@@Z ENDP ; std::_Allocate<CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z ; std::allocator<CARNAGE_TIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z PROC ; std::allocator<CARNAGE_TIME>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@4
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@4:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@ABU3@@Z ENDP ; std::allocator<CARNAGE_TIME>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN5@construct@5
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN5@construct@5:
  00017	5f		 pop	 edi

; 198  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@ABU3@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z ; std::allocator<CARNAGE_ITEM>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z PROC ; std::allocator<CARNAGE_ITEM>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN5@construct@6
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN5@construct@6:
  00017	5f		 pop	 edi

; 198  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@ABU3@@Z ENDP ; std::allocator<CARNAGE_ITEM>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN1@Move
  00010	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL3@Move
  00025	5e		 pop	 esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN1@Move@2
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 60	 add	 edx, 96			; 00000060H
  0001a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0001f	83 c0 60	 add	 eax, 96			; 00000060H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL3@Move@2
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN1@Move@2:
  0002a	5b		 pop	 ebx

; 2515 : 	return (_Dest);
; 2516 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN1@Move@3
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@Move@3:

; 2514 : 		*_Dest = _STD move(*_First);

  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 20	 add	 edx, 32			; 00000020H
  0001a	b9 08 00 00 00	 mov	 ecx, 8
  0001f	83 c0 20	 add	 eax, 32			; 00000020H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL3@Move@3
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN1@Move@3:
  0002a	5b		 pop	 ebx

; 2515 : 	return (_Dest);
; 2516 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z ; std::allocator<CARNAGE_TIME>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z PROC ; std::allocator<CARNAGE_TIME>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@@Z ENDP ; std::allocator<CARNAGE_TIME>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z ; std::allocator<CARNAGE_ITEM>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z PROC ; std::allocator<CARNAGE_ITEM>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@@Z ENDP ; std::allocator<CARNAGE_ITEM>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z ; std::allocator<CARNAGE_TIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z PROC ; std::allocator<CARNAGE_TIME>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@7
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@7:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_TIME@@@std@@QAEXPAUCARNAGE_TIME@@$$QAU3@@Z ENDP ; std::allocator<CARNAGE_TIME>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z ; std::allocator<CARNAGE_MONSTER_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@8
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@8:
  00017	5f		 pop	 edi

; 203  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEXPAUCARNAGE_MONSTER_DATA@@$$QAU3@@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z ; std::allocator<CARNAGE_ITEM>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z PROC ; std::allocator<CARNAGE_ITEM>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@9
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@9:
  00017	5f		 pop	 edi

; 203  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UCARNAGE_ITEM@@@std@@QAEXPAUCARNAGE_ITEM@@$$QAU3@@Z ENDP ; std::allocator<CARNAGE_ITEM>::construct
_TEXT	ENDS
PUBLIC	??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessStateWait@CCarnageEvent@@QAEXXZ		; CCarnageEvent::ProcessStateWait
;	COMDAT ??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
CONST	SEGMENT
??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@ DB '%d '
	DB	'minute(s) left before Carnage starts.', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ProcessStateWait@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
_szTemp$213777 = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
?ProcessStateWait@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateWait, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi

; 372  : 	int iTickMsec = (GetTickCount() - this->m_TickCount);

  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0001b	8b f1		 mov	 esi, ecx
  0001d	ff d7		 call	 edi
  0001f	2b 46 08	 sub	 eax, DWORD PTR [esi+8]

; 373  : 
; 374  : 	if(iTickMsec >= 1000)

  00022	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00027	7c 5b		 jl	 SHORT $LN2@ProcessSta@2

; 375  : 	{
; 376  : 		this->m_TickRemain -= iTickMsec;			

  00029	29 46 0c	 sub	 DWORD PTR [esi+12], eax

; 377  : 		this->m_TickCount = GetTickCount();

  0002c	ff d7		 call	 edi

; 378  : 
; 379  : 		if(this->m_TickRemain <= (60000 * this->m_OpenTime))

  0002e	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00031	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00034	69 d2 60 ea 00
	00		 imul	 edx, 60000		; 0000ea60H
  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003d	3b ca		 cmp	 ecx, edx
  0003f	7f 43		 jg	 SHORT $LN2@ProcessSta@2

; 380  : 		{
; 381  : 			if((this->m_TickCount - this->m_TickWait) > 60000)

  00041	2b 46 10	 sub	 eax, DWORD PTR [esi+16]
  00044	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  00049	7e 39		 jle	 SHORT $LN2@ProcessSta@2

; 382  : 			{
; 383  : 				int iWaitMin = (this->m_TickRemain / 60000) + 1;

  0004b	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00050	f7 e9		 imul	 ecx
  00052	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00055	8b c2		 mov	 eax, edx
  00057	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005a	8d 4c 02 01	 lea	 ecx, DWORD PTR [edx+eax+1]

; 384  : 				char szTemp[128];
; 385  : 				sprintf(szTemp, "%d minute(s) left before Carnage starts.", iWaitMin);

  0005e	51		 push	 ecx
  0005f	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _szTemp$213777[ebp]
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@ICODNMCA@?$CFd?5minute?$CIs?$CJ?5left?5before?5Carnage@
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 _sprintf

; 386  : 				AllSendServerMsg(szTemp);

  00070	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$213777[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 387  : 				this->m_TickWait = GetTickCount();

  0007f	ff d7		 call	 edi
  00081	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN2@ProcessSta@2:

; 388  : 			}
; 389  : 		}
; 390  : 	}
; 391  : 
; 392  : 	if(this->m_TickRemain <= 0)

  00084	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00088	7f 07		 jg	 SHORT $LN1@ProcessSta@2

; 393  : 	{
; 394  : 		this->SetStateStart();

  0008a	8b ce		 mov	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?SetStateStart@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateStart
$LN1@ProcessSta@2:

; 395  : 	}
; 396  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	5f		 pop	 edi
  00095	33 cd		 xor	 ecx, ebp
  00097	5e		 pop	 esi
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?ProcessStateWait@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateWait
_TEXT	ENDS
PUBLIC	?ProcessStateStart@CCarnageEvent@@QAEXXZ	; CCarnageEvent::ProcessStateStart
; Function compile flags: /Ogtp
;	COMDAT ?ProcessStateStart@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?ProcessStateStart@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateStart, COMDAT
; _this$ = ecx

; 399  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 400  : 	int iTickMsec = (GetTickCount() - this->m_TickCount);

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 08	 sub	 eax, DWORD PTR [esi+8]

; 401  : 
; 402  : 	if(iTickMsec >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 08		 jl	 SHORT $LN2@ProcessSta@3

; 403  : 	{
; 404  : 		this->m_TickRemain -= iTickMsec;			

  00016	29 46 0c	 sub	 DWORD PTR [esi+12], eax

; 405  : 		this->m_TickCount = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN2@ProcessSta@3:

; 406  : 	}
; 407  : 
; 408  : 	if(this->m_TickRemain <= 0)

  0001e	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00022	5f		 pop	 edi
  00023	7f 08		 jg	 SHORT $LN1@ProcessSta@3

; 409  : 	{
; 410  : 		this->SetStateEnd();

  00025	8b ce		 mov	 ecx, esi
  00027	5e		 pop	 esi
  00028	e9 00 00 00 00	 jmp	 ?SetStateEnd@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateEnd
$LN1@ProcessSta@3:
  0002d	5e		 pop	 esi

; 411  : 	}
; 412  : }

  0002e	c3		 ret	 0
?ProcessStateStart@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateStart
_TEXT	ENDS
PUBLIC	?DieMonster@CCarnageEvent@@QAEXHH@Z		; CCarnageEvent::DieMonster
; Function compile flags: /Ogtp
;	COMDAT ?DieMonster@CCarnageEvent@@QAEXHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aMonsterIndex$ = 12					; size = 4
?DieMonster@CCarnageEvent@@QAEXHH@Z PROC		; CCarnageEvent::DieMonster, COMDAT
; _this$ = ecx

; 700  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 701  : 	if(this->m_EventStatus != eCARNAGE_STATUS_START)

  00006	83 3b 02	 cmp	 DWORD PTR [ebx], 2
  00009	0f 85 8f 00 00
	00		 jne	 $LN3@DieMonster

; 702  : 	{
; 703  : 		return;
; 704  : 	}
; 705  : 
; 706  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  0000f	57		 push	 edi
  00010	8b 7b 58	 mov	 edi, DWORD PTR [ebx+88]
  00013	33 c9		 xor	 ecx, ecx
  00015	85 ff		 test	 edi, edi
  00017	0f 8e 80 00 00
	00		 jle	 $LN15@DieMonster
  0001d	56		 push	 esi
  0001e	8d b3 98 00 00
	00		 lea	 esi, DWORD PTR [ebx+152]
$LL14@DieMonster:

; 707  : 	{
; 708  : 		if(this->m_MonsterBase[i].aIndex == aMonsterIndex)

  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	3b 45 0c	 cmp	 eax, DWORD PTR _aMonsterIndex$[ebp]
  00029	75 14		 jne	 SHORT $LN4@DieMonster

; 709  : 		{
; 710  : 			if(OBJMAX_RANGE(this->m_MonsterBase[i].aIndex))

  0002b	85 c0		 test	 eax, eax
  0002d	78 10		 js	 SHORT $LN4@DieMonster
  0002f	33 d2		 xor	 edx, edx
  00031	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00036	0f 9e c2	 setle	 dl
  00039	8b c2		 mov	 eax, edx
  0003b	85 c0		 test	 eax, eax
  0003d	75 0f		 jne	 SHORT $LN12@DieMonster
$LN4@DieMonster:

; 702  : 	{
; 703  : 		return;
; 704  : 	}
; 705  : 
; 706  : 	for(int i = 0; i < this->m_MonsterCount; i++)

  0003f	41		 inc	 ecx
  00040	83 c6 14	 add	 esi, 20			; 00000014H
  00043	3b cf		 cmp	 ecx, edi
  00045	7c dd		 jl	 SHORT $LL14@DieMonster
  00047	5e		 pop	 esi
  00048	5f		 pop	 edi
  00049	5b		 pop	 ebx

; 722  : 
; 723  : 				return;
; 724  : 			}
; 725  : 		}
; 726  : 	}
; 727  : }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN12@DieMonster:

; 711  : 			{
; 712  : 				int iMonsterType = this->m_MonsterBase[i].Type;

  0004e	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00051	8b bc 83 94 00
	00 00		 mov	 edi, DWORD PTR [ebx+eax*4+148]

; 713  : 
; 714  : 				this->MessageMonster(aMonsterIndex, iMonsterType);

  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _aMonsterIndex$[ebp]
  0005b	8d 34 83	 lea	 esi, DWORD PTR [ebx+eax*4]
  0005e	57		 push	 edi
  0005f	51		 push	 ecx
  00060	8b cb		 mov	 ecx, ebx
  00062	e8 00 00 00 00	 call	 ?MessageMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::MessageMonster

; 715  : 
; 716  : 				this->RewardMonster(aIndex, aMonsterIndex, iMonsterType);

  00067	8b 55 0c	 mov	 edx, DWORD PTR _aMonsterIndex$[ebp]
  0006a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0006d	57		 push	 edi
  0006e	52		 push	 edx
  0006f	50		 push	 eax
  00070	8b cb		 mov	 ecx, ebx
  00072	e8 00 00 00 00	 call	 ?RewardMonster@CCarnageEvent@@QAEXHHH@Z ; CCarnageEvent::RewardMonster

; 717  : 
; 718  : 				gObjDel(this->m_MonsterBase[i].aIndex);

  00077	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 719  : 				this->m_MonsterBase[i].aIndex = -1;
; 720  : 
; 721  : 				this->StageMonster(aMonsterIndex, iMonsterType);

  00083	8b 55 0c	 mov	 edx, DWORD PTR _aMonsterIndex$[ebp]
  00086	83 c4 04	 add	 esp, 4
  00089	57		 push	 edi
  0008a	52		 push	 edx
  0008b	8b cb		 mov	 ecx, ebx
  0008d	c7 86 98 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+152], -1
  00097	e8 00 00 00 00	 call	 ?StageMonster@CCarnageEvent@@QAEXHH@Z ; CCarnageEvent::StageMonster
  0009c	5e		 pop	 esi
$LN15@DieMonster:
  0009d	5f		 pop	 edi
$LN3@DieMonster:
  0009e	5b		 pop	 ebx

; 722  : 
; 723  : 				return;
; 724  : 			}
; 725  : 		}
; 726  : 	}
; 727  : }

  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
?DieMonster@CCarnageEvent@@QAEXHH@Z ENDP		; CCarnageEvent::DieMonster
_TEXT	ENDS
PUBLIC	??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBEPAUCARNAGE_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 08	 add	 edx, 8
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@std@@QAE@PAUCARNAGE_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >::_Vector_iterator<std::_Vector_val<CARNAGE_TIME,std::allocator<CARNAGE_TIME> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Make_iter
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QAE@PAUCARNAGE_MONSTER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::_Vector_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QAE@PAUCARNAGE_ITEM@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::_Vector_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z
_TEXT	SEGMENT
$T217641 = -12						; size = 12
$T217639 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z PROC ; std::allocator<CARNAGE_TIME>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate
  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T217639[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T217641[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T217639[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T217641[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T217641[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z ENDP ; std::allocator<CARNAGE_TIME>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z
_TEXT	SEGMENT
$T217664 = -12						; size = 12
$T217662 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z PROC ; std::allocator<CARNAGE_MONSTER_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 43		 je	 SHORT $LN1@allocate@2
  0000f	81 f9 aa aa aa
	02		 cmp	 ecx, 44739242		; 02aaaaaaH
  00015	77 13		 ja	 SHORT $LN3@allocate@2
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	c1 e0 05	 shl	 eax, 5
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	83 c4 04	 add	 esp, 4
  00026	85 c0		 test	 eax, eax
  00028	75 28		 jne	 SHORT $LN1@allocate@2
$LN3@allocate@2:
  0002a	8d 4d 08	 lea	 ecx, DWORD PTR $T217662[ebp]
  0002d	51		 push	 ecx
  0002e	8d 4d f4	 lea	 ecx, DWORD PTR $T217664[ebp]
  00031	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T217662[ebp], 0
  00038	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003d	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00042	8d 55 f4	 lea	 edx, DWORD PTR $T217664[ebp]
  00045	52		 push	 edx
  00046	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T217664[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:

; 188  : 		}

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN12@allocate@2:
?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z ENDP ; std::allocator<CARNAGE_MONSTER_DATA>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z
_TEXT	SEGMENT
$T217687 = -12						; size = 12
$T217685 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z PROC ; std::allocator<CARNAGE_ITEM>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN1@allocate@3
  0000f	81 f9 ff ff ff
	07		 cmp	 ecx, 134217727		; 07ffffffH
  00015	77 10		 ja	 SHORT $LN3@allocate@3
  00017	c1 e1 05	 shl	 ecx, 5
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 28		 jne	 SHORT $LN1@allocate@3
$LN3@allocate@3:
  00027	8d 45 08	 lea	 eax, DWORD PTR $T217685[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T217687[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T217685[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T217687[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T217687[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@3:
$LN1@allocate@3:

; 188  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN12@allocate@3:
?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z ENDP ; std::allocator<CARNAGE_ITEM>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@4
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@4:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN9@Cons_val@5
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN9@Cons_val@5:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN9@Cons_val@6
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN9@Cons_val@6:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z PROC ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN5@Move@4
  00010	56		 push	 esi
$LL7@Move@4:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL7@Move@4
  00025	5e		 pop	 esi
$LN5@Move@4:

; 2536 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCARNAGE_TIME@@PAU1@@std@@YAPAUCARNAGE_TIME@@PAU1@00@Z ENDP ; std::_Move<CARNAGE_TIME *,CARNAGE_TIME *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z PROC ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN5@Move@5
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL7@Move@5:
  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 60	 add	 edx, 96			; 00000060H
  0001a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0001f	83 c0 60	 add	 eax, 96			; 00000060H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL7@Move@5
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN5@Move@5:
  0002a	5b		 pop	 ebx

; 2536 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUCARNAGE_MONSTER_DATA@@PAU1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00@Z ENDP ; std::_Move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z PROC ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN5@Move@6
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL7@Move@6:
  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 20	 add	 edx, 32			; 00000020H
  0001a	b9 08 00 00 00	 mov	 ecx, 8
  0001f	83 c0 20	 add	 eax, 32			; 00000020H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL7@Move@6
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN5@Move@6:
  0002a	5b		 pop	 ebx

; 2536 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUCARNAGE_ITEM@@PAU1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00@Z ENDP ; std::_Move<CARNAGE_ITEM *,CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z PROC ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@@Z ENDP ; std::_Dest_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z PROC ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z PROC ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@@Z ENDP ; std::_Dest_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@7
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@7:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@8
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@8:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@9
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@9:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@U3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME>
  0001e	83 c6 08	 add	 esi, 8
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 08	 add	 edi, 8
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov@2
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov@2:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@U3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA>
  0001e	83 c6 60	 add	 esi, 96			; 00000060H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 60	 add	 edi, 96			; 00000060H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov@2

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov@3
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov@3:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@U3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM>
  0001e	83 c6 20	 add	 esi, 32			; 00000020H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 20	 add	 edi, 32			; 00000020H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov@3

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov@3:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessStateClose@CCarnageEvent@@QAEXXZ	; CCarnageEvent::ProcessStateClose
EXTRN	__imp__GetLocalTime@4:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
;	COMDAT ?ProcessStateClose@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
_systime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?ProcessStateClose@CCarnageEvent@@QAEXXZ PROC		; CCarnageEvent::ProcessStateClose, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 356  : 	SYSTEMTIME systime;
; 357  : 	GetLocalTime(&systime);

  00011	8d 45 ec	 lea	 eax, DWORD PTR _systime$[ebp]
  00014	50		 push	 eax
  00015	8b f1		 mov	 esi, ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 358  : 
; 359  : 	for(std::vector<CARNAGE_TIME>::iterator it = this->m_TimeData.begin(); it != this->m_TimeData.end(); it++)

  0001d	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00020	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00023	3b c1		 cmp	 eax, ecx
  00025	74 37		 je	 SHORT $LN2@ProcessSta@4
  00027	66 8b 55 f6	 mov	 dx, WORD PTR _systime$[ebp+10]
  0002b	57		 push	 edi
  0002c	0f b7 7d f4	 movzx	 edi, WORD PTR _systime$[ebp+8]
  00030	53		 push	 ebx
$LL19@ProcessSta@4:

; 360  : 	{
; 361  : 		if(it->Hour == systime.wHour && it->Min == systime.wMinute)

  00031	39 38		 cmp	 DWORD PTR [eax], edi
  00033	75 08		 jne	 SHORT $LN3@ProcessSta@4
  00035	0f b7 da	 movzx	 ebx, dx
  00038	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0003b	74 18		 je	 SHORT $LN54@ProcessSta@4
$LN3@ProcessSta@4:

; 358  : 
; 359  : 	for(std::vector<CARNAGE_TIME>::iterator it = this->m_TimeData.begin(); it != this->m_TimeData.end(); it++)

  0003d	83 c0 08	 add	 eax, 8
  00040	3b c1		 cmp	 eax, ecx
  00042	75 ed		 jne	 SHORT $LL19@ProcessSta@4
  00044	5b		 pop	 ebx
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 364  : 
; 365  : 			return;
; 366  : 		}
; 367  : 	}
; 368  : }

  00047	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004a	33 cd		 xor	 ecx, ebp
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN54@ProcessSta@4:

; 362  : 		{
; 363  : 			this->SetStateWait();

  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?SetStateWait@CCarnageEvent@@QAEXXZ ; CCarnageEvent::SetStateWait
  0005c	5b		 pop	 ebx
  0005d	5f		 pop	 edi
$LN2@ProcessSta@4:

; 364  : 
; 365  : 			return;
; 366  : 		}
; 367  : 	}
; 368  : }

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00061	33 cd		 xor	 ecx, ebp
  00063	5e		 pop	 esi
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?ProcessStateClose@CCarnageEvent@@QAEXXZ ENDP		; CCarnageEvent::ProcessStateClose
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAXPAUCARNAGE_TIME@@0AAV?$allocator@UCARNAGE_TIME@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAXPAUCARNAGE_MONSTER_DATA@@0AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAXPAUCARNAGE_ITEM@@0AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z ; std::_Uninitialized_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z
_TEXT	SEGMENT
__Cat$218346 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z PROC ; std::_Uninitialized_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$218346[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@@Z ENDP ; std::_Uninitialized_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ; std::_Uninitialized_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$218356 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z PROC ; std::_Uninitialized_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$218356[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ; std::_Uninitialized_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z
_TEXT	SEGMENT
__Cat$218366 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z PROC ; std::_Uninitialized_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$218366[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@@Z ENDP ; std::_Uninitialized_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	?Run@CCarnageEvent@@QAEXXZ			; CCarnageEvent::Run
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
;	COMDAT ?Run@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?Run@CCarnageEvent@@QAEXXZ PROC				; CCarnageEvent::Run, COMDAT
; _this$ = ecx

; 332  : 	if(!this->m_Enable)

  00000	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00004	74 22		 je	 SHORT $LN5@Run

; 333  : 	{
; 334  : 		return;
; 335  : 	}
; 336  : 
; 337  : 	switch(this->m_EventStatus)

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	83 f8 03	 cmp	 eax, 3
  0000b	77 1b		 ja	 SHORT $LN5@Run
  0000d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@Run[eax*4]
$LN4@Run:

; 338  : 	{
; 339  : 	case eCARNAGE_STATUS_CLOSE:	
; 340  : 		this->ProcessStateClose();		

  00014	e9 00 00 00 00	 jmp	 ?ProcessStateClose@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateClose
$LN3@Run:

; 341  : 		break;
; 342  : 	case eCARNAGE_STATUS_WAIT:	
; 343  : 		this->ProcessStateWait();		

  00019	e9 00 00 00 00	 jmp	 ?ProcessStateWait@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateWait
$LN2@Run:

; 344  : 		break;
; 345  : 	case eCARNAGE_STATUS_START:	
; 346  : 		this->ProcessStateStart();		

  0001e	e9 00 00 00 00	 jmp	 ?ProcessStateStart@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateStart
$LN1@Run:

; 347  : 		break;
; 348  : 	case eCARNAGE_STATUS_END:	
; 349  : 		this->ProcessStateEnd();		

  00023	e9 00 00 00 00	 jmp	 ?ProcessStateEnd@CCarnageEvent@@QAEXXZ ; CCarnageEvent::ProcessStateEnd
$LN5@Run:

; 350  : 		break;
; 351  : 	}
; 352  : }

  00028	c3		 ret	 0
  00029	8d 49 00	 npad	 3
$LN11@Run:
  0002c	00 00 00 00	 DD	 $LN4@Run
  00030	00 00 00 00	 DD	 $LN3@Run
  00034	00 00 00 00	 DD	 $LN2@Run
  00038	00 00 00 00	 DD	 $LN1@Run
?Run@CCarnageEvent@@QAEXXZ ENDP				; CCarnageEvent::Run
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXPAUCARNAGE_TIME@@0@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXPAUCARNAGE_MONSTER_DATA@@0@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXPAUCARNAGE_ITEM@@0@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Umove<CARNAGE_TIME *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$218399 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Umove<CARNAGE_TIME *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$218399[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCARNAGE_TIME@@@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEPAUCARNAGE_TIME@@PAU2@00@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Umove<CARNAGE_TIME *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Umove<CARNAGE_MONSTER_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$218418 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Umove<CARNAGE_MONSTER_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$218418[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCARNAGE_MONSTER_DATA@@@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEPAUCARNAGE_MONSTER_DATA@@PAU2@00@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Umove<CARNAGE_MONSTER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Umove<CARNAGE_ITEM *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$218437 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Umove<CARNAGE_ITEM *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$218437[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCARNAGE_ITEM@@@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEPAUCARNAGE_ITEM@@PAU2@00@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Umove<CARNAGE_ITEM *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First_arg$[ebp]
  0000d	89 30		 mov	 DWORD PTR [eax], esi
  0000f	3b f2		 cmp	 esi, edx
  00011	74 26		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00013	57		 push	 edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	3b d7		 cmp	 edx, edi
  00019	74 1a		 je	 SHORT $LN30@erase
  0001b	53		 push	 ebx
  0001c	8d 64 24 00	 npad	 4
$LL32@erase:
  00020	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00022	89 1e		 mov	 DWORD PTR [esi], ebx
  00024	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  00027	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002a	83 c2 08	 add	 edx, 8
  0002d	83 c6 08	 add	 esi, 8
  00030	3b d7		 cmp	 edx, edi
  00032	75 ec		 jne	 SHORT $LL32@erase
  00034	5b		 pop	 ebx
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00035	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00038	5f		 pop	 edi
$LN1@erase:
  00039	5e		 pop	 esi

; 1212 : 			}
; 1213 : 		return (_First);
; 1214 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	89 1e		 mov	 DWORD PTR [esi], ebx
  00014	3b da		 cmp	 ebx, edx
  00016	74 27		 je	 SHORT $LN39@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 1d		 je	 SHORT $LN30@erase@2
  0001f	57		 push	 edi
$LL32@erase@2:
  00020	8b f2		 mov	 esi, edx
  00022	8b fb		 mov	 edi, ebx
  00024	83 c2 60	 add	 edx, 96			; 00000060H
  00027	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002c	83 c3 60	 add	 ebx, 96			; 00000060H
  0002f	f3 a5		 rep movsd
  00031	3b d0		 cmp	 edx, eax
  00033	75 eb		 jne	 SHORT $LL32@erase@2
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
$LN30@erase@2:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0003c	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN39@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1214 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	89 1e		 mov	 DWORD PTR [esi], ebx
  00014	3b da		 cmp	 ebx, edx
  00016	74 27		 je	 SHORT $LN39@erase@3

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 1d		 je	 SHORT $LN30@erase@3
  0001f	57		 push	 edi
$LL32@erase@3:
  00020	8b f2		 mov	 esi, edx
  00022	8b fb		 mov	 edi, ebx
  00024	83 c2 20	 add	 edx, 32			; 00000020H
  00027	b9 08 00 00 00	 mov	 ecx, 8
  0002c	83 c3 20	 add	 ebx, 32			; 00000020H
  0002f	f3 a5		 rep movsd
  00031	3b d0		 cmp	 edx, eax
  00033	75 eb		 jne	 SHORT $LL32@erase@3
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
$LN30@erase@3:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0003c	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN39@erase@3:

; 1212 : 			}
; 1213 : 		return (_First);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1214 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@@2@0@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$214593 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$218836 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 03	 sar	 ecx, 3
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 56		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCARNAGE_TIME@@@std@@QAEPAUCARNAGE_TIME@@I@Z ; std::allocator<CARNAGE_TIME>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$218836[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$214593[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_TIME@@PAU1@V?$allocator@UCARNAGE_TIME@@@std@@U1@@std@@YAPAUCARNAGE_TIME@@PAU1@00AAV?$allocator@UCARNAGE_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_TIME *,CARNAGE_TIME *,std::allocator<CARNAGE_TIME>,CARNAGE_TIME>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	2b f8		 sub	 edi, eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	c1 ff 03	 sar	 edi, 3

; 761  : 			if (this->_Myfirst != 0)

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00098	8d 14 fb	 lea	 edx, DWORD PTR [ebx+edi*8]
  0009b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009e	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$214593[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve
PUBLIC	?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$214636 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$218921 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb aa aa aa
	02		 cmp	 ebx, 44739242		; 02aaaaaaH
  00036	76 0a		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004c	f7 e9		 imul	 ecx
  0004e	c1 fa 04	 sar	 edx, 4
  00051	8b c2		 mov	 eax, edx
  00053	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00056	03 c2		 add	 eax, edx
  00058	3b c3		 cmp	 eax, ebx
  0005a	73 6f		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005c	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005f	53		 push	 ebx
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCARNAGE_MONSTER_DATA@@@std@@QAEPAUCARNAGE_MONSTER_DATA@@I@Z ; std::allocator<CARNAGE_MONSTER_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00067	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$218921[ebp]
  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006d	8b 16		 mov	 edx, DWORD PTR [esi]
  0006f	53		 push	 ebx
  00070	6a 00		 push	 0
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	89 45 ec	 mov	 DWORD PTR __Ptr$214636[ebp], eax
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00080	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_MONSTER_DATA@@PAU1@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@U1@@std@@YAPAUCARNAGE_MONSTER_DATA@@PAU1@00AAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_MONSTER_DATA *,CARNAGE_MONSTER_DATA *,std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00085	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00087	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008a	2b cb		 sub	 ecx, ebx
  0008c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00091	f7 e9		 imul	 ecx
  00093	c1 fa 04	 sar	 edx, 4
  00096	8b fa		 mov	 edi, edx
  00098	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	03 fa		 add	 edi, edx

; 761  : 			if (this->_Myfirst != 0)

  000a0	85 db		 test	 ebx, ebx
  000a2	74 09		 je	 SHORT $LN35@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN35@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000ad	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000b0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000b3	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$214636[ebp]
  000b6	c1 e1 05	 shl	 ecx, 5

; 770  : 			this->_Mylast = _Ptr + _Size;

  000b9	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  000bc	03 c8		 add	 ecx, eax
  000be	c1 e2 05	 shl	 edx, 5
  000c1	03 d0		 add	 edx, eax
  000c3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  000c6	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000c9	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000df	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$214636[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e8	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@2:
$LN41@reserve@2:
  000f4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve
PUBLIC	?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$214676 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$219006 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@3:
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 05	 sar	 ecx, 5
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 57		 jae	 SHORT $LN3@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCARNAGE_ITEM@@@std@@QAEPAUCARNAGE_ITEM@@I@Z ; std::allocator<CARNAGE_ITEM>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$219006[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$214676[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCARNAGE_ITEM@@PAU1@V?$allocator@UCARNAGE_ITEM@@@std@@U1@@std@@YAPAUCARNAGE_ITEM@@PAU1@00AAV?$allocator@UCARNAGE_ITEM@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CARNAGE_ITEM *,CARNAGE_ITEM *,std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	2b f8		 sub	 edi, eax

; 761  : 			if (this->_Myfirst != 0)

  00082	85 c0		 test	 eax, eax
  00084	74 09		 je	 SHORT $LN35@reserve@3

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	83 c4 04	 add	 esp, 4
$LN35@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  0008f	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00092	c1 e0 05	 shl	 eax, 5
  00095	03 c3		 add	 eax, ebx

; 770  : 			this->_Mylast = _Ptr + _Size;

  00097	83 e7 e0	 and	 edi, -32		; ffffffe0H
  0009a	03 fb		 add	 edi, ebx
  0009c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0009f	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a2	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve@3:

; 772  : 			}
; 773  : 		}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b8	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$214676[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c1	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@3:
$LN41@reserve@3:
  000cd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve
PUBLIC	??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::~vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear, COMDAT
; _this$ = ecx

; 1218 : 		erase(begin(), end());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00006	3b d6		 cmp	 edx, esi
  00008	74 1f		 je	 SHORT $LN19@clear
  0000a	8b c6		 mov	 eax, esi
  0000c	3b f6		 cmp	 esi, esi
  0000e	74 16		 je	 SHORT $LN48@clear
  00010	57		 push	 edi
$LL50@clear:
  00011	8b 38		 mov	 edi, DWORD PTR [eax]
  00013	89 3a		 mov	 DWORD PTR [edx], edi
  00015	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00018	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0001b	83 c0 08	 add	 eax, 8
  0001e	83 c2 08	 add	 edx, 8
  00021	3b c6		 cmp	 eax, esi
  00023	75 ec		 jne	 SHORT $LL50@clear
  00025	5f		 pop	 edi
$LN48@clear:
  00026	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN19@clear:
  00029	5e		 pop	 esi

; 1219 : 		}

  0002a	c3		 ret	 0
?clear@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXXZ ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@3
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@3:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::~vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	53		 push	 ebx
  00008	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 2c		 je	 SHORT $LN19@clear@2
  00011	8b c2		 mov	 eax, edx
  00013	3b d2		 cmp	 edx, edx
  00015	74 23		 je	 SHORT $LN48@clear@2
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL50@clear@2:
  00020	8b f0		 mov	 esi, eax
  00022	8b fb		 mov	 edi, ebx
  00024	83 c0 60	 add	 eax, 96			; 00000060H
  00027	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002c	83 c3 60	 add	 ebx, 96			; 00000060H
  0002f	f3 a5		 rep movsd
  00031	3b c2		 cmp	 eax, edx
  00033	75 eb		 jne	 SHORT $LL50@clear@2
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN48@clear@2:
  0003a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN19@clear@2:
  0003d	5b		 pop	 ebx

; 1219 : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@4
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@4:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAE@XZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::~vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	53		 push	 ebx
  00008	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 2c		 je	 SHORT $LN19@clear@3
  00011	8b c2		 mov	 eax, edx
  00013	3b d2		 cmp	 edx, edx
  00015	74 23		 je	 SHORT $LN48@clear@3
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL50@clear@3:
  00020	8b f0		 mov	 esi, eax
  00022	8b fb		 mov	 edi, ebx
  00024	83 c0 20	 add	 eax, 32			; 00000020H
  00027	b9 08 00 00 00	 mov	 ecx, 8
  0002c	83 c3 20	 add	 ebx, 32			; 00000020H
  0002f	f3 a5		 rep movsd
  00031	3b c2		 cmp	 eax, edx
  00033	75 eb		 jne	 SHORT $LL50@clear@3
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN48@clear@3:
  0003a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN19@clear@3:
  0003d	5b		 pop	 ebx

; 1219 : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00014	c1 f8 03	 sar	 eax, 3
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 03	 sar	 edx, 3
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 39		 mov	 edi, DWORD PTR [ecx]
  0000a	2b d7		 sub	 edx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 ea		 imul	 edx

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	c1 fa 04	 sar	 edx, 4
  00019	8b f2		 mov	 esi, edx
  0001b	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001e	03 f2		 add	 esi, edx
  00020	ba aa aa aa 02	 mov	 edx, 44739242		; 02aaaaaaH
  00025	2b d0		 sub	 edx, eax
  00027	3b d6		 cmp	 edx, esi
  00029	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00030	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	03 f0		 add	 esi, eax
  0003a	2b d7		 sub	 edx, edi
  0003c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00041	f7 ea		 imul	 edx
  00043	c1 fa 04	 sar	 edx, 4
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	3b f0		 cmp	 esi, eax
  0004f	76 21		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00051	8b d0		 mov	 edx, eax
  00053	d1 ea		 shr	 edx, 1
  00055	bf aa aa aa 02	 mov	 edi, 44739242		; 02aaaaaaH
  0005a	2b fa		 sub	 edi, edx
  0005c	3b f8		 cmp	 edi, eax
  0005e	73 04		 jae	 SHORT $LN23@Reserve@2
  00060	33 c0		 xor	 eax, eax
  00062	eb 02		 jmp	 SHORT $LN24@Reserve@2
$LN23@Reserve@2:
  00064	03 c2		 add	 eax, edx
$LN24@Reserve@2:
  00066	3b c6		 cmp	 eax, esi
  00068	73 02		 jae	 SHORT $LN20@Reserve@2
  0006a	8b c6		 mov	 eax, esi
$LN20@Reserve@2:
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::reserve
$LN1@Reserve@2:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi

; 1298 : 		}

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
$LN33@Reserve@2:
?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 07	 mov	 edi, 134217727		; 07ffffffH
  00014	c1 f8 05	 sar	 eax, 5
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@3:
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 05	 sar	 edx, 5
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve@3

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 07	 mov	 edi, 134217727		; 07ffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve@3
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve@3
$LN23@Reserve@3:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve@3:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve@3
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve@3:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::reserve
$LN1@Reserve@3:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve@3:
?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CCarnageEvent@@QAE@XZ			; CCarnageEvent::CCarnageEvent
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
;	COMDAT ??0CCarnageEvent@@QAE@XZ
_TEXT	SEGMENT
$T220644 = -4						; size = 4
$T220383 = -4						; size = 4
??0CCarnageEvent@@QAE@XZ PROC				; CCarnageEvent::CCarnageEvent, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	33 c9		 xor	 ecx, ecx
  00008	89 48 60	 mov	 DWORD PTR [eax+96], ecx
  0000b	89 48 64	 mov	 DWORD PTR [eax+100], ecx
  0000e	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  00011	89 48 70	 mov	 DWORD PTR [eax+112], ecx
  00014	89 48 74	 mov	 DWORD PTR [eax+116], ecx
  00017	89 48 78	 mov	 DWORD PTR [eax+120], ecx
  0001a	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx
  00020	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx
  00026	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx
  0002c	56		 push	 esi

; 18   : 	this->m_EventStatus = 0;

  0002d	89 08		 mov	 DWORD PTR [eax], ecx

; 19   : 	this->m_EventStage = 0;

  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 20   : 	this->m_TickCount = 0;

  00032	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 21   : 	this->m_TickRemain = 0;

  00035	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 22   : 	this->m_TickWait = 0;

  00038	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 23   : 
; 24   : 	this->m_Enable = 0;

  0003b	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 25   : 	this->m_MapNumber = 0;

  0003e	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 26   : 	this->m_MapX = 0;

  00041	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 27   : 	this->m_MapY = 0;

  00044	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 28   : 	this->m_OpenTime = 0;

  00047	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 29   : 	this->m_PlayTime = 0;

  0004a	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 30   : 	this->m_EndTime = 0;

  0004d	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 31   : 
; 32   : 	this->m_NpcClass = 0;

  00050	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 33   : 	this->m_NpcMap = 0;

  00053	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 34   : 	this->m_NpcX = 0;

  00056	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 35   : 	this->m_NpcY = 0;

  00059	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 36   : 
; 37   : 	this->m_TicketType = 0;

  0005c	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 38   : 	this->m_TicketIndex = 0;

  0005f	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 39   : 	this->m_TicketLevel = 0;

  00062	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 40   : 
; 41   : 	this->m_RewardItemCount = 0;

  00065	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 42   : 	this->m_RewardAncentRate = 0;

  00068	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 43   : 
; 44   : 	this->m_MonsterCount = 0;

  0006b	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 45   : 
; 46   : 	this->m_TimeData.clear();

  0006e	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  00071	8b 70 64	 mov	 esi, DWORD PTR [eax+100]
  00074	57		 push	 edi
  00075	3b d6		 cmp	 edx, esi
  00077	74 1e		 je	 SHORT $LN51@CCarnageEv
  00079	8b ce		 mov	 ecx, esi
  0007b	3b f6		 cmp	 esi, esi
  0007d	74 15		 je	 SHORT $LN80@CCarnageEv
  0007f	90		 npad	 1
$LL82@CCarnageEv:
  00080	8b 39		 mov	 edi, DWORD PTR [ecx]
  00082	89 3a		 mov	 DWORD PTR [edx], edi
  00084	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00087	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0008a	83 c1 08	 add	 ecx, 8
  0008d	83 c2 08	 add	 edx, 8
  00090	3b ce		 cmp	 ecx, esi
  00092	75 ec		 jne	 SHORT $LL82@CCarnageEv
$LN80@CCarnageEv:
  00094	89 50 64	 mov	 DWORD PTR [eax+100], edx
$LN51@CCarnageEv:

; 47   : 	this->m_MonsterData.clear();

  00097	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  0009a	53		 push	 ebx
  0009b	8b 58 74	 mov	 ebx, DWORD PTR [eax+116]
  0009e	3b cb		 cmp	 ecx, ebx
  000a0	74 2b		 je	 SHORT $LN105@CCarnageEv
  000a2	89 4d fc	 mov	 DWORD PTR $T220383[ebp], ecx
  000a5	8b d3		 mov	 edx, ebx
  000a7	3b db		 cmp	 ebx, ebx
  000a9	74 1c		 je	 SHORT $LN134@CCarnageEv
  000ab	eb 03 8d 49 00	 npad	 5
$LL204@CCarnageEv:
  000b0	8b 7d fc	 mov	 edi, DWORD PTR $T220383[ebp]
  000b3	83 45 fc 60	 add	 DWORD PTR $T220383[ebp], 96 ; 00000060H
  000b7	8b f2		 mov	 esi, edx
  000b9	83 c2 60	 add	 edx, 96			; 00000060H
  000bc	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000c1	f3 a5		 rep movsd
  000c3	3b d3		 cmp	 edx, ebx
  000c5	75 e9		 jne	 SHORT $LL204@CCarnageEv
$LN134@CCarnageEv:
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR $T220383[ebp]
  000ca	89 48 74	 mov	 DWORD PTR [eax+116], ecx
$LN105@CCarnageEv:

; 48   : 	this->m_ItemData.clear();

  000cd	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000d3	8b 98 84 00 00
	00		 mov	 ebx, DWORD PTR [eax+132]
  000d9	3b cb		 cmp	 ecx, ebx
  000db	74 29		 je	 SHORT $LN159@CCarnageEv
  000dd	89 4d fc	 mov	 DWORD PTR $T220644[ebp], ecx
  000e0	8b d3		 mov	 edx, ebx
  000e2	3b db		 cmp	 ebx, ebx
  000e4	74 17		 je	 SHORT $LN188@CCarnageEv
$LL203@CCarnageEv:
  000e6	8b 7d fc	 mov	 edi, DWORD PTR $T220644[ebp]
  000e9	83 45 fc 20	 add	 DWORD PTR $T220644[ebp], 32 ; 00000020H
  000ed	8b f2		 mov	 esi, edx
  000ef	83 c2 20	 add	 edx, 32			; 00000020H
  000f2	b9 08 00 00 00	 mov	 ecx, 8
  000f7	f3 a5		 rep movsd
  000f9	3b d3		 cmp	 edx, ebx
  000fb	75 e9		 jne	 SHORT $LL203@CCarnageEv
$LN188@CCarnageEv:
  000fd	8b 55 fc	 mov	 edx, DWORD PTR $T220644[ebp]
  00100	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
$LN159@CCarnageEv:

; 49   : 	
; 50   : 	for(int i = 0; i < CARNAGE_MONSTER_MAX; i++)

  00106	8d 88 94 00 00
	00		 lea	 ecx, DWORD PTR [eax+148]
  0010c	be f4 01 00 00	 mov	 esi, 500		; 000001f4H
  00111	83 ca ff	 or	 edx, -1
  00114	5b		 pop	 ebx
$LL3@CCarnageEv:

; 51   : 	{
; 52   : 		this->m_MonsterBase[i].Stage  = -1;

  00115	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 53   : 		this->m_MonsterBase[i].Type  = -1;

  00118	89 11		 mov	 DWORD PTR [ecx], edx

; 54   : 		this->m_MonsterBase[i].aIndex = -1;

  0011a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 55   : 		this->m_MonsterBase[i].Pos	 = -1;

  0011d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 56   : 		this->m_MonsterBase[i].Class  = -1;

  00120	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00123	83 c1 14	 add	 ecx, 20			; 00000014H
  00126	4e		 dec	 esi
  00127	75 ec		 jne	 SHORT $LL3@CCarnageEv
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi

; 57   : 	}
; 58   : }

  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
??0CCarnageEvent@@QAE@XZ ENDP				; CCarnageEvent::CCarnageEvent
_TEXT	ENDS
PUBLIC	??1CCarnageEvent@@QAE@XZ			; CCarnageEvent::~CCarnageEvent
; Function compile flags: /Ogtp
;	COMDAT ??1CCarnageEvent@@QAE@XZ
_TEXT	SEGMENT
??1CCarnageEvent@@QAE@XZ PROC				; CCarnageEvent::~CCarnageEvent, COMDAT
; _this$ = ecx

; 61   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 62   : }

  00003	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00009	57		 push	 edi
  0000a	33 ff		 xor	 edi, edi
  0000c	3b c7		 cmp	 eax, edi
  0000e	74 09		 je	 SHORT $LN13@CCarnageEv@2
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN13@CCarnageEv@2:
  00019	89 be 80 00 00
	00		 mov	 DWORD PTR [esi+128], edi
  0001f	89 be 84 00 00
	00		 mov	 DWORD PTR [esi+132], edi
  00025	89 be 88 00 00
	00		 mov	 DWORD PTR [esi+136], edi
  0002b	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  0002e	3b c7		 cmp	 eax, edi
  00030	74 09		 je	 SHORT $LN24@CCarnageEv@2
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00038	83 c4 04	 add	 esp, 4
$LN24@CCarnageEv@2:
  0003b	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  0003e	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  00041	89 7e 78	 mov	 DWORD PTR [esi+120], edi
  00044	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00047	3b c7		 cmp	 eax, edi
  00049	74 09		 je	 SHORT $LN35@CCarnageEv@2
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00051	83 c4 04	 add	 esp, 4
$LN35@CCarnageEv@2:
  00054	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  00057	89 7e 64	 mov	 DWORD PTR [esi+100], edi
  0005a	89 7e 68	 mov	 DWORD PTR [esi+104], edi
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
??1CCarnageEvent@@QAE@XZ ENDP				; CCarnageEvent::~CCarnageEvent
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z PROC ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_TIME@@@std@@UCARNAGE_TIME@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_TIME@@@0@PAUCARNAGE_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_TIME>,CARNAGE_TIME,CARNAGE_TIME const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z ENDP ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z PROC ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4a		 jae	 SHORT $LN4@push_back@2
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 44		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 04	 sar	 edx, 4
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00038	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003b	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0003e	c1 e0 05	 shl	 eax, 5
  00041	03 06		 add	 eax, DWORD PTR [esi]
  00043	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00051	83 46 04 60	 add	 DWORD PTR [esi+4], 96	; 00000060H
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN4@push_back@2:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0005b	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005e	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  00060	6a 01		 push	 1
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00069	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0006c	57		 push	 edi
  0006d	50		 push	 eax
  0006e	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@UCARNAGE_MONSTER_DATA@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_MONSTER_DATA@@@0@PAUCARNAGE_MONSTER_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_MONSTER_DATA>,CARNAGE_MONSTER_DATA,CARNAGE_MONSTER_DATA const &>
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0007a	83 46 04 60	 add	 DWORD PTR [esi+4], 96	; 00000060H
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z ENDP ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z PROC ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 36		 jae	 SHORT $LN4@push_back@3
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 30		 ja	 SHORT $LN4@push_back@3

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back@3

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
$LN3@push_back@3:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 e7 e0	 and	 edi, -32		; ffffffe0H
  0002d	03 3e		 add	 edi, DWORD PTR [esi]
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@AAU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@AAU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0003d	83 46 04 20	 add	 DWORD PTR [esi+4], 32	; 00000020H
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN4@push_back@3:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00047	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004a	75 09		 jne	 SHORT $LN1@push_back@3

; 991  : 				_Reserve(1);

  0004c	6a 01		 push	 1
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@IAEXI@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::_Reserve
$LN1@push_back@3:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00055	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00058	57		 push	 edi
  00059	52		 push	 edx
  0005a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCARNAGE_ITEM@@@std@@UCARNAGE_ITEM@@ABU3@@std@@YAXAAV?$allocator@UCARNAGE_ITEM@@@0@PAUCARNAGE_ITEM@@ABU2@@Z ; std::_Cons_val<std::allocator<CARNAGE_ITEM>,CARNAGE_ITEM,CARNAGE_ITEM const &>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00066	83 46 04 20	 add	 DWORD PTR [esi+4], 32	; 00000020H
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z ENDP ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	_filename$GSCopy$
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CCarnageEvent@@QAEXPAD@Z			; CCarnageEvent::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@CCarnageEvent@@QAEXPAD@Z
_TEXT	SEGMENT
_List$213571 = -148					; size = 8
_iType$ = -140						; size = 4
_filename$GSCopy$ = -136				; size = 4
_List$213589 = -132					; size = 96
_List$213577 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Read@CCarnageEvent@@QAEXPAD@Z PROC			; CCarnageEvent::Read, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]

; 116  : 	SMDFile = fopen(filename, "r");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001d	56		 push	 esi
  0001e	8b d9		 mov	 ebx, ecx

; 121  : 		return;
; 122  : 	}
; 123  : 
; 124  : 	SMDToken Token;
; 125  : 
; 126  : 	int iType = -1;
; 127  : 
; 128  : 	while(true)
; 129  : 	{
; 130  : 		Token = GetToken();

  00020	89 b5 78 ff ff
	ff		 mov	 DWORD PTR _filename$GSCopy$[ebp], esi
  00026	e8 00 00 00 00	 call	 _fopen
  0002b	83 c4 08	 add	 esp, 8
  0002e	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  00033	85 c0		 test	 eax, eax
  00035	75 2c		 jne	 SHORT $LN28@Read

; 117  : 
; 118  : 	if(SMDFile == NULL)
; 119  : 	{
; 120  : 		LogAdd(lMsg.Get(MSGGET(1, 198)), filename);

  00037	56		 push	 esi
  00038	68 c6 01 00 00	 push	 454			; 000001c6H
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00042	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004e	83 c4 08	 add	 esp, 8
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 328  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN28@Read:

; 121  : 		return;
; 122  : 	}
; 123  : 
; 124  : 	SMDToken Token;
; 125  : 
; 126  : 	int iType = -1;
; 127  : 
; 128  : 	while(true)
; 129  : 	{
; 130  : 		Token = GetToken();

  00063	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 
; 132  :         if(Token == END)

  00068	83 f8 02	 cmp	 eax, 2
  0006b	0f 84 f5 04 00
	00		 je	 $LN41@Read
  00071	57		 push	 edi
$LL27@Read:

; 133  : 		{
; 134  :             break;
; 135  : 		}
; 136  : 
; 137  : 		iType = (int)TokenNumber;

  00072	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00078	e8 00 00 00 00	 call	 __ftol2_sse
  0007d	8b f0		 mov	 esi, eax
  0007f	89 b5 74 ff ff
	ff		 mov	 DWORD PTR _iType$[ebp], esi

; 138  : 
; 139  : 		if(iType < 0 || iType > 6)

  00085	83 fe 06	 cmp	 esi, 6
  00088	0f 87 d7 04 00
	00		 ja	 $LN75@Read
  0008e	8b ff		 npad	 2
$LL22@Read:

; 140  : 		{
; 141  : 			break;
; 142  : 		}
; 143  : 
; 144  : 		while(true)
; 145  : 		{
; 146  : 			if(iType == 0)

  00090	85 f6		 test	 esi, esi
  00092	0f 85 c1 00 00
	00		 jne	 $LN20@Read

; 147  : 			{
; 148  : 				Token = GetToken();

  00098	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 149  : 
; 150  : 				if(!strcmp("end", TokenString))

  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000a2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL43@Read:
  000a7	8a 10		 mov	 dl, BYTE PTR [eax]
  000a9	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000ab	75 1a		 jne	 SHORT $LN44@Read
  000ad	84 d2		 test	 dl, dl
  000af	74 12		 je	 SHORT $LN72@Read
  000b1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000b4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000b7	75 0e		 jne	 SHORT $LN44@Read
  000b9	83 c0 02	 add	 eax, 2
  000bc	83 c1 02	 add	 ecx, 2
  000bf	84 d2		 test	 dl, dl
  000c1	75 e4		 jne	 SHORT $LL43@Read
$LN72@Read:
  000c3	33 c0		 xor	 eax, eax
  000c5	eb 05		 jmp	 SHORT $LN46@Read
$LN44@Read:
  000c7	1b c0		 sbb	 eax, eax
  000c9	83 d8 ff	 sbb	 eax, -1
$LN46@Read:
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 83 04 00
	00		 je	 $LN74@Read

; 151  : 				{
; 152  : 					break;
; 153  : 				}
; 154  : 
; 155  : 				this->m_Enable = (int)TokenNumber;

  000d4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000da	e8 00 00 00 00	 call	 __ftol2_sse
  000df	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 156  : 
; 157  : 				Token = GetToken();

  000e2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 158  : 				this->m_MapNumber = (int)TokenNumber;

  000e7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ed	e8 00 00 00 00	 call	 __ftol2_sse
  000f2	89 43 18	 mov	 DWORD PTR [ebx+24], eax

; 159  : 
; 160  : 				Token = GetToken();

  000f5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 161  : 				this->m_MapX = (int)TokenNumber;

  000fa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00100	e8 00 00 00 00	 call	 __ftol2_sse
  00105	89 43 1c	 mov	 DWORD PTR [ebx+28], eax

; 162  : 
; 163  : 				Token = GetToken();

  00108	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 164  : 				this->m_MapY = (int)TokenNumber;

  0010d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00113	e8 00 00 00 00	 call	 __ftol2_sse
  00118	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 165  : 
; 166  : 				Token = GetToken();

  0011b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 167  : 				this->m_OpenTime = (int)TokenNumber;

  00120	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00126	e8 00 00 00 00	 call	 __ftol2_sse
  0012b	89 43 24	 mov	 DWORD PTR [ebx+36], eax

; 168  : 
; 169  : 				Token = GetToken();

  0012e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 170  : 				this->m_PlayTime = (int)TokenNumber;

  00133	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00139	e8 00 00 00 00	 call	 __ftol2_sse
  0013e	89 43 28	 mov	 DWORD PTR [ebx+40], eax

; 171  : 
; 172  : 				Token = GetToken();

  00141	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 173  : 				this->m_EndTime = (int)TokenNumber;

  00146	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0014c	e8 00 00 00 00	 call	 __ftol2_sse
  00151	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
  00154	e9 37 ff ff ff	 jmp	 $LL22@Read
$LN20@Read:

; 174  : 			}
; 175  : 			else if(iType == 1)

  00159	83 fe 01	 cmp	 esi, 1
  0015c	0f 85 88 00 00
	00		 jne	 $LN17@Read

; 176  : 			{
; 177  : 				Token = GetToken();

  00162	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 178  : 
; 179  : 				if(!strcmp("end", TokenString))

  00167	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0016c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL47@Read:
  00171	8a 10		 mov	 dl, BYTE PTR [eax]
  00173	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00175	75 1a		 jne	 SHORT $LN48@Read
  00177	84 d2		 test	 dl, dl
  00179	74 12		 je	 SHORT $LN73@Read
  0017b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0017e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00181	75 0e		 jne	 SHORT $LN48@Read
  00183	83 c0 02	 add	 eax, 2
  00186	83 c1 02	 add	 ecx, 2
  00189	84 d2		 test	 dl, dl
  0018b	75 e4		 jne	 SHORT $LL47@Read
$LN73@Read:
  0018d	33 c0		 xor	 eax, eax
  0018f	eb 05		 jmp	 SHORT $LN50@Read
$LN48@Read:
  00191	1b c0		 sbb	 eax, eax
  00193	83 d8 ff	 sbb	 eax, -1
$LN50@Read:
  00196	85 c0		 test	 eax, eax
  00198	0f 84 b9 03 00
	00		 je	 $LN74@Read

; 180  : 				{
; 181  : 					break;
; 182  : 				}
; 183  : 
; 184  : 				this->m_NpcClass = (int)TokenNumber;

  0019e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a4	e8 00 00 00 00	 call	 __ftol2_sse
  001a9	89 43 30	 mov	 DWORD PTR [ebx+48], eax

; 185  : 
; 186  : 				Token = GetToken();

  001ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 187  : 				this->m_NpcMap = (int)TokenNumber;

  001b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b7	e8 00 00 00 00	 call	 __ftol2_sse
  001bc	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 188  : 
; 189  : 				Token = GetToken();

  001bf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 190  : 				this->m_NpcX = (int)TokenNumber;

  001c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ca	e8 00 00 00 00	 call	 __ftol2_sse
  001cf	89 43 38	 mov	 DWORD PTR [ebx+56], eax

; 191  : 
; 192  : 				Token = GetToken();

  001d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 193  : 				this->m_NpcY = (int)TokenNumber;

  001d7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001dd	e8 00 00 00 00	 call	 __ftol2_sse
  001e2	89 43 3c	 mov	 DWORD PTR [ebx+60], eax
  001e5	e9 a6 fe ff ff	 jmp	 $LL22@Read
$LN17@Read:

; 194  : 			}
; 195  : 			else if(iType == 2)

  001ea	83 fe 02	 cmp	 esi, 2
  001ed	0f 85 88 00 00
	00		 jne	 $LN14@Read

; 196  : 			{
; 197  : 				Token = GetToken();

  001f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 198  : 
; 199  : 				if(!strcmp("end", TokenString))

  001f8	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001fd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL51@Read:
  00202	8a 10		 mov	 dl, BYTE PTR [eax]
  00204	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00206	75 1a		 jne	 SHORT $LN52@Read
  00208	84 d2		 test	 dl, dl
  0020a	74 12		 je	 SHORT $LN53@Read
  0020c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0020f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00212	75 0e		 jne	 SHORT $LN52@Read
  00214	83 c0 02	 add	 eax, 2
  00217	83 c1 02	 add	 ecx, 2
  0021a	84 d2		 test	 dl, dl
  0021c	75 e4		 jne	 SHORT $LL51@Read
$LN53@Read:
  0021e	33 c0		 xor	 eax, eax
  00220	eb 05		 jmp	 SHORT $LN54@Read
$LN52@Read:
  00222	1b c0		 sbb	 eax, eax
  00224	83 d8 ff	 sbb	 eax, -1
$LN54@Read:
  00227	85 c0		 test	 eax, eax
  00229	0f 84 28 03 00
	00		 je	 $LN74@Read

; 200  : 				{
; 201  : 					break;
; 202  : 				}
; 203  : 
; 204  : 				this->m_TicketActive = (int)TokenNumber;

  0022f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00235	e8 00 00 00 00	 call	 __ftol2_sse
  0023a	89 43 40	 mov	 DWORD PTR [ebx+64], eax

; 205  : 
; 206  : 				Token = GetToken();

  0023d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 207  : 				this->m_TicketType = (int)TokenNumber;

  00242	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00248	e8 00 00 00 00	 call	 __ftol2_sse
  0024d	89 43 44	 mov	 DWORD PTR [ebx+68], eax

; 208  : 
; 209  : 				Token = GetToken();

  00250	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 210  : 				this->m_TicketIndex = (int)TokenNumber;

  00255	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0025b	e8 00 00 00 00	 call	 __ftol2_sse
  00260	89 43 48	 mov	 DWORD PTR [ebx+72], eax

; 211  : 
; 212  : 				Token = GetToken();

  00263	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 213  : 				this->m_TicketLevel = (int)TokenNumber;

  00268	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026e	e8 00 00 00 00	 call	 __ftol2_sse
  00273	89 43 4c	 mov	 DWORD PTR [ebx+76], eax
  00276	e9 15 fe ff ff	 jmp	 $LL22@Read
$LN14@Read:

; 214  : 			}
; 215  : 			else if(iType == 3)

  0027b	83 fe 03	 cmp	 esi, 3
  0027e	75 63		 jne	 SHORT $LN11@Read

; 216  : 			{
; 217  : 				Token = GetToken();

  00280	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 218  : 
; 219  : 				if(!strcmp("end", TokenString))

  00285	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0028a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0028f	90		 npad	 1
$LL55@Read:
  00290	8a 10		 mov	 dl, BYTE PTR [eax]
  00292	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00294	75 1a		 jne	 SHORT $LN56@Read
  00296	84 d2		 test	 dl, dl
  00298	74 12		 je	 SHORT $LN57@Read
  0029a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0029d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002a0	75 0e		 jne	 SHORT $LN56@Read
  002a2	83 c0 02	 add	 eax, 2
  002a5	83 c1 02	 add	 ecx, 2
  002a8	84 d2		 test	 dl, dl
  002aa	75 e4		 jne	 SHORT $LL55@Read
$LN57@Read:
  002ac	33 c0		 xor	 eax, eax
  002ae	eb 05		 jmp	 SHORT $LN58@Read
$LN56@Read:
  002b0	1b c0		 sbb	 eax, eax
  002b2	83 d8 ff	 sbb	 eax, -1
$LN58@Read:
  002b5	85 c0		 test	 eax, eax
  002b7	0f 84 9a 02 00
	00		 je	 $LN74@Read

; 220  : 				{
; 221  : 					break;
; 222  : 				}
; 223  : 
; 224  : 				this->m_RewardItemCount = (int)TokenNumber;

  002bd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c3	e8 00 00 00 00	 call	 __ftol2_sse
  002c8	89 43 50	 mov	 DWORD PTR [ebx+80], eax

; 225  : 
; 226  : 				Token = GetToken();

  002cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 227  : 				this->m_RewardAncentRate = (int)TokenNumber;

  002d0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002d6	e8 00 00 00 00	 call	 __ftol2_sse
  002db	89 43 54	 mov	 DWORD PTR [ebx+84], eax
  002de	e9 ad fd ff ff	 jmp	 $LL22@Read
$LN11@Read:

; 228  : 			}
; 229  : 			else if(iType == 4)

  002e3	83 fe 04	 cmp	 esi, 4
  002e6	75 77		 jne	 SHORT $LN8@Read

; 230  : 			{
; 231  : 				Token = GetToken();

  002e8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 232  : 
; 233  : 				if(!strcmp("end", TokenString))

  002ed	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  002f2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL59@Read:
  002f7	8a 10		 mov	 dl, BYTE PTR [eax]
  002f9	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002fb	75 1a		 jne	 SHORT $LN60@Read
  002fd	84 d2		 test	 dl, dl
  002ff	74 12		 je	 SHORT $LN61@Read
  00301	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00304	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00307	75 0e		 jne	 SHORT $LN60@Read
  00309	83 c0 02	 add	 eax, 2
  0030c	83 c1 02	 add	 ecx, 2
  0030f	84 d2		 test	 dl, dl
  00311	75 e4		 jne	 SHORT $LL59@Read
$LN61@Read:
  00313	33 c0		 xor	 eax, eax
  00315	eb 05		 jmp	 SHORT $LN62@Read
$LN60@Read:
  00317	1b c0		 sbb	 eax, eax
  00319	83 d8 ff	 sbb	 eax, -1
$LN62@Read:
  0031c	85 c0		 test	 eax, eax
  0031e	0f 84 33 02 00
	00		 je	 $LN74@Read

; 234  : 				{
; 235  : 					break;
; 236  : 				}
; 237  : 
; 238  : 				CARNAGE_TIME List;
; 239  : 
; 240  : 				List.Hour = (int)TokenNumber;

  00324	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0032a	e8 00 00 00 00	 call	 __ftol2_sse
  0032f	89 85 6c ff ff
	ff		 mov	 DWORD PTR _List$213571[ebp], eax

; 241  : 
; 242  : 				Token = GetToken();

  00335	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 243  : 				List.Min = (int)TokenNumber;

  0033a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00340	e8 00 00 00 00	 call	 __ftol2_sse
  00345	89 85 70 ff ff
	ff		 mov	 DWORD PTR _List$213571[ebp+4], eax

; 244  : 
; 245  : 				this->m_TimeData.push_back(List);

  0034b	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _List$213571[ebp]
  00351	50		 push	 eax
  00352	8d 4b 60	 lea	 ecx, DWORD PTR [ebx+96]
  00355	e8 00 00 00 00	 call	 ?push_back@?$vector@UCARNAGE_TIME@@V?$allocator@UCARNAGE_TIME@@@std@@@std@@QAEXABUCARNAGE_TIME@@@Z ; std::vector<CARNAGE_TIME,std::allocator<CARNAGE_TIME> >::push_back
  0035a	e9 31 fd ff ff	 jmp	 $LL22@Read
$LN8@Read:

; 246  : 			}
; 247  : 			else if(iType == 5)

  0035f	83 fe 05	 cmp	 esi, 5
  00362	0f 85 e3 00 00
	00		 jne	 $LN5@Read

; 248  : 			{
; 249  : 				Token = GetToken();

  00368	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 250  : 
; 251  : 				if(!strcmp("end", TokenString))

  0036d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00372	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL63@Read:
  00377	8a 10		 mov	 dl, BYTE PTR [eax]
  00379	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0037b	75 1a		 jne	 SHORT $LN64@Read
  0037d	84 d2		 test	 dl, dl
  0037f	74 12		 je	 SHORT $LN65@Read
  00381	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00384	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00387	75 0e		 jne	 SHORT $LN64@Read
  00389	83 c0 02	 add	 eax, 2
  0038c	83 c1 02	 add	 ecx, 2
  0038f	84 d2		 test	 dl, dl
  00391	75 e4		 jne	 SHORT $LL63@Read
$LN65@Read:
  00393	33 c0		 xor	 eax, eax
  00395	eb 05		 jmp	 SHORT $LN66@Read
$LN64@Read:
  00397	1b c0		 sbb	 eax, eax
  00399	83 d8 ff	 sbb	 eax, -1
$LN66@Read:
  0039c	85 c0		 test	 eax, eax
  0039e	0f 84 b3 01 00
	00		 je	 $LN74@Read

; 252  : 				{
; 253  : 					break;
; 254  : 				}
; 255  : 
; 256  : 				CARNAGE_ITEM List;
; 257  : 
; 258  : 				List.Type = (int)TokenNumber;

  003a4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003aa	e8 00 00 00 00	 call	 __ftol2_sse
  003af	89 45 dc	 mov	 DWORD PTR _List$213577[ebp], eax

; 259  : 
; 260  : 				Token = GetToken();

  003b2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 261  : 				List.Index = (int)TokenNumber;

  003b7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003bd	e8 00 00 00 00	 call	 __ftol2_sse
  003c2	89 45 e0	 mov	 DWORD PTR _List$213577[ebp+4], eax

; 262  : 
; 263  : 				Token = GetToken();

  003c5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 264  : 				List.MinLevel = (int)TokenNumber;

  003ca	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003d0	e8 00 00 00 00	 call	 __ftol2_sse
  003d5	89 45 e4	 mov	 DWORD PTR _List$213577[ebp+8], eax

; 265  : 
; 266  : 				Token = GetToken();

  003d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 267  : 				List.MaxLevel = (int)TokenNumber;

  003dd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003e3	e8 00 00 00 00	 call	 __ftol2_sse
  003e8	89 45 e8	 mov	 DWORD PTR _List$213577[ebp+12], eax

; 268  : 
; 269  : 				Token = GetToken();

  003eb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 270  : 				List.Skill = (int)TokenNumber;

  003f0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003f6	e8 00 00 00 00	 call	 __ftol2_sse
  003fb	89 45 ec	 mov	 DWORD PTR _List$213577[ebp+16], eax

; 271  : 
; 272  : 				Token = GetToken();

  003fe	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 273  : 				List.Luck = (int)TokenNumber;

  00403	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00409	e8 00 00 00 00	 call	 __ftol2_sse
  0040e	89 45 f0	 mov	 DWORD PTR _List$213577[ebp+20], eax

; 274  : 
; 275  : 				Token = GetToken();

  00411	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 276  : 				List.Add = (int)TokenNumber;

  00416	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0041c	e8 00 00 00 00	 call	 __ftol2_sse
  00421	89 45 f4	 mov	 DWORD PTR _List$213577[ebp+24], eax

; 277  : 
; 278  : 				Token = GetToken();

  00424	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 279  : 				List.Exc = (int)TokenNumber;

  00429	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0042f	e8 00 00 00 00	 call	 __ftol2_sse

; 280  : 
; 281  : 				this->m_ItemData.push_back(List);

  00434	8d 4d dc	 lea	 ecx, DWORD PTR _List$213577[ebp]
  00437	51		 push	 ecx
  00438	8d 8b 80 00 00
	00		 lea	 ecx, DWORD PTR [ebx+128]
  0043e	89 45 f8	 mov	 DWORD PTR _List$213577[ebp+28], eax
  00441	e8 00 00 00 00	 call	 ?push_back@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXABUCARNAGE_ITEM@@@Z ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::push_back
  00446	e9 45 fc ff ff	 jmp	 $LL22@Read
$LN5@Read:

; 282  : 			}
; 283  : 			else if(iType == 6)

  0044b	83 fe 06	 cmp	 esi, 6
  0044e	0f 85 3c fc ff
	ff		 jne	 $LL22@Read

; 284  : 			{
; 285  : 				Token = GetToken();

  00454	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 286  : 
; 287  : 				if(!strcmp("end", TokenString))

  00459	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0045e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL67@Read:
  00463	8a 10		 mov	 dl, BYTE PTR [eax]
  00465	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00467	75 1a		 jne	 SHORT $LN68@Read
  00469	84 d2		 test	 dl, dl
  0046b	74 12		 je	 SHORT $LN69@Read
  0046d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00470	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00473	75 0e		 jne	 SHORT $LN68@Read
  00475	83 c0 02	 add	 eax, 2
  00478	83 c1 02	 add	 ecx, 2
  0047b	84 d2		 test	 dl, dl
  0047d	75 e4		 jne	 SHORT $LL67@Read
$LN69@Read:
  0047f	33 c0		 xor	 eax, eax
  00481	eb 05		 jmp	 SHORT $LN70@Read
$LN68@Read:
  00483	1b c0		 sbb	 eax, eax
  00485	83 d8 ff	 sbb	 eax, -1
$LN70@Read:
  00488	85 c0		 test	 eax, eax
  0048a	0f 84 c7 00 00
	00		 je	 $LN74@Read

; 288  : 				{
; 289  : 					break;
; 290  : 				}
; 291  : 
; 292  : 				CARNAGE_MONSTER_DATA List;
; 293  : 
; 294  : 				List.MobClass = (int)TokenNumber;

  00490	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00496	e8 00 00 00 00	 call	 __ftol2_sse
  0049b	89 85 7c ff ff
	ff		 mov	 DWORD PTR _List$213589[ebp], eax

; 295  : 
; 296  : 				Token = GetToken();

  004a1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 297  : 				List.MobX = (int)TokenNumber;

  004a6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004ac	e8 00 00 00 00	 call	 __ftol2_sse
  004b1	89 45 80	 mov	 DWORD PTR _List$213589[ebp+4], eax

; 298  : 
; 299  : 				Token = GetToken();

  004b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 300  : 				List.MobY = (int)TokenNumber;

  004b9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004bf	e8 00 00 00 00	 call	 __ftol2_sse
  004c4	89 45 84	 mov	 DWORD PTR _List$213589[ebp+8], eax

; 301  : 
; 302  : 				Token = GetToken();

  004c7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 303  : 				List.MobCount = (int)TokenNumber;

  004cc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004d2	e8 00 00 00 00	 call	 __ftol2_sse
  004d7	89 45 88	 mov	 DWORD PTR _List$213589[ebp+12], eax

; 304  : 
; 305  : 				Token = GetToken();

  004da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 306  : 				List.BossActive = (int)TokenNumber;

  004df	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004e5	e8 00 00 00 00	 call	 __ftol2_sse
  004ea	89 45 8c	 mov	 DWORD PTR _List$213589[ebp+16], eax

; 307  : 
; 308  : 				Token = GetToken();

  004ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 309  : 				List.BossClass = (int)TokenNumber;

  004f2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004f8	e8 00 00 00 00	 call	 __ftol2_sse
  004fd	89 45 90	 mov	 DWORD PTR _List$213589[ebp+20], eax

; 310  : 
; 311  : 				Token = GetToken();

  00500	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 312  : 				List.BossX = (int)TokenNumber;

  00505	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0050b	e8 00 00 00 00	 call	 __ftol2_sse
  00510	89 45 94	 mov	 DWORD PTR _List$213589[ebp+24], eax

; 313  : 
; 314  : 				Token = GetToken();

  00513	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 315  : 				List.BossY = (int)TokenNumber;

  00518	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0051e	e8 00 00 00 00	 call	 __ftol2_sse
  00523	89 45 98	 mov	 DWORD PTR _List$213589[ebp+28], eax

; 316  : 
; 317  : 				Token = GetToken();

  00526	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 318  : 				memcpy(List.BossDie, TokenString, 64-1);

  0052b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00530	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00535	8d 7d 9c	 lea	 edi, DWORD PTR _List$213589[ebp+32]
  00538	f3 a5		 rep movsd
  0053a	66 a5		 movsw

; 319  : 
; 320  : 				this->m_MonsterData.push_back(List);

  0053c	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _List$213589[ebp]
  00542	52		 push	 edx
  00543	8d 4b 70	 lea	 ecx, DWORD PTR [ebx+112]
  00546	a4		 movsb
  00547	e8 00 00 00 00	 call	 ?push_back@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXABUCARNAGE_MONSTER_DATA@@@Z ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::push_back

; 321  : 			}
; 322  : 		}

  0054c	8b b5 74 ff ff
	ff		 mov	 esi, DWORD PTR _iType$[ebp]
  00552	e9 39 fb ff ff	 jmp	 $LL22@Read
$LN74@Read:

; 121  : 		return;
; 122  : 	}
; 123  : 
; 124  : 	SMDToken Token;
; 125  : 
; 126  : 	int iType = -1;
; 127  : 
; 128  : 	while(true)
; 129  : 	{
; 130  : 		Token = GetToken();

  00557	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 
; 132  :         if(Token == END)

  0055c	83 f8 02	 cmp	 eax, 2
  0055f	0f 85 0d fb ff
	ff		 jne	 $LL27@Read
$LN75@Read:
  00565	5f		 pop	 edi
$LN41@Read:

; 323  : 	}
; 324  : 
; 325  : 	fclose(SMDFile);

  00566	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 _fclose

; 326  : 
; 327  : 	LogAdd("%s file load!", filename);

  00571	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _filename$GSCopy$[ebp]
  00577	51		 push	 ecx
  00578	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  0057d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 328  : }

  00583	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00586	83 c4 0c	 add	 esp, 12			; 0000000cH
  00589	5e		 pop	 esi
  0058a	33 cd		 xor	 ecx, ebp
  0058c	5b		 pop	 ebx
  0058d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00592	8b e5		 mov	 esp, ebp
  00594	5d		 pop	 ebp
  00595	c2 04 00	 ret	 4
?Read@CCarnageEvent@@QAEXPAD@Z ENDP			; CCarnageEvent::Read
_TEXT	ENDS
PUBLIC	??_C@_0BP@NHEGEANL@ZtData?2Events?2CarnageEvent?4dat?$AA@ ; `string'
PUBLIC	?Load@CCarnageEvent@@QAEXXZ			; CCarnageEvent::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0BP@NHEGEANL@ZtData?2Events?2CarnageEvent?4dat?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
CONST	SEGMENT
??_C@_0BP@NHEGEANL@ZtData?2Events?2CarnageEvent?4dat?$AA@ DB 'ZtData\Even'
	DB	'ts\CarnageEvent.dat', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\carnageevent.cpp
CONST	ENDS
;	COMDAT ?Load@CCarnageEvent@@QAEXXZ
_TEXT	SEGMENT
?Load@CCarnageEvent@@QAEXXZ PROC			; CCarnageEvent::Load, COMDAT
; _this$ = ecx

; 65   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 66   : 	if(this->m_EventStatus == eCARNAGE_STATUS_WAIT || this->m_EventStatus == eCARNAGE_STATUS_START)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	83 f8 01	 cmp	 eax, 1
  00008	0f 84 1b 01 00
	00		 je	 $LN3@Load
  0000e	83 f8 02	 cmp	 eax, 2
  00011	0f 84 12 01 00
	00		 je	 $LN3@Load

; 67   : 	{
; 68   : 		return;
; 69   : 	}
; 70   : 
; 71   : 	this->m_Enable = 0;

  00017	57		 push	 edi
  00018	33 ff		 xor	 edi, edi

; 72   : 
; 73   : 	if(!g_ZtLicense.CheckUser(eZtUB::Local)  &&
; 74   : 	   !g_ZtLicense.CheckUser(eZtUB::Gredy)  &&
; 75   : 	   !g_ZtLicense.CheckUser(eZtUB::Gredy2) &&
; 76   : 	   !g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 77   : 	   !g_ZtLicense.CheckUser(eZtUB::Artem) &&
; 78   : 	   !g_ZtLicense.CheckUser(eZtUB::Artem2) &&
; 79   : 	   !g_ZtLicense.CheckUser(eZtUB::ulasevich) &&
; 80   : 	   !g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  0001a	57		 push	 edi
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00020	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00023	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00028	84 c0		 test	 al, al
  0002a	75 7e		 jne	 SHORT $LN1@Load
  0002c	6a 20		 push	 32			; 00000020H
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00033	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00038	84 c0		 test	 al, al
  0003a	75 6e		 jne	 SHORT $LN1@Load
  0003c	6a 22		 push	 34			; 00000022H
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00043	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00048	84 c0		 test	 al, al
  0004a	75 5e		 jne	 SHORT $LN1@Load
  0004c	6a 21		 push	 33			; 00000021H
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00053	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00058	84 c0		 test	 al, al
  0005a	75 4e		 jne	 SHORT $LN1@Load
  0005c	6a 30		 push	 48			; 00000030H
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00063	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00068	84 c0		 test	 al, al
  0006a	75 3e		 jne	 SHORT $LN1@Load
  0006c	6a 31		 push	 49			; 00000031H
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00073	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00078	84 c0		 test	 al, al
  0007a	75 2e		 jne	 SHORT $LN1@Load
  0007c	6a 17		 push	 23			; 00000017H
  0007e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00083	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00088	84 c0		 test	 al, al
  0008a	75 1e		 jne	 SHORT $LN1@Load
  0008c	6a 24		 push	 36			; 00000024H
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00093	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00098	84 c0		 test	 al, al
  0009a	75 0e		 jne	 SHORT $LN1@Load

; 81   : 	{
; 82   : 		if(!g_ZtLicense.GetCustom())

  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000a1	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  000a6	85 c0		 test	 eax, eax
  000a8	74 7e		 je	 SHORT $LN63@Load
$LN1@Load:

; 83   : 		{
; 84   : 			return;
; 85   : 		}
; 86   : 	}
; 87   : 	
; 88   : 	this->m_MapNumber = 0;

  000aa	89 7e 18	 mov	 DWORD PTR [esi+24], edi

; 89   : 	this->m_MapX = 0;

  000ad	89 7e 1c	 mov	 DWORD PTR [esi+28], edi

; 90   : 	this->m_MapY = 0;

  000b0	89 7e 20	 mov	 DWORD PTR [esi+32], edi

; 91   : 	this->m_OpenTime = 0;

  000b3	89 7e 24	 mov	 DWORD PTR [esi+36], edi

; 92   : 	this->m_PlayTime = 0;

  000b6	89 7e 28	 mov	 DWORD PTR [esi+40], edi

; 93   : 	this->m_EndTime = 0;

  000b9	89 7e 2c	 mov	 DWORD PTR [esi+44], edi

; 94   : 
; 95   : 	this->m_NpcClass = 0;

  000bc	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 96   : 	this->m_NpcMap = 0;

  000bf	89 7e 34	 mov	 DWORD PTR [esi+52], edi

; 97   : 	this->m_NpcX = 0;

  000c2	89 7e 38	 mov	 DWORD PTR [esi+56], edi

; 98   : 	this->m_NpcY = 0;

  000c5	89 7e 3c	 mov	 DWORD PTR [esi+60], edi

; 99   : 
; 100  : 	this->m_TicketType = 0;

  000c8	89 7e 44	 mov	 DWORD PTR [esi+68], edi

; 101  : 	this->m_TicketIndex = 0;

  000cb	89 7e 48	 mov	 DWORD PTR [esi+72], edi

; 102  : 	this->m_TicketLevel = 0;

  000ce	89 7e 4c	 mov	 DWORD PTR [esi+76], edi

; 103  : 
; 104  : 	this->m_RewardItemCount = 0;

  000d1	89 7e 50	 mov	 DWORD PTR [esi+80], edi

; 105  : 	this->m_RewardAncentRate = 0;

  000d4	89 7e 54	 mov	 DWORD PTR [esi+84], edi

; 106  : 
; 107  : 	this->m_TimeData.clear();

  000d7	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  000da	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
  000dd	3b ca		 cmp	 ecx, edx
  000df	74 1d		 je	 SHORT $LN25@Load
  000e1	8b c2		 mov	 eax, edx
  000e3	3b d2		 cmp	 edx, edx
  000e5	74 14		 je	 SHORT $LN54@Load
$LL56@Load:
  000e7	8b 38		 mov	 edi, DWORD PTR [eax]
  000e9	89 39		 mov	 DWORD PTR [ecx], edi
  000eb	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  000ee	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  000f1	83 c0 08	 add	 eax, 8
  000f4	83 c1 08	 add	 ecx, 8
  000f7	3b c2		 cmp	 eax, edx
  000f9	75 ec		 jne	 SHORT $LL56@Load
$LN54@Load:
  000fb	89 4e 64	 mov	 DWORD PTR [esi+100], ecx
$LN25@Load:

; 108  : 	this->m_MonsterData.clear();

  000fe	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  00101	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_MONSTER_DATA@@V?$allocator@UCARNAGE_MONSTER_DATA@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_MONSTER_DATA,std::allocator<CARNAGE_MONSTER_DATA> >::clear

; 109  : 	this->m_ItemData.clear();

  00106	8d 8e 80 00 00
	00		 lea	 ecx, DWORD PTR [esi+128]
  0010c	e8 00 00 00 00	 call	 ?clear@?$vector@UCARNAGE_ITEM@@V?$allocator@UCARNAGE_ITEM@@@std@@@std@@QAEXXZ ; std::vector<CARNAGE_ITEM,std::allocator<CARNAGE_ITEM> >::clear

; 110  : 
; 111  : 	this->Read(gDirPath.GetNewPath("ZtData\\Events\\CarnageEvent.dat"));

  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NHEGEANL@ZtData?2Events?2CarnageEvent?4dat?$AA@
  00116	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0011b	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00120	50		 push	 eax
  00121	8b ce		 mov	 ecx, esi
  00123	e8 00 00 00 00	 call	 ?Read@CCarnageEvent@@QAEXPAD@Z ; CCarnageEvent::Read
$LN63@Load:
  00128	5f		 pop	 edi
$LN3@Load:
  00129	5e		 pop	 esi

; 112  : }

  0012a	c3		 ret	 0
?Load@CCarnageEvent@@QAEXXZ ENDP			; CCarnageEvent::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CarnageEvent@@YAXXZ
text$yc	SEGMENT
??__Eg_CarnageEvent@@YAXXZ PROC				; `dynamic initializer for 'g_CarnageEvent'', COMDAT

; 14   : CCarnageEvent g_CarnageEvent;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CarnageEvent@@3VCCarnageEvent@@A ; g_CarnageEvent
  00005	e8 00 00 00 00	 call	 ??0CCarnageEvent@@QAE@XZ ; CCarnageEvent::CCarnageEvent
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CarnageEvent@@YAXXZ ; `dynamic atexit destructor for 'g_CarnageEvent''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CarnageEvent@@YAXXZ ENDP				; `dynamic initializer for 'g_CarnageEvent''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CarnageEvent@@YAXXZ
text$yd	SEGMENT
??__Fg_CarnageEvent@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CarnageEvent'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CarnageEvent@@3VCCarnageEvent@@A ; g_CarnageEvent
  00005	e9 00 00 00 00	 jmp	 ??1CCarnageEvent@@QAE@XZ ; CCarnageEvent::~CCarnageEvent
??__Fg_CarnageEvent@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CarnageEvent''
text$yd	ENDS
PUBLIC	?g_CarnageEvent@@3VCCarnageEvent@@A		; g_CarnageEvent
_BSS	SEGMENT
?g_CarnageEvent@@3VCCarnageEvent@@A DB 027a0H DUP (?)	; g_CarnageEvent
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CarnageEvent$initializer$ DD FLAT:??__Eg_CarnageEvent@@YAXXZ
CRT$XCU	ENDS
END
