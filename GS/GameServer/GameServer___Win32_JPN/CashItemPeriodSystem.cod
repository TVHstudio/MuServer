; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CashItemPeriodSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bRunningPeriodCheckThread@@3HA		; g_bRunningPeriodCheckThread
_BSS	SEGMENT
?g_bRunningPeriodCheckThread@@3HA DD 01H DUP (?)	; g_bRunningPeriodCheckThread
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CCashItemPeriodSystem@@6B@			; CCashItemPeriodSystem::`vftable'
PUBLIC	??0CCashItemPeriodSystem@@QAE@XZ		; CCashItemPeriodSystem::CCashItemPeriodSystem
PUBLIC	??_R4CCashItemPeriodSystem@@6B@			; CCashItemPeriodSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCashItemPeriodSystem@@@8		; CCashItemPeriodSystem `RTTI Type Descriptor'
PUBLIC	??_R3CCashItemPeriodSystem@@8			; CCashItemPeriodSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCashItemPeriodSystem@@8			; CCashItemPeriodSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCashItemPeriodSystem@@8		; CCashItemPeriodSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCashItemPeriodSystem@@UAEPAXI@Z:PROC	; CCashItemPeriodSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCashItemPeriodSystem@@8
; File e:\work\tranet_version\gs\gameserver\cashitemperiodsystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCashItemPeriodSystem@@8 DD FLAT:??_R0?AVCCashItemPeriodSystem@@@8 ; CCashItemPeriodSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CCashItemPeriodSystem@@8
rdata$r	SEGMENT
??_R2CCashItemPeriodSystem@@8 DD FLAT:??_R1A@?0A@EA@CCashItemPeriodSystem@@8 ; CCashItemPeriodSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCashItemPeriodSystem@@8
rdata$r	SEGMENT
??_R3CCashItemPeriodSystem@@8 DD 00H			; CCashItemPeriodSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCashItemPeriodSystem@@@8
_DATA	SEGMENT
??_R0?AVCCashItemPeriodSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CCashItemPeriodSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCashItemPeriodSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCashItemPeriodSystem@@6B@
rdata$r	SEGMENT
??_R4CCashItemPeriodSystem@@6B@ DD 00H			; CCashItemPeriodSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCashItemPeriodSystem@@@8
	DD	FLAT:??_R3CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CCashItemPeriodSystem@@6B@
CONST	SEGMENT
??_7CCashItemPeriodSystem@@6B@ DD FLAT:??_R4CCashItemPeriodSystem@@6B@ ; CCashItemPeriodSystem::`vftable'
	DD	FLAT:??_ECCashItemPeriodSystem@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CCashItemPeriodSystem@@QAE@XZ
_TEXT	SEGMENT
??0CCashItemPeriodSystem@@QAE@XZ PROC			; CCashItemPeriodSystem::CCashItemPeriodSystem, COMDAT
; _this$ = ecx

; 16   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCashItemPeriodSystem@@6B@

; 17   : 
; 18   : }

  00008	c3		 ret	 0
??0CCashItemPeriodSystem@@QAE@XZ ENDP			; CCashItemPeriodSystem::CCashItemPeriodSystem
_TEXT	ENDS
PUBLIC	??1CCashItemPeriodSystem@@UAE@XZ		; CCashItemPeriodSystem::~CCashItemPeriodSystem
; Function compile flags: /Ogtp
;	COMDAT ??1CCashItemPeriodSystem@@UAE@XZ
_TEXT	SEGMENT
??1CCashItemPeriodSystem@@UAE@XZ PROC			; CCashItemPeriodSystem::~CCashItemPeriodSystem, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCashItemPeriodSystem@@6B@

; 22   : 
; 23   : }

  00006	c3		 ret	 0
??1CCashItemPeriodSystem@@UAE@XZ ENDP			; CCashItemPeriodSystem::~CCashItemPeriodSystem
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN6@AtlThrowIm:
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN7@AtlThrowIm:
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemList
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\cashitemperiodsystem.cpp
;	COMDAT ?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemList, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 418  : 	PMSG_REQ_PERIODITEM_LIST pMsg;
; 419  : 
; 420  : 	pMsg.iUserIndex = lpObj->m_Index;

  00013	8b 08		 mov	 ecx, DWORD PTR [eax]

; 421  : 	pMsg.iUserGuid = lpObj->DBNumber;

  00015	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00018	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 422  : 	memcpy(pMsg.chCharacterName, lpObj->Name, sizeof(pMsg.chCharacterName));

  0001b	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0001e	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00021	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 423  : 
; 424  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x05, sizeof(PMSG_REQ_PERIODITEM_LIST));

  00024	6a 18		 push	 24			; 00000018H
  00026	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00029	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  0002d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+16], edx
  00030	8a 90 81 00 00
	00		 mov	 dl, BYTE PTR [eax+129]
  00036	6a 05		 push	 5
  00038	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003b	68 d0 00 00 00	 push	 208			; 000000d0H
  00040	50		 push	 eax
  00041	66 89 4d f8	 mov	 WORD PTR _pMsg$[ebp+20], cx
  00045	88 55 fa	 mov	 BYTE PTR _pMsg$[ebp+22], dl
  00048	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 425  : 
; 426  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_LIST));

  00050	6a 18		 push	 24			; 00000018H
  00052	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00055	51		 push	 ecx
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 427  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	33 cd		 xor	 ecx, ebp
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemList
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemInquiry
; Function compile flags: /Ogtp
;	COMDAT ?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemInquiry, COMDAT
; _this$ = ecx

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 431  : 	PMSG_REQ_PERIODITEM_INQUIRY pMsg;
; 432  : 
; 433  : 	pMsg.iUserIndex = lpObj->m_Index;

  00013	8b 08		 mov	 ecx, DWORD PTR [eax]

; 434  : 	pMsg.iUserGuid = lpObj->DBNumber;

  00015	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]

; 435  : 
; 436  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x01, sizeof(PMSG_REQ_PERIODITEM_INQUIRY));

  00018	6a 0c		 push	 12			; 0000000cH
  0001a	6a 01		 push	 1
  0001c	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001f	68 d0 00 00 00	 push	 208			; 000000d0H
  00024	50		 push	 eax
  00025	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00028	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  0002b	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 437  : 
; 438  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_INQUIRY));

  00033	6a 0c		 push	 12			; 0000000cH
  00035	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00038	51		 push	 ecx
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0003e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 439  : }

  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemInquiry
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
; Function compile flags: /Ogtp
;	COMDAT ?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_pMsg$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iOptionIndex$ = 12					; size = 4
?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemUpdate, COMDAT
; _this$ = ecx

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 0c	 mov	 edx, DWORD PTR _iOptionIndex$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]

; 443  : 	PMSG_REQ_PERIODITEM_UPDATE pMsg;
; 444  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;
; 445  : 
; 446  : 	if ( lpObj->m_iPeriodItemEffectIndex < 0 || lpObj->m_iPeriodItemEffectIndex >=MAX_ITEM_PERIOD_INFO )

  00019	8b 81 80 20 00
	00		 mov	 eax, DWORD PTR [ecx+8320]
  0001f	85 c0		 test	 eax, eax
  00021	0f 88 84 00 00
	00		 js	 $LN2@GDReqPerio
  00027	3d dc 05 00 00	 cmp	 eax, 1500		; 000005dcH
  0002c	7d 7d		 jge	 SHORT $LN2@GDReqPerio

; 447  : 		return;
; 448  : 
; 449  : 	if( iOptionIndex < 0 || iOptionIndex > MAX_ITEM_PERIOD_EFFECT )

  0002e	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00031	77 78		 ja	 SHORT $LN2@GDReqPerio

; 450  : 		return;
; 451  : 
; 452  : 	lpItemInfo = &this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];

  00033	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H

; 453  : 
; 454  : 	if( lpItemInfo->btUsedInfo == FALSE )

  00039	80 7c 30 08 00	 cmp	 BYTE PTR [eax+esi+8], 0
  0003e	8d 44 30 08	 lea	 eax, DWORD PTR [eax+esi+8]
  00042	74 67		 je	 SHORT $LN2@GDReqPerio

; 455  : 		return;
; 456  : 
; 457  : 	pMsg.iUserGuid = lpObj->DBNumber;

  00044	8b 71 2c	 mov	 esi, DWORD PTR [ecx+44]

; 458  : 	pMsg.iUserIndex = lpObj->m_Index;

  00047	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00049	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 459  : 	pMsg.iItemCode = lpItemInfo->vItemEffect[iOptionIndex].iItemCode;

  0004c	8b ca		 mov	 ecx, edx
  0004e	89 75 e0	 mov	 DWORD PTR _pMsg$[ebp+8], esi
  00051	03 c9		 add	 ecx, ecx
  00053	8b 74 c8 1c	 mov	 esi, DWORD PTR [eax+ecx*8+28]
  00057	89 75 e4	 mov	 DWORD PTR _pMsg$[ebp+12], esi

; 460  : 	pMsg.iLeftTime = lpItemInfo->vItemEffect[iOptionIndex].iItemPeriodLeftTime;

  0005a	8b 4c c8 24	 mov	 ecx, DWORD PTR [eax+ecx*8+36]

; 461  : 	pMsg.iUsedTime = lpItemInfo->vItemEffect[iOptionIndex].iItemPeriodUsedTime;

  0005e	83 c2 02	 add	 edx, 2
  00061	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+20], ecx
  00064	03 d2		 add	 edx, edx
  00066	8b 14 d0	 mov	 edx, DWORD PTR [eax+edx*8]
  00069	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+16], edx

; 462  : 	memcpy(pMsg.chCharacterName, lpItemInfo->chCharacterName, sizeof(pMsg.chCharacterName));

  0006c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006f	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  00072	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00075	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+28], edx
  00078	66 8b 48 14	 mov	 cx, WORD PTR [eax+20]

; 463  : 
; 464  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x07, sizeof(PMSG_REQ_PERIODITEM_UPDATE));

  0007c	6a 24		 push	 36			; 00000024H
  0007e	66 89 4d f8	 mov	 WORD PTR _pMsg$[ebp+32], cx
  00082	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00085	6a 07		 push	 7
  00087	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0008a	68 d0 00 00 00	 push	 208			; 000000d0H
  0008f	50		 push	 eax
  00090	88 55 fa	 mov	 BYTE PTR _pMsg$[ebp+34], dl
  00093	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00098	83 c4 10	 add	 esp, 16			; 00000010H

; 465  : 
; 466  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_UPDATE));

  0009b	6a 24		 push	 36			; 00000024H
  0009d	8d 4d d8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000a0	51		 push	 ecx
  000a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000a6	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GDReqPerio:

; 467  : }

  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	5e		 pop	 esi
  000b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
_TEXT	ENDS
PUBLIC	?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
; Function compile flags: /Ogtp
;	COMDAT ?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry, COMDAT
; _this$ = ecx

; 545  : 	return;
; 546  : }

  00000	c2 04 00	 ret	 4
?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CCashItemPeriodSystem::GDReqPeriodItemDelete
; Function compile flags: /Ogtp
;	COMDAT ?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_pchCharacterName$ = 12					; size = 4
?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemDelete, COMDAT
; _this$ = ecx

; 580  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]

; 581  : 	PMSG_REQ_PERIODITEM_DELETE pMsg;
; 582  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;
; 583  : 	
; 584  : 	pMsg.iUserIndex = lpObj->m_Index;

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	8b 45 0c	 mov	 eax, DWORD PTR _pchCharacterName$[ebp]

; 585  : 	pMsg.iUserGuid = lpObj->DBNumber;

  00018	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  0001b	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+4], edx

; 586  : 	memcpy(pMsg.chCharacterName, pchCharacterName, sizeof(pMsg.chCharacterName));

  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00023	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 587  : 
; 588  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x09, sizeof(PMSG_REQ_PERIODITEM_DELETE));

  00026	6a 18		 push	 24			; 00000018H
  00028	6a 09		 push	 9
  0002a	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  0002d	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]
  00031	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  00034	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+16], ecx
  00037	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003a	68 d0 00 00 00	 push	 208			; 000000d0H
  0003f	51		 push	 ecx
  00040	66 89 55 f8	 mov	 WORD PTR _pMsg$[ebp+20], dx
  00044	88 45 fa	 mov	 BYTE PTR _pMsg$[ebp+22], al
  00047	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 589  : 
; 590  : 	cDBSMng.Send((char*)&pMsg, sizeof(PMSG_REQ_PERIODITEM_DELETE));

  0004f	6a 18		 push	 24			; 00000018H
  00051	8d 55 e4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00054	52		 push	 edx
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 591  : }

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00062	33 cd		 xor	 ecx, ebp
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 08 00	 ret	 8
?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemDelete
_TEXT	ENDS
PUBLIC	??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@ ; `string'
PUBLIC	?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemDelete
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@
CONST	SEGMENT
??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@ DB '[Cas'
	DB	'hShop][PeriodItemDelete Ans] - ID : %s, Name : %s', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemDelete, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 595  : 	LPOBJ lpObj = NULL;
; 596  : 
; 597  : 	if ( aRecv->iUserIndex < 0 || aRecv->iUserIndex > OBJMAX )

  00003	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00009	85 c0		 test	 eax, eax
  0000b	78 39		 js	 SHORT $LN5@DGAnsPerio
  0000d	3d 98 3a 00 00	 cmp	 eax, 15000		; 00003a98H
  00012	7f 32		 jg	 SHORT $LN5@DGAnsPerio

; 598  : 		return;
; 599  : 
; 600  : 	lpObj = &gObj[aRecv->iUserGuid];

  00014	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00017	8b c1		 mov	 eax, ecx
  00019	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 601  : 
; 602  : 	if ( lpObj->DBNumber != aRecv->iUserGuid )

  00025	39 48 2c	 cmp	 DWORD PTR [eax+44], ecx
  00028	75 1c		 jne	 SHORT $LN5@DGAnsPerio

; 603  : 		return;
; 604  : 
; 605  : 	switch ( aRecv->btResult )

  0002a	80 7a 0c 00	 cmp	 BYTE PTR [edx+12], 0
  0002e	75 16		 jne	 SHORT $LN5@DGAnsPerio

; 606  : 	{
; 607  : 		case 0:
; 608  : 			LogAdd( "[CashShop][PeriodItemDelete Ans] - ID : %s, Name : %s", lpObj->AccountID, lpObj->Name );

  00030	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  00033	51		 push	 ecx
  00034	83 c0 6c	 add	 eax, 108		; 0000006cH
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@DGAnsPerio:

; 609  : 			break;
; 610  : 	}
; 611  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemDelete
_TEXT	ENDS
PUBLIC	?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
_lpObj$ = 8						; size = 4
_btResult$ = 12						; size = 1
?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CCashItemPeriodSystem::GCSendPeriodItemInserResult, COMDAT
; _this$ = ecx

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 615  : 	PMSG_ANS_PERIODITEM_INSERT_RESULT pMsg;
; 616  : 	
; 617  : 	pMsg.btResult = btResult;

  00006	8a 45 0c	 mov	 al, BYTE PTR _btResult$[ebp]

; 618  : 
; 619  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x03, sizeof(PMSG_ANS_PERIODITEM_INSERT_RESULT));

  00009	6a 05		 push	 5
  0000b	6a 03		 push	 3
  0000d	8d 4d f8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00010	68 d0 00 00 00	 push	 208			; 000000d0H
  00015	51		 push	 ecx
  00016	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
  00019	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 620  : 
; 621  : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg,	sizeof(PMSG_ANS_PERIODITEM_INSERT_RESULT));

  0001e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	6a 05		 push	 5
  00025	8d 55 f8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00028	52		 push	 edx
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 622  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
_TEXT	ENDS
PUBLIC	?CheckHaveItemPeriodSealEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::CheckHaveItemPeriodSealEffect
; Function compile flags: /Ogtp
;	COMDAT ?CheckHaveItemPeriodSealEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckHaveItemPeriodSealEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::CheckHaveItemPeriodSealEffect, COMDAT
; _this$ = ecx

; 651  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 652  : 	int iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 80 80 20 00
	00		 mov	 eax, DWORD PTR [eax+8320]

; 653  : 
; 654  : 	if( iItemInfoIndex == -1 )

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	75 06		 jne	 SHORT $LN9@CheckHaveI
$LN16@CheckHaveI:

; 655  : 		return FALSE;

  00011	33 c0		 xor	 eax, eax

; 681  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN9@CheckHaveI:

; 656  : 
; 657  : 	if( this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo == NULL )

  00017	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0001d	80 7c 08 08 00	 cmp	 BYTE PTR [eax+ecx+8], 0

; 658  : 		return FALSE;

  00022	74 ed		 je	 SHORT $LN16@CheckHaveI

; 659  : 
; 660  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00024	56		 push	 esi
  00025	8d 4c 08 24	 lea	 ecx, DWORD PTR [eax+ecx+36]
  00029	33 f6		 xor	 esi, esi
  0002b	b8 01 00 00 00	 mov	 eax, 1
$LL7@CheckHaveI:

; 661  : 	{
; 662  : 		if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse == true )

  00030	38 41 fc	 cmp	 BYTE PTR [ecx-4], al
  00033	75 1b		 jne	 SHORT $LN6@CheckHaveI

; 663  : 		{
; 664  : 			switch(	this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode )

  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	81 c2 d5 e5 ff
	ff		 add	 edx, -6699		; ffffe5d5H
  0003d	83 fa 33	 cmp	 edx, 51			; 00000033H
  00040	77 0e		 ja	 SHORT $LN6@CheckHaveI
  00042	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR $LN14@CheckHaveI[edx]
  00049	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN17@CheckHaveI[edx*4]
$LN6@CheckHaveI:

; 659  : 
; 660  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00050	03 f0		 add	 esi, eax
  00052	83 c1 10	 add	 ecx, 16			; 00000010H
  00055	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00058	7c d6		 jl	 SHORT $LL7@CheckHaveI

; 665  : 			{
; 666  : 				case ITEMGET(13,43)://Seal of Ascension
; 667  : 				case ITEMGET(13,44)://Seal of Wealth
; 668  : 				case ITEMGET(13,45)://Seal of Sustenance
; 669  : 				case ITEMGET(13,52)://Condor Flame lol!!!
; 670  : 				case ITEMGET(13,59)://Seal of Mobility
; 671  : 				case ITEMGET(13,62)://Seal of Healing
; 672  : 				case ITEMGET(13,63)://Seal of Divinity
; 673  : 				case ITEMGET(13,93)://Seal of Master Ascension
; 674  : 				case ITEMGET(13,94)://Seal of Master Wealth
; 675  : 					return TRUE;
; 676  : 			}
; 677  : 		}
; 678  : 	}
; 679  : 
; 680  : 	return FALSE;

  0005a	33 c0		 xor	 eax, eax
$LN15@CheckHaveI:
  0005c	5e		 pop	 esi

; 681  : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
  00061	8d 49 00	 npad	 3
$LN17@CheckHaveI:
  00064	00 00 00 00	 DD	 $LN15@CheckHaveI
  00068	00 00 00 00	 DD	 $LN6@CheckHaveI
$LN14@CheckHaveI:
  0006c	00		 DB	 0
  0006d	00		 DB	 0
  0006e	00		 DB	 0
  0006f	01		 DB	 1
  00070	01		 DB	 1
  00071	01		 DB	 1
  00072	01		 DB	 1
  00073	01		 DB	 1
  00074	01		 DB	 1
  00075	00		 DB	 0
  00076	01		 DB	 1
  00077	01		 DB	 1
  00078	01		 DB	 1
  00079	01		 DB	 1
  0007a	01		 DB	 1
  0007b	01		 DB	 1
  0007c	00		 DB	 0
  0007d	01		 DB	 1
  0007e	01		 DB	 1
  0007f	00		 DB	 0
  00080	00		 DB	 0
  00081	01		 DB	 1
  00082	01		 DB	 1
  00083	01		 DB	 1
  00084	01		 DB	 1
  00085	01		 DB	 1
  00086	01		 DB	 1
  00087	01		 DB	 1
  00088	01		 DB	 1
  00089	01		 DB	 1
  0008a	01		 DB	 1
  0008b	01		 DB	 1
  0008c	01		 DB	 1
  0008d	01		 DB	 1
  0008e	01		 DB	 1
  0008f	01		 DB	 1
  00090	01		 DB	 1
  00091	01		 DB	 1
  00092	01		 DB	 1
  00093	01		 DB	 1
  00094	01		 DB	 1
  00095	01		 DB	 1
  00096	01		 DB	 1
  00097	01		 DB	 1
  00098	01		 DB	 1
  00099	01		 DB	 1
  0009a	01		 DB	 1
  0009b	01		 DB	 1
  0009c	01		 DB	 1
  0009d	01		 DB	 1
  0009e	00		 DB	 0
  0009f	00		 DB	 0
?CheckHaveItemPeriodSealEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::CheckHaveItemPeriodSealEffect
_TEXT	ENDS
PUBLIC	?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetItemPeriodInfo
; Function compile flags: /Ogtp
;	COMDAT ?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GetItemPeriodInfo, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 685  : 	if( lpObj->m_iPeriodItemEffectIndex < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 80 80 20 00
	00		 mov	 eax, DWORD PTR [eax+8320]
  0000c	85 c0		 test	 eax, eax
  0000e	79 06		 jns	 SHORT $LN2@GetItemPer

; 686  : 		return NULL;

  00010	33 c0		 xor	 eax, eax

; 689  : 		return NULL;
; 690  : 
; 691  : 	return &this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];
; 692  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN2@GetItemPer:

; 687  : 
; 688  : 	if( this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex].btUsedInfo == NULL )

  00016	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0001c	8d 4c 08 08	 lea	 ecx, DWORD PTR [eax+ecx+8]
  00020	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00023	f7 d8		 neg	 eax
  00025	1b c0		 sbb	 eax, eax
  00027	23 c1		 and	 eax, ecx

; 689  : 		return NULL;
; 690  : 
; 691  : 	return &this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];
; 692  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GetItemPeriodInfo
_TEXT	ENDS
PUBLIC	?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
; Function compile flags: /Ogtp
;	COMDAT ?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z
_TEXT	SEGMENT
_iItemCode$ = 8						; size = 4
?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z PROC ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID, COMDAT
; _this$ = ecx

; 695  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 696  : 	int iValue = 0;
; 697  : 
; 698  : 	switch(iItemCode)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00006	3d 48 1c 00 00	 cmp	 eax, 7240		; 00001c48H
  0000b	0f 8f 81 00 00
	00		 jg	 $LN29@GetItemPer@2
  00011	74 76		 je	 SHORT $LN18@GetItemPer@2
  00013	05 d5 e5 ff ff	 add	 eax, -6699		; ffffe5d5H
  00018	83 f8 33	 cmp	 eax, 51			; 00000033H
  0001b	0f 87 f5 00 00
	00		 ja	 $LN1@GetItemPer@2
  00021	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN30@GetItemPer@2[eax]
  00028	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@GetItemPer@2[eax*4]
$LN24@GetItemPer@2:

; 699  : 	{
; 700  : 	case ITEMGET(13,43):
; 701  : 		iValue = AT_CSHOP_SEAL_OF_ASCENSION;

  0002f	b8 28 00 00 00	 mov	 eax, 40			; 00000028H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN23@GetItemPer@2:

; 702  : 		break;
; 703  : 	case ITEMGET(13,44):
; 704  : 		iValue = AT_CSHOP_SEAL_OF_WEALTH;

  00038	b8 29 00 00 00	 mov	 eax, 41			; 00000029H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN22@GetItemPer@2:

; 705  : 		break;
; 706  : 	case ITEMGET(13,45):
; 707  : 		iValue = AT_CSHOP_SEAL_OF_SUSTENANCE;

  00041	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN21@GetItemPer@2:

; 708  : 		break;
; 709  : 	case ITEMGET(13,59):
; 710  : 		iValue = AT_CSHOP_SEAL_OF_MOBILITY;

  0004a	b8 2b 00 00 00	 mov	 eax, 43			; 0000002bH

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
$LN20@GetItemPer@2:

; 711  : 		break;
; 712  : 	case ITEMGET(13,62): //Season 3.5
; 713  : 		iValue = AT_CSHOP_SEAL_OF_HEALING;

  00053	b8 57 00 00 00	 mov	 eax, 87			; 00000057H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN19@GetItemPer@2:

; 714  : 		break;
; 715  : 	case ITEMGET(13,63): //Season 3.5
; 716  : 		iValue = AT_CSHOP_SEAL_OF_DIVINITY;

  0005c	b8 58 00 00 00	 mov	 eax, 88			; 00000058H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
$LN5@GetItemPer@2:

; 756  : 		break;
; 757  : 	case ITEMGET(13,81): //Season 4.5
; 758  : 		iValue = AT_CSHOP_GUARDIAN_AMULET;

  00065	b8 63 00 00 00	 mov	 eax, 99			; 00000063H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN4@GetItemPer@2:

; 759  : 		break;
; 760  : 	case ITEMGET(13,82): //Season 4.5
; 761  : 		iValue = AT_CSHOP_PROTECT_AMULET;

  0006e	b8 64 00 00 00	 mov	 eax, 100		; 00000064H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN3@GetItemPer@2:

; 762  : 		break;
; 763  : 	case ITEMGET(13,93): //Season 4.5
; 764  : 		iValue = AT_CSHOP_MASTER_SEAL_OF_ASCENSION;

  00077	b8 65 00 00 00	 mov	 eax, 101		; 00000065H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
$LN2@GetItemPer@2:

; 765  : 		break;
; 766  : 	case ITEMGET(13,94): //Season 4.5
; 767  : 		iValue = AT_CSHOP_MASTER_SEAL_OF_WEALTH;

  00080	b8 66 00 00 00	 mov	 eax, 102		; 00000066H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
$LN18@GetItemPer@2:

; 717  : 		break;
; 718  : 	case ITEMGET(14,72):
; 719  : 		iValue = AT_CSHOP_SCROLL_OF_QUICKNESS;

  00089	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
$LN29@GetItemPer@2:

; 696  : 	int iValue = 0;
; 697  : 
; 698  : 	switch(iItemCode)

  00092	05 b7 e3 ff ff	 add	 eax, -7241		; ffffe3b7H
  00097	83 f8 19	 cmp	 eax, 25			; 00000019H
  0009a	77 7a		 ja	 SHORT $LN1@GetItemPer@2
  0009c	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN31@GetItemPer@2[eax]
  000a3	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN33@GetItemPer@2[ecx*4]
$LN17@GetItemPer@2:

; 720  : 		break;
; 721  : 	case ITEMGET(14,73):
; 722  : 		iValue = AT_CSHOP_SCROLL_OF_DEFENSE;

  000aa	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000af	5d		 pop	 ebp
  000b0	c2 04 00	 ret	 4
$LN16@GetItemPer@2:

; 723  : 		break;
; 724  : 	case ITEMGET(14,74):
; 725  : 		iValue = AT_CSHOP_SCROLL_OF_WRATH;

  000b3	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000b8	5d		 pop	 ebp
  000b9	c2 04 00	 ret	 4
$LN15@GetItemPer@2:

; 726  : 		break;
; 727  : 	case ITEMGET(14,75):
; 728  : 		iValue = AT_CSHOP_SCROLL_OF_WIZARDRY;

  000bc	b8 2f 00 00 00	 mov	 eax, 47			; 0000002fH

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
$LN14@GetItemPer@2:

; 729  : 		break;
; 730  : 	case ITEMGET(14,76):
; 731  : 		iValue = AT_CSHOP_SCROLL_OF_HEALTH;

  000c5	b8 30 00 00 00	 mov	 eax, 48			; 00000030H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
$LN13@GetItemPer@2:

; 732  : 		break;
; 733  : 	case ITEMGET(14,77):
; 734  : 		iValue = AT_CSHOP_SCROLL_OF_MANA;

  000ce	b8 31 00 00 00	 mov	 eax, 49			; 00000031H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
$LN12@GetItemPer@2:

; 735  : 		break;
; 736  : 	case ITEMGET(14,97): //Season 3.5
; 737  : 		iValue = AT_CSHOP_SCROLL_OF_BATTLE;

  000d7	b8 59 00 00 00	 mov	 eax, 89			; 00000059H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000dc	5d		 pop	 ebp
  000dd	c2 04 00	 ret	 4
$LN11@GetItemPer@2:

; 738  : 		break;
; 739  : 	case ITEMGET(14,98): //Season 3.5
; 740  : 		iValue = AT_CSHOP_SCROLL_OF_STRENGTHENER;

  000e0	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
$LN10@GetItemPer@2:

; 741  : 		break;
; 742  : 	case ITEMGET(14,78):
; 743  : 		iValue = AT_CSHOP_LEAP_OF_STRENGTH;

  000e9	b8 32 00 00 00	 mov	 eax, 50			; 00000032H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000ee	5d		 pop	 ebp
  000ef	c2 04 00	 ret	 4
$LN9@GetItemPer@2:

; 744  : 		break;
; 745  : 	case ITEMGET(14,79):
; 746  : 		iValue = AT_CSHOP_LEAP_OF_QUICKNESS;

  000f2	b8 33 00 00 00	 mov	 eax, 51			; 00000033H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
$LN8@GetItemPer@2:

; 747  : 		break;
; 748  : 	case ITEMGET(14,80):
; 749  : 		iValue = AT_CSHOP_LEAP_OF_HEALTH;

  000fb	b8 34 00 00 00	 mov	 eax, 52			; 00000034H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
$LN7@GetItemPer@2:

; 750  : 		break;
; 751  : 	case ITEMGET(14,81):
; 752  : 		iValue = AT_CSHOP_LEAP_OF_ENERGY;

  00104	b8 35 00 00 00	 mov	 eax, 53			; 00000035H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00109	5d		 pop	 ebp
  0010a	c2 04 00	 ret	 4
$LN6@GetItemPer@2:

; 753  : 		break;
; 754  : 	case ITEMGET(14,82):
; 755  : 		iValue = AT_CSHOP_LEAP_OF_CONTROL;

  0010d	b8 36 00 00 00	 mov	 eax, 54			; 00000036H

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
$LN1@GetItemPer@2:

; 768  : 		break;
; 769  : 	default:
; 770  : 		iValue = AT_NULL_BUFF_EFFECT;

  00116	33 c0		 xor	 eax, eax

; 771  : 		break;
; 772  : 	}
; 773  : 
; 774  : 	return iValue;
; 775  : }

  00118	5d		 pop	 ebp
  00119	c2 04 00	 ret	 4
$LN32@GetItemPer@2:
  0011c	00 00 00 00	 DD	 $LN24@GetItemPer@2
  00120	00 00 00 00	 DD	 $LN23@GetItemPer@2
  00124	00 00 00 00	 DD	 $LN22@GetItemPer@2
  00128	00 00 00 00	 DD	 $LN21@GetItemPer@2
  0012c	00 00 00 00	 DD	 $LN20@GetItemPer@2
  00130	00 00 00 00	 DD	 $LN19@GetItemPer@2
  00134	00 00 00 00	 DD	 $LN5@GetItemPer@2
  00138	00 00 00 00	 DD	 $LN4@GetItemPer@2
  0013c	00 00 00 00	 DD	 $LN3@GetItemPer@2
  00140	00 00 00 00	 DD	 $LN2@GetItemPer@2
  00144	00 00 00 00	 DD	 $LN1@GetItemPer@2
$LN30@GetItemPer@2:
  00148	00		 DB	 0
  00149	01		 DB	 1
  0014a	02		 DB	 2
  0014b	0a		 DB	 10			; 0000000aH
  0014c	0a		 DB	 10			; 0000000aH
  0014d	0a		 DB	 10			; 0000000aH
  0014e	0a		 DB	 10			; 0000000aH
  0014f	0a		 DB	 10			; 0000000aH
  00150	0a		 DB	 10			; 0000000aH
  00151	0a		 DB	 10			; 0000000aH
  00152	0a		 DB	 10			; 0000000aH
  00153	0a		 DB	 10			; 0000000aH
  00154	0a		 DB	 10			; 0000000aH
  00155	0a		 DB	 10			; 0000000aH
  00156	0a		 DB	 10			; 0000000aH
  00157	0a		 DB	 10			; 0000000aH
  00158	03		 DB	 3
  00159	0a		 DB	 10			; 0000000aH
  0015a	0a		 DB	 10			; 0000000aH
  0015b	04		 DB	 4
  0015c	05		 DB	 5
  0015d	0a		 DB	 10			; 0000000aH
  0015e	0a		 DB	 10			; 0000000aH
  0015f	0a		 DB	 10			; 0000000aH
  00160	0a		 DB	 10			; 0000000aH
  00161	0a		 DB	 10			; 0000000aH
  00162	0a		 DB	 10			; 0000000aH
  00163	0a		 DB	 10			; 0000000aH
  00164	0a		 DB	 10			; 0000000aH
  00165	0a		 DB	 10			; 0000000aH
  00166	0a		 DB	 10			; 0000000aH
  00167	0a		 DB	 10			; 0000000aH
  00168	0a		 DB	 10			; 0000000aH
  00169	0a		 DB	 10			; 0000000aH
  0016a	0a		 DB	 10			; 0000000aH
  0016b	0a		 DB	 10			; 0000000aH
  0016c	0a		 DB	 10			; 0000000aH
  0016d	0a		 DB	 10			; 0000000aH
  0016e	06		 DB	 6
  0016f	07		 DB	 7
  00170	0a		 DB	 10			; 0000000aH
  00171	0a		 DB	 10			; 0000000aH
  00172	0a		 DB	 10			; 0000000aH
  00173	0a		 DB	 10			; 0000000aH
  00174	0a		 DB	 10			; 0000000aH
  00175	0a		 DB	 10			; 0000000aH
  00176	0a		 DB	 10			; 0000000aH
  00177	0a		 DB	 10			; 0000000aH
  00178	0a		 DB	 10			; 0000000aH
  00179	0a		 DB	 10			; 0000000aH
  0017a	08		 DB	 8
  0017b	09		 DB	 9
$LN33@GetItemPer@2:
  0017c	00 00 00 00	 DD	 $LN17@GetItemPer@2
  00180	00 00 00 00	 DD	 $LN16@GetItemPer@2
  00184	00 00 00 00	 DD	 $LN15@GetItemPer@2
  00188	00 00 00 00	 DD	 $LN14@GetItemPer@2
  0018c	00 00 00 00	 DD	 $LN13@GetItemPer@2
  00190	00 00 00 00	 DD	 $LN10@GetItemPer@2
  00194	00 00 00 00	 DD	 $LN9@GetItemPer@2
  00198	00 00 00 00	 DD	 $LN8@GetItemPer@2
  0019c	00 00 00 00	 DD	 $LN7@GetItemPer@2
  001a0	00 00 00 00	 DD	 $LN6@GetItemPer@2
  001a4	00 00 00 00	 DD	 $LN12@GetItemPer@2
  001a8	00 00 00 00	 DD	 $LN11@GetItemPer@2
  001ac	00 00 00 00	 DD	 $LN1@GetItemPer@2
$LN31@GetItemPer@2:
  001b0	00		 DB	 0
  001b1	01		 DB	 1
  001b2	02		 DB	 2
  001b3	03		 DB	 3
  001b4	04		 DB	 4
  001b5	05		 DB	 5
  001b6	06		 DB	 6
  001b7	07		 DB	 7
  001b8	08		 DB	 8
  001b9	09		 DB	 9
  001ba	0c		 DB	 12			; 0000000cH
  001bb	0c		 DB	 12			; 0000000cH
  001bc	0c		 DB	 12			; 0000000cH
  001bd	0c		 DB	 12			; 0000000cH
  001be	0c		 DB	 12			; 0000000cH
  001bf	0c		 DB	 12			; 0000000cH
  001c0	0c		 DB	 12			; 0000000cH
  001c1	0c		 DB	 12			; 0000000cH
  001c2	0c		 DB	 12			; 0000000cH
  001c3	0c		 DB	 12			; 0000000cH
  001c4	0c		 DB	 12			; 0000000cH
  001c5	0c		 DB	 12			; 0000000cH
  001c6	0c		 DB	 12			; 0000000cH
  001c7	0c		 DB	 12			; 0000000cH
  001c8	0a		 DB	 10			; 0000000aH
  001c9	0b		 DB	 11			; 0000000bH
?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ENDP ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
_TEXT	ENDS
PUBLIC	?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::ApplyItemPeriodEffect
EXTRN	?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z:PROC ; CItemAddOption::SetItemEffect
EXTRN	?g_ItemAddOption@@3VCItemAddOption@@A:BYTE	; g_ItemAddOption
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z:PROC ; gObjApplyBuffEffectItemPeriod
; Function compile flags: /Ogtp
;	COMDAT ?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_iDuration$ = 16					; size = 4
?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CCashItemPeriodSystem::ApplyItemPeriodEffect, COMDAT
; _this$ = ecx

; 778  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 779  : 	BOOL bResult = FALSE;
; 780  : 	int iEffectIndex = 0;
; 781  : 
; 782  : 	iEffectIndex = this->GetItemPeriodInfoEffectID(iItemCode);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _iItemCode$[ebp]
  00006	56		 push	 esi
  00007	52		 push	 edx
  00008	e8 00 00 00 00	 call	 ?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
  0000d	8b f0		 mov	 esi, eax

; 783  : 
; 784  : 	if(iEffectIndex != 0)
; 785  : 	{
; 786  : 		int iUseTime = iDuration * 60;

  0000f	8b 45 10	 mov	 eax, DWORD PTR _iDuration$[ebp]
  00012	85 f6		 test	 esi, esi
  00014	74 3c		 je	 SHORT $LN5@ApplyItemP
  00016	8b c8		 mov	 ecx, eax
  00018	c1 e1 04	 shl	 ecx, 4
  0001b	53		 push	 ebx

; 787  : 
; 788  : 		bResult = gObjApplyBuffEffectItemPeriod(lpObj, iEffectIndex, iUseTime);

  0001c	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0001f	2b c8		 sub	 ecx, eax
  00021	03 c9		 add	 ecx, ecx
  00023	57		 push	 edi
  00024	03 c9		 add	 ecx, ecx
  00026	51		 push	 ecx
  00027	56		 push	 esi
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjApplyBuffEffectItemPeriod
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	0f b6 f8	 movzx	 edi, al

; 789  : 
; 790  : 		switch(iEffectIndex) //Leaps

  00034	83 fe 32	 cmp	 esi, 50			; 00000032H
  00037	7c 10		 jl	 SHORT $LN9@ApplyItemP
  00039	83 fe 36	 cmp	 esi, 54			; 00000036H
  0003c	7f 0b		 jg	 SHORT $LN9@ApplyItemP

; 791  : 		{
; 792  : 		case AT_CSHOP_LEAP_OF_STRENGTH:
; 793  : 		case AT_CSHOP_LEAP_OF_QUICKNESS:
; 794  : 		case AT_CSHOP_LEAP_OF_HEALTH:
; 795  : 		case AT_CSHOP_LEAP_OF_ENERGY:
; 796  : 		case AT_CSHOP_LEAP_OF_CONTROL:
; 797  : 			gObjCalCharacter(lpObj->m_Index);

  0003e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00046	83 c4 04	 add	 esp, 4
$LN9@ApplyItemP:

; 804  : 	}
; 805  : 
; 806  : 	return bResult;

  00049	8b c7		 mov	 eax, edi
  0004b	5f		 pop	 edi
  0004c	5b		 pop	 ebx
  0004d	5e		 pop	 esi

; 807  : }

  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@ApplyItemP:

; 798  : 			break;
; 799  : 		}
; 800  : 	}
; 801  : 	else
; 802  : 	{
; 803  : 		bResult = g_ItemAddOption.SetItemEffect(lpObj, iItemCode, iDuration) == TRUE; //!( g_ItemAddOption.SetItemEffect(lpObj, iItemCode, iItemTime) - 1 );

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00055	50		 push	 eax
  00056	52		 push	 edx
  00057	51		 push	 ecx
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  0005d	e8 00 00 00 00	 call	 ?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::SetItemEffect
  00062	33 d2		 xor	 edx, edx
  00064	3c 01		 cmp	 al, 1
  00066	0f 94 c2	 sete	 dl
  00069	5e		 pop	 esi
  0006a	8b c2		 mov	 eax, edx

; 807  : }

  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CCashItemPeriodSystem::ApplyItemPeriodEffect
_TEXT	ENDS
PUBLIC	?CheckBuffUser@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::CheckBuffUser
; Function compile flags: /Ogtp
;	COMDAT ?CheckBuffUser@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_ItemBuffType$ = 12					; size = 4
?CheckBuffUser@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::CheckBuffUser, COMDAT
; _this$ = ecx

; 811  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 812  : 	bool Result = FALSE;
; 813  : 
; 814  : 	int iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 80 80 20 00
	00		 mov	 eax, DWORD PTR [eax+8320]

; 815  : 
; 816  : 	if( iItemInfoIndex == -1 )

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	75 06		 jne	 SHORT $LN12@CheckBuffU
$LN21@CheckBuffU:

; 817  : 		return FALSE;

  00011	33 c0		 xor	 eax, eax

; 874  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN12@CheckBuffU:

; 818  : 
; 819  : 	if( this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo == NULL )

  00017	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  0001d	80 7c 08 08 00	 cmp	 BYTE PTR [eax+ecx+8], 0

; 820  : 		return FALSE;

  00022	74 ed		 je	 SHORT $LN21@CheckBuffU

; 821  : 
; 822  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	8b 7d 0c	 mov	 edi, DWORD PTR _ItemBuffType$[ebp]
  00029	8d 4c 08 24	 lea	 ecx, DWORD PTR [eax+ecx+36]
  0002d	33 f6		 xor	 esi, esi
  0002f	b8 01 00 00 00	 mov	 eax, 1
$LL10@CheckBuffU:

; 823  : 	{
; 824  : 		if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse == true )

  00034	38 41 fc	 cmp	 BYTE PTR [ecx-4], al
  00037	75 34		 jne	 SHORT $LN9@CheckBuffU

; 825  : 		{
; 826  : 			//if(ItemBuffType == this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode)
; 827  : 			//{
; 828  : 			//	return TRUE;
; 829  : 			//}
; 830  : #ifdef DEBUG_CODE2
; 831  : 			LogAddC(2,"%d %d", ItemBuffType, this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode);
; 832  : #endif
; 833  : 			//6700
; 834  : 			//6699
; 835  : 			//6750
; 836  : 			//6749
; 837  : 			//6701
; 838  : 			//6718
; 839  : 
; 840  : 			switch(	this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode )

  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	81 c2 d5 e5 ff
	ff		 add	 edx, -6699		; ffffe5d5H
  00041	83 fa 33	 cmp	 edx, 51			; 00000033H
  00044	77 27		 ja	 SHORT $LN9@CheckBuffU
  00046	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR $LN17@CheckBuffU[edx]
  0004d	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN22@CheckBuffU[edx*4]
$LN4@CheckBuffU:

; 841  : 			{
; 842  : 				case ITEMGET(13,43)://Seal of Ascension
; 843  : 				case ITEMGET(13,44)://Seal of Wealth
; 844  : 				case ITEMGET(13,45)://Seal of Sustenance
; 845  : 				case ITEMGET(13,52)://Condor Flame lol!!!
; 846  : 				case ITEMGET(13,59)://Seal of Mobility
; 847  : 				case ITEMGET(13,62)://Seal of Healing
; 848  : 				case ITEMGET(13,63)://Seal of Divinity
; 849  : 				case ITEMGET(13,93)://Seal of Master Ascension
; 850  : 				case ITEMGET(13,94)://Seal of Master Wealth
; 851  : 				{
; 852  : 					switch(ItemBuffType)

  00054	8d 97 d5 e5 ff
	ff		 lea	 edx, DWORD PTR [edi-6699]
  0005a	83 fa 33	 cmp	 edx, 51			; 00000033H
  0005d	77 0e		 ja	 SHORT $LN9@CheckBuffU
  0005f	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR $LN18@CheckBuffU[edx]
  00066	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN23@CheckBuffU[edx*4]
$LN9@CheckBuffU:

; 821  : 
; 822  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  0006d	03 f0		 add	 esi, eax
  0006f	83 c1 10	 add	 ecx, 16			; 00000010H
  00072	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00075	7c bd		 jl	 SHORT $LL10@CheckBuffU

; 853  : 					{
; 854  : 						case ITEMGET(13,43)://Seal of Ascension
; 855  : 						case ITEMGET(13,44)://Seal of Wealth
; 856  : 						case ITEMGET(13,45)://Seal of Sustenance
; 857  : 						case ITEMGET(13,52)://Condor Flame lol!!!
; 858  : 						case ITEMGET(13,59)://Seal of Mobility
; 859  : 						case ITEMGET(13,62)://Seal of Healing
; 860  : 						case ITEMGET(13,63)://Seal of Divinity
; 861  : 						case ITEMGET(13,93)://Seal of Master Ascension
; 862  : 						case ITEMGET(13,94)://Seal of Master Wealth
; 863  : 						{
; 864  : 
; 865  : 							return true;
; 866  : 						}
; 867  : 					}
; 868  : 				}
; 869  : 			}
; 870  : 		}
; 871  : 	}
; 872  : 
; 873  : 	return FALSE;

  00077	33 c0		 xor	 eax, eax
$LN19@CheckBuffU:
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 874  : }

  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
  0007f	90		 npad	 1
$LN22@CheckBuffU:
  00080	00 00 00 00	 DD	 $LN4@CheckBuffU
  00084	00 00 00 00	 DD	 $LN9@CheckBuffU
$LN17@CheckBuffU:
  00088	00		 DB	 0
  00089	00		 DB	 0
  0008a	00		 DB	 0
  0008b	01		 DB	 1
  0008c	01		 DB	 1
  0008d	01		 DB	 1
  0008e	01		 DB	 1
  0008f	01		 DB	 1
  00090	01		 DB	 1
  00091	00		 DB	 0
  00092	01		 DB	 1
  00093	01		 DB	 1
  00094	01		 DB	 1
  00095	01		 DB	 1
  00096	01		 DB	 1
  00097	01		 DB	 1
  00098	00		 DB	 0
  00099	01		 DB	 1
  0009a	01		 DB	 1
  0009b	00		 DB	 0
  0009c	00		 DB	 0
  0009d	01		 DB	 1
  0009e	01		 DB	 1
  0009f	01		 DB	 1
  000a0	01		 DB	 1
  000a1	01		 DB	 1
  000a2	01		 DB	 1
  000a3	01		 DB	 1
  000a4	01		 DB	 1
  000a5	01		 DB	 1
  000a6	01		 DB	 1
  000a7	01		 DB	 1
  000a8	01		 DB	 1
  000a9	01		 DB	 1
  000aa	01		 DB	 1
  000ab	01		 DB	 1
  000ac	01		 DB	 1
  000ad	01		 DB	 1
  000ae	01		 DB	 1
  000af	01		 DB	 1
  000b0	01		 DB	 1
  000b1	01		 DB	 1
  000b2	01		 DB	 1
  000b3	01		 DB	 1
  000b4	01		 DB	 1
  000b5	01		 DB	 1
  000b6	01		 DB	 1
  000b7	01		 DB	 1
  000b8	01		 DB	 1
  000b9	01		 DB	 1
  000ba	00		 DB	 0
  000bb	00		 DB	 0
$LN23@CheckBuffU:
  000bc	00 00 00 00	 DD	 $LN19@CheckBuffU
  000c0	00 00 00 00	 DD	 $LN9@CheckBuffU
$LN18@CheckBuffU:
  000c4	00		 DB	 0
  000c5	00		 DB	 0
  000c6	00		 DB	 0
  000c7	01		 DB	 1
  000c8	01		 DB	 1
  000c9	01		 DB	 1
  000ca	01		 DB	 1
  000cb	01		 DB	 1
  000cc	01		 DB	 1
  000cd	00		 DB	 0
  000ce	01		 DB	 1
  000cf	01		 DB	 1
  000d0	01		 DB	 1
  000d1	01		 DB	 1
  000d2	01		 DB	 1
  000d3	01		 DB	 1
  000d4	00		 DB	 0
  000d5	01		 DB	 1
  000d6	01		 DB	 1
  000d7	00		 DB	 0
  000d8	00		 DB	 0
  000d9	01		 DB	 1
  000da	01		 DB	 1
  000db	01		 DB	 1
  000dc	01		 DB	 1
  000dd	01		 DB	 1
  000de	01		 DB	 1
  000df	01		 DB	 1
  000e0	01		 DB	 1
  000e1	01		 DB	 1
  000e2	01		 DB	 1
  000e3	01		 DB	 1
  000e4	01		 DB	 1
  000e5	01		 DB	 1
  000e6	01		 DB	 1
  000e7	01		 DB	 1
  000e8	01		 DB	 1
  000e9	01		 DB	 1
  000ea	01		 DB	 1
  000eb	01		 DB	 1
  000ec	01		 DB	 1
  000ed	01		 DB	 1
  000ee	01		 DB	 1
  000ef	01		 DB	 1
  000f0	01		 DB	 1
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	01		 DB	 1
  000f5	01		 DB	 1
  000f6	00		 DB	 0
  000f7	00		 DB	 0
?CheckBuffUser@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::CheckBuffUser
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@XZ			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTimeSpan@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTimeSpan@ATL@@QAE@XZ PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 28   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 29   : }

  0000f	c3		 ret	 0
??0CTimeSpan@ATL@@QAE@XZ ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@_J@Z			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogtp
;	COMDAT ??0CTimeSpan@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTimeSpan@ATL@@QAE@_J@Z PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 34   : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTimeSpan@ATL@@QAE@_J@Z ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@JHHH@Z			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogtp
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  00006	99		 cdq
  00007	56		 push	 esi
  00008	8b f0		 mov	 esi, eax
  0000a	57		 push	 edi
  0000b	8b fa		 mov	 edi, edx
  0000d	0f a4 c2 01	 shld	 edx, eax, 1
  00011	03 c0		 add	 eax, eax
  00013	03 f0		 add	 esi, eax
  00015	13 fa		 adc	 edi, edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  0001a	0f a4 f7 03	 shld	 edi, esi, 3
  0001e	99		 cdq
  0001f	03 f6		 add	 esi, esi
  00021	03 f6		 add	 esi, esi
  00023	03 f6		 add	 esi, esi
  00025	03 f0		 add	 esi, eax
  00027	13 fa		 adc	 edi, edx
  00029	8b c6		 mov	 eax, esi
  0002b	8b d7		 mov	 edx, edi
  0002d	0f a4 c2 04	 shld	 edx, eax, 4
  00031	c1 e0 04	 shl	 eax, 4
  00034	2b c6		 sub	 eax, esi
  00036	1b d7		 sbb	 edx, edi
  00038	8b f0		 mov	 esi, eax
  0003a	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  0003d	8b fa		 mov	 edi, edx
  0003f	0f a4 f7 02	 shld	 edi, esi, 2
  00043	99		 cdq
  00044	03 f6		 add	 esi, esi
  00046	03 f6		 add	 esi, esi
  00048	03 f0		 add	 esi, eax
  0004a	13 fa		 adc	 edi, edx
  0004c	8b c6		 mov	 eax, esi
  0004e	8b d7		 mov	 edx, edi
  00050	0f a4 c2 04	 shld	 edx, eax, 4
  00054	c1 e0 04	 shl	 eax, 4
  00057	2b c6		 sub	 eax, esi
  00059	1b d7		 sbb	 edx, edi
  0005b	0f a4 c2 02	 shld	 edx, eax, 2
  0005f	03 c0		 add	 eax, eax
  00061	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
  00064	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  00067	8b fa		 mov	 edi, edx
  00069	99		 cdq
  0006a	03 f0		 add	 esi, eax
  0006c	13 fa		 adc	 edi, edx
  0006e	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  00071	5f		 pop	 edi
  00072	89 31		 mov	 DWORD PTR [ecx], esi

; 43   : }

  00074	8b c1		 mov	 eax, ecx
  00076	5e		 pop	 esi
  00077	5d		 pop	 ebp
  00078	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTotalMinutes
EXTRN	__alldiv:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTotalMinutes, COMDAT
; _this$ = ecx

; 62   : 	return( m_timeSpan/60 );

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	6a 00		 push	 0
  00007	6a 3c		 push	 60			; 0000003cH
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 __alldiv

; 63   : }

  00010	c3		 ret	 0
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTotalMinutes
_TEXT	ENDS
PUBLIC	?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Ogtp
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 82   : 	return( m_timeSpan );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 83   : }

  00005	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@XZ				; ATL::CTime::CTime
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 166  : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 167  : }

  0000f	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 172  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
EXTRN	__mktime64:PROC
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
_atm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00010	8b 55 08	 mov	 edx, DWORD PTR _nYear$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	81 fa 6c 07 00
	00		 cmp	 edx, 1900		; 0000076cH
  0001c	7d 0a		 jge	 SHORT $LN66@CTime
  0001e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00023	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN86@CTime:
$LN66@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00028	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  0002b	48		 dec	 eax
  0002c	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0002f	76 0a		 jbe	 SHORT $LN56@CTime
  00031	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00036	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN87@CTime:
$LN56@CTime:
  0003b	53		 push	 ebx

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0003c	8b 5d 10	 mov	 ebx, DWORD PTR _nDay$[ebp]
  0003f	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00042	57		 push	 edi
  00043	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00046	76 0a		 jbe	 SHORT $LN46@CTime
  00048	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0004d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN88@CTime:
$LN46@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  00052	8b 7d 14	 mov	 edi, DWORD PTR _nHour$[ebp]
  00055	83 ff 17	 cmp	 edi, 23			; 00000017H
  00058	76 0a		 jbe	 SHORT $LN36@CTime
  0005a	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0005f	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN89@CTime:
$LN36@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00064	8b 4d 18	 mov	 ecx, DWORD PTR _nMin$[ebp]
  00067	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0006a	76 0a		 jbe	 SHORT $LN26@CTime
  0006c	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00071	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN90@CTime:
$LN26@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00076	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  00079	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  0007c	76 0a		 jbe	 SHORT $LN16@CTime
  0007e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00083	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN91@CTime:
$LN16@CTime:

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;
; 198  : 	atm.tm_min = nMin;
; 199  : 	atm.tm_hour = nHour;
; 200  : 	atm.tm_mday = nDay;
; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  00088	81 c2 94 f8 ff
	ff		 add	 edx, -1900		; fffff894H
  0008e	89 45 d8	 mov	 DWORD PTR _atm$[ebp], eax
  00091	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  00094	89 55 ec	 mov	 DWORD PTR _atm$[ebp+20], edx
  00097	89 4d dc	 mov	 DWORD PTR _atm$[ebp+4], ecx

; 203  : 	atm.tm_isdst = nDST;

  0009a	8b 4d 20	 mov	 ecx, DWORD PTR _nDST$[ebp]

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  0009d	8d 55 d8	 lea	 edx, DWORD PTR _atm$[ebp]
  000a0	48		 dec	 eax
  000a1	52		 push	 edx
  000a2	89 7d e0	 mov	 DWORD PTR _atm$[ebp+8], edi
  000a5	89 5d e4	 mov	 DWORD PTR _atm$[ebp+12], ebx
  000a8	89 45 e8	 mov	 DWORD PTR _atm$[ebp+16], eax
  000ab	89 4d f8	 mov	 DWORD PTR _atm$[ebp+32], ecx
  000ae	e8 00 00 00 00	 call	 __mktime64
  000b3	83 c4 04	 add	 esp, 4
  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 207  : 	if(m_time == -1)

  000b8	23 c2		 and	 eax, edx
  000ba	5f		 pop	 edi
  000bb	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000be	5b		 pop	 ebx
  000bf	83 f8 ff	 cmp	 eax, -1
  000c2	75 0a		 jne	 SHORT $LN1@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  000c4	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN92@CTime:
$LN1@CTime:

; 210  : 	}
; 211  : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	8b c6		 mov	 eax, esi
  000d3	33 cd		 xor	 ecx, ebp
  000d5	5e		 pop	 esi
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 1c 00	 ret	 28			; 0000001cH
$LN85@CTime:
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z		; ATL::CTime::operator-
; Function compile flags: /Ogtp
;	COMDAT ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_time$ = 12						; size = 8
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z PROC		; ATL::CTime::operator-, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 305  : 	return( CTimeSpan( m_time-time.m_time ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	2b 55 0c	 sub	 edx, DWORD PTR _time$[ebp]
  00008	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000b	1b 4d 10	 sbb	 ecx, DWORD PTR _time$[ebp+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 306  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ENDP		; ATL::CTime::operator-
_TEXT	ENDS
PUBLIC	??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z		; ATL::CTime::operator+
; Function compile flags: /Ogtp
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 315  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	03 55 0c	 add	 edx, DWORD PTR _span$[ebp]
  00008	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000b	13 4d 10	 adc	 ecx, DWORD PTR _span$[ebp+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 316  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
EXTRN	__localtime64_s:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_ptmTemp$86878 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _ptm$[ebp]

; 370  : 	// Ensure ptm is valid
; 371  : 	ATLENSURE( ptm != NULL );

  00014	85 db		 test	 ebx, ebx
  00016	75 0a		 jne	 SHORT $LN15@GetLocalTm
  00018	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0001d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN17@GetLocalTm:
$LN15@GetLocalTm:

; 372  : 
; 373  : 	if (ptm != NULL)
; 374  : 	{
; 375  : 		struct tm ptmTemp;
; 376  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00022	51		 push	 ecx
  00023	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$86878[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __localtime64_s
  0002c	83 c4 08	 add	 esp, 8

; 377  : 
; 378  : 		if (err != 0)

  0002f	85 c0		 test	 eax, eax
  00031	74 13		 je	 SHORT $LN1@GetLocalTm

; 379  : 		{
; 380  : 			return NULL;    // indicates that m_time was not initialized!

  00033	33 c0		 xor	 eax, eax
  00035	5b		 pop	 ebx

; 384  : 		return ptm;
; 385  : 	}
; 386  : 
; 387  : 	return NULL;
; 388  : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	33 cd		 xor	 ecx, ebp
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN1@GetLocalTm:
  00046	56		 push	 esi
  00047	57		 push	 edi

; 381  : 		}
; 382  : 
; 383  : 		*ptm = ptmTemp;

  00048	8b fb		 mov	 edi, ebx
  0004a	b9 09 00 00 00	 mov	 ecx, 9
  0004f	8d 75 d8	 lea	 esi, DWORD PTR _ptmTemp$86878[ebp]
  00052	f3 a5		 rep movsd

; 384  : 		return ptm;
; 385  : 	}
; 386  : 
; 387  : 	return NULL;
; 388  : }

  00054	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	8b c3		 mov	 eax, ebx
  0005b	33 cd		 xor	 ecx, ebp
  0005d	5b		 pop	 ebx
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
$LN16@GetLocalTm:
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetYear@CTime@ATL@@QBEHXZ			; ATL::CTime::GetYear
; Function compile flags: /Ogtp
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$210669 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 420  : 	struct tm ttm;
; 421  : 	struct tm * ptm;
; 422  : 
; 423  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$210669[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 16		 jne	 SHORT $LN3@GetYear

; 424  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00021	8b 45 ec	 mov	 eax, DWORD PTR _ptmTemp$210669[ebp+20]
  00024	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH

; 425  : }

  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN3@GetYear:
  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	33 c0		 xor	 eax, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetMonth@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMonth
; Function compile flags: /Ogtp
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$210697 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 429  : 	struct tm ttm;
; 430  : 	struct tm * ptm;
; 431  : 
; 432  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$210697[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 12		 jne	 SHORT $LN3@GetMonth

; 433  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00021	8b 45 e8	 mov	 eax, DWORD PTR _ptmTemp$210697[ebp+16]
  00024	40		 inc	 eax

; 434  : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN3@GetMonth:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 cd		 xor	 ecx, ebp
  00038	33 c0		 xor	 eax, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetDay@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDay
; Function compile flags: /Ogtp
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$210725 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 438  : 	struct tm ttm;
; 439  : 	struct tm * ptm;
; 440  : 
; 441  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$210725[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s

; 442  : 	return ptm ? ptm->tm_mday : 0 ;
; 443  : }

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0001d	83 c4 08	 add	 esp, 8
  00020	f7 d8		 neg	 eax
  00022	1b c0		 sbb	 eax, eax
  00024	f7 d0		 not	 eax
  00026	23 45 e4	 and	 eax, DWORD PTR _ptmTemp$210725[ebp+12]
  00029	33 cd		 xor	 ecx, ebp
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
; Function compile flags: /Ogtp
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$210753 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 447  : 	struct tm ttm;
; 448  : 	struct tm * ptm;
; 449  : 
; 450  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$210753[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 11		 jne	 SHORT $LN3@GetHour

; 451  : 	return ptm ? ptm->tm_hour : -1 ;

  00021	8b 45 e0	 mov	 eax, DWORD PTR _ptmTemp$210753[ebp+8]

; 452  : }

  00024	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00027	33 cd		 xor	 ecx, ebp
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN3@GetHour:
  00032	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00035	33 cd		 xor	 ecx, ebp
  00037	83 c8 ff	 or	 eax, -1
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
; Function compile flags: /Ogtp
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$210781 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 456  : 	struct tm ttm;
; 457  : 	struct tm * ptm;
; 458  : 
; 459  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$210781[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 11		 jne	 SHORT $LN3@GetMinute

; 460  : 	return ptm ? ptm->tm_min : -1 ;

  00021	8b 45 dc	 mov	 eax, DWORD PTR _ptmTemp$210781[ebp+4]

; 461  : }

  00024	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00027	33 cd		 xor	 ecx, ebp
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN3@GetMinute:
  00032	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00035	33 cd		 xor	 ecx, ebp
  00037	83 c8 ff	 or	 eax, -1
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCCashItemPeriodSystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCashItemPeriodSystem@@UAEPAXI@Z PROC		; CCashItemPeriodSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCashItemPeriodSystem@@UAE@XZ ; CCashItemPeriodSystem::~CCashItemPeriodSystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCashItemPeriodSystem@@UAEPAXI@Z ENDP		; CCashItemPeriodSystem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetUserPeriodItemList
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\cashitemperiodsystem.cpp
;	COMDAT ?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GetUserPeriodItemList, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : }

  00003	5d		 pop	 ebp

; 124  : 	this->GDReqPeriodItemList(lpObj);

  00004	e9 00 00 00 00	 jmp	 ?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemList
?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GetUserPeriodItemList
_TEXT	ENDS
PUBLIC	_lpTime$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ; CCashItemPeriodSystem::ConvertStringToTime
EXTRN	_atoi:PROC
EXTRN	_strtok:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z
_TEXT	SEGMENT
_lpTime$GSCopy$ = -40					; size = 4
_tReturnTime$ = -36					; size = 8
_iHour$ = -32						; size = 4
_seps$ = -28						; size = 4
_chDate$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_pchDate$ = 8						; size = 4
_lpTime$ = 12						; size = 4
?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z PROC ; CCashItemPeriodSystem::ConvertStringToTime, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pchDate$[ebp]
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTime$[ebp]

; 173  : 	{
; 174  : 		return;
; 175  : 	}
; 176  : 
; 177  : 	Token = strtok( chDate, seps);

  00016	89 4d d8	 mov	 DWORD PTR _lpTime$GSCopy$[ebp], ecx
  00019	c7 45 e4 2d 3a
	20 00		 mov	 DWORD PTR _seps$[ebp], 2112045 ; 00203a2dH
  00020	85 c0		 test	 eax, eax
  00022	0f 84 c9 00 00
	00		 je	 $LN1@ConvertStr

; 156  : 	int iYear=0;
; 157  : 	int iMonth=0;
; 158  : 	int iDay=0;
; 159  : 	int iHour=0;
; 160  : 	int iMinute=0;
; 161  : 	int iDateLength=0;
; 162  : 	char chDate[20];
; 163  : 	char* Token;
; 164  : 	char seps[4]="-: ";
; 165  : 
; 166  : 	if ( pchDate == NULL || lpTime == NULL )

  00028	85 c9		 test	 ecx, ecx
  0002a	0f 84 c1 00 00
	00		 je	 $LN1@ConvertStr

; 167  : 		return;
; 168  : 
; 169  : 	memcpy(chDate, pchDate, sizeof(chDate));

  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00035	89 55 ec	 mov	 DWORD PTR _chDate$[ebp+4], edx
  00038	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003b	89 4d e8	 mov	 DWORD PTR _chDate$[ebp], ecx
  0003e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00041	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00044	89 45 f8	 mov	 DWORD PTR _chDate$[ebp+16], eax

; 170  : 	iDateLength = strlen(chDate);

  00047	8d 45 e8	 lea	 eax, DWORD PTR _chDate$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR _chDate$[ebp+12], edx
  0004d	89 4d f0	 mov	 DWORD PTR _chDate$[ebp+8], ecx
  00050	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL7@ConvertStr:
  00053	8a 08		 mov	 cl, BYTE PTR [eax]
  00055	40		 inc	 eax
  00056	84 c9		 test	 cl, cl
  00058	75 f9		 jne	 SHORT $LL7@ConvertStr
  0005a	2b c2		 sub	 eax, edx

; 171  : 
; 172  : 	if ( iDateLength <= 0 || iDateLength > 20 )

  0005c	48		 dec	 eax
  0005d	83 f8 13	 cmp	 eax, 19			; 00000013H
  00060	0f 87 8b 00 00
	00		 ja	 $LN1@ConvertStr

; 173  : 	{
; 174  : 		return;
; 175  : 	}
; 176  : 
; 177  : 	Token = strtok( chDate, seps);

  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	8d 4d e4	 lea	 ecx, DWORD PTR _seps$[ebp]
  0006c	51		 push	 ecx
  0006d	8d 55 e8	 lea	 edx, DWORD PTR _chDate$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 _strtok

; 178  : 	iYear = atoi(Token);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _atoi
  0007c	8b f0		 mov	 esi, eax

; 179  : 	Token = strtok( NULL, seps);

  0007e	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  00081	50		 push	 eax
  00082	6a 00		 push	 0
  00084	e8 00 00 00 00	 call	 _strtok

; 180  : 	iMonth = atoi(Token);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _atoi

; 181  : 	Token = strtok( NULL, seps);

  0008f	8d 4d e4	 lea	 ecx, DWORD PTR _seps$[ebp]
  00092	51		 push	 ecx
  00093	6a 00		 push	 0
  00095	8b f8		 mov	 edi, eax
  00097	e8 00 00 00 00	 call	 _strtok

; 182  : 	iDay = atoi(Token);

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _atoi

; 183  : 	Token = strtok( NULL, seps);

  000a2	8d 55 e4	 lea	 edx, DWORD PTR _seps$[ebp]
  000a5	52		 push	 edx
  000a6	6a 00		 push	 0
  000a8	8b d8		 mov	 ebx, eax
  000aa	e8 00 00 00 00	 call	 _strtok

; 184  : 	iHour = atoi(Token);

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _atoi
  000b5	89 45 e0	 mov	 DWORD PTR _iHour$[ebp], eax

; 185  : 	Token = strtok( NULL, seps);

  000b8	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  000bb	50		 push	 eax
  000bc	6a 00		 push	 0
  000be	e8 00 00 00 00	 call	 _strtok

; 186  : 	iMinute = atoi(Token);

  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _atoi

; 187  : 
; 188  : 	CTime tReturnTime(iYear, iMonth, iDay, iHour, iMinute, 0, -1);

  000c9	8b 4d e0	 mov	 ecx, DWORD PTR _iHour$[ebp]
  000cc	83 c4 3c	 add	 esp, 60			; 0000003cH
  000cf	6a ff		 push	 -1
  000d1	6a 00		 push	 0
  000d3	50		 push	 eax
  000d4	51		 push	 ecx
  000d5	53		 push	 ebx
  000d6	57		 push	 edi
  000d7	56		 push	 esi
  000d8	8d 4d dc	 lea	 ecx, DWORD PTR _tReturnTime$[ebp]
  000db	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 189  : 
; 190  : 	*lpTime = tReturnTime;

  000e0	8b 45 d8	 mov	 eax, DWORD PTR _lpTime$GSCopy$[ebp]
  000e3	8b 55 dc	 mov	 edx, DWORD PTR _tReturnTime$[ebp]
  000e6	8b 4d e0	 mov	 ecx, DWORD PTR _tReturnTime$[ebp+4]
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	89 10		 mov	 DWORD PTR [eax], edx
  000ed	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000f0	5b		 pop	 ebx
$LN1@ConvertStr:

; 191  : }

  000f1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f4	33 cd		 xor	 ecx, ebp
  000f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 08 00	 ret	 8
?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ENDP ; CCashItemPeriodSystem::ConvertStringToTime
_TEXT	ENDS
PUBLIC	??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z ; CCashItemPeriodSystem::ConvertTimeToString
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
CONST	SEGMENT
??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@ DB '%d-%d-%d %d:'
	DB	'%d', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\cashitemperiodsystem.cpp
CONST	ENDS
;	COMDAT ?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z
_TEXT	SEGMENT
_iHour$ = -72						; size = 4
_iMonth$ = -68						; size = 4
_iYear$ = -64						; size = 4
_ptmTemp$211048 = -60					; size = 36
_ptmTemp$210998 = -60					; size = 36
_ptmTemp$210949 = -60					; size = 36
_ptmTemp$210899 = -60					; size = 36
_ptmTemp$210848 = -60					; size = 36
_chDate$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_lpTime$ = 8						; size = 4
_pchDate$ = 12						; size = 4
?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z PROC ; CCashItemPeriodSystem::ConvertTimeToString, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _lpTime$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _pchDate$[ebp]

; 195  : 	int iYear=0;
; 196  : 	int iMonth=0;
; 197  : 	int iDay=0;
; 198  : 	int iHour=0;
; 199  : 	int iMinute=0;
; 200  : 	char chDate[20];
; 201  : 
; 202  : 	iYear = lpTime->GetYear();

  00019	8d 45 c4	 lea	 eax, DWORD PTR _ptmTemp$210848[ebp]
  0001c	53		 push	 ebx
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 __localtime64_s
  00023	83 c4 08	 add	 esp, 8
  00026	33 f6		 xor	 esi, esi
  00028	85 c0		 test	 eax, eax
  0002a	75 0e		 jne	 SHORT $LN5@ConvertTim
  0002c	8b 4d d8	 mov	 ecx, DWORD PTR _ptmTemp$210848[ebp+20]
  0002f	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  00035	89 4d c0	 mov	 DWORD PTR _iYear$[ebp], ecx
  00038	eb 03		 jmp	 SHORT $LN6@ConvertTim
$LN5@ConvertTim:
  0003a	89 75 c0	 mov	 DWORD PTR _iYear$[ebp], esi
$LN6@ConvertTim:

; 203  : 	iMonth = lpTime->GetMonth();

  0003d	8d 55 c4	 lea	 edx, DWORD PTR _ptmTemp$210899[ebp]
  00040	53		 push	 ebx
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 __localtime64_s
  00047	83 c4 08	 add	 esp, 8
  0004a	85 c0		 test	 eax, eax
  0004c	75 09		 jne	 SHORT $LN25@ConvertTim
  0004e	8b 45 d4	 mov	 eax, DWORD PTR _ptmTemp$210899[ebp+16]
  00051	40		 inc	 eax
  00052	89 45 bc	 mov	 DWORD PTR _iMonth$[ebp], eax
  00055	eb 03		 jmp	 SHORT $LN26@ConvertTim
$LN25@ConvertTim:
  00057	89 75 bc	 mov	 DWORD PTR _iMonth$[ebp], esi
$LN26@ConvertTim:

; 204  : 	iDay = lpTime->GetDay();

  0005a	8d 4d c4	 lea	 ecx, DWORD PTR _ptmTemp$210949[ebp]
  0005d	53		 push	 ebx
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 __localtime64_s
  00064	f7 d8		 neg	 eax
  00066	1b f6		 sbb	 esi, esi

; 205  : 	iHour = lpTime->GetHour();

  00068	8d 55 c4	 lea	 edx, DWORD PTR _ptmTemp$210998[ebp]
  0006b	53		 push	 ebx
  0006c	f7 d6		 not	 esi
  0006e	23 75 d0	 and	 esi, DWORD PTR _ptmTemp$210949[ebp+12]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 __localtime64_s
  00077	83 c4 10	 add	 esp, 16			; 00000010H
  0007a	85 c0		 test	 eax, eax
  0007c	75 08		 jne	 SHORT $LN63@ConvertTim
  0007e	8b 45 cc	 mov	 eax, DWORD PTR _ptmTemp$210998[ebp+8]
  00081	89 45 b8	 mov	 DWORD PTR _iHour$[ebp], eax
  00084	eb 07		 jmp	 SHORT $LN64@ConvertTim
$LN63@ConvertTim:
  00086	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR _iHour$[ebp], -1
$LN64@ConvertTim:

; 206  : 	iMinute = lpTime->GetMinute();

  0008d	8d 4d c4	 lea	 ecx, DWORD PTR _ptmTemp$211048[ebp]
  00090	53		 push	 ebx
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 __localtime64_s
  00097	83 c4 08	 add	 esp, 8
  0009a	85 c0		 test	 eax, eax
  0009c	75 05		 jne	 SHORT $LN82@ConvertTim
  0009e	8b 45 c8	 mov	 eax, DWORD PTR _ptmTemp$211048[ebp+4]
  000a1	eb 03		 jmp	 SHORT $LN83@ConvertTim
$LN82@ConvertTim:
  000a3	83 c8 ff	 or	 eax, -1
$LN83@ConvertTim:

; 207  : 
; 208  : 	wsprintf(chDate, "%d-%d-%d %d:%d", iYear, iMonth, iDay, iHour, iMinute);

  000a6	8b 55 b8	 mov	 edx, DWORD PTR _iHour$[ebp]
  000a9	8b 4d c0	 mov	 ecx, DWORD PTR _iYear$[ebp]
  000ac	50		 push	 eax
  000ad	8b 45 bc	 mov	 eax, DWORD PTR _iMonth$[ebp]
  000b0	52		 push	 edx
  000b1	56		 push	 esi
  000b2	50		 push	 eax
  000b3	51		 push	 ecx
  000b4	8d 55 e8	 lea	 edx, DWORD PTR _chDate$[ebp]
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
  000bc	52		 push	 edx
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 209  : 	memcpy(pchDate, chDate, sizeof(chDate));

  000c3	8b 45 e8	 mov	 eax, DWORD PTR _chDate$[ebp]
  000c6	8b 4d ec	 mov	 ecx, DWORD PTR _chDate$[ebp+4]
  000c9	8b 55 f0	 mov	 edx, DWORD PTR _chDate$[ebp+8]
  000cc	89 07		 mov	 DWORD PTR [edi], eax
  000ce	8b 45 f4	 mov	 eax, DWORD PTR _chDate$[ebp+12]
  000d1	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _chDate$[ebp+16]
  000d7	83 c4 1c	 add	 esp, 28			; 0000001cH
  000da	89 57 08	 mov	 DWORD PTR [edi+8], edx
  000dd	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  000e0	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 210  : }

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	33 cd		 xor	 ecx, ebp
  000ea	5b		 pop	 ebx
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z ENDP ; CCashItemPeriodSystem::ConvertTimeToString
_TEXT	ENDS
PUBLIC	?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
EXTRN	?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z:PROC ; CItemAddOption::ClearItemEffect2
; Function compile flags: /Ogtp
;	COMDAT ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_ItemCode$ = 12						; size = 4
?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::ClearPeriodItemEffect, COMDAT
; _this$ = ecx

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 282  : 	int iItemInfoIndex =0 ;
; 283  : 	iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  00004	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00007	8b 82 80 20 00
	00		 mov	 eax, DWORD PTR [edx+8320]
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 284  : 
; 285  : 	if ( iItemInfoIndex < 0 || iItemInfoIndex > MAX_ITEM_PERIOD_INFO )

  00010	3d dc 05 00 00	 cmp	 eax, 1500		; 000005dcH
  00015	0f 87 d8 00 00
	00		 ja	 $LN16@ClearPerio

; 287  : 
; 288  : 	if ( this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo != TRUE )

  0001b	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00021	03 c1		 add	 eax, ecx
  00023	80 78 08 01	 cmp	 BYTE PTR [eax+8], 1
  00027	74 0c		 je	 SHORT $LN14@ClearPerio

; 289  : 	{
; 290  : 		if ( this->ItemPeriodInfo[iItemInfoIndex].wdUserIndex != lpObj->m_Index )

  00029	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  0002d	3b 0a		 cmp	 ecx, DWORD PTR [edx]

; 291  : 		{
; 292  : 			return FALSE;

  0002f	0f 85 be 00 00
	00		 jne	 $LN16@ClearPerio
$LN14@ClearPerio:

; 293  : 		}
; 294  : 	}
; 295  : 
; 296  : 	this->ItemPeriodInfo[iItemInfoIndex].btCountItems--;

  00035	fe 48 09	 dec	 BYTE PTR [eax+9]
  00038	53		 push	 ebx
  00039	56		 push	 esi
  0003a	57		 push	 edi

; 297  : 
; 298  : #ifdef DEBUG_CODE2
; 299  : 	LogAddC(2,"%d --- %d",this->ItemPeriodInfo[iItemInfoIndex].btCountItems, ItemCode);
; 300  : #endif
; 301  : 
; 302  : 	if( this->ItemPeriodInfo[iItemInfoIndex].btCountItems == 0 || ItemCode == -1 )

  0003b	74 3e		 je	 SHORT $LN12@ClearPerio
  0003d	83 7d 0c ff	 cmp	 DWORD PTR _ItemCode$[ebp], -1
  00041	74 38		 je	 SHORT $LN12@ClearPerio

; 324  : 	}
; 325  : 	else
; 326  : 	{
; 327  : 		int iOptionIndex = 0;//Seasl Of Hellin nado perenesti na if
; 328  : 
; 329  : 		for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00043	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  00046	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
  0004b	33 db		 xor	 ebx, ebx
  0004d	8d 49 00	 npad	 3
$LL26@ClearPerio:

; 330  : 		{
; 331  : //#ifdef DEBUG_CODE2
; 332  : //			LogAddC(2,"%d -> %d",this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode ,ItemCode);
; 333  : //#endif
; 334  : 			if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode == ItemCode )

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	3b 45 0c	 cmp	 eax, DWORD PTR _ItemCode$[ebp]
  00055	75 1c		 jne	 SHORT $LN6@ClearPerio

; 335  : 			{
; 336  : 				g_ItemAddOption.ClearItemEffect2(lpObj,this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode,2);

  00057	6a 02		 push	 2
  00059	50		 push	 eax
  0005a	52		 push	 edx
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00060	e8 00 00 00 00	 call	 ?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::ClearItemEffect2

; 337  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse = false;
; 338  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode = 0;
; 339  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btOptionType = 0;
; 340  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType1 = 0;
; 341  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType2 = 0;
; 342  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime = 0;
; 343  : 				this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime = 0;

  00065	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00068	89 1e		 mov	 DWORD PTR [esi], ebx
  0006a	89 5e fc	 mov	 DWORD PTR [esi-4], ebx
  0006d	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00070	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
$LN6@ClearPerio:

; 324  : 	}
; 325  : 	else
; 326  : 	{
; 327  : 		int iOptionIndex = 0;//Seasl Of Hellin nado perenesti na if
; 328  : 
; 329  : 		for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00073	83 c6 10	 add	 esi, 16			; 00000010H
  00076	4f		 dec	 edi
  00077	75 d7		 jne	 SHORT $LL26@ClearPerio

; 284  : 
; 285  : 	if ( iItemInfoIndex < 0 || iItemInfoIndex > MAX_ITEM_PERIOD_INFO )

  00079	eb 4b		 jmp	 SHORT $LN5@ClearPerio
$LN12@ClearPerio:

; 303  : 	{
; 304  : 
; 305  : 		this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo = FALSE;

  0007b	33 db		 xor	 ebx, ebx

; 306  : 		this->ItemPeriodInfo[iItemInfoIndex].wdUserIndex = 0;

  0007d	33 c9		 xor	 ecx, ecx

; 307  : 		this->ItemPeriodInfo[iItemInfoIndex].iUserGuid = 0;

  0007f	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  00082	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 308  : 		this->ItemPeriodInfo[iItemInfoIndex].btCountItems = 0;
; 309  : 		this->ItemPeriodInfo[iItemInfoIndex].dwItemCheckTickCount = 0;

  00085	89 58 10	 mov	 DWORD PTR [eax+16], ebx

; 310  : 		this->ItemPeriodInfo[iItemInfoIndex].chCharacterName[0] = NULL;

  00088	88 58 14	 mov	 BYTE PTR [eax+20], bl
  0008b	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  0008e	8d 7b 0a	 lea	 edi, DWORD PTR [ebx+10]
  00091	eb 03		 jmp	 SHORT $LN11@ClearPerio
$LL24@ClearPerio:

; 303  : 	{
; 304  : 
; 305  : 		this->ItemPeriodInfo[iItemInfoIndex].btUsedInfo = FALSE;

  00093	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
$LN11@ClearPerio:

; 311  : 
; 312  : 		for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )
; 313  : 		{
; 314  : 			g_ItemAddOption.ClearItemEffect2(lpObj,this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode,2);

  00096	8b 06		 mov	 eax, DWORD PTR [esi]
  00098	6a 02		 push	 2
  0009a	50		 push	 eax
  0009b	52		 push	 edx
  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  000a1	e8 00 00 00 00	 call	 ?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::ClearItemEffect2

; 315  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse = false;
; 316  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode = 0;

  000a6	89 1e		 mov	 DWORD PTR [esi], ebx
  000a8	89 5e fc	 mov	 DWORD PTR [esi-4], ebx

; 317  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btOptionType = 0;
; 318  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType1 = 0;
; 319  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btEffectType2 = 0;
; 320  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime = 0;

  000ab	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 321  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime = 0;

  000ae	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000b1	83 c6 10	 add	 esi, 16			; 00000010H
  000b4	4f		 dec	 edi
  000b5	75 dc		 jne	 SHORT $LL24@ClearPerio

; 322  : 		}
; 323  : 		lpObj->m_iPeriodItemEffectIndex = -1;

  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000ba	c7 81 80 20 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+8320], -1
  000c4	8b d1		 mov	 edx, ecx
$LN5@ClearPerio:

; 344  : 			}
; 345  : 		}
; 346  : 	}
; 347  : 
; 348  : 	int iEffectIndex = 0;
; 349  : 
; 350  : 	iEffectIndex = this->GetItemPeriodInfoEffectID(ItemCode);

  000c6	8b 45 0c	 mov	 eax, DWORD PTR _ItemCode$[ebp]
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?GetItemPeriodInfoEffectID@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetItemPeriodInfoEffectID
  000d2	5f		 pop	 edi

; 351  : 
; 352  : 	switch(iEffectIndex) //Leaps

  000d3	83 c0 ce	 add	 eax, -50		; ffffffceH
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	83 f8 04	 cmp	 eax, 4
  000db	77 0b		 ja	 SHORT $LN2@ClearPerio

; 353  : 	{
; 354  : 	case AT_CSHOP_LEAP_OF_STRENGTH:
; 355  : 	case AT_CSHOP_LEAP_OF_QUICKNESS:
; 356  : 	case AT_CSHOP_LEAP_OF_HEALTH:
; 357  : 	case AT_CSHOP_LEAP_OF_ENERGY:
; 358  : 	case AT_CSHOP_LEAP_OF_CONTROL:
; 359  : 		gObjCalCharacter(lpObj->m_Index);

  000dd	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  000e5	83 c4 04	 add	 esp, 4
$LN2@ClearPerio:

; 360  : 		break;
; 361  : 	}
; 362  : 
; 363  : 	return TRUE;

  000e8	b8 01 00 00 00	 mov	 eax, 1

; 364  : }

  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN16@ClearPerio:

; 286  : 		return FALSE;

  000f3	33 c0		 xor	 eax, eax

; 364  : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::ClearPeriodItemEffect
_TEXT	ENDS
PUBLIC	??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ ; `string'
PUBLIC	?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
CONST	SEGMENT
??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemUpdate Ans] - ID : %s, Name : %s, ItemCode '
	DB	': %d, Result %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
CONST	SEGMENT
??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemUpdate Ans] Remove Item Effect - ID : %s, N'
	DB	'ame : %s, ItemCode : %d, Result : %d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate, COMDAT
; _this$ = ecx

; 549  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 550  : 	int iUserIndex = aRecv->iUserIndex;

  00004	8b 7d 08	 mov	 edi, DWORD PTR _aRecv$[ebp]
  00007	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 551  : 
; 552  : 	if ( iUserIndex < 0 || iUserIndex > OBJMAX )

  0000a	3d 98 3a 00 00	 cmp	 eax, 15000		; 00003a98H
  0000f	0f 87 85 00 00
	00		 ja	 $LN6@DGAnsPerio@2

; 553  : 		return;
; 554  : 
; 555  : 	LPOBJ lpObj = &gObj[iUserIndex];

  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00021	56		 push	 esi
  00022	8b f0		 mov	 esi, eax

; 556  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;
; 557  : 
; 558  : 	if ( lpObj->m_iPeriodItemEffectIndex < 0 || lpObj->m_iPeriodItemEffectIndex >=MAX_ITEM_PERIOD_INFO )

  00024	8b 86 80 20 00
	00		 mov	 eax, DWORD PTR [esi+8320]
  0002a	85 c0		 test	 eax, eax
  0002c	78 6b		 js	 SHORT $LN12@DGAnsPerio@2
  0002e	3d dc 05 00 00	 cmp	 eax, 1500		; 000005dcH
  00033	7d 64		 jge	 SHORT $LN12@DGAnsPerio@2

; 559  : 		return;
; 560  : 
; 561  : 	lpItemInfo = &this->ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];

  00035	8b d0		 mov	 edx, eax
  00037	69 d2 b8 00 00
	00		 imul	 edx, 184		; 000000b8H

; 562  : 
; 563  : 	if ( lpObj->m_iPeriodItemEffectIndex != lpItemInfo->wdUserIndex )

  0003d	0f b7 54 0a 0a	 movzx	 edx, WORD PTR [edx+ecx+10]
  00042	3b c2		 cmp	 eax, edx
  00044	75 53		 jne	 SHORT $LN12@DGAnsPerio@2

; 564  : 		return;
; 565  : 
; 566  : 	switch ( aRecv->btResult )

  00046	80 7f 0c 03	 cmp	 BYTE PTR [edi+12], 3
  0004a	75 2e		 jne	 SHORT $LN1@DGAnsPerio@2

; 567  : 	{
; 568  : 		case 3:
; 569  : 			if ( this->ClearPeriodItemEffect(lpObj, aRecv->iItemCode) == TRUE )

  0004c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004f	50		 push	 eax
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
  00056	83 f8 01	 cmp	 eax, 1
  00059	75 1f		 jne	 SHORT $LN1@DGAnsPerio@2

; 570  : 			{		
; 571  : 				LogAddTD("[CashShop][PeriodItemUpdate Ans] Remove Item Effect - ID : %s, Name : %s, ItemCode : %d, Result : %d", lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btResult);

  0005b	0f b6 4f 0c	 movzx	 ecx, BYTE PTR [edi+12]
  0005f	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00062	51		 push	 ecx
  00063	52		 push	 edx
  00064	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  00067	50		 push	 eax
  00068	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0006b	51		 push	 ecx
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00077	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@DGAnsPerio@2:

; 572  : 			}
; 573  : 	}
; 574  : 
; 575  : 	LogAddTD("[CashShop][PeriodItemUpdate Ans] - ID : %s, Name : %s, ItemCode : %d, Result %d",
; 576  : 		lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btResult);

  0007a	0f b6 57 0c	 movzx	 edx, BYTE PTR [edi+12]
  0007e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00081	52		 push	 edx
  00082	50		 push	 eax
  00083	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  00086	51		 push	 ecx
  00087	83 c6 6c	 add	 esi, 108		; 0000006cH
  0008a	56		 push	 esi
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00096	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@DGAnsPerio@2:
  00099	5e		 pop	 esi
$LN6@DGAnsPerio@2:
  0009a	5f		 pop	 edi

; 577  : }

  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
_TEXT	ENDS
PUBLIC	?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect
EXTRN	?SearchItemOptionType@CItemAddOption@@QAEHH@Z:PROC ; CItemAddOption::SearchItemOptionType
; Function compile flags: /Ogtp
;	COMDAT ?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_iOptionType$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect, COMDAT
; _this$ = ecx

; 625  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 626  : 	int iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;
; 627  : 	int iOptionType = 0;
; 628  : 
; 629  : 	iOptionType = g_ItemAddOption.SearchItemOptionType( iItemCode );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0000a	56		 push	 esi
  0000b	8b b3 80 20 00
	00		 mov	 esi, DWORD PTR [ebx+8320]
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
  00014	50		 push	 eax
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  0001a	e8 00 00 00 00	 call	 ?SearchItemOptionType@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOptionType
  0001f	89 45 08	 mov	 DWORD PTR _iOptionType$[ebp], eax

; 630  : 
; 631  : 	if( iItemInfoIndex == -1 )

  00022	83 fe ff	 cmp	 esi, -1

; 632  : 		return true;

  00025	74 30		 je	 SHORT $LN2@SearchAndD

; 633  : 
; 634  : 	if( this->ItemPeriodInfo[iItemInfoIndex].iUserGuid != lpObj->DBNumber )

  00027	69 f6 b8 00 00
	00		 imul	 esi, 184		; 000000b8H
  0002d	8b 4c 3e 0c	 mov	 ecx, DWORD PTR [esi+edi+12]
  00031	3b 4b 2c	 cmp	 ecx, DWORD PTR [ebx+44]

; 635  : 		return false;

  00034	75 3c		 jne	 SHORT $LN12@SearchAndD

; 636  : 
; 637  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00036	33 c9		 xor	 ecx, ecx
  00038	8d 54 3e 21	 lea	 edx, DWORD PTR [esi+edi+33]
  0003c	8d 64 24 00	 npad	 4
$LL4@SearchAndD:

; 638  : 	{
; 639  : 		if( this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].bInUse == true &&
; 640  : 			this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].btOptionType == iOptionType )

  00040	80 7a ff 01	 cmp	 BYTE PTR [edx-1], 1
  00044	75 08		 jne	 SHORT $LN3@SearchAndD
  00046	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00049	3b 45 08	 cmp	 eax, DWORD PTR _iOptionType$[ebp]
  0004c	74 12		 je	 SHORT $LN10@SearchAndD
$LN3@SearchAndD:

; 636  : 
; 637  : 	for( int iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  0004e	41		 inc	 ecx
  0004f	83 c2 10	 add	 edx, 16			; 00000010H
  00052	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00055	7c e9		 jl	 SHORT $LL4@SearchAndD
$LN2@SearchAndD:
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 644  : 		}
; 645  : 	}
; 646  : 
; 647  : 	return true;

  00059	b0 01		 mov	 al, 1
  0005b	5b		 pop	 ebx

; 648  : }

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN10@SearchAndD:

; 641  : 		{
; 642  : 			this->ClearPeriodItemEffect(lpObj,this->ItemPeriodInfo[iItemInfoIndex].vItemEffect[iOptionIndex].iItemCode);

  00060	c1 e1 04	 shl	 ecx, 4
  00063	03 ce		 add	 ecx, esi
  00065	8b 4c 39 24	 mov	 ecx, DWORD PTR [ecx+edi+36]
  00069	51		 push	 ecx
  0006a	53		 push	 ebx
  0006b	8b cf		 mov	 ecx, edi
  0006d	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
$LN12@SearchAndD:

; 643  : 			return false;

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	32 c0		 xor	 al, al
  00076	5b		 pop	 ebx

; 648  : }

  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect
_TEXT	ENDS
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	return( CTime( ::_time64( NULL ) ) );

  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 __time64
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	89 01		 mov	 DWORD PTR [ecx], eax
  0000f	83 c4 04	 add	 esp, 4
  00012	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00015	8b c1		 mov	 eax, ecx

; 144  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
PUBLIC	?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ; CCashItemPeriodSystem::PeriodCheckThread
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\cashitemperiodsystem.cpp
;	COMDAT ?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z
_TEXT	SEGMENT
_dwCurrentTick$ = -12					; size = 4
tv672 = -8						; size = 4
tv640 = -4						; size = 4
_lpPeriodInfo$ = 8					; size = 4
?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z PROC	; CCashItemPeriodSystem::PeriodCheckThread, COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 71   : 	ITEMPERIOD_INFO* lpPeriodInfoList = (ITEMPERIOD_INFO *)lpPeriodInfo;
; 72   : 	int iIndex = 0;
; 73   : 	DWORD dwCurrentTick = 0;

  00009	33 ff		 xor	 edi, edi
  0000b	eb 03 8d 49 00	 npad	 5
$LL14@PeriodChec:

; 74   : 	LPOBJ lpObj = NULL;
; 75   : 	int iUseTime = 0;
; 76   : 	int iOptionIndex = 0;
; 77   : 
; 78   : 	while ( true )
; 79   : 	{
; 80   : 		if ( (GetTickCount() - dwCurrentTick) > 10000 )

  00010	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00016	ff d6		 call	 esi
  00018	2b c7		 sub	 eax, edi
  0001a	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  0001f	0f 86 93 00 00
	00		 jbe	 $LN12@PeriodChec

; 81   : 		{
; 82   : 			dwCurrentTick = GetTickCount();

  00025	ff d6		 call	 esi
  00027	8b 7d 08	 mov	 edi, DWORD PTR _lpPeriodInfo$[ebp]
  0002a	83 c7 08	 add	 edi, 8
  0002d	89 45 f4	 mov	 DWORD PTR _dwCurrentTick$[ebp], eax
  00030	89 7d fc	 mov	 DWORD PTR tv640[ebp], edi
  00033	c7 45 f8 dc 05
	00 00		 mov	 DWORD PTR tv672[ebp], 1500 ; 000005dcH
$LN11@PeriodChec:

; 85   : 			{
; 86   : 				if ( lpPeriodInfoList[iIndex].btUsedInfo == 1 )

  0003a	80 7f f8 01	 cmp	 BYTE PTR [edi-8], 1
  0003e	75 62		 jne	 SHORT $LN10@PeriodChec

; 87   : 				{
; 88   : 					iUseTime = GetTickCount() - lpPeriodInfoList[iIndex].dwItemCheckTickCount;

  00040	ff d6		 call	 esi
  00042	2b 07		 sub	 eax, DWORD PTR [edi]

; 89   : 
; 90   : 					if ( iUseTime > 60000 )

  00044	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  00049	7e 57		 jle	 SHORT $LN10@PeriodChec

; 91   : 					{
; 92   : 						lpPeriodInfoList[iIndex].dwItemCheckTickCount = GetTickCount();

  0004b	ff d6		 call	 esi
  0004d	89 07		 mov	 DWORD PTR [edi], eax

; 93   : 						
; 94   : 						for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  0004f	33 db		 xor	 ebx, ebx
  00051	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
$LL6@PeriodChec:

; 95   : 						{
; 96   : 							if( lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].bInUse == true )

  00054	80 7e f4 01	 cmp	 BYTE PTR [esi-12], 1
  00058	75 39		 jne	 SHORT $LN5@PeriodChec

; 97   : 							{
; 98   : 								lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime--;

  0005a	ff 0e		 dec	 DWORD PTR [esi]
  0005c	8b 06		 mov	 eax, DWORD PTR [esi]

; 99   : 								lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime++;

  0005e	ff 46 fc	 inc	 DWORD PTR [esi-4]

; 100  : 								
; 101  : 								if ( lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime <= 0 )

  00061	85 c0		 test	 eax, eax
  00063	75 2e		 jne	 SHORT $LN5@PeriodChec

; 102  : 								{
; 103  : 									lpObj = &gObj[lpPeriodInfoList[iIndex].wdUserIndex];

  00065	0f b7 7f fa	 movzx	 edi, WORD PTR [edi-6]
  00069	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0006f	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 104  : 									g_CashItemPeriodSystem.GDReqPeriodItemUpdate(lpObj, iOptionIndex );

  00075	53		 push	 ebx
  00076	57		 push	 edi
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  0007c	e8 00 00 00 00	 call	 ?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::GDReqPeriodItemUpdate

; 105  : 									g_CashItemPeriodSystem.ClearPeriodItemEffect(lpObj, lpPeriodInfoList[iIndex].vItemEffect[iOptionIndex].iItemCode );

  00081	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00084	50		 push	 eax
  00085	57		 push	 edi
  00086	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  0008b	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
  00090	8b 7d fc	 mov	 edi, DWORD PTR tv640[ebp]
$LN5@PeriodChec:

; 93   : 						
; 94   : 						for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00093	43		 inc	 ebx
  00094	83 c6 10	 add	 esi, 16			; 00000010H
  00097	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  0009a	7c b8		 jl	 SHORT $LL6@PeriodChec
  0009c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
$LN10@PeriodChec:

; 83   : 
; 84   : 			for ( iIndex=0;iIndex<MAX_ITEM_PERIOD_INFO;iIndex++)

  000a2	81 c7 b8 00 00
	00		 add	 edi, 184		; 000000b8H
  000a8	ff 4d f8	 dec	 DWORD PTR tv672[ebp]
  000ab	89 7d fc	 mov	 DWORD PTR tv640[ebp], edi
  000ae	75 8a		 jne	 SHORT $LN11@PeriodChec

; 106  : 								}
; 107  : 							}
; 108  : 						}
; 109  : 					}
; 110  : 				}
; 111  : 			}
; 112  : 		}
; 113  : 		else

  000b0	8b 7d f4	 mov	 edi, DWORD PTR _dwCurrentTick$[ebp]
  000b3	e9 58 ff ff ff	 jmp	 $LL14@PeriodChec
$LN12@PeriodChec:

; 114  : 		{
; 115  : 			Sleep(10);

  000b8	6a 0a		 push	 10			; 0000000aH
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 116  : 		}
; 117  : 	}

  000c0	e9 4b ff ff ff	 jmp	 $LL14@PeriodChec
?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ENDP	; CCashItemPeriodSystem::PeriodCheckThread
_TEXT	ENDS
PUBLIC	?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z ; CCashItemPeriodSystem::CalcItemUseLeftTime
; Function compile flags: /Ogtp
;	COMDAT ?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z
_TEXT	SEGMENT
_tBuyTime$ = -8						; size = 8
_pchBuyDate$ = 8					; size = 4
?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z PROC ; CCashItemPeriodSystem::CalcItemUseLeftTime, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 129  : 	int iUsedTime = 0;
; 130  : 	CTime tCurrentTime = CTime::GetTickCount();

  00009	6a 00		 push	 0
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 __time64

; 131  : 	CTime tBuyTime;
; 132  : 	CTimeSpan tTimeSpan;
; 133  : 
; 134  : 	this->ConvertStringToTime(pchBuyDate, &tBuyTime);

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _pchBuyDate$[ebp]
  00015	8b f8		 mov	 edi, eax
  00017	33 c0		 xor	 eax, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 f8	 mov	 DWORD PTR _tBuyTime$[ebp], eax
  0001f	89 45 fc	 mov	 DWORD PTR _tBuyTime$[ebp+4], eax
  00022	8d 45 f8	 lea	 eax, DWORD PTR _tBuyTime$[ebp]
  00025	50		 push	 eax
  00026	51		 push	 ecx
  00027	8b ce		 mov	 ecx, esi
  00029	8b da		 mov	 ebx, edx
  0002b	e8 00 00 00 00	 call	 ?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ; CCashItemPeriodSystem::ConvertStringToTime

; 135  : 	tCurrentTime - tBuyTime;
; 136  : 	tTimeSpan = tBuyTime - tCurrentTime;

  00030	8b 55 f8	 mov	 edx, DWORD PTR _tBuyTime$[ebp]
  00033	8b 45 fc	 mov	 eax, DWORD PTR _tBuyTime$[ebp+4]

; 137  : 	iUsedTime = tTimeSpan.GetTotalMinutes();

  00036	6a 00		 push	 0
  00038	2b d7		 sub	 edx, edi
  0003a	6a 3c		 push	 60			; 0000003cH
  0003c	1b c3		 sbb	 eax, ebx
  0003e	50		 push	 eax
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 __alldiv
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 138  : 
; 139  : 	return iUsedTime;
; 140  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z ENDP ; CCashItemPeriodSystem::CalcItemUseLeftTime
_TEXT	ENDS
PUBLIC	?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ; CCashItemPeriodSystem::CalcItemUseEndTime
; Function compile flags: /Ogtp
;	COMDAT ?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_iLeftTime$ = 12					; size = 4
?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z PROC ; CCashItemPeriodSystem::CalcItemUseEndTime, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 144  : 	CTime tExpireTime;
; 145  : 	CTime tCurrentTime = CTime::GetTickCount();
; 146  : 
; 147  : 	CTimeSpan tLeftTime(0, 0, iLeftTime, 0);
; 148  : 
; 149  : 	tExpireTime = tCurrentTime + tLeftTime;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iLeftTime$[ebp]
  00006	53		 push	 ebx
  00007	99		 cdq
  00008	8b c8		 mov	 ecx, eax
  0000a	8b da		 mov	 ebx, edx
  0000c	0f a4 cb 04	 shld	 ebx, ecx, 4
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00014	c1 e1 04	 shl	 ecx, 4
  00017	57		 push	 edi
  00018	2b c8		 sub	 ecx, eax
  0001a	1b da		 sbb	 ebx, edx
  0001c	8b f9		 mov	 edi, ecx
  0001e	0f a4 fb 02	 shld	 ebx, edi, 2
  00022	03 ff		 add	 edi, edi
  00024	6a 00		 push	 0
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00033	03 ff		 add	 edi, edi
  00035	e8 00 00 00 00	 call	 __time64
  0003a	83 c4 04	 add	 esp, 4
  0003d	03 c7		 add	 eax, edi
  0003f	13 d3		 adc	 edx, ebx
  00041	89 06		 mov	 DWORD PTR [esi], eax
  00043	5f		 pop	 edi
  00044	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 150  : 
; 151  : 	return tExpireTime;

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 152  : }

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ENDP ; CCashItemPeriodSystem::CalcItemUseEndTime
_TEXT	ENDS
PUBLIC	?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect
; Function compile flags: /Ogtp
;	COMDAT ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z
_TEXT	SEGMENT
_iOptionEffect$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_btEffectType1$ = 16					; size = 1
_btEffectType2$ = 20					; size = 1
_dwItemPeriod$ = 24					; size = 4
?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z PROC ; CCashItemPeriodSystem::SetPeriodItemEffect, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 214  : 	int iPeriodItemEffectIndex = - 1;
; 215  : 	int iOptionEffect = 0;
; 216  : 	int iIndex = 0;
; 217  : 	int iOptionIndex = 0;
; 218  : 
; 219  : 	iOptionEffect = g_ItemAddOption.SearchItemOptionType(iItemCode);

  00005	8b 75 0c	 mov	 esi, DWORD PTR _iItemCode$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	56		 push	 esi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00011	e8 00 00 00 00	 call	 ?SearchItemOptionType@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOptionType
  00016	89 45 fc	 mov	 DWORD PTR _iOptionEffect$[ebp], eax

; 220  : 
; 221  : 	if( iOptionEffect == -1 )

  00019	83 f8 ff	 cmp	 eax, -1
  0001c	75 0a		 jne	 SHORT $LN11@SetPeriodI

; 222  : 		return FALSE;

  0001e	5f		 pop	 edi
  0001f	33 c0		 xor	 eax, eax
  00021	5e		 pop	 esi

; 277  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 14 00	 ret	 20			; 00000014H
$LN11@SetPeriodI:
  00028	53		 push	 ebx

; 223  : 
; 224  : 	this->SearchAndDeleteItemPeriodEffect(lpObj,iItemCode);

  00029	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?SearchAndDeleteItemPeriodEffect@CCashItemPeriodSystem@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::SearchAndDeleteItemPeriodEffect

; 225  : 
; 226  : 	if ( lpObj->m_iPeriodItemEffectIndex != -1 )

  00035	8b 8b 80 20 00
	00		 mov	 ecx, DWORD PTR [ebx+8320]
  0003b	83 f9 ff	 cmp	 ecx, -1
  0003e	74 77		 je	 SHORT $LN10@SetPeriodI

; 227  : 	{
; 228  : 		iPeriodItemEffectIndex = lpObj->m_iPeriodItemEffectIndex;
; 229  : 
; 230  : 		this->ItemPeriodInfo[iPeriodItemEffectIndex].btCountItems++;

  00040	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00046	fe 44 39 09	 inc	 BYTE PTR [ecx+edi+9]

; 231  : 
; 232  : 		for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  0004a	33 c0		 xor	 eax, eax
  0004c	8d 54 39 20	 lea	 edx, DWORD PTR [ecx+edi+32]
$LL9@SetPeriodI:

; 233  : 		{
; 234  : 			if( this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].bInUse == false )

  00050	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00053	74 14		 je	 SHORT $LN16@SetPeriodI

; 231  : 
; 232  : 		for( iOptionIndex = 0; iOptionIndex < MAX_ITEM_PERIOD_EFFECT; iOptionIndex++ )

  00055	40		 inc	 eax
  00056	83 c2 10	 add	 edx, 16			; 00000010H
  00059	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005c	7c f2		 jl	 SHORT $LL9@SetPeriodI

; 273  : 			}
; 274  : 		}
; 275  : 	}
; 276  : 	return FALSE;

  0005e	5b		 pop	 ebx
  0005f	5f		 pop	 edi
  00060	33 c0		 xor	 eax, eax
  00062	5e		 pop	 esi

; 277  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 14 00	 ret	 20			; 00000014H
$LN16@SetPeriodI:

; 235  : 			{
; 236  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].bInUse = true;

  00069	8d 50 02	 lea	 edx, DWORD PTR [eax+2]

; 237  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].iItemCode = iItemCode;

  0006c	c1 e0 04	 shl	 eax, 4
  0006f	03 c1		 add	 eax, ecx
  00071	03 c7		 add	 eax, edi
  00073	c1 e2 04	 shl	 edx, 4
  00076	03 d1		 add	 edx, ecx

; 238  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].btEffectType1 = btEffectType1;

  00078	8a 4d 10	 mov	 cl, BYTE PTR _btEffectType1$[ebp]
  0007b	88 48 22	 mov	 BYTE PTR [eax+34], cl

; 239  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].btEffectType2 = btEffectType2;
; 240  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].btOptionType = iOptionEffect;

  0007e	0f b6 4d fc	 movzx	 ecx, BYTE PTR _iOptionEffect$[ebp]
  00082	88 48 21	 mov	 BYTE PTR [eax+33], cl

; 241  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].iItemPeriodLeftTime = dwItemPeriod;

  00085	8b 4d 18	 mov	 ecx, DWORD PTR _dwItemPeriod$[ebp]

; 242  : 				this->ItemPeriodInfo[iPeriodItemEffectIndex].vItemEffect[iOptionIndex].iItemPeriodUsedTime = 0;
; 243  : 
; 244  : 				this->ApplyItemPeriodEffect(lpObj,iItemCode,dwItemPeriod);

  00088	51		 push	 ecx
  00089	c6 04 3a 01	 mov	 BYTE PTR [edx+edi], 1
  0008d	8a 55 14	 mov	 dl, BYTE PTR _btEffectType2$[ebp]
  00090	56		 push	 esi
  00091	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00094	53		 push	 ebx
  00095	8b cf		 mov	 ecx, edi
  00097	89 70 24	 mov	 DWORD PTR [eax+36], esi
  0009a	88 50 23	 mov	 BYTE PTR [eax+35], dl
  0009d	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  000a4	e8 00 00 00 00	 call	 ?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::ApplyItemPeriodEffect
  000a9	5b		 pop	 ebx
  000aa	5f		 pop	 edi

; 245  : 				return TRUE;

  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	5e		 pop	 esi

; 277  : }

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 14 00	 ret	 20			; 00000014H
$LN10@SetPeriodI:

; 246  : 			}
; 247  : 		}
; 248  : 	}
; 249  : 	else
; 250  : 	{
; 251  : 		 
; 252  : 		for( iIndex = 0; iIndex < MAX_ITEM_PERIOD_INFO; iIndex++ )

  000b7	33 c0		 xor	 eax, eax
  000b9	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000bc	8d 64 24 00	 npad	 4
$LL4@SetPeriodI:

; 253  : 		{
; 254  : 			if( this->ItemPeriodInfo[iIndex].btUsedInfo == FALSE )

  000c0	80 39 00	 cmp	 BYTE PTR [ecx], 0
  000c3	74 19		 je	 SHORT $LN17@SetPeriodI

; 246  : 			}
; 247  : 		}
; 248  : 	}
; 249  : 	else
; 250  : 	{
; 251  : 		 
; 252  : 		for( iIndex = 0; iIndex < MAX_ITEM_PERIOD_INFO; iIndex++ )

  000c5	40		 inc	 eax
  000c6	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  000cc	3d dc 05 00 00	 cmp	 eax, 1500		; 000005dcH
  000d1	7c ed		 jl	 SHORT $LL4@SetPeriodI

; 273  : 			}
; 274  : 		}
; 275  : 	}
; 276  : 	return FALSE;

  000d3	5b		 pop	 ebx
  000d4	5f		 pop	 edi
  000d5	33 c0		 xor	 eax, eax
  000d7	5e		 pop	 esi

; 277  : }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 14 00	 ret	 20			; 00000014H
$LN17@SetPeriodI:

; 255  : 			{
; 256  : 				lpObj->m_iPeriodItemEffectIndex = iIndex;

  000de	89 83 80 20 00
	00		 mov	 DWORD PTR [ebx+8320], eax

; 257  : 				this->ItemPeriodInfo[iIndex].btUsedInfo = TRUE;

  000e4	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  000ea	8d 34 38	 lea	 esi, DWORD PTR [eax+edi]
  000ed	c6 46 08 01	 mov	 BYTE PTR [esi+8], 1

; 258  : 				this->ItemPeriodInfo[iIndex].iUserGuid = lpObj->DBNumber;

  000f1	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  000f4	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 259  : 				this->ItemPeriodInfo[iIndex].wdUserIndex = lpObj->m_Index;

  000f7	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000fa	66 89 46 0a	 mov	 WORD PTR [esi+10], ax

; 260  : 				this->ItemPeriodInfo[iIndex].dwItemCheckTickCount = GetTickCount();

  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00104	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 261  : 				this->ItemPeriodInfo[iIndex].btCountItems = 1;

  00107	c6 46 09 01	 mov	 BYTE PTR [esi+9], 1

; 262  : 				memcpy(this->ItemPeriodInfo[iIndex].chCharacterName,lpObj->Name,11);

  0010b	8b 4b 77	 mov	 ecx, DWORD PTR [ebx+119]
  0010e	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00111	8b 53 7b	 mov	 edx, DWORD PTR [ebx+123]
  00114	89 56 18	 mov	 DWORD PTR [esi+24], edx
  00117	0f b7 43 7f	 movzx	 eax, WORD PTR [ebx+127]

; 263  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].bInUse = true;
; 264  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].iItemCode = iItemCode;
; 265  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].btEffectType1 = btEffectType1;

  0011b	8a 55 10	 mov	 dl, BYTE PTR _btEffectType1$[ebp]
  0011e	66 89 46 1c	 mov	 WORD PTR [esi+28], ax
  00122	8a 8b 81 00 00
	00		 mov	 cl, BYTE PTR [ebx+129]

; 266  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].btEffectType2 = btEffectType2;

  00128	8a 45 14	 mov	 al, BYTE PTR _btEffectType2$[ebp]
  0012b	88 46 23	 mov	 BYTE PTR [esi+35], al

; 267  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].btOptionType = iOptionEffect;
; 268  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].iItemPeriodLeftTime = dwItemPeriod;

  0012e	8b 45 18	 mov	 eax, DWORD PTR _dwItemPeriod$[ebp]
  00131	88 4e 1e	 mov	 BYTE PTR [esi+30], cl
  00134	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]

; 269  : 				this->ItemPeriodInfo[iIndex].vItemEffect[0].iItemPeriodUsedTime = 0;
; 270  : 
; 271  : 				this->ApplyItemPeriodEffect(lpObj,iItemCode,dwItemPeriod);

  00137	50		 push	 eax
  00138	88 56 22	 mov	 BYTE PTR [esi+34], dl
  0013b	0f b6 55 fc	 movzx	 edx, BYTE PTR _iOptionEffect$[ebp]
  0013f	51		 push	 ecx
  00140	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  00143	53		 push	 ebx
  00144	8b cf		 mov	 ecx, edi
  00146	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1
  0014a	88 56 21	 mov	 BYTE PTR [esi+33], dl
  0014d	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00150	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00157	e8 00 00 00 00	 call	 ?ApplyItemPeriodEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::ApplyItemPeriodEffect
  0015c	5b		 pop	 ebx
  0015d	5f		 pop	 edi

; 272  : 				return TRUE;

  0015e	b8 01 00 00 00	 mov	 eax, 1
  00163	5e		 pop	 esi

; 277  : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 14 00	 ret	 20			; 00000014H
?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ENDP ; CCashItemPeriodSystem::SetPeriodItemEffect
_TEXT	ENDS
PUBLIC	??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@ ; `string'
PUBLIC	_lpObj$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::GDReqPeriodItemInsert
EXTRN	?MSSQL2008@@3_NA:BYTE				; MSSQL2008
EXTRN	?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z:PROC ; CItemAddOption::SearchItemEffectType
;	COMDAT ??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
CONST	SEGMENT
??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemInsert Req] - ID : %s, Name : %s, ItemCode '
	DB	': %d, Effect1 : %d, Effect2 : %d, UseTime : %d, ExpireDate : '
	DB	'%s', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\cashitemperiodsystem.cpp
CONST	ENDS
;	COMDAT ?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_iEffectTime$ = -276					; size = 4
_iEffectType1$ = -272					; size = 4
_lpObj$GSCopy$ = -268					; size = 4
_iEffectType2$ = -264					; size = 4
$T211176 = -260						; size = 8
$T211486 = -256						; size = 4
$T211282 = -256						; size = 4
$T211537 = -252						; size = 4
$T211230 = -252						; size = 4
_tExpireDate$ = -248					; size = 8
_ptmTemp$211480 = -240					; size = 36
_ptmTemp$211429 = -240					; size = 36
_ptmTemp$211684 = -204					; size = 36
_ptmTemp$211224 = -204					; size = 36
_ptmTemp$211531 = -168					; size = 36
_ptmTemp$211378 = -168					; size = 36
_ptmTemp$211582 = -132					; size = 36
_ptmTemp$211327 = -132					; size = 36
_ptmTemp$211633 = -96					; size = 36
_ptmTemp$211276 = -96					; size = 36
_pMsg$ = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_iItemEffectDate$ = 16					; size = 4
?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemInsert, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 10	 mov	 esi, DWORD PTR _iItemEffectDate$[ebp]
  0001b	57		 push	 edi

; 369  : 	PMSG_REQ_PERIODITEM_INSERT pMsg;
; 370  : 	int iEffectType1 =0;
; 371  : 	int iEffectType2 =0;
; 372  : 	CTime tExpireDate;
; 373  : 	int iEffectTime = 0;
; 374  : 
; 375  : 	if ( g_ItemAddOption.SearchItemEffectType(iItemCode, &iEffectType1, &iEffectType2, &iEffectTime) == false )

  0001c	8b 7d 0c	 mov	 edi, DWORD PTR _iItemCode$[ebp]
  0001f	8b d9		 mov	 ebx, ecx

; 384  : 		return;
; 385  : 
; 386  : 	pMsg.btOptionType = iOptionType;

  00021	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lpObj$GSCopy$[ebp], eax
  00027	33 c0		 xor	 eax, eax
  00029	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _iEffectTime$[ebp]
  0002f	51		 push	 ecx
  00030	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _iEffectType2$[ebp]
  00036	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _iEffectType1$[ebp], eax
  0003c	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _iEffectType2$[ebp], eax
  00042	89 85 08 ff ff
	ff		 mov	 DWORD PTR _tExpireDate$[ebp], eax
  00048	89 85 0c ff ff
	ff		 mov	 DWORD PTR _tExpireDate$[ebp+4], eax
  0004e	89 85 ec fe ff
	ff		 mov	 DWORD PTR _iEffectTime$[ebp], eax
  00054	52		 push	 edx
  00055	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _iEffectType1$[ebp]
  0005b	50		 push	 eax
  0005c	57		 push	 edi
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00062	e8 00 00 00 00	 call	 ?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z ; CItemAddOption::SearchItemEffectType
  00067	84 c0		 test	 al, al
  00069	0f 84 cf 02 00
	00		 je	 $LN6@GDReqPerio@2

; 376  : 		return;
; 377  : 
; 378  : 	if( iItemEffectDate == -1 )

  0006f	83 fe ff	 cmp	 esi, -1
  00072	75 19		 jne	 SHORT $LN4@GDReqPerio@2

; 379  : 		iItemEffectDate = iEffectTime / 60;

  00074	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _iEffectTime$[ebp]
  0007a	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0007f	f7 e9		 imul	 ecx
  00081	03 d1		 add	 edx, ecx
  00083	c1 fa 05	 sar	 edx, 5
  00086	8b f2		 mov	 esi, edx
  00088	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0008b	03 f2		 add	 esi, edx
$LN4@GDReqPerio@2:

; 380  : 
; 381  : 	int iOptionType = g_ItemAddOption.SearchItemOptionType(iItemCode);

  0008d	57		 push	 edi
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00093	e8 00 00 00 00	 call	 ?SearchItemOptionType@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOptionType

; 382  : 
; 383  : 	if( iOptionType == -1 )

  00098	83 f8 ff	 cmp	 eax, -1
  0009b	0f 84 9d 02 00
	00		 je	 $LN6@GDReqPerio@2

; 384  : 		return;
; 385  : 
; 386  : 	pMsg.btOptionType = iOptionType;

  000a1	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+53], al

; 387  : 	pMsg.iUserIndex = lpObj->m_Index;

  000a4	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  000aa	8b 08		 mov	 ecx, DWORD PTR [eax]

; 388  : 	pMsg.iUserGuid = lpObj->DBNumber;

  000ac	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  000af	89 4d c8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 389  : 	pMsg.iItemCode = iItemCode;
; 390  : 	pMsg.btItemEffectType1 = iEffectType1;

  000b2	8a 8d f0 fe ff
	ff		 mov	 cl, BYTE PTR _iEffectType1$[ebp]
  000b8	89 7d d0	 mov	 DWORD PTR _pMsg$[ebp+12], edi

; 391  : 	pMsg.btItemEffectType2 = iEffectType2;
; 392  : 	pMsg.iItemPeriodDate = iItemEffectDate;
; 393  : 	memcpy(pMsg.chUserID, lpObj->Name, sizeof(pMsg.chUserID));

  000bb	8d 78 77	 lea	 edi, DWORD PTR [eax+119]
  000be	8b 07		 mov	 eax, DWORD PTR [edi]
  000c0	88 4d d8	 mov	 BYTE PTR _pMsg$[ebp+20], cl
  000c3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000c6	89 55 cc	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  000c9	8a 95 f8 fe ff
	ff		 mov	 dl, BYTE PTR _iEffectType2$[ebp]
  000cf	89 4d de	 mov	 DWORD PTR _pMsg$[ebp+26], ecx

; 394  : 
; 395  : 	tExpireDate = this->CalcItemUseEndTime(iItemEffectDate);

  000d2	56		 push	 esi
  000d3	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T211176[ebp]
  000d9	88 55 d9	 mov	 BYTE PTR _pMsg$[ebp+21], dl
  000dc	66 8b 57 08	 mov	 dx, WORD PTR [edi+8]
  000e0	89 45 da	 mov	 DWORD PTR _pMsg$[ebp+22], eax
  000e3	8a 47 0a	 mov	 al, BYTE PTR [edi+10]
  000e6	51		 push	 ecx
  000e7	8b cb		 mov	 ecx, ebx
  000e9	89 75 d4	 mov	 DWORD PTR _pMsg$[ebp+16], esi
  000ec	66 89 55 e2	 mov	 WORD PTR _pMsg$[ebp+30], dx
  000f0	88 45 e4	 mov	 BYTE PTR _pMsg$[ebp+32], al
  000f3	e8 00 00 00 00	 call	 ?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ; CCashItemPeriodSystem::CalcItemUseEndTime

; 396  : 
; 397  : 	//wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetMonth(), tExpireDate.GetDay(), tExpireDate.GetHour(), tExpireDate.GetMinute());
; 398  : //#if(MSSQL2008==1)
; 399  : 	if(MSSQL2008)

  000f8	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?MSSQL2008@@3_NA, 0 ; MSSQL2008
  000ff	8b 10		 mov	 edx, DWORD PTR [eax]
  00101	89 95 08 ff ff
	ff		 mov	 DWORD PTR _tExpireDate$[ebp], edx
  00107	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 400  : 	{
; 401  : 		wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetDay(), tExpireDate.GetMonth(),  tExpireDate.GetHour(), tExpireDate.GetMinute());

  0010a	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00110	89 85 0c ff ff
	ff		 mov	 DWORD PTR _tExpireDate$[ebp+4], eax
  00116	51		 push	 ecx
  00117	0f 84 e9 00 00
	00		 je	 $LN121@GDReqPerio@2
  0011d	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _ptmTemp$211224[ebp]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 __localtime64_s
  00129	83 c4 08	 add	 esp, 8
  0012c	85 c0		 test	 eax, eax
  0012e	75 0e		 jne	 SHORT $LN12@GDReqPerio@2
  00130	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _ptmTemp$211224[ebp+4]
  00136	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T211230[ebp], eax
  0013c	eb 0a		 jmp	 SHORT $LN13@GDReqPerio@2
$LN12@GDReqPerio@2:
  0013e	c7 85 04 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR $T211230[ebp], -1
$LN13@GDReqPerio@2:
  00148	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  0014e	51		 push	 ecx
  0014f	8d 55 a0	 lea	 edx, DWORD PTR _ptmTemp$211276[ebp]
  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 __localtime64_s
  00158	83 c4 08	 add	 esp, 8
  0015b	85 c0		 test	 eax, eax
  0015d	75 0b		 jne	 SHORT $LN32@GDReqPerio@2
  0015f	8b 45 a8	 mov	 eax, DWORD PTR _ptmTemp$211276[ebp+8]
  00162	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T211282[ebp], eax
  00168	eb 0a		 jmp	 SHORT $LN33@GDReqPerio@2
$LN32@GDReqPerio@2:
  0016a	c7 85 00 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR $T211282[ebp], -1
$LN33@GDReqPerio@2:
  00174	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  0017a	51		 push	 ecx
  0017b	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _ptmTemp$211327[ebp]
  00181	52		 push	 edx
  00182	e8 00 00 00 00	 call	 __localtime64_s
  00187	83 c4 08	 add	 esp, 8
  0018a	85 c0		 test	 eax, eax
  0018c	75 06		 jne	 SHORT $LN51@GDReqPerio@2
  0018e	8b 5d 8c	 mov	 ebx, DWORD PTR _ptmTemp$211327[ebp+16]
  00191	43		 inc	 ebx
  00192	eb 02		 jmp	 SHORT $LN52@GDReqPerio@2
$LN51@GDReqPerio@2:
  00194	33 db		 xor	 ebx, ebx
$LN52@GDReqPerio@2:
  00196	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _tExpireDate$[ebp]
  0019c	50		 push	 eax
  0019d	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _ptmTemp$211378[ebp]
  001a3	51		 push	 ecx
  001a4	e8 00 00 00 00	 call	 __localtime64_s
  001a9	f7 d8		 neg	 eax
  001ab	1b f6		 sbb	 esi, esi
  001ad	8d 95 08 ff ff
	ff		 lea	 edx, DWORD PTR _tExpireDate$[ebp]
  001b3	52		 push	 edx
  001b4	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _ptmTemp$211429[ebp]
  001ba	f7 d6		 not	 esi
  001bc	23 b5 64 ff ff
	ff		 and	 esi, DWORD PTR _ptmTemp$211378[ebp+12]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 __localtime64_s
  001c8	83 c4 10	 add	 esp, 16			; 00000010H
  001cb	85 c0		 test	 eax, eax
  001cd	75 20		 jne	 SHORT $LN89@GDReqPerio@2
  001cf	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T211230[ebp]
  001d5	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR $T211282[ebp]
  001db	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _ptmTemp$211429[ebp+20]
  001e1	51		 push	 ecx
  001e2	52		 push	 edx
  001e3	53		 push	 ebx
  001e4	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  001e9	56		 push	 esi

; 402  : 	}
; 403  : 	else

  001ea	e9 e8 00 00 00	 jmp	 $LN211@GDReqPerio@2

; 400  : 	{
; 401  : 		wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetDay(), tExpireDate.GetMonth(),  tExpireDate.GetHour(), tExpireDate.GetMinute());

$LN89@GDReqPerio@2:
  001ef	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T211230[ebp]
  001f5	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR $T211282[ebp]
  001fb	51		 push	 ecx
  001fc	52		 push	 edx
  001fd	53		 push	 ebx
  001fe	33 c0		 xor	 eax, eax
  00200	56		 push	 esi

; 402  : 	}
; 403  : 	else

  00201	e9 d1 00 00 00	 jmp	 $LN211@GDReqPerio@2

; 404  : 	{
; 405  : 		wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetMonth(), tExpireDate.GetDay(), tExpireDate.GetHour(), tExpireDate.GetMinute());

$LN121@GDReqPerio@2:
  00206	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _ptmTemp$211480[ebp]
  0020c	52		 push	 edx
  0020d	e8 00 00 00 00	 call	 __localtime64_s
  00212	83 c4 08	 add	 esp, 8
  00215	85 c0		 test	 eax, eax
  00217	75 0e		 jne	 SHORT $LN108@GDReqPerio@2
  00219	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ptmTemp$211480[ebp+4]
  0021f	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T211486[ebp], eax
  00225	eb 0a		 jmp	 SHORT $LN109@GDReqPerio@2
$LN108@GDReqPerio@2:
  00227	c7 85 00 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR $T211486[ebp], -1
$LN109@GDReqPerio@2:
  00231	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00237	51		 push	 ecx
  00238	8d 95 58 ff ff
	ff		 lea	 edx, DWORD PTR _ptmTemp$211531[ebp]
  0023e	52		 push	 edx
  0023f	e8 00 00 00 00	 call	 __localtime64_s
  00244	83 c4 08	 add	 esp, 8
  00247	85 c0		 test	 eax, eax
  00249	75 0e		 jne	 SHORT $LN127@GDReqPerio@2
  0024b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _ptmTemp$211531[ebp+8]
  00251	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T211537[ebp], eax
  00257	eb 0a		 jmp	 SHORT $LN128@GDReqPerio@2
$LN127@GDReqPerio@2:
  00259	c7 85 04 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR $T211537[ebp], -1
$LN128@GDReqPerio@2:
  00263	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00269	51		 push	 ecx
  0026a	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _ptmTemp$211582[ebp]
  00270	52		 push	 edx
  00271	e8 00 00 00 00	 call	 __localtime64_s
  00276	f7 d8		 neg	 eax
  00278	1b f6		 sbb	 esi, esi
  0027a	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _tExpireDate$[ebp]
  00280	50		 push	 eax
  00281	8d 4d a0	 lea	 ecx, DWORD PTR _ptmTemp$211633[ebp]
  00284	f7 d6		 not	 esi
  00286	23 75 88	 and	 esi, DWORD PTR _ptmTemp$211582[ebp+12]
  00289	51		 push	 ecx
  0028a	e8 00 00 00 00	 call	 __localtime64_s
  0028f	83 c4 10	 add	 esp, 16			; 00000010H
  00292	85 c0		 test	 eax, eax
  00294	75 06		 jne	 SHORT $LN165@GDReqPerio@2
  00296	8b 5d b0	 mov	 ebx, DWORD PTR _ptmTemp$211633[ebp+16]
  00299	43		 inc	 ebx
  0029a	eb 02		 jmp	 SHORT $LN166@GDReqPerio@2
$LN165@GDReqPerio@2:
  0029c	33 db		 xor	 ebx, ebx
$LN166@GDReqPerio@2:
  0029e	8d 95 08 ff ff
	ff		 lea	 edx, DWORD PTR _tExpireDate$[ebp]
  002a4	52		 push	 edx
  002a5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _ptmTemp$211684[ebp]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 __localtime64_s
  002b1	83 c4 08	 add	 esp, 8
  002b4	85 c0		 test	 eax, eax
  002b6	75 0d		 jne	 SHORT $LN184@GDReqPerio@2
  002b8	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _ptmTemp$211684[ebp+20]
  002be	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  002c3	eb 02		 jmp	 SHORT $LN185@GDReqPerio@2
$LN184@GDReqPerio@2:
  002c5	33 c0		 xor	 eax, eax
$LN185@GDReqPerio@2:
  002c7	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR $T211486[ebp]
  002cd	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR $T211537[ebp]
  002d3	51		 push	 ecx
  002d4	52		 push	 edx
  002d5	56		 push	 esi
  002d6	53		 push	 ebx
$LN211@GDReqPerio@2:
  002d7	50		 push	 eax
  002d8	8d 45 e5	 lea	 eax, DWORD PTR _pMsg$[ebp+33]
  002db	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
  002e0	50		 push	 eax
  002e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  002e7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 406  : 	}
; 407  : //#endif
; 408  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x03, sizeof(PMSG_REQ_PERIODITEM_INSERT));

  002ea	6a 38		 push	 56			; 00000038H
  002ec	6a 03		 push	 3
  002ee	8d 4d c4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  002f1	68 d0 00 00 00	 push	 208			; 000000d0H
  002f6	51		 push	 ecx
  002f7	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  002fc	83 c4 10	 add	 esp, 16			; 00000010H

; 409  : 
; 410  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_INSERT));

  002ff	6a 38		 push	 56			; 00000038H
  00301	8d 55 c4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00304	52		 push	 edx
  00305	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0030a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 411  : 
; 412  : 	LogAddTD("[CashShop][PeriodItemInsert Req] - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, ExpireDate : %s",
; 413  : 		lpObj->AccountID, lpObj->Name, pMsg.iItemCode, pMsg.btItemEffectType1, pMsg.btItemEffectType2, pMsg.iItemPeriodDate, pMsg.chExpireDate);

  0030f	8b 4d d4	 mov	 ecx, DWORD PTR _pMsg$[ebp+16]
  00312	0f b6 55 d9	 movzx	 edx, BYTE PTR _pMsg$[ebp+21]
  00316	8d 45 e5	 lea	 eax, DWORD PTR _pMsg$[ebp+33]
  00319	50		 push	 eax
  0031a	0f b6 45 d8	 movzx	 eax, BYTE PTR _pMsg$[ebp+20]
  0031e	51		 push	 ecx
  0031f	8b 4d d0	 mov	 ecx, DWORD PTR _pMsg$[ebp+12]
  00322	52		 push	 edx
  00323	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _lpObj$GSCopy$[ebp]
  00329	50		 push	 eax
  0032a	51		 push	 ecx
  0032b	57		 push	 edi
  0032c	83 c2 6c	 add	 edx, 108		; 0000006cH
  0032f	52		 push	 edx
  00330	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@
  00335	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0033b	83 c4 20	 add	 esp, 32			; 00000020H
$LN6@GDReqPerio@2:

; 414  : }

  0033e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00341	5f		 pop	 edi
  00342	5e		 pop	 esi
  00343	33 cd		 xor	 ecx, ebp
  00345	5b		 pop	 ebx
  00346	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0034b	8b e5		 mov	 esp, ebp
  0034d	5d		 pop	 ebp
  0034e	c2 0c 00	 ret	 12			; 0000000cH
?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemInsert
_TEXT	ENDS
PUBLIC	??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@ ; `string'
PUBLIC	?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
;	COMDAT ??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@
CONST	SEGMENT
??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemInsert Ans] Success - ID : %s, Name : %s, I'
	DB	'temCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@
CONST	SEGMENT
??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@ DB '[CashS'
	DB	'hop][PeriodItemInserver Ans] Fail - ID : %s, Name : %s, ItemC'
	DB	'ode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, Result : '
	DB	'%d', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z
_TEXT	SEGMENT
_btResult$ = 8						; size = 1
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInsert, COMDAT
; _this$ = ecx

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 472  : 	int iIndex = aRecv->iUserIndex;
; 473  : 	LPOBJ lpObj = &gObj[iIndex];

  00005	8b 75 08	 mov	 esi, DWORD PTR _aRecv$[ebp]

; 474  : 	BYTE btResult = FALSE;
; 475  : 
; 476  : 	switch ( aRecv->btResult )

  00008	0f b6 46 12	 movzx	 eax, BYTE PTR [esi+18]
  0000c	57		 push	 edi
  0000d	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00010	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00016	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001c	83 e8 00	 sub	 eax, 0
  0001f	8b d9		 mov	 ebx, ecx
  00021	74 53		 je	 SHORT $LN6@DGAnsPerio@3
  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	2b c1		 sub	 eax, ecx
  0002a	74 04		 je	 SHORT $LN5@DGAnsPerio@3
  0002c	2b c1		 sub	 eax, ecx
  0002e	74 05		 je	 SHORT $LN4@DGAnsPerio@3
$LN5@DGAnsPerio@3:

; 479  : 		case 1: btResult = 1; break;
; 480  : 		case 2: btResult = 3; break;
; 481  : 		default: btResult = 1;

  00030	88 4d 08	 mov	 BYTE PTR _btResult$[ebp], cl
  00033	eb 45		 jmp	 SHORT $LN11@DGAnsPerio@3
$LN4@DGAnsPerio@3:

; 490  : 	}
; 491  : 	else
; 492  : 	{
; 493  : 		LogAddTD("[CashShop][PeriodItemInserver Ans] Fail - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, Result : %d",
; 494  : 			lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btItemEffectType1, aRecv->btItemEffectType2, aRecv->iItemPeriodDate, btResult);	

  00035	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00038	0f b6 56 11	 movzx	 edx, BYTE PTR [esi+17]
  0003c	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  00040	6a 03		 push	 3
  00042	51		 push	 ecx
  00043	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00046	52		 push	 edx
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  0004c	52		 push	 edx
  0004d	8d 47 6c	 lea	 eax, DWORD PTR [edi+108]
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@
  00056	c6 45 08 03	 mov	 BYTE PTR _btResult$[ebp], 3
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 495  : 	}
; 496  : 
; 497  : 	this->GCSendPeriodItemInserResult(lpObj, btResult);

  00060	8b 4d 08	 mov	 ecx, DWORD PTR _btResult$[ebp]
  00063	83 c4 20	 add	 esp, 32			; 00000020H
  00066	51		 push	 ecx
  00067	57		 push	 edi
  00068	8b cb		 mov	 ecx, ebx
  0006a	e8 00 00 00 00	 call	 ?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 498  : }

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN6@DGAnsPerio@3:

; 477  : 	{
; 478  : 		case 0: btResult = 1; break;

  00076	c6 45 08 01	 mov	 BYTE PTR _btResult$[ebp], 1
$LN11@DGAnsPerio@3:

; 482  : 	}
; 483  : 
; 484  : 	if ( btResult == 1 )
; 485  : 	{
; 486  : 		this->SetPeriodItemEffect(lpObj, aRecv->iItemCode, aRecv->btItemEffectType1, aRecv->btItemEffectType2, aRecv->iItemPeriodDate);

  0007a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0007d	0f b6 4e 11	 movzx	 ecx, BYTE PTR [esi+17]
  00081	0f b6 56 10	 movzx	 edx, BYTE PTR [esi+16]
  00085	50		 push	 eax
  00086	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00089	51		 push	 ecx
  0008a	52		 push	 edx
  0008b	50		 push	 eax
  0008c	57		 push	 edi
  0008d	8b cb		 mov	 ecx, ebx
  0008f	e8 00 00 00 00	 call	 ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect

; 487  : 
; 488  : 		LogAddTD("[CashShop][PeriodItemInsert Ans] Success - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",
; 489  : 			lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btItemEffectType1, aRecv->btItemEffectType2, aRecv->iItemPeriodDate);

  00094	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00097	0f b6 56 11	 movzx	 edx, BYTE PTR [esi+17]
  0009b	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  0009f	51		 push	 ecx
  000a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a3	52		 push	 edx
  000a4	50		 push	 eax
  000a5	51		 push	 ecx
  000a6	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  000a9	52		 push	 edx
  000aa	8d 47 6c	 lea	 eax, DWORD PTR [edi+108]
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 495  : 	}
; 496  : 
; 497  : 	this->GCSendPeriodItemInserResult(lpObj, btResult);

  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _btResult$[ebp]
  000bc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000bf	51		 push	 ecx
  000c0	57		 push	 edi
  000c1	8b cb		 mov	 ecx, ebx
  000c3	e8 00 00 00 00	 call	 ?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx

; 498  : }

  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
_TEXT	ENDS
PUBLIC	??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@ ; `string'
PUBLIC	??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@ ; `string'
PUBLIC	??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ ; `string'
PUBLIC	?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemList
;	COMDAT ??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@
CONST	SEGMENT
??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@ DB '[C'
	DB	'ashShop][PeriodItemList Ans] Fail - ID : %s, Name : %s, ItemC'
	DB	'ode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTim'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@
CONST	SEGMENT
??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@ DB '[C'
	DB	'ashShop][PeriodItemList Ans] Success - ID : %s, Name : %s, It'
	DB	'emCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, Use'
	DB	'Time : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
CONST	SEGMENT
??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemSelect Ans] Failed - Item usedtime is over '
	DB	'ID : %s, Name : %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
CONST	SEGMENT
??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemSelect Ans] Failed - Item over 1 item ID : '
	DB	'%s, Name : %s', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv229 = 8						; size = 4
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemList, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 502  : 	if ( aRecv->iUserIndex <= 0 || aRecv->iUserIndex > OBJMAX )

  00005	8b 75 08	 mov	 esi, DWORD PTR _aRecv$[ebp]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	85 c0		 test	 eax, eax
  00010	0f 8e dc 00 00
	00		 jle	 $LN10@DGAnsPerio@4
  00016	3d 98 3a 00 00	 cmp	 eax, 15000		; 00003a98H
  0001b	0f 8f d1 00 00
	00		 jg	 $LN10@DGAnsPerio@4

; 503  : 		return;
; 504  : 
; 505  : 	LPOBJ lpObj = &gObj[aRecv->iUserIndex];

  00021	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00027	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	53		 push	 ebx
  0002e	8b d8		 mov	 ebx, eax

; 506  : 	int iItemLeftUseTime = 0;
; 507  : 	int iResult = 0;
; 508  : 	iResult = aRecv->btResult;
; 509  : 
; 510  : 	if ( lpObj->DBNumber != aRecv->iUserGuid )

  00030	8b 4b 2c	 mov	 ecx, DWORD PTR [ebx+44]
  00033	0f be 46 0d	 movsx	 eax, BYTE PTR [esi+13]
  00037	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0003a	0f 85 b1 00 00
	00		 jne	 $LN16@DGAnsPerio@4

; 511  : 		return;
; 512  : 
; 513  : 	if ( iResult == -1 )

  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 0f		 jne	 SHORT $LN8@DGAnsPerio@4

; 514  : 	{
; 515  : 		LogAddTD("[CashShop][PeriodItemSelect Ans] Failed - Item over 1 item ID : %s, Name : %s",
; 516  : 			lpObj->AccountID, lpObj->Name);

  00045	8d 53 77	 lea	 edx, DWORD PTR [ebx+119]
  00048	52		 push	 edx
  00049	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
  00052	eb 12		 jmp	 SHORT $LN18@DGAnsPerio@4
$LN8@DGAnsPerio@4:

; 517  : 	}
; 518  : 	else if ( iResult == -2 )

  00054	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00057	75 16		 jne	 SHORT $LN6@DGAnsPerio@4

; 519  : 	{
; 520  : 		LogAddTD("[CashShop][PeriodItemSelect Ans] Failed - Item usedtime is over ID : %s, Name : %s",
; 521  : 			lpObj->AccountID, lpObj->Name);

  00059	8d 4b 77	 lea	 ecx, DWORD PTR [ebx+119]
  0005c	51		 push	 ecx
  0005d	8d 53 6c	 lea	 edx, DWORD PTR [ebx+108]
  00060	52		 push	 edx
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
$LN18@DGAnsPerio@4:
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@DGAnsPerio@4:

; 522  : 	}
; 523  : 	
; 524  : 	int iCountItems = aRecv->btCountItems;

  0006f	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]

; 525  : 
; 526  : 	for( int iOptionIndex = 0; iOptionIndex < iCountItems; iOptionIndex++ )

  00073	85 c0		 test	 eax, eax
  00075	7e 7a		 jle	 SHORT $LN16@DGAnsPerio@4

; 522  : 	}
; 523  : 	
; 524  : 	int iCountItems = aRecv->btCountItems;

  00077	83 c6 1a	 add	 esi, 26			; 0000001aH
  0007a	89 45 08	 mov	 DWORD PTR tv229[ebp], eax
  0007d	57		 push	 edi
  0007e	8b ff		 npad	 2
$LL5@DGAnsPerio@4:

; 527  : 	{
; 528  : 		iItemLeftUseTime = aRecv->m_ListItem[iOptionIndex].iItemPeriodLeftTime;

  00080	8b 7e 06	 mov	 edi, DWORD PTR [esi+6]

; 529  : 		if ( iItemLeftUseTime > 0 )
; 530  : 		{
; 531  : 			this->SetPeriodItemEffect(lpObj, aRecv->m_ListItem[iOptionIndex].iItemCode, aRecv->m_ListItem[iOptionIndex].btEffectType1, aRecv->m_ListItem[iOptionIndex].btEffectType2, iItemLeftUseTime);

  00083	57		 push	 edi
  00084	85 ff		 test	 edi, edi
  00086	7e 38		 jle	 SHORT $LN2@DGAnsPerio@4
  00088	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0008b	0f b6 4e ff	 movzx	 ecx, BYTE PTR [esi-1]
  0008f	8b 56 fa	 mov	 edx, DWORD PTR [esi-6]
  00092	50		 push	 eax
  00093	51		 push	 ecx
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	52		 push	 edx
  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect

; 532  : 			LogAddTD("[CashShop][PeriodItemList Ans] Success - ID : %s, Name : %s, ItemCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",
; 533  : 			lpObj->AccountID, lpObj->Name, aRecv->m_ListItem[iOptionIndex].iItemCode, aRecv->m_ListItem[iOptionIndex].btOptionType, aRecv->m_ListItem[iOptionIndex].btEffectType1, aRecv->m_ListItem[iOptionIndex].btEffectType2, iItemLeftUseTime);

  0009e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  000a1	0f b6 4e ff	 movzx	 ecx, BYTE PTR [esi-1]
  000a5	0f b6 56 fe	 movzx	 edx, BYTE PTR [esi-2]
  000a9	57		 push	 edi
  000aa	50		 push	 eax
  000ab	8b 46 fa	 mov	 eax, DWORD PTR [esi-6]
  000ae	51		 push	 ecx
  000af	52		 push	 edx
  000b0	50		 push	 eax
  000b1	8d 43 77	 lea	 eax, DWORD PTR [ebx+119]
  000b4	50		 push	 eax
  000b5	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
  000b8	50		 push	 eax
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@

; 534  : 		}
; 535  : 		else

  000be	eb 1f		 jmp	 SHORT $LN19@DGAnsPerio@4
$LN2@DGAnsPerio@4:

; 536  : 		{
; 537  : 			LogAddTD("[CashShop][PeriodItemList Ans] Fail - ID : %s, Name : %s, ItemCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",
; 538  : 			lpObj->AccountID, lpObj->Name, aRecv->m_ListItem[iOptionIndex].iItemCode, aRecv->m_ListItem[iOptionIndex].btOptionType, aRecv->m_ListItem[iOptionIndex].btEffectType1, aRecv->m_ListItem[iOptionIndex].btEffectType2, iItemLeftUseTime);

  000c0	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  000c3	0f b6 56 ff	 movzx	 edx, BYTE PTR [esi-1]
  000c7	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  000cb	51		 push	 ecx
  000cc	8b 4e fa	 mov	 ecx, DWORD PTR [esi-6]
  000cf	52		 push	 edx
  000d0	50		 push	 eax
  000d1	51		 push	 ecx
  000d2	8d 43 77	 lea	 eax, DWORD PTR [ebx+119]
  000d5	50		 push	 eax
  000d6	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
  000d9	50		 push	 eax
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@
$LN19@DGAnsPerio@4:
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e5	83 c4 20	 add	 esp, 32			; 00000020H
  000e8	83 c6 14	 add	 esi, 20			; 00000014H
  000eb	ff 4d 08	 dec	 DWORD PTR tv229[ebp]
  000ee	75 90		 jne	 SHORT $LL5@DGAnsPerio@4
  000f0	5f		 pop	 edi
$LN16@DGAnsPerio@4:
  000f1	5b		 pop	 ebx
$LN10@DGAnsPerio@4:
  000f2	5e		 pop	 esi

; 539  : 		}
; 540  : 	}
; 541  : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemList
_TEXT	ENDS
PUBLIC	??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@ ; `string'
PUBLIC	?Initialize@CCashItemPeriodSystem@@QAEXXZ	; CCashItemPeriodSystem::Initialize
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__CreateThread@24:PROC
;	COMDAT ??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@
CONST	SEGMENT
??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@ DB 'CreateT'
	DB	'hread() failed with error %d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Initialize@CCashItemPeriodSystem@@QAEXXZ
_TEXT	SEGMENT
tv804 = -4						; size = 4
?Initialize@CCashItemPeriodSystem@@QAEXXZ PROC		; CCashItemPeriodSystem::Initialize, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 27   : 	//g_bRunningPeriodCheckThread = FALSE;
; 28   : 	this->iItemPeriodInfoCount = 0;

  00009	33 db		 xor	 ebx, ebx
  0000b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0000e	8d 4f 09	 lea	 ecx, DWORD PTR [edi+9]
  00011	c7 45 fc dc 05
	00 00		 mov	 DWORD PTR tv804[ebp], 1500 ; 000005dcH
  00018	83 ce ff	 or	 esi, -1
  0001b	eb 03 8d 49 00	 npad	 5
$LL8@Initialize:

; 31   : 	{
; 32   : 		this->ItemPeriodInfo[i].btUsedInfo = 0;

  00020	89 59 ff	 mov	 DWORD PTR [ecx-1], ebx

; 33   : 		this->ItemPeriodInfo[i].btCountItems = 0;
; 34   : 		this->ItemPeriodInfo[i].wdUserIndex = 0;
; 35   : 		this->ItemPeriodInfo[i].iUserGuid = 0;

  00023	89 59 03	 mov	 DWORD PTR [ecx+3], ebx

; 36   : 		this->ItemPeriodInfo[i].dwItemCheckTickCount = 0;

  00026	89 59 07	 mov	 DWORD PTR [ecx+7], ebx

; 37   : 		this->ItemPeriodInfo[i].chCharacterName[0] = NULL;

  00029	88 59 0b	 mov	 BYTE PTR [ecx+11], bl
  0002c	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  0002f	ba 0a 00 00 00	 mov	 edx, 10			; 0000000aH
$LL5@Initialize:

; 38   : 
; 39   : 		for( int j = 0; j < MAX_ITEM_PERIOD_EFFECT; j++ )
; 40   : 		{
; 41   : 			this->ItemPeriodInfo[i].vItemEffect[j].bInUse = false;

  00034	89 58 ff	 mov	 DWORD PTR [eax-1], ebx

; 42   : 			this->ItemPeriodInfo[i].vItemEffect[j].btOptionType = 0;
; 43   : 			this->ItemPeriodInfo[i].vItemEffect[j].btEffectType1 = 0;
; 44   : 			this->ItemPeriodInfo[i].vItemEffect[j].btEffectType2 = 0;
; 45   : 			this->ItemPeriodInfo[i].vItemEffect[j].iItemCode = -1;

  00037	89 70 03	 mov	 DWORD PTR [eax+3], esi

; 46   : 			this->ItemPeriodInfo[i].vItemEffect[j].iItemPeriodUsedTime = 0;

  0003a	89 58 07	 mov	 DWORD PTR [eax+7], ebx

; 47   : 			this->ItemPeriodInfo[i].vItemEffect[j].iItemPeriodLeftTime = 0;

  0003d	89 58 0b	 mov	 DWORD PTR [eax+11], ebx
  00040	83 c0 10	 add	 eax, 16			; 00000010H
  00043	4a		 dec	 edx
  00044	75 ee		 jne	 SHORT $LL5@Initialize

; 29   : 
; 30   : 	for(int i = 0; i < MAX_ITEM_PERIOD_INFO; i++ )

  00046	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0004c	ff 4d fc	 dec	 DWORD PTR tv804[ebp]
  0004f	75 cf		 jne	 SHORT $LL8@Initialize

; 48   : 		}
; 49   : 	}
; 50   : 
; 51   : 	if (g_bRunningPeriodCheckThread == FALSE )

  00051	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?g_bRunningPeriodCheckThread@@3HA, ebx ; g_bRunningPeriodCheckThread
  00057	75 50		 jne	 SHORT $LN2@Initialize

; 52   : 	{
; 53   : 		this->hThreadHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)CCashItemPeriodSystem::PeriodCheckThread, this->ItemPeriodInfo, 0, NULL);

  00059	53		 push	 ebx
  0005a	53		 push	 ebx
  0005b	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005e	51		 push	 ecx
  0005f	68 00 00 00 00	 push	 OFFSET ?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ; CCashItemPeriodSystem::PeriodCheckThread
  00064	53		 push	 ebx
  00065	53		 push	 ebx
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24
  0006c	89 87 28 36 04
	00		 mov	 DWORD PTR [edi+276008], eax

; 54   : 		
; 55   : 		if ( this->hThreadHandle == NULL )

  00072	3b c3		 cmp	 eax, ebx
  00074	75 1c		 jne	 SHORT $LN1@Initialize

; 56   : 		{
; 57   : 			LogAdd("CreateThread() failed with error %d", GetLastError());

  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0007c	50		 push	 eax
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00088	83 c4 08	 add	 esp, 8
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 63   : 	}
; 64   : 
; 65   : 	//g_bRunningPeriodCheckThread = TRUE;
; 66   : 	//CloseHandle(this->hThreadHandle);
; 67   : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN1@Initialize:

; 58   : 			return;
; 59   : 		}
; 60   : 
; 61   : 		g_bRunningPeriodCheckThread = TRUE;

  00092	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bRunningPeriodCheckThread@@3HA, 1 ; g_bRunningPeriodCheckThread

; 62   : 		CloseHandle(this->hThreadHandle);

  0009c	8b 97 28 36 04
	00		 mov	 edx, DWORD PTR [edi+276008]
  000a2	52		 push	 edx
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@Initialize:
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 63   : 	}
; 64   : 
; 65   : 	//g_bRunningPeriodCheckThread = TRUE;
; 66   : 	//CloseHandle(this->hThreadHandle);
; 67   : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?Initialize@CCashItemPeriodSystem@@QAEXXZ ENDP		; CCashItemPeriodSystem::Initialize
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CashItemPeriodSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_CashItemPeriodSystem@@YAXXZ PROC			; `dynamic initializer for 'g_CashItemPeriodSystem'', COMDAT

; 12   : CCashItemPeriodSystem g_CashItemPeriodSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00005	e8 00 00 00 00	 call	 ??0CCashItemPeriodSystem@@QAE@XZ ; CCashItemPeriodSystem::CCashItemPeriodSystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CashItemPeriodSystem@@YAXXZ ; `dynamic atexit destructor for 'g_CashItemPeriodSystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CashItemPeriodSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_CashItemPeriodSystem''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CashItemPeriodSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_CashItemPeriodSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CashItemPeriodSystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00005	e9 00 00 00 00	 jmp	 ??1CCashItemPeriodSystem@@UAE@XZ ; CCashItemPeriodSystem::~CCashItemPeriodSystem
??__Fg_CashItemPeriodSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CashItemPeriodSystem''
text$yd	ENDS
PUBLIC	?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
_BSS	SEGMENT
?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A DB 04362cH DUP (?) ; g_CashItemPeriodSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CashItemPeriodSystem$initializer$ DD FLAT:??__Eg_CashItemPeriodSystem@@YAXXZ
CRT$XCU	ENDS
END
