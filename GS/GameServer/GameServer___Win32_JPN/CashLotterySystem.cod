; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CashLotterySystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CCashLotterySystem@@6B@			; CCashLotterySystem::`vftable'
PUBLIC	??0CCashLotterySystem@@QAE@XZ			; CCashLotterySystem::CCashLotterySystem
PUBLIC	??_R4CCashLotterySystem@@6B@			; CCashLotterySystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCashLotterySystem@@@8			; CCashLotterySystem `RTTI Type Descriptor'
PUBLIC	??_R3CCashLotterySystem@@8			; CCashLotterySystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCashLotterySystem@@8			; CCashLotterySystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCashLotterySystem@@8		; CCashLotterySystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1TRandomPoolMgr@@UAE@XZ:PROC			; TRandomPoolMgr::~TRandomPoolMgr
EXTRN	??0TRandomPoolMgr@@QAE@XZ:PROC			; TRandomPoolMgr::TRandomPoolMgr
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCashLotterySystem@@UAEPAXI@Z:PROC		; CCashLotterySystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCashLotterySystem@@8
; File e:\work\tranet_version\gs\gameserver\cashlotterysystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCashLotterySystem@@8 DD FLAT:??_R0?AVCCashLotterySystem@@@8 ; CCashLotterySystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CCashLotterySystem@@8
rdata$r	SEGMENT
??_R2CCashLotterySystem@@8 DD FLAT:??_R1A@?0A@EA@CCashLotterySystem@@8 ; CCashLotterySystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCashLotterySystem@@8
rdata$r	SEGMENT
??_R3CCashLotterySystem@@8 DD 00H			; CCashLotterySystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCashLotterySystem@@@8
_DATA	SEGMENT
??_R0?AVCCashLotterySystem@@@8 DD FLAT:??_7type_info@@6B@ ; CCashLotterySystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCashLotterySystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCashLotterySystem@@6B@
rdata$r	SEGMENT
??_R4CCashLotterySystem@@6B@ DD 00H			; CCashLotterySystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCashLotterySystem@@@8
	DD	FLAT:??_R3CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_7CCashLotterySystem@@6B@
CONST	SEGMENT
??_7CCashLotterySystem@@6B@ DD FLAT:??_R4CCashLotterySystem@@6B@ ; CCashLotterySystem::`vftable'
	DD	FLAT:??_ECCashLotterySystem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCashLotterySystem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$1
__ehfuncinfo$??0CCashLotterySystem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCashLotterySystem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0CCashLotterySystem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCashLotterySystem@@QAE@XZ PROC			; CCashLotterySystem::CCashLotterySystem, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCashLotterySystem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCashLotterySystem@@6B@
  00032	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00037	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00046	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00049	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004d	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr

; 14   : 
; 15   : }

  00052	8b c6		 mov	 eax, esi
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??0CCashLotterySystem@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCashLotterySystem@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCashLotterySystem@@QAE@XZ ENDP			; CCashLotterySystem::CCashLotterySystem
PUBLIC	??1CCashLotterySystem@@UAE@XZ			; CCashLotterySystem::~CCashLotterySystem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCashLotterySystem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$1
__ehfuncinfo$??1CCashLotterySystem@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCashLotterySystem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1CCashLotterySystem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCashLotterySystem@@UAE@XZ PROC			; CCashLotterySystem::~CCashLotterySystem, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CCashLotterySystem@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCashLotterySystem@@6B@

; 19   : 
; 20   : }

  0002f	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00032	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00039	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  0003e	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00041	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00045	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  0004a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0004d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00054	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??1CCashLotterySystem@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??1CCashLotterySystem@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CCashLotterySystem@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CCashLotterySystem@@UAE@XZ ENDP			; CCashLotterySystem::~CCashLotterySystem
PUBLIC	?Initialize@CCashLotterySystem@@QAEXXZ		; CCashLotterySystem::Initialize
EXTRN	?InitPool@TRandomPoolMgr@@QAEXXZ:PROC		; TRandomPoolMgr::InitPool
; Function compile flags: /Ogtp
;	COMDAT ?Initialize@CCashLotterySystem@@QAEXXZ
_TEXT	SEGMENT
tv870 = -4						; size = 4
?Initialize@CCashLotterySystem@@QAEXXZ PROC		; CCashLotterySystem::Initialize, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 24   : 	for ( int i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  00009	8d 87 b4 00 00
	00		 lea	 eax, DWORD PTR [edi+180]
  0000f	8d 4f 54	 lea	 ecx, DWORD PTR [edi+84]
  00012	ba 17 00 00 00	 mov	 edx, 23			; 00000017H
  00017	33 f6		 xor	 esi, esi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL9@Initialize:

; 25   : 	{
; 26   : 		this->LotteryItemListCount[i] = 0;

  00020	89 31		 mov	 DWORD PTR [ecx], esi

; 27   : 		this->LotteryItemOptionRate[i].iSkillOptionRate = 0;

  00022	89 70 fc	 mov	 DWORD PTR [eax-4], esi

; 28   : 		this->LotteryItemOptionRate[i].iLuckOptionRate = 0;

  00025	89 30		 mov	 DWORD PTR [eax], esi

; 29   : 		this->LotteryItemOptionRate[i].iAddOptionRate = 0;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 30   : 		this->LotteryItemOptionRate[i].iExOptionRate =0 ;

  0002a	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0002d	83 c1 04	 add	 ecx, 4
  00030	83 c0 10	 add	 eax, 16			; 00000010H
  00033	4a		 dec	 edx
  00034	75 ea		 jne	 SHORT $LL9@Initialize

; 31   : 	}
; 32   : 
; 33   : 	for (int i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  00036	8d 87 20 02 00
	00		 lea	 eax, DWORD PTR [edi+544]
  0003c	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR tv870[ebp], 23 ; 00000017H
  00043	b1 ff		 mov	 cl, 255			; 000000ffH
  00045	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL6@Initialize:

; 34   : 	{
; 35   : 		for ( int j=0;j<MAX_LOTTERY_ITEM_COUNT;j++)

  00050	ba 82 00 00 00	 mov	 edx, 130		; 00000082H
$LL3@Initialize:

; 36   : 		{
; 37   : 			this->LotteryItemList[i][j].btItemType = -1;
; 38   : 			this->LotteryItemList[i][j].wItemIndex = -1;

  00055	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH
  0005a	88 48 02	 mov	 BYTE PTR [eax+2], cl
  0005d	66 89 18	 mov	 WORD PTR [eax], bx

; 39   : 			this->LotteryItemList[i][j].btItemLevelMin = -1;

  00060	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 40   : 			this->LotteryItemList[i][j].btItemLevelMax = -1;

  00063	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 41   : 			this->LotteryItemList[i][j].btSkillOption = -1;

  00066	88 48 05	 mov	 BYTE PTR [eax+5], cl

; 42   : 			this->LotteryItemList[i][j].btLuckOption = -1;

  00069	88 48 06	 mov	 BYTE PTR [eax+6], cl

; 43   : 			this->LotteryItemList[i][j].btAddOption = -1;

  0006c	88 48 07	 mov	 BYTE PTR [eax+7], cl

; 44   : 			this->LotteryItemList[i][j].btExOption = -1;

  0006f	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00072	83 c0 0a	 add	 eax, 10			; 0000000aH
  00075	4a		 dec	 edx
  00076	75 dd		 jne	 SHORT $LL3@Initialize

; 31   : 	}
; 32   : 
; 33   : 	for (int i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  00078	ff 4d fc	 dec	 DWORD PTR tv870[ebp]
  0007b	75 d3		 jne	 SHORT $LL6@Initialize

; 45   : 		}
; 46   : 	}
; 47   : 
; 48   : 	this->CategoryRandomPool.InitPool();

  0007d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00080	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 49   : 	this->AddOptionRandomPool.InitPool();

  00085	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00088	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 50   : 	this->ExOptionRandomPool.InitPool();

  0008d	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00090	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 51   : 	this->iItemMaxHeight = 0;

  00095	89 77 4c	 mov	 DWORD PTR [edi+76], esi

; 52   : 	this->iItemMaxWidth = 0;

  00098	89 77 50	 mov	 DWORD PTR [edi+80], esi
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx

; 53   : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Initialize@CCashLotterySystem@@QAEXXZ ENDP		; CCashLotterySystem::Initialize
_TEXT	ENDS
PUBLIC	?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ; CCashLotterySystem::SetitemDropRate
EXTRN	?AddValue@TRandomPoolMgr@@QAE_NHH@Z:PROC	; TRandomPoolMgr::AddValue
; Function compile flags: /Ogtp
;	COMDAT ?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z
_TEXT	SEGMENT
_iCategory$ = 8						; size = 4
_iDropRate$ = 12					; size = 4
_iSkillOptionRate$ = 16					; size = 4
_iLuckOptionRate$ = 20					; size = 4
_iAddOptionRate$ = 24					; size = 4
_iExOptionRate$ = 28					; size = 4
?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z PROC	; CCashLotterySystem::SetitemDropRate, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 	this->CategoryRandomPool.AddValue(iCategory, iDropRate);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iDropRate$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _iCategory$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00012	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 207  : 
; 208  : 	this->LotteryItemOptionRate[iCategory].iSkillOptionRate = iSkillOptionRate;

  00017	8b 55 10	 mov	 edx, DWORD PTR _iSkillOptionRate$[ebp]
  0001a	8d 4e 0b	 lea	 ecx, DWORD PTR [esi+11]
  0001d	03 c9		 add	 ecx, ecx
  0001f	89 14 cf	 mov	 DWORD PTR [edi+ecx*8], edx

; 209  : 	this->LotteryItemOptionRate[iCategory].iLuckOptionRate = iLuckOptionRate;

  00022	8b 4d 14	 mov	 ecx, DWORD PTR _iLuckOptionRate$[ebp]

; 210  : 	this->LotteryItemOptionRate[iCategory].iAddOptionRate = iAddOptionRate;

  00025	8b 55 18	 mov	 edx, DWORD PTR _iAddOptionRate$[ebp]
  00028	03 f6		 add	 esi, esi
  0002a	8d 04 f7	 lea	 eax, DWORD PTR [edi+esi*8]
  0002d	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 211  : 	this->LotteryItemOptionRate[iCategory].iExOptionRate = iExOptionRate;

  00033	8b 4d 1c	 mov	 ecx, DWORD PTR _iExOptionRate$[ebp]
  00036	5f		 pop	 edi
  00037	89 90 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edx
  0003d	89 88 bc 00 00
	00		 mov	 DWORD PTR [eax+188], ecx
  00043	5e		 pop	 esi

; 212  : }

  00044	5d		 pop	 ebp
  00045	c2 18 00	 ret	 24			; 00000018H
?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ENDP	; CCashLotterySystem::SetitemDropRate
_TEXT	ENDS
PUBLIC	?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z	; CCashLotterySystem::InsertItem
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
; Function compile flags: /Ogtp
;	COMDAT ?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z
_TEXT	SEGMENT
_iItemCategory$ = 8					; size = 4
_iItemType$ = 12					; size = 4
_iItemIndex$ = 16					; size = 4
_iItemLevelMin$ = 20					; size = 4
_iItemLevelMax$ = 24					; size = 4
_iSkillOption$ = 28					; size = 4
_iLuckOption$ = 32					; size = 4
_iAddOption$ = 36					; size = 4
_iExOption$ = 40					; size = 4
?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z PROC	; CCashLotterySystem::InsertItem, COMDAT
; _this$ = ecx

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 216  : 	if ( iItemCategory < 0 || iItemCategory > MAX_LOTTERY_ITEM_CATEGORY )

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _iItemCategory$[ebp]
  00009	83 f9 17	 cmp	 ecx, 23			; 00000017H
  0000c	0f 87 a6 00 00
	00		 ja	 $LN5@InsertItem

; 218  : 
; 219  : 	int iItemCount = this->LotteryItemListCount[iItemCategory];

  00012	8b 44 8e 54	 mov	 eax, DWORD PTR [esi+ecx*4+84]

; 220  : 
; 221  : 	if ( iItemCount < 0 || iItemCount > MAX_LOTTERY_ITEM_COUNT )

  00016	3d 82 00 00 00	 cmp	 eax, 130		; 00000082H
  0001b	0f 87 97 00 00
	00		 ja	 $LN5@InsertItem

; 222  : 		return FALSE;
; 223  : 
; 224  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemType = iItemType;

  00021	69 c9 82 00 00
	00		 imul	 ecx, 130		; 00000082H
  00027	8d 14 01	 lea	 edx, DWORD PTR [ecx+eax]
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemType$[ebp]
  0002d	53		 push	 ebx

; 225  : 	this->LotteryItemList[iItemCategory][iItemCount].wItemIndex = iItemIndex;
; 226  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemLevelMin = iItemLevelMin;

  0002e	8a 5d 14	 mov	 bl, BYTE PTR _iItemLevelMin$[ebp]
  00031	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  00034	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  00037	88 98 23 02 00
	00		 mov	 BYTE PTR [eax+547], bl

; 227  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemLevelMax = iItemLevelMax;

  0003d	8a 5d 18	 mov	 bl, BYTE PTR _iItemLevelMax$[ebp]
  00040	88 88 22 02 00
	00		 mov	 BYTE PTR [eax+546], cl
  00046	57		 push	 edi
  00047	8b 7d 10	 mov	 edi, DWORD PTR _iItemIndex$[ebp]
  0004a	88 98 24 02 00
	00		 mov	 BYTE PTR [eax+548], bl

; 228  : 	this->LotteryItemList[iItemCategory][iItemCount].btSkillOption = iSkillOption;

  00050	8a 5d 1c	 mov	 bl, BYTE PTR _iSkillOption$[ebp]

; 229  : 	this->LotteryItemList[iItemCategory][iItemCount].btLuckOption = iLuckOption;
; 230  : 	this->LotteryItemList[iItemCategory][iItemCount].btAddOption = iAddOption;
; 231  : 	this->LotteryItemList[iItemCategory][iItemCount].btExOption = iExOption;
; 232  : 
; 233  : 	int iItemCode = 0;
; 234  : 	int iItemHeight = 0;
; 235  : 	int iItemWidth = 0;
; 236  : 
; 237  : 	iItemCode = ITEMGET(iItemType, iItemIndex);

  00053	c1 e1 09	 shl	 ecx, 9
  00056	03 cf		 add	 ecx, edi
  00058	88 98 25 02 00
	00		 mov	 BYTE PTR [eax+549], bl

; 238  : 	iItemHeight = ItemAttribute[iItemCode].Height;

  0005e	6b c9 70	 imul	 ecx, 112		; 00000070H
  00061	8a 5d 20	 mov	 bl, BYTE PTR _iLuckOption$[ebp]
  00064	8d 94 92 13 01
	00 00		 lea	 edx, DWORD PTR [edx+edx*4+275]
  0006b	88 1c 56	 mov	 BYTE PTR [esi+edx*2], bl
  0006e	8a 55 24	 mov	 dl, BYTE PTR _iAddOption$[ebp]
  00071	88 90 27 02 00
	00		 mov	 BYTE PTR [eax+551], dl
  00077	8a 55 28	 mov	 dl, BYTE PTR _iExOption$[ebp]
  0007a	66 89 b8 20 02
	00 00		 mov	 WORD PTR [eax+544], di
  00081	88 90 28 02 00
	00		 mov	 BYTE PTR [eax+552], dl

; 239  : 	iItemWidth = ItemAttribute[iItemCode].Width;

  00087	0f b6 81 23 00
	00 00		 movzx	 eax, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[ecx+35]
  0008e	0f b6 91 24 00
	00 00		 movzx	 edx, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[ecx+36]
  00095	5f		 pop	 edi
  00096	5b		 pop	 ebx

; 240  : 
; 241  : 	if ( iItemWidth > this->iItemMaxWidth )

  00097	3b 46 50	 cmp	 eax, DWORD PTR [esi+80]
  0009a	7e 03		 jle	 SHORT $LN2@InsertItem

; 242  : 		this->iItemMaxWidth = iItemWidth;

  0009c	89 46 50	 mov	 DWORD PTR [esi+80], eax
$LN2@InsertItem:

; 243  : 
; 244  : 	if ( iItemHeight > this->iItemMaxHeight )

  0009f	3b 56 4c	 cmp	 edx, DWORD PTR [esi+76]
  000a2	7e 03		 jle	 SHORT $LN1@InsertItem

; 245  : 		this->iItemMaxHeight = iItemHeight;

  000a4	89 56 4c	 mov	 DWORD PTR [esi+76], edx
$LN1@InsertItem:

; 246  : 
; 247  : 	this->LotteryItemListCount[iItemCategory]++;

  000a7	8b 45 08	 mov	 eax, DWORD PTR _iItemCategory$[ebp]
  000aa	ff 44 86 54	 inc	 DWORD PTR [esi+eax*4+84]

; 248  : 
; 249  : 	return TRUE;

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	5e		 pop	 esi

; 250  : }

  000b4	5d		 pop	 ebp
  000b5	c2 24 00	 ret	 36			; 00000024H
$LN5@InsertItem:

; 217  : 		return FALSE;

  000b8	33 c0		 xor	 eax, eax
  000ba	5e		 pop	 esi

; 250  : }

  000bb	5d		 pop	 ebp
  000bc	c2 24 00	 ret	 36			; 00000024H
?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z ENDP	; CCashLotterySystem::InsertItem
_TEXT	ENDS
PUBLIC	??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@ ; `string'
PUBLIC	_lpItem$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z	; CCashLotterySystem::GetItem
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z:PROC	; ItemIsBufExOption
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z:PROC	; CItem::Convert
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?NewOptionRandEx@@YAEHH@Z:PROC			; NewOptionRandEx
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	_rand:PROC
EXTRN	?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z:PROC ; TRandomPoolMgr::GetRandomValue
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
;	COMDAT ??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@
CONST	SEGMENT
??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@ DB '[C'
	DB	'ashItem][LotteryItem] Get Item Category:%d,Index:%d (Name:%s,'
	DB	'Type:%d,Index:%d,Level:%d) Skill:%d,Luck:%d,AddOption:%d,ExOp'
	DB	'tion(%d,%d,%d,%d,%d,%d)', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z
_TEXT	SEGMENT
_iLuckOptionRate$ = -300				; size = 4
_iSkillOption$ = -296					; size = 4
_iSkillOptionRate$ = -292				; size = 4
_iExOption$ = -288					; size = 4
_iItemSelectNumber$ = -284				; size = 4
_iAddOption$ = -280					; size = 4
_iExOptionRate$ = -276					; size = 4
_iAddOptionRate$ = -272					; size = 4
_iTemp$ = -268						; size = 4
_btExOption$ = -264					; size = 1
_iLuckOption$ = -260					; size = 4
_iItemType$ = -256					; size = 4
_lpItem$GSCopy$ = -252					; size = 4
_btSkillOption$ = -248					; size = 1
_iItemLevelMax$ = -244					; size = 4
_iItemLevelMin$ = -240					; size = 4
_iItemIndex$ = -236					; size = 4
_btLuckOption$ = -232					; size = 1
_btAddOption$ = -228					; size = 1
_ReturnItem$ = -224					; size = 212
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpItem$ = 8						; size = 4
?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z PROC	; CCashLotterySystem::GetItem, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _lpItem$[ebp]
  00018	8b f1		 mov	 esi, ecx

; 254  : 	int iItemCategory = 0;
; 255  : 	int iMaxItemCountInCategory = 0;
; 256  : 	int iItemSelectNumber = 0;
; 257  : 	CItem ReturnItem;

  0001a	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _ReturnItem$[ebp]

; 258  : 	int iItemNumber = 0;
; 259  : 	int iItemType = 0;
; 260  : 	int iItemIndex = 0;
; 261  : 	int iItemLevel = 0;
; 262  : 	int iItemLevelMin = 0;
; 263  : 	int iItemLevelMax = 0;
; 264  : 	int iSkillOption = 0;
; 265  : 	int iLuckOption = 0;
; 266  : 	int iAddOption = 0;
; 267  : 	int iExOption = 0;
; 268  : 	int iSkillOptionRate = 0;
; 269  : 	int iLuckOptionRate = 0;
; 270  : 	int iAddOptionRate = 0;
; 271  : 	int iExOptionRate = 0;
; 272  : 	BYTE btSkillOption = 0;
; 273  : 	BYTE btLuckOption = 0;
; 274  : 	BYTE btAddOption = 0;
; 275  : 	BYTE btExOption = 0;
; 276  : 	BYTE btExOptionKey = 0;
; 277  : 	BYTE btExOptionValue1 = 0;
; 278  : 	BYTE btExOptionValue2 = 0;
; 279  : 	int iTemp = 0;

  00020	89 bd 04 ff ff
	ff		 mov	 DWORD PTR _lpItem$GSCopy$[ebp], edi
  00026	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  0002b	c6 85 08 ff ff
	ff 00		 mov	 BYTE PTR _btSkillOption$[ebp], 0
  00032	c6 85 18 ff ff
	ff 00		 mov	 BYTE PTR _btLuckOption$[ebp], 0
  00039	c6 85 1c ff ff
	ff 00		 mov	 BYTE PTR _btAddOption$[ebp], 0
  00040	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _btExOption$[ebp], 0
  00047	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iTemp$[ebp], 0

; 280  : 	int iRandomKey = 0;
; 281  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 282  : 
; 283  : 	if ( lpItem == NULL )

  00051	85 ff		 test	 edi, edi
  00053	75 15		 jne	 SHORT $LN21@GetItem

; 284  : 		return -1;

  00055	5f		 pop	 edi
  00056	83 c8 ff	 or	 eax, -1
  00059	5e		 pop	 esi

; 426  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN21@GetItem:
  0006a	53		 push	 ebx

; 285  : 
; 286  : 	iItemCategory = this->CategoryRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  0006b	6a 01		 push	 1
  0006d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00070	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  00075	8b d8		 mov	 ebx, eax

; 287  : 
; 288  : 	if ( iItemCategory < 0 || iItemCategory > MAX_LOTTERY_ITEM_CATEGORY )

  00077	83 fb 17	 cmp	 ebx, 23			; 00000017H
  0007a	0f 87 36 03 00
	00		 ja	 $LN19@GetItem

; 289  : 		return -1;
; 290  : 
; 291  : 	iMaxItemCountInCategory = this->LotteryItemListCount[iItemCategory];

  00080	8b 7c 9e 54	 mov	 edi, DWORD PTR [esi+ebx*4+84]

; 292  : 
; 293  : 	if ( iMaxItemCountInCategory <= 0 ||  iMaxItemCountInCategory > MAX_LOTTERY_ITEM_COUNT )

  00084	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00087	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  0008c	0f 87 24 03 00
	00		 ja	 $LN19@GetItem

; 294  : 		return -1;
; 295  : 
; 296  : 	iItemSelectNumber = rand() % iMaxItemCountInCategory;

  00092	e8 00 00 00 00	 call	 _rand
  00097	99		 cdq
  00098	f7 ff		 idiv	 edi
  0009a	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _iItemSelectNumber$[ebp], edx

; 297  : 
; 298  : 	if ( iItemSelectNumber < 0 ||  iItemSelectNumber > MAX_LOTTERY_ITEM_COUNT )

  000a0	81 fa 82 00 00
	00		 cmp	 edx, 130		; 00000082H
  000a6	0f 87 0a 03 00
	00		 ja	 $LN19@GetItem

; 299  : 		return -1;
; 300  : 
; 301  : 	iItemType = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemType;

  000ac	8b cb		 mov	 ecx, ebx
  000ae	69 c9 82 00 00
	00		 imul	 ecx, 130		; 00000082H
  000b4	03 ca		 add	 ecx, edx
  000b6	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]

; 302  : 	iItemIndex = this->LotteryItemList[iItemCategory][iItemSelectNumber].wItemIndex;

  000b9	0f b7 bc 56 20
	02 00 00	 movzx	 edi, WORD PTR [esi+edx*2+544]
  000c1	8d 04 56	 lea	 eax, DWORD PTR [esi+edx*2]
  000c4	0f b6 90 22 02
	00 00		 movzx	 edx, BYTE PTR [eax+546]
  000cb	89 bd 14 ff ff
	ff		 mov	 DWORD PTR _iItemIndex$[ebp], edi

; 303  : 	iItemLevelMin = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemLevelMin;

  000d1	0f b6 b8 23 02
	00 00		 movzx	 edi, BYTE PTR [eax+547]

; 304  : 	iItemLevelMax = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemLevelMax;
; 305  : 	iSkillOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btSkillOption;
; 306  : 	iLuckOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btLuckOption;

  000d8	8d 8c 89 13 01
	00 00		 lea	 ecx, DWORD PTR [ecx+ecx*4+275]
  000df	0f b6 0c 4e	 movzx	 ecx, BYTE PTR [esi+ecx*2]
  000e3	89 bd 10 ff ff
	ff		 mov	 DWORD PTR _iItemLevelMin$[ebp], edi
  000e9	0f b6 b8 24 02
	00 00		 movzx	 edi, BYTE PTR [eax+548]
  000f0	89 bd 0c ff ff
	ff		 mov	 DWORD PTR _iItemLevelMax$[ebp], edi
  000f6	0f b6 b8 25 02
	00 00		 movzx	 edi, BYTE PTR [eax+549]
  000fd	89 8d fc fe ff
	ff		 mov	 DWORD PTR _iLuckOption$[ebp], ecx

; 307  : 	iAddOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btAddOption;

  00103	0f b6 88 27 02
	00 00		 movzx	 ecx, BYTE PTR [eax+551]

; 308  : 	iExOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btExOption;

  0010a	0f b6 80 28 02
	00 00		 movzx	 eax, BYTE PTR [eax+552]
  00111	89 95 00 ff ff
	ff		 mov	 DWORD PTR _iItemType$[ebp], edx
  00117	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _iSkillOption$[ebp], edi
  0011d	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _iAddOption$[ebp], ecx
  00123	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _iExOption$[ebp], eax

; 309  : 
; 310  : 	if ( iItemType == -1 || iItemIndex == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iSkillOption == -1 || iLuckOption == -1 || iAddOption == -1 || iExOption == -1 )

  00129	83 fa ff	 cmp	 edx, -1
  0012c	0f 84 6c 02 00
	00		 je	 $LN29@GetItem
  00132	83 ca ff	 or	 edx, -1
  00135	39 95 14 ff ff
	ff		 cmp	 DWORD PTR _iItemIndex$[ebp], edx
  0013b	0f 84 60 02 00
	00		 je	 $LN13@GetItem
  00141	39 95 10 ff ff
	ff		 cmp	 DWORD PTR _iItemLevelMin$[ebp], edx
  00147	0f 84 54 02 00
	00		 je	 $LN13@GetItem
  0014d	39 95 0c ff ff
	ff		 cmp	 DWORD PTR _iItemLevelMax$[ebp], edx
  00153	0f 84 48 02 00
	00		 je	 $LN13@GetItem
  00159	3b fa		 cmp	 edi, edx
  0015b	0f 84 40 02 00
	00		 je	 $LN13@GetItem
  00161	39 95 fc fe ff
	ff		 cmp	 DWORD PTR _iLuckOption$[ebp], edx
  00167	0f 84 34 02 00
	00		 je	 $LN13@GetItem
  0016d	3b ca		 cmp	 ecx, edx
  0016f	0f 84 2c 02 00
	00		 je	 $LN13@GetItem
  00175	3b c2		 cmp	 eax, edx
  00177	0f 84 24 02 00
	00		 je	 $LN13@GetItem

; 312  : 
; 313  : 	iSkillOptionRate = this->LotteryItemOptionRate[iItemCategory].iSkillOptionRate;

  0017d	8d 53 0b	 lea	 edx, DWORD PTR [ebx+11]
  00180	03 d2		 add	 edx, edx
  00182	8b 04 d6	 mov	 eax, DWORD PTR [esi+edx*8]
  00185	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iSkillOptionRate$[ebp], eax

; 314  : 	iLuckOptionRate = this->LotteryItemOptionRate[iItemCategory].iLuckOptionRate;

  0018b	8b c3		 mov	 eax, ebx
  0018d	03 c0		 add	 eax, eax
  0018f	8b 94 c6 b4 00
	00 00		 mov	 edx, DWORD PTR [esi+eax*8+180]

; 315  : 	iAddOptionRate = this->LotteryItemOptionRate[iItemCategory].iAddOptionRate;

  00196	8b 8c c6 b8 00
	00 00		 mov	 ecx, DWORD PTR [esi+eax*8+184]
  0019d	89 95 d4 fe ff
	ff		 mov	 DWORD PTR _iLuckOptionRate$[ebp], edx

; 316  : 	iExOptionRate = this->LotteryItemOptionRate[iItemCategory].iExOptionRate;

  001a3	8b 94 c6 bc 00
	00 00		 mov	 edx, DWORD PTR [esi+eax*8+188]
  001aa	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _iAddOptionRate$[ebp], ecx
  001b0	89 95 ec fe ff
	ff		 mov	 DWORD PTR _iExOptionRate$[ebp], edx

; 317  : 
; 318  : 	iRandomKey = rand() % (iItemLevelMax - iItemLevelMin + 1);

  001b6	e8 00 00 00 00	 call	 _rand

; 319  : 	iItemLevel = iItemLevelMin + iRandomKey;

  001bb	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iItemLevelMax$[ebp]
  001c1	2b 8d 10 ff ff
	ff		 sub	 ecx, DWORD PTR _iItemLevelMin$[ebp]
  001c7	99		 cdq
  001c8	41		 inc	 ecx
  001c9	f7 f9		 idiv	 ecx
  001cb	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _iItemLevelMin$[ebp]
  001d1	8d 3c 10	 lea	 edi, DWORD PTR [eax+edx]

; 320  : 
; 321  : 	if ( iItemLevel > iItemLevelMax || iItemLevel < iItemLevelMin )

  001d4	3b bd 0c ff ff
	ff		 cmp	 edi, DWORD PTR _iItemLevelMax$[ebp]
  001da	7f 04		 jg	 SHORT $LN11@GetItem
  001dc	3b f8		 cmp	 edi, eax
  001de	7d 02		 jge	 SHORT $LN12@GetItem
$LN11@GetItem:

; 322  : 		iItemLevel = iItemLevelMin;

  001e0	8b f8		 mov	 edi, eax
$LN12@GetItem:

; 323  : 
; 324  : 	if ( iSkillOption == 1 )

  001e2	83 bd d8 fe ff
	ff 01		 cmp	 DWORD PTR _iSkillOption$[ebp], 1
  001e9	75 1d		 jne	 SHORT $LN24@GetItem

; 325  : 	{
; 326  : 		iRandomKey = GetLargeRand() % 1000000;

  001eb	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  001f0	33 d2		 xor	 edx, edx
  001f2	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  001f7	f7 f1		 div	 ecx

; 327  : 
; 328  : 		if ( iRandomKey < iSkillOptionRate )

  001f9	3b 95 dc fe ff
	ff		 cmp	 edx, DWORD PTR _iSkillOptionRate$[ebp]
  001ff	7d 07		 jge	 SHORT $LN24@GetItem

; 329  : 			btSkillOption = 1;

  00201	c6 85 08 ff ff
	ff 01		 mov	 BYTE PTR _btSkillOption$[ebp], 1
$LN24@GetItem:

; 330  : 	}
; 331  : 
; 332  : 	if ( iLuckOption == 1 )

  00208	83 bd fc fe ff
	ff 01		 cmp	 DWORD PTR _iLuckOption$[ebp], 1
  0020f	75 1d		 jne	 SHORT $LN25@GetItem

; 333  : 	{
; 334  : 		iRandomKey = GetLargeRand() % 1000000;

  00211	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00216	33 d2		 xor	 edx, edx
  00218	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0021d	f7 f1		 div	 ecx

; 335  : 
; 336  : 		if ( iRandomKey < iLuckOptionRate )

  0021f	3b 95 d4 fe ff
	ff		 cmp	 edx, DWORD PTR _iLuckOptionRate$[ebp]
  00225	7d 07		 jge	 SHORT $LN25@GetItem

; 337  : 			btLuckOption = 1;

  00227	c6 85 18 ff ff
	ff 01		 mov	 BYTE PTR _btLuckOption$[ebp], 1
$LN25@GetItem:

; 338  : 	}
; 339  : 
; 340  : 	if ( iAddOption == 1 )

  0022e	83 bd e8 fe ff
	ff 01		 cmp	 DWORD PTR _iAddOption$[ebp], 1
  00235	75 2f		 jne	 SHORT $LN26@GetItem

; 341  : 	{
; 342  : 		iRandomKey = GetLargeRand() % 1000000;

  00237	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0023c	33 d2		 xor	 edx, edx
  0023e	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00243	f7 f1		 div	 ecx

; 343  : 
; 344  : 		if ( iRandomKey < iAddOptionRate )

  00245	3b 95 f0 fe ff
	ff		 cmp	 edx, DWORD PTR _iAddOptionRate$[ebp]
  0024b	7d 19		 jge	 SHORT $LN26@GetItem

; 345  : 		{
; 346  : 			btAddOption = this->AddOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  0024d	6a 01		 push	 1
  0024f	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00252	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue

; 347  : 			iTemp = btAddOption;

  00257	0f b6 d0	 movzx	 edx, al
  0025a	88 85 1c ff ff
	ff		 mov	 BYTE PTR _btAddOption$[ebp], al
  00260	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _iTemp$[ebp], edx
$LN26@GetItem:

; 348  : 		}
; 349  : 	}
; 350  : 
; 351  : 	/*if ( iExOption == 1 )
; 352  : 	{
; 353  : 		iRandomKey = GetLargeRand() % 1000000;
; 354  : 
; 355  : 		if ( iRandomKey < iExOptionRate )
; 356  : 		{
; 357  : 			btExOptionValue1 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 358  : 			btExOptionKey =  1 << (int)(btExOptionValue1);
; 359  : 			btExOption |= btExOptionKey;
; 360  : 
; 361  : 			iItemLevel = 0;
; 362  : 
; 363  : 			if ( (rand() % 4) == 0 )
; 364  : 			{
; 365  : 				btExOptionValue2 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 366  : 
; 367  : 				if ( btExOptionValue1 != btExOptionValue2 )
; 368  : 				{
; 369  : 					btExOptionKey =  1 << (int)(btExOptionValue2);
; 370  : 					btExOption |= btExOptionKey;
; 371  : 				}
; 372  : 			}
; 373  : 		}
; 374  : 	}
; 375  : 	//else if ( iExOption == 2 )
; 376  : 	else if ( iExOption >= 2)
; 377  : 	{
; 378  : 		btExOptionValue1 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 379  : 		btExOptionKey =  1 << (int)(btExOptionValue1);
; 380  : 		btExOption |= btExOptionKey;
; 381  : 		iItemLevel = 0;
; 382  : 
; 383  : 		if ( (rand() % 4) == 0 )
; 384  : 		{
; 385  : 			btExOptionValue2 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 386  : 
; 387  : 			if ( btExOptionValue1 != btExOptionValue2 )
; 388  : 			{
; 389  : 				btExOptionKey =  1 << (int)(btExOptionValue2);
; 390  : 				btExOption |= btExOptionKey;
; 391  : 			}
; 392  : 		}
; 393  : 	}*/
; 394  : 
; 395  : 	if(iExOption >= 1)

  00266	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _iExOption$[ebp]
  0026c	83 fe 01	 cmp	 esi, 1
  0026f	7c 27		 jl	 SHORT $LN28@GetItem

; 396  : 	{
; 397  : 		iRandomKey = GetLargeRand() % 1000000;

  00271	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00276	33 d2		 xor	 edx, edx
  00278	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0027d	f7 f1		 div	 ecx

; 398  : 
; 399  : 		//if ( iRandomKey < iAddOptionRate )
; 400  : 		if ( iRandomKey < iExOptionRate )

  0027f	3b 95 ec fe ff
	ff		 cmp	 edx, DWORD PTR _iExOptionRate$[ebp]
  00285	7d 11		 jge	 SHORT $LN28@GetItem

; 401  : 		{
; 402  : 			btExOption = NewOptionRandEx(0, iExOption);

  00287	56		 push	 esi
  00288	6a 00		 push	 0
  0028a	e8 00 00 00 00	 call	 ?NewOptionRandEx@@YAEHH@Z ; NewOptionRandEx
  0028f	83 c4 08	 add	 esp, 8
  00292	88 85 f8 fe ff
	ff		 mov	 BYTE PTR _btExOption$[ebp], al
$LN28@GetItem:

; 403  : 		}
; 404  : 	}
; 405  : 
; 406  : 	if ( btAddOption != iTemp )

  00298	0f b6 95 1c ff
	ff ff		 movzx	 edx, BYTE PTR _btAddOption$[ebp]
  0029f	3b 95 f4 fe ff
	ff		 cmp	 edx, DWORD PTR _iTemp$[ebp]
  002a5	74 07		 je	 SHORT $LN2@GetItem

; 407  : 	{
; 408  : 		btAddOption = 0;

  002a7	c6 85 1c ff ff
	ff 00		 mov	 BYTE PTR _btAddOption$[ebp], 0
$LN2@GetItem:

; 409  : 	}
; 410  : 
; 411  : 	iItemNumber = ItemGetNumberMake(iItemType, iItemIndex);

  002ae	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _iItemIndex$[ebp]
  002b4	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _iItemType$[ebp]
  002ba	50		 push	 eax
  002bb	51		 push	 ecx
  002bc	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 412  : 	lpItem->Convert(iItemNumber, btSkillOption, btLuckOption, btAddOption, btExOption, 0, 0, NULL, 0xFF, 0, CURRENT_DB_VERSION);

  002c1	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _btExOption$[ebp]
  002c7	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _btLuckOption$[ebp]
  002cd	83 c4 08	 add	 esp, 8
  002d0	6a 03		 push	 3
  002d2	6a 00		 push	 0
  002d4	68 ff 00 00 00	 push	 255			; 000000ffH
  002d9	6a 00		 push	 0
  002db	6a 00		 push	 0
  002dd	6a 00		 push	 0
  002df	52		 push	 edx
  002e0	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _btSkillOption$[ebp]
  002e6	8b f0		 mov	 esi, eax
  002e8	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _btAddOption$[ebp]
  002ee	50		 push	 eax
  002ef	51		 push	 ecx
  002f0	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _lpItem$GSCopy$[ebp]
  002f6	52		 push	 edx
  002f7	56		 push	 esi
  002f8	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 413  : 	lpItem->m_Level = iItemLevel;

  002fd	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _lpItem$GSCopy$[ebp]
  00303	66 89 79 08	 mov	 WORD PTR [ecx+8], di

; 414  : 
; 415  : 	if ( !lpItem->IsItem() )

  00307	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0030c	85 c0		 test	 eax, eax

; 416  : 		return -1;

  0030e	0f 84 a2 00 00
	00		 je	 $LN19@GetItem

; 417  : 
; 418  : 	ItemIsBufExOption(ExOption, lpItem);

  00314	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _lpItem$GSCopy$[ebp]
  0031a	50		 push	 eax
  0031b	8d 4d f4	 lea	 ecx, DWORD PTR _ExOption$[ebp]
  0031e	51		 push	 ecx
  0031f	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 419  : 
; 420  : 	LogAddTD("[CashItem][LotteryItem] Get Item Category:%d,Index:%d (Name:%s,Type:%d,Index:%d,Level:%d) Skill:%d,Luck:%d,AddOption:%d,ExOption(%d,%d,%d,%d,%d,%d)",
; 421  : 		iItemCategory, iItemSelectNumber, ItemAttribute[iItemNumber].Name, iItemType,
; 422  : 		iItemIndex, iItemLevel, btSkillOption, btLuckOption, btAddOption, 
; 423  : 		ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5]);

  00324	6b f6 70	 imul	 esi, 112		; 00000070H
  00327	0f b6 55 f9	 movzx	 edx, BYTE PTR _ExOption$[ebp+5]
  0032b	0f b6 45 f8	 movzx	 eax, BYTE PTR _ExOption$[ebp+4]
  0032f	0f b6 4d f7	 movzx	 ecx, BYTE PTR _ExOption$[ebp+3]
  00333	52		 push	 edx
  00334	0f b6 55 f6	 movzx	 edx, BYTE PTR _ExOption$[ebp+2]
  00338	50		 push	 eax
  00339	0f b6 45 f5	 movzx	 eax, BYTE PTR _ExOption$[ebp+1]
  0033d	51		 push	 ecx
  0033e	0f b6 4d f4	 movzx	 ecx, BYTE PTR _ExOption$[ebp]
  00342	52		 push	 edx
  00343	0f b6 95 1c ff
	ff ff		 movzx	 edx, BYTE PTR _btAddOption$[ebp]
  0034a	50		 push	 eax
  0034b	0f b6 85 18 ff
	ff ff		 movzx	 eax, BYTE PTR _btLuckOption$[ebp]
  00352	51		 push	 ecx
  00353	0f b6 8d 08 ff
	ff ff		 movzx	 ecx, BYTE PTR _btSkillOption$[ebp]
  0035a	52		 push	 edx
  0035b	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR _iItemIndex$[ebp]
  00361	50		 push	 eax
  00362	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _iItemType$[ebp]
  00368	51		 push	 ecx
  00369	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _iItemSelectNumber$[ebp]
  0036f	57		 push	 edi
  00370	52		 push	 edx
  00371	50		 push	 eax
  00372	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00378	56		 push	 esi
  00379	51		 push	 ecx
  0037a	53		 push	 ebx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00386	83 c4 48	 add	 esp, 72			; 00000048H

; 424  : 
; 425  : 	return iItemCategory;

  00389	8b c3		 mov	 eax, ebx
  0038b	5b		 pop	 ebx
  0038c	5f		 pop	 edi
  0038d	5e		 pop	 esi

; 426  : }

  0038e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00391	33 cd		 xor	 ecx, ebp
  00393	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00398	8b e5		 mov	 esp, ebp
  0039a	5d		 pop	 ebp
  0039b	c2 04 00	 ret	 4
$LN29@GetItem:

; 309  : 
; 310  : 	if ( iItemType == -1 || iItemIndex == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iSkillOption == -1 || iLuckOption == -1 || iAddOption == -1 || iExOption == -1 )

  0039e	83 ca ff	 or	 edx, -1
$LN13@GetItem:
  003a1	5b		 pop	 ebx
  003a2	5f		 pop	 edi

; 311  : 		return -1;

  003a3	8b c2		 mov	 eax, edx
  003a5	5e		 pop	 esi

; 426  : }

  003a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a9	33 cd		 xor	 ecx, ebp
  003ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b0	8b e5		 mov	 esp, ebp
  003b2	5d		 pop	 ebp
  003b3	c2 04 00	 ret	 4
$LN19@GetItem:
  003b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b9	5b		 pop	 ebx
  003ba	5f		 pop	 edi
  003bb	33 cd		 xor	 ecx, ebp
  003bd	83 c8 ff	 or	 eax, -1
  003c0	5e		 pop	 esi
  003c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c6	8b e5		 mov	 esp, ebp
  003c8	5d		 pop	 ebp
  003c9	c2 04 00	 ret	 4
?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z ENDP	; CCashLotterySystem::GetItem
_TEXT	ENDS
PUBLIC	?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z ; CCashLotterySystem::GetRequireInvenSize
; Function compile flags: /Ogtp
;	COMDAT ?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z
_TEXT	SEGMENT
_piHeight$ = 8						; size = 4
_piWidth$ = 12						; size = 4
?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z PROC ; CCashLotterySystem::GetRequireInvenSize, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 430  : 	*piHeight = this->iItemMaxHeight;

  00003	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00006	8b 55 08	 mov	 edx, DWORD PTR _piHeight$[ebp]
  00009	89 02		 mov	 DWORD PTR [edx], eax

; 431  : 	*piWidth  = this->iItemMaxWidth;

  0000b	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _piWidth$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 432  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z ENDP ; CCashLotterySystem::GetRequireInvenSize
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCCashLotterySystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCashLotterySystem@@UAEPAXI@Z PROC			; CCashLotterySystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCashLotterySystem@@UAE@XZ ; CCashLotterySystem::~CCashLotterySystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCashLotterySystem@@UAEPAXI@Z ENDP			; CCashLotterySystem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CCashLotterySystem@@QAEXPAD@Z		; CCashLotterySystem::Load
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@
CONST	SEGMENT
??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@ DB '[CashLot'
	DB	'errySystem] Lottery Item List load failed. [%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CCashLotterySystem@@QAEXPAD@Z
_TEXT	SEGMENT
_iItemLevelMax$ = -20					; size = 4
_iSkillOption$ = -16					; size = 4
_iAddOption$ = -12					; size = 4
_iLuckOptionRate$ = -12					; size = 4
_iLuckOption$ = -8					; size = 4
_iAddOptionRate$ = -8					; size = 4
_this$ = -4						; size = 4
_iType$ = 8						; size = 4
_pchFilename$ = 8					; size = 4
?Load@CCashLotterySystem@@QAEXPAD@Z PROC		; CCashLotterySystem::Load, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx

; 57   : 	this->Initialize();

  0000d	e8 00 00 00 00	 call	 ?Initialize@CCashLotterySystem@@QAEXXZ ; CCashLotterySystem::Initialize

; 58   : 
; 59   : 	SMDToken Token;
; 60   : 	SMDFile = fopen(pchFilename, "r");

  00012	8b 75 08	 mov	 esi, DWORD PTR _pchFilename$[ebp]
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _fopen
  00020	83 c4 08	 add	 esp, 8
  00023	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 61   : 
; 62   : 	if ( SMDFile == NULL )

  00028	85 c0		 test	 eax, eax
  0002a	75 16		 jne	 SHORT $LN16@Load

; 63   : 	{
; 64   : 		MsgBox("[CashLoterrySystem] Lottery Item List load failed. [%s]", pchFilename);

  0002c	56		 push	 esi
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@
  00032	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00037	83 c4 08	 add	 esp, 8
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx

; 201  : 
; 202  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN16@Load:

; 65   : 		return;
; 66   : 	}
; 67   : 
; 68   : 	int iType = 0;
; 69   : 	int iCategory = 0;
; 70   : 	int iDropRate = 0;
; 71   : 	int iSkillOptionRate = 0;
; 72   : 	int iLuckOptionRate = 0;
; 73   : 	int iAddOptionRate = 0;
; 74   : 	int iExOptionRate = 0;
; 75   : 	int iItemAddOption = 0;
; 76   : 	int iItemAddOptionRate = 0;
; 77   : 	int iItemExOption = 0;
; 78   : 	int iItemExOptionRate = 0;
; 79   : 	int iItemType = 0;
; 80   : 	int iItemIndex = 0;
; 81   : 	int iItemLevelMin = 0;
; 82   : 	int iItemLevelMax = 0;
; 83   : 	int iSkillOption = 0;
; 84   : 	int iLuckOption = 0;
; 85   : 	int iAddOption = 0;
; 86   : 	int iExOption = 0;
; 87   : 
; 88   : 	while ( true )
; 89   : 	{
; 90   : 		Token = (SMDToken)GetToken();

  00042	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 
; 92   : 		if (Token == END )

  00047	83 f8 02	 cmp	 eax, 2
  0004a	0f 84 d0 02 00
	00		 je	 $LN28@Load
  00050	57		 push	 edi
$LL15@Load:

; 93   : 		{
; 94   : 			break;
; 95   : 		}
; 96   : 
; 97   : 		iType = (int)TokenNumber;

  00051	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00057	e8 00 00 00 00	 call	 __ftol2_sse
  0005c	8b f8		 mov	 edi, eax
  0005e	89 7d 08	 mov	 DWORD PTR _iType$[ebp], edi

; 98   : 
; 99   : 		while ( true )
; 100  : 		{
; 101  : 			Token = (SMDToken)GetToken();

  00061	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 102  : 
; 103  : 			if ( Token == END )

  00066	83 f8 02	 cmp	 eax, 2
  00069	0f 84 a2 02 00
	00		 je	 $LN23@Load
  0006f	90		 npad	 1
$LL12@Load:

; 104  : 			{
; 105  : 				break;
; 106  : 			}
; 107  : 
; 108  : 			if ( iType == 0 )

  00070	85 ff		 test	 edi, edi
  00072	0f 85 ba 00 00
	00		 jne	 $LN9@Load

; 109  : 			{
; 110  : 				if ( strcmp("end", TokenString) == 0 )

  00078	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0007d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL29@Load:
  00082	8a 10		 mov	 dl, BYTE PTR [eax]
  00084	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00086	75 1a		 jne	 SHORT $LN30@Load
  00088	84 d2		 test	 dl, dl
  0008a	74 12		 je	 SHORT $LN31@Load
  0008c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0008f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00092	75 0e		 jne	 SHORT $LN30@Load
  00094	83 c0 02	 add	 eax, 2
  00097	83 c1 02	 add	 ecx, 2
  0009a	84 d2		 test	 dl, dl
  0009c	75 e4		 jne	 SHORT $LL29@Load
$LN31@Load:
  0009e	33 c0		 xor	 eax, eax
  000a0	eb 05		 jmp	 SHORT $LN32@Load
$LN30@Load:
  000a2	1b c0		 sbb	 eax, eax
  000a4	83 d8 ff	 sbb	 eax, -1
$LN32@Load:
  000a7	85 c0		 test	 eax, eax
  000a9	0f 84 62 02 00
	00		 je	 $LN23@Load

; 111  : 				{
; 112  : 					break;
; 113  : 				}
; 114  : 
; 115  : 				iCategory = (int)TokenNumber;

  000af	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b5	e8 00 00 00 00	 call	 __ftol2_sse
  000ba	8b f0		 mov	 esi, eax

; 116  : 
; 117  : 				Token = (SMDToken)GetToken();

  000bc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 118  : 				iDropRate = (int)TokenNumber;

  000c1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c7	e8 00 00 00 00	 call	 __ftol2_sse
  000cc	8b f8		 mov	 edi, eax

; 119  : 
; 120  : 				Token = (SMDToken)GetToken();

  000ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 				iSkillOptionRate = (int)TokenNumber;

  000d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d9	e8 00 00 00 00	 call	 __ftol2_sse
  000de	8b d8		 mov	 ebx, eax

; 122  : 
; 123  : 				Token = (SMDToken)GetToken();

  000e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 				iLuckOptionRate = (int)TokenNumber;

  000e5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000eb	e8 00 00 00 00	 call	 __ftol2_sse
  000f0	89 45 f4	 mov	 DWORD PTR _iLuckOptionRate$[ebp], eax

; 125  : 
; 126  : 				Token = (SMDToken)GetToken();

  000f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 				iAddOptionRate = (int)TokenNumber;

  000f8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fe	e8 00 00 00 00	 call	 __ftol2_sse
  00103	89 45 f8	 mov	 DWORD PTR _iAddOptionRate$[ebp], eax

; 128  : 
; 129  : 				Token = (SMDToken)GetToken();

  00106	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 130  : 				iExOptionRate = (int)TokenNumber;
; 131  : 
; 132  : 				this->SetitemDropRate(iCategory-3, iDropRate, iSkillOptionRate, iLuckOptionRate, iAddOptionRate, iExOptionRate);

  0010b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00111	e8 00 00 00 00	 call	 __ftol2_sse
  00116	8b 4d f4	 mov	 ecx, DWORD PTR _iLuckOptionRate$[ebp]
  00119	50		 push	 eax
  0011a	8b 45 f8	 mov	 eax, DWORD PTR _iAddOptionRate$[ebp]
  0011d	50		 push	 eax
  0011e	51		 push	 ecx
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	53		 push	 ebx
  00123	57		 push	 edi
  00124	83 c6 fd	 add	 esi, -3			; fffffffdH
  00127	56		 push	 esi
  00128	e8 00 00 00 00	 call	 ?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ; CCashLotterySystem::SetitemDropRate

; 133  : 			}
; 134  : 
; 135  : 			if ( iType == 1 )

  0012d	e9 cb 01 00 00	 jmp	 $LN45@Load
$LN9@Load:
  00132	83 ff 01	 cmp	 edi, 1
  00135	75 63		 jne	 SHORT $LN7@Load

; 136  : 			{
; 137  : 				if ( strcmp("end", TokenString) == 0 )

  00137	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0013c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL33@Load:
  00141	8a 10		 mov	 dl, BYTE PTR [eax]
  00143	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00145	75 1a		 jne	 SHORT $LN34@Load
  00147	84 d2		 test	 dl, dl
  00149	74 12		 je	 SHORT $LN35@Load
  0014b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0014e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00151	75 0e		 jne	 SHORT $LN34@Load
  00153	83 c0 02	 add	 eax, 2
  00156	83 c1 02	 add	 ecx, 2
  00159	84 d2		 test	 dl, dl
  0015b	75 e4		 jne	 SHORT $LL33@Load
$LN35@Load:
  0015d	33 c0		 xor	 eax, eax
  0015f	eb 05		 jmp	 SHORT $LN36@Load
$LN34@Load:
  00161	1b c0		 sbb	 eax, eax
  00163	83 d8 ff	 sbb	 eax, -1
$LN36@Load:
  00166	85 c0		 test	 eax, eax
  00168	0f 84 a3 01 00
	00		 je	 $LN23@Load

; 138  : 				{
; 139  : 					break;
; 140  : 				}
; 141  : 
; 142  : 				iItemAddOption = (int)TokenNumber;

  0016e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00174	e8 00 00 00 00	 call	 __ftol2_sse
  00179	8b f0		 mov	 esi, eax

; 143  : 
; 144  : 				Token = (SMDToken)GetToken();

  0017b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 145  : 				iItemAddOptionRate = (int)TokenNumber;
; 146  : 
; 147  : 				this->AddOptionRandomPool.AddValue(iItemAddOption, iItemAddOptionRate);

  00180	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00186	e8 00 00 00 00	 call	 __ftol2_sse
  0018b	50		 push	 eax
  0018c	56		 push	 esi
  0018d	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00190	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 148  : 			}
; 149  : 
; 150  : 			if ( iType == 2 )

  00195	e9 69 01 00 00	 jmp	 $LN2@Load
$LN7@Load:
  0019a	83 ff 02	 cmp	 edi, 2
  0019d	75 6a		 jne	 SHORT $LN5@Load

; 151  : 			{
; 152  : 				if ( strcmp("end", TokenString) == 0 )

  0019f	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001a4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001a9	8d a4 24 00 00
	00 00		 npad	 7
$LL37@Load:
  001b0	8a 10		 mov	 dl, BYTE PTR [eax]
  001b2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001b4	75 1a		 jne	 SHORT $LN38@Load
  001b6	84 d2		 test	 dl, dl
  001b8	74 12		 je	 SHORT $LN39@Load
  001ba	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001bd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001c0	75 0e		 jne	 SHORT $LN38@Load
  001c2	83 c0 02	 add	 eax, 2
  001c5	83 c1 02	 add	 ecx, 2
  001c8	84 d2		 test	 dl, dl
  001ca	75 e4		 jne	 SHORT $LL37@Load
$LN39@Load:
  001cc	33 c0		 xor	 eax, eax
  001ce	eb 05		 jmp	 SHORT $LN40@Load
$LN38@Load:
  001d0	1b c0		 sbb	 eax, eax
  001d2	83 d8 ff	 sbb	 eax, -1
$LN40@Load:
  001d5	85 c0		 test	 eax, eax
  001d7	0f 84 34 01 00
	00		 je	 $LN23@Load

; 153  : 				{
; 154  : 					break;
; 155  : 				}
; 156  : 
; 157  : 				iItemExOption = (int)TokenNumber;

  001dd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e3	e8 00 00 00 00	 call	 __ftol2_sse
  001e8	8b f0		 mov	 esi, eax

; 158  : 
; 159  : 				Token = (SMDToken)GetToken();

  001ea	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 160  : 				iItemExOptionRate = (int)TokenNumber;
; 161  : 
; 162  : 				this->ExOptionRandomPool.AddValue(iItemExOption, iItemExOptionRate);

  001ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f5	e8 00 00 00 00	 call	 __ftol2_sse
  001fa	50		 push	 eax
  001fb	56		 push	 esi
  001fc	8d 4b 34	 lea	 ecx, DWORD PTR [ebx+52]
  001ff	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue
  00204	e9 fa 00 00 00	 jmp	 $LN2@Load
$LN5@Load:

; 163  : 			}
; 164  : 			else if ( iType  >= 3 && iType < 23 )

  00209	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  0020c	83 f8 13	 cmp	 eax, 19			; 00000013H
  0020f	0f 87 ee 00 00
	00		 ja	 $LN2@Load

; 165  : 			{
; 166  : 				if ( strcmp("end", TokenString) == 0 )

  00215	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0021a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0021f	90		 npad	 1
$LL41@Load:
  00220	8a 10		 mov	 dl, BYTE PTR [eax]
  00222	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00224	75 1a		 jne	 SHORT $LN42@Load
  00226	84 d2		 test	 dl, dl
  00228	74 12		 je	 SHORT $LN43@Load
  0022a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0022d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00230	75 0e		 jne	 SHORT $LN42@Load
  00232	83 c0 02	 add	 eax, 2
  00235	83 c1 02	 add	 ecx, 2
  00238	84 d2		 test	 dl, dl
  0023a	75 e4		 jne	 SHORT $LL41@Load
$LN43@Load:
  0023c	33 c0		 xor	 eax, eax
  0023e	eb 05		 jmp	 SHORT $LN44@Load
$LN42@Load:
  00240	1b c0		 sbb	 eax, eax
  00242	83 d8 ff	 sbb	 eax, -1
$LN44@Load:
  00245	85 c0		 test	 eax, eax
  00247	0f 84 c4 00 00
	00		 je	 $LN23@Load

; 167  : 				{
; 168  : 					break;
; 169  : 				}
; 170  : 
; 171  : 				iItemType = (int)TokenNumber;

  0024d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00253	e8 00 00 00 00	 call	 __ftol2_sse
  00258	8b f0		 mov	 esi, eax

; 172  : 
; 173  : 				Token = (SMDToken)GetToken();

  0025a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 174  : 				iItemIndex = (int)TokenNumber;

  0025f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00265	e8 00 00 00 00	 call	 __ftol2_sse
  0026a	8b f8		 mov	 edi, eax

; 175  : 
; 176  : 				Token = (SMDToken)GetToken();

  0026c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 177  : 				iItemLevelMin = (int)TokenNumber;

  00271	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00277	e8 00 00 00 00	 call	 __ftol2_sse
  0027c	8b d8		 mov	 ebx, eax

; 178  : 
; 179  : 				Token = (SMDToken)GetToken();

  0027e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 180  : 				iItemLevelMax = (int)TokenNumber;

  00283	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00289	e8 00 00 00 00	 call	 __ftol2_sse
  0028e	89 45 ec	 mov	 DWORD PTR _iItemLevelMax$[ebp], eax

; 181  : 
; 182  : 				Token = (SMDToken)GetToken();

  00291	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 				iSkillOption = (int)TokenNumber;

  00296	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029c	e8 00 00 00 00	 call	 __ftol2_sse
  002a1	89 45 f0	 mov	 DWORD PTR _iSkillOption$[ebp], eax

; 184  : 
; 185  : 				Token = (SMDToken)GetToken();

  002a4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 186  : 				iLuckOption = (int)TokenNumber;

  002a9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002af	e8 00 00 00 00	 call	 __ftol2_sse
  002b4	89 45 f8	 mov	 DWORD PTR _iLuckOption$[ebp], eax

; 187  : 
; 188  : 				Token = (SMDToken)GetToken();

  002b7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 189  : 				iAddOption = (int)TokenNumber;

  002bc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c2	e8 00 00 00 00	 call	 __ftol2_sse
  002c7	89 45 f4	 mov	 DWORD PTR _iAddOption$[ebp], eax

; 190  : 
; 191  : 				Token = (SMDToken)GetToken();

  002ca	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 192  : 				iExOption = (int)TokenNumber;
; 193  : 
; 194  : 				this->InsertItem(iType-3, iItemType, iItemIndex, iItemLevelMin, iItemLevelMax, iSkillOption, iLuckOption, iAddOption, iExOption);

  002cf	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002d5	e8 00 00 00 00	 call	 __ftol2_sse
  002da	8b 55 f4	 mov	 edx, DWORD PTR _iAddOption$[ebp]
  002dd	8b 4d f0	 mov	 ecx, DWORD PTR _iSkillOption$[ebp]
  002e0	50		 push	 eax
  002e1	8b 45 f8	 mov	 eax, DWORD PTR _iLuckOption$[ebp]
  002e4	52		 push	 edx
  002e5	8b 55 ec	 mov	 edx, DWORD PTR _iItemLevelMax$[ebp]
  002e8	50		 push	 eax
  002e9	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  002ec	51		 push	 ecx
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f0	52		 push	 edx
  002f1	53		 push	 ebx
  002f2	57		 push	 edi
  002f3	56		 push	 esi
  002f4	83 c0 fd	 add	 eax, -3			; fffffffdH
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 ?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z ; CCashLotterySystem::InsertItem
$LN45@Load:
  002fd	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  00300	8b 7d 08	 mov	 edi, DWORD PTR _iType$[ebp]
$LN2@Load:

; 102  : 
; 103  : 			if ( Token == END )

  00303	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00308	83 f8 02	 cmp	 eax, 2
  0030b	0f 85 5f fd ff
	ff		 jne	 $LL12@Load
$LN23@Load:

; 65   : 		return;
; 66   : 	}
; 67   : 
; 68   : 	int iType = 0;
; 69   : 	int iCategory = 0;
; 70   : 	int iDropRate = 0;
; 71   : 	int iSkillOptionRate = 0;
; 72   : 	int iLuckOptionRate = 0;
; 73   : 	int iAddOptionRate = 0;
; 74   : 	int iExOptionRate = 0;
; 75   : 	int iItemAddOption = 0;
; 76   : 	int iItemAddOptionRate = 0;
; 77   : 	int iItemExOption = 0;
; 78   : 	int iItemExOptionRate = 0;
; 79   : 	int iItemType = 0;
; 80   : 	int iItemIndex = 0;
; 81   : 	int iItemLevelMin = 0;
; 82   : 	int iItemLevelMax = 0;
; 83   : 	int iSkillOption = 0;
; 84   : 	int iLuckOption = 0;
; 85   : 	int iAddOption = 0;
; 86   : 	int iExOption = 0;
; 87   : 
; 88   : 	while ( true )
; 89   : 	{
; 90   : 		Token = (SMDToken)GetToken();

  00311	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 
; 92   : 		if (Token == END )

  00316	83 f8 02	 cmp	 eax, 2
  00319	0f 85 32 fd ff
	ff		 jne	 $LL15@Load
  0031f	5f		 pop	 edi
$LN28@Load:

; 195  : 			}
; 196  : 		}
; 197  : 
; 198  : 	}
; 199  : 
; 200  : 	fclose(SMDFile);

  00320	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 _fclose
  0032b	83 c4 04	 add	 esp, 4
  0032e	5e		 pop	 esi
  0032f	5b		 pop	 ebx

; 201  : 
; 202  : }

  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c2 04 00	 ret	 4
?Load@CCashLotterySystem@@QAEXPAD@Z ENDP		; CCashLotterySystem::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CashLotterySystem@@YAXXZ
text$yc	SEGMENT
??__Eg_CashLotterySystem@@YAXXZ PROC			; `dynamic initializer for 'g_CashLotterySystem'', COMDAT

; 10   : CCashLotterySystem g_CashLotterySystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashLotterySystem@@3VCCashLotterySystem@@A ; g_CashLotterySystem
  00005	e8 00 00 00 00	 call	 ??0CCashLotterySystem@@QAE@XZ ; CCashLotterySystem::CCashLotterySystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CashLotterySystem@@YAXXZ ; `dynamic atexit destructor for 'g_CashLotterySystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CashLotterySystem@@YAXXZ ENDP			; `dynamic initializer for 'g_CashLotterySystem''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CashLotterySystem@@YAXXZ
text$yd	SEGMENT
??__Fg_CashLotterySystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CashLotterySystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashLotterySystem@@3VCCashLotterySystem@@A ; g_CashLotterySystem
  00005	e9 00 00 00 00	 jmp	 ??1CCashLotterySystem@@UAE@XZ ; CCashLotterySystem::~CCashLotterySystem
??__Fg_CashLotterySystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CashLotterySystem''
text$yd	ENDS
PUBLIC	?g_CashLotterySystem@@3VCCashLotterySystem@@A	; g_CashLotterySystem
_BSS	SEGMENT
?g_CashLotterySystem@@3VCCashLotterySystem@@A DB 076ecH DUP (?) ; g_CashLotterySystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CashLotterySystem$initializer$ DD FLAT:??__Eg_CashLotterySystem@@YAXXZ
CRT$XCU	ENDS
END
