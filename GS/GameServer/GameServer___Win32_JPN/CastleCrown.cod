; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CastleCrown.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?GetCrownUserIndex@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCrownUserIndex
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
;	COMDAT ?GetCrownUserIndex@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCrownUserIndex@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownUserIndex, COMDAT
; _this$ = ecx

; 390  : 	int GetCrownUserIndex(){return m_iCastleCrownAccessUser;}

  00000	8b 81 f0 01 00
	00		 mov	 eax, DWORD PTR [ecx+496]
  00006	c3		 ret	 0
?GetCrownUserIndex@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownUserIndex
_TEXT	ENDS
PUBLIC	?ResetCrownUserIndex@CCastleSiege@@QAEXXZ	; CCastleSiege::ResetCrownUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ResetCrownUserIndex@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ResetCrownUserIndex, COMDAT
; _this$ = ecx

; 391  : 	void ResetCrownUserIndex(){m_iCastleCrownAccessUser=-1;}

  00000	c7 81 f0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+496], -1
  0000a	c3		 ret	 0
?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ResetCrownUserIndex
_TEXT	ENDS
PUBLIC	?GetCrownAccessUserX@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCrownAccessUserX
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownAccessUserX@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCrownAccessUserX@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownAccessUserX, COMDAT
; _this$ = ecx

; 392  : 	int GetCrownAccessUserX(){return m_btCastleCrownAccessUserX;}

  00000	0f b6 81 f4 01
	00 00		 movzx	 eax, BYTE PTR [ecx+500]
  00007	c3		 ret	 0
?GetCrownAccessUserX@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownAccessUserX
_TEXT	ENDS
PUBLIC	?GetCrownAccessUserY@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCrownAccessUserY
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownAccessUserY@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCrownAccessUserY@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownAccessUserY, COMDAT
; _this$ = ecx

; 393  : 	int GetCrownAccessUserY(){return m_btCastleCrownAccessUserY;}

  00000	0f b6 81 f5 01
	00 00		 movzx	 eax, BYTE PTR [ecx+501]
  00007	c3		 ret	 0
?GetCrownAccessUserY@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownAccessUserY
_TEXT	ENDS
PUBLIC	?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z	; CCastleSiege::SetCrownAccessUserX
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 1
?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z PROC		; CCastleSiege::SetCrownAccessUserX, COMDAT
; _this$ = ecx

; 394  : 	void SetCrownAccessUserX(BYTE iX){m_btCastleCrownAccessUserX = iX;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _iX$[ebp]
  00006	88 81 f4 01 00
	00		 mov	 BYTE PTR [ecx+500], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ENDP		; CCastleSiege::SetCrownAccessUserX
_TEXT	ENDS
PUBLIC	?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z	; CCastleSiege::SetCrownAccessUserY
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_iY$ = 8						; size = 1
?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z PROC		; CCastleSiege::SetCrownAccessUserY, COMDAT
; _this$ = ecx

; 395  : 	void SetCrownAccessUserY(BYTE iY){m_btCastleCrownAccessUserY = iY;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _iY$[ebp]
  00006	88 81 f5 01 00
	00		 mov	 BYTE PTR [ecx+501], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ENDP		; CCastleSiege::SetCrownAccessUserY
_TEXT	ENDS
PUBLIC	?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ	; CCastleSiege::GetCrownAccessTickCount
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ
_TEXT	SEGMENT
?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ PROC	; CCastleSiege::GetCrownAccessTickCount, COMDAT
; _this$ = ecx

; 425  : 	DWORD GetCrownAccessTickCount(){return m_dwCrownAccessTime;}

  00000	8b 81 00 02 00
	00		 mov	 eax, DWORD PTR [ecx+512]
  00006	c3		 ret	 0
?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ ENDP	; CCastleSiege::GetCrownAccessTickCount
_TEXT	ENDS
PUBLIC	??_7CCastleCrown@@6B@				; CCastleCrown::`vftable'
PUBLIC	??0CCastleCrown@@QAE@XZ				; CCastleCrown::CCastleCrown
PUBLIC	??_R4CCastleCrown@@6B@				; CCastleCrown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleCrown@@@8			; CCastleCrown `RTTI Type Descriptor'
PUBLIC	??_R3CCastleCrown@@8				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleCrown@@8				; CCastleCrown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleCrown@@8			; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCastleCrown@@UAEPAXI@Z:PROC		; CCastleCrown::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleCrown@@8
; File e:\work\tranet_version\gs\gameserver\castlecrown.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleCrown@@8 DD FLAT:??_R0?AVCCastleCrown@@@8 ; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleCrown@@8
rdata$r	SEGMENT
??_R2CCastleCrown@@8 DD FLAT:??_R1A@?0A@EA@CCastleCrown@@8 ; CCastleCrown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleCrown@@8
rdata$r	SEGMENT
??_R3CCastleCrown@@8 DD 00H				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleCrown@@@8
_DATA	SEGMENT
??_R0?AVCCastleCrown@@@8 DD FLAT:??_7type_info@@6B@	; CCastleCrown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleCrown@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleCrown@@6B@
rdata$r	SEGMENT
??_R4CCastleCrown@@6B@ DD 00H				; CCastleCrown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleCrown@@@8
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleCrown@@6B@
CONST	SEGMENT
??_7CCastleCrown@@6B@ DD FLAT:??_R4CCastleCrown@@6B@	; CCastleCrown::`vftable'
	DD	FLAT:??_ECCastleCrown@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CCastleCrown@@QAE@XZ
_TEXT	SEGMENT
??0CCastleCrown@@QAE@XZ PROC				; CCastleCrown::CCastleCrown, COMDAT
; _this$ = ecx

; 20   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCastleCrown@@6B@

; 21   : 	return;
; 22   : }

  00008	c3		 ret	 0
??0CCastleCrown@@QAE@XZ ENDP				; CCastleCrown::CCastleCrown
_TEXT	ENDS
PUBLIC	??1CCastleCrown@@UAE@XZ				; CCastleCrown::~CCastleCrown
; Function compile flags: /Ogtp
;	COMDAT ??1CCastleCrown@@UAE@XZ
_TEXT	SEGMENT
??1CCastleCrown@@UAE@XZ PROC				; CCastleCrown::~CCastleCrown, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleCrown@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1CCastleCrown@@UAE@XZ ENDP				; CCastleCrown::~CCastleCrown
_TEXT	ENDS
PUBLIC	??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ ; `string'
PUBLIC	??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ ; `string'
PUBLIC	?CastleCrownAct@CCastleCrown@@QAEXH@Z		; CCastleCrown::CastleCrownAct
EXTRN	?g_UserConfig@@3VCUserConfig@@A:BYTE		; g_UserConfig
EXTRN	?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ:PROC ; CCastleSiege::ResetCrownAccessTickCount
EXTRN	?GCAnsCsAccessCrownState@@YAXHE@Z:PROC		; GCAnsCsAccessCrownState
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::GetCrownSwitchUserIndex
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ DB '['
	DB	'CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%'
	DB	's)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
CONST	SEGMENT
??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ DB '[Cas'
	DB	'tleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : '
	DB	'acc(%d) + %d [%s](%s)(%s)', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlecrown.cpp
CONST	ENDS
;	COMDAT ?CastleCrownAct@CCastleCrown@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CastleCrownAct@CCastleCrown@@QAEXH@Z PROC		; CCastleCrown::CastleCrownAct, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 32   : 	if ( !gObjIsConnected(iIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	0f 84 3b 02 00
	00		 je	 $LN32@CastleCrow

; 33   : 		return;
; 34   : 
; 35   : 	if ( gObj[iIndex].Type != OBJ_NPC ||
; 36   : 		 gObj[iIndex].Class != 216 )

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00023	66 83 7c 30 68
	03		 cmp	 WORD PTR [eax+esi+104], 3
  00029	0f 85 24 02 00
	00		 jne	 $LN32@CastleCrow
  0002f	b9 d8 00 00 00	 mov	 ecx, 216		; 000000d8H
  00034	66 39 8c 30 b8
	00 00 00	 cmp	 WORD PTR [eax+esi+184], cx
  0003c	0f 85 11 02 00
	00		 jne	 $LN32@CastleCrow

; 37   : 		 return;
; 38   : 
; 39   : 	if ( !gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) )

  00042	8b 15 f0 01 00
	00		 mov	 edx, DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+496
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0004e	83 c4 04	 add	 esp, 4
  00051	85 c0		 test	 eax, eax

; 40   : 	{
; 41   : 		g_CastleSiege.ResetCrownUserIndex();
; 42   : 		g_CastleSiege.SetCrownAccessUserX(0);
; 43   : 		g_CastleSiege.SetCrownAccessUserY(0);
; 44   : 		g_CastleSiege.ResetCrownAccessTickCount();
; 45   : 
; 46   : 		return;

  00053	0f 84 89 03 00
	00		 je	 $LN94@CastleCrow

; 47   : 	}
; 48   : 
; 49   : 	LPOBJ lpObj = &gObj[iIndex];
; 50   : 	LPOBJ lpUserObj = &gObj[g_CastleSiege.GetCrownUserIndex()];

  00059	8b 35 f0 01 00
	00		 mov	 esi, DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+496
  0005f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00065	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 51   : 
; 52   : #if(EVOMU_CASTLE_SEGE==TRUE)
; 53   : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  0006b	6a 20		 push	 32			; 00000020H
  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00072	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00077	84 c0		 test	 al, al
  00079	75 20		 jne	 SHORT $LN29@CastleCrow
  0007b	6a 21		 push	 33			; 00000021H
  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00082	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00087	84 c0		 test	 al, al
  00089	75 10		 jne	 SHORT $LN29@CastleCrow
  0008b	6a 22		 push	 34			; 00000022H
  0008d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00092	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00097	84 c0		 test	 al, al
  00099	74 27		 je	 SHORT $LN28@CastleCrow
$LN29@CastleCrow:

; 54   : 	{
; 55   : 		if(lpUserObj->CrownNpc == true)

  0009b	80 be 89 28 00
	00 01		 cmp	 BYTE PTR [esi+10377], 1
  000a2	75 1e		 jne	 SHORT $LN28@CastleCrow

; 56   : 		{
; 57   : 			g_CastleSiege.SetCrownAccessUserX(lpUserObj->X);

  000a4	8a 86 44 01 00
	00		 mov	 al, BYTE PTR [esi+324]
  000aa	a2 f4 01 00 00	 mov	 BYTE PTR ?g_CastleSiege@@3VCCastleSiege@@A+500, al

; 58   : 			g_CastleSiege.SetCrownAccessUserY(lpUserObj->Y);

  000af	8a 8e 46 01 00
	00		 mov	 cl, BYTE PTR [esi+326]
  000b5	88 0d f5 01 00
	00		 mov	 BYTE PTR ?g_CastleSiege@@3VCCastleSiege@@A+501, cl

; 59   : 			lpUserObj->CrownNpc = false;

  000bb	c6 86 89 28 00
	00 00		 mov	 BYTE PTR [esi+10377], 0
$LN28@CastleCrow:

; 60   : 		}
; 61   : 	}
; 62   : #endif
; 63   : 
; 64   : 	if(g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  000c2	6a 30		 push	 48			; 00000030H
  000c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000c9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ce	84 c0		 test	 al, al
  000d0	75 10		 jne	 SHORT $LN26@CastleCrow
  000d2	6a 31		 push	 49			; 00000031H
  000d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000d9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000de	84 c0		 test	 al, al
  000e0	74 27		 je	 SHORT $LN25@CastleCrow
$LN26@CastleCrow:

; 65   : 	{
; 66   : 		if(lpUserObj->CrownNpc == true)

  000e2	80 be 89 28 00
	00 01		 cmp	 BYTE PTR [esi+10377], 1
  000e9	75 1e		 jne	 SHORT $LN25@CastleCrow

; 67   : 		{
; 68   : 			g_CastleSiege.SetCrownAccessUserX(lpUserObj->X);

  000eb	8a 96 44 01 00
	00		 mov	 dl, BYTE PTR [esi+324]
  000f1	88 15 f4 01 00
	00		 mov	 BYTE PTR ?g_CastleSiege@@3VCCastleSiege@@A+500, dl

; 69   : 			g_CastleSiege.SetCrownAccessUserY(lpUserObj->Y);

  000f7	8a 86 46 01 00
	00		 mov	 al, BYTE PTR [esi+326]
  000fd	a2 f5 01 00 00	 mov	 BYTE PTR ?g_CastleSiege@@3VCCastleSiege@@A+501, al

; 70   : 			lpUserObj->CrownNpc = false;

  00102	c6 86 89 28 00
	00 00		 mov	 BYTE PTR [esi+10377], 0
$LN25@CastleCrow:

; 71   : 		}
; 72   : 	}
; 73   : 
; 74   : 	if ( lpUserObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpUserObj->m_btCsJoinSide >= 2 && lpUserObj->m_bCsGuildInvolved == 1 )

  00109	80 be 49 01 00
	00 1e		 cmp	 BYTE PTR [esi+329], 30	; 0000001eH
  00110	0f 85 ee 02 00
	00		 jne	 $LN24@CastleCrow
  00116	80 be 02 1c 00
	00 02		 cmp	 BYTE PTR [esi+7170], 2
  0011d	0f 82 e1 02 00
	00		 jb	 $LN24@CastleCrow
  00123	80 be 03 1c 00
	00 01		 cmp	 BYTE PTR [esi+7171], 1
  0012a	0f 85 d4 02 00
	00		 jne	 $LN24@CastleCrow

; 75   : 	{
; 76   : 		if ( lpUserObj->Y == g_CastleSiege.GetCrownAccessUserY() &&	lpUserObj->X == g_CastleSiege.GetCrownAccessUserX() )

  00130	0f b6 0d f5 01
	00 00		 movzx	 ecx, BYTE PTR ?g_CastleSiege@@3VCCastleSiege@@A+501
  00137	66 39 8e 46 01
	00 00		 cmp	 WORD PTR [esi+326], cx
  0013e	0f 85 fe 01 00
	00		 jne	 $LN23@CastleCrow
  00144	0f b6 15 f4 01
	00 00		 movzx	 edx, BYTE PTR ?g_CastleSiege@@3VCCastleSiege@@A+500
  0014b	66 39 96 44 01
	00 00		 cmp	 WORD PTR [esi+324], dx
  00152	0f 85 ea 01 00
	00		 jne	 $LN23@CastleCrow

; 77   : 		{
; 78   : 			if ( gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) && gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(217)) && gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(218)) )

  00158	a1 f0 01 00 00	 mov	 eax, DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+496
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00163	83 c4 04	 add	 esp, 4
  00166	85 c0		 test	 eax, eax
  00168	0f 84 37 01 00
	00		 je	 $LN22@CastleCrow
  0016e	68 d9 00 00 00	 push	 217			; 000000d9H
  00173	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00178	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00183	83 c4 04	 add	 esp, 4
  00186	85 c0		 test	 eax, eax
  00188	0f 84 17 01 00
	00		 je	 $LN22@CastleCrow
  0018e	68 da 00 00 00	 push	 218			; 000000daH
  00193	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00198	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  001a3	83 c4 04	 add	 esp, 4
  001a6	85 c0		 test	 eax, eax
  001a8	0f 84 f7 00 00
	00		 je	 $LN22@CastleCrow

; 79   : 			{
; 80   : 				if ( gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(217)].m_btCsJoinSide && gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(217)].m_btCsJoinSide )

  001ae	57		 push	 edi
  001af	8b 3d f0 01 00
	00		 mov	 edi, DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+496
  001b5	68 d9 00 00 00	 push	 217			; 000000d9H
  001ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001bf	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  001c4	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  001ca	8b c8		 mov	 ecx, eax
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d1	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  001d7	8a 94 07 02 1c
	00 00		 mov	 dl, BYTE PTR [edi+eax+7170]
  001de	3a 94 01 02 1c
	00 00		 cmp	 dl, BYTE PTR [ecx+eax+7170]
  001e5	75 71		 jne	 SHORT $LN21@CastleCrow
  001e7	8b 3d f0 01 00
	00		 mov	 edi, DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+496
  001ed	68 d9 00 00 00	 push	 217			; 000000d9H
  001f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001f7	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  001fc	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00202	8b c8		 mov	 ecx, eax
  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00209	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0020f	8a 94 07 02 1c
	00 00		 mov	 dl, BYTE PTR [edi+eax+7170]
  00216	3a 94 01 02 1c
	00 00		 cmp	 dl, BYTE PTR [ecx+eax+7170]
  0021d	75 39		 jne	 SHORT $LN21@CastleCrow

; 81   : 				{
; 82   : 					DWORD dwTime = GetTickCount() - g_CastleSiege.GetCrownAccessTickCount();

  0021f	8b 3d 00 02 00
	00		 mov	 edi, DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+512
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 83   : 
; 84   : 						LogAddTD("[CastleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : acc(%d) + %d [%s](%s)(%s)",
; 85   : 							lpUserObj->m_iAccumulatedCrownAccessTime, dwTime,
; 86   : 							lpUserObj->GuildName, lpUserObj->AccountID, lpUserObj->Name);

  0022b	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  0022e	51		 push	 ecx
  0022f	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00232	52		 push	 edx
  00233	8b 96 1c 1c 00
	00		 mov	 edx, DWORD PTR [esi+7196]
  00239	8d 8e 3c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1084]
  0023f	51		 push	 ecx
  00240	2b c7		 sub	 eax, edi
  00242	50		 push	 eax
  00243	52		 push	 edx
  00244	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0024f	83 c4 18	 add	 esp, 24			; 00000018H
  00252	5f		 pop	 edi
$LN32@CastleCrow:
  00253	5e		 pop	 esi

; 176  : 		g_CastleSiege.ResetCrownUserIndex();
; 177  : 		g_CastleSiege.SetCrownAccessUserX(0);
; 178  : 		g_CastleSiege.SetCrownAccessUserY(0);
; 179  : 		g_CastleSiege.ResetCrownAccessTickCount();
; 180  : 	}
; 181  : }

  00254	5d		 pop	 ebp
  00255	c2 04 00	 ret	 4
$LN21@CastleCrow:

; 87   : 				}
; 88   : 				else
; 89   : 				{
; 90   : 					GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  00258	8b 06		 mov	 eax, DWORD PTR [esi]
  0025a	6a 02		 push	 2
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  00262	83 c4 08	 add	 esp, 8

; 91   : 					g_CastleSiege.ResetCrownUserIndex();
; 92   : 					g_CastleSiege.SetCrownAccessUserX(0);
; 93   : 					g_CastleSiege.SetCrownAccessUserY(0);
; 94   : 					g_CastleSiege.ResetCrownAccessTickCount();

  00265	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0026a	c7 05 f0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+496, -1
  00274	66 c7 05 f4 01
	00 00 00 00	 mov	 WORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+500, 0
  0027d	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount

; 95   : 
; 96   : 					LogAddTD("[CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%s)",
; 97   : 						lpUserObj->AccountID, lpUserObj->Name, lpUserObj->GuildName);

  00282	8d 8e 3c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1084]
  00288	51		 push	 ecx
  00289	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  0028c	52		 push	 edx
  0028d	83 c6 6c	 add	 esi, 108		; 0000006cH
  00290	56		 push	 esi
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0029c	83 c4 10	 add	 esp, 16			; 00000010H
  0029f	5f		 pop	 edi
  002a0	5e		 pop	 esi

; 176  : 		g_CastleSiege.ResetCrownUserIndex();
; 177  : 		g_CastleSiege.SetCrownAccessUserX(0);
; 178  : 		g_CastleSiege.SetCrownAccessUserY(0);
; 179  : 		g_CastleSiege.ResetCrownAccessTickCount();
; 180  : 	}
; 181  : }

  002a1	5d		 pop	 ebp
  002a2	c2 04 00	 ret	 4
$LN22@CastleCrow:

; 98   : 				}
; 99   : 			}
; 100  : 			else
; 101  : 			{
; 102  : #if(EVOMU_CASTLE_SEGE==TRUE)
; 103  : 				if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  002a5	6a 20		 push	 32			; 00000020H
  002a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002ac	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002b1	84 c0		 test	 al, al
  002b3	75 20		 jne	 SHORT $LN17@CastleCrow
  002b5	6a 21		 push	 33			; 00000021H
  002b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002bc	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002c1	84 c0		 test	 al, al
  002c3	75 10		 jne	 SHORT $LN17@CastleCrow
  002c5	6a 22		 push	 34			; 00000022H
  002c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002cc	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002d1	84 c0		 test	 al, al
  002d3	74 22		 je	 SHORT $LN91@CastleCrow
$LN17@CastleCrow:

; 104  : 				{
; 105  : 					if(lpUserObj->m_iAccumulatedCrownAccessTime > 0)

  002d5	8b 86 1c 1c 00
	00		 mov	 eax, DWORD PTR [esi+7196]
  002db	85 c0		 test	 eax, eax
  002dd	7e 18		 jle	 SHORT $LN91@CastleCrow

; 106  : 					{
; 107  : 						//lpUserObj->m_iAccumulatedCrownAccessTime -= 4000;
; 108  : 						lpUserObj->m_iAccumulatedCrownAccessTime -= g_UserConfig.m_EvoMU.CSRegTimeMinus;

  002df	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?g_UserConfig@@3VCUserConfig@@A+16
  002e5	89 86 1c 1c 00
	00		 mov	 DWORD PTR [esi+7196], eax

; 109  : 						if(lpUserObj->m_iAccumulatedCrownAccessTime < 0)

  002eb	79 0a		 jns	 SHORT $LN91@CastleCrow

; 110  : 						{
; 111  : 							lpUserObj->m_iAccumulatedCrownAccessTime = 0;

  002ed	c7 86 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+7196], 0
$LN91@CastleCrow:

; 112  : 						}
; 113  : 					}
; 114  : 				}
; 115  : #endif
; 116  : 
; 117  : 				if(g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  002f7	6a 30		 push	 48			; 00000030H
  002f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002fe	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00303	84 c0		 test	 al, al
  00305	75 10		 jne	 SHORT $LN13@CastleCrow
  00307	6a 31		 push	 49			; 00000031H
  00309	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0030e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00313	84 c0		 test	 al, al
  00315	74 21		 je	 SHORT $LN11@CastleCrow
$LN13@CastleCrow:

; 118  : 				{
; 119  : 					if(lpUserObj->m_iAccumulatedCrownAccessTime > 0)

  00317	8b 86 1c 1c 00
	00		 mov	 eax, DWORD PTR [esi+7196]
  0031d	85 c0		 test	 eax, eax
  0031f	7e 17		 jle	 SHORT $LN11@CastleCrow

; 120  : 					{
; 121  : 						//lpObj->m_iAccumulatedCrownAccessTime = 0;
; 122  : 						lpUserObj->m_iAccumulatedCrownAccessTime -= 1000;

  00321	05 18 fc ff ff	 add	 eax, -1000		; fffffc18H
  00326	89 86 1c 1c 00
	00		 mov	 DWORD PTR [esi+7196], eax

; 123  : 						if(lpUserObj->m_iAccumulatedCrownAccessTime < 0)

  0032c	79 0a		 jns	 SHORT $LN11@CastleCrow

; 124  : 						{
; 125  : 							lpUserObj->m_iAccumulatedCrownAccessTime = 0;

  0032e	c7 86 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+7196], 0
$LN11@CastleCrow:

; 126  : 						}
; 127  : 					}
; 128  : 				}
; 129  : 
; 130  : 				GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);//knopka

  00338	8b 06		 mov	 eax, DWORD PTR [esi]
  0033a	6a 02		 push	 2
  0033c	50		 push	 eax

; 131  : 				g_CastleSiege.ResetCrownUserIndex();
; 132  : 				g_CastleSiege.SetCrownAccessUserX(0);
; 133  : 				g_CastleSiege.SetCrownAccessUserY(0);
; 134  : 				g_CastleSiege.ResetCrownAccessTickCount();
; 135  : 			}
; 136  : 		}
; 137  : 		else

  0033d	e9 98 00 00 00	 jmp	 $LN95@CastleCrow
$LN23@CastleCrow:

; 138  : 		{
; 139  : #if(EVOMU_CASTLE_SEGE==TRUE)
; 140  : 			if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  00342	6a 20		 push	 32			; 00000020H
  00344	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00349	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0034e	84 c0		 test	 al, al
  00350	75 20		 jne	 SHORT $LN8@CastleCrow
  00352	6a 21		 push	 33			; 00000021H
  00354	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00359	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0035e	84 c0		 test	 al, al
  00360	75 10		 jne	 SHORT $LN8@CastleCrow
  00362	6a 22		 push	 34			; 00000022H
  00364	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00369	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0036e	84 c0		 test	 al, al
  00370	74 22		 je	 SHORT $LN92@CastleCrow
$LN8@CastleCrow:

; 141  : 			{
; 142  : 				if(lpUserObj->m_iAccumulatedCrownAccessTime > 0)

  00372	8b 86 1c 1c 00
	00		 mov	 eax, DWORD PTR [esi+7196]
  00378	85 c0		 test	 eax, eax
  0037a	7e 18		 jle	 SHORT $LN92@CastleCrow

; 143  : 				{
; 144  : 					//lpUserObj->m_iAccumulatedCrownAccessTime -= 4000;
; 145  : 					lpUserObj->m_iAccumulatedCrownAccessTime -= g_UserConfig.m_EvoMU.CSRegTimeMinus;

  0037c	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?g_UserConfig@@3VCUserConfig@@A+16
  00382	89 86 1c 1c 00
	00		 mov	 DWORD PTR [esi+7196], eax

; 146  : 					if(lpUserObj->m_iAccumulatedCrownAccessTime < 0)

  00388	79 0a		 jns	 SHORT $LN92@CastleCrow

; 147  : 					{
; 148  : 						lpUserObj->m_iAccumulatedCrownAccessTime = 0;

  0038a	c7 86 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+7196], 0
$LN92@CastleCrow:

; 149  : 					}
; 150  : 				}
; 151  : 			}
; 152  : #endif
; 153  : 			if(g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  00394	6a 30		 push	 48			; 00000030H
  00396	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0039b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003a0	84 c0		 test	 al, al
  003a2	75 10		 jne	 SHORT $LN4@CastleCrow
  003a4	6a 31		 push	 49			; 00000031H
  003a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003ab	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003b0	84 c0		 test	 al, al
  003b2	74 21		 je	 SHORT $LN2@CastleCrow
$LN4@CastleCrow:

; 154  : 			{
; 155  : 				if(lpUserObj->m_iAccumulatedCrownAccessTime > 0)

  003b4	8b 86 1c 1c 00
	00		 mov	 eax, DWORD PTR [esi+7196]
  003ba	85 c0		 test	 eax, eax
  003bc	7e 17		 jle	 SHORT $LN2@CastleCrow

; 156  : 				{
; 157  : 					//lpObj->m_iAccumulatedCrownAccessTime = 0;
; 158  : 					lpUserObj->m_iAccumulatedCrownAccessTime -= 1000;

  003be	05 18 fc ff ff	 add	 eax, -1000		; fffffc18H
  003c3	89 86 1c 1c 00
	00		 mov	 DWORD PTR [esi+7196], eax

; 159  : 					if(lpUserObj->m_iAccumulatedCrownAccessTime < 0)

  003c9	79 0a		 jns	 SHORT $LN2@CastleCrow

; 160  : 					{
; 161  : 						lpUserObj->m_iAccumulatedCrownAccessTime = 0;

  003cb	c7 86 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+7196], 0
$LN2@CastleCrow:

; 162  : 					}
; 163  : 				}
; 164  : 			}
; 165  : 			//LogAddC(2,"X:%d == CX:%d | Y:%d == CY:%d", lpUserObj->X, g_CastleSiege.GetCrownAccessUserX(), lpUserObj->Y, g_CastleSiege.GetCrownAccessUserY());
; 166  : 			GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);	//XY

  003d5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003d7	6a 02		 push	 2
  003d9	51		 push	 ecx
$LN95@CastleCrow:
  003da	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  003df	83 c4 08	 add	 esp, 8
$LN94@CastleCrow:

; 167  : 			g_CastleSiege.ResetCrownUserIndex();
; 168  : 			g_CastleSiege.SetCrownAccessUserX(0);
; 169  : 			g_CastleSiege.SetCrownAccessUserY(0);
; 170  : 			g_CastleSiege.ResetCrownAccessTickCount();

  003e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  003e7	c7 05 f0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+496, -1
  003f1	66 c7 05 f4 01
	00 00 00 00	 mov	 WORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+500, 0
  003fa	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
  003ff	5e		 pop	 esi

; 176  : 		g_CastleSiege.ResetCrownUserIndex();
; 177  : 		g_CastleSiege.SetCrownAccessUserX(0);
; 178  : 		g_CastleSiege.SetCrownAccessUserY(0);
; 179  : 		g_CastleSiege.ResetCrownAccessTickCount();
; 180  : 	}
; 181  : }

  00400	5d		 pop	 ebp
  00401	c2 04 00	 ret	 4
$LN24@CastleCrow:

; 171  : 		}
; 172  : 	}
; 173  : 	else
; 174  : 	{
; 175  : 		GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  00404	8b 16		 mov	 edx, DWORD PTR [esi]
  00406	6a 02		 push	 2
  00408	52		 push	 edx
  00409	eb cf		 jmp	 SHORT $LN95@CastleCrow
?CastleCrownAct@CCastleCrown@@QAEXH@Z ENDP		; CCastleCrown::CastleCrownAct
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleCrown@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleCrown@@UAEPAXI@Z PROC			; CCastleCrown::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCastleCrown@@UAEPAXI@Z ENDP			; CCastleCrown::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CsNPC_CastleCrown@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic initializer for 'g_CsNPC_CastleCrown'', COMDAT

; 14   : CCastleCrown g_CsNPC_CastleCrown;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  00005	e8 00 00 00 00	 call	 ??0CCastleCrown@@QAE@XZ	; CCastleCrown::CCastleCrown
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_CastleCrown@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic initializer for 'g_CsNPC_CastleCrown''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_CastleCrown@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  00005	e9 00 00 00 00	 jmp	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
??__Fg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
text$yd	ENDS
PUBLIC	?g_CsNPC_CastleCrown@@3VCCastleCrown@@A		; g_CsNPC_CastleCrown
_BSS	SEGMENT
?g_CsNPC_CastleCrown@@3VCCastleCrown@@A DD 01H DUP (?)	; g_CsNPC_CastleCrown
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_CastleCrown$initializer$ DD FLAT:??__Eg_CsNPC_CastleCrown@@YAXXZ
CRT$XCU	ENDS
END
