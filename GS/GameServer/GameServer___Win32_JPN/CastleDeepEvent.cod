; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CastleDeepEvent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?ProcState_None@CCastleDeepEvent@@QAEXXZ	; CCastleDeepEvent::ProcState_None
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.h
;	COMDAT ?ProcState_None@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
?ProcState_None@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::ProcState_None, COMDAT
; _this$ = ecx

; 76   : 	void ProcState_None() {};

  00000	c3		 ret	 0
?ProcState_None@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::ProcState_None
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 134  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	?StopEvent@CCastleDeepEvent@@QAEXXZ		; CCastleDeepEvent::StopEvent
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
;	COMDAT ?StopEvent@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
?StopEvent@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::StopEvent, COMDAT
; _this$ = ecx

; 95   : ;
; 96   : }

  00000	c3		 ret	 0
?StopEvent@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::StopEvent
_TEXT	ENDS
PUBLIC	?SetState_None@CCastleDeepEvent@@QAEXXZ		; CCastleDeepEvent::SetState_None
; Function compile flags: /Ogtp
;	COMDAT ?SetState_None@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
?SetState_None@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::SetState_None, COMDAT
; _this$ = ecx

; 357  : 	this->StopEvent();
; 358  : }

  00000	c3		 ret	 0
?SetState_None@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::SetState_None
_TEXT	ENDS
PUBLIC	?ClearMonster@CCastleDeepEvent@@QAEXXZ		; CCastleDeepEvent::ClearMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?ClearMonster@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
?ClearMonster@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::ClearMonster, COMDAT
; _this$ = ecx

; 501  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 502  : 	for(int iIndex = 0; iIndex < OBJ_MAXMONSTER; iIndex++)

  00002	33 ff		 xor	 edi, edi
  00004	33 f6		 xor	 esi, esi
$LL4@ClearMonst:

; 503  : 	{
; 504  : 		if (gObjIsConnected(iIndex) && gObj[iIndex].m_Attribute == 62)

  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $LN3@ClearMonst
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	66 83 bc 06 b6
	04 00 00 3e	 cmp	 WORD PTR [esi+eax+1206], 62 ; 0000003eH
  00021	75 09		 jne	 SHORT $LN3@ClearMonst

; 505  : 		{
; 506  : 			gObjDel(iIndex);

  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00029	83 c4 04	 add	 esp, 4
$LN3@ClearMonst:

; 502  : 	for(int iIndex = 0; iIndex < OBJ_MAXMONSTER; iIndex++)

  0002c	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  00032	47		 inc	 edi
  00033	81 fe 80 76 97
	08		 cmp	 esi, 144144000		; 08977680H
  00039	7c cb		 jl	 SHORT $LL4@ClearMonst

; 507  : 		}
; 508  : 	}
; 509  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	c3		 ret	 0
?ClearMonster@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::ClearMonster
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::size, COMDAT
; _this$ = ecx

; 869  : 		return (this->_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 870  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE_NXZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::empty
; Function compile flags: /Ogtp
;	COMDAT ?empty@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE_NXZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	33 d2		 xor	 edx, edx
  00004	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::empty
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator==
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator==
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator==
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??R?$less@H@std@@QBE_NABH0@Z			; std::less<int>::operator()
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 124  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000f	0f 9c c0	 setl	 al

; 126  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Color
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 14	 add	 eax, 20			; 00000014H

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Isnil
; Function compile flags: /Ogtp
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 15	 add	 eax, 21			; 00000015H

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Max
; Function compile flags: /Ogtp
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0000d	75 0c		 jne	 SHORT $LN1@Max
  0000f	90		 npad	 1
$LL2@Max:

; 643  : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN1@Max:

; 644  : 		return (_Pnode);
; 645  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0000c	75 0c		 jne	 SHORT $LN1@Min
  0000e	8b ff		 npad	 2
$LL2@Min:

; 650  : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN1@Min:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@XZ	; std::allocator<std::pair<int const ,int> >::allocator<std::pair<int const ,int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@XZ PROC	; std::allocator<std::pair<int const ,int> >::allocator<std::pair<int const ,int> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<int const ,int> >::allocator<std::pair<int const ,int> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_EVENTTIME@@@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_EVENTTIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_EVENTTIME@@@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@2
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@2:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_EVENTTIME@@@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_EVENTTIME@@0@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_EVENTTIME@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_EVENTTIME@@0@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_EVENTTIME@@0@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@XZ ; std::allocator<CASTLEDEEP_EVENTTIME>::allocator<CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@XZ PROC	; std::allocator<CASTLEDEEP_EVENTTIME>::allocator<CASTLEDEEP_EVENTTIME>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@XZ ENDP	; std::allocator<CASTLEDEEP_EVENTTIME>::allocator<CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_SPAWNTIME@@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_SPAWNTIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_SPAWNTIME@@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@3
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@3
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@3:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBE_NPBUCASTLEDEEP_SPAWNTIME@@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_SPAWNTIME@@0@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_SPAWNTIME@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_SPAWNTIME@@0@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXPAUCASTLEDEEP_SPAWNTIME@@0@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::~_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::~_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::~_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@XZ ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocator<CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@XZ PROC	; std::allocator<CASTLEDEEP_SPAWNTIME>::allocator<CASTLEDEEP_SPAWNTIME>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@XZ ENDP	; std::allocator<CASTLEDEEP_SPAWNTIME>::allocator<CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator==
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBE_NPBUCASTLEDEEP_MONSTERINFO@@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBE_NPBUCASTLEDEEP_MONSTERINFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBE_NPBUCASTLEDEEP_MONSTERINFO@@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@4
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@4
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@4:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBE_NPBUCASTLEDEEP_MONSTERINFO@@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXPAUCASTLEDEEP_MONSTERINFO@@0@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXPAUCASTLEDEEP_MONSTERINFO@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXPAUCASTLEDEEP_MONSTERINFO@@0@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXPAUCASTLEDEEP_MONSTERINFO@@0@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ ; std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::~_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::~_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::~_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@XZ ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocator<CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@XZ PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocator<CASTLEDEEP_MONSTERINFO>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@XZ ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocator<CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   : 		}

  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   : 		}

  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<int const ,int> >::allocator<std::pair<int const ,int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<int const ,int> >::allocator<std::pair<int const ,int> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBHH@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<int const ,int> >::allocator<std::pair<int const ,int> >
_TEXT	ENDS
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Isnil
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 21	 add	 eax, 33			; 00000021H

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Isnil
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 21	 add	 eax, 33			; 00000021H

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXXZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXXZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEXXZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@ABV01@@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::allocator<CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::allocator<CASTLEDEEP_EVENTTIME>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::allocator<CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@I@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@I@Z PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@I@Z ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator*
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXXZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXXZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEXXZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@ABV01@@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocator<CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocator<CASTLEDEEP_SPAWNTIME>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocator<CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@I@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@I@Z PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@I@Z ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_SPAWNTIME@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_SPAWNTIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_SPAWNTIME@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_SPAWNTIME@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Compat
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHH@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHH@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHH@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHH@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00008	75 40		 jne	 SHORT $LN3@operator

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00011	75 1a		 jne	 SHORT $LN34@operator

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00019	75 0f		 jne	 SHORT $LN17@operator
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator:
  00020	8b ca		 mov	 ecx, edx
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN17@operator:
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0002c	c3		 ret	 0
$LN34@operator:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00030	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00034	75 12		 jne	 SHORT $LN1@operator
$LL2@operator:
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0003b	75 0b		 jne	 SHORT $LN1@operator

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00042	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00046	74 ee		 je	 SHORT $LL2@operator
$LN1@operator:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00048	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0004a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 777  : 		return (this->_Myend - this->_Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 778  : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	56		 push	 esi

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 880  : 		}

  0001a	c3		 ret	 0
?size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXXZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXXZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@4:
$LN3@Xlen@4:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEXXZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@ABV01@@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocator<CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocator<CASTLEDEEP_MONSTERINFO>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocator<CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@I@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@I@Z PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@I@Z ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_EVENTTIME@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_EVENTTIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_EVENTTIME@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEABUCASTLEDEEP_EVENTTIME@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Compat
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEABUCASTLEDEEP_MONSTERINFO@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEABUCASTLEDEEP_MONSTERINFO@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEABUCASTLEDEEP_MONSTERINFO@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEABUCASTLEDEEP_MONSTERINFO@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Color
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 20	 add	 eax, 32			; 00000020H

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Color
; Function compile flags: /Ogtp
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 20	 add	 eax, 32			; 00000020H

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Color
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QBEIXZ ; std::allocator<CASTLEDEEP_EVENTTIME>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QBEIXZ PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QBEIXZ ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QBEIXZ ; std::allocator<CASTLEDEEP_SPAWNTIME>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QBEIXZ PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QBEIXZ ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QBEIXZ ; std::allocator<CASTLEDEEP_MONSTERINFO>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QBEIXZ PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QBEIXZ ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z ; std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z PROC ; std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z ENDP ; std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Max
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000d	75 0c		 jne	 SHORT $LN1@Max@2
  0000f	90		 npad	 1
$LL2@Max@2:

; 643  : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00019	74 f5		 je	 SHORT $LL2@Max@2
$LN1@Max@2:

; 644  : 		return (_Pnode);
; 645  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000c	75 0c		 jne	 SHORT $LN1@Min@2
  0000e	8b ff		 npad	 2
$LL2@Min@2:

; 650  : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00018	74 f6		 je	 SHORT $LL2@Min@2
$LN1@Min@2:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z PROC ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z ENDP ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Max
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000d	75 0c		 jne	 SHORT $LN1@Max@3
  0000f	90		 npad	 1
$LL2@Max@3:

; 643  : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00019	74 f5		 je	 SHORT $LL2@Max@3
$LN1@Max@3:

; 644  : 		return (_Pnode);
; 645  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000c	75 0c		 jne	 SHORT $LN1@Min@3
  0000e	8b ff		 npad	 2
$LL2@Min@3:

; 650  : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00018	74 f6		 je	 SHORT $LL2@Min@3
$LN1@Min@3:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z PROC ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@@Z ENDP ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00008	75 40		 jne	 SHORT $LN3@operator@2

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00011	75 1a		 jne	 SHORT $LN34@operator@2

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00019	75 0f		 jne	 SHORT $LN17@operator@2
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator@2:
  00020	8b ca		 mov	 ecx, edx
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00028	74 f6		 je	 SHORT $LL18@operator@2
$LN17@operator@2:
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0002c	c3		 ret	 0
$LN34@operator@2:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00030	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00034	75 12		 jne	 SHORT $LN1@operator@2
$LL2@operator@2:
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0003b	75 0b		 jne	 SHORT $LN1@operator@2

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00042	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00046	74 ee		 je	 SHORT $LL2@operator@2
$LN1@operator@2:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00048	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator@2:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0004a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00008	75 40		 jne	 SHORT $LN3@operator@3

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00011	75 1a		 jne	 SHORT $LN34@operator@3

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00019	75 0f		 jne	 SHORT $LN17@operator@3
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator@3:
  00020	8b ca		 mov	 ecx, edx
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00028	74 f6		 je	 SHORT $LL18@operator@3
$LN17@operator@3:
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0002c	c3		 ret	 0
$LN34@operator@3:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00030	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00034	75 12		 jne	 SHORT $LN1@operator@3
$LL2@operator@3:
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0003b	75 0b		 jne	 SHORT $LN1@operator@3

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00042	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00046	74 ee		 je	 SHORT $LL2@operator@3
$LN1@operator@3:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00048	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator@3:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0004a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBHH@std@@@std@@YAPAU?$pair@$$CBHH@0@AAU10@@Z ; std::addressof<std::pair<int const ,int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@U?$pair@$$CBHH@std@@@std@@YAPAU?$pair@$$CBHH@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHH@std@@@std@@YAPAU?$pair@$$CBHH@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,int> >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHH@std@@@std@@YAPAU?$pair@$$CBHH@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,int> >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBH@std@@YAPBHABH@Z		; std::addressof<int const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCASTLEDEEP_EVENTTIME@@@std@@YAPBUCASTLEDEEP_EVENTTIME@@ABU1@@Z ; std::addressof<CASTLEDEEP_EVENTTIME const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUCASTLEDEEP_EVENTTIME@@@std@@YAPBUCASTLEDEEP_EVENTTIME@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCASTLEDEEP_EVENTTIME@@@std@@YAPBUCASTLEDEEP_EVENTTIME@@ABU1@@Z PROC ; std::addressof<CASTLEDEEP_EVENTTIME const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCASTLEDEEP_EVENTTIME@@@std@@YAPBUCASTLEDEEP_EVENTTIME@@ABU1@@Z ENDP ; std::addressof<CASTLEDEEP_EVENTTIME const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCASTLEDEEP_SPAWNTIME@@@std@@YAPBUCASTLEDEEP_SPAWNTIME@@ABU1@@Z ; std::addressof<CASTLEDEEP_SPAWNTIME const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUCASTLEDEEP_SPAWNTIME@@@std@@YAPBUCASTLEDEEP_SPAWNTIME@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCASTLEDEEP_SPAWNTIME@@@std@@YAPBUCASTLEDEEP_SPAWNTIME@@ABU1@@Z PROC ; std::addressof<CASTLEDEEP_SPAWNTIME const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCASTLEDEEP_SPAWNTIME@@@std@@YAPBUCASTLEDEEP_SPAWNTIME@@ABU1@@Z ENDP ; std::addressof<CASTLEDEEP_SPAWNTIME const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUCASTLEDEEP_MONSTERINFO@@@std@@YAPBUCASTLEDEEP_MONSTERINFO@@ABU1@@Z ; std::addressof<CASTLEDEEP_MONSTERINFO const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUCASTLEDEEP_MONSTERINFO@@@std@@YAPBUCASTLEDEEP_MONSTERINFO@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCASTLEDEEP_MONSTERINFO@@@std@@YAPBUCASTLEDEEP_MONSTERINFO@@ABU1@@Z PROC ; std::addressof<CASTLEDEEP_MONSTERINFO const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCASTLEDEEP_MONSTERINFO@@@std@@YAPBUCASTLEDEEP_MONSTERINFO@@ABU1@@Z ENDP ; std::addressof<CASTLEDEEP_MONSTERINFO const >
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>::_Kfn<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z PROC ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>::_Kfn<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ENDP ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0>::_Kfn<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>::_Kfn<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z PROC ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>::_Kfn<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ENDP ; std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0>::_Kfn<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node><std::pair<int const ,int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?0U?$pair@$$CBHH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node><std::pair<int const ,int> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node><std::pair<int const ,int> >
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node><std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node><std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node><std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node><std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node><std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node><std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBHH@std@@@std@@QBEIXZ ; std::allocator<std::pair<int const ,int> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBHH@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBHH@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<int const ,int> >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBHH@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<int const ,int> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::max_size
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00008	74 06		 je	 SHORT $LN8@operator@4

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0000f	c3		 ret	 0
$LN8@operator@4:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00016	75 17		 jne	 SHORT $LN40@operator@4

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  00018	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001b	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0001f	75 30		 jne	 SHORT $LN21@operator@4
$LL22@operator@4:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0002a	74 f5		 je	 SHORT $LL22@operator@4

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0002e	c3		 ret	 0
$LN40@operator@4:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00036	75 11		 jne	 SHORT $LN3@operator@4
$LL4@operator@4:
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0003c	75 0b		 jne	 SHORT $LN3@operator@4

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003e	89 10		 mov	 DWORD PTR [eax], edx
  00040	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00043	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00047	74 ef		 je	 SHORT $LL4@operator@4
$LN3@operator@4:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0004f	75 02		 jne	 SHORT $LN1@operator@4

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@4:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00051	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@4:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00053	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00008	74 06		 je	 SHORT $LN8@operator@5

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0000f	c3		 ret	 0
$LN8@operator@5:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00016	75 17		 jne	 SHORT $LN40@operator@5

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  00018	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001b	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0001f	75 30		 jne	 SHORT $LN21@operator@5
$LL22@operator@5:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0002a	74 f5		 je	 SHORT $LL22@operator@5

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0002e	c3		 ret	 0
$LN40@operator@5:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00036	75 11		 jne	 SHORT $LN3@operator@5
$LL4@operator@5:
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0003c	75 0b		 jne	 SHORT $LN3@operator@5

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003e	89 10		 mov	 DWORD PTR [eax], edx
  00040	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00043	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00047	74 ef		 je	 SHORT $LL4@operator@5
$LN3@operator@5:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0004f	75 02		 jne	 SHORT $LN1@operator@5

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@5:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00051	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@5:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00053	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00008	74 06		 je	 SHORT $LN8@operator@6

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0000f	c3		 ret	 0
$LN8@operator@6:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00016	75 17		 jne	 SHORT $LN40@operator@6

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  00018	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001b	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0001f	75 30		 jne	 SHORT $LN21@operator@6
$LL22@operator@6:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0002a	74 f5		 je	 SHORT $LL22@operator@6

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0002e	c3		 ret	 0
$LN40@operator@6:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00036	75 11		 jne	 SHORT $LN3@operator@6
$LL4@operator@6:
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0003c	75 0b		 jne	 SHORT $LN3@operator@6

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003e	89 10		 mov	 DWORD PTR [eax], edx
  00040	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00043	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00047	74 ef		 je	 SHORT $LL4@operator@6
$LN3@operator@6:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0004f	75 02		 jne	 SHORT $LN1@operator@6

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@6:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00051	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@6:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00053	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
PUBLIC	??$?0AAHAAH@?$_Pair_base@HH@std@@QAE@AAH0@Z	; std::_Pair_base<int,int>::_Pair_base<int,int><int &,int &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAHAAH@?$_Pair_base@HH@std@@QAE@AAH0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAH@?$_Pair_base@HH@std@@QAE@AAH0@Z PROC	; std::_Pair_base<int,int>::_Pair_base<int,int><int &,int &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAHAAH@?$_Pair_base@HH@std@@QAE@AAH0@Z ENDP	; std::_Pair_base<int,int>::_Pair_base<int,int><int &,int &>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z ; std::forward<std::pair<int,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z PROC ; std::forward<std::pair<int,int> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z ENDP ; std::forward<std::pair<int,int> >
_TEXT	ENDS
PUBLIC	??$forward@AAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z ; std::forward<std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	??$forward@AAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z ; std::forward<std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YAAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YA$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
PUBLIC	??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int &>
_TEXT	ENDS
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUCASTLEDEEP_EVENTTIME@@@std@@YAAAUCASTLEDEEP_EVENTTIME@@AAU1@@Z ; std::forward<CASTLEDEEP_EVENTTIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAUCASTLEDEEP_EVENTTIME@@@std@@YAAAUCASTLEDEEP_EVENTTIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCASTLEDEEP_EVENTTIME@@@std@@YAAAUCASTLEDEEP_EVENTTIME@@AAU1@@Z PROC ; std::forward<CASTLEDEEP_EVENTTIME &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCASTLEDEEP_EVENTTIME@@@std@@YAAAUCASTLEDEEP_EVENTTIME@@AAU1@@Z ENDP ; std::forward<CASTLEDEEP_EVENTTIME &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCASTLEDEEP_EVENTTIME@@@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@AAU2@@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::construct<CASTLEDEEP_EVENTTIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUCASTLEDEEP_EVENTTIME@@@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCASTLEDEEP_EVENTTIME@@@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@AAU2@@Z PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::construct<CASTLEDEEP_EVENTTIME &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@2:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUCASTLEDEEP_EVENTTIME@@@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@AAU2@@Z ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::construct<CASTLEDEEP_EVENTTIME &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCASTLEDEEP_EVENTTIME@@@std@@YAABUCASTLEDEEP_EVENTTIME@@ABU1@@Z ; std::forward<CASTLEDEEP_EVENTTIME const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCASTLEDEEP_EVENTTIME@@@std@@YAABUCASTLEDEEP_EVENTTIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCASTLEDEEP_EVENTTIME@@@std@@YAABUCASTLEDEEP_EVENTTIME@@ABU1@@Z PROC ; std::forward<CASTLEDEEP_EVENTTIME const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCASTLEDEEP_EVENTTIME@@@std@@YAABUCASTLEDEEP_EVENTTIME@@ABU1@@Z ENDP ; std::forward<CASTLEDEEP_EVENTTIME const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUCASTLEDEEP_SPAWNTIME@@@std@@YAAAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ; std::forward<CASTLEDEEP_SPAWNTIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAUCASTLEDEEP_SPAWNTIME@@@std@@YAAAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCASTLEDEEP_SPAWNTIME@@@std@@YAAAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z PROC ; std::forward<CASTLEDEEP_SPAWNTIME &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCASTLEDEEP_SPAWNTIME@@@std@@YAAAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ENDP ; std::forward<CASTLEDEEP_SPAWNTIME &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCASTLEDEEP_SPAWNTIME@@@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct<CASTLEDEEP_SPAWNTIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUCASTLEDEEP_SPAWNTIME@@@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCASTLEDEEP_SPAWNTIME@@@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct<CASTLEDEEP_SPAWNTIME &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@3:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUCASTLEDEEP_SPAWNTIME@@@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct<CASTLEDEEP_SPAWNTIME &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCASTLEDEEP_SPAWNTIME@@@std@@YAABUCASTLEDEEP_SPAWNTIME@@ABU1@@Z ; std::forward<CASTLEDEEP_SPAWNTIME const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCASTLEDEEP_SPAWNTIME@@@std@@YAABUCASTLEDEEP_SPAWNTIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCASTLEDEEP_SPAWNTIME@@@std@@YAABUCASTLEDEEP_SPAWNTIME@@ABU1@@Z PROC ; std::forward<CASTLEDEEP_SPAWNTIME const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCASTLEDEEP_SPAWNTIME@@@std@@YAABUCASTLEDEEP_SPAWNTIME@@ABU1@@Z ENDP ; std::forward<CASTLEDEEP_SPAWNTIME const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUCASTLEDEEP_MONSTERINFO@@@std@@YAAAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ; std::forward<CASTLEDEEP_MONSTERINFO &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAUCASTLEDEEP_MONSTERINFO@@@std@@YAAAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCASTLEDEEP_MONSTERINFO@@@std@@YAAAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z PROC ; std::forward<CASTLEDEEP_MONSTERINFO &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCASTLEDEEP_MONSTERINFO@@@std@@YAAAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ENDP ; std::forward<CASTLEDEEP_MONSTERINFO &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCASTLEDEEP_MONSTERINFO@@@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct<CASTLEDEEP_MONSTERINFO &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUCASTLEDEEP_MONSTERINFO@@@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCASTLEDEEP_MONSTERINFO@@@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct<CASTLEDEEP_MONSTERINFO &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@4
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@4:
  00017	5f		 pop	 edi

; 209  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@AAUCASTLEDEEP_MONSTERINFO@@@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct<CASTLEDEEP_MONSTERINFO &>
_TEXT	ENDS
PUBLIC	??$forward@ABUCASTLEDEEP_MONSTERINFO@@@std@@YAABUCASTLEDEEP_MONSTERINFO@@ABU1@@Z ; std::forward<CASTLEDEEP_MONSTERINFO const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUCASTLEDEEP_MONSTERINFO@@@std@@YAABUCASTLEDEEP_MONSTERINFO@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCASTLEDEEP_MONSTERINFO@@@std@@YAABUCASTLEDEEP_MONSTERINFO@@ABU1@@Z PROC ; std::forward<CASTLEDEEP_MONSTERINFO const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCASTLEDEEP_MONSTERINFO@@@std@@YAABUCASTLEDEEP_MONSTERINFO@@ABU1@@Z ENDP ; std::forward<CASTLEDEEP_MONSTERINFO const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
EXTRN	_memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2527 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCASTLEDEEP_EVENTTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_EVENTTIME@@0@Z ; std::_Ptr_cat<CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@UCASTLEDEEP_EVENTTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_EVENTTIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCASTLEDEEP_EVENTTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_EVENTTIME@@0@Z PROC ; std::_Ptr_cat<CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCASTLEDEEP_EVENTTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_EVENTTIME@@0@Z ENDP ; std::_Ptr_cat<CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCASTLEDEEP_SPAWNTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_SPAWNTIME@@0@Z ; std::_Ptr_cat<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UCASTLEDEEP_SPAWNTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_SPAWNTIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCASTLEDEEP_SPAWNTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_SPAWNTIME@@0@Z PROC ; std::_Ptr_cat<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCASTLEDEEP_SPAWNTIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_SPAWNTIME@@0@Z ENDP ; std::_Ptr_cat<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UCASTLEDEEP_MONSTERINFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_MONSTERINFO@@0@Z ; std::_Ptr_cat<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@UCASTLEDEEP_MONSTERINFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_MONSTERINFO@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCASTLEDEEP_MONSTERINFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_MONSTERINFO@@0@Z PROC ; std::_Ptr_cat<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCASTLEDEEP_MONSTERINFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCASTLEDEEP_MONSTERINFO@@0@Z ENDP ; std::_Ptr_cat<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBHH@?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHH@1@@Z ; std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>::_Kfn<int const ,int>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHH@?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHH@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHH@?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHH@1@@Z PROC ; std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>::_Kfn<int const ,int>, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHH@?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@SAABHABU?$pair@$$CBHH@1@@Z ENDP ; std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>::_Kfn<int const ,int>
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@$$CBHH@std@@@std@@YAXPAU?$pair@$$CBHH@0@@Z ; std::_Destroy<std::pair<int const ,int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U?$pair@$$CBHH@std@@@std@@YAXPAU?$pair@$$CBHH@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBHH@std@@@std@@YAXPAU?$pair@$$CBHH@0@@Z PROC ; std::_Destroy<std::pair<int const ,int> >, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U?$pair@$$CBHH@std@@@std@@YAXPAU?$pair@$$CBHH@0@@Z ENDP ; std::_Destroy<std::pair<int const ,int> >
_TEXT	ENDS
PUBLIC	??$_Construct@HABH@std@@YAXPAHABH@Z		; std::_Construct<int,int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@HABH@std@@YAXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@HABH@std@@YAXPAHABH@Z PROC		; std::_Construct<int,int const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@HABH@std@@YAXPAHABH@Z ENDP		; std::_Construct<int,int const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UCASTLEDEEP_EVENTTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@ABU1@@Z ; std::_Construct<CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UCASTLEDEEP_EVENTTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCASTLEDEEP_EVENTTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@ABU1@@Z PROC ; std::_Construct<CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct@2:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UCASTLEDEEP_EVENTTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@ABU1@@Z ENDP ; std::_Construct<CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UCASTLEDEEP_SPAWNTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@ABU1@@Z ; std::_Construct<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UCASTLEDEEP_SPAWNTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCASTLEDEEP_SPAWNTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@ABU1@@Z PROC ; std::_Construct<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct@3:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UCASTLEDEEP_SPAWNTIME@@ABU1@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@ABU1@@Z ENDP ; std::_Construct<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UCASTLEDEEP_MONSTERINFO@@ABU1@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@ABU1@@Z ; std::_Construct<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UCASTLEDEEP_MONSTERINFO@@ABU1@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCASTLEDEEP_MONSTERINFO@@ABU1@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@ABU1@@Z PROC ; std::_Construct<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@Construct@4
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@Construct@4:
  00017	5f		 pop	 edi

; 49   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Construct@UCASTLEDEEP_MONSTERINFO@@ABU1@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@ABU1@@Z ENDP ; std::_Construct<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AA_N@std@@YA$$QA_NAA_N@Z		; std::move<bool &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AA_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_N@std@@YA$$QA_NAA_N@Z PROC			; std::move<bool &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AA_N@std@@YA$$QA_NAA_N@Z ENDP			; std::move<bool &>
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AAUCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z ; std::move<CASTLEDEEP_EVENTTIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAUCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z PROC ; std::move<CASTLEDEEP_EVENTTIME &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z ENDP ; std::move<CASTLEDEEP_EVENTTIME &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 462  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@@Z ; std::_Val_type<CASTLEDEEP_EVENTTIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@@Z PROC ; std::_Val_type<CASTLEDEEP_EVENTTIME *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@@Z ENDP ; std::_Val_type<CASTLEDEEP_EVENTTIME *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@@Z ; std::_Val_type<CASTLEDEEP_SPAWNTIME *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAUCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@@Z PROC ; std::_Val_type<CASTLEDEEP_SPAWNTIME *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@@Z ENDP ; std::_Val_type<CASTLEDEEP_SPAWNTIME *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@@Z ; std::_Val_type<CASTLEDEEP_MONSTERINFO *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAUCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@@Z PROC ; std::_Val_type<CASTLEDEEP_MONSTERINFO *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@@Z ENDP ; std::_Val_type<CASTLEDEEP_MONSTERINFO *>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCASTLEDEEP_EVENTTIME@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@@Z ; std::_Destroy<CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UCASTLEDEEP_EVENTTIME@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCASTLEDEEP_EVENTTIME@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@@Z PROC ; std::_Destroy<CASTLEDEEP_EVENTTIME>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCASTLEDEEP_EVENTTIME@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@@Z ENDP ; std::_Destroy<CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCASTLEDEEP_SPAWNTIME@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@@Z ; std::_Destroy<CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@UCASTLEDEEP_SPAWNTIME@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCASTLEDEEP_SPAWNTIME@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@@Z PROC ; std::_Destroy<CASTLEDEEP_SPAWNTIME>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCASTLEDEEP_SPAWNTIME@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@@Z ENDP ; std::_Destroy<CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCASTLEDEEP_MONSTERINFO@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@@Z ; std::_Destroy<CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@UCASTLEDEEP_MONSTERINFO@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCASTLEDEEP_MONSTERINFO@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@@Z PROC ; std::_Destroy<CASTLEDEEP_MONSTERINFO>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UCASTLEDEEP_MONSTERINFO@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@@Z ENDP ; std::_Destroy<CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$forward@UCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z ; std::forward<CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z PROC ; std::forward<CASTLEDEEP_EVENTTIME>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCASTLEDEEP_EVENTTIME@@@std@@YA$$QAUCASTLEDEEP_EVENTTIME@@AAU1@@Z ENDP ; std::forward<CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	??$forward@UCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ; std::forward<CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@UCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z PROC ; std::forward<CASTLEDEEP_SPAWNTIME>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ENDP ; std::forward<CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$forward@UCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ; std::forward<CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@UCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z PROC ; std::forward<CASTLEDEEP_MONSTERINFO>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ENDP ; std::forward<CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAPAUCASTLEDEEP_SPAWNTIME@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAPAUCASTLEDEEP_SPAWNTIME@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAPAUCASTLEDEEP_SPAWNTIME@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@AAPAUCASTLEDEEP_SPAWNTIME@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAPAUCASTLEDEEP_MONSTERINFO@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAPAUCASTLEDEEP_MONSTERINFO@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAPAUCASTLEDEEP_MONSTERINFO@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@AAPAUCASTLEDEEP_MONSTERINFO@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *>
_TEXT	ENDS
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
PUBLIC	??$?0HH@?$_Pair_base@$$CBHH@std@@QAE@$$QAH0@Z	; std::_Pair_base<int const ,int>::_Pair_base<int const ,int><int,int>
; Function compile flags: /Ogtp
;	COMDAT ??$?0HH@?$_Pair_base@$$CBHH@std@@QAE@$$QAH0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HH@?$_Pair_base@$$CBHH@std@@QAE@$$QAH0@Z PROC	; std::_Pair_base<int const ,int>::_Pair_base<int const ,int><int,int>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0HH@?$_Pair_base@$$CBHH@std@@QAE@$$QAH0@Z ENDP	; std::_Pair_base<int const ,int>::_Pair_base<int const ,int><int,int>
_TEXT	ENDS
PUBLIC	??$forward@V?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z ; std::forward<std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@V?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??$forward@V?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z ; std::forward<std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@V?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@YA$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	?get_allocator@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::get_allocator
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?get_allocator@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@XZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::get_allocator, COMDAT
; _this$ = ecx

; 893  : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 894  : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 895  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@XZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::get_allocator
_TEXT	ENDS
PUBLIC	?get_allocator@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::get_allocator
; Function compile flags: /Ogtp
;	COMDAT ?get_allocator@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@XZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::get_allocator, COMDAT
; _this$ = ecx

; 893  : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 894  : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 895  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@XZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::get_allocator
_TEXT	ENDS
PUBLIC	??$addressof@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ; std::addressof<CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z PROC ; std::addressof<CASTLEDEEP_SPAWNTIME>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ENDP ; std::addressof<CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$addressof@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ; std::addressof<CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z PROC ; std::addressof<CASTLEDEEP_MONSTERINFO>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ENDP ; std::addressof<CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$?8UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z ; std::operator==<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$?8UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z PROC ; std::operator==<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z ENDP ; std::operator==<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$?8UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z ; std::operator==<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$?8UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z PROC ; std::operator==<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z ENDP ; std::operator==<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$move@AAUCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ; std::move<CASTLEDEEP_SPAWNTIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z PROC ; std::move<CASTLEDEEP_SPAWNTIME &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCASTLEDEEP_SPAWNTIME@@@std@@YA$$QAUCASTLEDEEP_SPAWNTIME@@AAU1@@Z ENDP ; std::move<CASTLEDEEP_SPAWNTIME &>
_TEXT	ENDS
PUBLIC	??$move@AAUCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ; std::move<CASTLEDEEP_MONSTERINFO &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAUCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z PROC ; std::move<CASTLEDEEP_MONSTERINFO &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCASTLEDEEP_MONSTERINFO@@@std@@YA$$QAUCASTLEDEEP_MONSTERINFO@@AAU1@@Z ENDP ; std::move<CASTLEDEEP_MONSTERINFO &>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z	; std::_Container_base0::_Swap_all
; Function compile flags: /Ogtp
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 42   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator!=
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lmost
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rmost
; Function compile flags: /Ogtp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0d		 jne	 SHORT $LN4@Rrotate

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@Rrotate:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0d		 jne	 SHORT $LN2@Rrotate

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lmost
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rmost
; Function compile flags: /Ogtp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Root
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Key
; Function compile flags: /Ogtp
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lmost
; Function compile flags: /Ogtp
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rmost
; Function compile flags: /Ogtp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Root
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Key
; Function compile flags: /Ogtp
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Key
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_EVENTTIME@@@1@@Z ; std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_EVENTTIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_EVENTTIME@@@1@@Z PROC ; std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_EVENTTIME@@@1@@Z ENDP ; std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
_TEXT	ENDS
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator*, COMDAT
; _this$ = ecx

; 396  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 397  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@1@@Z ; std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@1@@Z PROC ; std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@1@@Z ENDP ; std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_SPAWNTIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_SPAWNTIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_SPAWNTIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_SPAWNTIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator==
_TEXT	ENDS
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHH@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHH@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHH@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 396  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 397  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHH@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@1@@Z ; std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@1@@Z PROC ; std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@1@@Z ENDP ; std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator*, COMDAT
; _this$ = ecx

; 396  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 397  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_EVENTTIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_EVENTTIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_EVENTTIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_EVENTTIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator==
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_MONSTERINFO@@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_MONSTERINFO@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_MONSTERINFO@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEAAUCASTLEDEEP_MONSTERINFO@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lbound
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1741 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1742 : 		_Nodeptr _Pnode = _Root();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00009	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000d	75 19		 jne	 SHORT $LN3@Lbound
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Lbound:

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00014	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
  00017	7d 05		 jge	 SHORT $LN2@Lbound

; 1747 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00019	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1748 : 			else

  0001c	eb 04		 jmp	 SHORT $LN1@Lbound
$LN2@Lbound:

; 1749 : 				{	// _Pnode not less than _Keyval, remember it
; 1750 : 				_Wherenode = _Pnode;

  0001e	8b c1		 mov	 eax, ecx

; 1751 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN1@Lbound:

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00022	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00026	74 ec		 je	 SHORT $LL4@Lbound
$LN3@Lbound:

; 1752 : 				}
; 1753 : 
; 1754 : 		return (_Wherenode);	// return best remembered candidate
; 1755 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lbound
; Function compile flags: /Ogtp
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1741 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1742 : 		_Nodeptr _Pnode = _Root();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00009	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000d	75 19		 jne	 SHORT $LN3@Lbound@2
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Lbound@2:

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00014	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
  00017	7d 05		 jge	 SHORT $LN2@Lbound@2

; 1747 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00019	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1748 : 			else

  0001c	eb 04		 jmp	 SHORT $LN1@Lbound@2
$LN2@Lbound@2:

; 1749 : 				{	// _Pnode not less than _Keyval, remember it
; 1750 : 				_Wherenode = _Pnode;

  0001e	8b c1		 mov	 eax, ecx

; 1751 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN1@Lbound@2:

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00022	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00026	74 ec		 je	 SHORT $LL4@Lbound@2
$LN3@Lbound@2:

; 1752 : 				}
; 1753 : 
; 1754 : 		return (_Wherenode);	// return best remembered candidate
; 1755 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEII@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEII@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to@2:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IBEII@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEII@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEII@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@3
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@3:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to@3

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to@3:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IBEII@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEII@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEII@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1275 : 		size_type _Capacity = capacity();

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]
  00009	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000e	f7 ee		 imul	 esi
  00010	03 d6		 add	 edx, esi
  00012	c1 fa 04	 sar	 edx, 4
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0001c	8b c8		 mov	 ecx, eax
  0001e	d1 e9		 shr	 ecx, 1
  00020	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00025	2b d1		 sub	 edx, ecx
  00027	5e		 pop	 esi
  00028	3b d0		 cmp	 edx, eax
  0002a	73 04		 jae	 SHORT $LN4@Grow_to@4
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 02		 jmp	 SHORT $LN5@Grow_to@4
$LN4@Grow_to@4:
  00030	03 c1		 add	 eax, ecx
$LN5@Grow_to@4:

; 1279 : 		if (_Capacity < _Count)

  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00035	3b c1		 cmp	 eax, ecx
  00037	73 02		 jae	 SHORT $LN1@Grow_to@4

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00039	8b c1		 mov	 eax, ecx
$LN1@Grow_to@4:

; 1282 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IBEII@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lrotate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0c		 jne	 SHORT $LN4@Lrotate

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Lrotate:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0b		 jne	 SHORT $LN2@Lrotate

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate@2

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate@2:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0d		 jne	 SHORT $LN4@Rrotate@2

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@Rrotate@2:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0d		 jne	 SHORT $LN2@Rrotate@2

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate@2:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate@2

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate@2:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0c		 jne	 SHORT $LN4@Lrotate@2

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Lrotate@2:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0b		 jne	 SHORT $LN2@Lrotate@2

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate@2:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate@3

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate@3:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0d		 jne	 SHORT $LN4@Rrotate@3

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@Rrotate@3:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0d		 jne	 SHORT $LN2@Rrotate@3

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate@3:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??$?0AAHAAH@?$pair@HH@std@@QAE@AAH0@Z		; std::pair<int,int>::pair<int,int><int &,int &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAHAAH@?$pair@HH@std@@QAE@AAH0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAH@?$pair@HH@std@@QAE@AAH0@Z PROC		; std::pair<int,int>::pair<int,int><int &,int &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAHAAH@?$pair@HH@std@@QAE@AAH0@Z ENDP		; std::pair<int,int>::pair<int,int><int &,int &>
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogtp
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	56		 push	 esi

; 103  : 	_Left = _Move(_Right);

  00009	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	88 10		 mov	 BYTE PTR [eax], dl

; 104  : 	_Right = _Move(_Tmp);

  00010	88 0e		 mov	 BYTE PTR [esi], cl
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@3:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@4
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@4:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO &>
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00@Z		; std::_Move<int *,int *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2536 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T223017 = -12						; size = 12
$T223022 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 46		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN1@Allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002b	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T223022[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T223017[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223022[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T223017[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223017[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T223030 = -12						; size = 12
$T223034 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate@2
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223034[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223030[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223034[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223030[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223030[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T223039 = -12						; size = 12
$T223043 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 14		 ja	 SHORT $LN1@Allocate@3
  00017	8d 04 c9	 lea	 eax, DWORD PTR [ecx+ecx*8]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223043[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223039[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223043[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223039[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223039[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T223048 = -12						; size = 12
$T223052 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 14		 ja	 SHORT $LN1@Allocate@4
  00017	8d 04 c9	 lea	 eax, DWORD PTR [ecx+ecx*8]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223052[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223048[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223052[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223048[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223048[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@UCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@IPAU1@@Z ; std::_Allocate<CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@UCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@IPAU1@@Z
_TEXT	SEGMENT
$T223057 = -12						; size = 12
$T223061 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@IPAU1@@Z PROC ; std::_Allocate<CASTLEDEEP_EVENTTIME>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate@5

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate@5
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate@5
$LN1@Allocate@5:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223061[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223057[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223061[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223057[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223057[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@5:
$LN5@Allocate@5:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate@5:
??$_Allocate@UCASTLEDEEP_EVENTTIME@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@IPAU1@@Z ENDP ; std::_Allocate<CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	??$_Allocate@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@IPAU1@@Z ; std::_Allocate<CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@IPAU1@@Z
_TEXT	SEGMENT
$T223066 = -12						; size = 12
$T223070 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@IPAU1@@Z PROC ; std::_Allocate<CASTLEDEEP_SPAWNTIME>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate@6

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate@6
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate@6
$LN1@Allocate@6:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223070[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223066[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223070[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223066[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223066[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@6:
$LN5@Allocate@6:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate@6:
??$_Allocate@UCASTLEDEEP_SPAWNTIME@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@IPAU1@@Z ENDP ; std::_Allocate<CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$_Allocate@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@IPAU1@@Z ; std::_Allocate<CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@IPAU1@@Z
_TEXT	SEGMENT
$T223075 = -12						; size = 12
$T223079 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@IPAU1@@Z PROC ; std::_Allocate<CASTLEDEEP_MONSTERINFO>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 4a		 je	 SHORT $LN5@Allocate@7

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 1a		 ja	 SHORT $LN1@Allocate@7
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	2b c1		 sub	 eax, ecx
  00020	03 c0		 add	 eax, eax
  00022	03 c0		 add	 eax, eax
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002f	75 28		 jne	 SHORT $LN5@Allocate@7
$LN1@Allocate@7:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00031	8d 4d 08	 lea	 ecx, DWORD PTR $T223079[ebp]
  00034	51		 push	 ecx
  00035	8d 4d f4	 lea	 ecx, DWORD PTR $T223075[ebp]
  00038	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223079[ebp], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 55 f4	 lea	 edx, DWORD PTR $T223075[ebp]
  0004c	52		 push	 edx
  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223075[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@7:
$LN5@Allocate@7:

; 40   : 	}

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN9@Allocate@7:
??$_Allocate@UCASTLEDEEP_MONSTERINFO@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@IPAU1@@Z ENDP ; std::_Allocate<CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@2@@Z ; std::allocator<std::pair<int const ,int> >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@2@@Z PROC ; std::allocator<std::pair<int const ,int> >::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@2@@Z ENDP ; std::allocator<std::pair<int const ,int> >::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@5
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@5:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@ABU3@@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@ABU3@@Z PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@6
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@6:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@ABU3@@Z ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@ABU3@@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@ABU3@@Z PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@7
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@7:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@ABU3@@Z ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@ABU3@@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@ABU3@@Z PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN5@construct@8
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN5@construct@8:
  00017	5f		 pop	 edi

; 198  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@ABU3@@Z ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Key
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::max_size
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator--
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator--
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN1@Move
  00010	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL3@Move
  00025	5e		 pop	 esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 472  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::end
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@@Z PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@@Z ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@@Z PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@@Z ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@@Z PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@@Z ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@$$QAU3@@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@$$QAU3@@Z PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@9
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@9:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEXPAUCASTLEDEEP_EVENTTIME@@$$QAU3@@Z ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@$$QAU3@@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@$$QAU3@@Z PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@10
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@10:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEXPAUCASTLEDEEP_SPAWNTIME@@$$QAU3@@Z ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@$$QAU3@@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@$$QAU3@@Z PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@11
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@11:
  00017	5f		 pop	 edi

; 203  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEXPAUCASTLEDEEP_MONSTERINFO@@$$QAU3@@Z ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::construct
_TEXT	ENDS
PUBLIC	??$?0HH@?$pair@$$CBHH@std@@QAE@$$QAU?$pair@HH@1@@Z ; std::pair<int const ,int>::pair<int const ,int><int,int>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0HH@?$pair@$$CBHH@std@@QAE@$$QAU?$pair@HH@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HH@?$pair@$$CBHH@std@@QAE@$$QAU?$pair@HH@1@@Z PROC	; std::pair<int const ,int>::pair<int const ,int><int,int>, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 256  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??$?0HH@?$pair@$$CBHH@std@@QAE@$$QAU?$pair@HH@1@@Z ENDP	; std::pair<int const ,int>::pair<int const ,int><int,int>
_TEXT	ENDS
PUBLIC	??$?9UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z ; std::operator!=<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?9UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z PROC ; std::operator!=<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9UCASTLEDEEP_SPAWNTIME@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0@Z ENDP ; std::operator!=<CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$?9UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z ; std::operator!=<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$?9UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z PROC ; std::operator!=<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9UCASTLEDEEP_MONSTERINFO@@U0@@std@@YA_NABV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0@Z ENDP ; std::operator!=<CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN1@Move@2
  00010	56		 push	 esi
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL3@Move@2
  00025	5e		 pop	 esi
$LN1@Move@2:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN1@Move@3
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@Move@3:

; 2514 : 		*_Dest = _STD move(*_First);

  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 1c	 add	 edx, 28			; 0000001cH
  0001a	b9 07 00 00 00	 mov	 ecx, 7
  0001f	83 c0 1c	 add	 eax, 28			; 0000001cH
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL3@Move@3
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN1@Move@3:
  0002a	5b		 pop	 ebx

; 2515 : 	return (_Dest);
; 2516 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *>
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
_TEXT	ENDS
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator->
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator->, COMDAT
; _this$ = ecx

; 401  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 402  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator->
_TEXT	ENDS
PUBLIC	??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_SPAWNTIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_SPAWNTIME@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_SPAWNTIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_SPAWNTIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 08	 add	 edx, 8
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::operator!=
_TEXT	ENDS
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHH@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator->
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHH@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHH@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator->, COMDAT
; _this$ = ecx

; 401  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 402  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHH@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator->
_TEXT	ENDS
PUBLIC	??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator->
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator->, COMDAT
; _this$ = ecx

; 401  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 402  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator->
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_EVENTTIME@@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator->
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_EVENTTIME@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_EVENTTIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_EVENTTIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 08	 add	 edx, 8
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::operator!=
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_MONSTERINFO@@XZ ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_MONSTERINFO@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_MONSTERINFO@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBEPAUCASTLEDEEP_MONSTERINFO@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 1c	 add	 edx, 28			; 0000001cH
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lrotate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate@3

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate@3:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0c		 jne	 SHORT $LN4@Lrotate@3

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Lrotate@3:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0b		 jne	 SHORT $LN2@Lrotate@3

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate@3:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_SPAWNTIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 405  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 406  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 407  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 408  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_EVENTTIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@PAUCASTLEDEEP_MONSTERINFO@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Vector_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Make_iter
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T223922 = -12						; size = 12
$T223914 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 46		 je	 SHORT $LN1@allocate
  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN3@allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T223914[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T223922[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223914[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T223922[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223922[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
$T223945 = -12						; size = 12
$T223937 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate@2
  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate@2
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate@2
$LN3@allocate@2:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223937[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223945[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223937[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223945[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223945[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate@2:
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T223968 = -12						; size = 12
$T223960 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate@3
  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 14		 ja	 SHORT $LN3@allocate@3
  00017	8d 04 c9	 lea	 eax, DWORD PTR [ecx+ecx*8]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate@3
$LN3@allocate@3:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223960[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223968[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223960[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223968[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223968[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@3:
$LN1@allocate@3:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate@3:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T223991 = -12						; size = 12
$T223983 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate@4
  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 14		 ja	 SHORT $LN3@allocate@4
  00017	8d 04 c9	 lea	 eax, DWORD PTR [ecx+ecx*8]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate@4
$LN3@allocate@4:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T223983[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T223991[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T223983[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T223991[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T223991[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@4:
$LN1@allocate@4:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate@4:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEPAUCASTLEDEEP_EVENTTIME@@I@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEPAUCASTLEDEEP_EVENTTIME@@I@Z
_TEXT	SEGMENT
$T224014 = -12						; size = 12
$T224006 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEPAUCASTLEDEEP_EVENTTIME@@I@Z PROC ; std::allocator<CASTLEDEEP_EVENTTIME>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate@5
  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate@5
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate@5
$LN3@allocate@5:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T224006[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T224014[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T224006[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T224014[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T224014[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@5:
$LN1@allocate@5:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate@5:
?allocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEPAUCASTLEDEEP_EVENTTIME@@I@Z ENDP ; std::allocator<CASTLEDEEP_EVENTTIME>::allocate
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator++
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEPAUCASTLEDEEP_SPAWNTIME@@I@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEPAUCASTLEDEEP_SPAWNTIME@@I@Z
_TEXT	SEGMENT
$T224042 = -12						; size = 12
$T224034 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEPAUCASTLEDEEP_SPAWNTIME@@I@Z PROC ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate@6
  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate@6
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate@6
$LN3@allocate@6:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T224034[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T224042[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T224034[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T224042[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T224042[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@6:
$LN1@allocate@6:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate@6:
?allocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEPAUCASTLEDEEP_SPAWNTIME@@I@Z ENDP ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEPAUCASTLEDEEP_MONSTERINFO@@I@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEPAUCASTLEDEEP_MONSTERINFO@@I@Z
_TEXT	SEGMENT
$T224065 = -12						; size = 12
$T224057 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEPAUCASTLEDEEP_MONSTERINFO@@I@Z PROC ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 4a		 je	 SHORT $LN1@allocate@7
  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 1a		 ja	 SHORT $LN3@allocate@7
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	2b c1		 sub	 eax, ecx
  00020	03 c0		 add	 eax, eax
  00022	03 c0		 add	 eax, eax
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	75 28		 jne	 SHORT $LN1@allocate@7
$LN3@allocate@7:
  00031	8d 4d 08	 lea	 ecx, DWORD PTR $T224057[ebp]
  00034	51		 push	 ecx
  00035	8d 4d f4	 lea	 ecx, DWORD PTR $T224065[ebp]
  00038	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T224057[ebp], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 55 f4	 lea	 edx, DWORD PTR $T224065[ebp]
  0004c	52		 push	 edx
  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T224065[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@7:
$LN1@allocate@7:

; 188  : 		}

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN12@allocate@7:
?allocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEPAUCASTLEDEEP_MONSTERINFO@@I@Z ENDP ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocate
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator++
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,int> >,std::pair<int const ,int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<int const ,int> >,std::pair<int const ,int> >, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<int const ,int> >,std::pair<int const ,int> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@5
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN9@Cons_val@5:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@6
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@6:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@7
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@7:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN9@Cons_val@8
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN9@Cons_val@8:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00@Z ; std::_Move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00@Z PROC ; std::_Move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN5@Move@4
  00010	56		 push	 esi
$LL7@Move@4:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL7@Move@4
  00025	5e		 pop	 esi
$LN5@Move@4:

; 2536 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCASTLEDEEP_EVENTTIME@@PAU1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00@Z ENDP ; std::_Move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1326 : 		}

  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator--
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator--
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator--
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >,bool>
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T224399 = -16						; size = 12
$T224383 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 18		 push	 24			; 00000018H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	33 c9		 xor	 ecx, ecx
  00012	83 c4 04	 add	 esp, 4
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1a		 je	 SHORT $LN5@Buynode

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00024	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002a	66 89 48 14	 mov	 WORD PTR [eax+20], cx
  0002e	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode:
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T224383[ebp]
  00036	89 4d fc	 mov	 DWORD PTR $T224383[ebp], ecx
  00039	50		 push	 eax
  0003a	8d 4d f0	 lea	 ecx, DWORD PTR $T224399[ebp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T224399[ebp]
  0004a	51		 push	 ecx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T224399[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode:
$LN26@Buynode:
  00057	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode
; Function compile flags: /Ogtp
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T224452 = -16						; size = 12
$T224436 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 24		 push	 36			; 00000024H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	33 c9		 xor	 ecx, ecx
  00012	83 c4 04	 add	 esp, 4
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1a		 je	 SHORT $LN5@Buynode@2

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00024	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002a	66 89 48 20	 mov	 WORD PTR [eax+32], cx
  0002e	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode@2:
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T224436[ebp]
  00036	89 4d fc	 mov	 DWORD PTR $T224436[ebp], ecx
  00039	50		 push	 eax
  0003a	8d 4d f0	 lea	 ecx, DWORD PTR $T224452[ebp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T224452[ebp]
  0004a	51		 push	 ecx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T224452[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode@2:
$LN26@Buynode@2:
  00057	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode
; Function compile flags: /Ogtp
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T224505 = -16						; size = 12
$T224489 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 24		 push	 36			; 00000024H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	33 c9		 xor	 ecx, ecx
  00012	83 c4 04	 add	 esp, 4
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1a		 je	 SHORT $LN5@Buynode@3

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00024	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002a	66 89 48 20	 mov	 WORD PTR [eax+32], cx
  0002e	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode@3:
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T224489[ebp]
  00036	89 4d fc	 mov	 DWORD PTR $T224489[ebp], ecx
  00039	50		 push	 eax
  0003a	8d 4d f0	 lea	 ecx, DWORD PTR $T224505[ebp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T224505[ebp]
  0004a	51		 push	 ecx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T224505[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode@3:
$LN26@Buynode@3:
  00057	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAE_NI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Buy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 08		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	5f		 pop	 edi
  00019	32 c0		 xor	 al, al
  0001b	5e		 pop	 esi

; 1266 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  00020	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00026	76 0a		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN17@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  00032	57		 push	 edi
  00033	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00036	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEPAUCASTLEDEEP_SPAWNTIME@@I@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocate
  0003b	89 06		 mov	 DWORD PTR [esi], eax

; 1262 : 			this->_Mylast = this->_Myfirst;

  0003d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00040	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 1264 : 			}
; 1265 : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 1266 : 		}

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN16@Buy:
?_Buy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAE_NI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Buy
; Function compile flags: /Ogtp
;	COMDAT ?_Buy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 08		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	5f		 pop	 edi
  00019	32 c0		 xor	 al, al
  0001b	5e		 pop	 esi

; 1266 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  00020	81 ff 49 92 24
	09		 cmp	 edi, 153391689		; 09249249H
  00026	76 0a		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN17@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  00032	57		 push	 edi
  00033	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00036	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEPAUCASTLEDEEP_MONSTERINFO@@I@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocate

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  0003b	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  00042	2b cf		 sub	 ecx, edi
  00044	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00047	89 06		 mov	 DWORD PTR [esi], eax
  00049	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0004c	5f		 pop	 edi
  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1264 : 			}
; 1265 : 		return (true);

  00050	b0 01		 mov	 al, 1
  00052	5e		 pop	 esi

; 1266 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN16@Buy@2:
?_Buy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@@Z ; std::_Dest_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@@Z PROC ; std::_Dest_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@@Z ENDP ; std::_Dest_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@@Z ; std::_Dest_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@@Z PROC ; std::_Dest_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@@Z ENDP ; std::_Dest_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@@Z ; std::_Dest_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@@Z PROC ; std::_Dest_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@@Z ENDP ; std::_Dest_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$construct@U?$pair@HH@std@@@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@1@$$QAU?$pair@HH@1@@Z ; std::allocator<std::pair<int const ,int> >::construct<std::pair<int,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$construct@U?$pair@HH@std@@@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@1@$$QAU?$pair@HH@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@U?$pair@HH@std@@@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@1@$$QAU?$pair@HH@1@@Z PROC ; std::allocator<std::pair<int const ,int> >::construct<std::pair<int,int> >, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@12
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@12:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U?$pair@HH@std@@@?$allocator@U?$pair@$$CBHH@std@@@std@@QAEXPAU?$pair@$$CBHH@1@$$QAU?$pair@HH@1@@Z ENDP ; std::allocator<std::pair<int const ,int> >::construct<std::pair<int,int> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@9
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@9:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@10
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@10:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@11
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@11:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 2a		 je	 SHORT $LN30@Uninit_cop
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 14	 mov	 edi, DWORD PTR __Al$[ebp]
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00013	50		 push	 eax
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	83 c0 08	 add	 eax, 8
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c6 08	 add	 esi, 8
  00027	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
  0002a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0002d	75 e4		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  0002f	5f		 pop	 edi
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi

; 383  : 	}

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN30@Uninit_cop:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00035	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 2a		 je	 SHORT $LN30@Uninit_cop@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 14	 mov	 edi, DWORD PTR __Al$[ebp]
$LL14@Uninit_cop@2:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00013	50		 push	 eax
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c6 1c	 add	 esi, 28			; 0000001cH
  00027	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
  0002a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0002d	75 e4		 jne	 SHORT $LL14@Uninit_cop@2

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  0002f	5f		 pop	 edi
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi

; 383  : 	}

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN30@Uninit_cop@2:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00035	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Make_iter
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00@Z ; std::_Move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00@Z PROC ; std::_Move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN5@Move@5
  00010	56		 push	 esi
$LL7@Move@5:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL7@Move@5
  00025	5e		 pop	 esi
$LN5@Move@5:

; 2536 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00@Z ENDP ; std::_Move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00@Z ; std::_Move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00@Z PROC ; std::_Move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN5@Move@6
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL7@Move@6:
  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 1c	 add	 edx, 28			; 0000001cH
  0001a	b9 07 00 00 00	 mov	 ecx, 7
  0001f	83 c0 1c	 add	 eax, 28			; 0000001cH
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL7@Move@6
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN5@Move@6:
  0002a	5b		 pop	 ebx

; 2536 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00@Z ENDP ; std::_Move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::end
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 411  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 413  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 414  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 415  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@XZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::end
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Erase
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 1e		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	8b cb		 mov	 ecx, ebx
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001e	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));
; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e2		 je	 SHORT $LL3@Erase
$LN1@Erase:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z
_TEXT	SEGMENT
$T225161 = -16						; size = 12
$T225138 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	6a 18		 push	 24			; 00000018H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN15@Tree_val
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 14	 mov	 BYTE PTR [ecx+20], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 15	 mov	 BYTE PTR [edx+21], al

; 551  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T225138[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T225161[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T225138[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T225161[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T225161[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val:
$LN36@Tree_val:
  0006e	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHH@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00015	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0001d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	3b c8		 cmp	 ecx, eax
  00024	73 50		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00026	53		 push	 ebx
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002c	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00031	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00034	8b d8		 mov	 ebx, eax
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	2b d0		 sub	 edx, eax
  0003a	c1 fa 02	 sar	 edx, 2
  0003d	03 d2		 add	 edx, edx
  0003f	03 d2		 add	 edx, edx
  00041	52		 push	 edx
  00042	50		 push	 eax
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 _memmove

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004e	2b f8		 sub	 edi, eax
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00056	85 c0		 test	 eax, eax
  00058	74 09		 je	 SHORT $LN37@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	83 c4 04	 add	 esp, 4
$LN37@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00063	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00066	8d 14 bb	 lea	 edx, DWORD PTR [ebx+edi*4]
  00069	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  0006c	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  0006d	89 1e		 mov	 DWORD PTR [esi], ebx
  0006f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00072	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00075	5b		 pop	 ebx
$LN3@reserve:
  00076	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::reserve
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::begin
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T225374 = -16						; size = 12
$T225358 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN15@Tree_val@2
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 551  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val@2:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T225358[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T225374[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T225358[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T225374[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T225374[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val@2:
$LN36@Tree_val@2:
  0006e	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::begin
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T225489 = -16						; size = 12
$T225473 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN15@Tree_val@3
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 551  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val@3:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T225473[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T225489[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T225473[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T225489[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T225489[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val@3:
$LN36@Tree_val@3:
  0006e	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
_TEXT	ENDS
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Insert
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  0000b	72 16		 jb	 SHORT $LN17@Insert

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));
; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  0000d	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0001e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN377@Insert:
$LN17@Insert:

; 1640 : 			}
; 1641 : 		++this->_Mysize;

  00023	40		 inc	 eax
  00024	53		 push	 ebx
  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1642 : 		_Newnode->_Parent = _Wherenode;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0002f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00032	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00035	32 db		 xor	 bl, bl
  00037	3b c2		 cmp	 eax, edx
  00039	75 10		 jne	 SHORT $LN16@Insert

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  0003b	89 7a 04	 mov	 DWORD PTR [edx+4], edi

; 1647 : 			_Lmost() = _Newnode;

  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	89 3a		 mov	 DWORD PTR [edx], edi

; 1648 : 			_Rmost() = _Newnode;

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00046	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00049	eb 20		 jmp	 SHORT $LN11@Insert
$LN16@Insert:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  0004b	38 5d 0c	 cmp	 BYTE PTR __Addleft$[ebp], bl
  0004e	74 0d		 je	 SHORT $LN14@Insert

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  00050	89 38		 mov	 DWORD PTR [eax], edi

; 1653 : 			if (_Wherenode == _Lmost())

  00052	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00055	3b 02		 cmp	 eax, DWORD PTR [edx]
  00057	75 12		 jne	 SHORT $LN11@Insert

; 1654 : 				_Lmost() = _Newnode;

  00059	89 3a		 mov	 DWORD PTR [edx], edi

; 1655 : 			}
; 1656 : 		else

  0005b	eb 0e		 jmp	 SHORT $LN11@Insert
$LN14@Insert:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0005d	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1659 : 			if (_Wherenode == _Rmost())

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00066	75 03		 jne	 SHORT $LN11@Insert

; 1660 : 				_Rmost() = _Newnode;

  00068	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN11@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0006b	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0006e	8b c7		 mov	 eax, edi
  00070	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  00073	0f 85 97 01 00
	00		 jne	 $LN9@Insert
  00079	56		 push	 esi
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL10@Insert:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00080	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00083	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00086	3b 16		 cmp	 edx, DWORD PTR [esi]
  00088	0f 85 c1 00 00
	00		 jne	 $LN8@Insert

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  0008e	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00091	38 5e 14	 cmp	 BYTE PTR [esi+20], bl
  00094	75 1c		 jne	 SHORT $LN7@Insert

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00096	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  0009a	c6 46 14 01	 mov	 BYTE PTR [esi+20], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  0009e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000a4	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1677 : 					}
; 1678 : 				else

  000ad	e9 51 01 00 00	 jmp	 $LN316@Insert
$LN7@Insert:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000b2	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000b5	75 3a		 jne	 SHORT $LN111@Insert

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000b7	8b c2		 mov	 eax, edx

; 1683 : 						_Lrotate(_Pnode);

  000b9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000bc	8b 32		 mov	 esi, DWORD PTR [edx]
  000be	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000c1	8b 32		 mov	 esi, DWORD PTR [edx]
  000c3	38 5e 15	 cmp	 BYTE PTR [esi+21], bl
  000c6	75 03		 jne	 SHORT $LN110@Insert
  000c8	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN110@Insert:
  000cb	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000ce	89 72 04	 mov	 DWORD PTR [edx+4], esi
  000d1	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000d4	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000d7	75 05		 jne	 SHORT $LN109@Insert
  000d9	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000dc	eb 0e		 jmp	 SHORT $LN106@Insert
$LN109@Insert:
  000de	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000e1	3b 06		 cmp	 eax, DWORD PTR [esi]
  000e3	75 04		 jne	 SHORT $LN107@Insert
  000e5	89 16		 mov	 DWORD PTR [esi], edx
  000e7	eb 03		 jmp	 SHORT $LN106@Insert
$LN107@Insert:
  000e9	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN106@Insert:
  000ec	89 02		 mov	 DWORD PTR [edx], eax
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN111@Insert:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f4	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fb	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000fe	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00101	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00104	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00107	8b 32		 mov	 esi, DWORD PTR [edx]
  00109	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0010c	89 3a		 mov	 DWORD PTR [edx], edi
  0010e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00111	38 5f 15	 cmp	 BYTE PTR [edi+21], bl
  00114	75 03		 jne	 SHORT $LN173@Insert
  00116	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN173@Insert:
  00119	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0011c	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0011f	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00122	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  00125	75 0b		 jne	 SHORT $LN172@Insert
  00127	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0012a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0012d	e9 cb 00 00 00	 jmp	 $LN376@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert:
  00132	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  00135	3b 57 08	 cmp	 edx, DWORD PTR [edi+8]
  00138	75 0b		 jne	 SHORT $LN170@Insert
  0013a	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0013d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00140	e9 b8 00 00 00	 jmp	 $LN376@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert:
  00145	89 37		 mov	 DWORD PTR [edi], esi
  00147	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0014a	e9 ae 00 00 00	 jmp	 $LN376@Insert
$LN8@Insert:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  0014f	8b 36		 mov	 esi, DWORD PTR [esi]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  00151	38 5e 14	 cmp	 BYTE PTR [esi+20], bl
  00154	75 1c		 jne	 SHORT $LN3@Insert

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00156	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  0015a	c6 46 14 01	 mov	 BYTE PTR [esi+20], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  0015e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00161	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00164	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  00167	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  0016d	e9 91 00 00 00	 jmp	 $LN316@Insert
$LN3@Insert:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00172	3b 02		 cmp	 eax, DWORD PTR [edx]
  00174	75 3c		 jne	 SHORT $LN253@Insert

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  00176	8b c2		 mov	 eax, edx

; 1709 : 						_Rrotate(_Pnode);

  00178	8b 10		 mov	 edx, DWORD PTR [eax]
  0017a	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  0017d	89 30		 mov	 DWORD PTR [eax], esi
  0017f	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00182	38 5e 15	 cmp	 BYTE PTR [esi+21], bl
  00185	75 03		 jne	 SHORT $LN252@Insert
  00187	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN252@Insert:
  0018a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0018d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00190	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00193	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00196	75 05		 jne	 SHORT $LN251@Insert
  00198	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0019b	eb 0f		 jmp	 SHORT $LN248@Insert
$LN251@Insert:
  0019d	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  001a0	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001a3	75 05		 jne	 SHORT $LN249@Insert
  001a5	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001a8	eb 02		 jmp	 SHORT $LN248@Insert
$LN249@Insert:
  001aa	89 16		 mov	 DWORD PTR [esi], edx
$LN248@Insert:
  001ac	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001af	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN253@Insert:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  001b2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b5	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  001b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001bf	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001c2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c5	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c8	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  001cb	8b 3e		 mov	 edi, DWORD PTR [esi]
  001cd	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  001d0	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d2	38 5f 15	 cmp	 BYTE PTR [edi+21], bl
  001d5	75 03		 jne	 SHORT $LN315@Insert
  001d7	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN315@Insert:
  001da	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001dd	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  001e0	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001e3	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  001e6	75 05		 jne	 SHORT $LN314@Insert
  001e8	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001eb	eb 0e		 jmp	 SHORT $LN311@Insert
$LN314@Insert:
  001ed	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001f0	3b 17		 cmp	 edx, DWORD PTR [edi]
  001f2	75 04		 jne	 SHORT $LN312@Insert
  001f4	89 37		 mov	 DWORD PTR [edi], esi
  001f6	eb 03		 jmp	 SHORT $LN311@Insert
$LN312@Insert:
  001f8	89 77 08	 mov	 DWORD PTR [edi+8], esi
$LN311@Insert:
  001fb	89 16		 mov	 DWORD PTR [esi], edx
$LN376@Insert:
  001fd	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00200	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN316@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00203	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00206	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  00209	0f 84 71 fe ff
	ff		 je	 $LL10@Insert
  0020f	5e		 pop	 esi
$LN9@Insert:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00210	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00213	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1720 : 		return (iterator(_Newnode, this));

  00216	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00219	89 38		 mov	 DWORD PTR [eax], edi
  0021b	5f		 pop	 edi
  0021c	c6 41 14 01	 mov	 BYTE PTR [ecx+20], 1
  00220	5b		 pop	 ebx

; 1721 : 		}

  00221	5d		 pop	 ebp
  00222	c2 10 00	 ret	 16			; 00000010H
$LN375@Insert:
?_Insert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CASTLEDEEP_EVENTTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CASTLEDEEP_EVENTTIME> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CASTLEDEEP_EVENTTIME> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@U?$pair@HH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@$$QAU?$pair@HH@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,int> >,std::pair<int const ,int>,std::pair<int,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@U?$pair@HH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@$$QAU?$pair@HH@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@U?$pair@HH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@$$QAU?$pair@HH@0@@Z PROC ; std::_Cons_val<std::allocator<std::pair<int const ,int> >,std::pair<int const ,int>,std::pair<int,int> >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@12
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@12:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@U?$pair@HH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@$$QAU?$pair@HH@0@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<int const ,int> >,std::pair<int const ,int>,std::pair<int,int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME>
  0001e	83 c6 08	 add	 esi, 8
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 08	 add	 edi, 8
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov@2
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov@2:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
  0001e	83 c6 08	 add	 esi, 8
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 08	 add	 edi, 8
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov@2

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@U1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@U1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@U1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov@3
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov@3:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
  0001e	83 c6 1c	 add	 esi, 28			; 0000001cH
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 1c	 add	 edi, 28			; 0000001cH
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov@3

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov@3:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@U1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z
_TEXT	SEGMENT
__Cat$226411 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$226411[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	51		 push	 ecx
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
  0001d	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z
_TEXT	SEGMENT
__Cat$226418 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$226418[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	51		 push	 ecx
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
  0001d	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	??_C@_0EM@HOLJDKOB@?$FLCastleDeep?5Event?$FN?5Sync?5Start?5Ti@ ; `string'
PUBLIC	?SetState@CCastleDeepEvent@@QAEXH@Z		; CCastleDeepEvent::SetState
PUBLIC	??_C@_0CJ@IPPMNGNJ@?$FLCastleDeep?5Event?$FN?5No?5Schedule?5T@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CheckSync@CCastleDeepEvent@@QAEXXZ		; CCastleDeepEvent::CheckSync
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
;	COMDAT ??_C@_0EM@HOLJDKOB@?$FLCastleDeep?5Event?$FN?5Sync?5Start?5Ti@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0EM@HOLJDKOB@?$FLCastleDeep?5Event?$FN?5Sync?5Start?5Ti@ DB '[Castl'
	DB	'eDeep Event] Sync Start Time. [%d] min remain (START HOUR:%d,'
	DB	' MIN:%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IPPMNGNJ@?$FLCastleDeep?5Event?$FN?5No?5Schedule?5T@
CONST	SEGMENT
??_C@_0CJ@IPPMNGNJ@?$FLCastleDeep?5Event?$FN?5No?5Schedule?5T@ DB '[Castl'
	DB	'eDeep Event] No Schedule Time Data', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
CONST	ENDS
;	COMDAT ?CheckSync@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
_bTIME_CHANGED$ = -28					; size = 4
tv567 = -24						; size = 4
_it$ = -24						; size = 4
_sysTime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?CheckSync@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::CheckSync, COMDAT
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 274  : 	if (this->m_vtEventTime.empty())

  00013	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00016	3b 43 54	 cmp	 eax, DWORD PTR [ebx+84]
  00019	75 28		 jne	 SHORT $LN16@CheckSync

; 275  : 	{
; 276  : 		LogAddC(2,"[CastleDeep Event] No Schedule Time Data");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IPPMNGNJ@?$FLCastleDeep?5Event?$FN?5No?5Schedule?5T@
  00020	6a 02		 push	 2
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00028	83 c4 08	 add	 esp, 8

; 277  : 		this->SetState(CD_STATE_NONE);

  0002b	6a 00		 push	 0
  0002d	8b cb		 mov	 ecx, ebx
  0002f	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState
  00034	5b		 pop	 ebx

; 337  : 	this->m_iTIME_NOTIFY_COUNT = 5;
; 338  : }

  00035	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00038	33 cd		 xor	 ecx, ebp
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN16@CheckSync:
  00043	56		 push	 esi
  00044	57		 push	 edi

; 278  : 		return;
; 279  : 	}
; 280  : 
; 281  : 	_SYSTEMTIME sysTime;
; 282  : 	GetLocalTime(&sysTime);

  00045	8d 4d ec	 lea	 ecx, DWORD PTR _sysTime$[ebp]
  00048	51		 push	 ecx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 283  : 
; 284  : 	int iMIN_HOUR = 24;
; 285  : 	int iMIN_MINUTE = 60;
; 286  : 	int bTIME_CHANGED = 0;
; 287  : 
; 288  : 	std::vector<CASTLEDEEP_EVENTTIME>::iterator it;
; 289  : 
; 290  : 	for (it = this->m_vtEventTime.begin(); it != this->m_vtEventTime.end();it++)

  0004f	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00052	be 18 00 00 00	 mov	 esi, 24			; 00000018H
  00057	8d 7e 24	 lea	 edi, DWORD PTR [esi+36]
  0005a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bTIME_CHANGED$[ebp], 0
  00061	3b 43 54	 cmp	 eax, DWORD PTR [ebx+84]
  00064	74 56		 je	 SHORT $LN175@CheckSync

; 301  : 			}
; 302  : 		}
; 303  : 	}
; 304  : 
; 305  : 	if (bTIME_CHANGED == 0)

  00066	0f b7 4d f4	 movzx	 ecx, WORD PTR _sysTime$[ebp+8]
  0006a	8b d1		 mov	 edx, ecx
  0006c	c1 e2 04	 shl	 edx, 4
  0006f	2b d1		 sub	 edx, ecx
  00071	0f b7 4d f6	 movzx	 ecx, WORD PTR _sysTime$[ebp+10]
  00075	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00078	89 55 e8	 mov	 DWORD PTR tv567[ebp], edx
  0007b	eb 03 8d 49 00	 npad	 5
$LL37@CheckSync:

; 291  : 	{
; 292  : 		std::vector<CASTLEDEEP_EVENTTIME>::iterator pRET = it;
; 293  : 
; 294  : 		if ((sysTime.wHour * 60 + sysTime.wMinute) < (pRET->m_iHour * 60 + pRET->m_iMinute))

  00080	8b 08		 mov	 ecx, DWORD PTR [eax]
  00082	8b d1		 mov	 edx, ecx
  00084	c1 e2 04	 shl	 edx, 4
  00087	2b d1		 sub	 edx, ecx
  00089	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008c	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]
  0008f	39 4d e8	 cmp	 DWORD PTR tv567[ebp], ecx
  00092	7d 1a		 jge	 SHORT $LN14@CheckSync

; 295  : 		{
; 296  : 			if ((iMIN_HOUR * 60 + iMIN_MINUTE) > (pRET->m_iHour * 60 + pRET->m_iMinute))

  00094	8b d6		 mov	 edx, esi
  00096	c1 e2 04	 shl	 edx, 4
  00099	2b d6		 sub	 edx, esi
  0009b	8d 14 97	 lea	 edx, DWORD PTR [edi+edx*4]
  0009e	3b d1		 cmp	 edx, ecx
  000a0	7e 0c		 jle	 SHORT $LN14@CheckSync

; 297  : 			{
; 298  : 				bTIME_CHANGED = 1;
; 299  : 				iMIN_HOUR = pRET->m_iHour;

  000a2	8b 30		 mov	 esi, DWORD PTR [eax]

; 300  : 				iMIN_MINUTE = pRET->m_iMinute;

  000a4	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  000a7	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bTIME_CHANGED$[ebp], 1
$LN14@CheckSync:

; 283  : 
; 284  : 	int iMIN_HOUR = 24;
; 285  : 	int iMIN_MINUTE = 60;
; 286  : 	int bTIME_CHANGED = 0;
; 287  : 
; 288  : 	std::vector<CASTLEDEEP_EVENTTIME>::iterator it;
; 289  : 
; 290  : 	for (it = this->m_vtEventTime.begin(); it != this->m_vtEventTime.end();it++)

  000ae	83 c0 08	 add	 eax, 8
  000b1	3b 43 54	 cmp	 eax, DWORD PTR [ebx+84]
  000b4	75 ca		 jne	 SHORT $LL37@CheckSync

; 301  : 			}
; 302  : 		}
; 303  : 	}
; 304  : 
; 305  : 	if (bTIME_CHANGED == 0)

  000b6	83 7d e4 00	 cmp	 DWORD PTR _bTIME_CHANGED$[ebp], 0
  000ba	75 4b		 jne	 SHORT $LN178@CheckSync
$LN175@CheckSync:

; 306  : 	{
; 307  : 		for (it = this->m_vtEventTime.begin(),iMIN_HOUR = 24,iMIN_MINUTE = 60; it != this->m_vtEventTime.end();it++)

  000bc	8b 4b 50	 mov	 ecx, DWORD PTR [ebx+80]
  000bf	be 18 00 00 00	 mov	 esi, 24			; 00000018H
  000c4	89 4d e8	 mov	 DWORD PTR _it$[ebp], ecx
  000c7	8d 7e 24	 lea	 edi, DWORD PTR [esi+36]
  000ca	3b 4b 54	 cmp	 ecx, DWORD PTR [ebx+84]
  000cd	74 38		 je	 SHORT $LN178@CheckSync
  000cf	90		 npad	 1
$LL119@CheckSync:

; 308  : 		{
; 309  : 			std::vector<CASTLEDEEP_EVENTTIME>::iterator pRET = it;
; 310  : 
; 311  : 			if ( (iMIN_HOUR * 60 + iMIN_MINUTE) > (pRET->m_iHour * 60 + pRET->m_iMinute) )

  000d0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d2	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000d5	8b d0		 mov	 edx, eax
  000d7	c1 e2 04	 shl	 edx, 4
  000da	2b d0		 sub	 edx, eax
  000dc	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]
  000df	8b d6		 mov	 edx, esi
  000e1	c1 e2 04	 shl	 edx, 4
  000e4	2b d6		 sub	 edx, esi
  000e6	8d 14 97	 lea	 edx, DWORD PTR [edi+edx*4]
  000e9	3b d1		 cmp	 edx, ecx

; 312  : 			{
; 313  : 				bTIME_CHANGED = 2;
; 314  : 				iMIN_HOUR = pRET->m_iHour;
; 315  : 				iMIN_MINUTE = pRET->m_iMinute;

  000eb	8b 4d e8	 mov	 ecx, DWORD PTR _it$[ebp]
  000ee	7e 0c		 jle	 SHORT $LN8@CheckSync
  000f0	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  000f3	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR _bTIME_CHANGED$[ebp], 2
  000fa	8b f0		 mov	 esi, eax
$LN8@CheckSync:

; 306  : 	{
; 307  : 		for (it = this->m_vtEventTime.begin(),iMIN_HOUR = 24,iMIN_MINUTE = 60; it != this->m_vtEventTime.end();it++)

  000fc	83 c1 08	 add	 ecx, 8
  000ff	89 4d e8	 mov	 DWORD PTR _it$[ebp], ecx
  00102	3b 4b 54	 cmp	 ecx, DWORD PTR [ebx+84]
  00105	75 c9		 jne	 SHORT $LL119@CheckSync
$LN178@CheckSync:

; 316  : 			}
; 317  : 		}
; 318  : 	}
; 319  : 
; 320  : 	switch(bTIME_CHANGED)

  00107	8b 45 e4	 mov	 eax, DWORD PTR _bTIME_CHANGED$[ebp]
  0010a	48		 dec	 eax
  0010b	74 3a		 je	 SHORT $LN3@CheckSync
  0010d	48		 dec	 eax
  0010e	74 2a		 je	 SHORT $LN2@CheckSync

; 328  : 	default:
; 329  : 		LogAddC(2,"[CastleDeep Event] No Schedule Time Data");

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IPPMNGNJ@?$FLCastleDeep?5Event?$FN?5No?5Schedule?5T@
  00115	6a 02		 push	 2
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0011d	83 c4 08	 add	 esp, 8

; 330  : 		this->SetState(CD_STATE_NONE);

  00120	6a 00		 push	 0
  00122	8b cb		 mov	 ecx, ebx
  00124	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 337  : 	this->m_iTIME_NOTIFY_COUNT = 5;
; 338  : }

  0012c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012f	33 cd		 xor	 ecx, ebp
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
$LN2@CheckSync:

; 324  : 		break;
; 325  : 	case 2:
; 326  : 		this->m_iTIME_MSEC_REMAIN = ( ( ((iMIN_HOUR + 24) * 60) * 60 + iMIN_MINUTE * 60 ) - ( (sysTime.wHour * 60) * 60 + sysTime.wMinute * 60 + sysTime.wSecond ) ) * 1000;

  0013a	0f b7 4d f4	 movzx	 ecx, WORD PTR _sysTime$[ebp+8]
  0013e	8b c6		 mov	 eax, esi
  00140	2b c1		 sub	 eax, ecx
  00142	83 c0 18	 add	 eax, 24			; 00000018H

; 327  : 		break;

  00145	eb 08		 jmp	 SHORT $LN181@CheckSync
$LN3@CheckSync:

; 321  : 	{
; 322  : 	case 1:
; 323  : 		this->m_iTIME_MSEC_REMAIN = ( ( (iMIN_HOUR * 60) * 60 + iMIN_MINUTE * 60 ) - ( (sysTime.wHour * 60) * 60 + sysTime.wMinute * 60 + sysTime.wSecond) ) * 1000;

  00147	0f b7 4d f4	 movzx	 ecx, WORD PTR _sysTime$[ebp+8]
  0014b	8b c6		 mov	 eax, esi
  0014d	2b c1		 sub	 eax, ecx
$LN181@CheckSync:
  0014f	0f b7 4d f6	 movzx	 ecx, WORD PTR _sysTime$[ebp+10]
  00153	8b d0		 mov	 edx, eax
  00155	c1 e2 04	 shl	 edx, 4
  00158	2b d0		 sub	 edx, eax
  0015a	03 d2		 add	 edx, edx
  0015c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0015f	2b c1		 sub	 eax, ecx
  00161	03 c7		 add	 eax, edi
  00163	8b d0		 mov	 edx, eax
  00165	c1 e2 04	 shl	 edx, 4
  00168	2b d0		 sub	 edx, eax
  0016a	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTime$[ebp+12]
  0016e	03 d2		 add	 edx, edx
  00170	03 d2		 add	 edx, edx
  00172	2b d0		 sub	 edx, eax
  00174	69 d2 e8 03 00
	00		 imul	 edx, 1000		; 000003e8H
  0017a	89 53 14	 mov	 DWORD PTR [ebx+20], edx

; 331  : 		return;
; 332  : 	}
; 333  : 
; 334  : 	this->m_iTIME_TICK_COUNT = GetTickCount();

  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00183	89 43 1c	 mov	 DWORD PTR [ebx+28], eax

; 335  : 	LogAddTD("[CastleDeep Event] Sync Start Time. [%d] min remain (START HOUR:%d, MIN:%d)",
; 336  : 		this->m_iTIME_MSEC_REMAIN / 60000,iMIN_HOUR,iMIN_MINUTE);

  00186	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  0018b	f7 6b 14	 imul	 DWORD PTR [ebx+20]
  0018e	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00191	8b ca		 mov	 ecx, edx
  00193	57		 push	 edi
  00194	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00197	56		 push	 esi
  00198	03 ca		 add	 ecx, edx
  0019a	51		 push	 ecx
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@HOLJDKOB@?$FLCastleDeep?5Event?$FN?5Sync?5Start?5Ti@
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 337  : 	this->m_iTIME_NOTIFY_COUNT = 5;
; 338  : }

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	83 c4 10	 add	 esp, 16			; 00000010H
  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	c7 43 20 05 00
	00 00		 mov	 DWORD PTR [ebx+32], 5
  001b5	33 cd		 xor	 ecx, ebp
  001b7	5b		 pop	 ebx
  001b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
?CheckSync@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::CheckSync
_TEXT	ENDS
PUBLIC	?SetState_Closed@CCastleDeepEvent@@QAEXXZ	; CCastleDeepEvent::SetState_Closed
; Function compile flags: /Ogtp
;	COMDAT ?SetState_Closed@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
?SetState_Closed@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::SetState_Closed, COMDAT
; _this$ = ecx

; 362  : 	StopEvent();
; 363  : 
; 364  : 	if (m_bDoEvent != 0)

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	74 05		 je	 SHORT $LN2@SetState_C

; 365  : 	{
; 366  : 		CheckSync();

  00006	e9 00 00 00 00	 jmp	 ?CheckSync@CCastleDeepEvent@@QAEXXZ ; CCastleDeepEvent::CheckSync
$LN2@SetState_C:

; 367  : 	}
; 368  : 	else
; 369  : 	{
; 370  : 		SetState(CD_STATE_NONE);

  0000b	6a 00		 push	 0
  0000d	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState

; 371  : 	}
; 372  : }

  00012	c3		 ret	 0
?SetState_Closed@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::SetState_Closed
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::end
_TEXT	ENDS
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv795 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 7b 15 00	 cmp	 BYTE PTR [ebx+21], 0
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	74 0a		 je	 SHORT $LN40@erase

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN295@erase:
$LN40@erase:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00022	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002c	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00030	74 05		 je	 SHORT $LN39@erase

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00032	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00035	eb 17		 jmp	 SHORT $LN291@erase
$LN39@erase:
  00037	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0003e	74 04		 je	 SHORT $LN37@erase

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00040	8b f9		 mov	 edi, ecx

; 1218 : 		else

  00042	eb 0a		 jmp	 SHORT $LN291@erase
$LN37@erase:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00044	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00047	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  0004a	3b c3		 cmp	 eax, ebx
  0004c	75 72		 jne	 SHORT $LN35@erase
$LN291@erase:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  0004e	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  00052	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00055	75 03		 jne	 SHORT $LN34@erase

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00057	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00060	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00063	75 05		 jne	 SHORT $LN33@erase

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00068	eb 0b		 jmp	 SHORT $LN30@erase
$LN33@erase:
  0006a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0006c	75 04		 jne	 SHORT $LN31@erase

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0006e	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  00070	eb 03		 jmp	 SHORT $LN30@erase
$LN31@erase:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  00072	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	39 18		 cmp	 DWORD PTR [eax], ebx
  0007a	75 1b		 jne	 SHORT $LN29@erase

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0007c	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  00080	74 04		 je	 SHORT $LN43@erase
  00082	8b c6		 mov	 eax, esi
  00084	eb 0c		 jmp	 SHORT $LN44@erase
$LN43@erase:
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Min
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 c4 04	 add	 esp, 4
$LN44@erase:
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00097	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009a	89 4d f4	 mov	 DWORD PTR tv795[ebp], ecx
  0009d	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000a0	75 78		 jne	 SHORT $LN165@erase

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000a2	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  000a6	74 07		 je	 SHORT $LN45@erase
  000a8	8b c6		 mov	 eax, esi
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000ad	eb 6b		 jmp	 SHORT $LN165@erase
$LN45@erase:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Max
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR tv795[ebp]
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000be	eb 5a		 jmp	 SHORT $LN165@erase
$LN35@erase:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c7	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000ca	75 04		 jne	 SHORT $LN26@erase

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cc	8b f0		 mov	 esi, eax

; 1257 : 			else

  000ce	eb 1a		 jmp	 SHORT $LN25@erase
$LN26@erase:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000d0	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d7	75 03		 jne	 SHORT $LN24@erase

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d9	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000dc	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e4	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f3	75 05		 jne	 SHORT $LN23@erase

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f8	eb 0e		 jmp	 SHORT $LN20@erase
$LN23@erase:
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	39 19		 cmp	 DWORD PTR [ecx], ebx
  000ff	75 04		 jne	 SHORT $LN21@erase

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00101	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00103	eb 03		 jmp	 SHORT $LN20@erase
$LN21@erase:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00105	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00108	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010e	8a 53 14	 mov	 dl, BYTE PTR [ebx+20]
  00111	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00114	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00117	88 4b 14	 mov	 BYTE PTR [ebx+20], cl
$LN165@erase:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0011a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0011d	b3 01		 mov	 bl, 1
  0011f	38 58 14	 cmp	 BYTE PTR [eax+20], bl
  00122	0f 85 fa 00 00
	00		 jne	 $LN19@erase

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00128	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00131	0f 84 e8 00 00
	00		 je	 $LN16@erase
$LL18@erase:
  00137	38 5f 14	 cmp	 BYTE PTR [edi+20], bl
  0013a	0f 85 df 00 00
	00		 jne	 $LN16@erase

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	3b f8		 cmp	 edi, eax
  00144	75 65		 jne	 SHORT $LN15@erase

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00146	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00149	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  0014d	75 13		 jne	 SHORT $LN14@erase

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0014f	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00152	56		 push	 esi
  00153	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00157	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0015c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00162	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00166	75 74		 jne	 SHORT $LN293@erase

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0016d	75 08		 jne	 SHORT $LN11@erase
  0016f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00172	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  00175	74 61		 je	 SHORT $LN294@erase
$LN11@erase:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00177	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017a	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0017d	75 15		 jne	 SHORT $LN9@erase

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00184	50		 push	 eax
  00185	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00189	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00194	8a 56 14	 mov	 dl, BYTE PTR [esi+20]
  00197	88 50 14	 mov	 BYTE PTR [eax+20], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0019a	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0019d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001a0	56		 push	 esi
  001a1	88 58 14	 mov	 BYTE PTR [eax+20], bl
  001a4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a9	eb 74		 jmp	 SHORT $LN16@erase
$LN15@erase:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001ab	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  001af	75 12		 jne	 SHORT $LN7@erase

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001b1	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001b4	56		 push	 esi
  001b5	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  001b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001c3	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001c7	75 13		 jne	 SHORT $LN293@erase

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001cc	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001cf	75 1e		 jne	 SHORT $LN4@erase
  001d1	8b 10		 mov	 edx, DWORD PTR [eax]
  001d3	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001d6	75 17		 jne	 SHORT $LN4@erase
$LN294@erase:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d8	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
$LN293@erase:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001dc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  001df	8b fe		 mov	 edi, esi
  001e1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001e4	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e7	0f 85 4a ff ff
	ff		 jne	 $LL18@erase

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001ed	eb 30		 jmp	 SHORT $LN16@erase
$LN4@erase:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001f4	75 15		 jne	 SHORT $LN2@erase

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fc	50		 push	 eax
  001fd	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00201	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00206	8b 06		 mov	 eax, DWORD PTR [esi]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0020b	8a 56 14	 mov	 dl, BYTE PTR [esi+20]
  0020e	88 50 14	 mov	 BYTE PTR [eax+20], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00211	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00214	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  00216	56		 push	 esi
  00217	88 58 14	 mov	 BYTE PTR [eax+20], bl
  0021a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Rrotate
$LN16@erase:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0021f	88 5f 14	 mov	 BYTE PTR [edi+20], bl
$LN19@erase:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00222	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00231	83 c4 04	 add	 esp, 4
  00234	5f		 pop	 edi
  00235	5e		 pop	 esi
  00236	5b		 pop	 ebx
  00237	85 c0		 test	 eax, eax
  00239	74 04		 je	 SHORT $LN1@erase

; 1373 : 			--this->_Mysize;

  0023b	48		 dec	 eax
  0023c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  0023f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00242	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]
  00245	89 10		 mov	 DWORD PTR [eax], edx

; 1376 : 		}

  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c2 08 00	 ret	 8
$LN292@erase:
?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00005	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00008	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0000b	80 7b 15 00	 cmp	 BYTE PTR [ebx+21], 0
  0000f	8b f3		 mov	 esi, ebx
  00011	75 1e		 jne	 SHORT $LN7@clear
$LL9@clear:
  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	51		 push	 ecx
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Erase
  0001e	8b 36		 mov	 esi, DWORD PTR [esi]
  00020	53		 push	 ebx
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  0002d	8b de		 mov	 ebx, esi
  0002f	74 e2		 je	 SHORT $LL9@clear
$LN7@clear:

; 1416 : 		_Root() = this->_Myhead;

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00037	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00042	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 1420 : 		}

  0004c	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::end
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::end
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::end
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z
_TEXT	SEGMENT
$T227590 = -16						; size = 12
$T227532 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 18		 push	 24			; 00000018H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN20@Tree
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 14	 mov	 BYTE PTR [ecx+20], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 15	 mov	 BYTE PTR [edx+21], al

; 699  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T227532[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T227590[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T227532[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T227590[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T227590[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree:
$LN42@Tree:
  0006e	cc		 int	 3
??0?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHH@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
  00011	3b ca		 cmp	 ecx, edx
  00013	74 28		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00015	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00018	53		 push	 ebx
  00019	2b c2		 sub	 eax, edx
  0001b	56		 push	 esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00026	56		 push	 esi
  00027	52		 push	 edx
  00028	51		 push	 ecx
  00029	8b d9		 mov	 ebx, ecx
  0002b	e8 00 00 00 00	 call	 _memmove

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;
; 1212 : 			}
; 1213 : 		return (_First);

  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	03 f3		 add	 esi, ebx
  00038	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
$LN1@erase@2:
  0003d	5f		 pop	 edi

; 1214 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  00014	c1 f8 02	 sar	 eax, 2
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 02	 sar	 edx, 2
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T227875 = -16						; size = 12
$T227810 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN20@Tree@2
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 699  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree@2:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T227810[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T227875[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T227810[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T227875[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T227875[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree@2:
$LN42@Tree@2:
  0006e	cc		 int	 3
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::lower_bound
; Function compile flags: /Ogtp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1449 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1450 : 		return (iterator(_Lbound(_Keyval), this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0000d	75 19		 jne	 SHORT $LN36@lower_boun
  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL6@lower_boun:
  00014	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  00017	7d 05		 jge	 SHORT $LN4@lower_boun
  00019	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001c	eb 04		 jmp	 SHORT $LN3@lower_boun
$LN4@lower_boun:
  0001e	8b c8		 mov	 ecx, eax
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun:
  00022	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00026	74 ec		 je	 SHORT $LL6@lower_boun
$LN36@lower_boun:
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 1451 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T228086 = -16						; size = 12
$T228021 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN20@Tree@3
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 699  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree@3:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T228021[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T228086[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T228021[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T228086[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T228086[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree@3:
$LN42@Tree@3:
  0006e	cc		 int	 3
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::lower_bound
; Function compile flags: /Ogtp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1449 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1450 : 		return (iterator(_Lbound(_Keyval), this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0000d	75 19		 jne	 SHORT $LN36@lower_boun@2
  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL6@lower_boun@2:
  00014	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  00017	7d 05		 jge	 SHORT $LN4@lower_boun@2
  00019	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001c	eb 04		 jmp	 SHORT $LN3@lower_boun@2
$LN4@lower_boun@2:
  0001e	8b c8		 mov	 ecx, eax
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun@2:
  00022	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00026	74 ec		 je	 SHORT $LL6@lower_boun@2
$LN36@lower_boun@2:
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 1451 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T228198 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 1c		 jne	 SHORT $LN97@erase@3
  00014	3b d0		 cmp	 edx, eax
  00016	75 18		 jne	 SHORT $LN97@erase@3

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::clear

; 1383 : 			return (begin());

  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1389 : 			return (iterator(_First._Ptr, this));

  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	89 08		 mov	 DWORD PTR [eax], ecx
  00029	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN97@erase@3:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  00030	3b ca		 cmp	 ecx, edx
  00032	74 5e		 je	 SHORT $LN1@erase@3
$LL2@erase@3:

; 1388 : 				erase(_First++);

  00034	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00038	8b d1		 mov	 edx, ecx
  0003a	75 42		 jne	 SHORT $LN59@erase@3
  0003c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003f	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00043	75 1a		 jne	 SHORT $LN99@erase@3
  00045	8b c8		 mov	 ecx, eax
  00047	8b 01		 mov	 eax, DWORD PTR [ecx]
  00049	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0004d	75 0b		 jne	 SHORT $LN73@erase@3
  0004f	90		 npad	 1
$LL74@erase@3:
  00050	8b c8		 mov	 ecx, eax
  00052	8b 01		 mov	 eax, DWORD PTR [ecx]
  00054	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00058	74 f6		 je	 SHORT $LL74@erase@3
$LN73@erase@3:
  0005a	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0005d	eb 1f		 jmp	 SHORT $LN59@erase@3
$LN99@erase@3:
  0005f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00062	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00066	75 13		 jne	 SHORT $LN57@erase@3
$LL58@erase@3:
  00068	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0006b	75 0e		 jne	 SHORT $LN57@erase@3
  0006d	8b c8		 mov	 ecx, eax
  0006f	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00079	74 ed		 je	 SHORT $LL58@erase@3
$LN57@erase@3:
  0007b	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN59@erase@3:
  0007e	52		 push	 edx
  0007f	8d 55 fc	 lea	 edx, DWORD PTR $T228198[ebp]
  00082	52		 push	 edx
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0008d	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00090	75 a2		 jne	 SHORT $LL2@erase@3
$LN1@erase@3:

; 1389 : 			return (iterator(_First._Ptr, this));

  00092	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00095	89 08		 mov	 DWORD PTR [eax], ecx
  00097	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z ; std::_Destroy_range<std::allocator<CASTLEDEEP_EVENTTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CASTLEDEEP_EVENTTIME> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAXPAUCASTLEDEEP_EVENTTIME@@0AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CASTLEDEEP_EVENTTIME> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z ; std::_Destroy_range<std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAXPAUCASTLEDEEP_SPAWNTIME@@0AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z ; std::_Destroy_range<std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAXPAUCASTLEDEEP_MONSTERINFO@@0AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Linsert
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T228563 = 16						; size = 4
$T228561 = 16						; size = 4
__Where$218491 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();
; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00010	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	b1 01		 mov	 cl, 1
  00019	57		 push	 edi
  0001a	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl
  0001d	75 2d		 jne	 SHORT $LN11@Linsert
  0001f	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]
$LL12@Linsert:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  00026	8b f0		 mov	 esi, eax
  00028	74 08		 je	 SHORT $LN10@Linsert

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0002a	39 78 0c	 cmp	 DWORD PTR [eax+12], edi
  0002d	0f 9d c1	 setge	 cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00030	eb 06		 jmp	 SHORT $LN146@Linsert
$LN10@Linsert:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00032	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00035	0f 9c c1	 setl	 cl
$LN146@Linsert:
  00038	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  0003b	84 c9		 test	 cl, cl
  0003d	74 04		 je	 SHORT $LN15@Linsert
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	eb 03		 jmp	 SHORT $LN16@Linsert
$LN15@Linsert:
  00043	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN16@Linsert:

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();
; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00046	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0004a	74 d6		 je	 SHORT $LL12@Linsert
$LN11@Linsert:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  0004c	8b fe		 mov	 edi, esi
  0004e	89 7d 10	 mov	 DWORD PTR __Where$218491[ebp], edi

; 970  : 			if (!_Addleft)

  00051	84 c9		 test	 cl, cl
  00053	74 35		 je	 SHORT $LN99@Linsert

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00055	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  00058	8d 4d 10	 lea	 ecx, DWORD PTR $T228561[ebp]
  0005b	3b 30		 cmp	 esi, DWORD PTR [eax]
  0005d	75 20		 jne	 SHORT $LN4@Linsert
  0005f	52		 push	 edx
  00060	56		 push	 esi
  00061	6a 01		 push	 1
  00063	51		 push	 ecx
  00064	8b cb		 mov	 ecx, ebx
  00066	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Insert
  0006b	8b 10		 mov	 edx, DWORD PTR [eax]
  0006d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	89 10		 mov	 DWORD PTR [eax], edx
  00074	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00078	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  0007f	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0>::operator--
  00084	8b 7d 10	 mov	 edi, DWORD PTR __Where$218491[ebp]
  00087	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
$LN99@Linsert:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  0008a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  0008d	52		 push	 edx
  0008e	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00091	7d 24		 jge	 SHORT $LN2@Linsert
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __Addleft$[ebp]
  00096	56		 push	 esi
  00097	51		 push	 ecx
  00098	8d 55 10	 lea	 edx, DWORD PTR $T228563[ebp]
  0009b	52		 push	 edx
  0009c	8b cb		 mov	 ecx, ebx
  0009e	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Insert
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	89 08		 mov	 DWORD PTR [eax], ecx
  000ac	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000b0	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Linsert:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));
; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  000b7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000bc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000bf	83 c4 04	 add	 esp, 4
  000c2	89 38		 mov	 DWORD PTR [eax], edi
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000ca	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	??$_Buynode@U?$pair@HH@std@@@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@$$QAU?$pair@HH@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode<std::pair<int,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Buynode@U?$pair@HH@std@@@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@$$QAU?$pair@HH@1@@Z
_TEXT	SEGMENT
$T228939 = -12						; size = 12
$T228886 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@U?$pair@HH@std@@@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@$$QAU?$pair@HH@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode<std::pair<int,int> >, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  00008	6a 18		 push	 24			; 00000018H
  0000a	8b f9		 mov	 edi, ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	8b f0		 mov	 esi, eax
  00013	33 c0		 xor	 eax, eax
  00015	83 c4 04	 add	 esp, 4
  00018	3b f0		 cmp	 esi, eax
  0001a	74 33		 je	 SHORT $LN12@Buynode@4
  0001c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001f	89 0e		 mov	 DWORD PTR [esi], ecx
  00021	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00024	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  0002a	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  0002d	66 89 46 14	 mov	 WORD PTR [esi+20], ax
  00031	52		 push	 edx
  00032	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00035	50		 push	 eax
  00036	83 c7 0d	 add	 edi, 13			; 0000000dH
  00039	57		 push	 edi
  0003a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0003d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBHH@std@@@std@@U?$pair@$$CBHH@2@U?$pair@HH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHH@std@@@0@PAU?$pair@$$CBHH@0@$$QAU?$pair@HH@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,int> >,std::pair<int const ,int>,std::pair<int,int> >
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5f		 pop	 edi

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);
; 595  : 		_RERAISE;
; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi

; 599  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@4:
  0004f	8d 4d 08	 lea	 ecx, DWORD PTR $T228886[ebp]
  00052	51		 push	 ecx
  00053	8d 4d f4	 lea	 ecx, DWORD PTR $T228939[ebp]
  00056	89 45 08	 mov	 DWORD PTR $T228886[ebp], eax
  00059	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0005e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00063	8d 55 f4	 lea	 edx, DWORD PTR $T228939[ebp]
  00066	52		 push	 edx
  00067	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T228939[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Buynode@4:
$LN43@Buynode@4:
  00073	cc		 int	 3
??$_Buynode@U?$pair@HH@std@@@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@$$QAU?$pair@HH@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode<std::pair<int,int> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z ; std::_Uninitialized_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z
_TEXT	SEGMENT
__Cat$228978 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z PROC ; std::_Uninitialized_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$228978[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@@Z ENDP ; std::_Uninitialized_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z ; std::_Uninitialized_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z
_TEXT	SEGMENT
__Cat$228987 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z PROC ; std::_Uninitialized_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$228987[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@@Z ENDP ; std::_Uninitialized_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z ; std::_Uninitialized_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z
_TEXT	SEGMENT
__Cat$228997 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z PROC ; std::_Uninitialized_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$228997[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@U1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@@Z ENDP ; std::_Uninitialized_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@0PAU2@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$229015 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$229015[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00010	51		 push	 ecx
  00011	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
  0001c	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@0PAU2@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$229031 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$229031[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00010	51		 push	 ecx
  00011	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
  0001c	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 1218 : 		erase(begin(), end());

  00003	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00006	56		 push	 esi
  00007	8b 33		 mov	 esi, DWORD PTR [ebx]
  00009	3b f1		 cmp	 esi, ecx
  0000b	74 20		 je	 SHORT $LN19@clear@2
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c1		 sub	 eax, ecx
  00011	57		 push	 edi
  00012	c1 f8 02	 sar	 eax, 2
  00015	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _memmove
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	03 fe		 add	 edi, esi
  00029	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  0002c	5f		 pop	 edi
$LN19@clear@2:

; 1219 : 		}

  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	c3		 ret	 0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::find
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
$T229243 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::find, COMDAT
; _this$ = ecx

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1424 : 		iterator _Where = lower_bound(_Keyval);

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000a	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00012	75 18		 jne	 SHORT $LN9@find
  00014	56		 push	 esi
  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL10@find:
  00017	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  0001a	7d 05		 jge	 SHORT $LN8@find
  0001c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001f	eb 04		 jmp	 SHORT $LN7@find
$LN8@find:
  00021	8b d0		 mov	 edx, eax
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@find:
  00025	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00029	74 ec		 je	 SHORT $LL10@find
  0002b	5e		 pop	 esi
$LN9@find:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0002c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002f	89 55 0c	 mov	 DWORD PTR __Where$[ebp], edx
  00032	3b d0		 cmp	 edx, eax
  00034	74 18		 je	 SHORT $LN3@find
  00036	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00038	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  0003b	7c 11		 jl	 SHORT $LN3@find
  0003d	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	5f		 pop	 edi

; 1429 : 		}

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN3@find:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0004e	89 45 fc	 mov	 DWORD PTR $T229243[ebp], eax
  00051	8d 45 fc	 lea	 eax, DWORD PTR $T229243[ebp]
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00059	89 10		 mov	 DWORD PTR [eax], edx
  0005b	5f		 pop	 edi

; 1429 : 		}

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::find
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::find
; Function compile flags: /Ogtp
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
$T229466 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::find, COMDAT
; _this$ = ecx

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1424 : 		iterator _Where = lower_bound(_Keyval);

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000a	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00012	75 18		 jne	 SHORT $LN9@find@2
  00014	56		 push	 esi
  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL10@find@2:
  00017	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  0001a	7d 05		 jge	 SHORT $LN8@find@2
  0001c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001f	eb 04		 jmp	 SHORT $LN7@find@2
$LN8@find@2:
  00021	8b d0		 mov	 edx, eax
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@find@2:
  00025	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00029	74 ec		 je	 SHORT $LL10@find@2
  0002b	5e		 pop	 esi
$LN9@find@2:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0002c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002f	89 55 0c	 mov	 DWORD PTR __Where$[ebp], edx
  00032	3b d0		 cmp	 edx, eax
  00034	74 18		 je	 SHORT $LN3@find@2
  00036	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00038	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  0003b	7c 11		 jl	 SHORT $LN3@find@2
  0003d	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	5f		 pop	 edi

; 1429 : 		}

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN3@find@2:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0004e	89 45 fc	 mov	 DWORD PTR $T229466[ebp], eax
  00051	8d 45 fc	 lea	 eax, DWORD PTR $T229466[ebp]
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00059	89 10		 mov	 DWORD PTR [eax], edx
  0005b	5f		 pop	 edi

; 1429 : 		}

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::find
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T229690 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T229690[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_EVENTTIME@@0@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_EVENTTIME@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_EVENTTIME@@0@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_EVENTTIME@@0@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_SPAWNTIME@@0@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_SPAWNTIME@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_SPAWNTIME@@0@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXPAUCASTLEDEEP_SPAWNTIME@@0@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXPAUCASTLEDEEP_MONSTERINFO@@0@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXPAUCASTLEDEEP_MONSTERINFO@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXPAUCASTLEDEEP_MONSTERINFO@@0@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXPAUCASTLEDEEP_MONSTERINFO@@0@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Destroy
_TEXT	ENDS
PUBLIC	??$insert@U?$pair@HH@std@@@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HH@1@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::insert<std::pair<int,int> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@HH@std@@@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HH@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HH@std@@@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HH@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::insert<std::pair<int,int> >, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HH@std@@@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@$$QAU?$pair@HH@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode<std::pair<int,int> >
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@U?$pair@HH@std@@@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HH@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::insert<std::pair<int,int> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCASTLEDEEP_EVENTTIME@@@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEPAUCASTLEDEEP_EVENTTIME@@PAU2@00@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Umove<CASTLEDEEP_EVENTTIME *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCASTLEDEEP_EVENTTIME@@@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEPAUCASTLEDEEP_EVENTTIME@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$229805 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCASTLEDEEP_EVENTTIME@@@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEPAUCASTLEDEEP_EVENTTIME@@PAU2@00@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Umove<CASTLEDEEP_EVENTTIME *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$229805[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCASTLEDEEP_EVENTTIME@@@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEPAUCASTLEDEEP_EVENTTIME@@PAU2@00@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Umove<CASTLEDEEP_EVENTTIME *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCASTLEDEEP_SPAWNTIME@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@PAU2@00@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Umove<CASTLEDEEP_SPAWNTIME *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUCASTLEDEEP_SPAWNTIME@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$229824 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCASTLEDEEP_SPAWNTIME@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@PAU2@00@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Umove<CASTLEDEEP_SPAWNTIME *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$229824[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCASTLEDEEP_SPAWNTIME@@@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEPAUCASTLEDEEP_SPAWNTIME@@PAU2@00@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Umove<CASTLEDEEP_SPAWNTIME *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCASTLEDEEP_MONSTERINFO@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@PAU2@00@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Umove<CASTLEDEEP_MONSTERINFO *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUCASTLEDEEP_MONSTERINFO@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$229843 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCASTLEDEEP_MONSTERINFO@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@PAU2@00@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Umove<CASTLEDEEP_MONSTERINFO *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$229843[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@U1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCASTLEDEEP_MONSTERINFO@@@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEPAUCASTLEDEEP_MONSTERINFO@@PAU2@00@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Umove<CASTLEDEEP_MONSTERINFO *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@0@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@0@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First_arg$[ebp]
  0000d	89 30		 mov	 DWORD PTR [eax], esi
  0000f	3b f2		 cmp	 esi, edx
  00011	74 26		 je	 SHORT $LN1@erase@4

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00013	57		 push	 edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	3b d7		 cmp	 edx, edi
  00019	74 1a		 je	 SHORT $LN30@erase@4
  0001b	53		 push	 ebx
  0001c	8d 64 24 00	 npad	 4
$LL32@erase@4:
  00020	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00022	89 1e		 mov	 DWORD PTR [esi], ebx
  00024	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  00027	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002a	83 c2 08	 add	 edx, 8
  0002d	83 c6 08	 add	 esi, 8
  00030	3b d7		 cmp	 edx, edi
  00032	75 ec		 jne	 SHORT $LL32@erase@4
  00034	5b		 pop	 ebx
$LN30@erase@4:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00035	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00038	5f		 pop	 edi
$LN1@erase@4:
  00039	5e		 pop	 esi

; 1212 : 			}
; 1213 : 		return (_First);
; 1214 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@0@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@0@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	89 1e		 mov	 DWORD PTR [esi], ebx
  00014	3b da		 cmp	 ebx, edx
  00016	74 27		 je	 SHORT $LN39@erase@5

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 1d		 je	 SHORT $LN30@erase@5
  0001f	57		 push	 edi
$LL32@erase@5:
  00020	8b f2		 mov	 esi, edx
  00022	8b fb		 mov	 edi, ebx
  00024	83 c2 1c	 add	 edx, 28			; 0000001cH
  00027	b9 07 00 00 00	 mov	 ecx, 7
  0002c	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0002f	f3 a5		 rep movsd
  00031	3b d0		 cmp	 edx, eax
  00033	75 eb		 jne	 SHORT $LL32@erase@5
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
$LN30@erase@5:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0003c	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN39@erase@5:

; 1212 : 			}
; 1213 : 		return (_First);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1214 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@0@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::erase
_TEXT	ENDS
PUBLIC	??_C@_0DC@JMKIKJEC@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@ ; `string'
PUBLIC	??_C@_0CP@EPJCMAAN@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@ ; `string'
PUBLIC	?StartEvent@CCastleDeepEvent@@QAEXXZ		; CCastleDeepEvent::StartEvent
EXTRN	_rand:PROC
;	COMDAT ??_C@_0DC@JMKIKJEC@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
CONST	SEGMENT
??_C@_0DC@JMKIKJEC@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@ DB '[Cas'
	DB	'tleDeep Event] Start Fail - bDoStart == FALSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EPJCMAAN@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@
CONST	SEGMENT
??_C@_0CP@EPJCMAAN@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@ DB '[Cas'
	DB	'tleDeep Event] Start Fail - No Assult Data', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
CONST	ENDS
;	COMDAT ?StartEvent@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
$T230059 = -16						; size = 8
$T230058 = -8						; size = 8
_it$ = -4						; size = 4
?StartEvent@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::StartEvent, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 41   : 	if (m_vtAssultType.size() <= 0)

  00009	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  0000c	2b 47 60	 sub	 eax, DWORD PTR [edi+96]
  0000f	c1 f8 02	 sar	 eax, 2
  00012	85 c0		 test	 eax, eax
  00014	75 1c		 jne	 SHORT $LN9@StartEvent

; 42   : 	{
; 43   : 		LogAddTD("[CastleDeep Event] Start Fail - No Assult Data");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@EPJCMAAN@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00021	83 c4 04	 add	 esp, 4

; 44   : 		SetState(CD_STATE_NONE);

  00024	6a 00		 push	 0
  00026	8b cf		 mov	 ecx, edi
  00028	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState
  0002d	5f		 pop	 edi

; 90   : 	}
; 91   : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN9@StartEvent:
  00032	53		 push	 ebx

; 45   : 		return;
; 46   : 	}
; 47   : 
; 48   : 	int iCheckCount = 100;

  00033	bb 64 00 00 00	 mov	 ebx, 100		; 00000064H
  00038	56		 push	 esi
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL8@StartEvent:

; 53   : 	{
; 54   : 		int iRndIndex = rand()%m_vtAssultType.size();

  00040	8b 77 64	 mov	 esi, DWORD PTR [edi+100]
  00043	2b 77 60	 sub	 esi, DWORD PTR [edi+96]
  00046	4b		 dec	 ebx
  00047	c1 fe 02	 sar	 esi, 2
  0004a	e8 00 00 00 00	 call	 _rand
  0004f	33 d2		 xor	 edx, edx
  00051	f7 f6		 div	 esi

; 55   : 
; 56   : 		this->m_iCUR_ASSULT_TYPE = m_vtAssultType[iRndIndex];

  00053	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  00056	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]

; 57   : 		iASSULT_RATE = m_vtAssultTypeRate[iRndIndex];

  00059	8b 4f 70	 mov	 ecx, DWORD PTR [edi+112]
  0005c	89 47 28	 mov	 DWORD PTR [edi+40], eax
  0005f	8b 34 91	 mov	 esi, DWORD PTR [ecx+edx*4]

; 58   : 
; 59   : 		if (rand()%100 < iASSULT_RATE)

  00062	e8 00 00 00 00	 call	 _rand
  00067	99		 cdq
  00068	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0006d	f7 f9		 idiv	 ecx
  0006f	3b d6		 cmp	 edx, esi
  00071	7c 22		 jl	 SHORT $LN5@StartEvent

; 49   : 	int iASSULT_RATE = 0;
; 50   : 	int bDoStart = FALSE;
; 51   : 
; 52   : 	while(iCheckCount-- > 0)

  00073	85 db		 test	 ebx, ebx
  00075	7f c9		 jg	 SHORT $LL8@StartEvent

; 60   : 		{
; 61   : 			bDoStart = TRUE;
; 62   : 			break;
; 63   : 		}
; 64   : 	}
; 65   : 
; 66   : 	if (bDoStart == FALSE)
; 67   : 	{
; 68   : 		LogAddTD("[CastleDeep Event] Start Fail - bDoStart == FALSE");

  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@JMKIKJEC@?$FLCastleDeep?5Event?$FN?5Start?5Fail?5?9?5@
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00082	83 c4 04	 add	 esp, 4
$LN118@StartEvent:

; 69   : 		SetState(CD_STATE_NONE);

  00085	6a 00		 push	 0
  00087	8b cf		 mov	 ecx, edi
  00089	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	5f		 pop	 edi

; 90   : 	}
; 91   : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN5@StartEvent:

; 70   : 		return;
; 71   : 	}
; 72   : 
; 73   : 	this->m_iCUR_SPAWN_STEP = 0;
; 74   : 
; 75   : 	std::map<int,vector<CASTLEDEEP_SPAWNTIME > >::iterator it = this->m_mapSpawnTime.find(m_iCUR_ASSULT_TYPE); //HermeX Fix

  00095	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00098	50		 push	 eax
  00099	8d 55 fc	 lea	 edx, DWORD PTR _it$[ebp]
  0009c	52		 push	 edx
  0009d	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  000a0	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  000a7	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::find

; 76   : 
; 77   : 	if (it == m_mapSpawnTime.end())

  000ac	8b 5d fc	 mov	 ebx, DWORD PTR _it$[ebp]
  000af	3b 5f 44	 cmp	 ebx, DWORD PTR [edi+68]

; 78   : 	{
; 79   : 		SetState(CD_STATE_NONE);
; 80   : 		return;

  000b2	74 d1		 je	 SHORT $LN118@StartEvent

; 81   : 	}
; 82   : 
; 83   : 	m_mapRunCheck.clear();

  000b4	83 ef 80	 sub	 edi, -128		; ffffff80H
  000b7	8b cf		 mov	 ecx, edi
  000b9	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::clear

; 84   : 
; 85   : 	for(std::vector<CASTLEDEEP_SPAWNTIME>::iterator it2 = it->second.begin(); it2 != it->second.end(); it2++)

  000be	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  000c1	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
  000c4	74 2c		 je	 SHORT $LN117@StartEvent
$LL52@StartEvent:

; 86   : 	{
; 87   : 		std::vector<CASTLEDEEP_SPAWNTIME>::iterator stSpawnTime= it2;
; 88   : 
; 89   : 		m_mapRunCheck.insert(std::pair<int,int>(stSpawnTime->m_iMonsterGroup,stSpawnTime->m_iMonsterSpawnMinute)); //HermeX Fix

  000c6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	6a 00		 push	 0
  000cd	8d 55 f8	 lea	 edx, DWORD PTR $T230058[ebp]
  000d0	89 4d fc	 mov	 DWORD PTR $T230058[ebp+4], ecx
  000d3	52		 push	 edx
  000d4	8b cf		 mov	 ecx, edi
  000d6	89 45 f8	 mov	 DWORD PTR $T230058[ebp], eax
  000d9	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HH@std@@@?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@1@$$QAU?$pair@HH@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Buynode<std::pair<int,int> >
  000de	50		 push	 eax
  000df	8d 45 f0	 lea	 eax, DWORD PTR $T230059[ebp]
  000e2	50		 push	 eax
  000e3	8b cf		 mov	 ecx, edi
  000e5	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Linsert
  000ea	83 c6 08	 add	 esi, 8
  000ed	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
  000f0	75 d4		 jne	 SHORT $LL52@StartEvent
$LN117@StartEvent:
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	5f		 pop	 edi

; 90   : 	}
; 91   : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
?StartEvent@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::StartEvent
_TEXT	ENDS
PUBLIC	?SetState_Playing@CCastleDeepEvent@@QAEXXZ	; CCastleDeepEvent::SetState_Playing
; Function compile flags: /Ogtp
;	COMDAT ?SetState_Playing@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
?SetState_Playing@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::SetState_Playing, COMDAT
; _this$ = ecx

; 376  : 	m_iTIME_MSEC_REMAIN = 0;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 377  : 	m_bCheckEnd = 0;

  00008	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 378  : 	m_uCheckEndTick = 0;

  0000b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 379  : 
; 380  : 	ClearMonster(); //Fixed

  0000e	e8 00 00 00 00	 call	 ?ClearMonster@CCastleDeepEvent@@QAEXXZ ; CCastleDeepEvent::ClearMonster

; 381  : 	StartEvent(); //Fixed 

  00013	8b ce		 mov	 ecx, esi
  00015	5e		 pop	 esi
  00016	e9 00 00 00 00	 jmp	 ?StartEvent@CCastleDeepEvent@@QAEXXZ ; CCastleDeepEvent::StartEvent
?SetState_Playing@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::SetState_Playing
_TEXT	ENDS
PUBLIC	?AddMonster@CCastleDeepEvent@@QAEXHH@Z		; CCastleDeepEvent::AddMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjGetRandomFreeArea@@YAHHAAE0HHHHH@Z:PROC	; gObjGetRandomFreeArea
; Function compile flags: /Ogtp
;	COMDAT ?AddMonster@CCastleDeepEvent@@QAEXHH@Z
_TEXT	SEGMENT
_it$ = -12						; size = 4
_iMonCount$215337 = -8					; size = 4
_cSY$215336 = -1					; size = 1
_iAssultType$ = 8					; size = 4
_cSX$215335 = 11					; size = 1
_iGroup$ = 12						; size = 4
?AddMonster@CCastleDeepEvent@@QAEXHH@Z PROC		; CCastleDeepEvent::AddMonster, COMDAT
; _this$ = ecx

; 512  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 513  : 	std::map<int,vector<CASTLEDEEP_MONSTERINFO > >::iterator it = this->m_mapMonsterInfo.find(iAssultType); //HermeX Fix

  00009	8d 45 08	 lea	 eax, DWORD PTR _iAssultType$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d f4	 lea	 ecx, DWORD PTR _it$[ebp]
  00010	51		 push	 ecx
  00011	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00014	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::find

; 514  : 
; 515  : 	if (it == this->m_mapMonsterInfo.end())

  00019	8b 45 f4	 mov	 eax, DWORD PTR _it$[ebp]
  0001c	3b 46 34	 cmp	 eax, DWORD PTR [esi+52]
  0001f	0f 84 02 02 00
	00		 je	 $LN7@AddMonster

; 516  : 	{
; 517  : 		return;
; 518  : 	}
; 519  : 
; 520  : 	std::vector<CASTLEDEEP_MONSTERINFO>::iterator it2;
; 521  : 
; 522  : 	for(it2 = it->second.begin(); it2 != it->second.end(); it2++)

  00025	57		 push	 edi
  00026	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  00029	3b 78 14	 cmp	 edi, DWORD PTR [eax+20]
  0002c	0f 84 f4 01 00
	00		 je	 $LN141@AddMonster
  00032	53		 push	 ebx
  00033	bb 01 00 00 00	 mov	 ebx, 1
  00038	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL49@AddMonster:

; 523  : 	{
; 524  : 		std::vector<CASTLEDEEP_MONSTERINFO>::iterator stMonsterInfo= it2;
; 525  : 
; 526  : 		if (stMonsterInfo->m_iMonsterGroup != iGroup)

  00040	8b 55 0c	 mov	 edx, DWORD PTR _iGroup$[ebp]
  00043	39 17		 cmp	 DWORD PTR [edi], edx
  00045	0f 85 ce 01 00
	00		 jne	 $LN8@AddMonster

; 527  : 			continue;
; 528  : 
; 529  : 		BYTE cSX;
; 530  : 		BYTE cSY;
; 531  : 
; 532  : 		for(int iMonCount = 0; iMonCount < stMonsterInfo->m_iMonsterNumber; iMonCount++)

  0004b	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  0004f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iMonCount$215337[ebp], 0
  00056	0f 8e bd 01 00
	00		 jle	 $LN8@AddMonster
  0005c	8d 64 24 00	 npad	 4
$LL88@AddMonster:

; 533  : 		{
; 534  : 			if (gObjGetRandomFreeArea(MAP_INDEX_CASTLESIEGE,(BYTE &)cSX,(BYTE &)cSY,
; 535  : 				stMonsterInfo->m_iSX,stMonsterInfo->m_iSY,stMonsterInfo->m_iDX,stMonsterInfo->m_iDY,MAP_INDEX_CASTLESIEGE) == TRUE)

  00060	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00063	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00066	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00069	6a 1e		 push	 30			; 0000001eH
  0006b	50		 push	 eax
  0006c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0006f	51		 push	 ecx
  00070	52		 push	 edx
  00071	50		 push	 eax
  00072	8d 4d ff	 lea	 ecx, DWORD PTR _cSY$215336[ebp]
  00075	51		 push	 ecx
  00076	8d 55 0b	 lea	 edx, DWORD PTR _cSX$215335[ebp]
  00079	52		 push	 edx
  0007a	6a 1e		 push	 30			; 0000001eH
  0007c	e8 00 00 00 00	 call	 ?gObjGetRandomFreeArea@@YAHHAAE0HHHHH@Z ; gObjGetRandomFreeArea
  00081	83 c4 20	 add	 esp, 32			; 00000020H
  00084	3b c3		 cmp	 eax, ebx
  00086	0f 85 79 01 00
	00		 jne	 $LN4@AddMonster

; 536  : 			{
; 537  : 				int result = gObjAddMonster(MAP_INDEX_CASTLESIEGE);

  0008c	6a 1e		 push	 30			; 0000001eH
  0008e	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00093	98		 cwde
  00094	83 c4 04	 add	 esp, 4

; 538  : 
; 539  : 				if (result >= 0)

  00097	85 c0		 test	 eax, eax
  00099	0f 88 66 01 00
	00		 js	 $LN4@AddMonster

; 540  : 				{
; 541  : 					gObj[result].m_PosNum = -1;

  0009f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a5	8b f0		 mov	 esi, eax
  000a7	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000ad	83 c9 ff	 or	 ecx, -1
  000b0	66 89 8c 16 b0
	03 00 00	 mov	 WORD PTR [esi+edx+944], cx

; 542  : 					gObj[result].X = cSX;

  000b8	0f b6 4d 0b	 movzx	 ecx, BYTE PTR _cSX$215335[ebp]
  000bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c2	66 89 8c 16 44
	01 00 00	 mov	 WORD PTR [esi+edx+324], cx

; 543  : 					gObj[result].Y = cSY;

  000ca	0f b6 4d ff	 movzx	 ecx, BYTE PTR _cSY$215336[ebp]
  000ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d4	66 89 8c 16 46
	01 00 00	 mov	 WORD PTR [esi+edx+326], cx

; 544  : 					gObj[result].MapNumber = MAP_INDEX_CASTLESIEGE;

  000dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e2	c6 84 0e 49 01
	00 00 1e	 mov	 BYTE PTR [esi+ecx+329], 30 ; 0000001eH

; 545  : 					gObj[result].TX = gObj[result].X;

  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f0	0f b7 94 0e 44
	01 00 00	 movzx	 edx, WORD PTR [esi+ecx+324]
  000f8	66 89 94 0e 7c
	01 00 00	 mov	 WORD PTR [esi+ecx+380], dx

; 546  : 					gObj[result].TY = gObj[result].Y;

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00106	0f b7 94 0e 46
	01 00 00	 movzx	 edx, WORD PTR [esi+ecx+326]
  0010e	66 89 94 0e 7e
	01 00 00	 mov	 WORD PTR [esi+ecx+382], dx

; 547  : 					gObj[result].m_OldX = gObj[result].X;

  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011c	0f b7 94 0e 44
	01 00 00	 movzx	 edx, WORD PTR [esi+ecx+324]
  00124	66 89 94 0e 78
	01 00 00	 mov	 WORD PTR [esi+ecx+376], dx

; 548  : 					gObj[result].m_OldY = gObj[result].Y;

  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00132	0f b7 94 0e 46
	01 00 00	 movzx	 edx, WORD PTR [esi+ecx+326]
  0013a	66 89 94 0e 7a
	01 00 00	 mov	 WORD PTR [esi+ecx+378], dx

; 549  : 					gObj[result].Dir = 1;

  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00148	88 9c 0e 48 01
	00 00		 mov	 BYTE PTR [esi+ecx+328], bl

; 550  : 					gObj[result].StartX = gObj[result].X;

  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00155	0f b6 94 0e 44
	01 00 00	 movzx	 edx, BYTE PTR [esi+ecx+324]
  0015d	88 94 0e 76 01
	00 00		 mov	 BYTE PTR [esi+ecx+374], dl

; 551  : 					gObj[result].StartY = gObj[result].Y;

  00164	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016a	0f b6 94 0e 46
	01 00 00	 movzx	 edx, BYTE PTR [esi+ecx+326]
  00172	88 94 0e 77 01
	00 00		 mov	 BYTE PTR [esi+ecx+375], dl

; 552  : 
; 553  : 					gObjSetMonster(result,stMonsterInfo->m_iMonsterType);

  00179	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0017c	51		 push	 ecx
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 554  : 
; 555  : 					gObj[result].m_Attribute = 62;

  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00188	ba 3e 00 00 00	 mov	 edx, 62			; 0000003eH
  0018d	66 89 94 06 b6
	04 00 00	 mov	 WORD PTR [esi+eax+1206], dx

; 556  : 					gObj[result].MaxRegenTime = 0;

  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019b	83 c4 08	 add	 esp, 8
  0019e	c7 84 0e ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+ecx+940], 0

; 557  : 					gObj[result].Dir = rand()%8;

  001a9	e8 00 00 00 00	 call	 _rand
  001ae	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  001b3	79 05		 jns	 SHORT $LN143@AddMonster
  001b5	48		 dec	 eax
  001b6	83 c8 f8	 or	 eax, -8			; fffffff8H
  001b9	40		 inc	 eax
$LN143@AddMonster:
  001ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c0	88 84 16 48 01
	00 00		 mov	 BYTE PTR [esi+edx+328], al

; 558  : 					gObj[result].DieRegen = 0;

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001cc	c6 84 06 a2 03
	00 00 00	 mov	 BYTE PTR [esi+eax+930], 0

; 559  : 					gObj[result].RegenTime = 1;

  001d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001da	89 9c 0e a8 03
	00 00		 mov	 DWORD PTR [esi+ecx+936], ebx

; 560  : 					gObj[result].MaxRegenTime = 1000;

  001e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e7	c7 84 16 ac 03
	00 00 e8 03 00
	00		 mov	 DWORD PTR [esi+edx+940], 1000 ; 000003e8H

; 561  : 					gObj[result].m_dwLastCheckTick = GetTickCount();

  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fe	89 84 0e c8 1f
	00 00		 mov	 DWORD PTR [esi+ecx+8136], eax
$LN4@AddMonster:

; 527  : 			continue;
; 528  : 
; 529  : 		BYTE cSX;
; 530  : 		BYTE cSY;
; 531  : 
; 532  : 		for(int iMonCount = 0; iMonCount < stMonsterInfo->m_iMonsterNumber; iMonCount++)

  00205	8b 45 f8	 mov	 eax, DWORD PTR _iMonCount$215337[ebp]
  00208	03 c3		 add	 eax, ebx
  0020a	89 45 f8	 mov	 DWORD PTR _iMonCount$215337[ebp], eax
  0020d	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00210	0f 8c 4a fe ff
	ff		 jl	 $LL88@AddMonster
  00216	8b 45 f4	 mov	 eax, DWORD PTR _it$[ebp]
$LN8@AddMonster:

; 516  : 	{
; 517  : 		return;
; 518  : 	}
; 519  : 
; 520  : 	std::vector<CASTLEDEEP_MONSTERINFO>::iterator it2;
; 521  : 
; 522  : 	for(it2 = it->second.begin(); it2 != it->second.end(); it2++)

  00219	83 c7 1c	 add	 edi, 28			; 0000001cH
  0021c	3b 78 14	 cmp	 edi, DWORD PTR [eax+20]
  0021f	0f 85 1b fe ff
	ff		 jne	 $LL49@AddMonster
  00225	5b		 pop	 ebx
$LN141@AddMonster:
  00226	5f		 pop	 edi
$LN7@AddMonster:
  00227	5e		 pop	 esi

; 562  : 				}
; 563  : 			}
; 564  : 		}
; 565  : 	}
; 566  : }

  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c2 08 00	 ret	 8
?AddMonster@CCastleDeepEvent@@QAEXHH@Z ENDP		; CCastleDeepEvent::AddMonster
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T230812 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T230812[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
PUBLIC	?erase@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@0@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::erase
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@0@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First_arg$[ebp]
  0000d	89 30		 mov	 DWORD PTR [eax], esi
  0000f	3b f2		 cmp	 esi, edx
  00011	74 26		 je	 SHORT $LN1@erase@6

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00013	57		 push	 edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	3b d7		 cmp	 edx, edi
  00019	74 1a		 je	 SHORT $LN30@erase@6
  0001b	53		 push	 ebx
  0001c	8d 64 24 00	 npad	 4
$LL32@erase@6:
  00020	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00022	89 1e		 mov	 DWORD PTR [esi], ebx
  00024	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  00027	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002a	83 c2 08	 add	 edx, 8
  0002d	83 c6 08	 add	 esi, 8
  00030	3b d7		 cmp	 edx, edi
  00032	75 ec		 jne	 SHORT $LL32@erase@6
  00034	5b		 pop	 ebx
$LN30@erase@6:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00035	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00038	5f		 pop	 edi
$LN1@erase@6:
  00039	5e		 pop	 esi

; 1212 : 			}
; 1213 : 		return (_First);
; 1214 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXXZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXXZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXXZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXXZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXXZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXXZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXXZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::reserve
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$216533 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$231042 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 03	 sar	 ecx, 3
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 56		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@QAEPAUCASTLEDEEP_EVENTTIME@@I@Z ; std::allocator<CASTLEDEEP_EVENTTIME>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$231042[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$216533[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_EVENTTIME@@PAU1@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_EVENTTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_EVENTTIME *,CASTLEDEEP_EVENTTIME *,std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	2b f8		 sub	 edi, eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	c1 ff 03	 sar	 edi, 3

; 761  : 			if (this->_Myfirst != 0)

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN35@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
$LN35@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00098	8d 14 fb	 lea	 edx, DWORD PTR [ebx+edi*8]
  0009b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009e	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$216533[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@2:
$LN41@reserve@2:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::reserve
PUBLIC	?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::reserve
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$216579 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$231127 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@3:
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 03	 sar	 ecx, 3
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 56		 jae	 SHORT $LN3@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEPAUCASTLEDEEP_SPAWNTIME@@I@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$231127[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$216579[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_SPAWNTIME@@PAU1@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@U1@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@PAU1@00AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_SPAWNTIME *,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	2b f8		 sub	 edi, eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	c1 ff 03	 sar	 edi, 3

; 761  : 			if (this->_Myfirst != 0)

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN35@reserve@3

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
$LN35@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00098	8d 14 fb	 lea	 edx, DWORD PTR [ebx+edi*8]
  0009b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009e	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve@3:

; 772  : 			}
; 773  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$216579[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@3:
$LN41@reserve@3:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::reserve
PUBLIC	?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::reserve
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$216642 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$231213 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00036	76 0a		 jbe	 SHORT $LN5@reserve@4

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@4:
$LN5@reserve@4:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0004c	f7 e9		 imul	 ecx
  0004e	03 d1		 add	 edx, ecx
  00050	c1 fa 04	 sar	 edx, 4
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00058	03 c2		 add	 eax, edx
  0005a	3b c3		 cmp	 eax, ebx
  0005c	73 79		 jae	 SHORT $LN3@reserve@4

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005e	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00061	53		 push	 ebx
  00062	8b cf		 mov	 ecx, edi
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEPAUCASTLEDEEP_MONSTERINFO@@I@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00069	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$231213[ebp]
  0006c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006f	8b 16		 mov	 edx, DWORD PTR [esi]
  00071	53		 push	 ebx
  00072	6a 00		 push	 0
  00074	57		 push	 edi
  00075	50		 push	 eax
  00076	51		 push	 ecx
  00077	52		 push	 edx
  00078	89 45 ec	 mov	 DWORD PTR __Ptr$216642[ebp], eax
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00082	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCASTLEDEEP_MONSTERINFO@@PAU1@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@U1@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@PAU1@00AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CASTLEDEEP_MONSTERINFO *,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00087	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00089	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008c	2b cb		 sub	 ecx, ebx
  0008e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00093	f7 e9		 imul	 ecx
  00095	03 d1		 add	 edx, ecx
  00097	c1 fa 04	 sar	 edx, 4
  0009a	8b fa		 mov	 edi, edx
  0009c	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0009f	83 c4 18	 add	 esp, 24			; 00000018H
  000a2	03 fa		 add	 edi, edx

; 761  : 			if (this->_Myfirst != 0)

  000a4	85 db		 test	 ebx, ebx
  000a6	74 09		 je	 SHORT $LN35@reserve@4

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	83 c4 04	 add	 esp, 4
$LN35@reserve@4:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000b1	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000b4	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  000bb	2b c8		 sub	 ecx, eax
  000bd	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$216642[ebp]
  000c0	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000c3	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  000ca	2b cf		 sub	 ecx, edi
  000cc	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000cf	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000d2	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000d5	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@4:

; 772  : 			}
; 773  : 		}

  000d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e1	59		 pop	 ecx
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000eb	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$216642[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000f4	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000f7	6a 00		 push	 0
  000f9	6a 00		 push	 0
  000fb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@4:
$LN41@reserve@4:
  00100	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::reserve
PUBLIC	??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$231362 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00030	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00033	33 c0		 xor	 eax, eax
  00035	89 06		 mov	 DWORD PTR [esi], eax
  00037	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003d	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00040	2b 3b		 sub	 edi, DWORD PTR [ebx]
  00042	89 06		 mov	 DWORD PTR [esi], eax
  00044	c1 ff 03	 sar	 edi, 3
  00047	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0004a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004d	3b f8		 cmp	 edi, eax
  0004f	74 48		 je	 SHORT $LN7@vector@3
  00051	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00057	76 0a		 jbe	 SHORT $LN18@vector@3
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0005e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN55@vector@3:
$LN18@vector@3:
  00063	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00066	57		 push	 edi
  00067	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@QAEPAUCASTLEDEEP_SPAWNTIME@@I@Z ; std::allocator<CASTLEDEEP_SPAWNTIME>::allocate

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  0006c	8b 55 08	 mov	 edx, DWORD PTR __Cat$231362[ebp]
  0006f	52		 push	 edx
  00070	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00073	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00076	52		 push	 edx
  00077	89 06		 mov	 DWORD PTR [esi], eax
  00079	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0007c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00082	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00084	50		 push	 eax
  00085	51		 push	 ecx
  00086	53		 push	 ebx
  00087	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008e	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@PAUCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@2@@std@@YAPAUCASTLEDEEP_SPAWNTIME@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,CASTLEDEEP_SPAWNTIME *,std::allocator<CASTLEDEEP_SPAWNTIME> >
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@3:

; 543  : 			_CATCH_END
; 544  : 		}

  00099	8b c6		 mov	 eax, esi
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
__catch$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  000af	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXXZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Tidy

; 542  : 			_RERAISE;

  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN56@vector@3:
$LN54@vector@3:
  000c0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
PUBLIC	??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$231496 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00030	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00033	33 c0		 xor	 eax, eax
  00035	89 06		 mov	 DWORD PTR [esi], eax
  00037	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00040	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00042	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00047	f7 e9		 imul	 ecx
  00049	03 d1		 add	 edx, ecx
  0004b	c1 fa 04	 sar	 edx, 4
  0004e	8b fa		 mov	 edi, edx
  00050	b8 00 00 00 00	 mov	 eax, 0
  00055	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00058	03 fa		 add	 edi, edx
  0005a	89 06		 mov	 DWORD PTR [esi], eax
  0005c	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0005f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00062	74 51		 je	 SHORT $LN7@vector@4
  00064	81 ff 49 92 24
	09		 cmp	 edi, 153391689		; 09249249H
  0006a	76 0a		 jbe	 SHORT $LN18@vector@4
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00071	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN55@vector@4:
$LN18@vector@4:
  00076	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00079	57		 push	 edi
  0007a	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@QAEPAUCASTLEDEEP_MONSTERINFO@@I@Z ; std::allocator<CASTLEDEEP_MONSTERINFO>::allocate
  0007f	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  00086	2b cf		 sub	 ecx, edi
  00088	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0008b	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  0008e	8b 55 08	 mov	 edx, DWORD PTR __Cat$231496[ebp]
  00091	52		 push	 edx
  00092	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00095	52		 push	 edx
  00096	89 06		 mov	 DWORD PTR [esi], eax
  00098	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0009b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0009e	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  000a0	50		 push	 eax
  000a1	51		 push	 ecx
  000a2	53		 push	 ebx
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000aa	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@PAUCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@2@@std@@YAPAUCASTLEDEEP_MONSTERINFO@@V?$_Vector_const_iterator@V?$_Vector_val@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,CASTLEDEEP_MONSTERINFO *,std::allocator<CASTLEDEEP_MONSTERINFO> >
  000af	83 c4 14	 add	 esp, 20			; 00000014H
  000b2	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@4:

; 543  : 			_CATCH_END
; 544  : 		}

  000b5	8b c6		 mov	 eax, esi
  000b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c1	59		 pop	 ecx
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 04 00	 ret	 4
__catch$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXXZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Tidy

; 542  : 			_RERAISE;

  000d3	6a 00		 push	 0
  000d5	6a 00		 push	 0
  000d7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN56@vector@4:
$LN54@vector@4:
  000dc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
PUBLIC	?clear@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXXZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXXZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::clear, COMDAT
; _this$ = ecx

; 1218 : 		erase(begin(), end());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00006	3b d6		 cmp	 edx, esi
  00008	74 1f		 je	 SHORT $LN19@clear@3
  0000a	8b c6		 mov	 eax, esi
  0000c	3b f6		 cmp	 esi, esi
  0000e	74 16		 je	 SHORT $LN48@clear@3
  00010	57		 push	 edi
$LL50@clear@3:
  00011	8b 38		 mov	 edi, DWORD PTR [eax]
  00013	89 3a		 mov	 DWORD PTR [edx], edi
  00015	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00018	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0001b	83 c0 08	 add	 eax, 8
  0001e	83 c2 08	 add	 edx, 8
  00021	3b c6		 cmp	 eax, esi
  00023	75 ec		 jne	 SHORT $LL50@clear@3
  00025	5f		 pop	 edi
$LN48@clear@3:
  00026	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN19@clear@3:
  00029	5e		 pop	 esi

; 1219 : 		}

  0002a	c3		 ret	 0
?clear@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXXZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXXZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXXZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	53		 push	 ebx
  00008	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 2c		 je	 SHORT $LN19@clear@4
  00011	8b c2		 mov	 eax, edx
  00013	3b d2		 cmp	 edx, edx
  00015	74 23		 je	 SHORT $LN48@clear@4
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL50@clear@4:
  00020	8b f0		 mov	 esi, eax
  00022	8b fb		 mov	 edi, ebx
  00024	83 c0 1c	 add	 eax, 28			; 0000001cH
  00027	b9 07 00 00 00	 mov	 ecx, 7
  0002c	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0002f	f3 a5		 rep movsd
  00031	3b c2		 cmp	 eax, edx
  00033	75 eb		 jne	 SHORT $LL50@clear@4
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN48@clear@4:
  0003a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN19@clear@4:
  0003d	5b		 pop	 ebx

; 1219 : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?clear@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXXZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::clear
_TEXT	ENDS
PUBLIC	??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >::~map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T232057 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ PROC ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >::~map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T232057[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
__ehhandler$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ ENDP ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >::~map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
;	COMDAT ?SetState@CCastleDeepEvent@@QAEXH@Z
_TEXT	SEGMENT
_iSTATE$ = 8						; size = 4
?SetState@CCastleDeepEvent@@QAEXH@Z PROC		; CCastleDeepEvent::SetState, COMDAT
; _this$ = ecx

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 342  : 	if (m_iEVENT_STATE < 0 || m_iEVENT_STATE > 2)

  00003	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00006	85 c0		 test	 eax, eax
  00008	78 24		 js	 SHORT $LN3@SetState
  0000a	83 f8 02	 cmp	 eax, 2
  0000d	7f 1f		 jg	 SHORT $LN3@SetState

; 343  : 		return;
; 344  : 
; 345  : 	m_iEVENT_STATE = iSTATE;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _iSTATE$[ebp]
  00012	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 346  : 
; 347  : 	switch(m_iEVENT_STATE)

  00015	83 e8 00	 sub	 eax, 0
  00018	74 14		 je	 SHORT $LN3@SetState
  0001a	48		 dec	 eax
  0001b	74 0c		 je	 SHORT $LN2@SetState
  0001d	48		 dec	 eax
  0001e	75 0e		 jne	 SHORT $LN3@SetState

; 351  : 		case 2: SetState_Playing(); break;

  00020	e8 00 00 00 00	 call	 ?SetState_Playing@CCastleDeepEvent@@QAEXXZ ; CCastleDeepEvent::SetState_Playing

; 352  : 	}
; 353  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN2@SetState:

; 348  : 	{
; 349  : 		case 0: SetState_None(); break;
; 350  : 		case 1: SetState_Closed(); break;

  00029	e8 00 00 00 00	 call	 ?SetState_Closed@CCastleDeepEvent@@QAEXXZ ; CCastleDeepEvent::SetState_Closed
$LN3@SetState:

; 352  : 	}
; 353  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?SetState@CCastleDeepEvent@@QAEXH@Z ENDP		; CCastleDeepEvent::SetState
_TEXT	ENDS
PUBLIC	??_C@_0CD@HCDGCBIA@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Start@ ; `string'
PUBLIC	??_C@_0DD@OCBAHGCE@?$FLCastleDeep?5Event?$FN?5ProcState_Clo@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ProcState_Closed@CCastleDeepEvent@@QAEXXZ	; CCastleDeepEvent::ProcState_Closed
EXTRN	?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z:PROC ; CCastleSiege::SendMapServerGroupMsg
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_0CD@HCDGCBIA@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Start@
CONST	SEGMENT
??_C@_0CD@HCDGCBIA@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Start@ DB '[Cast'
	DB	'leDeep Event] - Event Started', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OCBAHGCE@?$FLCastleDeep?5Event?$FN?5ProcState_Clo@
CONST	SEGMENT
??_C@_0DD@OCBAHGCE@?$FLCastleDeep?5Event?$FN?5ProcState_Clo@ DB '[CastleD'
	DB	'eep Event] ProcState_Closed()', 09H, 'LEFT-MSEC:%d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ProcState_Closed@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
_szTemp$215084 = -260					; size = 256
_szTemp$215081 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?ProcState_Closed@CCastleDeepEvent@@QAEXXZ PROC		; CCastleDeepEvent::ProcState_Closed, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 399  : 	int iTICK_MSEC = GetTickCount() - m_iTIME_TICK_COUNT;

  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0001c	8b f1		 mov	 esi, ecx
  0001e	ff d7		 call	 edi
  00020	2b 46 1c	 sub	 eax, DWORD PTR [esi+28]

; 400  : 
; 401  : 	if (iTICK_MSEC >= 1000)

  00023	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__wsprintfA
  00029	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0002e	7c 7d		 jl	 SHORT $LN11@ProcState_

; 402  : 	{
; 403  : 		m_iTIME_MSEC_REMAIN -= iTICK_MSEC;

  00030	29 46 14	 sub	 DWORD PTR [esi+20], eax

; 404  : 		m_iTIME_TICK_COUNT = GetTickCount();

  00033	ff d7		 call	 edi

; 405  : 
; 406  : 		if (m_bDoEvent != 0)

  00035	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00039	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0003c	74 5b		 je	 SHORT $LN10@ProcState_

; 407  : 		{
; 408  : 			if (m_iTIME_MSEC_REMAIN <= 300000
; 409  : 				&& m_iTIME_MSEC_REMAIN > 0
; 410  : 				&& m_iTIME_MSEC_REMAIN / 60000 != m_iTIME_NOTIFY_COUNT)

  0003e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00041	81 f9 e0 93 04
	00		 cmp	 ecx, 300000		; 000493e0H
  00047	7f 50		 jg	 SHORT $LN10@ProcState_
  00049	85 c9		 test	 ecx, ecx
  0004b	7e 4c		 jle	 SHORT $LN10@ProcState_
  0004d	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00052	f7 e9		 imul	 ecx
  00054	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	03 c2		 add	 eax, edx
  0005e	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00061	74 36		 je	 SHORT $LN10@ProcState_

; 411  : 			{
; 412  : 				m_iTIME_NOTIFY_COUNT = m_iTIME_MSEC_REMAIN / 60000;

  00063	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 413  : 
; 414  : 				if (m_iTIME_NOTIFY_COUNT + 1 == 5)

  00066	40		 inc	 eax
  00067	83 f8 05	 cmp	 eax, 5
  0006a	75 2d		 jne	 SHORT $LN10@ProcState_

; 415  : 				{
; 416  : 					char szTemp[256];
; 417  : 					wsprintf(szTemp,lMsg.Get(3224)); // # translation here

  0006c	68 98 0c 00 00	 push	 3224			; 00000c98H
  00071	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00076	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0007b	50		 push	 eax
  0007c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$215081[ebp]
  00082	50		 push	 eax
  00083	ff d3		 call	 ebx
  00085	83 c4 08	 add	 esp, 8

; 418  : 					g_CastleSiege.SendMapServerGroupMsg(szTemp);

  00088	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$215081[ebp]
  0008e	51		 push	 ecx
  0008f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00094	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z ; CCastleSiege::SendMapServerGroupMsg
$LN10@ProcState_:

; 419  : 				}
; 420  : 			}
; 421  : 		}
; 422  : 
; 423  : 		LogAddC(3,"[CastleDeep Event] ProcState_Closed()	LEFT-MSEC:%d",m_iTIME_MSEC_REMAIN);

  00099	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0009c	52		 push	 edx
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@OCBAHGCE@?$FLCastleDeep?5Event?$FN?5ProcState_Clo@
  000a2	6a 03		 push	 3
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@ProcState_:

; 424  : 	}
; 425  : 
; 426  : 	if (m_iTIME_MSEC_REMAIN <= 0)

  000ad	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  000b1	7f 4e		 jg	 SHORT $LN3@ProcState_

; 427  : 	{
; 428  : 		char szTemp[256];
; 429  : 		wsprintf(szTemp,lMsg.Get(3225)); // # translation here

  000b3	68 99 0c 00 00	 push	 3225			; 00000c99H
  000b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000bd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000c2	50		 push	 eax
  000c3	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$215084[ebp]
  000c9	50		 push	 eax
  000ca	ff d3		 call	 ebx
  000cc	83 c4 08	 add	 esp, 8

; 430  : 		g_CastleSiege.SendMapServerGroupMsg(szTemp);

  000cf	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$215084[ebp]
  000d5	51		 push	 ecx
  000d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000db	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z ; CCastleSiege::SendMapServerGroupMsg

; 431  : 
; 432  : 		if (m_bDoEvent != 0)

  000e0	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0

; 433  : 		{
; 434  : 			SetState(CD_STATE_PLAYING);

  000e4	8b ce		 mov	 ecx, esi
  000e6	74 04		 je	 SHORT $LN2@ProcState_
  000e8	6a 02		 push	 2

; 435  : 		}
; 436  : 		else

  000ea	eb 02		 jmp	 SHORT $LN12@ProcState_
$LN2@ProcState_:

; 437  : 		{
; 438  : 			SetState(CD_STATE_NONE);

  000ec	6a 00		 push	 0
$LN12@ProcState_:
  000ee	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState

; 439  : 		}
; 440  : 
; 441  : 		LogAddTD("[CastleDeep Event] - Event Started");

  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HCDGCBIA@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Start@
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000fe	83 c4 04	 add	 esp, 4
$LN3@ProcState_:

; 442  : 	}
; 443  : }

  00101	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	33 cd		 xor	 ecx, ebp
  00108	5b		 pop	 ebx
  00109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
?ProcState_Closed@CCastleDeepEvent@@QAEXXZ ENDP		; CCastleDeepEvent::ProcState_Closed
_TEXT	ENDS
PUBLIC	??_C@_0CB@IOPJIFCO@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Ended@ ; `string'
PUBLIC	??_C@_0DE@CCCKDNDF@?$FLCastleDeep?5Event?$FN?5ProcState_Pla@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ProcState_Playing@CCastleDeepEvent@@QAEXXZ	; CCastleDeepEvent::ProcState_Playing
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
;	COMDAT ??_C@_0CB@IOPJIFCO@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Ended@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	SEGMENT
??_C@_0CB@IOPJIFCO@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Ended@ DB '[Cast'
	DB	'leDeep Event] - Event Ended', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CCCKDNDF@?$FLCastleDeep?5Event?$FN?5ProcState_Pla@
CONST	SEGMENT
??_C@_0DE@CCCKDNDF@?$FLCastleDeep?5Event?$FN?5ProcState_Pla@ DB '[CastleD'
	DB	'eep Event] ProcState_Playing()', 09H, 'LEFT-MSEC:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
CONST	ENDS
;	COMDAT ?ProcState_Playing@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
$T232108 = -264						; size = 4
_szTemp$215138 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?ProcState_Playing@CCastleDeepEvent@@QAEXXZ PROC	; CCastleDeepEvent::ProcState_Playing, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx

; 447  : using namespace std;
; 448  : 	int iTICK_MSEC = GetTickCount() - m_iTIME_TICK_COUNT;

  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx
  0001d	ff d3		 call	 ebx
  0001f	2b 47 1c	 sub	 eax, DWORD PTR [edi+28]

; 449  : 
; 450  : 	if (iTICK_MSEC >= 1000)

  00022	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00027	0f 8c b6 00 00
	00		 jl	 $LN11@ProcState_@2

; 451  : 	{
; 452  : 		m_iTIME_MSEC_REMAIN +=  iTICK_MSEC;

  0002d	01 47 14	 add	 DWORD PTR [edi+20], eax
  00030	56		 push	 esi

; 453  : 		m_iTIME_TICK_COUNT = GetTickCount();

  00031	ff d3		 call	 ebx
  00033	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 454  : 
; 455  : 		for ( std::map<int, int>::iterator it = this->m_mapRunCheck.begin() ; it != this->m_mapRunCheck.end() ; it++) //HermeX Fix

  00036	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  0003c	8b 30		 mov	 esi, DWORD PTR [eax]
  0003e	3b f0		 cmp	 esi, eax
  00040	0f 84 88 00 00
	00		 je	 $LN8@ProcState_@2
  00046	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  0004b	f7 6f 14	 imul	 DWORD PTR [edi+20]
  0004e	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00051	8b ca		 mov	 ecx, edx
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	03 ca		 add	 ecx, edx
$LL36@ProcState_@2:

; 456  : 		{
; 457  : 			int iSpawnMin = it->second;
; 458  : 
; 459  : 			if (iSpawnMin == m_iTIME_MSEC_REMAIN / 60000)

  00058	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
  0005b	74 4f		 je	 SHORT $LN101@ProcState_@2

; 454  : 
; 455  : 		for ( std::map<int, int>::iterator it = this->m_mapRunCheck.begin() ; it != this->m_mapRunCheck.end() ; it++) //HermeX Fix

  0005d	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  00061	75 3f		 jne	 SHORT $LN104@ProcState_@2
  00063	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00066	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0006a	75 16		 jne	 SHORT $LN100@ProcState_@2
  0006c	8b f0		 mov	 esi, eax
  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00074	75 2c		 jne	 SHORT $LN104@ProcState_@2
$LL51@ProcState_@2:
  00076	8b f0		 mov	 esi, eax
  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0007e	74 f6		 je	 SHORT $LL51@ProcState_@2
  00080	eb 20		 jmp	 SHORT $LN104@ProcState_@2
$LN100@ProcState_@2:
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00089	75 15		 jne	 SHORT $LN34@ProcState_@2
  0008b	eb 03 8d 49 00	 npad	 5
$LL35@ProcState_@2:
  00090	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00093	75 0b		 jne	 SHORT $LN34@ProcState_@2
  00095	8b f0		 mov	 esi, eax
  00097	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0009e	74 f0		 je	 SHORT $LL35@ProcState_@2
$LN34@ProcState_@2:
  000a0	8b f0		 mov	 esi, eax
$LN104@ProcState_@2:
  000a2	3b b7 84 00 00
	00		 cmp	 esi, DWORD PTR [edi+132]
  000a8	75 ae		 jne	 SHORT $LL36@ProcState_@2

; 456  : 		{
; 457  : 			int iSpawnMin = it->second;
; 458  : 
; 459  : 			if (iSpawnMin == m_iTIME_MSEC_REMAIN / 60000)

  000aa	eb 22		 jmp	 SHORT $LN8@ProcState_@2
$LN101@ProcState_@2:

; 460  : 			{
; 461  : 				AddMonster(m_iCUR_ASSULT_TYPE,it->first);

  000ac	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000af	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  000b2	50		 push	 eax
  000b3	51		 push	 ecx
  000b4	8b cf		 mov	 ecx, edi
  000b6	e8 00 00 00 00	 call	 ?AddMonster@CCastleDeepEvent@@QAEXHH@Z ; CCastleDeepEvent::AddMonster

; 462  : 				m_mapRunCheck.erase(it);

  000bb	56		 push	 esi
  000bc	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T232108[ebp]
  000c2	52		 push	 edx
  000c3	8d 8f 80 00 00
	00		 lea	 ecx, DWORD PTR [edi+128]
  000c9	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
$LN8@ProcState_@2:

; 463  : 				break;
; 464  : 			}
; 465  : 		}
; 466  : 
; 467  : 		LogAddC(3,"[CastleDeep Event] ProcState_Playing()	LEFT-MSEC:%d",m_iTIME_MSEC_REMAIN);

  000ce	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@CCCKDNDF@?$FLCastleDeep?5Event?$FN?5ProcState_Pla@
  000d7	6a 03		 push	 3
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e2	5e		 pop	 esi
$LN11@ProcState_@2:

; 468  : 	}
; 469  : 
; 470  : 	if (m_mapRunCheck.size() <= 0)

  000e3	83 bf 88 00 00
	00 00		 cmp	 DWORD PTR [edi+136], 0
  000ea	77 70		 ja	 SHORT $LN6@ProcState_@2

; 471  : 	{
; 472  : 		if (m_bCheckEnd == 0)

  000ec	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  000f0	75 0e		 jne	 SHORT $LN5@ProcState_@2

; 473  : 		{
; 474  : 			m_bCheckEnd = 1;

  000f2	c7 47 0c 01 00
	00 00		 mov	 DWORD PTR [edi+12], 1

; 475  : 			m_uCheckEndTick = GetTickCount();

  000f9	ff d3		 call	 ebx
  000fb	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 476  : 		}
; 477  : 		else

  000fe	eb 4e		 jmp	 SHORT $LN1@ProcState_@2
$LN5@ProcState_@2:

; 478  : 		{
; 479  : 			if (m_uCheckEndTick + 600000 < GetTickCount()) //HermeX Fix

  00100	ff d3		 call	 ebx
  00102	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00105	81 c1 c0 27 09
	00		 add	 ecx, 600000		; 000927c0H
  0010b	3b c8		 cmp	 ecx, eax
  0010d	73 3f		 jae	 SHORT $LN1@ProcState_@2

; 480  : 			{
; 481  : 				char szTemp[256];
; 482  : 				wsprintf(szTemp,lMsg.Get(3226)); // # translation here (HermeX Fix)

  0010f	68 9a 0c 00 00	 push	 3226			; 00000c9aH
  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00119	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0011e	50		 push	 eax
  0011f	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$215138[ebp]
  00125	52		 push	 edx
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 483  : 				AllSendServerMsg(szTemp);

  0012c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$215138[ebp]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH

; 484  : 
; 485  : 				if (m_bDoEvent != 0)

  0013b	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0

; 486  : 				{
; 487  : 					SetState(CD_STATE_CLOSED);

  0013f	8b cf		 mov	 ecx, edi
  00141	74 04		 je	 SHORT $LN2@ProcState_@2
  00143	6a 01		 push	 1

; 488  : 				}
; 489  : 				else

  00145	eb 02		 jmp	 SHORT $LN105@ProcState_@2
$LN2@ProcState_@2:

; 490  : 				{
; 491  : 					SetState(CD_STATE_NONE);

  00147	6a 00		 push	 0
$LN105@ProcState_@2:
  00149	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState
$LN1@ProcState_@2:

; 492  : 				}
; 493  : 			}
; 494  : 		}
; 495  : 
; 496  : 		LogAddTD("[CastleDeep Event] - Event Ended");

  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@IOPJIFCO@?$FLCastleDeep?5Event?$FN?5?9?5Event?5Ended@
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00159	83 c4 04	 add	 esp, 4
$LN6@ProcState_@2:

; 497  : 	}
; 498  : }

  0015c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	5f		 pop	 edi
  00160	33 cd		 xor	 ecx, ebp
  00162	5b		 pop	 ebx
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
?ProcState_Playing@CCastleDeepEvent@@QAEXXZ ENDP	; CCastleDeepEvent::ProcState_Playing
_TEXT	ENDS
PUBLIC	??0?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T232599 = -16						; size = 12
$T232500 = -4						; size = 4
??0?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ PROC ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 18		 push	 24			; 00000018H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN25@map
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 14	 mov	 BYTE PTR [ecx+20], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 15	 mov	 BYTE PTR [edx+21], al

; 107  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0

; 106  : 		{	// construct empty map from defaults

$LN25@map:
  00044	8d 45 fc	 lea	 eax, DWORD PTR $T232500[ebp]
  00047	50		 push	 eax
  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T232599[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T232500[ebp], 0
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR $T232599[ebp]
  0005f	51		 push	 ecx
  00060	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T232599[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@map:
$LN48@map:
  0006c	cc		 int	 3
??0?$map@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@@std@@QAE@XZ ENDP ; std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >
_TEXT	ENDS
PUBLIC	??1?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@5
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@5:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXXZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXXZ PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::clear, COMDAT
; _this$ = ecx

; 1218 : 		erase(begin(), end());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00006	3b d6		 cmp	 edx, esi
  00008	74 1f		 je	 SHORT $LN19@clear@5
  0000a	8b c6		 mov	 eax, esi
  0000c	3b f6		 cmp	 esi, esi
  0000e	74 16		 je	 SHORT $LN48@clear@5
  00010	57		 push	 edi
$LL50@clear@5:
  00011	8b 38		 mov	 edi, DWORD PTR [eax]
  00013	89 3a		 mov	 DWORD PTR [edx], edi
  00015	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00018	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0001b	83 c0 08	 add	 eax, 8
  0001e	83 c2 08	 add	 edx, 8
  00021	3b c6		 cmp	 eax, esi
  00023	75 ec		 jne	 SHORT $LL50@clear@5
  00025	5f		 pop	 edi
$LN48@clear@5:
  00026	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN19@clear@5:
  00029	5e		 pop	 esi

; 1219 : 		}

  0002a	c3		 ret	 0
?clear@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXXZ ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::~vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::~vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@6
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@6:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::~vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??1?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::~vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::~vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@7
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@7:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::~vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00014	c1 f8 03	 sar	 eax, 3
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 03	 sar	 edx, 3
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve@2
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve@2
$LN23@Reserve@2:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve@2:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve@2
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve@2:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::reserve
$LN1@Reserve@2:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve@2:
?_Reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00014	c1 f8 03	 sar	 eax, 3
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@3:
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 03	 sar	 edx, 3
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve@3

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve@3
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve@3
$LN23@Reserve@3:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve@3:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve@3
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve@3:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::reserve
$LN1@Reserve@3:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve@3:
?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1291 : 		size_type _Size = size();

  00004	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	2b f3		 sub	 esi, ebx
  0000c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00011	f7 ee		 imul	 esi

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	03 d6		 add	 edx, esi
  00018	c1 fa 04	 sar	 edx, 4
  0001b	8b f2		 mov	 esi, edx
  0001d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00020	03 f2		 add	 esi, edx
  00022	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00027	2b d0		 sub	 edx, eax
  00029	57		 push	 edi
  0002a	3b d6		 cmp	 edx, esi
  0002c	73 0a		 jae	 SHORT $LN4@Reserve@4

; 1293 : 			_Xlen();

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00033	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@4:
$LN4@Reserve@4:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00038	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0003b	03 f0		 add	 esi, eax
  0003d	2b fb		 sub	 edi, ebx
  0003f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00044	f7 ef		 imul	 edi
  00046	03 d7		 add	 edx, edi
  00048	c1 fa 04	 sar	 edx, 4
  0004b	8b c2		 mov	 eax, edx
  0004d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00050	03 c2		 add	 eax, edx
  00052	3b f0		 cmp	 esi, eax
  00054	76 21		 jbe	 SHORT $LN1@Reserve@4

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00056	8b d0		 mov	 edx, eax
  00058	d1 ea		 shr	 edx, 1
  0005a	bf 49 92 24 09	 mov	 edi, 153391689		; 09249249H
  0005f	2b fa		 sub	 edi, edx
  00061	3b f8		 cmp	 edi, eax
  00063	73 04		 jae	 SHORT $LN23@Reserve@4
  00065	33 c0		 xor	 eax, eax
  00067	eb 02		 jmp	 SHORT $LN24@Reserve@4
$LN23@Reserve@4:
  00069	03 c2		 add	 eax, edx
$LN24@Reserve@4:
  0006b	3b c6		 cmp	 eax, esi
  0006d	73 02		 jae	 SHORT $LN20@Reserve@4
  0006f	8b c6		 mov	 eax, esi
$LN20@Reserve@4:
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::reserve
$LN1@Reserve@4:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 1298 : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN33@Reserve@4:
?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Reserve
_TEXT	ENDS
PUBLIC	??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z ; std::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int &,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z PROC ; std::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int &,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Val2$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 0e		 mov	 DWORD PTR [esi], ecx
  00010	52		 push	 edx
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	e8 00 00 00 00	 call	 ??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >

; 164  : 		}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z ENDP ; std::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int &,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>
_TEXT	ENDS
PUBLIC	??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z ; std::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int &,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z PROC ; std::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int &,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Val2$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 0e		 mov	 DWORD PTR [esi], ecx
  00010	52		 push	 edx
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	e8 00 00 00 00	 call	 ??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >

; 164  : 		}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z ENDP ; std::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int &,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@Pair_base
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@Pair_base:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@Pair_base@2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@Pair_base@2:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAUCASTLEDEEP_SPAWNTIME@@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAUCASTLEDEEP_SPAWNTIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAUCASTLEDEEP_SPAWNTIME@@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back@2
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back@2

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 635  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back@2

; 636  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Reserve
$LN3@push_back@2:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 			++this->_Mylast;

  00040	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back@2:

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else
; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back@2

; 646  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Reserve
$LN1@push_back@2:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 			++this->_Mylast;

  00069	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAUCASTLEDEEP_SPAWNTIME@@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAUCASTLEDEEP_MONSTERINFO@@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAUCASTLEDEEP_MONSTERINFO@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAUCASTLEDEEP_MONSTERINFO@@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 52		 jae	 SHORT $LN4@push_back@3
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 4c		 ja	 SHORT $LN4@push_back@3

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001e	f7 ef		 imul	 edi
  00020	03 d7		 add	 edx, edi
  00022	c1 fa 04	 sar	 edx, 4
  00025	8b fa		 mov	 edi, edx
  00027	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002a	03 fa		 add	 edi, edx

; 635  : 			if (this->_Mylast == this->_Myend)

  0002c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002f	75 09		 jne	 SHORT $LN3@push_back@3

; 636  : 				_Reserve(1);

  00031	6a 01		 push	 1
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Reserve
$LN3@push_back@3:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00043	2b c7		 sub	 eax, edi
  00045	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00050	51		 push	 ecx

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00051	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 			++this->_Mylast;

  00059	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN4@push_back@3:

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else
; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00063	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00066	75 09		 jne	 SHORT $LN1@push_back@3

; 646  : 				_Reserve(1);

  00068	6a 01		 push	 1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Reserve
$LN1@push_back@3:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00071	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00074	57		 push	 edi
  00075	52		 push	 edx
  00076	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@U3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO>
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 			++this->_Mylast;

  00082	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAUCASTLEDEEP_MONSTERINFO@@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::push_back
_TEXT	ENDS
PUBLIC	?EnableEvent@CCastleDeepEvent@@QAEXH@Z		; CCastleDeepEvent::EnableEvent
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
;	COMDAT ?EnableEvent@CCastleDeepEvent@@QAEXH@Z
_TEXT	SEGMENT
_bDoEvent$ = 8						; size = 4
?EnableEvent@CCastleDeepEvent@@QAEXH@Z PROC		; CCastleDeepEvent::EnableEvent, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	this->m_bDoEvent = bDoEvent;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bDoEvent$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 101  : 
; 102  : 	if (this->m_bDoEvent != 0)

  00009	85 c0		 test	 eax, eax
  0000b	74 0b		 je	 SHORT $LN2@EnableEven

; 103  : 	{
; 104  : 		this->SetState(CD_STATE_CLOSED);

  0000d	6a 01		 push	 1

; 105  : 	}
; 106  : 	else
; 107  : 	{
; 108  : 		this->SetState(CD_STATE_NONE);

  0000f	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState

; 109  : 	}
; 110  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN2@EnableEven:

; 105  : 	}
; 106  : 	else
; 107  : 	{
; 108  : 		this->SetState(CD_STATE_NONE);

  00018	6a 00		 push	 0
  0001a	e8 00 00 00 00	 call	 ?SetState@CCastleDeepEvent@@QAEXH@Z ; CCastleDeepEvent::SetState

; 109  : 	}
; 110  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EnableEvent@CCastleDeepEvent@@QAEXH@Z ENDP		; CCastleDeepEvent::EnableEvent
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ; std::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@Pair_base@3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@Pair_base@3:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$_Pair_base@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~_Pair_base<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ; std::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@Pair_base@4
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@Pair_base@4:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$_Pair_base@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~_Pair_base<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	?Run@CCastleDeepEvent@@QAEXXZ			; CCastleDeepEvent::Run
; Function compile flags: /Ogtp
;	COMDAT ?Run@CCastleDeepEvent@@QAEXXZ
_TEXT	SEGMENT
?Run@CCastleDeepEvent@@QAEXXZ PROC			; CCastleDeepEvent::Run, COMDAT
; _this$ = ecx

; 386  : 	if (m_bDoEvent)

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	74 18		 je	 SHORT $LN3@Run

; 387  : 	{
; 388  : 		switch(m_iEVENT_STATE)

  00006	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00009	83 e8 00	 sub	 eax, 0
  0000c	74 10		 je	 SHORT $LN3@Run
  0000e	48		 dec	 eax
  0000f	74 08		 je	 SHORT $LN2@Run
  00011	48		 dec	 eax
  00012	75 0a		 jne	 SHORT $LN3@Run

; 392  : 			case 2: ProcState_Playing(); break;

  00014	e9 00 00 00 00	 jmp	 ?ProcState_Playing@CCastleDeepEvent@@QAEXXZ ; CCastleDeepEvent::ProcState_Playing
$LN2@Run:

; 389  : 		{
; 390  : 			case 0: ProcState_None(); break;
; 391  : 			case 1: ProcState_Closed(); break;

  00019	e9 00 00 00 00	 jmp	 ?ProcState_Closed@CCastleDeepEvent@@QAEXXZ ; CCastleDeepEvent::ProcState_Closed
$LN3@Run:

; 393  : 		}
; 394  : 	}
; 395  : }

  0001e	c3		 ret	 0
?Run@CCastleDeepEvent@@QAEXXZ ENDP			; CCastleDeepEvent::Run
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXABUCASTLEDEEP_EVENTTIME@@@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXABUCASTLEDEEP_EVENTTIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXABUCASTLEDEEP_EVENTTIME@@@Z PROC ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back@4
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back@4

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back@4

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Reserve
$LN3@push_back@4:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back@4:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back@4

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::_Reserve
$LN1@push_back@4:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXABUCASTLEDEEP_EVENTTIME@@@Z ENDP ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXABUCASTLEDEEP_SPAWNTIME@@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXABUCASTLEDEEP_SPAWNTIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXABUCASTLEDEEP_SPAWNTIME@@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back@5
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back@5

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back@5

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Reserve
$LN3@push_back@5:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back@5:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back@5

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Reserve
$LN1@push_back@5:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@UCASTLEDEEP_SPAWNTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_SPAWNTIME@@@0@PAUCASTLEDEEP_SPAWNTIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_SPAWNTIME>,CASTLEDEEP_SPAWNTIME,CASTLEDEEP_SPAWNTIME const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXABUCASTLEDEEP_SPAWNTIME@@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXABUCASTLEDEEP_MONSTERINFO@@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXABUCASTLEDEEP_MONSTERINFO@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXABUCASTLEDEEP_MONSTERINFO@@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 52		 jae	 SHORT $LN4@push_back@6
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 4c		 ja	 SHORT $LN4@push_back@6

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001e	f7 ef		 imul	 edi
  00020	03 d7		 add	 edx, edi
  00022	c1 fa 04	 sar	 edx, 4
  00025	8b fa		 mov	 edi, edx
  00027	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002a	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002f	75 09		 jne	 SHORT $LN3@push_back@6

; 981  : 				_Reserve(1);

  00031	6a 01		 push	 1
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Reserve
$LN3@push_back@6:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00043	2b c7		 sub	 eax, edi
  00045	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@AAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00059	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN4@push_back@6:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00063	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00066	75 09		 jne	 SHORT $LN1@push_back@6

; 991  : 				_Reserve(1);

  00068	6a 01		 push	 1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@IAEXI@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Reserve
$LN1@push_back@6:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00071	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00074	57		 push	 edi
  00075	52		 push	 edx
  00076	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@UCASTLEDEEP_MONSTERINFO@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_MONSTERINFO@@@0@PAUCASTLEDEEP_MONSTERINFO@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_MONSTERINFO>,CASTLEDEEP_MONSTERINFO,CASTLEDEEP_MONSTERINFO const &>
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00082	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXABUCASTLEDEEP_MONSTERINFO@@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::push_back
_TEXT	ENDS
PUBLIC	??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z ; std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int &,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z PROC ; std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int &,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Val2$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 0e		 mov	 DWORD PTR [esi], ecx
  00010	52		 push	 edx
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	e8 00 00 00 00	 call	 ??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >

; 248  : 		}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??$?0AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z ENDP ; std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int &,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > &>
_TEXT	ENDS
PUBLIC	??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z ; std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int &,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z PROC ; std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int &,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Val2$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 0e		 mov	 DWORD PTR [esi], ecx
  00010	52		 push	 edx
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	e8 00 00 00 00	 call	 ??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >

; 248  : 		}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??$?0AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@AAHAAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z ENDP ; std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int &,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > &>
_TEXT	ENDS
PUBLIC	??1?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN13@pair
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN13@pair:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??1?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN13@pair@2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN13@pair@2:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	?_Assign_rv@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAV12@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Assign_rv
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAV12@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Assign_rv, COMDAT
; _this$ = ecx

; 606  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 607  : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 33		 je	 SHORT $LN1@Assign_rv

; 608  : 			;
; 609  : 		else if (get_allocator() != _Right.get_allocator())
; 610  : 			{	// move construct a copy
; 611  : 			clear();
; 612  : 			for (iterator _Next = _Right.begin(); _Next != _Right.end();
; 613  : 				++_Next)
; 614  : 				push_back(_STD forward<_Ty>(*_Next));
; 615  : 			}
; 616  : 		else
; 617  : 			{	// clear this and steal from _Right
; 618  : 			_Tidy();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	53		 push	 ebx
  00011	33 db		 xor	 ebx, ebx
  00013	3b c3		 cmp	 eax, ebx
  00015	74 09		 je	 SHORT $LN116@Assign_rv
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN116@Assign_rv:
  00020	89 1e		 mov	 DWORD PTR [esi], ebx
  00022	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00025	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 619  : 			this->_Swap_all((_Myt&)_Right);
; 620  : 			this->_Myfirst = _Right._Myfirst;

  00028	8b 07		 mov	 eax, DWORD PTR [edi]
  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 621  : 			this->_Mylast = _Right._Mylast;

  0002c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002f	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 622  : 			this->_Myend = _Right._Myend;

  00032	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00035	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 623  : 
; 624  : 			_Right._Myfirst = 0;

  00038	89 1f		 mov	 DWORD PTR [edi], ebx

; 625  : 			_Right._Mylast = 0;

  0003a	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 626  : 			_Right._Myend = 0;

  0003d	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00040	5b		 pop	 ebx
$LN1@Assign_rv:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 627  : 			}
; 628  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?_Assign_rv@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::_Assign_rv
_TEXT	ENDS
PUBLIC	?_Assign_rv@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAV12@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Assign_rv
; Function compile flags: /Ogtp
;	COMDAT ?_Assign_rv@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAV12@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Assign_rv, COMDAT
; _this$ = ecx

; 606  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 607  : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 33		 je	 SHORT $LN1@Assign_rv@2

; 608  : 			;
; 609  : 		else if (get_allocator() != _Right.get_allocator())
; 610  : 			{	// move construct a copy
; 611  : 			clear();
; 612  : 			for (iterator _Next = _Right.begin(); _Next != _Right.end();
; 613  : 				++_Next)
; 614  : 				push_back(_STD forward<_Ty>(*_Next));
; 615  : 			}
; 616  : 		else
; 617  : 			{	// clear this and steal from _Right
; 618  : 			_Tidy();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	53		 push	 ebx
  00011	33 db		 xor	 ebx, ebx
  00013	3b c3		 cmp	 eax, ebx
  00015	74 09		 je	 SHORT $LN62@Assign_rv@2
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN62@Assign_rv@2:
  00020	89 1e		 mov	 DWORD PTR [esi], ebx
  00022	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00025	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 619  : 			this->_Swap_all((_Myt&)_Right);
; 620  : 			this->_Myfirst = _Right._Myfirst;

  00028	8b 07		 mov	 eax, DWORD PTR [edi]
  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 621  : 			this->_Mylast = _Right._Mylast;

  0002c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002f	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 622  : 			this->_Myend = _Right._Myend;

  00032	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00035	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 623  : 
; 624  : 			_Right._Myfirst = 0;

  00038	89 1f		 mov	 DWORD PTR [edi], ebx

; 625  : 			_Right._Mylast = 0;

  0003a	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 626  : 			_Right._Myend = 0;

  0003d	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00040	5b		 pop	 ebx
$LN1@Assign_rv@2:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 627  : 			}
; 628  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?_Assign_rv@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::_Assign_rv
_TEXT	ENDS
PUBLIC	??1?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ; std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN13@pair@3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN13@pair@3:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::~pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??1?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ; std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN13@pair@4
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN13@pair@4:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::~pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEPAXI@Z ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEPAXI@Z PROC ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN15@scalar@2
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN15@scalar@2:
  00016	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00021	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00028	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002f	74 09		 je	 SHORT $LN19@scalar@2
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN19@scalar@2:
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAEPAXI@Z ENDP ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEPAXI@Z ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEPAXI@Z PROC ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN15@scalar@3
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN15@scalar@3:
  00016	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00021	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00028	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002f	74 09		 je	 SHORT $LN19@scalar@3
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN19@scalar@3:
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??_G?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAEPAXI@Z ENDP ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >, COMDAT
; _this$ = ecx

; 595  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 596  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	33 d2		 xor	 edx, edx
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00012	3b c1		 cmp	 eax, ecx
  00014	74 22		 je	 SHORT $LN11@vector@8
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001e	56		 push	 esi
  0001f	8b 31		 mov	 esi, DWORD PTR [ecx]
  00021	89 30		 mov	 DWORD PTR [eax], esi
  00023	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00026	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00029	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0002c	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0002f	89 11		 mov	 DWORD PTR [ecx], edx
  00031	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00034	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00037	5e		 pop	 esi
$LN11@vector@8:

; 597  : 		}

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
_TEXT	ENDS
PUBLIC	??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >, COMDAT
; _this$ = ecx

; 595  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 596  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	33 d2		 xor	 edx, edx
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00012	3b c1		 cmp	 eax, ecx
  00014	74 22		 je	 SHORT $LN11@vector@9
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001e	56		 push	 esi
  0001f	8b 31		 mov	 esi, DWORD PTR [ecx]
  00021	89 30		 mov	 DWORD PTR [eax], esi
  00023	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00026	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00029	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0002c	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0002f	89 11		 mov	 DWORD PTR [ecx], edx
  00031	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00034	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00037	5e		 pop	 esi
$LN11@vector@9:

; 597  : 		}

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Destroy<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z PROC ; std::_Destroy<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 63   : 	_Ptr->~_Ty();

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN17@Destroy
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN17@Destroy:
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002c	5e		 pop	 esi

; 64   : 	}

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ENDP ; std::_Destroy<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Destroy<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z PROC ; std::_Destroy<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 63   : 	_Ptr->~_Ty();

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN17@Destroy@2
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN17@Destroy@2:
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002c	5e		 pop	 esi

; 64   : 	}

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$_Destroy@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@YAXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ENDP ; std::_Destroy<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z PROC ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  0000f	33 c9		 xor	 ecx, ecx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR __Val2$[ebp]
  00015	89 0a		 mov	 DWORD PTR [edx], ecx
  00017	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0001d	3b d6		 cmp	 edx, esi
  0001f	74 22		 je	 SHORT $LN18@allocator
  00021	89 0a		 mov	 DWORD PTR [edx], ecx
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00026	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00029	57		 push	 edi
  0002a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002c	89 3a		 mov	 DWORD PTR [edx], edi
  0002e	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00031	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  00034	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00037	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  0003a	89 0e		 mov	 DWORD PTR [esi], ecx
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00042	5f		 pop	 edi
$LN18@allocator:
  00043	5e		 pop	 esi

; 164  : 		}

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@1@@Z ENDP ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::_Pair_base<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z PROC ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  0000f	33 c9		 xor	 ecx, ecx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR __Val2$[ebp]
  00015	89 0a		 mov	 DWORD PTR [edx], ecx
  00017	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0001d	3b d6		 cmp	 edx, esi
  0001f	74 22		 je	 SHORT $LN18@allocator@2
  00021	89 0a		 mov	 DWORD PTR [edx], ecx
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00026	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00029	57		 push	 edi
  0002a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002c	89 3a		 mov	 DWORD PTR [edx], edi
  0002e	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00031	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  00034	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00037	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  0003a	89 0e		 mov	 DWORD PTR [esi], ecx
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00042	5f		 pop	 edi
$LN18@allocator@2:
  00043	5e		 pop	 esi

; 164  : 		}

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$_Pair_base@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAH$$QAV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@1@@Z ENDP ; std::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::_Pair_base<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 213  : 		_Destroy(_Ptr);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN19@destroy
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN19@destroy:
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002c	5e		 pop	 esi

; 214  : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@Z ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 213  : 		_Destroy(_Ptr);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN19@destroy@2
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN19@destroy@2:
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002c	5e		 pop	 esi

; 214  : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@Z ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::destroy
_TEXT	ENDS
PUBLIC	??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z PROC ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	56		 push	 esi
  00009	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx
  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	33 c9		 xor	 ecx, ecx
  00015	89 0a		 mov	 DWORD PTR [edx], ecx
  00017	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0001d	3b d6		 cmp	 edx, esi
  0001f	74 22		 je	 SHORT $LN25@allocator@3
  00021	89 0a		 mov	 DWORD PTR [edx], ecx
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00026	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00029	57		 push	 edi
  0002a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002c	89 3a		 mov	 DWORD PTR [edx], edi
  0002e	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00031	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  00034	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00037	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  0003a	89 0e		 mov	 DWORD PTR [esi], ecx
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00042	5f		 pop	 edi
$LN25@allocator@3:
  00043	5e		 pop	 esi

; 256  : 		}

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??$?0HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ENDP ; std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > ><int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >
_TEXT	ENDS
PUBLIC	??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z PROC ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	56		 push	 esi
  00009	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx
  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	33 c9		 xor	 ecx, ecx
  00015	89 0a		 mov	 DWORD PTR [edx], ecx
  00017	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0001d	3b d6		 cmp	 edx, esi
  0001f	74 22		 je	 SHORT $LN25@allocator@4
  00021	89 0a		 mov	 DWORD PTR [edx], ecx
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00026	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00029	57		 push	 edi
  0002a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002c	89 3a		 mov	 DWORD PTR [edx], edi
  0002e	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00031	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  00034	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00037	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  0003a	89 0e		 mov	 DWORD PTR [esi], ecx
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00042	5f		 pop	 edi
$LN25@allocator@4:
  00043	5e		 pop	 esi

; 256  : 		}

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??$?0HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ENDP ; std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > ><int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 287  : 	_Alval.destroy(_Pdest);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Pdest$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN21@Dest_val
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN21@Dest_val:
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002c	5e		 pop	 esi

; 288  : 	}

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 287  : 	_Alval.destroy(_Pdest);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Pdest$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN21@Dest_val@2
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN21@Dest_val@2:
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0002c	5e		 pop	 esi

; 288  : 	}

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Insert
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	3d cb cc cc 0c	 cmp	 eax, 214748363		; 0ccccccbH
  0000e	72 23		 jb	 SHORT $LN17@Insert@2

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));

  00010	8b 75 14	 mov	 esi, DWORD PTR __Newnode$[ebp]
  00013	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00016	50		 push	 eax
  00017	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >

; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN377@Insert@2:
$LN17@Insert@2:

; 1640 : 			}
; 1641 : 		++this->_Mysize;
; 1642 : 		_Newnode->_Parent = _Wherenode;

  00033	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00036	40		 inc	 eax
  00037	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0003a	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0003d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00040	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00043	32 db		 xor	 bl, bl
  00045	3b c2		 cmp	 eax, edx
  00047	75 10		 jne	 SHORT $LN16@Insert@2

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  00049	89 7a 04	 mov	 DWORD PTR [edx+4], edi

; 1647 : 			_Lmost() = _Newnode;

  0004c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004f	89 3a		 mov	 DWORD PTR [edx], edi

; 1648 : 			_Rmost() = _Newnode;

  00051	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00054	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00057	eb 20		 jmp	 SHORT $LN11@Insert@2
$LN16@Insert@2:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  00059	38 5d 0c	 cmp	 BYTE PTR __Addleft$[ebp], bl
  0005c	74 0d		 je	 SHORT $LN14@Insert@2

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  0005e	89 38		 mov	 DWORD PTR [eax], edi

; 1653 : 			if (_Wherenode == _Lmost())

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 02		 cmp	 eax, DWORD PTR [edx]
  00065	75 12		 jne	 SHORT $LN11@Insert@2

; 1654 : 				_Lmost() = _Newnode;

  00067	89 3a		 mov	 DWORD PTR [edx], edi

; 1655 : 			}
; 1656 : 		else

  00069	eb 0e		 jmp	 SHORT $LN11@Insert@2
$LN14@Insert@2:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0006b	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1659 : 			if (_Wherenode == _Rmost())

  0006e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00071	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00074	75 03		 jne	 SHORT $LN11@Insert@2

; 1660 : 				_Rmost() = _Newnode;

  00076	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN11@Insert@2:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	8b c7		 mov	 eax, edi
  0007e	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00081	0f 85 8f 01 00
	00		 jne	 $LN9@Insert@2
$LL10@Insert@2:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00087	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0008d	3b 16		 cmp	 edx, DWORD PTR [esi]
  0008f	0f 85 c1 00 00
	00		 jne	 $LN8@Insert@2

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  00095	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00098	38 5e 20	 cmp	 BYTE PTR [esi+32], bl
  0009b	75 1c		 jne	 SHORT $LN7@Insert@2

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0009d	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  000a1	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  000a5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a8	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000ab	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000ae	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1677 : 					}
; 1678 : 				else

  000b4	e9 51 01 00 00	 jmp	 $LN316@Insert@2
$LN7@Insert@2:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000b9	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000bc	75 3a		 jne	 SHORT $LN111@Insert@2

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000be	8b c2		 mov	 eax, edx

; 1683 : 						_Lrotate(_Pnode);

  000c0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c3	8b 32		 mov	 esi, DWORD PTR [edx]
  000c5	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000c8	8b 32		 mov	 esi, DWORD PTR [edx]
  000ca	38 5e 21	 cmp	 BYTE PTR [esi+33], bl
  000cd	75 03		 jne	 SHORT $LN110@Insert@2
  000cf	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN110@Insert@2:
  000d2	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d5	89 72 04	 mov	 DWORD PTR [edx+4], esi
  000d8	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000db	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000de	75 05		 jne	 SHORT $LN109@Insert@2
  000e0	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000e3	eb 0e		 jmp	 SHORT $LN106@Insert@2
$LN109@Insert@2:
  000e5	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000e8	3b 06		 cmp	 eax, DWORD PTR [esi]
  000ea	75 04		 jne	 SHORT $LN107@Insert@2
  000ec	89 16		 mov	 DWORD PTR [esi], edx
  000ee	eb 03		 jmp	 SHORT $LN106@Insert@2
$LN107@Insert@2:
  000f0	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN106@Insert@2:
  000f3	89 02		 mov	 DWORD PTR [edx], eax
  000f5	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN111@Insert@2:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fb	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000ff	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00102	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00105	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00108	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0010b	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0010e	8b 32		 mov	 esi, DWORD PTR [edx]
  00110	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00113	89 3a		 mov	 DWORD PTR [edx], edi
  00115	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00118	38 5f 21	 cmp	 BYTE PTR [edi+33], bl
  0011b	75 03		 jne	 SHORT $LN173@Insert@2
  0011d	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN173@Insert@2:
  00120	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  00123	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00126	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00129	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  0012c	75 0b		 jne	 SHORT $LN172@Insert@2
  0012e	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00131	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00134	e9 cb 00 00 00	 jmp	 $LN376@Insert@2

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert@2:
  00139	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0013c	3b 57 08	 cmp	 edx, DWORD PTR [edi+8]
  0013f	75 0b		 jne	 SHORT $LN170@Insert@2
  00141	89 77 08	 mov	 DWORD PTR [edi+8], esi
  00144	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00147	e9 b8 00 00 00	 jmp	 $LN376@Insert@2

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert@2:
  0014c	89 37		 mov	 DWORD PTR [edi], esi
  0014e	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00151	e9 ae 00 00 00	 jmp	 $LN376@Insert@2
$LN8@Insert@2:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  00156	8b 36		 mov	 esi, DWORD PTR [esi]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  00158	38 5e 20	 cmp	 BYTE PTR [esi+32], bl
  0015b	75 1c		 jne	 SHORT $LN3@Insert@2

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0015d	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  00161	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  00165	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00168	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0016b	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  0016e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00171	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  00174	e9 91 00 00 00	 jmp	 $LN316@Insert@2
$LN3@Insert@2:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00179	3b 02		 cmp	 eax, DWORD PTR [edx]
  0017b	75 3c		 jne	 SHORT $LN253@Insert@2

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  0017d	8b c2		 mov	 eax, edx

; 1709 : 						_Rrotate(_Pnode);

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00184	89 30		 mov	 DWORD PTR [eax], esi
  00186	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00189	38 5e 21	 cmp	 BYTE PTR [esi+33], bl
  0018c	75 03		 jne	 SHORT $LN252@Insert@2
  0018e	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN252@Insert@2:
  00191	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00194	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00197	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0019a	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0019d	75 05		 jne	 SHORT $LN251@Insert@2
  0019f	89 56 04	 mov	 DWORD PTR [esi+4], edx
  001a2	eb 0f		 jmp	 SHORT $LN248@Insert@2
$LN251@Insert@2:
  001a4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  001a7	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001aa	75 05		 jne	 SHORT $LN249@Insert@2
  001ac	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001af	eb 02		 jmp	 SHORT $LN248@Insert@2
$LN249@Insert@2:
  001b1	89 16		 mov	 DWORD PTR [esi], edx
$LN248@Insert@2:
  001b3	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001b6	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN253@Insert@2:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  001b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bc	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  001c0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c3	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c6	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001c9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001cc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001cf	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  001d2	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d4	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  001d7	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d9	38 5f 21	 cmp	 BYTE PTR [edi+33], bl
  001dc	75 03		 jne	 SHORT $LN315@Insert@2
  001de	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN315@Insert@2:
  001e1	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001e4	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  001e7	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001ea	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  001ed	75 05		 jne	 SHORT $LN314@Insert@2
  001ef	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001f2	eb 0e		 jmp	 SHORT $LN311@Insert@2
$LN314@Insert@2:
  001f4	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001f7	3b 17		 cmp	 edx, DWORD PTR [edi]
  001f9	75 04		 jne	 SHORT $LN312@Insert@2
  001fb	89 37		 mov	 DWORD PTR [edi], esi
  001fd	eb 03		 jmp	 SHORT $LN311@Insert@2
$LN312@Insert@2:
  001ff	89 77 08	 mov	 DWORD PTR [edi+8], esi
$LN311@Insert@2:
  00202	89 16		 mov	 DWORD PTR [esi], edx
$LN376@Insert@2:
  00204	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00207	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN316@Insert@2:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0020a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0020d	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00210	0f 84 71 fe ff
	ff		 je	 $LL10@Insert@2
$LN9@Insert@2:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00216	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00219	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1720 : 		return (iterator(_Newnode, this));

  0021c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0021f	89 38		 mov	 DWORD PTR [eax], edi
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	c6 41 20 01	 mov	 BYTE PTR [ecx+32], 1
  00227	5b		 pop	 ebx

; 1721 : 		}

  00228	5d		 pop	 ebp
  00229	c2 10 00	 ret	 16			; 00000010H
$LN375@Insert@2:
?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Insert
_TEXT	ENDS
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Insert
; Function compile flags: /Ogtp
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	3d cb cc cc 0c	 cmp	 eax, 214748363		; 0ccccccbH
  0000e	72 23		 jb	 SHORT $LN17@Insert@3

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));

  00010	8b 75 14	 mov	 esi, DWORD PTR __Newnode$[ebp]
  00013	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00016	50		 push	 eax
  00017	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >

; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN377@Insert@3:
$LN17@Insert@3:

; 1640 : 			}
; 1641 : 		++this->_Mysize;
; 1642 : 		_Newnode->_Parent = _Wherenode;

  00033	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00036	40		 inc	 eax
  00037	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0003a	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0003d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00040	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00043	32 db		 xor	 bl, bl
  00045	3b c2		 cmp	 eax, edx
  00047	75 10		 jne	 SHORT $LN16@Insert@3

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  00049	89 7a 04	 mov	 DWORD PTR [edx+4], edi

; 1647 : 			_Lmost() = _Newnode;

  0004c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004f	89 3a		 mov	 DWORD PTR [edx], edi

; 1648 : 			_Rmost() = _Newnode;

  00051	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00054	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00057	eb 20		 jmp	 SHORT $LN11@Insert@3
$LN16@Insert@3:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  00059	38 5d 0c	 cmp	 BYTE PTR __Addleft$[ebp], bl
  0005c	74 0d		 je	 SHORT $LN14@Insert@3

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  0005e	89 38		 mov	 DWORD PTR [eax], edi

; 1653 : 			if (_Wherenode == _Lmost())

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 02		 cmp	 eax, DWORD PTR [edx]
  00065	75 12		 jne	 SHORT $LN11@Insert@3

; 1654 : 				_Lmost() = _Newnode;

  00067	89 3a		 mov	 DWORD PTR [edx], edi

; 1655 : 			}
; 1656 : 		else

  00069	eb 0e		 jmp	 SHORT $LN11@Insert@3
$LN14@Insert@3:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0006b	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1659 : 			if (_Wherenode == _Rmost())

  0006e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00071	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00074	75 03		 jne	 SHORT $LN11@Insert@3

; 1660 : 				_Rmost() = _Newnode;

  00076	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN11@Insert@3:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	8b c7		 mov	 eax, edi
  0007e	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00081	0f 85 8f 01 00
	00		 jne	 $LN9@Insert@3
$LL10@Insert@3:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00087	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0008d	3b 16		 cmp	 edx, DWORD PTR [esi]
  0008f	0f 85 c1 00 00
	00		 jne	 $LN8@Insert@3

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  00095	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00098	38 5e 20	 cmp	 BYTE PTR [esi+32], bl
  0009b	75 1c		 jne	 SHORT $LN7@Insert@3

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0009d	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  000a1	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  000a5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a8	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000ab	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000ae	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1677 : 					}
; 1678 : 				else

  000b4	e9 51 01 00 00	 jmp	 $LN316@Insert@3
$LN7@Insert@3:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000b9	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000bc	75 3a		 jne	 SHORT $LN111@Insert@3

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000be	8b c2		 mov	 eax, edx

; 1683 : 						_Lrotate(_Pnode);

  000c0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c3	8b 32		 mov	 esi, DWORD PTR [edx]
  000c5	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000c8	8b 32		 mov	 esi, DWORD PTR [edx]
  000ca	38 5e 21	 cmp	 BYTE PTR [esi+33], bl
  000cd	75 03		 jne	 SHORT $LN110@Insert@3
  000cf	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN110@Insert@3:
  000d2	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d5	89 72 04	 mov	 DWORD PTR [edx+4], esi
  000d8	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000db	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000de	75 05		 jne	 SHORT $LN109@Insert@3
  000e0	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000e3	eb 0e		 jmp	 SHORT $LN106@Insert@3
$LN109@Insert@3:
  000e5	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000e8	3b 06		 cmp	 eax, DWORD PTR [esi]
  000ea	75 04		 jne	 SHORT $LN107@Insert@3
  000ec	89 16		 mov	 DWORD PTR [esi], edx
  000ee	eb 03		 jmp	 SHORT $LN106@Insert@3
$LN107@Insert@3:
  000f0	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN106@Insert@3:
  000f3	89 02		 mov	 DWORD PTR [edx], eax
  000f5	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN111@Insert@3:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fb	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000ff	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00102	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00105	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00108	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0010b	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0010e	8b 32		 mov	 esi, DWORD PTR [edx]
  00110	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00113	89 3a		 mov	 DWORD PTR [edx], edi
  00115	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00118	38 5f 21	 cmp	 BYTE PTR [edi+33], bl
  0011b	75 03		 jne	 SHORT $LN173@Insert@3
  0011d	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN173@Insert@3:
  00120	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  00123	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00126	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00129	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  0012c	75 0b		 jne	 SHORT $LN172@Insert@3
  0012e	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00131	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00134	e9 cb 00 00 00	 jmp	 $LN376@Insert@3

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert@3:
  00139	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0013c	3b 57 08	 cmp	 edx, DWORD PTR [edi+8]
  0013f	75 0b		 jne	 SHORT $LN170@Insert@3
  00141	89 77 08	 mov	 DWORD PTR [edi+8], esi
  00144	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00147	e9 b8 00 00 00	 jmp	 $LN376@Insert@3

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert@3:
  0014c	89 37		 mov	 DWORD PTR [edi], esi
  0014e	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00151	e9 ae 00 00 00	 jmp	 $LN376@Insert@3
$LN8@Insert@3:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  00156	8b 36		 mov	 esi, DWORD PTR [esi]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  00158	38 5e 20	 cmp	 BYTE PTR [esi+32], bl
  0015b	75 1c		 jne	 SHORT $LN3@Insert@3

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0015d	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  00161	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  00165	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00168	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0016b	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  0016e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00171	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  00174	e9 91 00 00 00	 jmp	 $LN316@Insert@3
$LN3@Insert@3:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00179	3b 02		 cmp	 eax, DWORD PTR [edx]
  0017b	75 3c		 jne	 SHORT $LN253@Insert@3

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  0017d	8b c2		 mov	 eax, edx

; 1709 : 						_Rrotate(_Pnode);

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00184	89 30		 mov	 DWORD PTR [eax], esi
  00186	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00189	38 5e 21	 cmp	 BYTE PTR [esi+33], bl
  0018c	75 03		 jne	 SHORT $LN252@Insert@3
  0018e	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN252@Insert@3:
  00191	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00194	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00197	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0019a	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0019d	75 05		 jne	 SHORT $LN251@Insert@3
  0019f	89 56 04	 mov	 DWORD PTR [esi+4], edx
  001a2	eb 0f		 jmp	 SHORT $LN248@Insert@3
$LN251@Insert@3:
  001a4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  001a7	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001aa	75 05		 jne	 SHORT $LN249@Insert@3
  001ac	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001af	eb 02		 jmp	 SHORT $LN248@Insert@3
$LN249@Insert@3:
  001b1	89 16		 mov	 DWORD PTR [esi], edx
$LN248@Insert@3:
  001b3	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001b6	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN253@Insert@3:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  001b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bc	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  001c0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c3	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c6	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001c9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001cc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001cf	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  001d2	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d4	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  001d7	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d9	38 5f 21	 cmp	 BYTE PTR [edi+33], bl
  001dc	75 03		 jne	 SHORT $LN315@Insert@3
  001de	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN315@Insert@3:
  001e1	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001e4	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  001e7	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001ea	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  001ed	75 05		 jne	 SHORT $LN314@Insert@3
  001ef	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001f2	eb 0e		 jmp	 SHORT $LN311@Insert@3
$LN314@Insert@3:
  001f4	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001f7	3b 17		 cmp	 edx, DWORD PTR [edi]
  001f9	75 04		 jne	 SHORT $LN312@Insert@3
  001fb	89 37		 mov	 DWORD PTR [edi], esi
  001fd	eb 03		 jmp	 SHORT $LN311@Insert@3
$LN312@Insert@3:
  001ff	89 77 08	 mov	 DWORD PTR [edi+8], esi
$LN311@Insert@3:
  00202	89 16		 mov	 DWORD PTR [esi], edx
$LN376@Insert@3:
  00204	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00207	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN316@Insert@3:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0020a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0020d	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00210	0f 84 71 fe ff
	ff		 je	 $LL10@Insert@3
$LN9@Insert@3:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00216	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00219	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1720 : 		return (iterator(_Newnode, this));

  0021c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0021f	89 38		 mov	 DWORD PTR [eax], edi
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	c6 41 20 01	 mov	 BYTE PTR [ecx+32], 1
  00227	5b		 pop	 ebx

; 1721 : 		}

  00228	5d		 pop	 ebp
  00229	c2 10 00	 ret	 16			; 00000010H
$LN375@Insert@3:
?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Insert
_TEXT	ENDS
PUBLIC	??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::construct<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z$0
__ehfuncinfo$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T239552 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::construct<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00024	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	3b c2		 cmp	 eax, edx
  0002b	74 39		 je	 SHORT $LN34@construct@13
  0002d	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  00030	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00033	8b 36		 mov	 esi, DWORD PTR [esi]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	83 c0 04	 add	 eax, 4
  0003a	89 10		 mov	 DWORD PTR [eax], edx
  0003c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00042	3b c1		 cmp	 eax, ecx
  00044	74 20		 je	 SHORT $LN34@construct@13
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0004b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0004e	8b 31		 mov	 esi, DWORD PTR [ecx]
  00050	89 30		 mov	 DWORD PTR [eax], esi
  00052	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00055	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00058	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0005b	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0005e	89 11		 mov	 DWORD PTR [ecx], edx
  00060	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00063	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN34@construct@13:

; 209  : 		}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5e		 pop	 esi
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T239552[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >::construct<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
PUBLIC	??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::construct<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z$0
__ehfuncinfo$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T240073 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z PROC ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::construct<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00024	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	3b c2		 cmp	 eax, edx
  0002b	74 39		 je	 SHORT $LN34@construct@14
  0002d	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  00030	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00033	8b 36		 mov	 esi, DWORD PTR [esi]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	83 c0 04	 add	 eax, 4
  0003a	89 10		 mov	 DWORD PTR [eax], edx
  0003c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00042	3b c1		 cmp	 eax, ecx
  00044	74 20		 je	 SHORT $LN34@construct@14
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0004b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0004e	8b 31		 mov	 esi, DWORD PTR [ecx]
  00050	89 30		 mov	 DWORD PTR [eax], esi
  00052	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00055	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00058	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0005b	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0005e	89 11		 mov	 DWORD PTR [ecx], edx
  00060	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00063	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN34@construct@14:

; 209  : 		}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5e		 pop	 esi
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T240073[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@QAEXPAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ENDP ; std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >::construct<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Erase
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 2b		 jne	 SHORT $LN1@Erase@2
$LL3@Erase@2:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	8b cb		 mov	 ecx, ebx
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001e	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));

  00020	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00023	51		 push	 ecx
  00024	8d 43 0d	 lea	 eax, DWORD PTR [ebx+13]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >

; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  0003a	8b fe		 mov	 edi, esi
  0003c	74 d5		 je	 SHORT $LL3@Erase@2
$LN1@Erase@2:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Erase
; Function compile flags: /Ogtp
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 2b		 jne	 SHORT $LN1@Erase@3
$LL3@Erase@3:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	8b cb		 mov	 ecx, ebx
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001e	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));

  00020	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00023	51		 push	 ecx
  00024	8d 43 0d	 lea	 eax, DWORD PTR [ebx+13]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >

; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  0003a	8b fe		 mov	 edi, esi
  0003c	74 d5		 je	 SHORT $LL3@Erase@3
$LN1@Erase@3:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv797 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 7b 21 00	 cmp	 BYTE PTR [ebx+33], 0
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	74 0a		 je	 SHORT $LN40@erase@7

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN297@erase@7:
$LN40@erase@7:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00022	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002c	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00030	74 05		 je	 SHORT $LN39@erase@7

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00032	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00035	eb 17		 jmp	 SHORT $LN291@erase@7
$LN39@erase@7:
  00037	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003a	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0003e	74 04		 je	 SHORT $LN37@erase@7

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00040	8b f9		 mov	 edi, ecx

; 1218 : 		else

  00042	eb 0a		 jmp	 SHORT $LN291@erase@7
$LN37@erase@7:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00044	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00047	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  0004a	3b c3		 cmp	 eax, ebx
  0004c	75 72		 jne	 SHORT $LN35@erase@7
$LN291@erase@7:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  0004e	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  00052	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00055	75 03		 jne	 SHORT $LN34@erase@7

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00057	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@7:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00060	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00063	75 05		 jne	 SHORT $LN33@erase@7

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00068	eb 0b		 jmp	 SHORT $LN30@erase@7
$LN33@erase@7:
  0006a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0006c	75 04		 jne	 SHORT $LN31@erase@7

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0006e	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  00070	eb 03		 jmp	 SHORT $LN30@erase@7
$LN31@erase@7:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  00072	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@7:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	39 18		 cmp	 DWORD PTR [eax], ebx
  0007a	75 1b		 jne	 SHORT $LN29@erase@7

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0007c	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  00080	74 04		 je	 SHORT $LN43@erase@7
  00082	8b c6		 mov	 eax, esi
  00084	eb 0c		 jmp	 SHORT $LN44@erase@7
$LN43@erase@7:
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Min
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 c4 04	 add	 esp, 4
$LN44@erase@7:
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase@7:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00097	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009a	89 4d f4	 mov	 DWORD PTR tv797[ebp], ecx
  0009d	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000a0	75 78		 jne	 SHORT $LN165@erase@7

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000a2	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  000a6	74 07		 je	 SHORT $LN45@erase@7
  000a8	8b c6		 mov	 eax, esi
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000ad	eb 6b		 jmp	 SHORT $LN165@erase@7
$LN45@erase@7:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Max
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR tv797[ebp]
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000be	eb 5a		 jmp	 SHORT $LN165@erase@7
$LN35@erase@7:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c7	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000ca	75 04		 jne	 SHORT $LN26@erase@7

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cc	8b f0		 mov	 esi, eax

; 1257 : 			else

  000ce	eb 1a		 jmp	 SHORT $LN25@erase@7
$LN26@erase@7:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000d0	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d7	75 03		 jne	 SHORT $LN24@erase@7

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d9	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@7:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000dc	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e4	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase@7:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f3	75 05		 jne	 SHORT $LN23@erase@7

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f8	eb 0e		 jmp	 SHORT $LN20@erase@7
$LN23@erase@7:
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	39 19		 cmp	 DWORD PTR [ecx], ebx
  000ff	75 04		 jne	 SHORT $LN21@erase@7

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00101	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00103	eb 03		 jmp	 SHORT $LN20@erase@7
$LN21@erase@7:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00105	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@7:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00108	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010e	8a 53 20	 mov	 dl, BYTE PTR [ebx+32]
  00111	8a 48 20	 mov	 cl, BYTE PTR [eax+32]
  00114	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00117	88 4b 20	 mov	 BYTE PTR [ebx+32], cl
$LN165@erase@7:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0011a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	b3 01		 mov	 bl, 1
  00122	38 58 20	 cmp	 BYTE PTR [eax+32], bl
  00125	0f 85 fa 00 00
	00		 jne	 $LN19@erase@7
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00131	0f 84 eb 00 00
	00		 je	 $LN16@erase@7
$LL18@erase@7:
  00137	38 5f 20	 cmp	 BYTE PTR [edi+32], bl
  0013a	0f 85 e2 00 00
	00		 jne	 $LN16@erase@7

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	3b f8		 cmp	 edi, eax
  00144	75 65		 jne	 SHORT $LN15@erase@7

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00146	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00149	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  0014d	75 13		 jne	 SHORT $LN14@erase@7

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0014f	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00152	56		 push	 esi
  00153	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  00157	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0015c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase@7:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00162	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00166	75 74		 jne	 SHORT $LN294@erase@7

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  0016d	75 08		 jne	 SHORT $LN11@erase@7
  0016f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00172	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00175	74 61		 je	 SHORT $LN295@erase@7
$LN11@erase@7:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00177	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017a	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  0017d	75 15		 jne	 SHORT $LN9@erase@7

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00184	50		 push	 eax
  00185	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
  00189	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase@7:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00194	8a 56 20	 mov	 dl, BYTE PTR [esi+32]
  00197	88 50 20	 mov	 BYTE PTR [eax+32], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0019a	88 5e 20	 mov	 BYTE PTR [esi+32], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0019d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001a0	56		 push	 esi
  001a1	88 58 20	 mov	 BYTE PTR [eax+32], bl
  001a4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a9	eb 74		 jmp	 SHORT $LN296@erase@7
$LN15@erase@7:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001ab	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  001af	75 12		 jne	 SHORT $LN7@erase@7

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001b1	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001b4	56		 push	 esi
  001b5	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  001b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase@7:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001c3	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001c7	75 13		 jne	 SHORT $LN294@erase@7

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001cc	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001cf	75 1e		 jne	 SHORT $LN4@erase@7
  001d1	8b 10		 mov	 edx, DWORD PTR [eax]
  001d3	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001d6	75 17		 jne	 SHORT $LN4@erase@7
$LN295@erase@7:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d8	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
$LN294@erase@7:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001dc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  001df	8b fe		 mov	 edi, esi
  001e1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001e4	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e7	0f 85 4a ff ff
	ff		 jne	 $LL18@erase@7

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001ed	eb 33		 jmp	 SHORT $LN16@erase@7
$LN4@erase@7:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001f4	75 15		 jne	 SHORT $LN2@erase@7

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fc	50		 push	 eax
  001fd	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
  00201	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00206	8b 06		 mov	 eax, DWORD PTR [esi]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase@7:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0020b	8a 56 20	 mov	 dl, BYTE PTR [esi+32]
  0020e	88 50 20	 mov	 BYTE PTR [eax+32], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00211	88 5e 20	 mov	 BYTE PTR [esi+32], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00214	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  00216	56		 push	 esi
  00217	88 58 20	 mov	 BYTE PTR [eax+32], bl
  0021a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Rrotate
$LN296@erase@7:
  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN16@erase@7:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  00222	88 5f 20	 mov	 BYTE PTR [edi+32], bl
$LN19@erase@7:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

  00225	8b 55 f8	 mov	 edx, DWORD PTR __Erasednode$[ebp]
  00228	83 c2 0c	 add	 edx, 12			; 0000000cH
  0022b	52		 push	 edx
  0022c	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0022f	51		 push	 ecx
  00230	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >

; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00235	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  0023e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00241	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00244	83 c4 0c	 add	 esp, 12			; 0000000cH
  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx
  0024a	85 c0		 test	 eax, eax
  0024c	74 04		 je	 SHORT $LN1@erase@7

; 1373 : 			--this->_Mysize;

  0024e	48		 dec	 eax
  0024f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase@7:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  00252	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00255	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00258	89 08		 mov	 DWORD PTR [eax], ecx

; 1376 : 		}

  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c2 08 00	 ret	 8
$LN293@erase@7:
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv797 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 7b 21 00	 cmp	 BYTE PTR [ebx+33], 0
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	74 0a		 je	 SHORT $LN40@erase@8

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN297@erase@8:
$LN40@erase@8:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00022	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002c	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00030	74 05		 je	 SHORT $LN39@erase@8

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00032	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00035	eb 17		 jmp	 SHORT $LN291@erase@8
$LN39@erase@8:
  00037	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003a	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0003e	74 04		 je	 SHORT $LN37@erase@8

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00040	8b f9		 mov	 edi, ecx

; 1218 : 		else

  00042	eb 0a		 jmp	 SHORT $LN291@erase@8
$LN37@erase@8:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00044	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00047	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  0004a	3b c3		 cmp	 eax, ebx
  0004c	75 72		 jne	 SHORT $LN35@erase@8
$LN291@erase@8:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  0004e	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  00052	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00055	75 03		 jne	 SHORT $LN34@erase@8

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00057	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@8:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00060	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00063	75 05		 jne	 SHORT $LN33@erase@8

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00068	eb 0b		 jmp	 SHORT $LN30@erase@8
$LN33@erase@8:
  0006a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0006c	75 04		 jne	 SHORT $LN31@erase@8

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0006e	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  00070	eb 03		 jmp	 SHORT $LN30@erase@8
$LN31@erase@8:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  00072	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@8:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	39 18		 cmp	 DWORD PTR [eax], ebx
  0007a	75 1b		 jne	 SHORT $LN29@erase@8

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0007c	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  00080	74 04		 je	 SHORT $LN43@erase@8
  00082	8b c6		 mov	 eax, esi
  00084	eb 0c		 jmp	 SHORT $LN44@erase@8
$LN43@erase@8:
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Min
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 c4 04	 add	 esp, 4
$LN44@erase@8:
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase@8:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00097	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009a	89 4d f4	 mov	 DWORD PTR tv797[ebp], ecx
  0009d	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000a0	75 78		 jne	 SHORT $LN165@erase@8

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000a2	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  000a6	74 07		 je	 SHORT $LN45@erase@8
  000a8	8b c6		 mov	 eax, esi
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000ad	eb 6b		 jmp	 SHORT $LN165@erase@8
$LN45@erase@8:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Max
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR tv797[ebp]
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000be	eb 5a		 jmp	 SHORT $LN165@erase@8
$LN35@erase@8:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c7	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000ca	75 04		 jne	 SHORT $LN26@erase@8

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cc	8b f0		 mov	 esi, eax

; 1257 : 			else

  000ce	eb 1a		 jmp	 SHORT $LN25@erase@8
$LN26@erase@8:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000d0	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d7	75 03		 jne	 SHORT $LN24@erase@8

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d9	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@8:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000dc	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e4	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase@8:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f3	75 05		 jne	 SHORT $LN23@erase@8

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f8	eb 0e		 jmp	 SHORT $LN20@erase@8
$LN23@erase@8:
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	39 19		 cmp	 DWORD PTR [ecx], ebx
  000ff	75 04		 jne	 SHORT $LN21@erase@8

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00101	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00103	eb 03		 jmp	 SHORT $LN20@erase@8
$LN21@erase@8:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00105	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@8:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00108	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010e	8a 53 20	 mov	 dl, BYTE PTR [ebx+32]
  00111	8a 48 20	 mov	 cl, BYTE PTR [eax+32]
  00114	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00117	88 4b 20	 mov	 BYTE PTR [ebx+32], cl
$LN165@erase@8:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0011a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	b3 01		 mov	 bl, 1
  00122	38 58 20	 cmp	 BYTE PTR [eax+32], bl
  00125	0f 85 fa 00 00
	00		 jne	 $LN19@erase@8
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00131	0f 84 eb 00 00
	00		 je	 $LN16@erase@8
$LL18@erase@8:
  00137	38 5f 20	 cmp	 BYTE PTR [edi+32], bl
  0013a	0f 85 e2 00 00
	00		 jne	 $LN16@erase@8

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	3b f8		 cmp	 edi, eax
  00144	75 65		 jne	 SHORT $LN15@erase@8

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00146	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00149	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  0014d	75 13		 jne	 SHORT $LN14@erase@8

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0014f	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00152	56		 push	 esi
  00153	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  00157	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0015c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase@8:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00162	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00166	75 74		 jne	 SHORT $LN294@erase@8

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  0016d	75 08		 jne	 SHORT $LN11@erase@8
  0016f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00172	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00175	74 61		 je	 SHORT $LN295@erase@8
$LN11@erase@8:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00177	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017a	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  0017d	75 15		 jne	 SHORT $LN9@erase@8

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00184	50		 push	 eax
  00185	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
  00189	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase@8:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00194	8a 56 20	 mov	 dl, BYTE PTR [esi+32]
  00197	88 50 20	 mov	 BYTE PTR [eax+32], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0019a	88 5e 20	 mov	 BYTE PTR [esi+32], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0019d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001a0	56		 push	 esi
  001a1	88 58 20	 mov	 BYTE PTR [eax+32], bl
  001a4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a9	eb 74		 jmp	 SHORT $LN296@erase@8
$LN15@erase@8:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001ab	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  001af	75 12		 jne	 SHORT $LN7@erase@8

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001b1	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001b4	56		 push	 esi
  001b5	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  001b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase@8:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001c3	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001c7	75 13		 jne	 SHORT $LN294@erase@8

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001cc	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001cf	75 1e		 jne	 SHORT $LN4@erase@8
  001d1	8b 10		 mov	 edx, DWORD PTR [eax]
  001d3	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001d6	75 17		 jne	 SHORT $LN4@erase@8
$LN295@erase@8:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d8	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
$LN294@erase@8:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001dc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  001df	8b fe		 mov	 edi, esi
  001e1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001e4	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e7	0f 85 4a ff ff
	ff		 jne	 $LL18@erase@8

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001ed	eb 33		 jmp	 SHORT $LN16@erase@8
$LN4@erase@8:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001f4	75 15		 jne	 SHORT $LN2@erase@8

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fc	50		 push	 eax
  001fd	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
  00201	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00206	8b 06		 mov	 eax, DWORD PTR [esi]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase@8:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0020b	8a 56 20	 mov	 dl, BYTE PTR [esi+32]
  0020e	88 50 20	 mov	 BYTE PTR [eax+32], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00211	88 5e 20	 mov	 BYTE PTR [esi+32], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00214	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  00216	56		 push	 esi
  00217	88 58 20	 mov	 BYTE PTR [eax+32], bl
  0021a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Rrotate
$LN296@erase@8:
  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN16@erase@8:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  00222	88 5f 20	 mov	 BYTE PTR [edi+32], bl
$LN19@erase@8:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

  00225	8b 55 f8	 mov	 edx, DWORD PTR __Erasednode$[ebp]
  00228	83 c2 0c	 add	 edx, 12			; 0000000cH
  0022b	52		 push	 edx
  0022c	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0022f	51		 push	 ecx
  00230	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >

; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00235	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  0023e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00241	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00244	83 c4 0c	 add	 esp, 12			; 0000000cH
  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx
  0024a	85 c0		 test	 eax, eax
  0024c	74 04		 je	 SHORT $LN1@erase@8

; 1373 : 			--this->_Mysize;

  0024e	48		 dec	 eax
  0024f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase@8:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  00252	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00255	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00258	89 08		 mov	 DWORD PTR [eax], ecx

; 1376 : 		}

  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c2 08 00	 ret	 8
$LN293@erase@8:
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Linsert
; Function compile flags: /Ogtp
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T242007 = 16						; size = 4
$T242005 = 16						; size = 4
__Where$218549 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx

; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();

  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00012	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00016	8b f1		 mov	 esi, ecx
  00018	b1 01		 mov	 cl, 1
  0001a	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl
  0001d	75 2d		 jne	 SHORT $LN11@Linsert@2
  0001f	8b 5a 0c	 mov	 ebx, DWORD PTR [edx+12]
$LL12@Linsert@2:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  00026	8b f0		 mov	 esi, eax
  00028	74 08		 je	 SHORT $LN10@Linsert@2

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0002a	39 58 0c	 cmp	 DWORD PTR [eax+12], ebx
  0002d	0f 9d c1	 setge	 cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00030	eb 06		 jmp	 SHORT $LN145@Linsert@2
$LN10@Linsert@2:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00032	3b 58 0c	 cmp	 ebx, DWORD PTR [eax+12]
  00035	0f 9c c1	 setl	 cl
$LN145@Linsert@2:
  00038	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  0003b	84 c9		 test	 cl, cl
  0003d	74 04		 je	 SHORT $LN15@Linsert@2
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	eb 03		 jmp	 SHORT $LN16@Linsert@2
$LN15@Linsert@2:
  00043	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN16@Linsert@2:

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00046	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0004a	74 d6		 je	 SHORT $LL12@Linsert@2
$LN11@Linsert@2:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  0004c	8b de		 mov	 ebx, esi
  0004e	89 5d 10	 mov	 DWORD PTR __Where$218549[ebp], ebx

; 970  : 			if (!_Addleft)

  00051	84 c9		 test	 cl, cl
  00053	74 35		 je	 SHORT $LN99@Linsert@2

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  00058	8d 4d 10	 lea	 ecx, DWORD PTR $T242005[ebp]
  0005b	3b 30		 cmp	 esi, DWORD PTR [eax]
  0005d	75 20		 jne	 SHORT $LN4@Linsert@2
  0005f	52		 push	 edx
  00060	56		 push	 esi
  00061	6a 01		 push	 1
  00063	51		 push	 ecx
  00064	8b cf		 mov	 ecx, edi
  00066	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Insert
  0006b	8b 10		 mov	 edx, DWORD PTR [eax]
  0006d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	89 10		 mov	 DWORD PTR [eax], edx
  00074	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00078	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert@2:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  0007f	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >,std::_Iterator_base0>::operator--
  00084	8b 5d 10	 mov	 ebx, DWORD PTR __Where$218549[ebp]
  00087	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
$LN99@Linsert@2:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  0008a	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0008d	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  00090	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00093	7d 25		 jge	 SHORT $LN2@Linsert@2

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  00095	52		 push	 edx
  00096	8b 55 fc	 mov	 edx, DWORD PTR __Addleft$[ebp]
  00099	56		 push	 esi
  0009a	52		 push	 edx
  0009b	8d 45 10	 lea	 eax, DWORD PTR $T242007[ebp]
  0009e	50		 push	 eax
  0009f	8b cf		 mov	 ecx, edi
  000a1	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Insert
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	89 08		 mov	 DWORD PTR [eax], ecx
  000af	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000b3	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Linsert@2:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));

  000ba	50		 push	 eax
  000bb	83 c7 0d	 add	 edi, 13			; 0000000dH
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >

; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  000c4	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000cd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	89 18		 mov	 DWORD PTR [eax], ebx
  000d7	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000db	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Linsert
; Function compile flags: /Ogtp
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T242326 = 16						; size = 4
$T242324 = 16						; size = 4
__Where$218599 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx

; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();

  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00012	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00016	8b f1		 mov	 esi, ecx
  00018	b1 01		 mov	 cl, 1
  0001a	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl
  0001d	75 2d		 jne	 SHORT $LN11@Linsert@3
  0001f	8b 5a 0c	 mov	 ebx, DWORD PTR [edx+12]
$LL12@Linsert@3:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  00026	8b f0		 mov	 esi, eax
  00028	74 08		 je	 SHORT $LN10@Linsert@3

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0002a	39 58 0c	 cmp	 DWORD PTR [eax+12], ebx
  0002d	0f 9d c1	 setge	 cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00030	eb 06		 jmp	 SHORT $LN145@Linsert@3
$LN10@Linsert@3:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00032	3b 58 0c	 cmp	 ebx, DWORD PTR [eax+12]
  00035	0f 9c c1	 setl	 cl
$LN145@Linsert@3:
  00038	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  0003b	84 c9		 test	 cl, cl
  0003d	74 04		 je	 SHORT $LN15@Linsert@3
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	eb 03		 jmp	 SHORT $LN16@Linsert@3
$LN15@Linsert@3:
  00043	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN16@Linsert@3:

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00046	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0004a	74 d6		 je	 SHORT $LL12@Linsert@3
$LN11@Linsert@3:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  0004c	8b de		 mov	 ebx, esi
  0004e	89 5d 10	 mov	 DWORD PTR __Where$218599[ebp], ebx

; 970  : 			if (!_Addleft)

  00051	84 c9		 test	 cl, cl
  00053	74 35		 je	 SHORT $LN99@Linsert@3

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  00058	8d 4d 10	 lea	 ecx, DWORD PTR $T242324[ebp]
  0005b	3b 30		 cmp	 esi, DWORD PTR [eax]
  0005d	75 20		 jne	 SHORT $LN4@Linsert@3
  0005f	52		 push	 edx
  00060	56		 push	 esi
  00061	6a 01		 push	 1
  00063	51		 push	 ecx
  00064	8b cf		 mov	 ecx, edi
  00066	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Insert
  0006b	8b 10		 mov	 edx, DWORD PTR [eax]
  0006d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	89 10		 mov	 DWORD PTR [eax], edx
  00074	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00078	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert@3:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  0007f	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >,std::_Iterator_base0>::operator--
  00084	8b 5d 10	 mov	 ebx, DWORD PTR __Where$218599[ebp]
  00087	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
$LN99@Linsert@3:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  0008a	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0008d	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  00090	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00093	7d 25		 jge	 SHORT $LN2@Linsert@3

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  00095	52		 push	 edx
  00096	8b 55 fc	 mov	 edx, DWORD PTR __Addleft$[ebp]
  00099	56		 push	 esi
  0009a	52		 push	 edx
  0009b	8d 45 10	 lea	 eax, DWORD PTR $T242326[ebp]
  0009e	50		 push	 eax
  0009f	8b cf		 mov	 ecx, edi
  000a1	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Insert
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	89 08		 mov	 DWORD PTR [eax], ecx
  000af	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000b3	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Linsert@3:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));

  000ba	50		 push	 eax
  000bb	83 c7 0d	 add	 edi, 13			; 0000000dH
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >

; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  000c4	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000cd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	89 18		 mov	 DWORD PTR [eax], ebx
  000d7	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000db	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T243247 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z PROC ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00024	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	3b c2		 cmp	 eax, edx
  0002b	74 39		 je	 SHORT $LN38@Cons_val@13
  0002d	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  00030	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00033	8b 36		 mov	 esi, DWORD PTR [esi]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	83 c0 04	 add	 eax, 4
  0003a	89 10		 mov	 DWORD PTR [eax], edx
  0003c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00042	3b c1		 cmp	 eax, ecx
  00044	74 20		 je	 SHORT $LN38@Cons_val@13
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0004b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0004e	8b 31		 mov	 esi, DWORD PTR [ecx]
  00050	89 30		 mov	 DWORD PTR [eax], esi
  00052	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00055	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00058	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0005b	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0005e	89 11		 mov	 DWORD PTR [ecx], edx
  00060	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00063	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN38@Cons_val@13:

; 281  : 	}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5e		 pop	 esi
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z$0:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T243247[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T244453 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z PROC ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00024	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	3b c2		 cmp	 eax, edx
  0002b	74 39		 je	 SHORT $LN38@Cons_val@14
  0002d	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  00030	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00033	8b 36		 mov	 esi, DWORD PTR [esi]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	83 c0 04	 add	 eax, 4
  0003a	89 10		 mov	 DWORD PTR [eax], edx
  0003c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00042	3b c1		 cmp	 eax, ecx
  00044	74 20		 je	 SHORT $LN38@Cons_val@14
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0004b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0004e	8b 31		 mov	 esi, DWORD PTR [ecx]
  00050	89 30		 mov	 DWORD PTR [eax], esi
  00052	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00055	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00058	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0005b	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0005e	89 11		 mov	 DWORD PTR [ecx], edx
  00060	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00063	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN38@Cons_val@14:

; 281  : 	}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5e		 pop	 esi
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z$0:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T244453[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::clear
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Erase

; 1416 : 		_Root() = this->_Myhead;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00022	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00029	5e		 pop	 esi

; 1420 : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Erase

; 1416 : 		_Root() = this->_Myhead;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00022	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00029	5e		 pop	 esi

; 1420 : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::clear
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T244548 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $LN115@erase@9
  00014	3b d0		 cmp	 edx, eax
  00016	75 34		 jne	 SHORT $LN115@erase@9

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Erase
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 00		 mov	 DWORD PTR [eax], eax
  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1383 : 			return (begin());

  00034	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	89 10		 mov	 DWORD PTR [eax], edx
  00045	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN115@erase@9:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  0004c	3b ca		 cmp	 ecx, edx
  0004e	74 62		 je	 SHORT $LN1@erase@9
$LL2@erase@9:

; 1388 : 				erase(_First++);

  00050	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00054	8b d1		 mov	 edx, ecx
  00056	75 46		 jne	 SHORT $LN77@erase@9
  00058	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0005b	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0005f	75 1e		 jne	 SHORT $LN117@erase@9
  00061	8b c8		 mov	 ecx, eax
  00063	8b 01		 mov	 eax, DWORD PTR [ecx]
  00065	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00069	75 0f		 jne	 SHORT $LN91@erase@9
  0006b	eb 03 8d 49 00	 npad	 5
$LL92@erase@9:
  00070	8b c8		 mov	 ecx, eax
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00078	74 f6		 je	 SHORT $LL92@erase@9
$LN91@erase@9:
  0007a	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0007d	eb 1f		 jmp	 SHORT $LN77@erase@9
$LN117@erase@9:
  0007f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00082	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00086	75 13		 jne	 SHORT $LN75@erase@9
$LL76@erase@9:
  00088	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008b	75 0e		 jne	 SHORT $LN75@erase@9
  0008d	8b c8		 mov	 ecx, eax
  0008f	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00092	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00095	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00099	74 ed		 je	 SHORT $LL76@erase@9
$LN75@erase@9:
  0009b	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN77@erase@9:
  0009e	52		 push	 edx
  0009f	8d 45 fc	 lea	 eax, DWORD PTR $T244548[ebp]
  000a2	50		 push	 eax
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  000ad	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  000b0	75 9e		 jne	 SHORT $LL2@erase@9
$LN1@erase@9:

; 1389 : 			return (iterator(_First._Ptr, this));

  000b2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b5	89 08		 mov	 DWORD PTR [eax], ecx
  000b7	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T244936 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $LN115@erase@10
  00014	3b d0		 cmp	 edx, eax
  00016	75 34		 jne	 SHORT $LN115@erase@10

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Erase
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 00		 mov	 DWORD PTR [eax], eax
  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1383 : 			return (begin());

  00034	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	89 10		 mov	 DWORD PTR [eax], edx
  00045	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN115@erase@10:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  0004c	3b ca		 cmp	 ecx, edx
  0004e	74 62		 je	 SHORT $LN1@erase@10
$LL2@erase@10:

; 1388 : 				erase(_First++);

  00050	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00054	8b d1		 mov	 edx, ecx
  00056	75 46		 jne	 SHORT $LN77@erase@10
  00058	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0005b	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0005f	75 1e		 jne	 SHORT $LN117@erase@10
  00061	8b c8		 mov	 ecx, eax
  00063	8b 01		 mov	 eax, DWORD PTR [ecx]
  00065	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00069	75 0f		 jne	 SHORT $LN91@erase@10
  0006b	eb 03 8d 49 00	 npad	 5
$LL92@erase@10:
  00070	8b c8		 mov	 ecx, eax
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00078	74 f6		 je	 SHORT $LL92@erase@10
$LN91@erase@10:
  0007a	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0007d	eb 1f		 jmp	 SHORT $LN77@erase@10
$LN117@erase@10:
  0007f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00082	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00086	75 13		 jne	 SHORT $LN75@erase@10
$LL76@erase@10:
  00088	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008b	75 0e		 jne	 SHORT $LN75@erase@10
  0008d	8b c8		 mov	 ecx, eax
  0008f	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00092	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00095	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00099	74 ed		 je	 SHORT $LL76@erase@10
$LN75@erase@10:
  0009b	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN77@erase@10:
  0009e	52		 push	 edx
  0009f	8d 45 fc	 lea	 eax, DWORD PTR $T244936[ebp]
  000a2	50		 push	 eax
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  000ad	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  000b0	75 9e		 jne	 SHORT $LL2@erase@10
$LN1@erase@10:

; 1389 : 			return (iterator(_First._Ptr, this));

  000b2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b5	89 08		 mov	 DWORD PTR [eax], ecx
  000b7	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase
_TEXT	ENDS
PUBLIC	??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z$0
__unwindtable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z$2
__ehfuncinfo$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T245385 = -32						; size = 12
__Ptr$245379 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T245332 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  0002d	6a 24		 push	 36			; 00000024H
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	8b f0		 mov	 esi, eax
  00036	33 c0		 xor	 eax, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	89 75 ec	 mov	 DWORD PTR __Ptr$245379[ebp], esi
  0003e	3b f0		 cmp	 esi, eax
  00040	74 57		 je	 SHORT $LN12@Buynode@5
  00042	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00045	89 0e		 mov	 DWORD PTR [esi], ecx
  00047	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0004a	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0004d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  00050	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00053	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00057	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  0005a	52		 push	 edx
  0005b	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005e	50		 push	 eax
  0005f	83 c7 0d	 add	 edi, 13			; 0000000dH
  00062	57		 push	 edi
  00063	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00066	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > >,std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  0006e	8b c6		 mov	 eax, esi

; 599  : 		}

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
__catch$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z$0:

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);

  00084	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$245379[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008d	83 c4 04	 add	 esp, 4

; 595  : 		_RERAISE;

  00090	33 c0		 xor	 eax, eax
  00092	50		 push	 eax
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@Buynode@5:

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@5:
  00099	8d 55 08	 lea	 edx, DWORD PTR $T245332[ebp]
  0009c	52		 push	 edx
  0009d	8d 4d e0	 lea	 ecx, DWORD PTR $T245385[ebp]
  000a0	89 45 08	 mov	 DWORD PTR $T245332[ebp], eax
  000a3	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  000a8	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  000ad	8d 45 e0	 lea	 eax, DWORD PTR $T245385[ebp]
  000b0	50		 push	 eax
  000b1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T245385[ebp], OFFSET ??_7bad_alloc@std@@6B@
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Buynode@5:
$LN44@Buynode@5:
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
PUBLIC	??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z$0
__unwindtable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z$2
__ehfuncinfo$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T245491 = -32						; size = 12
__Ptr$245485 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T245438 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  0002d	6a 24		 push	 36			; 00000024H
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	8b f0		 mov	 esi, eax
  00036	33 c0		 xor	 eax, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	89 75 ec	 mov	 DWORD PTR __Ptr$245485[ebp], esi
  0003e	3b f0		 cmp	 esi, eax
  00040	74 57		 je	 SHORT $LN12@Buynode@6
  00042	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00045	89 0e		 mov	 DWORD PTR [esi], ecx
  00047	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0004a	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0004d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  00050	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00053	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00057	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  0005a	52		 push	 edx
  0005b	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005e	50		 push	 eax
  0005f	83 c7 0d	 add	 edi, 13			; 0000000dH
  00062	57		 push	 edi
  00063	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00066	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@std@@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@0@PAU?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > >,std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  0006e	8b c6		 mov	 eax, esi

; 599  : 		}

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
__catch$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z$0:

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);

  00084	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$245485[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008d	83 c4 04	 add	 esp, 4

; 595  : 		_RERAISE;

  00090	33 c0		 xor	 eax, eax
  00092	50		 push	 eax
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@Buynode@6:

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@6:
  00099	8d 55 08	 lea	 edx, DWORD PTR $T245438[ebp]
  0009c	52		 push	 edx
  0009d	8d 4d e0	 lea	 ecx, DWORD PTR $T245491[ebp]
  000a0	89 45 08	 mov	 DWORD PTR $T245438[ebp], eax
  000a3	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  000a8	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  000ad	8d 45 e0	 lea	 eax, DWORD PTR $T245491[ebp]
  000b0	50		 push	 eax
  000b1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T245491[ebp], OFFSET ??_7bad_alloc@std@@6B@
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Buynode@6:
$LN44@Buynode@6:
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T245537 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T245537[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T245629 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T245629[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??$insert@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::insert<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$insert@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::insert<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::insert<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
_TEXT	ENDS
PUBLIC	??$insert@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::insert<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
; Function compile flags: /Ogtp
;	COMDAT ??$insert@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::insert<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::insert<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CM@NBAEFDEO@?$FLCastleDeep?5Event?$FN?5Info?5file?5Loa@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	_lpszFileName$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CCastleDeepEvent@@QAEHPAD@Z		; CCastleDeepEvent::Load
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NBAEFDEO@?$FLCastleDeep?5Event?$FN?5Info?5file?5Loa@
CONST	SEGMENT
??_C@_0CM@NBAEFDEO@?$FLCastleDeep?5Event?$FN?5Info?5file?5Loa@ DB '[Castl'
	DB	'eDeep Event] Info file Load Fail [%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CCastleDeepEvent@@QAEHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$3
__ehfuncinfo$?Load@CCastleDeepEvent@@QAEHPAD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Load@CCastleDeepEvent@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
xdata$x	ENDS
;	COMDAT ?Load@CCastleDeepEvent@@QAEHPAD@Z
_TEXT	SEGMENT
$T245729 = -136						; size = 8
$T245731 = -128						; size = 8
_stSpawnTime$214762 = -120				; size = 8
_it$214819 = -112					; size = 4
_type$ = -108						; size = 4
$T248122 = -104						; size = 4
_lpszFileName$GSCopy$ = -100				; size = 4
_vtTempMonsterInfo$213891 = -96				; size = 16
_vtTempSpawnTime$213896 = -80				; size = 16
_pRET$213543 = -64					; size = 8
_iAssultType$213897 = -56				; size = 4
__Where$248193 = -52					; size = 4
_iAssultType$214792 = -52				; size = 4
_iAssultRate$213898 = -52				; size = 4
_this$GSCopy$ = -48					; size = 4
_stMonsterInfo$214791 = -44				; size = 28
$T245730 = -36						; size = 20
$T245728 = -36						; size = 20
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpszFileName$ = 8					; size = 4
?Load@CCastleDeepEvent@@QAEHPAD@Z PROC			; CCastleDeepEvent::Load, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CCastleDeepEvent@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]

; 114  : using namespace std;
; 115  : 
; 116  : 	if (lpszFileName == NULL)

  0002e	33 db		 xor	 ebx, ebx
  00030	8b f9		 mov	 edi, ecx

; 139  : 
; 140  : 	SMDToken Token;
; 141  : 	int type = -1;
; 142  : 
; 143  : 	while( true )
; 144  : 	{
; 145  : 		Token = GetToken();

  00032	89 7d d0	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00035	89 75 9c	 mov	 DWORD PTR _lpszFileName$GSCopy$[ebp], esi
  00038	3b f3		 cmp	 esi, ebx
  0003a	74 25		 je	 SHORT $LN751@Load

; 117  : 	{
; 118  : 		return false;
; 119  : 	}
; 120  : 
; 121  : 	SMDFile = fopen(lpszFileName,"r");

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _fopen
  00047	83 c4 08	 add	 esp, 8
  0004a	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 122  : 
; 123  : 	if (SMDFile == NULL)

  0004f	3b c3		 cmp	 eax, ebx
  00051	75 2e		 jne	 SHORT $LN19@Load

; 124  : 	{
; 125  : 		MsgBox("[CastleDeep Event] Info file Load Fail [%s]",lpszFileName);

  00053	56		 push	 esi
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NBAEFDEO@?$FLCastleDeep?5Event?$FN?5Info?5file?5Loa@
  00059	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0005e	83 c4 08	 add	 esp, 8
$LN751@Load:

; 126  : 		return false;

  00061	33 c0		 xor	 eax, eax
$LN21@Load:

; 270  : }

  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	33 cd		 xor	 ecx, ebp
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
$LN19@Load:

; 127  : 	}
; 128  : 
; 129  : 	EnterCriticalSection(&this->m_critEventData);

  00081	8d 87 90 00 00
	00		 lea	 eax, DWORD PTR [edi+144]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 130  : 	this->m_vtAssultType.clear();

  0008e	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00091	8b 77 60	 mov	 esi, DWORD PTR [edi+96]
  00094	3b f0		 cmp	 esi, eax
  00096	74 23		 je	 SHORT $LN45@Load
  00098	8b c8		 mov	 ecx, eax
  0009a	2b c8		 sub	 ecx, eax
  0009c	c1 f9 02	 sar	 ecx, 2
  0009f	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  000a6	57		 push	 edi
  000a7	50		 push	 eax
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _memmove
  000ae	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	03 fe		 add	 edi, esi
  000b6	89 78 64	 mov	 DWORD PTR [eax+100], edi
  000b9	8b f8		 mov	 edi, eax
$LN45@Load:

; 131  : 	this->m_vtAssultTypeRate.clear();

  000bb	8b 4f 74	 mov	 ecx, DWORD PTR [edi+116]
  000be	8b 77 70	 mov	 esi, DWORD PTR [edi+112]
  000c1	3b f1		 cmp	 esi, ecx
  000c3	74 23		 je	 SHORT $LN94@Load
  000c5	8b c1		 mov	 eax, ecx
  000c7	2b c1		 sub	 eax, ecx
  000c9	c1 f8 02	 sar	 eax, 2
  000cc	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  000d3	57		 push	 edi
  000d4	51		 push	 ecx
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 _memmove
  000db	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e1	03 fe		 add	 edi, esi
  000e3	89 78 74	 mov	 DWORD PTR [eax+116], edi
  000e6	8b f8		 mov	 edi, eax
$LN94@Load:

; 132  : 	this->m_mapSpawnTime.clear();

  000e8	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	51		 push	 ecx
  000ef	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  000f2	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Erase
  000f7	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  000fa	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000fd	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00100	89 00		 mov	 DWORD PTR [eax], eax
  00102	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00105	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00108	89 5f 48	 mov	 DWORD PTR [edi+72], ebx

; 133  : 	this->m_mapMonsterInfo.clear();

  0010b	8b 57 34	 mov	 edx, DWORD PTR [edi+52]
  0010e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00111	50		 push	 eax
  00112	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00115	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Erase
  0011a	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  0011d	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00120	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00123	89 00		 mov	 DWORD PTR [eax], eax
  00125	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00128	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0012b	89 5f 38	 mov	 DWORD PTR [edi+56], ebx

; 134  : 	this->m_vtEventTime.clear();

  0012e	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00131	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  00134	3b c8		 cmp	 ecx, eax
  00136	74 1f		 je	 SHORT $LN179@Load
  00138	8b d1		 mov	 edx, ecx
  0013a	8b c8		 mov	 ecx, eax
  0013c	3b c0		 cmp	 eax, eax
  0013e	74 14		 je	 SHORT $LN208@Load
$LL210@Load:
  00140	8b 31		 mov	 esi, DWORD PTR [ecx]
  00142	89 32		 mov	 DWORD PTR [edx], esi
  00144	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00147	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0014a	83 c1 08	 add	 ecx, 8
  0014d	83 c2 08	 add	 edx, 8
  00150	3b c8		 cmp	 ecx, eax
  00152	75 ec		 jne	 SHORT $LL210@Load
$LN208@Load:
  00154	89 57 54	 mov	 DWORD PTR [edi+84], edx
$LN179@Load:

; 135  : 	this->m_mapRunCheck.clear();

  00157	8d 8f 80 00 00
	00		 lea	 ecx, DWORD PTR [edi+128]
  0015d	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::clear

; 136  : 	LeaveCriticalSection(&this->m_critEventData);

  00162	8d 87 90 00 00
	00		 lea	 eax, DWORD PTR [edi+144]
  00168	50		 push	 eax
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 137  : 
; 138  : 	this->m_bHasData = FALSE;

  0016f	89 5f 08	 mov	 DWORD PTR [edi+8], ebx

; 139  : 
; 140  : 	SMDToken Token;
; 141  : 	int type = -1;
; 142  : 
; 143  : 	while( true )
; 144  : 	{
; 145  : 		Token = GetToken();

  00172	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 146  : 
; 147  : 		if (Token == END)

  00177	83 f8 02	 cmp	 eax, 2
  0017a	0f 84 74 06 00
	00		 je	 $LN721@Load
$LL18@Load:

; 148  : 		{
; 149  : 			break;
; 150  : 		}
; 151  : 
; 152  : 		type = (int)TokenNumber;

  00180	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00186	e8 00 00 00 00	 call	 __ftol2_sse
  0018b	89 45 94	 mov	 DWORD PTR _type$[ebp], eax
  0018e	8b ff		 npad	 2
$LL15@Load:

; 153  : 
; 154  : 		while( true )
; 155  : 		{
; 156  : 			if (type == 0)

  00190	8b 45 94	 mov	 eax, DWORD PTR _type$[ebp]
  00193	3b c3		 cmp	 eax, ebx
  00195	0f 85 52 01 00
	00		 jne	 $LN13@Load

; 157  : 			{
; 158  : 				CASTLEDEEP_EVENTTIME pRET;
; 159  : 
; 160  : 				Token = GetToken();

  0019b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 161  : 				if (!strcmp("end",TokenString))

  001a0	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001a5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001aa	8d 9b 00 00 00
	00		 npad	 6
$LL726@Load:
  001b0	8a 10		 mov	 dl, BYTE PTR [eax]
  001b2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001b4	75 1a		 jne	 SHORT $LN727@Load
  001b6	3a d3		 cmp	 dl, bl
  001b8	74 12		 je	 SHORT $LN728@Load
  001ba	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001bd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001c0	75 0e		 jne	 SHORT $LN727@Load
  001c2	83 c0 02	 add	 eax, 2
  001c5	83 c1 02	 add	 ecx, 2
  001c8	3a d3		 cmp	 dl, bl
  001ca	75 e4		 jne	 SHORT $LL726@Load
$LN728@Load:
  001cc	33 c0		 xor	 eax, eax
  001ce	eb 05		 jmp	 SHORT $LN729@Load
$LN727@Load:
  001d0	1b c0		 sbb	 eax, eax
  001d2	83 d8 ff	 sbb	 eax, -1
$LN729@Load:
  001d5	3b c3		 cmp	 eax, ebx
  001d7	0f 84 09 06 00
	00		 je	 $LN719@Load

; 162  : 					break;
; 163  : 				
; 164  : 				pRET.m_iHour = (int)TokenNumber;

  001dd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e3	e8 00 00 00 00	 call	 __ftol2_sse
  001e8	89 45 c0	 mov	 DWORD PTR _pRET$213543[ebp], eax

; 165  : 				Token = GetToken();

  001eb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 166  : 				pRET.m_iMinute = (int)TokenNumber;

  001f0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f6	e8 00 00 00 00	 call	 __ftol2_sse

; 167  : 				this->m_vtEventTime.push_back(pRET);

  001fb	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  001fe	83 c7 50	 add	 edi, 80			; 00000050H
  00201	89 45 c4	 mov	 DWORD PTR _pRET$213543[ebp+4], eax
  00204	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00207	8d 4d c0	 lea	 ecx, DWORD PTR _pRET$213543[ebp]
  0020a	3b c8		 cmp	 ecx, eax
  0020c	73 79		 jae	 SHORT $LN218@Load
  0020e	8b 17		 mov	 edx, DWORD PTR [edi]
  00210	3b d1		 cmp	 edx, ecx
  00212	77 73		 ja	 SHORT $LN218@Load
  00214	8b f1		 mov	 esi, ecx
  00216	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00219	2b f2		 sub	 esi, edx
  0021b	c1 fe 03	 sar	 esi, 3
  0021e	3b c1		 cmp	 eax, ecx
  00220	75 43		 jne	 SHORT $LN229@Load
  00222	2b c2		 sub	 eax, edx
  00224	c1 f8 03	 sar	 eax, 3
  00227	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  0022c	0f 87 ed 05 00
	00		 ja	 $LN712@Load
  00232	2b ca		 sub	 ecx, edx
  00234	40		 inc	 eax
  00235	c1 f9 03	 sar	 ecx, 3
  00238	3b c1		 cmp	 eax, ecx
  0023a	76 29		 jbe	 SHORT $LN229@Load
  0023c	8b d1		 mov	 edx, ecx
  0023e	d1 ea		 shr	 edx, 1
  00240	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00245	2b fa		 sub	 edi, edx
  00247	3b f9		 cmp	 edi, ecx
  00249	73 04		 jae	 SHORT $LN251@Load
  0024b	33 c9		 xor	 ecx, ecx
  0024d	eb 02		 jmp	 SHORT $LN252@Load
$LN251@Load:
  0024f	03 ca		 add	 ecx, edx
$LN252@Load:
  00251	3b c8		 cmp	 ecx, eax
  00253	73 02		 jae	 SHORT $LN248@Load
  00255	8b c8		 mov	 ecx, eax
$LN248@Load:
  00257	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  0025a	83 c7 50	 add	 edi, 80			; 00000050H
  0025d	51		 push	 ecx
  0025e	8b cf		 mov	 ecx, edi
  00260	e8 00 00 00 00	 call	 ?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::reserve
$LN229@Load:
  00265	8b 17		 mov	 edx, DWORD PTR [edi]
  00267	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0026a	8d 04 f2	 lea	 eax, DWORD PTR [edx+esi*8]
  0026d	50		 push	 eax
  0026e	51		 push	 ecx
  0026f	8d 57 0c	 lea	 edx, DWORD PTR [edi+12]
  00272	52		 push	 edx
  00273	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@AAU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@AAU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME &>
  00278	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027b	83 47 04 08	 add	 DWORD PTR [edi+4], 8
  0027f	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00282	e9 09 ff ff ff	 jmp	 $LL15@Load
$LN218@Load:
  00287	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0028a	3b c1		 cmp	 eax, ecx
  0028c	75 3f		 jne	 SHORT $LN264@Load
  0028e	8b 17		 mov	 edx, DWORD PTR [edi]
  00290	2b c2		 sub	 eax, edx
  00292	c1 f8 03	 sar	 eax, 3
  00295	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  0029a	0f 87 7f 05 00
	00		 ja	 $LN712@Load
  002a0	2b ca		 sub	 ecx, edx
  002a2	40		 inc	 eax
  002a3	c1 f9 03	 sar	 ecx, 3
  002a6	3b c1		 cmp	 eax, ecx
  002a8	76 23		 jbe	 SHORT $LN264@Load
  002aa	8b d1		 mov	 edx, ecx
  002ac	d1 ea		 shr	 edx, 1
  002ae	be ff ff ff 1f	 mov	 esi, 536870911		; 1fffffffH
  002b3	2b f2		 sub	 esi, edx
  002b5	3b f1		 cmp	 esi, ecx
  002b7	73 04		 jae	 SHORT $LN286@Load
  002b9	33 c9		 xor	 ecx, ecx
  002bb	eb 02		 jmp	 SHORT $LN287@Load
$LN286@Load:
  002bd	03 ca		 add	 ecx, edx
$LN287@Load:
  002bf	3b c8		 cmp	 ecx, eax
  002c1	73 02		 jae	 SHORT $LN283@Load
  002c3	8b c8		 mov	 ecx, eax
$LN283@Load:
  002c5	51		 push	 ecx
  002c6	8b cf		 mov	 ecx, edi
  002c8	e8 00 00 00 00	 call	 ?reserve@?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAEXI@Z ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::reserve
$LN264@Load:
  002cd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  002d0	8d 45 c0	 lea	 eax, DWORD PTR _pRET$213543[ebp]
  002d3	50		 push	 eax
  002d4	51		 push	 ecx
  002d5	8d 57 0c	 lea	 edx, DWORD PTR [edi+12]
  002d8	52		 push	 edx
  002d9	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@UCASTLEDEEP_EVENTTIME@@ABU3@@std@@YAXAAV?$allocator@UCASTLEDEEP_EVENTTIME@@@0@PAUCASTLEDEEP_EVENTTIME@@ABU2@@Z ; std::_Cons_val<std::allocator<CASTLEDEEP_EVENTTIME>,CASTLEDEEP_EVENTTIME,CASTLEDEEP_EVENTTIME const &>
  002de	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e1	83 47 04 08	 add	 DWORD PTR [edi+4], 8
  002e5	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  002e8	e9 a3 fe ff ff	 jmp	 $LL15@Load
$LN13@Load:

; 168  : 			}
; 169  : 			else if (type == 1)

  002ed	83 f8 01	 cmp	 eax, 1
  002f0	0f 85 d4 02 00
	00		 jne	 $LN10@Load

; 170  : 			{
; 171  : 				std::vector<CASTLEDEEP_MONSTERINFO> vtTempMonsterInfo; //HermeX Fix

  002f6	89 5d a0	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp], ebx
  002f9	89 5d a4	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp+4], ebx
  002fc	89 5d a8	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp+8], ebx
  002ff	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 172  : 				std::vector<CASTLEDEEP_SPAWNTIME> vtTempSpawnTime; //HermeX Fix

  00302	89 5d b0	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp], ebx
  00305	89 5d b4	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp+4], ebx
  00308	89 5d b8	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp+8], ebx
  0030b	88 45 fc	 mov	 BYTE PTR __$EHRec$[ebp+8], al

; 173  : 
; 174  : 				int iAssultType;
; 175  : 				int iAssultRate;
; 176  : 
; 177  : 				Token = GetToken();

  0030e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 178  : 				if (!strcmp("end",TokenString))

  00313	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00318	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0031d	8d 49 00	 npad	 3
$LL730@Load:
  00320	8a 10		 mov	 dl, BYTE PTR [eax]
  00322	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00324	75 1a		 jne	 SHORT $LN731@Load
  00326	3a d3		 cmp	 dl, bl
  00328	74 12		 je	 SHORT $LN732@Load
  0032a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0032d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00330	75 0e		 jne	 SHORT $LN731@Load
  00332	83 c0 02	 add	 eax, 2
  00335	83 c1 02	 add	 ecx, 2
  00338	3a d3		 cmp	 dl, bl
  0033a	75 e4		 jne	 SHORT $LL730@Load
$LN732@Load:
  0033c	33 c0		 xor	 eax, eax
  0033e	eb 05		 jmp	 SHORT $LN733@Load
$LN731@Load:
  00340	1b c0		 sbb	 eax, eax
  00342	83 d8 ff	 sbb	 eax, -1
$LN733@Load:
  00345	3b c3		 cmp	 eax, ebx
  00347	0f 84 80 04 00
	00		 je	 $LN322@Load

; 180  : 
; 181  : 				iAssultType = (int)TokenNumber;

  0034d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00353	e8 00 00 00 00	 call	 __ftol2_sse
  00358	8b f0		 mov	 esi, eax
  0035a	89 75 c8	 mov	 DWORD PTR _iAssultType$213897[ebp], esi

; 182  : 
; 183  : 				Token = GetToken();

  0035d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 184  : 				iAssultRate = (int)TokenNumber;

  00362	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00368	e8 00 00 00 00	 call	 __ftol2_sse
  0036d	89 45 cc	 mov	 DWORD PTR _iAssultRate$213898[ebp], eax

; 185  : 
; 186  : 				this->m_mapMonsterInfo.insert(std::pair<int,vector<CASTLEDEEP_MONSTERINFO> >(iAssultType,vtTempMonsterInfo)); //HermeX Fix

  00370	8d 45 a0	 lea	 eax, DWORD PTR _vtTempMonsterInfo$213891[ebp]
  00373	50		 push	 eax
  00374	8d 4d e0	 lea	 ecx, DWORD PTR $T245728[ebp+4]
  00377	89 75 dc	 mov	 DWORD PTR $T245728[ebp], esi
  0037a	e8 00 00 00 00	 call	 ??0?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
  0037f	53		 push	 ebx
  00380	8d 4d dc	 lea	 ecx, DWORD PTR $T245728[ebp]
  00383	51		 push	 ecx
  00384	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00387	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0038b	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >
  00390	50		 push	 eax
  00391	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR $T245729[ebp]
  00397	52		 push	 edx
  00398	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0039b	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::_Linsert
  003a0	8b 45 e0	 mov	 eax, DWORD PTR $T245728[ebp+4]
  003a3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  003a7	3b c3		 cmp	 eax, ebx
  003a9	74 09		 je	 SHORT $LN366@Load
  003ab	50		 push	 eax
  003ac	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003b1	83 c4 04	 add	 esp, 4
$LN366@Load:

; 187  : 				this->m_mapSpawnTime.insert(std::pair<int,vector<CASTLEDEEP_SPAWNTIME> >(iAssultType,vtTempSpawnTime)); //HermeX Fix

  003b4	8d 45 b0	 lea	 eax, DWORD PTR _vtTempSpawnTime$213896[ebp]
  003b7	50		 push	 eax
  003b8	8d 4d e0	 lea	 ecx, DWORD PTR $T245730[ebp+4]
  003bb	89 75 dc	 mov	 DWORD PTR $T245730[ebp], esi
  003be	e8 00 00 00 00	 call	 ??0?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
  003c3	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  003c6	53		 push	 ebx
  003c7	8d 4d dc	 lea	 ecx, DWORD PTR $T245730[ebp]
  003ca	51		 push	 ecx
  003cb	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  003ce	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  003d2	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Buynode<std::pair<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >
  003d7	50		 push	 eax
  003d8	8d 55 80	 lea	 edx, DWORD PTR $T245731[ebp]
  003db	52		 push	 edx
  003dc	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  003df	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::_Linsert
  003e4	8b 45 e0	 mov	 eax, DWORD PTR $T245730[ebp+4]
  003e7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  003eb	3b c3		 cmp	 eax, ebx
  003ed	74 09		 je	 SHORT $LN399@Load
  003ef	50		 push	 eax
  003f0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003f5	83 c4 04	 add	 esp, 4
$LN399@Load:

; 188  : 
; 189  : 				this->m_vtAssultType.push_back(iAssultType);

  003f8	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  003fb	83 c7 60	 add	 edi, 96			; 00000060H
  003fe	8d 4d c8	 lea	 ecx, DWORD PTR _iAssultType$213897[ebp]
  00401	3b c8		 cmp	 ecx, eax
  00403	73 6c		 jae	 SHORT $LN406@Load
  00405	8b 17		 mov	 edx, DWORD PTR [edi]
  00407	3b d1		 cmp	 edx, ecx
  00409	77 66		 ja	 SHORT $LN406@Load
  0040b	8b f1		 mov	 esi, ecx
  0040d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00410	2b f2		 sub	 esi, edx
  00412	c1 fe 02	 sar	 esi, 2
  00415	3b c1		 cmp	 eax, ecx
  00417	75 43		 jne	 SHORT $LN417@Load
  00419	2b c2		 sub	 eax, edx
  0041b	c1 f8 02	 sar	 eax, 2
  0041e	3d fe ff ff 3f	 cmp	 eax, 1073741822		; 3ffffffeH
  00423	0f 87 f6 03 00
	00		 ja	 $LN712@Load
  00429	2b ca		 sub	 ecx, edx
  0042b	40		 inc	 eax
  0042c	c1 f9 02	 sar	 ecx, 2
  0042f	3b c1		 cmp	 eax, ecx
  00431	76 29		 jbe	 SHORT $LN417@Load
  00433	8b d1		 mov	 edx, ecx
  00435	d1 ea		 shr	 edx, 1
  00437	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  0043c	2b fa		 sub	 edi, edx
  0043e	3b f9		 cmp	 edi, ecx
  00440	73 04		 jae	 SHORT $LN439@Load
  00442	33 c9		 xor	 ecx, ecx
  00444	eb 02		 jmp	 SHORT $LN440@Load
$LN439@Load:
  00446	03 ca		 add	 ecx, edx
$LN440@Load:
  00448	3b c8		 cmp	 ecx, eax
  0044a	73 02		 jae	 SHORT $LN436@Load
  0044c	8b c8		 mov	 ecx, eax
$LN436@Load:
  0044e	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00451	83 c7 60	 add	 edi, 96			; 00000060H
  00454	51		 push	 ecx
  00455	8b cf		 mov	 ecx, edi
  00457	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN417@Load:
  0045c	8b 17		 mov	 edx, DWORD PTR [edi]
  0045e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00461	8d 04 b2	 lea	 eax, DWORD PTR [edx+esi*4]
  00464	50		 push	 eax
  00465	51		 push	 ecx
  00466	8d 57 0c	 lea	 edx, DWORD PTR [edi+12]
  00469	52		 push	 edx
  0046a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
  0046f	eb 57		 jmp	 SHORT $LN749@Load
$LN406@Load:
  00471	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00474	3b c1		 cmp	 eax, ecx
  00476	75 3f		 jne	 SHORT $LN452@Load
  00478	8b 17		 mov	 edx, DWORD PTR [edi]
  0047a	2b c2		 sub	 eax, edx
  0047c	c1 f8 02	 sar	 eax, 2
  0047f	3d fe ff ff 3f	 cmp	 eax, 1073741822		; 3ffffffeH
  00484	0f 87 95 03 00
	00		 ja	 $LN712@Load
  0048a	2b ca		 sub	 ecx, edx
  0048c	40		 inc	 eax
  0048d	c1 f9 02	 sar	 ecx, 2
  00490	3b c1		 cmp	 eax, ecx
  00492	76 23		 jbe	 SHORT $LN452@Load
  00494	8b d1		 mov	 edx, ecx
  00496	d1 ea		 shr	 edx, 1
  00498	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  0049d	2b f2		 sub	 esi, edx
  0049f	3b f1		 cmp	 esi, ecx
  004a1	73 04		 jae	 SHORT $LN474@Load
  004a3	33 c9		 xor	 ecx, ecx
  004a5	eb 02		 jmp	 SHORT $LN475@Load
$LN474@Load:
  004a7	03 ca		 add	 ecx, edx
$LN475@Load:
  004a9	3b c8		 cmp	 ecx, eax
  004ab	73 02		 jae	 SHORT $LN471@Load
  004ad	8b c8		 mov	 ecx, eax
$LN471@Load:
  004af	51		 push	 ecx
  004b0	8b cf		 mov	 ecx, edi
  004b2	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN452@Load:
  004b7	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  004ba	8d 45 c8	 lea	 eax, DWORD PTR _iAssultType$213897[ebp]
  004bd	50		 push	 eax
  004be	51		 push	 ecx
  004bf	8d 57 0c	 lea	 edx, DWORD PTR [edi+12]
  004c2	52		 push	 edx
  004c3	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
$LN749@Load:
  004c8	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 190  : 				this->m_vtAssultTypeRate.push_back(iAssultRate);

  004cc	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  004cf	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  004d2	83 c7 70	 add	 edi, 112		; 00000070H
  004d5	8d 4d cc	 lea	 ecx, DWORD PTR _iAssultRate$213898[ebp]
  004d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  004db	3b c8		 cmp	 ecx, eax
  004dd	73 6c		 jae	 SHORT $LN489@Load
  004df	8b 17		 mov	 edx, DWORD PTR [edi]
  004e1	3b d1		 cmp	 edx, ecx
  004e3	77 66		 ja	 SHORT $LN489@Load
  004e5	8b f1		 mov	 esi, ecx
  004e7	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  004ea	2b f2		 sub	 esi, edx
  004ec	c1 fe 02	 sar	 esi, 2
  004ef	3b c1		 cmp	 eax, ecx
  004f1	75 43		 jne	 SHORT $LN500@Load
  004f3	2b c2		 sub	 eax, edx
  004f5	c1 f8 02	 sar	 eax, 2
  004f8	3d fe ff ff 3f	 cmp	 eax, 1073741822		; 3ffffffeH
  004fd	0f 87 1c 03 00
	00		 ja	 $LN712@Load
  00503	2b ca		 sub	 ecx, edx
  00505	40		 inc	 eax
  00506	c1 f9 02	 sar	 ecx, 2
  00509	3b c1		 cmp	 eax, ecx
  0050b	76 29		 jbe	 SHORT $LN500@Load
  0050d	8b d1		 mov	 edx, ecx
  0050f	d1 ea		 shr	 edx, 1
  00511	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  00516	2b fa		 sub	 edi, edx
  00518	3b f9		 cmp	 edi, ecx
  0051a	73 04		 jae	 SHORT $LN522@Load
  0051c	33 c9		 xor	 ecx, ecx
  0051e	eb 02		 jmp	 SHORT $LN523@Load
$LN522@Load:
  00520	03 ca		 add	 ecx, edx
$LN523@Load:
  00522	3b c8		 cmp	 ecx, eax
  00524	73 02		 jae	 SHORT $LN519@Load
  00526	8b c8		 mov	 ecx, eax
$LN519@Load:
  00528	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  0052b	83 c7 70	 add	 edi, 112		; 00000070H
  0052e	51		 push	 ecx
  0052f	8b cf		 mov	 ecx, edi
  00531	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN500@Load:
  00536	8b 17		 mov	 edx, DWORD PTR [edi]
  00538	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0053b	8d 04 b2	 lea	 eax, DWORD PTR [edx+esi*4]
  0053e	50		 push	 eax
  0053f	51		 push	 ecx
  00540	8d 57 0c	 lea	 edx, DWORD PTR [edi+12]
  00543	52		 push	 edx
  00544	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
  00549	eb 57		 jmp	 SHORT $LN750@Load
$LN489@Load:
  0054b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0054e	3b c1		 cmp	 eax, ecx
  00550	75 3f		 jne	 SHORT $LN535@Load
  00552	8b 17		 mov	 edx, DWORD PTR [edi]
  00554	2b c2		 sub	 eax, edx
  00556	c1 f8 02	 sar	 eax, 2
  00559	3d fe ff ff 3f	 cmp	 eax, 1073741822		; 3ffffffeH
  0055e	0f 87 bb 02 00
	00		 ja	 $LN712@Load
  00564	2b ca		 sub	 ecx, edx
  00566	40		 inc	 eax
  00567	c1 f9 02	 sar	 ecx, 2
  0056a	3b c1		 cmp	 eax, ecx
  0056c	76 23		 jbe	 SHORT $LN535@Load
  0056e	8b d1		 mov	 edx, ecx
  00570	d1 ea		 shr	 edx, 1
  00572	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  00577	2b f2		 sub	 esi, edx
  00579	3b f1		 cmp	 esi, ecx
  0057b	73 04		 jae	 SHORT $LN557@Load
  0057d	33 c9		 xor	 ecx, ecx
  0057f	eb 02		 jmp	 SHORT $LN558@Load
$LN557@Load:
  00581	03 ca		 add	 ecx, edx
$LN558@Load:
  00583	3b c8		 cmp	 ecx, eax
  00585	73 02		 jae	 SHORT $LN554@Load
  00587	8b c8		 mov	 ecx, eax
$LN554@Load:
  00589	51		 push	 ecx
  0058a	8b cf		 mov	 ecx, edi
  0058c	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN535@Load:
  00591	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00594	8d 45 cc	 lea	 eax, DWORD PTR _iAssultRate$213898[ebp]
  00597	50		 push	 eax
  00598	51		 push	 ecx
  00599	8d 57 0c	 lea	 edx, DWORD PTR [edi+12]
  0059c	52		 push	 edx
  0059d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
$LN750@Load:
  005a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a5	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 191  : 			}

  005a9	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  005ac	89 5d b0	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp], ebx
  005af	89 5d b4	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp+4], ebx
  005b2	89 5d b8	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp+8], ebx
  005b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005bc	89 5d a0	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp], ebx
  005bf	89 5d a4	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp+4], ebx
  005c2	89 5d a8	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp+8], ebx
  005c5	e9 c6 fb ff ff	 jmp	 $LL15@Load
$LN10@Load:

; 192  : 			else if (type == 2)

  005ca	83 f8 02	 cmp	 eax, 2
  005cd	0f 85 df 00 00
	00		 jne	 $LN7@Load

; 193  : 			{
; 194  : 				CASTLEDEEP_SPAWNTIME stSpawnTime;
; 195  : 				int iAssultType;
; 196  : 
; 197  : 				Token = GetToken();

  005d3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 198  : 				if (!strcmp("end",TokenString))

  005d8	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  005dd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL734@Load:
  005e2	8a 10		 mov	 dl, BYTE PTR [eax]
  005e4	3a 11		 cmp	 dl, BYTE PTR [ecx]
  005e6	75 1a		 jne	 SHORT $LN735@Load
  005e8	3a d3		 cmp	 dl, bl
  005ea	74 12		 je	 SHORT $LN736@Load
  005ec	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  005ef	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  005f2	75 0e		 jne	 SHORT $LN735@Load
  005f4	83 c0 02	 add	 eax, 2
  005f7	83 c1 02	 add	 ecx, 2
  005fa	3a d3		 cmp	 dl, bl
  005fc	75 e4		 jne	 SHORT $LL734@Load
$LN736@Load:
  005fe	33 c0		 xor	 eax, eax
  00600	eb 05		 jmp	 SHORT $LN737@Load
$LN735@Load:
  00602	1b c0		 sbb	 eax, eax
  00604	83 d8 ff	 sbb	 eax, -1
$LN737@Load:
  00607	3b c3		 cmp	 eax, ebx
  00609	0f 84 d7 01 00
	00		 je	 $LN719@Load

; 199  : 					break;
; 200  : 
; 201  : 				iAssultType = (int)TokenNumber;

  0060f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00615	e8 00 00 00 00	 call	 __ftol2_sse
  0061a	8b f0		 mov	 esi, eax

; 202  : 
; 203  : 				Token = GetToken();

  0061c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 204  : 				stSpawnTime.m_iMonsterGroup = (int)TokenNumber;

  00621	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00627	e8 00 00 00 00	 call	 __ftol2_sse
  0062c	89 45 88	 mov	 DWORD PTR _stSpawnTime$214762[ebp], eax

; 205  : 
; 206  : 				Token = GetToken();

  0062f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 207  : 				stSpawnTime.m_iMonsterSpawnMinute = (int)TokenNumber;

  00634	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0063a	e8 00 00 00 00	 call	 __ftol2_sse
  0063f	89 45 8c	 mov	 DWORD PTR _stSpawnTime$214762[ebp+4], eax

; 208  : 
; 209  : 				EnterCriticalSection(&this->m_critEventData);

  00642	8d 87 90 00 00
	00		 lea	 eax, DWORD PTR [edi+144]
  00648	50		 push	 eax
  00649	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 210  : 
; 211  : 				std::map<int,vector<CASTLEDEEP_SPAWNTIME > >::iterator it = this->m_mapSpawnTime.find(iAssultType); //HermeX Fix

  0064f	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  00652	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00655	38 58 21	 cmp	 BYTE PTR [eax+33], bl
  00658	75 19		 jne	 SHORT $LN599@Load
  0065a	8d 9b 00 00 00
	00		 npad	 6
$LL600@Load:
  00660	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  00663	7d 05		 jge	 SHORT $LN598@Load
  00665	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00668	eb 04		 jmp	 SHORT $LN597@Load
$LN598@Load:
  0066a	8b c8		 mov	 ecx, eax
  0066c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN597@Load:
  0066e	38 58 21	 cmp	 BYTE PTR [eax+33], bl
  00671	74 ed		 je	 SHORT $LL600@Load
$LN599@Load:
  00673	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00676	89 4d cc	 mov	 DWORD PTR __Where$248193[ebp], ecx
  00679	3b c8		 cmp	 ecx, eax
  0067b	74 0a		 je	 SHORT $LN593@Load
  0067d	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  00680	7c 05		 jl	 SHORT $LN593@Load
  00682	8d 45 cc	 lea	 eax, DWORD PTR __Where$248193[ebp]
  00685	eb 06		 jmp	 SHORT $LN594@Load
$LN593@Load:
  00687	89 45 98	 mov	 DWORD PTR $T248122[ebp], eax
  0068a	8d 45 98	 lea	 eax, DWORD PTR $T248122[ebp]
$LN594@Load:
  0068d	8b 00		 mov	 eax, DWORD PTR [eax]

; 212  : 
; 213  : 				if (it != this->m_mapSpawnTime.end())

  0068f	3b 47 44	 cmp	 eax, DWORD PTR [edi+68]
  00692	74 0c		 je	 SHORT $LN5@Load

; 214  : 				{
; 215  : 					it->second.push_back(stSpawnTime);

  00694	8d 4d 88	 lea	 ecx, DWORD PTR _stSpawnTime$214762[ebp]
  00697	51		 push	 ecx
  00698	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  0069b	e8 00 00 00 00	 call	 ?push_back@?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAEXABUCASTLEDEEP_SPAWNTIME@@@Z ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::push_back
$LN5@Load:

; 216  : 				}
; 217  : 
; 218  : 				LeaveCriticalSection(&this->m_critEventData);

  006a0	8d 87 90 00 00
	00		 lea	 eax, DWORD PTR [edi+144]
  006a6	50		 push	 eax
  006a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  006ad	e9 de fa ff ff	 jmp	 $LL15@Load
$LN7@Load:

; 219  : 			}
; 220  : 			else if (type == 3)

  006b2	83 f8 03	 cmp	 eax, 3
  006b5	0f 85 d5 fa ff
	ff		 jne	 $LL15@Load

; 221  : 			{
; 222  : 				CASTLEDEEP_MONSTERINFO stMonsterInfo;
; 223  : 				int iAssultType;
; 224  : 
; 225  : 				Token = GetToken();

  006bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 226  : 				if (!strcmp("end",TokenString))

  006c0	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  006c5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  006ca	8d 9b 00 00 00
	00		 npad	 6
$LL738@Load:
  006d0	8a 10		 mov	 dl, BYTE PTR [eax]
  006d2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  006d4	75 1a		 jne	 SHORT $LN739@Load
  006d6	3a d3		 cmp	 dl, bl
  006d8	74 12		 je	 SHORT $LN740@Load
  006da	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  006dd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  006e0	75 0e		 jne	 SHORT $LN739@Load
  006e2	83 c0 02	 add	 eax, 2
  006e5	83 c1 02	 add	 ecx, 2
  006e8	3a d3		 cmp	 dl, bl
  006ea	75 e4		 jne	 SHORT $LL738@Load
$LN740@Load:
  006ec	33 c0		 xor	 eax, eax
  006ee	eb 05		 jmp	 SHORT $LN741@Load
$LN739@Load:
  006f0	1b c0		 sbb	 eax, eax
  006f2	83 d8 ff	 sbb	 eax, -1
$LN741@Load:
  006f5	3b c3		 cmp	 eax, ebx
  006f7	0f 84 e9 00 00
	00		 je	 $LN719@Load

; 227  : 					break;
; 228  : 
; 229  : 				iAssultType = (int)TokenNumber;

  006fd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00703	e8 00 00 00 00	 call	 __ftol2_sse
  00708	89 45 cc	 mov	 DWORD PTR _iAssultType$214792[ebp], eax

; 230  : 
; 231  : 				Token = GetToken();

  0070b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 232  : 				stMonsterInfo.m_iMonsterGroup = (int)TokenNumber;

  00710	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00716	e8 00 00 00 00	 call	 __ftol2_sse
  0071b	89 45 d4	 mov	 DWORD PTR _stMonsterInfo$214791[ebp], eax

; 233  : 
; 234  : 				Token = GetToken();

  0071e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 235  : 				stMonsterInfo.m_iMonsterType = (int)TokenNumber;

  00723	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00729	e8 00 00 00 00	 call	 __ftol2_sse
  0072e	89 45 d8	 mov	 DWORD PTR _stMonsterInfo$214791[ebp+4], eax

; 236  : 
; 237  : 				Token = GetToken();

  00731	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 238  : 				stMonsterInfo.m_iMonsterNumber = (int)TokenNumber;

  00736	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0073c	e8 00 00 00 00	 call	 __ftol2_sse
  00741	89 45 dc	 mov	 DWORD PTR _stMonsterInfo$214791[ebp+8], eax

; 239  : 
; 240  : 				Token = GetToken();

  00744	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 241  : 				stMonsterInfo.m_iSX = (int)TokenNumber;

  00749	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0074f	e8 00 00 00 00	 call	 __ftol2_sse
  00754	89 45 e0	 mov	 DWORD PTR _stMonsterInfo$214791[ebp+12], eax

; 242  : 
; 243  : 				Token = GetToken();

  00757	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 244  : 				stMonsterInfo.m_iSY = (int)TokenNumber;

  0075c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00762	e8 00 00 00 00	 call	 __ftol2_sse
  00767	89 45 e4	 mov	 DWORD PTR _stMonsterInfo$214791[ebp+16], eax

; 245  : 
; 246  : 				Token = GetToken();

  0076a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 247  : 				stMonsterInfo.m_iDX = (int)TokenNumber;

  0076f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00775	e8 00 00 00 00	 call	 __ftol2_sse
  0077a	89 45 e8	 mov	 DWORD PTR _stMonsterInfo$214791[ebp+20], eax

; 248  : 
; 249  : 				Token = GetToken();

  0077d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 250  : 				stMonsterInfo.m_iDY = (int)TokenNumber;

  00782	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00788	e8 00 00 00 00	 call	 __ftol2_sse

; 251  : 
; 252  : 				EnterCriticalSection(&this->m_critEventData);

  0078d	8d b7 90 00 00
	00		 lea	 esi, DWORD PTR [edi+144]
  00793	56		 push	 esi
  00794	89 45 ec	 mov	 DWORD PTR _stMonsterInfo$214791[ebp+24], eax
  00797	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 253  : 
; 254  : 				std::map<int,vector<CASTLEDEEP_MONSTERINFO > >::iterator it = this->m_mapMonsterInfo.find(iAssultType); //HermeX Fix

  0079d	8d 55 cc	 lea	 edx, DWORD PTR _iAssultType$214792[ebp]
  007a0	52		 push	 edx
  007a1	8d 45 90	 lea	 eax, DWORD PTR _it$214819[ebp]
  007a4	50		 push	 eax
  007a5	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  007a8	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::find

; 255  : 
; 256  : 				if (it != this->m_mapMonsterInfo.end())

  007ad	8b 45 90	 mov	 eax, DWORD PTR _it$214819[ebp]
  007b0	3b 47 34	 cmp	 eax, DWORD PTR [edi+52]
  007b3	74 0c		 je	 SHORT $LN1@Load

; 257  : 				{
; 258  : 					it->second.push_back(stMonsterInfo);

  007b5	8d 4d d4	 lea	 ecx, DWORD PTR _stMonsterInfo$214791[ebp]
  007b8	51		 push	 ecx
  007b9	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  007bc	e8 00 00 00 00	 call	 ?push_back@?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAEXABUCASTLEDEEP_MONSTERINFO@@@Z ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::push_back
$LN1@Load:

; 259  : 				}
; 260  : 
; 261  : 				LeaveCriticalSection(&this->m_critEventData);

  007c1	56		 push	 esi
  007c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 262  : 			}
; 263  : 		}

  007c8	e9 c3 f9 ff ff	 jmp	 $LL15@Load

; 179  : 					break;

$LN322@Load:
  007cd	89 5d b0	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp], ebx
  007d0	89 5d b4	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp+4], ebx
  007d3	89 5d b8	 mov	 DWORD PTR _vtTempSpawnTime$213896[ebp+8], ebx
  007d6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  007dd	89 5d a0	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp], ebx
  007e0	89 5d a4	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp+4], ebx
  007e3	89 5d a8	 mov	 DWORD PTR _vtTempMonsterInfo$213891[ebp+8], ebx
$LN719@Load:

; 146  : 
; 147  : 		if (Token == END)

  007e6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  007eb	83 f8 02	 cmp	 eax, 2
  007ee	0f 85 8c f9 ff
	ff		 jne	 $LL18@Load
$LN721@Load:

; 264  : 	}
; 265  : 
; 266  : 	fclose(SMDFile);

  007f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  007fa	52		 push	 edx
  007fb	e8 00 00 00 00	 call	 _fclose

; 267  : 	LogAdd("%s file load!",lpszFileName);

  00800	8b 45 9c	 mov	 eax, DWORD PTR _lpszFileName$GSCopy$[ebp]
  00803	50		 push	 eax
  00804	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00809	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 268  : 	this->m_bHasData = TRUE;

  0080f	b8 01 00 00 00	 mov	 eax, 1
  00814	83 c4 0c	 add	 esp, 12			; 0000000cH
  00817	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 269  : 	return true;

  0081a	e9 44 f8 ff ff	 jmp	 $LN21@Load
$LN712@Load:

; 167  : 				this->m_vtEventTime.push_back(pRET);

  0081f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00824	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN752@Load:
$LN748@Load:
  00829	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR _vtTempMonsterInfo$213891[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >::~vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >
__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$1:
  00008	8d 4d b0	 lea	 ecx, DWORD PTR _vtTempSpawnTime$213896[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >::~vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >
__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$2:
  00010	8d 4d dc	 lea	 ecx, DWORD PTR $T245728[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?Load@CCastleDeepEvent@@QAEHPAD@Z$3:
  00018	8d 4d dc	 lea	 ecx, DWORD PTR $T245730[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?Load@CCastleDeepEvent@@QAEHPAD@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CCastleDeepEvent@@QAEHPAD@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CCastleDeepEvent@@QAEHPAD@Z ENDP			; CCastleDeepEvent::Load
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T248487 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T248487[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T248627 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T248627[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
PUBLIC	??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >::~map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T248811 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >::~map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T248811[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
__ehhandler$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >::~map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >
PUBLIC	??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >::~map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T248988 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >::~map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T248988[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
__ehhandler$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >::~map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >
PUBLIC	??_7CCastleDeepEvent@@6B@			; CCastleDeepEvent::`vftable'
PUBLIC	??1CCastleDeepEvent@@UAE@XZ			; CCastleDeepEvent::~CCastleDeepEvent
PUBLIC	??_R4CCastleDeepEvent@@6B@			; CCastleDeepEvent::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleDeepEvent@@@8			; CCastleDeepEvent `RTTI Type Descriptor'
PUBLIC	??_R3CCastleDeepEvent@@8			; CCastleDeepEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleDeepEvent@@8			; CCastleDeepEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleDeepEvent@@8		; CCastleDeepEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	??_ECCastleDeepEvent@@UAEPAXI@Z:PROC		; CCastleDeepEvent::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleDeepEvent@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleDeepEvent@@8 DD FLAT:??_R0?AVCCastleDeepEvent@@@8 ; CCastleDeepEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleDeepEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleDeepEvent@@8
rdata$r	SEGMENT
??_R2CCastleDeepEvent@@8 DD FLAT:??_R1A@?0A@EA@CCastleDeepEvent@@8 ; CCastleDeepEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleDeepEvent@@8
rdata$r	SEGMENT
??_R3CCastleDeepEvent@@8 DD 00H				; CCastleDeepEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleDeepEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleDeepEvent@@@8
_DATA	SEGMENT
??_R0?AVCCastleDeepEvent@@@8 DD FLAT:??_7type_info@@6B@	; CCastleDeepEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleDeepEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleDeepEvent@@6B@
rdata$r	SEGMENT
??_R4CCastleDeepEvent@@6B@ DD 00H			; CCastleDeepEvent::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleDeepEvent@@@8
	DD	FLAT:??_R3CCastleDeepEvent@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleDeepEvent@@6B@
CONST	SEGMENT
??_7CCastleDeepEvent@@6B@ DD FLAT:??_R4CCastleDeepEvent@@6B@ ; CCastleDeepEvent::`vftable'
	DD	FLAT:??_ECCastleDeepEvent@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CCastleDeepEvent@@UAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CCastleDeepEvent@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CCastleDeepEvent@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$7
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$11
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
xdata$x	ENDS
;	COMDAT ??1CCastleDeepEvent@@UAE@XZ
_TEXT	SEGMENT
$T249764 = -24						; size = 4
$T249552 = -24						; size = 4
$T249213 = -24						; size = 4
$T249735 = -20						; size = 4
$T249523 = -20						; size = 4
$T249244 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCastleDeepEvent@@UAE@XZ PROC			; CCastleDeepEvent::~CCastleDeepEvent, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CCastleDeepEvent@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCastleDeepEvent@@6B@
  00033	33 db		 xor	 ebx, ebx
  00035	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 32   : 	DeleteCriticalSection(&this->m_critEventData);

  00038	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 33   : }

  00045	8d be 80 00 00
	00		 lea	 edi, DWORD PTR [esi+128]
  0004b	89 7d ec	 mov	 DWORD PTR $T249244[ebp], edi
  0004e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	8d 4d e8	 lea	 ecx, DWORD PTR $T249213[ebp]
  00058	51		 push	 ecx
  00059	8b cf		 mov	 ecx, edi
  0005b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0005f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::erase
  00064	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006d	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00070	83 c4 04	 add	 esp, 4
  00073	3b c3		 cmp	 eax, ebx
  00075	74 09		 je	 SHORT $LN52@CCastleDee
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007d	83 c4 04	 add	 esp, 4
$LN52@CCastleDee:
  00080	89 5e 70	 mov	 DWORD PTR [esi+112], ebx
  00083	89 5e 74	 mov	 DWORD PTR [esi+116], ebx
  00086	89 5e 78	 mov	 DWORD PTR [esi+120], ebx
  00089	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0008c	3b c3		 cmp	 eax, ebx
  0008e	74 09		 je	 SHORT $LN63@CCastleDee
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	83 c4 04	 add	 esp, 4
$LN63@CCastleDee:
  00099	89 5e 60	 mov	 DWORD PTR [esi+96], ebx
  0009c	89 5e 64	 mov	 DWORD PTR [esi+100], ebx
  0009f	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  000a2	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  000a5	3b c3		 cmp	 eax, ebx
  000a7	74 09		 je	 SHORT $LN74@CCastleDee
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000af	83 c4 04	 add	 esp, 4
$LN74@CCastleDee:
  000b2	8d 7e 40	 lea	 edi, DWORD PTR [esi+64]
  000b5	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  000b8	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  000bb	89 5e 58	 mov	 DWORD PTR [esi+88], ebx
  000be	89 7d e8	 mov	 DWORD PTR $T249552[ebp], edi
  000c1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	50		 push	 eax
  000c7	51		 push	 ecx
  000c8	8d 55 ec	 lea	 edx, DWORD PTR $T249523[ebp]
  000cb	52		 push	 edx
  000cc	8b cf		 mov	 ecx, edi
  000ce	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000d2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::erase
  000d7	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000da	57		 push	 edi
  000db	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e0	83 c6 30	 add	 esi, 48			; 00000030H
  000e3	83 c4 04	 add	 esp, 4
  000e6	89 75 e8	 mov	 DWORD PTR $T249764[ebp], esi
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ee	50		 push	 eax
  000ef	51		 push	 ecx
  000f0	8d 45 ec	 lea	 eax, DWORD PTR $T249735[ebp]
  000f3	50		 push	 eax
  000f4	8b ce		 mov	 ecx, esi
  000f6	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  000fd	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::erase
  00102	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010b	83 c4 04	 add	 esp, 4
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 30	 add	 ecx, 48			; 00000030H
  00006	e9 00 00 00 00	 jmp	 ??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 40	 add	 ecx, 64			; 00000040H
  00011	e9 00 00 00 00	 jmp	 ??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 50	 add	 ecx, 80			; 00000050H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 60	 add	 ecx, 96			; 00000060H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 70	 add	 ecx, 112		; 00000070H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$7:
  00037	8b 4d ec	 mov	 ecx, DWORD PTR $T249244[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HHU?$less@H@std@@V?$allocator@U?$pair@$$CBHH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$9:
  0003f	8b 4d e8	 mov	 ecx, DWORD PTR $T249552[ebp]
  00042	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > >,0> >
__unwindfunclet$??1CCastleDeepEvent@@UAE@XZ$11:
  00047	8b 4d e8	 mov	 ecx, DWORD PTR $T249764[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > >,0> >
__ehhandler$??1CCastleDeepEvent@@UAE@XZ:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00056	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CCastleDeepEvent@@UAE@XZ
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CCastleDeepEvent@@UAE@XZ ENDP			; CCastleDeepEvent::~CCastleDeepEvent
PUBLIC	??0?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T249924 = -16						; size = 12
$T249817 = -4						; size = 4
??0?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN25@map@2
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 107  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0

; 106  : 		{	// construct empty map from defaults

$LN25@map@2:
  00044	8d 45 fc	 lea	 eax, DWORD PTR $T249817[ebp]
  00047	50		 push	 eax
  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T249924[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T249817[ebp], 0
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR $T249924[ebp]
  0005f	51		 push	 ecx
  00060	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T249924[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@map@2:
$LN48@map@2:
  0006c	cc		 int	 3
??0?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >::map<int,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_MONSTERINFO,std::allocator<CASTLEDEEP_MONSTERINFO> > > > >
_TEXT	ENDS
PUBLIC	??0?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T250088 = -16						; size = 12
$T249988 = -4						; size = 4
??0?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN25@map@3
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 107  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0

; 106  : 		{	// construct empty map from defaults

$LN25@map@3:
  00044	8d 45 fc	 lea	 eax, DWORD PTR $T249988[ebp]
  00047	50		 push	 eax
  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T250088[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T249988[ebp], 0
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR $T250088[ebp]
  0005f	51		 push	 ecx
  00060	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T250088[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@map@3:
$LN48@map@3:
  0006c	cc		 int	 3
??0?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >::map<int,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CASTLEDEEP_SPAWNTIME,std::allocator<CASTLEDEEP_SPAWNTIME> > > > >
_TEXT	ENDS
PUBLIC	??0CCastleDeepEvent@@QAE@XZ			; CCastleDeepEvent::CCastleDeepEvent
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	_srand:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
xdata$x	SEGMENT
__ehfuncinfo$??0CCastleDeepEvent@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CCastleDeepEvent@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CCastleDeepEvent@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$4
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castledeepevent.cpp
xdata$x	ENDS
;	COMDAT ??0CCastleDeepEvent@@QAE@XZ
_TEXT	SEGMENT
$T250318 = -48						; size = 12
$T250824 = -36						; size = 12
$T250535 = -36						; size = 12
_this$ = -24						; size = 4
$T250166 = -20						; size = 4
$T250670 = -16						; size = 4
$T250381 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCastleDeepEvent@@QAE@XZ PROC			; CCastleDeepEvent::CCastleDeepEvent, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCastleDeepEvent@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCastleDeepEvent@@6B@
  00033	33 ff		 xor	 edi, edi
  00035	6a 24		 push	 36			; 00000024H
  00037	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	83 c4 04	 add	 esp, 4
  00042	3b c7		 cmp	 eax, edi
  00044	0f 84 31 01 00
	00		 je	 $LN33@CCastleDee@2
  0004a	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0004d	89 00		 mov	 DWORD PTR [eax], eax
  0004f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00052	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00055	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00058	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0005b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0005e	b3 01		 mov	 bl, 1
  00060	88 58 20	 mov	 BYTE PTR [eax+32], bl
  00063	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00066	88 59 21	 mov	 BYTE PTR [ecx+33], bl
  00069	6a 24		 push	 36			; 00000024H
  0006b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0006e	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00071	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00076	83 c4 04	 add	 esp, 4
  00079	3b c7		 cmp	 eax, edi
  0007b	0f 84 d6 00 00
	00		 je	 $LN80@CCastleDee@2
  00081	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00084	89 00		 mov	 DWORD PTR [eax], eax
  00086	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00089	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0008c	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0008f	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00092	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00095	88 5a 20	 mov	 BYTE PTR [edx+32], bl
  00098	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0009b	88 58 21	 mov	 BYTE PTR [eax+33], bl
  0009e	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  000a1	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  000a4	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  000a7	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  000aa	89 7e 64	 mov	 DWORD PTR [esi+100], edi
  000ad	89 7e 68	 mov	 DWORD PTR [esi+104], edi
  000b0	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  000b3	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  000b6	89 7e 78	 mov	 DWORD PTR [esi+120], edi
  000b9	6a 18		 push	 24			; 00000018H
  000bb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000bf	89 be 88 00 00
	00		 mov	 DWORD PTR [esi+136], edi
  000c5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ca	83 c4 04	 add	 esp, 4
  000cd	3b c7		 cmp	 eax, edi
  000cf	74 62		 je	 SHORT $LN150@CCastleDee@2
  000d1	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  000d7	89 00		 mov	 DWORD PTR [eax], eax
  000d9	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  000df	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000e2	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  000e8	89 40 08	 mov	 DWORD PTR [eax+8], eax
  000eb	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  000f1	88 59 14	 mov	 BYTE PTR [ecx+20], bl
  000f4	8b 96 84 00 00
	00		 mov	 edx, DWORD PTR [esi+132]
  000fa	88 5a 15	 mov	 BYTE PTR [edx+21], bl

; 22   : 	this->m_bDoEvent = FALSE;
; 23   : 	this->m_bHasData = FALSE;
; 24   : 
; 25   : 	srand(time(NULL));

  000fd	57		 push	 edi
  000fe	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00101	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00104	e8 00 00 00 00	 call	 __time64
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _srand
  0010f	83 c4 08	 add	 esp, 8

; 26   : 
; 27   : 	InitializeCriticalSection(&this->m_critEventData);

  00112	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  00118	50		 push	 eax
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 28   : }

  0011f	8b c6		 mov	 eax, esi
  00121	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00124	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012b	59		 pop	 ecx
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0

; 21   : {

$LN150@CCastleDee@2:
  00133	8d 4d f0	 lea	 ecx, DWORD PTR $T250670[ebp]
  00136	51		 push	 ecx
  00137	8d 4d dc	 lea	 ecx, DWORD PTR $T250824[ebp]
  0013a	89 7d f0	 mov	 DWORD PTR $T250670[ebp], edi
  0013d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00142	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00147	8d 55 dc	 lea	 edx, DWORD PTR $T250824[ebp]
  0014a	52		 push	 edx
  0014b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T250824[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00152	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@CCastleDee@2:
$LN80@CCastleDee@2:
  00157	8d 45 f0	 lea	 eax, DWORD PTR $T250381[ebp]
  0015a	50		 push	 eax
  0015b	8d 4d dc	 lea	 ecx, DWORD PTR $T250535[ebp]
  0015e	89 7d f0	 mov	 DWORD PTR $T250381[ebp], edi
  00161	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00166	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0016b	8d 4d dc	 lea	 ecx, DWORD PTR $T250535[ebp]
  0016e	51		 push	 ecx
  0016f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T250535[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00176	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN180@CCastleDee@2:
$LN33@CCastleDee@2:
  0017b	8d 55 ec	 lea	 edx, DWORD PTR $T250166[ebp]
  0017e	52		 push	 edx
  0017f	8d 4d d0	 lea	 ecx, DWORD PTR $T250318[ebp]
  00182	89 7d ec	 mov	 DWORD PTR $T250166[ebp], edi
  00185	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0018a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0018f	8d 45 d0	 lea	 eax, DWORD PTR $T250318[ebp]
  00192	50		 push	 eax
  00193	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T250318[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0019a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN181@CCastleDee@2:
$LN178@CCastleDee@2:
  0019f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 30	 add	 ecx, 48			; 00000030H
  00006	e9 00 00 00 00	 jmp	 ??1?$map@HV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_MONSTERINFO@@V?$allocator@UCASTLEDEEP_MONSTERINFO@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$1:
  0000b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 40	 add	 ecx, 64			; 00000040H
  00011	e9 00 00 00 00	 jmp	 ??1?$map@HV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UCASTLEDEEP_SPAWNTIME@@V?$allocator@UCASTLEDEEP_SPAWNTIME@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$2:
  00016	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 50	 add	 ecx, 80			; 00000050H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@UCASTLEDEEP_EVENTTIME@@V?$allocator@UCASTLEDEEP_EVENTTIME@@@std@@@std@@QAE@XZ ; std::vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >::~vector<CASTLEDEEP_EVENTTIME,std::allocator<CASTLEDEEP_EVENTTIME> >
__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$3:
  00021	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 60	 add	 ecx, 96			; 00000060H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0CCastleDeepEvent@@QAE@XZ$4:
  0002c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 70	 add	 ecx, 112		; 00000070H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??0CCastleDeepEvent@@QAE@XZ:
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCastleDeepEvent@@QAE@XZ
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCastleDeepEvent@@QAE@XZ ENDP			; CCastleDeepEvent::CCastleDeepEvent
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleDeepEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleDeepEvent@@UAEPAXI@Z PROC			; CCastleDeepEvent::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleDeepEvent@@UAE@XZ ; CCastleDeepEvent::~CCastleDeepEvent
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@4:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCastleDeepEvent@@UAEPAXI@Z ENDP			; CCastleDeepEvent::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CastleDeepEvent@@YAXXZ
text$yc	SEGMENT
??__Eg_CastleDeepEvent@@YAXXZ PROC			; `dynamic initializer for 'g_CastleDeepEvent'', COMDAT

; 18   : CCastleDeepEvent g_CastleDeepEvent;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleDeepEvent@@3VCCastleDeepEvent@@A ; g_CastleDeepEvent
  00005	e8 00 00 00 00	 call	 ??0CCastleDeepEvent@@QAE@XZ ; CCastleDeepEvent::CCastleDeepEvent
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CastleDeepEvent@@YAXXZ ; `dynamic atexit destructor for 'g_CastleDeepEvent''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CastleDeepEvent@@YAXXZ ENDP			; `dynamic initializer for 'g_CastleDeepEvent''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CastleDeepEvent@@YAXXZ
text$yd	SEGMENT
??__Fg_CastleDeepEvent@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CastleDeepEvent'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleDeepEvent@@3VCCastleDeepEvent@@A ; g_CastleDeepEvent
  00005	e9 00 00 00 00	 jmp	 ??1CCastleDeepEvent@@UAE@XZ ; CCastleDeepEvent::~CCastleDeepEvent
??__Fg_CastleDeepEvent@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CastleDeepEvent''
text$yd	ENDS
PUBLIC	?g_CastleDeepEvent@@3VCCastleDeepEvent@@A	; g_CastleDeepEvent
_BSS	SEGMENT
?g_CastleDeepEvent@@3VCCastleDeepEvent@@A DB 0a8H DUP (?) ; g_CastleDeepEvent
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CastleDeepEvent$initializer$ DD FLAT:??__Eg_CastleDeepEvent@@YAXXZ
CRT$XCU	ENDS
END
