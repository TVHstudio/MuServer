; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CastleSiegeSync.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?GetMapSvrGroup@CMapServerManager@@QAEHXZ	; CMapServerManager::GetMapSvrGroup
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 50   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	8b 81 c0 32 01
	00		 mov	 eax, DWORD PTR [ecx+78528]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN1@GetMapSvrG

; 51   : 		{
; 52   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]

; 55   : 	}

  0000e	c3		 ret	 0
$LN1@GetMapSvrG:

; 53   : 		}
; 54   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1

; 55   : 	}

  00012	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
PUBLIC	??_7CCastleSiegeSync@@6B@			; CCastleSiegeSync::`vftable'
PUBLIC	??1CCastleSiegeSync@@UAE@XZ			; CCastleSiegeSync::~CCastleSiegeSync
PUBLIC	??_R4CCastleSiegeSync@@6B@			; CCastleSiegeSync::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleSiegeSync@@@8			; CCastleSiegeSync `RTTI Type Descriptor'
PUBLIC	??_R3CCastleSiegeSync@@8			; CCastleSiegeSync::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleSiegeSync@@8			; CCastleSiegeSync::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleSiegeSync@@8		; CCastleSiegeSync::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCastleSiegeSync@@UAEPAXI@Z:PROC		; CCastleSiegeSync::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleSiegeSync@@8
; File e:\work\tranet_version\gs\gameserver\castlesiegesync.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleSiegeSync@@8 DD FLAT:??_R0?AVCCastleSiegeSync@@@8 ; CCastleSiegeSync::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleSiegeSync@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleSiegeSync@@8
rdata$r	SEGMENT
??_R2CCastleSiegeSync@@8 DD FLAT:??_R1A@?0A@EA@CCastleSiegeSync@@8 ; CCastleSiegeSync::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleSiegeSync@@8
rdata$r	SEGMENT
??_R3CCastleSiegeSync@@8 DD 00H				; CCastleSiegeSync::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleSiegeSync@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleSiegeSync@@@8
_DATA	SEGMENT
??_R0?AVCCastleSiegeSync@@@8 DD FLAT:??_7type_info@@6B@	; CCastleSiegeSync `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleSiegeSync@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleSiegeSync@@6B@
rdata$r	SEGMENT
??_R4CCastleSiegeSync@@6B@ DD 00H			; CCastleSiegeSync::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleSiegeSync@@@8
	DD	FLAT:??_R3CCastleSiegeSync@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleSiegeSync@@6B@
CONST	SEGMENT
??_7CCastleSiegeSync@@6B@ DD FLAT:??_R4CCastleSiegeSync@@6B@ ; CCastleSiegeSync::`vftable'
	DD	FLAT:??_ECCastleSiegeSync@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CCastleSiegeSync@@UAE@XZ
_TEXT	SEGMENT
??1CCastleSiegeSync@@UAE@XZ PROC			; CCastleSiegeSync::~CCastleSiegeSync, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleSiegeSync@@6B@

; 16   : 	return;
; 17   : }

  00006	c3		 ret	 0
??1CCastleSiegeSync@@UAE@XZ ENDP			; CCastleSiegeSync::~CCastleSiegeSync
_TEXT	ENDS
PUBLIC	?Clear@CCastleSiegeSync@@QAEXXZ			; CCastleSiegeSync::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@CCastleSiegeSync@@QAEXXZ
_TEXT	SEGMENT
?Clear@CCastleSiegeSync@@QAEXXZ PROC			; CCastleSiegeSync::Clear, COMDAT
; _this$ = ecx

; 21   : 	this->m_iCurCastleState = -1;
; 22   : 	this->m_iCurTaxRateChaos = 0;

  00000	33 c0		 xor	 eax, eax
  00002	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00009	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 23   : 	this->m_iCurTaxRateStore  = 0;

  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 24   : 	this->m_lCastleTributeMoney = 0;

  0000f	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 25   : 	this->m_iCsTributeMoneyTimer = 0;

  00012	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 26   : 	memset(this->m_szCastleOwnerGuild, 0, sizeof(this->m_szCastleOwnerGuild));

  00015	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00018	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0001b	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0001e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 27   : }

  00021	c3		 ret	 0
?Clear@CCastleSiegeSync@@QAEXXZ ENDP			; CCastleSiegeSync::Clear
_TEXT	ENDS
PUBLIC	?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z ; CCastleSiegeSync::SetCastleOwnerGuild
; Function compile flags: /Ogtp
;	COMDAT ?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z
_TEXT	SEGMENT
_lpszGuildName$ = 8					; size = 4
?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z PROC	; CCastleSiegeSync::SetCastleOwnerGuild, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	if ( lpszGuildName == NULL )

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpszGuildName$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN2@SetCastleO

; 32   : 	{
; 33   : 		return;
; 34   : 	}
; 35   : 
; 36   : 	memset(this->m_szCastleOwnerGuild, 0, sizeof(this->m_szCastleOwnerGuild));

  0000a	33 c0		 xor	 eax, eax
  0000c	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0000f	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00012	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00015	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 37   : 	memcpy(this->m_szCastleOwnerGuild, lpszGuildName, sizeof(this->m_szCastleOwnerGuild)/2);

  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0001d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00020	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
$LN2@SetCastleO:

; 38   : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z ENDP	; CCastleSiegeSync::SetCastleOwnerGuild
_TEXT	ENDS
PUBLIC	?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z	; CCastleSiegeSync::AddTributeMoney
EXTRN	__imp__InterlockedExchangeAdd@8:PROC
EXTRN	__imp__InterlockedExchange@8:PROC
; Function compile flags: /Ogtp
;	COMDAT ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z
_TEXT	SEGMENT
_iMoney$ = 8						; size = 4
?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z PROC		; CCastleSiegeSync::AddTributeMoney, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	if ( this->m_lCastleTributeMoney < 0 )

  00003	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00007	56		 push	 esi
  00008	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
  0000b	7d 09		 jge	 SHORT $LN3@AddTribute

; 82   : 	{
; 83   : 		InterlockedExchange((LPLONG)&this->m_lCastleTributeMoney, 0);

  0000d	6a 00		 push	 0
  0000f	56		 push	 esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
$LN3@AddTribute:

; 84   : 	}
; 85   : 
; 86   : 	if ( iMoney <= 0 )

  00016	8b 45 08	 mov	 eax, DWORD PTR _iMoney$[ebp]
  00019	85 c0		 test	 eax, eax
  0001b	7e 14		 jle	 SHORT $LN4@AddTribute

; 87   : 	{
; 88   : 		return;
; 89   : 	}
; 90   : 
; 91   : 	if ( (this->m_lCastleTributeMoney + iMoney) > MAX_TRIBUTE_MONEY )

  0001d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001f	03 c8		 add	 ecx, eax
  00021	81 f9 00 94 35
	77		 cmp	 ecx, 2000000000		; 77359400H
  00027	7f 08		 jg	 SHORT $LN4@AddTribute

; 92   : 	{
; 93   : 		return;
; 94   : 	}
; 95   : 
; 96   : 	InterlockedExchangeAdd((LPLONG)&this->m_lCastleTributeMoney, iMoney);

  00029	50		 push	 eax
  0002a	56		 push	 esi
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchangeAdd@8
$LN4@AddTribute:
  00031	5e		 pop	 esi

; 97   : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ENDP		; CCastleSiegeSync::AddTributeMoney
_TEXT	ENDS
PUBLIC	?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ	; CCastleSiegeSync::ResetTributeMoney
; Function compile flags: /Ogtp
;	COMDAT ?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ
_TEXT	SEGMENT
?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ PROC	; CCastleSiegeSync::ResetTributeMoney, COMDAT
; _this$ = ecx

; 101  : 	InterlockedExchange((LPLONG)&this->m_lCastleTributeMoney, 0);

  00000	6a 00		 push	 0
  00002	83 c1 14	 add	 ecx, 20			; 00000014H
  00005	51		 push	 ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 102  : }

  0000c	c3		 ret	 0
?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ ENDP	; CCastleSiegeSync::ResetTributeMoney
_TEXT	ENDS
PUBLIC	?AdjustTributeMoney@CCastleSiegeSync@@QAEXXZ	; CCastleSiegeSync::AdjustTributeMoney
EXTRN	?GS_GDReqCastleTributeMoney@@YAXHH@Z:PROC	; GS_GDReqCastleTributeMoney
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
; Function compile flags: /Ogtp
;	COMDAT ?AdjustTributeMoney@CCastleSiegeSync@@QAEXXZ
_TEXT	SEGMENT
?AdjustTributeMoney@CCastleSiegeSync@@QAEXXZ PROC	; CCastleSiegeSync::AdjustTributeMoney, COMDAT
; _this$ = ecx

; 105  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 106  : 	if ( this->m_lCastleTributeMoney < 0 )

  00004	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
  00008	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  0000b	7d 09		 jge	 SHORT $LN3@AdjustTrib

; 107  : 	{
; 108  : 		InterlockedExchange((LPLONG)&this->m_lCastleTributeMoney, 0);

  0000d	6a 00		 push	 0
  0000f	56		 push	 esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
$LN3@AdjustTrib:

; 109  : 	}
; 110  : 
; 111  : 	if ( this->m_lCastleTributeMoney == 0 )

  00016	8b 36		 mov	 esi, DWORD PTR [esi]
  00018	85 f6		 test	 esi, esi
  0001a	74 3a		 je	 SHORT $LN4@AdjustTrib

; 112  : 	{
; 113  : 		return;
; 114  : 	}
; 115  : 
; 116  : 	this->m_iCsTributeMoneyTimer++;

  0001c	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0001f	40		 inc	 eax

; 117  : 
; 118  : 	this->m_iCsTributeMoneyTimer %= 180;

  00020	99		 cdq
  00021	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  00026	f7 f9		 idiv	 ecx
  00028	89 57 28	 mov	 DWORD PTR [edi+40], edx

; 119  : 
; 120  : 	if ( this->m_iCsTributeMoneyTimer != 0 )

  0002b	85 d2		 test	 edx, edx
  0002d	75 27		 jne	 SHORT $LN4@AdjustTrib

; 121  : 	{
; 122  : 		return;
; 123  : 	}
; 124  : 
; 125  : 	GS_GDReqCastleTributeMoney(g_MapServerManager.GetMapSvrGroup(), this->m_lCastleTributeMoney);

  0002f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00034	85 c0		 test	 eax, eax
  00036	74 11		 je	 SHORT $LN6@AdjustTrib
  00038	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0003c	56		 push	 esi
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?GS_GDReqCastleTributeMoney@@YAXHH@Z ; GS_GDReqCastleTributeMoney
  00043	83 c4 08	 add	 esp, 8
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi

; 126  : }

  00048	c3		 ret	 0

; 121  : 	{
; 122  : 		return;
; 123  : 	}
; 124  : 
; 125  : 	GS_GDReqCastleTributeMoney(g_MapServerManager.GetMapSvrGroup(), this->m_lCastleTributeMoney);

$LN6@AdjustTrib:
  00049	83 c8 ff	 or	 eax, -1
  0004c	56		 push	 esi
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?GS_GDReqCastleTributeMoney@@YAXHH@Z ; GS_GDReqCastleTributeMoney
  00053	83 c4 08	 add	 esp, 8
$LN4@AdjustTrib:

; 126  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	c3		 ret	 0
?AdjustTributeMoney@CCastleSiegeSync@@QAEXXZ ENDP	; CCastleSiegeSync::AdjustTributeMoney
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z PROC	; CCastleSiegeSync::CheckCastleOwnerMember, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 130  : 	if ( gObjIsConnected(iIndex) == FALSE )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 08		 jne	 SHORT $LN3@CheckCastl
$LN14@CheckCastl:
  00017	5f		 pop	 edi

; 131  : 	{
; 132  : 		return FALSE;

  00018	33 c0		 xor	 eax, eax
  0001a	5e		 pop	 esi

; 141  : 	{
; 142  : 		return FALSE;
; 143  : 	}
; 144  : 
; 145  : 	return TRUE;
; 146  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN3@CheckCastl:

; 133  : 	}
; 134  : 
; 135  : 	if ( strcmp(this->m_szCastleOwnerGuild, "") == 0 )

  0001f	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00022	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00027	8b c1		 mov	 eax, ecx
  00029	53		 push	 ebx
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL6@CheckCastl:
  00030	8a 18		 mov	 bl, BYTE PTR [eax]
  00032	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00034	75 1a		 jne	 SHORT $LN7@CheckCastl
  00036	84 db		 test	 bl, bl
  00038	74 12		 je	 SHORT $LN8@CheckCastl
  0003a	8a 58 01	 mov	 bl, BYTE PTR [eax+1]
  0003d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00040	75 0e		 jne	 SHORT $LN7@CheckCastl
  00042	83 c0 02	 add	 eax, 2
  00045	83 c2 02	 add	 edx, 2
  00048	84 db		 test	 bl, bl
  0004a	75 e4		 jne	 SHORT $LL6@CheckCastl
$LN8@CheckCastl:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 05		 jmp	 SHORT $LN9@CheckCastl
$LN7@CheckCastl:
  00050	1b c0		 sbb	 eax, eax
  00052	83 d8 ff	 sbb	 eax, -1
$LN9@CheckCastl:
  00055	5b		 pop	 ebx
  00056	85 c0		 test	 eax, eax

; 136  : 	{
; 137  : 		return FALSE;

  00058	74 bd		 je	 SHORT $LN14@CheckCastl

; 138  : 	}
; 139  : 
; 140  : 	if ( strcmp(gObj[iIndex].GuildName, this->m_szCastleOwnerGuild) != 0 )

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00065	8d 84 07 3c 04
	00 00		 lea	 eax, DWORD PTR [edi+eax+1084]
  0006c	8d 64 24 00	 npad	 4
$LL10@CheckCastl:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 27		 jne	 SHORT $LN11@CheckCastl
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN12@CheckCastl
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 1b		 jne	 SHORT $LN11@CheckCastl
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL10@CheckCastl
$LN12@CheckCastl:
  0008c	33 c0		 xor	 eax, eax
  0008e	33 c9		 xor	 ecx, ecx
  00090	85 c0		 test	 eax, eax
  00092	0f 94 c1	 sete	 cl
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	8b c1		 mov	 eax, ecx

; 141  : 	{
; 142  : 		return FALSE;
; 143  : 	}
; 144  : 
; 145  : 	return TRUE;
; 146  : }

  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
$LN11@CheckCastl:

; 138  : 	}
; 139  : 
; 140  : 	if ( strcmp(gObj[iIndex].GuildName, this->m_szCastleOwnerGuild) != 0 )

  0009d	1b c0		 sbb	 eax, eax
  0009f	83 d8 ff	 sbb	 eax, -1
  000a2	33 c9		 xor	 ecx, ecx
  000a4	85 c0		 test	 eax, eax
  000a6	0f 94 c1	 sete	 cl
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	8b c1		 mov	 eax, ecx

; 141  : 	{
; 142  : 		return FALSE;
; 143  : 	}
; 144  : 
; 145  : 	return TRUE;
; 146  : }

  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ENDP	; CCastleSiegeSync::CheckCastleOwnerMember
_TEXT	ENDS
PUBLIC	?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
EXTRN	?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z:PROC	; TUnion::SearchUnion
EXTRN	?UnionManager@@3VTUnion@@A:BYTE			; UnionManager
; Function compile flags: /Ogtp
;	COMDAT ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z PROC ; CCastleSiegeSync::CheckCastleOwnerUnionMember, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 150  : 	if ( gObjIsConnected(iIndex) == FALSE )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 08		 jne	 SHORT $LN5@CheckCastl@2
$LN16@CheckCastl@2:
  00017	5f		 pop	 edi

; 151  : 	{
; 152  : 		return FALSE;

  00018	33 c0		 xor	 eax, eax
  0001a	5e		 pop	 esi

; 175  : 	{
; 176  : 		return TRUE;
; 177  : 	}
; 178  : 
; 179  : 	return FALSE;
; 180  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@CheckCastl@2:

; 153  : 	}
; 154  : 
; 155  : 	if ( strcmp(this->m_szCastleOwnerGuild, "") == 0 )

  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00024	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
$LL8@CheckCastl@2:
  00027	8a 10		 mov	 dl, BYTE PTR [eax]
  00029	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0002b	75 1a		 jne	 SHORT $LN9@CheckCastl@2
  0002d	84 d2		 test	 dl, dl
  0002f	74 12		 je	 SHORT $LN10@CheckCastl@2
  00031	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00034	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00037	75 0e		 jne	 SHORT $LN9@CheckCastl@2
  00039	83 c0 02	 add	 eax, 2
  0003c	83 c1 02	 add	 ecx, 2
  0003f	84 d2		 test	 dl, dl
  00041	75 e4		 jne	 SHORT $LL8@CheckCastl@2
$LN10@CheckCastl@2:
  00043	33 c0		 xor	 eax, eax
  00045	eb 05		 jmp	 SHORT $LN11@CheckCastl@2
$LN9@CheckCastl@2:
  00047	1b c0		 sbb	 eax, eax
  00049	83 d8 ff	 sbb	 eax, -1
$LN11@CheckCastl@2:
  0004c	85 c0		 test	 eax, eax

; 156  : 	{
; 157  : 		return FALSE;

  0004e	74 c7		 je	 SHORT $LN16@CheckCastl@2

; 158  : 	}
; 159  : 
; 160  : 	_GUILD_INFO_STRUCT * lpGuildInfo = gObj[iIndex].lpGuild;

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00055	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0005b	8b 84 07 38 04
	00 00		 mov	 eax, DWORD PTR [edi+eax+1080]

; 161  : 	
; 162  : 	if ( lpGuildInfo == NULL )

  00062	85 c0		 test	 eax, eax

; 163  : 	{
; 164  : 		return FALSE;

  00064	74 b1		 je	 SHORT $LN16@CheckCastl@2

; 165  : 	}
; 166  : 	
; 167  : 	TUnionInfo * pUnionInfo = UnionManager.SearchUnion(lpGuildInfo->iGuildUnion);

  00066	8b 88 1c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1820]
  0006c	51		 push	 ecx
  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnionManager@@3VTUnion@@A ; UnionManager
  00072	e8 00 00 00 00	 call	 ?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z ; TUnion::SearchUnion

; 168  : 
; 169  : 	if ( pUnionInfo == NULL )

  00077	85 c0		 test	 eax, eax

; 170  : 	{
; 171  : 		return FALSE;

  00079	74 9c		 je	 SHORT $LN16@CheckCastl@2

; 172  : 	}
; 173  : 
; 174  : 	if ( strcmp( pUnionInfo->m_szMasterGuild, this->m_szCastleOwnerGuild) == 0 )

  0007b	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0007e	83 c0 10	 add	 eax, 16			; 00000010H
$LL12@CheckCastl@2:
  00081	8a 10		 mov	 dl, BYTE PTR [eax]
  00083	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00085	75 27		 jne	 SHORT $LN13@CheckCastl@2
  00087	84 d2		 test	 dl, dl
  00089	74 12		 je	 SHORT $LN14@CheckCastl@2
  0008b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0008e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00091	75 1b		 jne	 SHORT $LN13@CheckCastl@2
  00093	83 c0 02	 add	 eax, 2
  00096	83 c1 02	 add	 ecx, 2
  00099	84 d2		 test	 dl, dl
  0009b	75 e4		 jne	 SHORT $LL12@CheckCastl@2
$LN14@CheckCastl@2:
  0009d	33 c0		 xor	 eax, eax
  0009f	33 d2		 xor	 edx, edx
  000a1	85 c0		 test	 eax, eax
  000a3	0f 94 c2	 sete	 dl
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	8b c2		 mov	 eax, edx

; 175  : 	{
; 176  : 		return TRUE;
; 177  : 	}
; 178  : 
; 179  : 	return FALSE;
; 180  : }

  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
$LN13@CheckCastl@2:

; 172  : 	}
; 173  : 
; 174  : 	if ( strcmp( pUnionInfo->m_szMasterGuild, this->m_szCastleOwnerGuild) == 0 )

  000ae	1b c0		 sbb	 eax, eax
  000b0	83 d8 ff	 sbb	 eax, -1
  000b3	33 d2		 xor	 edx, edx
  000b5	85 c0		 test	 eax, eax
  000b7	0f 94 c2	 sete	 dl
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	8b c2		 mov	 eax, edx

; 175  : 	{
; 176  : 		return TRUE;
; 177  : 	}
; 178  : 
; 179  : 	return FALSE;
; 180  : }

  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ENDP ; CCastleSiegeSync::CheckCastleOwnerUnionMember
_TEXT	ENDS
PUBLIC	?CheckOverlapCsMarks@CCastleSiegeSync@@QAEHH@Z	; CCastleSiegeSync::CheckOverlapCsMarks
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
;	COMDAT ?CheckOverlapCsMarks@CCastleSiegeSync@@QAEHH@Z
_TEXT	SEGMENT
_x$204640 = -4						; size = 4
_iIndex$ = 8						; size = 4
?CheckOverlapCsMarks@CCastleSiegeSync@@QAEHH@Z PROC	; CCastleSiegeSync::CheckOverlapCsMarks, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 184  : 	for ( int x=INVENTORY_BAG_START;x<MAIN_INVENTORY_SIZE;x++)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  00008	56		 push	 esi
  00009	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  0000f	57		 push	 edi
  00010	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _x$204640[ebp], 12 ; 0000000cH
  0001d	be f0 09 00 00	 mov	 esi, 2544		; 000009f0H
$LL7@CheckOverl:

; 185  : 	{
; 186  : 		if ( gObj[iIndex].pInventory[x].IsItem() == TRUE )

  00022	8b 8c 3b 24 0e
	00 00		 mov	 ecx, DWORD PTR [ebx+edi+3620]
  00029	03 ce		 add	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00030	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	83 f8 01	 cmp	 eax, 1
  00039	75 38		 jne	 SHORT $LN6@CheckOverl

; 187  : 		{
; 188  : 			if ( gObj[iIndex].pInventory[x].m_Type == ITEMGET(14,21) )

  0003b	8b 84 3b 24 0e
	00 00		 mov	 eax, DWORD PTR [ebx+edi+3620]
  00042	b9 15 1c 00 00	 mov	 ecx, 7189		; 00001c15H
  00047	66 39 4c 30 06	 cmp	 WORD PTR [eax+esi+6], cx
  0004c	75 25		 jne	 SHORT $LN6@CheckOverl

; 189  : 			{
; 190  : 				if ( gObj[iIndex].pInventory[x].m_Level == 3 )

  0004e	66 83 7c 30 08
	03		 cmp	 WORD PTR [eax+esi+8], 3
  00054	75 1d		 jne	 SHORT $LN6@CheckOverl

; 191  : 				{
; 192  : 					int op = (int)gObj[iIndex].pInventory[x].m_Durability;

  00056	d9 44 30 24	 fld	 DWORD PTR [eax+esi+36]
  0005a	e8 00 00 00 00	 call	 __ftol2_sse

; 193  : 
; 194  : 					if ( ITEM_DUR_RANGE(op) != FALSE)

  0005f	85 c0		 test	 eax, eax
  00061	78 10		 js	 SHORT $LN6@CheckOverl
  00063	33 d2		 xor	 edx, edx
  00065	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  0006a	0f 9e c2	 setle	 dl
  0006d	8b c2		 mov	 eax, edx
  0006f	85 c0		 test	 eax, eax
  00071	75 1d		 jne	 SHORT $LN13@CheckOverl
$LN6@CheckOverl:

; 184  : 	for ( int x=INVENTORY_BAG_START;x<MAIN_INVENTORY_SIZE;x++)

  00073	ff 45 fc	 inc	 DWORD PTR _x$204640[ebp]
  00076	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0007c	81 fe f0 a8 00
	00		 cmp	 esi, 43248		; 0000a8f0H
  00082	7c 9e		 jl	 SHORT $LL7@CheckOverl

; 197  : 					}
; 198  : 				}
; 199  : 			}
; 200  : 		}
; 201  : 	}
; 202  : 
; 203  : 	return -1;

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	83 c8 ff	 or	 eax, -1
  00089	5b		 pop	 ebx

; 204  : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN13@CheckOverl:

; 195  : 					{
; 196  : 						return x;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _x$204640[ebp]
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 204  : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?CheckOverlapCsMarks@CCastleSiegeSync@@QAEHH@Z ENDP	; CCastleSiegeSync::CheckOverlapCsMarks
_TEXT	ENDS
PUBLIC	??0CCastleSiegeSync@@QAE@XZ			; CCastleSiegeSync::CCastleSiegeSync
; Function compile flags: /Ogtp
;	COMDAT ??0CCastleSiegeSync@@QAE@XZ
_TEXT	SEGMENT
??0CCastleSiegeSync@@QAE@XZ PROC			; CCastleSiegeSync::CCastleSiegeSync, COMDAT
; _this$ = ecx

; 10   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleSiegeSync@@6B@

; 11   : 	this->Clear();

  00006	e8 00 00 00 00	 call	 ?Clear@CCastleSiegeSync@@QAEXXZ ; CCastleSiegeSync::Clear

; 12   : }

  0000b	8b c1		 mov	 eax, ecx
  0000d	c3		 ret	 0
??0CCastleSiegeSync@@QAE@XZ ENDP			; CCastleSiegeSync::CCastleSiegeSync
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleSiegeSync@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleSiegeSync@@UAEPAXI@Z PROC			; CCastleSiegeSync::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleSiegeSync@@UAE@XZ ; CCastleSiegeSync::~CCastleSiegeSync
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCastleSiegeSync@@UAEPAXI@Z ENDP			; CCastleSiegeSync::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z	; CCastleSiegeSync::GetTaxRateChaos
; Function compile flags: /Ogtp
;	COMDAT ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z PROC		; CCastleSiegeSync::GetTaxRateChaos, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 42   : 	int iCurTaxRateChaos = this->m_iCurTaxRateChaos;
; 43   : 
; 44   : 	if ( this->CheckCastleOwnerMember(iIndex) == TRUE || this->CheckCastleOwnerUnionMember(iIndex) == TRUE )

  00006	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  00014	83 f8 01	 cmp	 eax, 1
  00017	74 0d		 je	 SHORT $LN1@GetTaxRate
  00019	57		 push	 edi
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  00021	83 f8 01	 cmp	 eax, 1
  00024	75 09		 jne	 SHORT $LN5@GetTaxRate
$LN1@GetTaxRate:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 45   : 	{
; 46   : 		iCurTaxRateChaos = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	5b		 pop	 ebx

; 50   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN5@GetTaxRate:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 47   : 	}
; 48   : 
; 49   : 	return iCurTaxRateChaos;

  00031	8b c3		 mov	 eax, ebx
  00033	5b		 pop	 ebx

; 50   : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ENDP		; CCastleSiegeSync::GetTaxRateChaos
_TEXT	ENDS
PUBLIC	?GetTaxRateStore@CCastleSiegeSync@@QAEHH@Z	; CCastleSiegeSync::GetTaxRateStore
; Function compile flags: /Ogtp
;	COMDAT ?GetTaxRateStore@CCastleSiegeSync@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetTaxRateStore@CCastleSiegeSync@@QAEHH@Z PROC		; CCastleSiegeSync::GetTaxRateStore, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 54   : 	int iCurTaxRateStore = this->m_iCurTaxRateStore;
; 55   : 
; 56   : 	if ( this->CheckCastleOwnerMember(iIndex) == TRUE || this->CheckCastleOwnerUnionMember(iIndex) == TRUE )

  00006	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  00014	83 f8 01	 cmp	 eax, 1
  00017	74 0d		 je	 SHORT $LN1@GetTaxRate@2
  00019	57		 push	 edi
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  00021	83 f8 01	 cmp	 eax, 1
  00024	75 09		 jne	 SHORT $LN5@GetTaxRate@2
$LN1@GetTaxRate@2:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 57   : 	{
; 58   : 		iCurTaxRateStore = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	5b		 pop	 ebx

; 62   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN5@GetTaxRate@2:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 59   : 	}
; 60   : 
; 61   : 	return iCurTaxRateStore;

  00031	8b c3		 mov	 eax, ebx
  00033	5b		 pop	 ebx

; 62   : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?GetTaxRateStore@CCastleSiegeSync@@QAEHH@Z ENDP		; CCastleSiegeSync::GetTaxRateStore
_TEXT	ENDS
PUBLIC	?GetTaxHuntZone@CCastleSiegeSync@@QAEHHH@Z	; CCastleSiegeSync::GetTaxHuntZone
; Function compile flags: /Ogtp
;	COMDAT ?GetTaxHuntZone@CCastleSiegeSync@@QAEHHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_bCheckOwnerGuild$ = 12					; size = 4
?GetTaxHuntZone@CCastleSiegeSync@@QAEHHH@Z PROC		; CCastleSiegeSync::GetTaxHuntZone, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	int iCurTaxHuntZone = this->m_iCurTaxHuntZone;
; 67   : 
; 68   : 	if ( bCheckOwnerGuild == TRUE )

  00003	83 7d 0c 01	 cmp	 DWORD PTR _bCheckOwnerGuild$[ebp], 1
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000e	75 2e		 jne	 SHORT $LN7@GetTaxHunt

; 69   : 	{
; 70   : 		if ( this->CheckCastleOwnerMember(iIndex) == TRUE || this->CheckCastleOwnerUnionMember(iIndex) == TRUE )

  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  0001a	83 f8 01	 cmp	 eax, 1
  0001d	74 0d		 je	 SHORT $LN1@GetTaxHunt
  0001f	57		 push	 edi
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  00027	83 f8 01	 cmp	 eax, 1
  0002a	75 09		 jne	 SHORT $LN6@GetTaxHunt
$LN1@GetTaxHunt:
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 71   : 		{
; 72   : 			iCurTaxHuntZone = 0;

  0002e	33 c0		 xor	 eax, eax
  00030	5b		 pop	 ebx

; 77   : }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN6@GetTaxHunt:
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	return iCurTaxHuntZone;

  00037	8b c3		 mov	 eax, ebx
  00039	5b		 pop	 ebx

; 77   : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN7@GetTaxHunt:
  0003e	5e		 pop	 esi

; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	return iCurTaxHuntZone;

  0003f	8b c3		 mov	 eax, ebx
  00041	5b		 pop	 ebx

; 77   : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?GetTaxHuntZone@CCastleSiegeSync@@QAEHHH@Z ENDP		; CCastleSiegeSync::GetTaxHuntZone
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CastleSiegeSync@@YAXXZ
text$yc	SEGMENT
??__Eg_CastleSiegeSync@@YAXXZ PROC			; `dynamic initializer for 'g_CastleSiegeSync'', COMDAT

; 206  : CCastleSiegeSync g_CastleSiegeSync;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00005	e8 00 00 00 00	 call	 ??0CCastleSiegeSync@@QAE@XZ ; CCastleSiegeSync::CCastleSiegeSync
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CastleSiegeSync@@YAXXZ ; `dynamic atexit destructor for 'g_CastleSiegeSync''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CastleSiegeSync@@YAXXZ ENDP			; `dynamic initializer for 'g_CastleSiegeSync''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CastleSiegeSync@@YAXXZ
text$yd	SEGMENT
??__Fg_CastleSiegeSync@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CastleSiegeSync'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00005	e9 00 00 00 00	 jmp	 ??1CCastleSiegeSync@@UAE@XZ ; CCastleSiegeSync::~CCastleSiegeSync
??__Fg_CastleSiegeSync@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CastleSiegeSync''
text$yd	ENDS
PUBLIC	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A	; g_CastleSiegeSync
_BSS	SEGMENT
?g_CastleSiegeSync@@3VCCastleSiegeSync@@A DB 02cH DUP (?) ; g_CastleSiegeSync
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CastleSiegeSync$initializer$ DD FLAT:??__Eg_CastleSiegeSync@@YAXXZ
CRT$XCU	ENDS
END
