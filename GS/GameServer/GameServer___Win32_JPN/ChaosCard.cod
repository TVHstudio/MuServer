; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ChaosCard.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CChaosCard@@6B@				; CChaosCard::`vftable'
PUBLIC	??0CChaosCard@@QAE@XZ				; CChaosCard::CChaosCard
PUBLIC	??_R4CChaosCard@@6B@				; CChaosCard::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCChaosCard@@@8				; CChaosCard `RTTI Type Descriptor'
PUBLIC	??_R3CChaosCard@@8				; CChaosCard::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CChaosCard@@8				; CChaosCard::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CChaosCard@@8			; CChaosCard::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECChaosCard@@UAEPAXI@Z:PROC			; CChaosCard::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CChaosCard@@8
; File e:\work\tranet_version\gs\gameserver\chaoscard.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CChaosCard@@8 DD FLAT:??_R0?AVCChaosCard@@@8 ; CChaosCard::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CChaosCard@@8
rdata$r	ENDS
;	COMDAT ??_R2CChaosCard@@8
rdata$r	SEGMENT
??_R2CChaosCard@@8 DD FLAT:??_R1A@?0A@EA@CChaosCard@@8	; CChaosCard::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CChaosCard@@8
rdata$r	SEGMENT
??_R3CChaosCard@@8 DD 00H				; CChaosCard::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CChaosCard@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCChaosCard@@@8
_DATA	SEGMENT
??_R0?AVCChaosCard@@@8 DD FLAT:??_7type_info@@6B@	; CChaosCard `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCChaosCard@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CChaosCard@@6B@
rdata$r	SEGMENT
??_R4CChaosCard@@6B@ DD 00H				; CChaosCard::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCChaosCard@@@8
	DD	FLAT:??_R3CChaosCard@@8
rdata$r	ENDS
;	COMDAT ??_7CChaosCard@@6B@
CONST	SEGMENT
??_7CChaosCard@@6B@ DD FLAT:??_R4CChaosCard@@6B@	; CChaosCard::`vftable'
	DD	FLAT:??_ECChaosCard@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CChaosCard@@QAE@XZ
_TEXT	SEGMENT
??0CChaosCard@@QAE@XZ PROC				; CChaosCard::CChaosCard, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CChaosCard@@6B@

; 13   : 
; 14   : }

  00008	c3		 ret	 0
??0CChaosCard@@QAE@XZ ENDP				; CChaosCard::CChaosCard
_TEXT	ENDS
PUBLIC	??1CChaosCard@@UAE@XZ				; CChaosCard::~CChaosCard
; Function compile flags: /Ogtp
;	COMDAT ??1CChaosCard@@UAE@XZ
_TEXT	SEGMENT
??1CChaosCard@@UAE@XZ PROC				; CChaosCard::~CChaosCard, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CChaosCard@@6B@

; 18   : 
; 19   : }

  00006	c3		 ret	 0
??1CChaosCard@@UAE@XZ ENDP				; CChaosCard::~CChaosCard
_TEXT	ENDS
PUBLIC	?Initialize@CChaosCard@@QAEXXZ			; CChaosCard::Initialize
; Function compile flags: /Ogtp
;	COMDAT ?Initialize@CChaosCard@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CChaosCard@@QAEXXZ PROC			; CChaosCard::Initialize, COMDAT
; _this$ = ecx

; 23   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)
; 24   : 	{
; 25   : 		this->m_ChaosCardList[i].HaveInfo = 0; //0x04

  00000	33 c0		 xor	 eax, eax
  00002	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 26   : 		this->m_ChaosCardList[i].szChaosCardName[0] = NULL; //0x05
; 27   : 		this->m_ChaosCardList[i].ChaosCardInfo = 0; //0x1C

  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00009	66 89 41 20	 mov	 WORD PTR [ecx+32], ax
  0000d	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  00010	66 89 41 3c	 mov	 WORD PTR [ecx+60], ax
  00014	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00017	66 89 41 58	 mov	 WORD PTR [ecx+88], ax
  0001b	89 41 70	 mov	 DWORD PTR [ecx+112], eax
  0001e	66 89 41 74	 mov	 WORD PTR [ecx+116], ax
  00022	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 28   : 	}
; 29   : }

  00028	c3		 ret	 0
?Initialize@CChaosCard@@QAEXXZ ENDP			; CChaosCard::Initialize
_TEXT	ENDS
PUBLIC	?Load@CChaosCard@@QAE_NPAD0@Z			; CChaosCard::Load
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Load@CCashLotterySystem@@QAEXPAD@Z:PROC	; CCashLotterySystem::Load
EXTRN	??0CCashLotterySystem@@QAE@XZ:PROC		; CCashLotterySystem::CCashLotterySystem
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CChaosCard@@QAE_NPAD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CChaosCard@@QAE_NPAD0@Z$0
__ehfuncinfo$?Load@CChaosCard@@QAE_NPAD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CChaosCard@@QAE_NPAD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?Load@CChaosCard@@QAE_NPAD0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T189031 = 8						; size = 4
_szChaosCardName$ = 8					; size = 4
_lpszFileName$ = 12					; size = 4
?Load@CChaosCard@@QAE_NPAD0@Z PROC			; CChaosCard::Load, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CChaosCard@@QAE_NPAD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 33   : 	CCashLotterySystem * ChaosCard = 0; //ebp-14
; 34   : 
; 35   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)

  00024	33 c0		 xor	 eax, eax
  00026	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL5@Load:

; 36   : 	{
; 37   : 		if(this->m_ChaosCardList[i].HaveInfo == false)

  00030	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00033	74 1e		 je	 SHORT $LN14@Load

; 33   : 	CCashLotterySystem * ChaosCard = 0; //ebp-14
; 34   : 
; 35   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)

  00035	40		 inc	 eax
  00036	83 c2 1c	 add	 edx, 28			; 0000001cH
  00039	83 f8 05	 cmp	 eax, 5
  0003c	7c f2		 jl	 SHORT $LL5@Load
$LN3@Load:

; 54   : 		}
; 55   : 	}
; 56   : 
; 57   : 	return 0;

  0003e	32 c0		 xor	 al, al

; 58   : }

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN14@Load:

; 38   : 		{
; 39   : 			this->m_ChaosCardList[i].HaveInfo = true;

  00053	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  0005a	2b d0		 sub	 edx, eax

; 40   : 			strcpy(this->m_ChaosCardList[i].szChaosCardName, szChaosCardName);

  0005c	8b 45 08	 mov	 eax, DWORD PTR _szChaosCardName$[ebp]
  0005f	8d 34 91	 lea	 esi, DWORD PTR [ecx+edx*4]
  00062	8d 56 05	 lea	 edx, DWORD PTR [esi+5]
  00065	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00069	2b d0		 sub	 edx, eax
  0006b	eb 03 8d 49 00	 npad	 5
$LL8@Load:
  00070	8a 08		 mov	 cl, BYTE PTR [eax]
  00072	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00075	40		 inc	 eax
  00076	84 c9		 test	 cl, cl
  00078	75 f6		 jne	 SHORT $LL8@Load

; 41   : 
; 42   : 			ChaosCard = new CCashLotterySystem; //good

  0007a	68 ec 76 00 00	 push	 30444			; 000076ecH
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4
  00087	89 45 08	 mov	 DWORD PTR $T189031[ebp], eax
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00091	85 c0		 test	 eax, eax
  00093	74 0b		 je	 SHORT $LN9@Load
  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 ??0CCashLotterySystem@@QAE@XZ ; CCashLotterySystem::CCashLotterySystem
  0009c	8b f8		 mov	 edi, eax
  0009e	eb 02		 jmp	 SHORT $LN10@Load
$LN9@Load:
  000a0	33 ff		 xor	 edi, edi
$LN10@Load:
  000a2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 43   : 
; 44   : 			if(ChaosCard == NULL)

  000a9	85 ff		 test	 edi, edi

; 45   : 			{
; 46   : 				return 0;

  000ab	74 91		 je	 SHORT $LN3@Load

; 47   : 			}
; 48   : 
; 49   : 			ChaosCard->Load(lpszFileName);

  000ad	8b 45 0c	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  000b0	50		 push	 eax
  000b1	8b cf		 mov	 ecx, edi
  000b3	e8 00 00 00 00	 call	 ?Load@CCashLotterySystem@@QAEXPAD@Z ; CCashLotterySystem::Load

; 50   : 
; 51   : 			this->m_ChaosCardList[i].ChaosCardInfo = ChaosCard; //Chaos Card List Insert

  000b8	89 7e 1c	 mov	 DWORD PTR [esi+28], edi

; 52   : 
; 53   : 			return 1;

  000bb	b0 01		 mov	 al, 1

; 58   : }

  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CChaosCard@@QAE_NPAD0@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T189031[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Load@CChaosCard@@QAE_NPAD0@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CChaosCard@@QAE_NPAD0@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CChaosCard@@QAE_NPAD0@Z ENDP			; CChaosCard::Load
PUBLIC	?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z ; CChaosCard::GetChaosCardData
; Function compile flags: /Ogtp
;	COMDAT ?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_szChaosCardName$ = 8					; size = 4
?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z PROC ; CChaosCard::GetChaosCardData, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)

  0000a	8d 71 05	 lea	 esi, DWORD PTR [ecx+5]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _szChaosCardName$[ebp]
  00010	33 ff		 xor	 edi, edi
$LL5@GetChaosCa:

; 63   : 	{
; 64   : 		if(this->m_ChaosCardList[i].HaveInfo == false)

  00012	80 7e ff 00	 cmp	 BYTE PTR [esi-1], 0
  00016	74 31		 je	 SHORT $LN4@GetChaosCa

; 65   : 		{
; 66   : 			continue;
; 67   : 		}
; 68   : 
; 69   : 		if( strcmp(this->m_ChaosCardList[i].szChaosCardName, szChaosCardName) == 0) //if success

  00018	8b d1		 mov	 edx, ecx
  0001a	8b c6		 mov	 eax, esi
  0001c	8d 64 24 00	 npad	 4
$LL11@GetChaosCa:
  00020	8a 18		 mov	 bl, BYTE PTR [eax]
  00022	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00024	75 1a		 jne	 SHORT $LN12@GetChaosCa
  00026	84 db		 test	 bl, bl
  00028	74 12		 je	 SHORT $LN13@GetChaosCa
  0002a	8a 58 01	 mov	 bl, BYTE PTR [eax+1]
  0002d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00030	75 0e		 jne	 SHORT $LN12@GetChaosCa
  00032	83 c0 02	 add	 eax, 2
  00035	83 c2 02	 add	 edx, 2
  00038	84 db		 test	 bl, bl
  0003a	75 e4		 jne	 SHORT $LL11@GetChaosCa
$LN13@GetChaosCa:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN14@GetChaosCa
$LN12@GetChaosCa:
  00040	1b c0		 sbb	 eax, eax
  00042	83 d8 ff	 sbb	 eax, -1
$LN14@GetChaosCa:
  00045	85 c0		 test	 eax, eax
  00047	74 14		 je	 SHORT $LN9@GetChaosCa
$LN4@GetChaosCa:

; 62   : 	for(int i = 0; i < MAX_CHAOS_CARD; i++)

  00049	47		 inc	 edi
  0004a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0004d	83 ff 05	 cmp	 edi, 5
  00050	7c c0		 jl	 SHORT $LL5@GetChaosCa

; 72   : 		}
; 73   : 	}
; 74   : 
; 75   : 	return NULL;

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	33 c0		 xor	 eax, eax
  00056	5b		 pop	 ebx

; 76   : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN9@GetChaosCa:

; 70   : 		{
; 71   : 			return this->m_ChaosCardList[i].ChaosCardInfo;

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00063	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0006a	5f		 pop	 edi
  0006b	2b c8		 sub	 ecx, eax
  0006d	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 76   : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z ENDP ; CChaosCard::GetChaosCardData
_TEXT	ENDS
PUBLIC	?CheckChaosCardInfo@CChaosCard@@QAEHPADPAVCItem@@@Z ; CChaosCard::CheckChaosCardInfo
EXTRN	?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z:PROC ; CCashLotterySystem::GetItem
; Function compile flags: /Ogtp
;	COMDAT ?CheckChaosCardInfo@CChaosCard@@QAEHPADPAVCItem@@@Z
_TEXT	SEGMENT
_szChaosCardName$ = 8					; size = 4
_lpItem$ = 12						; size = 4
?CheckChaosCardInfo@CChaosCard@@QAEHPADPAVCItem@@@Z PROC ; CChaosCard::CheckChaosCardInfo, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 	CCashLotterySystem * ChaosCard = 0;
; 81   : 	
; 82   : 	ChaosCard = this->GetChaosCardData(szChaosCardName); //find and get chaos card info by name

  00003	8b 45 08	 mov	 eax, DWORD PTR _szChaosCardName$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?GetChaosCardData@CChaosCard@@QAEPAVCCashLotterySystem@@PAD@Z ; CChaosCard::GetChaosCardData

; 83   : 
; 84   : 	if(ChaosCard == NULL) //doesn't exist, empty!

  0000c	85 c0		 test	 eax, eax
  0000e	75 04		 jne	 SHORT $LN2@CheckChaos

; 92   : 	{
; 93   : 		return 0;
; 94   : 	}
; 95   : 
; 96   : 	return 1;
; 97   : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
$LN2@CheckChaos:
  00014	56		 push	 esi

; 85   : 	{
; 86   : 		return 0;
; 87   : 	}
; 88   : 
; 89   : 	ChaosCard->GetItem(lpItem);

  00015	8b 75 0c	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00018	56		 push	 esi
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z ; CCashLotterySystem::GetItem

; 90   : 
; 91   : 	if(lpItem == NULL) //wtf?

  00020	33 c0		 xor	 eax, eax
  00022	85 f6		 test	 esi, esi
  00024	0f 95 c0	 setne	 al
  00027	5e		 pop	 esi

; 92   : 	{
; 93   : 		return 0;
; 94   : 	}
; 95   : 
; 96   : 	return 1;
; 97   : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?CheckChaosCardInfo@CChaosCard@@QAEHPADPAVCItem@@@Z ENDP ; CChaosCard::CheckChaosCardInfo
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCChaosCard@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCChaosCard@@UAEPAXI@Z PROC				; CChaosCard::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CChaosCard@@UAE@XZ	; CChaosCard::~CChaosCard
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCChaosCard@@UAEPAXI@Z ENDP				; CChaosCard::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ChaosCard@@YAXXZ
text$yc	SEGMENT
??__Eg_ChaosCard@@YAXXZ PROC				; `dynamic initializer for 'g_ChaosCard'', COMDAT

; 9    : CChaosCard g_ChaosCard;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCard@@3VCChaosCard@@A ; g_ChaosCard
  00005	e8 00 00 00 00	 call	 ??0CChaosCard@@QAE@XZ	; CChaosCard::CChaosCard
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ChaosCard@@YAXXZ ; `dynamic atexit destructor for 'g_ChaosCard''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ChaosCard@@YAXXZ ENDP				; `dynamic initializer for 'g_ChaosCard''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ChaosCard@@YAXXZ
text$yd	SEGMENT
??__Fg_ChaosCard@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ChaosCard'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCard@@3VCChaosCard@@A ; g_ChaosCard
  00005	e9 00 00 00 00	 jmp	 ??1CChaosCard@@UAE@XZ	; CChaosCard::~CChaosCard
??__Fg_ChaosCard@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ChaosCard''
text$yd	ENDS
PUBLIC	?g_ChaosCard@@3VCChaosCard@@A			; g_ChaosCard
_BSS	SEGMENT
?g_ChaosCard@@3VCChaosCard@@A DB 090H DUP (?)		; g_ChaosCard
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ChaosCard$initializer$ DD FLAT:??__Eg_ChaosCard@@YAXXZ
CRT$XCU	ENDS
END
