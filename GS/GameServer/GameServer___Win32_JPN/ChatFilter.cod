; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ChatFilter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
EXTRN	_strstr:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 221  : 	{ return (char*)strstr((const char*)_Str, _SubStr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	e9 00 00 00 00	 jmp	 _strstr
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 134  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 06	 sar	 eax, 6

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 06	 shl	 eax, 6
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ PROC		; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ ENDP		; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 06	 sar	 eax, 6

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z PROC	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z PROC ; std::allocator<FILTER_INFO>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z ENDP ; std::allocator<FILTER_INFO>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ ; std::allocator<FILTER_INFO>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ PROC	; std::allocator<FILTER_INFO>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ ENDP	; std::allocator<FILTER_INFO>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Compat
_TEXT	ENDS
PUBLIC	??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z		; strcpy_s<64>
EXTRN	_strcpy_s:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Source$ = 12						; size = 4
??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z PROC		; strcpy_s<64>, COMDAT

; 104  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(errno_t, strcpy_s, _Deref_post_z_ char, _Dest, _In_z_ const char *, _Source)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Source$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00009	50		 push	 eax
  0000a	6a 40		 push	 64			; 00000040H
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _strcpy_s
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z ENDP		; strcpy_s<64>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z ; std::addressof<FILTER_INFO const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z PROC ; std::addressof<FILTER_INFO const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z ENDP ; std::addressof<FILTER_INFO const >
_TEXT	ENDS
PUBLIC	??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z PROC ; std::forward<FILTER_INFO &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z ENDP ; std::forward<FILTER_INFO &>
_TEXT	ENDS
PUBLIC	??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z ; std::allocator<FILTER_INFO>::construct<FILTER_INFO &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z PROC ; std::allocator<FILTER_INFO>::construct<FILTER_INFO &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 209  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z ENDP ; std::allocator<FILTER_INFO>::construct<FILTER_INFO &>
_TEXT	ENDS
PUBLIC	??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z ; std::forward<FILTER_INFO const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z PROC ; std::forward<FILTER_INFO const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z ENDP ; std::forward<FILTER_INFO const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z PROC ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z ENDP ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z ; std::_Construct<FILTER_INFO,FILTER_INFO const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z PROC ; std::_Construct<FILTER_INFO,FILTER_INFO const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@Construct:
  00017	5f		 pop	 edi

; 49   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z ENDP ; std::_Construct<FILTER_INFO,FILTER_INFO const &>
_TEXT	ENDS
PUBLIC	??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ; std::move<FILTER_INFO &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z PROC ; std::move<FILTER_INFO &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ENDP ; std::move<FILTER_INFO &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z ; std::_Val_type<FILTER_INFO *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z PROC ; std::_Val_type<FILTER_INFO *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z ENDP ; std::_Val_type<FILTER_INFO *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z ; std::_Destroy<FILTER_INFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z PROC ; std::_Destroy<FILTER_INFO>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z ENDP ; std::_Destroy<FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z PROC ; std::forward<FILTER_INFO>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ENDP ; std::forward<FILTER_INFO>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@ ; `string'
PUBLIC	?CheckSyntax@CChatFilter@@QAEXHPAD@Z		; CChatFilter::CheckSyntax
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@ DB '[Chat Fi'
	DB	'lter] ban %d min', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\chatfilter.cpp
CONST	ENDS
;	COMDAT ?CheckSyntax@CChatFilter@@QAEXHPAD@Z
_TEXT	SEGMENT
$T211476 = -12						; size = 8
$T211480 = -12						; size = 8
_n$210353 = -8						; size = 4
tv304 = -4						; size = 4
_aIndex$ = 8						; size = 4
_text$ = 12						; size = 4
?CheckSyntax@CChatFilter@@QAEXHPAD@Z PROC		; CChatFilter::CheckSyntax, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 126  : 	if(!this->m_Enable)

  00009	80 7b 01 00	 cmp	 BYTE PTR [ebx+1], 0
  0000d	0f 84 35 01 00
	00		 je	 $LN5@CheckSynta

; 127  : 	{
; 128  : 		return;
; 129  : 	}
; 130  : 
; 131  : 	if(strcmp(text, ZtConfig.Command.CommandPost))

  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 0c	 mov	 edi, DWORD PTR _text$[ebp]
  00018	be 30 03 00 00	 mov	 esi, OFFSET ?ZtConfig@@3VcZtConfigs@@A+816
  0001d	8b c7		 mov	 eax, edi
  0001f	90		 npad	 1
$LL30@CheckSynta:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00024	75 1a		 jne	 SHORT $LN31@CheckSynta
  00026	84 c9		 test	 cl, cl
  00028	74 12		 je	 SHORT $LN32@CheckSynta
  0002a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00030	75 0e		 jne	 SHORT $LN31@CheckSynta
  00032	83 c0 02	 add	 eax, 2
  00035	83 c6 02	 add	 esi, 2
  00038	84 c9		 test	 cl, cl
  0003a	75 e4		 jne	 SHORT $LL30@CheckSynta
$LN32@CheckSynta:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN33@CheckSynta
$LN31@CheckSynta:
  00040	1b c0		 sbb	 eax, eax
  00042	83 d8 ff	 sbb	 eax, -1
$LN33@CheckSynta:
  00045	33 c9		 xor	 ecx, ecx
  00047	3b c1		 cmp	 eax, ecx
  00049	74 09		 je	 SHORT $LN8@CheckSynta

; 132  : 	{
; 133  : 		if(text[0] == '/')

  0004b	80 3f 2f	 cmp	 BYTE PTR [edi], 47	; 0000002fH
  0004e	0f 84 f2 00 00
	00		 je	 $LN37@CheckSynta
$LN8@CheckSynta:

; 134  : 		{
; 135  : 			return;
; 136  : 		}
; 137  : 	}
; 138  : 
; 139  : 	for(int n = 0; n < this->m_FilterInfo.size(); n++)

  00054	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00057	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0005a	2b d0		 sub	 edx, eax
  0005c	c1 fa 06	 sar	 edx, 6
  0005f	89 4d f8	 mov	 DWORD PTR _n$210353[ebp], ecx
  00062	85 d2		 test	 edx, edx
  00064	0f 84 dc 00 00
	00		 je	 $LN37@CheckSynta
  0006a	89 4d fc	 mov	 DWORD PTR tv304[ebp], ecx
  0006d	8d 49 00	 npad	 3
$LL36@CheckSynta:
  00070	03 45 fc	 add	 eax, DWORD PTR tv304[ebp]

; 140  : 	{
; 141  : 		char* temp = text;
; 142  : 
; 143  : 		while(true)
; 144  : 		{
; 145  : 			temp = strstr(temp, this->m_FilterInfo[n].label);

  00073	50		 push	 eax
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 _strstr
  0007a	8b f0		 mov	 esi, eax
  0007c	83 c4 08	 add	 esp, 8

; 146  : 
; 147  : 			if(temp == 0)

  0007f	85 f6		 test	 esi, esi
  00081	74 43		 je	 SHORT $LN6@CheckSynta
$LL4@CheckSynta:

; 148  : 			{
; 149  : 				break;
; 150  : 			}
; 151  : 
; 152  : 			int len = strlen(this->m_FilterInfo[n].label);

  00083	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00086	03 45 fc	 add	 eax, DWORD PTR tv304[ebp]
  00089	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0008c	8d 64 24 00	 npad	 4
$LL34@CheckSynta:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL34@CheckSynta
  00097	2b c2		 sub	 eax, edx
  00099	8b f8		 mov	 edi, eax

; 153  : 
; 154  : 			memset(temp, 0x2A, len);

  0009b	57		 push	 edi
  0009c	6a 2a		 push	 42			; 0000002aH
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 _memset
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 
; 158  : 			if(len > 0)

  000a7	85 ff		 test	 edi, edi
  000a9	7f 3e		 jg	 SHORT $LN29@CheckSynta

; 140  : 	{
; 141  : 		char* temp = text;
; 142  : 
; 143  : 		while(true)
; 144  : 		{
; 145  : 			temp = strstr(temp, this->m_FilterInfo[n].label);

  000ab	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000ae	03 45 fc	 add	 eax, DWORD PTR tv304[ebp]

; 155  : 
; 156  : 			temp += len;

  000b1	03 fe		 add	 edi, esi
  000b3	50		 push	 eax
  000b4	57		 push	 edi
  000b5	e8 00 00 00 00	 call	 _strstr
  000ba	8b f0		 mov	 esi, eax
  000bc	83 c4 08	 add	 esp, 8
  000bf	85 f6		 test	 esi, esi
  000c1	75 c0		 jne	 SHORT $LL4@CheckSynta

; 146  : 
; 147  : 			if(temp == 0)

  000c3	8b 7d 0c	 mov	 edi, DWORD PTR _text$[ebp]
$LN6@CheckSynta:

; 134  : 		{
; 135  : 			return;
; 136  : 		}
; 137  : 	}
; 138  : 
; 139  : 	for(int n = 0; n < this->m_FilterInfo.size(); n++)

  000c6	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000c9	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR _n$210353[ebp]
  000cf	83 45 fc 40	 add	 DWORD PTR tv304[ebp], 64 ; 00000040H
  000d3	2b d0		 sub	 edx, eax
  000d5	41		 inc	 ecx
  000d6	c1 fa 06	 sar	 edx, 6
  000d9	89 4d f8	 mov	 DWORD PTR _n$210353[ebp], ecx
  000dc	3b ca		 cmp	 ecx, edx
  000de	72 90		 jb	 SHORT $LL36@CheckSynta
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 166  : 
; 167  : 				return;
; 168  : 			}
; 169  : 		}
; 170  : 	}
; 171  : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 08 00	 ret	 8
$LN29@CheckSynta:

; 159  : 			{
; 160  : 				LPOBJ lpUser = &gObj[aIndex];

  000e9	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  000ec	8b f7		 mov	 esi, edi
  000ee	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000f4	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 161  : 
; 162  : 				lpUser->BanPost = time(NULL) + ( this->m_iChatBanMin * 60 );

  000fa	6a 00		 push	 0
  000fc	e8 00 00 00 00	 call	 __time64
  00101	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00104	89 55 f8	 mov	 DWORD PTR $T211476[ebp+4], edx
  00107	8b d1		 mov	 edx, ecx
  00109	c1 e2 04	 shl	 edx, 4
  0010c	2b d1		 sub	 edx, ecx
  0010e	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 163  : 				lpUser->BanChat = time(NULL) + ( this->m_iChatBanMin * 60 );

  00111	6a 00		 push	 0
  00113	89 86 b8 27 00
	00		 mov	 DWORD PTR [esi+10168], eax
  00119	e8 00 00 00 00	 call	 __time64
  0011e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00121	89 55 f8	 mov	 DWORD PTR $T211480[ebp+4], edx
  00124	8b d1		 mov	 edx, ecx
  00126	c1 e2 04	 shl	 edx, 4
  00129	2b d1		 sub	 edx, ecx
  0012b	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  0012e	89 86 b4 27 00
	00		 mov	 DWORD PTR [esi+10164], eax

; 164  : 
; 165  : 				MsgOutput(aIndex, "[Chat Filter] ban %d min", this->m_iChatBanMin);

  00134	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00137	51		 push	 ecx
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@
  0013d	57		 push	 edi
  0013e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00143	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@CheckSynta:
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
$LN5@CheckSynta:
  00148	5b		 pop	 ebx

; 166  : 
; 167  : 				return;
; 168  : 			}
; 169  : 		}
; 170  : 	}
; 171  : }

  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 08 00	 ret	 8
?CheckSyntax@CChatFilter@@QAEXHPAD@Z ENDP		; CChatFilter::CheckSyntax
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z PROC ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z ENDP ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 03	 mov	 edx, 67108863		; 03ffffffH
  0000d	c1 f8 06	 sar	 eax, 6
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z ; std::_Allocate<FILTER_INFO>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z
_TEXT	SEGMENT
$T211575 = -12						; size = 12
$T211580 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z PROC ; std::_Allocate<FILTER_INFO>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 40		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	c1 e1 06	 shl	 ecx, 6
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	8d 45 08	 lea	 eax, DWORD PTR $T211580[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T211575[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T211580[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T211575[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T211575[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z ENDP ; std::_Allocate<FILTER_INFO>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z ; std::allocator<FILTER_INFO>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z PROC ; std::allocator<FILTER_INFO>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN5@construct@2:
  00017	5f		 pop	 edi

; 198  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z ENDP ; std::allocator<FILTER_INFO>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<FILTER_INFO *,FILTER_INFO *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<FILTER_INFO *,FILTER_INFO *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN1@Move
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 40	 add	 edx, 64			; 00000040H
  0001a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0001f	83 c0 40	 add	 eax, 64			; 00000040H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL3@Move
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN1@Move:
  0002a	5b		 pop	 ebx

; 2515 : 	return (_Dest);
; 2516 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<FILTER_INFO *,FILTER_INFO *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z ; std::allocator<FILTER_INFO>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z PROC ; std::allocator<FILTER_INFO>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z ENDP ; std::allocator<FILTER_INFO>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z ; std::allocator<FILTER_INFO>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z PROC ; std::allocator<FILTER_INFO>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@3:
  00017	5f		 pop	 edi

; 203  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z ENDP ; std::allocator<FILTER_INFO>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::vector<FILTER_INFO,std::allocator<FILTER_INFO> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::vector<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::vector<FILTER_INFO,std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z
_TEXT	SEGMENT
$T211689 = -12						; size = 12
$T211681 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z PROC ; std::allocator<FILTER_INFO>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN1@allocate
  0000f	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00015	77 10		 ja	 SHORT $LN3@allocate
  00017	c1 e1 06	 shl	 ecx, 6
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  00027	8d 45 08	 lea	 eax, DWORD PTR $T211681[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T211689[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T211681[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T211689[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T211689[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z ENDP ; std::allocator<FILTER_INFO>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN9@Cons_val@2:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z ; std::_Move<FILTER_INFO *,FILTER_INFO *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z PROC ; std::_Move<FILTER_INFO *,FILTER_INFO *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN5@Move@2
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL7@Move@2:
  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 40	 add	 edx, 64			; 00000040H
  0001a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0001f	83 c0 40	 add	 eax, 64			; 00000040H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL7@Move@2
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN5@Move@2:
  0002a	5b		 pop	 ebx

; 2536 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z ENDP ; std::_Move<FILTER_INFO *,FILTER_INFO *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z PROC ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z ENDP ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@3:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<FILTER_INFO> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<FILTER_INFO> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>
  0001e	83 c6 40	 add	 esi, 64			; 00000040H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 40	 add	 edi, 64			; 00000040H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z ; std::_Destroy_range<std::allocator<FILTER_INFO> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z PROC ; std::_Destroy_range<std::allocator<FILTER_INFO> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z ; std::_Uninitialized_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z
_TEXT	SEGMENT
__Cat$211875 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z PROC ; std::_Uninitialized_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$211875[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z ENDP ; std::_Uninitialized_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Umove<FILTER_INFO *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$211898 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Umove<FILTER_INFO *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$211898[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Umove<FILTER_INFO *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	89 1e		 mov	 DWORD PTR [esi], ebx
  00014	3b da		 cmp	 ebx, edx
  00016	74 27		 je	 SHORT $LN39@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 1d		 je	 SHORT $LN30@erase
  0001f	57		 push	 edi
$LL32@erase:
  00020	8b f2		 mov	 esi, edx
  00022	8b fb		 mov	 edi, ebx
  00024	83 c2 40	 add	 edx, 64			; 00000040H
  00027	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002c	83 c3 40	 add	 ebx, 64			; 00000040H
  0002f	f3 a5		 rep movsd
  00031	3b d0		 cmp	 edx, eax
  00033	75 eb		 jne	 SHORT $LL32@erase
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0003c	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN39@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1214 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$210607 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$212068 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 03	 cmp	 eax, 67108863		; 03ffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 06	 sar	 ecx, 6
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 57		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$212068[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$210607[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	2b f8		 sub	 edi, eax

; 761  : 			if (this->_Myfirst != 0)

  00082	85 c0		 test	 eax, eax
  00084	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  0008f	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00092	c1 e0 06	 shl	 eax, 6
  00095	03 c3		 add	 eax, ebx

; 770  : 			this->_Mylast = _Ptr + _Size;

  00097	83 e7 c0	 and	 edi, -64		; ffffffc0H
  0009a	03 fb		 add	 edi, ebx
  0009c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0009f	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a2	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b8	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$210607[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c1	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000cd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
PUBLIC	??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	53		 push	 ebx
  00008	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 2c		 je	 SHORT $LN19@clear
  00011	8b c2		 mov	 eax, edx
  00013	3b d2		 cmp	 edx, edx
  00015	74 23		 je	 SHORT $LN48@clear
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL50@clear:
  00020	8b f0		 mov	 esi, eax
  00022	8b fb		 mov	 edi, ebx
  00024	83 c0 40	 add	 eax, 64			; 00000040H
  00027	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002c	83 c3 40	 add	 ebx, 64			; 00000040H
  0002f	f3 a5		 rep movsd
  00031	3b c2		 cmp	 eax, edx
  00033	75 eb		 jne	 SHORT $LL50@clear
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN48@clear:
  0003a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN19@clear:
  0003d	5b		 pop	 ebx

; 1219 : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 03	 mov	 edi, 67108863		; 03ffffffH
  00014	c1 f8 06	 sar	 eax, 6
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 06	 sar	 edx, 6
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 03	 mov	 edi, 67108863		; 03ffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CChatFilter@@QAE@XZ				; CChatFilter::CChatFilter
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\chatfilter.cpp
;	COMDAT ??0CChatFilter@@QAE@XZ
_TEXT	SEGMENT
$T212556 = -4						; size = 4
??0CChatFilter@@QAE@XZ PROC				; CChatFilter::CChatFilter, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	33 c9		 xor	 ecx, ecx
  00008	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 15   : 	this->m_Active = false;

  00011	66 89 08	 mov	 WORD PTR [eax], cx

; 16   : 	this->m_Enable = false;
; 17   : 	this->m_Count = 0;

  00014	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 18   : 	this->m_iChatBanMin = 0;

  00017	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 19   : 	this->m_FilterInfo.clear();

  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	53		 push	 ebx
  0001e	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00021	3b cb		 cmp	 ecx, ebx
  00023	74 2a		 je	 SHORT $LN30@CChatFilte
  00025	89 4d fc	 mov	 DWORD PTR $T212556[ebp], ecx
  00028	8b d3		 mov	 edx, ebx
  0002a	3b db		 cmp	 ebx, ebx
  0002c	74 1b		 je	 SHORT $LN59@CChatFilte
  0002e	56		 push	 esi
  0002f	57		 push	 edi
$LL69@CChatFilte:
  00030	8b 7d fc	 mov	 edi, DWORD PTR $T212556[ebp]
  00033	83 45 fc 40	 add	 DWORD PTR $T212556[ebp], 64 ; 00000040H
  00037	8b f2		 mov	 esi, edx
  00039	83 c2 40	 add	 edx, 64			; 00000040H
  0003c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00041	f3 a5		 rep movsd
  00043	3b d3		 cmp	 edx, ebx
  00045	75 e9		 jne	 SHORT $LL69@CChatFilte
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
$LN59@CChatFilte:
  00049	8b 4d fc	 mov	 ecx, DWORD PTR $T212556[ebp]
  0004c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$LN30@CChatFilte:
  0004f	5b		 pop	 ebx

; 20   : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??0CChatFilter@@QAE@XZ ENDP				; CChatFilter::CChatFilter
_TEXT	ENDS
PUBLIC	??1CChatFilter@@QAE@XZ				; CChatFilter::~CChatFilter
; Function compile flags: /Ogtp
;	COMDAT ??1CChatFilter@@QAE@XZ
_TEXT	SEGMENT
??1CChatFilter@@QAE@XZ PROC				; CChatFilter::~CChatFilter, COMDAT
; _this$ = ecx

; 23   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 24   : }

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@CChatFilte@2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@CChatFilte@2:
  00013	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1CChatFilter@@QAE@XZ ENDP				; CChatFilter::~CChatFilter
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 36		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 30		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 e7 c0	 and	 edi, -64		; ffffffc0H
  0002d	03 3e		 add	 edi, DWORD PTR [esi]
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0003d	83 46 04 40	 add	 DWORD PTR [esi+4], 64	; 00000040H
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00047	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004a	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004c	6a 01		 push	 1
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00055	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00058	57		 push	 edi
  00059	52		 push	 edx
  0005a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00066	83 46 04 40	 add	 DWORD PTR [esi+4], 64	; 00000040H
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	__real@00000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@	; `string'
PUBLIC	_FileName$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CChatFilter@@QAEXPAD@Z			; CChatFilter::Read
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@ DB '%s file not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\chatfilter.cpp
CONST	ENDS
;	COMDAT ?Read@CChatFilter@@QAEXPAD@Z
_TEXT	SEGMENT
_FileName$GSCopy$ = -80					; size = 4
_this$GSCopy$ = -76					; size = 4
_iType$ = -72						; size = 4
_info$210338 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_FileName$ = 8						; size = 4
?Read@CChatFilter@@QAEXPAD@Z PROC			; CChatFilter::Read, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _FileName$[ebp]
  00015	8b d9		 mov	 ebx, ecx

; 50   : 	SMDToken Token;
; 51   : 
; 52   : 	SMDFile = fopen(FileName, "r");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001c	56		 push	 esi

; 114  : 
; 115  : 				this->m_FilterInfo.push_back(info);

  0001d	89 5d b4	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00020	89 75 b0	 mov	 DWORD PTR _FileName$GSCopy$[ebp], esi
  00023	e8 00 00 00 00	 call	 _fopen
  00028	83 c4 08	 add	 esp, 8
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  00030	85 c0		 test	 eax, eax
  00032	75 20		 jne	 SHORT $LN14@Read

; 53   : 
; 54   : 	if(!SMDFile)
; 55   : 	{
; 56   : 		MsgBox("%s file not found", FileName);

  00034	56		 push	 esi
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@
  0003a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003f	83 c4 08	 add	 esp, 8
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx

; 122  : }

  00044	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00047	33 cd		 xor	 ecx, ebp
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN14@Read:

; 57   : 		return;
; 58   : 	}
; 59   : 
; 60   : 	int iType = -1;
; 61   : 
; 62   : 	while(true)
; 63   : 	{
; 64   : 		Token = GetToken();

  00054	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 65   : 
; 66   : 		if(Token == END)

  00059	83 f8 02	 cmp	 eax, 2
  0005c	0f 84 f9 01 00
	00		 je	 $LN8@Read
  00062	57		 push	 edi
$LL13@Read:

; 67   : 		{
; 68   : 			break;
; 69   : 		}
; 70   : 
; 71   : 		if( Token != NUMBER )

  00063	83 f8 01	 cmp	 eax, 1
  00066	0f 85 e0 01 00
	00		 jne	 $LN109@Read

; 72   : 		{
; 73   : 			continue;
; 74   : 		}
; 75   : 
; 76   : 		iType = (int)TokenNumber;

  0006c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00072	e8 00 00 00 00	 call	 __ftol2_sse
  00077	8b f8		 mov	 edi, eax
  00079	89 7d b8	 mov	 DWORD PTR _iType$[ebp], edi

; 77   : 
; 78   : 		if(iType < 0 || iType > 1)

  0007c	85 ff		 test	 edi, edi
  0007e	0f 88 d6 01 00
	00		 js	 $LN125@Read
  00084	83 ff 01	 cmp	 edi, 1
  00087	0f 8f cd 01 00
	00		 jg	 $LN125@Read
  0008d	8d 49 00	 npad	 3
$LL7@Read:

; 79   : 		{
; 80   : 			break;
; 81   : 		}
; 82   : 
; 83   : 		while(1)
; 84   : 		{
; 85   : 			if(iType == 0)

  00090	85 ff		 test	 edi, edi
  00092	75 6b		 jne	 SHORT $LN5@Read

; 86   : 			{
; 87   : 				Token = GetToken();

  00094	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 
; 89   : 				if(strcmp("end", TokenString) == 0)

  00099	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL116@Read:
  000a3	8a 10		 mov	 dl, BYTE PTR [eax]
  000a5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000a7	75 1a		 jne	 SHORT $LN117@Read
  000a9	84 d2		 test	 dl, dl
  000ab	74 12		 je	 SHORT $LN118@Read
  000ad	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000b0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000b3	75 0e		 jne	 SHORT $LN117@Read
  000b5	83 c0 02	 add	 eax, 2
  000b8	83 c1 02	 add	 ecx, 2
  000bb	84 d2		 test	 dl, dl
  000bd	75 e4		 jne	 SHORT $LL116@Read
$LN118@Read:
  000bf	33 c0		 xor	 eax, eax
  000c1	eb 05		 jmp	 SHORT $LN119@Read
$LN117@Read:
  000c3	1b c0		 sbb	 eax, eax
  000c5	83 d8 ff	 sbb	 eax, -1
$LN119@Read:
  000c8	85 c0		 test	 eax, eax
  000ca	0f 84 79 01 00
	00		 je	 $LN124@Read

; 90   : 				{
; 91   : 					break;
; 92   : 				}
; 93   : 
; 94   : 				this->m_Enable = TokenNumber;

  000d0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d6	d9 ee		 fldz
  000d8	da e9		 fucompp
  000da	df e0		 fnstsw	 ax
  000dc	f6 c4 44	 test	 ah, 68			; 00000044H
  000df	7b 04		 jnp	 SHORT $LN17@Read
  000e1	b0 01		 mov	 al, 1
  000e3	eb 02		 jmp	 SHORT $LN18@Read
$LN17@Read:
  000e5	32 c0		 xor	 al, al
$LN18@Read:
  000e7	88 43 01	 mov	 BYTE PTR [ebx+1], al

; 95   : 
; 96   : 				Token = GetToken();

  000ea	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 				this->m_iChatBanMin = TokenNumber;

  000ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f5	e8 00 00 00 00	 call	 __ftol2_sse
  000fa	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  000fd	eb 91		 jmp	 SHORT $LL7@Read
$LN5@Read:

; 98   : 
; 99   : 			}
; 100  : 			else if(iType == 1)

  000ff	83 ff 01	 cmp	 edi, 1
  00102	75 8c		 jne	 SHORT $LL7@Read

; 101  : 			{
; 102  : 				Token = GetToken();

  00104	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 103  : 
; 104  : 				if(strcmp("end", TokenString) == 0)

  00109	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0010e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL120@Read:
  00113	8a 10		 mov	 dl, BYTE PTR [eax]
  00115	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00117	75 1a		 jne	 SHORT $LN121@Read
  00119	84 d2		 test	 dl, dl
  0011b	74 12		 je	 SHORT $LN122@Read
  0011d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00120	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00123	75 0e		 jne	 SHORT $LN121@Read
  00125	83 c0 02	 add	 eax, 2
  00128	83 c1 02	 add	 ecx, 2
  0012b	84 d2		 test	 dl, dl
  0012d	75 e4		 jne	 SHORT $LL120@Read
$LN122@Read:
  0012f	33 c0		 xor	 eax, eax
  00131	eb 05		 jmp	 SHORT $LN123@Read
$LN121@Read:
  00133	1b c0		 sbb	 eax, eax
  00135	83 d8 ff	 sbb	 eax, -1
$LN123@Read:
  00138	85 c0		 test	 eax, eax
  0013a	0f 84 09 01 00
	00		 je	 $LN124@Read

; 105  : 				{
; 106  : 					break;
; 107  : 				}
; 108  : 
; 109  : 				FILTER_INFO info;
; 110  : 
; 111  : 				memset(&info, 0, sizeof(info));

  00140	6a 40		 push	 64			; 00000040H
  00142	8d 45 bc	 lea	 eax, DWORD PTR _info$210338[ebp]
  00145	6a 00		 push	 0
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 _memset

; 112  : 
; 113  : 				strcpy_s(info.label, TokenString);

  0014d	68 00 00 00 00	 push	 OFFSET _TokenString
  00152	8d 4d bc	 lea	 ecx, DWORD PTR _info$210338[ebp]
  00155	6a 40		 push	 64			; 00000040H
  00157	51		 push	 ecx
  00158	e8 00 00 00 00	 call	 _strcpy_s

; 114  : 
; 115  : 				this->m_FilterInfo.push_back(info);

  0015d	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00160	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
  00163	8d 55 bc	 lea	 edx, DWORD PTR _info$210338[ebp]
  00166	83 c4 18	 add	 esp, 24			; 00000018H
  00169	3b d0		 cmp	 edx, eax
  0016b	73 76		 jae	 SHORT $LN24@Read
  0016d	8b 16		 mov	 edx, DWORD PTR [esi]
  0016f	8d 4d bc	 lea	 ecx, DWORD PTR _info$210338[ebp]
  00172	3b d1		 cmp	 edx, ecx
  00174	77 6d		 ja	 SHORT $LN24@Read
  00176	8b f9		 mov	 edi, ecx
  00178	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0017b	2b fa		 sub	 edi, edx
  0017d	3b c1		 cmp	 eax, ecx
  0017f	75 40		 jne	 SHORT $LN35@Read
  00181	2b c2		 sub	 eax, edx
  00183	c1 f8 06	 sar	 eax, 6
  00186	3d fe ff ff 03	 cmp	 eax, 67108862		; 03fffffeH
  0018b	0f 87 f7 00 00
	00		 ja	 $LN111@Read
  00191	2b ca		 sub	 ecx, edx
  00193	40		 inc	 eax
  00194	c1 f9 06	 sar	 ecx, 6
  00197	3b c1		 cmp	 eax, ecx
  00199	76 26		 jbe	 SHORT $LN35@Read
  0019b	8b d1		 mov	 edx, ecx
  0019d	d1 ea		 shr	 edx, 1
  0019f	bb ff ff ff 03	 mov	 ebx, 67108863		; 03ffffffH
  001a4	2b da		 sub	 ebx, edx
  001a6	3b d9		 cmp	 ebx, ecx
  001a8	73 04		 jae	 SHORT $LN57@Read
  001aa	33 c9		 xor	 ecx, ecx
  001ac	eb 02		 jmp	 SHORT $LN58@Read
$LN57@Read:
  001ae	03 ca		 add	 ecx, edx
$LN58@Read:
  001b0	3b c8		 cmp	 ecx, eax
  001b2	73 02		 jae	 SHORT $LN54@Read
  001b4	8b c8		 mov	 ecx, eax
$LN54@Read:
  001b6	51		 push	 ecx
  001b7	8b ce		 mov	 ecx, esi
  001b9	e8 00 00 00 00	 call	 ?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
  001be	8b 5d b4	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
$LN35@Read:
  001c1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  001c4	83 e7 c0	 and	 edi, -64		; ffffffc0H
  001c7	03 3e		 add	 edi, DWORD PTR [esi]
  001c9	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  001cc	57		 push	 edi
  001cd	52		 push	 edx
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>
  001d4	8b 7d b8	 mov	 edi, DWORD PTR _iType$[ebp]
  001d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001da	83 46 04 40	 add	 DWORD PTR [esi+4], 64	; 00000040H
  001de	e9 ad fe ff ff	 jmp	 $LL7@Read
$LN24@Read:
  001e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001e6	3b c1		 cmp	 eax, ecx
  001e8	75 42		 jne	 SHORT $LN70@Read
  001ea	8b 16		 mov	 edx, DWORD PTR [esi]
  001ec	2b c2		 sub	 eax, edx
  001ee	c1 f8 06	 sar	 eax, 6
  001f1	3d fe ff ff 03	 cmp	 eax, 67108862		; 03fffffeH
  001f6	0f 87 8c 00 00
	00		 ja	 $LN111@Read
  001fc	2b ca		 sub	 ecx, edx
  001fe	40		 inc	 eax
  001ff	c1 f9 06	 sar	 ecx, 6
  00202	3b c1		 cmp	 eax, ecx
  00204	76 26		 jbe	 SHORT $LN70@Read
  00206	8b d1		 mov	 edx, ecx
  00208	d1 ea		 shr	 edx, 1
  0020a	bf ff ff ff 03	 mov	 edi, 67108863		; 03ffffffH
  0020f	2b fa		 sub	 edi, edx
  00211	3b f9		 cmp	 edi, ecx
  00213	73 04		 jae	 SHORT $LN92@Read
  00215	33 c9		 xor	 ecx, ecx
  00217	eb 02		 jmp	 SHORT $LN93@Read
$LN92@Read:
  00219	03 ca		 add	 ecx, edx
$LN93@Read:
  0021b	3b c8		 cmp	 ecx, eax
  0021d	73 02		 jae	 SHORT $LN89@Read
  0021f	8b c8		 mov	 ecx, eax
$LN89@Read:
  00221	51		 push	 ecx
  00222	8b ce		 mov	 ecx, esi
  00224	e8 00 00 00 00	 call	 ?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
  00229	8b 7d b8	 mov	 edi, DWORD PTR _iType$[ebp]
$LN70@Read:
  0022c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0022f	8d 4d bc	 lea	 ecx, DWORD PTR _info$210338[ebp]
  00232	51		 push	 ecx
  00233	52		 push	 edx
  00234	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>
  0023d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00240	83 46 04 40	 add	 DWORD PTR [esi+4], 64	; 00000040H

; 116  : 			}
; 117  : 		}

  00244	e9 47 fe ff ff	 jmp	 $LL7@Read
$LN124@Read:
  00249	8b 75 b0	 mov	 esi, DWORD PTR _FileName$GSCopy$[ebp]
$LN109@Read:

; 57   : 		return;
; 58   : 	}
; 59   : 
; 60   : 	int iType = -1;
; 61   : 
; 62   : 	while(true)
; 63   : 	{
; 64   : 		Token = GetToken();

  0024c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 65   : 
; 66   : 		if(Token == END)

  00251	83 f8 02	 cmp	 eax, 2
  00254	0f 85 09 fe ff
	ff		 jne	 $LL13@Read
$LN125@Read:
  0025a	5f		 pop	 edi
$LN8@Read:

; 118  : 	}
; 119  : 
; 120  : 	fclose(SMDFile);

  0025b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00261	51		 push	 ecx
  00262	e8 00 00 00 00	 call	 _fclose

; 121  : 	LogAdd("%s file load!", FileName);

  00267	56		 push	 esi
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 122  : }

  00273	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00276	83 c4 0c	 add	 esp, 12			; 0000000cH
  00279	5e		 pop	 esi
  0027a	33 cd		 xor	 ecx, ebp
  0027c	5b		 pop	 ebx
  0027d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00282	8b e5		 mov	 esp, ebp
  00284	5d		 pop	 ebp
  00285	c2 04 00	 ret	 4
$LN111@Read:

; 114  : 
; 115  : 				this->m_FilterInfo.push_back(info);

  00288	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0028d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN127@Read:
$LN126@Read:
  00292	cc		 int	 3
?Read@CChatFilter@@QAEXPAD@Z ENDP			; CChatFilter::Read
_TEXT	ENDS
PUBLIC	??_C@_0BG@EBDFCIDI@ZtData?2ChatFilter?4dat?$AA@	; `string'
PUBLIC	?Load@CChatFilter@@QAEXXZ			; CChatFilter::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0BG@EBDFCIDI@ZtData?2ChatFilter?4dat?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
CONST	SEGMENT
??_C@_0BG@EBDFCIDI@ZtData?2ChatFilter?4dat?$AA@ DB 'ZtData\ChatFilter.dat'
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\chatfilter.cpp
CONST	ENDS
;	COMDAT ?Load@CChatFilter@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CChatFilter@@QAEXXZ PROC				; CChatFilter::Load, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 28   : 	this->m_Active = false;
; 29   : 
; 30   : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2) ||
; 31   : 		g_ZtLicense.CheckUser(eZtUB::SILVER1) || g_ZtLicense.CheckUser(eZtUB::SILVER2) || g_ZtLicense.CheckUser(eZtUB::SILVER_Local) ||
; 32   : 		g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2) || g_ZtLicense.CheckUser(eZtUB::mu4you) ||
; 33   : 		g_ZtLicense.CheckUser(eZtUB::NSGames) || g_ZtLicense.GetCustom())

  00007	6a 20		 push	 32			; 00000020H
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000e	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00011	c6 06 00	 mov	 BYTE PTR [esi], 0
  00014	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00019	84 c0		 test	 al, al
  0001b	0f 85 a2 00 00
	00		 jne	 $LN2@Load
  00021	6a 21		 push	 33			; 00000021H
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00028	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0002d	84 c0		 test	 al, al
  0002f	0f 85 8e 00 00
	00		 jne	 $LN2@Load
  00035	6a 22		 push	 34			; 00000022H
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00041	84 c0		 test	 al, al
  00043	75 7e		 jne	 SHORT $LN2@Load
  00045	6a 07		 push	 7
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0004c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00051	84 c0		 test	 al, al
  00053	75 6e		 jne	 SHORT $LN2@Load
  00055	6a 08		 push	 8
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00061	84 c0		 test	 al, al
  00063	75 5e		 jne	 SHORT $LN2@Load
  00065	6a 2b		 push	 43			; 0000002bH
  00067	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0006c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00071	84 c0		 test	 al, al
  00073	75 4e		 jne	 SHORT $LN2@Load
  00075	6a 30		 push	 48			; 00000030H
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0007c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00081	84 c0		 test	 al, al
  00083	75 3e		 jne	 SHORT $LN2@Load
  00085	6a 31		 push	 49			; 00000031H
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0008c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00091	84 c0		 test	 al, al
  00093	75 2e		 jne	 SHORT $LN2@Load
  00095	6a 4e		 push	 78			; 0000004eH
  00097	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0009c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000a1	84 c0		 test	 al, al
  000a3	75 1e		 jne	 SHORT $LN2@Load
  000a5	6a 51		 push	 81			; 00000051H
  000a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ac	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000b1	84 c0		 test	 al, al
  000b3	75 0e		 jne	 SHORT $LN2@Load
  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ba	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  000bf	85 c0		 test	 eax, eax
  000c1	74 05		 je	 SHORT $LN3@Load
$LN2@Load:

; 34   : 	{
; 35   : 		this->m_Active = true;

  000c3	c6 06 01	 mov	 BYTE PTR [esi], 1

; 36   : 	}
; 37   : 
; 38   : 	if(!this->m_Active)

  000c6	eb 05		 jmp	 SHORT $LN62@Load
$LN3@Load:
  000c8	80 3e 00	 cmp	 BYTE PTR [esi], 0
  000cb	74 4d		 je	 SHORT $LN4@Load
$LN62@Load:

; 39   : 	{
; 40   : 		return;
; 41   : 	}
; 42   : 
; 43   : 	this->m_Count = 0;

  000cd	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 44   : 	this->m_FilterInfo.clear();

  000d4	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000d7	53		 push	 ebx
  000d8	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  000db	3b da		 cmp	 ebx, edx
  000dd	74 23		 je	 SHORT $LN24@Load
  000df	8b c2		 mov	 eax, edx
  000e1	3b d2		 cmp	 edx, edx
  000e3	74 1a		 je	 SHORT $LN53@Load
  000e5	57		 push	 edi
$LL55@Load:
  000e6	8b f0		 mov	 esi, eax
  000e8	8b fb		 mov	 edi, ebx
  000ea	83 c0 40	 add	 eax, 64			; 00000040H
  000ed	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000f2	83 c3 40	 add	 ebx, 64			; 00000040H
  000f5	f3 a5		 rep movsd
  000f7	3b c2		 cmp	 eax, edx
  000f9	75 eb		 jne	 SHORT $LL55@Load
  000fb	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000fe	5f		 pop	 edi
$LN53@Load:
  000ff	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
$LN24@Load:

; 45   : 	this->Read(gDirPath.GetNewPath("ZtData\\ChatFilter.dat"));

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EBDFCIDI@ZtData?2ChatFilter?4dat?$AA@
  00107	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0010c	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00111	50		 push	 eax
  00112	8b ce		 mov	 ecx, esi
  00114	e8 00 00 00 00	 call	 ?Read@CChatFilter@@QAEXPAD@Z ; CChatFilter::Read
  00119	5b		 pop	 ebx
$LN4@Load:
  0011a	5e		 pop	 esi

; 46   : }

  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?Load@CChatFilter@@QAEXXZ ENDP				; CChatFilter::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ChatFilter@@YAXXZ
text$yc	SEGMENT
??__Eg_ChatFilter@@YAXXZ PROC				; `dynamic initializer for 'g_ChatFilter'', COMDAT

; 11   : CChatFilter g_ChatFilter;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChatFilter@@3VCChatFilter@@A ; g_ChatFilter
  00005	e8 00 00 00 00	 call	 ??0CChatFilter@@QAE@XZ	; CChatFilter::CChatFilter
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ChatFilter@@YAXXZ ; `dynamic atexit destructor for 'g_ChatFilter''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ChatFilter@@YAXXZ ENDP				; `dynamic initializer for 'g_ChatFilter''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ChatFilter@@YAXXZ
text$yd	SEGMENT
??__Fg_ChatFilter@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ChatFilter'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChatFilter@@3VCChatFilter@@A ; g_ChatFilter
  00005	e9 00 00 00 00	 jmp	 ??1CChatFilter@@QAE@XZ	; CChatFilter::~CChatFilter
??__Fg_ChatFilter@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ChatFilter''
text$yd	ENDS
PUBLIC	?g_ChatFilter@@3VCChatFilter@@A			; g_ChatFilter
_BSS	SEGMENT
?g_ChatFilter@@3VCChatFilter@@A DB 01cH DUP (?)		; g_ChatFilter
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ChatFilter$initializer$ DD FLAT:??__Eg_ChatFilter@@YAXXZ
CRT$XCU	ENDS
END
