; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ComboAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CComboAttack@@6B@				; CComboAttack::`vftable'
PUBLIC	??0CComboAttack@@QAE@XZ				; CComboAttack::CComboAttack
PUBLIC	??_R4CComboAttack@@6B@				; CComboAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCComboAttack@@@8			; CComboAttack `RTTI Type Descriptor'
PUBLIC	??_R3CComboAttack@@8				; CComboAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CComboAttack@@8				; CComboAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CComboAttack@@8			; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECComboAttack@@UAEPAXI@Z:PROC		; CComboAttack::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CComboAttack@@8
; File e:\work\tranet_version\gs\gameserver\comboattack.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CComboAttack@@8 DD FLAT:??_R0?AVCComboAttack@@@8 ; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CComboAttack@@8
rdata$r	SEGMENT
??_R2CComboAttack@@8 DD FLAT:??_R1A@?0A@EA@CComboAttack@@8 ; CComboAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CComboAttack@@8
rdata$r	SEGMENT
??_R3CComboAttack@@8 DD 00H				; CComboAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCComboAttack@@@8
_DATA	SEGMENT
??_R0?AVCComboAttack@@@8 DD FLAT:??_7type_info@@6B@	; CComboAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCComboAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CComboAttack@@6B@
rdata$r	SEGMENT
??_R4CComboAttack@@6B@ DD 00H				; CComboAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCComboAttack@@@8
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CComboAttack@@6B@
CONST	SEGMENT
??_7CComboAttack@@6B@ DD FLAT:??_R4CComboAttack@@6B@	; CComboAttack::`vftable'
	DD	FLAT:??_ECComboAttack@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CComboAttack@@QAE@XZ
_TEXT	SEGMENT
??0CComboAttack@@QAE@XZ PROC				; CComboAttack::CComboAttack, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CComboAttack@@6B@

; 13   : 	return;
; 14   : }

  00008	c3		 ret	 0
??0CComboAttack@@QAE@XZ ENDP				; CComboAttack::CComboAttack
_TEXT	ENDS
PUBLIC	??1CComboAttack@@UAE@XZ				; CComboAttack::~CComboAttack
; Function compile flags: /Ogtp
;	COMDAT ??1CComboAttack@@UAE@XZ
_TEXT	SEGMENT
??1CComboAttack@@UAE@XZ PROC				; CComboAttack::~CComboAttack, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CComboAttack@@6B@

; 18   : 	return;
; 19   : }

  00006	c3		 ret	 0
??1CComboAttack@@UAE@XZ ENDP				; CComboAttack::~CComboAttack
_TEXT	ENDS
PUBLIC	?GetSkillPos@CComboAttack@@AAEHHH@Z		; CComboAttack::GetSkillPos
EXTRN	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	?Main@ComboCustom@@QAEHHH@Z:PROC		; ComboCustom::Main
EXTRN	?g_ComboCustom@@3VComboCustom@@A:BYTE		; g_ComboCustom
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillPos@CComboAttack@@AAEHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_skillnum$ = 12						; size = 4
?GetSkillPos@CComboAttack@@AAEHHH@Z PROC		; CComboAttack::GetSkillPos, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : #if(DEV_COMBO_CUSTOM==TRUE)
; 24   : 	//LogAddC(2, "skillnum: %d", skillnum);
; 25   : 	int Result = g_ComboCustom.Main(aIndex, skillnum);

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _skillnum$[ebp]
  0000a	56		 push	 esi
  0000b	50		 push	 eax
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ComboCustom@@3VComboCustom@@A ; g_ComboCustom
  00011	e8 00 00 00 00	 call	 ?Main@ComboCustom@@QAEHHH@Z ; ComboCustom::Main

; 26   : 	if(Result != -2)

  00016	83 f8 fe	 cmp	 eax, -2			; fffffffeH

; 27   : 	{
; 28   : 		return Result;

  00019	0f 85 f0 00 00
	00		 jne	 $LN4@GetSkillPo

; 29   : 	}
; 30   : #endif
; 31   : 
; 32   : 	if(		g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 326	//-> Cyclone
; 33   : 		||	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 327	//-> Slash
; 34   : 		||	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 328	//-> Falling Slash
; 35   : 		||	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 329 )	//-> Lunge	

  0001f	56		 push	 esi
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00025	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  0002a	3d 46 01 00 00	 cmp	 eax, 326		; 00000146H
  0002f	0f 84 d8 00 00
	00		 je	 $LN16@GetSkillPo
  00035	56		 push	 esi
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0003b	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00040	3d 47 01 00 00	 cmp	 eax, 327		; 00000147H
  00045	0f 84 c2 00 00
	00		 je	 $LN16@GetSkillPo
  0004b	56		 push	 esi
  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00051	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00056	3d 48 01 00 00	 cmp	 eax, 328		; 00000148H
  0005b	0f 84 ac 00 00
	00		 je	 $LN16@GetSkillPo
  00061	56		 push	 esi
  00062	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00067	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  0006c	3d 49 01 00 00	 cmp	 eax, 329		; 00000149H
  00071	0f 84 96 00 00
	00		 je	 $LN16@GetSkillPo

; 38   : 	}
; 39   : 	else if(	g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 330
; 40   : 		||		g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 332 )	//-> Twisting

  00077	56		 push	 esi
  00078	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0007d	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00082	3d 4a 01 00 00	 cmp	 eax, 330		; 0000014aH
  00087	74 72		 je	 SHORT $LN2@GetSkillPo
  00089	56		 push	 esi
  0008a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0008f	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00094	3d 4c 01 00 00	 cmp	 eax, 332		; 0000014cH
  00099	74 60		 je	 SHORT $LN2@GetSkillPo

; 41   : 	{
; 42   : 		return 1;
; 43   : 	}
; 44   : 	else if( g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 333 
; 45   : 		|| g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 331 )	//-> Rageful Blow

  0009b	56		 push	 esi
  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000a1	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000a6	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  000ab	74 4e		 je	 SHORT $LN2@GetSkillPo
  000ad	56		 push	 esi
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000b3	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000b8	3d 4b 01 00 00	 cmp	 eax, 331		; 0000014bH
  000bd	74 3c		 je	 SHORT $LN2@GetSkillPo

; 46   : 	{
; 47   : 		return 1;
; 48   : 	}
; 49   : 	else if( g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 336 )	//-> Slash *

  000bf	56		 push	 esi
  000c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000c5	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000ca	3d 50 01 00 00	 cmp	 eax, 336		; 00000150H

; 50   : 	{
; 51   : 		return 1;

  000cf	74 2a		 je	 SHORT $LN2@GetSkillPo

; 52   : 	}
; 53   : 	else if( g_MasterSkillSystem.GetBaseMasterLevelSkill(skillnum) == 337 )	//-> Strike Of Destruction

  000d1	56		 push	 esi
  000d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000d7	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000dc	3d 51 01 00 00	 cmp	 eax, 337		; 00000151H

; 54   : 	{
; 55   : 		return 1;

  000e1	74 18		 je	 SHORT $LN2@GetSkillPo

; 56   : 	}
; 57   : 
; 58   : 	// ----
; 59   : 	switch(skillnum)

  000e3	8d 46 ed	 lea	 eax, DWORD PTR [esi-19]
  000e6	3d d5 00 00 00	 cmp	 eax, 213		; 000000d5H
  000eb	77 18		 ja	 SHORT $LN1@GetSkillPo
  000ed	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN21@GetSkillPo[eax]
  000f4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@GetSkillPo[ecx*4]
$LN2@GetSkillPo:

; 60   : 	{
; 61   : 	case 19:
; 62   : 	case 20:
; 63   : 	case 21:
; 64   : 	case 22:
; 65   : 	case 23:
; 66   : 		{
; 67   : 			return 0;
; 68   : 		}
; 69   : 		break;
; 70   : 		// --
; 71   : 	case 41:
; 72   : 	case 42:
; 73   : 	case 43:
; 74   : 	case 232:
; 75   : 		{
; 76   : 			return 1;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	5e		 pop	 esi

; 83   : 		}
; 84   : 		break;
; 85   : 	}
; 86   : }

  00101	5d		 pop	 ebp
  00102	c2 08 00	 ret	 8
$LN1@GetSkillPo:

; 77   : 		}
; 78   : 		break;
; 79   : 		// --
; 80   : 	default:
; 81   : 		{
; 82   : 			return -1;

  00105	83 c8 ff	 or	 eax, -1
  00108	5e		 pop	 esi

; 83   : 		}
; 84   : 		break;
; 85   : 	}
; 86   : }

  00109	5d		 pop	 ebp
  0010a	c2 08 00	 ret	 8
$LN16@GetSkillPo:

; 36   : 	{
; 37   : 		return 0;

  0010d	33 c0		 xor	 eax, eax
$LN4@GetSkillPo:
  0010f	5e		 pop	 esi

; 83   : 		}
; 84   : 		break;
; 85   : 	}
; 86   : }

  00110	5d		 pop	 ebp
  00111	c2 08 00	 ret	 8
$LN22@GetSkillPo:
  00114	00 00 00 00	 DD	 $LN16@GetSkillPo
  00118	00 00 00 00	 DD	 $LN2@GetSkillPo
  0011c	00 00 00 00	 DD	 $LN1@GetSkillPo
$LN21@GetSkillPo:
  00120	00		 DB	 0
  00121	00		 DB	 0
  00122	00		 DB	 0
  00123	00		 DB	 0
  00124	00		 DB	 0
  00125	02		 DB	 2
  00126	02		 DB	 2
  00127	02		 DB	 2
  00128	02		 DB	 2
  00129	02		 DB	 2
  0012a	02		 DB	 2
  0012b	02		 DB	 2
  0012c	02		 DB	 2
  0012d	02		 DB	 2
  0012e	02		 DB	 2
  0012f	02		 DB	 2
  00130	02		 DB	 2
  00131	02		 DB	 2
  00132	02		 DB	 2
  00133	02		 DB	 2
  00134	02		 DB	 2
  00135	02		 DB	 2
  00136	01		 DB	 1
  00137	01		 DB	 1
  00138	01		 DB	 1
  00139	02		 DB	 2
  0013a	02		 DB	 2
  0013b	02		 DB	 2
  0013c	02		 DB	 2
  0013d	02		 DB	 2
  0013e	02		 DB	 2
  0013f	02		 DB	 2
  00140	02		 DB	 2
  00141	02		 DB	 2
  00142	02		 DB	 2
  00143	02		 DB	 2
  00144	02		 DB	 2
  00145	02		 DB	 2
  00146	02		 DB	 2
  00147	02		 DB	 2
  00148	02		 DB	 2
  00149	02		 DB	 2
  0014a	02		 DB	 2
  0014b	02		 DB	 2
  0014c	02		 DB	 2
  0014d	02		 DB	 2
  0014e	02		 DB	 2
  0014f	02		 DB	 2
  00150	02		 DB	 2
  00151	02		 DB	 2
  00152	02		 DB	 2
  00153	02		 DB	 2
  00154	02		 DB	 2
  00155	02		 DB	 2
  00156	02		 DB	 2
  00157	02		 DB	 2
  00158	02		 DB	 2
  00159	02		 DB	 2
  0015a	02		 DB	 2
  0015b	02		 DB	 2
  0015c	02		 DB	 2
  0015d	02		 DB	 2
  0015e	02		 DB	 2
  0015f	02		 DB	 2
  00160	02		 DB	 2
  00161	02		 DB	 2
  00162	02		 DB	 2
  00163	02		 DB	 2
  00164	02		 DB	 2
  00165	02		 DB	 2
  00166	02		 DB	 2
  00167	02		 DB	 2
  00168	02		 DB	 2
  00169	02		 DB	 2
  0016a	02		 DB	 2
  0016b	02		 DB	 2
  0016c	02		 DB	 2
  0016d	02		 DB	 2
  0016e	02		 DB	 2
  0016f	02		 DB	 2
  00170	02		 DB	 2
  00171	02		 DB	 2
  00172	02		 DB	 2
  00173	02		 DB	 2
  00174	02		 DB	 2
  00175	02		 DB	 2
  00176	02		 DB	 2
  00177	02		 DB	 2
  00178	02		 DB	 2
  00179	02		 DB	 2
  0017a	02		 DB	 2
  0017b	02		 DB	 2
  0017c	02		 DB	 2
  0017d	02		 DB	 2
  0017e	02		 DB	 2
  0017f	02		 DB	 2
  00180	02		 DB	 2
  00181	02		 DB	 2
  00182	02		 DB	 2
  00183	02		 DB	 2
  00184	02		 DB	 2
  00185	02		 DB	 2
  00186	02		 DB	 2
  00187	02		 DB	 2
  00188	02		 DB	 2
  00189	02		 DB	 2
  0018a	02		 DB	 2
  0018b	02		 DB	 2
  0018c	02		 DB	 2
  0018d	02		 DB	 2
  0018e	02		 DB	 2
  0018f	02		 DB	 2
  00190	02		 DB	 2
  00191	02		 DB	 2
  00192	02		 DB	 2
  00193	02		 DB	 2
  00194	02		 DB	 2
  00195	02		 DB	 2
  00196	02		 DB	 2
  00197	02		 DB	 2
  00198	02		 DB	 2
  00199	02		 DB	 2
  0019a	02		 DB	 2
  0019b	02		 DB	 2
  0019c	02		 DB	 2
  0019d	02		 DB	 2
  0019e	02		 DB	 2
  0019f	02		 DB	 2
  001a0	02		 DB	 2
  001a1	02		 DB	 2
  001a2	02		 DB	 2
  001a3	02		 DB	 2
  001a4	02		 DB	 2
  001a5	02		 DB	 2
  001a6	02		 DB	 2
  001a7	02		 DB	 2
  001a8	02		 DB	 2
  001a9	02		 DB	 2
  001aa	02		 DB	 2
  001ab	02		 DB	 2
  001ac	02		 DB	 2
  001ad	02		 DB	 2
  001ae	02		 DB	 2
  001af	02		 DB	 2
  001b0	02		 DB	 2
  001b1	02		 DB	 2
  001b2	02		 DB	 2
  001b3	02		 DB	 2
  001b4	02		 DB	 2
  001b5	02		 DB	 2
  001b6	02		 DB	 2
  001b7	02		 DB	 2
  001b8	02		 DB	 2
  001b9	02		 DB	 2
  001ba	02		 DB	 2
  001bb	02		 DB	 2
  001bc	02		 DB	 2
  001bd	02		 DB	 2
  001be	02		 DB	 2
  001bf	02		 DB	 2
  001c0	02		 DB	 2
  001c1	02		 DB	 2
  001c2	02		 DB	 2
  001c3	02		 DB	 2
  001c4	02		 DB	 2
  001c5	02		 DB	 2
  001c6	02		 DB	 2
  001c7	02		 DB	 2
  001c8	02		 DB	 2
  001c9	02		 DB	 2
  001ca	02		 DB	 2
  001cb	02		 DB	 2
  001cc	02		 DB	 2
  001cd	02		 DB	 2
  001ce	02		 DB	 2
  001cf	02		 DB	 2
  001d0	02		 DB	 2
  001d1	02		 DB	 2
  001d2	02		 DB	 2
  001d3	02		 DB	 2
  001d4	02		 DB	 2
  001d5	02		 DB	 2
  001d6	02		 DB	 2
  001d7	02		 DB	 2
  001d8	02		 DB	 2
  001d9	02		 DB	 2
  001da	02		 DB	 2
  001db	02		 DB	 2
  001dc	02		 DB	 2
  001dd	02		 DB	 2
  001de	02		 DB	 2
  001df	02		 DB	 2
  001e0	02		 DB	 2
  001e1	02		 DB	 2
  001e2	02		 DB	 2
  001e3	02		 DB	 2
  001e4	02		 DB	 2
  001e5	02		 DB	 2
  001e6	02		 DB	 2
  001e7	02		 DB	 2
  001e8	02		 DB	 2
  001e9	02		 DB	 2
  001ea	02		 DB	 2
  001eb	02		 DB	 2
  001ec	02		 DB	 2
  001ed	02		 DB	 2
  001ee	02		 DB	 2
  001ef	02		 DB	 2
  001f0	02		 DB	 2
  001f1	02		 DB	 2
  001f2	02		 DB	 2
  001f3	02		 DB	 2
  001f4	02		 DB	 2
  001f5	01		 DB	 1
?GetSkillPos@CComboAttack@@AAEHHH@Z ENDP		; CComboAttack::GetSkillPos
_TEXT	ENDS
PUBLIC	?CheckCombo@CComboAttack@@QAEHHH@Z		; CComboAttack::CheckCombo
EXTRN	?Init@ComboSkillData@@QAEXXZ:PROC		; ComboSkillData::Init
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CheckCombo@CComboAttack@@QAEHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_skillnum$ = 12						; size = 4
?CheckCombo@CComboAttack@@QAEHHH@Z PROC			; CComboAttack::CheckCombo, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   : 	LPOBJ lpObj = &gObj[aIndex];

  00003	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx
  0000a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00010	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	57		 push	 edi

; 91   : 
; 92   : #if(DEV_COMBO_CUSTOM==TRUE)
; 93   : 	if( lpObj->Class == CLASS_KNIGHT && lpObj->ComboSkillquestClear == true || 
; 94   : 		lpObj->Class == CLASS_WIZARD && lpObj->PlusStatQuestClear == true ||
; 95   : 		lpObj->Class == CLASS_ELF && lpObj->PlusStatQuestClear == true ||
; 96   : 		lpObj->Class == CLASS_MAGUMSA ||
; 97   : 		lpObj->Class == CLASS_DARKLORD ||
; 98   : 		lpObj->Class == CLASS_SUMMONER && lpObj->PlusStatQuestClear == true ||
; 99   : 		lpObj->Class == CLASS_MONK )

  00017	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  0001e	83 f8 01	 cmp	 eax, 1
  00021	75 08		 jne	 SHORT $LN14@CheckCombo
  00023	38 86 a6 00 00
	00		 cmp	 BYTE PTR [esi+166], al
  00029	74 3d		 je	 SHORT $LN19@CheckCombo
$LN14@CheckCombo:
  0002b	66 85 c0	 test	 ax, ax
  0002e	75 09		 jne	 SHORT $LN13@CheckCombo
  00030	80 be a5 00 00
	00 01		 cmp	 BYTE PTR [esi+165], 1
  00037	74 2f		 je	 SHORT $LN19@CheckCombo
$LN13@CheckCombo:
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 09		 jne	 SHORT $LN12@CheckCombo
  0003e	80 be a5 00 00
	00 01		 cmp	 BYTE PTR [esi+165], 1
  00045	74 21		 je	 SHORT $LN19@CheckCombo
$LN12@CheckCombo:
  00047	83 f8 03	 cmp	 eax, 3
  0004a	74 1c		 je	 SHORT $LN19@CheckCombo
  0004c	83 f8 04	 cmp	 eax, 4
  0004f	74 17		 je	 SHORT $LN19@CheckCombo
  00051	83 f8 05	 cmp	 eax, 5
  00054	75 09		 jne	 SHORT $LN11@CheckCombo
  00056	80 be a5 00 00
	00 01		 cmp	 BYTE PTR [esi+165], 1
  0005d	74 09		 je	 SHORT $LN19@CheckCombo
$LN11@CheckCombo:
  0005f	83 f8 06	 cmp	 eax, 6
  00062	0f 85 e6 00 00
	00		 jne	 $LN1@CheckCombo
$LN19@CheckCombo:

; 100  : #else
; 101  : 	if ( lpObj->ComboSkillquestClear  != false )
; 102  : #endif
; 103  : 	{
; 104  : 		int sp = this->GetSkillPos(aIndex,skillnum);

  00068	8b 5d 0c	 mov	 ebx, DWORD PTR _skillnum$[ebp]
  0006b	53		 push	 ebx
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ?GetSkillPos@CComboAttack@@AAEHHH@Z ; CComboAttack::GetSkillPos

; 105  : 
; 106  : 		if ( sp == 0 )

  00072	33 c9		 xor	 ecx, ecx
  00074	3b c1		 cmp	 eax, ecx
  00076	75 27		 jne	 SHORT $LN10@CheckCombo

; 107  : 		{
; 108  : 			lpObj->comboSkill.ProgressIndex  = 0;

  00078	89 8e b4 00 00
	00		 mov	 DWORD PTR [esi+180], ecx

; 109  : 			lpObj->comboSkill.dwTime = GetTickCount() + 3000;

  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00084	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  00089	5f		 pop	 edi
  0008a	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax

; 110  : 			lpObj->comboSkill.Skill[0]  = skillnum;

  00090	66 89 9e ac 00
	00 00		 mov	 WORD PTR [esi+172], bx
  00097	5e		 pop	 esi

; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	return 0;

  00098	33 c0		 xor	 eax, eax
  0009a	5b		 pop	 ebx

; 153  : }

  0009b	5d		 pop	 ebp
  0009c	c2 08 00	 ret	 8
$LN10@CheckCombo:

; 111  : 		}
; 112  : 		else if ( sp == 1 )

  0009f	83 f8 01	 cmp	 eax, 1
  000a2	0f 85 8c 00 00
	00		 jne	 $LN8@CheckCombo

; 113  : 		{
; 114  : 			if ( lpObj->comboSkill.Skill[0]  == 0xFF )

  000a8	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000ad	66 39 86 ac 00
	00 00		 cmp	 WORD PTR [esi+172], ax
  000b4	75 14		 jne	 SHORT $LN7@CheckCombo
$LN20@CheckCombo:

; 115  : 			{
; 116  : 				lpObj->comboSkill.Init();

  000b6	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
$LN3@CheckCombo:
  000bc	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi

; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	return 0;

  000c3	33 c0		 xor	 eax, eax
  000c5	5b		 pop	 ebx

; 153  : }

  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
$LN7@CheckCombo:

; 117  : 				return 0;
; 118  : 			}
; 119  : 
; 120  : 			int Time =GetTickCount();

  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 121  : 
; 122  : 			if (lpObj->comboSkill.dwTime < GetTickCount() )

  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000d6	39 86 a8 00 00
	00		 cmp	 DWORD PTR [esi+168], eax

; 123  : 			{
; 124  : 				lpObj->comboSkill.Init();
; 125  : 				return 0;

  000dc	72 d8		 jb	 SHORT $LN20@CheckCombo

; 126  : 			}
; 127  : 
; 128  : 			if ( lpObj->comboSkill.ProgressIndex == 0 )

  000de	83 be b4 00 00
	00 00		 cmp	 DWORD PTR [esi+180], 0
  000e5	75 2b		 jne	 SHORT $LN5@CheckCombo

; 129  : 			{
; 130  : 				lpObj->comboSkill.ProgressIndex = 1;

  000e7	c7 86 b4 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+180], 1

; 131  : 				lpObj->comboSkill.dwTime = GetTickCount() + 3000;

  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000f7	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  000fc	5f		 pop	 edi
  000fd	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax

; 132  : 				lpObj->comboSkill.Skill[1] = skillnum;

  00103	66 89 9e ae 00
	00 00		 mov	 WORD PTR [esi+174], bx
  0010a	5e		 pop	 esi

; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	return 0;

  0010b	33 c0		 xor	 eax, eax
  0010d	5b		 pop	 ebx

; 153  : }

  0010e	5d		 pop	 ebp
  0010f	c2 08 00	 ret	 8
$LN5@CheckCombo:

; 133  : 			}
; 134  : 			else if ( lpObj->comboSkill.Skill[1]  != skillnum )

  00112	0f bf 8e ae 00
	00 00		 movsx	 ecx, WORD PTR [esi+174]
  00119	3b cb		 cmp	 ecx, ebx

; 135  : 			{
; 136  : 				lpObj->comboSkill.Init();

  0011b	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00121	74 99		 je	 SHORT $LN3@CheckCombo
  00123	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
  00128	5f		 pop	 edi
  00129	5e		 pop	 esi

; 137  : 				return 1;

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	5b		 pop	 ebx

; 153  : }

  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
$LN8@CheckCombo:

; 138  : 			}
; 139  : 			else
; 140  : 			{
; 141  : 				lpObj->comboSkill.Init();
; 142  : 			}
; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			lpObj->comboSkill.ProgressIndex= -1;
; 147  : 			lpObj->comboSkill.dwTime = 0;
; 148  : 			lpObj->comboSkill.Skill[0] = -1;

  00134	83 ca ff	 or	 edx, -1
  00137	c7 86 b4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+180], -1
  00141	89 8e a8 00 00
	00		 mov	 DWORD PTR [esi+168], ecx
  00147	66 89 96 ac 00
	00 00		 mov	 WORD PTR [esi+172], dx
$LN1@CheckCombo:

; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	return 0;

  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	33 c0		 xor	 eax, eax
  00152	5b		 pop	 ebx

; 153  : }

  00153	5d		 pop	 ebp
  00154	c2 08 00	 ret	 8
?CheckCombo@CComboAttack@@QAEHHH@Z ENDP			; CComboAttack::CheckCombo
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCComboAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCComboAttack@@UAEPAXI@Z PROC			; CComboAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCComboAttack@@UAEPAXI@Z ENDP			; CComboAttack::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgComboAttack@@YAXXZ
text$yc	SEGMENT
??__EgComboAttack@@YAXXZ PROC				; `dynamic initializer for 'gComboAttack'', COMDAT

; 9    : CComboAttack gComboAttack;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  00005	e8 00 00 00 00	 call	 ??0CComboAttack@@QAE@XZ	; CComboAttack::CComboAttack
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgComboAttack@@YAXXZ ; `dynamic atexit destructor for 'gComboAttack''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgComboAttack@@YAXXZ ENDP				; `dynamic initializer for 'gComboAttack''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgComboAttack@@YAXXZ
text$yd	SEGMENT
??__FgComboAttack@@YAXXZ PROC				; `dynamic atexit destructor for 'gComboAttack'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  00005	e9 00 00 00 00	 jmp	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
??__FgComboAttack@@YAXXZ ENDP				; `dynamic atexit destructor for 'gComboAttack''
text$yd	ENDS
PUBLIC	?gComboAttack@@3VCComboAttack@@A		; gComboAttack
_BSS	SEGMENT
?gComboAttack@@3VCComboAttack@@A DD 01H DUP (?)		; gComboAttack
_BSS	ENDS
CRT$XCU	SEGMENT
_gComboAttack$initializer$ DD FLAT:??__EgComboAttack@@YAXXZ
CRT$XCU	ENDS
END
