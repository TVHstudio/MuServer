; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ConnectZt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?PacketCheckTime2@@YAHPAUOBJECTSTRUCT@@@Z	; PacketCheckTime2
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\connectzt.cpp
;	COMDAT ?PacketCheckTime2@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?PacketCheckTime2@@YAHPAUOBJECTSTRUCT@@@Z PROC		; PacketCheckTime2, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 25   : 	//LogAddC(2, "[DEBUG][2] PACKET TIME: %d", ( GetTickCount() - lpObj->m_PacketCheckTime ));
; 26   : 
; 27   : 	if( (GetTickCount() - lpObj->m_PacketCheckTime) < 300 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0000e	ff d7		 call	 edi
  00010	2b 86 8c 03 00
	00		 sub	 eax, DWORD PTR [esi+908]
  00016	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  0001b	73 06		 jae	 SHORT $LN1@PacketChec

; 28   : 	{
; 29   : 		return FALSE;

  0001d	5f		 pop	 edi
  0001e	33 c0		 xor	 eax, eax
  00020	5e		 pop	 esi

; 34   : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN1@PacketChec:

; 30   : 	}
; 31   : 
; 32   : 	lpObj->m_PacketCheckTime = GetTickCount();

  00023	ff d7		 call	 edi
  00025	89 86 8c 03 00
	00		 mov	 DWORD PTR [esi+908], eax
  0002b	5f		 pop	 edi

; 33   : 	return TRUE;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	5e		 pop	 esi

; 34   : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?PacketCheckTime2@@YAHPAUOBJECTSTRUCT@@@Z ENDP		; PacketCheckTime2
_TEXT	ENDS
PUBLIC	?Init@ConnectZt@@QAEXXZ				; ConnectZt::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@ConnectZt@@QAEXXZ
_TEXT	SEGMENT
?Init@ConnectZt@@QAEXXZ PROC				; ConnectZt::Init, COMDAT
; _this$ = ecx

; 45   : 	this->ConnectIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 46   : 	this->ConnectTick = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 47   : }

  0000d	c3		 ret	 0
?Init@ConnectZt@@QAEXXZ ENDP				; ConnectZt::Init
_TEXT	ENDS
PUBLIC	??_C@_0BD@CICILPEN@join?5send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BB@PPEDKKBK@error?5?3?5?$CFd?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0O@LIFOJFGO@ConnectZt?4cpp?$AA@		; `string'
PUBLIC	_Data$GSCopy$
PUBLIC	_UserIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SendLogin@ConnectZt@@QAEXHPAUCONNECTZT_LOGIN@@@Z ; ConnectZt::SendLogin
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?wsJServerCli@@3VwsJoinServerCli@@A:BYTE	; wsJServerCli
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?GCJoinResult@@YAXEH@Z:PROC			; GCJoinResult
EXTRN	?IsMember@CConMember@@QAEHPAD@Z:PROC		; CConMember::IsMember
EXTRN	?ConMember@@3VCConMember@@A:BYTE		; ConMember
EXTRN	?bCanConnectMember@@3HA:DWORD			; bCanConnectMember
EXTRN	?BuxConvert@@YAXPADH@Z:PROC			; BuxConvert
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BD@CICILPEN@join?5send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@CICILPEN@join?5send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@ DB 'join send '
	DB	': (%d)%s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PPEDKKBK@error?5?3?5?$CFd?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BB@PPEDKKBK@error?5?3?5?$CFd?5?$CFs?5?$CFd?$AA@ DB 'error : %d %s '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LIFOJFGO@ConnectZt?4cpp?$AA@
CONST	SEGMENT
??_C@_0O@LIFOJFGO@ConnectZt?4cpp?$AA@ DB 'ConnectZt.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SendLogin@ConnectZt@@QAEXHPAUCONNECTZT_LOGIN@@@Z
_TEXT	SEGMENT
_lpObj$ = -96						; size = 4
_Data$GSCopy$ = -92					; size = 4
_UserIndex$GSCopy$ = -88				; size = 4
_spMsg$ = -84						; size = 44
_pass$213445 = -40					; size = 21
_id$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_Data$ = 12						; size = 4
?SendLogin@ConnectZt@@QAEXHPAUCONNECTZT_LOGIN@@@Z PROC	; ConnectZt::SendLogin, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 52   : 	if(!ZtConfig.CommonServer.ReConnect) return;

  00010	80 3d 14 01 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+276, 0
  00017	53		 push	 ebx
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _Data$[ebp]
  0001b	56		 push	 esi
  0001c	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]
  0001f	57		 push	 edi
  00020	8b f9		 mov	 edi, ecx

; 133  : 	{
; 134  : #define MAX_PASS_LEN 20
; 135  : 		ZeroMemory(&gObj[UserIndex].Pass,sizeof(gObj[UserIndex].Pass));

  00022	89 75 a8	 mov	 DWORD PTR _UserIndex$GSCopy$[ebp], esi
  00025	89 5d a4	 mov	 DWORD PTR _Data$GSCopy$[ebp], ebx
  00028	0f 84 66 04 00
	00		 je	 $LN12@SendLogin

; 53   : 	// ----
; 54   : 	if(this->ConnectIndex != -1)

  0002e	83 3f ff	 cmp	 DWORD PTR [edi], -1
  00031	0f 85 5d 04 00
	00		 jne	 $LN12@SendLogin

; 55   : 	{
; 56   : 		return;
; 57   : 	}
; 58   : 	this->ConnectIndex = UserIndex;

  00037	89 37		 mov	 DWORD PTR [edi], esi

; 59   : 	this->ConnectTick = GetTickCount();

  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0003f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 60   : 	// ----
; 61   : 	BuxConvert(Data->AccountID, MAX_ACCOUNT_LEN);

  00042	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00045	6a 0a		 push	 10			; 0000000aH
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert

; 62   : 	BuxConvert(Data->Password, MAX_ACCOUNT_LEN);

  0004d	83 c3 0e	 add	 ebx, 14			; 0000000eH
  00050	6a 0a		 push	 10			; 0000000aH
  00052	53		 push	 ebx
  00053	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert

; 63   : 	// ----
; 64   : 	char id[11];
; 65   : 	id[10]=0;
; 66   : 	memcpy(id, Data->AccountID, sizeof(Data->AccountID));

  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0005d	66 8b 57 08	 mov	 dx, WORD PTR [edi+8]
  00061	89 45 f0	 mov	 DWORD PTR _id$[ebp], eax

; 67   : 	BuxConvert(id, MAX_ACCOUNT_LEN);

  00064	8d 45 f0	 lea	 eax, DWORD PTR _id$[ebp]
  00067	6a 0a		 push	 10			; 0000000aH
  00069	50		 push	 eax
  0006a	c6 45 fa 00	 mov	 BYTE PTR _id$[ebp+10], 0
  0006e	89 4d f4	 mov	 DWORD PTR _id$[ebp+4], ecx
  00071	66 89 55 f8	 mov	 WORD PTR _id$[ebp+8], dx
  00075	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert
  0007a	83 c4 18	 add	 esp, 24			; 00000018H

; 68   : 
; 69   : 	//char pass[20+1];
; 70   : 	//memset(pass, 0, sizeof(pass));
; 71   : 	//memcpy(pass, lpMsg->Pass, sizeof(lpMsg->Pass));
; 72   : 	//BuxConvert(pass, MAX_ACCOUNT_LEN);
; 73   : 	//memcpy(gObj[aIndex].Pass, pass, MAX_ACCOUNT_LEN);
; 74   : 	// ----
; 75   : 	//GJPUserClose(id); //Force connection
; 76   : 	// ----
; 77   : 	if( bCanConnectMember == TRUE )

  0007d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?bCanConnectMember@@3HA, 1 ; bCanConnectMember
  00084	75 30		 jne	 SHORT $LN8@SendLogin

; 78   : 	{
; 79   : 		if( ConMember.IsMember(id) == FALSE )

  00086	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  00089	51		 push	 ecx
  0008a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ConMember@@3VCConMember@@A ; ConMember
  0008f	e8 00 00 00 00	 call	 ?IsMember@CConMember@@QAEHPAD@Z ; CConMember::IsMember
  00094	85 c0		 test	 eax, eax
  00096	75 1e		 jne	 SHORT $LN8@SendLogin

; 80   : 		{
; 81   : 			GCJoinResult(JS_ONLY_VIP_MEMBERS, UserIndex);

  00098	56		 push	 esi
  00099	6a 02		 push	 2
  0009b	e8 00 00 00 00	 call	 ?GCJoinResult@@YAXEH@Z	; GCJoinResult
  000a0	83 c4 08	 add	 esp, 8
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 159  : 	lpObj->m_btDestY = 0;
; 160  : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN8@SendLogin:

; 82   : 			return;
; 83   : 		}
; 84   : 	}
; 85   : 	// ----
; 86   : 	LPOBJ lpObj = &gObj[UserIndex];

  000b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bc	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 87   : 	// ----
; 88   : 	if( gObj[UserIndex].Connected != PLAYER_CONNECTED )

  000c2	83 7c 16 04 01	 cmp	 DWORD PTR [esi+edx+4], 1
  000c7	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000ca	89 45 a0	 mov	 DWORD PTR _lpObj$[ebp], eax
  000cd	74 3a		 je	 SHORT $LN7@SendLogin

; 89   : 	{
; 90   : 		LogAdd(lMsg.Get(MSGGET(1, 218)), UserIndex, id);

  000cf	8b 75 a8	 mov	 esi, DWORD PTR _UserIndex$GSCopy$[ebp]
  000d2	8d 45 f0	 lea	 eax, DWORD PTR _id$[ebp]
  000d5	50		 push	 eax
  000d6	56		 push	 esi
  000d7	68 da 01 00 00	 push	 474			; 000001daH
  000dc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000e1	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000e6	50		 push	 eax
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 91   : 		CloseClient(UserIndex);

  000ed	56		 push	 esi
  000ee	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx

; 159  : 	lpObj->m_btDestY = 0;
; 160  : }

  000f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
$LN7@SendLogin:

; 92   : 		return;
; 93   : 	}
; 94   : 	// ----
; 95   : 	if( gObj[UserIndex].LoginMsgSnd != FALSE )

  00109	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0010c	84 c9		 test	 cl, cl
  0010e	74 69		 je	 SHORT $LN6@SendLogin

; 96   : 	{
; 97   : 		if( gObj[UserIndex].LoginMsgSnd == TRUE )

  00110	80 f9 01	 cmp	 cl, 1
  00113	75 38		 jne	 SHORT $LN5@SendLogin

; 98   : 		{
; 99   : 			LogAdd(lMsg.Get(MSGGET(1, 219)), UserIndex, id, gObj[UserIndex].Ip_addr );

  00115	8b 55 a8	 mov	 edx, DWORD PTR _UserIndex$GSCopy$[ebp]
  00118	83 c0 18	 add	 eax, 24			; 00000018H
  0011b	50		 push	 eax
  0011c	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  0011f	51		 push	 ecx
  00120	52		 push	 edx
  00121	68 db 01 00 00	 push	 475			; 000001dbH
  00126	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0012b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00130	50		 push	 eax
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx

; 159  : 	lpObj->m_btDestY = 0;
; 160  : }

  0013d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00140	33 cd		 xor	 ecx, ebp
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 08 00	 ret	 8
$LN5@SendLogin:

; 100  : 		}
; 101  : 		else
; 102  : 		{
; 103  : 			LogAdd("error : %d %s %d", gObj[UserIndex].LoginMsgSnd, __FILE__, __LINE__);

  0014d	6a 67		 push	 103			; 00000067H
  0014f	0f be c1	 movsx	 eax, cl
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LIFOJFGO@ConnectZt?4cpp?$AA@
  00157	50		 push	 eax
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PPEDKKBK@error?5?3?5?$CFd?5?$CFs?5?$CFd?$AA@
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00163	83 c4 10	 add	 esp, 16			; 00000010H
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx

; 159  : 	lpObj->m_btDestY = 0;
; 160  : }

  00169	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	33 cd		 xor	 ecx, ebp
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c2 08 00	 ret	 8
$LN6@SendLogin:

; 104  : 		}
; 105  : 
; 106  : 		return;
; 107  : 	}
; 108  : 	// ----
; 109  : 	if( lpObj->Connected >= PLAYER_LOGGED )

  00179	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  0017d	0f 8d 11 03 00
	00		 jge	 $LN12@SendLogin

; 110  : 	{
; 111  : 		return;
; 112  : 	}
; 113  : 	// ----
; 114  : 	SDHP_IDPASS spMsg;
; 115  : 	// ----
; 116  : 	PHeadSetB((LPBYTE)&spMsg, 0x01, sizeof(spMsg));

  00183	6a 2c		 push	 44			; 0000002cH
  00185	8d 4d ac	 lea	 ecx, DWORD PTR _spMsg$[ebp]
  00188	6a 01		 push	 1
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 117  : 	spMsg.Number = UserIndex;

  00190	0f b7 55 a8	 movzx	 edx, WORD PTR _UserIndex$GSCopy$[ebp]

; 118  : 	memcpy(spMsg.Id, Data->AccountID, sizeof(spMsg.Id));

  00194	8b 07		 mov	 eax, DWORD PTR [edi]
  00196	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00199	66 89 55 c4	 mov	 WORD PTR _spMsg$[ebp+24], dx
  0019d	0f b7 57 08	 movzx	 edx, WORD PTR [edi+8]

; 119  : 	memcpy(spMsg.Pass, Data->Password, sizeof(spMsg.Pass));
; 120  : 	strcpy(spMsg.IpAddress, gObj[UserIndex].Ip_addr);

  001a1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a7	66 89 55 b7	 mov	 WORD PTR _spMsg$[ebp+11], dx
  001ab	0f b7 53 08	 movzx	 edx, WORD PTR [ebx+8]
  001af	89 45 af	 mov	 DWORD PTR _spMsg$[ebp+3], eax
  001b2	8b 03		 mov	 eax, DWORD PTR [ebx]
  001b4	66 89 55 c1	 mov	 WORD PTR _spMsg$[ebp+21], dx
  001b8	89 4d b3	 mov	 DWORD PTR _spMsg$[ebp+7], ecx
  001bb	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  001be	89 45 b9	 mov	 DWORD PTR _spMsg$[ebp+13], eax
  001c1	8d 44 3e 18	 lea	 eax, DWORD PTR [esi+edi+24]
  001c5	8d 55 c6	 lea	 edx, DWORD PTR _spMsg$[ebp+26]
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cb	89 4d bd	 mov	 DWORD PTR _spMsg$[ebp+17], ecx
  001ce	2b d0		 sub	 edx, eax
$LL14@SendLogin:
  001d0	8a 08		 mov	 cl, BYTE PTR [eax]
  001d2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  001d5	40		 inc	 eax
  001d6	84 c9		 test	 cl, cl
  001d8	75 f6		 jne	 SHORT $LL14@SendLogin

; 121  : 	gObj[UserIndex].CheckTick = Data->TickCount;

  001da	8b 45 a4	 mov	 eax, DWORD PTR _Data$GSCopy$[ebp]
  001dd	8b 48 22	 mov	 ecx, DWORD PTR [eax+34]
  001e0	89 4c 3e 40	 mov	 DWORD PTR [esi+edi+64], ecx

; 122  : 	gObj[UserIndex].CheckTick2 = GetTickCount();

  001e4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  001ea	ff d7		 call	 edi
  001ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f2	89 44 16 48	 mov	 DWORD PTR [esi+edx+72], eax

; 123  : 	gObj[UserIndex].ConnectCheckTime = GetTickCount();

  001f6	ff d7		 call	 edi
  001f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fe	89 44 0e 3c	 mov	 DWORD PTR [esi+ecx+60], eax

; 124  : 	gObj[UserIndex].CheckSpeedHack = true;

  00202	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00208	c6 44 16 44 01	 mov	 BYTE PTR [esi+edx+68], 1

; 125  : 	gObj[UserIndex].LoginMsgSnd = 1;

  0020d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00212	c6 44 06 08 01	 mov	 BYTE PTR [esi+eax+8], 1

; 126  : 	gObj[UserIndex].LoginMsgCount = 1;

  00217	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0021d	c6 44 0e 09 01	 mov	 BYTE PTR [esi+ecx+9], 1

; 127  : #ifdef DISCONECT_FRIEND
; 128  : 	if( g_ZtLicense.CheckUser(eZtUB::Local) || g_ZtLicense.CheckUser(ulasevich) || g_ZtLicense.CheckUser(ulasevich2) || 
; 129  : 		g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2)
; 130  : 		|| g_ZtLicense.CheckUser(eZtUB::MU2Play) || g_ZtLicense.CheckUser(eZtUB::Sentinel) || g_ZtLicense.CheckUser(eZtUB::Escalate) || g_ZtLicense.CheckUser(eZtUB::Artem) ||
; 131  : 		g_ZtLicense.CheckUser(eZtUB::Artem2) || g_ZtLicense.CheckUser(eZtUB::RevoMU) || g_ZtLicense.CheckUser(eZtUB::GloryMU) || 
; 132  : 		g_ZtLicense.CheckUser(eZtUB::mu4you) || g_ZtLicense.CheckUser(eZtUB::eternalmu) || g_ZtLicense.CheckUser(eZtUB::NSGames))

  00222	6a 00		 push	 0
  00224	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00229	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0022e	84 c0		 test	 al, al
  00230	0f 85 0c 01 00
	00		 jne	 $LN1@SendLogin
  00236	6a 17		 push	 23			; 00000017H
  00238	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0023d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00242	84 c0		 test	 al, al
  00244	0f 85 f8 00 00
	00		 jne	 $LN1@SendLogin
  0024a	6a 24		 push	 36			; 00000024H
  0024c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00251	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00256	84 c0		 test	 al, al
  00258	0f 85 e4 00 00
	00		 jne	 $LN1@SendLogin
  0025e	6a 20		 push	 32			; 00000020H
  00260	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00265	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0026a	84 c0		 test	 al, al
  0026c	0f 85 d0 00 00
	00		 jne	 $LN1@SendLogin
  00272	6a 21		 push	 33			; 00000021H
  00274	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00279	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0027e	84 c0		 test	 al, al
  00280	0f 85 bc 00 00
	00		 jne	 $LN1@SendLogin
  00286	6a 22		 push	 34			; 00000022H
  00288	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0028d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00292	84 c0		 test	 al, al
  00294	0f 85 a8 00 00
	00		 jne	 $LN1@SendLogin
  0029a	6a 36		 push	 54			; 00000036H
  0029c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002a1	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002a6	84 c0		 test	 al, al
  002a8	0f 85 94 00 00
	00		 jne	 $LN1@SendLogin
  002ae	6a 38		 push	 56			; 00000038H
  002b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002b5	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002ba	84 c0		 test	 al, al
  002bc	0f 85 80 00 00
	00		 jne	 $LN1@SendLogin
  002c2	6a 40		 push	 64			; 00000040H
  002c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002c9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002ce	84 c0		 test	 al, al
  002d0	75 70		 jne	 SHORT $LN1@SendLogin
  002d2	6a 30		 push	 48			; 00000030H
  002d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002d9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002de	84 c0		 test	 al, al
  002e0	75 60		 jne	 SHORT $LN1@SendLogin
  002e2	6a 31		 push	 49			; 00000031H
  002e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002e9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002ee	84 c0		 test	 al, al
  002f0	75 50		 jne	 SHORT $LN1@SendLogin
  002f2	6a 43		 push	 67			; 00000043H
  002f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  002f9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  002fe	84 c0		 test	 al, al
  00300	75 40		 jne	 SHORT $LN1@SendLogin
  00302	6a 46		 push	 70			; 00000046H
  00304	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00309	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0030e	84 c0		 test	 al, al
  00310	75 30		 jne	 SHORT $LN1@SendLogin
  00312	6a 4e		 push	 78			; 0000004eH
  00314	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00319	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0031e	84 c0		 test	 al, al
  00320	75 20		 jne	 SHORT $LN1@SendLogin
  00322	6a 4f		 push	 79			; 0000004fH
  00324	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00329	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0032e	84 c0		 test	 al, al
  00330	75 10		 jne	 SHORT $LN1@SendLogin
  00332	6a 51		 push	 81			; 00000051H
  00334	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00339	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0033e	84 c0		 test	 al, al
  00340	74 7b		 je	 SHORT $LN2@SendLogin
$LN1@SendLogin:

; 133  : 	{
; 134  : #define MAX_PASS_LEN 20
; 135  : 		ZeroMemory(&gObj[UserIndex].Pass,sizeof(gObj[UserIndex].Pass));

  00342	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00348	33 c0		 xor	 eax, eax
  0034a	89 84 16 82 00
	00 00		 mov	 DWORD PTR [esi+edx+130], eax
  00351	89 84 16 86 00
	00 00		 mov	 DWORD PTR [esi+edx+134], eax
  00358	8d 8c 16 82 00
	00 00		 lea	 ecx, DWORD PTR [esi+edx+130]
  0035f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00362	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00365	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00368	88 41 14	 mov	 BYTE PTR [ecx+20], al

; 136  : 		char pass[MAX_PASS_LEN+1];
; 137  : 		pass[MAX_PASS_LEN]=0;
; 138  : 		memcpy(pass, Data->Password, sizeof(Data->Password));

  0036b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0036e	66 8b 53 08	 mov	 dx, WORD PTR [ebx+8]
  00372	88 45 ec	 mov	 BYTE PTR _pass$213445[ebp+20], al
  00375	8b 03		 mov	 eax, DWORD PTR [ebx]
  00377	89 45 d8	 mov	 DWORD PTR _pass$213445[ebp], eax

; 139  : 		BuxConvert(pass, MAX_ACCOUNT_LEN);

  0037a	8d 45 d8	 lea	 eax, DWORD PTR _pass$213445[ebp]
  0037d	6a 0a		 push	 10			; 0000000aH
  0037f	50		 push	 eax
  00380	89 4d dc	 mov	 DWORD PTR _pass$213445[ebp+4], ecx
  00383	66 89 55 e0	 mov	 WORD PTR _pass$213445[ebp+8], dx
  00387	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert

; 140  : 		gObj[UserIndex].Pass[MAX_ACCOUNT_LEN] = 0;

  0038c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00392	c6 84 0e 8c 00
	00 00 00	 mov	 BYTE PTR [esi+ecx+140], 0

; 141  : 		memcpy(gObj[UserIndex].Pass, pass, MAX_ACCOUNT_LEN);

  0039a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003a0	8b 4d d8	 mov	 ecx, DWORD PTR _pass$213445[ebp]
  003a3	8d 84 16 82 00
	00 00		 lea	 eax, DWORD PTR [esi+edx+130]
  003aa	89 08		 mov	 DWORD PTR [eax], ecx
  003ac	8b 55 dc	 mov	 edx, DWORD PTR _pass$213445[ebp+4]
  003af	89 50 04	 mov	 DWORD PTR [eax+4], edx
  003b2	66 8b 4d e0	 mov	 cx, WORD PTR _pass$213445[ebp+8]
  003b6	83 c4 08	 add	 esp, 8
  003b9	66 89 48 08	 mov	 WORD PTR [eax+8], cx
$LN2@SendLogin:

; 142  : 	}
; 143  : #endif // DISCONECT_FRIEND
; 144  : 	gObj[UserIndex].AccountID[MAX_ACCOUNT_LEN] = 0;

  003bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003c3	c6 44 16 76 00	 mov	 BYTE PTR [esi+edx+118], 0

; 145  : 	gObj[UserIndex].Name[MAX_ACCOUNT_LEN] = 0;

  003c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003cd	c6 84 06 81 00
	00 00 00	 mov	 BYTE PTR [esi+eax+129], 0

; 146  : 	memcpy(gObj[UserIndex].AccountID, id, MAX_ACCOUNT_LEN);

  003d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003db	8b 55 f0	 mov	 edx, DWORD PTR _id$[ebp]
  003de	89 54 0e 6c	 mov	 DWORD PTR [esi+ecx+108], edx
  003e2	8d 44 0e 6c	 lea	 eax, DWORD PTR [esi+ecx+108]
  003e6	8b 4d f4	 mov	 ecx, DWORD PTR _id$[ebp+4]
  003e9	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  003ec	66 8b 55 f8	 mov	 dx, WORD PTR _id$[ebp+8]
  003f0	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 147  : 	memcpy(gObj[UserIndex].Name, Data->Name, MAX_ACCOUNT_LEN);

  003f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003fa	8b 45 a4	 mov	 eax, DWORD PTR _Data$GSCopy$[ebp]
  003fd	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00400	89 54 0e 77	 mov	 DWORD PTR [esi+ecx+119], edx
  00404	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00407	8d 4c 0e 77	 lea	 ecx, DWORD PTR [esi+ecx+119]
  0040b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0040e	66 8b 40 20	 mov	 ax, WORD PTR [eax+32]
  00412	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 148  : 	gObj[UserIndex].m_cAccountItemBlock = 0;

  00416	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0041c	c6 84 0e 14 02
	00 00 00	 mov	 BYTE PTR [esi+ecx+532], 0

; 149  : 	gObj[UserIndex].m_ConnectZt = true;

  00424	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0042a	c6 84 16 ac 27
	00 00 01	 mov	 BYTE PTR [esi+edx+10156], 1

; 150  : 	gObj[UserIndex].ukn_30 = 0;

  00432	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00437	c7 44 06 30 00
	00 00 00	 mov	 DWORD PTR [esi+eax+48], 0

; 151  : 	// ----
; 152  : 	wsJServerCli.DataSend((char*)&spMsg, spMsg.h.size);

  0043f	0f b6 4d ad	 movzx	 ecx, BYTE PTR _spMsg$[ebp+1]
  00443	51		 push	 ecx
  00444	8d 55 ac	 lea	 edx, DWORD PTR _spMsg$[ebp]
  00447	52		 push	 edx
  00448	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0044d	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 153  : 	LogAddTD("join send : (%d)%s", UserIndex, gObj[UserIndex].AccountID);

  00452	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00457	8b 55 a8	 mov	 edx, DWORD PTR _UserIndex$GSCopy$[ebp]
  0045a	8d 4c 06 6c	 lea	 ecx, DWORD PTR [esi+eax+108]
  0045e	51		 push	 ecx
  0045f	52		 push	 edx
  00460	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CICILPEN@join?5send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@
  00465	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 154  : 	
; 155  : 	lpObj->m_bMapSvrMoveReq = false;

  0046b	8b 45 a0	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 156  : 	lpObj->m_sPrevMapSvrCode = -1; 

  0046e	83 c9 ff	 or	 ecx, -1
  00471	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 	lpObj->m_sDestMapNumber = -1;

  00474	0b d1		 or	 edx, ecx
  00476	c6 80 e5 1b 00
	00 00		 mov	 BYTE PTR [eax+7141], 0
  0047d	66 89 88 ec 1b
	00 00		 mov	 WORD PTR [eax+7148], cx
  00484	66 89 90 ee 1b
	00 00		 mov	 WORD PTR [eax+7150], dx

; 158  : 	lpObj->m_btDestX = 0;

  0048b	66 c7 80 f0 1b
	00 00 00 00	 mov	 WORD PTR [eax+7152], 0
$LN12@SendLogin:

; 159  : 	lpObj->m_btDestY = 0;
; 160  : }

  00494	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00497	5f		 pop	 edi
  00498	5e		 pop	 esi
  00499	33 cd		 xor	 ecx, ebp
  0049b	5b		 pop	 ebx
  0049c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a1	8b e5		 mov	 esp, ebp
  004a3	5d		 pop	 ebp
  004a4	c2 08 00	 ret	 8
?SendLogin@ConnectZt@@QAEXHPAUCONNECTZT_LOGIN@@@Z ENDP	; ConnectZt::SendLogin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendGame@ConnectZt@@QAEXH@Z			; ConnectZt::SendGame
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?gObjIsAccontConnect@@YAHHPAD@Z:PROC		; gObjIsAccontConnect
EXTRN	?DataServerGetCharListRequest@@YAXF@Z:PROC	; DataServerGetCharListRequest
; Function compile flags: /Ogtp
;	COMDAT ?SendGame@ConnectZt@@QAEXH@Z
_TEXT	SEGMENT
_pCRequest$ = -44					; size = 28
__name$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?SendGame@ConnectZt@@QAEXH@Z PROC			; ConnectZt::SendGame, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 165  : 	if(!ZtConfig.CommonServer.ReConnect) return;

  00010	80 3d 14 01 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+276, 0
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _UserIndex$[ebp]
  0001b	0f 84 f1 00 00
	00		 je	 $LN5@SendGame

; 166  : 	// ----
; 167  : 	gObj[UserIndex].m_ConnectZt = false;

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00026	56		 push	 esi
  00027	8b f7		 mov	 esi, edi
  00029	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 168  : 	DataServerGetCharListRequest(UserIndex);

  0002f	57		 push	 edi
  00030	c6 84 06 ac 27
	00 00 00	 mov	 BYTE PTR [esi+eax+10156], 0
  00038	e8 00 00 00 00	 call	 ?DataServerGetCharListRequest@@YAXF@Z ; DataServerGetCharListRequest

; 169  : 	// ----
; 170  : 	if ( !PacketCheckTime2(&gObj[UserIndex]))

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00043	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?PacketCheckTime2@@YAHPAUOBJECTSTRUCT@@@Z ; PacketCheckTime2
  0004c	83 c4 08	 add	 esp, 8
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 ba 00 00
	00		 je	 $LN9@SendGame

; 171  : 	{
; 172  : 		return;
; 173  : 	}
; 174  : 	// ----
; 175  : 	if ( !gObjIsAccontConnect(UserIndex, gObj[UserIndex].AccountID))

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005c	8d 4c 06 6c	 lea	 ecx, DWORD PTR [esi+eax+108]
  00060	51		 push	 ecx
  00061	57		 push	 edi
  00062	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  00067	83 c4 08	 add	 esp, 8
  0006a	85 c0		 test	 eax, eax
  0006c	0f 84 9f 00 00
	00		 je	 $LN9@SendGame

; 176  : 	{
; 177  : 		return;
; 178  : 	}
; 179  : 	// ----
; 180  : 	if ( gObj[UserIndex].Connected == PLAYER_PLAYING )

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00077	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0007c	0f 84 8f 00 00
	00		 je	 $LN9@SendGame

; 181  : 	{
; 182  : 		return;
; 183  : 	}
; 184  : 	// ----
; 185  : 	gObj[UserIndex].bEnableDelCharacter = FALSE;
; 186  : 	// ----
; 187  : 	char _name[MAX_ACCOUNT_LEN+1];
; 188  : 	SDHP_DBCHARINFOREQUEST pCRequest;
; 189  : 	// ----
; 190  : 	PHeadSetB((LPBYTE)&pCRequest, 0x06, sizeof(pCRequest));

  00082	6a 1c		 push	 28			; 0000001cH
  00084	8d 55 d4	 lea	 edx, DWORD PTR _pCRequest$[ebp]
  00087	6a 06		 push	 6
  00089	52		 push	 edx
  0008a	c7 44 06 0c 00
	00 00 00	 mov	 DWORD PTR [esi+eax+12], 0
  00092	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 191  : 	memset(_name, 0, MAX_ACCOUNT_LEN);

  00097	33 c0		 xor	 eax, eax
  00099	89 45 f0	 mov	 DWORD PTR __name$[ebp], eax
  0009c	89 45 f4	 mov	 DWORD PTR __name$[ebp+4], eax
  0009f	66 89 45 f8	 mov	 WORD PTR __name$[ebp+8], ax

; 192  : 
; 193  : 	memcpy(_name, gObj[UserIndex].Name, MAX_ACCOUNT_LEN);

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	8b 4c 06 77	 mov	 ecx, DWORD PTR [esi+eax+119]
  000ac	89 4d f0	 mov	 DWORD PTR __name$[ebp], ecx
  000af	8b 54 06 7b	 mov	 edx, DWORD PTR [esi+eax+123]
  000b3	89 55 f4	 mov	 DWORD PTR __name$[ebp+4], edx
  000b6	66 8b 44 06 7f	 mov	 ax, WORD PTR [esi+eax+127]

; 194  : 
; 195  : 	BuxConvert(_name, MAX_ACCOUNT_LEN);

  000bb	8d 4d f0	 lea	 ecx, DWORD PTR __name$[ebp]
  000be	6a 0a		 push	 10			; 0000000aH
  000c0	51		 push	 ecx
  000c1	66 89 45 f8	 mov	 WORD PTR __name$[ebp+8], ax
  000c5	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert

; 196  : 	memcpy(pCRequest.Name, _name, MAX_ACCOUNT_LEN);

  000ca	8b 55 f0	 mov	 edx, DWORD PTR __name$[ebp]
  000cd	8b 45 f4	 mov	 eax, DWORD PTR __name$[ebp+4]
  000d0	66 8b 4d f8	 mov	 cx, WORD PTR __name$[ebp+8]
  000d4	89 55 e2	 mov	 DWORD PTR _pCRequest$[ebp+14], edx

; 197  : 	strcpy(pCRequest.AccountID, gObj[UserIndex].AccountID);

  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000dd	89 45 e6	 mov	 DWORD PTR _pCRequest$[ebp+18], eax
  000e0	8d 44 16 6c	 lea	 eax, DWORD PTR [esi+edx+108]
  000e4	8d 55 d7	 lea	 edx, DWORD PTR _pCRequest$[ebp+3]
  000e7	83 c4 14	 add	 esp, 20			; 00000014H
  000ea	66 89 4d ea	 mov	 WORD PTR _pCRequest$[ebp+22], cx
  000ee	2b d0		 sub	 edx, eax
$LL7@SendGame:
  000f0	8a 08		 mov	 cl, BYTE PTR [eax]
  000f2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000f5	40		 inc	 eax
  000f6	84 c9		 test	 cl, cl
  000f8	75 f6		 jne	 SHORT $LL7@SendGame

; 198  : 	pCRequest.Number = UserIndex;
; 199  : 	// ----
; 200  : 	cDBSMng.Send((char*)&pCRequest, pCRequest.h.size);

  000fa	0f b6 45 d5	 movzx	 eax, BYTE PTR _pCRequest$[ebp+1]
  000fe	50		 push	 eax
  000ff	8d 4d d4	 lea	 ecx, DWORD PTR _pCRequest$[ebp]
  00102	51		 push	 ecx
  00103	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00108	66 89 7d ee	 mov	 WORD PTR _pCRequest$[ebp+26], di
  0010c	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN9@SendGame:
  00111	5e		 pop	 esi
$LN5@SendGame:

; 201  : }

  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	33 cd		 xor	 ecx, ebp
  00117	5f		 pop	 edi
  00118	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 04 00	 ret	 4
?SendGame@ConnectZt@@QAEXH@Z ENDP			; ConnectZt::SendGame
_TEXT	ENDS
PUBLIC	?SendClose@ConnectZt@@QAEXHH@Z			; ConnectZt::SendClose
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?SendClose@ConnectZt@@QAEXHH@Z
_TEXT	SEGMENT
_pRequest$ = 8						; size = 4
_UserIndex$ = 8						; size = 4
_Type$ = 12						; size = 4
?SendClose@ConnectZt@@QAEXHH@Z PROC			; ConnectZt::SendClose, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 	if(!ZtConfig.CommonServer.ReConnect)

  00003	80 3d 14 01 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+276, 0

; 207  : 	{
; 208  : 		CloseClient(UserIndex);

  0000a	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  0000d	75 0d		 jne	 SHORT $LN1@SendClose
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00015	83 c4 04	 add	 esp, 4

; 216  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
$LN1@SendClose:

; 209  : 		return;
; 210  : 	}
; 211  : 	// ----
; 212  : 	CONNECTZT_CLOSE pRequest;
; 213  : 	gObj[UserIndex].DisconnectType = Type;

  0001c	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  0001f	8b c8		 mov	 ecx, eax
  00021	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00027	56		 push	 esi
  00028	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002e	89 94 31 b0 27
	00 00		 mov	 DWORD PTR [ecx+esi+10160], edx

; 214  : 	pRequest.h.set((LPBYTE)&pRequest, 0xFB, 0xC, sizeof(CONNECTZT_CLOSE));
; 215  : 	DataSend(UserIndex, (LPBYTE)&pRequest, pRequest.h.size);

  00035	6a 04		 push	 4
  00037	8d 4d 08	 lea	 ecx, DWORD PTR _pRequest$[ebp]
  0003a	51		 push	 ecx
  0003b	50		 push	 eax
  0003c	c7 45 08 c1 04
	fb 0c		 mov	 DWORD PTR _pRequest$[ebp], 217777345 ; 0cfb04c1H
  00043	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	5e		 pop	 esi

; 216  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?SendClose@ConnectZt@@QAEXHH@Z ENDP			; ConnectZt::SendClose
_TEXT	ENDS
PUBLIC	?RecvClose@ConnectZt@@QAEXH@Z			; ConnectZt::RecvClose
EXTRN	?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z:PROC	; CZtGDManager::GD_OfflineAfk
EXTRN	?g_ZtGDManager@@3VCZtGDManager@@A:BYTE		; g_ZtGDManager
EXTRN	?GDUpdateData@OfflineMode@@QAEXH@Z:PROC		; OfflineMode::GDUpdateData
EXTRN	?g_OfflineMode@@3VOfflineMode@@A:BYTE		; g_OfflineMode
EXTRN	?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z:PROC ; GJSetCharacterInfo
EXTRN	?GCCloseMsgSend@@YAXHE@Z:PROC			; GCCloseMsgSend
; Function compile flags: /Ogtp
;	COMDAT ?RecvClose@ConnectZt@@QAEXH@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
?RecvClose@ConnectZt@@QAEXH@Z PROC			; ConnectZt::RecvClose, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 221  : 	LPOBJ lpObj = &gObj[UserIndex];

  00005	8b 7d 08	 mov	 edi, DWORD PTR _UserIndex$[ebp]
  00008	8b f7		 mov	 esi, edi
  0000a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00010	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 222  : 
; 223  : #if(OFFLINE_MODE==TRUE)
; 224  : 	if(lpObj->DisconnectType == TRUE)

  00016	8b 86 b0 27 00
	00		 mov	 eax, DWORD PTR [esi+10160]
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 3d		 jne	 SHORT $LN22@RecvClose

; 225  : 	{
; 226  : 		GCCloseMsgSend(UserIndex, 2);

  00021	6a 02		 push	 2
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 ?GCCloseMsgSend@@YAXHE@Z ; GCCloseMsgSend

; 227  : 		//CloseClient(UserIndex);
; 228  : 		lpObj->m_OfflineMode = 1;//lpObj->DisconnectType;
; 229  : 		#if(OFFLINE_MODE_RESTORE)
; 230  : 		GJSetCharacterInfo(lpObj, lpObj->m_Index, 0);

  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	6a 00		 push	 0
  0002d	50		 push	 eax
  0002e	56		 push	 esi
  0002f	c6 86 d4 28 00
	00 01		 mov	 BYTE PTR [esi+10452], 1
  00036	e8 00 00 00 00	 call	 ?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z ; GJSetCharacterInfo
  0003b	83 c4 14	 add	 esp, 20			; 00000014H

; 231  : 		g_OfflineMode.GDUpdateData(UserIndex);

  0003e	57		 push	 edi
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  00044	e8 00 00 00 00	 call	 ?GDUpdateData@OfflineMode@@QAEXH@Z ; OfflineMode::GDUpdateData

; 232  : 		#endif
; 233  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  00049	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  0004b	6a 01		 push	 1
  0004d	57		 push	 edi
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  00053	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN22@RecvClose:

; 234  : 		return;
; 235  : 	}
; 236  : #endif
; 237  : 
; 238  : 	if(lpObj->DisconnectType == NORM_DC)

  0005e	85 c0		 test	 eax, eax
  00060	75 0b		 jne	 SHORT $LN21@RecvClose

; 239  : 	{
; 240  : 		CloseClient(UserIndex);

  00062	57		 push	 edi
  00063	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00068	83 c4 04	 add	 esp, 4

; 241  : 	}
; 242  : 	else

  0006b	eb 0b		 jmp	 SHORT $LN20@RecvClose
$LN21@RecvClose:

; 243  : 	{
; 244  : 		GCCloseMsgSend(UserIndex, 2);

  0006d	6a 02		 push	 2
  0006f	57		 push	 edi
  00070	e8 00 00 00 00	 call	 ?GCCloseMsgSend@@YAXHE@Z ; GCCloseMsgSend
  00075	83 c4 08	 add	 esp, 8
$LN20@RecvClose:

; 245  : 	}
; 246  : 
; 247  : 	if(lpObj->DisconnectType == OFFZEN_DC)

  00078	8b 86 b0 27 00
	00		 mov	 eax, DWORD PTR [esi+10160]
  0007e	83 f8 01	 cmp	 eax, 1
  00081	75 1a		 jne	 SHORT $LN19@RecvClose

; 248  : 	{
; 249  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 250  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  00083	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  00085	50		 push	 eax
  00086	57		 push	 edi
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0008c	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  00092	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
$LN19@RecvClose:

; 251  : 	}
; 252  : 	else if(lpObj->DisconnectType == OFFCR_DC)

  0009d	83 f8 02	 cmp	 eax, 2
  000a0	75 1b		 jne	 SHORT $LN17@RecvClose

; 253  : 	{
; 254  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 255  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  000a2	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  000a4	6a 01		 push	 1
  000a6	57		 push	 edi
  000a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  000ac	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  000b2	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  000b9	5d		 pop	 ebp
  000ba	c2 04 00	 ret	 4
$LN17@RecvClose:

; 256  : 	}
; 257  : 	else if(lpObj->DisconnectType == OFFWC_DC)

  000bd	83 f8 03	 cmp	 eax, 3
  000c0	75 1b		 jne	 SHORT $LN15@RecvClose

; 258  : 	{
; 259  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 260  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  000c2	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  000c4	6a 01		 push	 1
  000c6	57		 push	 edi
  000c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  000cc	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  000d2	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  000d9	5d		 pop	 ebp
  000da	c2 04 00	 ret	 4
$LN15@RecvClose:

; 261  : 	}
; 262  : 	else if(lpObj->DisconnectType == OFFWP_DC)

  000dd	83 f8 04	 cmp	 eax, 4
  000e0	75 1b		 jne	 SHORT $LN13@RecvClose

; 263  : 	{
; 264  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 265  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  000e2	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  000e4	6a 01		 push	 1
  000e6	57		 push	 edi
  000e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  000ec	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  000f2	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
$LN13@RecvClose:

; 266  : 	}
; 267  : 	else if(lpObj->DisconnectType == OFFWG_DC)

  000fd	83 f8 05	 cmp	 eax, 5
  00100	75 1b		 jne	 SHORT $LN11@RecvClose

; 268  : 	{
; 269  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 270  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  00102	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  00104	6a 01		 push	 1
  00106	57		 push	 edi
  00107	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0010c	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  00112	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  00117	5f		 pop	 edi
  00118	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
$LN11@RecvClose:

; 271  : 	}
; 272  : 	else if(lpObj->DisconnectType == OFFCHAOS_DC)

  0011d	83 f8 06	 cmp	 eax, 6
  00120	75 1b		 jne	 SHORT $LN9@RecvClose

; 273  : 	{
; 274  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 275  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  00122	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  00124	6a 01		 push	 1
  00126	57		 push	 edi
  00127	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0012c	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  00132	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  00139	5d		 pop	 ebp
  0013a	c2 04 00	 ret	 4
$LN9@RecvClose:

; 276  : 	}
; 277  : 	else if(lpObj->DisconnectType == OFFBLESS_DC)

  0013d	83 f8 07	 cmp	 eax, 7
  00140	75 1b		 jne	 SHORT $LN7@RecvClose

; 278  : 	{
; 279  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 280  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  00142	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  00144	6a 01		 push	 1
  00146	57		 push	 edi
  00147	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0014c	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  00152	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  00157	5f		 pop	 edi
  00158	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  00159	5d		 pop	 ebp
  0015a	c2 04 00	 ret	 4
$LN7@RecvClose:

; 281  : 	}
; 282  : 	else if(lpObj->DisconnectType == OFFSOUL_DC)

  0015d	83 f8 08	 cmp	 eax, 8
  00160	75 1b		 jne	 SHORT $LN5@RecvClose

; 283  : 	{
; 284  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 285  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  00162	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  00164	6a 01		 push	 1
  00166	57		 push	 edi
  00167	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0016c	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  00172	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  00177	5f		 pop	 edi
  00178	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  00179	5d		 pop	 ebp
  0017a	c2 04 00	 ret	 4
$LN5@RecvClose:

; 286  : 	}
; 287  : 	else if(lpObj->DisconnectType == OFFLIFE_DC)

  0017d	83 f8 09	 cmp	 eax, 9
  00180	75 1b		 jne	 SHORT $LN3@RecvClose

; 288  : 	{
; 289  : 		lpObj->OffTrade = lpObj->DisconnectType;
; 290  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 0);

  00182	6a 00		 push	 0

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  00184	6a 01		 push	 1
  00186	57		 push	 edi
  00187	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0018c	89 86 ac 22 00
	00		 mov	 DWORD PTR [esi+8876], eax
  00192	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
  00197	5f		 pop	 edi
  00198	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  00199	5d		 pop	 ebp
  0019a	c2 04 00	 ret	 4
$LN3@RecvClose:

; 291  : 	}
; 292  : 	else if(lpObj->DisconnectType == OFFAFK_DC)

  0019d	83 f8 14	 cmp	 eax, 20			; 00000014H
  001a0	75 19		 jne	 SHORT $LN1@RecvClose

; 293  : 	{
; 294  : 		lpObj->OffExp = 1;
; 295  : 		g_ZtGDManager.GD_OfflineAfk(UserIndex, 1, 1);

  001a2	6a 01		 push	 1
  001a4	6a 01		 push	 1
  001a6	57		 push	 edi
  001a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  001ac	c7 86 98 22 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+8856], 1
  001b6	e8 00 00 00 00	 call	 ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ; CZtGDManager::GD_OfflineAfk
$LN1@RecvClose:
  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi

; 296  : 		
; 297  : 	}
; 298  : 
; 299  : 	
; 300  : }

  001bd	5d		 pop	 ebp
  001be	c2 04 00	 ret	 4
?RecvClose@ConnectZt@@QAEXH@Z ENDP			; ConnectZt::RecvClose
_TEXT	ENDS
PUBLIC	?Timer@ConnectZt@@QAEXXZ			; ConnectZt::Timer
; Function compile flags: /Ogtp
;	COMDAT ?Timer@ConnectZt@@QAEXXZ
_TEXT	SEGMENT
?Timer@ConnectZt@@QAEXXZ PROC				; ConnectZt::Timer, COMDAT
; _this$ = ecx

; 305  : 	if(!ZtConfig.CommonServer.ReConnect)

  00000	80 3d 14 01 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+276, 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 22		 je	 SHORT $LN1@Timer

; 306  : 	{
; 307  : 		return;
; 308  : 	}
; 309  : 
; 310  : 	if(this->ConnectIndex == -1)

  0000c	83 3e ff	 cmp	 DWORD PTR [esi], -1
  0000f	74 1d		 je	 SHORT $LN1@Timer

; 311  : 	{
; 312  : 		return;
; 313  : 	}
; 314  : 
; 315  : 	DWORD ConnectTime = GetTickCount() - this->ConnectTick;

  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00017	2b 46 04	 sub	 eax, DWORD PTR [esi+4]

; 316  : 
; 317  : 	if(ConnectTime > 1000)

  0001a	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0001f	76 0d		 jbe	 SHORT $LN1@Timer

; 318  : 	{
; 319  : 		this->ConnectIndex = -1;

  00021	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 320  : 		this->ConnectTick = 0;

  00027	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN1@Timer:
  0002e	5e		 pop	 esi

; 321  : 	}
; 322  : }

  0002f	c3		 ret	 0
?Timer@ConnectZt@@QAEXXZ ENDP				; ConnectZt::Timer
_TEXT	ENDS
PUBLIC	??0ConnectZt@@QAE@XZ				; ConnectZt::ConnectZt
; Function compile flags: /Ogtp
;	COMDAT ??0ConnectZt@@QAE@XZ
_TEXT	SEGMENT
??0ConnectZt@@QAE@XZ PROC				; ConnectZt::ConnectZt, COMDAT
; _this$ = ecx

; 39   : 	this->Init();

  00000	e8 00 00 00 00	 call	 ?Init@ConnectZt@@QAEXXZ	; ConnectZt::Init

; 40   : }

  00005	8b c1		 mov	 eax, ecx
  00007	c3		 ret	 0
??0ConnectZt@@QAE@XZ ENDP				; ConnectZt::ConnectZt
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??__Eg_ConnectZt@@YAXXZ
text$yc	SEGMENT
??__Eg_ConnectZt@@YAXXZ PROC				; `dynamic initializer for 'g_ConnectZt'', COMDAT

; 20   : ConnectZt g_ConnectZt;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectZt@@3VConnectZt@@A ; g_ConnectZt
  00005	e9 00 00 00 00	 jmp	 ??0ConnectZt@@QAE@XZ	; ConnectZt::ConnectZt
??__Eg_ConnectZt@@YAXXZ ENDP				; `dynamic initializer for 'g_ConnectZt''
text$yc	ENDS
PUBLIC	?g_ConnectZt@@3VConnectZt@@A			; g_ConnectZt
_BSS	SEGMENT
?g_ConnectZt@@3VConnectZt@@A DQ 01H DUP (?)		; g_ConnectZt
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ConnectZt$initializer$ DD FLAT:??__Eg_ConnectZt@@YAXXZ
CRT$XCU	ENDS
END
