; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\Crywolf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bDBCrywolfOccupied@@3HA			; g_bDBCrywolfOccupied
_BSS	SEGMENT
?g_bDBCrywolfOccupied@@3HA DD 01H DUP (?)		; g_bDBCrywolfOccupied
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Reset@CCrywolfObjInfo@@QAEXXZ			; CCrywolfObjInfo::Reset
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfobjinfo.h
;	COMDAT ?Reset@CCrywolfObjInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CCrywolfObjInfo@@QAEXXZ PROC			; CCrywolfObjInfo::Reset, COMDAT
; _this$ = ecx

; 26   : 	{

  00000	8b d1		 mov	 edx, ecx
  00002	57		 push	 edi

; 27   : 		for ( int i=0;i<MAX_CRYWOLF_OBJ_INFO;i++)

  00003	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]

; 28   : 		{
; 29   : 			this->m_iObjIndex[i] = -1;

  00006	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0000b	83 c8 ff	 or	 eax, -1
  0000e	f3 ab		 rep stosd

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  00010	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00016	5f		 pop	 edi

; 33   : 	}

  00017	c3		 ret	 0
?Reset@CCrywolfObjInfo@@QAEXXZ ENDP			; CCrywolfObjInfo::Reset
_TEXT	ENDS
PUBLIC	?AddObj@CCrywolfObjInfo@@QAEHH@Z		; CCrywolfObjInfo::AddObj
; Function compile flags: /Ogtp
;	COMDAT ?AddObj@CCrywolfObjInfo@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddObj@CCrywolfObjInfo@@QAEHH@Z PROC			; CCrywolfObjInfo::AddObj, COMDAT
; _this$ = ecx

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : 		if ( this->m_iObjCount >= MAX_CRYWOLF_OBJ_INFO )

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  0000a	7c 06		 jl	 SHORT $LN1@AddObj

; 38   : 		{
; 39   : 			return FALSE;

  0000c	33 c0		 xor	 eax, eax

; 46   : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN1@AddObj:

; 40   : 		}
; 41   : 
; 42   : 		this->m_iObjIndex[this->m_iObjCount] = iIndex;

  00012	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00015	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx

; 43   : 		this->m_iObjCount++;

  00019	ff 01		 inc	 DWORD PTR [ecx]

; 44   : 		
; 45   : 		return TRUE;

  0001b	b8 01 00 00 00	 mov	 eax, 1

; 46   : 	}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?AddObj@CCrywolfObjInfo@@QAEHH@Z ENDP			; CCrywolfObjInfo::AddObj
_TEXT	ENDS
PUBLIC	?Reset@CCrywolfStateTimeInfo@@QAEXXZ		; CCrywolfStateTimeInfo::Reset
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfstatetimeinfo.h
;	COMDAT ?Reset@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CCrywolfStateTimeInfo@@QAEXXZ PROC		; CCrywolfStateTimeInfo::Reset, COMDAT
; _this$ = ecx

; 22   : 		this->m_bUsed = FALSE;
; 23   : 		this->m_iStateNumber = -1;	

  00000	83 c8 ff	 or	 eax, -1
  00003	33 d2		 xor	 edx, edx
  00005	89 11		 mov	 DWORD PTR [ecx], edx
  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 24   : 		this->m_iYear = -1;	

  0000a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 25   : 		this->m_iMonth = -1;	

  0000d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 26   : 		this->m_iDay = -1;	

  00010	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 27   : 		this->m_iDayOfWeek = -1;	

  00013	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 28   : 		this->m_iHour = -1;	

  00016	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 29   : 		this->m_iMinute = -1;	

  00019	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 30   : 		this->m_iSecond = -1;	

  0001c	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 31   : 		this->m_iContinuanceTime = 0;	

  0001f	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 32   : 		this->m_dwAppliedTickCount = 0;	

  00022	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 33   : 	}

  00025	c3		 ret	 0
?Reset@CCrywolfStateTimeInfo@@QAEXXZ ENDP		; CCrywolfStateTimeInfo::Reset
_TEXT	ENDS
PUBLIC	?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ	; CCrywolfStateTimeInfo::SetAppliedTime
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ PROC	; CCrywolfStateTimeInfo::SetAppliedTime, COMDAT
; _this$ = ecx

; 36   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 37   : 		this->m_dwAppliedTickCount = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0000c	5e		 pop	 esi

; 38   : 	}

  0000d	c3		 ret	 0
?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ENDP	; CCrywolfStateTimeInfo::SetAppliedTime
_TEXT	ENDS
PUBLIC	?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ	; CCrywolfStateTimeInfo::ResetAppliedTime
; Function compile flags: /Ogtp
;	COMDAT ?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ PROC	; CCrywolfStateTimeInfo::ResetAppliedTime, COMDAT
; _this$ = ecx

; 42   : 		this->m_dwAppliedTickCount = 0;

  00000	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 43   : 	}

  00007	c3		 ret	 0
?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ENDP	; CCrywolfStateTimeInfo::ResetAppliedTime
_TEXT	ENDS
PUBLIC	?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckContinuanceTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ PROC ; CCrywolfStateTimeInfo::CheckContinuanceTime, COMDAT
; _this$ = ecx

; 46   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 47   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  0000c	39 46 24	 cmp	 DWORD PTR [esi+36], eax
  0000f	5e		 pop	 esi
  00010	1b c0		 sbb	 eax, eax
  00012	40		 inc	 eax

; 48   : 		{
; 49   : 			return FALSE;
; 50   : 		}
; 51   : 
; 52   : 		return TRUE;
; 53   : 	}

  00013	c3		 ret	 0
?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP ; CCrywolfStateTimeInfo::CheckContinuanceTime
_TEXT	ENDS
PUBLIC	?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ	; CCrywolfStateTimeInfo::GetLeftTime
; Function compile flags: /Ogtp
;	COMDAT ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ PROC		; CCrywolfStateTimeInfo::GetLeftTime, COMDAT
; _this$ = ecx

; 117  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi

; 118  : 		if ( this->CheckContinuanceTime() )

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  0000f	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00012	77 0e		 ja	 SHORT $LN2@GetLeftTim

; 119  : 		{
; 120  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  00014	ff d7		 call	 edi
  00016	8b c8		 mov	 ecx, eax
  00018	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001b	2b c1		 sub	 eax, ecx
  0001d	03 46 24	 add	 eax, DWORD PTR [esi+36]

; 121  : 
; 122  : 			if ( iLeftTime < 0 )

  00020	79 02		 jns	 SHORT $LN3@GetLeftTim
$LN2@GetLeftTim:

; 123  : 			{
; 124  : 				iLeftTime = 0;
; 125  : 			}
; 126  : 
; 127  : 			return iLeftTime;
; 128  : 		}
; 129  : 
; 130  : 		return 0;

  00022	33 c0		 xor	 eax, eax
$LN3@GetLeftTim:
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 131  : 	}

  00026	c3		 ret	 0
?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP		; CCrywolfStateTimeInfo::GetLeftTime
_TEXT	ENDS
PUBLIC	?GetCrywolfState@CCrywolf@@QAEHXZ		; CCrywolf::GetCrywolfState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.h
;	COMDAT ?GetCrywolfState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?GetCrywolfState@CCrywolf@@QAEHXZ PROC			; CCrywolf::GetCrywolfState, COMDAT
; _this$ = ecx

; 91   : 	int GetCrywolfState(){return this->m_iCrywolfState;}

  00000	8b 81 ec b7 0f
	00		 mov	 eax, DWORD PTR [ecx+1030124]
  00006	c3		 ret	 0
?GetCrywolfState@CCrywolf@@QAEHXZ ENDP			; CCrywolf::GetCrywolfState
_TEXT	ENDS
PUBLIC	?GetOccupationState@CCrywolf@@QAEHXZ		; CCrywolf::GetOccupationState
; Function compile flags: /Ogtp
;	COMDAT ?GetOccupationState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?GetOccupationState@CCrywolf@@QAEHXZ PROC		; CCrywolf::GetOccupationState, COMDAT
; _this$ = ecx

; 92   : 	int GetOccupationState(){return this->m_iOccupationState;}

  00000	8b 81 f0 b7 0f
	00		 mov	 eax, DWORD PTR [ecx+1030128]
  00006	c3		 ret	 0
?GetOccupationState@CCrywolf@@QAEHXZ ENDP		; CCrywolf::GetOccupationState
_TEXT	ENDS
PUBLIC	?SetDBDataLoad@CCrywolf@@QAEXH@Z		; CCrywolf::SetDBDataLoad
; Function compile flags: /Ogtp
;	COMDAT ?SetDBDataLoad@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_bIsLoaded$ = 8						; size = 4
?SetDBDataLoad@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetDBDataLoad, COMDAT
; _this$ = ecx

; 93   : 	void SetDBDataLoad(BOOL bIsLoaded){this->m_bDBDataLoadOK = bIsLoaded;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _bIsLoaded$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetDBDataLoad@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetDBDataLoad
_TEXT	ENDS
PUBLIC	?SetCrywolfState@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfState
; Function compile flags: /Ogtp
;	COMDAT ?SetCrywolfState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
?SetCrywolfState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetCrywolfState, COMDAT
; _this$ = ecx

; 94   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]
  00006	89 81 ec b7 0f
	00		 mov	 DWORD PTR [ecx+1030124], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrywolfState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetCrywolfState
_TEXT	ENDS
PUBLIC	?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z	; CCrywolf::SetCrywolfStateAppliedTime
; Function compile flags: /Ogtp
;	COMDAT ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z PROC	; CCrywolf::SetCrywolfStateAppliedTime, COMDAT
; _this$ = ecx

; 95   : 	void SetCrywolfStateAppliedTime(int iCrywolfState){this->m_StateTimeInfo[iCrywolfState].SetAppliedTime();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _iCrywolfState$[ebp]
  0000f	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00012	89 84 31 60 ce
	0f 00		 mov	 DWORD PTR [ecx+esi+1035872], eax
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ENDP	; CCrywolf::SetCrywolfStateAppliedTime
_TEXT	ENDS
PUBLIC	?SetOccupationState@CCrywolf@@QAEXH@Z		; CCrywolf::SetOccupationState
; Function compile flags: /Ogtp
;	COMDAT ?SetOccupationState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iOccupationState$ = 8					; size = 4
?SetOccupationState@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetOccupationState, COMDAT
; _this$ = ecx

; 96   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  00006	89 81 f0 b7 0f
	00		 mov	 DWORD PTR [ecx+1030128], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetOccupationState@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetOccupationState
_TEXT	ENDS
PUBLIC	?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfBossIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iBossIndex$ = 8					; size = 4
?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfBossIndex, COMDAT
; _this$ = ecx

; 97   : 	void SetCrywolfBossIndex(int iBossIndex){this->m_iBossIndex = iBossIndex;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iBossIndex$[ebp]
  00006	89 81 d4 cf 0f
	00		 mov	 DWORD PTR [ecx+1036244], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfBossIndex
_TEXT	ENDS
PUBLIC	?GetHPPercentage@CCrywolfShield@@QAEHXZ		; CCrywolfShield::GetHPPercentage
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfstatue.h
;	COMDAT ?GetHPPercentage@CCrywolfShield@@QAEHXZ
_TEXT	SEGMENT
?GetHPPercentage@CCrywolfShield@@QAEHXZ PROC		; CCrywolfShield::GetHPPercentage, COMDAT
; _this$ = ecx

; 33   : 	{

  00000	56		 push	 esi

; 34   : 		if ( this->m_iShieldMaxHP )

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	85 f6		 test	 esi, esi
  00005	74 0b		 je	 SHORT $LN1@GetHPPerce

; 35   : 		{
; 36   : 			return (this->m_iShieldHP * 100) / this->m_iShieldMaxHP;

  00007	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000a	6b c0 64	 imul	 eax, 100		; 00000064H
  0000d	99		 cdq
  0000e	f7 fe		 idiv	 esi
  00010	5e		 pop	 esi

; 40   : 	}

  00011	c3		 ret	 0
$LN1@GetHPPerce:

; 37   : 		}
; 38   : 
; 39   : 		return 0;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 40   : 	}

  00015	c3		 ret	 0
?GetHPPercentage@CCrywolfShield@@QAEHXZ ENDP		; CCrywolfShield::GetHPPercentage
_TEXT	ENDS
PUBLIC	??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z	; CCrywolfScoreSort::operator()
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfutil.h
;	COMDAT ??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj1$ = 8						; size = 4
_lpObj2$ = 12						; size = 4
??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z PROC	; CCrywolfScoreSort::operator(), COMDAT
; _this$ = ecx

; 20   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 21   : 		bool bResult = ( lpObj1->m_iCrywolfMVPScore >= lpObj2->m_iCrywolfMVPScore ) ? TRUE : FALSE;

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj1$[ebp]
  00007	8b 8e c0 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8128]
  0000d	57		 push	 edi
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _lpObj2$[ebp]
  00011	8b 97 c0 1f 00
	00		 mov	 edx, DWORD PTR [edi+8128]
  00017	3b ca		 cmp	 ecx, edx
  00019	0f 9d c0	 setge	 al

; 22   : 
; 23   : 		if ( lpObj1->m_iCrywolfMVPScore == lpObj2->m_iCrywolfMVPScore )

  0001c	3b ca		 cmp	 ecx, edx
  0001e	75 0f		 jne	 SHORT $LN1@operator

; 24   : 			bResult = ( lpObj1->Experience < lpObj2->Experience ) ? TRUE : FALSE;

  00020	8b 86 c8 00 00
	00		 mov	 eax, DWORD PTR [esi+200]
  00026	3b 87 c8 00 00
	00		 cmp	 eax, DWORD PTR [edi+200]
  0002c	0f 92 c0	 setb	 al
$LN1@operator:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 25   : 
; 26   : 		return bResult;
; 27   : 	}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z ENDP	; CCrywolfScoreSort::operator()
_TEXT	ENDS
PUBLIC	?GetMapSvrGroup@CMapServerManager@@QAEHXZ	; CMapServerManager::GetMapSvrGroup
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 50   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	8b 81 c0 32 01
	00		 mov	 eax, DWORD PTR [ecx+78528]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN1@GetMapSvrG

; 51   : 		{
; 52   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]

; 55   : 	}

  0000e	c3		 ret	 0
$LN1@GetMapSvrG:

; 53   : 		}
; 54   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1

; 55   : 	}

  00012	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CCrywolf@@6B@				; CCrywolf::`vftable'
PUBLIC	??1CCrywolf@@UAE@XZ				; CCrywolf::~CCrywolf
PUBLIC	??_R4CCrywolf@@6B@				; CCrywolf::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrywolf@@@8				; CCrywolf `RTTI Type Descriptor'
PUBLIC	??_R3CCrywolf@@8				; CCrywolf::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrywolf@@8				; CCrywolf::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrywolf@@8			; CCrywolf::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??1MapClass@@UAE@XZ:PROC			; MapClass::~MapClass
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCrywolf@@UAEPAXI@Z:PROC			; CCrywolf::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCrywolf@@8
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrywolf@@8 DD FLAT:??_R0?AVCCrywolf@@@8	; CCrywolf::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrywolf@@8
rdata$r	SEGMENT
??_R2CCrywolf@@8 DD FLAT:??_R1A@?0A@EA@CCrywolf@@8	; CCrywolf::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCrywolf@@8
rdata$r	SEGMENT
??_R3CCrywolf@@8 DD 00H					; CCrywolf::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrywolf@@@8
_DATA	SEGMENT
??_R0?AVCCrywolf@@@8 DD FLAT:??_7type_info@@6B@		; CCrywolf `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrywolf@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCrywolf@@6B@
rdata$r	SEGMENT
??_R4CCrywolf@@6B@ DD 00H				; CCrywolf::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrywolf@@@8
	DD	FLAT:??_R3CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_7CCrywolf@@6B@
CONST	SEGMENT
??_7CCrywolf@@6B@ DD FLAT:??_R4CCrywolf@@6B@		; CCrywolf::`vftable'
	DD	FLAT:??_ECCrywolf@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CCrywolf@@UAE@XZ
_TEXT	SEGMENT
??1CCrywolf@@UAE@XZ PROC				; CCrywolf::~CCrywolf, COMDAT
; _this$ = ecx

; 50   : 	return;
; 51   : }

  00000	68 00 00 00 00	 push	 OFFSET ??1MapClass@@UAE@XZ ; MapClass::~MapClass
  00005	6a 03		 push	 3
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCrywolf@@6B@
  0000d	68 48 3d 05 00	 push	 343368			; 00053d48H
  00012	83 c1 14	 add	 ecx, 20			; 00000014H
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001b	c3		 ret	 0
??1CCrywolf@@UAE@XZ ENDP				; CCrywolf::~CCrywolf
_TEXT	ENDS
PUBLIC	?Init@CCrywolf@@QAEXXZ				; CCrywolf::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?Init@CCrywolf@@QAEXXZ PROC				; CCrywolf::Init, COMDAT
; _this$ = ecx

; 353  : 	return;
; 354  : }

  00000	c3		 ret	 0
?Init@CCrywolf@@QAEXXZ ENDP				; CCrywolf::Init
_TEXT	ENDS
PUBLIC	?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z	; CCrywolf::LoadCrywolfMapAttr
EXTRN	?LoadMapAttr@MapClass@@QAEXPADH@Z:PROC		; MapClass::LoadMapAttr
; Function compile flags: /Ogtp
;	COMDAT ?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z
_TEXT	SEGMENT
_lpszFileName$ = 8					; size = 4
_iOccupationState$ = 12					; size = 4
?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z PROC		; CCrywolf::LoadCrywolfMapAttr, COMDAT
; _this$ = ecx

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 358  : 	if ( !lpszFileName )

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 1a		 je	 SHORT $LN1@LoadCrywol

; 359  : 		return;
; 360  : 
; 361  : 	if ( iOccupationState < 0 || iOccupationState >= 3 )

  0000a	8b 45 0c	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  0000d	83 f8 02	 cmp	 eax, 2
  00010	77 12		 ja	 SHORT $LN1@LoadCrywol

; 362  : 		return;
; 363  : 
; 364  : 	this->m_CrywolfMapAttr[iOccupationState].LoadMapAttr(lpszFileName, MAP_INDEX_CRYWOLF_FIRSTZONE);

  00012	69 c0 48 3d 05
	00		 imul	 eax, 343368		; 00053d48H
  00018	6a 22		 push	 34			; 00000022H
  0001a	52		 push	 edx
  0001b	8d 4c 08 14	 lea	 ecx, DWORD PTR [eax+ecx+20]
  0001f	e8 00 00 00 00	 call	 ?LoadMapAttr@MapClass@@QAEXPADH@Z ; MapClass::LoadMapAttr
$LN1@LoadCrywol:

; 365  : }

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z ENDP		; CCrywolf::LoadCrywolfMapAttr
_TEXT	ENDS
PUBLIC	??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@ ; `string'
PUBLIC	?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfMapAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@
CONST	SEGMENT
??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@ DB '[ '
	DB	'Crywolf ] Fail - Chang Map Attribute (State:%d) ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iOccupationState$ = 8					; size = 4
?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfMapAttr, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	if ( iOccupationState < 0 || iOccupationState >= 3 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  00006	83 f8 02	 cmp	 eax, 2
  00009	77 43		 ja	 SHORT $LN2@SetCrywolf

; 371  : 		return;
; 372  : 
; 373  : 	MapClass * CrywolfMap = &this->m_CrywolfMapAttr[iOccupationState];

  0000b	8b d0		 mov	 edx, eax
  0000d	69 d2 48 3d 05
	00		 imul	 edx, 343368		; 00053d48H

; 374  : 
; 375  : 	if ( CHECK_CLASS(CrywolfMap->thisMapNumber, MAP_INDEX_CRYWOLF_FIRSTZONE) == FALSE )

  00013	83 bc 0a 58 3d
	05 00 22	 cmp	 DWORD PTR [edx+ecx+343384], 34 ; 00000022H
  0001b	8d 4c 0a 14	 lea	 ecx, DWORD PTR [edx+ecx+20]
  0001f	74 15		 je	 SHORT $LN1@SetCrywolf

; 376  : 	{
; 377  : 		LogAddC(2, "[ Crywolf ] Fail - Chang Map Attribute (State:%d) ", iOccupationState);

  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@
  00027	6a 02		 push	 2
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 378  : 		return;
; 379  : 	}
; 380  : 
; 381  : 	memcpy(MapC[MAP_INDEX_CRYWOLF_FIRSTZONE].m_attrbuf, CrywolfMap->m_attrbuf, 256*256);

  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 382  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN1@SetCrywolf:

; 378  : 		return;
; 379  : 	}
; 380  : 
; 381  : 	memcpy(MapC[MAP_INDEX_CRYWOLF_FIRSTZONE].m_attrbuf, CrywolfMap->m_attrbuf, 256*256);

  00036	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00039	8b 0d a0 23 b2
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A+11674528
  0003f	68 00 00 01 00	 push	 65536			; 00010000H
  00044	50		 push	 eax
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 _memcpy
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SetCrywolf:

; 382  : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfMapAttr
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN6@AtlThrowIm:
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN7@AtlThrowIm:
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfCommonNPC
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
;	COMDAT ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iOccupationState$ = 8					; size = 4
?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfCommonNPC, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 387  : 	for ( int i=0;i<this->m_ObjCommonNPC.m_iObjCount ; i++)

  00005	33 ff		 xor	 edi, edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	39 b9 f4 b7 0f
	00		 cmp	 DWORD PTR [ecx+1030132], edi
  00010	7e 6c		 jle	 SHORT $LN12@SetCrywolf@2
  00012	53		 push	 ebx
  00013	8b 5d 08	 mov	 ebx, DWORD PTR _iOccupationState$[ebp]
  00016	56		 push	 esi
  00017	8d b1 f8 b7 0f
	00		 lea	 esi, DWORD PTR [ecx+1030136]
  0001d	8d 49 00	 npad	 3
$LL8@SetCrywolf@2:

; 388  : 	{
; 389  : 		if ( !gObjIsConnected(this->m_ObjCommonNPC.m_iObjIndex[i]) )

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00028	83 c4 04	 add	 esp, 4
  0002b	85 c0		 test	 eax, eax
  0002d	74 4d		 je	 SHORT $LN14@SetCrywolf@2

; 390  : 			break;
; 391  : 
; 392  : 		LPOBJ lpObj = &gObj[this->m_ObjCommonNPC.m_iObjIndex[i]];

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00037	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 393  : 
; 394  : 		if ( iOccupationState == 2 || iOccupationState == 1)

  0003d	83 fb 02	 cmp	 ebx, 2
  00040	74 16		 je	 SHORT $LN3@SetCrywolf@2
  00042	83 fb 01	 cmp	 ebx, 1
  00045	74 11		 je	 SHORT $LN3@SetCrywolf@2

; 397  : 		}
; 398  : 		else if ( iOccupationState == 0 )

  00047	85 db		 test	 ebx, ebx
  00049	75 22		 jne	 SHORT $LN7@SetCrywolf@2

; 399  : 		{
; 400  : 			gObjRemoveBuffEffect(lpObj, AT_CW_NPC_TRANSPARENCY);

  0004b	6a 1b		 push	 27			; 0000001bH
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00053	83 c4 08	 add	 esp, 8
  00056	eb 15		 jmp	 SHORT $LN7@SetCrywolf@2
$LN3@SetCrywolf@2:

; 395  : 		{
; 396  : 			gObjApplyBuffEffectDuration(lpObj, AT_CW_NPC_TRANSPARENCY, 0, 0, 0, 0, -10);

  00058	6a f6		 push	 -10			; fffffff6H
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	6a 1b		 push	 27			; 0000001bH
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0006a	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN7@SetCrywolf@2:

; 387  : 	for ( int i=0;i<this->m_ObjCommonNPC.m_iObjCount ; i++)

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	47		 inc	 edi
  00071	83 c6 04	 add	 esi, 4
  00074	3b b9 f4 b7 0f
	00		 cmp	 edi, DWORD PTR [ecx+1030132]
  0007a	7c a4		 jl	 SHORT $LL8@SetCrywolf@2
$LN14@SetCrywolf@2:
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
$LN12@SetCrywolf@2:
  0007e	5f		 pop	 edi

; 401  : 		}
; 402  : 	}
; 403  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfCommonNPC
_TEXT	ENDS
PUBLIC	?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z ; CCrywolf::SetCrywolfAllCommonMonsterState
; Function compile flags: /Ogtp
;	COMDAT ?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_iMonsterState$ = 8					; size = 4
_iMode$ = 12						; size = 4
?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z PROC ; CCrywolf::SetCrywolfAllCommonMonsterState, COMDAT
; _this$ = ecx

; 406  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 407  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  00004	33 f6		 xor	 esi, esi
  00006	39 b7 5c c1 0f
	00		 cmp	 DWORD PTR [edi+1032540], esi
  0000c	7e 23		 jle	 SHORT $LN11@SetCrywolf@3
  0000e	53		 push	 ebx
  0000f	8d 9f 60 c1 0f
	00		 lea	 ebx, DWORD PTR [edi+1032544]
$LL7@SetCrywolf@3:

; 408  : 	{
; 409  : 		if ( !gObjIsConnected(this->m_ObjCommonMonster.m_iObjIndex[i]) )

  00015	8b 03		 mov	 eax, DWORD PTR [ebx]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001d	83 c4 04	 add	 esp, 4
  00020	85 c0		 test	 eax, eax
  00022	74 0c		 je	 SHORT $LN13@SetCrywolf@3

; 407  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  00024	46		 inc	 esi
  00025	83 c3 04	 add	 ebx, 4
  00028	3b b7 5c c1 0f
	00		 cmp	 esi, DWORD PTR [edi+1032540]
  0002e	7c e5		 jl	 SHORT $LL7@SetCrywolf@3
$LN13@SetCrywolf@3:
  00030	5b		 pop	 ebx
$LN11@SetCrywolf@3:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 410  : 			break;
; 411  : 
; 412  : 		LPOBJ lpObj = &gObj[this->m_ObjCommonMonster.m_iObjIndex[i]];
; 413  : 
; 414  : 		if ( iMode == 0 )
; 415  : 		{
; 416  : 		}
; 417  : 		else if ( iMode == 1 )
; 418  : 		{
; 419  : 		}
; 420  : 	}
; 421  : }

  00033	c2 08 00	 ret	 8
?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z ENDP ; CCrywolf::SetCrywolfAllCommonMonsterState
_TEXT	ENDS
PUBLIC	?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ	; CCrywolf::RemoveCrywolfCommonMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Ogtp
;	COMDAT ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ PROC	; CCrywolf::RemoveCrywolfCommonMonster, COMDAT
; _this$ = ecx

; 424  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 425  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  00004	33 ff		 xor	 edi, edi
  00006	39 be 5c c1 0f
	00		 cmp	 DWORD PTR [esi+1032540], edi
  0000c	7e 1f		 jle	 SHORT $LN1@RemoveCryw
  0000e	53		 push	 ebx
  0000f	8d 9e 60 c1 0f
	00		 lea	 ebx, DWORD PTR [esi+1032544]
$LL3@RemoveCryw:

; 426  : 	{
; 427  : 		gObjDel(this->m_ObjCommonMonster.m_iObjIndex[i]);

  00015	8b 03		 mov	 eax, DWORD PTR [ebx]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0001d	47		 inc	 edi
  0001e	83 c4 04	 add	 esp, 4
  00021	83 c3 04	 add	 ebx, 4
  00024	3b be 5c c1 0f
	00		 cmp	 edi, DWORD PTR [esi+1032540]
  0002a	7c e9		 jl	 SHORT $LL3@RemoveCryw
  0002c	5b		 pop	 ebx
$LN1@RemoveCryw:

; 428  : 	}
; 429  : 
; 430  : 	this->m_ObjCommonMonster.Reset();

  0002d	8d be 60 c1 0f
	00		 lea	 edi, DWORD PTR [esi+1032544]
  00033	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00038	83 c8 ff	 or	 eax, -1
  0003b	f3 ab		 rep stosd
  0003d	5f		 pop	 edi
  0003e	c7 86 5c c1 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032540], 0
  00048	5e		 pop	 esi

; 431  : }

  00049	c3		 ret	 0
?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ENDP	; CCrywolf::RemoveCrywolfCommonMonster
_TEXT	ENDS
PUBLIC	?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ	; CCrywolf::CreateCrywolfCommonMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
; Function compile flags: /Ogtp
;	COMDAT ?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ PROC	; CCrywolf::CreateCrywolfCommonMonster, COMDAT
; _this$ = ecx

; 434  : {

  00000	53		 push	 ebx

; 435  : 	for ( int n=0;n<gMSetBase.m_Count;n++)

  00001	33 db		 xor	 ebx, ebx
  00003	39 1d 84 2c 03
	00		 cmp	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, ebx
  00009	0f 8e bc 00 00
	00		 jle	 $LN7@CreateCryw
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	bf 06 00 00 00	 mov	 edi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+6
  00016	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL9@CreateCryw:

; 436  : 	{
; 437  : 		if ( CHECK_CLASS(gMSetBase.m_Mp[n].m_MapNumber, MAP_INDEX_CRYWOLF_FIRSTZONE) )

  00020	8a 4f 02	 mov	 cl, BYTE PTR [edi+2]
  00023	80 f9 22	 cmp	 cl, 34			; 00000022H
  00026	0f 85 8d 00 00
	00		 jne	 $LN8@CreateCryw

; 438  : 		{
; 439  : 			if ( gMSetBase.m_Mp[n].m_Type >= 204 && gMSetBase.m_Mp[n].m_Type <= 257 )

  0002c	0f b7 07	 movzx	 eax, WORD PTR [edi]
  0002f	ba cc 00 00 00	 mov	 edx, 204		; 000000ccH
  00034	66 3b c2	 cmp	 ax, dx
  00037	72 0a		 jb	 SHORT $LN5@CreateCryw
  00039	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  0003e	66 3b c2	 cmp	 ax, dx
  00041	76 76		 jbe	 SHORT $LN8@CreateCryw
$LN5@CreateCryw:

; 440  : 				continue;
; 441  : 
; 442  : 			int iIndex = gObjAddMonster(gMSetBase.m_Mp[n].m_MapNumber);

  00043	0f b6 c1	 movzx	 eax, cl
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0004c	0f bf f0	 movsx	 esi, ax
  0004f	83 c4 04	 add	 esp, 4

; 443  : 
; 444  : 			if ( iIndex >= 0 )

  00052	85 f6		 test	 esi, esi
  00054	78 63		 js	 SHORT $LN8@CreateCryw

; 445  : 			{
; 446  : 				if ( gObjSetPosMonster(iIndex, n) == FALSE )

  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster
  0005d	83 c4 08	 add	 esp, 8
  00060	85 c0		 test	 eax, eax
  00062	75 0b		 jne	 SHORT $LN3@CreateCryw

; 447  : 				{
; 448  : 					gObjDel(iIndex);

  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0006a	83 c4 04	 add	 esp, 4

; 449  : 					continue;

  0006d	eb 4a		 jmp	 SHORT $LN8@CreateCryw
$LN3@CreateCryw:

; 450  : 				}
; 451  : 				
; 452  : 				if ( gObjSetMonster(iIndex, gMSetBase.m_Mp[n].m_Type) == FALSE )

  0006f	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00072	51		 push	 ecx
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  00079	83 c4 08	 add	 esp, 8
  0007c	85 c0		 test	 eax, eax
  0007e	75 0b		 jne	 SHORT $LN2@CreateCryw

; 453  : 				{
; 454  : 					gObjDel(iIndex);

  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00086	83 c4 04	 add	 esp, 4

; 455  : 					continue;

  00089	eb 2e		 jmp	 SHORT $LN8@CreateCryw
$LN2@CreateCryw:

; 456  : 				}
; 457  : 
; 458  : 				if ( gObj[iIndex].Type == OBJ_MONSTER )

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00090	8b d6		 mov	 edx, esi
  00092	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00098	66 83 7c 02 68
	02		 cmp	 WORD PTR [edx+eax+104], 2
  0009e	75 19		 jne	 SHORT $LN8@CreateCryw

; 459  : 				{
; 460  : 					g_Crywolf.m_ObjCommonMonster.AddObj(iIndex);

  000a0	a1 5c c1 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1032540
  000a5	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  000aa	7d 0d		 jge	 SHORT $LN8@CreateCryw
  000ac	89 34 85 60 c1
	0f 00		 mov	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A[eax*4+1032544], esi
  000b3	ff 05 5c c1 0f
	00		 inc	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1032540
$LN8@CreateCryw:

; 435  : 	for ( int n=0;n<gMSetBase.m_Count;n++)

  000b9	43		 inc	 ebx
  000ba	83 c7 10	 add	 edi, 16			; 00000010H
  000bd	3b 1d 84 2c 03
	00		 cmp	 ebx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000c3	0f 8c 57 ff ff
	ff		 jl	 $LL9@CreateCryw
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
$LN7@CreateCryw:
  000cb	5b		 pop	 ebx

; 461  : 				}
; 462  : 			}
; 463  : 		}
; 464  : 	}
; 465  : }

  000cc	c3		 ret	 0
?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ ENDP	; CCrywolf::CreateCrywolfCommonMonster
_TEXT	ENDS
PUBLIC	?ChangeAI@CCrywolf@@QAEXH@Z			; CCrywolf::ChangeAI
EXTRN	?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z:PROC	; TMonsterAIGroup::ChangeAIOrder
; Function compile flags: /Ogtp
;	COMDAT ?ChangeAI@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iAIOrder$ = 8						; size = 4
?ChangeAI@CCrywolf@@QAEXH@Z PROC			; CCrywolf::ChangeAI, COMDAT
; _this$ = ecx

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b d9		 mov	 ebx, ecx

; 469  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  00007	33 f6		 xor	 esi, esi
  00009	39 b3 cc cf 0f
	00		 cmp	 DWORD PTR [ebx+1036236], esi
  0000f	7e 23		 jle	 SHORT $LN1@ChangeAI
  00011	57		 push	 edi
  00012	8d bb 7c cf 0f
	00		 lea	 edi, DWORD PTR [ebx+1036156]
$LL3@ChangeAI:

; 470  : 	{
; 471  : 		TMonsterAIGroup::ChangeAIOrder(this->m_iMonsterGroupNumberArray[n], iAIOrder);

  00018	8b 45 08	 mov	 eax, DWORD PTR _iAIOrder$[ebp]
  0001b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001d	50		 push	 eax
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder
  00024	46		 inc	 esi
  00025	83 c4 08	 add	 esp, 8
  00028	83 c7 04	 add	 edi, 4
  0002b	3b b3 cc cf 0f
	00		 cmp	 esi, DWORD PTR [ebx+1036236]
  00031	7c e5		 jl	 SHORT $LL3@ChangeAI
  00033	5f		 pop	 edi
$LN1@ChangeAI:
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx

; 472  : 	}
; 473  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?ChangeAI@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::ChangeAI
_TEXT	ENDS
PUBLIC	?TurnUpBoss@CCrywolf@@QAEXXZ			; CCrywolf::TurnUpBoss
EXTRN	?FindGroupLeader@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::FindGroupLeader
EXTRN	?Init@TMonsterAIGroup@@SAXH@Z:PROC		; TMonsterAIGroup::Init
; Function compile flags: /Ogtp
;	COMDAT ?TurnUpBoss@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?TurnUpBoss@CCrywolf@@QAEXXZ PROC			; CCrywolf::TurnUpBoss, COMDAT
; _this$ = ecx

; 476  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 477  : 	TMonsterAIGroup::Init(this->m_iBossGroupNumber);

  00003	8b 86 d8 cf 0f
	00		 mov	 eax, DWORD PTR [esi+1036248]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init

; 478  : 	TMonsterAIGroup::ChangeAIOrder(this->m_iBossGroupNumber, 1);

  0000f	8b 8e d8 cf 0f
	00		 mov	 ecx, DWORD PTR [esi+1036248]
  00015	6a 01		 push	 1
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder

; 479  : 	this->m_iBossIndex = TMonsterAIGroup::FindGroupLeader(this->m_iBossGroupNumber);

  0001d	8b 96 d8 cf 0f
	00		 mov	 edx, DWORD PTR [esi+1036248]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::FindGroupLeader
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	89 86 d4 cf 0f
	00		 mov	 DWORD PTR [esi+1036244], eax
  00032	5e		 pop	 esi

; 480  : }

  00033	c3		 ret	 0
?TurnUpBoss@CCrywolf@@QAEXXZ ENDP			; CCrywolf::TurnUpBoss
_TEXT	ENDS
PUBLIC	??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@ ; `string'
PUBLIC	?SetState_NONE@CCrywolf@@QAEXXZ			; CCrywolf::SetState_NONE
;	COMDAT ??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@
; File e:\work\tranet_version\gs\gameserver\crywolfstatetimeinfo.h
CONST	SEGMENT
??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> NONE', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?SetState_NONE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_NONE@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_NONE, COMDAT
; _this$ = ecx

; 602  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 603  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NONE", this->m_iCrywolfState);

  00003	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@
  0000f	6a 04		 push	 4
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  : 
; 605  : 	this->SetCrywolfState(CRYWOLF_STATE_NONE);

  0001a	c7 86 ec b7 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1030124], 0

; 606  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_NONE);

  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002a	89 86 60 ce 0f
	00		 mov	 DWORD PTR [esi+1035872], eax
  00030	5e		 pop	 esi

; 607  : }

  00031	c3		 ret	 0
?SetState_NONE@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_NONE
_TEXT	ENDS
PUBLIC	??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ ; `string'
PUBLIC	?SetState_NOTIFY_1@CCrywolf@@QAEXXZ		; CCrywolf::SetState_NOTIFY_1
EXTRN	?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ:PROC ; CCrywolfUtil::SendMapServerGroupMsg
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
; File e:\work\tranet_version\gs\gameserver\crywolfstatetimeinfo.h
CONST	SEGMENT
??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ DB '['
	DB	' Crywolf ] State (%d) -> NOTIFY_1', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?SetState_NOTIFY_1@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_NOTIFY_1@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_NOTIFY_1, COMDAT
; _this$ = ecx

; 610  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 611  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 228)));

  00004	68 e4 0c 00 00	 push	 3300			; 00000ce4H
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0000e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00013	50		 push	 eax
  00014	68 00 00 00 00	 push	 OFFSET _UTIL
  00019	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 612  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NOTIFY_1", this->m_iCrywolfState);

  0001e	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
  0002a	6a 04		 push	 4
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 613  : 
; 614  : 	this->SetCrywolfState(CRYWOLF_STATE_NOTIFY_1);
; 615  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_NOTIFY_1);

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	c7 86 ec b7 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1030124], 1
  00045	ff d7		 call	 edi
  00047	89 86 8c ce 0f
	00		 mov	 DWORD PTR [esi+1035916], eax

; 616  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  0004d	ff d7		 call	 edi
  0004f	5f		 pop	 edi
  00050	89 86 6c cf 0f
	00		 mov	 DWORD PTR [esi+1036140], eax
  00056	5e		 pop	 esi

; 617  : }

  00057	c3		 ret	 0
?SetState_NOTIFY_1@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_NOTIFY_1
_TEXT	ENDS
PUBLIC	??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ ; `string'
PUBLIC	?SetState_NOTIFY_2@CCrywolf@@QAEXXZ		; CCrywolf::SetState_NOTIFY_2
;	COMDAT ??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ DB '['
	DB	' Crywolf ] State (%d) -> NOTIFY_2', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?SetState_NOTIFY_2@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_NOTIFY_2@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_NOTIFY_2, COMDAT
; _this$ = ecx

; 620  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 621  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 229)));

  00004	68 e5 0c 00 00	 push	 3301			; 00000ce5H
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0000e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00013	50		 push	 eax
  00014	68 00 00 00 00	 push	 OFFSET _UTIL
  00019	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 622  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NOTIFY_2", this->m_iCrywolfState);

  0001e	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
  0002a	6a 04		 push	 4
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 623  : 
; 624  : 	this->SetCrywolfState(CRYWOLF_STATE_NOTIFY_2);
; 625  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_NOTIFY_2);

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	c7 86 ec b7 0f
	00 02 00 00 00	 mov	 DWORD PTR [esi+1030124], 2
  00045	ff d7		 call	 edi
  00047	89 86 b8 ce 0f
	00		 mov	 DWORD PTR [esi+1035960], eax

; 626  : 	this->SetOccupationState(2);
; 627  : 	this->SetCrywolfCommonNPC(2);

  0004d	6a 02		 push	 2
  0004f	8b ce		 mov	 ecx, esi
  00051	c7 86 f0 b7 0f
	00 02 00 00 00	 mov	 DWORD PTR [esi+1030128], 2
  0005b	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 628  : 	this->SetCrywolfMapAttr(2);

  00060	6a 02		 push	 2
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 629  : 	this->RemoveCrywolfCommonMonster();

  00069	8b ce		 mov	 ecx, esi
  0006b	e8 00 00 00 00	 call	 ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::RemoveCrywolfCommonMonster

; 630  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  00070	ff d7		 call	 edi
  00072	5f		 pop	 edi
  00073	89 86 6c cf 0f
	00		 mov	 DWORD PTR [esi+1036140], eax
  00079	5e		 pop	 esi

; 631  : }

  0007a	c3		 ret	 0
?SetState_NOTIFY_2@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_NOTIFY_2
_TEXT	ENDS
PUBLIC	?SetState@CCrywolf@@QAEXH@Z			; CCrywolf::SetState
PUBLIC	??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@ ; `string'
PUBLIC	?SetState_START@CCrywolf@@QAEXXZ		; CCrywolf::SetState_START
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ:PROC ; CCrywolfUtil::SendCrywolfUserAnyMsg
EXTRN	?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ:PROC ; CCrywolfAltar::GetContractedAltarCount
EXTRN	?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A:BYTE	; g_CrywolfNPC_Altar
;	COMDAT ??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> START', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?SetState_START@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_n$211766 = -12						; size = 4
tv149 = -8						; size = 4
tv377 = -4						; size = 4
?SetState_START@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_START, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 658  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 231)));

  00009	68 e7 0c 00 00	 push	 3303			; 00000ce7H
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00013	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00018	50		 push	 eax
  00019	68 00 00 00 00	 push	 OFFSET _UTIL
  0001e	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 659  : 	LogAddC(4, "[ Crywolf ] State (%d) -> START", this->m_iCrywolfState);

  00023	8b 83 ec b7 0f
	00		 mov	 eax, DWORD PTR [ebx+1030124]
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@
  0002f	6a 04		 push	 4
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00037	83 c4 14	 add	 esp, 20			; 00000014H

; 660  : 
; 661  : 	this->SetCrywolfState(CRYWOLF_STATE_START);

  0003a	c7 83 ec b7 0f
	00 04 00 00 00	 mov	 DWORD PTR [ebx+1030124], 4

; 662  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_START);

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 663  : 
; 664  : 	if ( g_CrywolfNPC_Altar.GetContractedAltarCount() == 0 )

  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0004f	89 83 10 cf 0f
	00		 mov	 DWORD PTR [ebx+1036048], eax
  00055	e8 00 00 00 00	 call	 ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ; CCrywolfAltar::GetContractedAltarCount
  0005a	85 c0		 test	 eax, eax
  0005c	75 37		 jne	 SHORT $LN12@SetState_S

; 665  : 	{
; 666  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 232)));

  0005e	68 e8 0c 00 00	 push	 3304			; 00000ce8H
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00068	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0006d	50		 push	 eax
  0006e	6a 02		 push	 2
  00070	68 00 00 00 00	 push	 OFFSET _UTIL
  00075	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 667  : 		this->SetOccupationState(1);
; 668  : 		this->SetState(CRYWOLF_STATE_END);

  0007d	6a 05		 push	 5
  0007f	8b cb		 mov	 ecx, ebx
  00081	c7 83 f0 b7 0f
	00 01 00 00 00	 mov	 DWORD PTR [ebx+1030128], 1
  0008b	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00090	5b		 pop	 ebx

; 706  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN12@SetState_S:

; 669  : 
; 670  : 		return;
; 671  : 	}
; 672  : 
; 673  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  00095	83 bb cc cf 0f
	00 00		 cmp	 DWORD PTR [ebx+1036236], 0
  0009c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$211766[ebp], 0
  000a3	0f 8e b4 00 00
	00		 jle	 $LN9@SetState_S
  000a9	8d 8b 7c cf 0f
	00		 lea	 ecx, DWORD PTR [ebx+1036156]
  000af	56		 push	 esi
  000b0	89 4d fc	 mov	 DWORD PTR tv377[ebp], ecx
  000b3	57		 push	 edi
$LL33@SetState_S:

; 674  : 	{
; 675  : 		int iLeaderIndex = TMonsterAIGroup::FindGroupLeader(this->m_iMonsterGroupNumberArray[n]);

  000b4	8b 55 fc	 mov	 edx, DWORD PTR tv377[ebp]
  000b7	8b 02		 mov	 eax, DWORD PTR [edx]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::FindGroupLeader
  000bf	83 c4 04	 add	 esp, 4

; 676  : 
; 677  : 		if ( !CHECK_LIMIT(iLeaderIndex, OBJ_MAXMONSTER) )

  000c2	85 c0		 test	 eax, eax
  000c4	0f 88 7a 00 00
	00		 js	 $LN10@SetState_S
  000ca	33 c9		 xor	 ecx, ecx
  000cc	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  000d1	0f 9e c1	 setle	 cl
  000d4	85 c9		 test	 ecx, ecx
  000d6	74 6c		 je	 SHORT $LN10@SetState_S

; 678  : 			continue;
; 679  : 
; 680  : 		if ( gObj[iLeaderIndex].Class != 340 )

  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000de	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000e4	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  000e7	ba 54 01 00 00	 mov	 edx, 340		; 00000154H
  000ec	66 39 97 b8 00
	00 00		 cmp	 WORD PTR [edi+184], dx
  000f3	75 4f		 jne	 SHORT $LN10@SetState_S

; 681  : 			continue;
; 682  : 
; 683  : 		LPOBJ lpObj = &gObj[iLeaderIndex];

  000f5	8d b7 ae 08 00
	00		 lea	 esi, DWORD PTR [edi+2222]
  000fb	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR tv149[ebp], 75 ; 0000004bH
$LL32@SetState_S:

; 686  : 		{
; 687  : 			if ( lpObj->VpPlayer2[i].state )

  00102	80 7e fe 00	 cmp	 BYTE PTR [esi-2], 0
  00106	74 34		 je	 SHORT $LN5@SetState_S

; 688  : 			{
; 689  : 				int number = lpObj->VpPlayer2[i].number;

  00108	0f bf 06	 movsx	 eax, WORD PTR [esi]

; 690  : 
; 691  : 				if ( OBJMAX_RANGE(number) != FALSE )

  0010b	85 c0		 test	 eax, eax
  0010d	78 2d		 js	 SHORT $LN5@SetState_S
  0010f	33 c9		 xor	 ecx, ecx
  00111	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00116	0f 9e c1	 setle	 cl
  00119	85 c9		 test	 ecx, ecx
  0011b	74 1f		 je	 SHORT $LN5@SetState_S

; 692  : 				{
; 693  : 					if ( gObj[number].Type == OBJ_USER )

  0011d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00123	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00129	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  0012e	75 0c		 jne	 SHORT $LN5@SetState_S

; 694  : 					{
; 695  : 						gObjBackSpring2(&gObj[number], lpObj, 3);

  00130	6a 03		 push	 3
  00132	57		 push	 edi
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SetState_S:

; 684  : 
; 685  : 		for ( int i=0;i<MAX_VIEWPORT_MONSTER;i++)

  0013c	83 c6 0c	 add	 esi, 12			; 0000000cH
  0013f	ff 4d f8	 dec	 DWORD PTR tv149[ebp]
  00142	75 be		 jne	 SHORT $LL32@SetState_S
$LN10@SetState_S:

; 669  : 
; 670  : 		return;
; 671  : 	}
; 672  : 
; 673  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  00144	8b 45 f4	 mov	 eax, DWORD PTR _n$211766[ebp]
  00147	83 45 fc 04	 add	 DWORD PTR tv377[ebp], 4
  0014b	40		 inc	 eax
  0014c	89 45 f4	 mov	 DWORD PTR _n$211766[ebp], eax
  0014f	3b 83 cc cf 0f
	00		 cmp	 eax, DWORD PTR [ebx+1036236]
  00155	0f 8c 59 ff ff
	ff		 jl	 $LL33@SetState_S
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
$LN9@SetState_S:

; 696  : 					}
; 697  : 				}
; 698  : 			}
; 699  : 		}
; 700  : 	}
; 701  : 
; 702  : 	this->ChangeAI(1);

  0015d	6a 01		 push	 1
  0015f	8b cb		 mov	 ecx, ebx
  00161	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 703  : 	this->m_dwCrywolfStartProcTick = GetTickCount();

  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0016c	89 83 70 cf 0f
	00		 mov	 DWORD PTR [ebx+1036144], eax

; 704  : 	this->m_bTurnUpBoss = FALSE;

  00172	33 c0		 xor	 eax, eax
  00174	89 83 74 cf 0f
	00		 mov	 DWORD PTR [ebx+1036148], eax

; 705  : 	this->m_bChangeAI = FALSE;

  0017a	89 83 78 cf 0f
	00		 mov	 DWORD PTR [ebx+1036152], eax
  00180	5b		 pop	 ebx

; 706  : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
?SetState_START@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_START
_TEXT	ENDS
PUBLIC	?ProcState_NONE@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NONE
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_NONE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NONE@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_NONE, COMDAT
; _this$ = ecx

; 789  : 	return;
; 790  : }

  00000	c3		 ret	 0
?ProcState_NONE@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_NONE
_TEXT	ENDS
PUBLIC	?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NOTIFY_1
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_NOTIFY_1, COMDAT
; _this$ = ecx

; 793  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 794  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 86 6c cf 0f
	00		 sub	 eax, DWORD PTR [esi+1036140]
  00012	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  00017	76 25		 jbe	 SHORT $LN1@ProcState_

; 795  : 	{
; 796  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 228)));

  00019	68 e4 0c 00 00	 push	 3300			; 00000ce4H
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00023	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET _UTIL
  0002e	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  00033	83 c4 08	 add	 esp, 8

; 797  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  00036	ff d7		 call	 edi
  00038	89 86 6c cf 0f
	00		 mov	 DWORD PTR [esi+1036140], eax
$LN1@ProcState_:

; 798  : 	}
; 799  : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	c3		 ret	 0
?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_NOTIFY_1
_TEXT	ENDS
PUBLIC	?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NOTIFY_2
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_NOTIFY_2, COMDAT
; _this$ = ecx

; 802  : {

  00000	53		 push	 ebx
  00001	57		 push	 edi

; 803  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b d9		 mov	 ebx, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 83 6c cf 0f
	00		 sub	 eax, DWORD PTR [ebx+1036140]
  00012	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  00017	0f 86 b7 00 00
	00		 jbe	 $LN3@ProcState_@2

; 804  : 	{
; 805  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  0001d	8b 83 ec b7 0f
	00		 mov	 eax, DWORD PTR [ebx+1030124]
  00023	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00026	56		 push	 esi
  00027	8d b4 18 38 ce
	0f 00		 lea	 esi, DWORD PTR [eax+ebx+1035832]
  0002e	ff d7		 call	 edi
  00030	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  00033	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00036	77 0c		 ja	 SHORT $LN9@ProcState_@2
  00038	ff d7		 call	 edi
  0003a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0003d	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  00040	2b c8		 sub	 ecx, eax
  00042	79 02		 jns	 SHORT $LN10@ProcState_@2
$LN9@ProcState_@2:
  00044	33 c9		 xor	 ecx, ecx
$LN10@ProcState_@2:
  00046	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0004b	f7 e9		 imul	 ecx
  0004d	c1 fa 06	 sar	 edx, 6
  00050	8b ca		 mov	 ecx, edx
  00052	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00055	03 ca		 add	 ecx, edx
  00057	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0005c	f7 e9		 imul	 ecx
  0005e	03 d1		 add	 edx, ecx
  00060	c1 fa 05	 sar	 edx, 5
  00063	8b c2		 mov	 eax, edx
  00065	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00068	03 c2		 add	 eax, edx

; 806  : 
; 807  : 		if ( iTime == 0 )

  0006a	75 41		 jne	 SHORT $LN2@ProcState_@2

; 808  : 		{
; 809  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  0006c	8b 8b ec b7 0f
	00		 mov	 ecx, DWORD PTR [ebx+1030124]
  00072	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00075	8d b4 19 38 ce
	0f 00		 lea	 esi, DWORD PTR [ecx+ebx+1035832]
  0007c	ff d7		 call	 edi
  0007e	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  00081	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00084	77 0c		 ja	 SHORT $LN18@ProcState_@2
  00086	ff d7		 call	 edi
  00088	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0008b	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  0008e	2b c8		 sub	 ecx, eax
  00090	79 02		 jns	 SHORT $LN19@ProcState_@2
$LN18@ProcState_@2:
  00092	33 c9		 xor	 ecx, ecx
$LN19@ProcState_@2:
  00094	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00099	f7 e9		 imul	 ecx
  0009b	c1 fa 06	 sar	 edx, 6
  0009e	8b c2		 mov	 eax, edx
  000a0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a3	03 c2		 add	 eax, edx

; 810  : 
; 811  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 236)), iTime);

  000a5	50		 push	 eax
  000a6	68 ec 0c 00 00	 push	 3308			; 00000cecH

; 812  : 		}
; 813  : 		else

  000ab	eb 06		 jmp	 SHORT $LN26@ProcState_@2
$LN2@ProcState_@2:

; 814  : 		{
; 815  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 237)), iTime);

  000ad	50		 push	 eax
  000ae	68 ed 0c 00 00	 push	 3309			; 00000cedH
$LN26@ProcState_@2:
  000b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000b8	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000bd	50		 push	 eax
  000be	68 00 00 00 00	 push	 OFFSET _UTIL
  000c3	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 816  : 		}
; 817  : 
; 818  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  000cb	ff d7		 call	 edi
  000cd	89 83 6c cf 0f
	00		 mov	 DWORD PTR [ebx+1036140], eax
  000d3	5e		 pop	 esi
$LN3@ProcState_@2:

; 819  : 	}
; 820  : }

  000d4	5f		 pop	 edi
  000d5	5b		 pop	 ebx
  000d6	c3		 ret	 0
?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_NOTIFY_2
_TEXT	ENDS
PUBLIC	?ProcState_END@CCrywolf@@QAEXXZ			; CCrywolf::ProcState_END
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_END@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_END@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_END, COMDAT
; _this$ = ecx

; 899  : 	return;
; 900  : }

  00000	c3		 ret	 0
?ProcState_END@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_END
_TEXT	ENDS
PUBLIC	?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_ENDCYCLE
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_ENDCYCLE, COMDAT
; _this$ = ecx

; 904  : 	return;
; 905  : }

  00000	c3		 ret	 0
?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_ENDCYCLE
_TEXT	ENDS
PUBLIC	??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@ ; `string'
PUBLIC	?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfCurrentState
EXTRN	?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z:PROC ; CCrywolfUtil::SendCrywolfUserAnyData
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
;	COMDAT ??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@ DB '[ Cr'
	DB	'ywolf ] SetState - StateInfo : Occupation/%d, State/%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfCurrentState, COMDAT
; _this$ = ecx

; 908  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 909  : 	PMSG_ANS_CRYWOLF_INFO pMsg = {0};

  00007	33 c0		 xor	 eax, eax

; 910  : 
; 911  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x00, sizeof(pMsg));

  00009	6a 06		 push	 6
  0000b	50		 push	 eax
  0000c	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp], al
  0000f	89 45 f9	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  00012	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al
  00015	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	68 bd 00 00 00	 push	 189			; 000000bdH
  0001d	50		 push	 eax
  0001e	8b f1		 mov	 esi, ecx
  00020	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 912  : 	pMsg.btOccupationState = this->GetOccupationState();

  00025	8a 8e f0 b7 0f
	00		 mov	 cl, BYTE PTR [esi+1030128]

; 913  : 	pMsg.btCrywolfState = this->GetCrywolfState();

  0002b	8a 96 ec b7 0f
	00		 mov	 dl, BYTE PTR [esi+1030124]
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 914  : 
; 915  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  00034	6a 06		 push	 6
  00036	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00039	88 4d fc	 mov	 BYTE PTR _pMsg$[ebp+4], cl
  0003c	50		 push	 eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00042	88 55 fd	 mov	 BYTE PTR _pMsg$[ebp+5], dl
  00045	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 916  : 
; 917  : 	LogAddC(3, "[ Crywolf ] SetState - StateInfo : Occupation/%d, State/%d",
; 918  : 		pMsg.btOccupationState, pMsg.btCrywolfState);

  0004a	0f b6 4d fd	 movzx	 ecx, BYTE PTR _pMsg$[ebp+5]
  0004e	0f b6 55 fc	 movzx	 edx, BYTE PTR _pMsg$[ebp+4]
  00052	51		 push	 ecx
  00053	52		 push	 edx
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@
  00059	6a 03		 push	 3
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	5e		 pop	 esi

; 919  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfCurrentState
_TEXT	ENDS
PUBLIC	??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@ ; `string'
PUBLIC	?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfStateLeftTime
;	COMDAT ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA
; File e:\work\tranet_version\gs\gameserver\crywolfstatetimeinfo.h
_BSS	SEGMENT
?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfStateLeftTime'::`2'::dwTickCount
_BSS	ENDS
;	COMDAT ??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@
CONST	SEGMENT
??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@ DB '['
	DB	' Crywolf ] War LeftTime - (%02d:%02d)', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfStateLeftTime, COMDAT
; _this$ = ecx

; 922  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 923  : 	static DWORD dwTickCount = 0;
; 924  : 
; 925  : 	if ( (GetTickCount() - dwTickCount) < 20000 )

  00008	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0000e	8b f1		 mov	 esi, ecx
  00010	ff d7		 call	 edi
  00012	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA
  00018	3d 20 4e 00 00	 cmp	 eax, 20000		; 00004e20H
  0001d	0f 82 0b 01 00
	00		 jb	 $LN2@NotifyCryw

; 926  : 		return;
; 927  : 
; 928  : 	dwTickCount = GetTickCount();

  00023	53		 push	 ebx
  00024	ff d7		 call	 edi
  00026	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA, eax

; 929  : 
; 930  : 	PMSG_ANS_CRYWOLF_LEFTTIME pMsg = {0};

  0002b	33 c0		 xor	 eax, eax

; 931  : 
; 932  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x04, sizeof(pMsg));

  0002d	6a 06		 push	 6
  0002f	6a 04		 push	 4
  00031	89 45 f9	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  00034	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al
  00037	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003a	68 bd 00 00 00	 push	 189			; 000000bdH
  0003f	50		 push	 eax
  00040	c6 45 f8 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  00044	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 933  : 	pMsg.btHour = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 ) / 24;

  00049	8b 8e ec b7 0f
	00		 mov	 ecx, DWORD PTR [esi+1030124]
  0004f	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	8d 9c 31 38 ce
	0f 00		 lea	 ebx, DWORD PTR [ecx+esi+1035832]
  0005c	ff d7		 call	 edi
  0005e	2b 43 28	 sub	 eax, DWORD PTR [ebx+40]
  00061	3b 43 24	 cmp	 eax, DWORD PTR [ebx+36]
  00064	77 14		 ja	 SHORT $LN7@NotifyCryw
  00066	ff d7		 call	 edi
  00068	8b d0		 mov	 edx, eax
  0006a	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  0006d	2b c2		 sub	 eax, edx
  0006f	03 43 24	 add	 eax, DWORD PTR [ebx+36]
  00072	79 02		 jns	 SHORT $LN24@NotifyCryw
  00074	33 c0		 xor	 eax, eax
$LN24@NotifyCryw:
  00076	8b c8		 mov	 ecx, eax
  00078	eb 02		 jmp	 SHORT $LN8@NotifyCryw
$LN7@NotifyCryw:
  0007a	33 c9		 xor	 ecx, ecx
$LN8@NotifyCryw:
  0007c	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00081	f7 e9		 imul	 ecx
  00083	c1 fa 06	 sar	 edx, 6
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx
  0008d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00092	f7 e9		 imul	 ecx
  00094	03 d1		 add	 edx, ecx
  00096	c1 fa 05	 sar	 edx, 5
  00099	8b ca		 mov	 ecx, edx
  0009b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0009e	03 ca		 add	 ecx, edx
  000a0	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000a5	f7 e9		 imul	 ecx

; 934  : 	pMsg.btMinute = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 );

  000a7	8b 8e ec b7 0f
	00		 mov	 ecx, DWORD PTR [esi+1030124]
  000ad	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  000b0	c1 fa 02	 sar	 edx, 2
  000b3	8b c2		 mov	 eax, edx
  000b5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b8	03 c2		 add	 eax, edx
  000ba	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
  000bd	8d b4 31 38 ce
	0f 00		 lea	 esi, DWORD PTR [ecx+esi+1035832]
  000c4	ff d7		 call	 edi
  000c6	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  000c9	5b		 pop	 ebx
  000ca	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  000cd	77 0c		 ja	 SHORT $LN16@NotifyCryw
  000cf	ff d7		 call	 edi
  000d1	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  000d4	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  000d7	2b c8		 sub	 ecx, eax
  000d9	79 02		 jns	 SHORT $LN17@NotifyCryw
$LN16@NotifyCryw:
  000db	33 c9		 xor	 ecx, ecx
$LN17@NotifyCryw:
  000dd	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  000e2	f7 e9		 imul	 ecx
  000e4	c1 fa 06	 sar	 edx, 6
  000e7	8b ca		 mov	 ecx, edx
  000e9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000ec	03 ca		 add	 ecx, edx
  000ee	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  000f3	f7 e9		 imul	 ecx
  000f5	03 d1		 add	 edx, ecx
  000f7	c1 fa 05	 sar	 edx, 5
  000fa	8b c2		 mov	 eax, edx
  000fc	c1 e8 1f	 shr	 eax, 31			; 0000001fH

; 935  : 
; 936  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  000ff	6a 06		 push	 6
  00101	8d 4d f8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00104	03 c2		 add	 eax, edx
  00106	51		 push	 ecx
  00107	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  0010c	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al
  0010f	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 937  : 
; 938  : 	LogAddC(3, "[ Crywolf ] War LeftTime - (%02d:%02d)", pMsg.btHour, pMsg.btMinute);

  00114	0f b6 55 fd	 movzx	 edx, BYTE PTR _pMsg$[ebp+5]
  00118	0f b6 45 fc	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  0011c	52		 push	 edx
  0011d	50		 push	 eax
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@
  00123	6a 03		 push	 3
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0012b	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@NotifyCryw:
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi

; 939  : }

  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfStateLeftTime
_TEXT	ENDS
PUBLIC	??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo
EXTRN	?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z:PROC	; CCrywolfAltar::GetAltarUserIndex
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?GetAltarState@CCrywolfAltar@@QAEHH@Z:PROC	; CCrywolfAltar::GetAltarState
EXTRN	?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z:PROC ; CCrywolfAltar::GetAltarRemainContractCount
EXTRN	?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A:BYTE	; g_CrywolfNPC_Statue
;	COMDAT ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA
; File e:\work\tranet_version\gs\gameserver\crywolfstatue.h
_BSS	SEGMENT
?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfStatueAndAltarInfo'::`2'::dwTickCount
_BSS	ENDS
;	COMDAT ??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@
CONST	SEGMENT
??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@ DB '['
	DB	' Crywolf ][Altar Info] Altar(%d) Contractor: [%s][%s] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@
CONST	SEGMENT
??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@ DB '['
	DB	' Crywolf ][Statue Info] Statue HP : %d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfStatueAndAltarInfo, COMDAT
; _this$ = ecx

; 942  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 943  : 	static DWORD dwTickCount = 0;
; 944  : 
; 945  : 	if ( (GetTickCount() - dwTickCount) < 2000 )

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00017	ff d6		 call	 esi
  00019	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA
  0001f	3d d0 07 00 00	 cmp	 eax, 2000		; 000007d0H
  00024	0f 82 62 01 00
	00		 jb	 $LN2@NotifyCryw@2

; 946  : 		return;
; 947  : 
; 948  : 	dwTickCount = GetTickCount();

  0002a	ff d6		 call	 esi

; 949  : 
; 950  : 	PMSG_ANS_CRYWOLF_STATUE_ALTAR_INFO pMsg;
; 951  : 	
; 952  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x02, sizeof(pMsg));

  0002c	6a 10		 push	 16			; 00000010H
  0002e	6a 02		 push	 2
  00030	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA, eax
  00035	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00038	68 bd 00 00 00	 push	 189			; 000000bdH
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 953  : 
; 954  : 	pMsg.iCrywolfStatueHP = g_CrywolfNPC_Statue.m_Shield.GetHPPercentage();

  00043	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A+4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	85 c9		 test	 ecx, ecx
  0004e	74 0d		 je	 SHORT $LN8@NotifyCryw@2
  00050	a1 08 00 00 00	 mov	 eax, DWORD PTR ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A+8
  00055	6b c0 64	 imul	 eax, 100		; 00000064H
  00058	99		 cdq
  00059	f7 f9		 idiv	 ecx
  0005b	eb 02		 jmp	 SHORT $LN9@NotifyCryw@2
$LN8@NotifyCryw@2:
  0005d	33 c0		 xor	 eax, eax
$LN9@NotifyCryw@2:

; 955  : 	pMsg.btAltarState1 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(205);

  0005f	68 cd 00 00 00	 push	 205			; 000000cdH
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00069	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0006c	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 956  : 	pMsg.btAltarState2 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(206);

  00071	68 ce 00 00 00	 push	 206			; 000000ceH
  00076	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0007b	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+8], al
  0007e	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 957  : 	pMsg.btAltarState3 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(207);

  00083	68 cf 00 00 00	 push	 207			; 000000cfH
  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0008d	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+9], al
  00090	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 958  : 	pMsg.btAltarState4 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(208);

  00095	68 d0 00 00 00	 push	 208			; 000000d0H
  0009a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0009f	88 45 f6	 mov	 BYTE PTR _pMsg$[ebp+10], al
  000a2	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 959  : 	pMsg.btAltarState5 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(209);

  000a7	68 d1 00 00 00	 push	 209			; 000000d1H
  000ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000b1	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+11], al
  000b4	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 960  : 	pMsg.btAltarState1 |= g_CrywolfNPC_Altar.GetAltarState(205) << 4;

  000b9	68 cd 00 00 00	 push	 205			; 000000cdH
  000be	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000c3	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+12], al
  000c6	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  000cb	c0 e0 04	 shl	 al, 4
  000ce	08 45 f4	 or	 BYTE PTR _pMsg$[ebp+8], al

; 961  : 	pMsg.btAltarState2 |= g_CrywolfNPC_Altar.GetAltarState(206) << 4;

  000d1	68 ce 00 00 00	 push	 206			; 000000ceH
  000d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000db	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  000e0	c0 e0 04	 shl	 al, 4
  000e3	08 45 f5	 or	 BYTE PTR _pMsg$[ebp+9], al

; 962  : 	pMsg.btAltarState3 |= g_CrywolfNPC_Altar.GetAltarState(207) << 4;

  000e6	68 cf 00 00 00	 push	 207			; 000000cfH
  000eb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000f0	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  000f5	c0 e0 04	 shl	 al, 4
  000f8	08 45 f6	 or	 BYTE PTR _pMsg$[ebp+10], al

; 963  : 	pMsg.btAltarState4 |= g_CrywolfNPC_Altar.GetAltarState(208) << 4;

  000fb	68 d0 00 00 00	 push	 208			; 000000d0H
  00100	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00105	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  0010a	c0 e0 04	 shl	 al, 4
  0010d	08 45 f7	 or	 BYTE PTR _pMsg$[ebp+11], al

; 964  : 	pMsg.btAltarState5 |= g_CrywolfNPC_Altar.GetAltarState(209) << 4;

  00110	68 d1 00 00 00	 push	 209			; 000000d1H
  00115	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0011a	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState

; 965  : 
; 966  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  0011f	6a 10		 push	 16			; 00000010H
  00121	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00124	c0 e0 04	 shl	 al, 4
  00127	08 45 f8	 or	 BYTE PTR _pMsg$[ebp+12], al
  0012a	51		 push	 ecx
  0012b	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00130	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 967  : 
; 968  : 	LogAddTD("[ Crywolf ][Statue Info] Statue HP : %d",
; 969  : 		pMsg.iCrywolfStatueHP);

  00135	8b 55 f0	 mov	 edx, DWORD PTR _pMsg$[ebp+4]
  00138	52		 push	 edx
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00144	83 c4 08	 add	 esp, 8

; 970  : 
; 971  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar ++ )

  00147	be cd 00 00 00	 mov	 esi, 205		; 000000cdH
  0014c	8d 64 24 00	 npad	 4
$LL4@NotifyCryw@2:

; 972  : 	{
; 973  : 		int iUserIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(iAltar);

  00150	56		 push	 esi
  00151	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00156	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex

; 974  : 
; 975  : 		if ( iUserIndex != -1 )

  0015b	83 f8 ff	 cmp	 eax, -1
  0015e	74 23		 je	 SHORT $LN3@NotifyCryw@2

; 976  : 		{
; 977  : 			LogAddTD("[ Crywolf ][Altar Info] Altar(%d) Contractor: [%s][%s] ",	iAltar, gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  00160	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00166	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016c	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  0016f	52		 push	 edx
  00170	83 c0 6c	 add	 eax, 108		; 0000006cH
  00173	50		 push	 eax
  00174	56		 push	 esi
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00180	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@NotifyCryw@2:

; 970  : 
; 971  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar ++ )

  00183	46		 inc	 esi
  00184	81 fe d1 00 00
	00		 cmp	 esi, 209		; 000000d1H
  0018a	7e c4		 jle	 SHORT $LL4@NotifyCryw@2
$LN2@NotifyCryw@2:

; 978  : 		}
; 979  : 	}
; 980  : }

  0018c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018f	33 cd		 xor	 ecx, ebp
  00191	5e		 pop	 esi
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfStatueAndAltarInfo
_TEXT	ENDS
PUBLIC	??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__$ArrayPad$
PUBLIC	?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfBossMonsterInfo
EXTRN	__ftol2_sse:PROC
;	COMDAT ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA
_BSS	SEGMENT
?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfBossMonsterInfo'::`2'::dwTickCount
_BSS	ENDS
;	COMDAT ??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@
CONST	SEGMENT
??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@ DB '['
	DB	' Crywolf ][Boss Monster Info] Balgars HP:%d, DarkElf:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfBossMonsterInfo, COMDAT
; _this$ = ecx

; 990  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 991  : 	static DWORD dwTickCount = 0;
; 992  : 
; 993  : 	if ( (GetTickCount() - dwTickCount) < 5000 )

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00017	ff d6		 call	 esi
  00019	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA
  0001f	3d 88 13 00 00	 cmp	 eax, 5000		; 00001388H
  00024	0f 82 c4 00 00
	00		 jb	 $LN12@NotifyCryw@3

; 994  : 		return;
; 995  : 
; 996  : 	dwTickCount = GetTickCount();

  0002a	57		 push	 edi
  0002b	ff d6		 call	 esi

; 997  : 
; 998  : 	PMSG_ANS_CRYWOLF_BOSSMONSTER_INFO pMsg;
; 999  : 
; 1000 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x05, sizeof(pMsg));

  0002d	6a 0c		 push	 12			; 0000000cH
  0002f	6a 05		 push	 5
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA, eax
  00036	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00039	68 bd 00 00 00	 push	 189			; 000000bdH
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 1001 : 	pMsg.iMonster1HP = -1;
; 1002 : 	pMsg.btMonster2 = 0;
; 1003 : 
; 1004 : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  00047	33 ff		 xor	 edi, edi
  00049	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+4], -1
  00050	c6 45 f8 00	 mov	 BYTE PTR _pMsg$[ebp+8], 0
  00054	33 f6		 xor	 esi, esi
$LL10@NotifyCryw@3:

; 1005 : 	{
; 1006 : 		if (!gObjIsConnected(i))

  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0005c	83 c4 04	 add	 esp, 4
  0005f	85 c0		 test	 eax, eax
  00061	74 54		 je	 SHORT $LN9@NotifyCryw@3

; 1007 : 			continue;
; 1008 : 
; 1009 : 		if ( gObj[i].MapNumber != MAP_INDEX_CRYWOLF_FIRSTZONE )

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00068	80 bc 06 49 01
	00 00 22	 cmp	 BYTE PTR [esi+eax+329], 34 ; 00000022H
  00070	75 45		 jne	 SHORT $LN9@NotifyCryw@3

; 1010 : 			continue;
; 1011 : 
; 1012 : 		if ( !gObj[i].Live )

  00072	80 7c 06 6a 00	 cmp	 BYTE PTR [esi+eax+106], 0
  00077	74 3e		 je	 SHORT $LN9@NotifyCryw@3

; 1013 : 			continue;
; 1014 : 
; 1015 : 		switch ( gObj[i].Class )

  00079	0f b7 8c 06 b8
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+184]
  00081	81 e9 54 01 00
	00		 sub	 ecx, 340		; 00000154H
  00087	74 2b		 je	 SHORT $LN2@NotifyCryw@3
  00089	83 e9 09	 sub	 ecx, 9
  0008c	75 29		 jne	 SHORT $LN9@NotifyCryw@3

; 1019 : 				break;
; 1020 : 			case 349:
; 1021 : 				pMsg.iMonster1HP = (int)((gObj[i].Life * 100.0f) / (gObj[i].MaxLife + 1.0f));

  0008e	d9 84 06 fc 00
	00 00		 fld	 DWORD PTR [esi+eax+252]
  00095	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  0009b	d9 84 06 00 01
	00 00		 fld	 DWORD PTR [esi+eax+256]
  000a2	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  000a8	de f9		 fdivp	 ST(1), ST(0)
  000aa	e8 00 00 00 00	 call	 __ftol2_sse
  000af	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 1022 : 				break;

  000b2	eb 03		 jmp	 SHORT $LN9@NotifyCryw@3
$LN2@NotifyCryw@3:

; 1016 : 		{
; 1017 : 			case 340:
; 1018 : 				pMsg.btMonster2++;

  000b4	fe 45 f8	 inc	 BYTE PTR _pMsg$[ebp+8]
$LN9@NotifyCryw@3:

; 1001 : 	pMsg.iMonster1HP = -1;
; 1002 : 	pMsg.btMonster2 = 0;
; 1003 : 
; 1004 : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  000b7	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  000bd	47		 inc	 edi
  000be	81 fe 80 76 97
	08		 cmp	 esi, 144144000		; 08977680H
  000c4	7c 90		 jl	 SHORT $LL10@NotifyCryw@3

; 1023 : 		}
; 1024 : 	}
; 1025 : 
; 1026 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  000c6	6a 0c		 push	 12			; 0000000cH
  000c8	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000cb	51		 push	 ecx
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  000d1	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1027 : 
; 1028 : 	LogAddTD("[ Crywolf ][Boss Monster Info] Balgars HP:%d, DarkElf:%d", pMsg.iMonster1HP, pMsg.btMonster2);

  000d6	0f b6 55 f8	 movzx	 edx, BYTE PTR _pMsg$[ebp+8]
  000da	8b 45 f4	 mov	 eax, DWORD PTR _pMsg$[ebp+4]
  000dd	52		 push	 edx
  000de	50		 push	 eax
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	5f		 pop	 edi
$LN12@NotifyCryw@3:

; 1029 : }

  000ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f1	33 cd		 xor	 ecx, ebp
  000f3	5e		 pop	 esi
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfBossMonsterInfo
_TEXT	ENDS
PUBLIC	?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z ; CCrywolf::NotifyCrywolfStageEffectOnOff
; Function compile flags: /Ogtp
;	COMDAT ?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
_btOnOff$ = 8						; size = 1
?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z PROC	; CCrywolf::NotifyCrywolfStageEffectOnOff, COMDAT
; _this$ = ecx

; 1038 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1039 : 	PMSG_ANS_CRYWOLF_STAGE_EFFECT_ONOFF pMsg = {0};

  00006	33 c0		 xor	 eax, eax

; 1040 : 
; 1041 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x06, sizeof(pMsg));

  00008	6a 05		 push	 5
  0000a	6a 06		 push	 6
  0000c	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp], al
  0000f	89 45 f9	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  00012	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00015	68 bd 00 00 00	 push	 189			; 000000bdH
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1042 : 	pMsg.btStageEffectOnOff = btOnOff;

  00020	8a 4d 08	 mov	 cl, BYTE PTR _btOnOff$[ebp]
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 1043 : 
; 1044 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  00026	6a 05		 push	 5
  00028	8d 55 f8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0002b	88 4d fc	 mov	 BYTE PTR _pMsg$[ebp+4], cl
  0002e	52		 push	 edx
  0002f	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00034	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1045 : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z ENDP	; CCrywolf::NotifyCrywolfStageEffectOnOff
_TEXT	ENDS
PUBLIC	?CrywolfServerGroupSync@CCrywolf@@QAEXXZ	; CCrywolf::CrywolfServerGroupSync
EXTRN	?GDReqCrywolfSync@@YAXHHH@Z:PROC		; GDReqCrywolfSync
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
; Function compile flags: /Ogtp
;	COMDAT ?CrywolfServerGroupSync@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfServerGroupSync@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfServerGroupSync, COMDAT
; _this$ = ecx

; 1181 : 	GDReqCrywolfSync(g_MapServerManager.GetMapSvrGroup(), g_Crywolf.GetCrywolfState(), g_Crywolf.GetOccupationState());

  00000	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00005	85 c0		 test	 eax, eax
  00007	74 06		 je	 SHORT $LN7@CrywolfSer
  00009	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0000d	eb 03		 jmp	 SHORT $LN8@CrywolfSer
$LN7@CrywolfSer:
  0000f	83 c8 ff	 or	 eax, -1
$LN8@CrywolfSer:
  00012	8b 0d f0 b7 0f
	00		 mov	 ecx, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1030128
  00018	8b 15 ec b7 0f
	00		 mov	 edx, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1030124
  0001e	51		 push	 ecx
  0001f	52		 push	 edx
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?GDReqCrywolfSync@@YAXHHH@Z ; GDReqCrywolfSync
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1182 : }

  00029	c3		 ret	 0
?CrywolfServerGroupSync@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfServerGroupSync
_TEXT	ENDS
PUBLIC	?CrywolfInfoDBSave@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfInfoDBSave
EXTRN	?GDReqCrywolfInfoSave@@YAXHHH@Z:PROC		; GDReqCrywolfInfoSave
; Function compile flags: /Ogtp
;	COMDAT ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfInfoDBSave@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfInfoDBSave, COMDAT
; _this$ = ecx

; 1186 : 	if ( this->m_bDBDataLoadOK != FALSE )

  00000	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00004	74 33		 je	 SHORT $LN1@CrywolfInf

; 1187 : 	{
; 1188 : 		GDReqCrywolfInfoSave(g_MapServerManager.GetMapSvrGroup(), this->GetCrywolfState(), this->GetOccupationState());

  00006	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000b	8b 91 f0 b7 0f
	00		 mov	 edx, DWORD PTR [ecx+1030128]
  00011	8b 89 ec b7 0f
	00		 mov	 ecx, DWORD PTR [ecx+1030124]
  00017	85 c0		 test	 eax, eax
  00019	74 10		 je	 SHORT $LN8@CrywolfInf
  0001b	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0001f	52		 push	 edx
  00020	51		 push	 ecx
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoSave@@YAXHHH@Z ; GDReqCrywolfInfoSave
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1189 : 	}
; 1190 : }

  0002a	c3		 ret	 0

; 1187 : 	{
; 1188 : 		GDReqCrywolfInfoSave(g_MapServerManager.GetMapSvrGroup(), this->GetCrywolfState(), this->GetOccupationState());

$LN8@CrywolfInf:
  0002b	52		 push	 edx
  0002c	83 c8 ff	 or	 eax, -1
  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoSave@@YAXHHH@Z ; GDReqCrywolfInfoSave
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CrywolfInf:

; 1189 : 	}
; 1190 : }

  00039	c3		 ret	 0
?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfInfoDBSave
_TEXT	ENDS
PUBLIC	?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfInfoDBLoad
EXTRN	?GDReqCrywolfInfoLoad@@YAXH@Z:PROC		; GDReqCrywolfInfoLoad
; Function compile flags: /Ogtp
;	COMDAT ?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfInfoDBLoad, COMDAT
; _this$ = ecx

; 1194 : 	this->m_bDBDataLoading = TRUE;

  00000	c7 41 0c 01 00
	00 00		 mov	 DWORD PTR [ecx+12], 1

; 1195 : 
; 1196 : 	GDReqCrywolfInfoLoad(g_MapServerManager.GetMapSvrGroup());

  00007	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000c	85 c0		 test	 eax, eax
  0000e	74 0c		 je	 SHORT $LN3@CrywolfInf@2
  00010	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoLoad@@YAXH@Z ; GDReqCrywolfInfoLoad
  0001a	59		 pop	 ecx

; 1197 : }

  0001b	c3		 ret	 0

; 1195 : 
; 1196 : 	GDReqCrywolfInfoLoad(g_MapServerManager.GetMapSvrGroup());

$LN3@CrywolfInf@2:
  0001c	83 c8 ff	 or	 eax, -1
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoLoad@@YAXH@Z ; GDReqCrywolfInfoLoad
  00025	59		 pop	 ecx

; 1197 : }

  00026	c3		 ret	 0
?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfInfoDBLoad
_TEXT	ENDS
PUBLIC	??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@ ; `string'
PUBLIC	?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z		; CCrywolf::ApplyCrywolfDBInfo
;	COMDAT ??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@ DB '['
	DB	' Crywolf ][ ApplyDBInfo] OccupationState : %d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
_iOccupationState$ = 12					; size = 4
?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::ApplyCrywolfDBInfo, COMDAT
; _this$ = ecx

; 1200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1201 : 	this->SetDBDataLoad(TRUE);
; 1202 : 	this->SetOccupationState(iOccupationState);

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _iOccupationState$[ebp]
  00008	8b f1		 mov	 esi, ecx

; 1203 : 	this->SetCrywolfCommonNPC(this->GetOccupationState());

  0000a	57		 push	 edi
  0000b	c7 46 08 01 00
	00 00		 mov	 DWORD PTR [esi+8], 1
  00012	89 be f0 b7 0f
	00		 mov	 DWORD PTR [esi+1030128], edi
  00018	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 1204 : 	this->SetCrywolfMapAttr(this->GetOccupationState());

  0001d	8b 86 f0 b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030128]
  00023	50		 push	 eax
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 1205 : 
; 1206 : 	LogAddTD("[ Crywolf ][ ApplyDBInfo] OccupationState : %d", iOccupationState);

  0002b	57		 push	 edi
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00037	83 c4 08	 add	 esp, 8
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 1207 : }

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::ApplyCrywolfDBInfo
_TEXT	ENDS
PUBLIC	??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@ ; `string'
PUBLIC	?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z	; CCrywolf::MakeRewardForAltarElf
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
;	COMDAT ??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@
CONST	SEGMENT
??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@ DB '['
	DB	' Crywolf ][Reward] [Altar Elf] [%s][%s] Success Reward - Gem '
	DB	'Of Bless', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iAltarUserIndex$ = 8					; size = 4
?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z PROC		; CCrywolf::MakeRewardForAltarElf, COMDAT
; _this$ = ecx

; 1259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1260 : 	int iItemNumber = ITEMGET(14,13);
; 1261 : 	ItemSerialCreateSend(gObj[iAltarUserIndex].m_Index, (BYTE)gObj[iAltarUserIndex].MapNumber, (BYTE)gObj[iAltarUserIndex].X, (BYTE)gObj[iAltarUserIndex].Y, iItemNumber, 0, 0, 0, 0, 0, iAltarUserIndex, 0, 0);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iAltarUserIndex$[ebp]
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	56		 push	 esi
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	51		 push	 ecx
  00011	8b f1		 mov	 esi, ecx
  00013	6a 00		 push	 0
  00015	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001b	0f b6 8c 06 46
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+326]
  00023	0f b6 94 06 44
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+324]
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	68 0d 1c 00 00	 push	 7181			; 00001c0dH
  00038	51		 push	 ecx
  00039	0f b6 8c 06 49
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+329]
  00041	52		 push	 edx
  00042	8b 14 06	 mov	 edx, DWORD PTR [esi+eax]
  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1262 : 	LogAddTD("[ Crywolf ][Reward] [Altar Elf] [%s][%s] Success Reward - Gem Of Bless", gObj[iAltarUserIndex].AccountID, gObj[iAltarUserIndex].Name);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	8d 4c 06 77	 lea	 ecx, DWORD PTR [esi+eax+119]
  00055	51		 push	 ecx
  00056	8d 54 06 6c	 lea	 edx, DWORD PTR [esi+eax+108]
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00066	83 c4 40	 add	 esp, 64			; 00000040H
  00069	5e		 pop	 esi

; 1263 : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::MakeRewardForAltarElf
_TEXT	ENDS
PUBLIC	??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@ ; `string'
PUBLIC	?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z	; CCrywolf::MakeRewardForHeroListTop5
;	COMDAT ??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@
CONST	SEGMENT
??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@ DB '['
	DB	' Crywolf ][Reward] [Hero List Top 5] [%s][%s] Success Reward '
	DB	'- Gem Of Bless', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z PROC	; CCrywolf::MakeRewardForHeroListTop5, COMDAT
; _this$ = ecx

; 1266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1267 : 	int iItemNumber = ITEMGET(14,13);
; 1268 : 	ItemSerialCreateSend(gObj[iUserIndex].m_Index, (BYTE)gObj[iUserIndex].MapNumber, (BYTE)gObj[iUserIndex].X, (BYTE)gObj[iUserIndex].Y, iItemNumber, 0, 0, 0, 0, 0, iUserIndex, 0, 0);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	56		 push	 esi
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	51		 push	 ecx
  00011	8b f1		 mov	 esi, ecx
  00013	6a 00		 push	 0
  00015	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001b	0f b6 8c 06 46
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+326]
  00023	0f b6 94 06 44
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+324]
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	68 0d 1c 00 00	 push	 7181			; 00001c0dH
  00038	51		 push	 ecx
  00039	0f b6 8c 06 49
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+329]
  00041	52		 push	 edx
  00042	8b 14 06	 mov	 edx, DWORD PTR [esi+eax]
  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1269 : 	LogAddTD("[ Crywolf ][Reward] [Hero List Top 5] [%s][%s] Success Reward - Gem Of Bless", gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	8d 4c 06 77	 lea	 ecx, DWORD PTR [esi+eax+119]
  00055	51		 push	 ecx
  00056	8d 54 06 6c	 lea	 edx, DWORD PTR [esi+eax+108]
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00066	83 c4 40	 add	 esp, 64			; 00000040H
  00069	5e		 pop	 esi

; 1270 : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z ENDP	; CCrywolf::MakeRewardForHeroListTop5
_TEXT	ENDS
PUBLIC	??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@ ; `string'
PUBLIC	?CalcGettingScore@CCrywolf@@QAEHHHH@Z		; CCrywolf::CalcGettingScore
;	COMDAT ??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@
CONST	SEGMENT
??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@ DB '['
	DB	' Crywolf ][MVP] Plus MVP Score : %d, Accumulated : %d [%s][%s'
	DB	']', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CalcGettingScore@CCrywolf@@QAEHHHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iMonIndex$ = 12					; size = 4
_iScoreType$ = 16					; size = 4
?CalcGettingScore@CCrywolf@@QAEHHHH@Z PROC		; CCrywolf::CalcGettingScore, COMDAT
; _this$ = ecx

; 1273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1274 : 	if ( !gObjIsConnected(iUserIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _iUserIndex$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 09		 jne	 SHORT $LN11@CalcGettin

; 1275 : 		return -1;

  00017	5f		 pop	 edi
  00018	83 c8 ff	 or	 eax, -1
  0001b	5e		 pop	 esi

; 1312 : }

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN11@CalcGettin:

; 1276 : 
; 1277 : 	int iAddMVPScore = 0;
; 1278 : 
; 1279 : 	if ( CHECK_LIMIT(iMonIndex, OBJ_MAXMONSTER) != FALSE )

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _iMonIndex$[ebp]
  00023	33 c0		 xor	 eax, eax
  00025	53		 push	 ebx
  00026	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	85 c9		 test	 ecx, ecx
  0002e	78 5d		 js	 SHORT $LN8@CalcGettin
  00030	33 d2		 xor	 edx, edx
  00032	81 f9 c7 32 00
	00		 cmp	 ecx, 12999		; 000032c7H
  00038	0f 9e c2	 setle	 dl
  0003b	85 d2		 test	 edx, edx
  0003d	74 4e		 je	 SHORT $LN8@CalcGettin

; 1280 : 	{
; 1281 : 		switch ( gObj[iMonIndex].Class )

  0003f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00045	0f b7 8c 19 b8
	00 00 00	 movzx	 ecx, WORD PTR [ecx+ebx+184]
  0004d	81 c1 ac fe ff
	ff		 add	 ecx, -340		; fffffeacH
  00053	83 f9 09	 cmp	 ecx, 9
  00056	77 35		 ja	 SHORT $LN8@CalcGettin
  00058	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN16@CalcGettin[ecx*4]
$LN7@CalcGettin:

; 1282 : 		{
; 1283 : 			case 349:
; 1284 : 				iAddMVPScore = this->m_iMVPScoreTable[0];

  0005f	8b 87 e0 cf 0f
	00		 mov	 eax, DWORD PTR [edi+1036256]

; 1285 : 				break;

  00065	eb 26		 jmp	 SHORT $LN8@CalcGettin
$LN6@CalcGettin:

; 1286 : 			case 340:
; 1287 : 				iAddMVPScore = this->m_iMVPScoreTable[1];

  00067	8b 87 e4 cf 0f
	00		 mov	 eax, DWORD PTR [edi+1036260]

; 1288 : 				break;

  0006d	eb 1e		 jmp	 SHORT $LN8@CalcGettin
$LN5@CalcGettin:

; 1289 : 			case 344:
; 1290 : 				iAddMVPScore = this->m_iMVPScoreTable[2];

  0006f	8b 87 e8 cf 0f
	00		 mov	 eax, DWORD PTR [edi+1036264]

; 1291 : 				break;

  00075	eb 16		 jmp	 SHORT $LN8@CalcGettin
$LN4@CalcGettin:

; 1292 : 			case 341:
; 1293 : 				iAddMVPScore = this->m_iMVPScoreTable[3];

  00077	8b 87 ec cf 0f
	00		 mov	 eax, DWORD PTR [edi+1036268]

; 1294 : 				break;

  0007d	eb 0e		 jmp	 SHORT $LN8@CalcGettin
$LN3@CalcGettin:

; 1295 : 			case 345:
; 1296 : 				iAddMVPScore = this->m_iMVPScoreTable[4];

  0007f	8b 87 f0 cf 0f
	00		 mov	 eax, DWORD PTR [edi+1036272]

; 1297 : 				break;

  00085	eb 06		 jmp	 SHORT $LN8@CalcGettin
$LN2@CalcGettin:

; 1298 : 			case 348:
; 1299 : 				iAddMVPScore = this->m_iMVPScoreTable[5];

  00087	8b 87 f4 cf 0f
	00		 mov	 eax, DWORD PTR [edi+1036276]
$LN8@CalcGettin:

; 1300 : 				break;
; 1301 : 		}
; 1302 : 	}
; 1303 : 
; 1304 : 	if ( iScoreType == 6 )

  0008d	83 7d 10 06	 cmp	 DWORD PTR _iScoreType$[ebp], 6
  00091	75 06		 jne	 SHORT $LN1@CalcGettin

; 1305 : 	{
; 1306 : 		iAddMVPScore = this->m_iMVPScoreTable[6];

  00093	8b 87 f8 cf 0f
	00		 mov	 eax, DWORD PTR [edi+1036280]
$LN1@CalcGettin:

; 1307 : 	}
; 1308 : 
; 1309 : 	gObj[iUserIndex].m_iCrywolfMVPScore += iAddMVPScore;

  00099	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0009f	01 84 1e c0 1f
	00 00		 add	 DWORD PTR [esi+ebx+8128], eax

; 1310 : 	LogAddTD("[ Crywolf ][MVP] Plus MVP Score : %d, Accumulated : %d [%s][%s]",	iAddMVPScore, gObj[iUserIndex].m_iCrywolfMVPScore,	gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ac	8d 54 0e 77	 lea	 edx, DWORD PTR [esi+ecx+119]
  000b0	52		 push	 edx
  000b1	8d 54 0e 6c	 lea	 edx, DWORD PTR [esi+ecx+108]
  000b5	8b 8c 0e c0 1f
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+8128]
  000bc	52		 push	 edx
  000bd	51		 push	 ecx
  000be	50		 push	 eax
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1311 : 	return gObj[iUserIndex].m_iCrywolfMVPScore;

  000ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d0	8b 84 16 c0 1f
	00 00		 mov	 eax, DWORD PTR [esi+edx+8128]
  000d7	83 c4 14	 add	 esp, 20			; 00000014H
  000da	5b		 pop	 ebx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi

; 1312 : }

  000dd	5d		 pop	 ebp
  000de	c2 0c 00	 ret	 12			; 0000000cH
  000e1	8d 49 00	 npad	 3
$LN16@CalcGettin:
  000e4	00 00 00 00	 DD	 $LN6@CalcGettin
  000e8	00 00 00 00	 DD	 $LN4@CalcGettin
  000ec	00 00 00 00	 DD	 $LN8@CalcGettin
  000f0	00 00 00 00	 DD	 $LN8@CalcGettin
  000f4	00 00 00 00	 DD	 $LN5@CalcGettin
  000f8	00 00 00 00	 DD	 $LN3@CalcGettin
  000fc	00 00 00 00	 DD	 $LN8@CalcGettin
  00100	00 00 00 00	 DD	 $LN8@CalcGettin
  00104	00 00 00 00	 DD	 $LN2@CalcGettin
  00108	00 00 00 00	 DD	 $LN7@CalcGettin
?CalcGettingScore@CCrywolf@@QAEHHHH@Z ENDP		; CCrywolf::CalcGettingScore
_TEXT	ENDS
PUBLIC	?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z	; CCrywolf::CalcGettingRewardExp
EXTRN	?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; gObjSealUserSetExp
EXTRN	__alldiv:PROC
; Function compile flags: /Ogtp
;	COMDAT ?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z
_TEXT	SEGMENT
_iRewardExp$ = -8					; size = 8
_iUserIndex$ = 8					; size = 4
_iMVPRank$ = 12						; size = 4
?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z PROC		; CCrywolf::CalcGettingRewardExp, COMDAT
; _this$ = ecx

; 1315 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1316 : 	if ( !gObjIsConnected(iUserIndex))

  00008	8b 7d 08	 mov	 edi, DWORD PTR _iUserIndex$[ebp]
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00013	83 c4 04	 add	 esp, 4
  00016	85 c0		 test	 eax, eax
  00018	75 0a		 jne	 SHORT $LN3@CalcGettin@2
$LN10@CalcGettin@2:
  0001a	5f		 pop	 edi

; 1317 : 		return 0;

  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 1332 : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@CalcGettin@2:

; 1318 : 
; 1319 : 	if ( CHECK_LIMIT(iMVPRank, 5) == FALSE )

  00024	8b 45 0c	 mov	 eax, DWORD PTR _iMVPRank$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	78 ef		 js	 SHORT $LN10@CalcGettin@2
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 f8 04	 cmp	 eax, 4
  00030	0f 9e c1	 setle	 cl
  00033	85 c9		 test	 ecx, ecx

; 1320 : 		return 0;

  00035	74 e3		 je	 SHORT $LN10@CalcGettin@2

; 1321 : 
; 1322 : 	__int64 iRewardExp = this->m_iMVPRankExpTable[iMVPRank];
; 1323 : 
; 1324 : 	if ( this->GetOccupationState() == 1 )

  00037	83 be f0 b7 0f
	00 01		 cmp	 DWORD PTR [esi+1030128], 1
  0003e	8b 84 86 10 d0
	0f 00		 mov	 eax, DWORD PTR [esi+eax*4+1036304]
  00045	99		 cdq
  00046	8b ca		 mov	 ecx, edx
  00048	89 45 f8	 mov	 DWORD PTR _iRewardExp$[ebp], eax
  0004b	89 4d fc	 mov	 DWORD PTR _iRewardExp$[ebp+4], ecx
  0004e	75 27		 jne	 SHORT $LN1@CalcGettin@2

; 1325 : 	{
; 1326 : 		iRewardExp = (iRewardExp * 10) / 100;

  00050	8b d0		 mov	 edx, eax
  00052	8b f1		 mov	 esi, ecx
  00054	0f a4 c1 02	 shld	 ecx, eax, 2
  00058	03 c0		 add	 eax, eax
  0005a	03 c0		 add	 eax, eax
  0005c	03 d0		 add	 edx, eax
  0005e	13 f1		 adc	 esi, ecx
  00060	0f a4 d6 01	 shld	 esi, edx, 1
  00064	6a 00		 push	 0
  00066	6a 64		 push	 100			; 00000064H
  00068	03 d2		 add	 edx, edx
  0006a	56		 push	 esi
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 __alldiv
  00071	89 45 f8	 mov	 DWORD PTR _iRewardExp$[ebp], eax
  00074	89 55 fc	 mov	 DWORD PTR _iRewardExp$[ebp+4], edx
$LN1@CalcGettin@2:

; 1327 : 	}
; 1328 : 
; 1329 : 	gObjSealUserSetExp(&gObj[iUserIndex], iRewardExp, TRUE); //Seal Exp

  00077	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0007d	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00083	6a 01		 push	 1
  00085	8d 45 f8	 lea	 eax, DWORD PTR _iRewardExp$[ebp]
  00088	50		 push	 eax
  00089	57		 push	 edi
  0008a	e8 00 00 00 00	 call	 ?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; gObjSealUserSetExp

; 1330 : 
; 1331 : 	return iRewardExp;

  0008f	8b 45 f8	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi

; 1332 : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z ENDP		; CCrywolf::CalcGettingRewardExp
_TEXT	ENDS
PUBLIC	?CalcGettingRank@CCrywolf@@QAEHH@Z		; CCrywolf::CalcGettingRank
; Function compile flags: /Ogtp
;	COMDAT ?CalcGettingRank@CCrywolf@@QAEHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
?CalcGettingRank@CCrywolf@@QAEHH@Z PROC			; CCrywolf::CalcGettingRank, COMDAT
; _this$ = ecx

; 1335 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1336 : 	int iRank = 0;
; 1337 : 
; 1338 : 	for ( int i=0;i<=4;i++)

  00004	8b 75 08	 mov	 esi, DWORD PTR _iUserIndex$[ebp]
  00007	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0000d	57		 push	 edi
  0000e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00014	8b b4 3e c0 1f
	00 00		 mov	 esi, DWORD PTR [esi+edi+8128]
  0001b	33 c0		 xor	 eax, eax
  0001d	33 d2		 xor	 edx, edx
  0001f	81 c1 fc cf 0f
	00		 add	 ecx, 1036284		; 000fcffcH
$LL4@CalcGettin@3:

; 1339 : 	{
; 1340 : 		if ( gObj[iUserIndex].m_iCrywolfMVPScore < this->m_iMVPRankScoreTable[i] )

  00025	3b 31		 cmp	 esi, DWORD PTR [ecx]
  00027	7c 0b		 jl	 SHORT $LN8@CalcGettin@3

; 1341 : 			break;
; 1342 : 
; 1343 : 		iRank = i;

  00029	8b c2		 mov	 eax, edx
  0002b	42		 inc	 edx
  0002c	83 c1 04	 add	 ecx, 4
  0002f	83 fa 04	 cmp	 edx, 4
  00032	7e f1		 jle	 SHORT $LL4@CalcGettin@3
$LN8@CalcGettin@3:
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 1344 : 	}
; 1345 : 
; 1346 : 	return iRank;
; 1347 : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?CalcGettingRank@CCrywolf@@QAEHH@Z ENDP			; CCrywolf::CalcGettingRank
_TEXT	ENDS
PUBLIC	??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@ ; `string'
PUBLIC	?GiveRewardExp@CCrywolf@@QAEXHH@Z		; CCrywolf::GiveRewardExp
EXTRN	?GCKillPlayerExtSend@@YAXHH_JHH@Z:PROC		; GCKillPlayerExtSend
EXTRN	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter
EXTRN	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A:BYTE ; g_MasterLevelSystem
EXTRN	?CrywolfMVPLevelUp@CCrywolfUtil@@QAEHHH@Z:PROC	; CCrywolfUtil::CrywolfMVPLevelUp
;	COMDAT ??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@
CONST	SEGMENT
??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@ DB '['
	DB	' Crywolf ][GiveRewardExp] LevelUp Error [%s][%s]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GiveRewardExp@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_iMAX_LEVCOUNT$ = 8					; size = 4
_iUserIndex$ = 8					; size = 4
_iRewardExp$ = 12					; size = 4
?GiveRewardExp@CCrywolf@@QAEXHH@Z PROC			; CCrywolf::GiveRewardExp, COMDAT
; _this$ = ecx

; 1350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1351 : 	if ( !gObjIsConnected(iUserIndex))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iUserIndex$[ebp]
  00007	53		 push	 ebx
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	0f 84 a9 00 00
	00		 je	 $LN1@GiveReward

; 1352 : 		return;
; 1353 : 
; 1354 : 	if ( iRewardExp <= -1 )

  00018	56		 push	 esi
  00019	8b 75 0c	 mov	 esi, DWORD PTR _iRewardExp$[ebp]
  0001c	83 fe ff	 cmp	 esi, -1
  0001f	0f 8e 9b 00 00
	00		 jle	 $LN14@GiveReward

; 1355 : 		return;
; 1356 : 
; 1357 : 	int iRET_EXP = 0;
; 1358 : 	int iCAL_EXP = iRewardExp;
; 1359 : 	int iMAX_LEVCOUNT = 0;
; 1360 : 
; 1361 : 	if ( !gObjIsConnected(iUserIndex))

  00025	53		 push	 ebx
  00026	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iMAX_LEVCOUNT$[ebp], 0
  0002d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00032	83 c4 04	 add	 esp, 4
  00035	85 c0		 test	 eax, eax
  00037	0f 84 83 00 00
	00		 je	 $LN14@GiveReward

; 1362 : 		return;
; 1363 : 
; 1364 : 	iRET_EXP = iCAL_EXP;
; 1365 : 
; 1366 : 	if ( gObj[iUserIndex].Type == OBJ_USER )

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00042	57		 push	 edi
  00043	8b fb		 mov	 edi, ebx
  00045	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0004b	66 83 7c 07 68
	01		 cmp	 WORD PTR [edi+eax+104], 1
  00051	75 6c		 jne	 SHORT $LN15@GiveReward

; 1367 : 	{
; 1368 : 		while ( iCAL_EXP > 0 )

  00053	85 f6		 test	 esi, esi
  00055	7e 3d		 jle	 SHORT $LN4@GiveReward
$LN17@GiveReward:

; 1369 : 		{
; 1370 : 			if ( iCAL_EXP > 0 )
; 1371 : 			{
; 1372 : 				iCAL_EXP = UTIL.CrywolfMVPLevelUp(iUserIndex, iCAL_EXP);

  00057	56		 push	 esi
  00058	53		 push	 ebx
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  0005e	e8 00 00 00 00	 call	 ?CrywolfMVPLevelUp@CCrywolfUtil@@QAEHHH@Z ; CCrywolfUtil::CrywolfMVPLevelUp
  00063	8b f0		 mov	 esi, eax

; 1373 : 			}
; 1374 : 
; 1375 : 			iMAX_LEVCOUNT++;

  00065	8b 45 08	 mov	 eax, DWORD PTR _iMAX_LEVCOUNT$[ebp]
  00068	40		 inc	 eax
  00069	89 45 08	 mov	 DWORD PTR _iMAX_LEVCOUNT$[ebp], eax

; 1376 : 
; 1377 : 			if ( iMAX_LEVCOUNT > 5 )

  0006c	83 f8 05	 cmp	 eax, 5
  0006f	7f 06		 jg	 SHORT $LN13@GiveReward

; 1367 : 	{
; 1368 : 		while ( iCAL_EXP > 0 )

  00071	85 f6		 test	 esi, esi
  00073	7f e2		 jg	 SHORT $LN17@GiveReward

; 1376 : 
; 1377 : 			if ( iMAX_LEVCOUNT > 5 )

  00075	eb 1d		 jmp	 SHORT $LN4@GiveReward
$LN13@GiveReward:

; 1378 : 			{
; 1379 : 				LogAddTD("[ Crywolf ][GiveRewardExp] LevelUp Error [%s][%s]", gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007c	8d 4c 07 77	 lea	 ecx, DWORD PTR [edi+eax+119]
  00080	51		 push	 ecx
  00081	8d 54 07 6c	 lea	 edx, DWORD PTR [edi+eax+108]
  00085	52		 push	 edx
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@GiveReward:

; 1380 : 				break;
; 1381 : 			}
; 1382 : 		}
; 1383 : 
; 1384 : 		if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(&gObj[iUserIndex]) == FALSE) //season3 add-on

  00094	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  0009f	57		 push	 edi
  000a0	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  000a5	85 c0		 test	 eax, eax
  000a7	75 16		 jne	 SHORT $LN15@GiveReward

; 1385 : 		{
; 1386 : 			GCKillPlayerExtSend(iUserIndex, (WORD)-1, iRewardExp, 0, 0);

  000a9	50		 push	 eax
  000aa	50		 push	 eax
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
  000ae	99		 cdq
  000af	52		 push	 edx
  000b0	50		 push	 eax
  000b1	68 ff ff 00 00	 push	 65535			; 0000ffffH
  000b6	53		 push	 ebx
  000b7	e8 00 00 00 00	 call	 ?GCKillPlayerExtSend@@YAXHH_JHH@Z ; GCKillPlayerExtSend
  000bc	83 c4 18	 add	 esp, 24			; 00000018H
$LN15@GiveReward:
  000bf	5f		 pop	 edi
$LN14@GiveReward:
  000c0	5e		 pop	 esi
$LN1@GiveReward:
  000c1	5b		 pop	 ebx

; 1387 : 		}
; 1388 : 	}
; 1389 : }

  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
?GiveRewardExp@CCrywolf@@QAEXHH@Z ENDP			; CCrywolf::GiveRewardExp
_TEXT	ENDS
PUBLIC	?ResetAllUserMVPScore@CCrywolf@@QAEXXZ		; CCrywolf::ResetAllUserMVPScore
; Function compile flags: /Ogtp
;	COMDAT ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ResetAllUserMVPScore@CCrywolf@@QAEXXZ PROC		; CCrywolf::ResetAllUserMVPScore, COMDAT
; _this$ = ecx

; 1393 : 	for ( int i=OBJ_STARTUSERINDZT;i<OBJMAX;i++)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	bf 03 00 00 00	 mov	 edi, 3
  0000e	b8 00 a7 40 09	 mov	 eax, 155232000		; 0940a700H
  00013	8d 77 fe	 lea	 esi, DWORD PTR [edi-2]
  00016	b3 22		 mov	 bl, 34			; 00000022H
  00018	33 d2		 xor	 edx, edx
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL4@ResetAllUs:

; 1394 : 	{
; 1395 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  00020	39 7c 08 04	 cmp	 DWORD PTR [eax+ecx+4], edi
  00024	75 1d		 jne	 SHORT $LN3@ResetAllUs
  00026	66 39 74 08 68	 cmp	 WORD PTR [eax+ecx+104], si
  0002b	75 16		 jne	 SHORT $LN3@ResetAllUs
  0002d	38 9c 08 49 01
	00 00		 cmp	 BYTE PTR [eax+ecx+329], bl
  00034	75 0d		 jne	 SHORT $LN3@ResetAllUs

; 1396 : 		{
; 1397 : 			gObj[i].m_iCrywolfMVPScore = 0;

  00036	89 94 08 c0 1f
	00 00		 mov	 DWORD PTR [eax+ecx+8128], edx
  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN3@ResetAllUs:

; 1394 : 	{
; 1395 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  00043	39 bc 08 54 2b
	00 00		 cmp	 DWORD PTR [eax+ecx+11092], edi
  0004a	75 20		 jne	 SHORT $LN10@ResetAllUs
  0004c	66 39 b4 08 b8
	2b 00 00	 cmp	 WORD PTR [eax+ecx+11192], si
  00054	75 16		 jne	 SHORT $LN10@ResetAllUs
  00056	38 9c 08 99 2c
	00 00		 cmp	 BYTE PTR [eax+ecx+11417], bl
  0005d	75 0d		 jne	 SHORT $LN10@ResetAllUs

; 1396 : 		{
; 1397 : 			gObj[i].m_iCrywolfMVPScore = 0;

  0005f	89 94 08 10 4b
	00 00		 mov	 DWORD PTR [eax+ecx+19216], edx
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@ResetAllUs:

; 1394 : 	{
; 1395 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  0006c	39 bc 08 a4 56
	00 00		 cmp	 DWORD PTR [eax+ecx+22180], edi
  00073	75 20		 jne	 SHORT $LN11@ResetAllUs
  00075	66 39 b4 08 08
	57 00 00	 cmp	 WORD PTR [eax+ecx+22280], si
  0007d	75 16		 jne	 SHORT $LN11@ResetAllUs
  0007f	38 9c 08 e9 57
	00 00		 cmp	 BYTE PTR [eax+ecx+22505], bl
  00086	75 0d		 jne	 SHORT $LN11@ResetAllUs

; 1396 : 		{
; 1397 : 			gObj[i].m_iCrywolfMVPScore = 0;

  00088	89 94 08 60 76
	00 00		 mov	 DWORD PTR [eax+ecx+30304], edx
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN11@ResetAllUs:

; 1394 : 	{
; 1395 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  00095	39 bc 08 f4 81
	00 00		 cmp	 DWORD PTR [eax+ecx+33268], edi
  0009c	75 20		 jne	 SHORT $LN12@ResetAllUs
  0009e	66 39 b4 08 58
	82 00 00	 cmp	 WORD PTR [eax+ecx+33368], si
  000a6	75 16		 jne	 SHORT $LN12@ResetAllUs
  000a8	38 9c 08 39 83
	00 00		 cmp	 BYTE PTR [eax+ecx+33593], bl
  000af	75 0d		 jne	 SHORT $LN12@ResetAllUs

; 1396 : 		{
; 1397 : 			gObj[i].m_iCrywolfMVPScore = 0;

  000b1	89 94 08 b0 a1
	00 00		 mov	 DWORD PTR [eax+ecx+41392], edx
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN12@ResetAllUs:

; 1394 : 	{
; 1395 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  000be	39 bc 08 44 ad
	00 00		 cmp	 DWORD PTR [eax+ecx+44356], edi
  000c5	75 20		 jne	 SHORT $LN13@ResetAllUs
  000c7	66 39 b4 08 a8
	ad 00 00	 cmp	 WORD PTR [eax+ecx+44456], si
  000cf	75 16		 jne	 SHORT $LN13@ResetAllUs
  000d1	38 9c 08 89 ae
	00 00		 cmp	 BYTE PTR [eax+ecx+44681], bl
  000d8	75 0d		 jne	 SHORT $LN13@ResetAllUs

; 1396 : 		{
; 1397 : 			gObj[i].m_iCrywolfMVPScore = 0;

  000da	89 94 08 00 cd
	00 00		 mov	 DWORD PTR [eax+ecx+52480], edx
  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN13@ResetAllUs:

; 1393 : 	for ( int i=OBJ_STARTUSERINDZT;i<OBJMAX;i++)

  000e7	05 90 d8 00 00	 add	 eax, 55440		; 0000d890H
  000ec	3d 80 d7 e9 09	 cmp	 eax, 166320000		; 09e9d780H
  000f1	0f 8c 29 ff ff
	ff		 jl	 $LL4@ResetAllUs

; 1398 : 		}
; 1399 : 	}
; 1400 : }

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	c3		 ret	 0
?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ResetAllUserMVPScore
_TEXT	ENDS
PUBLIC	?CrywolfNpcAct@CCrywolf@@QAEXH@Z		; CCrywolf::CrywolfNpcAct
EXTRN	?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z:PROC	; CCrywolfAltar::CrywolfAltarAct
EXTRN	?CrywolfStatueAct@CCrywolfStatue@@QAEXH@Z:PROC	; CCrywolfStatue::CrywolfStatueAct
; Function compile flags: /Ogtp
;	COMDAT ?CrywolfNpcAct@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CrywolfNpcAct@CCrywolf@@QAEXH@Z PROC			; CCrywolf::CrywolfNpcAct, COMDAT
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1404 : 	if ( this->GetCrywolfState() == CRYWOLF_STATE_READY || this->GetCrywolfState() == CRYWOLF_STATE_START )

  00003	8b 81 ec b7 0f
	00		 mov	 eax, DWORD PTR [ecx+1030124]
  00009	83 f8 03	 cmp	 eax, 3
  0000c	74 05		 je	 SHORT $LN1@CrywolfNpc
  0000e	83 f8 04	 cmp	 eax, 4
  00011	75 1b		 jne	 SHORT $LN2@CrywolfNpc
$LN1@CrywolfNpc:
  00013	56		 push	 esi

; 1405 : 	{
; 1406 : 		g_CrywolfNPC_Statue.CrywolfStatueAct(iIndex);

  00014	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00017	56		 push	 esi
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A ; g_CrywolfNPC_Statue
  0001d	e8 00 00 00 00	 call	 ?CrywolfStatueAct@CCrywolfStatue@@QAEXH@Z ; CCrywolfStatue::CrywolfStatueAct

; 1407 : 		g_CrywolfNPC_Altar.CrywolfAltarAct(iIndex);

  00022	56		 push	 esi
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00028	e8 00 00 00 00	 call	 ?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::CrywolfAltarAct
  0002d	5e		 pop	 esi
$LN2@CrywolfNpc:

; 1408 : 	}
; 1409 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?CrywolfNpcAct@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::CrywolfNpcAct
_TEXT	ENDS
PUBLIC	?CrywolfMonsterAct@CCrywolf@@QAEXH@Z		; CCrywolf::CrywolfMonsterAct
; Function compile flags: /Ogtp
;	COMDAT ?CrywolfMonsterAct@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CrywolfMonsterAct@CCrywolf@@QAEXH@Z PROC		; CCrywolf::CrywolfMonsterAct, COMDAT
; _this$ = ecx

; 1413 : 	return;
; 1414 : }

  00000	c2 04 00	 ret	 4
?CrywolfMonsterAct@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::CrywolfMonsterAct
_TEXT	ENDS
PUBLIC	?CrywolfSecondAct@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfSecondAct
; Function compile flags: /Ogtp
;	COMDAT ?CrywolfSecondAct@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfSecondAct@CCrywolf@@QAEXXZ PROC			; CCrywolf::CrywolfSecondAct, COMDAT
; _this$ = ecx

; 1417 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1418 : 	this->CrywolfServerGroupSync();

  00003	e8 00 00 00 00	 call	 ?CrywolfServerGroupSync@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfServerGroupSync

; 1419 : 
; 1420 : 	if ( this->m_bDBDataLoadOK == FALSE && this->m_bDBDataLoading == FALSE )

  00008	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000c	75 0e		 jne	 SHORT $LN1@CrywolfSec
  0000e	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00012	75 08		 jne	 SHORT $LN1@CrywolfSec

; 1421 : 	{
; 1422 : 		this->CrywolfInfoDBLoad();

  00014	8b ce		 mov	 ecx, esi
  00016	5e		 pop	 esi
  00017	e9 00 00 00 00	 jmp	 ?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBLoad
$LN1@CrywolfSec:
  0001c	5e		 pop	 esi

; 1423 : 	}
; 1424 : }

  0001d	c3		 ret	 0
?CrywolfSecondAct@CCrywolf@@QAEXXZ ENDP			; CCrywolf::CrywolfSecondAct
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator==
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
; Function compile flags: /Ogtp
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 11	 add	 eax, 17			; 00000011H

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  0000c	75 0c		 jne	 SHORT $LN1@Min
  0000e	8b ff		 npad	 2
$LL2@Min:

; 650  : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN1@Min:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
; Function compile flags: /Ogtp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0d		 jne	 SHORT $LN4@Rrotate

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@Rrotate:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0d		 jne	 SHORT $LN2@Rrotate

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
; Function compile flags: /Ogtp
;	COMDAT ?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  0000d	75 0c		 jne	 SHORT $LN1@Max
  0000f	90		 npad	 1
$LL2@Max:

; 643  : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN1@Max:

; 644  : 		return (_Pnode);
; 645  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
_TEXT	ENDS
PUBLIC	??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\set
;	COMDAT ??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z PROC ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 40   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@QAE@VCCrywolfScoreSort@@@Z ENDP ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::addressof<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::addressof<OBJECTSTRUCT *>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::addressof<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node><OBJECTSTRUCT *>
; Function compile flags: /Ogtp
;	COMDAT ??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node><OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0PAUOBJECTSTRUCT@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node><OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\set
;	COMDAT ?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z PROC ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn, COMDAT

; 45   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		return (_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 47   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ENDP ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  00008	74 06		 je	 SHORT $LN8@operator@2

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0000f	c3		 ret	 0
$LN8@operator@2:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00016	75 17		 jne	 SHORT $LN40@operator@2

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  00018	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001b	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  0001f	75 30		 jne	 SHORT $LN21@operator@2
$LL22@operator@2:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  0002a	74 f5		 je	 SHORT $LL22@operator@2

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0002e	c3		 ret	 0
$LN40@operator@2:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00036	75 11		 jne	 SHORT $LN3@operator@2
$LL4@operator@2:
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0003c	75 0b		 jne	 SHORT $LN3@operator@2

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003e	89 10		 mov	 DWORD PTR [eax], edx
  00040	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00043	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00047	74 ef		 je	 SHORT $LL4@operator@2
$LN3@operator@2:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  0004f	75 02		 jne	 SHORT $LN1@operator@2

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@2:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00051	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@2:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00053	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ; std::allocator<OBJECTSTRUCT *>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ PROC ; std::allocator<OBJECTSTRUCT *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ENDP ; std::allocator<OBJECTSTRUCT *>::max_size
_TEXT	ENDS
PUBLIC	??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::forward<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::forward<OBJECTSTRUCT *>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::forward<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z ; std::_Destroy<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z PROC ; std::_Destroy<OBJECTSTRUCT *>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAUOBJECTSTRUCT@@@std@@YAXPAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Destroy<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AA_N@std@@YA$$QA_NAA_N@Z		; std::move<bool &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AA_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_N@std@@YA$$QA_NAA_N@Z PROC			; std::move<bool &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AA_N@std@@YA$$QA_NAA_N@Z ENDP			; std::move<bool &>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &>
_TEXT	ENDS
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z ; std::allocator<OBJECTSTRUCT *>::construct
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z PROC ; std::allocator<OBJECTSTRUCT *>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@construct:

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU3@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::construct
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@JHHH@Z			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  00006	99		 cdq
  00007	56		 push	 esi
  00008	8b f0		 mov	 esi, eax
  0000a	57		 push	 edi
  0000b	8b fa		 mov	 edi, edx
  0000d	0f a4 c2 01	 shld	 edx, eax, 1
  00011	03 c0		 add	 eax, eax
  00013	03 f0		 add	 esi, eax
  00015	13 fa		 adc	 edi, edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  0001a	0f a4 f7 03	 shld	 edi, esi, 3
  0001e	99		 cdq
  0001f	03 f6		 add	 esi, esi
  00021	03 f6		 add	 esi, esi
  00023	03 f6		 add	 esi, esi
  00025	03 f0		 add	 esi, eax
  00027	13 fa		 adc	 edi, edx
  00029	8b c6		 mov	 eax, esi
  0002b	8b d7		 mov	 edx, edi
  0002d	0f a4 c2 04	 shld	 edx, eax, 4
  00031	c1 e0 04	 shl	 eax, 4
  00034	2b c6		 sub	 eax, esi
  00036	1b d7		 sbb	 edx, edi
  00038	8b f0		 mov	 esi, eax
  0003a	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  0003d	8b fa		 mov	 edi, edx
  0003f	0f a4 f7 02	 shld	 edi, esi, 2
  00043	99		 cdq
  00044	03 f6		 add	 esi, esi
  00046	03 f6		 add	 esi, esi
  00048	03 f0		 add	 esi, eax
  0004a	13 fa		 adc	 edi, edx
  0004c	8b c6		 mov	 eax, esi
  0004e	8b d7		 mov	 edx, edi
  00050	0f a4 c2 04	 shld	 edx, eax, 4
  00054	c1 e0 04	 shl	 eax, 4
  00057	2b c6		 sub	 eax, esi
  00059	1b d7		 sbb	 edx, edi
  0005b	0f a4 c2 02	 shld	 edx, eax, 2
  0005f	03 c0		 add	 eax, eax
  00061	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
  00064	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  00067	8b fa		 mov	 edi, edx
  00069	99		 cdq
  0006a	03 f0		 add	 esi, eax
  0006c	13 fa		 adc	 edi, edx
  0006e	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  00071	5f		 pop	 edi
  00072	89 31		 mov	 DWORD PTR [ecx], esi

; 43   : }

  00074	8b c1		 mov	 eax, ecx
  00076	5e		 pop	 esi
  00077	5d		 pop	 ebp
  00078	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Ogtp
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 82   : 	return( m_timeSpan );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 83   : }

  00005	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 172  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
EXTRN	__mktime64:PROC
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
_atm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00010	8b 55 08	 mov	 edx, DWORD PTR _nYear$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	81 fa 6c 07 00
	00		 cmp	 edx, 1900		; 0000076cH
  0001c	7d 0a		 jge	 SHORT $LN66@CTime
  0001e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00023	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN86@CTime:
$LN66@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00028	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  0002b	48		 dec	 eax
  0002c	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0002f	76 0a		 jbe	 SHORT $LN56@CTime
  00031	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00036	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN87@CTime:
$LN56@CTime:
  0003b	53		 push	 ebx

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0003c	8b 5d 10	 mov	 ebx, DWORD PTR _nDay$[ebp]
  0003f	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00042	57		 push	 edi
  00043	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00046	76 0a		 jbe	 SHORT $LN46@CTime
  00048	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0004d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN88@CTime:
$LN46@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  00052	8b 7d 14	 mov	 edi, DWORD PTR _nHour$[ebp]
  00055	83 ff 17	 cmp	 edi, 23			; 00000017H
  00058	76 0a		 jbe	 SHORT $LN36@CTime
  0005a	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0005f	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN89@CTime:
$LN36@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00064	8b 4d 18	 mov	 ecx, DWORD PTR _nMin$[ebp]
  00067	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0006a	76 0a		 jbe	 SHORT $LN26@CTime
  0006c	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00071	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN90@CTime:
$LN26@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00076	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  00079	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  0007c	76 0a		 jbe	 SHORT $LN16@CTime
  0007e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00083	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN91@CTime:
$LN16@CTime:

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;
; 198  : 	atm.tm_min = nMin;
; 199  : 	atm.tm_hour = nHour;
; 200  : 	atm.tm_mday = nDay;
; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  00088	81 c2 94 f8 ff
	ff		 add	 edx, -1900		; fffff894H
  0008e	89 45 d8	 mov	 DWORD PTR _atm$[ebp], eax
  00091	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  00094	89 55 ec	 mov	 DWORD PTR _atm$[ebp+20], edx
  00097	89 4d dc	 mov	 DWORD PTR _atm$[ebp+4], ecx

; 203  : 	atm.tm_isdst = nDST;

  0009a	8b 4d 20	 mov	 ecx, DWORD PTR _nDST$[ebp]

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  0009d	8d 55 d8	 lea	 edx, DWORD PTR _atm$[ebp]
  000a0	48		 dec	 eax
  000a1	52		 push	 edx
  000a2	89 7d e0	 mov	 DWORD PTR _atm$[ebp+8], edi
  000a5	89 5d e4	 mov	 DWORD PTR _atm$[ebp+12], ebx
  000a8	89 45 e8	 mov	 DWORD PTR _atm$[ebp+16], eax
  000ab	89 4d f8	 mov	 DWORD PTR _atm$[ebp+32], ecx
  000ae	e8 00 00 00 00	 call	 __mktime64
  000b3	83 c4 04	 add	 esp, 4
  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 207  : 	if(m_time == -1)

  000b8	23 c2		 and	 eax, edx
  000ba	5f		 pop	 edi
  000bb	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000be	5b		 pop	 ebx
  000bf	83 f8 ff	 cmp	 eax, -1
  000c2	75 0a		 jne	 SHORT $LN1@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  000c4	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN92@CTime:
$LN1@CTime:

; 210  : 	}
; 211  : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	8b c6		 mov	 eax, esi
  000d3	33 cd		 xor	 ecx, ebp
  000d5	5e		 pop	 esi
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 1c 00	 ret	 28			; 0000001cH
$LN85@CTime:
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z		; ATL::CTime::operator+
; Function compile flags: /Ogtp
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 315  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	03 55 0c	 add	 edx, DWORD PTR _span$[ebp]
  00008	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000b	13 4d 10	 adc	 ecx, DWORD PTR _span$[ebp+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 316  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
_TEXT	ENDS
PUBLIC	??MCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator<
; Function compile flags: /Ogtp
;	COMDAT ??MCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??MCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator<, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return( m_time < time.m_time );

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR _time$[ebp+4]
  00009	7f 12		 jg	 SHORT $LN3@operator@3
  0000b	7c 07		 jl	 SHORT $LN5@operator@3
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00012	73 09		 jae	 SHORT $LN3@operator@3
$LN5@operator@3:
  00014	b8 01 00 00 00	 mov	 eax, 1

; 331  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN3@operator@3:

; 330  : 	return( m_time < time.m_time );

  0001d	33 c0		 xor	 eax, eax

; 331  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??MCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator<
_TEXT	ENDS
PUBLIC	??OCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator>
; Function compile flags: /Ogtp
;	COMDAT ??OCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??OCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator>, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 	return( m_time > time.m_time );

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR _time$[ebp+4]
  00009	7c 12		 jl	 SHORT $LN3@operator@4
  0000b	7f 07		 jg	 SHORT $LN5@operator@4
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00012	76 09		 jbe	 SHORT $LN3@operator@4
$LN5@operator@4:
  00014	b8 01 00 00 00	 mov	 eax, 1

; 336  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN3@operator@4:

; 335  : 	return( m_time > time.m_time );

  0001d	33 c0		 xor	 eax, eax

; 336  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??OCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
EXTRN	__localtime64_s:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_ptmTemp$86878 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _ptm$[ebp]

; 370  : 	// Ensure ptm is valid
; 371  : 	ATLENSURE( ptm != NULL );

  00014	85 db		 test	 ebx, ebx
  00016	75 0a		 jne	 SHORT $LN15@GetLocalTm
  00018	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0001d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN17@GetLocalTm:
$LN15@GetLocalTm:

; 372  : 
; 373  : 	if (ptm != NULL)
; 374  : 	{
; 375  : 		struct tm ptmTemp;
; 376  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00022	51		 push	 ecx
  00023	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$86878[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __localtime64_s
  0002c	83 c4 08	 add	 esp, 8

; 377  : 
; 378  : 		if (err != 0)

  0002f	85 c0		 test	 eax, eax
  00031	74 13		 je	 SHORT $LN1@GetLocalTm

; 379  : 		{
; 380  : 			return NULL;    // indicates that m_time was not initialized!

  00033	33 c0		 xor	 eax, eax
  00035	5b		 pop	 ebx

; 384  : 		return ptm;
; 385  : 	}
; 386  : 
; 387  : 	return NULL;
; 388  : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	33 cd		 xor	 ecx, ebp
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN1@GetLocalTm:
  00046	56		 push	 esi
  00047	57		 push	 edi

; 381  : 		}
; 382  : 
; 383  : 		*ptm = ptmTemp;

  00048	8b fb		 mov	 edi, ebx
  0004a	b9 09 00 00 00	 mov	 ecx, 9
  0004f	8d 75 d8	 lea	 esi, DWORD PTR _ptmTemp$86878[ebp]
  00052	f3 a5		 rep movsd

; 384  : 		return ptm;
; 385  : 	}
; 386  : 
; 387  : 	return NULL;
; 388  : }

  00054	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	8b c3		 mov	 eax, ebx
  0005b	33 cd		 xor	 ecx, ebp
  0005d	5b		 pop	 ebx
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
$LN16@GetLocalTm:
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetYear@CTime@ATL@@QBEHXZ			; ATL::CTime::GetYear
; Function compile flags: /Ogtp
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$214614 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 420  : 	struct tm ttm;
; 421  : 	struct tm * ptm;
; 422  : 
; 423  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$214614[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 16		 jne	 SHORT $LN3@GetYear

; 424  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00021	8b 45 ec	 mov	 eax, DWORD PTR _ptmTemp$214614[ebp+20]
  00024	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH

; 425  : }

  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN3@GetYear:
  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	33 c0		 xor	 eax, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetMonth@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMonth
; Function compile flags: /Ogtp
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$214642 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 429  : 	struct tm ttm;
; 430  : 	struct tm * ptm;
; 431  : 
; 432  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$214642[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 12		 jne	 SHORT $LN3@GetMonth

; 433  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00021	8b 45 e8	 mov	 eax, DWORD PTR _ptmTemp$214642[ebp+16]
  00024	40		 inc	 eax

; 434  : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN3@GetMonth:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 cd		 xor	 ecx, ebp
  00038	33 c0		 xor	 eax, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetDay@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDay
; Function compile flags: /Ogtp
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$214670 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 438  : 	struct tm ttm;
; 439  : 	struct tm * ptm;
; 440  : 
; 441  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$214670[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s

; 442  : 	return ptm ? ptm->tm_mday : 0 ;
; 443  : }

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0001d	83 c4 08	 add	 esp, 8
  00020	f7 d8		 neg	 eax
  00022	1b c0		 sbb	 eax, eax
  00024	f7 d0		 not	 eax
  00026	23 45 e4	 and	 eax, DWORD PTR _ptmTemp$214670[ebp+12]
  00029	33 cd		 xor	 ecx, ebp
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
; Function compile flags: /Ogtp
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$214698 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 447  : 	struct tm ttm;
; 448  : 	struct tm * ptm;
; 449  : 
; 450  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$214698[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 11		 jne	 SHORT $LN3@GetHour

; 451  : 	return ptm ? ptm->tm_hour : -1 ;

  00021	8b 45 e0	 mov	 eax, DWORD PTR _ptmTemp$214698[ebp+8]

; 452  : }

  00024	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00027	33 cd		 xor	 ecx, ebp
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN3@GetHour:
  00032	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00035	33 cd		 xor	 ecx, ebp
  00037	83 c8 ff	 or	 eax, -1
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
; Function compile flags: /Ogtp
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$214726 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 456  : 	struct tm ttm;
; 457  : 	struct tm * ptm;
; 458  : 
; 459  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$214726[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 11		 jne	 SHORT $LN3@GetMinute

; 460  : 	return ptm ? ptm->tm_min : -1 ;

  00021	8b 45 dc	 mov	 eax, DWORD PTR _ptmTemp$214726[ebp+4]

; 461  : }

  00024	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00027	33 cd		 xor	 ecx, ebp
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN3@GetMinute:
  00032	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00035	33 cd		 xor	 ecx, ebp
  00037	83 c8 ff	 or	 eax, -1
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetDayOfWeek@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDayOfWeek
; Function compile flags: /Ogtp
;	COMDAT ?GetDayOfWeek@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ptmTemp$214754 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDayOfWeek@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetDayOfWeek, COMDAT
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 474  : 	struct tm ttm;
; 475  : 	struct tm * ptm;
; 476  : 
; 477  : 	ptm = GetLocalTm(&ttm);

  00010	51		 push	 ecx
  00011	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$214754[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __localtime64_s
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 12		 jne	 SHORT $LN3@GetDayOfWe

; 478  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00021	8b 45 f0	 mov	 eax, DWORD PTR _ptmTemp$214754[ebp+24]
  00024	40		 inc	 eax

; 479  : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN3@GetDayOfWe:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 cd		 xor	 ecx, ebp
  00038	33 c0		 xor	 eax, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetDayOfWeek@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetDayOfWeek
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0CCrywolfObjInfo@@QAE@XZ			; CCrywolfObjInfo::CCrywolfObjInfo
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfobjinfo.h
;	COMDAT ??0CCrywolfObjInfo@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfObjInfo@@QAE@XZ PROC				; CCrywolfObjInfo::CCrywolfObjInfo, COMDAT
; _this$ = ecx

; 20   : 	CCrywolfObjInfo()

  00000	8b d1		 mov	 edx, ecx
  00002	57		 push	 edi

; 21   : 	{
; 22   : 		this->Reset();

  00003	83 c8 ff	 or	 eax, -1
  00006	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00009	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0000e	f3 ab		 rep stosd
  00010	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 23   : 	}

  00016	8b c2		 mov	 eax, edx
  00018	5f		 pop	 edi
  00019	c3		 ret	 0
??0CCrywolfObjInfo@@QAE@XZ ENDP				; CCrywolfObjInfo::CCrywolfObjInfo
_TEXT	ENDS
PUBLIC	??0CCrywolfStateTimeInfo@@QAE@XZ		; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfstatetimeinfo.h
;	COMDAT ??0CCrywolfStateTimeInfo@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfStateTimeInfo@@QAE@XZ PROC			; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo, COMDAT
; _this$ = ecx

; 15   : 	CCrywolfStateTimeInfo()

  00000	8b c1		 mov	 eax, ecx

; 16   : 	{
; 17   : 		this->Reset();

  00002	83 c9 ff	 or	 ecx, -1
  00005	33 d2		 xor	 edx, edx
  00007	89 10		 mov	 DWORD PTR [eax], edx
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000f	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00012	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00018	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0001e	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00021	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00024	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 18   : 	}

  00027	c3		 ret	 0
??0CCrywolfStateTimeInfo@@QAE@XZ ENDP			; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
_TEXT	ENDS
PUBLIC	??0CCrywolf@@QAE@XZ				; CCrywolf::CCrywolf
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0MapClass@@QAE@XZ:PROC			; MapClass::MapClass
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
;	COMDAT ??0CCrywolf@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolf@@QAE@XZ PROC				; CCrywolf::CCrywolf, COMDAT
; _this$ = ecx

; 33   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	68 00 00 00 00	 push	 OFFSET ??1MapClass@@UAE@XZ ; MapClass::~MapClass
  00007	68 00 00 00 00	 push	 OFFSET ??0MapClass@@QAE@XZ ; MapClass::MapClass
  0000c	8b f1		 mov	 esi, ecx
  0000e	6a 03		 push	 3
  00010	68 48 3d 05 00	 push	 343368			; 00053d48H
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCrywolf@@6B@
  0001f	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00024	83 c8 ff	 or	 eax, -1
  00027	33 d2		 xor	 edx, edx
  00029	8d be f8 b7 0f
	00		 lea	 edi, DWORD PTR [esi+1030136]
  0002f	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00034	f3 ab		 rep stosd
  00036	89 96 f4 b7 0f
	00		 mov	 DWORD PTR [esi+1030132], edx
  0003c	8d be ac bc 0f
	00		 lea	 edi, DWORD PTR [esi+1031340]
  00042	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00047	f3 ab		 rep stosd
  00049	89 96 a8 bc 0f
	00		 mov	 DWORD PTR [esi+1031336], edx
  0004f	8d be 60 c1 0f
	00		 lea	 edi, DWORD PTR [esi+1032544]
  00055	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0005a	f3 ab		 rep stosd
  0005c	89 96 5c c1 0f
	00		 mov	 DWORD PTR [esi+1032540], edx
  00062	8d be 14 c6 0f
	00		 lea	 edi, DWORD PTR [esi+1033748]
  00068	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0006d	f3 ab		 rep stosd
  0006f	89 96 10 c6 0f
	00		 mov	 DWORD PTR [esi+1033744], edx
  00075	8d 8e c4 ca 0f
	00		 lea	 ecx, DWORD PTR [esi+1034948]
  0007b	8d 78 14	 lea	 edi, DWORD PTR [eax+20]
  0007e	8b ff		 npad	 2
$LL33@CCrywolf:
  00080	89 11		 mov	 DWORD PTR [ecx], edx
  00082	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00085	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00088	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0008b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0008e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00091	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00094	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00097	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0009a	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0009d	89 51 28	 mov	 DWORD PTR [ecx+40], edx
  000a0	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000a3	4f		 dec	 edi
  000a4	79 da		 jns	 SHORT $LL33@CCrywolf
  000a6	89 96 38 ce 0f
	00		 mov	 DWORD PTR [esi+1035832], edx
  000ac	89 86 3c ce 0f
	00		 mov	 DWORD PTR [esi+1035836], eax
  000b2	89 86 40 ce 0f
	00		 mov	 DWORD PTR [esi+1035840], eax
  000b8	89 86 44 ce 0f
	00		 mov	 DWORD PTR [esi+1035844], eax
  000be	89 86 48 ce 0f
	00		 mov	 DWORD PTR [esi+1035848], eax
  000c4	89 86 4c ce 0f
	00		 mov	 DWORD PTR [esi+1035852], eax
  000ca	89 86 50 ce 0f
	00		 mov	 DWORD PTR [esi+1035856], eax
  000d0	89 86 54 ce 0f
	00		 mov	 DWORD PTR [esi+1035860], eax
  000d6	89 86 58 ce 0f
	00		 mov	 DWORD PTR [esi+1035864], eax
  000dc	89 96 5c ce 0f
	00		 mov	 DWORD PTR [esi+1035868], edx
  000e2	89 96 60 ce 0f
	00		 mov	 DWORD PTR [esi+1035872], edx
  000e8	89 96 64 ce 0f
	00		 mov	 DWORD PTR [esi+1035876], edx
  000ee	89 86 68 ce 0f
	00		 mov	 DWORD PTR [esi+1035880], eax
  000f4	89 86 6c ce 0f
	00		 mov	 DWORD PTR [esi+1035884], eax
  000fa	89 86 70 ce 0f
	00		 mov	 DWORD PTR [esi+1035888], eax
  00100	89 86 74 ce 0f
	00		 mov	 DWORD PTR [esi+1035892], eax
  00106	89 86 78 ce 0f
	00		 mov	 DWORD PTR [esi+1035896], eax
  0010c	89 86 7c ce 0f
	00		 mov	 DWORD PTR [esi+1035900], eax
  00112	89 86 80 ce 0f
	00		 mov	 DWORD PTR [esi+1035904], eax
  00118	89 86 84 ce 0f
	00		 mov	 DWORD PTR [esi+1035908], eax
  0011e	89 96 88 ce 0f
	00		 mov	 DWORD PTR [esi+1035912], edx
  00124	89 96 8c ce 0f
	00		 mov	 DWORD PTR [esi+1035916], edx
  0012a	89 96 90 ce 0f
	00		 mov	 DWORD PTR [esi+1035920], edx
  00130	89 86 94 ce 0f
	00		 mov	 DWORD PTR [esi+1035924], eax
  00136	89 86 98 ce 0f
	00		 mov	 DWORD PTR [esi+1035928], eax
  0013c	89 86 9c ce 0f
	00		 mov	 DWORD PTR [esi+1035932], eax
  00142	89 86 a0 ce 0f
	00		 mov	 DWORD PTR [esi+1035936], eax
  00148	89 86 a4 ce 0f
	00		 mov	 DWORD PTR [esi+1035940], eax
  0014e	89 86 a8 ce 0f
	00		 mov	 DWORD PTR [esi+1035944], eax
  00154	89 86 ac ce 0f
	00		 mov	 DWORD PTR [esi+1035948], eax
  0015a	89 86 b0 ce 0f
	00		 mov	 DWORD PTR [esi+1035952], eax
  00160	89 96 b4 ce 0f
	00		 mov	 DWORD PTR [esi+1035956], edx
  00166	89 96 b8 ce 0f
	00		 mov	 DWORD PTR [esi+1035960], edx
  0016c	89 96 bc ce 0f
	00		 mov	 DWORD PTR [esi+1035964], edx
  00172	89 86 c0 ce 0f
	00		 mov	 DWORD PTR [esi+1035968], eax
  00178	89 86 c4 ce 0f
	00		 mov	 DWORD PTR [esi+1035972], eax
  0017e	89 86 c8 ce 0f
	00		 mov	 DWORD PTR [esi+1035976], eax
  00184	89 86 cc ce 0f
	00		 mov	 DWORD PTR [esi+1035980], eax
  0018a	89 86 d0 ce 0f
	00		 mov	 DWORD PTR [esi+1035984], eax
  00190	89 86 d4 ce 0f
	00		 mov	 DWORD PTR [esi+1035988], eax
  00196	89 86 d8 ce 0f
	00		 mov	 DWORD PTR [esi+1035992], eax
  0019c	89 86 dc ce 0f
	00		 mov	 DWORD PTR [esi+1035996], eax
  001a2	89 96 e0 ce 0f
	00		 mov	 DWORD PTR [esi+1036000], edx
  001a8	89 96 e4 ce 0f
	00		 mov	 DWORD PTR [esi+1036004], edx
  001ae	89 96 e8 ce 0f
	00		 mov	 DWORD PTR [esi+1036008], edx
  001b4	89 86 ec ce 0f
	00		 mov	 DWORD PTR [esi+1036012], eax
  001ba	89 86 f0 ce 0f
	00		 mov	 DWORD PTR [esi+1036016], eax
  001c0	89 86 f4 ce 0f
	00		 mov	 DWORD PTR [esi+1036020], eax
  001c6	89 86 f8 ce 0f
	00		 mov	 DWORD PTR [esi+1036024], eax
  001cc	89 86 fc ce 0f
	00		 mov	 DWORD PTR [esi+1036028], eax
  001d2	89 86 00 cf 0f
	00		 mov	 DWORD PTR [esi+1036032], eax
  001d8	89 86 04 cf 0f
	00		 mov	 DWORD PTR [esi+1036036], eax
  001de	89 86 08 cf 0f
	00		 mov	 DWORD PTR [esi+1036040], eax
  001e4	89 96 0c cf 0f
	00		 mov	 DWORD PTR [esi+1036044], edx
  001ea	89 96 10 cf 0f
	00		 mov	 DWORD PTR [esi+1036048], edx
  001f0	89 96 14 cf 0f
	00		 mov	 DWORD PTR [esi+1036052], edx
  001f6	89 86 18 cf 0f
	00		 mov	 DWORD PTR [esi+1036056], eax
  001fc	89 86 1c cf 0f
	00		 mov	 DWORD PTR [esi+1036060], eax
  00202	89 86 20 cf 0f
	00		 mov	 DWORD PTR [esi+1036064], eax
  00208	89 86 24 cf 0f
	00		 mov	 DWORD PTR [esi+1036068], eax
  0020e	89 86 28 cf 0f
	00		 mov	 DWORD PTR [esi+1036072], eax
  00214	89 86 2c cf 0f
	00		 mov	 DWORD PTR [esi+1036076], eax
  0021a	89 86 30 cf 0f
	00		 mov	 DWORD PTR [esi+1036080], eax
  00220	89 86 34 cf 0f
	00		 mov	 DWORD PTR [esi+1036084], eax
  00226	89 96 38 cf 0f
	00		 mov	 DWORD PTR [esi+1036088], edx
  0022c	89 96 3c cf 0f
	00		 mov	 DWORD PTR [esi+1036092], edx
  00232	89 96 40 cf 0f
	00		 mov	 DWORD PTR [esi+1036096], edx
  00238	89 86 44 cf 0f
	00		 mov	 DWORD PTR [esi+1036100], eax
  0023e	89 86 48 cf 0f
	00		 mov	 DWORD PTR [esi+1036104], eax
  00244	89 86 4c cf 0f
	00		 mov	 DWORD PTR [esi+1036108], eax
  0024a	89 86 50 cf 0f
	00		 mov	 DWORD PTR [esi+1036112], eax
  00250	89 86 54 cf 0f
	00		 mov	 DWORD PTR [esi+1036116], eax
  00256	89 86 58 cf 0f
	00		 mov	 DWORD PTR [esi+1036120], eax
  0025c	89 86 5c cf 0f
	00		 mov	 DWORD PTR [esi+1036124], eax
  00262	89 86 60 cf 0f
	00		 mov	 DWORD PTR [esi+1036128], eax
  00268	89 96 64 cf 0f
	00		 mov	 DWORD PTR [esi+1036132], edx
  0026e	89 96 68 cf 0f
	00		 mov	 DWORD PTR [esi+1036136], edx

; 34   : 	this->m_bFileDataLoad = FALSE;

  00274	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 35   : 	this->m_bDBDataLoadOK = FALSE;

  00277	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 36   : 	this->m_bDBDataLoading = FALSE;

  0027a	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 37   : 	this->m_iCrywolfState = 0;

  0027d	89 96 ec b7 0f
	00		 mov	 DWORD PTR [esi+1030124], edx

; 38   : 	this->m_iScheduleMode =0;
; 39   : 	this->m_dwCrywolfNotifyMsgStartTick = 0;
; 40   : 	this->m_dwCrywolfStartProcTick = 0;	
; 41   : 	this->m_bTurnUpBoss = FALSE;
; 42   : 	this->m_bChangeAI = FALSE ;	
; 43   : 	this->m_iBossIndex = -1;

  00283	89 86 d4 cf 0f
	00		 mov	 DWORD PTR [esi+1036244], eax
  00289	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0028c	89 96 6c cf 0f
	00		 mov	 DWORD PTR [esi+1036140], edx
  00292	89 96 70 cf 0f
	00		 mov	 DWORD PTR [esi+1036144], edx
  00298	89 96 74 cf 0f
	00		 mov	 DWORD PTR [esi+1036148], edx
  0029e	89 96 78 cf 0f
	00		 mov	 DWORD PTR [esi+1036152], edx

; 44   : 	this->m_iBossGroupNumber = 0;

  002a4	89 96 d8 cf 0f
	00		 mov	 DWORD PTR [esi+1036248], edx

; 45   : 	memset(this->m_iMonsterGroupNumberArray, 0, MAX_CRYWOLF_MONSTER_GROUP);

  002aa	89 96 7c cf 0f
	00		 mov	 DWORD PTR [esi+1036156], edx
  002b0	89 96 80 cf 0f
	00		 mov	 DWORD PTR [esi+1036160], edx
  002b6	89 96 84 cf 0f
	00		 mov	 DWORD PTR [esi+1036164], edx
  002bc	89 96 88 cf 0f
	00		 mov	 DWORD PTR [esi+1036168], edx
  002c2	5f		 pop	 edi
  002c3	89 96 8c cf 0f
	00		 mov	 DWORD PTR [esi+1036172], edx

; 46   : }

  002c9	8b c6		 mov	 eax, esi
  002cb	5e		 pop	 esi
  002cc	c3		 ret	 0
??0CCrywolf@@QAE@XZ ENDP				; CCrywolf::CCrywolf
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCCrywolf@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCrywolf@@UAEPAXI@Z PROC				; CCrywolf::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCrywolf@@UAE@XZ	; CCrywolf::~CCrywolf
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCrywolf@@UAEPAXI@Z ENDP				; CCrywolf::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@ ; `string'
PUBLIC	?SetState_READY@CCrywolf@@QAEXXZ		; CCrywolf::SetState_READY
EXTRN	?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z:PROC ; CCrywolfAltar::SetAllAltarViewState
EXTRN	?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ:PROC ; CCrywolfAltar::SetAllAltarObjectIndex
;	COMDAT ??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> READY', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?SetState_READY@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_READY@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_READY, COMDAT
; _this$ = ecx

; 634  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 635  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 230)));

  00004	68 e6 0c 00 00	 push	 3302			; 00000ce6H
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0000e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00013	50		 push	 eax
  00014	68 00 00 00 00	 push	 OFFSET _UTIL
  00019	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 636  : 	LogAddC(4, "[ Crywolf ] State (%d) -> READY", this->m_iCrywolfState);

  0001e	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@
  0002a	6a 04		 push	 4
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00032	83 c4 14	 add	 esp, 20			; 00000014H

; 637  : 
; 638  : 	this->SetCrywolfState(CRYWOLF_STATE_READY);

  00035	c7 86 ec b7 0f
	00 03 00 00 00	 mov	 DWORD PTR [esi+1030124], 3

; 639  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_READY);

  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00045	89 86 e4 ce 0f
	00		 mov	 DWORD PTR [esi+1036004], eax

; 640  : 	this->SetOccupationState(2);
; 641  : 	this->SetCrywolfCommonNPC(2);

  0004b	6a 02		 push	 2
  0004d	8b ce		 mov	 ecx, esi
  0004f	c7 86 f0 b7 0f
	00 02 00 00 00	 mov	 DWORD PTR [esi+1030128], 2
  00059	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 642  : 	this->SetCrywolfMapAttr(2);

  0005e	6a 02		 push	 2
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 643  : 	this->RemoveCrywolfCommonMonster();

  00067	8b ce		 mov	 ecx, esi
  00069	e8 00 00 00 00	 call	 ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::RemoveCrywolfCommonMonster

; 644  : 	g_CrywolfNPC_Altar.SetAllAltarObjectIndex();

  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00073	e8 00 00 00 00	 call	 ?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ ; CCrywolfAltar::SetAllAltarObjectIndex

; 645  : 	g_CrywolfNPC_Altar.SetAllAltarViewState(0x10000);

  00078	68 00 00 01 00	 push	 65536			; 00010000H
  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00082	e8 00 00 00 00	 call	 ?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::SetAllAltarViewState

; 646  : 
; 647  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  00087	33 ff		 xor	 edi, edi
  00089	39 be cc cf 0f
	00		 cmp	 DWORD PTR [esi+1036236], edi
  0008f	7e 1f		 jle	 SHORT $LN1@SetState_R

; 635  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 230)));

  00091	53		 push	 ebx
  00092	8d 9e 7c cf 0f
	00		 lea	 ebx, DWORD PTR [esi+1036156]
$LL3@SetState_R:

; 648  : 	{
; 649  : 		TMonsterAIGroup::Init(this->m_iMonsterGroupNumberArray[n]);

  00098	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  000a0	47		 inc	 edi
  000a1	83 c4 04	 add	 esp, 4
  000a4	83 c3 04	 add	 ebx, 4
  000a7	3b be cc cf 0f
	00		 cmp	 edi, DWORD PTR [esi+1036236]
  000ad	7c e9		 jl	 SHORT $LL3@SetState_R
  000af	5b		 pop	 ebx
$LN1@SetState_R:

; 650  : 	}
; 651  : 
; 652  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000b6	5f		 pop	 edi
  000b7	89 86 6c cf 0f
	00		 mov	 DWORD PTR [esi+1036140], eax

; 653  : 	this->ResetAllUserMVPScore();

  000bd	8b ce		 mov	 ecx, esi
  000bf	5e		 pop	 esi
  000c0	e9 00 00 00 00	 jmp	 ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ; CCrywolf::ResetAllUserMVPScore
?SetState_READY@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_READY
_TEXT	ENDS
PUBLIC	?ProcState_READY@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_READY
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_READY@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_READY@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_READY, COMDAT
; _this$ = ecx

; 823  : {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b d9		 mov	 ebx, ecx

; 824  : 	this->NotifyCrywolfStatueAndAltarInfo();

  00004	e8 00 00 00 00	 call	 ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo

; 825  : 
; 826  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0000f	ff d7		 call	 edi
  00011	2b 83 6c cf 0f
	00		 sub	 eax, DWORD PTR [ebx+1036140]
  00017	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  0001c	0f 86 b7 00 00
	00		 jbe	 $LN3@ProcState_@3

; 827  : 	{
; 828  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  00022	8b 83 ec b7 0f
	00		 mov	 eax, DWORD PTR [ebx+1030124]
  00028	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0002b	56		 push	 esi
  0002c	8d b4 18 38 ce
	0f 00		 lea	 esi, DWORD PTR [eax+ebx+1035832]
  00033	ff d7		 call	 edi
  00035	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  00038	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  0003b	77 0c		 ja	 SHORT $LN9@ProcState_@3
  0003d	ff d7		 call	 edi
  0003f	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00042	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  00045	2b c8		 sub	 ecx, eax
  00047	79 02		 jns	 SHORT $LN10@ProcState_@3
$LN9@ProcState_@3:
  00049	33 c9		 xor	 ecx, ecx
$LN10@ProcState_@3:
  0004b	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00050	f7 e9		 imul	 ecx
  00052	c1 fa 06	 sar	 edx, 6
  00055	8b ca		 mov	 ecx, edx
  00057	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0005a	03 ca		 add	 ecx, edx
  0005c	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00061	f7 e9		 imul	 ecx
  00063	03 d1		 add	 edx, ecx
  00065	c1 fa 05	 sar	 edx, 5
  00068	8b c2		 mov	 eax, edx
  0006a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006d	03 c2		 add	 eax, edx

; 829  : 
; 830  : 		if ( iTime == 0 )

  0006f	75 41		 jne	 SHORT $LN2@ProcState_@3

; 831  : 		{
; 832  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  00071	8b 8b ec b7 0f
	00		 mov	 ecx, DWORD PTR [ebx+1030124]
  00077	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0007a	8d b4 19 38 ce
	0f 00		 lea	 esi, DWORD PTR [ecx+ebx+1035832]
  00081	ff d7		 call	 edi
  00083	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  00086	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00089	77 0c		 ja	 SHORT $LN18@ProcState_@3
  0008b	ff d7		 call	 edi
  0008d	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00090	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  00093	2b c8		 sub	 ecx, eax
  00095	79 02		 jns	 SHORT $LN19@ProcState_@3
$LN18@ProcState_@3:
  00097	33 c9		 xor	 ecx, ecx
$LN19@ProcState_@3:
  00099	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0009e	f7 e9		 imul	 ecx
  000a0	c1 fa 06	 sar	 edx, 6
  000a3	8b c2		 mov	 eax, edx
  000a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a8	03 c2		 add	 eax, edx

; 833  : 
; 834  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 238)), iTime);

  000aa	50		 push	 eax
  000ab	68 ee 0c 00 00	 push	 3310			; 00000ceeH

; 835  : 		}
; 836  : 		else

  000b0	eb 06		 jmp	 SHORT $LN26@ProcState_@3
$LN2@ProcState_@3:

; 837  : 		{
; 838  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 239)), iTime);

  000b2	50		 push	 eax
  000b3	68 ef 0c 00 00	 push	 3311			; 00000cefH
$LN26@ProcState_@3:
  000b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000bd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000c2	50		 push	 eax
  000c3	68 00 00 00 00	 push	 OFFSET _UTIL
  000c8	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 839  : 		}
; 840  : 
; 841  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  000d0	ff d7		 call	 edi
  000d2	89 83 6c cf 0f
	00		 mov	 DWORD PTR [ebx+1036140], eax
  000d8	5e		 pop	 esi
$LN3@ProcState_@3:

; 842  : 	}
; 843  : }

  000d9	5f		 pop	 edi
  000da	5b		 pop	 ebx
  000db	c3		 ret	 0
?ProcState_READY@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_READY
_TEXT	ENDS
PUBLIC	??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfPersonalRank
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
;	COMDAT ??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@
CONST	SEGMENT
??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@ DB '['
	DB	' Crywolf ][Personal Rank & Exp.] [%s][%s] Score(%d) Rank(%d) '
	DB	'Exp(%d)', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfPersonalRank, COMDAT
; _this$ = ecx

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 1056 : 	PMSG_ANS_CRYWOLF_PERSONAL_RANK pMsg;
; 1057 : 
; 1058 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x07, sizeof(pMsg));

  00013	6a 0c		 push	 12			; 0000000cH
  00015	6a 07		 push	 7
  00017	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001a	68 bd 00 00 00	 push	 189			; 000000bdH
  0001f	50		 push	 eax
  00020	8b d9		 mov	 ebx, ecx
  00022	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1062 : 	{
; 1063 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0
  00033	be b0 36 00 00	 mov	 esi, 14000		; 000036b0H
  00038	bf 00 a7 40 09	 mov	 edi, 155232000		; 0940a700H
  0003d	8d 49 00	 npad	 3
$LL4@NotifyCryw@4:
  00040	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  00045	0f 85 b4 00 00
	00		 jne	 $LN3@NotifyCryw@4
  0004b	66 83 7c 07 68
	01		 cmp	 WORD PTR [edi+eax+104], 1
  00051	0f 85 a8 00 00
	00		 jne	 $LN3@NotifyCryw@4
  00057	80 bc 07 49 01
	00 00 22	 cmp	 BYTE PTR [edi+eax+329], 34 ; 00000022H
  0005f	0f 85 9a 00 00
	00		 jne	 $LN3@NotifyCryw@4

; 1064 : 		{
; 1065 : 			pMsg.btRank = this->CalcGettingRank(i);

  00065	56		 push	 esi
  00066	8b cb		 mov	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ?CalcGettingRank@CCrywolf@@QAEHH@Z ; CCrywolf::CalcGettingRank

; 1066 : 			pMsg.iGettingExp = this->CalcGettingRewardExp(i, pMsg.btRank);

  0006d	0f b6 c8	 movzx	 ecx, al
  00070	51		 push	 ecx
  00071	56		 push	 esi
  00072	8b cb		 mov	 ecx, ebx
  00074	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+4], al
  00077	e8 00 00 00 00	 call	 ?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z ; CCrywolf::CalcGettingRewardExp

; 1067 : 
; 1068 : 			this->GiveRewardExp(i, pMsg.iGettingExp);

  0007c	50		 push	 eax
  0007d	56		 push	 esi
  0007e	8b cb		 mov	 ecx, ebx
  00080	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00083	e8 00 00 00 00	 call	 ?GiveRewardExp@CCrywolf@@QAEXHH@Z ; CCrywolf::GiveRewardExp

; 1069 : 
; 1070 : 			MsgOutput(i, lMsg.Get(MSGGET(12, 244)), pMsg.btRank);

  00088	0f b6 55 f4	 movzx	 edx, BYTE PTR _pMsg$[ebp+4]
  0008c	52		 push	 edx
  0008d	68 f4 0c 00 00	 push	 3316			; 00000cf4H
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00097	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0009c	50		 push	 eax
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 1071 : 			MsgOutput(i, lMsg.Get(MSGGET(12, 245)), pMsg.iGettingExp);

  000a3	8b 45 f8	 mov	 eax, DWORD PTR _pMsg$[ebp+8]
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	50		 push	 eax
  000aa	68 f5 0c 00 00	 push	 3317			; 00000cf5H
  000af	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000b4	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000b9	50		 push	 eax
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 1072 : 
; 1073 : 			LogAddTD("[ Crywolf ][Personal Rank & Exp.] [%s][%s] Score(%d) Rank(%d) Exp(%d)", gObj[i].AccountID, gObj[i].Name, gObj[i].m_iCrywolfMVPScore, pMsg.btRank, pMsg.iGettingExp);

  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _pMsg$[ebp+8]
  000c3	0f b6 55 f4	 movzx	 edx, BYTE PTR _pMsg$[ebp+4]
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cc	51		 push	 ecx
  000cd	8b 8c 07 c0 1f
	00 00		 mov	 ecx, DWORD PTR [edi+eax+8128]
  000d4	52		 push	 edx
  000d5	51		 push	 ecx
  000d6	8d 54 07 77	 lea	 edx, DWORD PTR [edi+eax+119]
  000da	52		 push	 edx
  000db	8d 44 07 6c	 lea	 eax, DWORD PTR [edi+eax+108]
  000df	50		 push	 eax
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1074 : 			DataSend(i, (LPBYTE)&pMsg, sizeof(pMsg));

  000eb	6a 0c		 push	 12			; 0000000cH
  000ed	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000f0	51		 push	 ecx
  000f1	56		 push	 esi
  000f2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fc	83 c4 30	 add	 esp, 48			; 00000030H
$LN3@NotifyCryw@4:

; 1059 : 	pMsg.btRank = 0;
; 1060 : 
; 1061 : 	for ( int i=OBJ_STARTUSERINDZT;i<OBJMAX;i++)

  000ff	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  00105	46		 inc	 esi
  00106	81 ff 80 d7 e9
	09		 cmp	 edi, 166320000		; 09e9d780H
  0010c	0f 8c 2e ff ff
	ff		 jl	 $LL4@NotifyCryw@4

; 1075 : 		}
; 1076 : 	}
; 1077 : }

  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	33 cd		 xor	 ecx, ebp
  00119	5b		 pop	 ebx
  0011a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfPersonalRank
_TEXT	ENDS
PUBLIC	??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@ ; `string'
PUBLIC	??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ ; `string'
PUBLIC	??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ ; `string'
PUBLIC	?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z	; CCrywolf::CrywolfMonsterDieProc
;	COMDAT ??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [DarkElf Dead] by [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
CONST	SEGMENT
??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [Balgars Dead] by Unknown User', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
CONST	SEGMENT
??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [Balgars Dead] by [%s][%s]', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bExistKiller$ = -4					; size = 4
_iMonIndex$ = 8						; size = 4
_iKillerIndex$ = 12					; size = 4
?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::CrywolfMonsterDieProc, COMDAT
; _this$ = ecx

; 1210 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1211 : 	LPOBJ lpMonObj = &gObj[iMonIndex];

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	53		 push	 ebx

; 1212 : 	LPOBJ lpKillerObj = &gObj[iKillerIndex];

  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _iKillerIndex$[ebp]
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _iMonIndex$[ebp]
  00014	8b f3		 mov	 esi, ebx
  00016	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0001c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 1213 : 	BOOL bExistKiller = gObjIsConnected(iKillerIndex);

  00022	53		 push	 ebx
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00026	03 f8		 add	 edi, eax
  00028	03 f0		 add	 esi, eax
  0002a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002f	83 c4 04	 add	 esp, 4

; 1214 : 
; 1215 : 	if ( g_Crywolf.GetCrywolfState() == CRYWOLF_STATE_START )

  00032	83 3d ec b7 0f
	00 04		 cmp	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1030124, 4
  00039	89 45 fc	 mov	 DWORD PTR _bExistKiller$[ebp], eax
  0003c	0f 85 08 01 00
	00		 jne	 $LN1@CrywolfMon

; 1216 : 	{
; 1217 : 		if ( lpMonObj->MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE )

  00042	80 bf 49 01 00
	00 22		 cmp	 BYTE PTR [edi+329], 34	; 00000022H
  00049	0f 85 fb 00 00
	00		 jne	 $LN1@CrywolfMon

; 1218 : 		{
; 1219 : 			if ( lpMonObj->m_iCurrentAI != 0 )

  0004f	83 bf 78 1c 00
	00 00		 cmp	 DWORD PTR [edi+7288], 0
  00056	0f 84 ee 00 00
	00		 je	 $LN1@CrywolfMon

; 1220 : 			{
; 1221 : 				if ( lpMonObj->Class == 349 )

  0005c	b9 5d 01 00 00	 mov	 ecx, 349		; 0000015dH
  00061	66 39 8f b8 00
	00 00		 cmp	 WORD PTR [edi+184], cx
  00068	75 61		 jne	 SHORT $LN14@CrywolfMon

; 1222 : 				{
; 1223 : 					if ( bExistKiller )
; 1224 : 					{
; 1225 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 247)), lpKillerObj->Name);

  0006a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0006f	85 c0		 test	 eax, eax
  00071	74 33		 je	 SHORT $LN5@CrywolfMon
  00073	8d 5e 77	 lea	 ebx, DWORD PTR [esi+119]
  00076	53		 push	 ebx
  00077	68 f7 0c 00 00	 push	 3319			; 00000cf7H
  0007c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00081	50		 push	 eax
  00082	6a 02		 push	 2
  00084	68 00 00 00 00	 push	 OFFSET _UTIL
  00089	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 1226 : 
; 1227 : 						LogAddTD("[ Crywolf ][MVP] [Balgars Dead] by [%s][%s]",	lpKillerObj->AccountID, lpKillerObj->Name);

  0008e	53		 push	 ebx
  0008f	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00092	52		 push	 edx
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1228 : 					}
; 1229 : 					else

  0009e	8b 5d 0c	 mov	 ebx, DWORD PTR _iKillerIndex$[ebp]
  000a1	83 c4 1c	 add	 esp, 28			; 0000001cH
  000a4	eb 25		 jmp	 SHORT $LN14@CrywolfMon
$LN5@CrywolfMon:

; 1230 : 					{
; 1231 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 248)));

  000a6	68 f8 0c 00 00	 push	 3320			; 00000cf8H
  000ab	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000b0	50		 push	 eax
  000b1	6a 02		 push	 2
  000b3	68 00 00 00 00	 push	 OFFSET _UTIL
  000b8	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 1232 : 
; 1233 : 						LogAddTD("[ Crywolf ][MVP] [Balgars Dead] by Unknown User");

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@CrywolfMon:

; 1234 : 					}
; 1235 : 				}
; 1236 : 
; 1237 : 				if ( lpMonObj->Class == 340 )

  000cb	b8 54 01 00 00	 mov	 eax, 340		; 00000154H
  000d0	66 39 87 b8 00
	00 00		 cmp	 WORD PTR [edi+184], ax
  000d7	75 43		 jne	 SHORT $LN2@CrywolfMon

; 1238 : 				{
; 1239 : 					if ( bExistKiller )

  000d9	83 7d fc 00	 cmp	 DWORD PTR _bExistKiller$[ebp], 0
  000dd	74 3d		 je	 SHORT $LN2@CrywolfMon

; 1240 : 					{
; 1241 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 249)), lpMonObj->m_iGroupNumber, lpKillerObj->Name);

  000df	8b 8f 84 1c 00
	00		 mov	 ecx, DWORD PTR [edi+7300]
  000e5	8d 5e 77	 lea	 ebx, DWORD PTR [esi+119]
  000e8	53		 push	 ebx
  000e9	51		 push	 ecx
  000ea	68 f9 0c 00 00	 push	 3321			; 00000cf9H
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000f4	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000f9	50		 push	 eax
  000fa	6a 02		 push	 2
  000fc	68 00 00 00 00	 push	 OFFSET _UTIL
  00101	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 1242 : 
; 1243 : 						LogAddTD("[ Crywolf ][MVP] [DarkElf Dead] by [%s][%s]",	lpKillerObj->AccountID, lpKillerObj->Name);

  00106	53		 push	 ebx
  00107	83 c6 6c	 add	 esi, 108		; 0000006cH
  0010a	56		 push	 esi
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00116	8b 5d 0c	 mov	 ebx, DWORD PTR _iKillerIndex$[ebp]
  00119	83 c4 20	 add	 esp, 32			; 00000020H
$LN2@CrywolfMon:

; 1244 : 					}
; 1245 : 				}
; 1246 : 		
; 1247 : 				int iScore = this->CalcGettingScore(iKillerIndex, iMonIndex, 100);

  0011c	8b 55 08	 mov	 edx, DWORD PTR _iMonIndex$[ebp]
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	6a 64		 push	 100			; 00000064H
  00124	52		 push	 edx
  00125	53		 push	 ebx
  00126	e8 00 00 00 00	 call	 ?CalcGettingScore@CCrywolf@@QAEHHHH@Z ; CCrywolf::CalcGettingScore

; 1248 : 
; 1249 : 				if ( iScore != -1 )

  0012b	83 f8 ff	 cmp	 eax, -1
  0012e	74 1a		 je	 SHORT $LN1@CrywolfMon

; 1250 : 				{
; 1251 : 					MsgOutput(iKillerIndex, lMsg.Get(MSGGET(12, 250)), iScore);

  00130	50		 push	 eax
  00131	68 fa 0c 00 00	 push	 3322			; 00000cfaH
  00136	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0013b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00140	50		 push	 eax
  00141	53		 push	 ebx
  00142	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CrywolfMon:
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx

; 1252 : 				}
; 1253 : 			}
; 1254 : 		}
; 1255 : 	}
; 1256 : }

  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 08 00	 ret	 8
?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::CrywolfMonsterDieProc
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator*
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
; Function compile flags: /Ogtp
;	COMDAT ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00008	75 40		 jne	 SHORT $LN3@operator@5

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  00011	75 1a		 jne	 SHORT $LN34@operator@5

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00019	75 0f		 jne	 SHORT $LN17@operator@5
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator@5:
  00020	8b ca		 mov	 ecx, edx
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00028	74 f6		 je	 SHORT $LL18@operator@5
$LN17@operator@5:
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0002c	c3		 ret	 0
$LN34@operator@5:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00030	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00034	75 12		 jne	 SHORT $LN1@operator@5
$LL2@operator@5:
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0003b	75 0b		 jne	 SHORT $LN1@operator@5

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00042	80 7a 11 00	 cmp	 BYTE PTR [edx+17], 0
  00046	74 ee		 je	 SHORT $LL2@operator@5
$LN1@operator@5:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00048	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator@5:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0004a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0c		 jne	 SHORT $LN4@Lrotate

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Lrotate:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0b		 jne	 SHORT $LN2@Lrotate

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	56		 push	 esi

; 103  : 	_Left = _Move(_Right);

  00009	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	88 10		 mov	 BYTE PTR [eax], dl

; 104  : 	_Right = _Move(_Tmp);

  00010	88 0e		 mov	 BYTE PTR [esi], cl
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T215184 = -12						; size = 12
$T215189 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 cc cc cc
	0c		 cmp	 ecx, 214748364		; 0cccccccH
  00015	77 14		 ja	 SHORT $LN1@Allocate
  00017	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T215189[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T215184[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T215189[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T215184[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T215184[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z ; std::allocator<OBJECTSTRUCT *>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z PROC ; std::allocator<OBJECTSTRUCT *>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::destroy
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator--
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z PROC ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ENDP ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	return( CTime( ::_time64( NULL ) ) );

  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 __time64
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	89 01		 mov	 DWORD PTR [ecx], eax
  0000f	83 c4 04	 add	 esp, 4
  00012	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00015	8b c1		 mov	 eax, ecx

; 144  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckScheduleTime
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfstatetimeinfo.h
;	COMDAT ?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
_iDayOfWeek$ = -84					; size = 4
_tCheckTime$202122 = -80				; size = 8
_iDay$ = -76						; size = 4
_iMinute$ = -72						; size = 4
_iHour$ = -68						; size = 4
_tTimeRange$ = -64					; size = 8
tv869 = -60						; size = 4
_iYear$ = -56						; size = 4
_iMonth$ = -52						; size = 4
_tCurrentTime$ = -48					; size = 8
_atm$215952 = -40					; size = 36
_atm$215835 = -40					; size = 36
_ptmTemp$215606 = -40					; size = 36
_ptmTemp$215556 = -40					; size = 36
_ptmTemp$215506 = -40					; size = 36
_ptmTemp$215456 = -40					; size = 36
_ptmTemp$215406 = -40					; size = 36
_ptmTemp$215355 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ PROC	; CCrywolfStateTimeInfo::CheckScheduleTime, COMDAT
; _this$ = ecx

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 57   : 		CTime tCurrentTime = CTime::GetTickCount();

  00013	33 ff		 xor	 edi, edi
  00015	57		 push	 edi
  00016	8b d9		 mov	 ebx, ecx
  00018	e8 00 00 00 00	 call	 __time64
  0001d	89 45 d0	 mov	 DWORD PTR _tCurrentTime$[ebp], eax

; 58   : 
; 59   : 		int iYear = tCurrentTime.GetYear();

  00020	8d 45 d0	 lea	 eax, DWORD PTR _tCurrentTime$[ebp]
  00023	50		 push	 eax
  00024	8d 4d d8	 lea	 ecx, DWORD PTR _ptmTemp$215355[ebp]
  00027	51		 push	 ecx
  00028	89 55 d4	 mov	 DWORD PTR _tCurrentTime$[ebp+4], edx
  0002b	e8 00 00 00 00	 call	 __localtime64_s
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	85 c0		 test	 eax, eax
  00035	75 0e		 jne	 SHORT $LN34@CheckSched
  00037	8b 55 ec	 mov	 edx, DWORD PTR _ptmTemp$215355[ebp+20]
  0003a	81 c2 6c 07 00
	00		 add	 edx, 1900		; 0000076cH
  00040	89 55 c8	 mov	 DWORD PTR _iYear$[ebp], edx
  00043	eb 03		 jmp	 SHORT $LN35@CheckSched
$LN34@CheckSched:
  00045	89 7d c8	 mov	 DWORD PTR _iYear$[ebp], edi
$LN35@CheckSched:

; 60   : 		int iMonth = tCurrentTime.GetMonth();

  00048	8d 45 d0	 lea	 eax, DWORD PTR _tCurrentTime$[ebp]
  0004b	50		 push	 eax
  0004c	8d 4d d8	 lea	 ecx, DWORD PTR _ptmTemp$215406[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 __localtime64_s
  00055	83 c4 08	 add	 esp, 8
  00058	85 c0		 test	 eax, eax
  0005a	75 09		 jne	 SHORT $LN54@CheckSched
  0005c	8b 55 e8	 mov	 edx, DWORD PTR _ptmTemp$215406[ebp+16]
  0005f	42		 inc	 edx
  00060	89 55 cc	 mov	 DWORD PTR _iMonth$[ebp], edx
  00063	eb 03		 jmp	 SHORT $LN55@CheckSched
$LN54@CheckSched:
  00065	89 7d cc	 mov	 DWORD PTR _iMonth$[ebp], edi
$LN55@CheckSched:

; 61   : 		int iDay = tCurrentTime.GetDay();

  00068	8d 45 d0	 lea	 eax, DWORD PTR _tCurrentTime$[ebp]
  0006b	50		 push	 eax
  0006c	8d 4d d8	 lea	 ecx, DWORD PTR _ptmTemp$215456[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 __localtime64_s
  00075	f7 d8		 neg	 eax
  00077	1b f6		 sbb	 esi, esi

; 62   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();

  00079	8d 55 d0	 lea	 edx, DWORD PTR _tCurrentTime$[ebp]
  0007c	f7 d6		 not	 esi
  0007e	23 75 e4	 and	 esi, DWORD PTR _ptmTemp$215456[ebp+12]
  00081	52		 push	 edx
  00082	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$215506[ebp]
  00085	50		 push	 eax
  00086	89 75 b4	 mov	 DWORD PTR _iDay$[ebp], esi
  00089	e8 00 00 00 00	 call	 __localtime64_s
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
  00091	85 c0		 test	 eax, eax
  00093	75 09		 jne	 SHORT $LN92@CheckSched
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _ptmTemp$215506[ebp+24]
  00098	41		 inc	 ecx
  00099	89 4d ac	 mov	 DWORD PTR _iDayOfWeek$[ebp], ecx
  0009c	eb 03		 jmp	 SHORT $LN93@CheckSched
$LN92@CheckSched:
  0009e	89 7d ac	 mov	 DWORD PTR _iDayOfWeek$[ebp], edi
$LN93@CheckSched:

; 63   : 		int iHour = tCurrentTime.GetHour();

  000a1	8d 55 d0	 lea	 edx, DWORD PTR _tCurrentTime$[ebp]
  000a4	52		 push	 edx
  000a5	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$215556[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 __localtime64_s
  000ae	83 c4 08	 add	 esp, 8
  000b1	85 c0		 test	 eax, eax
  000b3	75 08		 jne	 SHORT $LN111@CheckSched
  000b5	8b 4d e0	 mov	 ecx, DWORD PTR _ptmTemp$215556[ebp+8]
  000b8	89 4d bc	 mov	 DWORD PTR _iHour$[ebp], ecx
  000bb	eb 07		 jmp	 SHORT $LN112@CheckSched
$LN111@CheckSched:
  000bd	c7 45 bc ff ff
	ff ff		 mov	 DWORD PTR _iHour$[ebp], -1
$LN112@CheckSched:

; 64   : 		int iMinute = tCurrentTime.GetMinute();

  000c4	8d 55 d0	 lea	 edx, DWORD PTR _tCurrentTime$[ebp]
  000c7	52		 push	 edx
  000c8	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$215606[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 __localtime64_s
  000d1	83 c4 08	 add	 esp, 8
  000d4	85 c0		 test	 eax, eax
  000d6	75 08		 jne	 SHORT $LN130@CheckSched
  000d8	8b 4d dc	 mov	 ecx, DWORD PTR _ptmTemp$215606[ebp+4]
  000db	89 4d b8	 mov	 DWORD PTR _iMinute$[ebp], ecx
  000de	eb 07		 jmp	 SHORT $LN131@CheckSched
$LN130@CheckSched:
  000e0	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR _iMinute$[ebp], -1
$LN131@CheckSched:

; 65   : 
; 66   : 		int iCrywolfState = -1;
; 67   : 
; 68   : 		CTimeSpan tTimeRange(0,0,this->m_iContinuanceTime,0);

  000e7	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  000ea	99		 cdq
  000eb	8b c8		 mov	 ecx, eax
  000ed	8b fa		 mov	 edi, edx
  000ef	0f a4 cf 04	 shld	 edi, ecx, 4
  000f3	c1 e1 04	 shl	 ecx, 4
  000f6	2b c8		 sub	 ecx, eax
  000f8	1b fa		 sbb	 edi, edx
  000fa	8b c7		 mov	 eax, edi
  000fc	8b f9		 mov	 edi, ecx

; 69   : 
; 70   : 		if(m_iMonth != -1 && m_iMonth != iMonth)

  000fe	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00101	0f a4 f8 02	 shld	 eax, edi, 2
  00105	03 ff		 add	 edi, edi
  00107	03 ff		 add	 edi, edi
  00109	89 45 c4	 mov	 DWORD PTR _tTimeRange$[ebp+4], eax
  0010c	89 7d c0	 mov	 DWORD PTR _tTimeRange$[ebp], edi
  0010f	83 f9 ff	 cmp	 ecx, -1
  00112	74 23		 je	 SHORT $LN465@CheckSched
  00114	3b 4d cc	 cmp	 ecx, DWORD PTR _iMonth$[ebp]
  00117	74 1e		 je	 SHORT $LN465@CheckSched

; 71   : 		{
; 72   : 			CTime tCheckTime(iYear,m_iMonth,0,0,0,0,-1);

  00119	81 7d c8 6c 07
	00 00		 cmp	 DWORD PTR _iYear$[ebp], 1900 ; 0000076cH
  00120	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00125	7d 05		 jge	 SHORT $LN214@CheckSched
$LN204@CheckSched:
  00127	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN468@CheckSched:
$LN214@CheckSched:
  0012c	49		 dec	 ecx
  0012d	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00130	76 f5		 jbe	 SHORT $LN204@CheckSched
  00132	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN469@CheckSched:
$LN465@CheckSched:

; 73   : 
; 74   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))
; 75   : 			{
; 76   : 				return FALSE;
; 77   : 			}
; 78   : 		}
; 79   : 
; 80   : 		if(m_iDay != -1 && m_iDay != iDay)

  00137	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0013a	83 f8 ff	 cmp	 eax, -1
  0013d	0f 84 c0 00 00
	00		 je	 $LN9@CheckSched
  00143	3b c6		 cmp	 eax, esi
  00145	0f 84 b8 00 00
	00		 je	 $LN9@CheckSched

; 81   : 		{
; 82   : 			CTime tCheckTime(iYear,(m_iMonth == -1 ? iMonth : m_iMonth),m_iDay,0,0,0,-1);

  0014b	83 f9 ff	 cmp	 ecx, -1
  0014e	75 03		 jne	 SHORT $LN16@CheckSched
  00150	8b 4d cc	 mov	 ecx, DWORD PTR _iMonth$[ebp]
$LN16@CheckSched:
  00153	8b 75 c8	 mov	 esi, DWORD PTR _iYear$[ebp]
  00156	81 fe 6c 07 00
	00		 cmp	 esi, 1900		; 0000076cH
  0015c	7d 0a		 jge	 SHORT $LN307@CheckSched
  0015e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00163	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN470@CheckSched:
$LN307@CheckSched:
  00168	49		 dec	 ecx
  00169	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  0016c	76 0a		 jbe	 SHORT $LN297@CheckSched
  0016e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00173	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN471@CheckSched:
$LN297@CheckSched:
  00178	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  0017b	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0017e	76 0a		 jbe	 SHORT $LN287@CheckSched
  00180	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00185	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN472@CheckSched:
$LN287@CheckSched:
  0018a	33 d2		 xor	 edx, edx
  0018c	89 45 e4	 mov	 DWORD PTR _atm$215835[ebp+12], eax
  0018f	8d 45 d8	 lea	 eax, DWORD PTR _atm$215835[ebp]
  00192	81 c6 94 f8 ff
	ff		 add	 esi, -1900		; fffff894H
  00198	50		 push	 eax
  00199	89 55 d8	 mov	 DWORD PTR _atm$215835[ebp], edx
  0019c	89 55 dc	 mov	 DWORD PTR _atm$215835[ebp+4], edx
  0019f	89 55 e0	 mov	 DWORD PTR _atm$215835[ebp+8], edx
  001a2	89 4d e8	 mov	 DWORD PTR _atm$215835[ebp+16], ecx
  001a5	89 75 ec	 mov	 DWORD PTR _atm$215835[ebp+20], esi
  001a8	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _atm$215835[ebp+32], -1
  001af	e8 00 00 00 00	 call	 __mktime64
  001b4	8b c8		 mov	 ecx, eax
  001b6	23 ca		 and	 ecx, edx
  001b8	83 c4 04	 add	 esp, 4
  001bb	83 f9 ff	 cmp	 ecx, -1
  001be	75 0a		 jne	 SHORT $LN242@CheckSched
  001c0	68 57 00 07 80	 push	 -2147024809		; 80070057H
  001c5	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN473@CheckSched:
$LN242@CheckSched:

; 83   : 			
; 84   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  001ca	8b 4d d4	 mov	 ecx, DWORD PTR _tCurrentTime$[ebp+4]
  001cd	3b ca		 cmp	 ecx, edx
  001cf	7c 19		 jl	 SHORT $LN458@CheckSched
  001d1	8b 7d d0	 mov	 edi, DWORD PTR _tCurrentTime$[ebp]
  001d4	7f 04		 jg	 SHORT $LN457@CheckSched
  001d6	3b f8		 cmp	 edi, eax
  001d8	72 10		 jb	 SHORT $LN458@CheckSched
$LN457@CheckSched:
  001da	03 45 c0	 add	 eax, DWORD PTR _tTimeRange$[ebp]
  001dd	13 55 c4	 adc	 edx, DWORD PTR _tTimeRange$[ebp+4]
  001e0	3b ca		 cmp	 ecx, edx
  001e2	7c 19		 jl	 SHORT $LN463@CheckSched
  001e4	7f 04		 jg	 SHORT $LN458@CheckSched
  001e6	3b f8		 cmp	 edi, eax
  001e8	76 13		 jbe	 SHORT $LN463@CheckSched
$LN458@CheckSched:
  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi

; 85   : 			{
; 86   : 				return FALSE;

  001ec	33 c0		 xor	 eax, eax
  001ee	5b		 pop	 ebx

; 110  : 			}
; 111  : 		}
; 112  : 
; 113  : 		return TRUE;
; 114  : 	}

  001ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f2	33 cd		 xor	 ecx, ebp
  001f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f9	8b e5		 mov	 esp, ebp
  001fb	5d		 pop	 ebp
  001fc	c3		 ret	 0
$LN463@CheckSched:

; 83   : 			
; 84   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  001fd	8b 7d c0	 mov	 edi, DWORD PTR _tTimeRange$[ebp]
  00200	8b 75 b4	 mov	 esi, DWORD PTR _iDay$[ebp]
$LN9@CheckSched:

; 87   : 			}
; 88   : 		}
; 89   : 
; 90   : 		if(m_iDayOfWeek != -1 && m_iDayOfWeek != iDayOfWeek)

  00203	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00206	83 f8 ff	 cmp	 eax, -1
  00209	74 05		 je	 SHORT $LN7@CheckSched
  0020b	3b 45 ac	 cmp	 eax, DWORD PTR _iDayOfWeek$[ebp]

; 91   : 			return FALSE;

  0020e	75 da		 jne	 SHORT $LN458@CheckSched
$LN7@CheckSched:

; 92   : 
; 93   : 		if(m_iHour != -1 && m_iHour != iHour)

  00210	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00213	83 fa ff	 cmp	 edx, -1
  00216	0f 84 d9 00 00
	00		 je	 $LN466@CheckSched
  0021c	3b 55 bc	 cmp	 edx, DWORD PTR _iHour$[ebp]
  0021f	0f 84 d0 00 00
	00		 je	 $LN466@CheckSched

; 94   : 		{
; 95   : 			CTime tCheckTime(iYear,(m_iMonth == -1 ? iMonth : m_iMonth),(m_iDay == -1 ? iDay : m_iDay),m_iHour,0,0,-1);

  00225	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00228	8b ce		 mov	 ecx, esi
  0022a	83 f8 ff	 cmp	 eax, -1
  0022d	74 02		 je	 SHORT $LN19@CheckSched
  0022f	8b c8		 mov	 ecx, eax
$LN19@CheckSched:
  00231	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00234	83 f8 ff	 cmp	 eax, -1
  00237	75 03		 jne	 SHORT $LN20@CheckSched
  00239	8b 45 cc	 mov	 eax, DWORD PTR _iMonth$[ebp]
$LN20@CheckSched:
  0023c	8b 7d c8	 mov	 edi, DWORD PTR _iYear$[ebp]
  0023f	81 ff 6c 07 00
	00		 cmp	 edi, 1900		; 0000076cH
  00245	7d 0a		 jge	 SHORT $LN400@CheckSched
  00247	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0024c	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN474@CheckSched:
$LN400@CheckSched:
  00251	48		 dec	 eax
  00252	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00255	76 0a		 jbe	 SHORT $LN390@CheckSched
  00257	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0025c	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN475@CheckSched:
$LN390@CheckSched:
  00261	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  00264	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  00267	76 0a		 jbe	 SHORT $LN380@CheckSched
  00269	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0026e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN476@CheckSched:
$LN380@CheckSched:
  00273	83 fa 17	 cmp	 edx, 23			; 00000017H
  00276	76 0a		 jbe	 SHORT $LN370@CheckSched
  00278	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0027d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN477@CheckSched:
$LN370@CheckSched:
  00282	89 55 e0	 mov	 DWORD PTR _atm$215952[ebp+8], edx
  00285	8d 55 d8	 lea	 edx, DWORD PTR _atm$215952[ebp]
  00288	33 f6		 xor	 esi, esi
  0028a	81 c7 94 f8 ff
	ff		 add	 edi, -1900		; fffff894H
  00290	52		 push	 edx
  00291	89 75 d8	 mov	 DWORD PTR _atm$215952[ebp], esi
  00294	89 75 dc	 mov	 DWORD PTR _atm$215952[ebp+4], esi
  00297	89 4d e4	 mov	 DWORD PTR _atm$215952[ebp+12], ecx
  0029a	89 45 e8	 mov	 DWORD PTR _atm$215952[ebp+16], eax
  0029d	89 7d ec	 mov	 DWORD PTR _atm$215952[ebp+20], edi
  002a0	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _atm$215952[ebp+32], -1
  002a7	e8 00 00 00 00	 call	 __mktime64
  002ac	8b c8		 mov	 ecx, eax
  002ae	23 ca		 and	 ecx, edx
  002b0	83 c4 04	 add	 esp, 4
  002b3	83 f9 ff	 cmp	 ecx, -1
  002b6	75 0a		 jne	 SHORT $LN335@CheckSched
  002b8	68 57 00 07 80	 push	 -2147024809		; 80070057H
  002bd	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN478@CheckSched:
$LN335@CheckSched:

; 96   : 
; 97   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  002c2	8b 4d d4	 mov	 ecx, DWORD PTR _tCurrentTime$[ebp+4]
  002c5	3b ca		 cmp	 ecx, edx
  002c7	0f 8c 1d ff ff
	ff		 jl	 $LN458@CheckSched
  002cd	8b 7d d0	 mov	 edi, DWORD PTR _tCurrentTime$[ebp]
  002d0	7f 08		 jg	 SHORT $LN459@CheckSched
  002d2	3b f8		 cmp	 edi, eax
  002d4	0f 82 10 ff ff
	ff		 jb	 $LN458@CheckSched
$LN459@CheckSched:
  002da	03 45 c0	 add	 eax, DWORD PTR _tTimeRange$[ebp]
  002dd	13 55 c4	 adc	 edx, DWORD PTR _tTimeRange$[ebp+4]
  002e0	3b ca		 cmp	 ecx, edx
  002e2	7c 0e		 jl	 SHORT $LN464@CheckSched
  002e4	0f 8f 00 ff ff
	ff		 jg	 $LN458@CheckSched
  002ea	3b f8		 cmp	 edi, eax

; 98   : 			{
; 99   : 				return FALSE;

  002ec	0f 87 f8 fe ff
	ff		 ja	 $LN458@CheckSched
$LN464@CheckSched:

; 96   : 
; 97   : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  002f2	8b 7d c0	 mov	 edi, DWORD PTR _tTimeRange$[ebp]
$LN466@CheckSched:

; 100  : 			}
; 101  : 		}
; 102  : 
; 103  : 		if(m_iMinute != -1 && m_iMinute != iMinute)

  002f5	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  002f8	83 fa ff	 cmp	 edx, -1
  002fb	74 71		 je	 SHORT $LN2@CheckSched
  002fd	3b 55 b8	 cmp	 edx, DWORD PTR _iMinute$[ebp]
  00300	74 6c		 je	 SHORT $LN2@CheckSched

; 104  : 		{
; 105  : 			CTime tCheckTime(iYear,(m_iMonth == -1 ? iMonth : m_iMonth),(m_iDay == -1 ? iDay : m_iDay),(m_iHour == -1 ? iHour : m_iHour),m_iMinute,0,-1);

  00302	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00305	8b 75 bc	 mov	 esi, DWORD PTR _iHour$[ebp]
  00308	83 f8 ff	 cmp	 eax, -1
  0030b	74 02		 je	 SHORT $LN23@CheckSched
  0030d	8b f0		 mov	 esi, eax
$LN23@CheckSched:
  0030f	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00312	83 f9 ff	 cmp	 ecx, -1
  00315	75 03		 jne	 SHORT $LN24@CheckSched
  00317	8b 4d b4	 mov	 ecx, DWORD PTR _iDay$[ebp]
$LN24@CheckSched:
  0031a	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0031d	83 f8 ff	 cmp	 eax, -1
  00320	75 03		 jne	 SHORT $LN26@CheckSched
  00322	8b 45 cc	 mov	 eax, DWORD PTR _iMonth$[ebp]
$LN26@CheckSched:
  00325	6a ff		 push	 -1
  00327	6a 00		 push	 0
  00329	52		 push	 edx
  0032a	8b 55 c8	 mov	 edx, DWORD PTR _iYear$[ebp]
  0032d	56		 push	 esi
  0032e	51		 push	 ecx
  0032f	50		 push	 eax
  00330	52		 push	 edx
  00331	8d 4d b0	 lea	 ecx, DWORD PTR _tCheckTime$202122[ebp]
  00334	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 106  : 
; 107  : 			if(tCurrentTime < tCheckTime || tCurrentTime > (tCheckTime+tTimeRange))

  00339	8b 55 d4	 mov	 edx, DWORD PTR _tCurrentTime$[ebp+4]
  0033c	8b 45 b4	 mov	 eax, DWORD PTR _tCheckTime$202122[ebp+4]
  0033f	3b d0		 cmp	 edx, eax
  00341	0f 8c a3 fe ff
	ff		 jl	 $LN458@CheckSched
  00347	8b 75 d0	 mov	 esi, DWORD PTR _tCurrentTime$[ebp]
  0034a	8b 4d b0	 mov	 ecx, DWORD PTR _tCheckTime$202122[ebp]
  0034d	7f 08		 jg	 SHORT $LN461@CheckSched
  0034f	3b f1		 cmp	 esi, ecx
  00351	0f 82 93 fe ff
	ff		 jb	 $LN458@CheckSched
$LN461@CheckSched:
  00357	03 cf		 add	 ecx, edi
  00359	13 45 c4	 adc	 eax, DWORD PTR _tTimeRange$[ebp+4]
  0035c	3b d0		 cmp	 edx, eax
  0035e	7c 0e		 jl	 SHORT $LN2@CheckSched
  00360	0f 8f 84 fe ff
	ff		 jg	 $LN458@CheckSched
  00366	3b f1		 cmp	 esi, ecx

; 108  : 			{
; 109  : 				return FALSE;

  00368	0f 87 7c fe ff
	ff		 ja	 $LN458@CheckSched
$LN2@CheckSched:

; 110  : 			}
; 111  : 		}
; 112  : 
; 113  : 		return TRUE;
; 114  : 	}

  0036e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00371	5f		 pop	 edi
  00372	5e		 pop	 esi
  00373	33 cd		 xor	 ecx, ebp
  00375	b8 01 00 00 00	 mov	 eax, 1
  0037a	5b		 pop	 ebx
  0037b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00380	8b e5		 mov	 esp, ebp
  00382	5d		 pop	 ebp
  00383	c3		 ret	 0
$LN467@CheckSched:
?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP	; CCrywolfStateTimeInfo::CheckScheduleTime
_TEXT	ENDS
PUBLIC	??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@ ; `string'
PUBLIC	??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@ ; `string'
PUBLIC	?SetState_END@CCrywolf@@QAEXXZ			; CCrywolf::SetState_END
EXTRN	?ResetAllAltar@CCrywolfAltar@@QAEXXZ:PROC	; CCrywolfAltar::ResetAllAltar
;	COMDAT ??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@ DB '['
	DB	' Crywolf ][MVP] SUCCESS.......!!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@
CONST	SEGMENT
??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@ DB '['
	DB	' Crywolf ][MVP] FAIL.......!!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@
CONST	SEGMENT
??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> END', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?SetState_END@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_END@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_END, COMDAT
; _this$ = ecx

; 709  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 710  : 	this->m_dwCrywolfStartProcTick = 0;
; 711  : 	this->m_bChangeAI = FALSE;
; 712  : 
; 713  : 	LogAddC(4, "[ Crywolf ] State (%d) -> END", this->m_iCrywolfState);

  00004	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	33 db		 xor	 ebx, ebx
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@
  00013	6a 04		 push	 4
  00015	89 9e 70 cf 0f
	00		 mov	 DWORD PTR [esi+1036144], ebx
  0001b	89 9e 78 cf 0f
	00		 mov	 DWORD PTR [esi+1036152], ebx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  : 
; 715  : 	if ( this->m_bTurnUpBoss != FALSE && CHECK_LIMIT(this->m_iBossIndex, OBJ_MAXMONSTER) )

  0002a	39 9e 74 cf 0f
	00		 cmp	 DWORD PTR [esi+1036148], ebx
  00030	74 56		 je	 SHORT $LN34@SetState_E
  00032	8b 86 d4 cf 0f
	00		 mov	 eax, DWORD PTR [esi+1036244]
  00038	3b c3		 cmp	 eax, ebx
  0003a	7c 4c		 jl	 SHORT $LN34@SetState_E
  0003c	33 c9		 xor	 ecx, ecx
  0003e	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  00043	0f 9e c1	 setle	 cl
  00046	3b cb		 cmp	 ecx, ebx
  00048	74 3e		 je	 SHORT $LN34@SetState_E

; 716  : 	{
; 717  : 		if ( gObj[this->m_iBossIndex].Live != FALSE )

  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00050	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00056	38 5c 08 6a	 cmp	 BYTE PTR [eax+ecx+106], bl
  0005a	74 2c		 je	 SHORT $LN34@SetState_E

; 718  : 		{
; 719  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 233)));

  0005c	68 e9 0c 00 00	 push	 3305			; 00000ce9H
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00066	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0006b	50		 push	 eax
  0006c	6a 02		 push	 2
  0006e	68 00 00 00 00	 push	 OFFSET _UTIL
  00073	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 720  : 			this->SetOccupationState(1);

  00078	bf 01 00 00 00	 mov	 edi, 1
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	89 be f0 b7 0f
	00		 mov	 DWORD PTR [esi+1030128], edi
  00086	eb 05		 jmp	 SHORT $LN14@SetState_E
$LN34@SetState_E:
  00088	bf 01 00 00 00	 mov	 edi, 1
$LN14@SetState_E:

; 721  : 		}
; 722  : 	}
; 723  : 
; 724  : 	this->m_bTurnUpBoss = FALSE;

  0008d	89 9e 74 cf 0f
	00		 mov	 DWORD PTR [esi+1036148], ebx

; 725  : 	this->SetCrywolfBossIndex(-1);

  00093	c7 86 d4 cf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1036244], -1

; 726  : 
; 727  : 	if ( this->GetOccupationState() == 1 )
; 728  : 	{
; 729  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 234)));

  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000a2	39 be f0 b7 0f
	00		 cmp	 DWORD PTR [esi+1030128], edi
  000a8	75 22		 jne	 SHORT $LN7@SetState_E
  000aa	68 ea 0c 00 00	 push	 3306			; 00000ceaH
  000af	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000b4	50		 push	 eax
  000b5	68 00 00 00 00	 push	 OFFSET _UTIL
  000ba	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 730  : 		this->SetOccupationState(1);

  000bf	89 be f0 b7 0f
	00		 mov	 DWORD PTR [esi+1030128], edi

; 731  : 
; 732  : 		LogAddTD("[ Crywolf ][MVP] FAIL.......!!");

  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@

; 733  : 	}
; 734  : 	else

  000ca	eb 20		 jmp	 SHORT $LN38@SetState_E
$LN7@SetState_E:

; 735  : 	{
; 736  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 235)));

  000cc	68 eb 0c 00 00	 push	 3307			; 00000cebH
  000d1	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000d6	50		 push	 eax
  000d7	68 00 00 00 00	 push	 OFFSET _UTIL
  000dc	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 737  : 		this->SetOccupationState(0);

  000e1	89 9e f0 b7 0f
	00		 mov	 DWORD PTR [esi+1030128], ebx

; 738  : 
; 739  : 		LogAddTD("[ Crywolf ][MVP] SUCCESS.......!!");

  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@
$LN38@SetState_E:
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 740  : 	}
; 741  : 
; 742  : 	this->SetCrywolfState(CRYWOLF_STATE_END);

  000f5	c7 86 ec b7 0f
	00 05 00 00 00	 mov	 DWORD PTR [esi+1030124], 5

; 743  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_END);

  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 744  : 	this->NotifyCrywolfCurrentState();

  00105	8b ce		 mov	 ecx, esi
  00107	89 86 3c cf 0f
	00		 mov	 DWORD PTR [esi+1036092], eax
  0010d	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 745  : 	this->ChangeAI(0);

  00112	53		 push	 ebx
  00113	8b ce		 mov	 ecx, esi
  00115	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 746  : 	
; 747  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar++)

  0011a	bb cd 00 00 00	 mov	 ebx, 205		; 000000cdH
  0011f	90		 npad	 1
$LL5@SetState_E:

; 748  : 	{
; 749  : 		int iUserIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(iAltar);

  00120	53		 push	 ebx
  00121	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00126	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex
  0012b	8b f8		 mov	 edi, eax

; 750  : 
; 751  : 		if ( iUserIndex != -1 )

  0012d	83 ff ff	 cmp	 edi, -1
  00130	74 1d		 je	 SHORT $LN4@SetState_E

; 752  : 		{
; 753  : 			this->CalcGettingScore(iUserIndex, -1, 6);

  00132	6a 06		 push	 6
  00134	6a ff		 push	 -1
  00136	57		 push	 edi
  00137	8b ce		 mov	 ecx, esi
  00139	e8 00 00 00 00	 call	 ?CalcGettingScore@CCrywolf@@QAEHHHH@Z ; CCrywolf::CalcGettingScore

; 754  : 
; 755  : 			if ( this->GetOccupationState() != 1 )

  0013e	83 be f0 b7 0f
	00 01		 cmp	 DWORD PTR [esi+1030128], 1
  00145	74 08		 je	 SHORT $LN4@SetState_E

; 756  : 			{
; 757  : 				this->MakeRewardForAltarElf(iUserIndex);

  00147	57		 push	 edi
  00148	8b ce		 mov	 ecx, esi
  0014a	e8 00 00 00 00	 call	 ?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z ; CCrywolf::MakeRewardForAltarElf
$LN4@SetState_E:

; 746  : 	
; 747  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar++)

  0014f	43		 inc	 ebx
  00150	81 fb d1 00 00
	00		 cmp	 ebx, 209		; 000000d1H
  00156	7e c8		 jle	 SHORT $LL5@SetState_E

; 758  : 			}
; 759  : 		}
; 760  : 	}
; 761  : 
; 762  : 	g_CrywolfNPC_Altar.ResetAllAltar();

  00158	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0015d	e8 00 00 00 00	 call	 ?ResetAllAltar@CCrywolfAltar@@QAEXXZ ; CCrywolfAltar::ResetAllAltar
  00162	5f		 pop	 edi

; 763  : 	this->NotifyCrywolfPersonalRank();

  00163	8b ce		 mov	 ecx, esi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	e9 00 00 00 00	 jmp	 ?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfPersonalRank
?SetState_END@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_END
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T216134 = -12						; size = 12
$T216132 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate
  0000f	81 f9 cc cc cc
	0c		 cmp	 ecx, 214748364		; 0cccccccH
  00015	77 14		 ja	 SHORT $LN3@allocate
  00017	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T216132[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T216134[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T216132[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T216134[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T216134[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z PROC ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Dest_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	3d fe ff ff 3f	 cmp	 eax, 1073741822		; 3ffffffeH
  0000b	72 16		 jb	 SHORT $LN17@Insert

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));
; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  0000d	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0001e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN375@Insert:
$LN17@Insert:

; 1640 : 			}
; 1641 : 		++this->_Mysize;

  00023	40		 inc	 eax
  00024	53		 push	 ebx
  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1642 : 		_Newnode->_Parent = _Wherenode;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0002f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00032	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00035	32 db		 xor	 bl, bl
  00037	3b c2		 cmp	 eax, edx
  00039	75 10		 jne	 SHORT $LN16@Insert

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  0003b	89 7a 04	 mov	 DWORD PTR [edx+4], edi

; 1647 : 			_Lmost() = _Newnode;

  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	89 3a		 mov	 DWORD PTR [edx], edi

; 1648 : 			_Rmost() = _Newnode;

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00046	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00049	eb 20		 jmp	 SHORT $LN11@Insert
$LN16@Insert:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  0004b	38 5d 0c	 cmp	 BYTE PTR __Addleft$[ebp], bl
  0004e	74 0d		 je	 SHORT $LN14@Insert

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  00050	89 38		 mov	 DWORD PTR [eax], edi

; 1653 : 			if (_Wherenode == _Lmost())

  00052	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00055	3b 02		 cmp	 eax, DWORD PTR [edx]
  00057	75 12		 jne	 SHORT $LN11@Insert

; 1654 : 				_Lmost() = _Newnode;

  00059	89 3a		 mov	 DWORD PTR [edx], edi

; 1655 : 			}
; 1656 : 		else

  0005b	eb 0e		 jmp	 SHORT $LN11@Insert
$LN14@Insert:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0005d	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1659 : 			if (_Wherenode == _Rmost())

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00066	75 03		 jne	 SHORT $LN11@Insert

; 1660 : 				_Rmost() = _Newnode;

  00068	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN11@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0006b	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0006e	8b c7		 mov	 eax, edi
  00070	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  00073	0f 85 97 01 00
	00		 jne	 $LN9@Insert
  00079	56		 push	 esi
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL10@Insert:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00080	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00083	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00086	3b 16		 cmp	 edx, DWORD PTR [esi]
  00088	0f 85 c1 00 00
	00		 jne	 $LN8@Insert

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  0008e	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00091	38 5e 10	 cmp	 BYTE PTR [esi+16], bl
  00094	75 1c		 jne	 SHORT $LN7@Insert

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00096	c6 42 10 01	 mov	 BYTE PTR [edx+16], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  0009a	c6 46 10 01	 mov	 BYTE PTR [esi+16], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  0009e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000a4	88 5a 10	 mov	 BYTE PTR [edx+16], bl

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1677 : 					}
; 1678 : 				else

  000ad	e9 51 01 00 00	 jmp	 $LN316@Insert
$LN7@Insert:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000b2	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000b5	75 3a		 jne	 SHORT $LN111@Insert

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000b7	8b c2		 mov	 eax, edx

; 1683 : 						_Lrotate(_Pnode);

  000b9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000bc	8b 32		 mov	 esi, DWORD PTR [edx]
  000be	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000c1	8b 32		 mov	 esi, DWORD PTR [edx]
  000c3	38 5e 11	 cmp	 BYTE PTR [esi+17], bl
  000c6	75 03		 jne	 SHORT $LN110@Insert
  000c8	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN110@Insert:
  000cb	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000ce	89 72 04	 mov	 DWORD PTR [edx+4], esi
  000d1	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000d4	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000d7	75 05		 jne	 SHORT $LN109@Insert
  000d9	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000dc	eb 0e		 jmp	 SHORT $LN106@Insert
$LN109@Insert:
  000de	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000e1	3b 06		 cmp	 eax, DWORD PTR [esi]
  000e3	75 04		 jne	 SHORT $LN107@Insert
  000e5	89 16		 mov	 DWORD PTR [esi], edx
  000e7	eb 03		 jmp	 SHORT $LN106@Insert
$LN107@Insert:
  000e9	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN106@Insert:
  000ec	89 02		 mov	 DWORD PTR [edx], eax
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN111@Insert:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f4	c6 42 10 01	 mov	 BYTE PTR [edx+16], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fb	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000fe	88 5a 10	 mov	 BYTE PTR [edx+16], bl

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00101	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00104	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00107	8b 32		 mov	 esi, DWORD PTR [edx]
  00109	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0010c	89 3a		 mov	 DWORD PTR [edx], edi
  0010e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00111	38 5f 11	 cmp	 BYTE PTR [edi+17], bl
  00114	75 03		 jne	 SHORT $LN173@Insert
  00116	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN173@Insert:
  00119	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0011c	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0011f	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00122	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  00125	75 0b		 jne	 SHORT $LN172@Insert
  00127	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0012a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0012d	e9 cb 00 00 00	 jmp	 $LN374@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert:
  00132	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  00135	3b 57 08	 cmp	 edx, DWORD PTR [edi+8]
  00138	75 0b		 jne	 SHORT $LN170@Insert
  0013a	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0013d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00140	e9 b8 00 00 00	 jmp	 $LN374@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert:
  00145	89 37		 mov	 DWORD PTR [edi], esi
  00147	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0014a	e9 ae 00 00 00	 jmp	 $LN374@Insert
$LN8@Insert:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  0014f	8b 36		 mov	 esi, DWORD PTR [esi]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  00151	38 5e 10	 cmp	 BYTE PTR [esi+16], bl
  00154	75 1c		 jne	 SHORT $LN3@Insert

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00156	c6 42 10 01	 mov	 BYTE PTR [edx+16], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  0015a	c6 46 10 01	 mov	 BYTE PTR [esi+16], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  0015e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00161	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00164	88 5a 10	 mov	 BYTE PTR [edx+16], bl

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  00167	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  0016d	e9 91 00 00 00	 jmp	 $LN316@Insert
$LN3@Insert:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00172	3b 02		 cmp	 eax, DWORD PTR [edx]
  00174	75 3c		 jne	 SHORT $LN253@Insert

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  00176	8b c2		 mov	 eax, edx

; 1709 : 						_Rrotate(_Pnode);

  00178	8b 10		 mov	 edx, DWORD PTR [eax]
  0017a	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  0017d	89 30		 mov	 DWORD PTR [eax], esi
  0017f	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00182	38 5e 11	 cmp	 BYTE PTR [esi+17], bl
  00185	75 03		 jne	 SHORT $LN252@Insert
  00187	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN252@Insert:
  0018a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0018d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00190	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00193	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00196	75 05		 jne	 SHORT $LN251@Insert
  00198	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0019b	eb 0f		 jmp	 SHORT $LN248@Insert
$LN251@Insert:
  0019d	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  001a0	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001a3	75 05		 jne	 SHORT $LN249@Insert
  001a5	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001a8	eb 02		 jmp	 SHORT $LN248@Insert
$LN249@Insert:
  001aa	89 16		 mov	 DWORD PTR [esi], edx
$LN248@Insert:
  001ac	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001af	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN253@Insert:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  001b2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b5	c6 42 10 01	 mov	 BYTE PTR [edx+16], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  001b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001bf	88 5a 10	 mov	 BYTE PTR [edx+16], bl

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001c2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c5	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c8	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  001cb	8b 3e		 mov	 edi, DWORD PTR [esi]
  001cd	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  001d0	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d2	38 5f 11	 cmp	 BYTE PTR [edi+17], bl
  001d5	75 03		 jne	 SHORT $LN315@Insert
  001d7	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN315@Insert:
  001da	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001dd	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  001e0	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001e3	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  001e6	75 05		 jne	 SHORT $LN314@Insert
  001e8	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001eb	eb 0e		 jmp	 SHORT $LN311@Insert
$LN314@Insert:
  001ed	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001f0	3b 17		 cmp	 edx, DWORD PTR [edi]
  001f2	75 04		 jne	 SHORT $LN312@Insert
  001f4	89 37		 mov	 DWORD PTR [edi], esi
  001f6	eb 03		 jmp	 SHORT $LN311@Insert
$LN312@Insert:
  001f8	89 77 08	 mov	 DWORD PTR [edi+8], esi
$LN311@Insert:
  001fb	89 16		 mov	 DWORD PTR [esi], edx
$LN374@Insert:
  001fd	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00200	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN316@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00203	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00206	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  00209	0f 84 71 fe ff
	ff		 je	 $LL10@Insert
  0020f	5e		 pop	 esi
$LN9@Insert:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00210	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00213	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1720 : 		return (iterator(_Newnode, this));

  00216	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00219	89 38		 mov	 DWORD PTR [eax], edi
  0021b	5f		 pop	 edi
  0021c	c6 41 10 01	 mov	 BYTE PTR [ecx+16], 1
  00220	5b		 pop	 ebx

; 1721 : 		}

  00221	5d		 pop	 ebp
  00222	c2 10 00	 ret	 16			; 00000010H
$LN373@Insert:
?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >,bool>
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T216958 = -16						; size = 12
$T216935 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 14		 push	 20			; 00000014H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	33 c9		 xor	 ecx, ecx
  00012	83 c4 04	 add	 esp, 4
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1a		 je	 SHORT $LN5@Buynode

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00024	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002a	66 89 48 10	 mov	 WORD PTR [eax+16], cx
  0002e	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode:
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T216935[ebp]
  00036	89 4d fc	 mov	 DWORD PTR $T216935[ebp], ecx
  00039	50		 push	 eax
  0003a	8d 4d f0	 lea	 ecx, DWORD PTR $T216958[ebp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T216958[ebp]
  0004a	51		 push	 ecx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T216958[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode:
$LN26@Buynode:
  00057	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
$T217085 = -16						; size = 12
$T217062 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	6a 14		 push	 20			; 00000014H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN15@Tree_val
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 10	 mov	 BYTE PTR [ecx+16], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 11	 mov	 BYTE PTR [edx+17], al

; 551  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T217062[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T217085[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T217062[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T217085[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T217085[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val:
$LN36@Tree_val:
  0006e	cc		 int	 3
??0?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z
_TEXT	SEGMENT
tv795 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 7b 11 00	 cmp	 BYTE PTR [ebx+17], 0
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	74 0a		 je	 SHORT $LN40@erase

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN293@erase:
$LN40@erase:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00022	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002c	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  00030	74 05		 je	 SHORT $LN39@erase

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00032	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00035	eb 17		 jmp	 SHORT $LN289@erase
$LN39@erase:
  00037	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003a	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0003e	74 04		 je	 SHORT $LN37@erase

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00040	8b f9		 mov	 edi, ecx

; 1218 : 		else

  00042	eb 0a		 jmp	 SHORT $LN289@erase
$LN37@erase:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00044	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00047	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  0004a	3b c3		 cmp	 eax, ebx
  0004c	75 72		 jne	 SHORT $LN35@erase
$LN289@erase:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  0004e	80 7f 11 00	 cmp	 BYTE PTR [edi+17], 0
  00052	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00055	75 03		 jne	 SHORT $LN34@erase

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00057	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00060	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00063	75 05		 jne	 SHORT $LN33@erase

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00068	eb 0b		 jmp	 SHORT $LN30@erase
$LN33@erase:
  0006a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0006c	75 04		 jne	 SHORT $LN31@erase

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0006e	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  00070	eb 03		 jmp	 SHORT $LN30@erase
$LN31@erase:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  00072	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	39 18		 cmp	 DWORD PTR [eax], ebx
  0007a	75 1b		 jne	 SHORT $LN29@erase

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0007c	80 7f 11 00	 cmp	 BYTE PTR [edi+17], 0
  00080	74 04		 je	 SHORT $LN43@erase
  00082	8b c6		 mov	 eax, esi
  00084	eb 0c		 jmp	 SHORT $LN44@erase
$LN43@erase:
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 c4 04	 add	 esp, 4
$LN44@erase:
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00097	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009a	89 4d f4	 mov	 DWORD PTR tv795[ebp], ecx
  0009d	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000a0	75 78		 jne	 SHORT $LN165@erase

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000a2	80 7f 11 00	 cmp	 BYTE PTR [edi+17], 0
  000a6	74 07		 je	 SHORT $LN45@erase
  000a8	8b c6		 mov	 eax, esi
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000ad	eb 6b		 jmp	 SHORT $LN165@erase
$LN45@erase:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR tv795[ebp]
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000be	eb 5a		 jmp	 SHORT $LN165@erase
$LN35@erase:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c7	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000ca	75 04		 jne	 SHORT $LN26@erase

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cc	8b f0		 mov	 esi, eax

; 1257 : 			else

  000ce	eb 1a		 jmp	 SHORT $LN25@erase
$LN26@erase:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000d0	80 7f 11 00	 cmp	 BYTE PTR [edi+17], 0
  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d7	75 03		 jne	 SHORT $LN24@erase

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d9	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000dc	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e4	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f3	75 05		 jne	 SHORT $LN23@erase

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f8	eb 0e		 jmp	 SHORT $LN20@erase
$LN23@erase:
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	39 19		 cmp	 DWORD PTR [ecx], ebx
  000ff	75 04		 jne	 SHORT $LN21@erase

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00101	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00103	eb 03		 jmp	 SHORT $LN20@erase
$LN21@erase:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00105	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00108	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010e	8a 53 10	 mov	 dl, BYTE PTR [ebx+16]
  00111	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  00114	88 50 10	 mov	 BYTE PTR [eax+16], dl
  00117	88 4b 10	 mov	 BYTE PTR [ebx+16], cl
$LN165@erase:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0011a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0011d	b3 01		 mov	 bl, 1
  0011f	38 58 10	 cmp	 BYTE PTR [eax+16], bl
  00122	0f 85 fa 00 00
	00		 jne	 $LN19@erase

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00128	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00131	0f 84 e8 00 00
	00		 je	 $LN16@erase
$LL18@erase:
  00137	38 5f 10	 cmp	 BYTE PTR [edi+16], bl
  0013a	0f 85 df 00 00
	00		 jne	 $LN16@erase

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	3b f8		 cmp	 edi, eax
  00144	75 65		 jne	 SHORT $LN15@erase

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00146	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00149	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0014d	75 13		 jne	 SHORT $LN14@erase

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0014f	88 58 10	 mov	 BYTE PTR [eax+16], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00152	56		 push	 esi
  00153	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  00157	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0015c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00162	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00166	75 74		 jne	 SHORT $LN291@erase

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  0016d	75 08		 jne	 SHORT $LN11@erase
  0016f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00172	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  00175	74 61		 je	 SHORT $LN292@erase
$LN11@erase:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00177	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017a	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  0017d	75 15		 jne	 SHORT $LN9@erase

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	88 5a 10	 mov	 BYTE PTR [edx+16], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00184	50		 push	 eax
  00185	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
  00189	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00194	8a 56 10	 mov	 dl, BYTE PTR [esi+16]
  00197	88 50 10	 mov	 BYTE PTR [eax+16], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0019a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0019d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001a0	56		 push	 esi
  001a1	88 58 10	 mov	 BYTE PTR [eax+16], bl
  001a4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a9	eb 74		 jmp	 SHORT $LN16@erase
$LN15@erase:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001ab	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  001af	75 12		 jne	 SHORT $LN7@erase

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001b1	88 58 10	 mov	 BYTE PTR [eax+16], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001b4	56		 push	 esi
  001b5	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  001b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001c3	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001c7	75 13		 jne	 SHORT $LN291@erase

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001cc	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  001cf	75 1e		 jne	 SHORT $LN4@erase
  001d1	8b 10		 mov	 edx, DWORD PTR [eax]
  001d3	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  001d6	75 17		 jne	 SHORT $LN4@erase
$LN292@erase:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d8	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
$LN291@erase:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001dc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  001df	8b fe		 mov	 edi, esi
  001e1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001e4	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e7	0f 85 4a ff ff
	ff		 jne	 $LL18@erase

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001ed	eb 30		 jmp	 SHORT $LN16@erase
$LN4@erase:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	38 5a 10	 cmp	 BYTE PTR [edx+16], bl
  001f4	75 15		 jne	 SHORT $LN2@erase

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	88 5a 10	 mov	 BYTE PTR [edx+16], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fc	50		 push	 eax
  001fd	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
  00201	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00206	8b 06		 mov	 eax, DWORD PTR [esi]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0020b	8a 56 10	 mov	 dl, BYTE PTR [esi+16]
  0020e	88 50 10	 mov	 BYTE PTR [eax+16], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00211	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00214	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  00216	56		 push	 esi
  00217	88 58 10	 mov	 BYTE PTR [eax+16], bl
  0021a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
$LN16@erase:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0021f	88 5f 10	 mov	 BYTE PTR [edi+16], bl
$LN19@erase:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00222	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00231	83 c4 04	 add	 esp, 4
  00234	5f		 pop	 edi
  00235	5e		 pop	 esi
  00236	5b		 pop	 ebx
  00237	85 c0		 test	 eax, eax
  00239	74 04		 je	 SHORT $LN1@erase

; 1373 : 			--this->_Mysize;

  0023b	48		 dec	 eax
  0023c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  0023f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00242	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]
  00245	89 10		 mov	 DWORD PTR [eax], edx

; 1376 : 		}

  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c2 08 00	 ret	 8
$LN290@erase:
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase
; Function compile flags: /Ogtp
;	COMDAT ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 11 00	 cmp	 BYTE PTR [edi+17], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 1e		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	8b cb		 mov	 ecx, ebx
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001e	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));
; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e2		 je	 SHORT $LL3@Erase
$LN1@Erase:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert
; Function compile flags: /Ogtp
;	COMDAT ?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Addleft$ = -8						; size = 1
__Wherenode$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T217552 = 16						; size = 4
$T217550 = 16						; size = 4
__Where$213330 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();

  00009	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0000c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  0000f	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00013	8b d1		 mov	 edx, ecx
  00015	56		 push	 esi
  00016	b1 01		 mov	 cl, 1
  00018	57		 push	 edi
  00019	89 5d f4	 mov	 DWORD PTR _this$[ebp], ebx
  0001c	89 55 fc	 mov	 DWORD PTR __Wherenode$[ebp], edx
  0001f	88 4d f8	 mov	 BYTE PTR __Addleft$[ebp], cl
  00022	0f 85 7f 00 00
	00		 jne	 $LN11@Linsert
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Node$[ebp]
  0002b	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  0002e	8b ff		 npad	 2
$LL12@Linsert:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00030	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  00034	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00037	89 45 fc	 mov	 DWORD PTR __Wherenode$[ebp], eax
  0003a	74 2b		 je	 SHORT $LN10@Linsert
  0003c	8b 8f c0 1f 00
	00		 mov	 ecx, DWORD PTR [edi+8128]
  00042	8b b3 c0 1f 00
	00		 mov	 esi, DWORD PTR [ebx+8128]
  00048	3b ce		 cmp	 ecx, esi
  0004a	0f 9d c2	 setge	 dl
  0004d	3b ce		 cmp	 ecx, esi
  0004f	75 0f		 jne	 SHORT $LN33@Linsert
  00051	8b 97 c8 00 00
	00		 mov	 edx, DWORD PTR [edi+200]
  00057	3b 93 c8 00 00
	00		 cmp	 edx, DWORD PTR [ebx+200]
  0005d	0f 92 c2	 setb	 dl
$LN33@Linsert:
  00060	84 d2		 test	 dl, dl
  00062	0f 94 c1	 sete	 cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00065	eb 26		 jmp	 SHORT $LN142@Linsert
$LN10@Linsert:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00067	8b 8b c0 1f 00
	00		 mov	 ecx, DWORD PTR [ebx+8128]
  0006d	8b b7 c0 1f 00
	00		 mov	 esi, DWORD PTR [edi+8128]
  00073	3b ce		 cmp	 ecx, esi
  00075	0f 9d c2	 setge	 dl
  00078	3b ce		 cmp	 ecx, esi
  0007a	75 0f		 jne	 SHORT $LN44@Linsert
  0007c	8b 8b c8 00 00
	00		 mov	 ecx, DWORD PTR [ebx+200]
  00082	3b 8f c8 00 00
	00		 cmp	 ecx, DWORD PTR [edi+200]
  00088	0f 92 c2	 setb	 dl
$LN44@Linsert:
  0008b	8a ca		 mov	 cl, dl
$LN142@Linsert:
  0008d	88 4d f8	 mov	 BYTE PTR __Addleft$[ebp], cl

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  00090	84 c9		 test	 cl, cl
  00092	74 04		 je	 SHORT $LN15@Linsert
  00094	8b 00		 mov	 eax, DWORD PTR [eax]
  00096	eb 03		 jmp	 SHORT $LN16@Linsert
$LN15@Linsert:
  00098	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN16@Linsert:

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  0009b	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0009f	74 8f		 je	 SHORT $LL12@Linsert
  000a1	8b 5d f4	 mov	 ebx, DWORD PTR _this$[ebp]
  000a4	8b 55 fc	 mov	 edx, DWORD PTR __Wherenode$[ebp]
$LN11@Linsert:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  000a7	89 55 10	 mov	 DWORD PTR __Where$213330[ebp], edx

; 970  : 			if (!_Addleft)

  000aa	84 c9		 test	 cl, cl
  000ac	74 35		 je	 SHORT $LN95@Linsert

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  000ae	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000b1	3b 10		 cmp	 edx, DWORD PTR [eax]
  000b3	75 26		 jne	 SHORT $LN4@Linsert

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR __Node$[ebp]
  000b8	51		 push	 ecx
  000b9	52		 push	 edx
  000ba	6a 01		 push	 1
  000bc	8d 55 10	 lea	 edx, DWORD PTR $T217550[ebp]
  000bf	52		 push	 edx
  000c0	8b cb		 mov	 ecx, ebx
  000c2	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000d2	89 08		 mov	 DWORD PTR [eax], ecx
  000d4	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  000db	8d 4d 10	 lea	 ecx, DWORD PTR __Where$213330[ebp]
  000de	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >,std::_Iterator_base0>::operator--
$LN95@Linsert:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  000e3	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  000e6	8b 45 10	 mov	 eax, DWORD PTR __Where$213330[ebp]
  000e9	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  000ec	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  000ef	8b 87 c0 1f 00
	00		 mov	 eax, DWORD PTR [edi+8128]
  000f5	8b 8e c0 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8128]
  000fb	3b c1		 cmp	 eax, ecx
  000fd	0f 9d c2	 setge	 dl
  00100	3b c1		 cmp	 eax, ecx
  00102	75 0f		 jne	 SHORT $LN107@Linsert
  00104	8b 8f c8 00 00
	00		 mov	 ecx, DWORD PTR [edi+200]
  0010a	3b 8e c8 00 00
	00		 cmp	 ecx, DWORD PTR [esi+200]
  00110	0f 92 c2	 setb	 dl
$LN107@Linsert:
  00113	84 d2		 test	 dl, dl

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  00115	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00118	52		 push	 edx
  00119	74 27		 je	 SHORT $LN2@Linsert
  0011b	8b 45 fc	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0011e	8b 4d f8	 mov	 ecx, DWORD PTR __Addleft$[ebp]
  00121	50		 push	 eax
  00122	51		 push	 ecx
  00123	8d 55 10	 lea	 edx, DWORD PTR $T217552[ebp]
  00126	52		 push	 edx
  00127	8b cb		 mov	 ecx, ebx
  00129	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  00139	89 08		 mov	 DWORD PTR [eax], ecx
  0013b	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Linsert:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));
; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  00142	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  00147	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0014a	8b 4d 10	 mov	 ecx, DWORD PTR __Where$213330[ebp]
  0014d	83 c4 04	 add	 esp, 4
  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00156	89 08		 mov	 DWORD PTR [eax], ecx
  00158	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert
_TEXT	ENDS
PUBLIC	??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
$T217916 = -12						; size = 12
$T217862 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  00008	6a 14		 push	 20			; 00000014H
  0000a	8b f9		 mov	 edi, ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	8b f0		 mov	 esi, eax
  00013	33 c0		 xor	 eax, eax
  00015	83 c4 04	 add	 esp, 4
  00018	3b f0		 cmp	 esi, eax
  0001a	74 33		 je	 SHORT $LN12@Buynode@2
  0001c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001f	89 0e		 mov	 DWORD PTR [esi], ecx
  00021	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00024	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  0002a	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  0002d	66 89 46 10	 mov	 WORD PTR [esi+16], ax
  00031	52		 push	 edx
  00032	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00035	50		 push	 eax
  00036	83 c7 0d	 add	 edi, 13			; 0000000dH
  00039	57		 push	 edi
  0003a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0003d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@PAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT *>
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5f		 pop	 edi

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);
; 595  : 		_RERAISE;
; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi

; 599  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@2:
  0004f	8d 4d 08	 lea	 ecx, DWORD PTR $T217862[ebp]
  00052	51		 push	 ecx
  00053	8d 4d f4	 lea	 ecx, DWORD PTR $T217916[ebp]
  00056	89 45 08	 mov	 DWORD PTR $T217862[ebp], eax
  00059	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0005e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00063	8d 55 f4	 lea	 edx, DWORD PTR $T217916[ebp]
  00066	52		 push	 edx
  00067	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T217916[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Buynode@2:
$LN43@Buynode@2:
  00073	cc		 int	 3
??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
$T218055 = -16						; size = 12
$T217989 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 14		 push	 20			; 00000014H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN20@Tree
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 10	 mov	 BYTE PTR [ecx+16], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 11	 mov	 BYTE PTR [edx+17], al

; 699  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T217989[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T218055[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T217989[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T218055[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T218055[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree:
$LN42@Tree:
  0006e	cc		 int	 3
??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00005	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00008	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0000b	80 7b 11 00	 cmp	 BYTE PTR [ebx+17], 0
  0000f	8b f3		 mov	 esi, ebx
  00011	75 1e		 jne	 SHORT $LN7@clear
$LL9@clear:
  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	51		 push	 ecx
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase
  0001e	8b 36		 mov	 esi, DWORD PTR [esi]
  00020	53		 push	 ebx
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  0002d	8b de		 mov	 ebx, esi
  0002f	74 e2		 je	 SHORT $LL9@clear
$LN7@clear:

; 1416 : 		_Root() = this->_Myhead;

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00037	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00042	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 1420 : 		}

  0004c	c3		 ret	 0
?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear
_TEXT	ENDS
PUBLIC	??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
;	COMDAT ??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@1@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z
_TEXT	SEGMENT
$T218159 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 1c		 jne	 SHORT $LN89@erase@2
  00014	3b d0		 cmp	 edx, eax
  00016	75 18		 jne	 SHORT $LN89@erase@2

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear

; 1383 : 			return (begin());

  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1389 : 			return (iterator(_First._Ptr, this));

  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	89 08		 mov	 DWORD PTR [eax], ecx
  00029	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN89@erase@2:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  00030	3b ca		 cmp	 ecx, edx
  00032	74 5e		 je	 SHORT $LN1@erase@2
$LL2@erase@2:

; 1388 : 				erase(_First++);

  00034	80 79 11 00	 cmp	 BYTE PTR [ecx+17], 0
  00038	8b d1		 mov	 edx, ecx
  0003a	75 42		 jne	 SHORT $LN53@erase@2
  0003c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003f	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00043	75 1a		 jne	 SHORT $LN91@erase@2
  00045	8b c8		 mov	 ecx, eax
  00047	8b 01		 mov	 eax, DWORD PTR [ecx]
  00049	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0004d	75 0b		 jne	 SHORT $LN67@erase@2
  0004f	90		 npad	 1
$LL68@erase@2:
  00050	8b c8		 mov	 ecx, eax
  00052	8b 01		 mov	 eax, DWORD PTR [ecx]
  00054	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00058	74 f6		 je	 SHORT $LL68@erase@2
$LN67@erase@2:
  0005a	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0005d	eb 1f		 jmp	 SHORT $LN53@erase@2
$LN91@erase@2:
  0005f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00062	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00066	75 13		 jne	 SHORT $LN51@erase@2
$LL52@erase@2:
  00068	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0006b	75 0e		 jne	 SHORT $LN51@erase@2
  0006d	8b c8		 mov	 ecx, eax
  0006f	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00079	74 ed		 je	 SHORT $LL52@erase@2
$LN51@erase@2:
  0007b	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN53@erase@2:
  0007e	52		 push	 edx
  0007f	8d 55 fc	 lea	 edx, DWORD PTR $T218159[ebp]
  00082	52		 push	 edx
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0008d	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00090	75 a2		 jne	 SHORT $LL2@erase@2
$LN1@erase@2:

; 1389 : 			return (iterator(_First._Ptr, this));

  00092	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00095	89 08		 mov	 DWORD PTR [eax], ecx
  00097	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T218452 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T218452[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T218590 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T218590[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
__ehhandler$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
PUBLIC	??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ$1
__ehfuncinfo$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T218738 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T218738[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
__ehhandler$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
PUBLIC	??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\set
;	COMDAT ??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T218924 = -16						; size = 12
$T218816 = -4						; size = 4
??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 81   : 		{	// construct empty set from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 14		 push	 20			; 00000014H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN25@set
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 10	 mov	 BYTE PTR [ecx+16], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 11	 mov	 BYTE PTR [edx+17], al

; 82   : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0

; 81   : 		{	// construct empty set from defaults

$LN25@set:
  00044	8d 45 fc	 lea	 eax, DWORD PTR $T218816[ebp]
  00047	50		 push	 eax
  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T218924[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T218816[ebp], 0
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR $T218924[ebp]
  0005f	51		 push	 ecx
  00060	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T218924[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@set:
$LN48@set:
  0006c	cc		 int	 3
??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ		; CCrywolf::NotifyCrywolfHeroList
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
CONST	SEGMENT
??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	' Crywolf ][Hero List] [%s][%s] Score(%d) Ranking(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$4
__ehfuncinfo$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
xdata$x	ENDS
;	COMDAT ?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
$T218945 = -6068					; size = 8
$T219148 = -6060					; size = 12
_this$ = -6048						; size = 4
$T219547 = -6044					; size = 4
$T218994 = -6044					; size = 4
_HeroSet$ = -6040					; size = 16
_iHeroCount$ = -6024					; size = 4
_j$212799 = -6020					; size = 4
$T218944 = -6020					; size = 4
_cBUFFER$ = -6016					; size = 6000
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ PROC		; CCrywolf::NotifyCrywolfHeroList, COMDAT
; _this$ = ecx

; 1094 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 a8 17 00 00	 mov	 eax, 6056		; 000017a8H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	89 8d 60 e8 ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1095 : 
; 1096 : 	char cBUFFER[6000];
; 1097 : 	int iHeroCount = 0;

  00038	33 ff		 xor	 edi, edi

; 1098 : 	memset(cBUFFER, 0, sizeof(cBUFFER));

  0003a	68 70 17 00 00	 push	 6000			; 00001770H
  0003f	8d 85 80 e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  00045	57		 push	 edi
  00046	50		 push	 eax
  00047	89 bd 78 e8 ff
	ff		 mov	 DWORD PTR _iHeroCount$[ebp], edi
  0004d	e8 00 00 00 00	 call	 _memset

; 1099 : 	PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT * lpMsg = (PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT *)cBUFFER;
; 1100 : 	PMSG_ANS_CRYWOLF_HERO_LIST_INFO * lpMsgBody = (PMSG_ANS_CRYWOLF_HERO_LIST_INFO *)(cBUFFER + 5);
; 1101 : 	std::set<LPOBJ,CCrywolfScoreSort> HeroSet;

  00052	6a 14		 push	 20			; 00000014H
  00054	89 bd 70 e8 ff
	ff		 mov	 DWORD PTR _HeroSet$[ebp+8], edi
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	3b c7		 cmp	 eax, edi
  00064	0f 84 0e 02 00
	00		 je	 $LN37@NotifyCryw@5
  0006a	89 85 6c e8 ff
	ff		 mov	 DWORD PTR _HeroSet$[ebp+4], eax
  00070	89 00		 mov	 DWORD PTR [eax], eax
  00072	8b 85 6c e8 ff
	ff		 mov	 eax, DWORD PTR _HeroSet$[ebp+4]
  00078	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0007b	8b 85 6c e8 ff
	ff		 mov	 eax, DWORD PTR _HeroSet$[ebp+4]
  00081	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00084	8b 8d 6c e8 ff
	ff		 mov	 ecx, DWORD PTR _HeroSet$[ebp+4]
  0008a	c6 41 10 01	 mov	 BYTE PTR [ecx+16], 1
  0008e	8b 95 6c e8 ff
	ff		 mov	 edx, DWORD PTR _HeroSet$[ebp+4]
  00094	c6 42 11 01	 mov	 BYTE PTR [edx+17], 1
  00098	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0009b	be 00 a7 40 09	 mov	 esi, 155232000		; 0940a700H
  000a0	bb 03 00 00 00	 mov	 ebx, 3
$LL9@NotifyCryw@5:

; 1104 : 	{
; 1105 : 		if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000aa	03 c6		 add	 eax, esi
  000ac	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000af	75 3c		 jne	 SHORT $LN8@NotifyCryw@5
  000b1	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  000b6	75 35		 jne	 SHORT $LN8@NotifyCryw@5
  000b8	80 b8 49 01 00
	00 22		 cmp	 BYTE PTR [eax+329], 34	; 00000022H
  000bf	75 2c		 jne	 SHORT $LN8@NotifyCryw@5

; 1106 : 		{
; 1107 : 			HeroSet.insert(&gObj[i]);

  000c1	57		 push	 edi
  000c2	8d 8d 7c e8 ff
	ff		 lea	 ecx, DWORD PTR $T218944[ebp]
  000c8	51		 push	 ecx
  000c9	8d 8d 68 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  000cf	89 85 7c e8 ff
	ff		 mov	 DWORD PTR $T218944[ebp], eax
  000d5	e8 00 00 00 00	 call	 ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
  000da	50		 push	 eax
  000db	8d 95 4c e8 ff
	ff		 lea	 edx, DWORD PTR $T218945[ebp]
  000e1	52		 push	 edx
  000e2	8d 8d 68 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  000e8	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Linsert
$LN8@NotifyCryw@5:

; 1102 : 	
; 1103 : 	for (int i=OBJ_STARTUSERINDZT;i<OBJMAX;i++)

  000ed	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  000f3	81 fe 80 d7 e9
	09		 cmp	 esi, 166320000		; 09e9d780H
  000f9	7c aa		 jl	 SHORT $LL9@NotifyCryw@5

; 1108 : 		}
; 1109 : 	}
; 1110 : 
; 1111 : 	std::set<LPOBJ, CCrywolfScoreSort>::iterator _Itor = HeroSet.begin();

  000fb	8b 85 6c e8 ff
	ff		 mov	 eax, DWORD PTR _HeroSet$[ebp+4]
  00101	8b 18		 mov	 ebx, DWORD PTR [eax]

; 1112 : 	
; 1113 : 	for(int j=0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  00103	89 bd 7c e8 ff
	ff		 mov	 DWORD PTR _j$212799[ebp], edi
  00109	8d bd 91 e8 ff
	ff		 lea	 edi, DWORD PTR _cBUFFER$[ebp+17]
$LN82@NotifyCryw@5:
  0010f	3b 9d 6c e8 ff
	ff		 cmp	 ebx, DWORD PTR _HeroSet$[ebp+4]
  00115	0f 84 c9 00 00
	00		 je	 $LN3@NotifyCryw@5

; 1114 : 	{
; 1115 : 		LPOBJ lpHeroObj = (*(_Itor));

  0011b	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]

; 1116 : 
; 1117 : 		lpMsgBody[j].iRank = iHeroCount;

  0011e	8b 8d 78 e8 ff
	ff		 mov	 ecx, DWORD PTR _iHeroCount$[ebp]
  00124	88 4f f4	 mov	 BYTE PTR [edi-12], cl

; 1118 : 		lpMsgBody[j].btHeroClass = lpHeroObj->Class;

  00127	8a 96 b8 00 00
	00		 mov	 dl, BYTE PTR [esi+184]
  0012d	88 57 04	 mov	 BYTE PTR [edi+4], dl

; 1119 : 		lpMsgBody[j].iHeroScore = lpHeroObj->m_iCrywolfMVPScore;

  00130	8b 86 c0 1f 00
	00		 mov	 eax, DWORD PTR [esi+8128]
  00136	89 07		 mov	 DWORD PTR [edi], eax

; 1120 : 		memcpy(lpMsgBody[j].szHeroName, lpHeroObj->Name, MAX_ACCOUNT_LEN);

  00138	8b 56 77	 mov	 edx, DWORD PTR [esi+119]
  0013b	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  0013e	89 57 f5	 mov	 DWORD PTR [edi-11], edx
  00141	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00144	89 57 f9	 mov	 DWORD PTR [edi-7], edx
  00147	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]

; 1121 : 		iHeroCount++;

  0014b	41		 inc	 ecx

; 1122 : 
; 1123 : 		LogAddTD("[ Crywolf ][Hero List] [%s][%s] Score(%d) Ranking(%d)",
; 1124 : 			lpHeroObj->AccountID, lpHeroObj->Name, lpHeroObj->m_iCrywolfMVPScore, iHeroCount);

  0014c	51		 push	 ecx
  0014d	66 89 57 fd	 mov	 WORD PTR [edi-3], dx
  00151	89 8d 78 e8 ff
	ff		 mov	 DWORD PTR _iHeroCount$[ebp], ecx
  00157	8b 8e c0 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8128]
  0015d	51		 push	 ecx
  0015e	50		 push	 eax
  0015f	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00162	52		 push	 edx
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1125 : 
; 1126 : 		if ( this->GetOccupationState() != 1 )

  0016e	8b 8d 60 e8 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00174	83 c4 14	 add	 esp, 20			; 00000014H
  00177	83 b9 f0 b7 0f
	00 01		 cmp	 DWORD PTR [ecx+1030128], 1
  0017e	74 0e		 je	 SHORT $LN4@NotifyCryw@5

; 1127 : 		{
; 1128 : 			if ( lpMsgBody[j].iRank <= 5 )

  00180	80 7f f4 05	 cmp	 BYTE PTR [edi-12], 5
  00184	77 08		 ja	 SHORT $LN4@NotifyCryw@5

; 1129 : 			{
; 1130 : 				this->MakeRewardForHeroListTop5(lpHeroObj->m_Index);

  00186	8b 06		 mov	 eax, DWORD PTR [esi]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z ; CCrywolf::MakeRewardForHeroListTop5
$LN4@NotifyCryw@5:

; 1112 : 	
; 1113 : 	for(int j=0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  0018e	ff 85 7c e8 ff
	ff		 inc	 DWORD PTR _j$212799[ebp]
  00194	83 c7 14	 add	 edi, 20			; 00000014H
  00197	80 7b 11 00	 cmp	 BYTE PTR [ebx+17], 0
  0019b	75 3a		 jne	 SHORT $LN169@NotifyCryw@5
  0019d	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001a0	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  001a4	75 16		 jne	 SHORT $LN165@NotifyCryw@5
  001a6	8b d8		 mov	 ebx, eax
  001a8	8b 03		 mov	 eax, DWORD PTR [ebx]
  001aa	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  001ae	75 27		 jne	 SHORT $LN169@NotifyCryw@5
$LL97@NotifyCryw@5:
  001b0	8b d8		 mov	 ebx, eax
  001b2	8b 03		 mov	 eax, DWORD PTR [ebx]
  001b4	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  001b8	74 f6		 je	 SHORT $LL97@NotifyCryw@5
  001ba	eb 1b		 jmp	 SHORT $LN169@NotifyCryw@5
$LN165@NotifyCryw@5:
  001bc	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  001bf	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  001c3	75 10		 jne	 SHORT $LN80@NotifyCryw@5
$LL81@NotifyCryw@5:
  001c5	3b 58 08	 cmp	 ebx, DWORD PTR [eax+8]
  001c8	75 0b		 jne	 SHORT $LN80@NotifyCryw@5
  001ca	8b d8		 mov	 ebx, eax
  001cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001cf	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  001d3	74 f0		 je	 SHORT $LL81@NotifyCryw@5
$LN80@NotifyCryw@5:
  001d5	8b d8		 mov	 ebx, eax
$LN169@NotifyCryw@5:
  001d7	83 bd 7c e8 ff
	ff 05		 cmp	 DWORD PTR _j$212799[ebp], 5
  001de	0f 8c 2b ff ff
	ff		 jl	 $LN82@NotifyCryw@5
$LN3@NotifyCryw@5:

; 1131 : 			}
; 1132 : 		}
; 1133 : 	}
; 1134 : 
; 1135 : 	lpMsg->btCount = iHeroCount;

  001e4	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _iHeroCount$[ebp]

; 1136 : 
; 1137 : 	PHeadSubSetB((LPBYTE)lpMsg, 0xBD, 0x08, iHeroCount*sizeof(PMSG_ANS_CRYWOLF_HERO_LIST_INFO) + sizeof(PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT));

  001ea	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  001ed	8d 14 8d 05 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+5]
  001f4	52		 push	 edx
  001f5	6a 08		 push	 8
  001f7	88 85 84 e8 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+4], al
  001fd	8d 85 80 e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  00203	68 bd 00 00 00	 push	 189			; 000000bdH
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1138 : 
; 1139 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)lpMsg, lpMsg->h.size);

  0020e	0f b6 8d 81 e8
	ff ff		 movzx	 ecx, BYTE PTR _cBUFFER$[ebp+1]
  00215	83 c4 10	 add	 esp, 16			; 00000010H
  00218	51		 push	 ecx
  00219	8d 95 80 e8 ff
	ff		 lea	 edx, DWORD PTR _cBUFFER$[ebp]
  0021f	52		 push	 edx
  00220	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00225	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1140 : }

  0022a	8b 85 6c e8 ff
	ff		 mov	 eax, DWORD PTR _HeroSet$[ebp+4]
  00230	8b 08		 mov	 ecx, DWORD PTR [eax]
  00232	50		 push	 eax
  00233	51		 push	 ecx
  00234	8d 85 64 e8 ff
	ff		 lea	 eax, DWORD PTR $T219547[ebp]
  0023a	50		 push	 eax
  0023b	8d 8d 68 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  00241	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00248	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
  0024d	8b 8d 6c e8 ff
	ff		 mov	 ecx, DWORD PTR _HeroSet$[ebp+4]
  00253	51		 push	 ecx
  00254	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00259	83 c4 04	 add	 esp, 4
  0025c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0025f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00266	59		 pop	 ecx
  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	5b		 pop	 ebx
  0026a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026d	33 cd		 xor	 ecx, ebp
  0026f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00274	8b e5		 mov	 esp, ebp
  00276	5d		 pop	 ebp
  00277	c3		 ret	 0

; 1099 : 	PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT * lpMsg = (PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT *)cBUFFER;
; 1100 : 	PMSG_ANS_CRYWOLF_HERO_LIST_INFO * lpMsgBody = (PMSG_ANS_CRYWOLF_HERO_LIST_INFO *)(cBUFFER + 5);
; 1101 : 	std::set<LPOBJ,CCrywolfScoreSort> HeroSet;

$LN37@NotifyCryw@5:
  00278	8d 95 64 e8 ff
	ff		 lea	 edx, DWORD PTR $T218994[ebp]
  0027e	52		 push	 edx
  0027f	8d 8d 54 e8 ff
	ff		 lea	 ecx, DWORD PTR $T219148[ebp]
  00285	89 bd 64 e8 ff
	ff		 mov	 DWORD PTR $T218994[ebp], edi
  0028b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00290	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00295	8d 85 54 e8 ff
	ff		 lea	 eax, DWORD PTR $T219148[ebp]
  0029b	50		 push	 eax
  0029c	c7 85 54 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T219148[ebp], OFFSET ??_7bad_alloc@std@@6B@
  002a6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN174@NotifyCryw@5:
$LN173@NotifyCryw@5:
  002ab	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$0:
  00000	8d 8d 68 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$4:
  0000b	8d 8d 68 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_val<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
__ehhandler$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 48 e8 ff
	ff		 mov	 ecx, DWORD PTR [edx-6072]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ ENDP		; CCrywolf::NotifyCrywolfHeroList
PUBLIC	??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@ ; `string'
PUBLIC	?SetState_ENDCYCLE@CCrywolf@@QAEXXZ		; CCrywolf::SetState_ENDCYCLE
EXTRN	?DelGroupInstance@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::DelGroupInstance
;	COMDAT ??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@ DB '['
	DB	' Crywolf ] State (%d) -> ENDCYCLE', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?SetState_ENDCYCLE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_ENDCYCLE@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_ENDCYCLE, COMDAT
; _this$ = ecx

; 767  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 768  : 	LogAddC(4, "[ Crywolf ] State (%d) -> ENDCYCLE", this->m_iCrywolfState);

  00003	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  00009	57		 push	 edi
  0000a	50		 push	 eax
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@
  00010	6a 04		 push	 4
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 769  : 
; 770  : 	this->SetCrywolfState(CRYWOLF_STATE_ENDCYCLE);

  0001b	c7 86 ec b7 0f
	00 06 00 00 00	 mov	 DWORD PTR [esi+1030124], 6

; 771  : 	this->SetCrywolfStateAppliedTime(CRYWOLF_STATE_ENDCYCLE);

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002b	89 86 68 cf 0f
	00		 mov	 DWORD PTR [esi+1036136], eax

; 772  : 	this->SetCrywolfMapAttr(this->GetOccupationState());

  00031	8b 8e f0 b7 0f
	00		 mov	 ecx, DWORD PTR [esi+1030128]
  00037	51		 push	 ecx
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 773  : 	this->SetCrywolfCommonNPC(this->GetOccupationState());

  0003f	8b 96 f0 b7 0f
	00		 mov	 edx, DWORD PTR [esi+1030128]
  00045	52		 push	 edx
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 774  : 
; 775  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  0004d	33 ff		 xor	 edi, edi
  0004f	39 be cc cf 0f
	00		 cmp	 DWORD PTR [esi+1036236], edi
  00055	7e 21		 jle	 SHORT $LN1@SetState_E@2

; 768  : 	LogAddC(4, "[ Crywolf ] State (%d) -> ENDCYCLE", this->m_iCrywolfState);

  00057	53		 push	 ebx
  00058	8d 9e 7c cf 0f
	00		 lea	 ebx, DWORD PTR [esi+1036156]
  0005e	8b ff		 npad	 2
$LL3@SetState_E@2:

; 776  : 	{
; 777  : 		TMonsterAIGroup::DelGroupInstance(this->m_iMonsterGroupNumberArray[n]);

  00060	8b 03		 mov	 eax, DWORD PTR [ebx]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00068	47		 inc	 edi
  00069	83 c4 04	 add	 esp, 4
  0006c	83 c3 04	 add	 ebx, 4
  0006f	3b be cc cf 0f
	00		 cmp	 edi, DWORD PTR [esi+1036236]
  00075	7c e9		 jl	 SHORT $LL3@SetState_E@2
  00077	5b		 pop	 ebx
$LN1@SetState_E@2:

; 778  : 	}
; 779  : 
; 780  : 	TMonsterAIGroup::DelGroupInstance(this->m_iBossGroupNumber);

  00078	8b 8e d8 cf 0f
	00		 mov	 ecx, DWORD PTR [esi+1036248]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00084	83 c4 04	 add	 esp, 4

; 781  : 
; 782  : 	this->CreateCrywolfCommonMonster();

  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::CreateCrywolfCommonMonster

; 783  : 	this->NotifyCrywolfHeroList();

  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfHeroList
  00095	5f		 pop	 edi

; 784  : 	this->ResetAllUserMVPScore();

  00096	8b ce		 mov	 ecx, esi
  00098	5e		 pop	 esi
  00099	e9 00 00 00 00	 jmp	 ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ; CCrywolf::ResetAllUserMVPScore
?SetState_ENDCYCLE@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_ENDCYCLE
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SetState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
?SetState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetState, COMDAT
; _this$ = ecx

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 	switch ( iCrywolfState )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	83 f8 06	 cmp	 eax, 6
  0000c	0f 87 9c 00 00
	00		 ja	 $LN8@SetState
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@SetState[eax*4]
$LN7@SetState:

; 567  : 	{
; 568  : 		case CRYWOLF_STATE_NONE:
; 569  : 			this->SetState_NONE();

  00019	e8 00 00 00 00	 call	 ?SetState_NONE@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NONE

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  0002c	5e		 pop	 esi

; 593  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN6@SetState:

; 570  : 			break;
; 571  : 		case CRYWOLF_STATE_NOTIFY_1:
; 572  : 			this->SetState_NOTIFY_1();

  00031	e8 00 00 00 00	 call	 ?SetState_NOTIFY_1@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NOTIFY_1

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  00044	5e		 pop	 esi

; 593  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN5@SetState:

; 573  : 			break;
; 574  : 		case CRYWOLF_STATE_NOTIFY_2:
; 575  : 			this->SetState_NOTIFY_2();

  00049	e8 00 00 00 00	 call	 ?SetState_NOTIFY_2@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NOTIFY_2

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  0005c	5e		 pop	 esi

; 593  : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN4@SetState:

; 576  : 			break;
; 577  : 		case CRYWOLF_STATE_READY:
; 578  : 			this->SetState_READY();

  00061	e8 00 00 00 00	 call	 ?SetState_READY@CCrywolf@@QAEXXZ ; CCrywolf::SetState_READY

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  00074	5e		 pop	 esi

; 593  : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN3@SetState:

; 579  : 			break;
; 580  : 		case CRYWOLF_STATE_START:
; 581  : 			this->SetState_START();

  00079	e8 00 00 00 00	 call	 ?SetState_START@CCrywolf@@QAEXXZ ; CCrywolf::SetState_START

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  0008c	5e		 pop	 esi

; 593  : }

  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
$LN2@SetState:

; 582  : 			break;
; 583  : 		case CRYWOLF_STATE_END:
; 584  : 			this->SetState_END();

  00091	e8 00 00 00 00	 call	 ?SetState_END@CCrywolf@@QAEXXZ ; CCrywolf::SetState_END

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  0009d	8b ce		 mov	 ecx, esi
  0009f	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  000a4	5e		 pop	 esi

; 593  : }

  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
$LN1@SetState:

; 585  : 			break;
; 586  : 		case CRYWOLF_STATE_ENDCYCLE:
; 587  : 			this->SetState_ENDCYCLE();

  000a9	e8 00 00 00 00	 call	 ?SetState_ENDCYCLE@CCrywolf@@QAEXXZ ; CCrywolf::SetState_ENDCYCLE
$LN8@SetState:

; 588  : 			break;
; 589  : 	}
; 590  : 
; 591  : 	this->NotifyCrywolfCurrentState();

  000ae	8b ce		 mov	 ecx, esi
  000b0	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 592  : 	this->CrywolfInfoDBSave();

  000b5	8b ce		 mov	 ecx, esi
  000b7	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  000bc	5e		 pop	 esi

; 593  : }

  000bd	5d		 pop	 ebp
  000be	c2 04 00	 ret	 4
  000c1	8d 49 00	 npad	 3
$LN12@SetState:
  000c4	00 00 00 00	 DD	 $LN7@SetState
  000c8	00 00 00 00	 DD	 $LN6@SetState
  000cc	00 00 00 00	 DD	 $LN5@SetState
  000d0	00 00 00 00	 DD	 $LN4@SetState
  000d4	00 00 00 00	 DD	 $LN3@SetState
  000d8	00 00 00 00	 DD	 $LN2@SetState
  000dc	00 00 00 00	 DD	 $LN1@SetState
?SetState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetState
_TEXT	ENDS
PUBLIC	?SetNextState@CCrywolf@@QAEXH@Z			; CCrywolf::SetNextState
; Function compile flags: /Ogtp
;	COMDAT ?SetNextState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCurrentState$ = 8					; size = 4
?SetNextState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetNextState, COMDAT
; _this$ = ecx

; 596  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 	int iNextState = iCurrentState + 1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iCurrentState$[ebp]
  00006	40		 inc	 eax

; 598  : 	this->SetState(iNextState);

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState

; 599  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetNextState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetNextState
_TEXT	ENDS
PUBLIC	??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@ ; `string'
PUBLIC	??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@ ; `string'
PUBLIC	?ProcState_START@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_START
;	COMDAT ??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@ DB '['
	DB	' Crywolf ][MVP] Start Monster Rush !!!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@
CONST	SEGMENT
??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@ DB '['
	DB	' Crywolf ][MVP] Barlgars TurnUp !!!', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?ProcState_START@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_START@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_START, COMDAT
; _this$ = ecx

; 846  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 847  : 	if ( g_CrywolfNPC_Altar.GetContractedAltarCount() == 0 )

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00008	e8 00 00 00 00	 call	 ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ; CCrywolfAltar::GetContractedAltarCount
  0000d	85 c0		 test	 eax, eax
  0000f	75 34		 jne	 SHORT $LN5@ProcState_@4

; 848  : 	{
; 849  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 240)));

  00011	68 f0 0c 00 00	 push	 3312			; 00000cf0H
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0001b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00020	50		 push	 eax
  00021	6a 02		 push	 2
  00023	68 00 00 00 00	 push	 OFFSET _UTIL
  00028	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 888  : 		{
; 889  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 243)));	

  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 890  : 
; 891  : 			this->SetOccupationState(0);
; 892  : 			this->SetState(CRYWOLF_STATE_END);

  00030	6a 05		 push	 5
  00032	8b ce		 mov	 ecx, esi
  00034	c7 86 f0 b7 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1030128], 1
  0003e	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00043	5e		 pop	 esi

; 893  : 		}
; 894  : 	}
; 895  : }

  00044	c3		 ret	 0
$LN5@ProcState_@4:
  00045	57		 push	 edi

; 850  : 
; 851  : 		this->SetOccupationState(1);
; 852  : 		this->SetState(CRYWOLF_STATE_END);
; 853  : 
; 854  : 		return;
; 855  : 	}
; 856  : 
; 857  : 	this->NotifyCrywolfStatueAndAltarInfo();

  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo

; 858  : 	this->NotifyCrywolfBossMonsterInfo();

  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfBossMonsterInfo

; 859  : 	this->NotifyCrywolfStateLeftTime();

  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStateLeftTime

; 860  : 
; 861  : 	if ( (GetTickCount() - this->m_dwCrywolfStartProcTick) > (this->m_iBossTurnUpTime * 1000) &&
; 862  : 		 !this->m_bTurnUpBoss )

  0005b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00061	ff d7		 call	 edi
  00063	8b 8e dc cf 0f
	00		 mov	 ecx, DWORD PTR [esi+1036252]
  00069	2b 86 70 cf 0f
	00		 sub	 eax, DWORD PTR [esi+1036144]
  0006f	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  00075	3b c1		 cmp	 eax, ecx
  00077	76 47		 jbe	 SHORT $LN4@ProcState_@4
  00079	83 be 74 cf 0f
	00 00		 cmp	 DWORD PTR [esi+1036148], 0
  00080	75 3e		 jne	 SHORT $LN4@ProcState_@4

; 863  : 	{
; 864  : 		this->m_bTurnUpBoss = TRUE;
; 865  : 		
; 866  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 241)));

  00082	68 f1 0c 00 00	 push	 3313			; 00000cf1H
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0008c	c7 86 74 cf 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1036148], 1
  00096	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0009b	50		 push	 eax
  0009c	6a 02		 push	 2
  0009e	68 00 00 00 00	 push	 OFFSET _UTIL
  000a3	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 867  : 
; 868  : 		this->TurnUpBoss();

  000ab	8b ce		 mov	 ecx, esi
  000ad	e8 00 00 00 00	 call	 ?TurnUpBoss@CCrywolf@@QAEXXZ ; CCrywolf::TurnUpBoss

; 869  : 		
; 870  : 		LogAddTD("[ Crywolf ][MVP] Barlgars TurnUp !!!");

  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000bd	83 c4 04	 add	 esp, 4
$LN4@ProcState_@4:

; 871  : 	}
; 872  : 
; 873  : 	if ( (GetTickCount() - this->m_dwCrywolfStartProcTick) > (this->m_iMonsterGroupChangeAITime * 1000) &&
; 874  : 		 !this->m_bChangeAI )

  000c0	ff d7		 call	 edi
  000c2	8b 96 d0 cf 0f
	00		 mov	 edx, DWORD PTR [esi+1036240]
  000c8	2b 86 70 cf 0f
	00		 sub	 eax, DWORD PTR [esi+1036144]
  000ce	69 d2 e8 03 00
	00		 imul	 edx, 1000		; 000003e8H
  000d4	5f		 pop	 edi
  000d5	3b c2		 cmp	 eax, edx
  000d7	76 49		 jbe	 SHORT $LN14@ProcState_@4
  000d9	83 be 78 cf 0f
	00 00		 cmp	 DWORD PTR [esi+1036152], 0
  000e0	75 40		 jne	 SHORT $LN14@ProcState_@4

; 875  : 	{
; 876  : 		this->m_bChangeAI = TRUE;
; 877  : 		
; 878  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 242)));

  000e2	68 f2 0c 00 00	 push	 3314			; 00000cf2H
  000e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000ec	c7 86 78 cf 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1036152], 1
  000f6	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000fb	50		 push	 eax
  000fc	6a 02		 push	 2
  000fe	68 00 00 00 00	 push	 OFFSET _UTIL
  00103	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  00108	83 c4 0c	 add	 esp, 12			; 0000000cH

; 879  : 
; 880  : 		this->ChangeAI(2);

  0010b	6a 02		 push	 2
  0010d	8b ce		 mov	 ecx, esi
  0010f	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 881  : 		
; 882  : 		LogAddTD("[ Crywolf ][MVP] Start Monster Rush !!!");

  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011f	83 c4 04	 add	 esp, 4
$LN14@ProcState_@4:

; 883  : 	}
; 884  : 
; 885  : 	if ( this->m_bTurnUpBoss != FALSE && CHECK_LIMIT(this->m_iBossIndex, OBJ_MAXMONSTER) != FALSE )

  00122	83 be 74 cf 0f
	00 00		 cmp	 DWORD PTR [esi+1036148], 0
  00129	74 5d		 je	 SHORT $LN1@ProcState_@4
  0012b	8b 86 d4 cf 0f
	00		 mov	 eax, DWORD PTR [esi+1036244]
  00131	85 c0		 test	 eax, eax
  00133	78 53		 js	 SHORT $LN1@ProcState_@4
  00135	33 c9		 xor	 ecx, ecx
  00137	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  0013c	0f 9e c1	 setle	 cl
  0013f	85 c9		 test	 ecx, ecx
  00141	74 45		 je	 SHORT $LN1@ProcState_@4

; 886  : 	{
; 887  : 		if ( gObj[this->m_iBossIndex].Live == FALSE )

  00143	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00149	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0014f	80 7c 08 6a 00	 cmp	 BYTE PTR [eax+ecx+106], 0
  00154	75 32		 jne	 SHORT $LN1@ProcState_@4

; 888  : 		{
; 889  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 243)));	

  00156	68 f3 0c 00 00	 push	 3315			; 00000cf3H
  0015b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00160	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00165	50		 push	 eax
  00166	6a 02		 push	 2
  00168	68 00 00 00 00	 push	 OFFSET _UTIL
  0016d	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  00172	83 c4 0c	 add	 esp, 12			; 0000000cH

; 890  : 
; 891  : 			this->SetOccupationState(0);
; 892  : 			this->SetState(CRYWOLF_STATE_END);

  00175	6a 05		 push	 5
  00177	8b ce		 mov	 ecx, esi
  00179	c7 86 f0 b7 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1030128], 0
  00183	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN1@ProcState_@4:
  00188	5e		 pop	 esi

; 893  : 		}
; 894  : 	}
; 895  : }

  00189	c3		 ret	 0
?ProcState_START@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_START
_TEXT	ENDS
PUBLIC	??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	?OperateGmCommand@CCrywolf@@QAEXHH@Z		; CCrywolf::OperateGmCommand
;	COMDAT ??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@
; File e:\work\tranet_version\gs\gameserver\crywolf.h
CONST	SEGMENT
??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@ DB '['
	DB	' Crywolf ][Use GM Command] [%s][%s] Command : %d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?OperateGmCommand@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iCommand$ = 12						; size = 4
?OperateGmCommand@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::OperateGmCommand, COMDAT
; _this$ = ecx

; 1143 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1144 : 	if ( !gObjIsConnected(iUserIndex))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iUserIndex$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	53		 push	 ebx
  0000a	8b f9		 mov	 edi, ecx
  0000c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00011	83 c4 04	 add	 esp, 4
  00014	85 c0		 test	 eax, eax
  00016	0f 84 a3 00 00
	00		 je	 $LN7@OperateGmC

; 1145 : 		return;
; 1146 : 
; 1147 : 	if ( (gObj[iUserIndex].Authority & 0x02) != 0x02 )

  0001c	8b c3		 mov	 eax, ebx
  0001e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00024	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	f6 80 0c 02 00
	00 02		 test	 BYTE PTR [eax+524], 2
  00031	0f 84 88 00 00
	00		 je	 $LN7@OperateGmC

; 1148 : 		return;
; 1149 : 
; 1150 : 	LogAddTD("[ Crywolf ][Use GM Command] [%s][%s] Command : %d", gObj[iUserIndex].AccountID, gObj[iUserIndex].Name, iCommand);

  00037	8b 75 0c	 mov	 esi, DWORD PTR _iCommand$[ebp]
  0003a	56		 push	 esi
  0003b	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  0003e	52		 push	 edx
  0003f	83 c0 6c	 add	 eax, 108		; 0000006cH
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0004e	83 c4 10	 add	 esp, 16			; 00000010H

; 1151 : 
; 1152 : 	switch ( iCommand )

  00051	83 fe 03	 cmp	 esi, 3
  00054	77 69		 ja	 SHORT $LN7@OperateGmC
  00056	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN16@OperateGmC[esi*4]
$LN6@OperateGmC:

; 1153 : 	{
; 1154 : 		case 0:
; 1155 : 			this->SetState(CRYWOLF_STATE_NOTIFY_2);

  0005d	6a 02		 push	 2

; 1170 : 			}
; 1171 : 			break;
; 1172 : 
; 1173 : 		case 3:
; 1174 : 			this->SetState(CRYWOLF_STATE_END);

  0005f	8b cf		 mov	 ecx, edi
  00061	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx

; 1175 : 			break;
; 1176 : 	}
; 1177 : }

  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
$LN5@OperateGmC:

; 1156 : 			break;
; 1157 : 
; 1158 : 		case 1:
; 1159 : 			this->SetState(CRYWOLF_STATE_READY);

  0006d	6a 03		 push	 3

; 1170 : 			}
; 1171 : 			break;
; 1172 : 
; 1173 : 		case 3:
; 1174 : 			this->SetState(CRYWOLF_STATE_END);

  0006f	8b cf		 mov	 ecx, edi
  00071	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx

; 1175 : 			break;
; 1176 : 	}
; 1177 : }

  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN4@OperateGmC:

; 1160 : 			break;
; 1161 : 
; 1162 : 		case 2:
; 1163 : 			if ( this->GetCrywolfState() == CRYWOLF_STATE_READY )

  0007d	83 bf ec b7 0f
	00 03		 cmp	 DWORD PTR [edi+1030124], 3
  00084	75 10		 jne	 SHORT $LN3@OperateGmC

; 1164 : 			{
; 1165 : 				this->SetState(CRYWOLF_STATE_START);

  00086	6a 04		 push	 4

; 1170 : 			}
; 1171 : 			break;
; 1172 : 
; 1173 : 		case 3:
; 1174 : 			this->SetState(CRYWOLF_STATE_END);

  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 1175 : 			break;
; 1176 : 	}
; 1177 : }

  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
$LN3@OperateGmC:

; 1166 : 			}
; 1167 : 			else
; 1168 : 			{
; 1169 : 				MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 246)));

  00096	68 f6 0c 00 00	 push	 3318			; 00000cf6H
  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000a0	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000a5	50		 push	 eax
  000a6	53		 push	 ebx
  000a7	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000ac	83 c4 08	 add	 esp, 8
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx

; 1175 : 			break;
; 1176 : 	}
; 1177 : }

  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN1@OperateGmC:

; 1170 : 			}
; 1171 : 			break;
; 1172 : 
; 1173 : 		case 3:
; 1174 : 			this->SetState(CRYWOLF_STATE_END);

  000b6	6a 05		 push	 5
  000b8	8b cf		 mov	 ecx, edi
  000ba	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN7@OperateGmC:
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx

; 1175 : 			break;
; 1176 : 	}
; 1177 : }

  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
  000c6	8b ff		 npad	 2
$LN16@OperateGmC:
  000c8	00 00 00 00	 DD	 $LN6@OperateGmC
  000cc	00 00 00 00	 DD	 $LN5@OperateGmC
  000d0	00 00 00 00	 DD	 $LN4@OperateGmC
  000d4	00 00 00 00	 DD	 $LN1@OperateGmC
?OperateGmCommand@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::OperateGmCommand
_TEXT	ENDS
PUBLIC	?DelAllData@CCrywolf@@QAEXXZ			; CCrywolf::DelAllData
; Function compile flags: /Ogtp
;	COMDAT ?DelAllData@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?DelAllData@CCrywolf@@QAEXXZ PROC			; CCrywolf::DelAllData, COMDAT
; _this$ = ecx

; 319  : {

  00000	56		 push	 esi

; 320  : 	for ( int i=0;i<MAX_CRYWOLF_STATE;i++)
; 321  : 	{
; 322  : 		this->m_StateTimeInfo[i].Reset();

  00001	57		 push	 edi
  00002	33 f6		 xor	 esi, esi
  00004	89 b1 38 ce 0f
	00		 mov	 DWORD PTR [ecx+1035832], esi
  0000a	89 b1 64 ce 0f
	00		 mov	 DWORD PTR [ecx+1035876], esi
  00010	89 b1 5c ce 0f
	00		 mov	 DWORD PTR [ecx+1035868], esi
  00016	89 b1 60 ce 0f
	00		 mov	 DWORD PTR [ecx+1035872], esi
  0001c	83 c8 ff	 or	 eax, -1
  0001f	89 81 3c ce 0f
	00		 mov	 DWORD PTR [ecx+1035836], eax
  00025	89 81 40 ce 0f
	00		 mov	 DWORD PTR [ecx+1035840], eax
  0002b	89 81 44 ce 0f
	00		 mov	 DWORD PTR [ecx+1035844], eax
  00031	89 81 48 ce 0f
	00		 mov	 DWORD PTR [ecx+1035848], eax
  00037	89 81 4c ce 0f
	00		 mov	 DWORD PTR [ecx+1035852], eax
  0003d	89 81 50 ce 0f
	00		 mov	 DWORD PTR [ecx+1035856], eax
  00043	89 81 54 ce 0f
	00		 mov	 DWORD PTR [ecx+1035860], eax
  00049	89 81 58 ce 0f
	00		 mov	 DWORD PTR [ecx+1035864], eax
  0004f	89 81 68 ce 0f
	00		 mov	 DWORD PTR [ecx+1035880], eax
  00055	89 81 6c ce 0f
	00		 mov	 DWORD PTR [ecx+1035884], eax
  0005b	89 81 70 ce 0f
	00		 mov	 DWORD PTR [ecx+1035888], eax
  00061	89 81 74 ce 0f
	00		 mov	 DWORD PTR [ecx+1035892], eax
  00067	89 81 78 ce 0f
	00		 mov	 DWORD PTR [ecx+1035896], eax
  0006d	89 81 7c ce 0f
	00		 mov	 DWORD PTR [ecx+1035900], eax
  00073	89 81 80 ce 0f
	00		 mov	 DWORD PTR [ecx+1035904], eax
  00079	89 81 84 ce 0f
	00		 mov	 DWORD PTR [ecx+1035908], eax
  0007f	89 b1 88 ce 0f
	00		 mov	 DWORD PTR [ecx+1035912], esi
  00085	89 b1 8c ce 0f
	00		 mov	 DWORD PTR [ecx+1035916], esi
  0008b	89 b1 90 ce 0f
	00		 mov	 DWORD PTR [ecx+1035920], esi
  00091	89 81 94 ce 0f
	00		 mov	 DWORD PTR [ecx+1035924], eax
  00097	89 81 98 ce 0f
	00		 mov	 DWORD PTR [ecx+1035928], eax
  0009d	89 81 9c ce 0f
	00		 mov	 DWORD PTR [ecx+1035932], eax
  000a3	89 81 a0 ce 0f
	00		 mov	 DWORD PTR [ecx+1035936], eax
  000a9	89 81 a4 ce 0f
	00		 mov	 DWORD PTR [ecx+1035940], eax
  000af	89 81 a8 ce 0f
	00		 mov	 DWORD PTR [ecx+1035944], eax
  000b5	89 81 ac ce 0f
	00		 mov	 DWORD PTR [ecx+1035948], eax
  000bb	89 81 b0 ce 0f
	00		 mov	 DWORD PTR [ecx+1035952], eax
  000c1	89 b1 b4 ce 0f
	00		 mov	 DWORD PTR [ecx+1035956], esi
  000c7	89 b1 b8 ce 0f
	00		 mov	 DWORD PTR [ecx+1035960], esi
  000cd	89 b1 bc ce 0f
	00		 mov	 DWORD PTR [ecx+1035964], esi
  000d3	89 81 c0 ce 0f
	00		 mov	 DWORD PTR [ecx+1035968], eax
  000d9	89 81 c4 ce 0f
	00		 mov	 DWORD PTR [ecx+1035972], eax
  000df	89 81 c8 ce 0f
	00		 mov	 DWORD PTR [ecx+1035976], eax
  000e5	89 81 cc ce 0f
	00		 mov	 DWORD PTR [ecx+1035980], eax
  000eb	89 81 d0 ce 0f
	00		 mov	 DWORD PTR [ecx+1035984], eax
  000f1	89 81 d4 ce 0f
	00		 mov	 DWORD PTR [ecx+1035988], eax
  000f7	89 81 d8 ce 0f
	00		 mov	 DWORD PTR [ecx+1035992], eax
  000fd	89 81 dc ce 0f
	00		 mov	 DWORD PTR [ecx+1035996], eax
  00103	89 b1 e0 ce 0f
	00		 mov	 DWORD PTR [ecx+1036000], esi
  00109	89 b1 e4 ce 0f
	00		 mov	 DWORD PTR [ecx+1036004], esi
  0010f	89 b1 e8 ce 0f
	00		 mov	 DWORD PTR [ecx+1036008], esi
  00115	89 81 ec ce 0f
	00		 mov	 DWORD PTR [ecx+1036012], eax
  0011b	89 81 f0 ce 0f
	00		 mov	 DWORD PTR [ecx+1036016], eax
  00121	89 81 f4 ce 0f
	00		 mov	 DWORD PTR [ecx+1036020], eax
  00127	89 81 f8 ce 0f
	00		 mov	 DWORD PTR [ecx+1036024], eax
  0012d	89 81 fc ce 0f
	00		 mov	 DWORD PTR [ecx+1036028], eax
  00133	89 81 00 cf 0f
	00		 mov	 DWORD PTR [ecx+1036032], eax
  00139	89 81 04 cf 0f
	00		 mov	 DWORD PTR [ecx+1036036], eax
  0013f	89 81 08 cf 0f
	00		 mov	 DWORD PTR [ecx+1036040], eax
  00145	89 b1 0c cf 0f
	00		 mov	 DWORD PTR [ecx+1036044], esi
  0014b	89 b1 10 cf 0f
	00		 mov	 DWORD PTR [ecx+1036048], esi
  00151	89 b1 14 cf 0f
	00		 mov	 DWORD PTR [ecx+1036052], esi
  00157	89 81 18 cf 0f
	00		 mov	 DWORD PTR [ecx+1036056], eax
  0015d	89 81 1c cf 0f
	00		 mov	 DWORD PTR [ecx+1036060], eax
  00163	89 81 20 cf 0f
	00		 mov	 DWORD PTR [ecx+1036064], eax
  00169	89 81 24 cf 0f
	00		 mov	 DWORD PTR [ecx+1036068], eax
  0016f	89 81 28 cf 0f
	00		 mov	 DWORD PTR [ecx+1036072], eax
  00175	89 81 2c cf 0f
	00		 mov	 DWORD PTR [ecx+1036076], eax
  0017b	89 81 30 cf 0f
	00		 mov	 DWORD PTR [ecx+1036080], eax
  00181	89 81 34 cf 0f
	00		 mov	 DWORD PTR [ecx+1036084], eax
  00187	89 b1 38 cf 0f
	00		 mov	 DWORD PTR [ecx+1036088], esi
  0018d	89 b1 3c cf 0f
	00		 mov	 DWORD PTR [ecx+1036092], esi
  00193	89 b1 40 cf 0f
	00		 mov	 DWORD PTR [ecx+1036096], esi
  00199	89 81 44 cf 0f
	00		 mov	 DWORD PTR [ecx+1036100], eax
  0019f	89 81 48 cf 0f
	00		 mov	 DWORD PTR [ecx+1036104], eax
  001a5	89 81 4c cf 0f
	00		 mov	 DWORD PTR [ecx+1036108], eax
  001ab	89 81 50 cf 0f
	00		 mov	 DWORD PTR [ecx+1036112], eax
  001b1	89 81 54 cf 0f
	00		 mov	 DWORD PTR [ecx+1036116], eax
  001b7	89 81 58 cf 0f
	00		 mov	 DWORD PTR [ecx+1036120], eax
  001bd	89 81 5c cf 0f
	00		 mov	 DWORD PTR [ecx+1036124], eax
  001c3	89 81 60 cf 0f
	00		 mov	 DWORD PTR [ecx+1036128], eax
  001c9	89 b1 64 cf 0f
	00		 mov	 DWORD PTR [ecx+1036132], esi
  001cf	89 b1 68 cf 0f
	00		 mov	 DWORD PTR [ecx+1036136], esi
  001d5	8d 91 cc ca 0f
	00		 lea	 edx, DWORD PTR [ecx+1034956]
  001db	8d 7e 14	 lea	 edi, DWORD PTR [esi+20]
  001de	8b ff		 npad	 2
$LL6@DelAllData:

; 323  : 	}
; 324  : 
; 325  : 	for ( int j=0;j<MAX_CRYWOLF_STATE_TIME;j++)
; 326  : 	{
; 327  : 		this->m_StartTimeInfo[j].Reset();

  001e0	89 72 f8	 mov	 DWORD PTR [edx-8], esi
  001e3	89 42 fc	 mov	 DWORD PTR [edx-4], eax
  001e6	89 02		 mov	 DWORD PTR [edx], eax
  001e8	89 42 04	 mov	 DWORD PTR [edx+4], eax
  001eb	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001ee	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  001f1	89 42 10	 mov	 DWORD PTR [edx+16], eax
  001f4	89 42 14	 mov	 DWORD PTR [edx+20], eax
  001f7	89 42 18	 mov	 DWORD PTR [edx+24], eax
  001fa	89 72 1c	 mov	 DWORD PTR [edx+28], esi
  001fd	89 72 20	 mov	 DWORD PTR [edx+32], esi
  00200	83 c2 2c	 add	 edx, 44			; 0000002cH
  00203	4f		 dec	 edi
  00204	75 da		 jne	 SHORT $LL6@DelAllData

; 328  : 	}
; 329  : 
; 330  : 	this->m_StartTimeInfoCount = 0;

  00206	89 b1 34 ce 0f
	00		 mov	 DWORD PTR [ecx+1035828], esi

; 331  : 
; 332  : 	for ( int k=0;k<MAX_CRYWOLF_MONSTER_GROUP;k++)
; 333  : 	{
; 334  : 		this->m_iMonsterGroupNumberArray[k] = -1;

  0020c	89 81 7c cf 0f
	00		 mov	 DWORD PTR [ecx+1036156], eax
  00212	89 81 80 cf 0f
	00		 mov	 DWORD PTR [ecx+1036160], eax
  00218	89 81 84 cf 0f
	00		 mov	 DWORD PTR [ecx+1036164], eax
  0021e	89 81 88 cf 0f
	00		 mov	 DWORD PTR [ecx+1036168], eax
  00224	89 81 8c cf 0f
	00		 mov	 DWORD PTR [ecx+1036172], eax
  0022a	89 81 90 cf 0f
	00		 mov	 DWORD PTR [ecx+1036176], eax
  00230	89 81 94 cf 0f
	00		 mov	 DWORD PTR [ecx+1036180], eax
  00236	89 81 98 cf 0f
	00		 mov	 DWORD PTR [ecx+1036184], eax
  0023c	89 81 9c cf 0f
	00		 mov	 DWORD PTR [ecx+1036188], eax
  00242	89 81 a0 cf 0f
	00		 mov	 DWORD PTR [ecx+1036192], eax
  00248	89 81 a4 cf 0f
	00		 mov	 DWORD PTR [ecx+1036196], eax
  0024e	89 81 a8 cf 0f
	00		 mov	 DWORD PTR [ecx+1036200], eax
  00254	89 81 ac cf 0f
	00		 mov	 DWORD PTR [ecx+1036204], eax
  0025a	89 81 b0 cf 0f
	00		 mov	 DWORD PTR [ecx+1036208], eax
  00260	89 81 b4 cf 0f
	00		 mov	 DWORD PTR [ecx+1036212], eax
  00266	89 81 b8 cf 0f
	00		 mov	 DWORD PTR [ecx+1036216], eax
  0026c	89 81 bc cf 0f
	00		 mov	 DWORD PTR [ecx+1036220], eax
  00272	89 81 c0 cf 0f
	00		 mov	 DWORD PTR [ecx+1036224], eax
  00278	89 81 c4 cf 0f
	00		 mov	 DWORD PTR [ecx+1036228], eax
  0027e	89 81 c8 cf 0f
	00		 mov	 DWORD PTR [ecx+1036232], eax

; 335  : 	}
; 336  : 
; 337  : 	this->m_iMonsterGroupNumberCount = 0;
; 338  : 	this->m_iBossGroupNumber = 0;
; 339  : 	this->m_iBossTurnUpTime = 0;
; 340  : 	this->m_iMonsterGroupChangeAITime  = 0;
; 341  : 	this->m_bDBDataLoadOK = FALSE;
; 342  : 	this->m_bDBDataLoading = FALSE;
; 343  : 
; 344  : 	memset(this->m_iMVPScoreTable, 0, 7);

  00284	33 c0		 xor	 eax, eax
  00286	89 b1 cc cf 0f
	00		 mov	 DWORD PTR [ecx+1036236], esi
  0028c	89 b1 d8 cf 0f
	00		 mov	 DWORD PTR [ecx+1036248], esi
  00292	89 b1 dc cf 0f
	00		 mov	 DWORD PTR [ecx+1036252], esi
  00298	89 b1 d0 cf 0f
	00		 mov	 DWORD PTR [ecx+1036240], esi
  0029e	89 71 08	 mov	 DWORD PTR [ecx+8], esi
  002a1	89 71 0c	 mov	 DWORD PTR [ecx+12], esi
  002a4	89 81 e0 cf 0f
	00		 mov	 DWORD PTR [ecx+1036256], eax
  002aa	66 89 81 e4 cf
	0f 00		 mov	 WORD PTR [ecx+1036260], ax
  002b1	88 81 e6 cf 0f
	00		 mov	 BYTE PTR [ecx+1036262], al

; 345  : 	memset(this->m_iMVPRankScoreTable, 0, 5);

  002b7	89 81 fc cf 0f
	00		 mov	 DWORD PTR [ecx+1036284], eax
  002bd	88 81 00 d0 0f
	00		 mov	 BYTE PTR [ecx+1036288], al

; 346  : 	memset(this->m_iMVPRankExpTable, 0, 5);

  002c3	89 81 10 d0 0f
	00		 mov	 DWORD PTR [ecx+1036304], eax

; 347  : 
; 348  : 	this->SetState(CRYWOLF_STATE_NONE);

  002c9	56		 push	 esi
  002ca	88 81 14 d0 0f
	00		 mov	 BYTE PTR [ecx+1036308], al
  002d0	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi

; 349  : }

  002d7	c3		 ret	 0
?DelAllData@CCrywolf@@QAEXXZ ENDP			; CCrywolf::DelAllData
_TEXT	ENDS
PUBLIC	??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@ ; `string'
PUBLIC	?CheckStateTimeSync@CCrywolf@@QAEHXZ		; CCrywolf::CheckStateTimeSync
;	COMDAT ??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@
; File e:\work\tranet_version\gs\gameserver\crywolfstatetimeinfo.h
CONST	SEGMENT
??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@ DB '[ Crywolf '
	DB	'] Start Crywolf', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.cpp
CONST	ENDS
;	COMDAT ?CheckStateTimeSync@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?CheckStateTimeSync@CCrywolf@@QAEHXZ PROC		; CCrywolf::CheckStateTimeSync, COMDAT
; _this$ = ecx

; 483  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 484  : 	if (this->m_iCrywolfState != CRYWOLF_STATE_NONE )

  00004	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  0000a	57		 push	 edi
  0000b	85 c0		 test	 eax, eax
  0000d	0f 84 90 00 00
	00		 je	 $LN11@CheckState

; 485  : 	{
; 486  : 		if ( this->m_StateTimeInfo[this->m_iCrywolfState].m_bUsed == FALSE )

  00013	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00016	83 bc 30 38 ce
	0f 00 00	 cmp	 DWORD PTR [eax+esi+1035832], 0
  0001e	75 07		 jne	 SHORT $LN10@CheckState

; 487  : 		{
; 488  : 			return -1;

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	83 c8 ff	 or	 eax, -1
  00025	5b		 pop	 ebx

; 526  : }

  00026	c3		 ret	 0
$LN10@CheckState:

; 489  : 		}
; 490  : 
; 491  : 		DWORD dwTime = GetTickCount();

  00027	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  0002d	ff d3		 call	 ebx

; 492  : 
; 493  : 		if ( this->m_StateTimeInfo[this->m_iCrywolfState].CheckContinuanceTime() == FALSE )

  0002f	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  00035	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00038	8d bc 30 38 ce
	0f 00		 lea	 edi, DWORD PTR [eax+esi+1035832]
  0003f	ff d3		 call	 ebx
  00041	2b 47 28	 sub	 eax, DWORD PTR [edi+40]
  00044	3b 47 24	 cmp	 eax, DWORD PTR [edi+36]
  00047	76 51		 jbe	 SHORT $LN22@CheckState

; 494  : 		{
; 495  : 			this->m_StateTimeInfo[this->m_iCrywolfState].ResetAppliedTime();

  00049	8b 8e ec b7 0f
	00		 mov	 ecx, DWORD PTR [esi+1030124]
  0004f	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00052	c7 84 31 60 ce
	0f 00 00 00 00
	00		 mov	 DWORD PTR [ecx+esi+1035872], 0

; 496  : 
; 497  : 			if ( this->m_iCrywolfState == CRYWOLF_STATE_ENDCYCLE )

  0005d	83 be ec b7 0f
	00 06		 cmp	 DWORD PTR [esi+1030124], 6

; 500  : 				{
; 501  : 					this->SetState(CRYWOLF_STATE_NOTIFY_1);

  00064	8b ce		 mov	 ecx, esi
  00066	75 26		 jne	 SHORT $LN8@CheckState

; 498  : 			{
; 499  : 				if ( this->m_iScheduleMode == 1 )

  00068	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1
  0006c	75 10		 jne	 SHORT $LN7@CheckState

; 500  : 				{
; 501  : 					this->SetState(CRYWOLF_STATE_NOTIFY_1);

  0006e	6a 01		 push	 1
  00070	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi

; 511  : 			}
; 512  : 		}
; 513  : 		return 1;

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	5b		 pop	 ebx

; 526  : }

  0007d	c3		 ret	 0
$LN7@CheckState:

; 502  : 				}
; 503  : 				else
; 504  : 				{
; 505  : 					this->SetState(CRYWOLF_STATE_NONE);

  0007e	6a 00		 push	 0
  00080	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi

; 511  : 			}
; 512  : 		}
; 513  : 		return 1;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	5b		 pop	 ebx

; 526  : }

  0008d	c3		 ret	 0
$LN8@CheckState:

; 506  : 				}
; 507  : 			}
; 508  : 			else
; 509  : 			{
; 510  : 				this->SetNextState(this->m_iCrywolfState);

  0008e	8b 96 ec b7 0f
	00		 mov	 edx, DWORD PTR [esi+1030124]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ?SetNextState@CCrywolf@@QAEXH@Z ; CCrywolf::SetNextState
$LN22@CheckState:

; 511  : 			}
; 512  : 		}
; 513  : 		return 1;

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	b8 01 00 00 00	 mov	 eax, 1
  000a1	5b		 pop	 ebx

; 526  : }

  000a2	c3		 ret	 0
$LN11@CheckState:

; 514  : 	}
; 515  : 
; 516  : 	for ( int i=0;i<m_StartTimeInfoCount;i++)

  000a3	33 db		 xor	 ebx, ebx
  000a5	39 9e 34 ce 0f
	00		 cmp	 DWORD PTR [esi+1035828], ebx
  000ab	7e 36		 jle	 SHORT $LN2@CheckState
  000ad	8d be c8 ca 0f
	00		 lea	 edi, DWORD PTR [esi+1034952]
$LL4@CheckState:

; 517  : 	{
; 518  : 		if ( this->m_StartTimeInfo[i].CheckScheduleTime() != FALSE )

  000b3	8d 4f fc	 lea	 ecx, DWORD PTR [edi-4]
  000b6	e8 00 00 00 00	 call	 ?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckScheduleTime
  000bb	85 c0		 test	 eax, eax
  000bd	74 18		 je	 SHORT $LN3@CheckState

; 519  : 		{
; 520  : 			LogAddTD("[ Crywolf ] Start Crywolf");

  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 521  : 			this->SetState(this->m_StartTimeInfo[i].m_iStateNumber);

  000ca	8b 07		 mov	 eax, DWORD PTR [edi]
  000cc	83 c4 04	 add	 esp, 4
  000cf	50		 push	 eax
  000d0	8b ce		 mov	 ecx, esi
  000d2	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN3@CheckState:

; 514  : 	}
; 515  : 
; 516  : 	for ( int i=0;i<m_StartTimeInfoCount;i++)

  000d7	43		 inc	 ebx
  000d8	83 c7 2c	 add	 edi, 44			; 0000002cH
  000db	3b 9e 34 ce 0f
	00		 cmp	 ebx, DWORD PTR [esi+1035828]
  000e1	7c d0		 jl	 SHORT $LL4@CheckState
$LN2@CheckState:
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi

; 522  : 		}
; 523  : 	}
; 524  : 
; 525  : 	return 0;

  000e5	33 c0		 xor	 eax, eax
  000e7	5b		 pop	 ebx

; 526  : }

  000e8	c3		 ret	 0
?CheckStateTimeSync@CCrywolf@@QAEHXZ ENDP		; CCrywolf::CheckStateTimeSync
_TEXT	ENDS
PUBLIC	?Run@CCrywolf@@QAEXXZ				; CCrywolf::Run
EXTRN	?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::CheckEnableCrywolf
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
; Function compile flags: /Ogtp
;	COMDAT ?Run@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?Run@CCrywolf@@QAEXXZ PROC				; CCrywolf::Run, COMDAT
; _this$ = ecx

; 529  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 530  : 	if ( !g_CrywolfSync.CheckEnableCrywolf())

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00008	e8 00 00 00 00	 call	 ?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ ; CCrywolfSync::CheckEnableCrywolf
  0000d	85 c0		 test	 eax, eax
  0000f	74 42		 je	 SHORT $LN1@Run

; 531  : 		return;
; 532  : 
; 533  : 	if ( this->m_StartTimeInfo[0].m_bUsed == FALSE )

  00011	83 be c4 ca 0f
	00 00		 cmp	 DWORD PTR [esi+1034948], 0
  00018	74 39		 je	 SHORT $LN1@Run

; 534  : 		return;
; 535  : 
; 536  : 	this->CheckStateTimeSync();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?CheckStateTimeSync@CCrywolf@@QAEHXZ ; CCrywolf::CheckStateTimeSync

; 537  : 
; 538  : 	switch ( this->m_iCrywolfState )

  00021	8b 86 ec b7 0f
	00		 mov	 eax, DWORD PTR [esi+1030124]
  00027	83 f8 06	 cmp	 eax, 6
  0002a	77 27		 ja	 SHORT $LN1@Run
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@Run[eax*4]
$LN6@Run:

; 539  : 	{
; 540  : 		case CRYWOLF_STATE_NONE:
; 541  : 			this->ProcState_NONE();
; 542  : 			break;
; 543  : 		case CRYWOLF_STATE_NOTIFY_1:
; 544  : 			this->ProcState_NOTIFY_1();

  00033	8b ce		 mov	 ecx, esi
  00035	5e		 pop	 esi
  00036	e9 00 00 00 00	 jmp	 ?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_NOTIFY_1
$LN5@Run:

; 545  : 			break;
; 546  : 		case CRYWOLF_STATE_NOTIFY_2:
; 547  : 			this->ProcState_NOTIFY_2();

  0003b	8b ce		 mov	 ecx, esi
  0003d	5e		 pop	 esi
  0003e	e9 00 00 00 00	 jmp	 ?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_NOTIFY_2
$LN4@Run:

; 548  : 			break;
; 549  : 		case CRYWOLF_STATE_READY:
; 550  : 			this->ProcState_READY();

  00043	8b ce		 mov	 ecx, esi
  00045	5e		 pop	 esi
  00046	e9 00 00 00 00	 jmp	 ?ProcState_READY@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_READY
$LN3@Run:

; 551  : 			break;
; 552  : 		case CRYWOLF_STATE_START:
; 553  : 			this->ProcState_START();

  0004b	8b ce		 mov	 ecx, esi
  0004d	5e		 pop	 esi
  0004e	e9 00 00 00 00	 jmp	 ?ProcState_START@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_START
$LN1@Run:
  00053	5e		 pop	 esi

; 554  : 			break;
; 555  : 		case CRYWOLF_STATE_END:
; 556  : 			this->ProcState_END();
; 557  : 			break;
; 558  : 		case CRYWOLF_STATE_ENDCYCLE:
; 559  : 			this->ProcState_ENDCYCLE();
; 560  : 			break;
; 561  : 	}
; 562  : }

  00054	c3		 ret	 0
  00055	8d 49 00	 npad	 3
$LN16@Run:
  00058	00 00 00 00	 DD	 $LN1@Run
  0005c	00 00 00 00	 DD	 $LN6@Run
  00060	00 00 00 00	 DD	 $LN5@Run
  00064	00 00 00 00	 DD	 $LN4@Run
  00068	00 00 00 00	 DD	 $LN3@Run
  0006c	00 00 00 00	 DD	 $LN1@Run
  00070	00 00 00 00	 DD	 $LN1@Run
?Run@CCrywolf@@QAEXXZ ENDP				; CCrywolf::Run
_TEXT	ENDS
PUBLIC	??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@ ; `string'
PUBLIC	??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@ ; `string'
PUBLIC	??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ ; `string'
PUBLIC	??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ ; `string'
PUBLIC	??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@ ; `string'
PUBLIC	??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@CCrywolf@@QAEHPAD@Z			; CCrywolf::LoadData
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
;	COMDAT ??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@
CONST	SEGMENT
??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@ DB '[Cry'
	DB	'wolf Main Job] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@
CONST	SEGMENT
??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@ DB '[Cry'
	DB	'wolf Main Job] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
CONST	SEGMENT
??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ DB '[Cry'
	DB	'wolf Main Job] - Invalid Monster Boss Group Number (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
CONST	SEGMENT
??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ DB '[Cry'
	DB	'wolf Main Job] - Invalid Monster Group Number (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@
CONST	SEGMENT
??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@ DB '[Cr'
	DB	'ywolf Main Job] - Excced MAX StartTime (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@
CONST	SEGMENT
??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@ DB '['
	DB	'Crywolf Main Job] - %s file is Loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@
CONST	SEGMENT
??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@ DB '[C'
	DB	'rywolf Main Job] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@CCrywolf@@QAEHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@CCrywolf@@QAEHPAD@Z$0
__unwindtable$?LoadData@CCrywolf@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@CCrywolf@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@CCrywolf@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@CCrywolf@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@CCrywolf@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@CCrywolf@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadData@CCrywolf@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
_iMinute$211527 = -44					; size = 4
_iContinuanceTime$211510 = -44				; size = 4
_iMinute$211509 = -40					; size = 4
_iHour$211508 = -36					; size = 4
_iDayOfWeek$211507 = -32				; size = 4
_iDay$211506 = -28					; size = 4
_iMonth$211505 = -24					; size = 4
_iType$211477 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@CCrywolf@@QAEHPAD@Z PROC			; CCrywolf::LoadData, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@CCrywolf@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d0	 mov	 DWORD PTR _this$[ebp], esi

; 55   : 	this->m_bFileDataLoad = FALSE;
; 56   : 
; 57   : 	if ( !lpszFileName || !strcmp(lpszFileName, "") )

  00030	8b 7d 08	 mov	 edi, DWORD PTR _lpszFileName$[ebp]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00038	3b fb		 cmp	 edi, ebx
  0003a	0f 84 1f 07 00
	00		 je	 $LN28@LoadData
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00045	8b c7		 mov	 eax, edi
$LL40@LoadData:
  00047	8a 10		 mov	 dl, BYTE PTR [eax]
  00049	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0004b	75 1a		 jne	 SHORT $LN41@LoadData
  0004d	84 d2		 test	 dl, dl
  0004f	74 12		 je	 SHORT $LN42@LoadData
  00051	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00054	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00057	75 0e		 jne	 SHORT $LN41@LoadData
  00059	83 c0 02	 add	 eax, 2
  0005c	83 c1 02	 add	 ecx, 2
  0005f	84 d2		 test	 dl, dl
  00061	75 e4		 jne	 SHORT $LL40@LoadData
$LN42@LoadData:
  00063	33 c0		 xor	 eax, eax
  00065	eb 05		 jmp	 SHORT $LN43@LoadData
$LN41@LoadData:
  00067	1b c0		 sbb	 eax, eax
  00069	83 d8 ff	 sbb	 eax, -1
$LN43@LoadData:
  0006c	3b c3		 cmp	 eax, ebx
  0006e	0f 84 eb 06 00
	00		 je	 $LN28@LoadData

; 61   : 	}
; 62   : 
; 63   : 	try
; 64   : 	{
; 65   : 		SMDToken Token;
; 66   : 		SMDFile = fopen(lpszFileName, "r");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00079	57		 push	 edi
  0007a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0007d	e8 00 00 00 00	 call	 _fopen
  00082	83 c4 08	 add	 esp, 8
  00085	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 67   : 
; 68   : 		if ( SMDFile == NULL )

  0008a	3b c3		 cmp	 eax, ebx
  0008c	75 13		 jne	 SHORT $LN26@LoadData

; 69   : 		{
; 70   : 			MsgBox("[Crywolf Main Job] - Can't Open %s ", lpszFileName);

  0008e	57		 push	 edi
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@
  00094	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00099	83 c4 08	 add	 esp, 8

; 71   : 			return FALSE;

  0009c	e9 cb 06 00 00	 jmp	 $LN80@LoadData
$LN26@LoadData:

; 72   : 		}
; 73   : 
; 74   : 		this->DelAllData();

  000a1	8b ce		 mov	 ecx, esi
  000a3	e8 00 00 00 00	 call	 ?DelAllData@CCrywolf@@QAEXXZ ; CCrywolf::DelAllData
$LN25@LoadData:

; 75   : 		int iType = -1;
; 76   : 
; 77   : 		while ( true )
; 78   : 		{
; 79   : 			Token = GetToken();

  000a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 
; 81   : 			if ( Token == END )

  000ad	83 f8 02	 cmp	 eax, 2
  000b0	75 3d		 jne	 SHORT $LN23@LoadData

; 305  : 
; 306  : 		fclose(SMDFile);

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _fclose

; 307  : 		LogAddC(2, "[Crywolf Main Job] - %s file is Loaded", lpszFileName);

  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  000c0	51		 push	 ecx
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@
  000c6	6a 02		 push	 2
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 308  : 		this->m_bFileDataLoad = TRUE;

  000ce	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1

; 314  : 
; 315  : 	return this->m_bFileDataLoad;

  000d5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d8	83 c4 10	 add	 esp, 16			; 00000010H

; 316  : }

  000db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e5	59		 pop	 ecx
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
$LN23@LoadData:

; 82   : 				break;
; 83   : 
; 84   : 			iType = (int)TokenNumber;

  000ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f5	e8 00 00 00 00	 call	 __ftol2_sse
  000fa	8b d8		 mov	 ebx, eax
  000fc	89 5d ec	 mov	 DWORD PTR _iType$211477[ebp], ebx
  000ff	90		 npad	 1
$LL22@LoadData:

; 85   : 
; 86   : 			while ( true )
; 87   : 			{
; 88   : 				if ( iType == 0 )

  00100	85 db		 test	 ebx, ebx
  00102	0f 85 95 01 00
	00		 jne	 $LN20@LoadData

; 89   : 				{
; 90   : 					int iScheduleMode = 0;
; 91   : 					int iStateNumber = -1;
; 92   : 					int iMonth = -1;
; 93   : 					int iDay = -1;
; 94   : 					int iDayOfWeek = -1;
; 95   : 					int iHour = -1;
; 96   : 					int iMinute = -1;
; 97   : 					int iContinuanceTime = 0;
; 98   : 
; 99   : 					Token = GetToken();

  00108	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 100  : 
; 101  : 					if ( !strcmp("end", TokenString))

  0010d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00112	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL44@LoadData:
  00117	8a 10		 mov	 dl, BYTE PTR [eax]
  00119	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0011b	75 1a		 jne	 SHORT $LN45@LoadData
  0011d	84 d2		 test	 dl, dl
  0011f	74 12		 je	 SHORT $LN46@LoadData
  00121	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00124	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00127	75 0e		 jne	 SHORT $LN45@LoadData
  00129	83 c0 02	 add	 eax, 2
  0012c	83 c1 02	 add	 ecx, 2
  0012f	84 d2		 test	 dl, dl
  00131	75 e4		 jne	 SHORT $LL44@LoadData
$LN46@LoadData:
  00133	33 c0		 xor	 eax, eax
  00135	eb 05		 jmp	 SHORT $LN47@LoadData
$LN45@LoadData:
  00137	1b c0		 sbb	 eax, eax
  00139	83 d8 ff	 sbb	 eax, -1
$LN47@LoadData:
  0013c	85 c0		 test	 eax, eax
  0013e	0f 84 64 ff ff
	ff		 je	 $LN25@LoadData

; 102  : 						break;
; 103  : 
; 104  : 					iScheduleMode = (int)TokenNumber;

  00144	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0014a	e8 00 00 00 00	 call	 __ftol2_sse
  0014f	8b f8		 mov	 edi, eax

; 105  : 
; 106  : 					Token = GetToken();

  00151	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 107  : 					iStateNumber = (int)TokenNumber;

  00156	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015c	e8 00 00 00 00	 call	 __ftol2_sse
  00161	8b d8		 mov	 ebx, eax

; 108  : 
; 109  : 					Token = GetToken();

  00163	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 110  : 					iMonth = (int)TokenNumber;

  00168	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016e	e8 00 00 00 00	 call	 __ftol2_sse
  00173	89 45 e8	 mov	 DWORD PTR _iMonth$211505[ebp], eax

; 111  : 
; 112  : 					Token = GetToken();

  00176	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 113  : 					iDay = (int)TokenNumber;

  0017b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00181	e8 00 00 00 00	 call	 __ftol2_sse
  00186	89 45 e4	 mov	 DWORD PTR _iDay$211506[ebp], eax

; 114  : 
; 115  : 					Token = GetToken();

  00189	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 116  : 					iDayOfWeek = (int)TokenNumber;

  0018e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00194	e8 00 00 00 00	 call	 __ftol2_sse
  00199	89 45 e0	 mov	 DWORD PTR _iDayOfWeek$211507[ebp], eax

; 117  : 
; 118  : 					Token = GetToken();

  0019c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 					iHour = (int)TokenNumber;

  001a1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a7	e8 00 00 00 00	 call	 __ftol2_sse
  001ac	89 45 dc	 mov	 DWORD PTR _iHour$211508[ebp], eax

; 120  : 
; 121  : 					Token = GetToken();

  001af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 					iMinute = (int)TokenNumber;

  001b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ba	e8 00 00 00 00	 call	 __ftol2_sse
  001bf	89 45 d8	 mov	 DWORD PTR _iMinute$211509[ebp], eax

; 123  : 
; 124  : 					Token = GetToken();

  001c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 					iContinuanceTime = (int)TokenNumber;

  001c7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001cd	e8 00 00 00 00	 call	 __ftol2_sse
  001d2	89 45 d4	 mov	 DWORD PTR _iContinuanceTime$211510[ebp], eax

; 126  : 
; 127  : 					if ( this->m_StartTimeInfoCount <= -1 || this->m_StartTimeInfoCount >= MAX_CRYWOLF_STATE_TIME )

  001d5	8b 86 34 ce 0f
	00		 mov	 eax, DWORD PTR [esi+1035828]
  001db	83 f8 ff	 cmp	 eax, -1
  001de	7e 05		 jle	 SHORT $LN17@LoadData
  001e0	83 f8 14	 cmp	 eax, 20			; 00000014H
  001e3	7c 0e		 jl	 SHORT $LN18@LoadData
$LN17@LoadData:

; 128  : 					{
; 129  : 						MsgBox("[Crywolf Main Job] - Excced MAX StartTime (%d)", this->m_StartTimeInfoCount);

  001e5	50		 push	 eax
  001e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@
  001eb	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001f0	83 c4 08	 add	 esp, 8
$LN18@LoadData:

; 130  : 					}
; 131  : 
; 132  : 					this->m_iScheduleMode = iScheduleMode;
; 133  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iStateNumber = iStateNumber;

  001f3	8b 96 34 ce 0f
	00		 mov	 edx, DWORD PTR [esi+1035828]

; 134  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iMonth = iMonth;

  001f9	8b 4d e8	 mov	 ecx, DWORD PTR _iMonth$211505[ebp]
  001fc	6b d2 2c	 imul	 edx, 44			; 0000002cH
  001ff	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00202	89 9c 32 c8 ca
	0f 00		 mov	 DWORD PTR [edx+esi+1034952], ebx
  00209	8b 86 34 ce 0f
	00		 mov	 eax, DWORD PTR [esi+1035828]
  0020f	6b c0 2c	 imul	 eax, 44			; 0000002cH
  00212	89 8c 30 d0 ca
	0f 00		 mov	 DWORD PTR [eax+esi+1034960], ecx

; 135  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iDay = iDay;

  00219	8b 96 34 ce 0f
	00		 mov	 edx, DWORD PTR [esi+1035828]
  0021f	8b 45 e4	 mov	 eax, DWORD PTR _iDay$211506[ebp]
  00222	6b d2 2c	 imul	 edx, 44			; 0000002cH
  00225	89 84 32 d4 ca
	0f 00		 mov	 DWORD PTR [edx+esi+1034964], eax

; 136  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iDayOfWeek = iDayOfWeek;

  0022c	8b 8e 34 ce 0f
	00		 mov	 ecx, DWORD PTR [esi+1035828]
  00232	8b 55 e0	 mov	 edx, DWORD PTR _iDayOfWeek$211507[ebp]
  00235	81 c1 e2 5b 00
	00		 add	 ecx, 23522		; 00005be2H
  0023b	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0023e	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 137  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iHour = iHour;

  00241	8b 86 34 ce 0f
	00		 mov	 eax, DWORD PTR [esi+1035828]
  00247	8b 4d dc	 mov	 ecx, DWORD PTR _iHour$211508[ebp]
  0024a	6b c0 2c	 imul	 eax, 44			; 0000002cH
  0024d	89 8c 30 dc ca
	0f 00		 mov	 DWORD PTR [eax+esi+1034972], ecx

; 138  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iMinute = iMinute;

  00254	8b 96 34 ce 0f
	00		 mov	 edx, DWORD PTR [esi+1035828]
  0025a	8b 45 d8	 mov	 eax, DWORD PTR _iMinute$211509[ebp]
  0025d	6b d2 2c	 imul	 edx, 44			; 0000002cH
  00260	89 84 32 e0 ca
	0f 00		 mov	 DWORD PTR [edx+esi+1034976], eax

; 139  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iContinuanceTime = iContinuanceTime;

  00267	8b 8e 34 ce 0f
	00		 mov	 ecx, DWORD PTR [esi+1035828]
  0026d	8b 55 d4	 mov	 edx, DWORD PTR _iContinuanceTime$211510[ebp]
  00270	6b c9 2c	 imul	 ecx, 44			; 0000002cH

; 140  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_bUsed = TRUE;
; 141  : 					this->m_StartTimeInfoCount++;
; 142  : 				}
; 143  : 
; 144  : 				if ( iType == 1 )

  00273	8b 5d ec	 mov	 ebx, DWORD PTR _iType$211477[ebp]
  00276	89 94 31 e8 ca
	0f 00		 mov	 DWORD PTR [ecx+esi+1034984], edx
  0027d	8b 8e 34 ce 0f
	00		 mov	 ecx, DWORD PTR [esi+1035828]
  00283	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  00286	b8 01 00 00 00	 mov	 eax, 1
  0028b	89 84 31 c4 ca
	0f 00		 mov	 DWORD PTR [ecx+esi+1034948], eax
  00292	01 86 34 ce 0f
	00		 add	 DWORD PTR [esi+1035828], eax
  00298	e9 63 fe ff ff	 jmp	 $LL22@LoadData
$LN20@LoadData:
  0029d	83 fb 01	 cmp	 ebx, 1
  002a0	0f 85 d2 00 00
	00		 jne	 $LN16@LoadData

; 145  : 				{
; 146  : 					int iStateNumber = -1;
; 147  : 					int iHour = 0;
; 148  : 					int iMinute = 0;
; 149  : 					int iSecond = 0;
; 150  : 
; 151  : 					Token = GetToken();

  002a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 152  : 
; 153  : 					if ( !strcmp("end", TokenString))

  002ab	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  002b0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL48@LoadData:
  002b5	8a 10		 mov	 dl, BYTE PTR [eax]
  002b7	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002b9	75 1a		 jne	 SHORT $LN49@LoadData
  002bb	84 d2		 test	 dl, dl
  002bd	74 12		 je	 SHORT $LN50@LoadData
  002bf	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002c2	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002c5	75 0e		 jne	 SHORT $LN49@LoadData
  002c7	83 c0 02	 add	 eax, 2
  002ca	83 c1 02	 add	 ecx, 2
  002cd	84 d2		 test	 dl, dl
  002cf	75 e4		 jne	 SHORT $LL48@LoadData
$LN50@LoadData:
  002d1	33 c0		 xor	 eax, eax
  002d3	eb 05		 jmp	 SHORT $LN51@LoadData
$LN49@LoadData:
  002d5	1b c0		 sbb	 eax, eax
  002d7	83 d8 ff	 sbb	 eax, -1
$LN51@LoadData:
  002da	85 c0		 test	 eax, eax
  002dc	0f 84 c6 fd ff
	ff		 je	 $LN25@LoadData

; 154  : 						break;
; 155  : 
; 156  : 					iStateNumber = (int)TokenNumber;

  002e2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002e8	e8 00 00 00 00	 call	 __ftol2_sse
  002ed	8b d8		 mov	 ebx, eax

; 157  : 					
; 158  : 					Token = GetToken();

  002ef	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 159  : 					iHour = (int)TokenNumber;

  002f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002fa	e8 00 00 00 00	 call	 __ftol2_sse
  002ff	8b f8		 mov	 edi, eax

; 160  : 
; 161  : 					Token = GetToken();

  00301	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 					iMinute = (int)TokenNumber;

  00306	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0030c	e8 00 00 00 00	 call	 __ftol2_sse
  00311	89 45 d4	 mov	 DWORD PTR _iMinute$211527[ebp], eax

; 163  : 
; 164  : 					Token = GetToken();

  00314	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 165  : 					iSecond = (int)TokenNumber;

  00319	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0031f	e8 00 00 00 00	 call	 __ftol2_sse

; 166  : 
; 167  : 					this->m_StateTimeInfo[iStateNumber].m_iStateNumber = iStateNumber;
; 168  : 					this->m_StateTimeInfo[iStateNumber].m_iHour = iHour;
; 169  : 					this->m_StateTimeInfo[iStateNumber].m_iMinute = iMinute;

  00324	8b 55 d4	 mov	 edx, DWORD PTR _iMinute$211527[ebp]
  00327	8b cb		 mov	 ecx, ebx
  00329	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0032c	03 ce		 add	 ecx, esi
  0032e	89 99 3c ce 0f
	00		 mov	 DWORD PTR [ecx+1035836], ebx

; 170  : 					this->m_StateTimeInfo[iStateNumber].m_iSecond = iSecond;
; 171  : 					this->m_StateTimeInfo[iStateNumber].m_iContinuanceTime = iHour * 60 * 60 * 1000 + iMinute * 60 * 1000 + iSecond * 1000;

  00334	8b df		 mov	 ebx, edi
  00336	c1 e3 04	 shl	 ebx, 4
  00339	2b df		 sub	 ebx, edi
  0033b	89 b9 50 ce 0f
	00		 mov	 DWORD PTR [ecx+1035856], edi
  00341	89 91 54 ce 0f
	00		 mov	 DWORD PTR [ecx+1035860], edx
  00347	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]

; 172  : 					this->m_StateTimeInfo[iStateNumber].m_bUsed = TRUE;
; 173  : 				}
; 174  : 
; 175  : 				if ( iType == 2 )

  0034a	8b 5d ec	 mov	 ebx, DWORD PTR _iType$211477[ebp]
  0034d	8b fa		 mov	 edi, edx
  0034f	c1 e7 04	 shl	 edi, 4
  00352	2b fa		 sub	 edi, edx
  00354	89 81 58 ce 0f
	00		 mov	 DWORD PTR [ecx+1035864], eax
  0035a	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  0035d	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  00363	89 81 5c ce 0f
	00		 mov	 DWORD PTR [ecx+1035868], eax
  00369	c7 81 38 ce 0f
	00 01 00 00 00	 mov	 DWORD PTR [ecx+1035832], 1
  00373	e9 88 fd ff ff	 jmp	 $LL22@LoadData
$LN16@LoadData:
  00378	83 fb 02	 cmp	 ebx, 2
  0037b	75 7d		 jne	 SHORT $LN14@LoadData

; 176  : 				{
; 177  : 					int iGroupNumber = -1;
; 178  : 
; 179  : 					Token = GetToken();

  0037d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 180  : 
; 181  : 					if ( !strcmp("end", TokenString))

  00382	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00387	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0038c	8d 64 24 00	 npad	 4
$LL52@LoadData:
  00390	8a 10		 mov	 dl, BYTE PTR [eax]
  00392	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00394	75 1a		 jne	 SHORT $LN53@LoadData
  00396	84 d2		 test	 dl, dl
  00398	74 12		 je	 SHORT $LN54@LoadData
  0039a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0039d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  003a0	75 0e		 jne	 SHORT $LN53@LoadData
  003a2	83 c0 02	 add	 eax, 2
  003a5	83 c1 02	 add	 ecx, 2
  003a8	84 d2		 test	 dl, dl
  003aa	75 e4		 jne	 SHORT $LL52@LoadData
$LN54@LoadData:
  003ac	33 c0		 xor	 eax, eax
  003ae	eb 05		 jmp	 SHORT $LN55@LoadData
$LN53@LoadData:
  003b0	1b c0		 sbb	 eax, eax
  003b2	83 d8 ff	 sbb	 eax, -1
$LN55@LoadData:
  003b5	85 c0		 test	 eax, eax
  003b7	0f 84 eb fc ff
	ff		 je	 $LN25@LoadData

; 182  : 						break;
; 183  : 
; 184  : 					iGroupNumber = (int)TokenNumber;

  003bd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003c3	e8 00 00 00 00	 call	 __ftol2_sse
  003c8	8b f8		 mov	 edi, eax

; 185  : 
; 186  : 					if ( iGroupNumber <= -1 && iGroupNumber >= MAX_CRYWOLF_MONSTER_GROUP )

  003ca	83 ff ff	 cmp	 edi, -1
  003cd	7f 13		 jg	 SHORT $LN12@LoadData
  003cf	83 ff 14	 cmp	 edi, 20			; 00000014H
  003d2	7c 0e		 jl	 SHORT $LN12@LoadData

; 187  : 					{
; 188  : 						MsgBox("[Crywolf Main Job] - Invalid Monster Group Number (%d)", iGroupNumber);

  003d4	57		 push	 edi
  003d5	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
  003da	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  003df	83 c4 08	 add	 esp, 8
$LN12@LoadData:

; 189  : 					}
; 190  : 
; 191  : 					this->m_iMonsterGroupNumberArray[this->m_iMonsterGroupNumberCount] = iGroupNumber;

  003e2	8b 8e cc cf 0f
	00		 mov	 ecx, DWORD PTR [esi+1036236]
  003e8	89 bc 8e 7c cf
	0f 00		 mov	 DWORD PTR [esi+ecx*4+1036156], edi

; 192  : 					this->m_iMonsterGroupNumberCount++;

  003ef	ff 86 cc cf 0f
	00		 inc	 DWORD PTR [esi+1036236]

; 193  : 				}
; 194  : 
; 195  : 				if ( iType == 3 )

  003f5	e9 06 fd ff ff	 jmp	 $LL22@LoadData
$LN14@LoadData:
  003fa	83 fb 03	 cmp	 ebx, 3
  003fd	0f 85 87 00 00
	00		 jne	 $LN11@LoadData

; 196  : 				{
; 197  : 					int iGroupNumber = -1;
; 198  : 					int iTurnUpTime = 0;
; 199  : 
; 200  : 					Token = GetToken();

  00403	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 201  : 
; 202  : 					if ( !strcmp("end", TokenString))

  00408	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0040d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL56@LoadData:
  00412	8a 10		 mov	 dl, BYTE PTR [eax]
  00414	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00416	75 1a		 jne	 SHORT $LN57@LoadData
  00418	84 d2		 test	 dl, dl
  0041a	74 12		 je	 SHORT $LN58@LoadData
  0041c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0041f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00422	75 0e		 jne	 SHORT $LN57@LoadData
  00424	83 c0 02	 add	 eax, 2
  00427	83 c1 02	 add	 ecx, 2
  0042a	84 d2		 test	 dl, dl
  0042c	75 e4		 jne	 SHORT $LL56@LoadData
$LN58@LoadData:
  0042e	33 c0		 xor	 eax, eax
  00430	eb 05		 jmp	 SHORT $LN59@LoadData
$LN57@LoadData:
  00432	1b c0		 sbb	 eax, eax
  00434	83 d8 ff	 sbb	 eax, -1
$LN59@LoadData:
  00437	85 c0		 test	 eax, eax
  00439	0f 84 69 fc ff
	ff		 je	 $LN25@LoadData

; 203  : 						break;
; 204  : 
; 205  : 					iGroupNumber = (int)TokenNumber;

  0043f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00445	e8 00 00 00 00	 call	 __ftol2_sse
  0044a	8b f8		 mov	 edi, eax

; 206  : 					
; 207  : 					Token = GetToken();

  0044c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 208  : 					iTurnUpTime = (int)TokenNumber;

  00451	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00457	e8 00 00 00 00	 call	 __ftol2_sse
  0045c	8b d8		 mov	 ebx, eax

; 209  : 
; 210  : 					if ( iGroupNumber <= -1 && iGroupNumber >= MAX_CRYWOLF_MONSTER_GROUP )

  0045e	83 ff ff	 cmp	 edi, -1
  00461	7f 13		 jg	 SHORT $LN9@LoadData
  00463	83 ff 14	 cmp	 edi, 20			; 00000014H
  00466	7c 0e		 jl	 SHORT $LN9@LoadData

; 211  : 					{
; 212  : 						MsgBox("[Crywolf Main Job] - Invalid Monster Boss Group Number (%d)", iGroupNumber);

  00468	57		 push	 edi
  00469	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
  0046e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00473	83 c4 08	 add	 esp, 8
$LN9@LoadData:

; 213  : 					}
; 214  : 
; 215  : 					this->m_iBossGroupNumber = iGroupNumber;
; 216  : 					this->m_iBossTurnUpTime = iTurnUpTime;

  00476	89 9e dc cf 0f
	00		 mov	 DWORD PTR [esi+1036252], ebx

; 217  : 				}
; 218  : 
; 219  : 				if ( iType == 4 )

  0047c	8b 5d ec	 mov	 ebx, DWORD PTR _iType$211477[ebp]
  0047f	89 be d8 cf 0f
	00		 mov	 DWORD PTR [esi+1036248], edi
  00485	e9 76 fc ff ff	 jmp	 $LL22@LoadData
$LN11@LoadData:
  0048a	83 fb 04	 cmp	 ebx, 4
  0048d	75 54		 jne	 SHORT $LN8@LoadData

; 220  : 				{
; 221  : 					int iChangeAITime = 0;
; 222  : 
; 223  : 					Token = GetToken();

  0048f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 224  : 
; 225  : 					if ( !strcmp("end", TokenString))

  00494	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00499	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0049e	8b ff		 npad	 2
$LL60@LoadData:
  004a0	8a 10		 mov	 dl, BYTE PTR [eax]
  004a2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  004a4	75 1a		 jne	 SHORT $LN61@LoadData
  004a6	84 d2		 test	 dl, dl
  004a8	74 12		 je	 SHORT $LN62@LoadData
  004aa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  004ad	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  004b0	75 0e		 jne	 SHORT $LN61@LoadData
  004b2	83 c0 02	 add	 eax, 2
  004b5	83 c1 02	 add	 ecx, 2
  004b8	84 d2		 test	 dl, dl
  004ba	75 e4		 jne	 SHORT $LL60@LoadData
$LN62@LoadData:
  004bc	33 c0		 xor	 eax, eax
  004be	eb 05		 jmp	 SHORT $LN63@LoadData
$LN61@LoadData:
  004c0	1b c0		 sbb	 eax, eax
  004c2	83 d8 ff	 sbb	 eax, -1
$LN63@LoadData:
  004c5	85 c0		 test	 eax, eax
  004c7	0f 84 db fb ff
	ff		 je	 $LN25@LoadData

; 226  : 						break;
; 227  : 
; 228  : 					iChangeAITime = (int)TokenNumber;
; 229  : 					this->m_iMonsterGroupChangeAITime = iChangeAITime;

  004cd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004d3	e8 00 00 00 00	 call	 __ftol2_sse
  004d8	89 86 d0 cf 0f
	00		 mov	 DWORD PTR [esi+1036240], eax

; 230  : 				}
; 231  : 
; 232  : 				if ( iType == 5 )

  004de	e9 1d fc ff ff	 jmp	 $LL22@LoadData
$LN8@LoadData:
  004e3	83 fb 05	 cmp	 ebx, 5
  004e6	0f 85 db 00 00
	00		 jne	 $LN6@LoadData

; 233  : 				{
; 234  : 					Token = GetToken();

  004ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 235  : 
; 236  : 					if ( !strcmp("end", TokenString))

  004f1	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  004f6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  004fb	eb 03 8d 49 00	 npad	 5
$LL64@LoadData:
  00500	8a 10		 mov	 dl, BYTE PTR [eax]
  00502	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00504	75 1a		 jne	 SHORT $LN65@LoadData
  00506	84 d2		 test	 dl, dl
  00508	74 12		 je	 SHORT $LN66@LoadData
  0050a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0050d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00510	75 0e		 jne	 SHORT $LN65@LoadData
  00512	83 c0 02	 add	 eax, 2
  00515	83 c1 02	 add	 ecx, 2
  00518	84 d2		 test	 dl, dl
  0051a	75 e4		 jne	 SHORT $LL64@LoadData
$LN66@LoadData:
  0051c	33 c0		 xor	 eax, eax
  0051e	eb 05		 jmp	 SHORT $LN67@LoadData
$LN65@LoadData:
  00520	1b c0		 sbb	 eax, eax
  00522	83 d8 ff	 sbb	 eax, -1
$LN67@LoadData:
  00525	85 c0		 test	 eax, eax
  00527	0f 84 7b fb ff
	ff		 je	 $LN25@LoadData

; 237  : 						break;
; 238  : 
; 239  : 					this->m_iMVPScoreTable[0] = (int)TokenNumber;

  0052d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00533	e8 00 00 00 00	 call	 __ftol2_sse
  00538	89 86 e0 cf 0f
	00		 mov	 DWORD PTR [esi+1036256], eax

; 240  : 
; 241  : 					Token = GetToken();

  0053e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 242  : 					this->m_iMVPScoreTable[1] = (int)TokenNumber;

  00543	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00549	e8 00 00 00 00	 call	 __ftol2_sse
  0054e	89 86 e4 cf 0f
	00		 mov	 DWORD PTR [esi+1036260], eax

; 243  : 
; 244  : 					Token = GetToken();

  00554	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 245  : 					this->m_iMVPScoreTable[2] = (int)TokenNumber;

  00559	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0055f	e8 00 00 00 00	 call	 __ftol2_sse
  00564	89 86 e8 cf 0f
	00		 mov	 DWORD PTR [esi+1036264], eax

; 246  : 
; 247  : 					Token = GetToken();

  0056a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 248  : 					this->m_iMVPScoreTable[3] = (int)TokenNumber;

  0056f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00575	e8 00 00 00 00	 call	 __ftol2_sse
  0057a	89 86 ec cf 0f
	00		 mov	 DWORD PTR [esi+1036268], eax

; 249  : 
; 250  : 					Token = GetToken();

  00580	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 251  : 					this->m_iMVPScoreTable[4] = (int)TokenNumber;

  00585	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0058b	e8 00 00 00 00	 call	 __ftol2_sse
  00590	89 86 f0 cf 0f
	00		 mov	 DWORD PTR [esi+1036272], eax

; 252  : 
; 253  : 					Token = GetToken();

  00596	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 254  : 					this->m_iMVPScoreTable[5] = (int)TokenNumber;

  0059b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005a1	e8 00 00 00 00	 call	 __ftol2_sse
  005a6	89 86 f4 cf 0f
	00		 mov	 DWORD PTR [esi+1036276], eax

; 255  : 
; 256  : 					Token = GetToken();

  005ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 257  : 					this->m_iMVPScoreTable[6] = (int)TokenNumber;

  005b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005b7	e8 00 00 00 00	 call	 __ftol2_sse
  005bc	89 86 f8 cf 0f
	00		 mov	 DWORD PTR [esi+1036280], eax

; 258  : 				}
; 259  : 
; 260  : 				if ( iType == 6 )

  005c2	e9 39 fb ff ff	 jmp	 $LL22@LoadData
$LN6@LoadData:
  005c7	83 fb 06	 cmp	 ebx, 6
  005ca	0f 85 ab 00 00
	00		 jne	 $LN4@LoadData

; 261  : 				{
; 262  : 					Token = GetToken();

  005d0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 263  : 
; 264  : 					if ( !strcmp("end", TokenString))

  005d5	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  005da	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  005df	90		 npad	 1
$LL68@LoadData:
  005e0	8a 10		 mov	 dl, BYTE PTR [eax]
  005e2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  005e4	75 1a		 jne	 SHORT $LN69@LoadData
  005e6	84 d2		 test	 dl, dl
  005e8	74 12		 je	 SHORT $LN70@LoadData
  005ea	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  005ed	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  005f0	75 0e		 jne	 SHORT $LN69@LoadData
  005f2	83 c0 02	 add	 eax, 2
  005f5	83 c1 02	 add	 ecx, 2
  005f8	84 d2		 test	 dl, dl
  005fa	75 e4		 jne	 SHORT $LL68@LoadData
$LN70@LoadData:
  005fc	33 c0		 xor	 eax, eax
  005fe	eb 05		 jmp	 SHORT $LN71@LoadData
$LN69@LoadData:
  00600	1b c0		 sbb	 eax, eax
  00602	83 d8 ff	 sbb	 eax, -1
$LN71@LoadData:
  00605	85 c0		 test	 eax, eax
  00607	0f 84 9b fa ff
	ff		 je	 $LN25@LoadData

; 265  : 						break;
; 266  : 
; 267  : 					this->m_iMVPRankScoreTable[0] = (int)TokenNumber;

  0060d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00613	e8 00 00 00 00	 call	 __ftol2_sse
  00618	89 86 fc cf 0f
	00		 mov	 DWORD PTR [esi+1036284], eax

; 268  : 
; 269  : 					Token = GetToken();

  0061e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 270  : 					this->m_iMVPRankScoreTable[1] = (int)TokenNumber;

  00623	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00629	e8 00 00 00 00	 call	 __ftol2_sse
  0062e	89 86 00 d0 0f
	00		 mov	 DWORD PTR [esi+1036288], eax

; 271  : 
; 272  : 					Token = GetToken();

  00634	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 273  : 					this->m_iMVPRankScoreTable[2] = (int)TokenNumber;

  00639	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0063f	e8 00 00 00 00	 call	 __ftol2_sse
  00644	89 86 04 d0 0f
	00		 mov	 DWORD PTR [esi+1036292], eax

; 274  : 
; 275  : 					Token = GetToken();

  0064a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 276  : 					this->m_iMVPRankScoreTable[3] = (int)TokenNumber;

  0064f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00655	e8 00 00 00 00	 call	 __ftol2_sse
  0065a	89 86 08 d0 0f
	00		 mov	 DWORD PTR [esi+1036296], eax

; 277  : 
; 278  : 					Token = GetToken();

  00660	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 279  : 					this->m_iMVPRankScoreTable[4] = (int)TokenNumber;

  00665	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0066b	e8 00 00 00 00	 call	 __ftol2_sse
  00670	89 86 0c d0 0f
	00		 mov	 DWORD PTR [esi+1036300], eax

; 280  : 				}
; 281  : 
; 282  : 				if ( iType == 7 )

  00676	e9 85 fa ff ff	 jmp	 $LL22@LoadData
$LN4@LoadData:
  0067b	83 fb 07	 cmp	 ebx, 7
  0067e	0f 85 7c fa ff
	ff		 jne	 $LL22@LoadData

; 283  : 				{
; 284  : 					Token = GetToken();

  00684	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 285  : 
; 286  : 					if ( !strcmp("end", TokenString))

  00689	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0068e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL72@LoadData:
  00693	8a 10		 mov	 dl, BYTE PTR [eax]
  00695	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00697	75 1a		 jne	 SHORT $LN73@LoadData
  00699	84 d2		 test	 dl, dl
  0069b	74 12		 je	 SHORT $LN74@LoadData
  0069d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  006a0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  006a3	75 0e		 jne	 SHORT $LN73@LoadData
  006a5	83 c0 02	 add	 eax, 2
  006a8	83 c1 02	 add	 ecx, 2
  006ab	84 d2		 test	 dl, dl
  006ad	75 e4		 jne	 SHORT $LL72@LoadData
$LN74@LoadData:
  006af	33 c0		 xor	 eax, eax
  006b1	eb 05		 jmp	 SHORT $LN75@LoadData
$LN73@LoadData:
  006b3	1b c0		 sbb	 eax, eax
  006b5	83 d8 ff	 sbb	 eax, -1
$LN75@LoadData:
  006b8	85 c0		 test	 eax, eax

; 304  : 		}

  006ba	0f 84 e8 f9 ff
	ff		 je	 $LN25@LoadData

; 287  : 						break;
; 288  : 
; 289  : 					this->m_iMVPRankExpTable[0] = (int)TokenNumber;

  006c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006c6	e8 00 00 00 00	 call	 __ftol2_sse
  006cb	89 86 10 d0 0f
	00		 mov	 DWORD PTR [esi+1036304], eax

; 290  : 
; 291  : 					Token = GetToken();

  006d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 292  : 					this->m_iMVPRankExpTable[1] = (int)TokenNumber;

  006d6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006dc	e8 00 00 00 00	 call	 __ftol2_sse
  006e1	89 86 14 d0 0f
	00		 mov	 DWORD PTR [esi+1036308], eax

; 293  : 
; 294  : 					Token = GetToken();

  006e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 295  : 					this->m_iMVPRankExpTable[2] = (int)TokenNumber;

  006ec	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006f2	e8 00 00 00 00	 call	 __ftol2_sse
  006f7	89 86 18 d0 0f
	00		 mov	 DWORD PTR [esi+1036312], eax

; 296  : 
; 297  : 					Token = GetToken();

  006fd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 298  : 					this->m_iMVPRankExpTable[3] = (int)TokenNumber;

  00702	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00708	e8 00 00 00 00	 call	 __ftol2_sse
  0070d	89 86 1c d0 0f
	00		 mov	 DWORD PTR [esi+1036316], eax

; 299  : 
; 300  : 					Token = GetToken();

  00713	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 301  : 					this->m_iMVPRankExpTable[4] = (int)TokenNumber;

  00718	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0071e	e8 00 00 00 00	 call	 __ftol2_sse
  00723	89 86 20 d0 0f
	00		 mov	 DWORD PTR [esi+1036320], eax

; 302  : 				}
; 303  : 			}

  00729	e9 d2 f9 ff ff	 jmp	 $LL22@LoadData
__catch$?LoadData@CCrywolf@@QAEHPAD@Z$0:

; 309  : 	}
; 310  : 	catch(...)
; 311  : 	{
; 312  : 		MsgBox("[Crywolf Main Job] - Loading Exception Error (%s) File. ", lpszFileName);

  0072e	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00731	52		 push	 edx
  00732	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@
  00737	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0073c	83 c4 08	 add	 esp, 8

; 313  : 	}

  0073f	b8 00 00 00 00	 mov	 eax, $LN77@LoadData
  00744	c3		 ret	 0
$LN77@LoadData:
  00745	8b 75 d0	 mov	 esi, DWORD PTR _this$[ebp]

; 314  : 
; 315  : 	return this->m_bFileDataLoad;

  00748	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 316  : }

  0074b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0074e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00755	59		 pop	 ecx
  00756	5f		 pop	 edi
  00757	5e		 pop	 esi
  00758	5b		 pop	 ebx
  00759	8b e5		 mov	 esp, ebp
  0075b	5d		 pop	 ebp
  0075c	c2 04 00	 ret	 4
$LN28@LoadData:

; 58   : 	{
; 59   : 		MsgBox("[Crywolf Main Job] - File load error : File Name Error");

  0075f	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@
  00764	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00769	83 c4 04	 add	 esp, 4
$LN80@LoadData:

; 60   : 		return FALSE;

  0076c	33 c0		 xor	 eax, eax

; 316  : }

  0076e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00771	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00778	59		 pop	 ecx
  00779	5f		 pop	 edi
  0077a	5e		 pop	 esi
  0077b	5b		 pop	 ebx
  0077c	8b e5		 mov	 esp, ebp
  0077e	5d		 pop	 ebp
  0077f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@CCrywolf@@QAEHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CCrywolf@@QAEHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CCrywolf@@QAEHPAD@Z ENDP			; CCrywolf::LoadData
EXTRN	_atexit:PROC
EXTRN	??0CCrywolfUtil@@QAE@XZ:PROC			; CCrywolfUtil::CCrywolfUtil
; Function compile flags: /Ogtp
;	COMDAT ??__EUTIL@@YAXXZ
text$yc	SEGMENT
??__EUTIL@@YAXXZ PROC					; `dynamic initializer for 'UTIL'', COMDAT

; 24   : static CCrywolfUtil UTIL;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00005	e8 00 00 00 00	 call	 ??0CCrywolfUtil@@QAE@XZ	; CCrywolfUtil::CCrywolfUtil
  0000a	68 00 00 00 00	 push	 OFFSET ??__FUTIL@@YAXXZ	; `dynamic atexit destructor for 'UTIL''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EUTIL@@YAXXZ ENDP					; `dynamic initializer for 'UTIL''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Eg_Crywolf@@YAXXZ
text$yc	SEGMENT
??__Eg_Crywolf@@YAXXZ PROC				; `dynamic initializer for 'g_Crywolf'', COMDAT

; 25   : CCrywolf g_Crywolf;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00005	e8 00 00 00 00	 call	 ??0CCrywolf@@QAE@XZ	; CCrywolf::CCrywolf
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_Crywolf@@YAXXZ ; `dynamic atexit destructor for 'g_Crywolf''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_Crywolf@@YAXXZ ENDP				; `dynamic initializer for 'g_Crywolf''
text$yc	ENDS
EXTRN	??1CCrywolfUtil@@UAE@XZ:PROC			; CCrywolfUtil::~CCrywolfUtil
; Function compile flags: /Ogtp
;	COMDAT ??__FUTIL@@YAXXZ
text$yd	SEGMENT
??__FUTIL@@YAXXZ PROC					; `dynamic atexit destructor for 'UTIL'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolfUtil@@UAE@XZ	; CCrywolfUtil::~CCrywolfUtil
??__FUTIL@@YAXXZ ENDP					; `dynamic atexit destructor for 'UTIL''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__Fg_Crywolf@@YAXXZ
text$yd	SEGMENT
??__Fg_Crywolf@@YAXXZ PROC				; `dynamic atexit destructor for 'g_Crywolf'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolf@@UAE@XZ	; CCrywolf::~CCrywolf
??__Fg_Crywolf@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_Crywolf''
text$yd	ENDS
PUBLIC	?g_Crywolf@@3VCCrywolf@@A			; g_Crywolf
_BSS	SEGMENT
?g_Crywolf@@3VCCrywolf@@A DB 0fd024H DUP (?)		; g_Crywolf
_UTIL	DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_UTIL$initializer$ DD FLAT:??__EUTIL@@YAXXZ
_g_Crywolf$initializer$ DD FLAT:??__Eg_Crywolf@@YAXXZ
CRT$XCU	ENDS
END
