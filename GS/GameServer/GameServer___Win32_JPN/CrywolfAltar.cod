; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\CrywolfAltar.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?Reset@CCrywolfAltarInfo@@QAEXXZ		; CCrywolfAltarInfo::Reset
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.h
;	COMDAT ?Reset@CCrywolfAltarInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CCrywolfAltarInfo@@QAEXXZ PROC			; CCrywolfAltarInfo::Reset, COMDAT
; _this$ = ecx

; 31   : 		this->m_iAltarState = 0;

  00000	33 c0		 xor	 eax, eax

; 32   : 		this->m_iUserIndex = -1;

  00002	83 ca ff	 or	 edx, -1
  00005	89 01		 mov	 DWORD PTR [ecx], eax
  00007	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 33   : 		this->m_iAltarIndex = -1;

  0000a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 34   : 		this->m_iContractCount = 0;

  0000d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 35   : 		this->m_dwAppliedContractTime =0 ;

  00010	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 36   : 		this->m_dwValidContractTime =0 ;

  00013	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 37   : 		this->m_dwLastValidContractTime =0 ;

  00016	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 38   : 	}

  00019	c3		 ret	 0
?Reset@CCrywolfAltarInfo@@QAEXXZ ENDP			; CCrywolfAltarInfo::Reset
_TEXT	ENDS
PUBLIC	?GetRemainContractCount@CCrywolfAltarInfo@@QAEHXZ ; CCrywolfAltarInfo::GetRemainContractCount
; Function compile flags: /Ogtp
;	COMDAT ?GetRemainContractCount@CCrywolfAltarInfo@@QAEHXZ
_TEXT	SEGMENT
?GetRemainContractCount@CCrywolfAltarInfo@@QAEHXZ PROC	; CCrywolfAltarInfo::GetRemainContractCount, COMDAT
; _this$ = ecx

; 42   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00000	b8 02 00 00 00	 mov	 eax, 2
  00005	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]

; 43   : 		return (iRemainCount<0)?0:iRemainCount;

  00008	b9 00 00 00 00	 mov	 ecx, 0
  0000d	0f 98 c1	 sets	 cl
  00010	49		 dec	 ecx
  00011	23 c1		 and	 eax, ecx

; 44   : 	}

  00013	c3		 ret	 0
?GetRemainContractCount@CCrywolfAltarInfo@@QAEHXZ ENDP	; CCrywolfAltarInfo::GetRemainContractCount
_TEXT	ENDS
PUBLIC	?SetAltarState@CCrywolfAltarInfo@@QAEXH@Z	; CCrywolfAltarInfo::SetAltarState
; Function compile flags: /Ogtp
;	COMDAT ?SetAltarState@CCrywolfAltarInfo@@QAEXH@Z
_TEXT	SEGMENT
_iState$ = 8						; size = 4
?SetAltarState@CCrywolfAltarInfo@@QAEXH@Z PROC		; CCrywolfAltarInfo::SetAltarState, COMDAT
; _this$ = ecx

; 47   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 		this->m_iAltarState = iState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iState$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 49   : 	}

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetAltarState@CCrywolfAltarInfo@@QAEXH@Z ENDP		; CCrywolfAltarInfo::SetAltarState
_TEXT	ENDS
PUBLIC	?GetAltarState@CCrywolfAltarInfo@@QAEHXZ	; CCrywolfAltarInfo::GetAltarState
; Function compile flags: /Ogtp
;	COMDAT ?GetAltarState@CCrywolfAltarInfo@@QAEHXZ
_TEXT	SEGMENT
?GetAltarState@CCrywolfAltarInfo@@QAEHXZ PROC		; CCrywolfAltarInfo::GetAltarState, COMDAT
; _this$ = ecx

; 53   : 		return this->m_iAltarState;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 54   : 	}

  00002	c3		 ret	 0
?GetAltarState@CCrywolfAltarInfo@@QAEHXZ ENDP		; CCrywolfAltarInfo::GetAltarState
_TEXT	ENDS
PUBLIC	?SetAltarIndex@CCrywolfAltarInfo@@QAEXH@Z	; CCrywolfAltarInfo::SetAltarIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetAltarIndex@CCrywolfAltarInfo@@QAEXH@Z
_TEXT	SEGMENT
_iAltarIndex$ = 8					; size = 4
?SetAltarIndex@CCrywolfAltarInfo@@QAEXH@Z PROC		; CCrywolfAltarInfo::SetAltarIndex, COMDAT
; _this$ = ecx

; 57   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 58   : 		this->m_iAltarIndex = iAltarIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iAltarIndex$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 59   : 	}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAltarIndex@CCrywolfAltarInfo@@QAEXH@Z ENDP		; CCrywolfAltarInfo::SetAltarIndex
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CCrywolfAltar@@6B@				; CCrywolfAltar::`vftable'
PUBLIC	??1CCrywolfAltar@@UAE@XZ			; CCrywolfAltar::~CCrywolfAltar
PUBLIC	??_R4CCrywolfAltar@@6B@				; CCrywolfAltar::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrywolfAltar@@@8			; CCrywolfAltar `RTTI Type Descriptor'
PUBLIC	??_R3CCrywolfAltar@@8				; CCrywolfAltar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrywolfAltar@@8				; CCrywolfAltar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrywolfAltar@@8			; CCrywolfAltar::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCrywolfAltar@@UAEPAXI@Z:PROC		; CCrywolfAltar::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCrywolfAltar@@8
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrywolfAltar@@8 DD FLAT:??_R0?AVCCrywolfAltar@@@8 ; CCrywolfAltar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrywolfAltar@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrywolfAltar@@8
rdata$r	SEGMENT
??_R2CCrywolfAltar@@8 DD FLAT:??_R1A@?0A@EA@CCrywolfAltar@@8 ; CCrywolfAltar::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCrywolfAltar@@8
rdata$r	SEGMENT
??_R3CCrywolfAltar@@8 DD 00H				; CCrywolfAltar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCrywolfAltar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrywolfAltar@@@8
_DATA	SEGMENT
??_R0?AVCCrywolfAltar@@@8 DD FLAT:??_7type_info@@6B@	; CCrywolfAltar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrywolfAltar@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCrywolfAltar@@6B@
rdata$r	SEGMENT
??_R4CCrywolfAltar@@6B@ DD 00H				; CCrywolfAltar::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrywolfAltar@@@8
	DD	FLAT:??_R3CCrywolfAltar@@8
rdata$r	ENDS
;	COMDAT ??_7CCrywolfAltar@@6B@
CONST	SEGMENT
??_7CCrywolfAltar@@6B@ DD FLAT:??_R4CCrywolfAltar@@6B@	; CCrywolfAltar::`vftable'
	DD	FLAT:??_ECCrywolfAltar@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CCrywolfAltar@@UAE@XZ
_TEXT	SEGMENT
??1CCrywolfAltar@@UAE@XZ PROC				; CCrywolfAltar::~CCrywolfAltar, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCrywolfAltar@@6B@

; 24   : 	return;
; 25   : }

  00006	c3		 ret	 0
??1CCrywolfAltar@@UAE@XZ ENDP				; CCrywolfAltar::~CCrywolfAltar
_TEXT	ENDS
PUBLIC	?GetAltarState@CCrywolfAltar@@QAEHH@Z		; CCrywolfAltar::GetAltarState
; Function compile flags: /Ogtp
;	COMDAT ?GetAltarState@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAltarState@CCrywolfAltar@@QAEHH@Z PROC		; CCrywolfAltar::GetAltarState, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 29   : 	int iAltarState = 0;
; 30   : 
; 31   : 	switch ( iClass )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iClass$[ebp]
  00006	81 c2 33 ff ff
	ff		 add	 edx, -205		; ffffff33H
  0000c	33 c0		 xor	 eax, eax
  0000e	83 fa 04	 cmp	 edx, 4
  00011	77 26		 ja	 SHORT $LN6@GetAltarSt
  00013	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN20@GetAltarSt[edx*4]
$LN5@GetAltarSt:

; 32   : 	{
; 33   : 		case 205:
; 34   : 			iAltarState = this->m_AltarInfo[0].GetAltarState();

  0001a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 47   : 			break;
; 48   : 	}
; 49   : 
; 50   : 	return iAltarState;
; 51   : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN4@GetAltarSt:

; 35   : 			break;
; 36   : 		case 206:
; 37   : 			iAltarState = this->m_AltarInfo[1].GetAltarState();

  00021	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]

; 47   : 			break;
; 48   : 	}
; 49   : 
; 50   : 	return iAltarState;
; 51   : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN3@GetAltarSt:

; 38   : 			break;
; 39   : 		case 207:
; 40   : 			iAltarState = this->m_AltarInfo[2].GetAltarState();

  00028	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 47   : 			break;
; 48   : 	}
; 49   : 
; 50   : 	return iAltarState;
; 51   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN2@GetAltarSt:

; 41   : 			break;
; 42   : 		case 208:
; 43   : 			iAltarState = this->m_AltarInfo[3].GetAltarState();

  0002f	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 47   : 			break;
; 48   : 	}
; 49   : 
; 50   : 	return iAltarState;
; 51   : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN1@GetAltarSt:

; 44   : 			break;
; 45   : 		case 209:
; 46   : 			iAltarState = this->m_AltarInfo[4].GetAltarState();

  00036	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
$LN6@GetAltarSt:

; 47   : 			break;
; 48   : 	}
; 49   : 
; 50   : 	return iAltarState;
; 51   : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
  0003d	8d 49 00	 npad	 3
$LN20@GetAltarSt:
  00040	00 00 00 00	 DD	 $LN5@GetAltarSt
  00044	00 00 00 00	 DD	 $LN4@GetAltarSt
  00048	00 00 00 00	 DD	 $LN3@GetAltarSt
  0004c	00 00 00 00	 DD	 $LN2@GetAltarSt
  00050	00 00 00 00	 DD	 $LN1@GetAltarSt
?GetAltarState@CCrywolfAltar@@QAEHH@Z ENDP		; CCrywolfAltar::GetAltarState
_TEXT	ENDS
PUBLIC	?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount
; Function compile flags: /Ogtp
;	COMDAT ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z PROC ; CCrywolfAltar::GetAltarRemainContractCount, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	int iAltarRemainContractCount = 0;
; 56   : 
; 57   : 	switch ( iClass )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iClass$[ebp]
  00006	81 c2 33 ff ff
	ff		 add	 edx, -205		; ffffff33H
  0000c	33 c0		 xor	 eax, eax
  0000e	83 fa 04	 cmp	 edx, 4
  00011	77 79		 ja	 SHORT $LN6@GetAltarRe
  00013	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN21@GetAltarRe[edx*4]
$LN5@GetAltarRe:

; 58   : 	{
; 59   : 		case 205:
; 60   : 			iAltarRemainContractCount = this->m_AltarInfo[0].GetRemainContractCount();

  0001a	b8 02 00 00 00	 mov	 eax, 2
  0001f	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]

; 70   : 			break;
; 71   : 		case 209:
; 72   : 			iAltarRemainContractCount = this->m_AltarInfo[4].GetRemainContractCount();

  00022	b9 00 00 00 00	 mov	 ecx, 0
  00027	0f 98 c1	 sets	 cl
  0002a	49		 dec	 ecx
  0002b	23 c1		 and	 eax, ecx

; 73   : 			break;
; 74   : 	}
; 75   : 
; 76   : 	return iAltarRemainContractCount;
; 77   : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN4@GetAltarRe:

; 61   : 			break;
; 62   : 		case 206:
; 63   : 			iAltarRemainContractCount = this->m_AltarInfo[1].GetRemainContractCount();

  00031	b8 02 00 00 00	 mov	 eax, 2
  00036	2b 41 2c	 sub	 eax, DWORD PTR [ecx+44]
  00039	ba 00 00 00 00	 mov	 edx, 0
  0003e	0f 98 c2	 sets	 dl
  00041	4a		 dec	 edx
  00042	23 c2		 and	 eax, edx

; 73   : 			break;
; 74   : 	}
; 75   : 
; 76   : 	return iAltarRemainContractCount;
; 77   : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN3@GetAltarRe:

; 64   : 			break;
; 65   : 		case 207:
; 66   : 			iAltarRemainContractCount = this->m_AltarInfo[2].GetRemainContractCount();

  00048	b8 02 00 00 00	 mov	 eax, 2
  0004d	2b 41 48	 sub	 eax, DWORD PTR [ecx+72]

; 70   : 			break;
; 71   : 		case 209:
; 72   : 			iAltarRemainContractCount = this->m_AltarInfo[4].GetRemainContractCount();

  00050	b9 00 00 00 00	 mov	 ecx, 0
  00055	0f 98 c1	 sets	 cl
  00058	49		 dec	 ecx
  00059	23 c1		 and	 eax, ecx

; 73   : 			break;
; 74   : 	}
; 75   : 
; 76   : 	return iAltarRemainContractCount;
; 77   : }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN2@GetAltarRe:

; 67   : 			break;
; 68   : 		case 208:
; 69   : 			iAltarRemainContractCount = this->m_AltarInfo[3].GetRemainContractCount();

  0005f	b8 02 00 00 00	 mov	 eax, 2
  00064	2b 41 64	 sub	 eax, DWORD PTR [ecx+100]
  00067	ba 00 00 00 00	 mov	 edx, 0
  0006c	0f 98 c2	 sets	 dl
  0006f	4a		 dec	 edx
  00070	23 c2		 and	 eax, edx

; 73   : 			break;
; 74   : 	}
; 75   : 
; 76   : 	return iAltarRemainContractCount;
; 77   : }

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN1@GetAltarRe:

; 70   : 			break;
; 71   : 		case 209:
; 72   : 			iAltarRemainContractCount = this->m_AltarInfo[4].GetRemainContractCount();

  00076	b8 02 00 00 00	 mov	 eax, 2
  0007b	2b 81 80 00 00
	00		 sub	 eax, DWORD PTR [ecx+128]
  00081	b9 00 00 00 00	 mov	 ecx, 0
  00086	0f 98 c1	 sets	 cl
  00089	49		 dec	 ecx
  0008a	23 c1		 and	 eax, ecx
$LN6@GetAltarRe:

; 73   : 			break;
; 74   : 	}
; 75   : 
; 76   : 	return iAltarRemainContractCount;
; 77   : }

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN21@GetAltarRe:
  00090	00 00 00 00	 DD	 $LN5@GetAltarRe
  00094	00 00 00 00	 DD	 $LN4@GetAltarRe
  00098	00 00 00 00	 DD	 $LN3@GetAltarRe
  0009c	00 00 00 00	 DD	 $LN2@GetAltarRe
  000a0	00 00 00 00	 DD	 $LN1@GetAltarRe
?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ENDP ; CCrywolfAltar::GetAltarRemainContractCount
_TEXT	ENDS
PUBLIC	?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z		; CCrywolfAltar::GetAlatarNumber
; Function compile flags: /Ogtp
;	COMDAT ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z PROC		; CCrywolfAltar::GetAlatarNumber, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	int iAltarNumber = 0;
; 82   : 
; 83   : 	switch ( iClass )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iClass$[ebp]
  00006	81 c1 33 ff ff
	ff		 add	 ecx, -205		; ffffff33H
  0000c	33 c0		 xor	 eax, eax
  0000e	83 f9 04	 cmp	 ecx, 4
  00011	77 2d		 ja	 SHORT $LN6@GetAlatarN
  00013	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN10@GetAlatarN[ecx*4]
$LN5@GetAlatarN:

; 84   : 	{
; 85   : 		case 205:
; 86   : 			iAltarNumber = 0;

  0001a	33 c0		 xor	 eax, eax

; 99   : 			break;
; 100  : 	}
; 101  : 
; 102  : 	return iAltarNumber;
; 103  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN4@GetAlatarN:

; 87   : 			break;
; 88   : 		case 206:
; 89   : 			iAltarNumber = 1;

  00020	b8 01 00 00 00	 mov	 eax, 1

; 99   : 			break;
; 100  : 	}
; 101  : 
; 102  : 	return iAltarNumber;
; 103  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN3@GetAlatarN:

; 90   : 			break;
; 91   : 		case 207:
; 92   : 			iAltarNumber = 2;

  00029	b8 02 00 00 00	 mov	 eax, 2

; 99   : 			break;
; 100  : 	}
; 101  : 
; 102  : 	return iAltarNumber;
; 103  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN2@GetAlatarN:

; 93   : 			break;
; 94   : 		case 208:
; 95   : 			iAltarNumber = 3;

  00032	b8 03 00 00 00	 mov	 eax, 3

; 99   : 			break;
; 100  : 	}
; 101  : 
; 102  : 	return iAltarNumber;
; 103  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN1@GetAlatarN:

; 96   : 			break;
; 97   : 		case 209:
; 98   : 			iAltarNumber = 4;

  0003b	b8 04 00 00 00	 mov	 eax, 4
$LN6@GetAlatarN:

; 99   : 			break;
; 100  : 	}
; 101  : 
; 102  : 	return iAltarNumber;
; 103  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN10@GetAlatarN:
  00044	00 00 00 00	 DD	 $LN5@GetAlatarN
  00048	00 00 00 00	 DD	 $LN4@GetAlatarN
  0004c	00 00 00 00	 DD	 $LN3@GetAlatarN
  00050	00 00 00 00	 DD	 $LN2@GetAlatarN
  00054	00 00 00 00	 DD	 $LN1@GetAlatarN
?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ENDP		; CCrywolfAltar::GetAlatarNumber
_TEXT	ENDS
PUBLIC	?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z	; CCrywolfAltar::GetAltarUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z PROC		; CCrywolfAltar::GetAltarUserIndex, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 	int iUserIndex = -1;
; 108  : 
; 109  : 	switch ( iClass )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iClass$[ebp]
  00006	81 c2 33 ff ff
	ff		 add	 edx, -205		; ffffff33H
  0000c	83 c8 ff	 or	 eax, -1
  0000f	83 fa 04	 cmp	 edx, 4
  00012	77 26		 ja	 SHORT $LN6@GetAltarUs
  00014	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@GetAltarUs[edx*4]
$LN5@GetAltarUs:

; 110  : 	{
; 111  : 		case 205:
; 112  : 			iUserIndex = this->m_AltarInfo[0].m_iUserIndex;

  0001b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 125  : 			break;
; 126  : 	}
; 127  : 
; 128  : 	return iUserIndex;
; 129  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN4@GetAltarUs:

; 113  : 			break;
; 114  : 		case 206:
; 115  : 			iUserIndex = this->m_AltarInfo[1].m_iUserIndex;

  00022	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 125  : 			break;
; 126  : 	}
; 127  : 
; 128  : 	return iUserIndex;
; 129  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN3@GetAltarUs:

; 116  : 			break;
; 117  : 		case 207:
; 118  : 			iUserIndex = this->m_AltarInfo[2].m_iUserIndex;

  00029	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]

; 125  : 			break;
; 126  : 	}
; 127  : 
; 128  : 	return iUserIndex;
; 129  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN2@GetAltarUs:

; 119  : 			break;
; 120  : 		case 208:
; 121  : 			iUserIndex = this->m_AltarInfo[3].m_iUserIndex;

  00030	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]

; 125  : 			break;
; 126  : 	}
; 127  : 
; 128  : 	return iUserIndex;
; 129  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN1@GetAltarUs:

; 122  : 			break;
; 123  : 		case 209:
; 124  : 			iUserIndex = this->m_AltarInfo[4].m_iUserIndex;

  00037	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
$LN6@GetAltarUs:

; 125  : 			break;
; 126  : 	}
; 127  : 
; 128  : 	return iUserIndex;
; 129  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
  0003e	8b ff		 npad	 2
$LN10@GetAltarUs:
  00040	00 00 00 00	 DD	 $LN5@GetAltarUs
  00044	00 00 00 00	 DD	 $LN4@GetAltarUs
  00048	00 00 00 00	 DD	 $LN3@GetAltarUs
  0004c	00 00 00 00	 DD	 $LN2@GetAltarUs
  00050	00 00 00 00	 DD	 $LN1@GetAltarUs
?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ENDP		; CCrywolfAltar::GetAltarUserIndex
_TEXT	ENDS
PUBLIC	??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@ ; `string'
PUBLIC	?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::SetAltarValidContract
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ:PROC ; CCrywolfUtil::SendCrywolfUserAnyMsg
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.h
CONST	SEGMENT
??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@ DB '['
	DB	' Crywolf ][Altar Op.]  [%s][%s] Set Valid Contract Altar[%d]', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.cpp
CONST	ENDS
;	COMDAT ?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iAltarObjIndex$ = 8					; size = 4
_iClass$ = 12						; size = 4
?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z PROC	; CCrywolfAltar::SetAltarValidContract, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	50		 push	 eax
  00009	8b d1		 mov	 edx, ecx
  0000b	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber
  00010	8b f8		 mov	 edi, eax

; 134  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  00012	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  00019	2b cf		 sub	 ecx, edi

; 135  : 
; 136  : 	if ( AltarInfo->GetAltarState() != 2 )

  0001b	83 7c 8a 04 02	 cmp	 DWORD PTR [edx+ecx*4+4], 2
  00020	8d 74 8a 04	 lea	 esi, DWORD PTR [edx+ecx*4+4]
  00024	0f 85 aa 00 00
	00		 jne	 $LN1@SetAltarVa

; 137  : 	{
; 138  : 		return;
; 139  : 	}
; 140  : 
; 141  : 	if ( AltarInfo->m_dwValidContractTime < GetTickCount() )

  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00030	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00033	0f 83 9b 00 00
	00		 jae	 $LN1@SetAltarVa

; 142  : 	{
; 143  : 		MsgOutput(AltarInfo->m_iUserIndex, lMsg.Get(MSGGET(12, 251)), iAltarNumber);

  00039	57		 push	 edi
  0003a	68 fb 0c 00 00	 push	 3323			; 00000cfbH
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00044	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00049	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0004c	50		 push	 eax
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 144  : 
; 145  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 252)), gObj[AltarInfo->m_iUserIndex].Name, iAltarNumber);

  00053	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	57		 push	 edi
  00066	8d 54 08 77	 lea	 edx, DWORD PTR [eax+ecx+119]
  0006a	52		 push	 edx
  0006b	68 fc 0c 00 00	 push	 3324			; 00000cfcH
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00075	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0007a	50		 push	 eax
  0007b	6a 02		 push	 2
  0007d	68 00 00 00 00	 push	 OFFSET _UTIL
  00082	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 146  : 
; 147  : 		LogAddTD("[ Crywolf ][Altar Op.]  [%s][%s] Set Valid Contract Altar[%d]", gObj[AltarInfo->m_iUserIndex].AccountID, gObj[AltarInfo->m_iUserIndex].Name, iAltarNumber);

  00087	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0008a	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00090	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00096	57		 push	 edi
  00097	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  0009a	52		 push	 edx
  0009b	83 c0 6c	 add	 eax, 108		; 0000006cH
  0009e	50		 push	 eax
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 148  : 
; 149  : 		AltarInfo->SetAltarState(1);
; 150  : 
; 151  : 		gObjApplyBuffEffectDuration(&gObj[iAltarObjIndex], AT_CW_ALTAR_STATUS, 0, 0, 0, 0, -10);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _iAltarObjIndex$[ebp]
  000ad	6a f6		 push	 -10			; fffffff6H
  000af	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000b5	6a 00		 push	 0
  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  000c1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c7	6a 00		 push	 0
  000c9	6a 17		 push	 23			; 00000017H
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  000d1	83 c4 40	 add	 esp, 64			; 00000040H
$LN1@SetAltarVa:
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi

; 152  : 	}
; 153  : }

  000d6	5d		 pop	 ebp
  000d7	c2 08 00	 ret	 8
?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z ENDP	; CCrywolfAltar::SetAltarValidContract
_TEXT	ENDS
PUBLIC	?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z	; CCrywolfAltar::CheckAltarValidContract
; Function compile flags: /Ogtp
;	COMDAT ?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z PROC	; CCrywolfAltar::CheckAltarValidContract, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 157  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00003	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	50		 push	 eax
  00007	8b d1		 mov	 edx, ecx
  00009	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 158  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  0000e	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00015	2b c8		 sub	 ecx, eax

; 159  : 
; 160  : 	if ( AltarInfo->GetAltarState() == 1 )

  00017	33 c0		 xor	 eax, eax
  00019	83 7c 8a 04 01	 cmp	 DWORD PTR [edx+ecx*4+4], 1
  0001e	0f 94 c0	 sete	 al

; 161  : 	{
; 162  : 		return TRUE;
; 163  : 	}
; 164  : 
; 165  : 	return FALSE;
; 166  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z ENDP	; CCrywolfAltar::CheckAltarValidContract
_TEXT	ENDS
PUBLIC	??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z	; CCrywolfAltar::SetAltarUserIndex
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.h
CONST	SEGMENT
??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	' Crywolf ][Altar Op.] [%s][%s] Attempt to contract Altar[%d]', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.cpp
CONST	ENDS
;	COMDAT ?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z
_TEXT	SEGMENT
tv271 = -4						; size = 4
_iAltarObjIndex$ = 8					; size = 4
_iAltarNumber$ = 12					; size = 4
_iClass$ = 12						; size = 4
tv280 = 16						; size = 4
_iUserIndex$ = 16					; size = 4
?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z PROC	; CCrywolfAltar::SetAltarUserIndex, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 170  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _iClass$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber
  00012	8b f8		 mov	 edi, eax

; 171  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  00014	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  0001b	2b cf		 sub	 ecx, edi
  0001d	89 7d 0c	 mov	 DWORD PTR _iAltarNumber$[ebp], edi
  00020	8d 74 8e 04	 lea	 esi, DWORD PTR [esi+ecx*4+4]

; 172  : 	DWORD dwCurrentTime = GetTickCount();

  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 173  : 
; 174  : 	if ( gObjIsConnected(AltarInfo->m_iUserIndex) != FALSE )

  0002a	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002d	52		 push	 edx
  0002e	8b d8		 mov	 ebx, eax
  00030	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00035	83 c4 04	 add	 esp, 4
  00038	85 c0		 test	 eax, eax
  0003a	74 28		 je	 SHORT $LN5@SetAltarUs

; 175  : 	{
; 176  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 253)), iAltarNumber);

  0003c	57		 push	 edi
  0003d	68 fd 0c 00 00	 push	 3325			; 00000cfdH
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00047	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0004c	50		 push	 eax
  0004d	8b 45 10	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  00050	50		 push	 eax

; 193  : 	{
; 194  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  00051	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 195  : 		return FALSE;

  0005b	33 c0		 xor	 eax, eax
  0005d	5b		 pop	 ebx

; 215  : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 0c 00	 ret	 12			; 0000000cH
$LN5@SetAltarUs:

; 177  : 		return FALSE;
; 178  : 	}
; 179  : 
; 180  : 	if ( (dwCurrentTime-AltarInfo->m_dwLastValidContractTime) < 10000 )

  00064	8b cb		 mov	 ecx, ebx
  00066	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
  00069	81 f9 10 27 00
	00		 cmp	 ecx, 10000		; 00002710H
  0006f	73 28		 jae	 SHORT $LN4@SetAltarUs

; 181  : 	{
; 182  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 254)), iAltarNumber);

  00071	57		 push	 edi
  00072	68 fe 0c 00 00	 push	 3326			; 00000cfeH
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0007c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00081	8b 55 10	 mov	 edx, DWORD PTR _iUserIndex$[ebp]
  00084	50		 push	 eax
  00085	52		 push	 edx

; 193  : 	{
; 194  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  00086	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi

; 195  : 		return FALSE;

  00090	33 c0		 xor	 eax, eax
  00092	5b		 pop	 ebx

; 215  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN4@SetAltarUs:

; 183  : 		return FALSE;
; 184  : 	}
; 185  : 
; 186  : 	if ( AltarInfo->m_iContractCount > MAX_ALTAR_CONTRACTS ) 

  00099	83 7e 0c 02	 cmp	 DWORD PTR [esi+12], 2
  0009d	7e 28		 jle	 SHORT $LN3@SetAltarUs

; 187  : 	{
; 188  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 255)), iAltarNumber);

  0009f	57		 push	 edi
  000a0	68 ff 0c 00 00	 push	 3327			; 00000cffH
  000a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000aa	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000af	50		 push	 eax
  000b0	8b 45 10	 mov	 eax, DWORD PTR _iUserIndex$[ebp]
  000b3	50		 push	 eax

; 193  : 	{
; 194  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  000b4	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi

; 195  : 		return FALSE;

  000be	33 c0		 xor	 eax, eax
  000c0	5b		 pop	 ebx

; 215  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
$LN3@SetAltarUs:

; 189  : 		return FALSE;
; 190  : 	}
; 191  : 
; 192  : 	if ( abs(gObj[iAltarObjIndex].Y - gObj[iUserIndex].Y) > 0 || abs(gObj[iAltarObjIndex].X - gObj[iUserIndex].X) > 0 )

  000c7	8b 7d 10	 mov	 edi, DWORD PTR _iUserIndex$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _iAltarObjIndex$[ebp]
  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d2	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000d8	8b d7		 mov	 edx, edi
  000da	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000e0	03 d0		 add	 edx, eax
  000e2	0f bf 84 01 46
	01 00 00	 movsx	 eax, WORD PTR [ecx+eax+326]
  000ea	89 55 10	 mov	 DWORD PTR tv280[ebp], edx
  000ed	0f bf 92 46 01
	00 00		 movsx	 edx, WORD PTR [edx+326]
  000f4	2b c2		 sub	 eax, edx
  000f6	99		 cdq
  000f7	33 c2		 xor	 eax, edx
  000f9	2b c2		 sub	 eax, edx
  000fb	85 c0		 test	 eax, eax
  000fd	0f 8f fa 00 00
	00		 jg	 $LN1@SetAltarUs
  00103	8b 45 10	 mov	 eax, DWORD PTR tv280[ebp]
  00106	0f bf 90 44 01
	00 00		 movsx	 edx, WORD PTR [eax+324]
  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00112	0f bf 84 01 44
	01 00 00	 movsx	 eax, WORD PTR [ecx+eax+324]
  0011a	2b c2		 sub	 eax, edx
  0011c	99		 cdq
  0011d	33 c2		 xor	 eax, edx
  0011f	2b c2		 sub	 eax, edx
  00121	85 c0		 test	 eax, eax
  00123	0f 8f d4 00 00
	00		 jg	 $LN1@SetAltarUs

; 196  : 	}
; 197  : 
; 198  : 	AltarInfo->SetAltarState(2);
; 199  : 	AltarInfo->m_iUserIndex = iUserIndex;
; 200  : 	AltarInfo->m_dwAppliedContractTime = dwCurrentTime;
; 201  : 	AltarInfo->m_dwValidContractTime = dwCurrentTime + 5000;
; 202  : 	AltarInfo->m_dwLastValidContractTime = dwCurrentTime;
; 203  : 	AltarInfo->m_iContractCount++;

  00129	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 204  : 
; 205  : 	gObjApplyBuffEffectDuration(&gObj[iAltarObjIndex], AT_CW_ALTAR_ATTEMPT, 0, 0, 0, 0, -10);

  0012c	6a f6		 push	 -10			; fffffff6H
  0012e	6a 00		 push	 0
  00130	6a 00		 push	 0
  00132	6a 00		 push	 0
  00134	8d 93 88 13 00
	00		 lea	 edx, DWORD PTR [ebx+5000]
  0013a	40		 inc	 eax
  0013b	c7 06 02 00 00
	00		 mov	 DWORD PTR [esi], 2
  00141	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00144	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00147	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0014a	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0014d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00150	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00156	6a 00		 push	 0
  00158	6a 18		 push	 24			; 00000018H
  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 206  : 
; 207  : 	UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(13, 1)), gObj[AltarInfo->m_iUserIndex].Name, iAltarNumber);

  00160	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00169	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0016f	8b 5d 0c	 mov	 ebx, DWORD PTR _iAltarNumber$[ebp]
  00172	83 c4 1c	 add	 esp, 28			; 0000001cH
  00175	53		 push	 ebx
  00176	8d 54 08 77	 lea	 edx, DWORD PTR [eax+ecx+119]
  0017a	52		 push	 edx
  0017b	68 01 0d 00 00	 push	 3329			; 00000d01H
  00180	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00185	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0018a	50		 push	 eax
  0018b	6a 02		 push	 2
  0018d	68 00 00 00 00	 push	 OFFSET _UTIL
  00192	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 208  : 
; 209  : 	LogAddTD("[ Crywolf ][Altar Op.] [%s][%s] Attempt to contract Altar[%d]", gObj[AltarInfo->m_iUserIndex].AccountID, gObj[AltarInfo->m_iUserIndex].Name, iAltarNumber);

  00197	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0019a	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  001a0	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a6	53		 push	 ebx
  001a7	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  001aa	52		 push	 edx
  001ab	83 c0 6c	 add	 eax, 108		; 0000006cH
  001ae	50		 push	 eax
  001af	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  001b4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001ba	83 c4 24	 add	 esp, 36			; 00000024H

; 210  : 
; 211  : 	MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 2)));

  001bd	68 02 0d 00 00	 push	 3330			; 00000d02H
  001c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001c7	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001cc	50		 push	 eax
  001cd	57		 push	 edi
  001ce	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  001d3	83 c4 08	 add	 esp, 8

; 212  : 	MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 3)));

  001d6	68 03 0d 00 00	 push	 3331			; 00000d03H
  001db	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001e0	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001e5	50		 push	 eax
  001e6	57		 push	 edi
  001e7	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  001ec	83 c4 08	 add	 esp, 8
  001ef	5f		 pop	 edi
  001f0	5e		 pop	 esi

; 213  : 
; 214  : 	return TRUE;

  001f1	b8 01 00 00 00	 mov	 eax, 1
  001f6	5b		 pop	 ebx

; 215  : }

  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c2 0c 00	 ret	 12			; 0000000cH
$LN1@SetAltarUs:

; 193  : 	{
; 194  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  001fd	8b 45 0c	 mov	 eax, DWORD PTR _iAltarNumber$[ebp]
  00200	50		 push	 eax
  00201	68 00 0d 00 00	 push	 3328			; 00000d00H
  00206	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0020b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00210	50		 push	 eax
  00211	57		 push	 edi
  00212	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00217	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi

; 195  : 		return FALSE;

  0021c	33 c0		 xor	 eax, eax
  0021e	5b		 pop	 ebx

; 215  : }

  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c2 0c 00	 ret	 12			; 0000000cH
?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z ENDP	; CCrywolfAltar::SetAltarUserIndex
_TEXT	ENDS
PUBLIC	??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::ResetAltarUserIndex
;	COMDAT ??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.h
CONST	SEGMENT
??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	' Crywolf ][Altar Op.] [%s][%s] Remove contract Altar[%d]', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.cpp
CONST	ENDS
;	COMDAT ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iAltarObjIndex$ = 8					; size = 4
_iClass$ = 12						; size = 4
?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z PROC	; CCrywolfAltar::ResetAltarUserIndex, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	50		 push	 eax
  00009	8b d1		 mov	 edx, ecx
  0000b	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber
  00010	8b f8		 mov	 edi, eax

; 220  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  00012	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  00019	2b cf		 sub	 ecx, edi
  0001b	8d 74 8a 04	 lea	 esi, DWORD PTR [edx+ecx*4+4]

; 221  : 
; 222  : 	if ( gObjIsConnected(AltarInfo->m_iUserIndex) != FALSE )

  0001f	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00028	83 c4 04	 add	 esp, 4
  0002b	85 c0		 test	 eax, eax
  0002d	74 40		 je	 SHORT $LN3@ResetAltar

; 223  : 	{
; 224  : 		MsgOutput(AltarInfo->m_iUserIndex, lMsg.Get(MSGGET(13, 4)), iAltarNumber);

  0002f	57		 push	 edi
  00030	68 04 0d 00 00	 push	 3332			; 00000d04H
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003a	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0003f	50		 push	 eax
  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 225  : 		LogAddTD("[ Crywolf ][Altar Op.] [%s][%s] Remove contract Altar[%d]", gObj[AltarInfo->m_iUserIndex].AccountID, gObj[AltarInfo->m_iUserIndex].Name, iAltarNumber);

  00049	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00052	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00058	57		 push	 edi
  00059	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  0005c	51		 push	 ecx
  0005d	83 c0 6c	 add	 eax, 108		; 0000006cH
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006c	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@ResetAltar:

; 226  : 	}
; 227  : 
; 228  : 	if ( AltarInfo->m_iContractCount >= MAX_ALTAR_CONTRACTS )

  0006f	83 7e 0c 02	 cmp	 DWORD PTR [esi+12], 2

; 229  : 	{
; 230  : 		AltarInfo->SetAltarState(3);
; 231  : 		gObjApplyBuffEffectDuration(&gObj[iAltarObjIndex], AT_CW_ALTAR_INACTIVE, 0, 0, 0, 0, -10);

  00073	6a f6		 push	 -10			; fffffff6H
  00075	6a 00		 push	 0
  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	7c 1f		 jl	 SHORT $LN2@ResetAltar
  0007f	8b 55 08	 mov	 edx, DWORD PTR _iAltarObjIndex$[ebp]
  00082	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00088	c7 06 03 00 00
	00		 mov	 DWORD PTR [esi], 3
  0008e	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00094	6a 16		 push	 22			; 00000016H
  00096	52		 push	 edx
  00097	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 232  : 	}
; 233  : 	else

  0009c	eb 1d		 jmp	 SHORT $LN10@ResetAltar
$LN2@ResetAltar:

; 234  : 	{
; 235  : 		gObjApplyBuffEffectDuration(&gObj[iAltarObjIndex], AT_CW_ALTAR_ACTIVE, 0, 0, 0, 0, -10);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _iAltarObjIndex$[ebp]
  000a1	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000a7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ad	6a 15		 push	 21			; 00000015H
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 236  : 		AltarInfo->SetAltarState(0);

  000b5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN10@ResetAltar:

; 237  : 	}
; 238  : 
; 239  : 	AltarInfo->m_iUserIndex = -1;

  000bb	83 c4 1c	 add	 esp, 28			; 0000001cH
  000be	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1

; 240  : 	AltarInfo->m_dwAppliedContractTime = 0;

  000c5	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 241  : 	AltarInfo->m_dwValidContractTime = 0;

  000cc	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 242  : 	AltarInfo->m_dwLastValidContractTime = GetTickCount();

  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000d9	5f		 pop	 edi
  000da	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000dd	5e		 pop	 esi

; 243  : }

  000de	5d		 pop	 ebp
  000df	c2 08 00	 ret	 8
?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ENDP	; CCrywolfAltar::ResetAltarUserIndex
_TEXT	ENDS
PUBLIC	?ResetAltar@CCrywolfAltar@@QAEXH@Z		; CCrywolfAltar::ResetAltar
EXTRN	?gObjClearStandardBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjClearStandardBuffEffect
; Function compile flags: /Ogtp
;	COMDAT ?ResetAltar@CCrywolfAltar@@QAEXH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?ResetAltar@CCrywolfAltar@@QAEXH@Z PROC			; CCrywolfAltar::ResetAltar, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00003	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b d1		 mov	 edx, ecx
  0000a	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 289  : 
; 290  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  0000f	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00016	2b c8		 sub	 ecx, eax

; 291  : 
; 292  : 	if ( AltarInfo->m_iAltarIndex == -1 )

  00018	8b 44 8a 08	 mov	 eax, DWORD PTR [edx+ecx*4+8]
  0001c	8d 74 8a 04	 lea	 esi, DWORD PTR [edx+ecx*4+4]
  00020	83 f8 ff	 cmp	 eax, -1
  00023	74 35		 je	 SHORT $LN4@ResetAltar@2

; 293  : 	{
; 294  : 		return;
; 295  : 	}
; 296  : 
; 297  : 	gObjClearStandardBuffEffect(&gObj[AltarInfo->m_iAltarIndex], AT_GENERAL);

  00025	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	6a 02		 push	 2
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?gObjClearStandardBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjClearStandardBuffEffect
  00039	83 c4 08	 add	 esp, 8

; 298  : 
; 299  : 	AltarInfo->Reset();

  0003c	33 c0		 xor	 eax, eax
  0003e	89 06		 mov	 DWORD PTR [esi], eax
  00040	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
  00047	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  0004e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00051	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00054	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00057	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN4@ResetAltar@2:
  0005a	5e		 pop	 esi

; 300  : }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?ResetAltar@CCrywolfAltar@@QAEXH@Z ENDP			; CCrywolfAltar::ResetAltar
_TEXT	ENDS
PUBLIC	?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::SetAltarViewState
; Function compile flags: /Ogtp
;	COMDAT ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
_iAltarState$ = 12					; size = 4
?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z PROC		; CCrywolfAltar::SetAltarViewState, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 313  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00003	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	50		 push	 eax
  00007	8b d1		 mov	 edx, ecx
  00009	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 314  : 
; 315  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  0000e	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00015	2b c8		 sub	 ecx, eax
  00017	8d 44 8a 04	 lea	 eax, DWORD PTR [edx+ecx*4+4]

; 316  : 
; 317  : 	if ( AltarInfo->m_iAltarIndex == -1 )

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	74 21		 je	 SHORT $LN2@SetAltarVi

; 318  : 	{
; 319  : 		return;
; 320  : 	}
; 321  : 
; 322  : 	gObjApplyBuffEffectDuration(&gObj[AltarInfo->m_iAltarIndex], AT_CW_ALTAR_ACTIVE, 0, 0, 0, 0, -10);

  00023	6a f6		 push	 -10			; fffffff6H
  00025	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	6a 15		 push	 21			; 00000015H
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00041	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@SetAltarVi:

; 323  : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ENDP		; CCrywolfAltar::SetAltarViewState
_TEXT	ENDS
PUBLIC	?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ	; CCrywolfAltar::GetContractedAltarCount
; Function compile flags: /Ogtp
;	COMDAT ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ
_TEXT	SEGMENT
?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ PROC	; CCrywolfAltar::GetContractedAltarCount, COMDAT
; _this$ = ecx

; 327  : 	int iContractedAltarCount = 0;
; 328  : 
; 329  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 330  : 	{
; 331  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 332  : 
; 333  : 		if ( AltarInfo->GetAltarState() != 1 )

  00000	ba 01 00 00 00	 mov	 edx, 1
  00005	33 c0		 xor	 eax, eax
  00007	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  0000a	75 02		 jne	 SHORT $LN3@GetContrac

; 334  : 		{
; 335  : 			continue;
; 336  : 		}
; 337  : 
; 338  : 		iContractedAltarCount++;

  0000c	8b c2		 mov	 eax, edx
$LN3@GetContrac:

; 327  : 	int iContractedAltarCount = 0;
; 328  : 
; 329  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 330  : 	{
; 331  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 332  : 
; 333  : 		if ( AltarInfo->GetAltarState() != 1 )

  0000e	39 51 20	 cmp	 DWORD PTR [ecx+32], edx
  00011	75 02		 jne	 SHORT $LN15@GetContrac

; 334  : 		{
; 335  : 			continue;
; 336  : 		}
; 337  : 
; 338  : 		iContractedAltarCount++;

  00013	03 c2		 add	 eax, edx
$LN15@GetContrac:

; 327  : 	int iContractedAltarCount = 0;
; 328  : 
; 329  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 330  : 	{
; 331  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 332  : 
; 333  : 		if ( AltarInfo->GetAltarState() != 1 )

  00015	39 51 3c	 cmp	 DWORD PTR [ecx+60], edx
  00018	75 02		 jne	 SHORT $LN17@GetContrac

; 334  : 		{
; 335  : 			continue;
; 336  : 		}
; 337  : 
; 338  : 		iContractedAltarCount++;

  0001a	03 c2		 add	 eax, edx
$LN17@GetContrac:

; 327  : 	int iContractedAltarCount = 0;
; 328  : 
; 329  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 330  : 	{
; 331  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 332  : 
; 333  : 		if ( AltarInfo->GetAltarState() != 1 )

  0001c	39 51 58	 cmp	 DWORD PTR [ecx+88], edx
  0001f	75 02		 jne	 SHORT $LN19@GetContrac

; 334  : 		{
; 335  : 			continue;
; 336  : 		}
; 337  : 
; 338  : 		iContractedAltarCount++;

  00021	03 c2		 add	 eax, edx
$LN19@GetContrac:

; 327  : 	int iContractedAltarCount = 0;
; 328  : 
; 329  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 330  : 	{
; 331  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 332  : 
; 333  : 		if ( AltarInfo->GetAltarState() != 1 )

  00023	39 51 74	 cmp	 DWORD PTR [ecx+116], edx
  00026	75 02		 jne	 SHORT $LN21@GetContrac

; 334  : 		{
; 335  : 			continue;
; 336  : 		}
; 337  : 
; 338  : 		iContractedAltarCount++;

  00028	03 c2		 add	 eax, edx
$LN21@GetContrac:

; 339  : 	}
; 340  : 
; 341  : 	return iContractedAltarCount;
; 342  : }

  0002a	c3		 ret	 0
?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ENDP	; CCrywolfAltar::GetContractedAltarCount
_TEXT	ENDS
PUBLIC	?GetPriestHPSum@CCrywolfAltar@@QAEHXZ		; CCrywolfAltar::GetPriestHPSum
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetPriestHPSum@CCrywolfAltar@@QAEHXZ
_TEXT	SEGMENT
?GetPriestHPSum@CCrywolfAltar@@QAEHXZ PROC		; CCrywolfAltar::GetPriestHPSum, COMDAT
; _this$ = ecx

; 345  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 346  : 	int iPriestHPSum = 0;

  00002	33 db		 xor	 ebx, ebx
  00004	57		 push	 edi
  00005	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
  00008	8d 7b 05	 lea	 edi, DWORD PTR [ebx+5]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@GetPriestH:

; 349  : 	{
; 350  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 351  : 
; 352  : 		if ( AltarInfo->GetAltarState() != 1 )

  00010	83 7e f8 01	 cmp	 DWORD PTR [esi-8], 1
  00014	75 2b		 jne	 SHORT $LN4@GetPriestH

; 353  : 		{
; 354  : 			continue;
; 355  : 		}
; 356  : 
; 357  : 		if ( !gObjIsConnected(AltarInfo->m_iUserIndex))

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c0		 test	 eax, eax
  00023	74 1c		 je	 SHORT $LN4@GetPriestH

; 358  : 		{
; 359  : 			continue;
; 360  : 		}
; 361  : 
; 362  : 		LPOBJ lpUserObj = &gObj[AltarInfo->m_iUserIndex];

  00025	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 363  : 
; 364  : 		iPriestHPSum += (int)lpUserObj->Life;

  00027	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00033	d9 84 11 fc 00
	00 00		 fld	 DWORD PTR [ecx+edx+252]
  0003a	e8 00 00 00 00	 call	 __ftol2_sse
  0003f	03 d8		 add	 ebx, eax
$LN4@GetPriestH:

; 347  : 
; 348  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)

  00041	83 c6 1c	 add	 esi, 28			; 0000001cH
  00044	4f		 dec	 edi
  00045	75 c9		 jne	 SHORT $LL5@GetPriestH

; 365  : 	}
; 366  : 
; 367  : 	return iPriestHPSum;

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	8b c3		 mov	 eax, ebx
  0004b	5b		 pop	 ebx

; 368  : }

  0004c	c3		 ret	 0
?GetPriestHPSum@CCrywolfAltar@@QAEHXZ ENDP		; CCrywolfAltar::GetPriestHPSum
_TEXT	ENDS
PUBLIC	?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ	; CCrywolfAltar::GetPriestMaxHPSum
EXTRN	?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjUpdateAppliedBuffEffect
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT ?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ
_TEXT	SEGMENT
tv146 = -8						; size = 4
_AddLife$209769 = -4					; size = 4
?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ PROC		; CCrywolfAltar::GetPriestMaxHPSum, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 372  : 	int iPriestHPSum = 0;

  00009	33 db		 xor	 ebx, ebx
  0000b	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  0000e	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR tv146[ebp], 5
$LL5@GetPriestM:

; 375  : 	{
; 376  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 377  : 
; 378  : 		if ( AltarInfo->GetAltarState() != 1 )

  00015	83 7f f8 01	 cmp	 DWORD PTR [edi-8], 1
  00019	75 4b		 jne	 SHORT $LN4@GetPriestM

; 379  : 		{
; 380  : 			continue;
; 381  : 		}
; 382  : 
; 383  : 		if ( !gObjIsConnected(AltarInfo->m_iUserIndex))

  0001b	8b 07		 mov	 eax, DWORD PTR [edi]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00023	83 c4 04	 add	 esp, 4
  00026	85 c0		 test	 eax, eax
  00028	74 3c		 je	 SHORT $LN4@GetPriestM

; 384  : 		{
; 385  : 			continue;
; 386  : 		}
; 387  : 
; 388  : 		LPOBJ lpUserObj = &gObj[AltarInfo->m_iUserIndex];

  0002a	8b 37		 mov	 esi, DWORD PTR [edi]
  0002c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00032	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 389  : 
; 390  : 		int AddLife = 0;
; 391  : 
; 392  : 		gObjUpdateAppliedBuffEffect(lpUserObj, AT_SWELL_LIFE, &AddLife, 0); //season 3.0 add-on

  00038	6a 00		 push	 0
  0003a	8d 4d fc	 lea	 ecx, DWORD PTR _AddLife$209769[ebp]
  0003d	51		 push	 ecx
  0003e	6a 08		 push	 8
  00040	56		 push	 esi
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _AddLife$209769[ebp], 0
  00048	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 393  : 
; 394  : 		iPriestHPSum += (int)(lpUserObj->AddLife + lpUserObj->MaxLife + AddLife);

  00050	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00056	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  0005c	da 45 fc	 fiadd	 DWORD PTR _AddLife$209769[ebp]
  0005f	e8 00 00 00 00	 call	 __ftol2_sse
  00064	03 d8		 add	 ebx, eax
$LN4@GetPriestM:

; 373  : 
; 374  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)

  00066	83 c7 1c	 add	 edi, 28			; 0000001cH
  00069	ff 4d f8	 dec	 DWORD PTR tv146[ebp]
  0006c	75 a7		 jne	 SHORT $LL5@GetPriestM

; 395  : 	}
; 396  : 
; 397  : 	return iPriestHPSum;

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b c3		 mov	 eax, ebx
  00072	5b		 pop	 ebx

; 398  : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ ENDP		; CCrywolfAltar::GetPriestMaxHPSum
_TEXT	ENDS
PUBLIC	?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z		; CCrywolfAltar::CrywolfAltarAct
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z PROC		; CCrywolfAltar::CrywolfAltarAct, COMDAT
; _this$ = ecx

; 401  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 402  : 	if ( !gObjIsConnected(iIndex))

  00005	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00008	56		 push	 esi
  00009	8b d9		 mov	 ebx, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	0f 84 64 01 00
	00		 je	 $LN10@CrywolfAlt

; 403  : 	{
; 404  : 		return;
; 405  : 	}
; 406  : 
; 407  : 	if ( gObj[iIndex].Type != OBJ_NPC || CRYWOLF_ALTAR_CLASS_RANGE(gObj[iIndex].Class) == FALSE )

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00020	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00026	66 83 7c 06 68
	03		 cmp	 WORD PTR [esi+eax+104], 3
  0002c	0f 85 4d 01 00
	00		 jne	 $LN10@CrywolfAlt
  00032	0f b7 8c 06 b8
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+184]
  0003a	b8 cd 00 00 00	 mov	 eax, 205		; 000000cdH
  0003f	66 3b c8	 cmp	 cx, ax
  00042	0f 82 37 01 00
	00		 jb	 $LN10@CrywolfAlt
  00048	ba d1 00 00 00	 mov	 edx, 209		; 000000d1H
  0004d	66 3b d1	 cmp	 dx, cx
  00050	1b c0		 sbb	 eax, eax
  00052	40		 inc	 eax
  00053	0f 84 26 01 00
	00		 je	 $LN10@CrywolfAlt

; 408  : 	{
; 409  : 		return;
; 410  : 	}
; 411  : 
; 412  : 	int iUserIndex = this->GetAltarUserIndex(gObj[iIndex].Class);

  00059	57		 push	 edi
  0005a	51		 push	 ecx
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex
  00062	8b f8		 mov	 edi, eax

; 413  : 
; 414  : 	if ( gObjIsConnected(iUserIndex) == FALSE )

  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0006a	83 c4 04	 add	 esp, 4
  0006d	85 c0		 test	 eax, eax
  0006f	75 2a		 jne	 SHORT $LN9@CrywolfAlt

; 415  : 	{
; 416  : 		if ( iUserIndex != -1 )

  00071	83 ff ff	 cmp	 edi, -1
  00074	0f 84 04 01 00
	00		 je	 $LN17@CrywolfAlt

; 417  : 		{
; 418  : 			this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00080	0f b7 94 0e b8
	00 00 00	 movzx	 edx, WORD PTR [esi+ecx+184]
  00088	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0008b	52		 push	 edx
  0008c	50		 push	 eax

; 449  : 		}
; 450  : 	}
; 451  : 	else
; 452  : 	{
; 453  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0008d	8b cb		 mov	 ecx, ebx
  0008f	e8 00 00 00 00	 call	 ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::ResetAltarUserIndex
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 454  : 	}
; 455  : }

  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
$LN9@CrywolfAlt:

; 419  : 		}
; 420  : 
; 421  : 		return;
; 422  : 	}
; 423  : 
; 424  : 	if ( gObjIsConnected(&gObj[iUserIndex]) == FALSE )

  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a1	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  000a7	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000b0	83 c4 04	 add	 esp, 4
  000b3	85 c0		 test	 eax, eax
  000b5	75 20		 jne	 SHORT $LN7@CrywolfAlt

; 425  : 	{
; 426  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bc	0f b7 8c 06 b8
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+184]
  000c4	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  000c7	51		 push	 ecx
  000c8	52		 push	 edx

; 449  : 		}
; 450  : 	}
; 451  : 	else
; 452  : 	{
; 453  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  000c9	8b cb		 mov	 ecx, ebx
  000cb	e8 00 00 00 00	 call	 ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::ResetAltarUserIndex
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx

; 454  : 	}
; 455  : }

  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
$LN7@CrywolfAlt:

; 427  : 		return;
; 428  : 	}
; 429  : 
; 430  : 	LPOBJ lpObj = &gObj[iIndex];

  000d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 431  : 	LPOBJ lpUserObj = &gObj[iUserIndex];
; 432  : 
; 433  : 	if ( lpUserObj->Live != FALSE && lpUserObj->MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE )

  000dd	80 7c 0f 6a 00	 cmp	 BYTE PTR [edi+ecx+106], 0
  000e2	0f 84 82 00 00
	00		 je	 $LN6@CrywolfAlt
  000e8	80 bc 0f 49 01
	00 00 22	 cmp	 BYTE PTR [edi+ecx+329], 34 ; 00000022H
  000f0	75 78		 jne	 SHORT $LN6@CrywolfAlt

; 434  : 	{
; 435  : 		if ( abs(lpObj->Y-lpUserObj->Y) <= 0 && abs(lpObj->X - lpUserObj->X) <= 0 )

  000f2	0f bf 94 0f 46
	01 00 00	 movsx	 edx, WORD PTR [edi+ecx+326]
  000fa	0f bf 84 0e 46
	01 00 00	 movsx	 eax, WORD PTR [esi+ecx+326]
  00102	2b c2		 sub	 eax, edx
  00104	99		 cdq
  00105	33 c2		 xor	 eax, edx
  00107	2b c2		 sub	 eax, edx
  00109	85 c0		 test	 eax, eax
  0010b	7f 42		 jg	 SHORT $LN5@CrywolfAlt
  0010d	0f bf 94 0f 44
	01 00 00	 movsx	 edx, WORD PTR [edi+ecx+324]
  00115	0f bf 84 0e 44
	01 00 00	 movsx	 eax, WORD PTR [esi+ecx+324]
  0011d	2b c2		 sub	 eax, edx
  0011f	99		 cdq
  00120	33 c2		 xor	 eax, edx
  00122	2b c2		 sub	 eax, edx
  00124	85 c0		 test	 eax, eax
  00126	7f 27		 jg	 SHORT $LN5@CrywolfAlt

; 436  : 		{
; 437  : 			if ( this->CheckAltarValidContract(gObj[iIndex].Class) != FALSE )

  00128	0f b7 b4 0e b8
	00 00 00	 movzx	 esi, WORD PTR [esi+ecx+184]
  00130	56		 push	 esi
  00131	8b cb		 mov	 ecx, ebx
  00133	e8 00 00 00 00	 call	 ?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::CheckAltarValidContract
  00138	85 c0		 test	 eax, eax
  0013a	75 42		 jne	 SHORT $LN17@CrywolfAlt

; 438  : 			{
; 439  : 				//Empty ;D
; 440  : 			}
; 441  : 			else
; 442  : 			{
; 443  : 				this->SetAltarValidContract(iIndex, gObj[iIndex].Class);

  0013c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0013f	56		 push	 esi
  00140	50		 push	 eax
  00141	8b cb		 mov	 ecx, ebx
  00143	e8 00 00 00 00	 call	 ?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarValidContract
  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx

; 454  : 	}
; 455  : }

  0014b	5d		 pop	 ebp
  0014c	c2 04 00	 ret	 4
$LN5@CrywolfAlt:

; 444  : 			}
; 445  : 		}
; 446  : 		else
; 447  : 		{
; 448  : 			this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0014f	0f b7 8c 0e b8
	00 00 00	 movzx	 ecx, WORD PTR [esi+ecx+184]
  00157	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  0015a	51		 push	 ecx
  0015b	52		 push	 edx

; 449  : 		}
; 450  : 	}
; 451  : 	else
; 452  : 	{
; 453  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0015c	8b cb		 mov	 ecx, ebx
  0015e	e8 00 00 00 00	 call	 ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::ResetAltarUserIndex
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx

; 454  : 	}
; 455  : }

  00166	5d		 pop	 ebp
  00167	c2 04 00	 ret	 4
$LN6@CrywolfAlt:

; 449  : 		}
; 450  : 	}
; 451  : 	else
; 452  : 	{
; 453  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0016a	0f b7 84 0e b8
	00 00 00	 movzx	 eax, WORD PTR [esi+ecx+184]
  00172	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00175	50		 push	 eax
  00176	51		 push	 ecx
  00177	8b cb		 mov	 ecx, ebx
  00179	e8 00 00 00 00	 call	 ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::ResetAltarUserIndex
$LN17@CrywolfAlt:
  0017e	5f		 pop	 edi
$LN10@CrywolfAlt:
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx

; 454  : 	}
; 455  : }

  00181	5d		 pop	 ebp
  00182	c2 04 00	 ret	 4
?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z ENDP		; CCrywolfAltar::CrywolfAltarAct
_TEXT	ENDS
PUBLIC	??0CCrywolfAltarInfo@@QAE@XZ			; CCrywolfAltarInfo::CCrywolfAltarInfo
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.h
;	COMDAT ??0CCrywolfAltarInfo@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfAltarInfo@@QAE@XZ PROC			; CCrywolfAltarInfo::CCrywolfAltarInfo, COMDAT
; _this$ = ecx

; 23   : 	CCrywolfAltarInfo()

  00000	8b c1		 mov	 eax, ecx

; 24   : 	{
; 25   : 		this->Reset();

  00002	33 c9		 xor	 ecx, ecx
  00004	83 ca ff	 or	 edx, -1
  00007	89 08		 mov	 DWORD PTR [eax], ecx
  00009	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000f	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00012	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00018	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 26   : 	}

  0001b	c3		 ret	 0
??0CCrywolfAltarInfo@@QAE@XZ ENDP			; CCrywolfAltarInfo::CCrywolfAltarInfo
_TEXT	ENDS
PUBLIC	??0CCrywolfAltar@@QAE@XZ			; CCrywolfAltar::CCrywolfAltar
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolfaltar.cpp
;	COMDAT ??0CCrywolfAltar@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfAltar@@QAE@XZ PROC				; CCrywolfAltar::CCrywolfAltar, COMDAT
; _this$ = ecx

; 18   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCrywolfAltar@@6B@
  00008	33 c9		 xor	 ecx, ecx
  0000a	83 ca ff	 or	 edx, -1
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00013	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00016	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00019	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0001c	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001f	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00022	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00025	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00028	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0002b	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  0002e	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00031	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  00034	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  00037	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  0003a	89 50 44	 mov	 DWORD PTR [eax+68], edx
  0003d	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00040	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  00043	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00046	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00049	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  0004c	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  0004f	89 50 60	 mov	 DWORD PTR [eax+96], edx
  00052	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00055	89 48 64	 mov	 DWORD PTR [eax+100], ecx
  00058	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  0005b	89 48 6c	 mov	 DWORD PTR [eax+108], ecx
  0005e	89 48 70	 mov	 DWORD PTR [eax+112], ecx
  00061	89 48 74	 mov	 DWORD PTR [eax+116], ecx
  00064	89 50 7c	 mov	 DWORD PTR [eax+124], edx
  00067	89 50 78	 mov	 DWORD PTR [eax+120], edx
  0006a	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx
  00070	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx
  00076	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx
  0007c	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 19   : 	return;
; 20   : }

  00082	c3		 ret	 0
??0CCrywolfAltar@@QAE@XZ ENDP				; CCrywolfAltar::CCrywolfAltar
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCCrywolfAltar@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCrywolfAltar@@UAEPAXI@Z PROC			; CCrywolfAltar::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCrywolfAltar@@UAE@XZ ; CCrywolfAltar::~CCrywolfAltar
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCrywolfAltar@@UAEPAXI@Z ENDP			; CCrywolfAltar::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::SetAltarObjIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
_iObjIndex$ = 12					; size = 4
?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z PROC		; CCrywolfAltar::SetAltarObjIndex, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 247  : 	int iAltarNumber = this->GetAlatarNumber(iClass);
; 248  : 
; 249  : 	this->ResetAltar(iClass);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iClass$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar
  00010	57		 push	 edi
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 250  : 
; 251  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];
; 252  : 
; 253  : 	AltarInfo->SetAltarIndex(iObjIndex);

  00018	8b 55 0c	 mov	 edx, DWORD PTR _iObjIndex$[ebp]
  0001b	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00022	2b c8		 sub	 ecx, eax
  00024	5f		 pop	 edi
  00025	89 54 8e 08	 mov	 DWORD PTR [esi+ecx*4+8], edx
  00029	5e		 pop	 esi

; 254  : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z ENDP		; CCrywolfAltar::SetAltarObjIndex
_TEXT	ENDS
PUBLIC	?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ	; CCrywolfAltar::SetAllAltarObjectIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ
_TEXT	SEGMENT
?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ PROC	; CCrywolfAltar::SetAllAltarObjectIndex, COMDAT
; _this$ = ecx

; 257  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 258  : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  00002	33 ff		 xor	 edi, edi
  00004	33 f6		 xor	 esi, esi
$LL6@SetAllAlta:

; 259  : 	{
; 260  : 		if ( !gObjIsConnected(i) )

  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	74 3a		 je	 SHORT $LN5@SetAllAlta

; 261  : 		{
; 262  : 			continue;
; 263  : 		}
; 264  : 
; 265  : 		if ( gObj[i].MapNumber != MAP_INDEX_CRYWOLF_FIRSTZONE )

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	80 bc 06 49 01
	00 00 22	 cmp	 BYTE PTR [esi+eax+329], 34 ; 00000022H
  00020	75 2b		 jne	 SHORT $LN5@SetAllAlta

; 266  : 		{
; 267  : 			continue;
; 268  : 		}
; 269  : 
; 270  : 		if ( CRYWOLF_ALTAR_CLASS_RANGE(gObj[i].Class ) != FALSE )

  00022	0f b7 8c 06 b8
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+184]
  0002a	b8 cd 00 00 00	 mov	 eax, 205		; 000000cdH
  0002f	66 3b c8	 cmp	 cx, ax
  00032	72 19		 jb	 SHORT $LN5@SetAllAlta
  00034	ba d1 00 00 00	 mov	 edx, 209		; 000000d1H
  00039	66 3b d1	 cmp	 dx, cx
  0003c	1b c0		 sbb	 eax, eax
  0003e	40		 inc	 eax
  0003f	74 0c		 je	 SHORT $LN5@SetAllAlta

; 271  : 		{
; 272  : 			g_CrywolfNPC_Altar.SetAltarObjIndex(gObj[i].Class, i);

  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00048	e8 00 00 00 00	 call	 ?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarObjIndex
$LN5@SetAllAlta:

; 258  : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  0004d	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  00053	47		 inc	 edi
  00054	81 fe 80 76 97
	08		 cmp	 esi, 144144000		; 08977680H
  0005a	7c aa		 jl	 SHORT $LL6@SetAllAlta

; 273  : 		}
; 274  : 	}
; 275  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	c3		 ret	 0
?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ ENDP	; CCrywolfAltar::SetAllAltarObjectIndex
_TEXT	ENDS
PUBLIC	?ResetAllAltar@CCrywolfAltar@@QAEXXZ		; CCrywolfAltar::ResetAllAltar
; Function compile flags: /Ogtp
;	COMDAT ?ResetAllAltar@CCrywolfAltar@@QAEXXZ
_TEXT	SEGMENT
?ResetAllAltar@CCrywolfAltar@@QAEXXZ PROC		; CCrywolfAltar::ResetAllAltar, COMDAT
; _this$ = ecx

; 278  : {

  00000	56		 push	 esi

; 279  : 	this->ResetAltar(205);

  00001	68 cd 00 00 00	 push	 205			; 000000cdH
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 280  : 	this->ResetAltar(206);

  0000d	68 ce 00 00 00	 push	 206			; 000000ceH
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 281  : 	this->ResetAltar(207);

  00019	68 cf 00 00 00	 push	 207			; 000000cfH
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 282  : 	this->ResetAltar(208);

  00025	68 d0 00 00 00	 push	 208			; 000000d0H
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 283  : 	this->ResetAltar(209);

  00031	68 d1 00 00 00	 push	 209			; 000000d1H
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar
  0003d	5e		 pop	 esi

; 284  : }

  0003e	c3		 ret	 0
?ResetAllAltar@CCrywolfAltar@@QAEXXZ ENDP		; CCrywolfAltar::ResetAllAltar
_TEXT	ENDS
PUBLIC	?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z	; CCrywolfAltar::SetAllAltarViewState
; Function compile flags: /Ogtp
;	COMDAT ?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z
_TEXT	SEGMENT
_iAltarState$ = 8					; size = 4
?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z PROC	; CCrywolfAltar::SetAllAltarViewState, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 304  : 	this->SetAltarViewState(205, iAltarState);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iAltarState$[ebp]
  00008	57		 push	 edi
  00009	68 cd 00 00 00	 push	 205			; 000000cdH
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 305  : 	this->SetAltarViewState(206, iAltarState);

  00015	57		 push	 edi
  00016	68 ce 00 00 00	 push	 206			; 000000ceH
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 306  : 	this->SetAltarViewState(207, iAltarState);

  00022	57		 push	 edi
  00023	68 cf 00 00 00	 push	 207			; 000000cfH
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 307  : 	this->SetAltarViewState(208, iAltarState);

  0002f	57		 push	 edi
  00030	68 d0 00 00 00	 push	 208			; 000000d0H
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 308  : 	this->SetAltarViewState(209, iAltarState);

  0003c	57		 push	 edi
  0003d	68 d1 00 00 00	 push	 209			; 000000d1H
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 309  : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z ENDP	; CCrywolfAltar::SetAllAltarViewState
_TEXT	ENDS
EXTRN	_atexit:PROC
EXTRN	??0CCrywolfUtil@@QAE@XZ:PROC			; CCrywolfUtil::CCrywolfUtil
; Function compile flags: /Ogtp
;	COMDAT ??__EUTIL@@YAXXZ
text$yc	SEGMENT
??__EUTIL@@YAXXZ PROC					; `dynamic initializer for 'UTIL'', COMDAT

; 11   : static CCrywolfUtil UTIL;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00005	e8 00 00 00 00	 call	 ??0CCrywolfUtil@@QAE@XZ	; CCrywolfUtil::CCrywolfUtil
  0000a	68 00 00 00 00	 push	 OFFSET ??__FUTIL@@YAXXZ	; `dynamic atexit destructor for 'UTIL''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EUTIL@@YAXXZ ENDP					; `dynamic initializer for 'UTIL''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Eg_CrywolfNPC_Altar@@YAXXZ
text$yc	SEGMENT
??__Eg_CrywolfNPC_Altar@@YAXXZ PROC			; `dynamic initializer for 'g_CrywolfNPC_Altar'', COMDAT

; 12   : CCrywolfAltar g_CrywolfNPC_Altar;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00005	e8 00 00 00 00	 call	 ??0CCrywolfAltar@@QAE@XZ ; CCrywolfAltar::CCrywolfAltar
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CrywolfNPC_Altar@@YAXXZ ; `dynamic atexit destructor for 'g_CrywolfNPC_Altar''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CrywolfNPC_Altar@@YAXXZ ENDP			; `dynamic initializer for 'g_CrywolfNPC_Altar''
text$yc	ENDS
EXTRN	??1CCrywolfUtil@@UAE@XZ:PROC			; CCrywolfUtil::~CCrywolfUtil
; Function compile flags: /Ogtp
;	COMDAT ??__FUTIL@@YAXXZ
text$yd	SEGMENT
??__FUTIL@@YAXXZ PROC					; `dynamic atexit destructor for 'UTIL'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET _UTIL
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolfUtil@@UAE@XZ	; CCrywolfUtil::~CCrywolfUtil
??__FUTIL@@YAXXZ ENDP					; `dynamic atexit destructor for 'UTIL''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__Fg_CrywolfNPC_Altar@@YAXXZ
text$yd	SEGMENT
??__Fg_CrywolfNPC_Altar@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CrywolfNPC_Altar'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolfAltar@@UAE@XZ ; CCrywolfAltar::~CCrywolfAltar
??__Fg_CrywolfNPC_Altar@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CrywolfNPC_Altar''
text$yd	ENDS
PUBLIC	?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A		; g_CrywolfNPC_Altar
_BSS	SEGMENT
?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A DB 090H DUP (?)	; g_CrywolfNPC_Altar
_UTIL	DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_UTIL$initializer$ DD FLAT:??__EUTIL@@YAXXZ
_g_CrywolfNPC_Altar$initializer$ DD FLAT:??__Eg_CrywolfNPC_Altar@@YAXXZ
CRT$XCU	ENDS
END
