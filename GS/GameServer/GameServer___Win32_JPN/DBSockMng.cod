; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\DBSockMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7DBSockMng@@6B@				; DBSockMng::`vftable'
PUBLIC	??0DBSockMng@@QAE@XZ				; DBSockMng::DBSockMng
PUBLIC	??_R4DBSockMng@@6B@				; DBSockMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDBSockMng@@@8				; DBSockMng `RTTI Type Descriptor'
PUBLIC	??_R3DBSockMng@@8				; DBSockMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DBSockMng@@8				; DBSockMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DBSockMng@@8			; DBSockMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0wsJoinServerCli@@QAE@XZ:PROC			; wsJoinServerCli::wsJoinServerCli
EXTRN	??1wsJoinServerCli@@UAE@XZ:PROC			; wsJoinServerCli::~wsJoinServerCli
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EDBSockMng@@UAEPAXI@Z:PROC			; DBSockMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DBSockMng@@8
; File e:\work\tranet_version\gs\gameserver\dbsockmng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@DBSockMng@@8 DD FLAT:??_R0?AVDBSockMng@@@8 ; DBSockMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DBSockMng@@8
rdata$r	ENDS
;	COMDAT ??_R2DBSockMng@@8
rdata$r	SEGMENT
??_R2DBSockMng@@8 DD FLAT:??_R1A@?0A@EA@DBSockMng@@8	; DBSockMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DBSockMng@@8
rdata$r	SEGMENT
??_R3DBSockMng@@8 DD 00H				; DBSockMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DBSockMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDBSockMng@@@8
_DATA	SEGMENT
??_R0?AVDBSockMng@@@8 DD FLAT:??_7type_info@@6B@	; DBSockMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDBSockMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DBSockMng@@6B@
rdata$r	SEGMENT
??_R4DBSockMng@@6B@ DD 00H				; DBSockMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDBSockMng@@@8
	DD	FLAT:??_R3DBSockMng@@8
rdata$r	ENDS
;	COMDAT ??_7DBSockMng@@6B@
CONST	SEGMENT
??_7DBSockMng@@6B@ DD FLAT:??_R4DBSockMng@@6B@		; DBSockMng::`vftable'
	DD	FLAT:??_EDBSockMng@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0DBSockMng@@QAE@XZ
_TEXT	SEGMENT
??0DBSockMng@@QAE@XZ PROC				; DBSockMng::DBSockMng, COMDAT
; _this$ = ecx

; 14   : {

  00000	56		 push	 esi
  00001	68 00 00 00 00	 push	 OFFSET ??1wsJoinServerCli@@UAE@XZ ; wsJoinServerCli::~wsJoinServerCli
  00006	68 00 00 00 00	 push	 OFFSET ??0wsJoinServerCli@@QAE@XZ ; wsJoinServerCli::wsJoinServerCli
  0000b	8b f1		 mov	 esi, ecx
  0000d	6a 02		 push	 2
  0000f	68 28 00 19 00	 push	 1638440			; 00190028H
  00014	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00017	50		 push	 eax
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7DBSockMng@@6B@
  0001e	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z

; 15   : 	this->m_ActiveServer=DS_UNINITIALIZED;

  00023	c7 86 54 00 32
	00 ff ff ff ff	 mov	 DWORD PTR [esi+3276884], -1

; 16   : }

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
??0DBSockMng@@QAE@XZ ENDP				; DBSockMng::DBSockMng
_TEXT	ENDS
PUBLIC	??1DBSockMng@@UAE@XZ				; DBSockMng::~DBSockMng
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??1DBSockMng@@UAE@XZ
_TEXT	SEGMENT
??1DBSockMng@@UAE@XZ PROC				; DBSockMng::~DBSockMng, COMDAT
; _this$ = ecx

; 20   : 
; 21   : }

  00000	68 00 00 00 00	 push	 OFFSET ??1wsJoinServerCli@@UAE@XZ ; wsJoinServerCli::~wsJoinServerCli
  00005	6a 02		 push	 2
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DBSockMng@@6B@
  0000d	68 28 00 19 00	 push	 1638440			; 00190028H
  00012	83 c1 04	 add	 ecx, 4
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001b	c3		 ret	 0
??1DBSockMng@@UAE@XZ ENDP				; DBSockMng::~DBSockMng
_TEXT	ENDS
PUBLIC	??_C@_0BE@FHFPGDBH@ZtDB?5Server?5Check?4?4?$AA@	; `string'
PUBLIC	?Connect@DBSockMng@@QAEXXZ			; DBSockMng::Connect
EXTRN	?GetConnect@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::GetConnect
EXTRN	?ZtDataServerConnect@@YAHPADK@Z:PROC		; ZtDataServerConnect
EXTRN	?ZtDbIp@@3PADA:BYTE				; ZtDbIp
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?wsZtDbCli@@3VwsJoinServerCli@@A:BYTE		; wsZtDbCli
EXTRN	?DataServerIp2@@3PADA:BYTE			; DataServerIp2
EXTRN	?DataServerPort2@@3HA:DWORD			; DataServerPort2
EXTRN	?DataServerLogin@@YAXH@Z:PROC			; DataServerLogin
EXTRN	?Close@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::Close
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?Connect@wsJoinServerCli@@QAEHPADGK@Z:PROC	; wsJoinServerCli::Connect
EXTRN	?DataServerIp@@3PADA:BYTE			; DataServerIp
EXTRN	?DataServerPort@@3HA:DWORD			; DataServerPort
EXTRN	?SetProtocolCore@wsJoinServerCli@@QAEHP6AXEPAEH@Z@Z:PROC ; wsJoinServerCli::SetProtocolCore
EXTRN	?DataServerProtocolCore@@YAXEPAEH@Z:PROC	; DataServerProtocolCore
EXTRN	?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z:PROC ; MyWinsockBase::CreateSocket
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?GetSocket@MyWinsockBase@@QAEIXZ:PROC		; MyWinsockBase::GetSocket
;	COMDAT ??_C@_0BE@FHFPGDBH@ZtDB?5Server?5Check?4?4?$AA@
CONST	SEGMENT
??_C@_0BE@FHFPGDBH@ZtDB?5Server?5Check?4?4?$AA@ DB 'ZtDB Server Check..', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Connect@DBSockMng@@QAEXXZ
_TEXT	SEGMENT
?Connect@DBSockMng@@QAEXXZ PROC				; DBSockMng::Connect, COMDAT
; _this$ = ecx

; 24   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 25   : 	if (this->wsCDBS[0].GetSocket()  == INVALID_SOCKET )

  00005	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00008	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  0000d	83 f8 ff	 cmp	 eax, -1
  00010	0f 85 98 00 00
	00		 jne	 $LN8@Connect

; 26   : 	{
; 27   : 		int State;
; 28   : 		this->wsCDBS[0].CreateSocket(ghWnd);

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0001b	50		 push	 eax
  0001c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001f	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 29   : 		this->wsCDBS[0].SetProtocolCore(DataServerProtocolCore);

  00024	68 00 00 00 00	 push	 OFFSET ?DataServerProtocolCore@@YAXEPAEH@Z ; DataServerProtocolCore
  00029	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002c	e8 00 00 00 00	 call	 ?SetProtocolCore@wsJoinServerCli@@QAEHP6AXEPAEH@Z@Z ; wsJoinServerCli::SetProtocolCore

; 30   : 		State=this->wsCDBS[0].Connect(DataServerIp, DataServerPort, WM_GM_DATA1_CLIENT_MSG_PROC);

  00031	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?DataServerPort@@3HA
  00038	68 0a 04 00 00	 push	 1034			; 0000040aH
  0003d	51		 push	 ecx
  0003e	68 00 00 00 00	 push	 OFFSET ?DataServerIp@@3PADA ; DataServerIp
  00043	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00046	e8 00 00 00 00	 call	 ?Connect@wsJoinServerCli@@QAEHPADGK@Z ; wsJoinServerCli::Connect

; 31   : 		if (State == 0)
; 32   : 		{
; 33   : 			LogAdd(lMsg.Get(MSGGET(1, 147)), DataServerIp, DataServerPort);

  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00050	85 c0		 test	 eax, eax
  00052	75 2a		 jne	 SHORT $LN9@Connect
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DataServerPort@@3HA ; DataServerPort
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ?DataServerIp@@3PADA ; DataServerIp
  00060	68 93 01 00 00	 push	 403			; 00000193H
  00065	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0006a	50		 push	 eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 34   : 			this->wsCDBS[0].Close();

  00074	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00077	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 35   : 		}
; 36   : 		else

  0007c	eb 30		 jmp	 SHORT $LN8@Connect
$LN9@Connect:

; 37   : 		{
; 38   : 			LogAdd(lMsg.Get(MSGGET(1, 146)), DataServerIp, DataServerPort);	

  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DataServerPort@@3HA ; DataServerPort
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ?DataServerIp@@3PADA ; DataServerIp
  00089	68 92 01 00 00	 push	 402			; 00000192H
  0008e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00093	50		 push	 eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 39   : 			this->m_ActiveServer=DS_0;
; 40   : 			DataServerLogin(DS_0);

  0009a	6a 00		 push	 0
  0009c	c7 86 54 00 32
	00 00 00 00 00	 mov	 DWORD PTR [esi+3276884], 0
  000a6	e8 00 00 00 00	 call	 ?DataServerLogin@@YAXH@Z ; DataServerLogin
  000ab	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@Connect:

; 41   : 		}
; 42   : 	}
; 43   : 	
; 44   : 	if (this->wsCDBS[1].GetSocket() == INVALID_SOCKET)	

  000ae	8d 8e 30 00 19
	00		 lea	 ecx, DWORD PTR [esi+1638448]
  000b4	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  000b9	83 f8 ff	 cmp	 eax, -1
  000bc	0f 85 b6 00 00
	00		 jne	 $LN5@Connect

; 45   : 	{
; 46   : 		int State;
; 47   : 		this->wsCDBS[1].CreateSocket(ghWnd);

  000c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  000c8	51		 push	 ecx
  000c9	8d 8e 30 00 19
	00		 lea	 ecx, DWORD PTR [esi+1638448]
  000cf	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 48   : 		this->wsCDBS[1].SetProtocolCore(DataServerProtocolCore);

  000d4	68 00 00 00 00	 push	 OFFSET ?DataServerProtocolCore@@YAXEPAEH@Z ; DataServerProtocolCore
  000d9	8d 8e 2c 00 19
	00		 lea	 ecx, DWORD PTR [esi+1638444]
  000df	e8 00 00 00 00	 call	 ?SetProtocolCore@wsJoinServerCli@@QAEHP6AXEPAEH@Z@Z ; wsJoinServerCli::SetProtocolCore

; 49   : 		State=this->wsCDBS[1].Connect(DataServerIp2, DataServerPort2, WM_GM_DATA2_CLIENT_MSG_PROC);

  000e4	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?DataServerPort2@@3HA
  000eb	68 0b 04 00 00	 push	 1035			; 0000040bH
  000f0	52		 push	 edx
  000f1	68 00 00 00 00	 push	 OFFSET ?DataServerIp2@@3PADA ; DataServerIp2
  000f6	8d 8e 2c 00 19
	00		 lea	 ecx, DWORD PTR [esi+1638444]
  000fc	e8 00 00 00 00	 call	 ?Connect@wsJoinServerCli@@QAEHPADGK@Z ; wsJoinServerCli::Connect

; 50   : 		if (State==0)

  00101	85 c0		 test	 eax, eax
  00103	75 31		 jne	 SHORT $LN6@Connect

; 51   : 		{
; 52   : 			LogAdd(lMsg.Get(MSGGET(1, 147)), DataServerIp2, DataServerPort2);

  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DataServerPort2@@3HA ; DataServerPort2
  0010a	50		 push	 eax
  0010b	68 00 00 00 00	 push	 OFFSET ?DataServerIp2@@3PADA ; DataServerIp2
  00110	68 93 01 00 00	 push	 403			; 00000193H
  00115	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0011a	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0011f	50		 push	 eax
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH

; 53   : 			this->wsCDBS[1].Close();

  00129	8d 8e 30 00 19
	00		 lea	 ecx, DWORD PTR [esi+1638448]
  0012f	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 54   : 		}
; 55   : 		else

  00134	eb 42		 jmp	 SHORT $LN5@Connect
$LN6@Connect:

; 56   : 		{
; 57   : 			LogAdd(lMsg.Get(MSGGET(1, 146)), DataServerIp2, DataServerPort2);

  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DataServerPort2@@3HA ; DataServerPort2
  0013c	51		 push	 ecx
  0013d	68 00 00 00 00	 push	 OFFSET ?DataServerIp2@@3PADA ; DataServerIp2
  00142	68 92 01 00 00	 push	 402			; 00000192H
  00147	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0014c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00151	50		 push	 eax
  00152	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 			if (this->m_ActiveServer==-1)

  0015b	83 be 54 00 32
	00 ff		 cmp	 DWORD PTR [esi+3276884], -1
  00162	75 0a		 jne	 SHORT $LN4@Connect

; 59   : 			{
; 60   : 				this->m_ActiveServer=DS_1;

  00164	c7 86 54 00 32
	00 01 00 00 00	 mov	 DWORD PTR [esi+3276884], 1
$LN4@Connect:

; 61   : 			}
; 62   : 			DataServerLogin(DS_1);

  0016e	6a 01		 push	 1
  00170	e8 00 00 00 00	 call	 ?DataServerLogin@@YAXH@Z ; DataServerLogin
  00175	83 c4 04	 add	 esp, 4
$LN5@Connect:

; 63   : 		}
; 64   : 	}
; 65   : 	
; 66   : 	if ( wsZtDbCli.GetSocket()  == INVALID_SOCKET)

  00178	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsZtDbCli@@3VwsJoinServerCli@@A+4
  0017d	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx
  00185	83 f8 ff	 cmp	 eax, -1
  00188	75 34		 jne	 SHORT $LN3@Connect

; 67   : 	{
; 68   : 		LogAddC(2, "ZtDB Server Check..");

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FHFPGDBH@ZtDB?5Server?5Check?4?4?$AA@
  0018f	6a 02		 push	 2
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 69   : 		wsZtDbCli.CreateSocket(ghWnd);

  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0019d	83 c4 08	 add	 esp, 8
  001a0	52		 push	 edx
  001a1	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsZtDbCli@@3VwsJoinServerCli@@A+4
  001a6	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 70   : 		ZtDataServerConnect(ZtDbIp, WM_GM_ZTDATA_CLIENT_MSG_PROC);

  001ab	68 0e 04 00 00	 push	 1038			; 0000040eH
  001b0	68 00 00 00 00	 push	 OFFSET ?ZtDbIp@@3PADA	; ZtDbIp
  001b5	e8 00 00 00 00	 call	 ?ZtDataServerConnect@@YAHPADK@Z ; ZtDataServerConnect
  001ba	83 c4 08	 add	 esp, 8

; 78   : 		}
; 79   : 	}
; 80   : }

  001bd	c3		 ret	 0
$LN3@Connect:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		if ( wsZtDbCli.GetConnect() == 0 )

  001be	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsZtDbCli@@3VwsJoinServerCli@@A+4
  001c3	e8 00 00 00 00	 call	 ?GetConnect@MyWinsockBase@@QAEHXZ ; MyWinsockBase::GetConnect
  001c8	85 c0		 test	 eax, eax
  001ca	75 1f		 jne	 SHORT $LN1@Connect

; 75   : 		{
; 76   : 			LogAddC(2, "ZtDB Server Check..");

  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FHFPGDBH@ZtDB?5Server?5Check?4?4?$AA@
  001d1	6a 02		 push	 2
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 77   : 			ZtDataServerConnect(ZtDbIp, WM_GM_ZTDATA_CLIENT_MSG_PROC);

  001d9	68 0e 04 00 00	 push	 1038			; 0000040eH
  001de	68 00 00 00 00	 push	 OFFSET ?ZtDbIp@@3PADA	; ZtDbIp
  001e3	e8 00 00 00 00	 call	 ?ZtDataServerConnect@@YAHPADK@Z ; ZtDataServerConnect
  001e8	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Connect:

; 78   : 		}
; 79   : 	}
; 80   : }

  001eb	c3		 ret	 0
?Connect@DBSockMng@@QAEXXZ ENDP				; DBSockMng::Connect
_TEXT	ENDS
PUBLIC	??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@	; `string'
PUBLIC	?ActiveChange@DBSockMng@@QAEXXZ			; DBSockMng::ActiveChange
;	COMDAT ??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@
CONST	SEGMENT
??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@ DB 'Active DB Change', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ActiveChange@DBSockMng@@QAEXXZ
_TEXT	SEGMENT
?ActiveChange@DBSockMng@@QAEXXZ PROC			; DBSockMng::ActiveChange, COMDAT
; _this$ = ecx

; 84   : 	{
; 85   : 		int Status;
; 86   : 		if (this->m_ActiveServer==DS_0)

  00000	33 c0		 xor	 eax, eax
  00002	39 81 54 00 32
	00		 cmp	 DWORD PTR [ecx+3276884], eax

; 87   : 		{
; 88   : 			this->m_ActiveServer=DS_1;
; 89   : 			Status=1;
; 90   : 		}
; 91   : 		else
; 92   : 		{
; 93   : 			this->m_ActiveServer=DS_0;
; 94   : 			Status=0;
; 95   : 		}
; 96   : 		LogAdd("Active DB Change");

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@
  0000d	0f 94 c0	 sete	 al
  00010	89 81 54 00 32
	00		 mov	 DWORD PTR [ecx+3276884], eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0001c	59		 pop	 ecx

; 97   : 	}
; 98   : }

  0001d	c3		 ret	 0
?ActiveChange@DBSockMng@@QAEXXZ ENDP			; DBSockMng::ActiveChange
_TEXT	ENDS
PUBLIC	?Send@DBSockMng@@QAEHPADH@Z			; DBSockMng::Send
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
; Function compile flags: /Ogtp
;	COMDAT ?Send@DBSockMng@@QAEHPADH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
?Send@DBSockMng@@QAEHPADH@Z PROC			; DBSockMng::Send, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 102  : 	if (this->m_ActiveServer >= 2)

  00006	8b 86 54 00 32
	00		 mov	 eax, DWORD PTR [esi+3276884]
  0000c	83 f8 02	 cmp	 eax, 2
  0000f	7c 07		 jl	 SHORT $LN3@Send
$LN6@Send:

; 103  : 	{
; 104  : 		return 0;

  00011	33 c0		 xor	 eax, eax
  00013	5e		 pop	 esi

; 120  : 
; 121  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
$LN3@Send:

; 105  : 	}
; 106  : 	if (this->m_ActiveServer < 0)

  00018	85 c0		 test	 eax, eax

; 107  : 	{
; 108  : 		return 0;

  0001a	78 f5		 js	 SHORT $LN6@Send

; 109  : 	}
; 110  : 	/*
; 111  : 
; 112  : 	*/
; 113  : 
; 114  : 	if ( this->wsCDBS[this->m_ActiveServer].DataSend((char*)buf, len) == 0)

  0001c	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  00022	53		 push	 ebx
  00023	8b 5d 08	 mov	 ebx, DWORD PTR _buf$[ebp]
  00026	57		 push	 edi
  00027	8b 7d 0c	 mov	 edi, DWORD PTR _len$[ebp]
  0002a	57		 push	 edi
  0002b	53		 push	 ebx
  0002c	8d 4c 30 04	 lea	 ecx, DWORD PTR [eax+esi+4]
  00030	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
  00035	85 c0		 test	 eax, eax
  00037	75 1e		 jne	 SHORT $LN1@Send

; 115  : 	{
; 116  : 		this->ActiveChange();

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?ActiveChange@DBSockMng@@QAEXXZ ; DBSockMng::ActiveChange

; 117  : 		this->wsCDBS[this->m_ActiveServer].DataSend((char*)buf, len);

  00040	8b 86 54 00 32
	00		 mov	 eax, DWORD PTR [esi+3276884]
  00046	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  0004c	57		 push	 edi
  0004d	53		 push	 ebx
  0004e	8d 4c 30 04	 lea	 ecx, DWORD PTR [eax+esi+4]
  00052	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
$LN1@Send:

; 118  : 	}
; 119  : 	return 1;

  00057	5f		 pop	 edi
  00058	5b		 pop	 ebx
  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	5e		 pop	 esi

; 120  : 
; 121  : }

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?Send@DBSockMng@@QAEHPADH@Z ENDP			; DBSockMng::Send
_TEXT	ENDS
PUBLIC	?Send@DBSockMng@@QAEHHPADH@Z			; DBSockMng::Send
; Function compile flags: /Ogtp
;	COMDAT ?Send@DBSockMng@@QAEHHPADH@Z
_TEXT	SEGMENT
_server$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?Send@DBSockMng@@QAEHHPADH@Z PROC			; DBSockMng::Send, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 	if (server >= 2)

  00003	8b 45 08	 mov	 eax, DWORD PTR _server$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	83 f8 02	 cmp	 eax, 2
  0000c	7c 07		 jl	 SHORT $LN3@Send@2
$LN6@Send@2:

; 126  : 	{
; 127  : 		return 0;

  0000e	33 c0		 xor	 eax, eax
  00010	5e		 pop	 esi

; 138  : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Send@2:

; 128  : 	}
; 129  : 	if (server < 0)

  00015	85 c0		 test	 eax, eax

; 130  : 	{
; 131  : 		return 0;

  00017	78 f5		 js	 SHORT $LN6@Send@2

; 132  : 	}
; 133  : 	if (this->wsCDBS[server].DataSend(buf, len) == 0)

  00019	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0001c	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  00022	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00025	51		 push	 ecx
  00026	52		 push	 edx
  00027	8d 4c 30 04	 lea	 ecx, DWORD PTR [eax+esi+4]
  0002b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
  00030	85 c0		 test	 eax, eax
  00032	75 07		 jne	 SHORT $LN1@Send@2

; 134  : 	{
; 135  : 		this->ActiveChange();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?ActiveChange@DBSockMng@@QAEXXZ ; DBSockMng::ActiveChange
$LN1@Send@2:

; 136  : 	}
; 137  : 	return 1;

  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	5e		 pop	 esi

; 138  : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?Send@DBSockMng@@QAEHHPADH@Z ENDP			; DBSockMng::Send
_TEXT	ENDS
PUBLIC	?MsgProc@DBSockMng@@QAEHHIJ@Z			; DBSockMng::MsgProc
EXTRN	?DataRecv@wsJoinServerCli@@QAEHXZ:PROC		; wsJoinServerCli::DataRecv
EXTRN	?FDWRITE_MsgDataSend@wsJoinServerCli@@QAEHXZ:PROC ; wsJoinServerCli::FDWRITE_MsgDataSend
; Function compile flags: /Ogtp
;	COMDAT ?MsgProc@DBSockMng@@QAEHHIJ@Z
_TEXT	SEGMENT
_line$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?MsgProc@DBSockMng@@QAEHHIJ@Z PROC			; DBSockMng::MsgProc, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  : 	switch (lParam & 0xFFFF & 0xFFFF)

  00003	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  00006	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000b	48		 dec	 eax
  0000c	74 3e		 je	 SHORT $LN3@MsgProc
  0000e	48		 dec	 eax
  0000f	74 20		 je	 SHORT $LN2@MsgProc
  00011	83 e8 1e	 sub	 eax, 30			; 0000001eH
  00014	75 48		 jne	 SHORT $LN8@MsgProc

; 149  : 		break;
; 150  : 	case 32: // Close
; 151  : 		this->wsCDBS[line].Close();

  00016	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00019	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  0001f	8d 4c 08 08	 lea	 ecx, DWORD PTR [eax+ecx+8]
  00023	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 152  : 	}
; 153  : 	return 1;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 154  : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MsgProc:

; 146  : 		break;
; 147  : 	case 2: // Send Data
; 148  : 		this->wsCDBS[line].FDWRITE_MsgDataSend();

  00031	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00034	69 d2 28 00 19
	00		 imul	 edx, 1638440		; 00190028H
  0003a	8d 4c 0a 04	 lea	 ecx, DWORD PTR [edx+ecx+4]
  0003e	e8 00 00 00 00	 call	 ?FDWRITE_MsgDataSend@wsJoinServerCli@@QAEHXZ ; wsJoinServerCli::FDWRITE_MsgDataSend

; 152  : 	}
; 153  : 	return 1;

  00043	b8 01 00 00 00	 mov	 eax, 1

; 154  : }

  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN3@MsgProc:

; 143  : 	{
; 144  : 	case 1: // Recv Data
; 145  : 		this->wsCDBS[line].DataRecv();

  0004c	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0004f	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  00055	8d 4c 08 04	 lea	 ecx, DWORD PTR [eax+ecx+4]
  00059	e8 00 00 00 00	 call	 ?DataRecv@wsJoinServerCli@@QAEHXZ ; wsJoinServerCli::DataRecv
$LN8@MsgProc:

; 152  : 	}
; 153  : 	return 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1

; 154  : }

  00063	5d		 pop	 ebp
  00064	c2 0c 00	 ret	 12			; 0000000cH
?MsgProc@DBSockMng@@QAEHHIJ@Z ENDP			; DBSockMng::MsgProc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GDBSockMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GDBSockMng@@UAEPAXI@Z PROC				; DBSockMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1DBSockMng@@UAE@XZ	; DBSockMng::~DBSockMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GDBSockMng@@UAEPAXI@Z ENDP				; DBSockMng::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EcDBSMng@@YAXXZ
text$yc	SEGMENT
??__EcDBSMng@@YAXXZ PROC				; `dynamic initializer for 'cDBSMng'', COMDAT

; 11   : DBSockMng cDBSMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00005	e8 00 00 00 00	 call	 ??0DBSockMng@@QAE@XZ	; DBSockMng::DBSockMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__FcDBSMng@@YAXXZ ; `dynamic atexit destructor for 'cDBSMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EcDBSMng@@YAXXZ ENDP				; `dynamic initializer for 'cDBSMng''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FcDBSMng@@YAXXZ
text$yd	SEGMENT
??__FcDBSMng@@YAXXZ PROC				; `dynamic atexit destructor for 'cDBSMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00005	e9 00 00 00 00	 jmp	 ??1DBSockMng@@UAE@XZ	; DBSockMng::~DBSockMng
??__FcDBSMng@@YAXXZ ENDP				; `dynamic atexit destructor for 'cDBSMng''
text$yd	ENDS
PUBLIC	?cDBSMng@@3VDBSockMng@@A			; cDBSMng
_BSS	SEGMENT
?cDBSMng@@3VDBSockMng@@A DB 0320058H DUP (?)		; cDBSMng
_BSS	ENDS
CRT$XCU	SEGMENT
_cDBSMng$initializer$ DD FLAT:??__EcDBSMng@@YAXXZ
CRT$XCU	ENDS
END
