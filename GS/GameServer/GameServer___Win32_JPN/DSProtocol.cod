; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\DSProtocol.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?dwCrywolfSyncLogTickCount@@3KA			; dwCrywolfSyncLogTickCount
_BSS	SEGMENT
?dwCrywolfSyncLogTickCount@@3KA DD 01H DUP (?)		; dwCrywolfSyncLogTickCount
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD@@QAEXPAEEE@Z			; PBMSG_HEAD::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD@@QAEXPAEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 1
?set@PBMSG_HEAD@@QAEXPAEEE@Z PROC			; PBMSG_HEAD::set, COMDAT
; _this$ = ecx

; 80   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 82   : 		lpBuf[1] = size;

  00006	8a 4d 10	 mov	 cl, BYTE PTR _size$[ebp]

; 83   : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  0000f	88 48 01	 mov	 BYTE PTR [eax+1], cl
  00012	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 84   : 	};	// line : 22

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?set@PBMSG_HEAD@@QAEXPAEEE@Z ENDP			; PBMSG_HEAD::set
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?set@PWMSG_HEAD@@QAEXPAEEH@Z			; PWMSG_HEAD::set
; Function compile flags: /Ogtp
;	COMDAT ?set@PWMSG_HEAD@@QAEXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?set@PWMSG_HEAD@@QAEXPAEEH@Z PROC			; PWMSG_HEAD::set, COMDAT
; _this$ = ecx

; 122  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 		lpBuf[0] = 0xC2;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 124  : 		lpBuf[1] = SET_NUMBERH(size);

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00009	8b d1		 mov	 edx, ecx

; 125  : 		lpBuf[2] = SET_NUMBERL(size);

  0000b	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 126  : 		lpBuf[3] = head;

  0000e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00011	c1 ea 08	 shr	 edx, 8
  00014	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H
  00017	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0001a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 127  : 	};

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?set@PWMSG_HEAD@@QAEXPAEEH@Z ENDP			; PWMSG_HEAD::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?GetDataLoadState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetDataLoadState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
;	COMDAT ?GetDataLoadState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetDataLoadState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetDataLoadState, COMDAT
; _this$ = ecx

; 282  : 	int GetDataLoadState(){return m_iCastleDataLoadState;}

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetDataLoadState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetDataLoadState
_TEXT	ENDS
PUBLIC	?SetDataLoadState@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetDataLoadState
; Function compile flags: /Ogtp
;	COMDAT ?SetDataLoadState@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iDataLoadState$ = 8					; size = 4
?SetDataLoadState@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetDataLoadState, COMDAT
; _this$ = ecx

; 283  : 	void SetDataLoadState(int iDataLoadState){m_iCastleDataLoadState = iDataLoadState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iDataLoadState$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetDataLoadState@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetDataLoadState
_TEXT	ENDS
PUBLIC	?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetDbDataLoadOK
; Function compile flags: /Ogtp
;	COMDAT ?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bDbDataLoadOK$ = 8					; size = 4
?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetDbDataLoadOK, COMDAT
; _this$ = ecx

; 284  : 	void SetDbDataLoadOK(BOOL bDbDataLoadOK){m_bDbDataLoadOK = bDbDataLoadOK;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _bDbDataLoadOK$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetDbDataLoadOK
_TEXT	ENDS
PUBLIC	?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetIsSiegeGuildList
; Function compile flags: /Ogtp
;	COMDAT ?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bIsSiegGuildList$ = 8					; size = 4
?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetIsSiegeGuildList, COMDAT
; _this$ = ecx

; 357  : 	void SetIsSiegeGuildList(BOOL bIsSiegGuildList){m_btIsSiegeGuildList = bIsSiegGuildList;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bIsSiegGuildList$[ebp]
  00006	88 81 d4 00 00
	00		 mov	 BYTE PTR [ecx+212], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetIsSiegeGuildList
_TEXT	ENDS
PUBLIC	?GetDbNpcCreated@CCastleSiege@@QAEHXZ		; CCastleSiege::GetDbNpcCreated
; Function compile flags: /Ogtp
;	COMDAT ?GetDbNpcCreated@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetDbNpcCreated@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetDbNpcCreated, COMDAT
; _this$ = ecx

; 359  : 	BOOL GetDbNpcCreated(){return m_bDbNpcCreated;}

  00000	8b 81 50 01 00
	00		 mov	 eax, DWORD PTR [ecx+336]
  00006	c3		 ret	 0
?GetDbNpcCreated@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetDbNpcCreated
_TEXT	ENDS
PUBLIC	?SetDbNpcCreated@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetDbNpcCreated
; Function compile flags: /Ogtp
;	COMDAT ?SetDbNpcCreated@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bDbNpcCreated$ = 8					; size = 4
?SetDbNpcCreated@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetDbNpcCreated, COMDAT
; _this$ = ecx

; 360  : 	void SetDbNpcCreated(BOOL bDbNpcCreated){m_bDbNpcCreated = bDbNpcCreated;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _bDbNpcCreated$[ebp]
  00006	89 81 50 01 00
	00		 mov	 DWORD PTR [ecx+336], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetDbNpcCreated@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetDbNpcCreated
_TEXT	ENDS
PUBLIC	?GetMapSvrGroup@CMapServerManager@@QAEHXZ	; CMapServerManager::GetMapSvrGroup
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 50   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	8b 81 c0 32 01
	00		 mov	 eax, DWORD PTR [ecx+78528]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN1@GetMapSvrG

; 51   : 		{
; 52   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]

; 55   : 	}

  0000e	c3		 ret	 0
$LN1@GetMapSvrG:

; 53   : 		}
; 54   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1

; 55   : 	}

  00012	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
PUBLIC	?SetCastleState@CCastleSiegeSync@@QAEXH@Z	; CCastleSiegeSync::SetCastleState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlesiegesync.h
;	COMDAT ?SetCastleState@CCastleSiegeSync@@QAEXH@Z
_TEXT	SEGMENT
_iCastleState$ = 8					; size = 4
?SetCastleState@CCastleSiegeSync@@QAEXH@Z PROC		; CCastleSiegeSync::SetCastleState, COMDAT
; _this$ = ecx

; 30   : 	void SetCastleState(int iCastleState){this->m_iCurCastleState = iCastleState;};	// line : 56

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iCastleState$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetCastleState@CCastleSiegeSync@@QAEXH@Z ENDP		; CCastleSiegeSync::SetCastleState
_TEXT	ENDS
PUBLIC	?SetTaxRateChaos@CCastleSiegeSync@@QAEXH@Z	; CCastleSiegeSync::SetTaxRateChaos
; Function compile flags: /Ogtp
;	COMDAT ?SetTaxRateChaos@CCastleSiegeSync@@QAEXH@Z
_TEXT	SEGMENT
_iTaxRate$ = 8						; size = 4
?SetTaxRateChaos@CCastleSiegeSync@@QAEXH@Z PROC		; CCastleSiegeSync::SetTaxRateChaos, COMDAT
; _this$ = ecx

; 31   : 	void SetTaxRateChaos(int iTaxRate){this->m_iCurTaxRateChaos = iTaxRate;};	// line : 59

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iTaxRate$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetTaxRateChaos@CCastleSiegeSync@@QAEXH@Z ENDP		; CCastleSiegeSync::SetTaxRateChaos
_TEXT	ENDS
PUBLIC	?SetTaxRateStore@CCastleSiegeSync@@QAEXH@Z	; CCastleSiegeSync::SetTaxRateStore
; Function compile flags: /Ogtp
;	COMDAT ?SetTaxRateStore@CCastleSiegeSync@@QAEXH@Z
_TEXT	SEGMENT
_iTaxRate$ = 8						; size = 4
?SetTaxRateStore@CCastleSiegeSync@@QAEXH@Z PROC		; CCastleSiegeSync::SetTaxRateStore, COMDAT
; _this$ = ecx

; 32   : 	void SetTaxRateStore(int iTaxRate){this->m_iCurTaxRateStore = iTaxRate;};	// line : 62

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iTaxRate$[ebp]
  00006	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetTaxRateStore@CCastleSiegeSync@@QAEXH@Z ENDP		; CCastleSiegeSync::SetTaxRateStore
_TEXT	ENDS
PUBLIC	?SetTaxHuntZone@CCastleSiegeSync@@QAEXH@Z	; CCastleSiegeSync::SetTaxHuntZone
; Function compile flags: /Ogtp
;	COMDAT ?SetTaxHuntZone@CCastleSiegeSync@@QAEXH@Z
_TEXT	SEGMENT
_iTaxRate$ = 8						; size = 4
?SetTaxHuntZone@CCastleSiegeSync@@QAEXH@Z PROC		; CCastleSiegeSync::SetTaxHuntZone, COMDAT
; _this$ = ecx

; 33   : 	void SetTaxHuntZone(int iTaxRate){this->m_iCurTaxHuntZone = iTaxRate;};	// line : 65

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iTaxRate$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetTaxHuntZone@CCastleSiegeSync@@QAEXH@Z ENDP		; CCastleSiegeSync::SetTaxHuntZone
_TEXT	ENDS
PUBLIC	?GetTributeMoney@CCastleSiegeSync@@QAEHXZ	; CCastleSiegeSync::GetTributeMoney
; Function compile flags: /Ogtp
;	COMDAT ?GetTributeMoney@CCastleSiegeSync@@QAEHXZ
_TEXT	SEGMENT
?GetTributeMoney@CCastleSiegeSync@@QAEHXZ PROC		; CCastleSiegeSync::GetTributeMoney, COMDAT
; _this$ = ecx

; 35   : 	int GetTributeMoney(){return this->m_lCastleTributeMoney;};	// line : 77

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetTributeMoney@CCastleSiegeSync@@QAEHXZ ENDP		; CCastleSiegeSync::GetTributeMoney
_TEXT	ENDS
PUBLIC	?_ARGB@@YAKEEEE@Z				; _ARGB
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\tnotice.h
;	COMDAT ?_ARGB@@YAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?_ARGB@@YAKEEEE@Z PROC					; _ARGB, COMDAT

; 9    : __inline DWORD _ARGB(BYTE a, BYTE r, BYTE g, BYTE b){ return a*16777216 + b*65536 + g*256 + r;}; // in tnotice.h : line 8

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _a$[ebp]
  00007	0f b6 4d 14	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000b	0f b6 55 10	 movzx	 edx, BYTE PTR _g$[ebp]
  0000f	c1 e0 08	 shl	 eax, 8
  00012	03 c1		 add	 eax, ecx
  00014	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _r$[ebp]
  00018	c1 e0 08	 shl	 eax, 8
  0001b	03 c2		 add	 eax, edx
  0001d	c1 e0 08	 shl	 eax, 8
  00020	03 c1		 add	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_ARGB@@YAKEEEE@Z ENDP					; _ARGB
_TEXT	ENDS
PUBLIC	??_C@_0P@GMPEKMII@Test?5Data?5Send?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?TestDSSend@@YAXXZ				; TestDSSend
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	__imp__wsprintfA:PROC
EXTRN	?iCount@@3HA:DWORD				; iCount
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0P@GMPEKMII@Test?5Data?5Send?$AA@
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	SEGMENT
??_C@_0P@GMPEKMII@Test?5Data?5Send?$AA@ DB 'Test Data Send', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?TestDSSend@@YAXXZ
_TEXT	SEGMENT
_pMsg$ = -2008						; size = 2004
__$ArrayPad$ = -4					; size = 4
?TestDSSend@@YAXXZ PROC					; TestDSSend, COMDAT

; 685  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 07 00
	00		 sub	 esp, 2008		; 000007d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 686  : 	PMSG_TEST pMsg;
; 687  : 	int size;
; 688  : 
; 689  : 	size = sizeof(PMSG_TEST);
; 690  : 	pMsg.h.c=0xC2;
; 691  : 	pMsg.h.headcode =0xFF;
; 692  : 	pMsg.h.sizeH = SET_NUMBERH(size);
; 693  : 	pMsg.h.sizeL = SET_NUMBERL(size);
; 694  : 
; 695  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00018	56		 push	 esi
  00019	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  0001f	50		 push	 eax
  00020	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0002b	51		 push	 ecx
  0002c	c7 85 28 f8 ff
	ff c2 07 d4 ff	 mov	 DWORD PTR _pMsg$[ebp], -2881598 ; ffd407c2H
  00036	ff d6		 call	 esi

; 696  : 	LogAdd("%s", pMsg.testbuf );

  00038	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  0003e	52		 push	 edx
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 697  : 	cDBSMng.Send((char *)&pMsg, size);

  0004d	68 d4 07 00 00	 push	 2004			; 000007d4H
  00052	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00058	50		 push	 eax
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 698  : 	iCount++;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00068	40		 inc	 eax

; 699  : 
; 700  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00069	50		 push	 eax
  0006a	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00075	51		 push	 ecx
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  0007b	ff d6		 call	 esi

; 701  : 	LogAdd("%s", pMsg.testbuf);

  0007d	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00083	52		 push	 edx
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0008f	83 c4 14	 add	 esp, 20			; 00000014H

; 702  : 	cDBSMng.Send((char *)&pMsg, size);

  00092	68 d4 07 00 00	 push	 2004			; 000007d4H
  00097	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0009d	50		 push	 eax
  0009e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000a3	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 703  : 	iCount++;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  000ad	40		 inc	 eax

; 704  : 
; 705  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  000ae	50		 push	 eax
  000af	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  000ba	51		 push	 ecx
  000bb	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  000c0	ff d6		 call	 esi

; 706  : 	LogAdd("%s", pMsg.testbuf);

  000c2	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  000c8	52		 push	 edx
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d4	83 c4 14	 add	 esp, 20			; 00000014H

; 707  : 	cDBSMng.Send((char *)&pMsg, size);

  000d7	68 d4 07 00 00	 push	 2004			; 000007d4H
  000dc	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e2	50		 push	 eax
  000e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000e8	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 708  : 	iCount++;

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  000f2	40		 inc	 eax

; 709  : 
; 710  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  000f3	50		 push	 eax
  000f4	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  000ff	51		 push	 ecx
  00100	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00105	ff d6		 call	 esi

; 711  : 	LogAdd("%s", pMsg.testbuf);

  00107	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  0010d	52		 push	 edx
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00119	83 c4 14	 add	 esp, 20			; 00000014H

; 712  : 	cDBSMng.Send((char *)&pMsg, size);

  0011c	68 d4 07 00 00	 push	 2004			; 000007d4H
  00121	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00127	50		 push	 eax
  00128	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0012d	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 713  : 	iCount++;

  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00137	40		 inc	 eax

; 714  : 
; 715  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00138	50		 push	 eax
  00139	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00144	51		 push	 ecx
  00145	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  0014a	ff d6		 call	 esi

; 716  : 	LogAdd("%s", pMsg.testbuf);

  0014c	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00152	52		 push	 edx
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0015e	83 c4 14	 add	 esp, 20			; 00000014H

; 717  : 	cDBSMng.Send((char *)&pMsg, size);

  00161	68 d4 07 00 00	 push	 2004			; 000007d4H
  00166	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0016c	50		 push	 eax
  0016d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00172	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 718  : 	iCount++;

  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  0017c	40		 inc	 eax

; 719  : 
; 720  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  0017d	50		 push	 eax
  0017e	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00184	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00189	51		 push	 ecx
  0018a	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  0018f	ff d6		 call	 esi

; 721  : 	LogAdd("%s", pMsg.testbuf);

  00191	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00197	52		 push	 edx
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001a3	83 c4 14	 add	 esp, 20			; 00000014H

; 722  : 	cDBSMng.Send((char *)&pMsg, size);

  001a6	68 d4 07 00 00	 push	 2004			; 000007d4H
  001ab	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  001b1	50		 push	 eax
  001b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001b7	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 723  : 	iCount++;

  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  001c1	40		 inc	 eax

; 724  : 
; 725  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  001c2	50		 push	 eax
  001c3	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  001ce	51		 push	 ecx
  001cf	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  001d4	ff d6		 call	 esi

; 726  : 	LogAdd("%s", pMsg.testbuf);

  001d6	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  001dc	52		 push	 edx
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001e8	83 c4 14	 add	 esp, 20			; 00000014H

; 727  : 	cDBSMng.Send((char *)&pMsg, size);

  001eb	68 d4 07 00 00	 push	 2004			; 000007d4H
  001f0	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  001f6	50		 push	 eax
  001f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001fc	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 728  : 	iCount++;

  00201	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00206	40		 inc	 eax

; 729  : 
; 730  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00207	50		 push	 eax
  00208	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  0020e	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00213	51		 push	 ecx
  00214	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00219	ff d6		 call	 esi

; 731  : 	LogAdd("%s", pMsg.testbuf);

  0021b	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00221	52		 push	 edx
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00227	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0022d	83 c4 14	 add	 esp, 20			; 00000014H

; 732  : 	cDBSMng.Send((char *)&pMsg, size);

  00230	68 d4 07 00 00	 push	 2004			; 000007d4H
  00235	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0023b	50		 push	 eax
  0023c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00241	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 733  : 	iCount++;

  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  0024b	40		 inc	 eax

; 734  : 
; 735  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  0024c	50		 push	 eax
  0024d	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00258	51		 push	 ecx
  00259	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  0025e	ff d6		 call	 esi

; 736  : 	LogAdd("%s", pMsg.testbuf);

  00260	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00266	52		 push	 edx
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00272	83 c4 14	 add	 esp, 20			; 00000014H

; 737  : 	cDBSMng.Send((char *)&pMsg, size);

  00275	68 d4 07 00 00	 push	 2004			; 000007d4H
  0027a	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00280	50		 push	 eax
  00281	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00286	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 738  : 	iCount++;

  0028b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00290	40		 inc	 eax

; 739  : 
; 740  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00291	50		 push	 eax
  00292	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00298	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0029d	51		 push	 ecx
  0029e	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  002a3	ff d6		 call	 esi

; 741  : 	LogAdd("%s", pMsg.testbuf);

  002a5	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  002ab	52		 push	 edx
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  002b7	83 c4 14	 add	 esp, 20			; 00000014H

; 742  : 	cDBSMng.Send((char *)&pMsg, size);

  002ba	68 d4 07 00 00	 push	 2004			; 000007d4H
  002bf	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  002c5	50		 push	 eax
  002c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  002cb	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 743  : 	iCount++;

  002d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  002d5	40		 inc	 eax

; 744  : 
; 745  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  002d6	50		 push	 eax
  002d7	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  002dd	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  002e2	51		 push	 ecx
  002e3	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  002e8	ff d6		 call	 esi

; 746  : 	LogAdd("%s", pMsg.testbuf);

  002ea	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  002f0	52		 push	 edx
  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  002f6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  002fc	83 c4 14	 add	 esp, 20			; 00000014H

; 747  : 	cDBSMng.Send((char *)&pMsg, size);

  002ff	68 d4 07 00 00	 push	 2004			; 000007d4H
  00304	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0030a	50		 push	 eax
  0030b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00310	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 748  : 	iCount++;

  00315	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  0031a	40		 inc	 eax

; 749  : 
; 750  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  0031b	50		 push	 eax
  0031c	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00322	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00327	51		 push	 ecx
  00328	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  0032d	ff d6		 call	 esi

; 751  : 	LogAdd("%s", pMsg.testbuf);

  0032f	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00335	52		 push	 edx
  00336	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0033b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00341	83 c4 14	 add	 esp, 20			; 00000014H

; 752  : 	cDBSMng.Send((char *)&pMsg, size);

  00344	68 d4 07 00 00	 push	 2004			; 000007d4H
  00349	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0034f	50		 push	 eax
  00350	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00355	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 753  : 	iCount++;

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  0035f	40		 inc	 eax

; 754  : 
; 755  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00360	50		 push	 eax
  00361	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00367	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0036c	51		 push	 ecx
  0036d	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00372	ff d6		 call	 esi

; 756  : 	LogAdd("%s", pMsg.testbuf);

  00374	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00386	83 c4 14	 add	 esp, 20			; 00000014H

; 757  : 	cDBSMng.Send((char *)&pMsg, size);

  00389	68 d4 07 00 00	 push	 2004			; 000007d4H
  0038e	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00394	50		 push	 eax
  00395	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0039a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 758  : 	iCount++;

  0039f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  003a4	40		 inc	 eax

; 759  : 
; 760  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  003a5	50		 push	 eax
  003a6	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  003ac	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  003b1	51		 push	 ecx
  003b2	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  003b7	ff d6		 call	 esi

; 761  : 	LogAdd("%s", pMsg.testbuf);

  003b9	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  003bf	52		 push	 edx
  003c0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  003cb	83 c4 14	 add	 esp, 20			; 00000014H

; 762  : 	cDBSMng.Send((char *)&pMsg, size);

  003ce	68 d4 07 00 00	 push	 2004			; 000007d4H
  003d3	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  003d9	50		 push	 eax
  003da	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  003df	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 763  : 	iCount++;

  003e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  003e9	40		 inc	 eax

; 764  : 
; 765  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  003ea	50		 push	 eax
  003eb	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  003f1	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  003f6	51		 push	 ecx
  003f7	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  003fc	ff d6		 call	 esi

; 766  : 	LogAdd("%s", pMsg.testbuf);

  003fe	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00404	52		 push	 edx
  00405	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0040a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00410	83 c4 14	 add	 esp, 20			; 00000014H

; 767  : 	cDBSMng.Send((char *)&pMsg, size);

  00413	68 d4 07 00 00	 push	 2004			; 000007d4H
  00418	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0041e	50		 push	 eax
  0041f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00424	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 768  : 	iCount++;

  00429	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  0042e	40		 inc	 eax

; 769  : 
; 770  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  0042f	50		 push	 eax
  00430	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00436	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0043b	51		 push	 ecx
  0043c	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00441	ff d6		 call	 esi

; 771  : 	LogAdd("%s", pMsg.testbuf);

  00443	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00449	52		 push	 edx
  0044a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0044f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00455	83 c4 14	 add	 esp, 20			; 00000014H

; 772  : 	cDBSMng.Send((char *)&pMsg, size);

  00458	68 d4 07 00 00	 push	 2004			; 000007d4H
  0045d	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00463	50		 push	 eax
  00464	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00469	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 773  : 	iCount++;

  0046e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00473	40		 inc	 eax

; 774  : 
; 775  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00474	50		 push	 eax
  00475	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  0047b	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00480	51		 push	 ecx
  00481	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00486	ff d6		 call	 esi

; 776  : 	LogAdd("%s", pMsg.testbuf);

  00488	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  0048e	52		 push	 edx
  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00494	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0049a	83 c4 14	 add	 esp, 20			; 00000014H

; 777  : 	cDBSMng.Send((char *)&pMsg, size);

  0049d	68 d4 07 00 00	 push	 2004			; 000007d4H
  004a2	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  004a8	50		 push	 eax
  004a9	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  004ae	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 778  : 	iCount++;

  004b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  004b8	40		 inc	 eax

; 779  : 
; 780  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  004b9	50		 push	 eax
  004ba	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  004c0	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  004c5	51		 push	 ecx
  004c6	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  004cb	ff d6		 call	 esi

; 781  : 	LogAdd("%s", pMsg.testbuf);

  004cd	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  004d3	52		 push	 edx
  004d4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  004d9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  004df	83 c4 14	 add	 esp, 20			; 00000014H

; 782  : 	cDBSMng.Send((char *)&pMsg, size);

  004e2	68 d4 07 00 00	 push	 2004			; 000007d4H
  004e7	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  004ed	50		 push	 eax
  004ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  004f3	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 783  : 	iCount++;

  004f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  004fd	40		 inc	 eax

; 784  : 
; 785  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  004fe	50		 push	 eax
  004ff	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00505	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0050a	51		 push	 ecx
  0050b	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00510	ff d6		 call	 esi

; 786  : 	LogAdd("%s", pMsg.testbuf);

  00512	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  00518	52		 push	 edx
  00519	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0051e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00524	83 c4 14	 add	 esp, 20			; 00000014H

; 787  : 	cDBSMng.Send((char *)&pMsg, size);

  00527	68 d4 07 00 00	 push	 2004			; 000007d4H
  0052c	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00532	50		 push	 eax
  00533	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00538	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 788  : 	iCount++;

  0053d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00542	40		 inc	 eax

; 789  : 
; 790  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00543	50		 push	 eax
  00544	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  0054a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0054f	51		 push	 ecx
  00550	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00555	ff d6		 call	 esi

; 791  : 	LogAdd("%s", pMsg.testbuf);

  00557	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  0055d	52		 push	 edx
  0055e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00563	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00569	83 c4 14	 add	 esp, 20			; 00000014H

; 792  : 	cDBSMng.Send((char *)&pMsg, size);

  0056c	68 d4 07 00 00	 push	 2004			; 000007d4H
  00571	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00577	50		 push	 eax
  00578	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0057d	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 793  : 	iCount++;

  00582	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00587	40		 inc	 eax

; 794  : 
; 795  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00588	50		 push	 eax
  00589	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  0058f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00594	51		 push	 ecx
  00595	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  0059a	ff d6		 call	 esi

; 796  : 	LogAdd("%s", pMsg.testbuf);

  0059c	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  005a2	52		 push	 edx
  005a3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  005a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  005ae	83 c4 14	 add	 esp, 20			; 00000014H

; 797  : 	cDBSMng.Send((char *)&pMsg, size);

  005b1	68 d4 07 00 00	 push	 2004			; 000007d4H
  005b6	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  005bc	50		 push	 eax
  005bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  005c2	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 798  : 	iCount++;

  005c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  005cc	40		 inc	 eax

; 799  : 
; 800  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  005cd	50		 push	 eax
  005ce	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  005d9	51		 push	 ecx
  005da	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  005df	ff d6		 call	 esi

; 801  : 	LogAdd("%s", pMsg.testbuf);

  005e1	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  005e7	52		 push	 edx
  005e8	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  005ed	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  005f3	83 c4 14	 add	 esp, 20			; 00000014H

; 802  : 	cDBSMng.Send((char *)&pMsg, size);

  005f6	68 d4 07 00 00	 push	 2004			; 000007d4H
  005fb	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00601	50		 push	 eax
  00602	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00607	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 803  : 	iCount++;

  0060c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCount@@3HA ; iCount
  00611	40		 inc	 eax

; 804  : 
; 805  : 	wsprintf(pMsg.testbuf, "%d", iCount);

  00612	50		 push	 eax
  00613	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+4]
  00619	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0061e	51		 push	 ecx
  0061f	a3 00 00 00 00	 mov	 DWORD PTR ?iCount@@3HA, eax ; iCount
  00624	ff d6		 call	 esi

; 806  : 	LogAdd("%s", pMsg.testbuf);

  00626	8d 95 2c f8 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+4]
  0062c	52		 push	 edx
  0062d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00632	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00638	83 c4 14	 add	 esp, 20			; 00000014H

; 807  : 	cDBSMng.Send((char *)&pMsg, size);

  0063b	68 d4 07 00 00	 push	 2004			; 000007d4H
  00640	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00646	50		 push	 eax
  00647	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0064c	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 808  : 	iCount++;

  00651	ff 05 00 00 00
	00		 inc	 DWORD PTR ?iCount@@3HA	; iCount

; 809  : 
; 810  : 	LogAdd("Test Data Send");

  00657	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GMPEKMII@Test?5Data?5Send?$AA@
  0065c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 811  : }

  00662	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00665	83 c4 04	 add	 esp, 4
  00668	33 cd		 xor	 ecx, ebp
  0066a	5e		 pop	 esi
  0066b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00670	8b e5		 mov	 esp, ebp
  00672	5d		 pop	 ebp
  00673	c3		 ret	 0
?TestDSSend@@YAXXZ ENDP					; TestDSSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DataServerLogin@@YAXH@Z			; DataServerLogin
EXTRN	?GDLicenseUser@CZtLicense@@QAEXXZ:PROC		; CZtLicense::GDLicenseUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?Send@DBSockMng@@QAEHHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?GameServerPort@@3HA:DWORD			; GameServerPort
; Function compile flags: /Ogtp
;	COMDAT ?DataServerLogin@@YAXH@Z
_TEXT	SEGMENT
_pInfo$ = -64						; size = 58
__$ArrayPad$ = -4					; size = 4
_server$ = 8						; size = 4
?DataServerLogin@@YAXH@Z PROC				; DataServerLogin, COMDAT

; 815  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 816  : 	SDHP_SERVERINFO pInfo;
; 817  : 	pInfo.h.c =0xC1;
; 818  : 	pInfo.h.size = sizeof(SDHP_SERVERINFO);
; 819  : 	pInfo.h.headcode =0x00;
; 820  : 	pInfo.Port =(WORD)GameServerPort;

  00010	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?GameServerPort@@3HA

; 821  : 	pInfo.Type =1;
; 822  : 	pInfo.ServerCode =gGameServerCode;

  00016	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  0001d	66 89 45 c4	 mov	 WORD PTR _pInfo$[ebp+4], ax
  00021	c7 45 c0 c1 3a
	00 01		 mov	 DWORD PTR _pInfo$[ebp], 16792257 ; 01003ac1H
  00028	66 89 4d f8	 mov	 WORD PTR _pInfo$[ebp+56], cx

; 823  : 	strcpy( (char*)&pInfo.ServerName[0], (const char*)&szServerName[0] );

  0002c	33 c0		 xor	 eax, eax
  0002e	8b ff		 npad	 2
$LL3@DataServer:
  00030	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szServerName@@3PADA[eax]
  00036	88 4c 05 c6	 mov	 BYTE PTR _pInfo$[ebp+eax+6], cl
  0003a	40		 inc	 eax
  0003b	84 c9		 test	 cl, cl
  0003d	75 f1		 jne	 SHORT $LL3@DataServer

; 824  : 	cDBSMng.Send(server, (char*)&pInfo , pInfo.h.size  );	

  0003f	0f b6 55 c1	 movzx	 edx, BYTE PTR _pInfo$[ebp+1]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _server$[ebp]
  00046	52		 push	 edx
  00047	8d 45 c0	 lea	 eax, DWORD PTR _pInfo$[ebp]
  0004a	50		 push	 eax
  0004b	51		 push	 ecx
  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00051	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHHPADH@Z ; DBSockMng::Send

; 825  : 
; 826  : 	g_ZtLicense.GDLicenseUser();

  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005b	e8 00 00 00 00	 call	 ?GDLicenseUser@CZtLicense@@QAEXXZ ; CZtLicense::GDLicenseUser

; 827  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	33 cd		 xor	 ecx, ebp
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?DataServerLogin@@YAXH@Z ENDP				; DataServerLogin
_TEXT	ENDS
PUBLIC	?DataServerLoginResult@@YAXPAUSDHP_RESULT@@@Z	; DataServerLoginResult
EXTRN	?DSReqSelect@CBanSystem@@QAEXXZ:PROC		; CBanSystem::DSReqSelect
EXTRN	?g_BanSystem@@3VCBanSystem@@A:BYTE		; g_BanSystem
EXTRN	?GDReqRegSiegeList@CDungeonSiege@@QAEXXZ:PROC	; CDungeonSiege::GDReqRegSiegeList
EXTRN	?GDSiegeOwner@CDungeonSiege@@QAEXXZ:PROC	; CDungeonSiege::GDSiegeOwner
EXTRN	?g_DungeonSiege@@3VCDungeonSiege@@A:BYTE	; g_DungeonSiege
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	?DataServerConnected@@3HA:DWORD			; DataServerConnected
EXTRN	?gServerReady@@3HA:DWORD			; gServerReady
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?DB_Start@CZtGDManager@@QAEXXZ:PROC		; CZtGDManager::DB_Start
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_ZtGDManager@@3VCZtGDManager@@A:BYTE		; g_ZtGDManager
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
; Function compile flags: /Ogtp
;	COMDAT ?DataServerLoginResult@@YAXPAUSDHP_RESULT@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?DataServerLoginResult@@YAXPAUSDHP_RESULT@@@Z PROC	; DataServerLoginResult, COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 832  : 	if (lpMsg->Result == false )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	80 78 03 00	 cmp	 BYTE PTR [eax+3], 0
  0000a	75 22		 jne	 SHORT $LN1@DataServer@2

; 833  : 	{
; 834  : #if(SWENG_FIX==TRUE)
; 835  : 		LogAddC(2, "%s", lMsg.Get(MSGGET(1, 210)));	//FIX_CRASH

  0000c	68 d2 01 00 00	 push	 466			; 000001d2H
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00016	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0001b	50		 push	 eax
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00021	6a 02		 push	 2
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 859  : 	#endif
; 860  : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN1@DataServer@2:

; 836  : #else
; 837  : 		MsgBox(lMsg.Get(MSGGET(1, 210)));	
; 838  : #endif
; 839  : 		return;
; 840  : 	}
; 841  : 	
; 842  : #if(CUSTOM_SAVE_PT==TRUE)
; 843  : 	gParty.DBIndex = lpMsg->PartyCount;

  0002e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 844  : #endif
; 845  : 
; 846  : 	g_ZtGDManager.DB_Start();

  00031	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  00036	a3 c8 ce 17 00	 mov	 DWORD PTR ?gParty@@3VPartyClass@@A+1560264, eax
  0003b	e8 00 00 00 00	 call	 ?DB_Start@CZtGDManager@@QAEXXZ ; CZtGDManager::DB_Start

; 847  : 
; 848  : 	DataServerConnected = TRUE;
; 849  : 	gServerReady++;
; 850  : 	SendMessage(ghWnd, WM_START_SERVER, 0, 0); 

  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	01 05 00 00 00
	00		 add	 DWORD PTR ?gServerReady@@3HA, eax ; gServerReady
  00055	68 05 04 00 00	 push	 1029			; 00000405H
  0005a	51		 push	 ecx
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?DataServerConnected@@3HA, eax ; DataServerConnected
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 851  : 
; 852  : #if(EVENT_DUNGEON_SIEGE)
; 853  : 	g_DungeonSiege.GDSiegeOwner();

  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DungeonSiege@@3VCDungeonSiege@@A ; g_DungeonSiege
  0006b	e8 00 00 00 00	 call	 ?GDSiegeOwner@CDungeonSiege@@QAEXXZ ; CDungeonSiege::GDSiegeOwner

; 854  : 	g_DungeonSiege.GDReqRegSiegeList();

  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DungeonSiege@@3VCDungeonSiege@@A ; g_DungeonSiege
  00075	e8 00 00 00 00	 call	 ?GDReqRegSiegeList@CDungeonSiege@@QAEXXZ ; CDungeonSiege::GDReqRegSiegeList

; 855  : #endif
; 856  : 
; 857  : 	#if(DEV_BANSYSTEM)
; 858  : 	g_BanSystem.DSReqSelect();

  0007a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BanSystem@@3VCBanSystem@@A ; g_BanSystem

; 859  : 	#endif
; 860  : }

  0007f	5d		 pop	 ebp

; 855  : #endif
; 856  : 
; 857  : 	#if(DEV_BANSYSTEM)
; 858  : 	g_BanSystem.DSReqSelect();

  00080	e9 00 00 00 00	 jmp	 ?DSReqSelect@CBanSystem@@QAEXXZ ; CBanSystem::DSReqSelect
?DataServerLoginResult@@YAXPAUSDHP_RESULT@@@Z ENDP	; DataServerLoginResult
_TEXT	ENDS
PUBLIC	??_C@_0DI@OHFHMHBN@Requested?5character?5list?5doesn?8t@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?JGPGetCharList@@YAXPAE@Z			; JGPGetCharList
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	?LevelSmallConvert@@YAEH@Z:PROC			; LevelSmallConvert
EXTRN	?IsPet@CPetZt@@QAE_NH@Z:PROC			; CPetZt::IsPet
EXTRN	?g_PetZt@@3VCPetZt@@A:BYTE			; g_PetZt
EXTRN	?Player@CBanSystem@@QAE_NH@Z:PROC		; CBanSystem::Player
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsAccontConnect@@YAHHPAD@Z:PROC		; gObjIsAccontConnect
EXTRN	_memset:PROC
;	COMDAT ??_C@_0DI@OHFHMHBN@Requested?5character?5list?5doesn?8t@
; File e:\work\tranet_version\gs\include\prodef.h
CONST	SEGMENT
??_C@_0DI@OHFHMHBN@Requested?5character?5list?5doesn?8t@ DB 'Requested ch'
	DB	'aracter list doesn''t match the user. (%s)%s', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?JGPGetCharList@@YAXPAE@Z
_TEXT	SEGMENT
$T231225 = -388						; size = 4
_aIndex$ = -384						; size = 4
_n$227923 = -380					; size = 4
_lOfs$ = -376						; size = 4
_HightLevel$ = -372					; size = 4
tv2026 = -368						; size = 4
_pMsg$ = -364						; size = 5
_lsOfs$ = -356						; size = 4
_pCLCount$ = -352					; size = 8
_TempInventory$ = -344					; size = 24
tv2277 = -317						; size = 1
_levelindex$228030 = -316				; size = 4
_pCList$ = -312						; size = 34
_GenerableClass$ = -274					; size = 1
tv856 = -273						; size = 1
tv831 = -273						; size = 1
tv811 = -273						; size = 1
tv790 = -273						; size = 1
tv766 = -273						; size = 1
_index$ = -273						; size = 1
_sendbuf$ = -272					; size = 256
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpRecv$ = 8						; size = 4
?JGPGetCharList@@YAXPAE@Z PROC				; JGPGetCharList, COMDAT

; 886  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpRecv$[ebp]

; 887  : 	SDHP_CHARLISTCOUNT * lpCount = (SDHP_CHARLISTCOUNT *)lpRecv;
; 888  : 	SDHP_CHARLIST * lpCL;
; 889  : 	char szId[MAX_ACCOUNT_LEN+1];
; 890  : 	BYTE sendbuf[256];
; 891  : 	int lOfs = 0;
; 892  : 	int lsOfs = sizeof(SDHP_CHARLISTCOUNT);
; 893  : 	int aIndex = lpCount->Number;
; 894  : 	BYTE index;
; 895  : 	PMSG_CHARLISTCOUNT pCLCount;	// Packet Char List Count 7
; 896  : 	PMSG_CHARLIST pCList;
; 897  : 	WORD TempInventory[12];
; 898  : 	BYTE btExcellentOption;
; 899  : 
; 900  : 	pCLCount.h.c		= 0xC1;
; 901  : 	pCLCount.h.headcode = 0xF3;
; 902  : 	pCLCount.subcode	= 0x00;
; 903  : 	pCLCount.Count		= lpCount->Count;
; 904  : 
; 905  : #if(DEBUG_CODE)
; 906  : 	LogAddC(2,"pCLCount.Count: %d",pCLCount.Count);
; 907  : #endif
; 908  : 
; 909  : 	szId[MAX_ACCOUNT_LEN] = 0;
; 910  : 	memcpy(szId, lpCount->AccountId, MAX_ACCOUNT_LEN);

  00017	8b 4b 0d	 mov	 ecx, DWORD PTR [ebx+13]
  0001a	8a 43 06	 mov	 al, BYTE PTR [ebx+6]
  0001d	8b 53 11	 mov	 edx, DWORD PTR [ebx+17]
  00020	56		 push	 esi
  00021	0f bf 73 04	 movsx	 esi, WORD PTR [ebx+4]
  00025	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx

; 911  : 
; 912  : 	if(gObjIsAccontConnect(aIndex, szId) == FALSE)

  00028	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  0002b	88 85 a6 fe ff
	ff		 mov	 BYTE PTR _pCLCount$[ebp+6], al
  00031	66 8b 43 15	 mov	 ax, WORD PTR [ebx+21]
  00035	51		 push	 ecx
  00036	56		 push	 esi
  00037	c7 85 9c fe ff
	ff 1c 00 00 00	 mov	 DWORD PTR _lsOfs$[ebp], 28 ; 0000001cH
  00041	89 b5 80 fe ff
	ff		 mov	 DWORD PTR _aIndex$[ebp], esi
  00047	c6 85 a0 fe ff
	ff c1		 mov	 BYTE PTR _pCLCount$[ebp], 193 ; 000000c1H
  0004e	66 c7 85 a2 fe
	ff ff f3 00	 mov	 WORD PTR _pCLCount$[ebp+2], 243 ; 000000f3H
  00057	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  0005b	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx
  0005e	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  00062	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect

; 913  : 	{
; 914  : 		LogAddC(2, "Requested character list doesn't match the user. (%s)%s", gObj[aIndex].AccountID, szId);

  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006d	83 c4 08	 add	 esp, 8
  00070	85 c0		 test	 eax, eax
  00072	75 37		 jne	 SHORT $LN86@JGPGetChar
  00074	8b c6		 mov	 eax, esi
  00076	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0007c	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  0007f	52		 push	 edx
  00080	8d 54 08 6c	 lea	 edx, DWORD PTR [eax+ecx+108]
  00084	52		 push	 edx
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OHFHMHBN@Requested?5character?5list?5doesn?8t@
  0008a	6a 02		 push	 2
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 915  : 		CloseClient(aIndex);

  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00098	83 c4 14	 add	 esp, 20			; 00000014H
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 1372 : 
; 1373 : 	//g_ZtUser.GCDataClient(aIndex);
; 1374 : #if(SYSTEM_ACHIEVEMENTS)
; 1375 : 	//g_Achievements.GCSettingsData(aIndex);
; 1376 : #endif
; 1377 : }

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a0	33 cd		 xor	 ecx, ebp
  000a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
$LN86@JGPGetChar:

; 916  : 		return;
; 917  : 	}
; 918  : 
; 919  : 	gObj[aIndex].Magumsa		= lpCount->Magumsa;

  000ab	0f b6 43 0c	 movzx	 eax, BYTE PTR [ebx+12]
  000af	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000b5	88 44 0e 34	 mov	 BYTE PTR [esi+ecx+52], al

; 920  : 	pCLCount.MaxClass			= lpCount->Magumsa + 2;
; 921  : 	pCLCount.MaxClass			+= 1;
; 922  : 	pCLCount.MoveCnt			= lpCount->MoveCnt;

  000b9	0f b6 43 18	 movzx	 eax, BYTE PTR [ebx+24]
  000bd	8a 53 0c	 mov	 dl, BYTE PTR [ebx+12]
  000c0	80 c2 03	 add	 dl, 3
  000c3	88 85 a5 fe ff
	ff		 mov	 BYTE PTR _pCLCount$[ebp+5], al

; 923  : 	// ----
; 924  : #ifdef ZTPINV
; 925  : #ifdef DEBUG_CODE
; 926  : 	LogAddC(2, "lpCount->ZtpandedWarehouse: %d", lpCount->ZtpandedWarehouse);
; 927  : 	
; 928  : #endif
; 929  : 
; 930  : 	#if(!ZTTEAM_GAMECLIENT_DEV)
; 931  : 	pCLCount.ZtpandedWarehouse		= lpCount->ZtpandedWarehouse;

  000c9	8a 43 19	 mov	 al, BYTE PTR [ebx+25]
  000cc	84 c0		 test	 al, al
  000ce	0f 95 c1	 setne	 cl
  000d1	88 95 a4 fe ff
	ff		 mov	 BYTE PTR _pCLCount$[ebp+4], dl

; 932  : 	#endif
; 933  : 	gObj[aIndex].ZtpandedWarehouse	= lpCount->ZtpandedWarehouse;

  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000dd	88 8d a7 fe ff
	ff		 mov	 BYTE PTR _pCLCount$[ebp+7], cl

; 934  : #endif
; 935  : 
; 936  : 	if(g_ZtLicense.CheckUser(NSGames))

  000e3	6a 51		 push	 81			; 00000051H
  000e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ea	89 b5 90 fe ff
	ff		 mov	 DWORD PTR tv2026[ebp], esi
  000f0	88 84 16 25 26
	00 00		 mov	 BYTE PTR [esi+edx+9765], al
  000f7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000fc	84 c0		 test	 al, al
  000fe	74 0d		 je	 SHORT $LN85@JGPGetChar

; 937  : 	{
; 938  : 		gObj[aIndex].ZtpandedWarehouse = 1;

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00105	c6 84 06 25 26
	00 00 01	 mov	 BYTE PTR [esi+eax+9765], 1
$LN85@JGPGetChar:

; 939  : 	}
; 940  : 
; 941  : 	memset(sendbuf, 0, sizeof(sendbuf));

  0010d	68 00 01 00 00	 push	 256			; 00000100H
  00112	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _sendbuf$[ebp]
  00118	6a 00		 push	 0
  0011a	51		 push	 ecx
  0011b	e8 00 00 00 00	 call	 _memset
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH

; 942  : 	lOfs += sizeof(PMSG_CHARLISTCOUNT);
; 943  : 
; 944  : #ifdef CHARCREATE_TEMP
; 945  : 	int HightLevel		= 0;
; 946  : 	BYTE GenerableClass = 0;
; 947  : #endif
; 948  : 
; 949  : 	if( pCLCount.Count > 0 )

  00123	80 bd a6 fe ff
	ff 00		 cmp	 BYTE PTR _pCLCount$[ebp+6], 0
  0012a	c7 85 88 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 8
  00134	c7 85 8c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _HightLevel$[ebp], 0
  0013e	c6 85 ee fe ff
	ff 00		 mov	 BYTE PTR _GenerableClass$[ebp], 0
  00145	0f 86 54 0b 00
	00		 jbe	 $LN81@JGPGetChar

; 950  : 	{
; 951  : 		for ( int n=0;n<pCLCount.Count ;n++)

  0014b	0f b6 85 a6 fe
	ff ff		 movzx	 eax, BYTE PTR _pCLCount$[ebp+6]
  00152	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$227923[ebp], 0
  0015c	89 85 7c fe ff
	ff		 mov	 DWORD PTR $T231225[ebp], eax
  00162	85 c0		 test	 eax, eax
  00164	0f 8e 35 0b 00
	00		 jle	 $LN81@JGPGetChar
  0016a	57		 push	 edi
  0016b	eb 03 8d 49 00	 npad	 5
$LL83@JGPGetChar:

; 952  : 		{
; 953  : 			memset(&pCList, 0, sizeof(pCList));
; 954  : 			lpCL = (SDHP_CHARLIST *)&lpRecv[lsOfs];
; 955  : #ifdef CHARCREATE_TEMP
; 956  : 			if( lpCL->Level > HightLevel )

  00170	8b b5 9c fe ff
	ff		 mov	 esi, DWORD PTR _lsOfs$[ebp]
  00176	33 c0		 xor	 eax, eax
  00178	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp], eax
  0017e	89 85 cc fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+4], eax
  00184	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+8], eax
  0018a	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+12], eax
  00190	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+16], eax
  00196	89 85 dc fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+20], eax
  0019c	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+24], eax
  001a2	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+28], eax
  001a8	66 89 85 e8 fe
	ff ff		 mov	 WORD PTR _pCList$[ebp+32], ax
  001af	0f b7 44 33 0c	 movzx	 eax, WORD PTR [ebx+esi+12]
  001b4	8b c8		 mov	 ecx, eax
  001b6	3b 8d 8c fe ff
	ff		 cmp	 ecx, DWORD PTR _HightLevel$[ebp]
  001bc	7e 06		 jle	 SHORT $LN80@JGPGetChar

; 957  : 			{
; 958  : 				HightLevel = lpCL->Level;

  001be	89 8d 8c fe ff
	ff		 mov	 DWORD PTR _HightLevel$[ebp], ecx
$LN80@JGPGetChar:

; 959  : 			}
; 960  : #endif
; 961  : 			pCList.Index = lpCL->Index;

  001c4	8a 14 33	 mov	 dl, BYTE PTR [ebx+esi]

; 962  : 			pCList.Level = lpCL->Level;
; 963  : 			pCList.CtlCode = lpCL->CtlCode;
; 964  : 			pCList.btGuildStatus = lpCL->btGuildStatus;

  001c7	8a 4c 33 41	 mov	 cl, BYTE PTR [ebx+esi+65]
  001cb	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _pCList$[ebp+12], ax
  001d2	8a 44 33 0f	 mov	 al, BYTE PTR [ebx+esi+15]
  001d6	88 95 c8 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp], dl

; 965  : 
; 966  : 			if ( gObj[aIndex].m_cAccountItemBlock != 0 )

  001dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e2	88 85 d6 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+14], al
  001e8	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR tv2026[ebp]
  001ee	80 bc 02 14 02
	00 00 00	 cmp	 BYTE PTR [edx+eax+532], 0
  001f6	88 8d e9 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+33], cl
  001fc	74 07		 je	 SHORT $LN79@JGPGetChar

; 967  : 				pCList.CtlCode |= 0x10;	// Set Block Item

  001fe	80 8d d6 fe ff
	ff 10		 or	 BYTE PTR _pCList$[ebp+14], 16 ; 00000010H
$LN79@JGPGetChar:

; 968  : 
; 969  : 			#if(DEV_BANSYSTEM)
; 970  : 			if(!g_BanSystem.Player(aIndex))

  00205	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0020b	51		 push	 ecx
  0020c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BanSystem@@3VCBanSystem@@A ; g_BanSystem
  00211	e8 00 00 00 00	 call	 ?Player@CBanSystem@@QAE_NH@Z ; CBanSystem::Player
  00216	84 c0		 test	 al, al
  00218	75 07		 jne	 SHORT $LN78@JGPGetChar

; 971  : 			{
; 972  : 				pCList.CtlCode = 0x01;

  0021a	c6 85 d6 fe ff
	ff 01		 mov	 BYTE PTR _pCList$[ebp+14], 1
$LN78@JGPGetChar:

; 973  : 			}
; 974  : 			#endif
; 975  : 
; 976  : 			memcpy(pCList.Name, lpCL->Name, MAX_ACCOUNT_LEN);

  00221	66 8b 4c 33 09	 mov	 cx, WORD PTR [ebx+esi+9]
  00226	8b 44 33 05	 mov	 eax, DWORD PTR [ebx+esi+5]
  0022a	8b 54 33 01	 mov	 edx, DWORD PTR [ebx+esi+1]
  0022e	89 85 cd fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+5], eax
  00234	66 89 8d d1 fe
	ff ff		 mov	 WORD PTR _pCList$[ebp+9], cx

; 977  : 
; 978  : 			pCList.CharSet[CS_CLASS] = CS_GET_CLASS(lpCL->Class);
; 979  : 			int changeup = CS_GET_CHANGEUP(lpCL->Class);

  0023b	8a 4c 33 0e	 mov	 cl, BYTE PTR [ebx+esi+14]
  0023f	89 95 c9 fe ff
	ff		 mov	 DWORD PTR _pCList$[ebp+1], edx
  00245	0f b6 c1	 movzx	 eax, cl
  00248	83 e0 07	 and	 eax, 7

; 980  : 			pCList.CharSet[CS_CLASS] |= CS_SET_CHANGEUP(changeup);
; 981  : 			pCList.CharSet[CS_CLASS] |= CS_GET_MASTERCLASS(changeup);

  0024b	8a d0		 mov	 dl, al
  0024d	80 e2 01	 and	 dl, 1
  00250	02 d2		 add	 dl, dl
  00252	02 d2		 add	 dl, dl
  00254	24 02		 and	 al, 2
  00256	0a d0		 or	 dl, al

; 982  : 
; 983  : 			pCList.CharSet[9] = 0;
; 984  : 
; 985  : 			if ( lpCL->dbInventory[0] == (BYTE)-1 && (lpCL->dbInventory[2] & 0x80) == 0x80 && (lpCL->dbInventory[3]& 0xF0) == 0xF0  )

  00258	8a 44 33 10	 mov	 al, BYTE PTR [ebx+esi+16]
  0025c	02 d2		 add	 dl, dl
  0025e	80 e1 f0	 and	 cl, 240			; 000000f0H
  00261	0a d1		 or	 dl, cl
  00263	02 d2		 add	 dl, dl
  00265	88 95 d7 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+15], dl
  0026b	3c ff		 cmp	 al, 255			; 000000ffH
  0026d	75 21		 jne	 SHORT $LN77@JGPGetChar
  0026f	f6 44 33 12 80	 test	 BYTE PTR [ebx+esi+18], 128 ; 00000080H
  00274	74 1a		 je	 SHORT $LN77@JGPGetChar
  00276	8a 4c 33 13	 mov	 cl, BYTE PTR [ebx+esi+19]
  0027a	80 e1 f0	 and	 cl, 240			; 000000f0H
  0027d	80 f9 f0	 cmp	 cl, 240			; 000000f0H
  00280	75 0e		 jne	 SHORT $LN77@JGPGetChar

; 986  : 			{
; 987  : 				TempInventory[0] = -1;

  00282	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00287	66 89 95 a8 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp], dx

; 988  : 			}
; 989  : 			else

  0028e	eb 2e		 jmp	 SHORT $LN76@JGPGetChar
$LN77@JGPGetChar:

; 990  : 			{
; 991  : 				TempInventory[0] = (lpCL->dbInventory[0] + (lpCL->dbInventory[2]&0x80)*2)+ (lpCL->dbInventory[3]&0xF0)*32;

  00290	8a 4c 33 13	 mov	 cl, BYTE PTR [ebx+esi+19]
  00294	80 e1 f0	 and	 cl, 240			; 000000f0H
  00297	0f b6 d1	 movzx	 edx, cl
  0029a	66 c1 e2 04	 shl	 dx, 4
  0029e	66 8b ca	 mov	 cx, dx
  002a1	8a 54 33 12	 mov	 dl, BYTE PTR [ebx+esi+18]
  002a5	80 e2 80	 and	 dl, 128			; 00000080H
  002a8	0f b6 d2	 movzx	 edx, dl
  002ab	66 03 ca	 add	 cx, dx
  002ae	0f b6 c0	 movzx	 eax, al
  002b1	66 03 c9	 add	 cx, cx
  002b4	66 03 c8	 add	 cx, ax
  002b7	66 89 8d a8 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp], cx
$LN76@JGPGetChar:

; 992  : 			}
; 993  : 			if ( lpCL->dbInventory[4] == (BYTE)-1 && (lpCL->dbInventory[6]& 0x80) == 0x80 && (lpCL->dbInventory[7]& 0xF0) == 0xF0  )

  002be	8a 4c 33 14	 mov	 cl, BYTE PTR [ebx+esi+20]
  002c2	80 f9 ff	 cmp	 cl, 255			; 000000ffH
  002c5	75 1a		 jne	 SHORT $LN75@JGPGetChar
  002c7	f6 44 33 16 80	 test	 BYTE PTR [ebx+esi+22], 128 ; 00000080H
  002cc	74 13		 je	 SHORT $LN75@JGPGetChar
  002ce	8a 54 33 17	 mov	 dl, BYTE PTR [ebx+esi+23]
  002d2	80 e2 f0	 and	 dl, 240			; 000000f0H
  002d5	80 fa f0	 cmp	 dl, 240			; 000000f0H
  002d8	75 07		 jne	 SHORT $LN75@JGPGetChar

; 994  : 			{
; 995  : 				TempInventory[1] = -1;

  002da	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 996  : 			}
; 997  : 			else

  002df	eb 26		 jmp	 SHORT $LN129@JGPGetChar
$LN75@JGPGetChar:

; 998  : 			{
; 999  : 				TempInventory[1] = (lpCL->dbInventory[4] + (lpCL->dbInventory[6]&0x80)*2)+ (lpCL->dbInventory[7]&0xF0)*32;

  002e1	0f b6 54 33 17	 movzx	 edx, BYTE PTR [ebx+esi+23]
  002e6	80 e2 f0	 and	 dl, 240			; 000000f0H
  002e9	0f b6 c2	 movzx	 eax, dl
  002ec	0f b6 54 33 16	 movzx	 edx, BYTE PTR [ebx+esi+22]
  002f1	80 e2 80	 and	 dl, 128			; 00000080H
  002f4	66 c1 e0 04	 shl	 ax, 4
  002f8	0f b6 d2	 movzx	 edx, dl
  002fb	66 03 c2	 add	 ax, dx
  002fe	0f b6 c9	 movzx	 ecx, cl
  00301	66 03 c0	 add	 ax, ax
  00304	66 03 c1	 add	 ax, cx
$LN129@JGPGetChar:
  00307	66 89 85 aa fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+2], ax

; 1000 : 			}
; 1001 : 			if ( lpCL->dbInventory[8] == (BYTE)-1 && (lpCL->dbInventory[10]& 0x80) == 0x80 && (lpCL->dbInventory[11]& 0xF0) == 0xF0  )

  0030e	8a 44 33 18	 mov	 al, BYTE PTR [ebx+esi+24]
  00312	3c ff		 cmp	 al, 255			; 000000ffH
  00314	75 21		 jne	 SHORT $LN73@JGPGetChar
  00316	f6 44 33 1a 80	 test	 BYTE PTR [ebx+esi+26], 128 ; 00000080H
  0031b	74 1a		 je	 SHORT $LN73@JGPGetChar
  0031d	8a 54 33 1b	 mov	 dl, BYTE PTR [ebx+esi+27]
  00321	80 e2 f0	 and	 dl, 240			; 000000f0H
  00324	80 fa f0	 cmp	 dl, 240			; 000000f0H
  00327	75 0e		 jne	 SHORT $LN73@JGPGetChar

; 1002 : 			{
; 1003 : 				TempInventory[2] = 0x1FF;

  00329	b8 ff 01 00 00	 mov	 eax, 511		; 000001ffH
  0032e	66 89 85 ac fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+4], ax

; 1004 : 			}
; 1005 : 			else

  00335	eb 38		 jmp	 SHORT $LN72@JGPGetChar
$LN73@JGPGetChar:

; 1006 : 			{
; 1007 : 				TempInventory[2] = ((lpCL->dbInventory[8] + (lpCL->dbInventory[10]&0x80)*2)+ (lpCL->dbInventory[11]&0xF0)*32)%MAX_SUBTYPE_ITEMS;

  00337	0f b6 4c 33 1b	 movzx	 ecx, BYTE PTR [ebx+esi+27]
  0033c	0f b6 54 33 1a	 movzx	 edx, BYTE PTR [ebx+esi+26]
  00341	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  00347	c1 e1 04	 shl	 ecx, 4
  0034a	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00350	0f b6 c0	 movzx	 eax, al
  00353	03 ca		 add	 ecx, edx
  00355	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00358	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  0035e	79 08		 jns	 SHORT $LN120@JGPGetChar
  00360	49		 dec	 ecx
  00361	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00367	41		 inc	 ecx
$LN120@JGPGetChar:
  00368	66 89 8d ac fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+4], cx
$LN72@JGPGetChar:

; 1008 : 			}
; 1009 : 			if ( lpCL->dbInventory[12] == (BYTE)-1 && (lpCL->dbInventory[14]& 0x80) == 0x80 && (lpCL->dbInventory[15]& 0xF0) == 0xF0  )

  0036f	8a 44 33 1c	 mov	 al, BYTE PTR [ebx+esi+28]
  00373	3c ff		 cmp	 al, 255			; 000000ffH
  00375	75 21		 jne	 SHORT $LN71@JGPGetChar
  00377	f6 44 33 1e 80	 test	 BYTE PTR [ebx+esi+30], 128 ; 00000080H
  0037c	74 1a		 je	 SHORT $LN71@JGPGetChar
  0037e	8a 54 33 1f	 mov	 dl, BYTE PTR [ebx+esi+31]
  00382	80 e2 f0	 and	 dl, 240			; 000000f0H
  00385	80 fa f0	 cmp	 dl, 240			; 000000f0H
  00388	75 0e		 jne	 SHORT $LN71@JGPGetChar

; 1010 : 			{
; 1011 : 				TempInventory[3] = 0x1FF;

  0038a	b8 ff 01 00 00	 mov	 eax, 511		; 000001ffH
  0038f	66 89 85 ae fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+6], ax

; 1012 : 			}
; 1013 : 			else

  00396	eb 38		 jmp	 SHORT $LN70@JGPGetChar
$LN71@JGPGetChar:

; 1014 : 			{
; 1015 : 				TempInventory[3] = ((lpCL->dbInventory[12] + (lpCL->dbInventory[14]&0x80)*2)+ (lpCL->dbInventory[15]&0xF0)*32)%MAX_SUBTYPE_ITEMS;

  00398	0f b6 4c 33 1f	 movzx	 ecx, BYTE PTR [ebx+esi+31]
  0039d	0f b6 54 33 1e	 movzx	 edx, BYTE PTR [ebx+esi+30]
  003a2	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  003a8	c1 e1 04	 shl	 ecx, 4
  003ab	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  003b1	0f b6 c0	 movzx	 eax, al
  003b4	03 ca		 add	 ecx, edx
  003b6	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  003b9	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  003bf	79 08		 jns	 SHORT $LN121@JGPGetChar
  003c1	49		 dec	 ecx
  003c2	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  003c8	41		 inc	 ecx
$LN121@JGPGetChar:
  003c9	66 89 8d ae fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+6], cx
$LN70@JGPGetChar:

; 1016 : 			}
; 1017 : 			if ( lpCL->dbInventory[16] == (BYTE)-1 && (lpCL->dbInventory[18]& 0x80) == 0x80 && (lpCL->dbInventory[19]& 0xF0) == 0xF0  )

  003d0	8a 44 33 20	 mov	 al, BYTE PTR [ebx+esi+32]
  003d4	3c ff		 cmp	 al, 255			; 000000ffH
  003d6	75 21		 jne	 SHORT $LN69@JGPGetChar
  003d8	f6 44 33 22 80	 test	 BYTE PTR [ebx+esi+34], 128 ; 00000080H
  003dd	74 1a		 je	 SHORT $LN69@JGPGetChar
  003df	8a 54 33 23	 mov	 dl, BYTE PTR [ebx+esi+35]
  003e3	80 e2 f0	 and	 dl, 240			; 000000f0H
  003e6	80 fa f0	 cmp	 dl, 240			; 000000f0H
  003e9	75 0e		 jne	 SHORT $LN69@JGPGetChar

; 1018 : 			{
; 1019 : 				TempInventory[4] = 0x1FF;

  003eb	b8 ff 01 00 00	 mov	 eax, 511		; 000001ffH
  003f0	66 89 85 b0 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+8], ax

; 1020 : 			}
; 1021 : 			else

  003f7	eb 38		 jmp	 SHORT $LN68@JGPGetChar
$LN69@JGPGetChar:

; 1022 : 			{
; 1023 : 				TempInventory[4] = ((lpCL->dbInventory[16] + (lpCL->dbInventory[18]&0x80)*2)+ (lpCL->dbInventory[19]&0xF0)*32)%MAX_SUBTYPE_ITEMS;

  003f9	0f b6 4c 33 23	 movzx	 ecx, BYTE PTR [ebx+esi+35]
  003fe	0f b6 54 33 22	 movzx	 edx, BYTE PTR [ebx+esi+34]
  00403	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  00409	c1 e1 04	 shl	 ecx, 4
  0040c	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00412	0f b6 c0	 movzx	 eax, al
  00415	03 ca		 add	 ecx, edx
  00417	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  0041a	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  00420	79 08		 jns	 SHORT $LN122@JGPGetChar
  00422	49		 dec	 ecx
  00423	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00429	41		 inc	 ecx
$LN122@JGPGetChar:
  0042a	66 89 8d b0 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+8], cx
$LN68@JGPGetChar:

; 1024 : 			}
; 1025 : 			if ( lpCL->dbInventory[20] == (BYTE)-1 && (lpCL->dbInventory[22]& 0x80) == 0x80 && (lpCL->dbInventory[23]& 0xF0) == 0xF0  )

  00431	8a 44 33 24	 mov	 al, BYTE PTR [ebx+esi+36]
  00435	3c ff		 cmp	 al, 255			; 000000ffH
  00437	75 21		 jne	 SHORT $LN67@JGPGetChar
  00439	f6 44 33 26 80	 test	 BYTE PTR [ebx+esi+38], 128 ; 00000080H
  0043e	74 1a		 je	 SHORT $LN67@JGPGetChar
  00440	8a 54 33 27	 mov	 dl, BYTE PTR [ebx+esi+39]
  00444	80 e2 f0	 and	 dl, 240			; 000000f0H
  00447	80 fa f0	 cmp	 dl, 240			; 000000f0H
  0044a	75 0e		 jne	 SHORT $LN67@JGPGetChar

; 1026 : 			{
; 1027 : 				TempInventory[5] = 0x1FF;

  0044c	b8 ff 01 00 00	 mov	 eax, 511		; 000001ffH
  00451	66 89 85 b2 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+10], ax

; 1028 : 			}
; 1029 : 			else

  00458	eb 38		 jmp	 SHORT $LN66@JGPGetChar
$LN67@JGPGetChar:

; 1030 : 			{
; 1031 : 				TempInventory[5] = ((lpCL->dbInventory[20] + (lpCL->dbInventory[22]&0x80)*2)+ (lpCL->dbInventory[23]&0xF0)*32)%MAX_SUBTYPE_ITEMS;

  0045a	0f b6 4c 33 27	 movzx	 ecx, BYTE PTR [ebx+esi+39]
  0045f	0f b6 54 33 26	 movzx	 edx, BYTE PTR [ebx+esi+38]
  00464	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  0046a	c1 e1 04	 shl	 ecx, 4
  0046d	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00473	0f b6 c0	 movzx	 eax, al
  00476	03 ca		 add	 ecx, edx
  00478	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  0047b	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  00481	79 08		 jns	 SHORT $LN123@JGPGetChar
  00483	49		 dec	 ecx
  00484	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  0048a	41		 inc	 ecx
$LN123@JGPGetChar:
  0048b	66 89 8d b2 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+10], cx
$LN66@JGPGetChar:

; 1032 : 			}
; 1033 : 			if ( lpCL->dbInventory[24] == (BYTE)-1 && (lpCL->dbInventory[26]& 0x80) == 0x80 && (lpCL->dbInventory[27]& 0xF0) == 0xF0  )

  00492	8a 44 33 28	 mov	 al, BYTE PTR [ebx+esi+40]
  00496	3c ff		 cmp	 al, 255			; 000000ffH
  00498	75 21		 jne	 SHORT $LN65@JGPGetChar
  0049a	f6 44 33 2a 80	 test	 BYTE PTR [ebx+esi+42], 128 ; 00000080H
  0049f	74 1a		 je	 SHORT $LN65@JGPGetChar
  004a1	8a 54 33 2b	 mov	 dl, BYTE PTR [ebx+esi+43]
  004a5	80 e2 f0	 and	 dl, 240			; 000000f0H
  004a8	80 fa f0	 cmp	 dl, 240			; 000000f0H
  004ab	75 0e		 jne	 SHORT $LN65@JGPGetChar

; 1034 : 			{
; 1035 : 				TempInventory[6] = 0x1FF;

  004ad	b8 ff 01 00 00	 mov	 eax, 511		; 000001ffH
  004b2	66 89 85 b4 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+12], ax

; 1036 : 			}
; 1037 : 			else

  004b9	eb 38		 jmp	 SHORT $LN64@JGPGetChar
$LN65@JGPGetChar:

; 1038 : 			{
; 1039 : 				TempInventory[6] = ((lpCL->dbInventory[24] + (lpCL->dbInventory[26]&0x80)*2)+ (lpCL->dbInventory[27]&0xF0)*32)%MAX_SUBTYPE_ITEMS;

  004bb	0f b6 4c 33 2b	 movzx	 ecx, BYTE PTR [ebx+esi+43]
  004c0	0f b6 54 33 2a	 movzx	 edx, BYTE PTR [ebx+esi+42]
  004c5	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  004cb	c1 e1 04	 shl	 ecx, 4
  004ce	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  004d4	0f b6 c0	 movzx	 eax, al
  004d7	03 ca		 add	 ecx, edx
  004d9	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  004dc	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  004e2	79 08		 jns	 SHORT $LN124@JGPGetChar
  004e4	49		 dec	 ecx
  004e5	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  004eb	41		 inc	 ecx
$LN124@JGPGetChar:
  004ec	66 89 8d b4 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+12], cx
$LN64@JGPGetChar:

; 1040 : 			}
; 1041 : 			if ( lpCL->dbInventory[28] == (BYTE)-1 && (lpCL->dbInventory[30]& 0x80) == 0x80 && (lpCL->dbInventory[31]& 0xF0) == 0xF0  )

  004f3	8a 44 33 2c	 mov	 al, BYTE PTR [ebx+esi+44]
  004f7	3c ff		 cmp	 al, 255			; 000000ffH
  004f9	75 1a		 jne	 SHORT $LN63@JGPGetChar
  004fb	f6 44 33 2e 80	 test	 BYTE PTR [ebx+esi+46], 128 ; 00000080H
  00500	74 13		 je	 SHORT $LN63@JGPGetChar
  00502	8a 54 33 2f	 mov	 dl, BYTE PTR [ebx+esi+47]
  00506	80 e2 f0	 and	 dl, 240			; 000000f0H
  00509	80 fa f0	 cmp	 dl, 240			; 000000f0H
  0050c	75 07		 jne	 SHORT $LN63@JGPGetChar

; 1042 : 			{
; 1043 : 				TempInventory[7] = 0x1FF;

  0050e	bf ff 01 00 00	 mov	 edi, 511		; 000001ffH

; 1044 : 			}
; 1045 : 			else

  00513	eb 33		 jmp	 SHORT $LN125@JGPGetChar
$LN63@JGPGetChar:

; 1046 : 			{
; 1047 : 				TempInventory[7] = ((lpCL->dbInventory[28] + (lpCL->dbInventory[30]&0x80)*2)+ (lpCL->dbInventory[31]&0xF0)*32)%MAX_SUBTYPE_ITEMS;

  00515	0f b6 4c 33 2f	 movzx	 ecx, BYTE PTR [ebx+esi+47]
  0051a	0f b6 54 33 2e	 movzx	 edx, BYTE PTR [ebx+esi+46]
  0051f	81 e1 f0 00 00
	00		 and	 ecx, 240		; 000000f0H
  00525	c1 e1 04	 shl	 ecx, 4
  00528	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  0052e	0f b6 c0	 movzx	 eax, al
  00531	03 ca		 add	 ecx, edx
  00533	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00536	8b f9		 mov	 edi, ecx
  00538	81 e7 ff 01 00
	80		 and	 edi, -2147483137	; 800001ffH
  0053e	79 08		 jns	 SHORT $LN125@JGPGetChar
  00540	4f		 dec	 edi
  00541	81 cf 00 fe ff
	ff		 or	 edi, -512		; fffffe00H
  00547	47		 inc	 edi
$LN125@JGPGetChar:

; 1048 : 			}
; 1049 : 			if ( lpCL->dbInventory[32] == (BYTE)-1 && (lpCL->dbInventory[34]& 0x80) == 0x80 && (lpCL->dbInventory[35]& 0xF0) == 0xF0  )

  00548	8a 4c 33 30	 mov	 cl, BYTE PTR [ebx+esi+48]
  0054c	66 89 bd b6 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+14], di
  00553	80 f9 ff	 cmp	 cl, 255			; 000000ffH
  00556	75 28		 jne	 SHORT $LN61@JGPGetChar
  00558	8a 44 33 32	 mov	 al, BYTE PTR [ebx+esi+50]
  0055c	88 85 c3 fe ff
	ff		 mov	 BYTE PTR tv2277[ebp], al
  00562	84 c0		 test	 al, al
  00564	79 1a		 jns	 SHORT $LN61@JGPGetChar
  00566	8a 54 33 33	 mov	 dl, BYTE PTR [ebx+esi+51]
  0056a	80 e2 f0	 and	 dl, 240			; 000000f0H
  0056d	80 fa f0	 cmp	 dl, 240			; 000000f0H
  00570	75 0e		 jne	 SHORT $LN61@JGPGetChar

; 1050 : 			{
; 1051 : 				TempInventory[8] = 0x1FF;

  00572	b8 ff 01 00 00	 mov	 eax, 511		; 000001ffH
  00577	66 89 85 b8 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+16], ax

; 1052 : 			}
; 1053 : 			else

  0057e	eb 3f		 jmp	 SHORT $LN60@JGPGetChar
$LN61@JGPGetChar:

; 1054 : 			{
; 1055 : 				TempInventory[8] = ((lpCL->dbInventory[32] + (lpCL->dbInventory[34]&0x80)*2)+ (lpCL->dbInventory[35]&0xF0)*32)%MAX_SUBTYPE_ITEMS;

  00580	8a 44 33 32	 mov	 al, BYTE PTR [ebx+esi+50]
  00584	0f b6 54 33 33	 movzx	 edx, BYTE PTR [ebx+esi+51]
  00589	88 85 c3 fe ff
	ff		 mov	 BYTE PTR tv2277[ebp], al
  0058f	81 e2 f0 00 00
	00		 and	 edx, 240		; 000000f0H
  00595	0f b6 c0	 movzx	 eax, al
  00598	c1 e2 04	 shl	 edx, 4
  0059b	25 80 00 00 00	 and	 eax, 128		; 00000080H
  005a0	0f b6 c9	 movzx	 ecx, cl
  005a3	03 d0		 add	 edx, eax
  005a5	8d 14 51	 lea	 edx, DWORD PTR [ecx+edx*2]
  005a8	81 e2 ff 01 00
	80		 and	 edx, -2147483137	; 800001ffH
  005ae	79 08		 jns	 SHORT $LN126@JGPGetChar
  005b0	4a		 dec	 edx
  005b1	81 ca 00 fe ff
	ff		 or	 edx, -512		; fffffe00H
  005b7	42		 inc	 edx
$LN126@JGPGetChar:
  005b8	66 89 95 b8 fe
	ff ff		 mov	 WORD PTR _TempInventory$[ebp+16], dx
$LN60@JGPGetChar:

; 1056 : 			}
; 1057 : 
; 1058 : 			pCList.CharSet[12] |= DBI_GET_TYPE(TempInventory[0]);

  005bf	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _TempInventory$[ebp]

; 1059 : 			pCList.CharSet[1] = TempInventory[0] % 256;

  005c5	0f b7 8d a8 fe
	ff ff		 movzx	 ecx, WORD PTR _TempInventory$[ebp]
  005cc	c1 e8 04	 shr	 eax, 4
  005cf	24 f0		 and	 al, 240			; 000000f0H
  005d1	08 85 e3 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+27], al
  005d7	81 e1 ff 00 00
	80		 and	 ecx, -2147483393	; 800000ffH
  005dd	79 08		 jns	 SHORT $LN127@JGPGetChar
  005df	49		 dec	 ecx
  005e0	81 c9 00 ff ff
	ff		 or	 ecx, -256		; ffffff00H
  005e6	41		 inc	 ecx
$LN127@JGPGetChar:

; 1060 : 
; 1061 : 			pCList.CharSet[13] |= DBI_GET_TYPE(TempInventory[1]);

  005e7	8b 95 aa fe ff
	ff		 mov	 edx, DWORD PTR _TempInventory$[ebp+2]
  005ed	8a 85 e4 fe ff
	ff		 mov	 al, BYTE PTR _pCList$[ebp+28]
  005f3	88 8d d8 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+16], cl

; 1062 : 			pCList.CharSet[2] = TempInventory[1] % 256;

  005f9	0f b7 8d aa fe
	ff ff		 movzx	 ecx, WORD PTR _TempInventory$[ebp+2]
  00600	c1 ea 04	 shr	 edx, 4
  00603	80 e2 f0	 and	 dl, 240			; 000000f0H
  00606	0a c2		 or	 al, dl
  00608	81 e1 ff 00 00
	80		 and	 ecx, -2147483393	; 800000ffH
  0060e	79 08		 jns	 SHORT $LN128@JGPGetChar
  00610	49		 dec	 ecx
  00611	81 c9 00 ff ff
	ff		 or	 ecx, -256		; ffffff00H
  00617	41		 inc	 ecx
$LN128@JGPGetChar:

; 1063 : 
; 1064 : 			pCList.CharSet[13] |= (int)(TempInventory[2] & 0x1E0) >> 5;

  00618	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _TempInventory$[ebp+4]
  0061e	c1 ea 05	 shr	 edx, 5
  00621	80 e2 0f	 and	 dl, 15			; 0000000fH
  00624	0a c2		 or	 al, dl

; 1065 : 			pCList.CharSet[9] |= (int)(TempInventory[2] & 0x10) << 3;
; 1066 : 			pCList.CharSet[3] |= (int)(TempInventory[2] & 0x0F) << 4;
; 1067 : 
; 1068 : 			pCList.CharSet[14] |= (int)(TempInventory[3] & 0x1E0) >> 1;

  00626	8b 95 ae fe ff
	ff		 mov	 edx, DWORD PTR _TempInventory$[ebp+6]
  0062c	d1 ea		 shr	 edx, 1
  0062e	88 8d d9 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+17], cl
  00634	8a 8d ac fe ff
	ff		 mov	 cl, BYTE PTR _TempInventory$[ebp+4]
  0063a	80 e2 f0	 and	 dl, 240			; 000000f0H
  0063d	08 95 e5 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+29], dl
  00643	88 85 e4 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+28], al
  00649	8a c1		 mov	 al, cl
  0064b	c0 e1 04	 shl	 cl, 4
  0064e	0f b6 c9	 movzx	 ecx, cl
  00651	08 8d da fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+18], cl

; 1069 : 			pCList.CharSet[9] |= (int)(TempInventory[3] & 0x10) << 2;

  00657	8a 8d ae fe ff
	ff		 mov	 cl, BYTE PTR _TempInventory$[ebp+6]
  0065d	8a d1		 mov	 dl, cl
  0065f	80 e2 10	 and	 dl, 16			; 00000010H
  00662	02 d2		 add	 dl, dl
  00664	02 d2		 add	 dl, dl
  00666	24 f0		 and	 al, 240			; 000000f0H
  00668	02 c0		 add	 al, al

; 1070 : 			pCList.CharSet[3] |= (int)(TempInventory[3] & 0x0F);

  0066a	80 e1 0f	 and	 cl, 15			; 0000000fH
  0066d	02 c0		 add	 al, al
  0066f	0f b6 c9	 movzx	 ecx, cl
  00672	08 8d da fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+18], cl

; 1071 : 
; 1072 : 			pCList.CharSet[14] |= (int)(TempInventory[4] & 0x1E0) >> 5;
; 1073 : 			pCList.CharSet[9] |= (int)(TempInventory[4] & 0x10) << 1;

  00678	8a 8d b0 fe ff
	ff		 mov	 cl, BYTE PTR _TempInventory$[ebp+8]
  0067e	02 c0		 add	 al, al
  00680	0a c2		 or	 al, dl
  00682	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR _TempInventory$[ebp+8]
  00688	c1 ea 05	 shr	 edx, 5
  0068b	80 e2 0f	 and	 dl, 15			; 0000000fH
  0068e	08 95 e5 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+29], dl
  00694	8a d1		 mov	 dl, cl
  00696	80 e2 10	 and	 dl, 16			; 00000010H
  00699	02 d2		 add	 dl, dl
  0069b	0a c2		 or	 al, dl

; 1074 : 			pCList.CharSet[4] |= (int)(TempInventory[4] & 0x0F) << 4;
; 1075 : 
; 1076 : 			pCList.CharSet[15] |= (int)(TempInventory[5] & 0x1E0) >> 1;

  0069d	8b 95 b2 fe ff
	ff		 mov	 edx, DWORD PTR _TempInventory$[ebp+10]
  006a3	c0 e1 04	 shl	 cl, 4
  006a6	d1 ea		 shr	 edx, 1
  006a8	0f b6 c9	 movzx	 ecx, cl
  006ab	08 8d db fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+19], cl

; 1077 : 			pCList.CharSet[9] |= (int)(TempInventory[5] & 0x10);

  006b1	8a 8d b2 fe ff
	ff		 mov	 cl, BYTE PTR _TempInventory$[ebp+10]
  006b7	80 e2 f0	 and	 dl, 240			; 000000f0H
  006ba	08 95 e6 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+30], dl
  006c0	8a d1		 mov	 dl, cl
  006c2	80 e2 10	 and	 dl, 16			; 00000010H
  006c5	0a c2		 or	 al, dl

; 1078 : 			pCList.CharSet[4] |= (int)(TempInventory[5] & 0x0F);
; 1079 : 
; 1080 : 			pCList.CharSet[15] |= (int)(TempInventory[6] & 0x1E0) >> 5;

  006c7	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR _TempInventory$[ebp+12]
  006cd	80 e1 0f	 and	 cl, 15			; 0000000fH
  006d0	0f b6 c9	 movzx	 ecx, cl
  006d3	08 8d db fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+19], cl

; 1081 : 			pCList.CharSet[9] |= (int)(TempInventory[6] & 0x10) >> 1;

  006d9	8a 8d b4 fe ff
	ff		 mov	 cl, BYTE PTR _TempInventory$[ebp+12]
  006df	c1 ea 05	 shr	 edx, 5
  006e2	80 e2 0f	 and	 dl, 15			; 0000000fH
  006e5	08 95 e6 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+30], dl
  006eb	8a d1		 mov	 dl, cl
  006ed	d0 ea		 shr	 dl, 1

; 1082 : 			pCList.CharSet[5] |= (int)(TempInventory[6] & 0x0F) << 4;

  006ef	c0 e1 04	 shl	 cl, 4
  006f2	80 e2 08	 and	 dl, 8
  006f5	0f b6 c9	 movzx	 ecx, cl
  006f8	08 8d dc fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+20], cl
  006fe	0a c2		 or	 al, dl

; 1083 : 
; 1084 : 			index = 0;
; 1085 : 
; 1086 : 			// Wings Set
; 1087 : 			switch (TempInventory[7])

  00700	0f b7 f7	 movzx	 esi, di
  00703	32 d2		 xor	 dl, dl
  00705	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al
  0070b	88 95 ef fe ff
	ff		 mov	 BYTE PTR _index$[ebp], dl
  00711	81 fe ff 01 00
	00		 cmp	 esi, 511		; 000001ffH
  00717	0f 8f e0 01 00
	00		 jg	 $LN106@JGPGetChar
  0071d	0f 84 da 01 00
	00		 je	 $LN106@JGPGetChar
  00723	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00729	0f 87 ce 01 00
	00		 ja	 $LN106@JGPGetChar
  0072f	0f b6 8e 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN104@JGPGetChar[esi]
  00736	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN130@JGPGetChar[ecx*4]
$LN56@JGPGetChar:

; 1088 : 			{
; 1089 : 			case 0x1FF: // No Wings
; 1090 : 				index |= 0;
; 1091 : 				break;
; 1092 : 			case 0: // Wings of Elf
; 1093 : 				pCList.CharSet[5] |= CS_SET_WING1(1);

  0073d	80 8d dc fe ff
	ff 04		 or	 BYTE PTR _pCList$[ebp+20], 4

; 1094 : 				pCList.CharSet[9] |= 1;

  00744	0c 01		 or	 al, 1
  00746	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1095 : 				break;

  0074c	e9 ac 01 00 00	 jmp	 $LN106@JGPGetChar
$LN55@JGPGetChar:

; 1096 : 			case 1: // Wings of Heaven
; 1097 : 				pCList.CharSet[5] |= CS_SET_WING1(1);

  00751	80 8d dc fe ff
	ff 04		 or	 BYTE PTR _pCList$[ebp+20], 4

; 1098 : 				pCList.CharSet[9] |= 2;

  00758	0c 02		 or	 al, 2
  0075a	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1099 : 				break;

  00760	e9 98 01 00 00	 jmp	 $LN106@JGPGetChar
$LN54@JGPGetChar:

; 1100 : 			case 2: // Wings of Satan
; 1101 : 				pCList.CharSet[5] |= CS_SET_WING1(1);

  00765	80 8d dc fe ff
	ff 04		 or	 BYTE PTR _pCList$[ebp+20], 4

; 1102 : 				pCList.CharSet[9] |= 3;

  0076c	0c 03		 or	 al, 3
  0076e	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1103 : 				break;

  00774	e9 84 01 00 00	 jmp	 $LN106@JGPGetChar
$LN53@JGPGetChar:

; 1104 : 			case 41:
; 1105 : 				pCList.CharSet[5] |= CS_SET_WING1(1);

  00779	80 8d dc fe ff
	ff 04		 or	 BYTE PTR _pCList$[ebp+20], 4

; 1106 : 				pCList.CharSet[9] |= 4;

  00780	0c 04		 or	 al, 4
  00782	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1107 : 				break;

  00788	e9 70 01 00 00	 jmp	 $LN106@JGPGetChar
$LN52@JGPGetChar:

; 1108 : 			case 3: // Muse Elf Wings
; 1109 : 				pCList.CharSet[5] |= CS_SET_WING1(2);

  0078d	80 8d dc fe ff
	ff 08		 or	 BYTE PTR _pCList$[ebp+20], 8

; 1110 : 				pCList.CharSet[9] |= 1;

  00794	0c 01		 or	 al, 1
  00796	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1111 : 				break;

  0079c	e9 5c 01 00 00	 jmp	 $LN106@JGPGetChar
$LN51@JGPGetChar:

; 1112 : 			case 4: // Soul Master Wings
; 1113 : 				pCList.CharSet[5] |= CS_SET_WING1(2);

  007a1	80 8d dc fe ff
	ff 08		 or	 BYTE PTR _pCList$[ebp+20], 8

; 1114 : 				pCList.CharSet[9] |= 2;

  007a8	0c 02		 or	 al, 2
  007aa	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1115 : 				break;

  007b0	e9 48 01 00 00	 jmp	 $LN106@JGPGetChar
$LN50@JGPGetChar:

; 1116 : 			case 5: // Blade Knight Wings
; 1117 : 				pCList.CharSet[5] |= CS_SET_WING1(2);

  007b5	80 8d dc fe ff
	ff 08		 or	 BYTE PTR _pCList$[ebp+20], 8

; 1118 : 				pCList.CharSet[9] |= 3;

  007bc	0c 03		 or	 al, 3
  007be	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1119 : 				break;

  007c4	e9 34 01 00 00	 jmp	 $LN106@JGPGetChar
$LN49@JGPGetChar:

; 1120 : 			case 6: // Magic Gladiator Wings
; 1121 : 				pCList.CharSet[5] |= CS_SET_WING1(2);

  007c9	80 8d dc fe ff
	ff 08		 or	 BYTE PTR _pCList$[ebp+20], 8

; 1122 : 				pCList.CharSet[9] |= 4;

  007d0	0c 04		 or	 al, 4
  007d2	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1123 : 				break;

  007d8	e9 20 01 00 00	 jmp	 $LN106@JGPGetChar
$LN48@JGPGetChar:

; 1124 : 			case 30: // Cape of Lord
; 1125 : 				pCList.CharSet[5] |= CS_SET_WING1(2);

  007dd	80 8d dc fe ff
	ff 08		 or	 BYTE PTR _pCList$[ebp+20], 8

; 1126 : 				pCList.CharSet[9] |= 5;

  007e4	0c 05		 or	 al, 5
  007e6	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1127 : 				break;

  007ec	e9 0c 01 00 00	 jmp	 $LN106@JGPGetChar
$LN47@JGPGetChar:

; 1128 : 			case 42: // Bloody Summoner Wings
; 1129 : 				pCList.CharSet[5] |= CS_SET_WING1(2);

  007f1	80 8d dc fe ff
	ff 08		 or	 BYTE PTR _pCList$[ebp+20], 8

; 1130 : 				pCList.CharSet[9] |= 6;

  007f8	0c 06		 or	 al, 6
  007fa	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1131 : 				break;

  00800	e9 f8 00 00 00	 jmp	 $LN106@JGPGetChar
$LN46@JGPGetChar:

; 1132 : 			case 49: // Cloak of Warrior
; 1133 : 				pCList.CharSet[5] |= CS_SET_WING1(2);

  00805	80 8d dc fe ff
	ff 08		 or	 BYTE PTR _pCList$[ebp+20], 8

; 1134 : 				pCList.CharSet[9] |= 7;

  0080c	0c 07		 or	 al, 7
  0080e	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1135 : 				break;

  00814	e9 e4 00 00 00	 jmp	 $LN106@JGPGetChar
$LN45@JGPGetChar:

; 1136 : 			case 36: // Blade Master Wings
; 1137 : 				pCList.CharSet[5] |= CS_SET_WING1(-1);

  00819	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1138 : 				pCList.CharSet[9] |= 1;

  00820	0c 01		 or	 al, 1
  00822	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1139 : 				break;

  00828	e9 d0 00 00 00	 jmp	 $LN106@JGPGetChar
$LN44@JGPGetChar:

; 1140 : 			case 37: // Grand Master Wings
; 1141 : 				pCList.CharSet[5] |= CS_SET_WING1(-1);

  0082d	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1142 : 				pCList.CharSet[9] |= 2;

  00834	0c 02		 or	 al, 2
  00836	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1143 : 				break;

  0083c	e9 bc 00 00 00	 jmp	 $LN106@JGPGetChar
$LN43@JGPGetChar:

; 1144 : 			case 38: // High Elf Wings
; 1145 : 				pCList.CharSet[5] |= CS_SET_WING1(-1);

  00841	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1146 : 				pCList.CharSet[9] |= 3;

  00848	0c 03		 or	 al, 3
  0084a	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1147 : 				break;

  00850	e9 a8 00 00 00	 jmp	 $LN106@JGPGetChar
$LN42@JGPGetChar:

; 1148 : 			case 39: // Duel Master Wings
; 1149 : 				pCList.CharSet[5] |= CS_SET_WING1(-1);

  00855	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1150 : 				pCList.CharSet[9] |= 4;

  0085c	0c 04		 or	 al, 4
  0085e	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1151 : 				break;

  00864	e9 94 00 00 00	 jmp	 $LN106@JGPGetChar
$LN41@JGPGetChar:

; 1152 : 			case 40: // Lord Emperor Cape
; 1153 : 				pCList.CharSet[5] |= CS_SET_WING1(-1);

  00869	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1154 : 				pCList.CharSet[9] |= 5;

  00870	0c 05		 or	 al, 5
  00872	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1155 : 				break;

  00878	e9 80 00 00 00	 jmp	 $LN106@JGPGetChar
$LN40@JGPGetChar:

; 1156 : 			case 43: // Dimension Master Wings
; 1157 : 				pCList.CharSet[5] |= CS_SET_WING1(-1);

  0087d	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1158 : 				pCList.CharSet[9] |= 6;

  00884	0c 06		 or	 al, 6
  00886	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1159 : 				break;

  0088c	eb 6f		 jmp	 SHORT $LN106@JGPGetChar
$LN39@JGPGetChar:

; 1160 : 			case 50: // Fist Master Cloak
; 1161 : 				pCList.CharSet[5] |= CS_SET_WING1(-1);

  0088e	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1162 : 				pCList.CharSet[9] |= 7;

  00895	0c 07		 or	 al, 7
  00897	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+24], al

; 1163 : 				break;

  0089d	eb 5e		 jmp	 SHORT $LN106@JGPGetChar
$LN38@JGPGetChar:

; 1164 : 			case 130: // Small Cape of Lord
; 1165 : 				pCList.CharSet[5] |= CS_SET_WING1(3);

  0089f	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1166 : 				pCList.CharSet[17] |= 32;

  008a6	80 8d e8 fe ff
	ff 20		 or	 BYTE PTR _pCList$[ebp+32], 32 ; 00000020H

; 1167 : 				break;

  008ad	eb 4e		 jmp	 SHORT $LN106@JGPGetChar
$LN37@JGPGetChar:

; 1168 : 			case 131: // Small Wings of Misery
; 1169 : 				pCList.CharSet[5] |= CS_SET_WING1(3);

  008af	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1170 : 				pCList.CharSet[17] |= 64;

  008b6	80 8d e8 fe ff
	ff 40		 or	 BYTE PTR _pCList$[ebp+32], 64 ; 00000040H

; 1171 : 				break;

  008bd	eb 3e		 jmp	 SHORT $LN106@JGPGetChar
$LN36@JGPGetChar:

; 1172 : 			case 132: // Small Wings of Elf
; 1173 : 				pCList.CharSet[5] |= CS_SET_WING1(3);

  008bf	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1174 : 				pCList.CharSet[17] |= 96;

  008c6	80 8d e8 fe ff
	ff 60		 or	 BYTE PTR _pCList$[ebp+32], 96 ; 00000060H

; 1175 : 				break;

  008cd	eb 2e		 jmp	 SHORT $LN106@JGPGetChar
$LN35@JGPGetChar:

; 1176 : 			case 133: // Small Wings of Heaven
; 1177 : 				pCList.CharSet[5] |= CS_SET_WING1(3);

  008cf	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1178 : 				pCList.CharSet[17] |= 128;

  008d6	80 8d e8 fe ff
	ff 80		 or	 BYTE PTR _pCList$[ebp+32], 128 ; 00000080H

; 1179 : 				break;

  008dd	eb 1e		 jmp	 SHORT $LN106@JGPGetChar
$LN34@JGPGetChar:

; 1180 : 			case 134: // Small Wings of Satan
; 1181 : 				pCList.CharSet[5] |= CS_SET_WING1(3);

  008df	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1182 : 				pCList.CharSet[17] |= 160;

  008e6	80 8d e8 fe ff
	ff a0		 or	 BYTE PTR _pCList$[ebp+32], 160 ; 000000a0H

; 1183 : 				break;

  008ed	eb 0e		 jmp	 SHORT $LN106@JGPGetChar
$LN33@JGPGetChar:

; 1184 : 			case 135: // Small Cloak of Warrior
; 1185 : 				pCList.CharSet[5] |= CS_SET_WING1(3);

  008ef	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1186 : 				pCList.CharSet[17] |= 192;

  008f6	80 8d e8 fe ff
	ff c0		 or	 BYTE PTR _pCList$[ebp+32], 192 ; 000000c0H
$LN106@JGPGetChar:

; 1187 : 				break;
; 1188 : 			}
; 1189 : #ifdef NEWWINGS
; 1190 : 			if( IS_NEWWINGS(TempInventory[7]+ITEMGET(12, 0)) )
; 1191 : 			{
; 1192 : 				pCList.CharSet[5]	|= CS_SET_WING1(3);
; 1193 : 				pCList.CharSet[17]	|= (BYTE)(TempInventory[7] - 180 + 1) << 2;
; 1194 : 			}
; 1195 : #endif
; 1196 : #ifdef NEWWINGS_2_5
; 1197 : 			if( IS_NEWWINGS_2_5(TempInventory[7]+ITEMGET(12, 0)) )

  008fd	8a 85 b6 fe ff
	ff		 mov	 al, BYTE PTR _TempInventory$[ebp+14]
  00903	81 c6 00 18 00
	00		 add	 esi, 6144		; 00001800H
  00909	81 fe ba 18 00
	00		 cmp	 esi, 6330		; 000018baH
  0090f	7c 29		 jl	 SHORT $LN107@JGPGetChar
  00911	33 c9		 xor	 ecx, ecx
  00913	81 fe bc 18 00
	00		 cmp	 esi, 6332		; 000018bcH
  00919	0f 9e c1	 setle	 cl
  0091c	85 c9		 test	 ecx, ecx
  0091e	74 1a		 je	 SHORT $LN107@JGPGetChar

; 1198 : 			{
; 1199 : 				pCList.CharSet[5]	|= CS_SET_WING1(3);

  00920	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1200 : 				pCList.CharSet[17]	|= (BYTE)(TempInventory[7] - 180 + 1) << 2;

  00927	8d 50 0d	 lea	 edx, DWORD PTR [eax+13]
  0092a	02 d2		 add	 dl, dl
  0092c	02 d2		 add	 dl, dl
  0092e	08 95 e8 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+32], dl
  00934	8a 95 ef fe ff
	ff		 mov	 dl, BYTE PTR _index$[ebp]
$LN107@JGPGetChar:

; 1201 : 			}
; 1202 : #endif
; 1203 : #ifdef NEWWINGS_4
; 1204 : 			if( IS_NEWWINGS_4(TempInventory[7]+ITEMGET(12, 0)) )

  0093a	81 fe b4 18 00
	00		 cmp	 esi, 6324		; 000018b4H
  00940	7c 29		 jl	 SHORT $LN112@JGPGetChar
  00942	33 c9		 xor	 ecx, ecx
  00944	81 fe b9 18 00
	00		 cmp	 esi, 6329		; 000018b9H
  0094a	0f 9e c1	 setle	 cl
  0094d	85 c9		 test	 ecx, ecx
  0094f	74 1a		 je	 SHORT $LN112@JGPGetChar

; 1205 : 			{
; 1206 : 				pCList.CharSet[5]	|= CS_SET_WING1(3);

  00951	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1207 : 				pCList.CharSet[17]	|= (BYTE)(TempInventory[7] - 180 + 1) << 2;

  00958	8a 95 ef fe ff
	ff		 mov	 dl, BYTE PTR _index$[ebp]
  0095e	8d 48 0d	 lea	 ecx, DWORD PTR [eax+13]
  00961	02 c9		 add	 cl, cl
  00963	02 c9		 add	 cl, cl
  00965	08 8d e8 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+32], cl
$LN112@JGPGetChar:

; 1208 : 			}
; 1209 : #endif
; 1210 : #ifdef NEWWINGS_5
; 1211 : 			if( IS_NEWWINGS_5(TempInventory[7]+ITEMGET(12, 0)) )

  0096b	81 fe bd 18 00
	00		 cmp	 esi, 6333		; 000018bdH
  00971	7c 29		 jl	 SHORT $LN114@JGPGetChar
  00973	33 c9		 xor	 ecx, ecx
  00975	81 fe c2 18 00
	00		 cmp	 esi, 6338		; 000018c2H
  0097b	0f 9e c1	 setle	 cl
  0097e	85 c9		 test	 ecx, ecx
  00980	74 1a		 je	 SHORT $LN114@JGPGetChar

; 1212 : 			{
; 1213 : 				pCList.CharSet[5]	|= CS_SET_WING1(3);

  00982	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1214 : 				pCList.CharSet[17]	|= (BYTE)(TempInventory[7] - 180 + 1) << 2;

  00989	8d 50 0d	 lea	 edx, DWORD PTR [eax+13]
  0098c	02 d2		 add	 dl, dl
  0098e	02 d2		 add	 dl, dl
  00990	08 95 e8 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+32], dl
  00996	8a 95 ef fe ff
	ff		 mov	 dl, BYTE PTR _index$[ebp]
$LN114@JGPGetChar:

; 1215 : 			}
; 1216 : #endif
; 1217 : #ifdef NEWWINGS_6
; 1218 : 			if( IS_NEWWINGS_6(TempInventory[7]+ITEMGET(12, 0)) )

  0099c	81 fe c3 18 00
	00		 cmp	 esi, 6339		; 000018c3H
  009a2	7c 22		 jl	 SHORT $LN116@JGPGetChar
  009a4	33 c9		 xor	 ecx, ecx
  009a6	81 fe dc 18 00
	00		 cmp	 esi, 6364		; 000018dcH
  009ac	0f 9e c1	 setle	 cl
  009af	85 c9		 test	 ecx, ecx
  009b1	74 13		 je	 SHORT $LN116@JGPGetChar

; 1219 : 			{
; 1220 : 				//if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal || eZtUB::PrideMu || eZtUB::Local3 || eZtUB::Local2)){
; 1221 : 			
; 1222 : 				pCList.CharSet[5]	|= CS_SET_WING1(3);

  009b3	80 8d dc fe ff
	ff 0c		 or	 BYTE PTR _pCList$[ebp+20], 12 ; 0000000cH

; 1223 : 				pCList.CharSet[17]	|= (BYTE)(TempInventory[7] - 180 + 1) << 2;

  009ba	04 0d		 add	 al, 13			; 0000000dH
  009bc	02 c0		 add	 al, al
  009be	02 c0		 add	 al, al
  009c0	08 85 e8 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+32], al
$LN116@JGPGetChar:

; 1224 : 				//}
; 1225 : 			}
; 1226 : #endif
; 1227 : 			// Pets Set
; 1228 : 			switch (TempInventory[8])

  009c6	0f b7 8d b8 fe
	ff ff		 movzx	 ecx, WORD PTR _TempInventory$[ebp+16]
  009cd	8b c1		 mov	 eax, ecx
  009cf	83 f8 43	 cmp	 eax, 67			; 00000043H
  009d2	0f 8f ad 00 00
	00		 jg	 $LN98@JGPGetChar
  009d8	0f 84 9e 00 00
	00		 je	 $LN21@JGPGetChar
  009de	83 e8 03	 sub	 eax, 3
  009e1	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  009e4	0f 87 ce 00 00
	00		 ja	 $LN13@JGPGetChar
  009ea	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN105@JGPGetChar[eax]
  009f1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN131@JGPGetChar[eax*4]
$LN25@JGPGetChar:

; 1232 : 				break;
; 1233 : 			case 4: // Dark Horse
; 1234 : 				index |= CS_SET_HELPER(-1);
; 1235 : 				pCList.CharSet[12] |= 0x01;

  009f8	80 8d e3 fe ff
	ff 01		 or	 BYTE PTR _pCList$[ebp+27], 1

; 1236 : 				break;

  009ff	e9 d9 00 00 00	 jmp	 $LN26@JGPGetChar
$LN24@JGPGetChar:

; 1237 : 			case 3: // Dinorant
; 1238 : 				pCList.CharSet[10] |= 0x01;

  00a04	80 8d e1 fe ff
	ff 01		 or	 BYTE PTR _pCList$[ebp+25], 1
$LN12@JGPGetChar:

; 1239 : 				index |= (TempInventory[8] ) & 0x03;

  00a0b	8a 95 b8 fe ff
	ff		 mov	 dl, BYTE PTR _TempInventory$[ebp+16]
  00a11	80 e2 03	 and	 dl, 3

; 1240 : 				break;

  00a14	e9 c6 00 00 00	 jmp	 $LN27@JGPGetChar
$LN20@JGPGetChar:

; 1250 : 			case 64: // Demon Pet
; 1251 : 				pCList.CharSet[16] |= 0x20;

  00a19	80 8d e7 fe ff
	ff 20		 or	 BYTE PTR _pCList$[ebp+31], 32 ; 00000020H

; 1252 : 				break;

  00a20	e9 ba 00 00 00	 jmp	 $LN27@JGPGetChar
$LN19@JGPGetChar:

; 1253 : 			case 65: // Spirit of Guardian Pet
; 1254 : 				pCList.CharSet[16] |= 0x40;

  00a25	80 8d e7 fe ff
	ff 40		 or	 BYTE PTR _pCList$[ebp+31], 64 ; 00000040H

; 1255 : 				break;

  00a2c	e9 ae 00 00 00	 jmp	 $LN27@JGPGetChar
$LN17@JGPGetChar:

; 1259 : 			case 37:
; 1260 : 				index |= CS_SET_HELPER(-1);
; 1261 : 				pCList.CharSet[10] &= 0xFE;
; 1262 : 				pCList.CharSet[12] &= 0xFE;

  00a31	8a 85 e3 fe ff
	ff		 mov	 al, BYTE PTR _pCList$[ebp+27]
  00a37	80 a5 e1 fe ff
	ff fe		 and	 BYTE PTR _pCList$[ebp+25], 254 ; 000000feH
  00a3e	24 fe		 and	 al, 254			; 000000feH

; 1263 : 				pCList.CharSet[12] |= 0x04;

  00a40	0c 04		 or	 al, 4
  00a42	88 85 e3 fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+27], al

; 1264 : 				pCList.CharSet[16] = 0;
; 1265 : 				btExcellentOption = lpCL->dbInventory[34] & 0x3F;

  00a48	8a 85 c3 fe ff
	ff		 mov	 al, BYTE PTR tv2277[ebp]
  00a4e	24 3f		 and	 al, 63			; 0000003fH
  00a50	b2 03		 mov	 dl, 3
  00a52	c6 85 e7 fe ff
	ff 00		 mov	 BYTE PTR _pCList$[ebp+31], 0

; 1266 : 
; 1267 : 				if ( (btExcellentOption&1) == 1 ) // Red Fenrir

  00a59	a8 01		 test	 al, 1
  00a5b	74 07		 je	 SHORT $LN16@JGPGetChar

; 1268 : 				{
; 1269 : 					pCList.CharSet[16] |= 0x01;

  00a5d	c6 85 e7 fe ff
	ff 01		 mov	 BYTE PTR _pCList$[ebp+31], 1
$LN16@JGPGetChar:

; 1270 : 				}
; 1271 : 				if ( (btExcellentOption&2) == 2 ) // Blue Fenrir

  00a64	a8 02		 test	 al, 2
  00a66	74 07		 je	 SHORT $LN15@JGPGetChar

; 1272 : 				{
; 1273 : 					pCList.CharSet[16] |= 0x02;

  00a68	80 8d e7 fe ff
	ff 02		 or	 BYTE PTR _pCList$[ebp+31], 2
$LN15@JGPGetChar:

; 1274 : 				}
; 1275 : 				if ( (btExcellentOption&4) == 4 ) // Gold Fenrir 

  00a6f	a8 04		 test	 al, 4
  00a71	74 6c		 je	 SHORT $LN27@JGPGetChar

; 1276 : 				{
; 1277 : 					pCList.CharSet[17] |= 0x01;

  00a73	80 8d e8 fe ff
	ff 01		 or	 BYTE PTR _pCList$[ebp+32], 1

; 1278 : 				}
; 1279 : 				break;

  00a7a	eb 63		 jmp	 SHORT $LN27@JGPGetChar
$LN21@JGPGetChar:

; 1247 : 			case 67: // Rudolf Pet
; 1248 : 				pCList.CharSet[16] |= 0x80;

  00a7c	80 8d e7 fe ff
	ff 80		 or	 BYTE PTR _pCList$[ebp+31], 128 ; 00000080H

; 1249 : 				break;

  00a83	eb 5a		 jmp	 SHORT $LN27@JGPGetChar
$LN98@JGPGetChar:

; 1224 : 				//}
; 1225 : 			}
; 1226 : #endif
; 1227 : 			// Pets Set
; 1228 : 			switch (TempInventory[8])

  00a85	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  00a88	7f 27		 jg	 SHORT $LN99@JGPGetChar
  00a8a	74 1c		 je	 SHORT $LN23@JGPGetChar
  00a8c	83 f8 50	 cmp	 eax, 80			; 00000050H
  00a8f	74 0e		 je	 SHORT $LN22@JGPGetChar
  00a91	83 f8 6a	 cmp	 eax, 106		; 0000006aH
  00a94	75 22		 jne	 SHORT $LN13@JGPGetChar

; 1256 : 			case 106:	//JPN Unicorn
; 1257 : 				pCList.CharSet[16] |= 0xA0;

  00a96	80 8d e7 fe ff
	ff a0		 or	 BYTE PTR _pCList$[ebp+31], 160 ; 000000a0H

; 1258 : 				break;

  00a9d	eb 40		 jmp	 SHORT $LN27@JGPGetChar
$LN22@JGPGetChar:

; 1244 : 			case 80: // Panda Pet
; 1245 : 				pCList.CharSet[16] |= 224;

  00a9f	80 8d e7 fe ff
	ff e0		 or	 BYTE PTR _pCList$[ebp+31], 224 ; 000000e0H

; 1246 : 				break;

  00aa6	eb 37		 jmp	 SHORT $LN27@JGPGetChar
$LN23@JGPGetChar:

; 1241 : 			case 123: // Skeleton Pet
; 1242 : 				pCList.CharSet[16] |= 96;

  00aa8	80 8d e7 fe ff
	ff 60		 or	 BYTE PTR _pCList$[ebp+31], 96 ; 00000060H

; 1243 : 				break;

  00aaf	eb 2e		 jmp	 SHORT $LN27@JGPGetChar
$LN99@JGPGetChar:

; 1224 : 				//}
; 1225 : 			}
; 1226 : #endif
; 1227 : 			// Pets Set
; 1228 : 			switch (TempInventory[8])

  00ab1	3d ff 01 00 00	 cmp	 eax, 511		; 000001ffH
  00ab6	74 25		 je	 SHORT $LN26@JGPGetChar
$LN13@JGPGetChar:

; 1280 : 			default:
; 1281 : 				#if(ENABLE_PETZT)
; 1282 : 				if(g_PetZt.IsPet(ITEMGET(13, TempInventory[8])))

  00ab8	81 c1 00 1a 00
	00		 add	 ecx, 6656		; 00001a00H
  00abe	51		 push	 ecx
  00abf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PetZt@@3VCPetZt@@A ; g_PetZt
  00ac4	e8 00 00 00 00	 call	 ?IsPet@CPetZt@@QAE_NH@Z	; CPetZt::IsPet
  00ac9	84 c0		 test	 al, al
  00acb	0f 84 3a ff ff
	ff		 je	 $LN12@JGPGetChar

; 1283 : 				{
; 1284 : 					index |= CS_SET_HELPER(3);
; 1285 : 					pCList.CharSet[16] |= TempInventory[8];

  00ad1	8a 8d b8 fe ff
	ff		 mov	 cl, BYTE PTR _TempInventory$[ebp+16]
  00ad7	08 8d e7 fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+31], cl
$LN26@JGPGetChar:

; 1229 : 			{
; 1230 : 			case 0x1FF:
; 1231 : 				index |= 0x03;

  00add	b2 03		 mov	 dl, 3
$LN27@JGPGetChar:

; 1286 : 					break;
; 1287 : 				}
; 1288 : 				#endif
; 1289 : 				index |= (TempInventory[8] ) & 0x03;
; 1290 : 				break;
; 1291 : 			}
; 1292 : 
; 1293 : 			pCList.CharSet[5] |= index;

  00adf	08 95 dc fe ff
	ff		 or	 BYTE PTR _pCList$[ebp+20], dl

; 1294 : 
; 1295 : 			int levelindex = 0;
; 1296 : 
; 1297 : 			if ( TempInventory[0] != (WORD)-1 )
; 1298 : 			{
; 1299 : 				levelindex = LevelSmallConvert(DBI_GET_LEVEL(lpCL->dbInventory[1]));

  00ae5	8b b5 9c fe ff
	ff		 mov	 esi, DWORD PTR _lsOfs$[ebp]
  00aeb	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00af0	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _levelindex$228030[ebp], 0
  00afa	66 39 95 a8 fe
	ff ff		 cmp	 WORD PTR _TempInventory$[ebp], dx
  00b01	74 1d		 je	 SHORT $LN11@JGPGetChar
  00b03	0f b6 44 33 11	 movzx	 eax, BYTE PTR [ebx+esi+17]
  00b08	c1 e8 03	 shr	 eax, 3
  00b0b	83 e0 0f	 and	 eax, 15			; 0000000fH
  00b0e	50		 push	 eax
  00b0f	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEH@Z ; LevelSmallConvert
  00b14	0f b6 c8	 movzx	 ecx, al
  00b17	83 c4 04	 add	 esp, 4
  00b1a	89 8d c4 fe ff
	ff		 mov	 DWORD PTR _levelindex$228030[ebp], ecx
$LN11@JGPGetChar:

; 1300 : 			}
; 1301 : 			if ( TempInventory[1] != (WORD)-1 )

  00b20	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00b25	66 39 95 aa fe
	ff ff		 cmp	 WORD PTR _TempInventory$[ebp+2], dx
  00b2c	74 23		 je	 SHORT $LN113@JGPGetChar

; 1302 : 			{
; 1303 : 				levelindex |= (int)LevelSmallConvert(DBI_GET_LEVEL(lpCL->dbInventory[5])) << 3;

  00b2e	0f b6 44 33 15	 movzx	 eax, BYTE PTR [ebx+esi+21]
  00b33	c1 e8 03	 shr	 eax, 3
  00b36	83 e0 0f	 and	 eax, 15			; 0000000fH
  00b39	50		 push	 eax
  00b3a	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEH@Z ; LevelSmallConvert
  00b3f	0f b6 c8	 movzx	 ecx, al
  00b42	03 c9		 add	 ecx, ecx
  00b44	03 c9		 add	 ecx, ecx
  00b46	03 c9		 add	 ecx, ecx
  00b48	83 c4 04	 add	 esp, 4
  00b4b	09 8d c4 fe ff
	ff		 or	 DWORD PTR _levelindex$228030[ebp], ecx
$LN113@JGPGetChar:

; 1304 : 			}
; 1305 : 			if ( TempInventory[2] < 0x1FF )

  00b51	ba ff 01 00 00	 mov	 edx, 511		; 000001ffH
  00b56	66 39 95 ac fe
	ff ff		 cmp	 WORD PTR _TempInventory$[ebp+4], dx
  00b5d	73 20		 jae	 SHORT $LN115@JGPGetChar

; 1306 : 			{
; 1307 : 				levelindex |= (int)LevelSmallConvert(DBI_GET_LEVEL(lpCL->dbInventory[9])) << 6;

  00b5f	0f b6 44 33 19	 movzx	 eax, BYTE PTR [ebx+esi+25]
  00b64	c1 e8 03	 shr	 eax, 3
  00b67	83 e0 0f	 and	 eax, 15			; 0000000fH
  00b6a	50		 push	 eax
  00b6b	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEH@Z ; LevelSmallConvert
  00b70	0f b6 c8	 movzx	 ecx, al
  00b73	c1 e1 06	 shl	 ecx, 6
  00b76	83 c4 04	 add	 esp, 4
  00b79	09 8d c4 fe ff
	ff		 or	 DWORD PTR _levelindex$228030[ebp], ecx
$LN115@JGPGetChar:

; 1308 : 			}
; 1309 : 			if ( TempInventory[3] < 0x1FF )

  00b7f	ba ff 01 00 00	 mov	 edx, 511		; 000001ffH
  00b84	66 39 95 ae fe
	ff ff		 cmp	 WORD PTR _TempInventory$[ebp+6], dx
  00b8b	73 20		 jae	 SHORT $LN117@JGPGetChar

; 1310 : 			{
; 1311 : 				levelindex |= (int)LevelSmallConvert(DBI_GET_LEVEL(lpCL->dbInventory[13])) << 9;

  00b8d	0f b6 44 33 1d	 movzx	 eax, BYTE PTR [ebx+esi+29]
  00b92	c1 e8 03	 shr	 eax, 3
  00b95	83 e0 0f	 and	 eax, 15			; 0000000fH
  00b98	50		 push	 eax
  00b99	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEH@Z ; LevelSmallConvert
  00b9e	0f b6 c8	 movzx	 ecx, al
  00ba1	c1 e1 09	 shl	 ecx, 9
  00ba4	83 c4 04	 add	 esp, 4
  00ba7	09 8d c4 fe ff
	ff		 or	 DWORD PTR _levelindex$228030[ebp], ecx
$LN117@JGPGetChar:

; 1312 : 			}
; 1313 : 			if ( TempInventory[4] < 0x1FF )

  00bad	ba ff 01 00 00	 mov	 edx, 511		; 000001ffH
  00bb2	66 39 95 b0 fe
	ff ff		 cmp	 WORD PTR _TempInventory$[ebp+8], dx
  00bb9	73 20		 jae	 SHORT $LN118@JGPGetChar

; 1314 : 			{
; 1315 : 				levelindex |= (int)LevelSmallConvert(DBI_GET_LEVEL(lpCL->dbInventory[17])) << 12;

  00bbb	0f b6 44 33 21	 movzx	 eax, BYTE PTR [ebx+esi+33]
  00bc0	c1 e8 03	 shr	 eax, 3
  00bc3	83 e0 0f	 and	 eax, 15			; 0000000fH
  00bc6	50		 push	 eax
  00bc7	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEH@Z ; LevelSmallConvert
  00bcc	0f b6 c8	 movzx	 ecx, al
  00bcf	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  00bd2	83 c4 04	 add	 esp, 4
  00bd5	09 8d c4 fe ff
	ff		 or	 DWORD PTR _levelindex$228030[ebp], ecx
$LN118@JGPGetChar:

; 1316 : 			}
; 1317 : 			if ( TempInventory[5] < 0x1FF )

  00bdb	ba ff 01 00 00	 mov	 edx, 511		; 000001ffH
  00be0	66 39 95 b2 fe
	ff ff		 cmp	 WORD PTR _TempInventory$[ebp+10], dx
  00be7	73 20		 jae	 SHORT $LN119@JGPGetChar

; 1318 : 			{
; 1319 : 				levelindex |= (int)LevelSmallConvert(DBI_GET_LEVEL(lpCL->dbInventory[21])) << 15;

  00be9	0f b6 44 33 25	 movzx	 eax, BYTE PTR [ebx+esi+37]
  00bee	c1 e8 03	 shr	 eax, 3
  00bf1	83 e0 0f	 and	 eax, 15			; 0000000fH
  00bf4	50		 push	 eax
  00bf5	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEH@Z ; LevelSmallConvert
  00bfa	0f b6 c8	 movzx	 ecx, al
  00bfd	c1 e1 0f	 shl	 ecx, 15			; 0000000fH
  00c00	83 c4 04	 add	 esp, 4
  00c03	09 8d c4 fe ff
	ff		 or	 DWORD PTR _levelindex$228030[ebp], ecx
$LN119@JGPGetChar:

; 1320 : 			}
; 1321 : 			if ( TempInventory[6] < 0x1FF )

  00c09	ba ff 01 00 00	 mov	 edx, 511		; 000001ffH
  00c0e	66 39 95 b4 fe
	ff ff		 cmp	 WORD PTR _TempInventory$[ebp+12], dx
  00c15	73 20		 jae	 SHORT $LN5@JGPGetChar

; 1322 : 			{
; 1323 : 				levelindex |= (int)LevelSmallConvert(DBI_GET_LEVEL(lpCL->dbInventory[25])) << 18;

  00c17	0f b6 44 33 29	 movzx	 eax, BYTE PTR [ebx+esi+41]
  00c1c	c1 e8 03	 shr	 eax, 3
  00c1f	83 e0 0f	 and	 eax, 15			; 0000000fH
  00c22	50		 push	 eax
  00c23	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEH@Z ; LevelSmallConvert
  00c28	0f b6 c8	 movzx	 ecx, al
  00c2b	c1 e1 12	 shl	 ecx, 18			; 00000012H
  00c2e	83 c4 04	 add	 esp, 4
  00c31	09 8d c4 fe ff
	ff		 or	 DWORD PTR _levelindex$228030[ebp], ecx
$LN5@JGPGetChar:

; 1324 : 			}
; 1325 : 
; 1326 : 			pCList.CharSet[6] = ((int)levelindex >> 0x10) & 0xFF;

  00c37	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _levelindex$228030[ebp]

; 1327 : 			pCList.CharSet[7] = ((int)levelindex >> 0x08) & 0xFF;
; 1328 : 			pCList.CharSet[8] = ((int)levelindex) & 0xFF;
; 1329 : 
; 1330 : 			memcpy(&sendbuf[lOfs], &pCList, sizeof(pCList));
; 1331 : 			lsOfs += sizeof(SDHP_CHARLIST);

  00c3d	83 85 9c fe ff
	ff 42		 add	 DWORD PTR _lsOfs$[ebp], 66 ; 00000042H
  00c44	8b c8		 mov	 ecx, eax
  00c46	88 85 df fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+23], al
  00c4c	8b d0		 mov	 edx, eax
  00c4e	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  00c54	c1 f9 08	 sar	 ecx, 8
  00c57	88 8d de fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+22], cl
  00c5d	8d bc 05 f0 fe
	ff ff		 lea	 edi, DWORD PTR _sendbuf$[ebp+eax]
  00c64	c1 fa 10	 sar	 edx, 16			; 00000010H
  00c67	88 95 dd fe ff
	ff		 mov	 BYTE PTR _pCList$[ebp+21], dl
  00c6d	b9 08 00 00 00	 mov	 ecx, 8
  00c72	8d b5 c8 fe ff
	ff		 lea	 esi, DWORD PTR _pCList$[ebp]
  00c78	f3 a5		 rep movsd

; 1332 : 			lOfs += sizeof(pCList);

  00c7a	83 c0 22	 add	 eax, 34			; 00000022H
  00c7d	89 85 88 fe ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], eax
  00c83	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _n$227923[ebp]
  00c89	40		 inc	 eax
  00c8a	66 a5		 movsw
  00c8c	89 85 84 fe ff
	ff		 mov	 DWORD PTR _n$227923[ebp], eax
  00c92	3b 85 7c fe ff
	ff		 cmp	 eax, DWORD PTR $T231225[ebp]
  00c98	0f 8c d2 f4 ff
	ff		 jl	 $LL83@JGPGetChar
  00c9e	5f		 pop	 edi
$LN81@JGPGetChar:

; 1333 : 		}
; 1334 : 		// ----
; 1335 : 	}
; 1336 : 
; 1337 : #ifdef CHARCREATE_TEMP
; 1338 : 		if( HightLevel >= ZtConfig.ZtCustom.CreateSUMLevel )  //gCreateSUMLevel

  00c9f	0f bf 15 12 00
	00 00		 movsx	 edx, WORD PTR ?ZtConfig@@3VcZtConfigs@@A+18
  00ca6	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _HightLevel$[ebp]
  00cac	3b c2		 cmp	 eax, edx
  00cae	7c 07		 jl	 SHORT $LN109@JGPGetChar

; 1339 : 		{
; 1340 : 			GenerableClass += 1;

  00cb0	c6 85 ee fe ff
	ff 01		 mov	 BYTE PTR _GenerableClass$[ebp], 1
$LN109@JGPGetChar:

; 1341 : 		}
; 1342 : 		// ----
; 1343 : 		if( HightLevel >= ZtConfig.ZtCustom.CreateMONKLevel ) //gCreateMONKLevel

  00cb7	0f bf 0d 14 00
	00 00		 movsx	 ecx, WORD PTR ?ZtConfig@@3VcZtConfigs@@A+20
  00cbe	3b c1		 cmp	 eax, ecx
  00cc0	7c 07		 jl	 SHORT $LN111@JGPGetChar

; 1344 : 		{
; 1345 : 			GenerableClass += 8;

  00cc2	80 85 ee fe ff
	ff 08		 add	 BYTE PTR _GenerableClass$[ebp], 8
$LN111@JGPGetChar:

; 1346 : 		}
; 1347 : 		// ----
; 1348 : 		if( HightLevel >= ZtConfig.ZtCustom.CreateMGLevel )	  //gCreateMGLevel

  00cc9	0f bf 15 0e 00
	00 00		 movsx	 edx, WORD PTR ?ZtConfig@@3VcZtConfigs@@A+14
  00cd0	3b c2		 cmp	 eax, edx
  00cd2	7c 18		 jl	 SHORT $LN110@JGPGetChar

; 1349 : 		{
; 1350 : 			GenerableClass += 4;
; 1351 : 			gObj[aIndex].Magumsa = 1;

  00cd4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00cda	8b 95 90 fe ff
	ff		 mov	 edx, DWORD PTR tv2026[ebp]
  00ce0	80 85 ee fe ff
	ff 04		 add	 BYTE PTR _GenerableClass$[ebp], 4
  00ce7	c6 44 0a 34 01	 mov	 BYTE PTR [edx+ecx+52], 1
$LN110@JGPGetChar:

; 1352 : 		}
; 1353 : 		// ----
; 1354 : 		if( HightLevel >= ZtConfig.ZtCustom.CreateDLLevel )	  //gCreateDLLevel

  00cec	0f bf 0d 10 00
	00 00		 movsx	 ecx, WORD PTR ?ZtConfig@@3VcZtConfigs@@A+16
  00cf3	3b c1		 cmp	 eax, ecx
  00cf5	7c 18		 jl	 SHORT $LN1@JGPGetChar

; 1355 : 		{
; 1356 : 			GenerableClass += 2;
; 1357 : 			gObj[aIndex].Magumsa = 2;

  00cf7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00cfd	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR tv2026[ebp]
  00d03	80 85 ee fe ff
	ff 02		 add	 BYTE PTR _GenerableClass$[ebp], 2
  00d0a	c6 44 10 34 02	 mov	 BYTE PTR [eax+edx+52], 2
$LN1@JGPGetChar:

; 1358 : 		}
; 1359 : 		// ----
; 1360 : 		PMSG_UPD_SUMMONER_CREATE pMsg;
; 1361 : 		pMsg.h.set((LPBYTE)&pMsg, 0xDE, sizeof(pMsg));
; 1362 : 		pMsg.btResult = 0;
; 1363 : 		pMsg.IsSummonerEnable = GenerableClass;

  00d0f	8a 8d ee fe ff
	ff		 mov	 cl, BYTE PTR _GenerableClass$[ebp]

; 1364 : 		// ----
; 1365 : 		DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00d15	8b b5 80 fe ff
	ff		 mov	 esi, DWORD PTR _aIndex$[ebp]
  00d1b	6a 05		 push	 5
  00d1d	8d 95 94 fe ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp]
  00d23	52		 push	 edx
  00d24	56		 push	 esi
  00d25	c7 85 94 fe ff
	ff c1 05 de 00	 mov	 DWORD PTR _pMsg$[ebp], 14550465 ; 00de05c1H
  00d2f	88 8d 98 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+4], cl
  00d35	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1366 : #endif
; 1367 : 
; 1368 : 	pCLCount.h.size = lOfs;

  00d3a	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]

; 1369 : 	memcpy(sendbuf, &pCLCount, sizeof(PMSG_CHARLISTCOUNT));	

  00d40	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _pCLCount$[ebp+4]

; 1370 : 
; 1371 : 	DataSend(aIndex, sendbuf, lOfs);

  00d46	50		 push	 eax
  00d47	88 85 a1 fe ff
	ff		 mov	 BYTE PTR _pCLCount$[ebp+1], al
  00d4d	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _pCLCount$[ebp]
  00d53	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _sendbuf$[ebp]
  00d59	50		 push	 eax
  00d5a	56		 push	 esi
  00d5b	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp], ecx
  00d61	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp+4], edx
  00d67	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1372 : 
; 1373 : 	//g_ZtUser.GCDataClient(aIndex);
; 1374 : #if(SYSTEM_ACHIEVEMENTS)
; 1375 : 	//g_Achievements.GCSettingsData(aIndex);
; 1376 : #endif
; 1377 : }

  00d6c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00d6f	83 c4 18	 add	 esp, 24			; 00000018H
  00d72	5e		 pop	 esi
  00d73	33 cd		 xor	 ecx, ebp
  00d75	5b		 pop	 ebx
  00d76	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00d7b	8b e5		 mov	 esp, ebp
  00d7d	5d		 pop	 ebp
  00d7e	c3		 ret	 0
  00d7f	90		 npad	 1
$LN130@JGPGetChar:
  00d80	00 00 00 00	 DD	 $LN56@JGPGetChar
  00d84	00 00 00 00	 DD	 $LN55@JGPGetChar
  00d88	00 00 00 00	 DD	 $LN54@JGPGetChar
  00d8c	00 00 00 00	 DD	 $LN52@JGPGetChar
  00d90	00 00 00 00	 DD	 $LN51@JGPGetChar
  00d94	00 00 00 00	 DD	 $LN50@JGPGetChar
  00d98	00 00 00 00	 DD	 $LN49@JGPGetChar
  00d9c	00 00 00 00	 DD	 $LN48@JGPGetChar
  00da0	00 00 00 00	 DD	 $LN45@JGPGetChar
  00da4	00 00 00 00	 DD	 $LN44@JGPGetChar
  00da8	00 00 00 00	 DD	 $LN43@JGPGetChar
  00dac	00 00 00 00	 DD	 $LN42@JGPGetChar
  00db0	00 00 00 00	 DD	 $LN41@JGPGetChar
  00db4	00 00 00 00	 DD	 $LN53@JGPGetChar
  00db8	00 00 00 00	 DD	 $LN47@JGPGetChar
  00dbc	00 00 00 00	 DD	 $LN40@JGPGetChar
  00dc0	00 00 00 00	 DD	 $LN46@JGPGetChar
  00dc4	00 00 00 00	 DD	 $LN39@JGPGetChar
  00dc8	00 00 00 00	 DD	 $LN38@JGPGetChar
  00dcc	00 00 00 00	 DD	 $LN37@JGPGetChar
  00dd0	00 00 00 00	 DD	 $LN36@JGPGetChar
  00dd4	00 00 00 00	 DD	 $LN35@JGPGetChar
  00dd8	00 00 00 00	 DD	 $LN34@JGPGetChar
  00ddc	00 00 00 00	 DD	 $LN33@JGPGetChar
  00de0	00 00 00 00	 DD	 $LN106@JGPGetChar
$LN104@JGPGetChar:
  00de4	00		 DB	 0
  00de5	01		 DB	 1
  00de6	02		 DB	 2
  00de7	03		 DB	 3
  00de8	04		 DB	 4
  00de9	05		 DB	 5
  00dea	06		 DB	 6
  00deb	18		 DB	 24			; 00000018H
  00dec	18		 DB	 24			; 00000018H
  00ded	18		 DB	 24			; 00000018H
  00dee	18		 DB	 24			; 00000018H
  00def	18		 DB	 24			; 00000018H
  00df0	18		 DB	 24			; 00000018H
  00df1	18		 DB	 24			; 00000018H
  00df2	18		 DB	 24			; 00000018H
  00df3	18		 DB	 24			; 00000018H
  00df4	18		 DB	 24			; 00000018H
  00df5	18		 DB	 24			; 00000018H
  00df6	18		 DB	 24			; 00000018H
  00df7	18		 DB	 24			; 00000018H
  00df8	18		 DB	 24			; 00000018H
  00df9	18		 DB	 24			; 00000018H
  00dfa	18		 DB	 24			; 00000018H
  00dfb	18		 DB	 24			; 00000018H
  00dfc	18		 DB	 24			; 00000018H
  00dfd	18		 DB	 24			; 00000018H
  00dfe	18		 DB	 24			; 00000018H
  00dff	18		 DB	 24			; 00000018H
  00e00	18		 DB	 24			; 00000018H
  00e01	18		 DB	 24			; 00000018H
  00e02	07		 DB	 7
  00e03	18		 DB	 24			; 00000018H
  00e04	18		 DB	 24			; 00000018H
  00e05	18		 DB	 24			; 00000018H
  00e06	18		 DB	 24			; 00000018H
  00e07	18		 DB	 24			; 00000018H
  00e08	08		 DB	 8
  00e09	09		 DB	 9
  00e0a	0a		 DB	 10			; 0000000aH
  00e0b	0b		 DB	 11			; 0000000bH
  00e0c	0c		 DB	 12			; 0000000cH
  00e0d	0d		 DB	 13			; 0000000dH
  00e0e	0e		 DB	 14			; 0000000eH
  00e0f	0f		 DB	 15			; 0000000fH
  00e10	18		 DB	 24			; 00000018H
  00e11	18		 DB	 24			; 00000018H
  00e12	18		 DB	 24			; 00000018H
  00e13	18		 DB	 24			; 00000018H
  00e14	18		 DB	 24			; 00000018H
  00e15	10		 DB	 16			; 00000010H
  00e16	11		 DB	 17			; 00000011H
  00e17	18		 DB	 24			; 00000018H
  00e18	18		 DB	 24			; 00000018H
  00e19	18		 DB	 24			; 00000018H
  00e1a	18		 DB	 24			; 00000018H
  00e1b	18		 DB	 24			; 00000018H
  00e1c	18		 DB	 24			; 00000018H
  00e1d	18		 DB	 24			; 00000018H
  00e1e	18		 DB	 24			; 00000018H
  00e1f	18		 DB	 24			; 00000018H
  00e20	18		 DB	 24			; 00000018H
  00e21	18		 DB	 24			; 00000018H
  00e22	18		 DB	 24			; 00000018H
  00e23	18		 DB	 24			; 00000018H
  00e24	18		 DB	 24			; 00000018H
  00e25	18		 DB	 24			; 00000018H
  00e26	18		 DB	 24			; 00000018H
  00e27	18		 DB	 24			; 00000018H
  00e28	18		 DB	 24			; 00000018H
  00e29	18		 DB	 24			; 00000018H
  00e2a	18		 DB	 24			; 00000018H
  00e2b	18		 DB	 24			; 00000018H
  00e2c	18		 DB	 24			; 00000018H
  00e2d	18		 DB	 24			; 00000018H
  00e2e	18		 DB	 24			; 00000018H
  00e2f	18		 DB	 24			; 00000018H
  00e30	18		 DB	 24			; 00000018H
  00e31	18		 DB	 24			; 00000018H
  00e32	18		 DB	 24			; 00000018H
  00e33	18		 DB	 24			; 00000018H
  00e34	18		 DB	 24			; 00000018H
  00e35	18		 DB	 24			; 00000018H
  00e36	18		 DB	 24			; 00000018H
  00e37	18		 DB	 24			; 00000018H
  00e38	18		 DB	 24			; 00000018H
  00e39	18		 DB	 24			; 00000018H
  00e3a	18		 DB	 24			; 00000018H
  00e3b	18		 DB	 24			; 00000018H
  00e3c	18		 DB	 24			; 00000018H
  00e3d	18		 DB	 24			; 00000018H
  00e3e	18		 DB	 24			; 00000018H
  00e3f	18		 DB	 24			; 00000018H
  00e40	18		 DB	 24			; 00000018H
  00e41	18		 DB	 24			; 00000018H
  00e42	18		 DB	 24			; 00000018H
  00e43	18		 DB	 24			; 00000018H
  00e44	18		 DB	 24			; 00000018H
  00e45	18		 DB	 24			; 00000018H
  00e46	18		 DB	 24			; 00000018H
  00e47	18		 DB	 24			; 00000018H
  00e48	18		 DB	 24			; 00000018H
  00e49	18		 DB	 24			; 00000018H
  00e4a	18		 DB	 24			; 00000018H
  00e4b	18		 DB	 24			; 00000018H
  00e4c	18		 DB	 24			; 00000018H
  00e4d	18		 DB	 24			; 00000018H
  00e4e	18		 DB	 24			; 00000018H
  00e4f	18		 DB	 24			; 00000018H
  00e50	18		 DB	 24			; 00000018H
  00e51	18		 DB	 24			; 00000018H
  00e52	18		 DB	 24			; 00000018H
  00e53	18		 DB	 24			; 00000018H
  00e54	18		 DB	 24			; 00000018H
  00e55	18		 DB	 24			; 00000018H
  00e56	18		 DB	 24			; 00000018H
  00e57	18		 DB	 24			; 00000018H
  00e58	18		 DB	 24			; 00000018H
  00e59	18		 DB	 24			; 00000018H
  00e5a	18		 DB	 24			; 00000018H
  00e5b	18		 DB	 24			; 00000018H
  00e5c	18		 DB	 24			; 00000018H
  00e5d	18		 DB	 24			; 00000018H
  00e5e	18		 DB	 24			; 00000018H
  00e5f	18		 DB	 24			; 00000018H
  00e60	18		 DB	 24			; 00000018H
  00e61	18		 DB	 24			; 00000018H
  00e62	18		 DB	 24			; 00000018H
  00e63	18		 DB	 24			; 00000018H
  00e64	18		 DB	 24			; 00000018H
  00e65	18		 DB	 24			; 00000018H
  00e66	12		 DB	 18			; 00000012H
  00e67	13		 DB	 19			; 00000013H
  00e68	14		 DB	 20			; 00000014H
  00e69	15		 DB	 21			; 00000015H
  00e6a	16		 DB	 22			; 00000016H
  00e6b	17		 DB	 23			; 00000017H
$LN131@JGPGetChar:
  00e6c	00 00 00 00	 DD	 $LN24@JGPGetChar
  00e70	00 00 00 00	 DD	 $LN25@JGPGetChar
  00e74	00 00 00 00	 DD	 $LN17@JGPGetChar
  00e78	00 00 00 00	 DD	 $LN20@JGPGetChar
  00e7c	00 00 00 00	 DD	 $LN19@JGPGetChar
  00e80	00 00 00 00	 DD	 $LN13@JGPGetChar
$LN105@JGPGetChar:
  00e84	00		 DB	 0
  00e85	01		 DB	 1
  00e86	05		 DB	 5
  00e87	05		 DB	 5
  00e88	05		 DB	 5
  00e89	05		 DB	 5
  00e8a	05		 DB	 5
  00e8b	05		 DB	 5
  00e8c	05		 DB	 5
  00e8d	05		 DB	 5
  00e8e	05		 DB	 5
  00e8f	05		 DB	 5
  00e90	05		 DB	 5
  00e91	05		 DB	 5
  00e92	05		 DB	 5
  00e93	05		 DB	 5
  00e94	05		 DB	 5
  00e95	05		 DB	 5
  00e96	05		 DB	 5
  00e97	05		 DB	 5
  00e98	05		 DB	 5
  00e99	05		 DB	 5
  00e9a	05		 DB	 5
  00e9b	05		 DB	 5
  00e9c	05		 DB	 5
  00e9d	05		 DB	 5
  00e9e	05		 DB	 5
  00e9f	05		 DB	 5
  00ea0	05		 DB	 5
  00ea1	05		 DB	 5
  00ea2	05		 DB	 5
  00ea3	05		 DB	 5
  00ea4	05		 DB	 5
  00ea5	05		 DB	 5
  00ea6	02		 DB	 2
  00ea7	05		 DB	 5
  00ea8	05		 DB	 5
  00ea9	05		 DB	 5
  00eaa	05		 DB	 5
  00eab	05		 DB	 5
  00eac	05		 DB	 5
  00ead	05		 DB	 5
  00eae	05		 DB	 5
  00eaf	05		 DB	 5
  00eb0	05		 DB	 5
  00eb1	05		 DB	 5
  00eb2	05		 DB	 5
  00eb3	05		 DB	 5
  00eb4	05		 DB	 5
  00eb5	05		 DB	 5
  00eb6	05		 DB	 5
  00eb7	05		 DB	 5
  00eb8	05		 DB	 5
  00eb9	05		 DB	 5
  00eba	05		 DB	 5
  00ebb	05		 DB	 5
  00ebc	05		 DB	 5
  00ebd	05		 DB	 5
  00ebe	05		 DB	 5
  00ebf	05		 DB	 5
  00ec0	05		 DB	 5
  00ec1	03		 DB	 3
  00ec2	04		 DB	 4
?JGPGetCharList@@YAXPAE@Z ENDP				; JGPGetCharList
_TEXT	ENDS
PUBLIC	??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DataServerGetCharListRequest@@YAXF@Z		; DataServerGetCharListRequest
EXTRN	?gObjGetAccountId@@YAPADH@Z:PROC		; gObjGetAccountId
EXTRN	?GCLicenseUser@CZtLicense@@QAEXH@Z:PROC		; CZtLicense::GCLicenseUser
;	COMDAT ??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@
CONST	SEGMENT
??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@ DB 'DSProtocol.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DataServerGetCharListRequest@@YAXF@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 16
_TempId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 2
?DataServerGetCharListRequest@@YAXF@Z PROC		; DataServerGetCharListRequest, COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	0f b7 5d 08	 movzx	 ebx, WORD PTR _aIndex$[ebp]
  00015	56		 push	 esi

; 1389 : 	g_ZtLicense.GCLicenseUser(aIndex);

  00016	0f bf f3	 movsx	 esi, bx
  00019	56		 push	 esi
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001f	e8 00 00 00 00	 call	 ?GCLicenseUser@CZtLicense@@QAEXH@Z ; CZtLicense::GCLicenseUser

; 1390 : 
; 1391 : 	SDHP_GETCHARLIST pMsg;
; 1392 : 	char TempId[11];
; 1393 : 	char* AccountId;
; 1394 : 
; 1395 : 	memset(TempId, 0, sizeof(TempId));

  00024	33 c0		 xor	 eax, eax

; 1396 : 	AccountId = gObjGetAccountId(aIndex);

  00026	56		 push	 esi
  00027	89 45 f0	 mov	 DWORD PTR _TempId$[ebp], eax
  0002a	89 45 f4	 mov	 DWORD PTR _TempId$[ebp+4], eax
  0002d	66 89 45 f8	 mov	 WORD PTR _TempId$[ebp+8], ax
  00031	88 45 fa	 mov	 BYTE PTR _TempId$[ebp+10], al
  00034	e8 00 00 00 00	 call	 ?gObjGetAccountId@@YAPADH@Z ; gObjGetAccountId
  00039	83 c4 04	 add	 esp, 4

; 1397 : 
; 1398 : 	if ( AccountId == 0 )

  0003c	85 c0		 test	 eax, eax
  0003e	75 39		 jne	 SHORT $LN2@DataServer@3

; 1399 : 	{
; 1400 : 		LogAdd(lMsg.Get(MSGGET(1, 166)), __FILE__, __LINE__);

  00040	68 78 05 00 00	 push	 1400			; 00000578H
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@
  0004a	68 a6 01 00 00	 push	 422			; 000001a6H
$LN8@DataServer@3:
  0004f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00054	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00059	50		 push	 eax
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1401 : 		CloseClient(aIndex);

  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx

; 1424 : 	
; 1425 : }

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN2@DataServer@3:

; 1402 : 		return;
; 1403 : 	}
; 1404 : 
; 1405 : 	// When Len is Less than 1
; 1406 : 	if ( strlen(AccountId) < 1 )

  00079	8b c8		 mov	 ecx, eax
  0007b	57		 push	 edi
  0007c	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0007f	90		 npad	 1
$LL7@DataServer@3:
  00080	8a 11		 mov	 dl, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 d2		 test	 dl, dl
  00085	75 f9		 jne	 SHORT $LL7@DataServer@3
  00087	2b cf		 sub	 ecx, edi
  00089	5f		 pop	 edi
  0008a	83 f9 01	 cmp	 ecx, 1
  0008d	73 11		 jae	 SHORT $LN1@DataServer@3

; 1407 : 	{
; 1408 : 		// Error Message
; 1409 : 		//
; 1410 : 		LogAdd(lMsg.Get(MSGGET(1, 167)), __FILE__, __LINE__);

  0008f	68 82 05 00 00	 push	 1410			; 00000582H
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@
  00099	68 a7 01 00 00	 push	 423			; 000001a7H

; 1411 : 		CloseClient(aIndex);
; 1412 : 		return;

  0009e	eb af		 jmp	 SHORT $LN8@DataServer@3
$LN1@DataServer@3:

; 1413 : 	}
; 1414 : 
; 1415 : 	strcpy((char*)TempId, AccountId);

  000a0	8d 55 f0	 lea	 edx, DWORD PTR _TempId$[ebp]
  000a3	2b d0		 sub	 edx, eax
$LL5@DataServer@3:
  000a5	8a 08		 mov	 cl, BYTE PTR [eax]
  000a7	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000aa	40		 inc	 eax
  000ab	84 c9		 test	 cl, cl
  000ad	75 f6		 jne	 SHORT $LL5@DataServer@3

; 1416 : 
; 1417 : 	pMsg.h.c  = 0xC1;
; 1418 : 	pMsg.h.size  = sizeof(SDHP_GETCHARLIST);
; 1419 : 	pMsg.h.headcode = 0x01;
; 1420 : 	pMsg.Number = aIndex;
; 1421 : 	memcpy(pMsg.Id , TempId, sizeof(TempId)-1);

  000af	8b 45 f0	 mov	 eax, DWORD PTR _TempId$[ebp]
  000b2	8b 4d f4	 mov	 ecx, DWORD PTR _TempId$[ebp+4]
  000b5	66 8b 55 f8	 mov	 dx, WORD PTR _TempId$[ebp+8]
  000b9	89 45 e3	 mov	 DWORD PTR _pMsg$[ebp+3], eax

; 1422 : 
; 1423 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  000bc	6a 10		 push	 16			; 00000010H
  000be	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000c1	89 4d e7	 mov	 DWORD PTR _pMsg$[ebp+7], ecx
  000c4	50		 push	 eax
  000c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000ca	66 c7 45 e0 c1
	10		 mov	 WORD PTR _pMsg$[ebp], 4289 ; 000010c1H
  000d0	c6 45 e2 01	 mov	 BYTE PTR _pMsg$[ebp+2], 1
  000d4	66 89 5d ee	 mov	 WORD PTR _pMsg$[ebp+14], bx
  000d8	66 89 55 eb	 mov	 WORD PTR _pMsg$[ebp+11], dx
  000dc	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 1424 : 	
; 1425 : }

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	5e		 pop	 esi
  000e5	33 cd		 xor	 ecx, ebp
  000e7	5b		 pop	 ebx
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
?DataServerGetCharListRequest@@YAXF@Z ENDP		; DataServerGetCharListRequest
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?JGCharacterCreateRequest@@YAXPAUSDHP_CREATECHARRESULT@@@Z ; JGCharacterCreateRequest
; Function compile flags: /Ogtp
;	COMDAT ?JGCharacterCreateRequest@@YAXPAUSDHP_CREATECHARRESULT@@@Z
_TEXT	SEGMENT
_pResult$ = -60						; size = 44
_szAccountID$ = -16					; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGCharacterCreateRequest@@YAXPAUSDHP_CREATECHARRESULT@@@Z PROC ; JGCharacterCreateRequest, COMDAT

; 1441 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 1442 : 	PMSG_CHARCREATERESULT pResult;
; 1443 : 	char szAccountID[MAX_ACCOUNT_LEN+1];
; 1444 : 	int aIndex = lpMsg->Number;
; 1445 : 
; 1446 : 	szAccountID[MAX_ACCOUNT_LEN] = 0;
; 1447 : 	memcpy(szAccountID, lpMsg->AccountId, sizeof(lpMsg->AccountId));

  00014	8b 46 06	 mov	 eax, DWORD PTR [esi+6]
  00017	8b 4e 0a	 mov	 ecx, DWORD PTR [esi+10]
  0001a	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]
  0001e	57		 push	 edi
  0001f	0f bf 7e 04	 movsx	 edi, WORD PTR [esi+4]
  00023	89 45 f0	 mov	 DWORD PTR _szAccountID$[ebp], eax

; 1448 : 
; 1449 : 	if ( gObjIsAccontConnect(aIndex, szAccountID) == FALSE )

  00026	8d 45 f0	 lea	 eax, DWORD PTR _szAccountID$[ebp]
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	c6 45 fa 00	 mov	 BYTE PTR _szAccountID$[ebp+10], 0
  0002f	89 4d f4	 mov	 DWORD PTR _szAccountID$[ebp+4], ecx
  00032	66 89 55 f8	 mov	 WORD PTR _szAccountID$[ebp+8], dx
  00036	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003b	83 c4 08	 add	 esp, 8
  0003e	85 c0		 test	 eax, eax
  00040	75 35		 jne	 SHORT $LN2@JGCharacte

; 1450 : 	{
; 1451 : 		LogAddC(2, lMsg.Get(MSGGET(1, 168)), szAccountID);

  00042	8d 4d f0	 lea	 ecx, DWORD PTR _szAccountID$[ebp]
  00045	51		 push	 ecx
  00046	68 a8 01 00 00	 push	 424			; 000001a8H
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00050	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00055	50		 push	 eax
  00056	6a 02		 push	 2
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1452 : 		CloseClient(aIndex);

  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 1475 : }

  00069	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006c	33 cd		 xor	 ecx, ebp
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
$LN2@JGCharacte:

; 1453 : 		return;
; 1454 : 	}
; 1455 : 
; 1456 : 	pResult.h.c = 0xC1;
; 1457 : 	pResult.h.size = sizeof(PMSG_CHARCREATERESULT);
; 1458 : 	pResult.h.headcode = 0xF3;
; 1459 : 	pResult.subcode = 0x01;
; 1460 : 	pResult.Result = lpMsg->Result;
; 1461 : 	pResult.pos = lpMsg->Pos;
; 1462 : 	pResult.Class = (lpMsg->ClassSkin >> 4 << 5) & 0xE0;
; 1463 : 	int changeup = lpMsg->ClassSkin & 0x07; 

  00077	8a 4e 1b	 mov	 cl, BYTE PTR [esi+27]
  0007a	8a 46 1a	 mov	 al, BYTE PTR [esi+26]
  0007d	8a 56 03	 mov	 dl, BYTE PTR [esi+3]
  00080	88 45 d3	 mov	 BYTE PTR _pResult$[ebp+15], al
  00083	0f b6 c1	 movzx	 eax, cl
  00086	83 e0 07	 and	 eax, 7

; 1464 : 	pResult.Class |= (changeup << 4) & 0x10;
; 1465 : 	pResult.Class |= (changeup << 4) & 0x20; //Season 2.5 add-on

  00089	24 03		 and	 al, 3
  0008b	02 c0		 add	 al, al
  0008d	02 c0		 add	 al, al
  0008f	02 c0		 add	 al, al
  00091	80 e1 f0	 and	 cl, 240			; 000000f0H
  00094	0a c1		 or	 al, cl

; 1466 : 	pResult.Level = lpMsg->Level;

  00096	66 8b 4e 34	 mov	 cx, WORD PTR [esi+52]
  0009a	02 c0		 add	 al, al
  0009c	88 45 d6	 mov	 BYTE PTR _pResult$[ebp+18], al

; 1467 : 	memcpy(pResult.Name, lpMsg->Name, sizeof(pResult.Name));

  0009f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a2	66 89 4d d4	 mov	 WORD PTR _pResult$[ebp+16], cx
  000a6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000a9	89 45 c9	 mov	 DWORD PTR _pResult$[ebp+5], eax
  000ac	66 8b 46 18	 mov	 ax, WORD PTR [esi+24]
  000b0	c7 45 c4 c1 2c
	f3 01		 mov	 DWORD PTR _pResult$[ebp], 32713921 ; 01f32cc1H
  000b7	88 55 c8	 mov	 BYTE PTR _pResult$[ebp+4], dl
  000ba	89 4d cd	 mov	 DWORD PTR _pResult$[ebp+9], ecx
  000bd	66 89 45 d1	 mov	 WORD PTR _pResult$[ebp+13], ax

; 1468 : 
; 1469 : 	if ( pResult.Result == 1 )

  000c1	80 fa 01	 cmp	 dl, 1
  000c4	75 24		 jne	 SHORT $LN1@JGCharacte

; 1470 : 	{
; 1471 : 		memcpy(pResult.Equipment, lpMsg->Equipment, sizeof(pResult.Equipment));

  000c6	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000c9	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  000cc	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000cf	89 4d d7	 mov	 DWORD PTR _pResult$[ebp+19], ecx
  000d2	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  000d5	89 55 db	 mov	 DWORD PTR _pResult$[ebp+23], edx
  000d8	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000db	89 45 df	 mov	 DWORD PTR _pResult$[ebp+27], eax
  000de	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000e1	89 4d e3	 mov	 DWORD PTR _pResult$[ebp+31], ecx
  000e4	89 55 e7	 mov	 DWORD PTR _pResult$[ebp+35], edx
  000e7	89 45 eb	 mov	 DWORD PTR _pResult$[ebp+39], eax
$LN1@JGCharacte:

; 1472 : 	}
; 1473 : 
; 1474 : 	DataSend(aIndex, (LPBYTE)&pResult, pResult.h.size);

  000ea	6a 2c		 push	 44			; 0000002cH
  000ec	8d 4d c4	 lea	 ecx, DWORD PTR _pResult$[ebp]
  000ef	51		 push	 ecx
  000f0	57		 push	 edi
  000f1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1475 : }

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fc	5f		 pop	 edi
  000fd	33 cd		 xor	 ecx, ebp
  000ff	5e		 pop	 esi
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
?JGCharacterCreateRequest@@YAXPAUSDHP_CREATECHARRESULT@@@Z ENDP ; JGCharacterCreateRequest
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?JGCharacterCreateFailSend@@YAXHPAD@Z		; JGCharacterCreateFailSend
; Function compile flags: /Ogtp
;	COMDAT ?JGCharacterCreateFailSend@@YAXHPAD@Z
_TEXT	SEGMENT
_pResult$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_id$ = 12						; size = 4
?JGCharacterCreateFailSend@@YAXHPAD@Z PROC		; JGCharacterCreateFailSend, COMDAT

; 1479 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _id$[ebp]

; 1480 : 	PMSG_CHARCREATERESULT  pResult;
; 1481 : 
; 1482 : 	pResult.h.c = 0xC1;
; 1483 : 	pResult.h.size = sizeof (PMSG_CHARCREATERESULT);
; 1484 : 	pResult.h.headcode = 0xF3;
; 1485 : 	pResult.subcode = 0x01;
; 1486 : 	pResult.Result = false;
; 1487 : 	pResult.pos = 0;
; 1488 : 	memcpy(pResult.Name, id, sizeof(pResult.Name));

  00013	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00016	32 c9		 xor	 cl, cl
  00018	88 4d d4	 mov	 BYTE PTR _pResult$[ebp+4], cl
  0001b	88 4d df	 mov	 BYTE PTR _pResult$[ebp+15], cl
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  00024	89 4d d5	 mov	 DWORD PTR _pResult$[ebp+5], ecx

; 1489 : 
; 1490 : 	DataSend(aIndex, (UCHAR*)&pResult, pResult.h.size);

  00027	6a 2c		 push	 44			; 0000002cH
  00029	8d 4d d0	 lea	 ecx, DWORD PTR _pResult$[ebp]
  0002c	89 55 d9	 mov	 DWORD PTR _pResult$[ebp+9], edx
  0002f	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	c7 45 d0 c1 2c
	f3 01		 mov	 DWORD PTR _pResult$[ebp], 32713921 ; 01f32cc1H
  0003b	66 89 45 dd	 mov	 WORD PTR _pResult$[ebp+13], ax
  0003f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1491 : }

  00044	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00047	33 cd		 xor	 ecx, ebp
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?JGCharacterCreateFailSend@@YAXHPAD@Z ENDP		; JGCharacterCreateFailSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?JGCharDelRequest@@YAXPAUSDHP_CHARDELETERESULT@@@Z ; JGCharDelRequest
; Function compile flags: /Ogtp
;	COMDAT ?JGCharDelRequest@@YAXPAUSDHP_CHARDELETERESULT@@@Z
_TEXT	SEGMENT
_pResult$ = -24						; size = 5
_szAccountId$ = -16					; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGCharDelRequest@@YAXPAUSDHP_CHARDELETERESULT@@@Z PROC	; JGCharDelRequest, COMDAT

; 1495 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 1496 : 	PMSG_RESULT pResult;
; 1497 : 	char szAccountId[MAX_ACCOUNT_LEN+1];
; 1498 : 	int aIndex = lpMsg->Number;
; 1499 : 	szAccountId[MAX_ACCOUNT_LEN] = 0;
; 1500 : 	memcpy(szAccountId, lpMsg->AccountID, sizeof(lpMsg->AccountID));

  00014	8b 46 06	 mov	 eax, DWORD PTR [esi+6]
  00017	8b 4e 0a	 mov	 ecx, DWORD PTR [esi+10]
  0001a	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]
  0001e	57		 push	 edi
  0001f	0f bf 7e 04	 movsx	 edi, WORD PTR [esi+4]
  00023	89 45 f0	 mov	 DWORD PTR _szAccountId$[ebp], eax

; 1501 : 
; 1502 : 	if ( ::gObjIsAccontConnect(aIndex, szAccountId) == FALSE )

  00026	8d 45 f0	 lea	 eax, DWORD PTR _szAccountId$[ebp]
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	c6 45 fa 00	 mov	 BYTE PTR _szAccountId$[ebp+10], 0
  0002f	89 4d f4	 mov	 DWORD PTR _szAccountId$[ebp+4], ecx
  00032	66 89 55 f8	 mov	 WORD PTR _szAccountId$[ebp+8], dx
  00036	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003b	83 c4 08	 add	 esp, 8
  0003e	85 c0		 test	 eax, eax
  00040	75 35		 jne	 SHORT $LN1@JGCharDelR

; 1503 : 	{
; 1504 : 		LogAddC(2, lMsg.Get(MSGGET(1, 169)), szAccountId);

  00042	8d 4d f0	 lea	 ecx, DWORD PTR _szAccountId$[ebp]
  00045	51		 push	 ecx
  00046	68 a9 01 00 00	 push	 425			; 000001a9H
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00050	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00055	50		 push	 eax
  00056	6a 02		 push	 2
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1505 : 		CloseClient(aIndex);

  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 1517 : }

  00069	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006c	33 cd		 xor	 ecx, ebp
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
$LN1@JGCharDelR:

; 1506 : 
; 1507 : 		return;
; 1508 : 	}
; 1509 : 
; 1510 : 	pResult.h.c = 0xC1;
; 1511 : 	pResult.h.size = sizeof(PMSG_RESULT);
; 1512 : 	pResult.h.headcode = 0xF3;
; 1513 : 	pResult.subcode = 0x02;
; 1514 : 	pResult.result = lpMsg->Result;
; 1515 : 
; 1516 : 	DataSend(lpMsg->Number, (UCHAR*)&pResult, pResult.h.size);

  00077	0f bf 4e 04	 movsx	 ecx, WORD PTR [esi+4]
  0007b	8a 56 03	 mov	 dl, BYTE PTR [esi+3]
  0007e	6a 05		 push	 5
  00080	8d 45 e8	 lea	 eax, DWORD PTR _pResult$[ebp]
  00083	50		 push	 eax
  00084	51		 push	 ecx
  00085	c7 45 e8 c1 05
	f3 02		 mov	 DWORD PTR _pResult$[ebp], 49481153 ; 02f305c1H
  0008c	88 55 ec	 mov	 BYTE PTR _pResult$[ebp+4], dl
  0008f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1517 : }

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	5f		 pop	 edi
  0009b	33 cd		 xor	 ecx, ebp
  0009d	5e		 pop	 esi
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?JGCharDelRequest@@YAXPAUSDHP_CHARDELETERESULT@@@Z ENDP	; JGCharDelRequest
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GCItemListSend@@YAXH@Z				; GCItemListSend
EXTRN	?ItemByteConvert@@YAXPAEVCItem@@@Z:PROC		; ItemByteConvert
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GCItemListSend@@YAXH@Z
_TEXT	SEGMENT
_aIndex$GSCopy$ = -4140					; size = 4
_sOfs$ = -4136						; size = 4
_itemcount$ = -4132					; size = 4
_n$228455 = -4128					; size = 4
tv206 = -4124						; size = 4
_pMsgILC$ = -4124					; size = 6
_pMsgIL$ = -4116					; size = 13
_sendBuf$ = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GCItemListSend@@YAXH@Z PROC				; GCItemListSend, COMDAT

; 1976 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 2c 10 00 00	 mov	 eax, 4140		; 0000102cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]

; 1977 : 	PMSG_INVENTORYLISTCOUNT pMsgILC;	// Packet Message Item List Count
; 1978 : 	PMSG_INVENTORYLIST pMsgIL;	// Packet Message Item List
; 1979 : 	int sOfs = sizeof(PMSG_INVENTORYLISTCOUNT);

  0001b	89 9d d4 ef ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], ebx

; 1980 : 	int pMsgILSize = sizeof(PMSG_INVENTORYLIST);
; 1981 : 	BYTE sendBuf[WAREHOUSE_BUFF];
; 1982 : 	LPOBJ lpObj = &gObj[aIndex];

  00021	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00027	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	56		 push	 esi
  0002e	57		 push	 edi

; 1983 : 	int itemcount = 0;

  0002f	33 ff		 xor	 edi, edi
  00031	c7 85 d8 ef ff
	ff 06 00 00 00	 mov	 DWORD PTR _sOfs$[ebp], 6
  0003b	89 bd dc ef ff
	ff		 mov	 DWORD PTR _itemcount$[ebp], edi

; 1984 : 	
; 1985 : 	for ( int n=0;n<INVENTORY_SIZE;n++)

  00041	89 bd e0 ef ff
	ff		 mov	 DWORD PTR _n$228455[ebp], edi

; 2000 : 			sOfs += pMsgILSize;

  00047	89 bd e4 ef ff
	ff		 mov	 DWORD PTR tv206[ebp], edi
  0004d	8d 49 00	 npad	 3
$LL5@GCItemList:

; 1986 : 	{
; 1987 : 		if ( lpObj->pInventory[n].IsItem() == TRUE )

  00050	8b 8b 24 0e 00
	00		 mov	 ecx, DWORD PTR [ebx+3620]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	0f 85 98 00 00
	00		 jne	 $LN4@GCItemList

; 1988 : 		{
; 1989 : 			if ( lpObj->pInventory[n].m_bItemExist == false )

  00066	8b 83 24 0e 00
	00		 mov	 eax, DWORD PTR [ebx+3620]
  0006c	80 bc 38 88 00
	00 00 00	 cmp	 BYTE PTR [eax+edi+136], 0
  00074	0f 84 84 00 00
	00		 je	 $LN4@GCItemList

; 1990 : 			{
; 1991 : 				continue;
; 1992 : 			}
; 1993 : 
; 1994 : 			pMsgIL.Pos = n;

  0007a	8a 8d e0 ef ff
	ff		 mov	 cl, BYTE PTR _n$228455[ebp]
  00080	88 8d ec ef ff
	ff		 mov	 BYTE PTR _pMsgIL$[ebp], cl

; 1995 : 
; 1996 : 			ItemByteConvert(pMsgIL.ItemInfo,lpObj->pInventory[n]);

  00086	8b b3 24 0e 00
	00		 mov	 esi, DWORD PTR [ebx+3620]
  0008c	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00092	03 f7		 add	 esi, edi
  00094	8d 95 ed ef ff
	ff		 lea	 edx, DWORD PTR _pMsgIL$[ebp+1]
  0009a	8b fc		 mov	 edi, esp
  0009c	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  000a1	52		 push	 edx
  000a2	f3 a5		 rep movsd
  000a4	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert
  000a9	8b 85 d8 ef ff
	ff		 mov	 eax, DWORD PTR _sOfs$[ebp]

; 1997 : 
; 1998 : 			memcpy(&sendBuf[sOfs], &pMsgIL, pMsgILSize);

  000af	8b 8d ec ef ff
	ff		 mov	 ecx, DWORD PTR _pMsgIL$[ebp]
  000b5	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR _pMsgIL$[ebp+4]

; 1999 : 			itemcount++;

  000bb	ff 85 dc ef ff
	ff		 inc	 DWORD PTR _itemcount$[ebp]

; 2000 : 			sOfs += pMsgILSize;

  000c1	8b bd e4 ef ff
	ff		 mov	 edi, DWORD PTR tv206[ebp]
  000c7	89 8c 05 fc ef
	ff ff		 mov	 DWORD PTR _sendBuf$[ebp+eax], ecx
  000ce	8b 8d f4 ef ff
	ff		 mov	 ecx, DWORD PTR _pMsgIL$[ebp+8]
  000d4	89 94 05 00 f0
	ff ff		 mov	 DWORD PTR _sendBuf$[ebp+eax+4], edx
  000db	8a 95 f8 ef ff
	ff		 mov	 dl, BYTE PTR _pMsgIL$[ebp+12]
  000e1	89 8c 05 04 f0
	ff ff		 mov	 DWORD PTR _sendBuf$[ebp+eax+8], ecx
  000e8	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000ee	88 94 05 08 f0
	ff ff		 mov	 BYTE PTR _sendBuf$[ebp+eax+12], dl
  000f5	83 c0 0d	 add	 eax, 13			; 0000000dH
  000f8	89 85 d8 ef ff
	ff		 mov	 DWORD PTR _sOfs$[ebp], eax
$LN4@GCItemList:

; 1984 : 	
; 1985 : 	for ( int n=0;n<INVENTORY_SIZE;n++)

  000fe	ff 85 e0 ef ff
	ff		 inc	 DWORD PTR _n$228455[ebp]
  00104	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0010a	89 bd e4 ef ff
	ff		 mov	 DWORD PTR tv206[ebp], edi
  00110	81 ff 70 c3 00
	00		 cmp	 edi, 50032		; 0000c370H
  00116	0f 8c 34 ff ff
	ff		 jl	 $LL5@GCItemList

; 2001 : 		}
; 2002 : 	}
; 2003 : 
; 2004 : 	pMsgILC.h.c = 0xC4;
; 2005 : 	pMsgILC.h.headcode = 0xF3;
; 2006 : 	pMsgILC.subcode = 0x10;
; 2007 : 	pMsgILC.h.sizeH = SET_NUMBERH(sOfs);

  0011c	8b 85 d8 ef ff
	ff		 mov	 eax, DWORD PTR _sOfs$[ebp]

; 2008 : 	pMsgILC.h.sizeL = SET_NUMBERL(sOfs);
; 2009 : 	pMsgILC.Count = itemcount;

  00122	8a 95 dc ef ff
	ff		 mov	 dl, BYTE PTR _itemcount$[ebp]
  00128	8b c8		 mov	 ecx, eax
  0012a	c1 e9 08	 shr	 ecx, 8
  0012d	88 8d e5 ef ff
	ff		 mov	 BYTE PTR _pMsgILC$[ebp+1], cl
  00133	88 85 e6 ef ff
	ff		 mov	 BYTE PTR _pMsgILC$[ebp+2], al

; 2010 : 	memcpy(sendBuf, &pMsgILC, sizeof(PMSG_INVENTORYLISTCOUNT));
; 2011 : 
; 2012 : 	DataSend(aIndex, sendBuf, sOfs);

  00139	50		 push	 eax
  0013a	66 c7 85 e7 ef
	ff ff f3 10	 mov	 WORD PTR _pMsgILC$[ebp+3], 4339 ; 000010f3H
  00143	c6 85 e4 ef ff
	ff c4		 mov	 BYTE PTR _pMsgILC$[ebp], 196 ; 000000c4H
  0014a	8b 8d e4 ef ff
	ff		 mov	 ecx, DWORD PTR _pMsgILC$[ebp]
  00150	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _sendBuf$[ebp]
  00156	89 8d fc ef ff
	ff		 mov	 DWORD PTR _sendBuf$[ebp], ecx
  0015c	8b 8d d4 ef ff
	ff		 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
  00162	88 95 e9 ef ff
	ff		 mov	 BYTE PTR _pMsgILC$[ebp+5], dl
  00168	66 8b 95 e8 ef
	ff ff		 mov	 dx, WORD PTR _pMsgILC$[ebp+4]
  0016f	50		 push	 eax
  00170	51		 push	 ecx
  00171	66 89 95 00 f0
	ff ff		 mov	 WORD PTR _sendBuf$[ebp+4], dx
  00178	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2013 : }

  0017d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH
  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	33 cd		 xor	 ecx, ebp
  00187	5b		 pop	 ebx
  00188	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c3		 ret	 0
?GCItemListSend@@YAXH@Z ENDP				; GCItemListSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDGetWarehouseList@@YAXHPADH@Z			; GDGetWarehouseList
EXTRN	?ClearWarehouse@CGuildBank@@QAEXH@Z:PROC	; CGuildBank::ClearWarehouse
EXTRN	?g_GuildBank@@3VCGuildBank@@A:BYTE		; g_GuildBank
; Function compile flags: /Ogtp
;	COMDAT ?GDGetWarehouseList@@YAXHPADH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_AccountID$ = 12					; size = 4
_Number$ = 16						; size = 4
?GDGetWarehouseList@@YAXHPADH@Z PROC			; GDGetWarehouseList, COMDAT

; 2268 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 0c	 mov	 esi, DWORD PTR _AccountID$[ebp]

; 2269 : 	if ( strlen(AccountID) < 1 )

  00014	8b c6		 mov	 eax, esi
  00016	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL4@GDGetWareh:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL4@GDGetWareh
  00027	2b c2		 sub	 eax, edx
  00029	83 f8 01	 cmp	 eax, 1
  0002c	72 47		 jb	 SHORT $LN2@GDGetWareh

; 2270 : 	{
; 2271 : 		return;
; 2272 : 	}
; 2273 : 
; 2274 : 	#if(DEV_GUILDBANK)
; 2275 : 	g_GuildBank.ClearWarehouse(aIndex);

  0002e	57		 push	 edi
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00032	57		 push	 edi
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GuildBank@@3VCGuildBank@@A ; g_GuildBank
  00038	e8 00 00 00 00	 call	 ?ClearWarehouse@CGuildBank@@QAEXH@Z ; CGuildBank::ClearWarehouse

; 2276 : 	#endif
; 2277 : 
; 2278 : 	SDHP_GETWAREHOUSEDB	pMsg;
; 2279 : 
; 2280 : 	pMsg.h.c = 0xC1;
; 2281 : 	pMsg.h.headcode = 0x08;
; 2282 : 	pMsg.h.size = sizeof(SDHP_GETWAREHOUSEDB);
; 2283 : 	pMsg.aIndex = aIndex;
; 2284 : 	memcpy(pMsg.AccountID, AccountID, sizeof(pMsg.AccountID));

  0003d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	66 8b 56 08	 mov	 dx, WORD PTR [esi+8]
  00046	89 4d ef	 mov	 DWORD PTR _pMsg$[ebp+7], ecx

; 2285 : 	//LPOBJ lpObj = &gObj[aIndex];
; 2286 : 
; 2287 : 	pMsg.Number = Number;
; 2288 : 
; 2289 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00049	6a 14		 push	 20			; 00000014H
  0004b	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0004e	89 45 eb	 mov	 DWORD PTR _pMsg$[ebp+3], eax
  00051	8b 45 10	 mov	 eax, DWORD PTR _Number$[ebp]
  00054	51		 push	 ecx
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005a	c6 45 e8 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  0005e	66 c7 45 e9 14
	08		 mov	 WORD PTR _pMsg$[ebp+1], 2068 ; 00000814H
  00064	66 89 7d f6	 mov	 WORD PTR _pMsg$[ebp+14], di
  00068	66 89 55 f3	 mov	 WORD PTR _pMsg$[ebp+11], dx
  0006c	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  0006f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  00074	5f		 pop	 edi
$LN2@GDGetWareh:

; 2290 : }

  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	5e		 pop	 esi
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?GDGetWarehouseList@@YAXHPADH@Z ENDP			; GDGetWarehouseList
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDGetWarehouseNoItem@@YAXPAUSDHP_GETWAREHOUSEDB_RESULT@@@Z ; GDGetWarehouseNoItem
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
; Function compile flags: /Ogtp
;	COMDAT ?GDGetWarehouseNoItem@@YAXPAUSDHP_GETWAREHOUSEDB_RESULT@@@Z
_TEXT	SEGMENT
_pResult$ = -40						; size = 11
_pMsg$228686 = -28					; size = 12
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?GDGetWarehouseNoItem@@YAXPAUSDHP_GETWAREHOUSEDB_RESULT@@@Z PROC ; GDGetWarehouseNoItem, COMDAT

; 2601 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 2602 : 	char szId[11];
; 2603 : 	int aIndex = lpMsg->aIndex;
; 2604 : 	PMSG_TALKRESULT pResult;
; 2605 : 
; 2606 : 	szId[MAX_ACCOUNT_LEN] = 0;
; 2607 : 	memcpy(szId, lpMsg->AccountID, sizeof(lpMsg->AccountID));

  00013	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  00016	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00019	57		 push	 edi
  0001a	0f bf 78 0e	 movsx	 edi, WORD PTR [eax+14]
  0001e	66 8b 40 0b	 mov	 ax, WORD PTR [eax+11]
  00022	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx

; 2608 : 
; 2609 : 	if ( !gObjIsAccontConnect(aIndex, szId) )

  00025	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  00028	51		 push	 ecx
  00029	57		 push	 edi
  0002a	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  0002e	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx
  00031	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  00035	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	75 2f		 jne	 SHORT $LN3@GDGetWareh@2

; 2610 : 	{
; 2611 : 		LogAddC(2, lMsg.Get(MSGGET(1, 175)), szId, aIndex);

  00041	57		 push	 edi
  00042	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00045	52		 push	 edx
  00046	68 af 01 00 00	 push	 431			; 000001afH
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00050	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00055	50		 push	 eax
  00056	6a 02		 push	 2
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	5f		 pop	 edi

; 2642 : 		}
; 2643 : 	}
; 2644 : 
; 2645 : 	lpObj->LoadWareHouseInfo = true;
; 2646 : 	lpObj->m_ReqWarehouseOpen = false;
; 2647 : 
; 2648 : 
; 2649 : 
; 2650 : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN3@GDGetWareh@2:
  00070	56		 push	 esi

; 2612 : 		return;
; 2613 : 	}
; 2614 : 
; 2615 : 	LPOBJ lpObj = &gObj[aIndex];

  00071	8b f7		 mov	 esi, edi
  00073	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00079	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2616 : 
; 2617 : 	/* Guild Bank Fix */
; 2618 : 	g_GuildBank.ClearWarehouse(aIndex);

  0007f	57		 push	 edi
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GuildBank@@3VCGuildBank@@A ; g_GuildBank
  00085	e8 00 00 00 00	 call	 ?ClearWarehouse@CGuildBank@@QAEXH@Z ; CGuildBank::ClearWarehouse

; 2619 : 	
; 2620 : 	if ( lpObj->m_IfState.type == 6 )

  0008a	8b 86 1c 0e 00
	00		 mov	 eax, DWORD PTR [esi+3612]
  00090	8b c8		 mov	 ecx, eax
  00092	81 e1 c0 ff 00
	00		 and	 ecx, 65472		; 0000ffc0H
  00098	81 f9 80 01 00
	00		 cmp	 ecx, 384		; 00000180H
  0009e	0f 85 91 00 00
	00		 jne	 $LN1@GDGetWareh@2

; 2621 : 	{
; 2622 : 		if ( lpObj->m_IfState.state == 0 )

  000a4	a8 3c		 test	 al, 60			; 0000003cH
  000a6	0f 85 89 00 00
	00		 jne	 $LN1@GDGetWareh@2

; 2623 : 		{
; 2624 : 			lpObj->m_IfState.state = 1;

  000ac	83 e0 c7	 and	 eax, -57		; ffffffc7H
  000af	83 c8 04	 or	 eax, 4
  000b2	89 86 1c 0e 00
	00		 mov	 DWORD PTR [esi+3612], eax

; 2625 : 			lpObj->WarehouseSave = 1;

  000b8	c7 86 70 0e 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+3696], 1

; 2626 : 			pResult.h.c = 0xC3;
; 2627 : 			pResult.h.headcode = 0x30;
; 2628 : 			pResult.h.size = sizeof(pResult);
; 2629 : 			pResult.result = 2;
; 2630 : 
; 2631 : 			DataSend(lpObj->m_Index, (LPBYTE)&pResult, pResult.h.size);

  000c2	6a 0b		 push	 11			; 0000000bH
  000c4	8d 55 d8	 lea	 edx, DWORD PTR _pResult$[ebp]
  000c7	c6 45 d8 c3	 mov	 BYTE PTR _pResult$[ebp], 195 ; 000000c3H
  000cb	66 c7 45 d9 0b
	30		 mov	 WORD PTR _pResult$[ebp+1], 12299 ; 0000300bH
  000d1	c6 45 db 02	 mov	 BYTE PTR _pResult$[ebp+3], 2
  000d5	8b 06		 mov	 eax, DWORD PTR [esi]
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2632 : 			LogAddC(2, lMsg.Get(MSGGET(1, 176)), lpObj->Name);

  000e1	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  000e4	51		 push	 ecx
  000e5	68 b0 01 00 00	 push	 432			; 000001b0H
  000ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000ef	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000f4	50		 push	 eax
  000f5	6a 02		 push	 2
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 2633 : 		
; 2634 : 			PMSG_MONEY pMsg; // Season 4.5 fix
; 2635 : 
; 2636 : 			PHeadSetB((LPBYTE)&pMsg, 0x81, sizeof(pMsg));

  000fd	6a 0c		 push	 12			; 0000000cH
  000ff	8d 55 e4	 lea	 edx, DWORD PTR _pMsg$228686[ebp]
  00102	68 81 00 00 00	 push	 129			; 00000081H
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 2637 : 			pMsg.Result = 1;
; 2638 : 			pMsg.iMoney = lpObj->Money;

  0010d	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]

; 2639 : 			pMsg.wMoney = lpObj->WarehouseMoney;
; 2640 : 
; 2641 : 			DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00113	0f b6 55 e5	 movzx	 edx, BYTE PTR _pMsg$228686[ebp+1]
  00117	8b 8e 6c 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3692]
  0011d	89 45 ec	 mov	 DWORD PTR _pMsg$228686[ebp+8], eax
  00120	52		 push	 edx
  00121	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$228686[ebp]
  00124	50		 push	 eax
  00125	57		 push	 edi
  00126	c6 45 e7 01	 mov	 BYTE PTR _pMsg$228686[ebp+3], 1
  0012a	89 4d e8	 mov	 DWORD PTR _pMsg$228686[ebp+4], ecx
  0012d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00132	83 c4 24	 add	 esp, 36			; 00000024H
$LN1@GDGetWareh@2:

; 2642 : 		}
; 2643 : 	}
; 2644 : 
; 2645 : 	lpObj->LoadWareHouseInfo = true;
; 2646 : 	lpObj->m_ReqWarehouseOpen = false;
; 2647 : 
; 2648 : 
; 2649 : 
; 2650 : }

  00135	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00138	c6 86 54 10 00
	00 01		 mov	 BYTE PTR [esi+4180], 1
  0013f	c6 86 1c 11 00
	00 00		 mov	 BYTE PTR [esi+4380], 0
  00146	5e		 pop	 esi
  00147	33 cd		 xor	 ecx, ebp
  00149	5f		 pop	 edi
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
?GDGetWarehouseNoItem@@YAXPAUSDHP_GETWAREHOUSEDB_RESULT@@@Z ENDP ; GDGetWarehouseNoItem
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDUserItemSave@@YAXPAUOBJECTSTRUCT@@@Z		; GDUserItemSave
EXTRN	?ItemByteConvert16@@YAXPAEQAVCItem@@H@Z:PROC	; ItemByteConvert16
; Function compile flags: /Ogtp
;	COMDAT ?GDUserItemSave@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -3796						; size = 3790
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDUserItemSave@@YAXPAUOBJECTSTRUCT@@@Z PROC		; GDUserItemSave, COMDAT

; 2723 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 0e 00
	00		 sub	 esp, 3796		; 00000ed4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 2724 : 	SDHP_DBCHAR_ITEMSAVE pMsg;
; 2725 : 
; 2726 : 	pMsg.h.c = 0xC2;
; 2727 : 	pMsg.h.headcode = 0x11;
; 2728 : 	pMsg.h.sizeH = HIBYTE(sizeof(pMsg));
; 2729 : 	pMsg.h.sizeL = LOBYTE(sizeof(pMsg));
; 2730 : 	memcpy(pMsg.Name, lpObj->Name, sizeof(pMsg.Name));

  00016	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00019	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0001c	89 95 34 f1 ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], edx

; 2731 : 	ItemByteConvert16(pMsg.dbInventory, lpObj->pInventory, INVENTORY_SIZE);

  00022	8b 90 24 0e 00
	00		 mov	 edx, DWORD PTR [eax+3620]
  00028	89 8d 30 f1 ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  0002e	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  00032	68 ec 00 00 00	 push	 236			; 000000ecH
  00037	52		 push	 edx
  00038	8d 85 3a f1 ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp+14]
  0003e	50		 push	 eax
  0003f	c7 85 2c f1 ff
	ff c2 0e ce 11	 mov	 DWORD PTR _pMsg$[ebp], 298716866 ; 11ce0ec2H
  00049	66 89 8d 38 f1
	ff ff		 mov	 WORD PTR _pMsg$[ebp+12], cx
  00050	e8 00 00 00 00	 call	 ?ItemByteConvert16@@YAXPAEQAVCItem@@H@Z ; ItemByteConvert16
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2732 : 
; 2733 : 	cDBSMng.Send((char*)&pMsg, sizeof(pMsg));

  00058	68 ce 0e 00 00	 push	 3790			; 00000eceH
  0005d	8d 8d 2c f1 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00063	51		 push	 ecx
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00069	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 2734 : }

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00071	33 cd		 xor	 ecx, ebp
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?GDUserItemSave@@YAXPAUOBJECTSTRUCT@@@Z ENDP		; GDUserItemSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDSetWarehouseMoney@@YAXH@Z			; GDSetWarehouseMoney
; Function compile flags: /Ogtp
;	COMDAT ?GDSetWarehouseMoney@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GDSetWarehouseMoney@@YAXH@Z PROC			; GDSetWarehouseMoney, COMDAT

; 2746 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 2747 : 	SDHP_WAREHOUSEMONEY_SAVE pMsg;
; 2748 : 
; 2749 : 	memcpy(pMsg.AccountID, gObj[aIndex].AccountID, sizeof(pMsg.AccountID));

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2750 : 	pMsg.aIndex = aIndex;
; 2751 : 	pMsg.h.c = 0xC1;
; 2752 : 	pMsg.h.headcode = 0x12;
; 2753 : 	pMsg.h.size = sizeof(pMsg);
; 2754 : 	pMsg.Money = gObj[aIndex].WarehouseMoney;
; 2755 : 
; 2756 : 	cDBSMng.Send((char*)&pMsg, sizeof(pMsg));

  00021	6a 14		 push	 20			; 00000014H
  00023	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00026	89 55 eb	 mov	 DWORD PTR _pMsg$[ebp+3], edx
  00029	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  0002c	89 55 ef	 mov	 DWORD PTR _pMsg$[ebp+7], edx
  0002f	66 8b 50 74	 mov	 dx, WORD PTR [eax+116]
  00033	66 89 4d f6	 mov	 WORD PTR _pMsg$[ebp+14], cx
  00037	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003a	66 89 55 f3	 mov	 WORD PTR _pMsg$[ebp+11], dx
  0003e	c6 45 e8 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00042	66 c7 45 e9 14
	12		 mov	 WORD PTR _pMsg$[ebp+1], 4628 ; 00001214H
  00048	8b 80 6c 0e 00
	00		 mov	 eax, DWORD PTR [eax+3692]
  0004e	51		 push	 ecx
  0004f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00054	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00057	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 2757 : }

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	33 cd		 xor	 ecx, ebp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?GDSetWarehouseMoney@@YAXH@Z ENDP			; GDSetWarehouseMoney
_TEXT	ENDS
PUBLIC	?GDGameServerInfoSave@@YAXXZ			; GDGameServerInfoSave
; Function compile flags: /Ogtp
;	COMDAT ?GDGameServerInfoSave@@YAXXZ
_TEXT	SEGMENT
?GDGameServerInfoSave@@YAXXZ PROC			; GDGameServerInfoSave, COMDAT

; 2762 : 	return;
; 2763 : }

  00000	c3		 ret	 0
?GDGameServerInfoSave@@YAXXZ ENDP			; GDGameServerInfoSave
_TEXT	ENDS
PUBLIC	??_C@_0GG@PDKAJKAJ@Monster?5Item?5Drop?5Request?5?$FL?$CFs?$FN?5?$FL@ ; `string'
PUBLIC	??_C@_0CP@NAJCODAF@?$FLItemSerialCreateSend?$FN?5No?5Name?5I@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z	; ItemSerialCreateSend
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?ItemGetDurability@@YAHHHHH@Z:PROC		; ItemGetDurability
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z:PROC ; CItemDropManager::BlockItemDrop
EXTRN	?gItemDropManager@@3VCItemDropManager@@A:BYTE	; gItemDropManager
;	COMDAT ??_C@_0GG@PDKAJKAJ@Monster?5Item?5Drop?5Request?5?$FL?$CFs?$FN?5?$FL@
CONST	SEGMENT
??_C@_0GG@PDKAJKAJ@Monster?5Item?5Drop?5Request?5?$FL?$CFs?$FN?5?$FL@ DB 'M'
	DB	'onster Item Drop Request [%s] [%d][%d][%d] : [%s][%d][%d][%d]'
	DB	'[%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NAJCODAF@?$FLItemSerialCreateSend?$FN?5No?5Name?5I@
CONST	SEGMENT
??_C@_0CP@NAJCODAF@?$FLItemSerialCreateSend?$FN?5No?5Name?5I@ DB '[ItemSe'
	DB	'rialCreateSend] No Name Item Drop Block', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 32
_NewOption$228787 = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_MapNumber$ = 12					; size = 1
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_type$ = 24						; size = 4
_level$ = 28						; size = 1
_dur$ = 32						; size = 1
_Op1$ = 36						; size = 1
_Op2$ = 40						; size = 1
_Op3$ = 44						; size = 1
_LootIndex$ = 48					; size = 4
_NewOption$ = 52					; size = 1
_SetOption$ = 56					; size = 1
?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z PROC		; ItemSerialCreateSend, COMDAT

; 2790 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 2791 : 	if(MapNumber != 235 && MapNumber != 236)

  00011	8a 5d 0c	 mov	 bl, BYTE PTR _MapNumber$[ebp]
  00014	56		 push	 esi
  00015	8b 75 18	 mov	 esi, DWORD PTR _type$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001c	80 fb eb	 cmp	 bl, 235			; 000000ebH
  0001f	74 1d		 je	 SHORT $LN17@ItemSerial
  00021	80 fb ec	 cmp	 bl, 236			; 000000ecH
  00024	74 18		 je	 SHORT $LN17@ItemSerial

; 2792 : 	{
; 2793 : 		if(!gItemDropManager.BlockItemDrop(aIndex,type,MapNumber)) return;

  00026	0f b6 c3	 movzx	 eax, bl
  00029	50		 push	 eax
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gItemDropManager@@3VCItemDropManager@@A ; gItemDropManager
  00031	e8 00 00 00 00	 call	 ?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z ; CItemDropManager::BlockItemDrop
  00036	84 c0		 test	 al, al
  00038	0f 84 a6 01 00
	00		 je	 $LN19@ItemSerial
$LN17@ItemSerial:

; 2794 : 	}
; 2795 : #ifdef DRYNEA_31_10
; 2796 : 	if(g_ZtLicense.CheckUser(eZtUB::drynea))

  0003e	6a 01		 push	 1
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00045	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0004a	84 c0		 test	 al, al
  0004c	74 11		 je	 SHORT $LN14@ItemSerial

; 2797 : 	{
; 2798 : 		if(MapNumber == 41)

  0004e	80 fb 29	 cmp	 bl, 41			; 00000029H
  00051	75 0c		 jne	 SHORT $LN14@ItemSerial

; 2799 : 		{
; 2800 : 			if(type != ITEMGET(14,209))

  00053	81 fe d1 1c 00
	00		 cmp	 esi, 7377		; 00001cd1H
  00059	0f 85 85 01 00
	00		 jne	 $LN19@ItemSerial
$LN14@ItemSerial:

; 2801 : 			{
; 2802 : 				return;
; 2803 : 			}
; 2804 : 		}
; 2805 : 	}
; 2806 : 
; 2807 : 	
; 2808 : #endif
; 2809 : 
; 2810 : #if(ITEM_NO_NAME_DROP_FIX==TRUE)
; 2811 : 	if(type == -1)

  0005f	83 fe ff	 cmp	 esi, -1
  00062	75 1f		 jne	 SHORT $LN13@ItemSerial

; 2812 : 	{
; 2813 : 		LogAddTD("[ItemSerialCreateSend] No Name Item Drop Block");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@NAJCODAF@?$FLItemSerialCreateSend?$FN?5No?5Name?5I@
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006f	83 c4 04	 add	 esp, 4
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 2890 : }

  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN13@ItemSerial:

; 2814 : 		return;
; 2815 : 	}
; 2816 : #endif
; 2817 : 
; 2818 : 	SDHP_ITEMCREATE  pMsg;
; 2819 : 
; 2820 : 	pMsg.h.c = 0xC1;
; 2821 : 	pMsg.h.headcode = 0x52;
; 2822 : 	pMsg.h.size = sizeof(pMsg);
; 2823 : 	pMsg.MapNumber = MapNumber;
; 2824 : 	pMsg.x = x;

  00083	8a 4d 10	 mov	 cl, BYTE PTR _x$[ebp]

; 2825 : 	pMsg.y = y;
; 2826 : 	pMsg.Type = type;
; 2827 : 	pMsg.Level = level;
; 2828 : 
; 2829 : 	if (dur == 0 )

  00086	8a 45 20	 mov	 al, BYTE PTR _dur$[ebp]
  00089	8a 55 14	 mov	 dl, BYTE PTR _y$[ebp]
  0008c	88 4d d7	 mov	 BYTE PTR _pMsg$[ebp+3], cl
  0008f	8a 4d 1c	 mov	 cl, BYTE PTR _level$[ebp]
  00092	c6 45 d4 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00096	66 c7 45 d5 20
	52		 mov	 WORD PTR _pMsg$[ebp+1], 21024 ; 00005220H
  0009c	88 5d d9	 mov	 BYTE PTR _pMsg$[ebp+5], bl
  0009f	88 55 d8	 mov	 BYTE PTR _pMsg$[ebp+4], dl
  000a2	66 89 75 da	 mov	 WORD PTR _pMsg$[ebp+6], si
  000a6	88 4d dc	 mov	 BYTE PTR _pMsg$[ebp+8], cl
  000a9	84 c0		 test	 al, al
  000ab	75 17		 jne	 SHORT $LN12@ItemSerial

; 2830 : 	{
; 2831 : 		dur = ItemGetDurability(type, level, NewOption, SetOption);

  000ad	0f b6 45 38	 movzx	 eax, BYTE PTR _SetOption$[ebp]
  000b1	0f b6 55 34	 movzx	 edx, BYTE PTR _NewOption$[ebp]
  000b5	50		 push	 eax
  000b6	0f b6 c1	 movzx	 eax, cl
  000b9	52		 push	 edx
  000ba	50		 push	 eax
  000bb	56		 push	 esi
  000bc	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  000c1	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@ItemSerial:

; 2832 : 	}
; 2833 : 
; 2834 : 	pMsg.Dur = dur;
; 2835 : 	pMsg.Op1 = Op1;

  000c4	8a 4d 24	 mov	 cl, BYTE PTR _Op1$[ebp]

; 2836 : 	pMsg.Op2 = Op2;

  000c7	8a 55 28	 mov	 dl, BYTE PTR _Op2$[ebp]
  000ca	88 45 dd	 mov	 BYTE PTR _pMsg$[ebp+9], al

; 2837 : 	pMsg.Op3 = Op3;

  000cd	8a 45 2c	 mov	 al, BYTE PTR _Op3$[ebp]
  000d0	88 4d de	 mov	 BYTE PTR _pMsg$[ebp+10], cl

; 2838 : 	pMsg.NewOption = NewOption;

  000d3	8a 4d 34	 mov	 cl, BYTE PTR _NewOption$[ebp]
  000d6	88 55 df	 mov	 BYTE PTR _pMsg$[ebp+11], dl

; 2839 : 	pMsg.aIndex = aIndex;
; 2840 : 	pMsg.lootindex = LootIndex;
; 2841 : 	pMsg.SetOption = SetOption;

  000d9	8a 55 38	 mov	 dl, BYTE PTR _SetOption$[ebp]
  000dc	88 45 e0	 mov	 BYTE PTR _pMsg$[ebp+12], al
  000df	8b 45 30	 mov	 eax, DWORD PTR _LootIndex$[ebp]
  000e2	88 4d e1	 mov	 BYTE PTR _pMsg$[ebp+13], cl
  000e5	89 7d e4	 mov	 DWORD PTR _pMsg$[ebp+16], edi
  000e8	66 89 45 e8	 mov	 WORD PTR _pMsg$[ebp+20], ax
  000ec	88 55 ea	 mov	 BYTE PTR _pMsg$[ebp+22], dl

; 2842 : 
; 2843 : #ifdef PERIOD
; 2844 : 	if( MapNumber == 236 )

  000ef	80 fb ec	 cmp	 bl, 236			; 000000ecH
  000f2	75 03		 jne	 SHORT $LN11@ItemSerial

; 2845 : 	{
; 2846 : 		pMsg.lDuration = LootIndex;

  000f4	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+24], eax
$LN11@ItemSerial:

; 2847 : 	}
; 2848 : #endif
; 2849 : 
; 2850 : 	if ( OBJMAX_RANGE(aIndex) != FALSE  && gObj[aIndex].Type != OBJ_USER )

  000f7	85 ff		 test	 edi, edi
  000f9	0f 88 d2 00 00
	00		 js	 $LN10@ItemSerial
  000ff	33 c0		 xor	 eax, eax
  00101	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00107	0f 9e c0	 setle	 al
  0010a	85 c0		 test	 eax, eax
  0010c	0f 84 bf 00 00
	00		 je	 $LN10@ItemSerial
  00112	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00118	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011e	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00123	0f 84 a8 00 00
	00		 je	 $LN10@ItemSerial

; 2851 : 	{
; 2852 : 		BYTE NewOption[MAX_EXOPTION_SIZE];
; 2853 : 
; 2854 : 		for ( int i=0;i<MAX_EXOPTION_SIZE;i++)
; 2855 : 		{
; 2856 : 			NewOption[i] = 0;

  00129	33 c0		 xor	 eax, eax
  0012b	89 45 f4	 mov	 DWORD PTR _NewOption$228787[ebp], eax
  0012e	89 45 f8	 mov	 DWORD PTR _NewOption$228787[ebp+4], eax

; 2857 : 		}
; 2858 : 
; 2859 : 		if ( (pMsg.NewOption & 0x20) != 0 )

  00131	f6 c1 20	 test	 cl, 32			; 00000020H
  00134	74 04		 je	 SHORT $LN25@ItemSerial

; 2860 : 		{
; 2861 : 			NewOption[0] = TRUE;

  00136	c6 45 f4 01	 mov	 BYTE PTR _NewOption$228787[ebp], 1
$LN25@ItemSerial:

; 2862 : 		}
; 2863 : 		if ( (pMsg.NewOption & 0x10) != 0 )

  0013a	f6 c1 10	 test	 cl, 16			; 00000010H
  0013d	74 04		 je	 SHORT $LN26@ItemSerial

; 2864 : 		{
; 2865 : 			NewOption[1] = TRUE;

  0013f	c6 45 f5 01	 mov	 BYTE PTR _NewOption$228787[ebp+1], 1
$LN26@ItemSerial:

; 2866 : 		}
; 2867 : 
; 2868 : 		if ( (pMsg.NewOption & 0x8) != 0 )

  00143	f6 c1 08	 test	 cl, 8
  00146	74 04		 je	 SHORT $LN27@ItemSerial

; 2869 : 		{
; 2870 : 			NewOption[2] = TRUE;

  00148	c6 45 f6 01	 mov	 BYTE PTR _NewOption$228787[ebp+2], 1
$LN27@ItemSerial:

; 2871 : 		}
; 2872 : 		if ( (pMsg.NewOption & 0x4) != 0 )

  0014c	f6 c1 04	 test	 cl, 4
  0014f	74 04		 je	 SHORT $LN28@ItemSerial

; 2873 : 		{
; 2874 : 			NewOption[3] = TRUE;

  00151	c6 45 f7 01	 mov	 BYTE PTR _NewOption$228787[ebp+3], 1
$LN28@ItemSerial:

; 2875 : 		}
; 2876 : 
; 2877 : 		if ( (pMsg.NewOption & 0x2) != 0 )

  00155	f6 c1 02	 test	 cl, 2

; 2878 : 		{
; 2879 : 			NewOption[4] = TRUE;

  00158	b1 01		 mov	 cl, 1
  0015a	75 03		 jne	 SHORT $LN2@ItemSerial
  0015c	8a 4d f8	 mov	 cl, BYTE PTR _NewOption$228787[ebp+4]
$LN2@ItemSerial:

; 2880 : 		}
; 2881 : 		if ( (pMsg.NewOption & 0x1) != 0 )

  0015f	f6 45 34 01	 test	 BYTE PTR _NewOption$[ebp], 1

; 2882 : 		{
; 2883 : 			NewOption[5] = TRUE;

  00163	b0 01		 mov	 al, 1
  00165	75 03		 jne	 SHORT $LN1@ItemSerial
  00167	8a 45 f9	 mov	 al, BYTE PTR _NewOption$228787[ebp+5]
$LN1@ItemSerial:

; 2884 : 		}
; 2885 : 
; 2886 : 		LogAddTD("Monster Item Drop Request [%s] [%d][%d][%d] : [%s][%d][%d][%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d]", gObj[aIndex].Name, MapNumber, pMsg.x, pMsg.y, ItemAttribute[pMsg.Type].Name, pMsg.Level, pMsg.Op1,pMsg.Op2, pMsg.Op3, NewOption[0], NewOption[1], NewOption[2], NewOption[3], NewOption[4],	NewOption[5], NewOption[6], pMsg.SetOption);

  0016a	0f b6 d2	 movzx	 edx, dl
  0016d	52		 push	 edx
  0016e	0f b6 55 fa	 movzx	 edx, BYTE PTR _NewOption$228787[ebp+6]
  00172	52		 push	 edx
  00173	0f b6 55 f7	 movzx	 edx, BYTE PTR _NewOption$228787[ebp+3]
  00177	0f b6 c0	 movzx	 eax, al
  0017a	50		 push	 eax
  0017b	0f b6 45 f6	 movzx	 eax, BYTE PTR _NewOption$228787[ebp+2]
  0017f	0f b6 c9	 movzx	 ecx, cl
  00182	51		 push	 ecx
  00183	0f b6 4d f5	 movzx	 ecx, BYTE PTR _NewOption$228787[ebp+1]
  00187	52		 push	 edx
  00188	0f b6 55 f4	 movzx	 edx, BYTE PTR _NewOption$228787[ebp]
  0018c	50		 push	 eax
  0018d	0f b6 45 2c	 movzx	 eax, BYTE PTR _Op3$[ebp]
  00191	51		 push	 ecx
  00192	0f b6 4d 28	 movzx	 ecx, BYTE PTR _Op2$[ebp]
  00196	52		 push	 edx
  00197	0f b6 55 24	 movzx	 edx, BYTE PTR _Op1$[ebp]
  0019b	50		 push	 eax
  0019c	0f b6 45 dc	 movzx	 eax, BYTE PTR _pMsg$[ebp+8]
  001a0	51		 push	 ecx
  001a1	0f bf 4d da	 movsx	 ecx, WORD PTR _pMsg$[ebp+6]
  001a5	6b c9 70	 imul	 ecx, 112		; 00000070H
  001a8	52		 push	 edx
  001a9	0f b6 55 d8	 movzx	 edx, BYTE PTR _pMsg$[ebp+4]
  001ad	50		 push	 eax
  001ae	0f b6 45 d7	 movzx	 eax, BYTE PTR _pMsg$[ebp+3]
  001b2	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  001b8	51		 push	 ecx
  001b9	52		 push	 edx
  001ba	50		 push	 eax
  001bb	0f b6 cb	 movzx	 ecx, bl
  001be	51		 push	 ecx
  001bf	83 c7 77	 add	 edi, 119		; 00000077H
  001c2	57		 push	 edi
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@PDKAJKAJ@Monster?5Item?5Drop?5Request?5?$FL?$CFs?$FN?5?$FL@
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001ce	83 c4 48	 add	 esp, 72			; 00000048H
$LN10@ItemSerial:

; 2887 : 	}
; 2888 : 
; 2889 : 	cDBSMng.Send( (char*)&pMsg, pMsg.h.size);

  001d1	0f b6 55 d5	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  001d5	52		 push	 edx
  001d6	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001d9	50		 push	 eax
  001da	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001df	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN19@ItemSerial:

; 2890 : }

  001e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5b		 pop	 ebx
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c3		 ret	 0
?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ENDP		; ItemSerialCreateSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z	; PetItemSerialCreateSend
; Function compile flags: /Ogtp
;	COMDAT ?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_MapNumber$ = 12					; size = 1
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_type$ = 24						; size = 4
_level$ = 28						; size = 1
_dur$ = 32						; size = 1
_Op1$ = 36						; size = 1
_Op2$ = 40						; size = 1
_Op3$ = 44						; size = 1
_LootIndex$ = 48					; size = 4
_NewOption$ = 52					; size = 1
_SetOption$ = 56					; size = 1
?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z PROC	; PetItemSerialCreateSend, COMDAT

; 2894 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2895 : 	SDHP_ITEMCREATE  pMsg;
; 2896 : 
; 2897 : 	pMsg.h.c = 0xC1;
; 2898 : 	pMsg.h.headcode = 0x55;
; 2899 : 	pMsg.h.size = sizeof(pMsg);
; 2900 : 	pMsg.MapNumber = MapNumber;

  00010	8a 45 0c	 mov	 al, BYTE PTR _MapNumber$[ebp]

; 2901 : 	pMsg.x = x;

  00013	8a 4d 10	 mov	 cl, BYTE PTR _x$[ebp]

; 2902 : 	pMsg.y = y;

  00016	8a 55 14	 mov	 dl, BYTE PTR _y$[ebp]
  00019	88 45 e1	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 2903 : 	pMsg.Type = type;
; 2904 : 	pMsg.Level = level;
; 2905 : 
; 2906 : 	if (dur == 0 )

  0001c	8a 45 20	 mov	 al, BYTE PTR _dur$[ebp]
  0001f	88 4d df	 mov	 BYTE PTR _pMsg$[ebp+3], cl
  00022	8b 4d 18	 mov	 ecx, DWORD PTR _type$[ebp]
  00025	88 55 e0	 mov	 BYTE PTR _pMsg$[ebp+4], dl
  00028	8a 55 1c	 mov	 dl, BYTE PTR _level$[ebp]
  0002b	53		 push	 ebx
  0002c	8a 5d 38	 mov	 bl, BYTE PTR _SetOption$[ebp]
  0002f	c6 45 dc c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00033	66 c7 45 dd 20
	55		 mov	 WORD PTR _pMsg$[ebp+1], 21792 ; 00005520H
  00039	66 89 4d e2	 mov	 WORD PTR _pMsg$[ebp+6], cx
  0003d	88 55 e4	 mov	 BYTE PTR _pMsg$[ebp+8], dl
  00040	84 c0		 test	 al, al
  00042	75 16		 jne	 SHORT $LN1@PetItemSer

; 2907 : 	{
; 2908 : 		dur = ItemGetDurability(type, level, NewOption, SetOption);

  00044	0f b6 c3	 movzx	 eax, bl
  00047	50		 push	 eax
  00048	0f b6 45 34	 movzx	 eax, BYTE PTR _NewOption$[ebp]
  0004c	0f b6 d2	 movzx	 edx, dl
  0004f	50		 push	 eax
  00050	52		 push	 edx
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  00057	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@PetItemSer:

; 2909 : 	}
; 2910 : 
; 2911 : 	pMsg.Dur = dur;
; 2912 : 	pMsg.Op1 = Op1;
; 2913 : 	pMsg.Op2 = Op2;

  0005a	8a 4d 28	 mov	 cl, BYTE PTR _Op2$[ebp]

; 2914 : 	pMsg.Op3 = Op3;

  0005d	8a 55 2c	 mov	 dl, BYTE PTR _Op3$[ebp]
  00060	88 45 e5	 mov	 BYTE PTR _pMsg$[ebp+9], al
  00063	8a 45 24	 mov	 al, BYTE PTR _Op1$[ebp]
  00066	88 45 e6	 mov	 BYTE PTR _pMsg$[ebp+10], al

; 2915 : 	pMsg.NewOption = NewOption;

  00069	8a 45 34	 mov	 al, BYTE PTR _NewOption$[ebp]
  0006c	88 4d e7	 mov	 BYTE PTR _pMsg$[ebp+11], cl

; 2916 : 	pMsg.aIndex = aIndex;

  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00072	88 45 e9	 mov	 BYTE PTR _pMsg$[ebp+13], al

; 2917 : 	pMsg.lootindex = LootIndex;
; 2918 : 	pMsg.SetOption = SetOption;
; 2919 : 
; 2920 : 	cDBSMng.Send( (char*)&pMsg, pMsg.h.size);

  00075	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00079	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+16], ecx
  0007c	50		 push	 eax
  0007d	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00080	88 55 e8	 mov	 BYTE PTR _pMsg$[ebp+12], dl
  00083	66 8b 55 30	 mov	 dx, WORD PTR _LootIndex$[ebp]
  00087	51		 push	 ecx
  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0008d	66 89 55 f0	 mov	 WORD PTR _pMsg$[ebp+20], dx
  00091	88 5d f2	 mov	 BYTE PTR _pMsg$[ebp+22], bl
  00094	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 2921 : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	5b		 pop	 ebx
  0009f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ENDP	; PetItemSerialCreateSend
_TEXT	ENDS
PUBLIC	??_C@_0GA@MJMGDDA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Item?5Create?5Item?3@ ; `string'
PUBLIC	??_C@_0BN@BDLDNMBN@error?9L2?3?5ChaosBox?5not?5used?4?$AA@ ; `string'
PUBLIC	??_C@_0CD@JBKACADO@error?9L2?3?5DarkTrainerBox?5not?5use@ ; `string'
PUBLIC	??_C@_0BC@OFCHNMFP@error?9L3?5?$FL?$CFs?$FN?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	??_C@_0GD@IBNDEANJ@Monster?5Item?5Drop?5?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?5?3@ ; `string'
PUBLIC	??_C@_0IG@JDKHCHPG@?$FLSocketItem?$FN?5Drop?5Socket?5Item?5?$CI?5@ ; `string'
PUBLIC	??_C@_0FC@JMDFINCJ@?$FLLuckyCoin?5Trade?$FN?5Error?5?3?5Failed@ ; `string'
PUBLIC	??_C@_0EL@KDEJKEEJ@?$FLCashShop?$FN?5Error?5?3?5Failed?5To?5Ins@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ItemSerialCreateRecv@@YAXPAUSDHP_ITEMCREATERECV@@@Z ; ItemSerialCreateRecv
EXTRN	?GetName@CItem@@QAEPADXZ:PROC			; CItem::GetName
EXTRN	?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z:PROC	; ItemIsBufExOption
EXTRN	?gObjChaosItemSet@@YAXHHE@Z:PROC		; gObjChaosItemSet
EXTRN	?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z:PROC ; gObjChaosBoxInsertItemPos
EXTRN	?ChaosBoxInit@CMixSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMixSystem::ChaosBoxInit
EXTRN	?g_MixSystem@@3VCMixSystem@@A:BYTE		; g_MixSystem
EXTRN	?SockeetItem@cGrandHero@@QAE_NH@Z:PROC		; cGrandHero::SockeetItem
EXTRN	?GrandHero@@3VcGrandHero@@A:BYTE		; GrandHero
EXTRN	?gObjIsConnectedGP@@YAHH@Z:PROC			; gObjIsConnectedGP
EXTRN	?GetBridgeIndex@CBloodCastle@@QAEHH@Z:PROC	; CBloodCastle::GetBridgeIndex
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z:PROC ; MapClass::MonsterItemDrop
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?GetRandomSlotCount@CSocketOption@@QAEEH@Z:PROC	; CSocketOption::GetRandomSlotCount
EXTRN	?GetItemMapNumberSecond@CBloodCastle@@QAEHH@Z:PROC ; CBloodCastle::GetItemMapNumberSecond
EXTRN	?GetItemMapNumberFirst@CBloodCastle@@QAEHH@Z:PROC ; CBloodCastle::GetItemMapNumberFirst
EXTRN	?g_BloodCastle@@3VCBloodCastle@@A:BYTE		; g_BloodCastle
EXTRN	?GCSendLuckyCoinResult@@YAXHE@Z:PROC		; GCSendLuckyCoinResult
EXTRN	?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GKK@Z:PROC ; CPeriodItemZt::SetPeriodItemInfo
EXTRN	?g_PeriodItemZt@@3VCPeriodItemZt@@A:BYTE	; g_PeriodItemZt
EXTRN	?GCInventoryItemOneSend@@YAXHH@Z:PROC		; GCInventoryItemOneSend
EXTRN	?gObjInventoryInsertItem@@YAEHVCItem@@@Z:PROC	; gObjInventoryInsertItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z:PROC	; CItem::Convert
EXTRN	?CheckItemType@CSocketOption@@QAEEH@Z:PROC	; CSocketOption::CheckItemType
EXTRN	?g_SocketOption@@3VCSocketOption@@A:BYTE	; g_SocketOption
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0GA@MJMGDDA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Item?5Create?5Item?3@
CONST	SEGMENT
??_C@_0GA@MJMGDDA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Item?5Create?5Item?3@ DB '['
	DB	'%s][%s] CBMix Item Create Item:%s [%u][%d] [%d][%d][%d][%d] E'
	DB	'x:[%d,%d,%d,%d,%d,%d,%d] Set:[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BDLDNMBN@error?9L2?3?5ChaosBox?5not?5used?4?$AA@
CONST	SEGMENT
??_C@_0BN@BDLDNMBN@error?9L2?3?5ChaosBox?5not?5used?4?$AA@ DB 'error-L2: '
	DB	'ChaosBox not used.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JBKACADO@error?9L2?3?5DarkTrainerBox?5not?5use@
CONST	SEGMENT
??_C@_0CD@JBKACADO@error?9L2?3?5DarkTrainerBox?5not?5use@ DB 'error-L2: D'
	DB	'arkTrainerBox not used.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OFCHNMFP@error?9L3?5?$FL?$CFs?$FN?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_0BC@OFCHNMFP@error?9L3?5?$FL?$CFs?$FN?$FL?$CFd?$FN?$AA@ DB 'error-L'
	DB	'3 [%s][%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@IBNDEANJ@Monster?5Item?5Drop?5?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?5?3@
CONST	SEGMENT
??_C@_0GD@IBNDEANJ@Monster?5Item?5Drop?5?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?5?3@ DB 'M'
	DB	'onster Item Drop [%d][%d][%d] : serial:%u [%s][%d][%d][%d][%d'
	DB	'] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IG@JDKHCHPG@?$FLSocketItem?$FN?5Drop?5Socket?5Item?5?$CI?5@
CONST	SEGMENT
??_C@_0IG@JDKHCHPG@?$FLSocketItem?$FN?5Drop?5Socket?5Item?5?$CI?5@ DB '[S'
	DB	'ocketItem] Drop Socket Item ( Socket Slot : %d ) - %s, [%d,%d'
	DB	',%d,%d], Serial : %u, ItemCode : %d, Level : %d, MapNumber : '
	DB	'%d(%d/%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@JMDFINCJ@?$FLLuckyCoin?5Trade?$FN?5Error?5?3?5Failed@
CONST	SEGMENT
??_C@_0FC@JMDFINCJ@?$FLLuckyCoin?5Trade?$FN?5Error?5?3?5Failed@ DB '[Luck'
	DB	'yCoin Trade] Error : Failed To Insert Item Type:%d, TypeIndex'
	DB	':%d to [%s][%s]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@KDEJKEEJ@?$FLCashShop?$FN?5Error?5?3?5Failed?5To?5Ins@
CONST	SEGMENT
??_C@_0EL@KDEJKEEJ@?$FLCashShop?$FN?5Error?5?3?5Failed?5To?5Ins@ DB '[Cas'
	DB	'hShop] Error : Failed To Insert Item Type:%d, TypeIndex:%d to'
	DB	' [%s][%s]', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ItemSerialCreateRecv@@YAXPAUSDHP_ITEMCREATERECV@@@Z
_TEXT	SEGMENT
_btItemPos$228901 = -269				; size = 1
tv1519 = -268						; size = 4
_iItemType$228913 = -268				; size = 4
_iItemType$228899 = -268				; size = 4
_iItemType$228882 = -268				; size = 4
_mapnumber$ = -268					; size = 4
_pCreateItem$228912 = -264				; size = 212
_pCreateItem$228898 = -264				; size = 212
_pCreateItem$228881 = -264				; size = 212
_NewItem$228848 = -264					; size = 212
_pMsg$228843 = -52					; size = 16
tv1415 = -36						; size = 4
_SocketOption$228925 = -36				; size = 5
_CS_Item$228885 = -36					; size = 5
_ExOption$228876 = -28					; size = 8
tv1571 = -24						; size = 4
tv1427 = -24						; size = 4
_lootindex$ = -24					; size = 4
_NewOption$228948 = -20					; size = 8
tv1723 = -16						; size = 4
tv1682 = -16						; size = 4
tv1649 = -16						; size = 4
_iRetMapNumber$228921 = -16				; size = 4
_lpObj$ = -16						; size = 4
tv1614 = -12						; size = 4
tv1572 = -12						; size = 4
tv1570 = -12						; size = 4
tv1569 = -12						; size = 4
_iItemCount$228940 = -12				; size = 4
_iItemIndex$228914 = -12				; size = 4
_iItemIndex$228900 = -12				; size = 4
_iItemIndex$228883 = -12				; size = 4
_Sockeet$228872 = -12					; size = 5
_Sockeet$228869 = -12					; size = 5
_Sockeet$228866 = -12					; size = 5
_Sockeet$228863 = -12					; size = 5
_Sockeet$228860 = -12					; size = 5
_Sockeet$228854 = -12					; size = 5
_SocketOptionIndex$228926 = -11				; size = 1
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?ItemSerialCreateRecv@@YAXPAUSDHP_ITEMCREATERECV@@@Z PROC ; ItemSerialCreateRecv, COMDAT

; 2925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpMsg$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi

; 2926 : #if(DANGER_FIX==TRUE)
; 2927 : 	if(!lpMsg)

  00019	85 db		 test	 ebx, ebx
  0001b	0f 84 ff 0b 00
	00		 je	 $LN28@ItemSerial@2

; 2928 : 	{
; 2929 : 		return;
; 2930 : 	}
; 2931 : #endif
; 2932 : 
; 2933 : 	LPOBJ lpObj;
; 2934 : 	int mapnumber = lpMsg->MapNumber;

  00021	8a 43 05	 mov	 al, BYTE PTR [ebx+5]

; 2935 : 	int aIndex = lpMsg->aIndex;
; 2936 : 	int lootindex = lpMsg->lootindex;

  00024	0f bf 4b 18	 movsx	 ecx, WORD PTR [ebx+24]
  00028	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002b	0f b6 f0	 movzx	 esi, al
  0002e	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _mapnumber$[ebp], esi
  00034	89 7d dc	 mov	 DWORD PTR tv1415[ebp], edi
  00037	89 4d e8	 mov	 DWORD PTR _lootindex$[ebp], ecx

; 2937 : 
; 2938 : 	if ( mapnumber != (BYTE)-1 )

  0003a	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00040	74 17		 je	 SHORT $LN82@ItemSerial@2

; 2939 : 	{
; 2940 : 		if ( mapnumber < 0 || (mapnumber > MAX_NUMBER_MAP-1 && mapnumber < 235) )

  00042	85 f6		 test	 esi, esi
  00044	0f 88 d6 0b 00
	00		 js	 $LN28@ItemSerial@2
  0004a	8d 56 ad	 lea	 edx, DWORD PTR [esi-83]
  0004d	81 fa 97 00 00
	00		 cmp	 edx, 151		; 00000097H

; 2941 : 		{
; 2942 : 			return;

  00053	0f 86 c7 0b 00
	00		 jbe	 $LN28@ItemSerial@2
$LN82@ItemSerial@2:

; 2943 : 		}
; 2944 : 	}
; 2945 : 
; 2946 : 	if ( lpMsg->MapNumber == (BYTE)-1 || lpMsg->MapNumber == (BYTE)-2 )

  00059	3c ff		 cmp	 al, 255			; 000000ffH
  0005b	0f 84 ac 07 00
	00		 je	 $LN79@ItemSerial@2
  00061	3c fe		 cmp	 al, 254			; 000000feH
  00063	0f 84 a4 07 00
	00		 je	 $LN79@ItemSerial@2

; 3075 : 		return;
; 3076 : 	}
; 3077 : 
; 3078 : 	if ( lpMsg->MapNumber == 235 )

  00069	3c eb		 cmp	 al, 235			; 000000ebH
  0006b	0f 85 90 01 00
	00		 jne	 $LN51@ItemSerial@2

; 3079 : 	{
; 3080 : 		//if ( gObj[lpMsg->aIndex].Connected > PLAYER_CONNECTED )
; 3081 : 		//{
; 3082 : 		//	int iType  = ITEM_GET_TYPE(lpMsg->Type);
; 3083 : 		//	int iTypeIndex = ITEM_GET_INDEX(lpMsg->Type);
; 3084 : 
; 3085 : 		//	BYTE iItemPos = gObjInventoryInsertItem(&gObj[lpMsg->aIndex], iType, iTypeIndex, lpMsg->Level, lpMsg->m_Number, lpMsg->Dur);
; 3086 : 
; 3087 : 		//	if ( iItemPos == (BYTE)-1 )
; 3088 : 		//	{
; 3089 : 		//		LogAddTD("[Mu_2Anv_Event] Error : Failed To Gift Item Type:%d, TypeIndex:%d to [%s][%s]", iType, iTypeIndex, gObj[lpMsg->aIndex].AccountID, gObj[lpMsg->aIndex].Name);
; 3090 : 		//	}
; 3091 : 		//	else
; 3092 : 		//	{
; 3093 : 		//		::GCInventoryItemOneSend(lpMsg->aIndex, iItemPos);
; 3094 : 		//	}
; 3095 : 		//}
; 3096 : 
; 3097 : 		if ( gObj[lpMsg->aIndex].Connected > PLAYER_CONNECTED )

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00076	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0007c	83 7c 07 04 01	 cmp	 DWORD PTR [edi+eax+4], 1
  00081	0f 8e 99 0b 00
	00		 jle	 $LN28@ItemSerial@2

; 3098 : 		{
; 3099 : 			CItem pCreateItem;

  00087	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pCreateItem$228881[ebp]
  0008d	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 3100 : 			int iItemType = ITEM_GET_TYPE(lpMsg->Type);

  00092	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  00096	8b c1		 mov	 eax, ecx
  00098	99		 cdq
  00099	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  0009f	03 c2		 add	 eax, edx
  000a1	c1 f8 09	 sar	 eax, 9

; 3101 : 			int iItemIndex	= ITEM_GET_INDEX(lpMsg->Type);

  000a4	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  000aa	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iItemType$228882[ebp], eax
  000b0	79 08		 jns	 SHORT $LN103@ItemSerial@2
  000b2	49		 dec	 ecx
  000b3	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  000b9	41		 inc	 ecx
$LN103@ItemSerial@2:

; 3102 : #ifdef PERIOD
; 3103 : 			//if(lpMsg->x == 1 && lpMsg->y == 1)	//Credit   Himik bla
; 3104 : 			//{
; 3105 : 			//	pCreateItem.m_Number = 1;//lpMsg->m_Number;
; 3106 : 			//}
; 3107 : 			//else if(lpMsg->x == 2 && lpMsg->y == 2)
; 3108 : 			//{
; 3109 : 			//	pCreateItem.m_Number = 2;//lpMsg->m_Number;
; 3110 : 			//}
; 3111 : 			//else
; 3112 : 			{
; 3113 : 				pCreateItem.m_Number = lpMsg->m_Number;

  000ba	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000bd	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _pCreateItem$228881[ebp], edx

; 3114 : 			}
; 3115 : #endif
; 3116 : 			pCreateItem.m_Level = lpMsg->Level;//Season 4.5 changed position

  000c3	0f b6 53 0e	 movzx	 edx, BYTE PTR [ebx+14]
  000c7	66 89 95 00 ff
	ff ff		 mov	 WORD PTR _pCreateItem$228881[ebp+8], dx

; 3117 : 			pCreateItem.m_Durability = lpMsg->Dur;//Season 4.5 changed positionhfm

  000ce	0f b6 53 0f	 movzx	 edx, BYTE PTR [ebx+15]
  000d2	89 55 f0	 mov	 DWORD PTR tv1723[ebp], edx

; 3118 : 
; 3119 : 			if ( g_SocketOption.CheckItemType(ITEMGET(iItemType, iItemIndex)) == 1 )

  000d5	c1 e0 09	 shl	 eax, 9
  000d8	db 45 f0	 fild	 DWORD PTR tv1723[ebp]
  000db	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000de	89 4d f4	 mov	 DWORD PTR _iItemIndex$228883[ebp], ecx
  000e1	56		 push	 esi
  000e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  000e7	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _pCreateItem$228881[ebp+36]
  000ed	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType

; 3120 : 			{
; 3121 : 				BYTE CS_Item[5] = {0xFE,0xFE,0xFE,0xFE,0xFE};
; 3122 : 				pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, CS_Item, 0xFF, 0, 3);

  000f2	6a 03		 push	 3
  000f4	6a 00		 push	 0
  000f6	68 ff 00 00 00	 push	 255			; 000000ffH
  000fb	3c 01		 cmp	 al, 1
  000fd	75 2c		 jne	 SHORT $LN49@ItemSerial@2
  000ff	0f b6 4b 1a	 movzx	 ecx, BYTE PTR [ebx+26]
  00103	0f b6 53 13	 movzx	 edx, BYTE PTR [ebx+19]
  00107	8d 45 dc	 lea	 eax, DWORD PTR _CS_Item$228885[ebp]
  0010a	50		 push	 eax
  0010b	0f b6 43 12	 movzx	 eax, BYTE PTR [ebx+18]
  0010f	6a 00		 push	 0
  00111	51		 push	 ecx
  00112	0f b6 4b 11	 movzx	 ecx, BYTE PTR [ebx+17]
  00116	52		 push	 edx
  00117	0f b6 53 10	 movzx	 edx, BYTE PTR [ebx+16]
  0011b	50		 push	 eax
  0011c	51		 push	 ecx
  0011d	c7 45 dc fe fe
	fe fe		 mov	 DWORD PTR _CS_Item$228885[ebp], -16843010 ; fefefefeH
  00124	c6 45 e0 fe	 mov	 BYTE PTR _CS_Item$228885[ebp+4], 254 ; 000000feH
  00128	52		 push	 edx

; 3123 : 			}
; 3124 : 			else

  00129	eb 1d		 jmp	 SHORT $LN106@ItemSerial@2
$LN49@ItemSerial@2:

; 3125 : 			{
; 3126 : 				pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, NULL, 0xFF, 0, 3);

  0012b	0f b6 43 1a	 movzx	 eax, BYTE PTR [ebx+26]
  0012f	0f b6 4b 13	 movzx	 ecx, BYTE PTR [ebx+19]
  00133	0f b6 53 12	 movzx	 edx, BYTE PTR [ebx+18]
  00137	6a 00		 push	 0
  00139	6a 00		 push	 0
  0013b	50		 push	 eax
  0013c	0f b6 43 11	 movzx	 eax, BYTE PTR [ebx+17]
  00140	51		 push	 ecx
  00141	0f b6 4b 10	 movzx	 ecx, BYTE PTR [ebx+16]
  00145	52		 push	 edx
  00146	50		 push	 eax
  00147	51		 push	 ecx
$LN106@ItemSerial@2:
  00148	56		 push	 esi
  00149	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pCreateItem$228881[ebp]
  0014f	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 3127 : 			}
; 3128 : 
; 3129 : 
; 3130 : 			BYTE btItemPos = gObjInventoryInsertItem(lpMsg->aIndex, pCreateItem);

  00154	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00157	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  0015d	8b fc		 mov	 edi, esp
  0015f	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00164	8d b5 f8 fe ff
	ff		 lea	 esi, DWORD PTR _pCreateItem$228881[ebp]
  0016a	52		 push	 edx
  0016b	f3 a5		 rep movsd
  0016d	e8 00 00 00 00	 call	 ?gObjInventoryInsertItem@@YAEHVCItem@@@Z ; gObjInventoryInsertItem
  00172	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H

; 3131 : 
; 3132 : 			if ( btItemPos == (BYTE)-1 )

  00178	3c ff		 cmp	 al, 255			; 000000ffH
  0017a	75 41		 jne	 SHORT $LN47@ItemSerial@2

; 3133 : 			{
; 3134 : 				LogAddTD("[CashShop] Error : Failed To Insert Item Type:%d, TypeIndex:%d to [%s][%s]", iItemType, iItemIndex, gObj[lpMsg->aIndex].AccountID, gObj[lpMsg->aIndex].Name);

  0017c	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0017f	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _iItemType$228882[ebp]
  00185	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0018b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00191	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  00194	52		 push	 edx
  00195	83 c0 6c	 add	 eax, 108		; 0000006cH
  00198	50		 push	 eax
  00199	8b 45 f4	 mov	 eax, DWORD PTR _iItemIndex$228883[ebp]
  0019c	50		 push	 eax
  0019d	51		 push	 ecx
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@KDEJKEEJ@?$FLCashShop?$FN?5Error?5?3?5Failed?5To?5Ins@
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001a9	83 c4 14	 add	 esp, 20			; 00000014H

; 3416 : 	}
; 3417 : }

  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	5b		 pop	 ebx
  001af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b2	33 cd		 xor	 ecx, ebp
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
$LN47@ItemSerial@2:

; 3135 : 			}
; 3136 : 			else if( pCreateItem.m_Type == ITEMGET(13, 4)
; 3137 : 				|| pCreateItem.m_Type == ITEMGET(13, 5) )

  001bd	66 8b 8d fe fe
	ff ff		 mov	 cx, WORD PTR _pCreateItem$228881[ebp+6]
  001c4	ba 04 1a 00 00	 mov	 edx, 6660		; 00001a04H
  001c9	66 3b ca	 cmp	 cx, dx
  001cc	0f 84 a3 01 00
	00		 je	 $LN36@ItemSerial@2
  001d2	ba 05 1a 00 00	 mov	 edx, 6661		; 00001a05H
  001d7	66 3b ca	 cmp	 cx, dx
  001da	0f 84 95 01 00
	00		 je	 $LN36@ItemSerial@2
$LN34@ItemSerial@2:

; 3138 : 			{
; 3139 : 				GCInventoryItemOneSend(lpMsg->aIndex, btItemPos);
; 3140 : 			}
; 3141 : 			else
; 3142 : 			{
; 3143 : //#ifdef PERIOD
; 3144 : //				if( lpMsg->lDuration > 0 )
; 3145 : //				{
; 3146 : //					g_PeriodItemZt.SetPeriodItemInfo(&gObj[lpMsg->aIndex], lpMsg->Type, lpMsg->m_Number, lpMsg->lDuration);
; 3147 : //				}
; 3148 : //#endif
; 3149 : 							//LogAdd("[CREDIT DONATE][%s] Type: %d, Index: %d, Level: %d, Skill: %d, Luck: %d, Opt: %d, Exellent: %d, Ancent: %d, Serial: %X",
; 3150 : 							//	lpObj->AccountID,iItemType,iItemIndex,lpMsg->Level,lpMsg->Op1,lpMsg->Op2,lpMsg->Op3,lpMsg->NewOption,lpMsg->SetOption,lpMsg->m_Number);
; 3151 : 				//ExLog(0,"[%s] Type: %d, Index: %d, Level: %d, Skill: %d, Luck: %d, Opt: %d, Exellent: %d, Ancent: %d, Serial: %d",
; 3152 : 				//	lpObj->AccountID,iItemType,iItemIndex,lpMsg->Level,lpMsg->Op1,lpMsg->Op2,lpMsg->Op3,lpMsg->NewOption,lpMsg->SetOption,lpMsg->m_Number);
; 3153 : 				//ExLog(0,"%s",lpObj->AccountID);
; 3154 : 				GCInventoryItemOneSend(lpMsg->aIndex, btItemPos);

  001e0	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  001e3	0f b6 c0	 movzx	 eax, al
  001e6	50		 push	 eax
  001e7	51		 push	 ecx
  001e8	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  001ed	83 c4 08	 add	 esp, 8

; 3416 : 	}
; 3417 : }

  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	5b		 pop	 ebx
  001f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f6	33 cd		 xor	 ecx, ebp
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c3		 ret	 0
$LN51@ItemSerial@2:

; 3155 : 				//GDUserItemSave(lpObj);
; 3156 : 			}
; 3157 : 		}
; 3158 : 
; 3159 : 	}
; 3160 : 	else if ( lpMsg->MapNumber == 236 )

  00201	3c ec		 cmp	 al, 236			; 000000ecH
  00203	0f 85 8d 01 00
	00		 jne	 $LN41@ItemSerial@2

; 3161 : 	{
; 3162 : 		if ( gObj[lpMsg->aIndex].Connected > PLAYER_CONNECTED )

  00209	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00215	83 7c 0f 04 01	 cmp	 DWORD PTR [edi+ecx+4], 1
  0021a	0f 8e 00 0a 00
	00		 jle	 $LN28@ItemSerial@2

; 3163 : 		{
; 3164 : 			CItem pCreateItem;

  00220	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pCreateItem$228898[ebp]
  00226	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 3165 : 			int iItemType = ITEM_GET_TYPE(lpMsg->Type);

  0022b	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  0022f	8b c1		 mov	 eax, ecx
  00231	99		 cdq
  00232	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00238	03 c2		 add	 eax, edx
  0023a	c1 f8 09	 sar	 eax, 9

; 3166 : 			int iItemIndex	= ITEM_GET_INDEX(lpMsg->Type);

  0023d	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  00243	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iItemType$228899[ebp], eax
  00249	79 08		 jns	 SHORT $LN104@ItemSerial@2
  0024b	49		 dec	 ecx
  0024c	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00252	41		 inc	 ecx
$LN104@ItemSerial@2:

; 3167 : #ifdef PERIOD
; 3168 : 			pCreateItem.m_Number = lpMsg->m_Number;

  00253	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00256	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _pCreateItem$228898[ebp], edx

; 3169 : #endif
; 3170 : 			pCreateItem.m_Level = lpMsg->Level;//Season 4.5 changed position

  0025c	0f b6 53 0e	 movzx	 edx, BYTE PTR [ebx+14]

; 3171 : 			pCreateItem.m_Durability = lpMsg->Dur;//Season 4.5 changed position
; 3172 : #if CASH_SHOP_ADDITIONAL == 1
; 3173 : 			if ( g_SocketOption.CheckItemType(ITEMGET(iItemType, iItemIndex)) == 1 )
; 3174 : 			{
; 3175 : 				BYTE CS_Item[5] = {0xFE,0xFE,0xFE,0xFE,0xFE};
; 3176 : 				pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, CS_Item, 0xFF, 0, 3);
; 3177 : 			}
; 3178 : 			else
; 3179 : 			{
; 3180 : 				pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, NULL, 0xFF, 0, 3);
; 3181 : 			}
; 3182 : 
; 3183 : #else
; 3184 : 			pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, NULL, 0xFF, 0, 3);

  00260	6a 03		 push	 3
  00262	6a 00		 push	 0
  00264	66 89 95 00 ff
	ff ff		 mov	 WORD PTR _pCreateItem$228898[ebp+8], dx
  0026b	0f b6 53 0f	 movzx	 edx, BYTE PTR [ebx+15]
  0026f	68 ff 00 00 00	 push	 255			; 000000ffH
  00274	89 55 f0	 mov	 DWORD PTR tv1682[ebp], edx
  00277	0f b6 53 1a	 movzx	 edx, BYTE PTR [ebx+26]
  0027b	db 45 f0	 fild	 DWORD PTR tv1682[ebp]
  0027e	6a 00		 push	 0
  00280	6a 00		 push	 0
  00282	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _pCreateItem$228898[ebp+36]
  00288	52		 push	 edx
  00289	0f b6 53 13	 movzx	 edx, BYTE PTR [ebx+19]
  0028d	52		 push	 edx
  0028e	0f b6 53 12	 movzx	 edx, BYTE PTR [ebx+18]
  00292	52		 push	 edx
  00293	0f b6 53 11	 movzx	 edx, BYTE PTR [ebx+17]
  00297	52		 push	 edx
  00298	0f b6 53 10	 movzx	 edx, BYTE PTR [ebx+16]
  0029c	c1 e0 09	 shl	 eax, 9
  0029f	03 c1		 add	 eax, ecx
  002a1	52		 push	 edx
  002a2	89 4d f4	 mov	 DWORD PTR _iItemIndex$228900[ebp], ecx
  002a5	50		 push	 eax
  002a6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pCreateItem$228898[ebp]
  002ac	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 3185 : #endif
; 3186 : 			BYTE btItemPos = gObjInventoryInsertItem(lpMsg->aIndex, pCreateItem);

  002b1	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  002b4	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  002ba	8b fc		 mov	 edi, esp
  002bc	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  002c1	8d b5 f8 fe ff
	ff		 lea	 esi, DWORD PTR _pCreateItem$228898[ebp]
  002c7	50		 push	 eax
  002c8	f3 a5		 rep movsd
  002ca	e8 00 00 00 00	 call	 ?gObjInventoryInsertItem@@YAEHVCItem@@@Z ; gObjInventoryInsertItem
  002cf	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  002d5	88 85 f3 fe ff
	ff		 mov	 BYTE PTR _btItemPos$228901[ebp], al

; 3187 : 
; 3188 : 			if ( btItemPos == (BYTE)-1 )

  002db	3c ff		 cmp	 al, 255			; 000000ffH
  002dd	75 41		 jne	 SHORT $LN39@ItemSerial@2

; 3189 : 			{
; 3190 : 				LogAddTD("[CashShop] Error : Failed To Insert Item Type:%d, TypeIndex:%d to [%s][%s]", iItemType, iItemIndex, gObj[lpMsg->aIndex].AccountID, gObj[lpMsg->aIndex].Name);

  002df	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  002e2	8b 55 f4	 mov	 edx, DWORD PTR _iItemIndex$228900[ebp]
  002e5	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  002eb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002f1	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  002f4	51		 push	 ecx
  002f5	83 c0 6c	 add	 eax, 108		; 0000006cH
  002f8	50		 push	 eax
  002f9	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _iItemType$228899[ebp]
  002ff	52		 push	 edx
  00300	50		 push	 eax
  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@KDEJKEEJ@?$FLCashShop?$FN?5Error?5?3?5Failed?5To?5Ins@
  00306	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0030c	83 c4 14	 add	 esp, 20			; 00000014H

; 3416 : 	}
; 3417 : }

  0030f	5f		 pop	 edi
  00310	5e		 pop	 esi
  00311	5b		 pop	 ebx
  00312	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00315	33 cd		 xor	 ecx, ebp
  00317	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c3		 ret	 0
$LN39@ItemSerial@2:

; 3191 : 			}
; 3192 : 			else if( pCreateItem.m_Type == ITEMGET(13, 4)
; 3193 : 				|| pCreateItem.m_Type == ITEMGET(13, 5) )

  00320	66 8b 8d fe fe
	ff ff		 mov	 cx, WORD PTR _pCreateItem$228898[ebp+6]
  00327	ba 04 1a 00 00	 mov	 edx, 6660		; 00001a04H
  0032c	66 3b ca	 cmp	 cx, dx
  0032f	74 44		 je	 SHORT $LN36@ItemSerial@2
  00331	ba 05 1a 00 00	 mov	 edx, 6661		; 00001a05H
  00336	66 3b ca	 cmp	 cx, dx
  00339	74 3a		 je	 SHORT $LN36@ItemSerial@2

; 3196 : 			}
; 3197 : 			else
; 3198 : 			{
; 3199 : #ifdef PERIOD
; 3200 : 				if( lpMsg->lDuration > 0 )

  0033b	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  0033e	85 c9		 test	 ecx, ecx
  00340	0f 8e 9a fe ff
	ff		 jle	 $LN34@ItemSerial@2

; 3201 : 				{
; 3202 : 					g_PeriodItemZt.SetPeriodItemInfo(&gObj[lpMsg->aIndex], lpMsg->Type, lpMsg->m_Number, lpMsg->lDuration);

  00346	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00349	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0034c	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00352	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00358	51		 push	 ecx
  00359	0f b7 4b 0c	 movzx	 ecx, WORD PTR [ebx+12]
  0035d	50		 push	 eax
  0035e	51		 push	 ecx
  0035f	52		 push	 edx
  00360	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  00365	e8 00 00 00 00	 call	 ?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GKK@Z ; CPeriodItemZt::SetPeriodItemInfo
  0036a	8a 85 f3 fe ff
	ff		 mov	 al, BYTE PTR _btItemPos$228901[ebp]

; 3203 : 				}
; 3204 : #endif
; 3205 : 				GCInventoryItemOneSend(lpMsg->aIndex, btItemPos);

  00370	e9 6b fe ff ff	 jmp	 $LN34@ItemSerial@2
$LN36@ItemSerial@2:

; 3194 : 			{
; 3195 : 				GCInventoryItemOneSend(lpMsg->aIndex, btItemPos);

  00375	0f b6 d0	 movzx	 edx, al
  00378	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0037b	52		 push	 edx
  0037c	50		 push	 eax
  0037d	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend
  00382	83 c4 08	 add	 esp, 8

; 3416 : 	}
; 3417 : }

  00385	5f		 pop	 edi
  00386	5e		 pop	 esi
  00387	5b		 pop	 ebx
  00388	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038b	33 cd		 xor	 ecx, ebp
  0038d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00392	8b e5		 mov	 esp, ebp
  00394	5d		 pop	 ebp
  00395	c3		 ret	 0
$LN41@ItemSerial@2:

; 3206 : 			}
; 3207 : 		}
; 3208 : 	}
; 3209 : 	else if ( lpMsg->MapNumber == 237 )//Season 4.5 lucky coin trade system addon

  00396	3c ed		 cmp	 al, 237			; 000000edH
  00398	0f 85 53 01 00
	00		 jne	 $LN32@ItemSerial@2

; 3210 : 	{
; 3211 : 		if ( gObj[lpMsg->aIndex].Connected > PLAYER_CONNECTED )

  0039e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003a4	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  003aa	83 7c 0f 04 01	 cmp	 DWORD PTR [edi+ecx+4], 1
  003af	89 7d e8	 mov	 DWORD PTR tv1427[ebp], edi
  003b2	0f 8e 68 08 00
	00		 jle	 $LN28@ItemSerial@2

; 3212 : 		{
; 3213 : 			CItem pCreateItem;

  003b8	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pCreateItem$228912[ebp]
  003be	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 3214 : 			
; 3215 : 			int iItemType = ITEM_GET_TYPE(lpMsg->Type);

  003c3	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  003c7	8b c1		 mov	 eax, ecx
  003c9	99		 cdq
  003ca	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  003d0	03 c2		 add	 eax, edx
  003d2	c1 f8 09	 sar	 eax, 9

; 3216 : 			int iItemIndex	= ITEM_GET_INDEX(lpMsg->Type);

  003d5	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  003db	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iItemType$228913[ebp], eax
  003e1	79 08		 jns	 SHORT $LN105@ItemSerial@2
  003e3	49		 dec	 ecx
  003e4	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  003ea	41		 inc	 ecx
$LN105@ItemSerial@2:

; 3217 : 
; 3218 : 			pCreateItem.m_Level = lpMsg->Level;

  003eb	0f b6 53 0e	 movzx	 edx, BYTE PTR [ebx+14]

; 3219 : 			pCreateItem.m_Durability = lpMsg->Dur;
; 3220 : 
; 3221 : 			pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, NULL, 0xFF, 0, 3);

  003ef	6a 03		 push	 3
  003f1	6a 00		 push	 0
  003f3	66 89 95 00 ff
	ff ff		 mov	 WORD PTR _pCreateItem$228912[ebp+8], dx
  003fa	0f b6 53 0f	 movzx	 edx, BYTE PTR [ebx+15]
  003fe	68 ff 00 00 00	 push	 255			; 000000ffH
  00403	89 55 f0	 mov	 DWORD PTR tv1649[ebp], edx
  00406	0f b6 53 1a	 movzx	 edx, BYTE PTR [ebx+26]
  0040a	db 45 f0	 fild	 DWORD PTR tv1649[ebp]
  0040d	6a 00		 push	 0
  0040f	6a 00		 push	 0
  00411	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _pCreateItem$228912[ebp+36]
  00417	52		 push	 edx
  00418	0f b6 53 13	 movzx	 edx, BYTE PTR [ebx+19]
  0041c	52		 push	 edx
  0041d	0f b6 53 12	 movzx	 edx, BYTE PTR [ebx+18]
  00421	52		 push	 edx
  00422	0f b6 53 11	 movzx	 edx, BYTE PTR [ebx+17]
  00426	52		 push	 edx
  00427	0f b6 53 10	 movzx	 edx, BYTE PTR [ebx+16]
  0042b	c1 e0 09	 shl	 eax, 9
  0042e	03 c1		 add	 eax, ecx
  00430	52		 push	 edx
  00431	89 4d f4	 mov	 DWORD PTR _iItemIndex$228914[ebp], ecx
  00434	50		 push	 eax
  00435	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pCreateItem$228912[ebp]
  0043b	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 3222 : 			pCreateItem.m_Level = lpMsg->Level;

  00440	0f b6 43 0e	 movzx	 eax, BYTE PTR [ebx+14]

; 3223 : 			
; 3224 : 			BYTE btItemPos = gObjInventoryInsertItem(lpMsg->aIndex, pCreateItem);

  00444	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  0044a	8b fc		 mov	 edi, esp
  0044c	66 89 85 00 ff
	ff ff		 mov	 WORD PTR _pCreateItem$228912[ebp+8], ax
  00453	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00458	8d b5 f8 fe ff
	ff		 lea	 esi, DWORD PTR _pCreateItem$228912[ebp]
  0045e	f3 a5		 rep movsd
  00460	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00463	51		 push	 ecx
  00464	e8 00 00 00 00	 call	 ?gObjInventoryInsertItem@@YAEHVCItem@@@Z ; gObjInventoryInsertItem
  00469	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H

; 3225 : 
; 3226 : 			if ( btItemPos == (BYTE)-1 )

  0046f	3c ff		 cmp	 al, 255			; 000000ffH
  00471	75 3e		 jne	 SHORT $LN30@ItemSerial@2

; 3227 : 			{
; 3228 : 				LogAddTD("[LuckyCoin Trade] Error : Failed To Insert Item Type:%d, TypeIndex:%d to [%s][%s]", iItemType, iItemIndex, gObj[lpMsg->aIndex].AccountID, gObj[lpMsg->aIndex].Name);

  00473	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00476	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0047b	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00481	03 c2		 add	 eax, edx
  00483	8b 55 f4	 mov	 edx, DWORD PTR _iItemIndex$228914[ebp]
  00486	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  00489	51		 push	 ecx
  0048a	83 c0 6c	 add	 eax, 108		; 0000006cH
  0048d	50		 push	 eax
  0048e	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _iItemType$228913[ebp]
  00494	52		 push	 edx
  00495	50		 push	 eax
  00496	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@JMDFINCJ@?$FLLuckyCoin?5Trade?$FN?5Error?5?3?5Failed@
  0049b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3229 : 				GCSendLuckyCoinResult(lpMsg->aIndex, 2);

  004a1	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  004a4	6a 02		 push	 2
  004a6	51		 push	 ecx
  004a7	e8 00 00 00 00	 call	 ?GCSendLuckyCoinResult@@YAXHE@Z ; GCSendLuckyCoinResult
  004ac	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3230 : 			}
; 3231 : 			else

  004af	eb 1b		 jmp	 SHORT $LN29@ItemSerial@2
$LN30@ItemSerial@2:

; 3232 : 			{
; 3233 : 				GCInventoryItemOneSend(lpMsg->aIndex, btItemPos);

  004b1	0f b6 d0	 movzx	 edx, al
  004b4	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  004b7	52		 push	 edx
  004b8	50		 push	 eax
  004b9	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 3234 : 				GCSendLuckyCoinResult(lpMsg->aIndex, 1);

  004be	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  004c1	6a 01		 push	 1
  004c3	51		 push	 ecx
  004c4	e8 00 00 00 00	 call	 ?GCSendLuckyCoinResult@@YAXHE@Z ; GCSendLuckyCoinResult
  004c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@ItemSerial@2:

; 3235 : 			}
; 3236 : 
; 3237 : 			gObj[aIndex].ChaosLock = false;

  004cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004d2	8b 45 e8	 mov	 eax, DWORD PTR tv1427[ebp]
  004d5	c7 84 10 88 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx+3720], 0

; 3416 : 	}
; 3417 : }

  004e0	5f		 pop	 edi
  004e1	5e		 pop	 esi
  004e2	5b		 pop	 ebx
  004e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e6	33 cd		 xor	 ecx, ebp
  004e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ed	8b e5		 mov	 esp, ebp
  004ef	5d		 pop	 ebp
  004f0	c3		 ret	 0
$LN32@ItemSerial@2:

; 3238 : 		}
; 3239 : 	}
; 3240 : //	else if ( lpMsg->MapNumber == 238 )
; 3241 : //	{
; 3242 : //		if ( gObj[lpMsg->aIndex].Connected > PLAYER_CONNECTED )
; 3243 : //		{
; 3244 : //			CItem pCreateItem;
; 3245 : //			int iItemType = ITEM_GET_TYPE(lpMsg->Type);
; 3246 : //			int iItemIndex	= ITEM_GET_INDEX(lpMsg->Type);
; 3247 : ////#ifdef PERIOD
; 3248 : //			pCreateItem.m_Number = lpMsg->m_Number;
; 3249 : ////#endif
; 3250 : //			pCreateItem.m_Level = lpMsg->Level;//Season 4.5 changed position
; 3251 : //			pCreateItem.m_Durability = lpMsg->Dur;//Season 4.5 changed position
; 3252 : //
; 3253 : //			if ( g_SocketOption.CheckItemType(ITEMGET(iItemType, iItemIndex)) == 1 )
; 3254 : //			{
; 3255 : //				BYTE CS_Item[5] = {0xFE,0xFE,0xFE,0xFE,0xFE};
; 3256 : //				pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, CS_Item, 0xFF, 0, 3);
; 3257 : //			}
; 3258 : //			else
; 3259 : //			{
; 3260 : //				pCreateItem.Convert(ITEMGET(iItemType, iItemIndex), lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, 0, NULL, 0xFF, 0, 3);
; 3261 : //			}
; 3262 : //
; 3263 : //
; 3264 : //			BYTE btItemPos = gObjInventoryInsertItem(lpMsg->aIndex, pCreateItem);
; 3265 : //
; 3266 : //			if ( btItemPos == (BYTE)-1 )
; 3267 : //			{
; 3268 : //				LogAddTD("[CashShop] Error : Failed To Insert Item Type:%d, TypeIndex:%d to [%s][%s]", iItemType, iItemIndex, gObj[lpMsg->aIndex].AccountID, gObj[lpMsg->aIndex].Name);
; 3269 : //			}
; 3270 : //			else if( pCreateItem.m_Type == ITEMGET(13, 4)
; 3271 : //				|| pCreateItem.m_Type == ITEMGET(13, 5) )
; 3272 : //			{
; 3273 : //				GCInventoryItemOneSend(lpMsg->aIndex, btItemPos);
; 3274 : //			}
; 3275 : //			else
; 3276 : //			{
; 3277 : ////#ifdef PERIOD
; 3278 : ////				if( lpMsg->lDuration > 0 )
; 3279 : ////				{
; 3280 : ////					g_PeriodItemZt.SetPeriodItemInfo(&gObj[lpMsg->aIndex], lpMsg->Type, lpMsg->m_Number, lpMsg->lDuration);
; 3281 : ////				}
; 3282 : ////#endif
; 3283 : //							//LogAdd("[CREDIT DONATE][%s] Type: %d, Index: %d, Level: %d, Skill: %d, Luck: %d, Opt: %d, Exellent: %d, Ancent: %d, Serial: %X",
; 3284 : //							//	lpObj->AccountID,iItemType,iItemIndex,lpMsg->Level,lpMsg->Op1,lpMsg->Op2,lpMsg->Op3,lpMsg->NewOption,lpMsg->SetOption,lpMsg->m_Number);
; 3285 : //				//ExLog(0,"[%s] Type: %d, Index: %d, Level: %d, Skill: %d, Luck: %d, Opt: %d, Exellent: %d, Ancent: %d, Serial: %d",
; 3286 : //				//	lpObj->AccountID,iItemType,iItemIndex,lpMsg->Level,lpMsg->Op1,lpMsg->Op2,lpMsg->Op3,lpMsg->NewOption,lpMsg->SetOption,lpMsg->m_Number);
; 3287 : //				ExLog(0,"%s",lpObj->AccountID);
; 3288 : //				GCInventoryItemOneSend(lpMsg->aIndex, btItemPos);
; 3289 : //			}
; 3290 : //		}
; 3291 : //	}
; 3292 : 	else
; 3293 : 	{
; 3294 : 		int iRetMapNumber = lpMsg->MapNumber; //loc106

  004f1	8a 4b 05	 mov	 cl, BYTE PTR [ebx+5]
  004f4	0f b6 f9	 movzx	 edi, cl
  004f7	89 7d f0	 mov	 DWORD PTR _iRetMapNumber$228921[ebp], edi

; 3295 : 
; 3296 : 		if ( lpMsg->MapNumber >= 238 && lpMsg->MapNumber <= 245 )

  004fa	80 f9 ee	 cmp	 cl, 238			; 000000eeH
  004fd	72 17		 jb	 SHORT $LN27@ItemSerial@2
  004ff	3c f5		 cmp	 al, 245			; 000000f5H
  00501	77 13		 ja	 SHORT $LN27@ItemSerial@2

; 3297 : 		{
; 3298 : 			mapnumber = g_BloodCastle.GetItemMapNumberFirst(iRetMapNumber);

  00503	57		 push	 edi
  00504	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  00509	e8 00 00 00 00	 call	 ?GetItemMapNumberFirst@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetItemMapNumberFirst
  0050e	8b f0		 mov	 esi, eax
  00510	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _mapnumber$[ebp], eax
$LN27@ItemSerial@2:

; 3299 : 		}
; 3300 : 
; 3301 : 		if ( lpMsg->MapNumber >= 246 && lpMsg->MapNumber <= 253 )

  00516	8a 43 05	 mov	 al, BYTE PTR [ebx+5]
  00519	3c f6		 cmp	 al, 246			; 000000f6H
  0051b	72 17		 jb	 SHORT $LN26@ItemSerial@2
  0051d	3c fd		 cmp	 al, 253			; 000000fdH
  0051f	77 13		 ja	 SHORT $LN26@ItemSerial@2

; 3302 : 		{
; 3303 : 			mapnumber = g_BloodCastle.GetItemMapNumberSecond(iRetMapNumber);

  00521	57		 push	 edi
  00522	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  00527	e8 00 00 00 00	 call	 ?GetItemMapNumberSecond@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetItemMapNumberSecond
  0052c	8b f0		 mov	 esi, eax
  0052e	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _mapnumber$[ebp], esi
$LN26@ItemSerial@2:

; 3304 : 		}
; 3305 : 		
; 3306 : 		//Season 4.5 SocketSystem Addon Start
; 3307 : 		BYTE SocketSlotCount = 0;
; 3308 : 		BYTE SocketOption[5];
; 3309 : 		BYTE SocketOptionIndex = 0;
; 3310 : 
; 3311 : 		if ( g_SocketOption.CheckItemType(lpMsg->Type) == 1 )

  00534	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  00538	51		 push	 ecx
  00539	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  0053e	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType
  00543	3c 01		 cmp	 al, 1
  00545	75 78		 jne	 SHORT $LN25@ItemSerial@2

; 3312 :         {
; 3313 : 			SocketSlotCount = g_SocketOption.GetRandomSlotCount(lpMsg->Type);

  00547	0f bf 53 0c	 movsx	 edx, WORD PTR [ebx+12]
  0054b	52		 push	 edx
  0054c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  00551	e8 00 00 00 00	 call	 ?GetRandomSlotCount@CSocketOption@@QAEEH@Z ; CSocketOption::GetRandomSlotCount

; 3314 : 
; 3315 : 			LogAddTD("[SocketItem] Drop Socket Item ( Socket Slot : %d ) - %s, [%d,%d,%d,%d], Serial : %u, ItemCode : %d, Level : %d, MapNumber : %d(%d/%d)",SocketSlotCount,ItemAttribute[lpMsg->Type].Name,lpMsg->Level,lpMsg->Op1,lpMsg->Op2,lpMsg->Op3, lpMsg->m_Number,lpMsg->Type,lpMsg->Level,lpMsg->MapNumber,lpMsg->x,lpMsg->y);

  00556	0f b6 53 03	 movzx	 edx, BYTE PTR [ebx+3]
  0055a	0f b6 73 0e	 movzx	 esi, BYTE PTR [ebx+14]
  0055e	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  00562	0f b6 f8	 movzx	 edi, al
  00565	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00569	50		 push	 eax
  0056a	0f b6 43 05	 movzx	 eax, BYTE PTR [ebx+5]
  0056e	52		 push	 edx
  0056f	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00572	50		 push	 eax
  00573	0f b6 43 12	 movzx	 eax, BYTE PTR [ebx+18]
  00577	56		 push	 esi
  00578	51		 push	 ecx
  00579	6b c9 70	 imul	 ecx, 112		; 00000070H
  0057c	52		 push	 edx
  0057d	0f b6 53 11	 movzx	 edx, BYTE PTR [ebx+17]
  00581	50		 push	 eax
  00582	0f b6 43 10	 movzx	 eax, BYTE PTR [ebx+16]
  00586	52		 push	 edx
  00587	50		 push	 eax
  00588	56		 push	 esi
  00589	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0058f	51		 push	 ecx
  00590	57		 push	 edi
  00591	68 00 00 00 00	 push	 OFFSET ??_C@_0IG@JDKHCHPG@?$FLSocketItem?$FN?5Drop?5Socket?5Item?5?$CI?5@
  00596	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0059c	83 c4 34	 add	 esp, 52			; 00000034H

; 3316 : 			
; 3317 : 			SocketOptionIndex = 0xFF;

  0059f	c6 45 f5 ff	 mov	 BYTE PTR _SocketOptionIndex$228926[ebp], 255 ; 000000ffH

; 3318 : 
; 3319 : 			for(int i = 0;i < 5; i++)

  005a3	33 c0		 xor	 eax, eax
$LL24@ItemSerial@2:

; 3320 : 			{
; 3321 : 				if(i < SocketSlotCount)

  005a5	3b c7		 cmp	 eax, edi
  005a7	0f 9d c1	 setge	 cl
  005aa	80 c1 fe	 add	 cl, 254			; 000000feH
  005ad	88 4c 05 dc	 mov	 BYTE PTR _SocketOption$228925[ebp+eax], cl
  005b1	40		 inc	 eax
  005b2	83 f8 05	 cmp	 eax, 5
  005b5	7c ee		 jl	 SHORT $LL24@ItemSerial@2

; 3322 : 				{
; 3323 : 					SocketOption[i] = 0xFE;
; 3324 : 				}
; 3325 : 				else
; 3326 : 				{
; 3327 : 					SocketOption[i] = 0xFF;
; 3328 : 				}
; 3329 : 			}
; 3330 : 
; 3331 : 		}
; 3332 : 		else

  005b7	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _mapnumber$[ebp]
  005bd	eb 0d		 jmp	 SHORT $LN18@ItemSerial@2
$LN25@ItemSerial@2:

; 3333 : 		{
; 3334 : 			SocketOptionIndex = 0;
; 3335 : 
; 3336 : 			for(int i = 0; i < 5; i++)
; 3337 : 			{
; 3338 : 				SocketOption[i] = 0xFF;

  005bf	83 c8 ff	 or	 eax, -1
  005c2	c6 45 f5 00	 mov	 BYTE PTR _SocketOptionIndex$228926[ebp], 0
  005c6	89 45 dc	 mov	 DWORD PTR _SocketOption$228925[ebp], eax
  005c9	88 45 e0	 mov	 BYTE PTR _SocketOption$228925[ebp+4], al
$LN18@ItemSerial@2:

; 3339 : 			}
; 3340 : 		}
; 3341 : 
; 3342 : 		int iItemCount = MapC[mapnumber].MonsterItemDrop(lpMsg->Type, lpMsg->Level, lpMsg->Dur, lpMsg->x, lpMsg->y, lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, lpMsg->NewOption, lpMsg->SetOption, lootindex, lpMsg->m_Number, 0,SocketOption,SocketOptionIndex);

  005cc	8b 55 f5	 mov	 edx, DWORD PTR _SocketOptionIndex$228926[ebp]
  005cf	69 f6 48 3d 05
	00		 imul	 esi, 343368		; 00053d48H
  005d5	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  005d8	52		 push	 edx
  005d9	8b 55 e8	 mov	 edx, DWORD PTR _lootindex$[ebp]
  005dc	8d 45 dc	 lea	 eax, DWORD PTR _SocketOption$228925[ebp]
  005df	50		 push	 eax
  005e0	0f b6 43 1a	 movzx	 eax, BYTE PTR [ebx+26]
  005e4	6a 00		 push	 0
  005e6	51		 push	 ecx
  005e7	0f b6 4b 13	 movzx	 ecx, BYTE PTR [ebx+19]
  005eb	52		 push	 edx
  005ec	0f b6 53 12	 movzx	 edx, BYTE PTR [ebx+18]
  005f0	50		 push	 eax
  005f1	0f b6 43 11	 movzx	 eax, BYTE PTR [ebx+17]
  005f5	51		 push	 ecx
  005f6	0f b6 4b 10	 movzx	 ecx, BYTE PTR [ebx+16]
  005fa	52		 push	 edx
  005fb	0f b6 53 04	 movzx	 edx, BYTE PTR [ebx+4]
  005ff	50		 push	 eax
  00600	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]
  00604	51		 push	 ecx
  00605	0f b6 4b 0f	 movzx	 ecx, BYTE PTR [ebx+15]
  00609	52		 push	 edx
  0060a	0f b6 53 0e	 movzx	 edx, BYTE PTR [ebx+14]
  0060e	50		 push	 eax
  0060f	0f bf 43 0c	 movsx	 eax, WORD PTR [ebx+12]
  00613	89 4d f4	 mov	 DWORD PTR tv1614[ebp], ecx
  00616	51		 push	 ecx
  00617	db 45 f4	 fild	 DWORD PTR tv1614[ebp]
  0061a	8d 8e 00 00 00
	00		 lea	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[esi]
  00620	d9 1c 24	 fstp	 DWORD PTR [esp]
  00623	52		 push	 edx
  00624	50		 push	 eax
  00625	e8 00 00 00 00	 call	 ?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKEQAEE@Z ; MapClass::MonsterItemDrop
  0062a	89 45 f4	 mov	 DWORD PTR _iItemCount$228940[ebp], eax

; 3343 : 		
; 3344 : 		//Season 4.5 SocketSystem Addon end
; 3345 : 
; 3346 : 		if ( iItemCount != -1 )

  0062d	83 f8 ff	 cmp	 eax, -1
  00630	0f 84 1e 01 00
	00		 je	 $LN101@ItemSerial@2

; 3347 : 		{
; 3348 : 			if ( iRetMapNumber >= 238 && iRetMapNumber <= 245)

  00636	8b 4d f0	 mov	 ecx, DWORD PTR _iRetMapNumber$228921[ebp]
  00639	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0063f	81 c1 12 ff ff
	ff		 add	 ecx, -238		; ffffff12H
  00645	83 f9 07	 cmp	 ecx, 7
  00648	77 2d		 ja	 SHORT $LN14@ItemSerial@2

; 3349 : 			{
; 3350 : 				MapC[mapnumber].m_cItem[iItemCount].m_Time = GetTickCount() + 300000;

  0064a	8b d0		 mov	 edx, eax
  0064c	69 d2 74 04 00
	00		 imul	 edx, 1140		; 00000474H
  00652	03 d6		 add	 edx, esi
  00654	89 55 e8	 mov	 DWORD PTR tv1571[ebp], edx
  00657	ff d7		 call	 edi
  00659	8b 4d e8	 mov	 ecx, DWORD PTR tv1571[ebp]
  0065c	05 e0 93 04 00	 add	 eax, 300000		; 000493e0H
  00661	89 81 00 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+256], eax

; 3351 : 				MapC[mapnumber].m_cItem[iItemCount].m_LootTime = GetTickCount() + 20000;

  00667	ff d7		 call	 edi
  00669	8b 55 e8	 mov	 edx, DWORD PTR tv1571[ebp]
  0066c	05 20 4e 00 00	 add	 eax, 20000		; 00004e20H
  00671	89 82 08 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[edx+264], eax
$LN14@ItemSerial@2:

; 3352 : 
; 3353 : 			}
; 3354 : 
; 3355 : 			if ( iRetMapNumber >= 246 && iRetMapNumber <= 253)

  00677	8b 45 f0	 mov	 eax, DWORD PTR _iRetMapNumber$228921[ebp]
  0067a	05 0a ff ff ff	 add	 eax, -246		; ffffff0aH
  0067f	83 f8 07	 cmp	 eax, 7
  00682	77 4e		 ja	 SHORT $LN13@ItemSerial@2

; 3356 : 			{
; 3357 : 				MapC[mapnumber].m_cItem[iItemCount].m_Time = GetTickCount() + 900000;

  00684	8b 4d f4	 mov	 ecx, DWORD PTR _iItemCount$228940[ebp]
  00687	69 c9 74 04 00
	00		 imul	 ecx, 1140		; 00000474H
  0068d	03 ce		 add	 ecx, esi
  0068f	89 4d e8	 mov	 DWORD PTR tv1571[ebp], ecx
  00692	ff d7		 call	 edi
  00694	8b 55 e8	 mov	 edx, DWORD PTR tv1571[ebp]
  00697	05 a0 bb 0d 00	 add	 eax, 900000		; 000dbba0H
  0069c	89 82 00 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[edx+256], eax

; 3358 : 				MapC[mapnumber].m_cItem[iItemCount].m_LootTime = GetTickCount() + 10000;

  006a2	ff d7		 call	 edi
  006a4	8b 4d e8	 mov	 ecx, DWORD PTR tv1571[ebp]

; 3359 : 
; 3360 : 				int iBridgeIndex = g_BloodCastle.GetBridgeIndex(mapnumber); //s3 add-on (loc108)

  006a7	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _mapnumber$[ebp]
  006ad	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  006b2	89 81 08 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+264], eax
  006b8	52		 push	 edx
  006b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  006be	e8 00 00 00 00	 call	 ?GetBridgeIndex@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetBridgeIndex

; 3361 : 
; 3362 : 				g_BloodCastle.m_BridgeData[iBridgeIndex].m_nBC_QUESTITEM_SERIAL = lpMsg->m_Number;

  006c3	69 c0 60 04 00
	00		 imul	 eax, 1120		; 00000460H
  006c9	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  006cc	89 88 e8 03 00
	00		 mov	 DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[eax+1000], ecx
$LN13@ItemSerial@2:

; 3363 : 			}
; 3364 : 
; 3365 : 			if( ((mapnumber) < MAP_INDEX_ILLUSIONTEMPLE1)?FALSE:((mapnumber) > MAP_INDEX_ILLUSIONTEMPLE6 )?FALSE:TRUE) //Season 2.5 add-on

  006d2	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _mapnumber$[ebp]
  006d8	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  006db	7c 77		 jl	 SHORT $LN101@ItemSerial@2
  006dd	33 d2		 xor	 edx, edx
  006df	83 f8 32	 cmp	 eax, 50			; 00000032H
  006e2	0f 9e c2	 setle	 dl
  006e5	8b c2		 mov	 eax, edx
  006e7	85 c0		 test	 eax, eax
  006e9	74 69		 je	 SHORT $LN101@ItemSerial@2

; 3366 : 			{
; 3367 : 				if( lpMsg->Type == ITEMGET(14,64) )

  006eb	b8 40 1c 00 00	 mov	 eax, 7232		; 00001c40H
  006f0	66 39 43 0c	 cmp	 WORD PTR [ebx+12], ax
  006f4	75 2e		 jne	 SHORT $LN11@ItemSerial@2

; 3368 : 				{
; 3369 : 					MapC[mapnumber].m_cItem[iItemCount].m_Time = GetTickCount() + 15000;

  006f6	8b 4d f4	 mov	 ecx, DWORD PTR _iItemCount$228940[ebp]
  006f9	69 c9 74 04 00
	00		 imul	 ecx, 1140		; 00000474H
  006ff	03 ce		 add	 ecx, esi
  00701	89 4d e8	 mov	 DWORD PTR tv1571[ebp], ecx
  00704	ff d7		 call	 edi
  00706	8b 55 e8	 mov	 edx, DWORD PTR tv1571[ebp]
  00709	05 98 3a 00 00	 add	 eax, 15000		; 00003a98H
  0070e	89 82 00 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[edx+256], eax

; 3370 : 					MapC[mapnumber].m_cItem[iItemCount].m_LootTime = GetTickCount() + 5000;

  00714	ff d7		 call	 edi
  00716	8b 4d e8	 mov	 ecx, DWORD PTR tv1571[ebp]
  00719	05 88 13 00 00	 add	 eax, 5000		; 00001388H
  0071e	89 81 08 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+264], eax
$LN11@ItemSerial@2:

; 3371 : 				}
; 3372 : 
; 3373 : 				if( lpMsg->Type == ITEMGET(12,15) )

  00724	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00729	66 39 53 0c	 cmp	 WORD PTR [ebx+12], dx
  0072d	75 25		 jne	 SHORT $LN101@ItemSerial@2

; 3374 : 				{
; 3375 : 					MapC[mapnumber].m_cItem[iItemCount].m_Time = GetTickCount() + 300000;

  0072f	8b 45 f4	 mov	 eax, DWORD PTR _iItemCount$228940[ebp]
  00732	69 c0 74 04 00
	00		 imul	 eax, 1140		; 00000474H
  00738	03 f0		 add	 esi, eax
  0073a	ff d7		 call	 edi
  0073c	05 e0 93 04 00	 add	 eax, 300000		; 000493e0H
  00741	89 86 00 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[esi+256], eax

; 3376 : 					MapC[mapnumber].m_cItem[iItemCount].m_LootTime = GetTickCount() + 10000;

  00747	ff d7		 call	 edi
  00749	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  0074e	89 86 08 01 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[esi+264], eax
$LN101@ItemSerial@2:

; 3377 : 				}
; 3378 : 			}
; 3379 : 		}
; 3380 : 
; 3381 : 		BYTE NewOption[MAX_EXOPTION_SIZE];
; 3382 : 
; 3383 : 		for ( int i=0;i<MAX_EXOPTION_SIZE;i++)
; 3384 : 		{
; 3385 : 			NewOption[i] = FALSE;

  00754	33 c0		 xor	 eax, eax
  00756	89 45 ec	 mov	 DWORD PTR _NewOption$228948[ebp], eax
  00759	89 45 f0	 mov	 DWORD PTR _NewOption$228948[ebp+4], eax

; 3386 : 		}
; 3387 : 
; 3388 : 		if ( (lpMsg->NewOption & 0x20) != 0 )

  0075c	8a 43 13	 mov	 al, BYTE PTR [ebx+19]
  0075f	a8 20		 test	 al, 32			; 00000020H
  00761	74 04		 je	 SHORT $LN95@ItemSerial@2

; 3389 : 		{
; 3390 : 			NewOption[0] = TRUE;

  00763	c6 45 ec 01	 mov	 BYTE PTR _NewOption$228948[ebp], 1
$LN95@ItemSerial@2:

; 3391 : 		}
; 3392 : 		if ( (lpMsg->NewOption & 0x10) != 0 )

  00767	a8 10		 test	 al, 16			; 00000010H
  00769	74 04		 je	 SHORT $LN96@ItemSerial@2

; 3393 : 		{
; 3394 : 			NewOption[1] = TRUE;

  0076b	c6 45 ed 01	 mov	 BYTE PTR _NewOption$228948[ebp+1], 1
$LN96@ItemSerial@2:

; 3395 : 		}
; 3396 : 
; 3397 : 		if ( (lpMsg->NewOption & 0x8) != 0 )

  0076f	a8 08		 test	 al, 8
  00771	74 04		 je	 SHORT $LN97@ItemSerial@2

; 3398 : 		{
; 3399 : 			NewOption[2] = TRUE;

  00773	c6 45 ee 01	 mov	 BYTE PTR _NewOption$228948[ebp+2], 1
$LN97@ItemSerial@2:

; 3400 : 		}
; 3401 : 		if ( (lpMsg->NewOption & 0x4) != 0 )
; 3402 : 		{
; 3403 : 			NewOption[3] = TRUE;

  00777	b2 01		 mov	 dl, 1
  00779	a8 04		 test	 al, 4
  0077b	75 03		 jne	 SHORT $LN3@ItemSerial@2
  0077d	8a 55 ef	 mov	 dl, BYTE PTR _NewOption$228948[ebp+3]
$LN3@ItemSerial@2:

; 3404 : 		}
; 3405 : 
; 3406 : 		if ( (lpMsg->NewOption & 0x2) != 0 )
; 3407 : 		{
; 3408 : 			NewOption[4] = TRUE;

  00780	b1 01		 mov	 cl, 1
  00782	a8 02		 test	 al, 2
  00784	75 03		 jne	 SHORT $LN2@ItemSerial@2
  00786	8a 4d f0	 mov	 cl, BYTE PTR _NewOption$228948[ebp+4]
$LN2@ItemSerial@2:

; 3409 : 		}
; 3410 : 		if ( (lpMsg->NewOption & 0x1) != 0 )

  00789	a8 01		 test	 al, 1

; 3411 : 		{
; 3412 : 			NewOption[5] = TRUE;

  0078b	b0 01		 mov	 al, 1
  0078d	75 03		 jne	 SHORT $LN1@ItemSerial@2
  0078f	8a 45 f1	 mov	 al, BYTE PTR _NewOption$228948[ebp+5]
$LN1@ItemSerial@2:

; 3413 : 		}
; 3414 : 
; 3415 : 		LogAddTD("Monster Item Drop [%d][%d][%d] : serial:%u [%s][%d][%d][%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d]", mapnumber, lpMsg->x, lpMsg->y, lpMsg->m_Number, ItemAttribute[lpMsg->Type].Name, lpMsg->Level, lpMsg->Op1, lpMsg->Op2, lpMsg->Op3, NewOption[0],NewOption[1],NewOption[2],NewOption[3],NewOption[4],NewOption[5],NewOption[6], lpMsg->SetOption);	

  00792	0f b6 73 1a	 movzx	 esi, BYTE PTR [ebx+26]
  00796	56		 push	 esi
  00797	0f b6 75 f2	 movzx	 esi, BYTE PTR _NewOption$228948[ebp+6]
  0079b	56		 push	 esi
  0079c	0f b6 c0	 movzx	 eax, al
  0079f	50		 push	 eax
  007a0	0f b6 45 ee	 movzx	 eax, BYTE PTR _NewOption$228948[ebp+2]
  007a4	0f b6 c9	 movzx	 ecx, cl
  007a7	51		 push	 ecx
  007a8	0f b6 4d ed	 movzx	 ecx, BYTE PTR _NewOption$228948[ebp+1]
  007ac	0f b6 d2	 movzx	 edx, dl
  007af	52		 push	 edx
  007b0	0f b6 55 ec	 movzx	 edx, BYTE PTR _NewOption$228948[ebp]
  007b4	50		 push	 eax
  007b5	0f b6 43 12	 movzx	 eax, BYTE PTR [ebx+18]
  007b9	51		 push	 ecx
  007ba	0f b6 4b 11	 movzx	 ecx, BYTE PTR [ebx+17]
  007be	52		 push	 edx
  007bf	0f b6 53 10	 movzx	 edx, BYTE PTR [ebx+16]
  007c3	50		 push	 eax
  007c4	0f b6 43 0e	 movzx	 eax, BYTE PTR [ebx+14]
  007c8	51		 push	 ecx
  007c9	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  007cd	6b c9 70	 imul	 ecx, 112		; 00000070H
  007d0	52		 push	 edx
  007d1	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  007d4	50		 push	 eax
  007d5	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  007d9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  007df	51		 push	 ecx
  007e0	0f b6 4b 03	 movzx	 ecx, BYTE PTR [ebx+3]
  007e4	52		 push	 edx
  007e5	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _mapnumber$[ebp]
  007eb	50		 push	 eax
  007ec	51		 push	 ecx
  007ed	52		 push	 edx
  007ee	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@IBNDEANJ@Monster?5Item?5Drop?5?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?5?3@
  007f3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  007f9	83 c4 48	 add	 esp, 72			; 00000048H

; 3416 : 	}
; 3417 : }

  007fc	5f		 pop	 edi
  007fd	5e		 pop	 esi
  007fe	5b		 pop	 ebx
  007ff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00802	33 cd		 xor	 ecx, ebp
  00804	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00809	8b e5		 mov	 esp, ebp
  0080b	5d		 pop	 ebp
  0080c	c3		 ret	 0
$LN79@ItemSerial@2:

; 2947 : 	{
; 2948 : 		if ( gObjIsConnectedGP(aIndex) == FALSE )

  0080d	57		 push	 edi
  0080e	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  00813	83 c4 04	 add	 esp, 4
  00816	85 c0		 test	 eax, eax
  00818	75 2b		 jne	 SHORT $LN78@ItemSerial@2

; 2949 : 		{
; 2950 : 			LogAddC(2, "error-L3 [%s][%d]", __FILE__, __LINE__);

  0081a	68 86 0b 00 00	 push	 2950			; 00000b86H
  0081f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@
  00824	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OFCHNMFP@error?9L3?5?$FL?$CFs?$FN?$FL?$CFd?$FN?$AA@
  00829	6a 02		 push	 2
  0082b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00831	83 c4 10	 add	 esp, 16			; 00000010H

; 3416 : 	}
; 3417 : }

  00834	5f		 pop	 edi
  00835	5e		 pop	 esi
  00836	5b		 pop	 ebx
  00837	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0083a	33 cd		 xor	 ecx, ebp
  0083c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00841	8b e5		 mov	 esp, ebp
  00843	5d		 pop	 ebp
  00844	c3		 ret	 0
$LN78@ItemSerial@2:

; 2951 : 			return;
; 2952 : 		}
; 2953 : 		
; 2954 : 		lpObj = &gObj[aIndex];

  00845	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0084b	8b c7		 mov	 eax, edi
  0084d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00853	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  00856	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv1519[ebp], eax

; 2955 : 
; 2956 : 		if ( lpMsg->MapNumber == (BYTE)-2 )

  0085c	8a 43 05	 mov	 al, BYTE PTR [ebx+5]
  0085f	89 75 f0	 mov	 DWORD PTR _lpObj$[ebp], esi
  00862	3c fe		 cmp	 al, 254			; 000000feH
  00864	75 33		 jne	 SHORT $LN77@ItemSerial@2

; 2957 : 		{
; 2958 : 			if ( lpObj->m_IfState.type != 13 )

  00866	8b 96 1c 0e 00
	00		 mov	 edx, DWORD PTR [esi+3612]
  0086c	81 e2 c0 ff 00
	00		 and	 edx, 65472		; 0000ffc0H
  00872	81 fa 40 03 00
	00		 cmp	 edx, 832		; 00000340H
  00878	74 52		 je	 SHORT $LN74@ItemSerial@2

; 2959 : 			{
; 2960 : 				LogAdd("error-L2: DarkTrainerBox not used.");

  0087a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JBKACADO@error?9L2?3?5DarkTrainerBox?5not?5use@
  0087f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00885	83 c4 04	 add	 esp, 4

; 3416 : 	}
; 3417 : }

  00888	5f		 pop	 edi
  00889	5e		 pop	 esi
  0088a	5b		 pop	 ebx
  0088b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0088e	33 cd		 xor	 ecx, ebp
  00890	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00895	8b e5		 mov	 esp, ebp
  00897	5d		 pop	 ebp
  00898	c3		 ret	 0
$LN77@ItemSerial@2:

; 2961 : 				return;
; 2962 : 			}
; 2963 : 		}
; 2964 : 		else if ( lpObj->m_IfState.type != 7 )

  00899	8b 8e 1c 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3612]
  0089f	81 e1 c0 ff 00
	00		 and	 ecx, 65472		; 0000ffc0H
  008a5	81 f9 c0 01 00
	00		 cmp	 ecx, 448		; 000001c0H
  008ab	74 1f		 je	 SHORT $LN74@ItemSerial@2

; 2965 : 		{
; 2966 : 			LogAdd("error-L2: ChaosBox not used.");

  008ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BDLDNMBN@error?9L2?3?5ChaosBox?5not?5used?4?$AA@
  008b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  008b8	83 c4 04	 add	 esp, 4

; 3416 : 	}
; 3417 : }

  008bb	5f		 pop	 edi
  008bc	5e		 pop	 esi
  008bd	5b		 pop	 ebx
  008be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008c1	33 cd		 xor	 ecx, ebp
  008c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008c8	8b e5		 mov	 esp, ebp
  008ca	5d		 pop	 ebp
  008cb	c3		 ret	 0
$LN74@ItemSerial@2:

; 2967 : 			return;
; 2968 : 		}
; 2969 : 		
; 2970 : 		PMSG_CHAOSMIXRESULT pMsg;
; 2971 : 
; 2972 : 		pMsg.h.c = 0xC1;
; 2973 : 		pMsg.h.headcode = 0x86;
; 2974 : 		pMsg.h.size = sizeof(PMSG_CHAOSMIXRESULT);
; 2975 : 
; 2976 : 		if ( lpMsg->MapNumber == (BYTE)-2 )

  008cc	3c fe		 cmp	 al, 254			; 000000feH
  008ce	0f 95 c2	 setne	 dl
  008d1	fe ca		 dec	 dl
  008d3	80 e2 63	 and	 dl, 99			; 00000063H
  008d6	fe c2		 inc	 dl

; 2977 : 		{
; 2978 : 			pMsg.Result = 100;
; 2979 : 		}
; 2980 : 		else
; 2981 : 		{
; 2982 : 			pMsg.Result = 1;
; 2983 : 		}
; 2984 : 
; 2985 : 		CItem NewItem;

  008d8	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _NewItem$228848[ebp]
  008de	c6 45 cc c1	 mov	 BYTE PTR _pMsg$228843[ebp], 193 ; 000000c1H
  008e2	66 c7 45 cd 10
	86		 mov	 WORD PTR _pMsg$228843[ebp+1], 34320 ; 00008610H
  008e8	88 55 cf	 mov	 BYTE PTR _pMsg$228843[ebp+3], dl
  008eb	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 2986 : 
; 2987 : 		NewItem.m_Level = lpMsg->Level;

  008f0	8a 43 0e	 mov	 al, BYTE PTR [ebx+14]

; 2988 : 		NewItem.m_Durability = (float)ItemGetDurability(lpMsg->Type, lpMsg->Level, lpMsg->NewOption, lpMsg->SetOption);

  008f3	0f b6 53 1a	 movzx	 edx, BYTE PTR [ebx+26]
  008f7	0f b6 c8	 movzx	 ecx, al
  008fa	52		 push	 edx
  008fb	66 89 8d 00 ff
	ff ff		 mov	 WORD PTR _NewItem$228848[ebp+8], cx
  00902	0f b6 4b 13	 movzx	 ecx, BYTE PTR [ebx+19]
  00906	0f b6 d0	 movzx	 edx, al
  00909	0f bf 43 0c	 movsx	 eax, WORD PTR [ebx+12]
  0090d	51		 push	 ecx
  0090e	52		 push	 edx
  0090f	50		 push	 eax
  00910	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  00915	89 45 f4	 mov	 DWORD PTR tv1572[ebp], eax

; 2989 : 
; 2990 : 		if ( lpMsg->Type == ITEMGET(14,7) ) // Siege Potion

  00918	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]
  0091c	db 45 f4	 fild	 DWORD PTR tv1572[ebp]
  0091f	b9 07 1c 00 00	 mov	 ecx, 7175		; 00001c07H
  00924	83 c4 10	 add	 esp, 16			; 00000010H
  00927	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _NewItem$228848[ebp+36]
  0092d	66 3b c1	 cmp	 ax, cx
  00930	75 10		 jne	 SHORT $LN71@ItemSerial@2

; 2991 : 		{
; 2992 : 			NewItem.m_Durability = lpMsg->Dur;

  00932	0f b6 53 0f	 movzx	 edx, BYTE PTR [ebx+15]
  00936	89 55 f4	 mov	 DWORD PTR tv1570[ebp], edx
  00939	db 45 f4	 fild	 DWORD PTR tv1570[ebp]
  0093c	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _NewItem$228848[ebp+36]
$LN71@ItemSerial@2:

; 2993 : 		}
; 2994 : 
; 2995 : 		if ( lpMsg->Type == ITEMGET(13,37) )

  00942	b9 25 1a 00 00	 mov	 ecx, 6693		; 00001a25H
  00947	66 3b c1	 cmp	 ax, cx
  0094a	75 10		 jne	 SHORT $LN70@ItemSerial@2

; 2996 : 		{
; 2997 : 			NewItem.m_Durability = lpMsg->Dur;// egfg

  0094c	0f b6 53 0f	 movzx	 edx, BYTE PTR [ebx+15]
  00950	89 55 f4	 mov	 DWORD PTR tv1569[ebp], edx
  00953	db 45 f4	 fild	 DWORD PTR tv1569[ebp]
  00956	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _NewItem$228848[ebp+36]
$LN70@ItemSerial@2:

; 2998 : 		}
; 2999 : 
; 3000 : #ifdef PRIVATE_MODULE
; 3001 : 
; 3002 : #ifdef GRAND_HERO_DEV
; 3003 : 		if(g_ZtLicense.user.GrandHero)

  0095c	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  00963	74 57		 je	 SHORT $LN102@ItemSerial@2

; 3004 : 		{
; 3005 : 			if(GrandHero.SockeetItem(lpMsg->Type) == TRUE)

  00965	98		 cwde
  00966	50		 push	 eax
  00967	b9 00 00 00 00	 mov	 ecx, OFFSET ?GrandHero@@3VcGrandHero@@A ; GrandHero
  0096c	e8 00 00 00 00	 call	 ?SockeetItem@cGrandHero@@QAE_NH@Z ; cGrandHero::SockeetItem

; 3006 : 			{
; 3007 : 				BYTE Sockeet[5] = {0xFE,0xFE,0xFE,0xFE,0xFE};
; 3008 : 				NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, Sockeet, 0xFF, 0, CURRENT_DB_VERSION);

  00971	0f b6 53 1a	 movzx	 edx, BYTE PTR [ebx+26]
  00975	6a 03		 push	 3
  00977	6a 00		 push	 0
  00979	3c 01		 cmp	 al, 1
  0097b	0f b6 43 13	 movzx	 eax, BYTE PTR [ebx+19]
  0097f	68 ff 00 00 00	 push	 255			; 000000ffH
  00984	75 11		 jne	 SHORT $LN68@ItemSerial@2
  00986	8d 4d f4	 lea	 ecx, DWORD PTR _Sockeet$228854[ebp]
  00989	c7 45 f4 fe fe
	fe fe		 mov	 DWORD PTR _Sockeet$228854[ebp], -16843010 ; fefefefeH
  00990	c6 45 f8 fe	 mov	 BYTE PTR _Sockeet$228854[ebp+4], 254 ; 000000feH
  00994	51		 push	 ecx

; 3009 : 			}
; 3010 : 			else

  00995	eb 02		 jmp	 SHORT $LN107@ItemSerial@2
$LN68@ItemSerial@2:

; 3011 : 			{
; 3012 : 				NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, 0, 0xFF, 0, CURRENT_DB_VERSION);

  00997	6a 00		 push	 0
$LN107@ItemSerial@2:
  00999	0f b6 4b 12	 movzx	 ecx, BYTE PTR [ebx+18]
  0099d	6a 00		 push	 0
  0099f	52		 push	 edx
  009a0	0f b6 53 11	 movzx	 edx, BYTE PTR [ebx+17]
  009a4	50		 push	 eax
  009a5	0f b6 43 10	 movzx	 eax, BYTE PTR [ebx+16]
  009a9	51		 push	 ecx
  009aa	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  009ae	52		 push	 edx
  009af	50		 push	 eax
  009b0	51		 push	 ecx
  009b1	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _NewItem$228848[ebp]
  009b7	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert
$LN102@ItemSerial@2:

; 3013 : 			}
; 3014 : 		}
; 3015 : #endif
; 3016 : 		if(g_ZtLicense.CheckUser(eZtUB::drynea) || g_ZtLicense.CheckUser(eZtUB::MedoniAndrei))

  009bc	6a 01		 push	 1
  009be	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  009c3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  009c8	84 c0		 test	 al, al
  009ca	75 14		 jne	 SHORT $LN65@ItemSerial@2
  009cc	6a 32		 push	 50			; 00000032H
  009ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  009d3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  009d8	84 c0		 test	 al, al

; 3053 : 			}
; 3054 : 		}
; 3055 : 		else
; 3056 : 		{
; 3057 : 			NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, NULL, 0xFF, 0, CURRENT_DB_VERSION);

  009da	0f 84 f7 00 00
	00		 je	 $LN64@ItemSerial@2
$LN65@ItemSerial@2:

; 3017 : 		{
; 3018 : 			if(g_SocketOption.CheckItemType(lpMsg->Type))

  009e0	0f bf 53 0c	 movsx	 edx, WORD PTR [ebx+12]
  009e4	52		 push	 edx
  009e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  009ea	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType
  009ef	84 c0		 test	 al, al
  009f1	0f 84 e0 00 00
	00		 je	 $LN64@ItemSerial@2

; 3019 : 			{
; 3020 : 				if(lpObj->MixManagerSocket == 1)

  009f7	8a 86 1c 28 00
	00		 mov	 al, BYTE PTR [esi+10268]
  009fd	3c 01		 cmp	 al, 1
  009ff	75 3d		 jne	 SHORT $LN63@ItemSerial@2

; 3021 : 				{
; 3022 : 					BYTE Sockeet[5] = {0xFE,0xFF,0xFF,0xFF,0xFF};

  00a01	c7 45 f4 fe ff
	ff ff		 mov	 DWORD PTR _Sockeet$228860[ebp], -2 ; fffffffeH
$LN111@ItemSerial@2:

; 3023 : 					NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, Sockeet, 0xFF, 0, CURRENT_DB_VERSION);

  00a08	0f b6 4b 1a	 movzx	 ecx, BYTE PTR [ebx+26]
  00a0c	0f b6 53 13	 movzx	 edx, BYTE PTR [ebx+19]
  00a10	6a 03		 push	 3
  00a12	6a 00		 push	 0
  00a14	68 ff 00 00 00	 push	 255			; 000000ffH
  00a19	8d 45 f4	 lea	 eax, DWORD PTR _Sockeet$228860[ebp]
  00a1c	50		 push	 eax
  00a1d	0f b6 43 12	 movzx	 eax, BYTE PTR [ebx+18]
  00a21	6a 00		 push	 0
  00a23	51		 push	 ecx
  00a24	0f b6 4b 11	 movzx	 ecx, BYTE PTR [ebx+17]
  00a28	52		 push	 edx
  00a29	0f b6 53 10	 movzx	 edx, BYTE PTR [ebx+16]
  00a2d	50		 push	 eax
  00a2e	0f bf 43 0c	 movsx	 eax, WORD PTR [ebx+12]
  00a32	51		 push	 ecx
  00a33	52		 push	 edx
  00a34	c6 45 f8 ff	 mov	 BYTE PTR _Sockeet$228860[ebp+4], 255 ; 000000ffH
  00a38	50		 push	 eax
  00a39	e9 c4 00 00 00	 jmp	 $LN108@ItemSerial@2
$LN63@ItemSerial@2:

; 3024 : 				}
; 3025 : 				else if(lpObj->MixManagerSocket == 2)

  00a3e	3c 02		 cmp	 al, 2
  00a40	75 1d		 jne	 SHORT $LN61@ItemSerial@2

; 3026 : 				{
; 3027 : 					BYTE Sockeet[5] = {0xFE,0xFE,0xFF,0xFF,0xFF};
; 3028 : 					NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, Sockeet, 0xFF, 0, CURRENT_DB_VERSION);

  00a42	6a 03		 push	 3
  00a44	6a 00		 push	 0
  00a46	68 ff 00 00 00	 push	 255			; 000000ffH
  00a4b	8d 4d f4	 lea	 ecx, DWORD PTR _Sockeet$228863[ebp]
  00a4e	c7 45 f4 fe fe
	ff ff		 mov	 DWORD PTR _Sockeet$228863[ebp], -258 ; fffffefeH
  00a55	c6 45 f8 ff	 mov	 BYTE PTR _Sockeet$228863[ebp+4], 255 ; 000000ffH
  00a59	51		 push	 ecx
  00a5a	e9 83 00 00 00	 jmp	 $LN109@ItemSerial@2
$LN61@ItemSerial@2:

; 3029 : 				}
; 3030 : 				else if(lpObj->MixManagerSocket == 3)

  00a5f	3c 03		 cmp	 al, 3
  00a61	75 3a		 jne	 SHORT $LN59@ItemSerial@2

; 3031 : 				{
; 3032 : 					BYTE Sockeet[5] = {0xFE,0xFE,0xFE,0xFF,0xFF};
; 3033 : 					NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, Sockeet, 0xFF, 0, CURRENT_DB_VERSION);

  00a63	0f b6 43 1a	 movzx	 eax, BYTE PTR [ebx+26]
  00a67	0f b6 4b 13	 movzx	 ecx, BYTE PTR [ebx+19]
  00a6b	6a 03		 push	 3
  00a6d	6a 00		 push	 0
  00a6f	68 ff 00 00 00	 push	 255			; 000000ffH
  00a74	8d 55 f4	 lea	 edx, DWORD PTR _Sockeet$228866[ebp]
  00a77	52		 push	 edx
  00a78	0f b6 53 12	 movzx	 edx, BYTE PTR [ebx+18]
  00a7c	6a 00		 push	 0
  00a7e	50		 push	 eax
  00a7f	0f b6 43 11	 movzx	 eax, BYTE PTR [ebx+17]
  00a83	51		 push	 ecx
  00a84	0f b6 4b 10	 movzx	 ecx, BYTE PTR [ebx+16]
  00a88	52		 push	 edx
  00a89	0f bf 53 0c	 movsx	 edx, WORD PTR [ebx+12]
  00a8d	50		 push	 eax
  00a8e	51		 push	 ecx
  00a8f	c7 45 f4 fe fe
	fe ff		 mov	 DWORD PTR _Sockeet$228866[ebp], -65794 ; fffefefeH
  00a96	c6 45 f8 ff	 mov	 BYTE PTR _Sockeet$228866[ebp+4], 255 ; 000000ffH
  00a9a	52		 push	 edx
  00a9b	eb 65		 jmp	 SHORT $LN108@ItemSerial@2
$LN59@ItemSerial@2:

; 3034 : 				}
; 3035 : 				else if(lpObj->MixManagerSocket == 4)

  00a9d	3c 04		 cmp	 al, 4
  00a9f	75 0c		 jne	 SHORT $LN57@ItemSerial@2

; 3036 : 				{
; 3037 : 					BYTE Sockeet[5] = {0xFE,0xFE,0xFE,0xFE,0xFF};

  00aa1	c7 45 f4 fe fe
	fe fe		 mov	 DWORD PTR _Sockeet$228869[ebp], -16843010 ; fefefefeH

; 3038 : 					NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, Sockeet, 0xFF, 0, CURRENT_DB_VERSION);

  00aa8	e9 5b ff ff ff	 jmp	 $LN111@ItemSerial@2
$LN57@ItemSerial@2:

; 3039 : 				}
; 3040 : 				else if(lpObj->MixManagerSocket == 5)
; 3041 : 				{
; 3042 : 					BYTE Sockeet[5] = {0xFE,0xFE,0xFE,0xFE,0xFE};
; 3043 : 					NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, Sockeet, 0xFF, 0, CURRENT_DB_VERSION);

  00aad	0f b6 53 1a	 movzx	 edx, BYTE PTR [ebx+26]
  00ab1	6a 03		 push	 3
  00ab3	6a 00		 push	 0
  00ab5	3c 05		 cmp	 al, 5
  00ab7	0f b6 43 13	 movzx	 eax, BYTE PTR [ebx+19]
  00abb	68 ff 00 00 00	 push	 255			; 000000ffH
  00ac0	75 11		 jne	 SHORT $LN55@ItemSerial@2
  00ac2	8d 4d f4	 lea	 ecx, DWORD PTR _Sockeet$228872[ebp]
  00ac5	c7 45 f4 fe fe
	fe fe		 mov	 DWORD PTR _Sockeet$228872[ebp], -16843010 ; fefefefeH
  00acc	c6 45 f8 fe	 mov	 BYTE PTR _Sockeet$228872[ebp+4], 254 ; 000000feH
  00ad0	51		 push	 ecx

; 3044 : 				}
; 3045 : 				else

  00ad1	eb 17		 jmp	 SHORT $LN110@ItemSerial@2
$LN55@ItemSerial@2:

; 3046 : 				{
; 3047 : 					NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, NULL, 0xFF, 0, CURRENT_DB_VERSION);

  00ad3	6a 00		 push	 0

; 3048 : 				}
; 3049 : 			}
; 3050 : 			else

  00ad5	eb 13		 jmp	 SHORT $LN110@ItemSerial@2
$LN64@ItemSerial@2:

; 3051 : 			{
; 3052 : 				NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, NULL, 0xFF, 0, CURRENT_DB_VERSION);

  00ad7	6a 03		 push	 3
  00ad9	6a 00		 push	 0
  00adb	68 ff 00 00 00	 push	 255			; 000000ffH
  00ae0	6a 00		 push	 0
$LN109@ItemSerial@2:
  00ae2	0f b6 53 1a	 movzx	 edx, BYTE PTR [ebx+26]
  00ae6	0f b6 43 13	 movzx	 eax, BYTE PTR [ebx+19]
$LN110@ItemSerial@2:
  00aea	0f b6 4b 12	 movzx	 ecx, BYTE PTR [ebx+18]
  00aee	6a 00		 push	 0
  00af0	52		 push	 edx
  00af1	0f b6 53 11	 movzx	 edx, BYTE PTR [ebx+17]
  00af5	50		 push	 eax
  00af6	0f b6 43 10	 movzx	 eax, BYTE PTR [ebx+16]
  00afa	51		 push	 ecx
  00afb	0f bf 4b 0c	 movsx	 ecx, WORD PTR [ebx+12]
  00aff	52		 push	 edx
  00b00	50		 push	 eax
  00b01	51		 push	 ecx
$LN108@ItemSerial@2:
  00b02	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _NewItem$228848[ebp]
  00b08	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 3058 : 		}
; 3059 : #else
; 3060 : 		NewItem.Convert(lpMsg->Type,lpMsg->Op1, lpMsg->Op2, lpMsg->Op3,lpMsg->NewOption, lpMsg->SetOption,0, NULL, 0xFF, 0, CURRENT_DB_VERSION);
; 3061 : #endif
; 3062 : 		ItemByteConvert(pMsg.ItemInfo, NewItem);

  00b0d	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00b13	8d 55 d0	 lea	 edx, DWORD PTR _pMsg$228843[ebp+4]
  00b16	8b fc		 mov	 edi, esp
  00b18	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00b1d	8d b5 f8 fe ff
	ff		 lea	 esi, DWORD PTR _NewItem$228848[ebp]
  00b23	52		 push	 edx
  00b24	f3 a5		 rep movsd
  00b26	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 3063 : 
; 3064 : 		NewItem.m_Number = lpMsg->m_Number;
; 3065 : 		g_MixSystem.ChaosBoxInit(lpObj);

  00b2b	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00b2e	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00b31	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00b37	51		 push	 ecx
  00b38	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MixSystem@@3VCMixSystem@@A ; g_MixSystem
  00b3d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _NewItem$228848[ebp], eax
  00b43	e8 00 00 00 00	 call	 ?ChaosBoxInit@CMixSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMixSystem::ChaosBoxInit

; 3066 : 		gObjChaosBoxInsertItemPos(aIndex, NewItem, 0, -1);

  00b48	6a ff		 push	 -1
  00b4a	6a 00		 push	 0
  00b4c	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00b52	8b fc		 mov	 edi, esp
  00b54	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00b59	8d b5 f8 fe ff
	ff		 lea	 esi, DWORD PTR _NewItem$228848[ebp]
  00b5f	f3 a5		 rep movsd
  00b61	8b 75 dc	 mov	 esi, DWORD PTR tv1415[ebp]
  00b64	56		 push	 esi
  00b65	e8 00 00 00 00	 call	 ?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z ; gObjChaosBoxInsertItemPos

; 3067 : 		gObjChaosItemSet(aIndex, 0, 1);

  00b6a	6a 01		 push	 1
  00b6c	6a 00		 push	 0
  00b6e	56		 push	 esi
  00b6f	e8 00 00 00 00	 call	 ?gObjChaosItemSet@@YAXHHE@Z ; gObjChaosItemSet
  00b74	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH

; 3068 : 		BYTE ExOption[MAX_EXOPTION_SIZE];
; 3069 : 		ItemIsBufExOption(ExOption, &NewItem);

  00b7a	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _NewItem$228848[ebp]
  00b80	52		 push	 edx
  00b81	8d 45 e4	 lea	 eax, DWORD PTR _ExOption$228876[ebp]
  00b84	50		 push	 eax
  00b85	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 3070 : 
; 3071 : 		LogAddTD("[%s][%s] CBMix Item Create Item:%s [%u][%d] [%d][%d][%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d]",	lpObj->AccountID, lpObj->Name, NewItem.GetName(), lpMsg->m_Number, lpMsg->Dur, NewItem.m_Level, NewItem.m_Option1, NewItem.m_Option2, NewItem.m_Option3, ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5], ExOption[6], lpMsg->SetOption);

  00b8a	0f b6 4b 1a	 movzx	 ecx, BYTE PTR [ebx+26]
  00b8e	0f b6 55 ea	 movzx	 edx, BYTE PTR _ExOption$228876[ebp+6]
  00b92	0f b6 45 e9	 movzx	 eax, BYTE PTR _ExOption$228876[ebp+5]
  00b96	83 c4 08	 add	 esp, 8
  00b99	51		 push	 ecx
  00b9a	0f b6 4d e8	 movzx	 ecx, BYTE PTR _ExOption$228876[ebp+4]
  00b9e	52		 push	 edx
  00b9f	0f b6 55 e7	 movzx	 edx, BYTE PTR _ExOption$228876[ebp+3]
  00ba3	50		 push	 eax
  00ba4	0f b6 45 e6	 movzx	 eax, BYTE PTR _ExOption$228876[ebp+2]
  00ba8	51		 push	 ecx
  00ba9	0f b6 4d e5	 movzx	 ecx, BYTE PTR _ExOption$228876[ebp+1]
  00bad	52		 push	 edx
  00bae	0f b6 55 e4	 movzx	 edx, BYTE PTR _ExOption$228876[ebp]
  00bb2	50		 push	 eax
  00bb3	0f b6 45 8e	 movzx	 eax, BYTE PTR _NewItem$228848[ebp+150]
  00bb7	51		 push	 ecx
  00bb8	0f b6 4d 8d	 movzx	 ecx, BYTE PTR _NewItem$228848[ebp+149]
  00bbc	52		 push	 edx
  00bbd	0f b6 55 8c	 movzx	 edx, BYTE PTR _NewItem$228848[ebp+148]
  00bc1	50		 push	 eax
  00bc2	0f bf 85 00 ff
	ff ff		 movsx	 eax, WORD PTR _NewItem$228848[ebp+8]
  00bc9	51		 push	 ecx
  00bca	0f b6 4b 0f	 movzx	 ecx, BYTE PTR [ebx+15]
  00bce	52		 push	 edx
  00bcf	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00bd2	50		 push	 eax
  00bd3	51		 push	 ecx
  00bd4	52		 push	 edx
  00bd5	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _NewItem$228848[ebp]
  00bdb	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  00be0	50		 push	 eax
  00be1	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00be4	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  00be7	51		 push	 ecx
  00be8	83 c0 6c	 add	 eax, 108		; 0000006cH
  00beb	50		 push	 eax
  00bec	68 00 00 00 00	 push	 OFFSET ??_C@_0GA@MJMGDDA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Item?5Create?5Item?3@
  00bf1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3072 : 
; 3073 : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00bf7	0f b6 55 cd	 movzx	 edx, BYTE PTR _pMsg$228843[ebp+1]
  00bfb	52		 push	 edx
  00bfc	8d 45 cc	 lea	 eax, DWORD PTR _pMsg$228843[ebp]
  00bff	50		 push	 eax
  00c00	56		 push	 esi
  00c01	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3074 : 		gObj[aIndex].ChaosLock = FALSE;

  00c06	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00c0c	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR tv1519[ebp]
  00c12	83 c4 54	 add	 esp, 84			; 00000054H
  00c15	c7 84 0a 88 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+3720], 0
$LN28@ItemSerial@2:

; 3416 : 	}
; 3417 : }

  00c20	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c23	5f		 pop	 edi
  00c24	5e		 pop	 esi
  00c25	33 cd		 xor	 ecx, ebp
  00c27	5b		 pop	 ebx
  00c28	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c2d	8b e5		 mov	 esp, ebp
  00c2f	5d		 pop	 ebp
  00c30	c3		 ret	 0
?ItemSerialCreateRecv@@YAXPAUSDHP_ITEMCREATERECV@@@Z ENDP ; ItemSerialCreateRecv
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ItemMovePathSave@@YAXPAD0EEEE0EEEK@Z		; ItemMovePathSave
; Function compile flags: /Ogtp
;	COMDAT ?ItemMovePathSave@@YAXPAD0EEEE0EEEK@Z
_TEXT	SEGMENT
_pMsg$ = -80						; size = 76
__$ArrayPad$ = -4					; size = 4
_ActID$ = 8						; size = 4
_Name$ = 12						; size = 4
_level$ = 16						; size = 1
_mapnumber$ = 20					; size = 1
_x$ = 24						; size = 1
_y$ = 28						; size = 1
_Item$ = 32						; size = 4
_op1$ = 36						; size = 1
_op2$ = 40						; size = 1
_op3$ = 44						; size = 1
_serial$ = 48						; size = 4
?ItemMovePathSave@@YAXPAD0EEEE0EEEK@Z PROC		; ItemMovePathSave, COMDAT

; 3443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3457 : 	strcpy(pMsg.ItemName, Item);

  00010	56		 push	 esi

; 3444 : 	SDHP_ITEMMOVESAVE pMsg;
; 3445 : 
; 3446 : 	pMsg.h.c = 0xC1;
; 3447 : 	pMsg.h.headcode = 0x53;
; 3448 : 	pMsg.h.size = sizeof(pMsg);
; 3449 : 	pMsg.ItemLevel = level;
; 3450 : 	pMsg.Serial = serial;

  00011	8b 55 30	 mov	 edx, DWORD PTR _serial$[ebp]
  00014	8a 4d 10	 mov	 cl, BYTE PTR _level$[ebp]
  00017	8b 45 08	 mov	 eax, DWORD PTR _ActID$[ebp]
  0001a	89 55 b4	 mov	 DWORD PTR _pMsg$[ebp+4], edx

; 3451 : 	pMsg.ItemOp1 = op1;
; 3452 : 	pMsg.ItemOp2 = op2;

  0001d	8a 55 28	 mov	 dl, BYTE PTR _op2$[ebp]
  00020	88 4d f7	 mov	 BYTE PTR _pMsg$[ebp+71], cl
  00023	8a 4d 24	 mov	 cl, BYTE PTR _op1$[ebp]
  00026	88 55 f9	 mov	 BYTE PTR _pMsg$[ebp+73], dl

; 3453 : 	pMsg.ItemOp3 = op3;
; 3454 : 	pMsg.X = x;

  00029	8a 55 18	 mov	 dl, BYTE PTR _x$[ebp]
  0002c	88 4d f8	 mov	 BYTE PTR _pMsg$[ebp+72], cl
  0002f	8a 4d 2c	 mov	 cl, BYTE PTR _op3$[ebp]
  00032	88 55 f5	 mov	 BYTE PTR _pMsg$[ebp+69], dl

; 3455 : 	pMsg.Y = y;
; 3456 : 	memcpy(pMsg.Account, ActID, sizeof(pMsg.Account));

  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	88 4d fa	 mov	 BYTE PTR _pMsg$[ebp+74], cl
  0003a	8a 4d 1c	 mov	 cl, BYTE PTR _y$[ebp]
  0003d	89 55 cc	 mov	 DWORD PTR _pMsg$[ebp+28], edx
  00040	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]
  00044	88 4d f6	 mov	 BYTE PTR _pMsg$[ebp+70], cl
  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 3457 : 	strcpy(pMsg.ItemName, Item);

  0004a	8b 45 20	 mov	 eax, DWORD PTR _Item$[ebp]
  0004d	66 89 55 d4	 mov	 WORD PTR _pMsg$[ebp+36], dx
  00051	8d 55 e0	 lea	 edx, DWORD PTR _pMsg$[ebp+48]
  00054	8b 75 0c	 mov	 esi, DWORD PTR _Name$[ebp]
  00057	c6 45 b0 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  0005b	66 c7 45 b1 4c
	53		 mov	 WORD PTR _pMsg$[ebp+1], 21324 ; 0000534cH
  00061	89 4d d0	 mov	 DWORD PTR _pMsg$[ebp+32], ecx
  00064	2b d0		 sub	 edx, eax
$LL3@ItemMovePa:
  00066	8a 08		 mov	 cl, BYTE PTR [eax]
  00068	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0006b	40		 inc	 eax
  0006c	84 c9		 test	 cl, cl
  0006e	75 f6		 jne	 SHORT $LL3@ItemMovePa

; 3458 : 	memcpy(pMsg.Name, Name, sizeof(pMsg.Name));

  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00075	66 8b 56 08	 mov	 dx, WORD PTR [esi+8]
  00079	89 45 d6	 mov	 DWORD PTR _pMsg$[ebp+38], eax
  0007c	89 4d da	 mov	 DWORD PTR _pMsg$[ebp+42], ecx
  0007f	66 89 55 de	 mov	 WORD PTR _pMsg$[ebp+46], dx

; 3459 : 	strcpy(pMsg.ServerName, szServerName);

  00083	33 c0		 xor	 eax, eax
  00085	5e		 pop	 esi
  00086	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL4@ItemMovePa:
  00090	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szServerName@@3PADA[eax]
  00096	88 4c 05 b8	 mov	 BYTE PTR _pMsg$[ebp+eax+8], cl
  0009a	40		 inc	 eax
  0009b	84 c9		 test	 cl, cl
  0009d	75 f1		 jne	 SHORT $LL4@ItemMovePa

; 3460 : 
; 3461 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0009f	0f b6 45 b1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000a3	50		 push	 eax
  000a4	8d 4d b0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000a7	51		 push	 ecx
  000a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000ad	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 3462 : }

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
?ItemMovePathSave@@YAXPAD0EEEE0EEEK@Z ENDP		; ItemMovePathSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DGOptionDataSend@@YAXHPADPAEEEEEEEH@Z		; DGOptionDataSend
; Function compile flags: /Ogtp
;	COMDAT ?DGOptionDataSend@@YAXHPADPAEEEEEEEH@Z
_TEXT	SEGMENT
_pMsg$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_szName$ = 12						; size = 4
_KeyBuffer$ = 16					; size = 4
_GO$ = 20						; size = 1
_Qk$ = 24						; size = 1
_Wk$ = 28						; size = 1
_Ek$ = 32						; size = 1
_ChatWnd$ = 36						; size = 1
_Rk$ = 40						; size = 1
_QWERLevel$ = 44					; size = 4
?DGOptionDataSend@@YAXHPADPAEEEEEEEH@Z PROC		; DGOptionDataSend, COMDAT

; 3486 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _szName$[ebp]

; 3487 : 	SDHP_SKILLKEYDATA pMsg;
; 3488 : 
; 3489 : 	pMsg.h.c = 0xC1;
; 3490 : 	pMsg.h.headcode = 0x60;
; 3491 : 	pMsg.h.size = sizeof(pMsg);
; 3492 : 	memcpy(pMsg.Name, szName, sizeof(pMsg.Name));

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	8b 45 10	 mov	 eax, DWORD PTR _KeyBuffer$[ebp]
  00018	89 55 d3	 mov	 DWORD PTR _pMsg$[ebp+3], edx
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	66 8b 49 08	 mov	 cx, WORD PTR [ecx+8]
  00022	66 89 4d db	 mov	 WORD PTR _pMsg$[ebp+11], cx

; 3493 : 	memcpy(pMsg.SkillKeyBuffer, KeyBuffer, sizeof(pMsg.SkillKeyBuffer));

  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	89 55 d7	 mov	 DWORD PTR _pMsg$[ebp+7], edx
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	89 4d e1	 mov	 DWORD PTR _pMsg$[ebp+17], ecx
  00031	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00034	89 55 dd	 mov	 DWORD PTR _pMsg$[ebp+13], edx
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	89 4d e9	 mov	 DWORD PTR _pMsg$[ebp+25], ecx

; 3494 : 	pMsg.GameOption = GO;
; 3495 : 	pMsg.QkeyDefine = Qk;

  0003d	8a 4d 18	 mov	 cl, BYTE PTR _Qk$[ebp]
  00040	89 55 e5	 mov	 DWORD PTR _pMsg$[ebp+21], edx
  00043	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00046	8a 45 14	 mov	 al, BYTE PTR _GO$[ebp]
  00049	88 4d f2	 mov	 BYTE PTR _pMsg$[ebp+34], cl

; 3496 : 	pMsg.WkeyDefine = Wk;
; 3497 : 	pMsg.EkeyDefine = Ek;
; 3498 : 	pMsg.ChatWindow = ChatWnd;

  0004c	8a 4d 24	 mov	 cl, BYTE PTR _ChatWnd$[ebp]
  0004f	89 55 ed	 mov	 DWORD PTR _pMsg$[ebp+29], edx
  00052	8a 55 1c	 mov	 dl, BYTE PTR _Wk$[ebp]
  00055	88 45 f1	 mov	 BYTE PTR _pMsg$[ebp+33], al
  00058	8a 45 20	 mov	 al, BYTE PTR _Ek$[ebp]
  0005b	88 4d f5	 mov	 BYTE PTR _pMsg$[ebp+37], cl

; 3499 : 	pMsg.RkeyDefine = Rk;
; 3500 : 	pMsg.QWERLevel = QWERLevel;
; 3501 : 
; 3502 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0005e	6a 2c		 push	 44			; 0000002cH
  00060	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00063	88 55 f3	 mov	 BYTE PTR _pMsg$[ebp+35], dl
  00066	8a 55 28	 mov	 dl, BYTE PTR _Rk$[ebp]
  00069	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+36], al
  0006c	8b 45 2c	 mov	 eax, DWORD PTR _QWERLevel$[ebp]
  0006f	51		 push	 ecx
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00075	c6 45 d0 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00079	66 c7 45 d1 2c
	60		 mov	 WORD PTR _pMsg$[ebp+1], 24620 ; 0000602cH
  0007f	88 55 f6	 mov	 BYTE PTR _pMsg$[ebp+38], dl
  00082	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+40], eax
  00085	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 3503 : }

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008d	33 cd		 xor	 ecx, ebp
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?DGOptionDataSend@@YAXHPADPAEEEEEEEH@Z ENDP		; DGOptionDataSend
_TEXT	ENDS
PUBLIC	?DGOptionDataRecv@@YAXPAUSDHP_SKILLKEYDATA_SEND@@@Z ; DGOptionDataRecv
EXTRN	?GCSkillKeySend@@YAXHPAEEEEEEEH@Z:PROC		; GCSkillKeySend
; Function compile flags: /Ogtp
;	COMDAT ?DGOptionDataRecv@@YAXPAUSDHP_SKILLKEYDATA_SEND@@@Z
_TEXT	SEGMENT
_szName$ = -12						; size = 11
_lpMsg$ = 8						; size = 4
?DGOptionDataRecv@@YAXPAUSDHP_SKILLKEYDATA_SEND@@@Z PROC ; DGOptionDataRecv, COMDAT

; 3507 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 3508 : 	int aIndex = lpMsg->aIndex;

  00007	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 3509 : 	char szName[MAX_ACCOUNT_LEN+1];
; 3510 : 
; 3511 : 	if ( aIndex < 0 || aIndex >= OBJMAX )

  0000e	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00014	0f 87 90 00 00
	00		 ja	 $LN2@DGOptionDa

; 3512 : 	{
; 3513 : 		return;
; 3514 : 	}
; 3515 : 
; 3516 : 	memset(szName, 0, sizeof(szName));
; 3517 : 	memcpy(szName, lpMsg->Name, sizeof(lpMsg->Name));

  0001a	66 8b 56 10	 mov	 dx, WORD PTR [esi+16]
  0001e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00021	33 c0		 xor	 eax, eax
  00023	89 45 f4	 mov	 DWORD PTR _szName$[ebp], eax
  00026	89 45 f8	 mov	 DWORD PTR _szName$[ebp+4], eax
  00029	66 89 45 fc	 mov	 WORD PTR _szName$[ebp+8], ax
  0002d	88 45 fe	 mov	 BYTE PTR _szName$[ebp+10], al
  00030	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00033	89 45 f4	 mov	 DWORD PTR _szName$[ebp], eax

; 3518 : 
; 3519 : 	if ( strcmp(gObj[aIndex].Name, szName) != 0 )

  00036	8b c7		 mov	 eax, edi
  00038	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003e	66 89 55 fc	 mov	 WORD PTR _szName$[ebp+8], dx
  00042	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00048	89 4d f8	 mov	 DWORD PTR _szName$[ebp+4], ecx
  0004b	8d 4d f4	 lea	 ecx, DWORD PTR _szName$[ebp]
  0004e	8d 44 10 77	 lea	 eax, DWORD PTR [eax+edx+119]
$LL6@DGOptionDa:
  00052	8a 10		 mov	 dl, BYTE PTR [eax]
  00054	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00056	75 1a		 jne	 SHORT $LN7@DGOptionDa
  00058	84 d2		 test	 dl, dl
  0005a	74 12		 je	 SHORT $LN8@DGOptionDa
  0005c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00062	75 0e		 jne	 SHORT $LN7@DGOptionDa
  00064	83 c0 02	 add	 eax, 2
  00067	83 c1 02	 add	 ecx, 2
  0006a	84 d2		 test	 dl, dl
  0006c	75 e4		 jne	 SHORT $LL6@DGOptionDa
$LN8@DGOptionDa:
  0006e	33 c0		 xor	 eax, eax
  00070	eb 05		 jmp	 SHORT $LN9@DGOptionDa
$LN7@DGOptionDa:
  00072	1b c0		 sbb	 eax, eax
  00074	83 d8 ff	 sbb	 eax, -1
$LN9@DGOptionDa:
  00077	85 c0		 test	 eax, eax
  00079	75 2f		 jne	 SHORT $LN2@DGOptionDa

; 3520 : 	{
; 3521 : 		return;
; 3522 : 	}
; 3523 : 
; 3524 : 	::GCSkillKeySend(aIndex, lpMsg->SkillKeyBuffer, lpMsg->GameOption, lpMsg->QkeyDefine, lpMsg->WkeyDefine, lpMsg->EkeyDefine, lpMsg->ChatWindow, lpMsg->RkeyDefine, lpMsg->QWERLevel);

  0007b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0007e	0f b6 4e 2b	 movzx	 ecx, BYTE PTR [esi+43]
  00082	0f b6 56 2a	 movzx	 edx, BYTE PTR [esi+42]
  00086	50		 push	 eax
  00087	0f b6 46 29	 movzx	 eax, BYTE PTR [esi+41]
  0008b	51		 push	 ecx
  0008c	0f b6 4e 28	 movzx	 ecx, BYTE PTR [esi+40]
  00090	52		 push	 edx
  00091	0f b6 56 27	 movzx	 edx, BYTE PTR [esi+39]
  00095	50		 push	 eax
  00096	0f b6 46 26	 movzx	 eax, BYTE PTR [esi+38]
  0009a	51		 push	 ecx
  0009b	52		 push	 edx
  0009c	50		 push	 eax
  0009d	83 c6 12	 add	 esi, 18			; 00000012H
  000a0	56		 push	 esi
  000a1	57		 push	 edi
  000a2	e8 00 00 00 00	 call	 ?GCSkillKeySend@@YAXHPAEEEEEEEH@Z ; GCSkillKeySend
  000a7	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@DGOptionDa:
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi

; 3525 : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?DGOptionDataRecv@@YAXPAUSDHP_SKILLKEYDATA_SEND@@@Z ENDP ; DGOptionDataRecv
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?gObjRequestPetItemInfo@@YAXHH@Z		; gObjRequestPetItemInfo
; Function compile flags: /Ogtp
;	COMDAT ?gObjRequestPetItemInfo@@YAXHH@Z
_TEXT	SEGMENT
_petIteminfo$ = -4144					; size = 8
_aIndex$GSCopy$ = -4136					; size = 4
_pMsg$229096 = -4132					; size = 20
_lofs$ = -4112						; size = 4
_founditemcount$ = -4108				; size = 4
_n$229088 = -4104					; size = 4
_n$229079 = -4104					; size = 4
_pbuffer$ = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_inventype$ = 12					; size = 4
?gObjRequestPetItemInfo@@YAXHH@Z PROC			; gObjRequestPetItemInfo, COMDAT

; 3591 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 30 10 00 00	 mov	 eax, 4144		; 00001030H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3592 : 	LPOBJ lpObj = &gObj[aIndex];
; 3593 : 	char pbuffer[WAREHOUSE_BUFF];//Season 4.5 change size in 2x times
; 3594 : 	int lofs = sizeof(SDHP_REQUEST_PETITEM_INFO);
; 3595 : 	int founditemcount = 0;
; 3596 : 	Request_PetItem_Info petIteminfo;
; 3597 : 
; 3598 : 	if ( inventype == 0 )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _inventype$[ebp]
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0001f	89 b5 d8 ef ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  00025	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0002b	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	33 db		 xor	 ebx, ebx
  00033	57		 push	 edi
  00034	c7 85 f0 ef ff
	ff 14 00 00 00	 mov	 DWORD PTR _lofs$[ebp], 20 ; 00000014H
  0003e	89 9d f4 ef ff
	ff		 mov	 DWORD PTR _founditemcount$[ebp], ebx
  00044	3b c3		 cmp	 eax, ebx
  00046	0f 85 87 00 00
	00		 jne	 $LN16@gObjReques

; 3599 : 	{
; 3600 : 		for ( int n=0;n<INVENTORY_SIZE;n++)

  0004c	89 9d f8 ef ff
	ff		 mov	 DWORD PTR _n$229079[ebp], ebx
  00052	8d bd 10 f0 ff
	ff		 lea	 edi, DWORD PTR _pbuffer$[ebp+20]
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL15@gObjReques:

; 3601 : 		{
; 3602 : 			if ( lpObj->pInventory[n].IsItem() )

  00060	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00066	03 cb		 add	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	85 c0		 test	 eax, eax
  0006f	74 49		 je	 SHORT $LN14@gObjReques

; 3603 : 			{
; 3604 : 				if ( lpObj->pInventory[n].m_Type == ITEMGET(13,4) || lpObj->pInventory[n].m_Type == ITEMGET(13,5) )

  00071	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  00077	0f b7 4c 18 06	 movzx	 ecx, WORD PTR [eax+ebx+6]
  0007c	ba 04 1a 00 00	 mov	 edx, 6660		; 00001a04H
  00081	66 3b ca	 cmp	 cx, dx
  00084	74 0a		 je	 SHORT $LN10@gObjReques
  00086	ba 05 1a 00 00	 mov	 edx, 6661		; 00001a05H
  0008b	66 3b ca	 cmp	 cx, dx
  0008e	75 2a		 jne	 SHORT $LN14@gObjReques
$LN10@gObjReques:

; 3605 : 				{
; 3606 : 					founditemcount++;
; 3607 : 					petIteminfo.nPos = n;

  00090	8a 8d f8 ef ff
	ff		 mov	 cl, BYTE PTR _n$229079[ebp]

; 3608 : 					petIteminfo.nSerial = lpObj->pInventory[n].m_Number;

  00096	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  00099	ff 85 f4 ef ff
	ff		 inc	 DWORD PTR _founditemcount$[ebp]

; 3609 : 					memcpy(&pbuffer[lofs], &petIteminfo, sizeof(petIteminfo));
; 3610 : 					lofs +=sizeof(petIteminfo);

  0009f	83 85 f0 ef ff
	ff 08		 add	 DWORD PTR _lofs$[ebp], 8
  000a6	88 8d d0 ef ff
	ff		 mov	 BYTE PTR _petIteminfo$[ebp], cl
  000ac	8b 95 d0 ef ff
	ff		 mov	 edx, DWORD PTR _petIteminfo$[ebp]
  000b2	89 17		 mov	 DWORD PTR [edi], edx
  000b4	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000b7	83 c7 08	 add	 edi, 8
$LN14@gObjReques:

; 3599 : 	{
; 3600 : 		for ( int n=0;n<INVENTORY_SIZE;n++)

  000ba	ff 85 f8 ef ff
	ff		 inc	 DWORD PTR _n$229079[ebp]
  000c0	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  000c6	81 fb 70 c3 00
	00		 cmp	 ebx, 50032		; 0000c370H
  000cc	7c 92		 jl	 SHORT $LL15@gObjReques

; 3611 : 				}
; 3612 : 			}
; 3613 : 		}
; 3614 : 	}
; 3615 : 	else if ( inventype == 1 )

  000ce	e9 8b 00 00 00	 jmp	 $LN5@gObjReques
$LN16@gObjReques:
  000d3	83 f8 01	 cmp	 eax, 1
  000d6	0f 85 28 01 00
	00		 jne	 $LN1@gObjReques

; 3616 : 	{
; 3617 : 		for ( int n=0;n<WAREHOUSE_SIZE;n++)

  000dc	89 9d f8 ef ff
	ff		 mov	 DWORD PTR _n$229088[ebp], ebx
  000e2	8d bd 10 f0 ff
	ff		 lea	 edi, DWORD PTR _pbuffer$[ebp+20]
  000e8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL7@gObjReques:

; 3618 : 		{
; 3619 : 			if ( lpObj->pWarehouse[n].IsItem() )

  000f0	8b 8e 5c 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3676]
  000f6	03 cb		 add	 ecx, ebx
  000f8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000fd	85 c0		 test	 eax, eax
  000ff	74 49		 je	 SHORT $LN6@gObjReques

; 3620 : 			{
; 3621 : 				if ( lpObj->pWarehouse[n].m_Type == ITEMGET(13,4) || lpObj->pWarehouse[n].m_Type == ITEMGET(13,5) )

  00101	8b 86 5c 0e 00
	00		 mov	 eax, DWORD PTR [esi+3676]
  00107	0f b7 4c 18 06	 movzx	 ecx, WORD PTR [eax+ebx+6]
  0010c	ba 04 1a 00 00	 mov	 edx, 6660		; 00001a04H
  00111	66 3b ca	 cmp	 cx, dx
  00114	74 0a		 je	 SHORT $LN2@gObjReques
  00116	ba 05 1a 00 00	 mov	 edx, 6661		; 00001a05H
  0011b	66 3b ca	 cmp	 cx, dx
  0011e	75 2a		 jne	 SHORT $LN6@gObjReques
$LN2@gObjReques:

; 3622 : 				{
; 3623 : 					founditemcount++;
; 3624 : 					petIteminfo.nPos = n;

  00120	8a 8d f8 ef ff
	ff		 mov	 cl, BYTE PTR _n$229088[ebp]

; 3625 : 					petIteminfo.nSerial = lpObj->pWarehouse[n].m_Number;

  00126	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  00129	ff 85 f4 ef ff
	ff		 inc	 DWORD PTR _founditemcount$[ebp]

; 3626 : 					memcpy(&pbuffer[lofs], &petIteminfo, sizeof(petIteminfo));
; 3627 : 					lofs +=sizeof(petIteminfo);

  0012f	83 85 f0 ef ff
	ff 08		 add	 DWORD PTR _lofs$[ebp], 8
  00136	88 8d d0 ef ff
	ff		 mov	 BYTE PTR _petIteminfo$[ebp], cl
  0013c	8b 95 d0 ef ff
	ff		 mov	 edx, DWORD PTR _petIteminfo$[ebp]
  00142	89 17		 mov	 DWORD PTR [edi], edx
  00144	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00147	83 c7 08	 add	 edi, 8
$LN6@gObjReques:

; 3616 : 	{
; 3617 : 		for ( int n=0;n<WAREHOUSE_SIZE;n++)

  0014a	ff 85 f8 ef ff
	ff		 inc	 DWORD PTR _n$229088[ebp]
  00150	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00156	81 fb c0 c6 00
	00		 cmp	 ebx, 50880		; 0000c6c0H
  0015c	7c 92		 jl	 SHORT $LL7@gObjReques
$LN5@gObjReques:

; 3628 : 				}
; 3629 : 			}
; 3630 : 		}
; 3631 : 	}
; 3632 : 	
; 3633 : 	if ( founditemcount )

  0015e	8b 95 f4 ef ff
	ff		 mov	 edx, DWORD PTR _founditemcount$[ebp]
  00164	85 d2		 test	 edx, edx
  00166	0f 84 98 00 00
	00		 je	 $LN1@gObjReques

; 3634 : 	{
; 3635 : 		SDHP_REQUEST_PETITEM_INFO pMsg;
; 3636 : 
; 3637 : 		pMsg.h.set((LPBYTE)&pMsg, 0x56, lofs + sizeof(pMsg));

  0016c	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR _lofs$[ebp]

; 3638 : 		memcpy(pMsg.AccountID, lpObj->AccountID, MAX_ACCOUNT_LEN);

  00172	8b 7e 70	 mov	 edi, DWORD PTR [esi+112]

; 3639 : 		pMsg.Number = aIndex;
; 3640 : 		pMsg.InvenType = inventype;

  00175	8a 5d 0c	 mov	 bl, BYTE PTR _inventype$[ebp]
  00178	83 c0 14	 add	 eax, 20			; 00000014H
  0017b	8b c8		 mov	 ecx, eax
  0017d	c1 e9 08	 shr	 ecx, 8
  00180	88 8d dd ef ff
	ff		 mov	 BYTE PTR _pMsg$229096[ebp+1], cl
  00186	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00189	0f b7 76 74	 movzx	 esi, WORD PTR [esi+116]
  0018d	66 89 b5 e8 ef
	ff ff		 mov	 WORD PTR _pMsg$229096[ebp+12], si
  00194	0f b7 b5 d8 ef
	ff ff		 movzx	 esi, WORD PTR _aIndex$GSCopy$[ebp]
  0019b	88 85 de ef ff
	ff		 mov	 BYTE PTR _pMsg$229096[ebp+2], al

; 3641 : 		pMsg.nCount = founditemcount;

  001a1	88 95 ef ef ff
	ff		 mov	 BYTE PTR _pMsg$229096[ebp+19], dl

; 3642 : 		memcpy(pbuffer, &pMsg, sizeof(pMsg));

  001a7	89 8d 00 f0 ff
	ff		 mov	 DWORD PTR _pbuffer$[ebp+4], ecx
  001ad	8b 8d e8 ef ff
	ff		 mov	 ecx, DWORD PTR _pMsg$229096[ebp+12]
  001b3	c6 85 dc ef ff
	ff c2		 mov	 BYTE PTR _pMsg$229096[ebp], 194 ; 000000c2H
  001ba	c6 85 df ef ff
	ff 56		 mov	 BYTE PTR _pMsg$229096[ebp+3], 86 ; 00000056H
  001c1	8b 95 dc ef ff
	ff		 mov	 edx, DWORD PTR _pMsg$229096[ebp]

; 3643 : 
; 3644 : 		cDBSMng.Send((char*)pbuffer, lofs+sizeof(pMsg));

  001c7	50		 push	 eax
  001c8	89 95 fc ef ff
	ff		 mov	 DWORD PTR _pbuffer$[ebp], edx
  001ce	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _pbuffer$[ebp]
  001d4	66 89 b5 ec ef
	ff ff		 mov	 WORD PTR _pMsg$229096[ebp+16], si
  001db	88 9d ee ef ff
	ff		 mov	 BYTE PTR _pMsg$229096[ebp+18], bl
  001e1	8b 95 ec ef ff
	ff		 mov	 edx, DWORD PTR _pMsg$229096[ebp+16]
  001e7	89 8d 08 f0 ff
	ff		 mov	 DWORD PTR _pbuffer$[ebp+12], ecx
  001ed	50		 push	 eax
  001ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001f3	89 bd 04 f0 ff
	ff		 mov	 DWORD PTR _pbuffer$[ebp+8], edi
  001f9	89 95 0c f0 ff
	ff		 mov	 DWORD PTR _pbuffer$[ebp+16], edx
  001ff	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN1@gObjReques:

; 3645 : 	}
; 3646 : }

  00204	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	33 cd		 xor	 ecx, ebp
  0020b	5b		 pop	 ebx
  0020c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c3		 ret	 0
?gObjRequestPetItemInfo@@YAXHH@Z ENDP			; gObjRequestPetItemInfo
_TEXT	ENDS
PUBLIC	??_C@_0EA@PICKNLKN@Request?5to?5receive?5petitem?5infom@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DGRecvPetItemInfo@@YAXPAE@Z			; DGRecvPetItemInfo
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?SetPetItemInfo@CItem@@QAEXHH@Z:PROC		; CItem::SetPetItemInfo
;	COMDAT ??_C@_0EA@PICKNLKN@Request?5to?5receive?5petitem?5infom@
CONST	SEGMENT
??_C@_0EA@PICKNLKN@Request?5to?5receive?5petitem?5infom@ DB 'Request to r'
	DB	'eceive petitem infomation doesn''t match the user %s', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGRecvPetItemInfo@@YAXPAE@Z
_TEXT	SEGMENT
_aIndex$ = -32						; size = 4
tv281 = -28						; size = 4
_n$229137 = -24						; size = 4
tv311 = -20						; size = 4
_ReCalc$229136 = -20					; size = 4
_szAccountId$ = -16					; size = 11
__$ArrayPad$ = -4					; size = 4
_lpData$ = 8						; size = 4
?DGRecvPetItemInfo@@YAXPAE@Z PROC			; DGRecvPetItemInfo, COMDAT

; 3668 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpData$[ebp]

; 3669 : 	SDHP_RECV_PETITEM_INFO* lpMsg = (SDHP_RECV_PETITEM_INFO *)lpData;
; 3670 : 	Recv_PetItem_Info* pPetItemInfo = (Recv_PetItem_Info *)((DWORD)lpData + sizeof(SDHP_RECV_PETITEM_INFO));
; 3671 : 	int aIndex = lpMsg->Number;
; 3672 : 	char szAccountId[MAX_ACCOUNT_LEN+1];
; 3673 : 	szAccountId[MAX_ACCOUNT_LEN]=0;
; 3674 : 
; 3675 : 	memcpy(szAccountId, lpMsg->AccountID, MAX_ACCOUNT_LEN);

  00016	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00019	0f b7 77 10	 movzx	 esi, WORD PTR [edi+16]
  0001d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00020	66 8b 57 0c	 mov	 dx, WORD PTR [edi+12]
  00024	89 45 f0	 mov	 DWORD PTR _szAccountId$[ebp], eax

; 3676 : 	
; 3677 : 	if ( !gObjIsAccontConnect(aIndex, szAccountId))

  00027	8d 45 f0	 lea	 eax, DWORD PTR _szAccountId$[ebp]
  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	89 75 e0	 mov	 DWORD PTR _aIndex$[ebp], esi
  0002f	c6 45 fa 00	 mov	 BYTE PTR _szAccountId$[ebp+10], 0
  00033	89 4d f4	 mov	 DWORD PTR _szAccountId$[ebp+4], ecx
  00036	66 89 55 f8	 mov	 WORD PTR _szAccountId$[ebp+8], dx
  0003a	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003f	83 c4 08	 add	 esp, 8
  00042	85 c0		 test	 eax, eax
  00044	75 2b		 jne	 SHORT $LN16@DGRecvPetI

; 3678 : 	{
; 3679 : 		LogAddC(2, "Request to receive petitem infomation doesn't match the user %s", szAccountId);

  00046	8d 4d f0	 lea	 ecx, DWORD PTR _szAccountId$[ebp]
  00049	51		 push	 ecx
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@PICKNLKN@Request?5to?5receive?5petitem?5infom@
  0004f	6a 02		 push	 2
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 3680 : 		CloseClient(aIndex);

  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 3720 : 				}
; 3721 : 			}
; 3722 : 		}
; 3723 : 
; 3724 : 	}
; 3725 : }

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN16@DGRecvPetI:

; 3681 : 		
; 3682 : 		return;
; 3683 : 	}
; 3684 : 
; 3685 : 	if ( lpMsg->InvenType == 0 )

  00071	8a 47 12	 mov	 al, BYTE PTR [edi+18]
  00074	84 c0		 test	 al, al
  00076	0f 85 b3 00 00
	00		 jne	 $LN15@DGRecvPetI

; 3686 : 	{
; 3687 : 		BOOL ReCalc = 0;

  0007c	33 c0		 xor	 eax, eax
  0007e	89 45 ec	 mov	 DWORD PTR _ReCalc$229136[ebp], eax

; 3688 : 
; 3689 : 		for ( int n=0;n<lpMsg->nCount;n++)

  00081	89 45 e8	 mov	 DWORD PTR _n$229137[ebp], eax
  00084	38 47 13	 cmp	 BYTE PTR [edi+19], al
  00087	0f 86 1a 01 00
	00		 jbe	 $LN3@DGRecvPetI

; 3697 : 			{
; 3698 : 				if ( gObj[aIndex].pInventory[pPetItemInfo[n].nPos].m_Number == pPetItemInfo[n].nSerial )

  0008d	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00093	81 c6 24 0e 00
	00		 add	 esi, 3620		; 00000e24H
  00099	89 75 e4	 mov	 DWORD PTR tv281[ebp], esi
  0009c	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  0009f	90		 npad	 1
$LL27@DGRecvPetI:

; 3690 : 		{
; 3691 : 			if ( pPetItemInfo[n].nPos < INVETORY_WEAR_SIZE )

  000a0	8a 06		 mov	 al, BYTE PTR [esi]
  000a2	3c 0c		 cmp	 al, 12			; 0000000cH
  000a4	73 07		 jae	 SHORT $LN25@DGRecvPetI

; 3692 : 			{
; 3693 : 				ReCalc = 1;

  000a6	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _ReCalc$229136[ebp], 1
$LN25@DGRecvPetI:

; 3694 : 			}
; 3695 : 
; 3696 : 			if ( gObj[aIndex].pInventory[pPetItemInfo[n].nPos].IsItem() )

  000ad	8b 55 e4	 mov	 edx, DWORD PTR tv281[ebp]
  000b0	0f b6 c8	 movzx	 ecx, al
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b8	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  000be	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  000c1	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000c6	85 c0		 test	 eax, eax
  000c8	74 2c		 je	 SHORT $LN13@DGRecvPetI

; 3697 : 			{
; 3698 : 				if ( gObj[aIndex].pInventory[pPetItemInfo[n].nPos].m_Number == pPetItemInfo[n].nSerial )

  000ca	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d2	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  000d8	8b 55 e4	 mov	 edx, DWORD PTR tv281[ebp]
  000db	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  000de	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000e1	03 ca		 add	 ecx, edx
  000e3	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000e6	75 0e		 jne	 SHORT $LN13@DGRecvPetI

; 3699 : 				{
; 3700 : 					gObj[aIndex].pInventory[pPetItemInfo[n].nPos].SetPetItemInfo(pPetItemInfo[n].Level, pPetItemInfo[n].Exp);

  000e8	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000eb	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  000ef	52		 push	 edx
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?SetPetItemInfo@CItem@@QAEXHH@Z ; CItem::SetPetItemInfo
$LN13@DGRecvPetI:

; 3688 : 
; 3689 : 		for ( int n=0;n<lpMsg->nCount;n++)

  000f6	8b 45 e8	 mov	 eax, DWORD PTR _n$229137[ebp]
  000f9	0f b6 4f 13	 movzx	 ecx, BYTE PTR [edi+19]
  000fd	40		 inc	 eax
  000fe	83 c6 10	 add	 esi, 16			; 00000010H
  00101	89 45 e8	 mov	 DWORD PTR _n$229137[ebp], eax
  00104	3b c1		 cmp	 eax, ecx
  00106	7c 98		 jl	 SHORT $LL27@DGRecvPetI

; 3701 : 				}
; 3702 : 			}
; 3703 : 		}
; 3704 : 
; 3705 : 		if ( ReCalc != FALSE )

  00108	83 7d ec 00	 cmp	 DWORD PTR _ReCalc$229136[ebp], 0
  0010c	0f 84 95 00 00
	00		 je	 $LN3@DGRecvPetI

; 3706 : 		{
; 3707 : 			gObjCalCharacter(aIndex);

  00112	8b 55 e0	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  0011b	83 c4 04	 add	 esp, 4
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 3720 : 				}
; 3721 : 			}
; 3722 : 		}
; 3723 : 
; 3724 : 	}
; 3725 : }

  00121	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00124	33 cd		 xor	 ecx, ebp
  00126	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
$LN15@DGRecvPetI:

; 3708 : 		}
; 3709 : 	}
; 3710 : 	else if ( lpMsg->InvenType == 1 )

  0012f	3c 01		 cmp	 al, 1
  00131	75 74		 jne	 SHORT $LN3@DGRecvPetI

; 3711 : 	{
; 3712 : 		for ( int n=0;n<lpMsg->nCount;n++)

  00133	33 db		 xor	 ebx, ebx
  00135	38 5f 13	 cmp	 BYTE PTR [edi+19], bl
  00138	76 6d		 jbe	 SHORT $LN3@DGRecvPetI

; 3716 : 			{
; 3717 : 				if ( gObj[aIndex].pWarehouse[pPetItemInfo[n].nPos].m_Number == pPetItemInfo[n].nSerial )

  0013a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00140	81 c6 5c 0e 00
	00		 add	 esi, 3676		; 00000e5cH
  00146	89 75 ec	 mov	 DWORD PTR tv311[ebp], esi
  00149	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  0014c	8d 64 24 00	 npad	 4
$LL26@DGRecvPetI:

; 3713 : 		{
; 3714 : 
; 3715 : 			if ( gObj[aIndex].pWarehouse[pPetItemInfo[n].nPos].IsItem() )

  00150	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  00153	8b 45 ec	 mov	 eax, DWORD PTR tv311[ebp]
  00156	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0015c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00162	03 0c 10	 add	 ecx, DWORD PTR [eax+edx]
  00165	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0016a	85 c0		 test	 eax, eax
  0016c	74 2d		 je	 SHORT $LN4@DGRecvPetI

; 3716 : 			{
; 3717 : 				if ( gObj[aIndex].pWarehouse[pPetItemInfo[n].nPos].m_Number == pPetItemInfo[n].nSerial )

  0016e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00171	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00177	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0017d	8b 4d ec	 mov	 ecx, DWORD PTR tv311[ebp]
  00180	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  00183	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00186	03 c8		 add	 ecx, eax
  00188	3b 56 04	 cmp	 edx, DWORD PTR [esi+4]
  0018b	75 0e		 jne	 SHORT $LN4@DGRecvPetI

; 3718 : 				{
; 3719 : 					gObj[aIndex].pWarehouse[pPetItemInfo[n].nPos].SetPetItemInfo(pPetItemInfo[n].Level, pPetItemInfo[n].Exp);

  0018d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00190	0f b6 56 08	 movzx	 edx, BYTE PTR [esi+8]
  00194	50		 push	 eax
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 ?SetPetItemInfo@CItem@@QAEXHH@Z ; CItem::SetPetItemInfo
$LN4@DGRecvPetI:

; 3711 : 	{
; 3712 : 		for ( int n=0;n<lpMsg->nCount;n++)

  0019b	0f b6 47 13	 movzx	 eax, BYTE PTR [edi+19]
  0019f	43		 inc	 ebx
  001a0	83 c6 10	 add	 esi, 16			; 00000010H
  001a3	3b d8		 cmp	 ebx, eax
  001a5	7c a9		 jl	 SHORT $LL26@DGRecvPetI
$LN3@DGRecvPetI:

; 3720 : 				}
; 3721 : 			}
; 3722 : 		}
; 3723 : 
; 3724 : 	}
; 3725 : }

  001a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	33 cd		 xor	 ecx, ebp
  001ae	5b		 pop	 ebx
  001af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
?DGRecvPetItemInfo@@YAXPAE@Z ENDP			; DGRecvPetItemInfo
_TEXT	ENDS
PUBLIC	??_C@_0CP@LPIJCCNE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPW?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@ ; `string'
PUBLIC	??_C@_0CP@LFNBKNNH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPI?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?gObjSavePetItemInfo@@YAXHH@Z			; gObjSavePetItemInfo
;	COMDAT ??_C@_0CP@LPIJCCNE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPW?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@
; File e:\work\tranet_version\gs\include\prodef.h
CONST	SEGMENT
??_C@_0CP@LPIJCCNE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPW?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@ DB '['
	DB	'%s][%s][PW][%d,%s]serial:[%u] Level:%d Exp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LFNBKNNH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPI?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@
CONST	SEGMENT
??_C@_0CP@LFNBKNNH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPI?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@ DB '['
	DB	'%s][%s][PI][%d,%s]serial:[%u] Level:%d Exp:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?gObjSavePetItemInfo@@YAXHH@Z
_TEXT	SEGMENT
_petIteminfo$ = -4132					; size = 12
_lofs$ = -4120						; size = 4
_founditemcount$ = -4116				; size = 4
_n$229194 = -4112					; size = 4
_n$229183 = -4112					; size = 4
tv452 = -4108						; size = 4
tv402 = -4108						; size = 4
_pMsg$229204 = -4108					; size = 5
_pbuffer$ = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_inventype$ = 12					; size = 4
?gObjSavePetItemInfo@@YAXHH@Z PROC			; gObjSavePetItemInfo, COMDAT

; 3753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 10 00 00	 mov	 eax, 4132		; 00001024H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3754 : 	LPOBJ lpObj = &gObj[aIndex];
; 3755 : 	char pbuffer[WAREHOUSE_BUFF];//Season 4.5 changed size
; 3756 : 	int lofs = sizeof(SDHP_SAVE_PETITEM_INFO);
; 3757 : 	int founditemcount = 0;
; 3758 : 	Save_PetItem_Info petIteminfo;
; 3759 : 
; 3760 : 	if ( inventype == 0 )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _inventype$[ebp]
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0001f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00025	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	33 db		 xor	 ebx, ebx
  0002d	57		 push	 edi
  0002e	c7 85 e8 ef ff
	ff 05 00 00 00	 mov	 DWORD PTR _lofs$[ebp], 5
  00038	89 9d ec ef ff
	ff		 mov	 DWORD PTR _founditemcount$[ebp], ebx
  0003e	3b c3		 cmp	 eax, ebx
  00040	0f 85 f7 00 00
	00		 jne	 $LN18@gObjSavePe

; 3761 : 	{
; 3762 : 		for ( int n=0;n<INVENTORY_SIZE;n++)

  00046	89 9d f0 ef ff
	ff		 mov	 DWORD PTR _n$229183[ebp], ebx
  0004c	8d bd 01 f0 ff
	ff		 lea	 edi, DWORD PTR _pbuffer$[ebp+5]
  00052	89 9d f4 ef ff
	ff		 mov	 DWORD PTR tv402[ebp], ebx
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL17@gObjSavePe:

; 3763 : 		{
; 3764 : 			if ( lpObj->pInventory[n].IsItem() )

  00060	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00066	03 cb		 add	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	85 c0		 test	 eax, eax
  0006f	0f 84 a5 00 00
	00		 je	 $LN16@gObjSavePe

; 3765 : 			{
; 3766 : 				if ( lpObj->pInventory[n].m_Type == ITEMGET(13,4) || lpObj->pInventory[n].m_Type == ITEMGET(13,5) )

  00075	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  0007b	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  0007e	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00082	ba 04 1a 00 00	 mov	 edx, 6660		; 00001a04H
  00087	66 3b c2	 cmp	 ax, dx
  0008a	74 0e		 je	 SHORT $LN12@gObjSavePe
  0008c	ba 05 1a 00 00	 mov	 edx, 6661		; 00001a05H
  00091	66 3b c2	 cmp	 ax, dx
  00094	0f 85 80 00 00
	00		 jne	 $LN16@gObjSavePe
$LN12@gObjSavePe:

; 3767 : 				{
; 3768 : 					if ( lpObj->pInventory[n].m_IsLoadPetItemInfo != FALSE )

  0009a	83 b9 b8 00 00
	00 00		 cmp	 DWORD PTR [ecx+184], 0
  000a1	74 77		 je	 SHORT $LN16@gObjSavePe

; 3769 : 					{
; 3770 : 						founditemcount++;
; 3771 : 						petIteminfo.nSerial = lpObj->pInventory[n].m_Number;

  000a3	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]

; 3772 : 						petIteminfo.Level = lpObj->pInventory[n].m_PetItem_Level;
; 3773 : 						petIteminfo.Exp = lpObj->pInventory[n].m_PetItem_Exp;

  000a9	8b 94 03 c0 00
	00 00		 mov	 edx, DWORD PTR [ebx+eax+192]
  000b0	ff 85 ec ef ff
	ff		 inc	 DWORD PTR _founditemcount$[ebp]
  000b6	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  000b9	8a 81 bc 00 00
	00		 mov	 al, BYTE PTR [ecx+188]
  000bf	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 3774 : 
; 3775 : 						LogAddTD("[%s][%s][PI][%d,%s]serial:[%u] Level:%d Exp:%d", lpObj->AccountID, lpObj->Name, n, lpObj->pInventory[n].GetName(),petIteminfo.nSerial, petIteminfo.Level, petIteminfo.Exp);

  000c1	52		 push	 edx
  000c2	89 95 e4 ef ff
	ff		 mov	 DWORD PTR _petIteminfo$[ebp+8], edx
  000c8	0f b6 d0	 movzx	 edx, al
  000cb	52		 push	 edx
  000cc	53		 push	 ebx
  000cd	88 85 e0 ef ff
	ff		 mov	 BYTE PTR _petIteminfo$[ebp+4], al
  000d3	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  000d8	50		 push	 eax
  000d9	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR _n$229183[ebp]
  000df	50		 push	 eax
  000e0	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  000e3	51		 push	 ecx
  000e4	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  000e7	52		 push	 edx
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@LFNBKNNH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPI?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3776 : 
; 3777 : 						memcpy(&pbuffer[lofs], &petIteminfo, sizeof(petIteminfo));

  000f3	8b 85 e0 ef ff
	ff		 mov	 eax, DWORD PTR _petIteminfo$[ebp+4]
  000f9	8b 8d e4 ef ff
	ff		 mov	 ecx, DWORD PTR _petIteminfo$[ebp+8]

; 3778 : 						lofs += sizeof(petIteminfo);

  000ff	83 85 e8 ef ff
	ff 0c		 add	 DWORD PTR _lofs$[ebp], 12 ; 0000000cH
  00106	89 1f		 mov	 DWORD PTR [edi], ebx
  00108	8b 9d f4 ef ff
	ff		 mov	 ebx, DWORD PTR tv402[ebp]
  0010e	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00111	83 c4 20	 add	 esp, 32			; 00000020H
  00114	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00117	83 c7 0c	 add	 edi, 12			; 0000000cH
$LN16@gObjSavePe:

; 3761 : 	{
; 3762 : 		for ( int n=0;n<INVENTORY_SIZE;n++)

  0011a	ff 85 f0 ef ff
	ff		 inc	 DWORD PTR _n$229183[ebp]
  00120	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00126	89 9d f4 ef ff
	ff		 mov	 DWORD PTR tv402[ebp], ebx
  0012c	81 fb 70 c3 00
	00		 cmp	 ebx, 50032		; 0000c370H
  00132	0f 8c 28 ff ff
	ff		 jl	 $LL17@gObjSavePe

; 3779 : 					}
; 3780 : 				}
; 3781 : 			}
; 3782 : 		}
; 3783 : 	}
; 3784 : 	else if ( inventype == 1 )

  00138	e9 fc 00 00 00	 jmp	 $LN6@gObjSavePe
$LN18@gObjSavePe:
  0013d	83 f8 01	 cmp	 eax, 1
  00140	0f 85 49 01 00
	00		 jne	 $LN1@gObjSavePe

; 3785 : 	{
; 3786 : 		for ( int n=0;n<WAREHOUSE_SIZE;n++)

  00146	89 9d f0 ef ff
	ff		 mov	 DWORD PTR _n$229194[ebp], ebx
  0014c	8d bd 01 f0 ff
	ff		 lea	 edi, DWORD PTR _pbuffer$[ebp+5]
  00152	89 9d f4 ef ff
	ff		 mov	 DWORD PTR tv452[ebp], ebx
  00158	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL8@gObjSavePe:

; 3787 : 		{
; 3788 : 			if ( lpObj->pWarehouse[n].IsItem() )

  00160	8b 8e 5c 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3676]
  00166	03 cb		 add	 ecx, ebx
  00168	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0016d	85 c0		 test	 eax, eax
  0016f	0f 84 a6 00 00
	00		 je	 $LN7@gObjSavePe

; 3789 : 			{
; 3790 : 				if ( lpObj->pWarehouse[n].m_Type == ITEMGET(13,4) || lpObj->pWarehouse[n].m_Type == ITEMGET(13,5) )

  00175	8b 96 5c 0e 00
	00		 mov	 edx, DWORD PTR [esi+3676]
  0017b	0f b7 44 13 06	 movzx	 eax, WORD PTR [ebx+edx+6]
  00180	8d 0c 13	 lea	 ecx, DWORD PTR [ebx+edx]
  00183	ba 04 1a 00 00	 mov	 edx, 6660		; 00001a04H
  00188	66 3b c2	 cmp	 ax, dx
  0018b	74 0e		 je	 SHORT $LN3@gObjSavePe
  0018d	ba 05 1a 00 00	 mov	 edx, 6661		; 00001a05H
  00192	66 3b c2	 cmp	 ax, dx
  00195	0f 85 80 00 00
	00		 jne	 $LN7@gObjSavePe
$LN3@gObjSavePe:

; 3791 : 				{
; 3792 : 					if ( lpObj->pWarehouse[n].m_IsLoadPetItemInfo != FALSE )

  0019b	83 b9 b8 00 00
	00 00		 cmp	 DWORD PTR [ecx+184], 0
  001a2	74 77		 je	 SHORT $LN7@gObjSavePe

; 3793 : 					{
; 3794 : 						founditemcount++;
; 3795 : 						petIteminfo.nSerial = lpObj->pWarehouse[n].m_Number;

  001a4	8b 86 5c 0e 00
	00		 mov	 eax, DWORD PTR [esi+3676]

; 3796 : 						petIteminfo.Level = lpObj->pWarehouse[n].m_PetItem_Level;

  001aa	8a 94 03 bc 00
	00 00		 mov	 dl, BYTE PTR [ebx+eax+188]
  001b1	ff 85 ec ef ff
	ff		 inc	 DWORD PTR _founditemcount$[ebp]
  001b7	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]

; 3797 : 						petIteminfo.Exp = lpObj->pWarehouse[n].m_PetItem_Exp;

  001ba	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  001c0	8b 19		 mov	 ebx, DWORD PTR [ecx]
  001c2	88 95 e0 ef ff
	ff		 mov	 BYTE PTR _petIteminfo$[ebp+4], dl

; 3798 : 
; 3799 : 						LogAddTD("[%s][%s][PW][%d,%s]serial:[%u] Level:%d Exp:%d", lpObj->AccountID, lpObj->Name, n, lpObj->pWarehouse[n].GetName(),petIteminfo.nSerial, petIteminfo.Level, petIteminfo.Exp);

  001c8	0f b6 d2	 movzx	 edx, dl
  001cb	50		 push	 eax
  001cc	52		 push	 edx
  001cd	53		 push	 ebx
  001ce	89 85 e4 ef ff
	ff		 mov	 DWORD PTR _petIteminfo$[ebp+8], eax
  001d4	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  001d9	50		 push	 eax
  001da	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR _n$229194[ebp]
  001e0	50		 push	 eax
  001e1	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  001e4	51		 push	 ecx
  001e5	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  001e8	52		 push	 edx
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@LPIJCCNE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLPW?$FN?$FL?$CFd?0?$CFs?$FNserial?3?$FL?$CFu?$FN?5L@
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3800 : 
; 3801 : 						memcpy(&pbuffer[lofs], &petIteminfo, sizeof(petIteminfo));

  001f4	8b 85 e0 ef ff
	ff		 mov	 eax, DWORD PTR _petIteminfo$[ebp+4]
  001fa	8b 8d e4 ef ff
	ff		 mov	 ecx, DWORD PTR _petIteminfo$[ebp+8]

; 3802 : 						lofs += sizeof(petIteminfo);

  00200	83 85 e8 ef ff
	ff 0c		 add	 DWORD PTR _lofs$[ebp], 12 ; 0000000cH
  00207	89 1f		 mov	 DWORD PTR [edi], ebx
  00209	8b 9d f4 ef ff
	ff		 mov	 ebx, DWORD PTR tv452[ebp]
  0020f	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00212	83 c4 20	 add	 esp, 32			; 00000020H
  00215	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00218	83 c7 0c	 add	 edi, 12			; 0000000cH
$LN7@gObjSavePe:

; 3785 : 	{
; 3786 : 		for ( int n=0;n<WAREHOUSE_SIZE;n++)

  0021b	ff 85 f0 ef ff
	ff		 inc	 DWORD PTR _n$229194[ebp]
  00221	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00227	89 9d f4 ef ff
	ff		 mov	 DWORD PTR tv452[ebp], ebx
  0022d	81 fb c0 c6 00
	00		 cmp	 ebx, 50880		; 0000c6c0H
  00233	0f 8c 27 ff ff
	ff		 jl	 $LL8@gObjSavePe
$LN6@gObjSavePe:

; 3803 : 					}
; 3804 : 				}
; 3805 : 			}
; 3806 : 		}
; 3807 : 	}
; 3808 : 
; 3809 : 	if ( founditemcount )

  00239	8b 8d ec ef ff
	ff		 mov	 ecx, DWORD PTR _founditemcount$[ebp]
  0023f	85 c9		 test	 ecx, ecx
  00241	74 4c		 je	 SHORT $LN1@gObjSavePe

; 3810 : 	{
; 3811 : 		SDHP_SAVE_PETITEM_INFO pMsg;
; 3812 : 
; 3813 : 		pMsg.h.set((LPBYTE)&pMsg, 0x57, lofs+sizeof(pMsg));

  00243	8b 85 e8 ef ff
	ff		 mov	 eax, DWORD PTR _lofs$[ebp]
  00249	83 c0 05	 add	 eax, 5
  0024c	8b d0		 mov	 edx, eax
  0024e	c1 ea 08	 shr	 edx, 8
  00251	88 85 f6 ef ff
	ff		 mov	 BYTE PTR _pMsg$229204[ebp+2], al

; 3814 : 		pMsg.nCount = founditemcount;
; 3815 : 		memcpy(pbuffer, &pMsg, sizeof(pMsg));
; 3816 : 
; 3817 : 		cDBSMng.Send(pbuffer, lofs+sizeof(pMsg));

  00257	50		 push	 eax
  00258	88 95 f5 ef ff
	ff		 mov	 BYTE PTR _pMsg$229204[ebp+1], dl
  0025e	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _pbuffer$[ebp]
  00264	c6 85 f4 ef ff
	ff c2		 mov	 BYTE PTR _pMsg$229204[ebp], 194 ; 000000c2H
  0026b	c6 85 f7 ef ff
	ff 57		 mov	 BYTE PTR _pMsg$229204[ebp+3], 87 ; 00000057H
  00272	8b 95 f4 ef ff
	ff		 mov	 edx, DWORD PTR _pMsg$229204[ebp]
  00278	88 8d 00 f0 ff
	ff		 mov	 BYTE PTR _pbuffer$[ebp+4], cl
  0027e	50		 push	 eax
  0027f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00284	89 95 fc ef ff
	ff		 mov	 DWORD PTR _pbuffer$[ebp], edx
  0028a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN1@gObjSavePe:

; 3818 : 	}
; 3819 : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	5f		 pop	 edi
  00293	5e		 pop	 esi
  00294	33 cd		 xor	 ecx, ebp
  00296	5b		 pop	 ebx
  00297	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029c	8b e5		 mov	 esp, ebp
  0029e	5d		 pop	 ebp
  0029f	c3		 ret	 0
?gObjSavePetItemInfo@@YAXHH@Z ENDP			; gObjSavePetItemInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleTotalInfo@@YAXHH@Z		; GS_GDReqCastleTotalInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleTotalInfo@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_iCastleEventCycle$ = 12				; size = 4
?GS_GDReqCastleTotalInfo@@YAXHH@Z PROC			; GS_GDReqCastleTotalInfo, COMDAT

; 3837 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3838 : 	if ( iMapSvrGroup < 0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 21		 js	 SHORT $LN2@GS_GDReqCa

; 3839 : 	{
; 3840 : 		return;
; 3841 : 	}
; 3842 : 
; 3843 : 	CSP_REQ_CASTLEDATA pMsg;
; 3844 : 
; 3845 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x00, sizeof(CSP_REQ_CASTLEDATA));
; 3846 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 3847 : 	pMsg.iCastleEventCycle = iCastleEventCycle;
; 3848 : 
; 3849 : 	::cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0001c	66 89 45 f4	 mov	 WORD PTR _pMsg$[ebp+4], ax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _iCastleEventCycle$[ebp]
  00023	51		 push	 ecx
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00029	c7 45 f0 c1 0c
	80 00		 mov	 DWORD PTR _pMsg$[ebp], 8391873 ; 00800cc1H
  00030	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00033	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqCa:

; 3850 : }

  00038	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003b	33 cd		 xor	 ecx, ebp
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?GS_GDReqCastleTotalInfo@@YAXHH@Z ENDP			; GS_GDReqCastleTotalInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqOwnerGuildMaster@@YAXHH@Z		; GS_GDReqOwnerGuildMaster
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqOwnerGuildMaster@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
?GS_GDReqOwnerGuildMaster@@YAXHH@Z PROC			; GS_GDReqOwnerGuildMaster, COMDAT

; 3868 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3869 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 d2		 test	 edx, edx
  00015	78 33		 js	 SHORT $LN3@GS_GDReqOw

; 3870 : 	{
; 3871 : 		return;
; 3872 : 	}
; 3873 : 
; 3874 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 2c		 js	 SHORT $LN3@GS_GDReqOw
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 1e		 je	 SHORT $LN3@GS_GDReqOw

; 3875 : 	{
; 3876 : 		return;
; 3877 : 	}
; 3878 : 
; 3879 : 
; 3880 : 	CSP_REQ_OWNERGUILDMASTER pMsg;
; 3881 : 
; 3882 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x01, sizeof(CSP_REQ_OWNERGUILDMASTER));
; 3883 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 3884 : 	pMsg.iIndex = aIndex;

  0002c	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax

; 3885 : 
; 3886 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0002f	6a 0c		 push	 12			; 0000000cH
  00031	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00034	50		 push	 eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0003a	c7 45 f0 c1 0c
	80 01		 mov	 DWORD PTR _pMsg$[ebp], 25169089 ; 01800cc1H
  00041	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+4], dx
  00045	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqOw:

; 3887 : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?GS_GDReqOwnerGuildMaster@@YAXHH@Z ENDP			; GS_GDReqOwnerGuildMaster
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleNpcBuy@@YAXHHHHHHHHEEEH@Z	; GS_GDReqCastleNpcBuy
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleNpcBuy@@YAXHHHHHHHHEEEH@Z
_TEXT	SEGMENT
_pMsg$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_iNpcNumber$ = 16					; size = 4
_iNpcIndex$ = 20					; size = 4
_iNpcDfLevel$ = 24					; size = 4
_iNpcRgLevel$ = 28					; size = 4
_iNpcMaxHP$ = 32					; size = 4
_iNpcHP$ = 36						; size = 4
_btNpcX$ = 40						; size = 1
_btNpcY$ = 44						; size = 1
_btNpcDIR$ = 48						; size = 1
_iBuyCost$ = 52						; size = 4
?GS_GDReqCastleNpcBuy@@YAXHHHHHHHHEEEH@Z PROC		; GS_GDReqCastleNpcBuy, COMDAT

; 3915 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3916 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 d2		 test	 edx, edx
  00015	78 6f		 js	 SHORT $LN3@GS_GDReqCa@2

; 3917 : 	{
; 3918 : 		return;
; 3919 : 	}
; 3920 : 
; 3921 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 68		 js	 SHORT $LN3@GS_GDReqCa@2
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 5a		 je	 SHORT $LN3@GS_GDReqCa@2

; 3922 : 	{
; 3923 : 		return;
; 3924 : 	}
; 3925 : 
; 3926 : 
; 3927 : 	CSP_REQ_NPCBUY pMsg;
; 3928 : 
; 3929 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x03, sizeof(CSP_REQ_NPCBUY));
; 3930 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 3931 : 	pMsg.iIndex = aIndex;
; 3932 : 	pMsg.iNpcNumber = iNpcNumber;
; 3933 : 	pMsg.iNpcIndex = iNpcIndex;

  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  0002f	89 45 d8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00032	8b 45 10	 mov	 eax, DWORD PTR _iNpcNumber$[ebp]
  00035	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 3934 : 	pMsg.iNpcDfLevel = iNpcDfLevel;
; 3935 : 	pMsg.iNpcRgLevel = iNpcRgLevel;
; 3936 : 	pMsg.iNpcMaxHp = iNpcMaxHP;

  00038	8b 4d 20	 mov	 ecx, DWORD PTR _iNpcMaxHP$[ebp]
  0003b	66 89 55 d4	 mov	 WORD PTR _pMsg$[ebp+4], dx
  0003f	8b 55 18	 mov	 edx, DWORD PTR _iNpcDfLevel$[ebp]
  00042	89 45 dc	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  00045	8b 45 1c	 mov	 eax, DWORD PTR _iNpcRgLevel$[ebp]
  00048	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 3937 : 	pMsg.iNpcHp = iNpcHP;
; 3938 : 	pMsg.btNpcX = btNpcX;
; 3939 : 	pMsg.btNpcY = btNpcY;

  0004b	8a 4d 2c	 mov	 cl, BYTE PTR _btNpcY$[ebp]
  0004e	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  00051	8b 55 24	 mov	 edx, DWORD PTR _iNpcHP$[ebp]
  00054	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00057	8a 45 28	 mov	 al, BYTE PTR _btNpcX$[ebp]
  0005a	88 4d f5	 mov	 BYTE PTR _pMsg$[ebp+37], cl

; 3940 : 	pMsg.btNpcDIR = btNpcDIR;
; 3941 : 	pMsg.iBuyCost = iBuyCost;
; 3942 : 
; 3943 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0005d	6a 2c		 push	 44			; 0000002cH
  0005f	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00062	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+32], edx
  00065	8a 55 30	 mov	 dl, BYTE PTR _btNpcDIR$[ebp]
  00068	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+36], al
  0006b	8b 45 34	 mov	 eax, DWORD PTR _iBuyCost$[ebp]
  0006e	51		 push	 ecx
  0006f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00074	c7 45 d0 c1 2c
	80 03		 mov	 DWORD PTR _pMsg$[ebp], 58731713 ; 03802cc1H
  0007b	88 55 f6	 mov	 BYTE PTR _pMsg$[ebp+38], dl
  0007e	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+40], eax
  00081	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqCa@2:

; 3944 : }

  00086	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?GS_GDReqCastleNpcBuy@@YAXHHHHHHHHEEEH@Z ENDP		; GS_GDReqCastleNpcBuy
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleNpcRepair@@YAXHHHHH@Z		; GS_GDReqCastleNpcRepair
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleNpcRepair@@YAXHHHHH@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_iNpcNumber$ = 16					; size = 4
_iNpcIndex$ = 20					; size = 4
_iRepairCost$ = 24					; size = 4
?GS_GDReqCastleNpcRepair@@YAXHHHHH@Z PROC		; GS_GDReqCastleNpcRepair, COMDAT

; 3965 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3966 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 d2		 test	 edx, edx
  00015	78 45		 js	 SHORT $LN3@GS_GDReqCa@3

; 3967 : 	{
; 3968 : 		return;
; 3969 : 	}
; 3970 : 
; 3971 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 3e		 js	 SHORT $LN3@GS_GDReqCa@3
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 30		 je	 SHORT $LN3@GS_GDReqCa@3

; 3972 : 	{
; 3973 : 		return;
; 3974 : 	}
; 3975 : 
; 3976 : 
; 3977 : 	CSP_REQ_NPCREPAIR pMsg;
; 3978 : 
; 3979 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x04, sizeof(CSP_REQ_NPCREPAIR));
; 3980 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 3981 : 	pMsg.iIndex = aIndex;
; 3982 : 	pMsg.iNpcNumber = iNpcNumber;
; 3983 : 	pMsg.iNpcIndex = iNpcIndex;

  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00032	8b 45 10	 mov	 eax, DWORD PTR _iNpcNumber$[ebp]
  00035	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  00038	66 89 55 e8	 mov	 WORD PTR _pMsg$[ebp+4], dx

; 3984 : 	pMsg.iRepairCost = iRepairCost;

  0003c	8b 55 18	 mov	 edx, DWORD PTR _iRepairCost$[ebp]

; 3985 : 
; 3986 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0003f	6a 18		 push	 24			; 00000018H
  00041	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00044	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+16], ecx
  00047	50		 push	 eax
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004d	c7 45 e4 c1 18
	80 04		 mov	 DWORD PTR _pMsg$[ebp], 75503809 ; 048018c1H
  00054	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  00057	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqCa@3:

; 3987 : }

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	33 cd		 xor	 ecx, ebp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?GS_GDReqCastleNpcRepair@@YAXHHHHH@Z ENDP		; GS_GDReqCastleNpcRepair
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleNpcUpgrade@@YAXHHHHHHH@Z		; GS_GDReqCastleNpcUpgrade
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleNpcUpgrade@@YAXHHHHHHH@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_iNpcNumber$ = 16					; size = 4
_iNpcIndex$ = 20					; size = 4
_iNpcUpType$ = 24					; size = 4
_iNpcUpValue$ = 28					; size = 4
_iNpcUpIndex$ = 32					; size = 4
?GS_GDReqCastleNpcUpgrade@@YAXHHHHHHH@Z PROC		; GS_GDReqCastleNpcUpgrade, COMDAT

; 4009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4010 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 d2		 test	 edx, edx
  00015	78 51		 js	 SHORT $LN3@GS_GDReqCa@4

; 4011 : 	{
; 4012 : 		return;
; 4013 : 	}
; 4014 : 
; 4015 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 4a		 js	 SHORT $LN3@GS_GDReqCa@4
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 3c		 je	 SHORT $LN3@GS_GDReqCa@4

; 4016 : 	{
; 4017 : 		return;
; 4018 : 	}
; 4019 : 
; 4020 : 
; 4021 : 	CSP_REQ_NPCUPGRADE pMsg;
; 4022 : 
; 4023 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x05, sizeof(CSP_REQ_NPCUPGRADE));
; 4024 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4025 : 	pMsg.iIndex = aIndex;
; 4026 : 	pMsg.iNpcNumber = iNpcNumber;
; 4027 : 	pMsg.iNpcIndex = iNpcIndex;

  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  0002f	66 89 55 e0	 mov	 WORD PTR _pMsg$[ebp+4], dx

; 4028 : 	pMsg.iNpcUpType = iNpcUpType;

  00033	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpType$[ebp]
  00036	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00039	8b 45 10	 mov	 eax, DWORD PTR _iNpcNumber$[ebp]
  0003c	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 4029 : 	pMsg.iNpcUpValue = iNpcUpValue;
; 4030 : 	pMsg.iNpcUpIndex = iNpcUpIndex;

  0003f	8b 4d 20	 mov	 ecx, DWORD PTR _iNpcUpIndex$[ebp]
  00042	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  00045	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  00048	8b 45 1c	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]

; 4031 : 
; 4032 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0004b	6a 20		 push	 32			; 00000020H
  0004d	8d 55 dc	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00050	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+28], ecx
  00053	52		 push	 edx
  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00059	c7 45 dc c1 20
	80 05		 mov	 DWORD PTR _pMsg$[ebp], 92283073 ; 058020c1H
  00060	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00063	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqCa@4:

; 4033 : }

  00068	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006b	33 cd		 xor	 ecx, ebp
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?GS_GDReqCastleNpcUpgrade@@YAXHHHHHHH@Z ENDP		; GS_GDReqCastleNpcUpgrade
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqTaxInfo@@YAXHH@Z			; GS_GDReqTaxInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqTaxInfo@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
?GS_GDReqTaxInfo@@YAXHH@Z PROC				; GS_GDReqTaxInfo, COMDAT

; 4051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4052 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 d2		 test	 edx, edx
  00015	78 33		 js	 SHORT $LN3@GS_GDReqTa

; 4053 : 	{
; 4054 : 		return;
; 4055 : 	}
; 4056 : 
; 4057 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 2c		 js	 SHORT $LN3@GS_GDReqTa
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 1e		 je	 SHORT $LN3@GS_GDReqTa

; 4058 : 	{
; 4059 : 		return;
; 4060 : 	}
; 4061 : 
; 4062 : 
; 4063 : 	CSP_REQ_TAXINFO pMsg;
; 4064 : 
; 4065 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x06, sizeof(CSP_REQ_TAXINFO));
; 4066 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4067 : 	pMsg.iIndex = aIndex;

  0002c	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax

; 4068 : 
; 4069 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0002f	6a 0c		 push	 12			; 0000000cH
  00031	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00034	50		 push	 eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0003a	c7 45 f0 c1 0c
	80 06		 mov	 DWORD PTR _pMsg$[ebp], 109055169 ; 06800cc1H
  00041	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+4], dx
  00045	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqTa:

; 4070 : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?GS_GDReqTaxInfo@@YAXHH@Z ENDP				; GS_GDReqTaxInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqTaxRateChange@@YAXHHHH@Z		; GS_GDReqTaxRateChange
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqTaxRateChange@@YAXHHHH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_iTaxType$ = 16						; size = 4
_iTaxRate$ = 20						; size = 4
?GS_GDReqTaxRateChange@@YAXHHHH@Z PROC			; GS_GDReqTaxRateChange, COMDAT

; 4091 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4092 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 d2		 test	 edx, edx
  00015	78 3f		 js	 SHORT $LN3@GS_GDReqTa@2

; 4093 : 	{
; 4094 : 		return;
; 4095 : 	}
; 4096 : 
; 4097 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 38		 js	 SHORT $LN3@GS_GDReqTa@2
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 2a		 je	 SHORT $LN3@GS_GDReqTa@2

; 4098 : 	{
; 4099 : 		return;
; 4100 : 	}
; 4101 : 
; 4102 : 
; 4103 : 	CSP_REQ_TAXRATECHANGE pMsg;
; 4104 : 
; 4105 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x07, sizeof(CSP_REQ_TAXRATECHANGE));
; 4106 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4107 : 	pMsg.iIndex = aIndex;
; 4108 : 	pMsg.iTaxRate = iTaxRate; 
; 4109 : 	pMsg.iTaxKind = iTaxType;

  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _iTaxType$[ebp]
  0002f	66 89 55 ec	 mov	 WORD PTR _pMsg$[ebp+4], dx
  00033	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00036	8b 45 14	 mov	 eax, DWORD PTR _iTaxRate$[ebp]

; 4110 : 	
; 4111 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00039	6a 14		 push	 20			; 00000014H
  0003b	8d 55 e8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0003e	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00041	52		 push	 edx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00047	c7 45 e8 c1 14
	80 07		 mov	 DWORD PTR _pMsg$[ebp], 125834433 ; 078014c1H
  0004e	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00051	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqTa@2:

; 4112 : }

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?GS_GDReqTaxRateChange@@YAXHHHH@Z ENDP			; GS_GDReqTaxRateChange
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleMoneyChange@@YAXHHH@Z		; GS_GDReqCastleMoneyChange
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleMoneyChange@@YAXHHH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_iMoneyChange$ = 16					; size = 4
?GS_GDReqCastleMoneyChange@@YAXHHH@Z PROC		; GS_GDReqCastleMoneyChange, COMDAT

; 4130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4131 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 d2		 test	 edx, edx
  00015	78 39		 js	 SHORT $LN3@GS_GDReqCa@5

; 4132 : 	{
; 4133 : 		return;
; 4134 : 	}
; 4135 : 
; 4136 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 32		 js	 SHORT $LN3@GS_GDReqCa@5
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 24		 je	 SHORT $LN3@GS_GDReqCa@5

; 4137 : 	{
; 4138 : 		return;
; 4139 : 	}
; 4140 : 
; 4141 : 
; 4142 : 	CSP_REQ_MONEYCHANGE pMsg;
; 4143 : 
; 4144 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x08, sizeof(CSP_REQ_MONEYCHANGE));
; 4145 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4146 : 	pMsg.iIndex = aIndex;
; 4147 : 	pMsg.iMoneyChanged = iMoneyChange;
; 4148 : 	
; 4149 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0002c	6a 10		 push	 16			; 00000010H
  0002e	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00031	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00034	8b 45 10	 mov	 eax, DWORD PTR _iMoneyChange$[ebp]
  00037	51		 push	 ecx
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0003d	c7 45 ec c1 10
	80 08		 mov	 DWORD PTR _pMsg$[ebp], 142610625 ; 088010c1H
  00044	66 89 55 f0	 mov	 WORD PTR _pMsg$[ebp+4], dx
  00048	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0004b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqCa@5:

; 4150 : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?GS_GDReqCastleMoneyChange@@YAXHHH@Z ENDP		; GS_GDReqCastleMoneyChange
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqSiegeDateChange@@YAXHHGEEGEE@Z		; GS_GDReqSiegeDateChange
EXTRN	?MSSQL2008@@3_NA:BYTE				; MSSQL2008
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqSiegeDateChange@@YAXHHGEEGEE@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_wStartYear$ = 16					; size = 2
_btStartMonth$ = 20					; size = 1
_btStartDay$ = 24					; size = 1
_wEndYear$ = 28						; size = 2
_btEndMonth$ = 32					; size = 1
_btEndDay$ = 36						; size = 1
?GS_GDReqSiegeDateChange@@YAXHHGEEGEE@Z PROC		; GS_GDReqSiegeDateChange, COMDAT

; 4173 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4174 : 	if ( iMapSvrGroup < 0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 5d		 js	 SHORT $LN4@GS_GDReqSi

; 4175 : 	{
; 4176 : 		return;
; 4177 : 	}
; 4178 : 
; 4179 : 	CSP_REQ_SDEDCHANGE pMsg;
; 4180 : 
; 4181 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x09, sizeof(CSP_REQ_SDEDCHANGE));
; 4182 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4183 : 	pMsg.iIndex = aIndex;
; 4184 : 	pMsg.wStartYear = wStartYear;
; 4185 : //#if(MSSQL2008==1)
; 4186 : 	if(MSSQL2008)

  00017	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?MSSQL2008@@3_NA, 0 ; MSSQL2008
  0001e	66 8b 4d 10	 mov	 cx, WORD PTR _wStartYear$[ebp]

; 4187 : 	{
; 4188 : 		pMsg.btStartMonth = btStartDay;

  00022	8a 55 18	 mov	 dl, BYTE PTR _btStartDay$[ebp]
  00025	66 89 45 ec	 mov	 WORD PTR _pMsg$[ebp+4], ax
  00029	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0002c	c7 45 e8 c1 14
	80 09		 mov	 DWORD PTR _pMsg$[ebp], 159388865 ; 098014c1H
  00033	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00036	66 89 4d f4	 mov	 WORD PTR _pMsg$[ebp+12], cx
  0003a	74 0b		 je	 SHORT $LN2@GS_GDReqSi

; 4189 : 		pMsg.btStartDay = btStartMonth;

  0003c	8a 45 14	 mov	 al, BYTE PTR _btStartMonth$[ebp]
  0003f	88 55 f6	 mov	 BYTE PTR _pMsg$[ebp+14], dl
  00042	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+15], al

; 4190 : 	}
; 4191 : 	else

  00045	eb 09		 jmp	 SHORT $LN1@GS_GDReqSi
$LN2@GS_GDReqSi:

; 4192 : //#else
; 4193 : 	{
; 4194 : 		pMsg.btStartMonth = btStartMonth;

  00047	8a 4d 14	 mov	 cl, BYTE PTR _btStartMonth$[ebp]
  0004a	88 4d f6	 mov	 BYTE PTR _pMsg$[ebp+14], cl

; 4195 : 		pMsg.btStartDay = btStartDay;

  0004d	88 55 f7	 mov	 BYTE PTR _pMsg$[ebp+15], dl
$LN1@GS_GDReqSi:

; 4196 : 	}
; 4197 : //#endif
; 4198 : 	pMsg.wEndYear = wEndYear;

  00050	66 8b 45 1c	 mov	 ax, WORD PTR _wEndYear$[ebp]

; 4199 : 	pMsg.btEndMonth = btEndMonth;

  00054	8a 4d 20	 mov	 cl, BYTE PTR _btEndMonth$[ebp]

; 4200 : 	pMsg.btEndDay = btEndDay;

  00057	8a 55 24	 mov	 dl, BYTE PTR _btEndDay$[ebp]
  0005a	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax

; 4201 : 	
; 4202 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0005e	6a 14		 push	 20			; 00000014H
  00060	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00063	88 4d fa	 mov	 BYTE PTR _pMsg$[ebp+18], cl
  00066	50		 push	 eax
  00067	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0006c	88 55 fb	 mov	 BYTE PTR _pMsg$[ebp+19], dl
  0006f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN4@GS_GDReqSi:

; 4203 : }

  00074	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00077	33 cd		 xor	 ecx, ebp
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?GS_GDReqSiegeDateChange@@YAXHHGEEGEE@Z ENDP		; GS_GDReqSiegeDateChange
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqGuildMarkRegInfo@@YAXHH@Z		; GS_GDReqGuildMarkRegInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqGuildMarkRegInfo@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
?GS_GDReqGuildMarkRegInfo@@YAXHH@Z PROC			; GS_GDReqGuildMarkRegInfo, COMDAT

; 4221 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4222 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00016	85 d2		 test	 edx, edx
  00018	78 50		 js	 SHORT $LN3@GS_GDReqGu

; 4223 : 	{
; 4224 : 		return;
; 4225 : 	}
; 4226 : 
; 4227 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  0001a	85 c0		 test	 eax, eax
  0001c	78 4c		 js	 SHORT $LN3@GS_GDReqGu
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 3e		 je	 SHORT $LN3@GS_GDReqGu

; 4228 : 	{
; 4229 : 		return;
; 4230 : 	}
; 4231 : 
; 4232 : 
; 4233 : 	CSP_REQ_GUILDREGINFO pMsg;
; 4234 : 
; 4235 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x0A, sizeof(CSP_REQ_GUILDREGINFO));
; 4236 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4237 : 	pMsg.iIndex = aIndex;
; 4238 : 	memcpy(pMsg.szGuildName, gObj[aIndex].GuildName, 8);

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00032	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00035	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003b	c7 45 e8 c1 14
	80 0a		 mov	 DWORD PTR _pMsg$[ebp], 176166081 ; 0a8014c1H
  00042	66 89 55 ec	 mov	 WORD PTR _pMsg$[ebp+4], dx
  00046	8b 94 08 3c 04
	00 00		 mov	 edx, DWORD PTR [eax+ecx+1084]
  0004d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00050	8b 84 08 40 04
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1088]

; 4239 : 	
; 4240 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00057	6a 14		 push	 20			; 00000014H
  00059	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0005c	51		 push	 ecx
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00062	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00065	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqGu:

; 4241 : }

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?GS_GDReqGuildMarkRegInfo@@YAXHH@Z ENDP			; GS_GDReqGuildMarkRegInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqSiegeEndedChange@@YAXHH@Z		; GS_GDReqSiegeEndedChange
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqSiegeEndedChange@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_bIsSiegeEnded$ = 12					; size = 4
?GS_GDReqSiegeEndedChange@@YAXHH@Z PROC			; GS_GDReqSiegeEndedChange, COMDAT

; 4258 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4259 : 	if ( iMapSvrGroup < 0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 21		 js	 SHORT $LN2@GS_GDReqSi@2

; 4260 : 	{
; 4261 : 		return;
; 4262 : 	}
; 4263 : 
; 4264 : 
; 4265 : 	CSP_REQ_SIEGEENDCHANGE pMsg;
; 4266 : 
; 4267 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x0B, sizeof(CSP_REQ_SIEGEENDCHANGE));
; 4268 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4269 : 	pMsg.bIsSiegeEnded = bIsSiegeEnded;
; 4270 : 	
; 4271 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0001c	66 89 45 f4	 mov	 WORD PTR _pMsg$[ebp+4], ax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _bIsSiegeEnded$[ebp]
  00023	51		 push	 ecx
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00029	c7 45 f0 c1 0c
	80 0b		 mov	 DWORD PTR _pMsg$[ebp], 192941249 ; 0b800cc1H
  00030	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00033	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqSi@2:

; 4272 : }

  00038	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003b	33 cd		 xor	 ecx, ebp
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?GS_GDReqSiegeEndedChange@@YAXHH@Z ENDP			; GS_GDReqSiegeEndedChange
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleOwnerChange@@YAXHHPAD@Z		; GS_GDReqCastleOwnerChange
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleOwnerChange@@YAXHHPAD@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_bIsCastleOccupied$ = 12				; size = 4
_lpszGuildName$ = 16					; size = 4
?GS_GDReqCastleOwnerChange@@YAXHHPAD@Z PROC		; GS_GDReqCastleOwnerChange, COMDAT

; 4290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4291 : 	if ( iMapSvrGroup < 0 )

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	8b 45 10	 mov	 eax, DWORD PTR _lpszGuildName$[ebp]
  00016	85 c9		 test	 ecx, ecx
  00018	78 30		 js	 SHORT $LN3@GS_GDReqCa@6

; 4292 : 	{
; 4293 : 		return;
; 4294 : 	}
; 4295 : 
; 4296 : 	if ( lpszGuildName == NULL )

  0001a	85 c0		 test	 eax, eax
  0001c	74 2c		 je	 SHORT $LN3@GS_GDReqCa@6

; 4297 : 	{
; 4298 : 		return;
; 4299 : 	}
; 4300 : 
; 4301 : 
; 4302 : 	CSP_REQ_CASTLEOWNERCHANGE pMsg;
; 4303 : 
; 4304 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x0C, sizeof(CSP_REQ_CASTLEOWNERCHANGE));
; 4305 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4306 : 	pMsg.bIsCastleOccupied = bIsCastleOccupied;
; 4307 : 	memcpy(pMsg.szOwnerGuildName, lpszGuildName, 8);

  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00023	66 89 4d ec	 mov	 WORD PTR _pMsg$[ebp+4], cx
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _bIsCastleOccupied$[ebp]
  0002a	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 4308 : 	
; 4309 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0002d	6a 14		 push	 20			; 00000014H
  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00032	51		 push	 ecx
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00038	c7 45 e8 c1 14
	80 0c		 mov	 DWORD PTR _pMsg$[ebp], 209720513 ; 0c8014c1H
  0003f	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00042	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00045	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqCa@6:

; 4310 : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?GS_GDReqCastleOwnerChange@@YAXHHPAD@Z ENDP		; GS_GDReqCastleOwnerChange
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqRegAttackGuild@@YAXHH@Z		; GS_GDReqRegAttackGuild
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqRegAttackGuild@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
?GS_GDReqRegAttackGuild@@YAXHH@Z PROC			; GS_GDReqRegAttackGuild, COMDAT

; 4328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4329 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00016	85 d2		 test	 edx, edx
  00018	78 50		 js	 SHORT $LN3@GS_GDReqRe

; 4330 : 	{
; 4331 : 		return;
; 4332 : 	}
; 4333 : 
; 4334 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  0001a	85 c0		 test	 eax, eax
  0001c	78 4c		 js	 SHORT $LN3@GS_GDReqRe
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 3e		 je	 SHORT $LN3@GS_GDReqRe

; 4335 : 	{
; 4336 : 		return;
; 4337 : 	}
; 4338 : 
; 4339 : 
; 4340 : 	CSP_REQ_REGATTACKGUILD pMsg;
; 4341 : 
; 4342 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x0D, sizeof(CSP_REQ_REGATTACKGUILD));
; 4343 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4344 : 	pMsg.iIndex = aIndex;
; 4345 : 	memcpy(pMsg.szEnemyGuildName, gObj[aIndex].GuildName, 8);

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00032	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00035	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003b	c7 45 e8 c1 14
	80 0d		 mov	 DWORD PTR _pMsg$[ebp], 226497729 ; 0d8014c1H
  00042	66 89 55 ec	 mov	 WORD PTR _pMsg$[ebp+4], dx
  00046	8b 94 08 3c 04
	00 00		 mov	 edx, DWORD PTR [eax+ecx+1084]
  0004d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00050	8b 84 08 40 04
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1088]

; 4346 : 	
; 4347 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00057	6a 14		 push	 20			; 00000014H
  00059	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0005c	51		 push	 ecx
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00062	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00065	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqRe:

; 4348 : }

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?GS_GDReqRegAttackGuild@@YAXHH@Z ENDP			; GS_GDReqRegAttackGuild
_TEXT	ENDS
PUBLIC	?GS_GDReqRestartCastleState@@YAXH@Z		; GS_GDReqRestartCastleState
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqRestartCastleState@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_iMapSvrGroup$ = 8					; size = 4
?GS_GDReqRestartCastleState@@YAXH@Z PROC		; GS_GDReqRestartCastleState, COMDAT

; 4364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4365 : 	if ( iMapSvrGroup < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 c0		 test	 eax, eax
  0000b	78 1b		 js	 SHORT $LN2@GS_GDReqRe@2

; 4366 : 	{
; 4367 : 		return;
; 4368 : 	}
; 4369 : 
; 4370 : 	CSP_REQ_CASTLESIEGEEND pMsg;
; 4371 : 
; 4372 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x0E, sizeof(CSP_REQ_CASTLESIEGEEND));
; 4373 : 	pMsg.wMapSvrNum = iMapSvrGroup;

  0000d	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 4374 : 	
; 4375 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00011	6a 06		 push	 6
  00013	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0001c	c7 45 f8 c1 06
	80 0e		 mov	 DWORD PTR _pMsg$[ebp], 243271361 ; 0e8006c1H
  00023	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqRe@2:

; 4376 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GS_GDReqRestartCastleState@@YAXH@Z ENDP		; GS_GDReqRestartCastleState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z		; GS_GDReqMapSvrMsgMultiCast
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z
_TEXT	SEGMENT
_pMsg$ = -140						; size = 134
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_lpszMsgText$ = 12					; size = 4
?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z PROC		; GS_GDReqMapSvrMsgMultiCast, COMDAT

; 4393 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4394 : 	if ( iMapSvrGroup < 0 )

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _iMapSvrGroup$[ebp]
  00016	85 c9		 test	 ecx, ecx
  00018	78 4c		 js	 SHORT $LN3@GS_GDReqMa

; 4395 : 	{
; 4396 : 		return;
; 4397 : 	}
; 4398 : 
; 4399 : 	if ( lpszMsgText == NULL )

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _lpszMsgText$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	74 45		 je	 SHORT $LN3@GS_GDReqMa

; 4400 : 	{
; 4401 : 		return;
; 4402 : 	}
; 4403 : 
; 4404 : 
; 4405 : 	CSP_REQ_MAPSVRMULTICAST pMsg;
; 4406 : 
; 4407 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x0F, sizeof(CSP_REQ_MAPSVRMULTICAST));
; 4408 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4409 : 	strcpy(pMsg.szMsgText, lpszMsgText);

  00021	8d 95 7a ff ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp+6]
  00027	c7 85 74 ff ff
	ff c1 86 80 0f	 mov	 DWORD PTR _pMsg$[ebp], 260081345 ; 0f8086c1H
  00031	66 89 8d 78 ff
	ff ff		 mov	 WORD PTR _pMsg$[ebp+4], cx
  00038	2b d0		 sub	 edx, eax
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL5@GS_GDReqMa:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00045	40		 inc	 eax
  00046	84 c9		 test	 cl, cl
  00048	75 f6		 jne	 SHORT $LL5@GS_GDReqMa

; 4410 : 	pMsg.szMsgText[127] = 0;
; 4411 : 	
; 4412 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0004a	0f b6 85 75 ff
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00051	88 4d f9	 mov	 BYTE PTR _pMsg$[ebp+133], cl
  00054	50		 push	 eax
  00055	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0005b	51		 push	 ecx
  0005c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00061	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqMa:

; 4413 : }

  00066	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00069	33 cd		 xor	 ecx, ebp
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z ENDP		; GS_GDReqMapSvrMsgMultiCast
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqRegGuildMark@@YAXHHH@Z			; GS_GDReqRegGuildMark
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqRegGuildMark@@YAXHHH@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_iItemPos$ = 16						; size = 4
?GS_GDReqRegGuildMark@@YAXHHH@Z PROC			; GS_GDReqRegGuildMark, COMDAT

; 4432 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4433 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00016	85 d2		 test	 edx, edx
  00018	78 56		 js	 SHORT $LN3@GS_GDReqRe@3

; 4434 : 	{
; 4435 : 		return;
; 4436 : 	}
; 4437 : 
; 4438 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  0001a	85 c0		 test	 eax, eax
  0001c	78 52		 js	 SHORT $LN3@GS_GDReqRe@3
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 44		 je	 SHORT $LN3@GS_GDReqRe@3

; 4439 : 	{
; 4440 : 		return;
; 4441 : 	}
; 4442 : 
; 4443 : 	CSP_REQ_GUILDREGMARK pMsg;
; 4444 : 
; 4445 : 	pMsg.h.set((LPBYTE)&pMsg,0x80,0x10, sizeof(CSP_REQ_GUILDREGMARK));
; 4446 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4447 : 	pMsg.iIndex = aIndex;
; 4448 : 	pMsg.iItemPos = iItemPos;

  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _iItemPos$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+8], eax

; 4449 : 	memcpy(&pMsg.szGuildName,gObj[aIndex].GuildName,sizeof(pMsg.szGuildName));

  00032	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00038	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+20], ecx
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	c7 45 e4 c1 18
	80 10		 mov	 DWORD PTR _pMsg$[ebp], 276830401 ; 108018c1H
  00048	66 89 55 e8	 mov	 WORD PTR _pMsg$[ebp+4], dx
  0004c	8b 94 08 3c 04
	00 00		 mov	 edx, DWORD PTR [eax+ecx+1084]
  00053	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00056	8b 84 08 40 04
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1088]

; 4450 : 	
; 4451 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0005d	6a 18		 push	 24			; 00000018H
  0005f	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00062	51		 push	 ecx
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00068	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  0006b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqRe@3:

; 4452 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?GS_GDReqRegGuildMark@@YAXHHH@Z ENDP			; GS_GDReqRegGuildMark
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqGuildMarkReset@@YAXHHPAD@Z		; GS_GDReqGuildMarkReset
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqGuildMarkReset@@YAXHHPAD@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_lpszGuildName$ = 16					; size = 4
?GS_GDReqGuildMarkReset@@YAXHHPAD@Z PROC		; GS_GDReqGuildMarkReset, COMDAT

; 4470 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _lpszGuildName$[ebp]
  00013	56		 push	 esi

; 4471 : 	if ( iMapSvrGroup < 0 )

  00014	8b 75 08	 mov	 esi, DWORD PTR _iMapSvrGroup$[ebp]
  00017	85 f6		 test	 esi, esi
  00019	78 43		 js	 SHORT $LN4@GS_GDReqGu@2

; 4472 : 	{
; 4473 : 		return;
; 4474 : 	}
; 4475 : 
; 4476 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0001e	85 c9		 test	 ecx, ecx
  00020	78 3c		 js	 SHORT $LN4@GS_GDReqGu@2
  00022	33 d2		 xor	 edx, edx
  00024	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  0002a	0f 9e c2	 setle	 dl
  0002d	85 d2		 test	 edx, edx
  0002f	74 2d		 je	 SHORT $LN4@GS_GDReqGu@2

; 4477 : 	{
; 4478 : 		return;
; 4479 : 	}
; 4480 : 
; 4481 : 	if ( lpszGuildName == NULL )

  00031	85 c0		 test	 eax, eax
  00033	74 29		 je	 SHORT $LN4@GS_GDReqGu@2

; 4482 : 	{
; 4483 : 		return;
; 4484 : 	}
; 4485 : 
; 4486 : 	CSP_REQ_GUILDRESETMARK pMsg;
; 4487 : 
; 4488 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x11, sizeof(CSP_REQ_GUILDRESETMARK));
; 4489 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4490 : 	pMsg.iIndex = aIndex;
; 4491 : 	memcpy(pMsg.szGuildName, lpszGuildName, 8);

  00035	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00038	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]

; 4492 : 	
; 4493 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0003d	6a 14		 push	 20			; 00000014H
  0003f	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00042	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00045	50		 push	 eax
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004b	c7 45 e8 c1 14
	80 11		 mov	 DWORD PTR _pMsg$[ebp], 293606593 ; 118014c1H
  00052	66 89 75 ec	 mov	 WORD PTR _pMsg$[ebp+4], si
  00056	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+16], edx
  00059	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN4@GS_GDReqGu@2:

; 4494 : }

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00061	33 cd		 xor	 ecx, ebp
  00063	5e		 pop	 esi
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?GS_GDReqGuildMarkReset@@YAXHHPAD@Z ENDP		; GS_GDReqGuildMarkReset
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqGuildSetGiveUp@@YAXHHH@Z		; GS_GDReqGuildSetGiveUp
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqGuildSetGiveUp@@YAXHHH@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
_bIsGiveUp$ = 16					; size = 4
?GS_GDReqGuildSetGiveUp@@YAXHHH@Z PROC			; GS_GDReqGuildSetGiveUp, COMDAT

; 4513 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4514 : 	if ( iMapSvrGroup < 0 )

  00010	8b 55 08	 mov	 edx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00016	85 d2		 test	 edx, edx
  00018	78 56		 js	 SHORT $LN3@GS_GDReqGu@3

; 4515 : 	{
; 4516 : 		return;
; 4517 : 	}
; 4518 : 
; 4519 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  0001a	85 c0		 test	 eax, eax
  0001c	78 52		 js	 SHORT $LN3@GS_GDReqGu@3
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 44		 je	 SHORT $LN3@GS_GDReqGu@3

; 4520 : 	{
; 4521 : 		return;
; 4522 : 	}
; 4523 : 
; 4524 : 	CSP_REQ_GUILDSETGIVEUP pMsg;
; 4525 : 
; 4526 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x12, sizeof(CSP_REQ_GUILDSETGIVEUP));
; 4527 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4528 : 	pMsg.iIndex = aIndex;
; 4529 : 	pMsg.bIsGiveUp = bIsGiveUp;

  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _bIsGiveUp$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+8], eax

; 4530 : 	memcpy(pMsg.szGuildName, gObj[aIndex].GuildName, 8);

  00032	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00038	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+20], ecx
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	c7 45 e4 c1 18
	80 12		 mov	 DWORD PTR _pMsg$[ebp], 310384833 ; 128018c1H
  00048	66 89 55 e8	 mov	 WORD PTR _pMsg$[ebp+4], dx
  0004c	8b 94 08 3c 04
	00 00		 mov	 edx, DWORD PTR [eax+ecx+1084]
  00053	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00056	8b 84 08 40 04
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1088]

; 4531 : 	
; 4532 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0005d	6a 18		 push	 24			; 00000018H
  0005f	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00062	51		 push	 ecx
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00068	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  0006b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqGu@3:

; 4533 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?GS_GDReqGuildSetGiveUp@@YAXHHH@Z ENDP			; GS_GDReqGuildSetGiveUp
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqNpcRemove@@YAXHHH@Z			; GS_GDReqNpcRemove
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqNpcRemove@@YAXHHH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_iNpcNumber$ = 12					; size = 4
_iNpcIndex$ = 16					; size = 4
?GS_GDReqNpcRemove@@YAXHHH@Z PROC			; GS_GDReqNpcRemove, COMDAT

; 4551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4552 : 	if ( iMapSvrGroup < 0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 27		 js	 SHORT $LN2@GS_GDReqNp

; 4553 : 	{
; 4554 : 		return;
; 4555 : 	}
; 4556 : 
; 4557 : 	CSP_REQ_NPCREMOVE pMsg;
; 4558 : 
; 4559 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x16, sizeof(CSP_REQ_NPCREMOVE));
; 4560 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4561 : 	pMsg.iNpcNumber = iNpcNumber;
; 4562 : 	pMsg.iNpcIndex = iNpcIndex;

  00017	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  0001a	66 89 45 f0	 mov	 WORD PTR _pMsg$[ebp+4], ax
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _iNpcNumber$[ebp]

; 4563 : 	
; 4564 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00021	6a 10		 push	 16			; 00000010H
  00023	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00026	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00029	52		 push	 edx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0002f	c7 45 ec c1 10
	80 16		 mov	 DWORD PTR _pMsg$[ebp], 377491649 ; 168010c1H
  00036	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00039	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqNp:

; 4565 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?GS_GDReqNpcRemove@@YAXHHH@Z ENDP			; GS_GDReqNpcRemove
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleStateSync@@YAXHHHHHPAD@Z		; GS_GDReqCastleStateSync
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleStateSync@@YAXHHHHHPAD@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_iCastleState$ = 12					; size = 4
_iTaxRateChaos$ = 16					; size = 4
_iTaxRateStore$ = 20					; size = 4
_iTaxHuntZone$ = 24					; size = 4
_lpszOwnerGuild$ = 28					; size = 4
?GS_GDReqCastleStateSync@@YAXHHHHHPAD@Z PROC		; GS_GDReqCastleStateSync, COMDAT

; 4586 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4587 : 	if ( iMapSvrGroup < 0 )

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	8b 45 1c	 mov	 eax, DWORD PTR _lpszOwnerGuild$[ebp]
  00016	85 c9		 test	 ecx, ecx
  00018	78 3e		 js	 SHORT $LN2@GS_GDReqCa@7

; 4588 : 	{
; 4589 : 		return;
; 4590 : 	}
; 4591 : 
; 4592 : 	CSP_REQ_CASTLESTATESYNC pMsg;
; 4593 : 
; 4594 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x17, sizeof(CSP_REQ_CASTLESTATESYNC));
; 4595 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4596 : 	pMsg.iCastleState = iCastleState;
; 4597 : 	pMsg.iTaxRateChaos = iTaxRateChaos;

  0001a	8b 55 10	 mov	 edx, DWORD PTR _iTaxRateChaos$[ebp]
  0001d	66 89 4d e0	 mov	 WORD PTR _pMsg$[ebp+4], cx
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _iCastleState$[ebp]
  00024	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 4598 : 	pMsg.iTaxRateStore = iTaxRateStore;

  00027	8b 4d 14	 mov	 ecx, DWORD PTR _iTaxRateStore$[ebp]
  0002a	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+12], edx

; 4599 : 	pMsg.iTaxHuntZone = iTaxHuntZone;

  0002d	8b 55 18	 mov	 edx, DWORD PTR _iTaxHuntZone$[ebp]
  00030	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 4600 : 	memcpy(pMsg.szOwnerGuildName, lpszOwnerGuild, 8);

  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  00038	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 4601 : 	
; 4602 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0003b	6a 20		 push	 32			; 00000020H
  0003d	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00040	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  00043	50		 push	 eax
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00049	c7 45 dc c1 20
	80 17		 mov	 DWORD PTR _pMsg$[ebp], 394272961 ; 178020c1H
  00050	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+28], edx
  00053	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqCa@7:

; 4603 : }

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	33 cd		 xor	 ecx, ebp
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?GS_GDReqCastleStateSync@@YAXHHHHHPAD@Z ENDP		; GS_GDReqCastleStateSync
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleTributeMoney@@YAXHH@Z		; GS_GDReqCastleTributeMoney
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleTributeMoney@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_iCastleTributeMoney$ = 12				; size = 4
?GS_GDReqCastleTributeMoney@@YAXHH@Z PROC		; GS_GDReqCastleTributeMoney, COMDAT

; 4620 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4621 : 	if ( iMapSvrGroup < 0 )

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c9		 test	 ecx, ecx
  00015	78 25		 js	 SHORT $LN3@GS_GDReqCa@8

; 4622 : 	{
; 4623 : 		return;
; 4624 : 	}
; 4625 : 
; 4626 : 	if ( iCastleTributeMoney < 0 )

  00017	8b 45 0c	 mov	 eax, DWORD PTR _iCastleTributeMoney$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 1e		 js	 SHORT $LN3@GS_GDReqCa@8

; 4627 : 	{
; 4628 : 		return;
; 4629 : 	}
; 4630 : 
; 4631 : 	CSP_REQ_CASTLETRIBUTEMONEY pMsg;
; 4632 : 
; 4633 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x18, sizeof(CSP_REQ_CASTLETRIBUTEMONEY));
; 4634 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4635 : 	pMsg.iCastleTributeMoney = iCastleTributeMoney;

  0001e	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax

; 4636 : 
; 4637 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00021	6a 0c		 push	 12			; 0000000cH
  00023	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00026	66 89 4d f4	 mov	 WORD PTR _pMsg$[ebp+4], cx
  0002a	50		 push	 eax
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00030	c7 45 f0 c1 0c
	80 18		 mov	 DWORD PTR _pMsg$[ebp], 411045057 ; 18800cc1H
  00037	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GS_GDReqCa@8:

; 4638 : }

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?GS_GDReqCastleTributeMoney@@YAXHH@Z ENDP		; GS_GDReqCastleTributeMoney
_TEXT	ENDS
PUBLIC	?GS_GDReqResetCastleTaxInfo@@YAXH@Z		; GS_GDReqResetCastleTaxInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqResetCastleTaxInfo@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_iMapSvrGroup$ = 8					; size = 4
?GS_GDReqResetCastleTaxInfo@@YAXH@Z PROC		; GS_GDReqResetCastleTaxInfo, COMDAT

; 4654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4655 : 	if ( iMapSvrGroup < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 c0		 test	 eax, eax
  0000b	78 1b		 js	 SHORT $LN2@GS_GDReqRe@4

; 4656 : 	{
; 4657 : 		return;
; 4658 : 	}
; 4659 : 
; 4660 : 	CSP_REQ_RESETCASTLETAXINFO pMsg;
; 4661 : 
; 4662 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x19, sizeof(CSP_REQ_RESETCASTLETAXINFO));
; 4663 : 	pMsg.wMapSvrNum = iMapSvrGroup;

  0000d	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 4664 : 
; 4665 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00011	6a 06		 push	 6
  00013	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0001c	c7 45 f8 c1 06
	80 19		 mov	 DWORD PTR _pMsg$[ebp], 427820737 ; 198006c1H
  00023	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqRe@4:

; 4666 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GS_GDReqResetCastleTaxInfo@@YAXH@Z ENDP		; GS_GDReqResetCastleTaxInfo
_TEXT	ENDS
PUBLIC	?GS_GDReqResetSiegeGuildInfo@@YAXH@Z		; GS_GDReqResetSiegeGuildInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqResetSiegeGuildInfo@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_iMapSvrGroup$ = 8					; size = 4
?GS_GDReqResetSiegeGuildInfo@@YAXH@Z PROC		; GS_GDReqResetSiegeGuildInfo, COMDAT

; 4682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4683 : 	if ( iMapSvrGroup < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 c0		 test	 eax, eax
  0000b	78 1b		 js	 SHORT $LN2@GS_GDReqRe@5

; 4684 : 	{
; 4685 : 		return;
; 4686 : 	}
; 4687 : 
; 4688 : 	CSP_REQ_RESETSIEGEGUILDINFO pMsg;
; 4689 : 
; 4690 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x1A, sizeof(CSP_REQ_RESETSIEGEGUILDINFO));
; 4691 : 	pMsg.wMapSvrNum = iMapSvrGroup;

  0000d	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 4692 : 
; 4693 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00011	6a 06		 push	 6
  00013	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0001c	c7 45 f8 c1 06
	80 1a		 mov	 DWORD PTR _pMsg$[ebp], 444597953 ; 1a8006c1H
  00023	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqRe@5:

; 4694 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GS_GDReqResetSiegeGuildInfo@@YAXH@Z ENDP		; GS_GDReqResetSiegeGuildInfo
_TEXT	ENDS
PUBLIC	?GS_GDReqResetRegSiegeInfo@@YAXH@Z		; GS_GDReqResetRegSiegeInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqResetRegSiegeInfo@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_iMapSvrGroup$ = 8					; size = 4
?GS_GDReqResetRegSiegeInfo@@YAXH@Z PROC			; GS_GDReqResetRegSiegeInfo, COMDAT

; 4710 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4711 : 	if ( iMapSvrGroup < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 c0		 test	 eax, eax
  0000b	78 1b		 js	 SHORT $LN2@GS_GDReqRe@6

; 4712 : 	{
; 4713 : 		return;
; 4714 : 	}
; 4715 : 
; 4716 : 	CSP_REQ_RESETREGSIEGEINFO pMsg;
; 4717 : 
; 4718 : 	pMsg.h.set((LPBYTE)&pMsg, 0x80, 0x1B, sizeof(CSP_REQ_RESETREGSIEGEINFO));
; 4719 : 	pMsg.wMapSvrNum = iMapSvrGroup;

  0000d	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 4720 : 
; 4721 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00011	6a 06		 push	 6
  00013	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0001c	c7 45 f8 c1 06
	80 1b		 mov	 DWORD PTR _pMsg$[ebp], 461375169 ; 1b8006c1H
  00023	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqRe@6:

; 4722 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GS_GDReqResetRegSiegeInfo@@YAXH@Z ENDP			; GS_GDReqResetRegSiegeInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleInitData@@YAXHH@Z		; GS_GDReqCastleInitData
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleInitData@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_iCastleEventCycle$ = 12				; size = 4
?GS_GDReqCastleInitData@@YAXHH@Z PROC			; GS_GDReqCastleInitData, COMDAT

; 4738 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4739 : 	if ( iMapSvrGroup < 0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 24		 js	 SHORT $LN2@GS_GDReqCa@9

; 4740 : 	{
; 4741 : 		return;
; 4742 : 	}
; 4743 : 
; 4744 : 	CSP_REQ_CSINITDATA pMsg;
; 4745 : 
; 4746 : 	pMsg.h.set((LPBYTE)&pMsg, 0x81, sizeof(CSP_REQ_CSINITDATA));
; 4747 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4748 : 	pMsg.iCastleEventCycle = iCastleEventCycle;
; 4749 : 
; 4750 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0001c	66 89 45 f4	 mov	 WORD PTR _pMsg$[ebp+4], ax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _iCastleEventCycle$[ebp]
  00023	51		 push	 ecx
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00029	66 c7 45 f0 c1
	0c		 mov	 WORD PTR _pMsg$[ebp], 3265 ; 00000cc1H
  0002f	c6 45 f2 81	 mov	 BYTE PTR _pMsg$[ebp+2], 129 ; 00000081H
  00033	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00036	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqCa@9:

; 4751 : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?GS_GDReqCastleInitData@@YAXHH@Z ENDP			; GS_GDReqCastleInitData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqCastleNpcInfo@@YAXHH@Z			; GS_GDReqCastleNpcInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCastleNpcInfo@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
?GS_GDReqCastleNpcInfo@@YAXHH@Z PROC			; GS_GDReqCastleNpcInfo, COMDAT

; 4767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4768 : 	if ( iMapSvrGroup < 0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 24		 js	 SHORT $LN2@GS_GDReqCa@10

; 4769 : 	{
; 4770 : 		return;
; 4771 : 	}
; 4772 : 
; 4773 : 	CSP_REQ_NPCDATA pMsg;
; 4774 : 
; 4775 : 	pMsg.h.set((LPBYTE)&pMsg, 0x82, sizeof(CSP_REQ_NPCDATA));
; 4776 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4777 : 	pMsg.iIndex = aIndex;
; 4778 : 
; 4779 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0001c	66 89 45 f4	 mov	 WORD PTR _pMsg$[ebp+4], ax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00023	51		 push	 ecx
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00029	66 c7 45 f0 c1
	0c		 mov	 WORD PTR _pMsg$[ebp], 3265 ; 00000cc1H
  0002f	c6 45 f2 82	 mov	 BYTE PTR _pMsg$[ebp+2], 130 ; 00000082H
  00033	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00036	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqCa@10:

; 4780 : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?GS_GDReqCastleNpcInfo@@YAXHH@Z ENDP			; GS_GDReqCastleNpcInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GS_GDReqAllGuildMarkRegInfo@@YAXHH@Z		; GS_GDReqAllGuildMarkRegInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqAllGuildMarkRegInfo@@YAXHH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_aIndex$ = 12						; size = 4
?GS_GDReqAllGuildMarkRegInfo@@YAXHH@Z PROC		; GS_GDReqAllGuildMarkRegInfo, COMDAT

; 4796 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4797 : 	if ( iMapSvrGroup < 0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 24		 js	 SHORT $LN2@GS_GDReqAl

; 4798 : 	{
; 4799 : 		return;
; 4800 : 	}
; 4801 : 
; 4802 : 	CSP_REQ_ALLGUILDREGINFO pMsg;
; 4803 : 
; 4804 : 	pMsg.h.set((LPBYTE)&pMsg, 0x83, sizeof(CSP_REQ_ALLGUILDREGINFO));
; 4805 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 4806 : 	pMsg.iIndex = aIndex;
; 4807 : 
; 4808 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0001c	66 89 45 f4	 mov	 WORD PTR _pMsg$[ebp+4], ax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00023	51		 push	 ecx
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00029	66 c7 45 f0 c1
	0c		 mov	 WORD PTR _pMsg$[ebp], 3265 ; 00000cc1H
  0002f	c6 45 f2 83	 mov	 BYTE PTR _pMsg$[ebp+2], 131 ; 00000083H
  00033	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00036	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqAl:

; 4809 : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?GS_GDReqAllGuildMarkRegInfo@@YAXHH@Z ENDP		; GS_GDReqAllGuildMarkRegInfo
_TEXT	ENDS
PUBLIC	?GS_GDReqCalcRegGuildList@@YAXH@Z		; GS_GDReqCalcRegGuildList
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCalcRegGuildList@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_iMapSvrGroup$ = 8					; size = 4
?GS_GDReqCalcRegGuildList@@YAXH@Z PROC			; GS_GDReqCalcRegGuildList, COMDAT

; 4824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4825 : 	if ( iMapSvrGroup < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 c0		 test	 eax, eax
  0000b	78 1e		 js	 SHORT $LN2@GS_GDReqCa@11

; 4826 : 	{
; 4827 : 		return;
; 4828 : 	}
; 4829 : 
; 4830 : 	CSP_REQ_CALCREGGUILDLIST pMsg;
; 4831 : 
; 4832 : 	pMsg.h.set((LPBYTE)&pMsg, 0x85, sizeof(CSP_REQ_CALCREGGUILDLIST));
; 4833 : 	pMsg.wMapSvrNum = iMapSvrGroup;

  0000d	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 4834 : 
; 4835 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00011	6a 06		 push	 6
  00013	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0001c	66 c7 45 f8 c1
	06		 mov	 WORD PTR _pMsg$[ebp], 1729 ; 000006c1H
  00022	c6 45 fa 85	 mov	 BYTE PTR _pMsg$[ebp+2], 133 ; 00000085H
  00026	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqCa@11:

; 4836 : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GS_GDReqCalcRegGuildList@@YAXH@Z ENDP			; GS_GDReqCalcRegGuildList
_TEXT	ENDS
PUBLIC	?GS_GDReqCsLoadTotalGuildInfo@@YAXH@Z		; GS_GDReqCsLoadTotalGuildInfo
; Function compile flags: /Ogtp
;	COMDAT ?GS_GDReqCsLoadTotalGuildInfo@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_iMapSvrGroup$ = 8					; size = 4
?GS_GDReqCsLoadTotalGuildInfo@@YAXH@Z PROC		; GS_GDReqCsLoadTotalGuildInfo, COMDAT

; 4851 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4852 : 	if ( iMapSvrGroup < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 c0		 test	 eax, eax
  0000b	78 1e		 js	 SHORT $LN2@GS_GDReqCs

; 4853 : 	{
; 4854 : 		return;
; 4855 : 	}
; 4856 : 
; 4857 : 	CSP_REQ_CSLOADTOTALGUILDINFO pMsg;
; 4858 : 
; 4859 : 	pMsg.h.set((LPBYTE)&pMsg, 0x88, sizeof(CSP_REQ_CSLOADTOTALGUILDINFO));
; 4860 : 	pMsg.wMapSvrNum = iMapSvrGroup;

  0000d	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 4861 : 
; 4862 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00011	6a 06		 push	 6
  00013	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0001c	66 c7 45 f8 c1
	06		 mov	 WORD PTR _pMsg$[ebp], 1729 ; 000006c1H
  00022	c6 45 fa 88	 mov	 BYTE PTR _pMsg$[ebp+2], 136 ; 00000088H
  00026	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GS_GDReqCs:

; 4863 : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GS_GDReqCsLoadTotalGuildInfo@@YAXH@Z ENDP		; GS_GDReqCsLoadTotalGuildInfo
_TEXT	ENDS
PUBLIC	??_C@_0HN@BJMCOPEN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsCastleTotalInfo@@YAXPAE@Z		; GS_DGAnsCastleTotalInfo
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
;	COMDAT ??_C@_0HN@BJMCOPEN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HN@BJMCOPEN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x00] GS_DGAnsCastleTotalInfo()'
	DB	' - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleTotalInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleTotalInfo@@YAXPAE@Z PROC			; GS_DGAnsCastleTotalInfo, COMDAT

; 4894 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4895 : //#if(GS_CASTLE==1)
; 4896 : 	CSP_ANS_CASTLEDATA* lpMsg = (CSP_ANS_CASTLEDATA*)lpRecv;
; 4897 : 
; 4898 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsCa

; 4899 : 		return;
; 4900 : 
; 4901 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsCa
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsCa
$LN5@GS_DGAnsCa:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsCa:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsCa

; 4902 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x00] GS_DGAnsCastleTotalInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@BJMCOPEN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsCa:

; 4903 : //#else
; 4904 : //	return;
; 4905 : //#endif
; 4906 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsCastleTotalInfo@@YAXPAE@Z ENDP			; GS_DGAnsCastleTotalInfo
_TEXT	ENDS
PUBLIC	?GS_DGAnsOwnerGuildMaster@@YAXPAE@Z		; GS_DGAnsOwnerGuildMaster
EXTRN	?GCAnsCastleSiegeState@@YAXHHPAD0@Z:PROC	; GCAnsCastleSiegeState
; Function compile flags: /Ogtp
;	COMDAT ?GS_DGAnsOwnerGuildMaster@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsOwnerGuildMaster@@YAXPAE@Z PROC		; GS_DGAnsOwnerGuildMaster, COMDAT

; 4925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4926 : //#if(GS_CASTLE==1)
; 4927 : 	CSP_ANS_OWNERGUILDMASTER* lpMsg = (CSP_ANS_OWNERGUILDMASTER*)lpRecv;
; 4928 : 
; 4929 : 	if(lpMsg == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpRecv$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 45		 je	 SHORT $LN3@GS_DGAnsOw

; 4930 : 		return;
; 4931 : 
; 4932 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	8b 0d c0 32 01
	00		 mov	 ecx, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00010	85 c9		 test	 ecx, ecx
  00012	74 06		 je	 SHORT $LN5@GS_DGAnsOw
  00014	0f b6 49 08	 movzx	 ecx, BYTE PTR [ecx+8]
  00018	eb 03		 jmp	 SHORT $LN6@GS_DGAnsOw
$LN5@GS_DGAnsOw:
  0001a	83 c9 ff	 or	 ecx, -1
$LN6@GS_DGAnsOw:
  0001d	0f b7 50 08	 movzx	 edx, WORD PTR [eax+8]
  00021	3b d1		 cmp	 edx, ecx
  00023	74 12		 je	 SHORT $LN1@GS_DGAnsOw

; 4933 : 	{
; 4934 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x00] GS_DGAnsCastleTotalInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@BJMCOPEN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00032	83 c4 08	 add	 esp, 8

; 4939 : //#else
; 4940 : //	return;
; 4941 : //#endif
; 4942 : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN1@GS_DGAnsOw:

; 4935 : 		return;
; 4936 : 	}
; 4937 : 
; 4938 : 	GCAnsCastleSiegeState(lpMsg->iIndex,lpMsg->iResult,lpMsg->szCastleOwnGuild,lpMsg->szCastleOwnGuildMaster);

  00037	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
  0003a	51		 push	 ecx
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	8d 50 10	 lea	 edx, DWORD PTR [eax+16]
  00041	52		 push	 edx
  00042	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?GCAnsCastleSiegeState@@YAXHHPAD0@Z ; GCAnsCastleSiegeState
  0004c	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@GS_DGAnsOw:

; 4939 : //#else
; 4940 : //	return;
; 4941 : //#endif
; 4942 : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GS_DGAnsOwnerGuildMaster@@YAXPAE@Z ENDP		; GS_DGAnsOwnerGuildMaster
_TEXT	ENDS
PUBLIC	??_C@_0FA@BIAOFLEB@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@ ; `string'
PUBLIC	??_C@_0FO@MKLLBJCJ@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@ ; `string'
PUBLIC	??_C@_0FK@LDEGMOJD@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@ ; `string'
PUBLIC	??_C@_0HK@OKLAENCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsCastleNpcBuy@@YAXPAE@Z			; GS_DGAnsCastleNpcBuy
EXTRN	?GCAnsNpcBuy@@YAXHHHH@Z:PROC			; GCAnsNpcBuy
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?AddDbNPC@CCastleSiege@@QAEHHH@Z:PROC		; CCastleSiege::AddDbNPC
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
;	COMDAT ??_C@_0FA@BIAOFLEB@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0FA@BIAOFLEB@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@ DB '[CastleSi'
	DB	'ege] GS_DGAnsCastleNpcBuy() FAILED - Result:(%d), Npc:(CLS:%d'
	DB	', IDX:%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@MKLLBJCJ@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@
CONST	SEGMENT
??_C@_0FO@MKLLBJCJ@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@ DB '[CastleSi'
	DB	'ege] GS_DGAnsCastleNpcBuy() - CCastleSiege::AddDbNPC() FAILED'
	DB	' - Npc:(CLS:%d, IDX:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@LDEGMOJD@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@
CONST	SEGMENT
??_C@_0FK@LDEGMOJD@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@ DB '[CastleSi'
	DB	'ege] GS_DGAnsCastleNpcBuy() - CCastleSiege::AddDbNPC() OK - N'
	DB	'pc:(CLS:%d, IDX:%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HK@OKLAENCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
CONST	SEGMENT
??_C@_0HK@OKLAENCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x03] GS_DGAnsCastleNpcBuy() - '
	DB	'lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleNpcBuy@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleNpcBuy@@YAXPAE@Z PROC			; GS_DGAnsCastleNpcBuy, COMDAT

; 4958 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4959 : //#if(GS_CASTLE==1)
; 4960 : 	CSP_ANS_NPCBUY* lpMsg = (CSP_ANS_NPCBUY*)lpRecv;
; 4961 : 
; 4962 : 	if(lpMsg == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 2b 01 00
	00		 je	 $LN9@GS_DGAnsCa@2

; 4963 : 		return;
; 4964 : 
; 4965 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00014	85 c0		 test	 eax, eax
  00016	74 06		 je	 SHORT $LN11@GS_DGAnsCa@2
  00018	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0001c	eb 03		 jmp	 SHORT $LN12@GS_DGAnsCa@2
$LN11@GS_DGAnsCa@2:
  0001e	83 c8 ff	 or	 eax, -1
$LN12@GS_DGAnsCa@2:
  00021	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  00025	3b c8		 cmp	 ecx, eax
  00027	74 13		 je	 SHORT $LN7@GS_DGAnsCa@2

; 4966 : 	{
; 4967 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x03] GS_DGAnsCastleNpcBuy() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HK@OKLAENCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002e	6a 02		 push	 2
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00036	83 c4 08	 add	 esp, 8
  00039	5e		 pop	 esi

; 5002 : //#else
; 5003 : //	return;
; 5004 : //#endif
; 5005 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN7@GS_DGAnsCa@2:

; 4968 : 		return;
; 4969 : 	}
; 4970 : 
; 4971 : 	if (lpMsg->iResult == 1)

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 4972 : 	{
; 4973 : 		BOOL bAddResult = g_CastleSiege.AddDbNPC(lpMsg->iNpcNumber,lpMsg->iNpcIndex);

  0003f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00042	52		 push	 edx
  00043	83 f8 01	 cmp	 eax, 1
  00046	0f 85 c3 00 00
	00		 jne	 $LN6@GS_DGAnsCa@2
  0004c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004f	50		 push	 eax
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00055	e8 00 00 00 00	 call	 ?AddDbNPC@CCastleSiege@@QAEHHH@Z ; CCastleSiege::AddDbNPC

; 4974 : 	
; 4975 : 		if ( bAddResult == TRUE)

  0005a	83 f8 01	 cmp	 eax, 1
  0005d	0f 85 94 00 00
	00		 jne	 $LN5@GS_DGAnsCa@2

; 4976 : 		{
; 4977 : 			if(gObjIsConnected(lpMsg->iIndex))

  00063	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0006c	83 c4 04	 add	 esp, 4
  0006f	85 c0		 test	 eax, eax
  00071	74 6c		 je	 SHORT $LN4@GS_DGAnsCa@2

; 4978 : 			{
; 4979 : 				gObj[lpMsg->iIndex].Money -= lpMsg->iBuyCost;

  00073	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007b	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00081	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00084	29 8c 02 f0 00
	00 00		 sub	 DWORD PTR [edx+eax+240], ecx
  0008b	8d 84 02 f0 00
	00 00		 lea	 eax, DWORD PTR [edx+eax+240]

; 4980 : 
; 4981 : 				if(gObj[lpMsg->iIndex].Money < 0 )

  00092	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000a0	83 bc 02 f0 00
	00 00 00	 cmp	 DWORD PTR [edx+eax+240], 0
  000a8	7d 19		 jge	 SHORT $LN3@GS_DGAnsCa@2

; 4982 : 				{
; 4983 : 					gObj[lpMsg->iIndex].Money = 0;

  000aa	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000ad	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000b3	c7 84 01 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+240], 0
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN3@GS_DGAnsCa@2:

; 4984 : 				}
; 4985 : 
; 4986 : 				GCMoneySend(lpMsg->iIndex,gObj[lpMsg->iIndex].Money);

  000c3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000c6	8b d1		 mov	 edx, ecx
  000c8	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000ce	8b 84 02 f0 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+240]
  000d5	50		 push	 eax
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  000dc	83 c4 08	 add	 esp, 8
$LN4@GS_DGAnsCa@2:

; 4987 : 			}
; 4988 : 
; 4989 : 			LogAddTD("[CastleSiege] GS_DGAnsCastleNpcBuy() - CCastleSiege::AddDbNPC() OK - Npc:(CLS:%d, IDX:%d)",lpMsg->iNpcNumber,lpMsg->iNpcIndex);

  000df	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e2	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000e5	51		 push	 ecx
  000e6	52		 push	 edx
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@LDEGMOJD@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4990 : 		}
; 4991 : 		else

  000f5	eb 2b		 jmp	 SHORT $LN1@GS_DGAnsCa@2
$LN5@GS_DGAnsCa@2:

; 4992 : 		{
; 4993 : 			LogAddTD("[CastleSiege] GS_DGAnsCastleNpcBuy() - CCastleSiege::AddDbNPC() FAILED - Npc:(CLS:%d, IDX:%d)",lpMsg->iNpcNumber,lpMsg->iNpcIndex);

  000f7	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000fa	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000fd	50		 push	 eax
  000fe	51		 push	 ecx
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@MKLLBJCJ@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4994 : 		}
; 4995 : 	}
; 4996 : 	else

  0010d	eb 13		 jmp	 SHORT $LN1@GS_DGAnsCa@2
$LN6@GS_DGAnsCa@2:

; 4997 : 	{
; 4998 : 		LogAddTD("[CastleSiege] GS_DGAnsCastleNpcBuy() FAILED - Result:(%d), Npc:(CLS:%d, IDX:%d)",lpMsg->iResult,lpMsg->iNpcNumber,lpMsg->iNpcIndex); 

  0010f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00112	51		 push	 ecx
  00113	50		 push	 eax
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@BIAOFLEB@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcB@
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@GS_DGAnsCa@2:

; 4999 : 	}
; 5000 : 
; 5001 : 	GCAnsNpcBuy(lpMsg->iIndex,lpMsg->iResult,lpMsg->iNpcNumber,lpMsg->iNpcIndex);

  00122	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00125	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00128	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012b	52		 push	 edx
  0012c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0012f	50		 push	 eax
  00130	51		 push	 ecx
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 ?GCAnsNpcBuy@@YAXHHHH@Z	; GCAnsNpcBuy
  00137	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@GS_DGAnsCa@2:
  0013a	5e		 pop	 esi

; 5002 : //#else
; 5003 : //	return;
; 5004 : //#endif
; 5005 : }

  0013b	5d		 pop	 ebp
  0013c	c3		 ret	 0
?GS_DGAnsCastleNpcBuy@@YAXPAE@Z ENDP			; GS_DGAnsCastleNpcBuy
_TEXT	ENDS
PUBLIC	??_C@_0FD@BEMJCHLC@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@ ; `string'
PUBLIC	??_C@_0GE@FAGFLPLN@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@ ; `string'
PUBLIC	??_C@_0GA@JLLACOMH@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@ ; `string'
PUBLIC	??_C@_0HN@PMNAMEJH@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsCastleNpcRepair@@YAXPAE@Z		; GS_DGAnsCastleNpcRepair
EXTRN	?GCAnsNpcRepair@@YAXHHHHHH@Z:PROC		; GCAnsNpcRepair
EXTRN	?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z:PROC	; CCastleSiege::RepairDbNPC
;	COMDAT ??_C@_0FD@BEMJCHLC@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0FD@BEMJCHLC@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@ DB '[CastleSi'
	DB	'ege] GS_DGAnsCastleNpcRepair() FAILED - Result:(%d), Npc:(CLS'
	DB	':%d, IDX:%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@FAGFLPLN@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@
CONST	SEGMENT
??_C@_0GE@FAGFLPLN@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@ DB '[CastleSi'
	DB	'ege] GS_DGAnsCastleNpcRepair() - CCastleSiege::RepairDbNPC() '
	DB	'FAILED - Npc:(CLS:%d, IDX:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@JLLACOMH@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@
CONST	SEGMENT
??_C@_0GA@JLLACOMH@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@ DB '[CastleSi'
	DB	'ege] GS_DGAnsCastleNpcRepair() - CCastleSiege::RepairDbNPC() '
	DB	'OK - Npc:(CLS:%d, IDX:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HN@PMNAMEJH@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
CONST	SEGMENT
??_C@_0HN@PMNAMEJH@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x04] GS_DGAnsCastleNpcRepair()'
	DB	' - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleNpcRepair@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleNpcRepair@@YAXPAE@Z PROC			; GS_DGAnsCastleNpcRepair, COMDAT

; 5022 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5023 : //#if(GS_CASTLE==1)
; 5024 : 	CSP_ANS_NPCREPAIR* lpMsg = (CSP_ANS_NPCREPAIR*) lpRecv;
; 5025 : 
; 5026 : 	if(lpMsg == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 3b 01 00
	00		 je	 $LN9@GS_DGAnsCa@3

; 5027 : 		return;
; 5028 : 
; 5029 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00014	85 c0		 test	 eax, eax
  00016	74 06		 je	 SHORT $LN11@GS_DGAnsCa@3
  00018	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0001c	eb 03		 jmp	 SHORT $LN12@GS_DGAnsCa@3
$LN11@GS_DGAnsCa@3:
  0001e	83 c8 ff	 or	 eax, -1
$LN12@GS_DGAnsCa@3:
  00021	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  00025	3b c8		 cmp	 ecx, eax
  00027	74 13		 je	 SHORT $LN7@GS_DGAnsCa@3

; 5030 : 	{
; 5031 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x04] GS_DGAnsCastleNpcRepair() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@PMNAMEJH@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002e	6a 02		 push	 2
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00036	83 c4 08	 add	 esp, 8
  00039	5e		 pop	 esi

; 5065 : //#else
; 5066 : //	return;
; 5067 : //#endif
; 5068 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN7@GS_DGAnsCa@3:

; 5032 : 		return;
; 5033 : 	}
; 5034 : 
; 5035 : 	if(lpMsg->iResult == 1)

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003f	83 f8 01	 cmp	 eax, 1
  00042	0f 85 cb 00 00
	00		 jne	 $LN6@GS_DGAnsCa@3

; 5036 : 	{
; 5037 : 		BOOL bRepairResult =  g_CastleSiege.RepairDbNPC(lpMsg->iNpcNumber,lpMsg->iNpcIndex,lpMsg->iNpcHp,lpMsg->iNpcMaxHp);

  00048	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0004b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00051	52		 push	 edx
  00052	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	52		 push	 edx
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0005d	e8 00 00 00 00	 call	 ?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z ; CCastleSiege::RepairDbNPC

; 5038 : 		if( bRepairResult == TRUE)

  00062	83 f8 01	 cmp	 eax, 1
  00065	0f 85 90 00 00
	00		 jne	 $LN5@GS_DGAnsCa@3

; 5039 : 		{
; 5040 : 			if(gObjIsConnected(lpMsg->iIndex))

  0006b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	74 68		 je	 SHORT $LN4@GS_DGAnsCa@3

; 5041 : 			{
; 5042 : 				gObj[lpMsg->iIndex].Money -= lpMsg->iRepairCost;

  0007b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00084	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0008a	8d 84 11 f0 00
	00 00		 lea	 eax, DWORD PTR [ecx+edx+240]
  00091	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00094	29 08		 sub	 DWORD PTR [eax], ecx

; 5043 : 
; 5044 : 				if(gObj[lpMsg->iIndex].Money < 0 )

  00096	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009e	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000a4	83 bc 02 f0 00
	00 00 00	 cmp	 DWORD PTR [edx+eax+240], 0
  000ac	7d 19		 jge	 SHORT $LN3@GS_DGAnsCa@3

; 5045 : 				{
; 5046 : 					gObj[lpMsg->iIndex].Money = 0;

  000ae	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000b1	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000b7	c7 84 01 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+240], 0
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN3@GS_DGAnsCa@3:

; 5047 : 				}
; 5048 : 
; 5049 : 				GCMoneySend(lpMsg->iIndex,gObj[lpMsg->iIndex].Money);

  000c7	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000ca	8b d1		 mov	 edx, ecx
  000cc	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000d2	8b 84 02 f0 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+240]
  000d9	50		 push	 eax
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  000e0	83 c4 08	 add	 esp, 8
$LN4@GS_DGAnsCa@3:

; 5050 : 			}
; 5051 : 
; 5052 : 			LogAddTD("[CastleSiege] GS_DGAnsCastleNpcRepair() - CCastleSiege::RepairDbNPC() OK - Npc:(CLS:%d, IDX:%d)",lpMsg->iNpcNumber,lpMsg->iNpcIndex);

  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000e9	51		 push	 ecx
  000ea	52		 push	 edx
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0GA@JLLACOMH@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5053 : 		}
; 5054 : 		else

  000f9	eb 2f		 jmp	 SHORT $LN1@GS_DGAnsCa@3
$LN5@GS_DGAnsCa@3:

; 5055 : 		{
; 5056 : 			LogAddTD("[CastleSiege] GS_DGAnsCastleNpcRepair() - CCastleSiege::RepairDbNPC() FAILED - Npc:(CLS:%d, IDX:%d)",lpMsg->iNpcNumber,lpMsg->iNpcIndex);

  000fb	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000fe	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00101	50		 push	 eax
  00102	51		 push	 ecx
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0GE@FAGFLPLN@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5057 : 		}
; 5058 : 	}
; 5059 : 	else

  00111	eb 17		 jmp	 SHORT $LN1@GS_DGAnsCa@3
$LN6@GS_DGAnsCa@3:

; 5060 : 	{
; 5061 : 		LogAddTD("[CastleSiege] GS_DGAnsCastleNpcRepair() FAILED - Result:(%d), Npc:(CLS:%d, IDX:%d)",lpMsg->iResult,lpMsg->iNpcNumber,lpMsg->iNpcIndex);

  00113	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00116	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00119	52		 push	 edx
  0011a	51		 push	 ecx
  0011b	50		 push	 eax
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@BEMJCHLC@?$FLCastleSiege?$FN?5GS_DGAnsCastleNpcR@
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00127	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@GS_DGAnsCa@3:

; 5062 : 	}
; 5063 : 
; 5064 : 	GCAnsNpcRepair(lpMsg->iIndex,lpMsg->iResult,lpMsg->iNpcNumber,lpMsg->iNpcIndex,lpMsg->iNpcHp,lpMsg->iNpcMaxHp);

  0012a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0012d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00130	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00133	52		 push	 edx
  00134	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00137	50		 push	 eax
  00138	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0013b	51		 push	 ecx
  0013c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0013f	52		 push	 edx
  00140	50		 push	 eax
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ?GCAnsNpcRepair@@YAXHHHHHH@Z ; GCAnsNpcRepair
  00147	83 c4 18	 add	 esp, 24			; 00000018H
$LN9@GS_DGAnsCa@3:
  0014a	5e		 pop	 esi

; 5065 : //#else
; 5066 : //	return;
; 5067 : //#endif
; 5068 : }

  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
?GS_DGAnsCastleNpcRepair@@YAXPAE@Z ENDP			; GS_DGAnsCastleNpcRepair
_TEXT	ENDS
PUBLIC	??_C@_0GE@HOFNMLEH@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x06?$FN?5GS_DG@ ; `string'
PUBLIC	??_C@_0FG@NIOIKHAG@?$FLCastleSiege?$FN?5ERROR?5?9?5Castle?5NPC@ ; `string'
PUBLIC	??_C@_0HO@HLBFNNIO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsCastleNpcUpgrade@@YAXPAE@Z		; GS_DGAnsCastleNpcUpgrade
EXTRN	?GCAnsNpcUpgrade@@YAXHHHHHH@Z:PROC		; GCAnsNpcUpgrade
EXTRN	?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z:PROC	; CCastleSiege::UpgradeDbNPC
;	COMDAT ??_C@_0GE@HOFNMLEH@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x06?$FN?5GS_DG@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0GE@HOFNMLEH@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x06?$FN?5GS_DG@ DB '['
	DB	'CastleSiege] [0x80][0x06] GS_DGAnsTaxInfo() - Npc Upgrade OK '
	DB	'(CLS:%d, IDX:%d, UPTYPE:%d, UPVAL:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@NIOIKHAG@?$FLCastleSiege?$FN?5ERROR?5?9?5Castle?5NPC@
CONST	SEGMENT
??_C@_0FG@NIOIKHAG@?$FLCastleSiege?$FN?5ERROR?5?9?5Castle?5NPC@ DB '[Cast'
	DB	'leSiege] ERROR - Castle NPC Upgrade Fail() (CLS:%d, IDX:%d, U'
	DB	'PTYPE:%d, UPVAL:%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HO@HLBFNNIO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
CONST	SEGMENT
??_C@_0HO@HLBFNNIO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x05] GS_DGAnsCastleNpcUpgrade('
	DB	') - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleNpcUpgrade@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleNpcUpgrade@@YAXPAE@Z PROC		; GS_DGAnsCastleNpcUpgrade, COMDAT

; 5085 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5086 : //#if (GS_CASTLE==1)
; 5087 : 	CSP_ANS_NPCUPGRADE* lpMsg = (CSP_ANS_NPCUPGRADE*)lpRecv;
; 5088 : 
; 5089 : 	if(lpMsg == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 b5 00 00
	00		 je	 $LN5@GS_DGAnsCa@4

; 5090 : 		return;
; 5091 : 
; 5092 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00014	85 c0		 test	 eax, eax
  00016	74 06		 je	 SHORT $LN7@GS_DGAnsCa@4
  00018	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0001c	eb 03		 jmp	 SHORT $LN8@GS_DGAnsCa@4
$LN7@GS_DGAnsCa@4:
  0001e	83 c8 ff	 or	 eax, -1
$LN8@GS_DGAnsCa@4:
  00021	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  00025	3b c8		 cmp	 ecx, eax
  00027	74 13		 je	 SHORT $LN3@GS_DGAnsCa@4

; 5093 : 	{
; 5094 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x05] GS_DGAnsCastleNpcUpgrade() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HO@HLBFNNIO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002e	6a 02		 push	 2
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00036	83 c4 08	 add	 esp, 8
  00039	5e		 pop	 esi

; 5109 : 
; 5110 : //#else
; 5111 : //	return;
; 5112 : //#endif
; 5113 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN3@GS_DGAnsCa@4:

; 5095 : 		return;
; 5096 : 	}
; 5097 : 
; 5098 : 	if(lpMsg->iResult == 0)

  0003c	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00040	75 22		 jne	 SHORT $LN2@GS_DGAnsCa@4

; 5099 : 	{
; 5100 : 		LogAddC(2,"[CastleSiege] ERROR - Castle NPC Upgrade Fail() (CLS:%d, IDX:%d, UPTYPE:%d, UPVAL:%d)",lpMsg->iNpcNumber,lpMsg->iNpcIndex,lpMsg->iNpcUpType,lpMsg->iNpcUpValue);

  00042	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00045	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00048	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004b	52		 push	 edx
  0004c	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0004f	50		 push	 eax
  00050	51		 push	 ecx
  00051	52		 push	 edx
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@NIOIKHAG@?$FLCastleSiege?$FN?5ERROR?5?9?5Castle?5NPC@
  00057	6a 02		 push	 2
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0005f	83 c4 18	 add	 esp, 24			; 00000018H

; 5101 : 	}
; 5102 : 	else

  00062	eb 40		 jmp	 SHORT $LN1@GS_DGAnsCa@4
$LN2@GS_DGAnsCa@4:

; 5103 : 	{
; 5104 : 		g_CastleSiege.UpgradeDbNPC(lpMsg->iIndex,lpMsg->iNpcNumber,lpMsg->iNpcIndex,lpMsg->iNpcUpType,lpMsg->iNpcUpValue,lpMsg->iNpcUpIndex);

  00064	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00067	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0006a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0006d	50		 push	 eax
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	51		 push	 ecx
  00072	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00075	52		 push	 edx
  00076	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00079	50		 push	 eax
  0007a	51		 push	 ecx
  0007b	52		 push	 edx
  0007c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00081	e8 00 00 00 00	 call	 ?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z ; CCastleSiege::UpgradeDbNPC

; 5105 : 		LogAddTD("[CastleSiege] [0x80][0x06] GS_DGAnsTaxInfo() - Npc Upgrade OK (CLS:%d, IDX:%d, UPTYPE:%d, UPVAL:%d)",lpMsg->iNpcNumber, lpMsg->iNpcIndex,lpMsg->iNpcUpType,lpMsg->iNpcUpValue);

  00086	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00089	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0008c	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0008f	50		 push	 eax
  00090	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00093	51		 push	 ecx
  00094	52		 push	 edx
  00095	50		 push	 eax
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0GE@HOFNMLEH@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x06?$FN?5GS_DG@
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@GS_DGAnsCa@4:

; 5106 : 	}
; 5107 : 
; 5108 : 	GCAnsNpcUpgrade(lpMsg->iIndex,lpMsg->iResult,lpMsg->iNpcNumber,lpMsg->iNpcIndex,lpMsg->iNpcUpType,lpMsg->iNpcUpValue);

  000a4	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000a7	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000aa	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ad	51		 push	 ecx
  000ae	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000b1	52		 push	 edx
  000b2	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b5	50		 push	 eax
  000b6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b9	51		 push	 ecx
  000ba	52		 push	 edx
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  000c1	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@GS_DGAnsCa@4:
  000c4	5e		 pop	 esi

; 5109 : 
; 5110 : //#else
; 5111 : //	return;
; 5112 : //#endif
; 5113 : }

  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
?GS_DGAnsCastleNpcUpgrade@@YAXPAE@Z ENDP		; GS_DGAnsCastleNpcUpgrade
_TEXT	ENDS
PUBLIC	??_C@_0HF@NIPKIGMO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsTaxInfo@@YAXPAE@Z			; GS_DGAnsTaxInfo
EXTRN	?SetCastleMoney@CCastleSiege@@QAEX_J@Z:PROC	; CCastleSiege::SetCastleMoney
EXTRN	?GCAnsTaxMoneyInfo@@YAXHHEE_J@Z:PROC		; GCAnsTaxMoneyInfo
;	COMDAT ??_C@_0HF@NIPKIGMO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HF@NIPKIGMO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x06] GS_DGAnsTaxInfo() - lpMsg'
	DB	'->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsTaxInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsTaxInfo@@YAXPAE@Z PROC				; GS_DGAnsTaxInfo, COMDAT

; 5129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5130 : //#if(GS_CASTLE==1)
; 5131 : 	CSP_ANS_TAXINFO* lpMsg = (CSP_ANS_TAXINFO*)lpRecv;
; 5132 : 
; 5133 : 	if(lpMsg == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 65		 je	 SHORT $LN1@GS_DGAnsTa

; 5134 : 		return;
; 5135 : 	
; 5136 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000b	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00010	85 c0		 test	 eax, eax
  00012	74 06		 je	 SHORT $LN6@GS_DGAnsTa
  00014	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00018	eb 03		 jmp	 SHORT $LN7@GS_DGAnsTa
$LN6@GS_DGAnsTa:
  0001a	83 c8 ff	 or	 eax, -1
$LN7@GS_DGAnsTa:
  0001d	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  00021	3b c8		 cmp	 ecx, eax
  00023	74 13		 je	 SHORT $LN2@GS_DGAnsTa

; 5137 : 	{
; 5138 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x06] GS_DGAnsTaxInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@NIPKIGMO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00032	83 c4 08	 add	 esp, 8
  00035	5e		 pop	 esi

; 5146 : 	}
; 5147 : //#else
; 5148 : //	return;
; 5149 : //#endif
; 5150 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN2@GS_DGAnsTa:

; 5139 : 		return;
; 5140 : 	}
; 5141 : 
; 5142 : 	if(lpMsg->iResult == TRUE)

  00038	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0003c	75 32		 jne	 SHORT $LN1@GS_DGAnsTa

; 5143 : 	{
; 5144 : 		GCAnsTaxMoneyInfo(lpMsg->iIndex,lpMsg->iResult,lpMsg->iTaxRateChaos,lpMsg->iTaxRateStore,lpMsg->i64CastleMoney);

  0003e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00041	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00044	0f b6 4e 1c	 movzx	 ecx, BYTE PTR [esi+28]
  00048	52		 push	 edx
  00049	0f b6 56 18	 movzx	 edx, BYTE PTR [esi+24]
  0004d	50		 push	 eax
  0004e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	6a 01		 push	 1
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?GCAnsTaxMoneyInfo@@YAXHHEE_J@Z ; GCAnsTaxMoneyInfo

; 5145 : 		g_CastleSiege.SetCastleMoney(lpMsg->i64CastleMoney);

  0005b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0005e	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00061	83 c4 18	 add	 esp, 24			; 00000018H
  00064	51		 push	 ecx
  00065	52		 push	 edx
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0006b	e8 00 00 00 00	 call	 ?SetCastleMoney@CCastleSiege@@QAEX_J@Z ; CCastleSiege::SetCastleMoney
$LN1@GS_DGAnsTa:
  00070	5e		 pop	 esi

; 5146 : 	}
; 5147 : //#else
; 5148 : //	return;
; 5149 : //#endif
; 5150 : }

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?GS_DGAnsTaxInfo@@YAXPAE@Z ENDP				; GS_DGAnsTaxInfo
_TEXT	ENDS
PUBLIC	??_C@_0HL@PMPBBPDM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsTaxRateChange@@YAXPAE@Z		; GS_DGAnsTaxRateChange
EXTRN	?GCAnsTaxRateChange@@YAXHHEH@Z:PROC		; GCAnsTaxRateChange
EXTRN	?SetTaxRate@CCastleSiege@@QAEXHH@Z:PROC		; CCastleSiege::SetTaxRate
;	COMDAT ??_C@_0HL@PMPBBPDM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HL@PMPBBPDM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x07] GS_DGAnsTaxRateChange() -'
	DB	' lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsTaxRateChange@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsTaxRateChange@@YAXPAE@Z PROC			; GS_DGAnsTaxRateChange, COMDAT

; 5164 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5165 : //#if(GS_CASTLE==1)
; 5166 : 	CSP_ANS_TAXRATECHANGE* lpMsg = (CSP_ANS_TAXRATECHANGE*)lpRecv;
; 5167 : 
; 5168 : 	if(lpMsg == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 5e		 je	 SHORT $LN1@GS_DGAnsTa@2

; 5169 : 		return;
; 5170 : 
; 5171 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000b	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00010	85 c0		 test	 eax, eax
  00012	74 06		 je	 SHORT $LN6@GS_DGAnsTa@2
  00014	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00018	eb 03		 jmp	 SHORT $LN7@GS_DGAnsTa@2
$LN6@GS_DGAnsTa@2:
  0001a	83 c8 ff	 or	 eax, -1
$LN7@GS_DGAnsTa@2:
  0001d	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  00021	3b c8		 cmp	 ecx, eax
  00023	74 13		 je	 SHORT $LN2@GS_DGAnsTa@2

; 5172 : 	{
; 5173 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x07] GS_DGAnsTaxRateChange() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0HL@PMPBBPDM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00032	83 c4 08	 add	 esp, 8
  00035	5e		 pop	 esi

; 5181 : 	}
; 5182 : //#else
; 5183 : //	return;
; 5184 : //#endif
; 5185 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN2@GS_DGAnsTa@2:

; 5174 : 		return;
; 5175 : 	}
; 5176 : 
; 5177 : 	if(lpMsg->iResult == 1)

  00038	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0003c	75 2b		 jne	 SHORT $LN1@GS_DGAnsTa@2

; 5178 : 	{
; 5179 : 		g_CastleSiege.SetTaxRate(lpMsg->iTaxKind,lpMsg->iTaxRate);

  0003e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00041	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00044	52		 push	 edx
  00045	50		 push	 eax
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0004b	e8 00 00 00 00	 call	 ?SetTaxRate@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetTaxRate

; 5180 : 		GCAnsTaxRateChange(lpMsg->iIndex,lpMsg->iResult,lpMsg->iTaxKind,lpMsg->iTaxRate);

  00050	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00053	0f b6 56 10	 movzx	 edx, BYTE PTR [esi+16]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	51		 push	 ecx
  0005b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005e	52		 push	 edx
  0005f	50		 push	 eax
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 ?GCAnsTaxRateChange@@YAXHHEH@Z ; GCAnsTaxRateChange
  00066	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@GS_DGAnsTa@2:
  00069	5e		 pop	 esi

; 5181 : 	}
; 5182 : //#else
; 5183 : //	return;
; 5184 : //#endif
; 5185 : }

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?GS_DGAnsTaxRateChange@@YAXPAE@Z ENDP			; GS_DGAnsTaxRateChange
_TEXT	ENDS
PUBLIC	??_C@_0HE@CADAABKE@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x08?$FN?5GS_DG@ ; `string'
PUBLIC	??_C@_0HP@IIFHPCOO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsCastleMoneyChange@@YAXPAE@Z		; GS_DGAnsCastleMoneyChange
EXTRN	?GCAnsMoneyDrawOut@@YAXHH_J@Z:PROC		; GCAnsMoneyDrawOut
;	COMDAT ??_C@_0HE@CADAABKE@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x08?$FN?5GS_DG@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HE@CADAABKE@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x08?$FN?5GS_DG@ DB '['
	DB	'CastleSiege] [0x80][0x08] GS_DGAnsCastleMoneyChange() - Withd'
	DB	'raw Request OK [%s][%s] (ReqMoney:%d, TotMoney:%I64d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HP@IIFHPCOO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
CONST	SEGMENT
??_C@_0HP@IIFHPCOO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x08] GS_DGAnsCastleMoneyChange'
	DB	'() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()'
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleMoneyChange@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleMoneyChange@@YAXPAE@Z PROC		; GS_DGAnsCastleMoneyChange, COMDAT

; 5199 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5200 : //#if(GS_CASTLE==1)
; 5201 : 	CSP_ANS_MONEYCHANGE* lpMsg = (CSP_ANS_MONEYCHANGE*)lpRecv;
; 5202 : 
; 5203 : 	if(lpMsg == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 1b 01 00
	00		 je	 $LN7@GS_DGAnsCa@5

; 5204 : 		return;
; 5205 : 
; 5206 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00014	85 c0		 test	 eax, eax
  00016	74 06		 je	 SHORT $LN9@GS_DGAnsCa@5
  00018	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0001c	eb 03		 jmp	 SHORT $LN10@GS_DGAnsCa@5
$LN9@GS_DGAnsCa@5:
  0001e	83 c8 ff	 or	 eax, -1
$LN10@GS_DGAnsCa@5:
  00021	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  00025	3b c8		 cmp	 ecx, eax
  00027	74 13		 je	 SHORT $LN5@GS_DGAnsCa@5

; 5207 : 	{
; 5208 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x08] GS_DGAnsCastleMoneyChange() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HP@IIFHPCOO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002e	6a 02		 push	 2
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00036	83 c4 08	 add	 esp, 8
  00039	5e		 pop	 esi

; 5234 : //#else
; 5235 : //	return;
; 5236 : //#endif
; 5237 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN5@GS_DGAnsCa@5:

; 5209 : 		return;
; 5210 : 	}
; 5211 : 
; 5212 : 	if(lpMsg->iResult == TRUE)

  0003c	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  00040	0f 85 cc 00 00
	00		 jne	 $LN4@GS_DGAnsCa@5

; 5213 : 	{
; 5214 : 		if(gObjIsConnected(lpMsg->iIndex))

  00046	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0004f	83 c4 04	 add	 esp, 4
  00052	85 c0		 test	 eax, eax
  00054	0f 84 a6 00 00
	00		 je	 $LN2@GS_DGAnsCa@5

; 5215 : 		{
; 5216 : 			if(lpMsg->iMoneyChanged < 0)

  0005a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0005d	85 c9		 test	 ecx, ecx
  0005f	0f 89 9b 00 00
	00		 jns	 $LN2@GS_DGAnsCa@5

; 5217 : 			{
; 5218 : 				gObj[lpMsg->iIndex].Money -= lpMsg->iMoneyChanged;

  00065	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00074	29 8c 10 f0 00
	00 00		 sub	 DWORD PTR [eax+edx+240], ecx

; 5219 : 
; 5220 : 				if(gObj[lpMsg->iIndex].Money > MAX_ZEN)

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00081	8d 84 10 f0 00
	00 00		 lea	 eax, DWORD PTR [eax+edx+240]
  00088	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0008b	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00091	b8 00 94 35 77	 mov	 eax, 2000000000		; 77359400H
  00096	39 84 0a f0 00
	00 00		 cmp	 DWORD PTR [edx+ecx+240], eax
  0009d	7e 16		 jle	 SHORT $LN1@GS_DGAnsCa@5

; 5221 : 				{
; 5222 : 					gObj[lpMsg->iIndex].Money = MAX_ZEN;

  0009f	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000a2	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000a8	89 84 0a f0 00
	00 00		 mov	 DWORD PTR [edx+ecx+240], eax
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN1@GS_DGAnsCa@5:

; 5223 : 				}
; 5224 : 				GCMoneySend(lpMsg->iIndex,gObj[lpMsg->iIndex].Money);

  000b5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b8	8b d0		 mov	 edx, eax
  000ba	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000c0	8b 8c 0a f0 00
	00 00		 mov	 ecx, DWORD PTR [edx+ecx+240]
  000c7	51		 push	 ecx
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5225 : 
; 5226 : 				LogAddTD("[CastleSiege] [0x80][0x08] GS_DGAnsCastleMoneyChange() - Withdraw Request OK [%s][%s] (ReqMoney:%d, TotMoney:%I64d)",gObj[lpMsg->iIndex].AccountID,
; 5227 : 				gObj[lpMsg->iIndex].Name,lpMsg->iMoneyChanged,lpMsg->i64CastleMoney);

  000ce	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d6	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000dc	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000df	51		 push	 ecx
  000e0	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000e3	03 c2		 add	 eax, edx
  000e5	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000e8	52		 push	 edx
  000e9	51		 push	 ecx
  000ea	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  000ed	52		 push	 edx
  000ee	83 c0 6c	 add	 eax, 108		; 0000006cH
  000f1	50		 push	 eax
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0HE@CADAABKE@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x08?$FN?5GS_DG@
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000fd	83 c4 20	 add	 esp, 32			; 00000020H
$LN2@GS_DGAnsCa@5:

; 5228 : 			}
; 5229 : 		}
; 5230 : 		g_CastleSiege.SetCastleMoney(lpMsg->i64CastleMoney);

  00100	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00103	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00106	50		 push	 eax
  00107	51		 push	 ecx
  00108	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0010d	e8 00 00 00 00	 call	 ?SetCastleMoney@CCastleSiege@@QAEX_J@Z ; CCastleSiege::SetCastleMoney
$LN4@GS_DGAnsCa@5:

; 5231 : 	}
; 5232 : 	
; 5233 : 	GCAnsMoneyDrawOut(lpMsg->iIndex,lpMsg->iResult,lpMsg->i64CastleMoney);

  00112	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00115	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00118	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0011b	52		 push	 edx
  0011c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0011f	50		 push	 eax
  00120	51		 push	 ecx
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 ?GCAnsMoneyDrawOut@@YAXHH_J@Z ; GCAnsMoneyDrawOut
  00127	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@GS_DGAnsCa@5:
  0012a	5e		 pop	 esi

; 5234 : //#else
; 5235 : //	return;
; 5236 : //#endif
; 5237 : }

  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
?GS_DGAnsCastleMoneyChange@@YAXPAE@Z ENDP		; GS_DGAnsCastleMoneyChange
_TEXT	ENDS
PUBLIC	??_C@_0HN@KCDIDGDG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsSiegeDateChange@@YAXPAE@Z		; GS_DGAnsSiegeDateChange
;	COMDAT ??_C@_0HN@KCDIDGDG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HN@KCDIDGDG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x09] GS_DGAnsSiegeDateChange()'
	DB	' - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsSiegeDateChange@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsSiegeDateChange@@YAXPAE@Z PROC			; GS_DGAnsSiegeDateChange, COMDAT

; 5255 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5256 : //#if(GS_CASTLE==1)
; 5257 : 	CSP_ANS_SDEDCHANGE* lpMsg = (CSP_ANS_SDEDCHANGE*)lpRecv;
; 5258 : 
; 5259 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsSi

; 5260 : 		return;
; 5261 : 
; 5262 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsSi
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsSi
$LN5@GS_DGAnsSi:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsSi:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsSi

; 5263 : 	{
; 5264 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x09] GS_DGAnsSiegeDateChange() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@KCDIDGDG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsSi:

; 5265 : 		return;
; 5266 : 	}
; 5267 : //#else
; 5268 : //	return;
; 5269 : //#endif
; 5270 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsSiegeDateChange@@YAXPAE@Z ENDP			; GS_DGAnsSiegeDateChange
_TEXT	ENDS
PUBLIC	??_C@_0HO@JKCCCDJI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsGuildMarkRegInfo@@YAXPAE@Z		; GS_DGAnsGuildMarkRegInfo
EXTRN	?GCAnsGuildRegInfo@@YAXHHPAUCSP_ANS_GUILDREGINFO@@@Z:PROC ; GCAnsGuildRegInfo
;	COMDAT ??_C@_0HO@JKCCCDJI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HO@JKCCCDJI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x0A] GS_DGAnsGuildMarkRegInfo('
	DB	') - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsGuildMarkRegInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsGuildMarkRegInfo@@YAXPAE@Z PROC		; GS_DGAnsGuildMarkRegInfo, COMDAT

; 5273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5274 : //#if(GS_CASTLE==1)
; 5275 : 	CSP_ANS_GUILDREGINFO* lpMsg = (CSP_ANS_GUILDREGINFO*)lpRecv;
; 5276 : 
; 5277 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3d		 je	 SHORT $LN3@GS_DGAnsGu

; 5278 : 		return;
; 5279 : 	
; 5280 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsGu
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsGu
$LN5@GS_DGAnsGu:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsGu:
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	3b d0		 cmp	 edx, eax
  00022	74 12		 je	 SHORT $LN1@GS_DGAnsGu

; 5281 : 	{
; 5282 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x0A] GS_DGAnsGuildMarkRegInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HO@JKCCCDJI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8

; 5287 : //#else
; 5288 : //	return;
; 5289 : //#endif
; 5290 : 
; 5291 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN1@GS_DGAnsGu:

; 5283 : 		return;
; 5284 : 	}
; 5285 : 
; 5286 : 	GCAnsGuildRegInfo(lpMsg->iIndex,lpMsg->iResult,lpMsg);

  00036	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00039	51		 push	 ecx
  0003a	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?GCAnsGuildRegInfo@@YAXHHPAUCSP_ANS_GUILDREGINFO@@@Z ; GCAnsGuildRegInfo
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@GS_DGAnsGu:

; 5287 : //#else
; 5288 : //	return;
; 5289 : //#endif
; 5290 : 
; 5291 : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?GS_DGAnsGuildMarkRegInfo@@YAXPAE@Z ENDP		; GS_DGAnsGuildMarkRegInfo
_TEXT	ENDS
PUBLIC	??_C@_0HO@EGJJDJOF@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsSiegeEndedChange@@YAXPAE@Z		; GS_DGAnsSiegeEndedChange
;	COMDAT ??_C@_0HO@EGJJDJOF@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HO@EGJJDJOF@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x0B] GS_DGAnsSiegeEndedChange('
	DB	') - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsSiegeEndedChange@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsSiegeEndedChange@@YAXPAE@Z PROC		; GS_DGAnsSiegeEndedChange, COMDAT

; 5303 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5304 : //#if(GS_CASTLE==1)
; 5305 : 	CSP_ANS_SIEGEENDCHANGE* lpMsg = (CSP_ANS_SIEGEENDCHANGE*)lpRecv;
; 5306 : 
; 5307 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsSi@2

; 5308 : 		return;
; 5309 : 
; 5310 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsSi@2
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsSi@2
$LN5@GS_DGAnsSi@2:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsSi@2:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsSi@2

; 5311 : 	{
; 5312 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x0B] GS_DGAnsSiegeEndedChange() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HO@EGJJDJOF@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsSi@2:

; 5313 : 		return;
; 5314 : 	}
; 5315 : //#else
; 5316 : //	return;
; 5317 : //#endif
; 5318 : 
; 5319 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsSiegeEndedChange@@YAXPAE@Z ENDP		; GS_DGAnsSiegeEndedChange
_TEXT	ENDS
PUBLIC	??_C@_0HP@ODLOINGN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsCastleOwnerChange@@YAXPAE@Z		; GS_DGAnsCastleOwnerChange
;	COMDAT ??_C@_0HP@ODLOINGN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HP@ODLOINGN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x0C] GS_DGAnsCastleOwnerChange'
	DB	'() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()'
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleOwnerChange@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleOwnerChange@@YAXPAE@Z PROC		; GS_DGAnsCastleOwnerChange, COMDAT

; 5336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5337 : //#if(GS_CASTLE==1)
; 5338 : 	CSP_ANS_CASTLEOWNERCHANGE* lpMsg = (CSP_ANS_CASTLEOWNERCHANGE*)lpRecv;
; 5339 : 
; 5340 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsCa@6

; 5341 : 		return;
; 5342 : 
; 5343 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsCa@6
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsCa@6
$LN5@GS_DGAnsCa@6:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsCa@6:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsCa@6

; 5344 : 	{
; 5345 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x0C] GS_DGAnsCastleOwnerChange() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HP@ODLOINGN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsCa@6:

; 5346 : 		return;
; 5347 : 	}
; 5348 : //#else
; 5349 : //	return;
; 5350 : //#endif
; 5351 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsCastleOwnerChange@@YAXPAE@Z ENDP		; GS_DGAnsCastleOwnerChange
_TEXT	ENDS
PUBLIC	??_C@_0HM@ENOOGPCP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsRegAttackGuild@@YAXPAE@Z		; GS_DGAnsRegAttackGuild
EXTRN	?GCAnsRegCastleSiege@@YAXHHPAD@Z:PROC		; GCAnsRegCastleSiege
;	COMDAT ??_C@_0HM@ENOOGPCP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HM@ENOOGPCP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x0D] GS_DGAnsRegAttackGuild() '
	DB	'- lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsRegAttackGuild@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsRegAttackGuild@@YAXPAE@Z PROC			; GS_DGAnsRegAttackGuild, COMDAT

; 5365 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5366 : //#if(GS_CASTLE==1)
; 5367 : 	CSP_ANS_REGATTACKGUILD* lpMsg = (CSP_ANS_REGATTACKGUILD*)lpRecv;
; 5368 : 
; 5369 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 40		 je	 SHORT $LN3@GS_DGAnsRe

; 5370 : 		return;
; 5371 : 
; 5372 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsRe
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsRe
$LN5@GS_DGAnsRe:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsRe:
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	3b d0		 cmp	 edx, eax
  00022	74 12		 je	 SHORT $LN1@GS_DGAnsRe

; 5373 : 	{
; 5374 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x0D] GS_DGAnsRegAttackGuild() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HM@ENOOGPCP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8

; 5379 : //#else
; 5380 : //	return;
; 5381 : //#endif
; 5382 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN1@GS_DGAnsRe:

; 5375 : 		return;
; 5376 : 	}
; 5377 : 
; 5378 : 	GCAnsRegCastleSiege(lpMsg->iIndex,lpMsg->iResult,lpMsg->szEnemyGuildName);

  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  0003c	50		 push	 eax
  0003d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00040	52		 push	 edx
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?GCAnsRegCastleSiege@@YAXHHPAD@Z ; GCAnsRegCastleSiege
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@GS_DGAnsRe:

; 5379 : //#else
; 5380 : //	return;
; 5381 : //#endif
; 5382 : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?GS_DGAnsRegAttackGuild@@YAXPAE@Z ENDP			; GS_DGAnsRegAttackGuild
_TEXT	ENDS
PUBLIC	??_C@_0IA@JGOKJONB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsRestartCastleState@@YAXPAE@Z		; GS_DGAnsRestartCastleState
EXTRN	?ResetCastleCycle@CCastleSiege@@QAEXXZ:PROC	; CCastleSiege::ResetCastleCycle
;	COMDAT ??_C@_0IA@JGOKJONB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0IA@JGOKJONB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x0E] GS_DGAnsRestartCastleStat'
	DB	'e() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup('
	DB	')', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsRestartCastleState@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsRestartCastleState@@YAXPAE@Z PROC		; GS_DGAnsRestartCastleState, COMDAT

; 5393 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5394 : //#if(GS_CASTLE==1)
; 5395 : 	CSP_ANS_CASTLESIEGEEND* lpMsg = (CSP_ANS_CASTLESIEGEEND*)lpRecv;
; 5396 : 
; 5397 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsRe@2

; 5398 : 		return;
; 5399 : 
; 5400 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN6@GS_DGAnsRe@2
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN7@GS_DGAnsRe@2
$LN6@GS_DGAnsRe@2:
  00019	83 c8 ff	 or	 eax, -1
$LN7@GS_DGAnsRe@2:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 12		 je	 SHORT $LN2@GS_DGAnsRe@2

; 5401 : 	{
; 5402 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x0E] GS_DGAnsRestartCastleState() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@JGOKJONB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsRe@2:

; 5408 : 	}
; 5409 : //#else
; 5410 : //	return;
; 5411 : //#endif
; 5412 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@GS_DGAnsRe@2:

; 5403 : 		return;
; 5404 : 	}
; 5405 : 	else
; 5406 : 	{
; 5407 : 		g_CastleSiege.ResetCastleCycle();

  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege

; 5408 : 	}
; 5409 : //#else
; 5410 : //	return;
; 5411 : //#endif
; 5412 : }

  0003b	5d		 pop	 ebp

; 5403 : 		return;
; 5404 : 	}
; 5405 : 	else
; 5406 : 	{
; 5407 : 		g_CastleSiege.ResetCastleCycle();

  0003c	e9 00 00 00 00	 jmp	 ?ResetCastleCycle@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCastleCycle
?GS_DGAnsRestartCastleState@@YAXPAE@Z ENDP		; GS_DGAnsRestartCastleState
_TEXT	ENDS
PUBLIC	??_C@_0IA@LNMFDGBP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GS_DGAnsMapSvrMsgMultiCast@@YAXPAE@Z		; GS_DGAnsMapSvrMsgMultiCast
EXTRN	?SendNoticeToAllUser@TNotice@@SAXPAX@Z:PROC	; TNotice::SendNoticeToAllUser
EXTRN	?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z:PROC	; TNotice::SetNoticeProperty
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
;	COMDAT ??_C@_0IA@LNMFDGBP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\tnotice.h
CONST	SEGMENT
??_C@_0IA@LNMFDGBP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x0F] GS_DGAnsMapSvrMsgMultiCas'
	DB	't() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup('
	DB	')', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsMapSvrMsgMultiCast@@YAXPAE@Z
_TEXT	SEGMENT
_pNotice$230189 = -420					; size = 272
_szNotice$ = -148					; size = 144
__$ArrayPad$ = -4					; size = 4
_lpRecv$ = 8						; size = 4
?GS_DGAnsMapSvrMsgMultiCast@@YAXPAE@Z PROC		; GS_DGAnsMapSvrMsgMultiCast, COMDAT

; 5429 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 01 00
	00		 sub	 esp, 420		; 000001a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]

; 5430 : 	CSP_ANS_MAPSVRMULTICAST * lpMsg = (CSP_ANS_MAPSVRMULTICAST *)lpRecv;
; 5431 : 
; 5432 : 	if ( lpMsg == NULL )

  00017	85 f6		 test	 esi, esi
  00019	0f 84 bc 00 00
	00		 je	 $LN1@GS_DGAnsMa

; 5433 : 	{
; 5434 : 		return;
; 5435 : 	}
; 5436 : 
; 5437 : 	if ( lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup() )

  0001f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00024	85 c0		 test	 eax, eax
  00026	74 06		 je	 SHORT $LN6@GS_DGAnsMa
  00028	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0002c	eb 03		 jmp	 SHORT $LN7@GS_DGAnsMa
$LN6@GS_DGAnsMa:
  0002e	83 c8 ff	 or	 eax, -1
$LN7@GS_DGAnsMa:
  00031	0f b7 4e 04	 movzx	 ecx, WORD PTR [esi+4]
  00035	3b c8		 cmp	 ecx, eax
  00037	74 1f		 je	 SHORT $LN2@GS_DGAnsMa

; 5438 : 	{
; 5439 : 		LogAddC(2, "[CastleSiege] PACKET-ERROR [0x80][0x0F] GS_DGAnsMapSvrMsgMultiCast() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@LNMFDGBP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0003e	6a 02		 push	 2
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00046	83 c4 08	 add	 esp, 8
  00049	5e		 pop	 esi

; 5453 : 	}
; 5454 : 
; 5455 : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN2@GS_DGAnsMa:
  00058	57		 push	 edi

; 5440 : 		return;
; 5441 : 	}
; 5442 : 
; 5443 : 	char szNotice[144] = {0};

  00059	68 8f 00 00 00	 push	 143			; 0000008fH
  0005e	8d 95 6d ff ff
	ff		 lea	 edx, DWORD PTR _szNotice$[ebp+1]
  00064	6a 00		 push	 0
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _memset
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5444 : 	memcpy(szNotice, lpMsg->szMsgText, 128);

  0006f	83 c6 06	 add	 esi, 6
  00072	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00077	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR _szNotice$[ebp]

; 5445 : 
; 5446 : 	if ( strlen(szNotice) > 1 )

  0007d	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _szNotice$[ebp]
  00083	f3 a5		 rep movsd
  00085	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00088	5f		 pop	 edi
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL11@GS_DGAnsMa:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL11@GS_DGAnsMa
  00097	2b c2		 sub	 eax, edx
  00099	83 f8 01	 cmp	 eax, 1
  0009c	76 3d		 jbe	 SHORT $LN1@GS_DGAnsMa

; 5447 : 	{
; 5448 : 		PMSG_NOTICE pNotice;
; 5449 : 
; 5450 : 		TNotice::MakeNoticeMsg((TNotice *)&pNotice, 0, szNotice);

  0009e	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _szNotice$[ebp]
  000a4	50		 push	 eax
  000a5	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$230189[ebp]
  000ab	6a 00		 push	 0
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 5451 : 		TNotice::SetNoticeProperty((TNotice *)&pNotice, 0, _ARGB(255, 255, 200, 80), 1, 0, 20);

  000b3	6a 14		 push	 20			; 00000014H
  000b5	6a 00		 push	 0
  000b7	6a 01		 push	 1
  000b9	68 ff c8 50 ff	 push	 -11482881		; ff50c8ffH
  000be	8d 95 5c fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$230189[ebp]
  000c4	6a 00		 push	 0
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 ?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z ; TNotice::SetNoticeProperty

; 5452 : 		TNotice::SendNoticeToAllUser((TNotice *)&pNotice);

  000cc	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$230189[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?SendNoticeToAllUser@TNotice@@SAXPAX@Z ; TNotice::SendNoticeToAllUser
  000d8	83 c4 28	 add	 esp, 40			; 00000028H
$LN1@GS_DGAnsMa:

; 5453 : 	}
; 5454 : 
; 5455 : }

  000db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000de	33 cd		 xor	 ecx, ebp
  000e0	5e		 pop	 esi
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?GS_DGAnsMapSvrMsgMultiCast@@YAXPAE@Z ENDP		; GS_DGAnsMapSvrMsgMultiCast
_TEXT	ENDS
PUBLIC	??_C@_0HK@NECBCB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsRegGuildMark@@YAXPAE@Z			; GS_DGAnsRegGuildMark
EXTRN	?GCAnsRegGuildMark@@YAXHHPAUCSP_ANS_GUILDREGMARK@@@Z:PROC ; GCAnsRegGuildMark
;	COMDAT ??_C@_0HK@NECBCB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HK@NECBCB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Castl'
	DB	'eSiege] PACKET-ERROR [0x80][0x10] GS_DGAnsRegGuildMark() - lp'
	DB	'Msg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsRegGuildMark@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsRegGuildMark@@YAXPAE@Z PROC			; GS_DGAnsRegGuildMark, COMDAT

; 5458 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5459 : //#if(GS_CASTLE==1)
; 5460 : 	CSP_ANS_GUILDREGMARK* lpMsg = (CSP_ANS_GUILDREGMARK*)lpRecv;
; 5461 : 		
; 5462 : 	if ( lpMsg == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3d		 je	 SHORT $LN1@GS_DGAnsRe@3

; 5463 : 	{
; 5464 : 		return;
; 5465 : 	}
; 5466 : 
; 5467 : 	if ( lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup() )

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN6@GS_DGAnsRe@3
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN7@GS_DGAnsRe@3
$LN6@GS_DGAnsRe@3:
  00019	83 c8 ff	 or	 eax, -1
$LN7@GS_DGAnsRe@3:
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	3b d0		 cmp	 edx, eax
  00022	74 12		 je	 SHORT $LN2@GS_DGAnsRe@3

; 5468 : 	{
; 5469 : 		LogAddC(2, "[CastleSiege] PACKET-ERROR [0x80][0x10] GS_DGAnsRegGuildMark() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HK@NECBCB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8

; 5475 : 	}
; 5476 : //#else
; 5477 : //	return;
; 5478 : //#endif
; 5479 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@GS_DGAnsRe@3:

; 5470 : 		return;
; 5471 : 	}
; 5472 : 	else
; 5473 : 	{
; 5474 : 		GCAnsRegGuildMark(lpMsg->iIndex,lpMsg->iResult,lpMsg);

  00036	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00039	51		 push	 ecx
  0003a	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?GCAnsRegGuildMark@@YAXHHPAUCSP_ANS_GUILDREGMARK@@@Z ; GCAnsRegGuildMark
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@GS_DGAnsRe@3:

; 5475 : 	}
; 5476 : //#else
; 5477 : //	return;
; 5478 : //#endif
; 5479 : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?GS_DGAnsRegGuildMark@@YAXPAE@Z ENDP			; GS_DGAnsRegGuildMark
_TEXT	ENDS
PUBLIC	??_C@_0HM@BBDOKDO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsGuildMarkReset@@YAXPAE@Z		; GS_DGAnsGuildMarkReset
;	COMDAT ??_C@_0HM@BBDOKDO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HM@BBDOKDO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cast'
	DB	'leSiege] PACKET-ERROR [0x80][0x11] GS_DGAnsGuildMarkReset() -'
	DB	' lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsGuildMarkReset@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsGuildMarkReset@@YAXPAE@Z PROC			; GS_DGAnsGuildMarkReset, COMDAT

; 5493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5494 : //#if(GS_CASTLE==1)
; 5495 : 	CSP_ANS_GUILDRESETMARK* lpMsg = (CSP_ANS_GUILDRESETMARK*)lpRecv;
; 5496 : 	
; 5497 : 	if ( lpMsg == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsGu@2

; 5498 : 	{
; 5499 : 		return;
; 5500 : 	}
; 5501 : 
; 5502 : 	if ( lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup() )

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsGu@2
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsGu@2
$LN5@GS_DGAnsGu@2:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsGu@2:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsGu@2

; 5503 : 	{
; 5504 : 		LogAddC(2, "[CastleSiege] PACKET-ERROR [0x80][0x11] GS_DGAnsGuildMarkReset() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HM@BBDOKDO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsGu@2:

; 5505 : 		return;
; 5506 : 	}
; 5507 : //#else
; 5508 : //	return;
; 5509 : //#endif
; 5510 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsGuildMarkReset@@YAXPAE@Z ENDP			; GS_DGAnsGuildMarkReset
_TEXT	ENDS
PUBLIC	??_C@_0HM@JNNIOIKL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsGuildSetGiveUp@@YAXPAE@Z		; GS_DGAnsGuildSetGiveUp
EXTRN	?GCAnsGiveUpCastleSiege@@YAXHHHHPAD@Z:PROC	; GCAnsGiveUpCastleSiege
;	COMDAT ??_C@_0HM@JNNIOIKL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HM@JNNIOIKL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x12] GS_DGAnsGuildSetGiveUp() '
	DB	'- lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsGuildSetGiveUp@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsGuildSetGiveUp@@YAXPAE@Z PROC			; GS_DGAnsGuildSetGiveUp, COMDAT

; 5525 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5526 : //#if(GS_CASTLE==1)
; 5527 : 	CSP_ANS_GUILDSETGIVEUP* lpMsg = (CSP_ANS_GUILDSETGIVEUP*)lpRecv;
; 5528 : 
; 5529 : 	if ( lpMsg == NULL )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpRecv$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 49		 je	 SHORT $LN3@GS_DGAnsGu@3

; 5530 : 	{
; 5531 : 		return;
; 5532 : 	}
; 5533 : 
; 5534 : 	if ( lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup() )

  0000a	8b 0d c0 32 01
	00		 mov	 ecx, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00010	85 c9		 test	 ecx, ecx
  00012	74 06		 je	 SHORT $LN5@GS_DGAnsGu@3
  00014	0f b6 49 08	 movzx	 ecx, BYTE PTR [ecx+8]
  00018	eb 03		 jmp	 SHORT $LN6@GS_DGAnsGu@3
$LN5@GS_DGAnsGu@3:
  0001a	83 c9 ff	 or	 ecx, -1
$LN6@GS_DGAnsGu@3:
  0001d	0f b7 50 08	 movzx	 edx, WORD PTR [eax+8]
  00021	3b d1		 cmp	 edx, ecx
  00023	74 12		 je	 SHORT $LN1@GS_DGAnsGu@3

; 5535 : 	{
; 5536 : 		LogAddC(2, "[CastleSiege] PACKET-ERROR [0x80][0x12] GS_DGAnsGuildSetGiveUp() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0HM@JNNIOIKL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00032	83 c4 08	 add	 esp, 8

; 5541 : //#else
; 5542 : //	return;
; 5543 : //#endif
; 5544 : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN1@GS_DGAnsGu@3:

; 5537 : 		return;
; 5538 : 	}
; 5539 : 	
; 5540 : 	::GCAnsGiveUpCastleSiege(lpMsg->iIndex,lpMsg->iResult,lpMsg->bIsGiveUp,lpMsg->iRegMarkCount,lpMsg->szGuildName);

  00037	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0003a	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  0003d	51		 push	 ecx
  0003e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00041	52		 push	 edx
  00042	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00045	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00048	51		 push	 ecx
  00049	52		 push	 edx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?GCAnsGiveUpCastleSiege@@YAXHHHHPAD@Z ; GCAnsGiveUpCastleSiege
  00050	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@GS_DGAnsGu@3:

; 5541 : //#else
; 5542 : //	return;
; 5543 : //#endif
; 5544 : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?GS_DGAnsGuildSetGiveUp@@YAXPAE@Z ENDP			; GS_DGAnsGuildSetGiveUp
_TEXT	ENDS
PUBLIC	??_C@_0HH@NAPOKFHO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsNpcRemove@@YAXPAE@Z			; GS_DGAnsNpcRemove
;	COMDAT ??_C@_0HH@NAPOKFHO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HH@NAPOKFHO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x16] GS_DGAnsNpcRemove() - lpM'
	DB	'sg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsNpcRemove@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsNpcRemove@@YAXPAE@Z PROC			; GS_DGAnsNpcRemove, COMDAT

; 5557 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5558 : //#if(GS_CASTLE==1)
; 5559 : 	CSP_ANS_NPCREMOVE* lpMsg = (CSP_ANS_NPCREMOVE*)lpRecv;
; 5560 : 	
; 5561 : 	if ( lpMsg == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsNp

; 5562 : 	{
; 5563 : 		return;
; 5564 : 	}
; 5565 : 
; 5566 : 	if ( lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup() )

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsNp
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsNp
$LN5@GS_DGAnsNp:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsNp:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsNp

; 5567 : 	{
; 5568 : 		LogAddC(2, "[CastleSiege] PACKET-ERROR [0x80][0x16] GS_DGAnsNpcRemove() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HH@NAPOKFHO@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsNp:

; 5569 : 		return;
; 5570 : 	}
; 5571 : //#else
; 5572 : //	return;
; 5573 : //#endif
; 5574 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsNpcRemove@@YAXPAE@Z ENDP			; GS_DGAnsNpcRemove
_TEXT	ENDS
PUBLIC	?GS_DGAnsCastleStateSync@@YAXPAE@Z		; GS_DGAnsCastleStateSync
EXTRN	?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z:PROC ; CCastleSiegeSync::SetCastleOwnerGuild
EXTRN	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A:BYTE	; g_CastleSiegeSync
; Function compile flags: /Ogtp
;	COMDAT ?GS_DGAnsCastleStateSync@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleStateSync@@YAXPAE@Z PROC			; GS_DGAnsCastleStateSync, COMDAT

; 5595 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5596 : 	CSP_ANS_CASTLESTATESYNC * lpMsg = (CSP_ANS_CASTLESTATESYNC *)lpRecv;
; 5597 : 
; 5598 : 	if ( lpMsg == NULL )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpRecv$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 4d		 je	 SHORT $LN3@GS_DGAnsCa@7

; 5599 : 	{
; 5600 : 		return;
; 5601 : 	}
; 5602 : 
; 5603 : 	if ( lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup() )

  0000a	8b 0d c0 32 01
	00		 mov	 ecx, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00010	85 c9		 test	 ecx, ecx
  00012	74 06		 je	 SHORT $LN5@GS_DGAnsCa@7
  00014	0f b6 49 08	 movzx	 ecx, BYTE PTR [ecx+8]
  00018	eb 03		 jmp	 SHORT $LN6@GS_DGAnsCa@7
$LN5@GS_DGAnsCa@7:
  0001a	83 c9 ff	 or	 ecx, -1
$LN6@GS_DGAnsCa@7:
  0001d	0f b7 50 04	 movzx	 edx, WORD PTR [eax+4]
  00021	3b d1		 cmp	 edx, ecx
  00023	75 32		 jne	 SHORT $LN3@GS_DGAnsCa@7

; 5604 : 	{
; 5605 : 		return;
; 5606 : 	}
; 5607 : 
; 5608 : 	g_CastleSiegeSync.SetCastleState(lpMsg->iCastleState); 

  00025	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00028	89 0d 04 00 00
	00		 mov	 DWORD PTR ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A+4, ecx

; 5609 : 	g_CastleSiegeSync.SetTaxRateChaos(lpMsg->iTaxRateChaos);

  0002e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00031	89 15 08 00 00
	00		 mov	 DWORD PTR ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A+8, edx

; 5610 : 	g_CastleSiegeSync.SetTaxRateStore(lpMsg->iTaxRateStore);

  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A+12, ecx

; 5611 : 	g_CastleSiegeSync.SetTaxHuntZone(lpMsg->iTaxHuntZone);

  00040	8b 50 14	 mov	 edx, DWORD PTR [eax+20]

; 5612 : 	g_CastleSiegeSync.SetCastleOwnerGuild(lpMsg->szOwnerGuildName);

  00043	83 c0 18	 add	 eax, 24			; 00000018H
  00046	50		 push	 eax
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0004c	89 15 10 00 00
	00		 mov	 DWORD PTR ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A+16, edx
  00052	e8 00 00 00 00	 call	 ?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z ; CCastleSiegeSync::SetCastleOwnerGuild
$LN3@GS_DGAnsCa@7:

; 5613 : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?GS_DGAnsCastleStateSync@@YAXPAE@Z ENDP			; GS_DGAnsCastleStateSync
_TEXT	ENDS
PUBLIC	??_C@_0FA@NDMPNFNO@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x18?$FN?5GS_DG@ ; `string'
PUBLIC	??_C@_0IA@HBPHMAAG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsCastleTributeMoney@@YAXPAE@Z		; GS_DGAnsCastleTributeMoney
EXTRN	?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ:PROC ; CCastleSiegeSync::ResetTributeMoney
;	COMDAT ??_C@_0FA@NDMPNFNO@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x18?$FN?5GS_DG@
; File e:\work\tranet_version\gs\gameserver\castlesiegesync.h
CONST	SEGMENT
??_C@_0FA@NDMPNFNO@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x18?$FN?5GS_DG@ DB '['
	DB	'CastleSiege] [0x80][0x18] GS_DGAnsCastleTributeMoney() - Mone'
	DB	'y Tribute OK (%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IA@HBPHMAAG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
CONST	SEGMENT
??_C@_0IA@HBPHMAAG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x18] GS_DGAnsCastleTributeMone'
	DB	'y() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup('
	DB	')', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleTributeMoney@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleTributeMoney@@YAXPAE@Z PROC		; GS_DGAnsCastleTributeMoney, COMDAT

; 5630 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5631 : 	CSP_ANS_CASTLETRIBUTEMONEY * lpMsg = (CSP_ANS_CASTLETRIBUTEMONEY *)lpRecv;
; 5632 : 
; 5633 : 	if ( lpMsg == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN3@GS_DGAnsCa@8

; 5634 : 	{
; 5635 : 		return;
; 5636 : 	}
; 5637 : 
; 5638 : 	if ( lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup() )

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsCa@8
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsCa@8
$LN5@GS_DGAnsCa@8:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsCa@8:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 12		 je	 SHORT $LN1@GS_DGAnsCa@8

; 5639 : 	{
; 5640 : 		LogAddC(2, "[CastleSiege] PACKET-ERROR [0x80][0x18] GS_DGAnsCastleTributeMoney() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@HBPHMAAG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN3@GS_DGAnsCa@8:

; 5646 : 	
; 5647 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN1@GS_DGAnsCa@8:

; 5641 : 		return;
; 5642 : 	}
; 5643 : 	
; 5644 : 	LogAddTD("[CastleSiege] [0x80][0x18] GS_DGAnsCastleTributeMoney() - Money Tribute OK (%d)",	g_CastleSiegeSync.GetTributeMoney());

  00036	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A+20
  0003c	52		 push	 edx
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@NDMPNFNO@?$FLCastleSiege?$FN?5?$FL0x80?$FN?$FL0x18?$FN?5GS_DG@
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00048	83 c4 08	 add	 esp, 8

; 5645 : 	g_CastleSiegeSync.ResetTributeMoney();

  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync

; 5646 : 	
; 5647 : }

  00050	5d		 pop	 ebp

; 5645 : 	g_CastleSiegeSync.ResetTributeMoney();

  00051	e9 00 00 00 00	 jmp	 ?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ ; CCastleSiegeSync::ResetTributeMoney
?GS_DGAnsCastleTributeMoney@@YAXPAE@Z ENDP		; GS_DGAnsCastleTributeMoney
_TEXT	ENDS
PUBLIC	??_C@_0IA@OLLELCLL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsResetCastleTaxInfo@@YAXPAE@Z		; GS_DGAnsResetCastleTaxInfo
EXTRN	?ResetCastleTaxInfo@CCastleSiege@@QAEXXZ:PROC	; CCastleSiege::ResetCastleTaxInfo
;	COMDAT ??_C@_0IA@OLLELCLL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0IA@OLLELCLL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x19] GS_DGAnsResetCastleTaxInf'
	DB	'o() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup('
	DB	')', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsResetCastleTaxInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsResetCastleTaxInfo@@YAXPAE@Z PROC		; GS_DGAnsResetCastleTaxInfo, COMDAT

; 5659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5660 : //#if(GS_CASTLE==1)
; 5661 : 	CSP_ANS_RESETCASTLETAXINFO* lpMsg = (CSP_ANS_RESETCASTLETAXINFO*)lpRecv;
; 5662 : 
; 5663 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsRe@4

; 5664 : 		return;
; 5665 : 
; 5666 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN7@GS_DGAnsRe@4
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN8@GS_DGAnsRe@4
$LN7@GS_DGAnsRe@4:
  00019	83 c8 ff	 or	 eax, -1
$LN8@GS_DGAnsRe@4:
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	3b d0		 cmp	 edx, eax
  00022	74 12		 je	 SHORT $LN3@GS_DGAnsRe@4

; 5667 : 	{
; 5668 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x19] GS_DGAnsResetCastleTaxInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@OLLELCLL@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsRe@4:

; 5676 : 		}
; 5677 : 	}
; 5678 : //#else
; 5679 : //	return;
; 5680 : //#endif
; 5681 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN3@GS_DGAnsRe@4:

; 5669 : 		return;
; 5670 : 	}
; 5671 : 	else
; 5672 : 	{
; 5673 : 		if(lpMsg->iResult == 1)

  00036	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  0003a	75 f8		 jne	 SHORT $LN1@GS_DGAnsRe@4

; 5674 : 		{
; 5675 : 			g_CastleSiege.ResetCastleTaxInfo();

  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege

; 5676 : 		}
; 5677 : 	}
; 5678 : //#else
; 5679 : //	return;
; 5680 : //#endif
; 5681 : }

  00041	5d		 pop	 ebp

; 5674 : 		{
; 5675 : 			g_CastleSiege.ResetCastleTaxInfo();

  00042	e9 00 00 00 00	 jmp	 ?ResetCastleTaxInfo@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCastleTaxInfo
?GS_DGAnsResetCastleTaxInfo@@YAXPAE@Z ENDP		; GS_DGAnsResetCastleTaxInfo
_TEXT	ENDS
PUBLIC	??_C@_0IB@LEBBPIHB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsResetSiegeGuildInfo@@YAXPAE@Z		; GS_DGAnsResetSiegeGuildInfo
;	COMDAT ??_C@_0IB@LEBBPIHB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0IB@LEBBPIHB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x1A] GS_DGAnsResetSiegeGuildIn'
	DB	'fo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup'
	DB	'()', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsResetSiegeGuildInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsResetSiegeGuildInfo@@YAXPAE@Z PROC		; GS_DGAnsResetSiegeGuildInfo, COMDAT

; 5692 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5693 : //#if(GS_CASTLE==1)
; 5694 : 	CSP_ANS_RESETSIEGEGUILDINFO* lpMsg = (CSP_ANS_RESETSIEGEGUILDINFO*)lpRecv;
; 5695 : 
; 5696 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsRe@5

; 5697 : 		return;
; 5698 : 
; 5699 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsRe@5
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsRe@5
$LN5@GS_DGAnsRe@5:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsRe@5:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsRe@5

; 5700 : 	{
; 5701 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x1A] GS_DGAnsResetSiegeGuildInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@LEBBPIHB@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsRe@5:

; 5702 : 		return;
; 5703 : 	}
; 5704 : //#else
; 5705 : //	return;
; 5706 : //#endif
; 5707 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsResetSiegeGuildInfo@@YAXPAE@Z ENDP		; GS_DGAnsResetSiegeGuildInfo
_TEXT	ENDS
PUBLIC	??_C@_0HP@DDPBMEPM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ ; `string'
PUBLIC	?GS_DGAnsResetRegSiegeInfo@@YAXPAE@Z		; GS_DGAnsResetRegSiegeInfo
;	COMDAT ??_C@_0HP@DDPBMEPM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HP@DDPBMEPM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x80][0x1B] GS_DGAnsResetRegSiegeInfo'
	DB	'() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()'
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsResetRegSiegeInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsResetRegSiegeInfo@@YAXPAE@Z PROC		; GS_DGAnsResetRegSiegeInfo, COMDAT

; 5718 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5719 : //#if(GS_CASTLE==1)
; 5720 : 	CSP_ANS_RESETREGSIEGEINFO* lpMsg = (CSP_ANS_RESETREGSIEGEINFO*)lpRecv;
; 5721 : 
; 5722 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsRe@6

; 5723 : 		return;
; 5724 : 
; 5725 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsRe@6
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsRe@6
$LN5@GS_DGAnsRe@6:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsRe@6:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsRe@6

; 5726 : 	{
; 5727 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x80][0x1B] GS_DGAnsResetRegSiegeInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HP@DDPBMEPM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x80@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsRe@6:

; 5728 : 		return;
; 5729 : 	}
; 5730 : //#else
; 5731 : //	return;
; 5732 : //#endif
; 5733 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsResetRegSiegeInfo@@YAXPAE@Z ENDP		; GS_DGAnsResetRegSiegeInfo
_TEXT	ENDS
PUBLIC	??_C@_0GC@MGFHIKBL@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ ; `string'
PUBLIC	??_C@_0GD@EAAPMHFJ@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ ; `string'
PUBLIC	??_C@_0EM@NPBCIFML@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ ; `string'
PUBLIC	??_C@_0GO@LJFKFDKN@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ ; `string'
PUBLIC	??_C@_0HG@CBDKIEJG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x81@ ; `string'
PUBLIC	?GS_DGAnsCastleInitData@@YAXPAE@Z		; GS_DGAnsCastleInitData
EXTRN	?Init@CCastleSiege@@QAEHXZ:PROC			; CCastleSiege::Init
EXTRN	?FirstCreateDbNPC@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::FirstCreateDbNPC
EXTRN	?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z:PROC ; CCastleSiege::SetCastleNpcData
EXTRN	?SetCastleInitData@CCastleSiege@@QAEHPAUCSP_ANS_CSINITDATA@@@Z:PROC ; CCastleSiege::SetCastleInitData
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
;	COMDAT ??_C@_0GC@MGFHIKBL@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
??_C@_0GC@MGFHIKBL@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ DB '[Castl'
	DB	'eSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - g_CastleSie'
	DB	'ge.SetCastleNpcData() == FALSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@EAAPMHFJ@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
CONST	SEGMENT
??_C@_0GD@EAAPMHFJ@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ DB '[Castl'
	DB	'eSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - g_CastleSie'
	DB	'ge.SetCastleInitData() == FALSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@NPBCIFML@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
CONST	SEGMENT
??_C@_0EM@NPBCIFML@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ DB '[Castl'
	DB	'eSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - lpMsg->iRes'
	DB	'ult == 0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@LJFKFDKN@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
CONST	SEGMENT
??_C@_0GO@LJFKFDKN@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@ DB '[Castl'
	DB	'eSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - m_iCastleDa'
	DB	'taLoadState != CASTLESIEGE_DATALOAD_2 (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HG@CBDKIEJG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x81@
CONST	SEGMENT
??_C@_0HG@CBDKIEJG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x81@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x81] GS_DGAnsCastleInitData() - lpMs'
	DB	'g->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleInitData@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleInitData@@YAXPAE@Z PROC			; GS_DGAnsCastleInitData, COMDAT

; 5736 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5737 : //#if(GS_CASTLE==1)
; 5738 : 	CSP_ANS_CSINITDATA* lpMsg = (CSP_ANS_CSINITDATA*)lpRecv;
; 5739 : 	CSP_CSINITDATA* lpMsgBody = (CSP_CSINITDATA*)(lpRecv + sizeof(CSP_ANS_CSINITDATA));

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	57		 push	 edi
  00008	8d 7e 40	 lea	 edi, DWORD PTR [esi+64]

; 5740 : 
; 5741 : 	if(lpMsg == NULL)

  0000b	85 f6		 test	 esi, esi
  0000d	74 2a		 je	 SHORT $LN8@GS_DGAnsCa@9

; 5742 : 		return;
; 5743 : 
; 5744 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00014	85 c0		 test	 eax, eax
  00016	74 06		 je	 SHORT $LN10@GS_DGAnsCa@9
  00018	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0001c	eb 03		 jmp	 SHORT $LN11@GS_DGAnsCa@9
$LN10@GS_DGAnsCa@9:
  0001e	83 c8 ff	 or	 eax, -1
$LN11@GS_DGAnsCa@9:
  00021	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  00025	3b c8		 cmp	 ecx, eax
  00027	74 14		 je	 SHORT $LN6@GS_DGAnsCa@9

; 5745 : 	{
; 5746 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x81] GS_DGAnsCastleInitData() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HG@CBDKIEJG@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x81@

; 5770 : 	{
; 5771 : 		LogAddC(2,"[CastleSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - g_CastleSiege.SetCastleInitData() == FALSE");

  0002e	6a 02		 push	 2
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00036	83 c4 08	 add	 esp, 8
$LN8@GS_DGAnsCa@9:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 5793 : //#else
; 5794 : //	return;
; 5795 : //#endif
; 5796 : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN6@GS_DGAnsCa@9:

; 5747 : 		return;
; 5748 : 	}
; 5749 : 
; 5750 : 	if(g_CastleSiege.GetDataLoadState() != 2)

  0003d	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+28
  00042	83 f8 02	 cmp	 eax, 2
  00045	74 15		 je	 SHORT $LN5@GS_DGAnsCa@9

; 5751 : 	{
; 5752 : 		LogAddC(2,"[CastleSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_2 (%d)",g_CastleSiege.GetDataLoadState()) ;

  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0GO@LJFKFDKN@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
  0004d	6a 02		 push	 2
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 5793 : //#else
; 5794 : //	return;
; 5795 : //#endif
; 5796 : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN5@GS_DGAnsCa@9:

; 5753 : 		return;
; 5754 : 	}
; 5755 : 
; 5756 : 	g_CastleSiege.SetDataLoadState(3);

  0005c	c7 05 1c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+28, 3

; 5757 : 
; 5758 : 	if(lpMsg->iResult == FALSE)

  00066	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0006a	75 1e		 jne	 SHORT $LN4@GS_DGAnsCa@9

; 5759 : 	{
; 5760 : 		LogAddC(2,"[CastleSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - lpMsg->iResult == 0");

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@NPBCIFML@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
  00071	6a 02		 push	 2
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 5761 : 		MsgBox("[CastleSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - lpMsg->iResult == 0");

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@NPBCIFML@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
  0007e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 5793 : //#else
; 5794 : //	return;
; 5795 : //#endif
; 5796 : }

  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN4@GS_DGAnsCa@9:

; 5762 : 		return;
; 5763 : 	}
; 5764 : 	
; 5765 : 	BOOL bRET_VAL = FALSE;
; 5766 : 
; 5767 : 	bRET_VAL = g_CastleSiege.SetCastleInitData(lpMsg);

  0008a	56		 push	 esi
  0008b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00090	e8 00 00 00 00	 call	 ?SetCastleInitData@CCastleSiege@@QAEHPAUCSP_ANS_CSINITDATA@@@Z ; CCastleSiege::SetCastleInitData

; 5768 : 
; 5769 : 	if(bRET_VAL == FALSE)

  00095	85 c0		 test	 eax, eax
  00097	75 14		 jne	 SHORT $LN3@GS_DGAnsCa@9

; 5770 : 	{
; 5771 : 		LogAddC(2,"[CastleSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - g_CastleSiege.SetCastleInitData() == FALSE");

  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@EAAPMHFJ@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
  0009e	6a 02		 push	 2
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000a6	83 c4 08	 add	 esp, 8
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi

; 5793 : //#else
; 5794 : //	return;
; 5795 : //#endif
; 5796 : }

  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN3@GS_DGAnsCa@9:

; 5772 : 		return;
; 5773 : 	}
; 5774 : 
; 5775 : 	bRET_VAL = g_CastleSiege.SetCastleNpcData(lpMsgBody,lpMsg->iCount);

  000ad	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000b0	52		 push	 edx
  000b1	57		 push	 edi
  000b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000b7	e8 00 00 00 00	 call	 ?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z ; CCastleSiege::SetCastleNpcData

; 5776 : 	
; 5777 : 	if(bRET_VAL == FALSE)

  000bc	85 c0		 test	 eax, eax
  000be	75 14		 jne	 SHORT $LN2@GS_DGAnsCa@9

; 5778 : 	{
; 5779 : 		LogAddC(2,"[CastleSiege] CASTLE SIEGE DATA SETTING FAILED [0x81] - g_CastleSiege.SetCastleNpcData() == FALSE");

  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@MGFHIKBL@?$FLCastleSiege?$FN?5CASTLE?5SIEGE?5DATA?5@
  000c5	6a 02		 push	 2
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000cd	83 c4 08	 add	 esp, 8
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi

; 5793 : //#else
; 5794 : //	return;
; 5795 : //#endif
; 5796 : }

  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN2@GS_DGAnsCa@9:

; 5780 : 		return;
; 5781 : 	}
; 5782 : 
; 5783 : 	g_CastleSiege.SetDbDataLoadOK(TRUE);

  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	a3 10 00 00 00	 mov	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+16, eax

; 5784 : 
; 5785 : 	g_CastleSiege.SetDataLoadState(4);

  000de	c7 05 1c 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+28, 4

; 5786 : 
; 5787 : 	if(lpMsg->iFirstCreate == 1)

  000e8	39 46 34	 cmp	 DWORD PTR [esi+52], eax
  000eb	75 0a		 jne	 SHORT $LN1@GS_DGAnsCa@9

; 5788 : 	{
; 5789 : 		g_CastleSiege.FirstCreateDbNPC();

  000ed	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000f2	e8 00 00 00 00	 call	 ?FirstCreateDbNPC@CCastleSiege@@QAEHXZ ; CCastleSiege::FirstCreateDbNPC
$LN1@GS_DGAnsCa@9:

; 5790 : 	}
; 5791 : 
; 5792 : 	g_CastleSiege.Init();

  000f7	5f		 pop	 edi
  000f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000fd	5e		 pop	 esi

; 5793 : //#else
; 5794 : //	return;
; 5795 : //#endif
; 5796 : }

  000fe	5d		 pop	 ebp

; 5790 : 	}
; 5791 : 
; 5792 : 	g_CastleSiege.Init();

  000ff	e9 00 00 00 00	 jmp	 ?Init@CCastleSiege@@QAEHXZ ; CCastleSiege::Init
?GS_DGAnsCastleInitData@@YAXPAE@Z ENDP			; GS_DGAnsCastleInitData
_TEXT	ENDS
PUBLIC	??_C@_0HF@FPJKEGCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x82@ ; `string'
PUBLIC	?GS_DGAnsCastleNpcInfo@@YAXPAE@Z		; GS_DGAnsCastleNpcInfo
;	COMDAT ??_C@_0HF@FPJKEGCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x82@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HF@FPJKEGCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x82@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x82] GS_DGAnsCastleNpcInfo() - lpMsg'
	DB	'->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleNpcInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleNpcInfo@@YAXPAE@Z PROC			; GS_DGAnsCastleNpcInfo, COMDAT

; 5813 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5814 : //#if(GS_CASTLE==1)
; 5815 : 	CSP_ANS_NPCDATA* lpMsg = (CSP_ANS_NPCDATA*)lpRecv;
; 5816 : 	CSP_NPCDATA* lpMsgBody = (CSP_NPCDATA*)(lpRecv+sizeof(CSP_ANS_NPCDATA));
; 5817 : 
; 5818 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@GS_DGAnsCa@10

; 5819 : 		return;
; 5820 : 
; 5821 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN5@GS_DGAnsCa@10
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN6@GS_DGAnsCa@10
$LN5@GS_DGAnsCa@10:
  00019	83 c8 ff	 or	 eax, -1
$LN6@GS_DGAnsCa@10:
  0001c	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  00020	3b c8		 cmp	 ecx, eax
  00022	74 10		 je	 SHORT $LN1@GS_DGAnsCa@10

; 5822 : 	{
; 5823 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x82] GS_DGAnsCastleNpcInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@FPJKEGCI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x82@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8
$LN1@GS_DGAnsCa@10:

; 5824 : 		return;
; 5825 : 	}
; 5826 : //#else
; 5827 : //	return;
; 5828 : //#endif
; 5829 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GS_DGAnsCastleNpcInfo@@YAXPAE@Z ENDP			; GS_DGAnsCastleNpcInfo
_TEXT	ENDS
PUBLIC	??_C@_0HL@PPDLAEKI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x83@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GS_DGAnsAllGuildMarkRegInfo@@YAXPAE@Z		; GS_DGAnsAllGuildMarkRegInfo
;	COMDAT ??_C@_0HL@PPDLAEKI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x83@
; File e:\work\tranet_version\gs\include\prodef.h
CONST	SEGMENT
??_C@_0HL@PPDLAEKI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x83@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x83] GS_DGAnsAllGuildMarkRegInfo() -'
	DB	' lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsAllGuildMarkRegInfo@@YAXPAE@Z
_TEXT	SEGMENT
_cBUFFER$ = -1672					; size = 1668
__$ArrayPad$ = -4					; size = 4
_lpRecv$ = 8						; size = 4
?GS_DGAnsAllGuildMarkRegInfo@@YAXPAE@Z PROC		; GS_DGAnsAllGuildMarkRegInfo, COMDAT

; 5862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 06 00
	00		 sub	 esp, 1672		; 00000688H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _lpRecv$[ebp]

; 5863 : //#if(GS_CASTLE==1)
; 5864 : 	CSP_ANS_ALLGUILDREGINFO* lpMsg = (CSP_ANS_ALLGUILDREGINFO*)lpRecv;
; 5865 : 	CSP_GUILDREGINFO* lpMsgBody = (CSP_GUILDREGINFO*)(lpRecv+sizeof(CSP_ANS_ALLGUILDREGINFO));
; 5866 : 	char cBUFFER[1668];
; 5867 : 	PMSG_ANS_CSREGGUILDLIST* lpMsgSend;
; 5868 : 	PMSG_CSREGGUILDLIST* lpMsgSendBody;
; 5869 : 
; 5870 : 	if(lpMsg == NULL)

  00017	85 ff		 test	 edi, edi
  00019	0f 84 07 01 00
	00		 je	 $LN8@GS_DGAnsAl

; 5871 : 		return;
; 5872 : 
; 5873 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0001f	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00024	85 c0		 test	 eax, eax
  00026	74 06		 je	 SHORT $LN10@GS_DGAnsAl
  00028	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0002c	eb 03		 jmp	 SHORT $LN11@GS_DGAnsAl
$LN10@GS_DGAnsAl:
  0002e	83 c8 ff	 or	 eax, -1
$LN11@GS_DGAnsAl:
  00031	0f b7 4f 08	 movzx	 ecx, WORD PTR [edi+8]
  00035	3b c8		 cmp	 ecx, eax
  00037	74 1f		 je	 SHORT $LN6@GS_DGAnsAl

; 5874 : 	{
; 5875 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x83] GS_DGAnsAllGuildMarkRegInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0HL@PPDLAEKI@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x83@
  0003e	6a 02		 push	 2
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00046	83 c4 08	 add	 esp, 8
  00049	5f		 pop	 edi

; 5907 : //#else
; 5908 : //	return;
; 5909 : //#endif
; 5910 : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN6@GS_DGAnsAl:

; 5876 : 		return;
; 5877 : 	}
; 5878 : 
; 5879 : 	if(!gObjIsConnected(lpMsg->iIndex))

  00058	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00061	83 c4 04	 add	 esp, 4
  00064	85 c0		 test	 eax, eax
  00066	0f 84 ba 00 00
	00		 je	 $LN8@GS_DGAnsAl

; 5880 : 		return;
; 5881 : 
; 5882 : 	lpMsgSend = (PMSG_ANS_CSREGGUILDLIST*)cBUFFER;
; 5883 : 	lpMsgSendBody = (PMSG_CSREGGUILDLIST*)&cBUFFER[12];
; 5884 : 
; 5885 : 	lpMsgSend->iCount = 0;
; 5886 : 	lpMsgSend->btResult = lpMsg->iResult;

  0006c	8a 4f 04	 mov	 cl, BYTE PTR [edi+4]
  0006f	33 c0		 xor	 eax, eax

; 5887 : 	
; 5888 : 	if(lpMsg->iResult == TRUE)

  00071	83 7f 04 01	 cmp	 DWORD PTR [edi+4], 1
  00075	89 85 80 f9 ff
	ff		 mov	 DWORD PTR _cBUFFER$[ebp+8], eax
  0007b	88 8d 7c f9 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+4], cl
  00081	75 63		 jne	 SHORT $LN1@GS_DGAnsAl

; 5889 : 	{
; 5890 : 		lpMsgSend->iCount = lpMsg->iCount;

  00083	56		 push	 esi
  00084	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00087	8b c6		 mov	 eax, esi
  00089	89 85 80 f9 ff
	ff		 mov	 DWORD PTR _cBUFFER$[ebp+8], eax

; 5891 : 
; 5892 : 		for(int i=0;i< lpMsg->iCount;i++)

  0008f	85 f6		 test	 esi, esi
  00091	7e 52		 jle	 SHORT $LN17@GS_DGAnsAl

; 5889 : 	{
; 5890 : 		lpMsgSend->iCount = lpMsg->iCount;

  00093	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00096	8d 85 90 f9 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp+24]
  0009c	53		 push	 ebx
  0009d	8d 49 00	 npad	 3
$LL3@GS_DGAnsAl:

; 5893 : 		{
; 5894 : 			lpMsgSendBody[i].btSeqNum = lpMsgBody[i].btRegRank;

  000a0	0f b6 51 05	 movzx	 edx, BYTE PTR [ecx+5]
  000a4	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 5895 : 			lpMsgSendBody[i].btIsGiveUp = lpMsgBody[i].bIsGiveUp;

  000a7	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  000ab	88 10		 mov	 BYTE PTR [eax], dl

; 5896 : 			lpMsgSendBody[i].btRegMarks1 = SET_NUMBERH(SET_NUMBERHW(lpMsgBody[i].iRegMarkCount));

  000ad	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  000b1	8b da		 mov	 ebx, edx

; 5897 : 			lpMsgSendBody[i].btRegMarks2 = SET_NUMBERL(SET_NUMBERHW(lpMsgBody[i].iRegMarkCount));

  000b3	88 50 fd	 mov	 BYTE PTR [eax-3], dl

; 5898 : 			lpMsgSendBody[i].btRegMarks3 = SET_NUMBERH(SET_NUMBERLW(lpMsgBody[i].iRegMarkCount));

  000b6	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  000ba	88 50 fe	 mov	 BYTE PTR [eax-2], dl

; 5899 : 			lpMsgSendBody[i].btRegMarks4 = SET_NUMBERL(SET_NUMBERLW(lpMsgBody[i].iRegMarkCount));

  000bd	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  000c0	88 50 ff	 mov	 BYTE PTR [eax-1], dl

; 5900 : 			memcpy(&lpMsgSendBody[i].szGuildName,lpMsgBody[i].szGuildName,sizeof(lpMsgSendBody[i].szGuildName));

  000c3	8b 51 f8	 mov	 edx, DWORD PTR [ecx-8]
  000c6	89 50 f4	 mov	 DWORD PTR [eax-12], edx
  000c9	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  000cc	c1 eb 08	 shr	 ebx, 8
  000cf	88 58 fc	 mov	 BYTE PTR [eax-4], bl
  000d2	89 50 f8	 mov	 DWORD PTR [eax-8], edx
  000d5	83 c1 10	 add	 ecx, 16			; 00000010H
  000d8	83 c0 0e	 add	 eax, 14			; 0000000eH
  000db	4e		 dec	 esi
  000dc	75 c2		 jne	 SHORT $LL3@GS_DGAnsAl

; 5891 : 
; 5892 : 		for(int i=0;i< lpMsg->iCount;i++)

  000de	8b 85 80 f9 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  000e4	5b		 pop	 ebx
$LN17@GS_DGAnsAl:
  000e5	5e		 pop	 esi
$LN1@GS_DGAnsAl:

; 5901 : 		}
; 5902 : 	}
; 5903 : 	
; 5904 : 	lpMsgSend->h.set((LPBYTE)lpMsgSend,0xB4,(lpMsgSend->iCount*sizeof(PMSG_CSREGGUILDLIST)+sizeof(PMSG_ANS_CSREGGUILDLIST)));

  000e6	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  000ed	2b c8		 sub	 ecx, eax
  000ef	8d 44 09 0c	 lea	 eax, DWORD PTR [ecx+ecx+12]

; 5905 : 
; 5906 : 	DataSend(lpMsg->iIndex,(LPBYTE)lpMsgSend,(lpMsgSend->iCount*sizeof(PMSG_CSREGGUILDLIST)+sizeof(PMSG_ANS_CSREGGUILDLIST)));

  000f3	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000f6	50		 push	 eax
  000f7	8b d0		 mov	 edx, eax
  000f9	88 85 7a f9 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+2], al
  000ff	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  00105	50		 push	 eax
  00106	c1 ea 08	 shr	 edx, 8
  00109	51		 push	 ecx
  0010a	c6 85 78 f9 ff
	ff c2		 mov	 BYTE PTR _cBUFFER$[ebp], 194 ; 000000c2H
  00111	88 95 79 f9 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+1], dl
  00117	c6 85 7b f9 ff
	ff b4		 mov	 BYTE PTR _cBUFFER$[ebp+3], 180 ; 000000b4H
  0011e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@GS_DGAnsAl:

; 5907 : //#else
; 5908 : //	return;
; 5909 : //#endif
; 5910 : }

  00126	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00129	33 cd		 xor	 ecx, ebp
  0012b	5f		 pop	 edi
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
?GS_DGAnsAllGuildMarkRegInfo@@YAXPAE@Z ENDP		; GS_DGAnsAllGuildMarkRegInfo
_TEXT	ENDS
PUBLIC	??_C@_0HG@MMFIPMJM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x84@ ; `string'
PUBLIC	?GS_DGAnsFirstCreateNPC@@YAXPAE@Z		; GS_DGAnsFirstCreateNPC
EXTRN	?CreateDbNPC@CCastleSiege@@QAEXXZ:PROC		; CCastleSiege::CreateDbNPC
;	COMDAT ??_C@_0HG@MMFIPMJM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x84@
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
??_C@_0HG@MMFIPMJM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x84@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x84] GS_DGAnsFirstCreateNPC() - lpMs'
	DB	'g->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsFirstCreateNPC@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsFirstCreateNPC@@YAXPAE@Z PROC			; GS_DGAnsFirstCreateNPC, COMDAT

; 5925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5926 : //#if(GS_CASTLE==1)
; 5927 : 	CSP_ANS_NPCSAVEDATA* lpMsg = (CSP_ANS_NPCSAVEDATA*)lpRecv;
; 5928 : 
; 5929 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 4f		 je	 SHORT $LN12@GS_DGAnsFi

; 5930 : 	return;
; 5931 : 
; 5932 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN7@GS_DGAnsFi
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN8@GS_DGAnsFi
$LN7@GS_DGAnsFi:
  00019	83 c8 ff	 or	 eax, -1
$LN8@GS_DGAnsFi:
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	3b d0		 cmp	 edx, eax
  00022	74 12		 je	 SHORT $LN3@GS_DGAnsFi

; 5933 : 	{
; 5934 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x84] GS_DGAnsFirstCreateNPC() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HG@MMFIPMJM@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x84@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8

; 5944 : 		}
; 5945 : 	}
; 5946 : //#else
; 5947 : //	return;
; 5948 : //#endif
; 5949 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN3@GS_DGAnsFi:

; 5935 : 		return;
; 5936 : 	}
; 5937 : 
; 5938 : 	if(lpMsg->iResult == TRUE)

  00036	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  0003a	75 1d		 jne	 SHORT $LN12@GS_DGAnsFi

; 5939 : 	{
; 5940 : 		if(g_CastleSiege.GetDbNpcCreated() == FALSE)

  0003c	83 3d 50 01 00
	00 00		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+336, 0
  00043	75 14		 jne	 SHORT $LN12@GS_DGAnsFi

; 5941 : 		{
; 5942 : 			g_CastleSiege.CreateDbNPC();

  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0004a	e8 00 00 00 00	 call	 ?CreateDbNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::CreateDbNPC

; 5943 : 			g_CastleSiege.SetDbNpcCreated(1);

  0004f	c7 05 50 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+336, 1
$LN12@GS_DGAnsFi:

; 5944 : 		}
; 5945 : 	}
; 5946 : //#else
; 5947 : //	return;
; 5948 : //#endif
; 5949 : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?GS_DGAnsFirstCreateNPC@@YAXPAE@Z ENDP			; GS_DGAnsFirstCreateNPC
_TEXT	ENDS
PUBLIC	??_C@_0FI@CEGBKGAK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@ ; `string'
PUBLIC	??_C@_0HI@DCOFLPNN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@ ; `string'
PUBLIC	?GS_DGAnsCalcREgGuildList@@YAXPAE@Z		; GS_DGAnsCalcREgGuildList
EXTRN	?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z:PROC ; CCastleSiege::SetCalcRegGuildList
;	COMDAT ??_C@_0FI@CEGBKGAK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0FI@CEGBKGAK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x85] GS_DGAnsCalcREgGuildList() - lp'
	DB	'Msg->iResult != 1 (%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HI@DCOFLPNN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@
CONST	SEGMENT
??_C@_0HI@DCOFLPNN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x85] GS_DGAnsCalcREgGuildList() - lp'
	DB	'Msg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCalcREgGuildList@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCalcREgGuildList@@YAXPAE@Z PROC		; GS_DGAnsCalcREgGuildList, COMDAT

; 5961 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5962 : //#if (GS_CASTLE==1)
; 5963 : 	CSP_ANS_CALCREGGUILDLIST* lpMsg = (CSP_ANS_CALCREGGUILDLIST*)lpRecv;
; 5964 : 	CSP_CALCREGGUILDLIST* lpMsgBody = (CSP_CALCREGGUILDLIST*)(lpRecv+sizeof(CSP_ANS_CALCREGGUILDLIST));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpRecv$[ebp]
  00006	8d 50 10	 lea	 edx, DWORD PTR [eax+16]

; 5965 : 	
; 5966 : 	if(lpMsg == NULL)

  00009	85 c0		 test	 eax, eax
  0000b	74 59		 je	 SHORT $LN4@GS_DGAnsCa@11

; 5967 : 	return;
; 5968 : 
; 5969 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000d	8b 0d c0 32 01
	00		 mov	 ecx, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN6@GS_DGAnsCa@11
  00017	0f b6 49 08	 movzx	 ecx, BYTE PTR [ecx+8]
  0001b	eb 03		 jmp	 SHORT $LN7@GS_DGAnsCa@11
$LN6@GS_DGAnsCa@11:
  0001d	83 c9 ff	 or	 ecx, -1
$LN7@GS_DGAnsCa@11:
  00020	56		 push	 esi
  00021	0f b7 70 08	 movzx	 esi, WORD PTR [eax+8]
  00025	3b f1		 cmp	 esi, ecx
  00027	5e		 pop	 esi
  00028	74 12		 je	 SHORT $LN2@GS_DGAnsCa@11

; 5970 : 	{
; 5971 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x85] GS_DGAnsCalcREgGuildList() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0HI@DCOFLPNN@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@
  0002f	6a 02		 push	 2
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00037	83 c4 08	 add	 esp, 8

; 5982 : //#else
; 5983 : //	return;
; 5984 : //#endif
; 5985 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN2@GS_DGAnsCa@11:

; 5972 : 		return;
; 5973 : 	}
; 5974 : 
; 5975 : 	if(lpMsg->iResult == TRUE)

  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	83 f9 01	 cmp	 ecx, 1
  00042	75 11		 jne	 SHORT $LN1@GS_DGAnsCa@11

; 5976 : 	{
; 5977 : 		g_CastleSiege.SetCalcRegGuildList(lpMsgBody,lpMsg->iCount);

  00044	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00047	50		 push	 eax
  00048	52		 push	 edx
  00049	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0004e	e8 00 00 00 00	 call	 ?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z ; CCastleSiege::SetCalcRegGuildList

; 5982 : //#else
; 5983 : //	return;
; 5984 : //#endif
; 5985 : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN1@GS_DGAnsCa@11:

; 5978 : 		return;
; 5979 : 	}
; 5980 : 
; 5981 : 	LogAddC(2,"[CastleSiege] PACKET-ERROR [0x85] GS_DGAnsCalcREgGuildList() - lpMsg->iResult != 1 (%d)",lpMsg->iResult) ;

  00055	51		 push	 ecx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@CEGBKGAK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x85@
  0005b	6a 02		 push	 2
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@GS_DGAnsCa@11:

; 5982 : //#else
; 5983 : //	return;
; 5984 : //#endif
; 5985 : }

  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?GS_DGAnsCalcREgGuildList@@YAXPAE@Z ENDP		; GS_DGAnsCalcREgGuildList
_TEXT	ENDS
PUBLIC	??_C@_0HI@LIMFILFK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x86@ ; `string'
PUBLIC	?GS_DGAnsCsGulidUnionInfo@@YAXPAE@Z		; GS_DGAnsCsGulidUnionInfo
EXTRN	?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z:PROC ; CCastleSiege::MakeCsTotalGuildInfo
;	COMDAT ??_C@_0HI@LIMFILFK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x86@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HI@LIMFILFK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x86@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x86] GS_DGAnsCsGulidUnionInfo() - lp'
	DB	'Msg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCsGulidUnionInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCsGulidUnionInfo@@YAXPAE@Z PROC		; GS_DGAnsCsGulidUnionInfo, COMDAT

; 5997 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5998 : //#if (GS_CASTLE==1)
; 5999 : 	CSP_ANS_CSGUILDUNIONINFO* lpMsg = (CSP_ANS_CSGUILDUNIONINFO*)lpRecv;
; 6000 : 	CSP_CSGUILDUNIONINFO* lpMsgBody = (CSP_CSGUILDUNIONINFO*)(lpRecv+sizeof(CSP_ANS_CSGUILDUNIONINFO));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpRecv$[ebp]
  00006	8d 50 10	 lea	 edx, DWORD PTR [eax+16]

; 6001 : 	
; 6002 : 	if(lpMsg == NULL)

  00009	85 c0		 test	 eax, eax
  0000b	74 44		 je	 SHORT $LN1@GS_DGAnsCs

; 6003 : 	return;
; 6004 : 
; 6005 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000d	8b 0d c0 32 01
	00		 mov	 ecx, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN6@GS_DGAnsCs
  00017	0f b6 49 08	 movzx	 ecx, BYTE PTR [ecx+8]
  0001b	eb 03		 jmp	 SHORT $LN7@GS_DGAnsCs
$LN6@GS_DGAnsCs:
  0001d	83 c9 ff	 or	 ecx, -1
$LN7@GS_DGAnsCs:
  00020	56		 push	 esi
  00021	0f b7 70 08	 movzx	 esi, WORD PTR [eax+8]
  00025	3b f1		 cmp	 esi, ecx
  00027	5e		 pop	 esi
  00028	74 12		 je	 SHORT $LN2@GS_DGAnsCs

; 6006 : 	{
; 6007 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x86] GS_DGAnsCsGulidUnionInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0HI@LIMFILFK@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x86@
  0002f	6a 02		 push	 2
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00037	83 c4 08	 add	 esp, 8

; 6014 : 		return;
; 6015 : 	}
; 6016 : //#else
; 6017 : //	return;
; 6018 : //#endif
; 6019 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN2@GS_DGAnsCs:

; 6008 : 		return;
; 6009 : 	}
; 6010 : 
; 6011 : 	if(lpMsg->iResult == TRUE)

  0003c	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00040	75 0f		 jne	 SHORT $LN1@GS_DGAnsCs

; 6012 : 	{
; 6013 : 		g_CastleSiege.MakeCsTotalGuildInfo(lpMsgBody,lpMsg->iCount);

  00042	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00045	50		 push	 eax
  00046	52		 push	 edx
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0004c	e8 00 00 00 00	 call	 ?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z ; CCastleSiege::MakeCsTotalGuildInfo
$LN1@GS_DGAnsCs:

; 6014 : 		return;
; 6015 : 	}
; 6016 : //#else
; 6017 : //	return;
; 6018 : //#endif
; 6019 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?GS_DGAnsCsGulidUnionInfo@@YAXPAE@Z ENDP		; GS_DGAnsCsGulidUnionInfo
_TEXT	ENDS
PUBLIC	??_C@_0HM@DAOCJLIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x87@ ; `string'
PUBLIC	?GS_DGAnsCsSaveTotalGuildInfo@@YAXPAE@Z		; GS_DGAnsCsSaveTotalGuildInfo
;	COMDAT ??_C@_0HM@DAOCJLIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x87@
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
??_C@_0HM@DAOCJLIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x87@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x87] GS_DGAnsCsSaveTotalGuildInfo() '
	DB	'- lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCsSaveTotalGuildInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCsSaveTotalGuildInfo@@YAXPAE@Z PROC		; GS_DGAnsCsSaveTotalGuildInfo, COMDAT

; 6030 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6031 : //#if(GS_CASTLE==1)
; 6032 : 	CSP_ANS_CSSAVETOTALGUILDINFO* lpMsg = (CSP_ANS_CSSAVETOTALGUILDINFO*)lpRecv;
; 6033 : 	
; 6034 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 38		 je	 SHORT $LN1@GS_DGAnsCs@2

; 6035 : 	return;
; 6036 : 
; 6037 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN6@GS_DGAnsCs@2
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN7@GS_DGAnsCs@2
$LN6@GS_DGAnsCs@2:
  00019	83 c8 ff	 or	 eax, -1
$LN7@GS_DGAnsCs@2:
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	3b d0		 cmp	 edx, eax
  00022	74 12		 je	 SHORT $LN2@GS_DGAnsCs@2

; 6038 : 	{
; 6039 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x87] GS_DGAnsCsSaveTotalGuildInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HM@DAOCJLIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x87@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 08	 add	 esp, 8

; 6044 : 	{
; 6045 : 		g_CastleSiege.SetIsSiegeGuildList(TRUE);
; 6046 : 		return;
; 6047 : 	}
; 6048 : 	g_CastleSiege.SetIsSiegeGuildList(FALSE);
; 6049 : //#else
; 6050 : //	return;
; 6051 : //#endif
; 6052 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@GS_DGAnsCs@2:

; 6040 : 		return;
; 6041 : 	}
; 6042 : 
; 6043 : 	if(lpMsg->iResult == TRUE)

  00036	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  0003a	0f 94 c0	 sete	 al
  0003d	a2 d4 00 00 00	 mov	 BYTE PTR ?g_CastleSiege@@3VCCastleSiege@@A+212, al
$LN1@GS_DGAnsCs@2:

; 6044 : 	{
; 6045 : 		g_CastleSiege.SetIsSiegeGuildList(TRUE);
; 6046 : 		return;
; 6047 : 	}
; 6048 : 	g_CastleSiege.SetIsSiegeGuildList(FALSE);
; 6049 : //#else
; 6050 : //	return;
; 6051 : //#endif
; 6052 : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?GS_DGAnsCsSaveTotalGuildInfo@@YAXPAE@Z ENDP		; GS_DGAnsCsSaveTotalGuildInfo
_TEXT	ENDS
PUBLIC	??_C@_0HM@MGDLGKIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x88@ ; `string'
PUBLIC	?GS_DGAnsCsLoadTotalGuildInfo@@YAXPAE@Z		; GS_DGAnsCsLoadTotalGuildInfo
EXTRN	?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z:PROC ; CCastleSiege::SetCsTotalGuildInfo
;	COMDAT ??_C@_0HM@MGDLGKIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x88@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0HM@MGDLGKIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x88@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x88] GS_DGAnsCsLoadTotalGuildInfo() '
	DB	'- lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCsLoadTotalGuildInfo@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCsLoadTotalGuildInfo@@YAXPAE@Z PROC		; GS_DGAnsCsLoadTotalGuildInfo, COMDAT

; 6064 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6065 : //#if (GS_CASTLE==1)
; 6066 : 	CSP_ANS_CSLOADTOTALGUILDINFO* lpMsg = (CSP_ANS_CSLOADTOTALGUILDINFO*)lpRecv;
; 6067 : 	CSP_CSLOADTOTALGUILDINFO* lpMsgBody = (CSP_CSLOADTOTALGUILDINFO*)(lpRecv+sizeof(CSP_ANS_CSLOADTOTALGUILDINFO));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpRecv$[ebp]
  00006	8d 50 10	 lea	 edx, DWORD PTR [eax+16]

; 6068 : 
; 6069 : 	if(lpMsg == NULL)

  00009	85 c0		 test	 eax, eax
  0000b	74 44		 je	 SHORT $LN1@GS_DGAnsCs@3

; 6070 : 	return;
; 6071 : 
; 6072 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000d	8b 0d c0 32 01
	00		 mov	 ecx, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN6@GS_DGAnsCs@3
  00017	0f b6 49 08	 movzx	 ecx, BYTE PTR [ecx+8]
  0001b	eb 03		 jmp	 SHORT $LN7@GS_DGAnsCs@3
$LN6@GS_DGAnsCs@3:
  0001d	83 c9 ff	 or	 ecx, -1
$LN7@GS_DGAnsCs@3:
  00020	56		 push	 esi
  00021	0f b7 70 08	 movzx	 esi, WORD PTR [eax+8]
  00025	3b f1		 cmp	 esi, ecx
  00027	5e		 pop	 esi
  00028	74 12		 je	 SHORT $LN2@GS_DGAnsCs@3

; 6073 : 	{
; 6074 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x88] GS_DGAnsCsLoadTotalGuildInfo() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0HM@MGDLGKIP@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x88@
  0002f	6a 02		 push	 2
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00037	83 c4 08	 add	 esp, 8

; 6081 : 		return;
; 6082 : 	}
; 6083 : //#else
; 6084 : //	return;
; 6085 : //#endif
; 6086 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN2@GS_DGAnsCs@3:

; 6075 : 		return;
; 6076 : 	}
; 6077 : 
; 6078 : 	if(lpMsg->iResult == TRUE)

  0003c	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00040	75 0f		 jne	 SHORT $LN1@GS_DGAnsCs@3

; 6079 : 	{
; 6080 : 		g_CastleSiege.SetCsTotalGuildInfo(lpMsgBody,lpMsg->iCount);

  00042	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00045	50		 push	 eax
  00046	52		 push	 edx
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0004c	e8 00 00 00 00	 call	 ?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z ; CCastleSiege::SetCsTotalGuildInfo
$LN1@GS_DGAnsCs@3:

; 6081 : 		return;
; 6082 : 	}
; 6083 : //#else
; 6084 : //	return;
; 6085 : //#endif
; 6086 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?GS_DGAnsCsLoadTotalGuildInfo@@YAXPAE@Z ENDP		; GS_DGAnsCsLoadTotalGuildInfo
_TEXT	ENDS
PUBLIC	??_C@_0EP@HIMGAPIB@?$FLCastleSiege?$FN?5?$FL0x89?$FN?5GS_DGAnsCas@ ; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL?$AA@			; `string'
PUBLIC	??_C@_07OIIICFNN@SUCCEED?$AA@			; `string'
PUBLIC	??_C@_0HH@KKMGHAAE@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x89@ ; `string'
PUBLIC	?GS_DGAnsCastleNpcUpdate@@YAXPAE@Z		; GS_DGAnsCastleNpcUpdate
;	COMDAT ??_C@_0EP@HIMGAPIB@?$FLCastleSiege?$FN?5?$FL0x89?$FN?5GS_DGAnsCas@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0EP@HIMGAPIB@?$FLCastleSiege?$FN?5?$FL0x89?$FN?5GS_DGAnsCas@ DB '[C'
	DB	'astleSiege] [0x89] GS_DGAnsCastleNpcUpdate() - Npc Data Updat'
	DB	'e Result : ''%s''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL?$AA@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL?$AA@ DB 'FAIL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OIIICFNN@SUCCEED?$AA@
CONST	SEGMENT
??_C@_07OIIICFNN@SUCCEED?$AA@ DB 'SUCCEED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@KKMGHAAE@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x89@
CONST	SEGMENT
??_C@_0HH@KKMGHAAE@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x89@ DB '[Cas'
	DB	'tleSiege] PACKET-ERROR [0x89] GS_DGAnsCastleNpcUpdate() - lpM'
	DB	'sg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?GS_DGAnsCastleNpcUpdate@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?GS_DGAnsCastleNpcUpdate@@YAXPAE@Z PROC			; GS_DGAnsCastleNpcUpdate, COMDAT

; 6097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6098 : //#if(GS_CASTLE==1)
; 6099 : 	CSP_ANS_NPCUPDATEDATA* lpMsg = (CSP_ANS_NPCUPDATEDATA*)lpRecv;
; 6100 : 
; 6101 : 	if(lpMsg == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpRecv$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 4b		 je	 SHORT $LN5@GS_DGAnsCa@12

; 6102 : 	return;
; 6103 : 
; 6104 : 	if(lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup())

  0000a	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN7@GS_DGAnsCa@12
  00013	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00017	eb 03		 jmp	 SHORT $LN8@GS_DGAnsCa@12
$LN7@GS_DGAnsCa@12:
  00019	83 c8 ff	 or	 eax, -1
$LN8@GS_DGAnsCa@12:
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	3b d0		 cmp	 edx, eax
  00022	74 12		 je	 SHORT $LN3@GS_DGAnsCa@12

; 6105 : 	{
; 6106 : 		LogAddC(2,"[CastleSiege] PACKET-ERROR [0x89] GS_DGAnsCastleNpcUpdate() - lpMsg->wMapSvrNum != g_MapServerManager.GetMapSvrGroup()") ;

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0HH@KKMGHAAE@?$FLCastleSiege?$FN?5PACKET?9ERROR?5?$FL0x89@
  00029	6a 02		 push	 2
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 6119 : 	}
; 6120 : 
; 6121 : 	LogAddTD("[CastleSiege] [0x89] GS_DGAnsCastleNpcUpdate() - Npc Data Update Result : '%s'",szResult);

  00031	83 c4 08	 add	 esp, 8

; 6122 : //#else
; 6123 : //	return;
; 6124 : //#endif
; 6125 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN3@GS_DGAnsCa@12:

; 6107 : 		return;
; 6108 : 	}
; 6109 : 
; 6110 : 	char* szResult;
; 6111 : 
; 6112 : 	if(lpMsg->iResult != FALSE)

  00036	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0

; 6113 : 	{
; 6114 : 		szResult = "SUCCEED";

  0003a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07OIIICFNN@SUCCEED?$AA@
  0003f	75 05		 jne	 SHORT $LN1@GS_DGAnsCa@12

; 6115 : 	}
; 6116 : 	else
; 6117 : 	{
; 6118 : 		szResult = "FAIL";

  00041	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04OOEBCMBF@FAIL?$AA@
$LN1@GS_DGAnsCa@12:

; 6119 : 	}
; 6120 : 
; 6121 : 	LogAddTD("[CastleSiege] [0x89] GS_DGAnsCastleNpcUpdate() - Npc Data Update Result : '%s'",szResult);

  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HIMGAPIB@?$FLCastleSiege?$FN?5?$FL0x89?$FN?5GS_DGAnsCas@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00052	83 c4 08	 add	 esp, 8
$LN5@GS_DGAnsCa@12:

; 6122 : //#else
; 6123 : //	return;
; 6124 : //#endif
; 6125 : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?GS_DGAnsCastleNpcUpdate@@YAXPAE@Z ENDP			; GS_DGAnsCastleNpcUpdate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqCrywolfSync@@YAXHHH@Z			; GDReqCrywolfSync
; Function compile flags: /Ogtp
;	COMDAT ?GDReqCrywolfSync@@YAXHHH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_iCrywolfState$ = 12					; size = 4
_iOccupationState$ = 16					; size = 4
?GDReqCrywolfSync@@YAXHHH@Z PROC			; GDReqCrywolfSync, COMDAT

; 6136 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6137 : 	if ( iMapSvrGroup <0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 2a		 js	 SHORT $LN2@GDReqCrywo

; 6138 : 		return;
; 6139 : 
; 6140 : 	CWP_REQ_CRYWOLFSYNC pMsg;
; 6141 : 
; 6142 : 	pMsg.h.set((LPBYTE)&pMsg, 0xB0, sizeof(CWP_REQ_CRYWOLFSYNC));
; 6143 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 6144 : 	pMsg.iCrywolfState = iCrywolfState;
; 6145 : 	pMsg.iOccupationState = iOccupationState;

  00017	8b 4d 10	 mov	 ecx, DWORD PTR _iOccupationState$[ebp]
  0001a	66 89 45 f0	 mov	 WORD PTR _pMsg$[ebp+4], ax
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]

; 6146 : 
; 6147 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00021	6a 10		 push	 16			; 00000010H
  00023	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00026	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00029	52		 push	 edx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0002f	66 c7 45 ec c1
	10		 mov	 WORD PTR _pMsg$[ebp], 4289 ; 000010c1H
  00035	c6 45 ee b0	 mov	 BYTE PTR _pMsg$[ebp+2], 176 ; 000000b0H
  00039	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0003c	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GDReqCrywo:

; 6148 : }

  00041	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?GDReqCrywolfSync@@YAXHHH@Z ENDP			; GDReqCrywolfSync
_TEXT	ENDS
PUBLIC	??_C@_0CL@BPJMLKLO@?$FL?5CRYWOLF?5?$FN?5SYNC?5Occupation?3?5?$CFd?0@ ; `string'
PUBLIC	?DGAnsCrywolfSync@@YAXPAE@Z			; DGAnsCrywolfSync
EXTRN	?SetOccupationState@CCrywolfSync@@QAEXH@Z:PROC	; CCrywolfSync::SetOccupationState
EXTRN	?SetCrywolfState@CCrywolfSync@@QAEXH@Z:PROC	; CCrywolfSync::SetCrywolfState
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
;	COMDAT ??_C@_0CL@BPJMLKLO@?$FL?5CRYWOLF?5?$FN?5SYNC?5Occupation?3?5?$CFd?0@
CONST	SEGMENT
??_C@_0CL@BPJMLKLO@?$FL?5CRYWOLF?5?$FN?5SYNC?5Occupation?3?5?$CFd?0@ DB '['
	DB	' CRYWOLF ] SYNC Occupation: %d, State: %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGAnsCrywolfSync@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?DGAnsCrywolfSync@@YAXPAE@Z PROC			; DGAnsCrywolfSync, COMDAT

; 6161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 6162 : 	CWP_ANS_CRYWOLFSYNC * lpMsg = (CWP_ANS_CRYWOLFSYNC *)lpRecv;
; 6163 : 
; 6164 : 	if ( lpMsg == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpRecv$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 5f		 je	 SHORT $LN1@DGAnsCrywo

; 6165 : 		return;
; 6166 : 
; 6167 : 	int iOldOccupationState = g_CrywolfSync.GetOccupationState();

  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00011	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState

; 6168 : 	g_CrywolfSync.SetCrywolfState(lpMsg->iCrywolfState);

  00016	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00019	50		 push	 eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0001f	e8 00 00 00 00	 call	 ?SetCrywolfState@CCrywolfSync@@QAEXH@Z ; CCrywolfSync::SetCrywolfState

; 6169 : 	g_CrywolfSync.SetOccupationState(lpMsg->iOccupationState);

  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	51		 push	 ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0002d	e8 00 00 00 00	 call	 ?SetOccupationState@CCrywolfSync@@QAEXH@Z ; CCrywolfSync::SetOccupationState

; 6170 : 
; 6171 : 	if ( GetTickCount() > (dwCrywolfSyncLogTickCount+ 60000) )

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00038	ff d7		 call	 edi
  0003a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwCrywolfSyncLogTickCount@@3KA ; dwCrywolfSyncLogTickCount
  00040	81 c2 60 ea 00
	00		 add	 edx, 60000		; 0000ea60H
  00046	3b c2		 cmp	 eax, edx
  00048	76 1f		 jbe	 SHORT $LN5@DGAnsCrywo

; 6172 : 	{
; 6173 : 		LogAddC(4, "[ CRYWOLF ] SYNC Occupation: %d, State: %d", lpMsg->iOccupationState, lpMsg->iCrywolfState);

  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00050	50		 push	 eax
  00051	51		 push	 ecx
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BPJMLKLO@?$FL?5CRYWOLF?5?$FN?5SYNC?5Occupation?3?5?$CFd?0@
  00057	6a 04		 push	 4
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 6174 : 		dwCrywolfSyncLogTickCount = GetTickCount();

  00062	ff d7		 call	 edi
  00064	a3 00 00 00 00	 mov	 DWORD PTR ?dwCrywolfSyncLogTickCount@@3KA, eax ; dwCrywolfSyncLogTickCount
$LN5@DGAnsCrywo:
  00069	5f		 pop	 edi
$LN1@DGAnsCrywo:
  0006a	5e		 pop	 esi

; 6175 : 	}
; 6176 : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?DGAnsCrywolfSync@@YAXPAE@Z ENDP			; DGAnsCrywolfSync
_TEXT	ENDS
PUBLIC	?GDReqCrywolfInfoLoad@@YAXH@Z			; GDReqCrywolfInfoLoad
; Function compile flags: /Ogtp
;	COMDAT ?GDReqCrywolfInfoLoad@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_iMapSvrGroup$ = 8					; size = 4
?GDReqCrywolfInfoLoad@@YAXH@Z PROC			; GDReqCrywolfInfoLoad, COMDAT

; 6185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6186 : 	if ( iMapSvrGroup <0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 c0		 test	 eax, eax
  0000b	78 1e		 js	 SHORT $LN2@GDReqCrywo@2

; 6187 : 		return;
; 6188 : 
; 6189 : 	CWP_REQ_CRYWOLFINFOLOAD pMsg;
; 6190 : 
; 6191 : 	pMsg.h.set((LPBYTE)&pMsg, 0xB1, sizeof(CWP_REQ_CRYWOLFINFOLOAD));
; 6192 : 	pMsg.wMapSvrNum = iMapSvrGroup;

  0000d	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 6193 : 
; 6194 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00011	6a 06		 push	 6
  00013	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0001c	66 c7 45 f8 c1
	06		 mov	 WORD PTR _pMsg$[ebp], 1729 ; 000006c1H
  00022	c6 45 fa b1	 mov	 BYTE PTR _pMsg$[ebp+2], 177 ; 000000b1H
  00026	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GDReqCrywo@2:

; 6195 : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GDReqCrywolfInfoLoad@@YAXH@Z ENDP			; GDReqCrywolfInfoLoad
_TEXT	ENDS
PUBLIC	??_C@_0CM@OEMLKOCG@?$FL?5Crywolf?5?$FN?5Incorrect?5DB?5Occupat@ ; `string'
PUBLIC	?DGAnsCrywolfInfoLoad@@YAXPAE@Z			; DGAnsCrywolfInfoLoad
EXTRN	?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z:PROC	; CCrywolf::ApplyCrywolfDBInfo
EXTRN	?g_Crywolf@@3VCCrywolf@@A:BYTE			; g_Crywolf
;	COMDAT ??_C@_0CM@OEMLKOCG@?$FL?5Crywolf?5?$FN?5Incorrect?5DB?5Occupat@
CONST	SEGMENT
??_C@_0CM@OEMLKOCG@?$FL?5Crywolf?5?$FN?5Incorrect?5DB?5Occupat@ DB '[ Cry'
	DB	'wolf ] Incorrect DB OccupationState!!!', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGAnsCrywolfInfoLoad@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?DGAnsCrywolfInfoLoad@@YAXPAE@Z PROC			; DGAnsCrywolfInfoLoad, COMDAT

; 6206 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6207 : 	CWP_ANS_CRYWOLFINFOLOAD * lpMsg = (CWP_ANS_CRYWOLFINFOLOAD *)lpRecv;
; 6208 : 
; 6209 : //#if(GS_CASTLE==1)
; 6210 : 	if(lpMsg == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpRecv$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 3d		 je	 SHORT $LN5@DGAnsCrywo@2

; 6211 : 	{
; 6212 : 		return;
; 6213 : 	}
; 6214 : 
; 6215 : 	int iResult;
; 6216 : 
; 6217 : 	if( true != FALSE && lpMsg->iOccupationState >= 0 && lpMsg->iOccupationState <= 2)

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	85 c9		 test	 ecx, ecx
  0000f	78 0c		 js	 SHORT $LN3@DGAnsCrywo@2
  00011	83 f9 02	 cmp	 ecx, 2
  00014	7f 07		 jg	 SHORT $LN3@DGAnsCrywo@2

; 6218 : 	{
; 6219 : 		iResult = 1;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 6220 : 	}
; 6221 : 	else

  0001b	eb 02		 jmp	 SHORT $LN2@DGAnsCrywo@2
$LN3@DGAnsCrywo@2:

; 6222 : 	{
; 6223 : 		iResult = 0;

  0001d	33 c0		 xor	 eax, eax
$LN2@DGAnsCrywo@2:

; 6224 : 	}
; 6225 : 
; 6226 : 	lpMsg->btResult = iResult;

  0001f	88 42 03	 mov	 BYTE PTR [edx+3], al

; 6227 : 
; 6228 : 	if((iResult & 0xFF) != 0)

  00022	84 c0		 test	 al, al
  00024	74 11		 je	 SHORT $LN1@DGAnsCrywo@2

; 6229 : 	{
; 6230 : 		g_Crywolf.ApplyCrywolfDBInfo(lpMsg->iCrywolfState,lpMsg->iOccupationState);

  00026	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00030	e8 00 00 00 00	 call	 ?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z ; CCrywolf::ApplyCrywolfDBInfo

; 6235 : //#endif
; 6236 : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN1@DGAnsCrywo@2:

; 6231 : 		return;
; 6232 : 	}
; 6233 : 
; 6234 : 	LogAddC(2,"[ Crywolf ] Incorrect DB OccupationState!!!");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OEMLKOCG@?$FL?5Crywolf?5?$FN?5Incorrect?5DB?5Occupat@
  0003c	6a 02		 push	 2
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00044	83 c4 08	 add	 esp, 8
$LN5@DGAnsCrywo@2:

; 6235 : //#endif
; 6236 : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?DGAnsCrywolfInfoLoad@@YAXPAE@Z ENDP			; DGAnsCrywolfInfoLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqCrywolfInfoSave@@YAXHHH@Z			; GDReqCrywolfInfoSave
; Function compile flags: /Ogtp
;	COMDAT ?GDReqCrywolfInfoSave@@YAXHHH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_iMapSvrGroup$ = 8					; size = 4
_iCrywolfState$ = 12					; size = 4
_iOccupationState$ = 16					; size = 4
?GDReqCrywolfInfoSave@@YAXHHH@Z PROC			; GDReqCrywolfInfoSave, COMDAT

; 6247 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6248 : 	if ( iMapSvrGroup <0 )

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMapSvrGroup$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	78 2a		 js	 SHORT $LN2@GDReqCrywo@3

; 6249 : 		return;
; 6250 : 
; 6251 : 	CWP_REQ_CRYWOLFINFOSAVE pMsg;
; 6252 : 
; 6253 : 	pMsg.h.set((LPBYTE)&pMsg, 0xB2, sizeof(CWP_REQ_CRYWOLFINFOSAVE));
; 6254 : 	pMsg.wMapSvrNum = iMapSvrGroup;
; 6255 : 	pMsg.iCrywolfState = iCrywolfState;
; 6256 : 	pMsg.iOccupationState = iOccupationState;

  00017	8b 4d 10	 mov	 ecx, DWORD PTR _iOccupationState$[ebp]
  0001a	66 89 45 f0	 mov	 WORD PTR _pMsg$[ebp+4], ax
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]

; 6257 : 
; 6258 : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00021	6a 10		 push	 16			; 00000010H
  00023	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00026	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00029	52		 push	 edx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0002f	66 c7 45 ec c1
	10		 mov	 WORD PTR _pMsg$[ebp], 4289 ; 000010c1H
  00035	c6 45 ee b2	 mov	 BYTE PTR _pMsg$[ebp+2], 178 ; 000000b2H
  00039	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0003c	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GDReqCrywo@3:

; 6259 : }

  00041	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?GDReqCrywolfInfoSave@@YAXHHH@Z ENDP			; GDReqCrywolfInfoSave
_TEXT	ENDS
PUBLIC	?DGAnsCrywolfInfoSave@@YAXPAE@Z			; DGAnsCrywolfInfoSave
; Function compile flags: /Ogtp
;	COMDAT ?DGAnsCrywolfInfoSave@@YAXPAE@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
?DGAnsCrywolfInfoSave@@YAXPAE@Z PROC			; DGAnsCrywolfInfoSave, COMDAT

; 6269 : 	CWP_ANS_CRYWOLFINFOSAVE * lpMsg = (CWP_ANS_CRYWOLFINFOSAVE *)lpRecv;
; 6270 : }

  00000	c3		 ret	 0
?DGAnsCrywolfInfoSave@@YAXPAE@Z ENDP			; DGAnsCrywolfInfoSave
_TEXT	ENDS
PUBLIC	??_C@_0BO@LEBNDADM@Character?5Name?5Change?5?3?5?$CFs?0?$CFs?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DGChangeNameResult@@YAXPAUSDHP_CHANGENAME_RESULT@@@Z ; DGChangeNameResult
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
;	COMDAT ??_C@_0BO@LEBNDADM@Character?5Name?5Change?5?3?5?$CFs?0?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@LEBNDADM@Character?5Name?5Change?5?3?5?$CFs?0?$CFs?$AA@ DB 'Cha'
	DB	'racter Name Change : %s,%s', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGChangeNameResult@@YAXPAUSDHP_CHANGENAME_RESULT@@@Z
_TEXT	SEGMENT
_pMsg$ = -68						; size = 25
_Name$230778 = -40					; size = 10
_Name2$230777 = -28					; size = 10
_szAccountID$ = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGChangeNameResult@@YAXPAUSDHP_CHANGENAME_RESULT@@@Z PROC ; DGChangeNameResult, COMDAT

; 6284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 6285 : 	char szAccountID[10];
; 6286 : 	int aIndex = lpMsg->aIndex;
; 6287 : 
; 6288 : 	BYTE Result = lpMsg->btResult;
; 6289 : 
; 6290 : 	szAccountID[10] = '\0';
; 6291 : 
; 6292 : 	memcpy(szAccountID, lpMsg->szAccountID, sizeof(szAccountID));

  00015	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00018	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0001b	66 8b 56 10	 mov	 dx, WORD PTR [esi+16]
  0001f	8a 5e 26	 mov	 bl, BYTE PTR [esi+38]
  00022	57		 push	 edi
  00023	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00026	89 45 f0	 mov	 DWORD PTR _szAccountID$[ebp], eax

; 6293 : 	
; 6294 : 	if(::gObjIsAccontConnect(aIndex, szAccountID) == FALSE )

  00029	8d 45 f0	 lea	 eax, DWORD PTR _szAccountID$[ebp]
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	c6 45 fa 00	 mov	 BYTE PTR _szAccountID$[ebp+10], 0
  00032	89 4d f4	 mov	 DWORD PTR _szAccountID$[ebp+4], ecx
  00035	66 89 55 f8	 mov	 WORD PTR _szAccountID$[ebp+8], dx
  00039	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003e	83 c4 08	 add	 esp, 8
  00041	85 c0		 test	 eax, eax
  00043	75 36		 jne	 SHORT $LN2@DGChangeNa

; 6295 : 	{
; 6296 : 		LogAddC(2, lMsg.Get(424), szAccountID);

  00045	8d 4d f0	 lea	 ecx, DWORD PTR _szAccountID$[ebp]
  00048	51		 push	 ecx
  00049	68 a8 01 00 00	 push	 424			; 000001a8H
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00053	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00058	50		 push	 eax
  00059	6a 02		 push	 2
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 6297 : 		CloseClient(aIndex);

  00061	57		 push	 edi
  00062	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx

; 6322 :     }
; 6323 : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN2@DGChangeNa:

; 6298 : 		return;
; 6299 : 	}
; 6300 : 
; 6301 : 	PMSG_CHANGE_NAME pMsg;
; 6302 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xF3, 0x16, sizeof(pMsg));

  0007b	6a 19		 push	 25			; 00000019H
  0007d	6a 16		 push	 22			; 00000016H
  0007f	8d 55 bc	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00082	68 f3 00 00 00	 push	 243			; 000000f3H
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 6303 : 	
; 6304 : 	pMsg.btResult = lpMsg->btResult;
; 6305 : 
; 6306 : 	memcpy(pMsg.szName, lpMsg->szName, sizeof(pMsg.szName));

  0008d	8b 4e 12	 mov	 ecx, DWORD PTR [esi+18]
  00090	8a 46 26	 mov	 al, BYTE PTR [esi+38]
  00093	8b 56 16	 mov	 edx, DWORD PTR [esi+22]
  00096	89 4d c0	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 6307 :     memcpy(pMsg.szName2, lpMsg->szName2, sizeof(pMsg.szName2));

  00099	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0009c	88 45 d4	 mov	 BYTE PTR _pMsg$[ebp+24], al
  0009f	0f b7 46 1a	 movzx	 eax, WORD PTR [esi+26]
  000a3	89 55 c4	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  000a6	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  000a9	89 4d ca	 mov	 DWORD PTR _pMsg$[ebp+14], ecx

; 6308 : 
; 6309 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  000ac	0f b6 4d bd	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000b0	89 55 ce	 mov	 DWORD PTR _pMsg$[ebp+18], edx
  000b3	51		 push	 ecx
  000b4	66 89 45 c8	 mov	 WORD PTR _pMsg$[ebp+12], ax
  000b8	0f b7 46 24	 movzx	 eax, WORD PTR [esi+36]
  000bc	8d 55 bc	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000bf	52		 push	 edx
  000c0	57		 push	 edi
  000c1	66 89 45 d2	 mov	 WORD PTR _pMsg$[ebp+22], ax
  000c5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ca	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6310 : 
; 6311 : 	if ( Result == 0)

  000cd	84 db		 test	 bl, bl
  000cf	75 44		 jne	 SHORT $LN1@DGChangeNa

; 6312 :     {
; 6313 : 		char Name2[10];
; 6314 : 		char Name[10];
; 6315 : 		Name2[10] = '\0';
; 6316 : 		Name[10] = '\0';
; 6317 : 
; 6318 : 		memcpy(Name2, lpMsg->szName2, sizeof(Name2));

  000d1	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000d4	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000d7	0f b7 56 24	 movzx	 edx, WORD PTR [esi+36]
  000db	89 45 e4	 mov	 DWORD PTR _Name2$230777[ebp], eax

; 6319 : 		memcpy(Name, lpMsg->szName, sizeof(Name));

  000de	8b 46 12	 mov	 eax, DWORD PTR [esi+18]
  000e1	89 4d e8	 mov	 DWORD PTR _Name2$230777[ebp+4], ecx
  000e4	8b 4e 16	 mov	 ecx, DWORD PTR [esi+22]
  000e7	89 45 d8	 mov	 DWORD PTR _Name$230778[ebp], eax

; 6320 : 
; 6321 : 		LogAddTD("Character Name Change : %s,%s", Name, Name2);

  000ea	8d 45 e4	 lea	 eax, DWORD PTR _Name2$230777[ebp]
  000ed	89 4d dc	 mov	 DWORD PTR _Name$230778[ebp+4], ecx
  000f0	50		 push	 eax
  000f1	66 89 55 ec	 mov	 WORD PTR _Name2$230777[ebp+8], dx
  000f5	0f b7 56 1a	 movzx	 edx, WORD PTR [esi+26]
  000f9	8d 4d d8	 lea	 ecx, DWORD PTR _Name$230778[ebp]
  000fc	51		 push	 ecx
  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LEBNDADM@Character?5Name?5Change?5?3?5?$CFs?0?$CFs?$AA@
  00102	88 5d ee	 mov	 BYTE PTR _Name2$230777[ebp+10], bl
  00105	88 5d e2	 mov	 BYTE PTR _Name$230778[ebp+10], bl
  00108	66 89 55 e0	 mov	 WORD PTR _Name$230778[ebp+8], dx
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@DGChangeNa:

; 6322 :     }
; 6323 : }

  00115	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	33 cd		 xor	 ecx, ebp
  0011c	5b		 pop	 ebx
  0011d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
?DGChangeNameResult@@YAXPAUSDHP_CHANGENAME_RESULT@@@Z ENDP ; DGChangeNameResult
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DGSummonerStateUpdatedSend@@YAXPAUPMSG_ANS_SUMMONER_CREATE@@@Z ; DGSummonerStateUpdatedSend
; Function compile flags: /Ogtp
;	COMDAT ?DGSummonerStateUpdatedSend@@YAXPAUPMSG_ANS_SUMMONER_CREATE@@@Z
_TEXT	SEGMENT
_szId$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGSummonerStateUpdatedSend@@YAXPAUPMSG_ANS_SUMMONER_CREATE@@@Z PROC ; DGSummonerStateUpdatedSend, COMDAT

; 6329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 6330 : 	char szId[MAX_ACCOUNT_LEN];
; 6331 : 
; 6332 : 	szId[MAX_ACCOUNT_LEN] = 0;
; 6333 : 
; 6334 : 	memcpy(szId, lpMsg->szAccountID, MAX_ACCOUNT_LEN);

  00013	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00016	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  00019	56		 push	 esi

; 6335 : 
; 6336 : 	int aIndex = lpMsg->aIndex;

  0001a	0f bf 70 0e	 movsx	 esi, WORD PTR [eax+14]
  0001e	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx

; 6337 : 
; 6338 : 	if(::gObjIsAccontConnect(aIndex, szId) == FALSE )

  00021	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00024	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  00027	66 8b 48 0b	 mov	 cx, WORD PTR [eax+11]
  0002b	52		 push	 edx
  0002c	56		 push	 esi
  0002d	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  00031	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  00035	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	75 47		 jne	 SHORT $LN1@DGSummoner

; 6339 : 	{
; 6340 : 		LogAddC(2, lMsg.Get(MSGGET(1, 165)), gObj[aIndex].AccountID, szId);

  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00047	8b ce		 mov	 ecx, esi
  00049	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0004f	8d 45 f0	 lea	 eax, DWORD PTR _szId$[ebp]
  00052	50		 push	 eax
  00053	8d 44 11 6c	 lea	 eax, DWORD PTR [ecx+edx+108]
  00057	50		 push	 eax
  00058	68 a5 01 00 00	 push	 421			; 000001a5H
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00062	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00067	50		 push	 eax
  00068	6a 02		 push	 2
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 6341 : 		CloseClient(aIndex);

  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	5e		 pop	 esi

; 6346 : 	//gObj[aIndex].Summoner = lpMsg->IsSummonerEnable;
; 6347 : 
; 6348 : 	PMSG_UPD_SUMMONER_CREATE pMsg;
; 6349 : 	pMsg.h.set((LPBYTE)&pMsg, 0xDE, sizeof(pMsg));
; 6350 : 
; 6351 : 	pMsg.btResult = 0;
; 6352 : 	pMsg.IsSummonerEnable = lpMsg->IsSummonerEnable | 15;
; 6353 : 
; 6354 : #ifndef CHARCREATE_TEMP
; 6355 : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));
; 6356 : #endif
; 6357 : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN1@DGSummoner:

; 6342 : 		return;
; 6343 : 	}
; 6344 : 
; 6345 : 	gObj[aIndex].Summoner = 1;	//Fix Summoner

  00088	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008e	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00094	c6 84 0e 84 20
	00 00 01	 mov	 BYTE PTR [esi+ecx+8324], 1

; 6346 : 	//gObj[aIndex].Summoner = lpMsg->IsSummonerEnable;
; 6347 : 
; 6348 : 	PMSG_UPD_SUMMONER_CREATE pMsg;
; 6349 : 	pMsg.h.set((LPBYTE)&pMsg, 0xDE, sizeof(pMsg));
; 6350 : 
; 6351 : 	pMsg.btResult = 0;
; 6352 : 	pMsg.IsSummonerEnable = lpMsg->IsSummonerEnable | 15;
; 6353 : 
; 6354 : #ifndef CHARCREATE_TEMP
; 6355 : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));
; 6356 : #endif
; 6357 : }

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009f	33 cd		 xor	 ecx, ebp
  000a1	5e		 pop	 esi
  000a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?DGSummonerStateUpdatedSend@@YAXPAUPMSG_ANS_SUMMONER_CREATE@@@Z ENDP ; DGSummonerStateUpdatedSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDSummonerStateUpdate@@YAXPAUOBJECTSTRUCT@@H@Z	; GDSummonerStateUpdate
; Function compile flags: /Ogtp
;	COMDAT ?GDSummonerStateUpdate@@YAXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iIndex$ = 12						; size = 4
?GDSummonerStateUpdate@@YAXPAUOBJECTSTRUCT@@H@Z PROC	; GDSummonerStateUpdate, COMDAT

; 6368 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 6369 : 	PMSG_REQ_SUMMONER_CREATE pMsg;
; 6370 : 
; 6371 : 	pMsg.h.set((LPBYTE)&pMsg, 0xA2, sizeof(pMsg));
; 6372 : 
; 6373 : 	memset(pMsg.szAccountID, 0, sizeof(pMsg.szAccountID));
; 6374 : 	memcpy(pMsg.szAccountID, lpObj->AccountID, MAX_ACCOUNT_LEN);

  00013	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00016	33 c9		 xor	 ecx, ecx
  00018	89 4d ef	 mov	 DWORD PTR _pMsg$[ebp+3], ecx
  0001b	89 4d f3	 mov	 DWORD PTR _pMsg$[ebp+7], ecx
  0001e	66 89 4d f7	 mov	 WORD PTR _pMsg$[ebp+11], cx
  00022	88 4d f9	 mov	 BYTE PTR _pMsg$[ebp+13], cl
  00025	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00028	89 4d ef	 mov	 DWORD PTR _pMsg$[ebp+3], ecx
  0002b	66 8b 48 74	 mov	 cx, WORD PTR [eax+116]
  0002f	89 55 f3	 mov	 DWORD PTR _pMsg$[ebp+7], edx

; 6375 : 
; 6376 : 	pMsg.aIndex = lpObj->m_Index;

  00032	66 8b 10	 mov	 dx, WORD PTR [eax]

; 6377 : 
; 6378 : 	cDBSMng.Send((char*)&pMsg, sizeof(pMsg));

  00035	6a 10		 push	 16			; 00000010H
  00037	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003a	66 89 4d f7	 mov	 WORD PTR _pMsg$[ebp+11], cx
  0003e	50		 push	 eax
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00044	66 c7 45 ec c1
	10		 mov	 WORD PTR _pMsg$[ebp], 4289 ; 000010c1H
  0004a	c6 45 ee a2	 mov	 BYTE PTR _pMsg$[ebp+2], 162 ; 000000a2H
  0004e	66 89 55 fa	 mov	 WORD PTR _pMsg$[ebp+14], dx
  00052	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 6379 : }

  00057	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005a	33 cd		 xor	 ecx, ebp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?GDSummonerStateUpdate@@YAXPAUOBJECTSTRUCT@@H@Z ENDP	; GDSummonerStateUpdate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DGSummonerStateRecv@@YAXPAUPMSG_ANS_SUMMONER_STATUS@@@Z ; DGSummonerStateRecv
; Function compile flags: /Ogtp
;	COMDAT ?DGSummonerStateRecv@@YAXPAUPMSG_ANS_SUMMONER_STATUS@@@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 5
_szId$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGSummonerStateRecv@@YAXPAUPMSG_ANS_SUMMONER_STATUS@@@Z PROC ; DGSummonerStateRecv, COMDAT

; 6383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 6384 : 	char szId[MAX_ACCOUNT_LEN];
; 6385 : 
; 6386 : 	szId[MAX_ACCOUNT_LEN] = 0;
; 6387 : 
; 6388 : 	memcpy(szId, lpMsg->szAccountID, MAX_ACCOUNT_LEN);

  00013	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00016	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  00019	56		 push	 esi

; 6389 : 
; 6390 : 	int aIndex = lpMsg->aIndex;

  0001a	0f bf 70 0e	 movsx	 esi, WORD PTR [eax+14]
  0001e	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx

; 6391 : 
; 6392 : 	if(::gObjIsAccontConnect(aIndex, szId) == FALSE )

  00021	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00024	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  00027	66 8b 48 0b	 mov	 cx, WORD PTR [eax+11]
  0002b	52		 push	 edx
  0002c	56		 push	 esi
  0002d	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  00031	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  00035	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect

; 6393 : 	{
; 6394 : 		LogAddC(2, lMsg.Get(MSGGET(1, 165)), gObj[aIndex].AccountID, szId);

  0003a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	8b ce		 mov	 ecx, esi
  00042	83 c4 08	 add	 esp, 8
  00045	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN1@DGSummoner@2
  0004f	8d 45 f0	 lea	 eax, DWORD PTR _szId$[ebp]
  00052	50		 push	 eax
  00053	8d 44 11 6c	 lea	 eax, DWORD PTR [ecx+edx+108]
  00057	50		 push	 eax
  00058	68 a5 01 00 00	 push	 421			; 000001a5H
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00062	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00067	50		 push	 eax
  00068	6a 02		 push	 2
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 6395 : 		CloseClient(aIndex);

  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	5e		 pop	 esi

; 6411 : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN1@DGSummoner@2:

; 6396 : 		return;
; 6397 : 	}
; 6398 : 
; 6399 : 	//if(lpMsg->btResult == 1)
; 6400 : 	//{
; 6401 : 		gObj[aIndex].Summoner = 1;

  00088	b0 01		 mov	 al, 1
  0008a	88 84 11 84 20
	00 00		 mov	 BYTE PTR [ecx+edx+8324], al

; 6402 : 	//}
; 6403 : 
; 6404 : 	PMSG_UPD_SUMMONER_CREATE pMsg;
; 6405 : 	pMsg.h.set((LPBYTE)&pMsg, 0xDE, sizeof(pMsg));
; 6406 : 
; 6407 : 	pMsg.btResult = 1;
; 6408 : 	pMsg.IsSummonerEnable = 1;//lpMsg->btResult;

  00091	88 45 ec	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 6409 : 
; 6410 : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00094	6a 05		 push	 5
  00096	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00099	50		 push	 eax
  0009a	56		 push	 esi
  0009b	c7 45 e8 c1 05
	de 01		 mov	 DWORD PTR _pMsg$[ebp], 31327681 ; 01de05c1H
  000a2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6411 : }

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	33 cd		 xor	 ecx, ebp
  000af	5e		 pop	 esi
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
?DGSummonerStateRecv@@YAXPAUPMSG_ANS_SUMMONER_STATUS@@@Z ENDP ; DGSummonerStateRecv
_TEXT	ENDS
PUBLIC	??_C@_0BF@OJNIPFKN@?$FLUnBanChar?$FN?5?$CFs?5Error?$AA@ ; `string'
PUBLIC	??_C@_0P@HIMPPMLD@?$FLUnBanChar?$FN?5?$CFs?$AA@	; `string'
PUBLIC	?DSBanSystem@@YAXPAUBAN_CHAR_DS@@@Z		; DSBanSystem
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
;	COMDAT ??_C@_0BF@OJNIPFKN@?$FLUnBanChar?$FN?5?$CFs?5Error?$AA@
CONST	SEGMENT
??_C@_0BF@OJNIPFKN@?$FLUnBanChar?$FN?5?$CFs?5Error?$AA@ DB '[UnBanChar] %'
	DB	's Error', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIMPPMLD@?$FLUnBanChar?$FN?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0P@HIMPPMLD@?$FLUnBanChar?$FN?5?$CFs?$AA@ DB '[UnBanChar] %s', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DSBanSystem@@YAXPAUBAN_CHAR_DS@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?DSBanSystem@@YAXPAUBAN_CHAR_DS@@@Z PROC		; DSBanSystem, COMDAT

; 6487 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 6488 : 	if(lpMsg == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 49		 je	 SHORT $LN1@DSBanSyste

; 6489 : 	{
; 6490 : 		return;
; 6491 : 	}
; 6492 : 
; 6493 : 	if(!gObjIsConnectedGP(lpMsg->aIndex))

  0000b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  00014	83 c4 04	 add	 esp, 4
  00017	85 c0		 test	 eax, eax
  00019	74 39		 je	 SHORT $LN1@DSBanSyste

; 6494 : 	{
; 6495 : 		return;
; 6496 : 	}
; 6497 : 
; 6498 : 	if(lpMsg->Type == 3)

  0001b	80 7e 05 03	 cmp	 BYTE PTR [esi+5], 3
  0001f	75 33		 jne	 SHORT $LN1@DSBanSyste

; 6499 : 	{
; 6500 : 		if(lpMsg->Result)

  00021	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00025	74 18		 je	 SHORT $LN2@DSBanSyste

; 6501 : 		{
; 6502 : 			MsgNormal(lpMsg->aIndex,"[UnBanChar] %s",lpMsg->Name);

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002d	51		 push	 ecx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIMPPMLD@?$FLUnBanChar?$FN?5?$CFs?$AA@
  00033	52		 push	 edx

; 6503 : 		}
; 6504 : 		else
; 6505 : 		{
; 6506 : 			MsgNormal(lpMsg->aIndex,"[UnBanChar] %s Error",lpMsg->Name);

  00034	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	5e		 pop	 esi

; 6507 : 		}
; 6508 : 	}
; 6509 : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN2@DSBanSyste:

; 6503 : 		}
; 6504 : 		else
; 6505 : 		{
; 6506 : 			MsgNormal(lpMsg->aIndex,"[UnBanChar] %s Error",lpMsg->Name);

  0003f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00042	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OJNIPFKN@?$FLUnBanChar?$FN?5?$CFs?5Error?$AA@
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@DSBanSyste:
  00054	5e		 pop	 esi

; 6507 : 		}
; 6508 : 	}
; 6509 : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?DSBanSystem@@YAXPAUBAN_CHAR_DS@@@Z ENDP		; DSBanSystem
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDUpdateExtendedInvenCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z ; GDUpdateExtendedInvenCount
; Function compile flags: /Ogtp
;	COMDAT ?GDUpdateExtendedInvenCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_ExpandedInventory$ = 12				; size = 1
_dwEventIndex$ = 16					; size = 4
_iItemPos$ = 20						; size = 4
_bBuyAtInGameShop$ = 24					; size = 1
_bIsReplace$ = 28					; size = 1
?GDUpdateExtendedInvenCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z PROC ; GDUpdateExtendedInvenCount, COMDAT

; 6512 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 6513 : 	SDHP_REQ_SET_EXTENDEDINVEN_COUNT pMsg;
; 6514 : 	pMsg.h.set((LPBYTE)&pMsg, 0xD5, sizeof(pMsg));
; 6515 : 	// ----
; 6516 : 	memcpy(pMsg.szCharName, lpObj->Name, 11);

  00013	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00016	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00019	89 4d df	 mov	 DWORD PTR _pMsg$[ebp+3], ecx
  0001c	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  00020	89 55 e3	 mov	 DWORD PTR _pMsg$[ebp+7], edx
  00023	0f b6 90 81 00
	00 00		 movzx	 edx, BYTE PTR [eax+129]

; 6517 : 	pMsg.Number				= lpObj->m_Index;

  0002a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0002d	66 89 4d e7	 mov	 WORD PTR _pMsg$[ebp+11], cx

; 6518 : 	pMsg.ExtendedInvenCount = ExpandedInventory;

  00031	8a 4d 0c	 mov	 cl, BYTE PTR _ExpandedInventory$[ebp]
  00034	66 89 45 ea	 mov	 WORD PTR _pMsg$[ebp+14], ax

; 6519 : 	pMsg.EventIndex			= dwEventIndex;
; 6520 : 	pMsg.ItemPos			= iItemPos;

  00038	8b 45 14	 mov	 eax, DWORD PTR _iItemPos$[ebp]
  0003b	88 55 e9	 mov	 BYTE PTR _pMsg$[ebp+13], dl
  0003e	8b 55 10	 mov	 edx, DWORD PTR _dwEventIndex$[ebp]
  00041	88 4d ec	 mov	 BYTE PTR _pMsg$[ebp+16], cl

; 6521 : 	pMsg.BuyAtInGameShop	= bBuyAtInGameShop;

  00044	8a 4d 18	 mov	 cl, BYTE PTR _bBuyAtInGameShop$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  0004a	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 6522 : 	pMsg.IsReplace			= bIsReplace;

  0004d	8a 55 1c	 mov	 dl, BYTE PTR _bIsReplace$[ebp]

; 6523 : 	// ----
; 6524 : 	cDBSMng.Send((char*)&pMsg, sizeof(pMsg));

  00050	6a 20		 push	 32			; 00000020H
  00052	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00055	88 4d f8	 mov	 BYTE PTR _pMsg$[ebp+28], cl
  00058	50		 push	 eax
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005e	66 c7 45 dc c1
	20		 mov	 WORD PTR _pMsg$[ebp], 8385 ; 000020c1H
  00064	c6 45 de d5	 mov	 BYTE PTR _pMsg$[ebp+2], 213 ; 000000d5H
  00068	88 55 f9	 mov	 BYTE PTR _pMsg$[ebp+29], dl
  0006b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 6525 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?GDUpdateExtendedInvenCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z ENDP ; GDUpdateExtendedInvenCount
_TEXT	ENDS
PUBLIC	??_C@_0EL@PCONLJDC@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Er@ ; `string'
PUBLIC	??_C@_0EG@IGKGAEFN@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Fa@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DGUpdateExtendedInvenCountResult@@YAXPAUSDHP_ANS_SET_EXTENDEDINVEN_COUNT@@@Z ; DGUpdateExtendedInvenCountResult
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?gObjInventoryItemSet@@YAXHHE@Z:PROC		; gObjInventoryItemSet
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCResultForExtendInvenOrWarehouse@@YAXHE@Z:PROC ; GCResultForExtendInvenOrWarehouse
;	COMDAT ??_C@_0EL@PCONLJDC@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Er@
CONST	SEGMENT
??_C@_0EL@PCONLJDC@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Er@ DB '[E'
	DB	'xtended Storage][Inventory] Error Item Pos. User Name : %s. I'
	DB	'temPos : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@IGKGAEFN@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Fa@
CONST	SEGMENT
??_C@_0EG@IGKGAEFN@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Fa@ DB '[E'
	DB	'xtended Storage][Inventory] Fail to extend inventory User Nam'
	DB	'e : %s', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGUpdateExtendedInvenCountResult@@YAXPAUSDHP_ANS_SET_EXTENDEDINVEN_COUNT@@@Z
_TEXT	SEGMENT
_szTemp$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGUpdateExtendedInvenCountResult@@YAXPAUSDHP_ANS_SET_EXTENDEDINVEN_COUNT@@@Z PROC ; DGUpdateExtendedInvenCountResult, COMDAT

; 6530 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpMsg$[ebp]
  00017	56		 push	 esi

; 6531 : 	int aIndex = lpMsg->Number;

  00018	0f b7 73 04	 movzx	 esi, WORD PTR [ebx+4]

; 6532 : 	// ----
; 6533 : 	if( !gObjIsConnected(aIndex) )

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00022	83 c4 04	 add	 esp, 4
  00025	85 c0		 test	 eax, eax
  00027	0f 84 33 01 00
	00		 je	 $LN7@DGUpdateEx

; 6534 : 	{
; 6535 : 		return;
; 6536 : 	}
; 6537 : 	// ----
; 6538 : 	LPOBJ lpObj = &gObj[aIndex];

  0002d	57		 push	 edi
  0002e	8b fe		 mov	 edi, esi
  00030	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00036	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6539 : 	// ----
; 6540 : 	if( !lpMsg->Result )

  0003c	80 7b 06 00	 cmp	 BYTE PTR [ebx+6], 0
  00040	75 46		 jne	 SHORT $LN5@DGUpdateEx

; 6541 : 	{
; 6542 : 		//if( lpMsg->BuyAtInGameShop == 1 )
; 6543 : 		//		CCashShopInGame::RollBackUseItem(v8, lpMsg->EventIndex);
; 6544 : 		//	else
; 6545 : 		//		GCInventoryItemDeleteSend(v9, 0xFFu, 1u);
; 6546 : 			GCResultForExtendInvenOrWarehouse(aIndex, 0);

  00042	6a 00		 push	 0
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?GCResultForExtendInvenOrWarehouse@@YAXHE@Z ; GCResultForExtendInvenOrWarehouse

; 6547 : 			LogAddTD("[Extended Storage][Inventory] Fail to extend inventory User Name : %s", lpObj->Name);

  0004a	83 c7 77	 add	 edi, 119		; 00000077H
  0004d	57		 push	 edi
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@IGKGAEFN@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Fa@
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00059	83 c4 10	 add	 esp, 16			; 00000010H

; 6548 : 			GCServerMsgStringSend(lMsg.Get(3483), aIndex, 1);

  0005c	6a 01		 push	 1
  0005e	56		 push	 esi
  0005f	68 9b 0d 00 00	 push	 3483			; 00000d9bH
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00069	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 6566 : 	{
; 6567 : 		LogAddTD("[Extended Storage][Inventory] Error Item Pos. User Name : %s. ItemPos : %d", lpObj->Name, lpMsg->ItemPos);

  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 6579 : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN5@DGUpdateEx:

; 6549 : 			return;
; 6550 : 	}
; 6551 : 	// ----
; 6552 : 	lpObj->ExpandedInventory = lpMsg->ExtendedInvenCount;

  00088	8a 43 07	 mov	 al, BYTE PTR [ebx+7]
  0008b	88 87 24 26 00
	00		 mov	 BYTE PTR [edi+9764], al

; 6553 : 	// ----
; 6554 : 	if( lpObj->ExpandedInventory < 0 || lpObj->ExpandedInventory > 2 )

  00091	3c 02		 cmp	 al, 2
  00093	76 07		 jbe	 SHORT $LN4@DGUpdateEx

; 6555 : 	{
; 6556 : 		lpObj->ExpandedInventory = 0;

  00095	c6 87 24 26 00
	00 00		 mov	 BYTE PTR [edi+9764], 0
$LN4@DGUpdateEx:

; 6557 : 	}
; 6558 : 	// ----
; 6559 : 	//if( lpMsg->BuyAtInGameShop == 1 )
; 6560 : 	//{
; 6561 : 	//	CCashShopInGame::SetActiveItemResult(v8, lpMsg->EventIndex);
; 6562 : 	//}
; 6563 : 	//else
; 6564 : 	//{
; 6565 : 	if( lpMsg->ItemPos > 203 || lpMsg->ItemPos < 0 )

  0009c	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0009f	3d cb 00 00 00	 cmp	 eax, 203		; 000000cbH
  000a4	0f 8f a2 00 00
	00		 jg	 $LN1@DGUpdateEx
  000aa	85 c0		 test	 eax, eax
  000ac	0f 88 9a 00 00
	00		 js	 $LN1@DGUpdateEx

; 6568 : 		return;
; 6569 : 	}
; 6570 : 	// ----
; 6571 : 	gObjInventoryItemSet(aIndex, lpMsg->ItemPos, 0xFF);

  000b2	68 ff 00 00 00	 push	 255			; 000000ffH
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 6572 : 	lpObj->pInventory[lpMsg->ItemPos].Clear();

  000be	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  000c1	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  000c7	03 8f 24 0e 00
	00		 add	 ecx, DWORD PTR [edi+3620]
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 6573 : 	GCInventoryItemDeleteSend(aIndex, lpMsg->ItemPos, 1);

  000d5	0f b6 43 0c	 movzx	 eax, BYTE PTR [ebx+12]
  000d9	6a 01		 push	 1
  000db	50		 push	 eax
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 6574 : 	GCResultForExtendInvenOrWarehouse(aIndex, 1);

  000e2	6a 01		 push	 1
  000e4	56		 push	 esi
  000e5	e8 00 00 00 00	 call	 ?GCResultForExtendInvenOrWarehouse@@YAXHE@Z ; GCResultForExtendInvenOrWarehouse

; 6575 : 	// ----
; 6576 : 	char szTemp[0x100] = { 0 };

  000ea	68 ff 00 00 00	 push	 255			; 000000ffH
  000ef	8d 8d fd fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp+1]
  000f5	6a 00		 push	 0
  000f7	51		 push	 ecx
  000f8	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _szTemp$[ebp], 0
  000ff	e8 00 00 00 00	 call	 _memset

; 6577 : 	wsprintfA(szTemp, lMsg.Get(3481), lpMsg->ExtendedInvenCount);	//maybe 0, 0 in param +

  00104	0f b6 53 07	 movzx	 edx, BYTE PTR [ebx+7]
  00108	83 c4 20	 add	 esp, 32			; 00000020H
  0010b	52		 push	 edx
  0010c	68 99 0d 00 00	 push	 3481			; 00000d99H
  00111	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00116	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0011b	50		 push	 eax
  0011c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00122	50		 push	 eax
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 6578 : 	GCServerMsgStringSend(szTemp, aIndex, 1);	

  00129	6a 01		 push	 1
  0012b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  00131	56		 push	 esi
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00138	83 c4 18	 add	 esp, 24			; 00000018H
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx

; 6579 : }

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00141	33 cd		 xor	 ecx, ebp
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN1@DGUpdateEx:

; 6566 : 	{
; 6567 : 		LogAddTD("[Extended Storage][Inventory] Error Item Pos. User Name : %s. ItemPos : %d", lpObj->Name, lpMsg->ItemPos);

  0014c	50		 push	 eax
  0014d	83 c7 77	 add	 edi, 119		; 00000077H
  00150	57		 push	 edi
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@PCONLJDC@?$FLExtended?5Storage?$FN?$FLInventory?$FN?5Er@
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0015c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015f	5f		 pop	 edi
$LN7@DGUpdateEx:

; 6579 : }

  00160	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	5e		 pop	 esi
  00164	33 cd		 xor	 ecx, ebp
  00166	5b		 pop	 ebx
  00167	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
?DGUpdateExtendedInvenCountResult@@YAXPAUSDHP_ANS_SET_EXTENDEDINVEN_COUNT@@@Z ENDP ; DGUpdateExtendedInvenCountResult
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDUpdateExtendedWarehouseCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z ; GDUpdateExtendedWarehouseCount
; Function compile flags: /Ogtp
;	COMDAT ?GDUpdateExtendedWarehouseCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_btExtendedWarehouseCount$ = 12				; size = 1
_dwEventIndex$ = 16					; size = 4
_iItemPos$ = 20						; size = 4
_bBuyAtInGameShop$ = 24					; size = 1
_bIsReplace$ = 28					; size = 1
?GDUpdateExtendedWarehouseCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z PROC ; GDUpdateExtendedWarehouseCount, COMDAT

; 6584 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 6585 : #ifdef DEBUG_CODE
; 6586 : 
; 6587 : 	LogAddC(1,"ExpandedInventory: %d, ZtpandedWarehouse: %d",lpObj->ExpandedInventory,lpObj->ZtpandedWarehouse);
; 6588 : 
; 6589 : #endif
; 6590 : 	SDHP_REQ_SET_EXTENDEDWAREHOUSE_COUNT pMsg;
; 6591 : 	pMsg.h.set((LPBYTE)&pMsg, 0xD6, sizeof(pMsg));
; 6592 : 	// ----
; 6593 : 	memcpy(pMsg.AccountId, lpObj->AccountID, 11);

  00013	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00016	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00019	89 4d df	 mov	 DWORD PTR _pMsg$[ebp+3], ecx
  0001c	66 8b 48 74	 mov	 cx, WORD PTR [eax+116]
  00020	89 55 e3	 mov	 DWORD PTR _pMsg$[ebp+7], edx
  00023	0f b6 50 76	 movzx	 edx, BYTE PTR [eax+118]

; 6594 : 	pMsg.Number				= lpObj->m_Index;

  00027	66 8b 00	 mov	 ax, WORD PTR [eax]
  0002a	66 89 4d e7	 mov	 WORD PTR _pMsg$[ebp+11], cx

; 6595 : 	pMsg.ExtendedWarehouseCount = btExtendedWarehouseCount;

  0002e	8a 4d 0c	 mov	 cl, BYTE PTR _btExtendedWarehouseCount$[ebp]
  00031	66 89 45 ea	 mov	 WORD PTR _pMsg$[ebp+14], ax

; 6596 : 	pMsg.EventIndex			= dwEventIndex;
; 6597 : 	pMsg.ItemPos			= iItemPos;

  00035	8b 45 14	 mov	 eax, DWORD PTR _iItemPos$[ebp]
  00038	88 55 e9	 mov	 BYTE PTR _pMsg$[ebp+13], dl
  0003b	8b 55 10	 mov	 edx, DWORD PTR _dwEventIndex$[ebp]
  0003e	88 4d ec	 mov	 BYTE PTR _pMsg$[ebp+16], cl

; 6598 : 	pMsg.BuyAtInGameShop	= bBuyAtInGameShop;

  00041	8a 4d 18	 mov	 cl, BYTE PTR _bBuyAtInGameShop$[ebp]
  00044	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00047	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 6599 : 	pMsg.IsReplace			= bIsReplace;

  0004a	8a 55 1c	 mov	 dl, BYTE PTR _bIsReplace$[ebp]

; 6600 : 	// ----
; 6601 : 	cDBSMng.Send((char*)&pMsg, sizeof(pMsg));

  0004d	6a 20		 push	 32			; 00000020H
  0004f	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00052	88 4d f8	 mov	 BYTE PTR _pMsg$[ebp+28], cl
  00055	50		 push	 eax
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005b	66 c7 45 dc c1
	20		 mov	 WORD PTR _pMsg$[ebp], 8385 ; 000020c1H
  00061	c6 45 de d6	 mov	 BYTE PTR _pMsg$[ebp+2], 214 ; 000000d6H
  00065	88 55 f9	 mov	 BYTE PTR _pMsg$[ebp+29], dl
  00068	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 6602 : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?GDUpdateExtendedWarehouseCount@@YAXPAUOBJECTSTRUCT@@EKH_N1@Z ENDP ; GDUpdateExtendedWarehouseCount
_TEXT	ENDS
PUBLIC	??_C@_0EL@NLENBEMH@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Er@ ; `string'
PUBLIC	??_C@_0EF@OLJKBJLP@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Fa@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DGUpdateExtendedWarehouseResult@@YAXPAUSDHP_ANS_SET_EXTENDEDWAREHOUSE_COUNT@@@Z ; DGUpdateExtendedWarehouseResult
;	COMDAT ??_C@_0EL@NLENBEMH@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Er@
CONST	SEGMENT
??_C@_0EL@NLENBEMH@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Er@ DB '[E'
	DB	'xtended Storage][WareHouse] Error Item Pos. User Name : %s. I'
	DB	'temPos : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@OLJKBJLP@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Fa@
CONST	SEGMENT
??_C@_0EF@OLJKBJLP@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Fa@ DB '[E'
	DB	'xtended Storage][WareHouse] Fail to extend warehouse. User ID'
	DB	' : %s', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGUpdateExtendedWarehouseResult@@YAXPAUSDHP_ANS_SET_EXTENDEDWAREHOUSE_COUNT@@@Z
_TEXT	SEGMENT
_szTemp$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGUpdateExtendedWarehouseResult@@YAXPAUSDHP_ANS_SET_EXTENDEDWAREHOUSE_COUNT@@@Z PROC ; DGUpdateExtendedWarehouseResult, COMDAT

; 6607 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpMsg$[ebp]
  00017	56		 push	 esi

; 6608 : 	int aIndex = lpMsg->Number;

  00018	0f b7 73 04	 movzx	 esi, WORD PTR [ebx+4]

; 6609 : 	// ----
; 6610 : 	if( !gObjIsConnected(aIndex) )

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00022	83 c4 04	 add	 esp, 4
  00025	85 c0		 test	 eax, eax
  00027	0f 84 28 01 00
	00		 je	 $LN5@DGUpdateEx@2

; 6611 : 	{
; 6612 : 		return;
; 6613 : 	}
; 6614 : 	// ----
; 6615 : 	LPOBJ lpObj = &gObj[aIndex];

  0002d	57		 push	 edi
  0002e	8b fe		 mov	 edi, esi
  00030	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00036	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6616 : 	// ----
; 6617 : 	if( !lpMsg->Result )

  0003c	80 7b 06 00	 cmp	 BYTE PTR [ebx+6], 0
  00040	75 46		 jne	 SHORT $LN3@DGUpdateEx@2

; 6618 : 	{
; 6619 : 		//if( lpMsg->BuyAtInGameShop == 1 )
; 6620 : 		//		CCashShopInGame::RollBackUseItem(v8, lpMsg->EventIndex);
; 6621 : 		//	else
; 6622 : 		//		GCInventoryItemDeleteSend(v9, 0xFFu, 1u);
; 6623 : 			GCResultForExtendInvenOrWarehouse(aIndex, 0);

  00042	6a 00		 push	 0
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?GCResultForExtendInvenOrWarehouse@@YAXHE@Z ; GCResultForExtendInvenOrWarehouse

; 6624 : 			LogAddTD("[Extended Storage][WareHouse] Fail to extend warehouse. User ID : %s", lpObj->AccountID);

  0004a	83 c7 6c	 add	 edi, 108		; 0000006cH
  0004d	57		 push	 edi
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@OLJKBJLP@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Fa@
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00059	83 c4 10	 add	 esp, 16			; 00000010H

; 6625 : 			GCServerMsgStringSend(lMsg.Get(3483), aIndex, 1);

  0005c	6a 01		 push	 1
  0005e	56		 push	 esi
  0005f	68 9b 0d 00 00	 push	 3483			; 00000d9bH
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00069	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 6638 : 	{
; 6639 : 		LogAddTD("[Extended Storage][WareHouse] Error Item Pos. User Name : %s. ItemPos : %d", lpObj->Name, lpMsg->ItemPos);

  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 6651 : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN3@DGUpdateEx@2:

; 6626 : 			return;
; 6627 : 	}
; 6628 : 	// ----
; 6629 : 	lpObj->ZtpandedWarehouse = lpMsg->ExtendedWarehouseCount;

  00088	8a 43 07	 mov	 al, BYTE PTR [ebx+7]
  0008b	88 87 25 26 00
	00		 mov	 BYTE PTR [edi+9765], al

; 6630 : 	// ----
; 6631 : 	//if( lpMsg->BuyAtInGameShop == 1 )
; 6632 : 	//{
; 6633 : 	//	CCashShopInGame::SetActiveItemResult(v8, lpMsg->EventIndex);
; 6634 : 	//}
; 6635 : 	//else
; 6636 : 	//{
; 6637 : 	if( lpMsg->ItemPos > 203 || lpMsg->ItemPos < 0 )

  00091	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00094	3d cb 00 00 00	 cmp	 eax, 203		; 000000cbH
  00099	0f 8f a2 00 00
	00		 jg	 $LN1@DGUpdateEx@2
  0009f	85 c0		 test	 eax, eax
  000a1	0f 88 9a 00 00
	00		 js	 $LN1@DGUpdateEx@2

; 6640 : 		return;
; 6641 : 	}
; 6642 : 	// ----
; 6643 : 	gObjInventoryItemSet(aIndex, lpMsg->ItemPos, 0xFF);

  000a7	68 ff 00 00 00	 push	 255			; 000000ffH
  000ac	50		 push	 eax
  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 6644 : 	lpObj->pInventory[lpMsg->ItemPos].Clear();

  000b3	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  000b6	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  000bc	03 8f 24 0e 00
	00		 add	 ecx, DWORD PTR [edi+3620]
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c5	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 6645 : 	GCInventoryItemDeleteSend(aIndex, lpMsg->ItemPos, 1);

  000ca	0f b6 4b 0c	 movzx	 ecx, BYTE PTR [ebx+12]
  000ce	6a 01		 push	 1
  000d0	51		 push	 ecx
  000d1	56		 push	 esi
  000d2	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 6646 : 	GCResultForExtendInvenOrWarehouse(aIndex, 1);

  000d7	6a 01		 push	 1
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ?GCResultForExtendInvenOrWarehouse@@YAXHE@Z ; GCResultForExtendInvenOrWarehouse

; 6647 : 	// ----
; 6648 : 	char szTemp[0x100] = { 0 };

  000df	68 ff 00 00 00	 push	 255			; 000000ffH
  000e4	8d 95 fd fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$[ebp+1]
  000ea	6a 00		 push	 0
  000ec	52		 push	 edx
  000ed	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _szTemp$[ebp], 0
  000f4	e8 00 00 00 00	 call	 _memset

; 6649 : 	wsprintfA(szTemp, lMsg.Get(3482), lpMsg->ExtendedWarehouseCount);	//maybe 0, 0 in param +

  000f9	0f b6 43 07	 movzx	 eax, BYTE PTR [ebx+7]
  000fd	83 c4 20	 add	 esp, 32			; 00000020H
  00100	50		 push	 eax
  00101	68 9a 0d 00 00	 push	 3482			; 00000d9aH
  00106	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0010b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00110	50		 push	 eax
  00111	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  00117	51		 push	 ecx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 6650 : 	GCServerMsgStringSend(szTemp, aIndex, 1);	

  0011e	6a 01		 push	 1
  00120	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$[ebp]
  00126	56		 push	 esi
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0012d	83 c4 18	 add	 esp, 24			; 00000018H
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
  00132	5b		 pop	 ebx

; 6651 : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN1@DGUpdateEx@2:

; 6638 : 	{
; 6639 : 		LogAddTD("[Extended Storage][WareHouse] Error Item Pos. User Name : %s. ItemPos : %d", lpObj->Name, lpMsg->ItemPos);

  00141	50		 push	 eax
  00142	83 c7 77	 add	 edi, 119		; 00000077H
  00145	57		 push	 edi
  00146	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NLENBEMH@?$FLExtended?5Storage?$FN?$FLWareHouse?$FN?5Er@
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
  00154	5f		 pop	 edi
$LN5@DGUpdateEx@2:

; 6651 : }

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	5e		 pop	 esi
  00159	33 cd		 xor	 ecx, ebp
  0015b	5b		 pop	 ebx
  0015c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
?DGUpdateExtendedWarehouseResult@@YAXPAUSDHP_ANS_SET_EXTENDEDWAREHOUSE_COUNT@@@Z ENDP ; DGUpdateExtendedWarehouseResult
_TEXT	ENDS
PUBLIC	??_C@_0BG@GOHFOHON@?$FLWarehouse?$FN?$FL?$CFs?$FN?5Error?$AA@ ; `string'
PUBLIC	??_C@_0BF@NNJPEGMD@GDGetWarehouseNumber?$AA@	; `string'
PUBLIC	?GDGetWarehouseNumber@@YAXPAULOADWAREHOUSENUMBER_SAVE@@@Z ; GDGetWarehouseNumber
EXTRN	?WarehouseNumberSend@@YAXH@Z:PROC		; WarehouseNumberSend
;	COMDAT ??_C@_0BG@GOHFOHON@?$FLWarehouse?$FN?$FL?$CFs?$FN?5Error?$AA@
CONST	SEGMENT
??_C@_0BG@GOHFOHON@?$FLWarehouse?$FN?$FL?$CFs?$FN?5Error?$AA@ DB '[Wareho'
	DB	'use][%s] Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NNJPEGMD@GDGetWarehouseNumber?$AA@
CONST	SEGMENT
??_C@_0BF@NNJPEGMD@GDGetWarehouseNumber?$AA@ DB 'GDGetWarehouseNumber', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GDGetWarehouseNumber@@YAXPAULOADWAREHOUSENUMBER_SAVE@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?GDGetWarehouseNumber@@YAXPAULOADWAREHOUSENUMBER_SAVE@@@Z PROC ; GDGetWarehouseNumber, COMDAT

; 6656 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 6657 : 	if (!gObjIsConnected(aRecv->aIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _aRecv$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 18		 jne	 SHORT $LN1@GDGetWareh@3

; 6658 : 	{
; 6659 : 		LogAddC(2, "[Warehouse][%s] Error", __FUNCTION__);

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NNJPEGMD@GDGetWarehouseNumber?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GOHFOHON@?$FLWarehouse?$FN?$FL?$CFs?$FN?5Error?$AA@
  00021	6a 02		 push	 2
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	5e		 pop	 esi

; 6669 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN1@GDGetWareh@3:

; 6660 : 		return;
; 6661 : 	}
; 6662 : 
; 6663 : 	// ----
; 6664 : 	LPOBJ lpUser = &gObj[aRecv->aIndex];

  0002f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 6665 : 	// ----
; 6666 : 	lpUser->WarehouseNumber = aRecv->Number;

  00032	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00035	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6667 : 
; 6668 : 	WarehouseNumberSend(lpUser->m_Index);

  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	52		 push	 edx
  00044	89 88 e8 2a 00
	00		 mov	 DWORD PTR [eax+10984], ecx
  0004a	e8 00 00 00 00	 call	 ?WarehouseNumberSend@@YAXH@Z ; WarehouseNumberSend
  0004f	83 c4 04	 add	 esp, 4
  00052	5e		 pop	 esi

; 6669 : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?GDGetWarehouseNumber@@YAXPAULOADWAREHOUSENUMBER_SAVE@@@Z ENDP ; GDGetWarehouseNumber
_TEXT	ENDS
PUBLIC	??_C@_0GD@LBDNOPPJ@?$FLFRUIT?5System?$FN?5Character?5Stat?5Er@ ; `string'
PUBLIC	??_C@_0EO@MMCPKNFL@?$FLFRUIT?5System?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CIMinusPo@ ; `string'
PUBLIC	??_C@_0EB@KJANBCDD@?$FLMapServerMng?$FN?5Request?5to?5Move?5M@ ; `string'
PUBLIC	??_C@_0EM@ICCPKMCE@?$FLMapServerMng?$FN?5Map?5Server?5Move?5F@ ; `string'
PUBLIC	??_C@_0BB@LBNJKNBE@error?9L3?5?3?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CK@KKFLDHLB@?$DP?$KH?$LM?$DP?$KH?$LL?5ZEN?5MODIFY?5?$DP?$KH?$LL?$DP?$KH?$LM?5?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0FE@JOJGEKKO@?$FLAnti?9HACK?$FN?$FLJGGetCharacterInfo?$FN?5@ ; `string'
PUBLIC	??_C@_0CL@ECFCLMFK@error?9L1?5?3?5Load?5Block?5Character?5@ ; `string'
PUBLIC	_lpMsg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?JGGetCharacterInfo@@YAXPAUSDHP_DBCHAR_INFORESULT@@@Z ; JGGetCharacterInfo
EXTRN	?GCPlayerConnect@CDungeonSiege@@QAEXH@Z:PROC	; CDungeonSiege::GCPlayerConnect
EXTRN	?g_WaitOpen@@3_NA:BYTE				; g_WaitOpen
EXTRN	?SendClose@ConnectZt@@QAEXHH@Z:PROC		; ConnectZt::SendClose
EXTRN	?g_ConnectZt@@3VConnectZt@@A:QWORD		; g_ConnectZt
EXTRN	?CheckPremiumServer@PremiumSystem@@QAE_NH@Z:PROC ; PremiumSystem::CheckPremiumServer
EXTRN	?Premium@@3VPremiumSystem@@A:BYTE		; Premium
EXTRN	?ConnectPlayer@CItemMarket@@QAEXH@Z:PROC	; CItemMarket::ConnectPlayer
EXTRN	?g_ItemMarket@@3VCItemMarket@@A:BYTE		; g_ItemMarket
EXTRN	?UserConnect@PremiumSystemZt@@QAEXH@Z:PROC	; PremiumSystemZt::UserConnect
EXTRN	?g_PremiumSystemZt@@3VPremiumSystemZt@@A:BYTE	; g_PremiumSystemZt
EXTRN	?RestoreParty@PartyClass@@QAEXH@Z:PROC		; PartyClass::RestoreParty
EXTRN	?OpenMain@NewsBoard@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; NewsBoard::OpenMain
EXTRN	?g_NewsBoard@@3VNewsBoard@@A:BYTE		; g_NewsBoard
EXTRN	?ConnectAdmin@GMManager@@QAEXH@Z:PROC		; GMManager::ConnectAdmin
EXTRN	?g_GMManager@@3VGMManager@@A:BYTE		; g_GMManager
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?gWelcomeMessage@@3PADA:BYTE			; gWelcomeMessage
EXTRN	?SkillChangeUse@CObjUseSkill@@QAEHH@Z:PROC	; CObjUseSkill::SkillChangeUse
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
EXTRN	?GCMapEventStateSend@@YAXHEE@Z:PROC		; GCMapEventStateSend
EXTRN	?gAppearTamaJJang@@3HA:DWORD			; gAppearTamaJJang
EXTRN	?gTamaJJangEvent@@3HA:DWORD			; gTamaJJangEvent
EXTRN	?FriendListRequest@@YAXH@Z:PROC			; FriendListRequest
EXTRN	?GDLoad@CMarriage@@QAEXH@Z:PROC			; CMarriage::GDLoad
EXTRN	?g_Marriage@@3VCMarriage@@A:BYTE		; g_Marriage
EXTRN	?ReqMacro@MUHelper@@QAEXH@Z:PROC		; MUHelper::ReqMacro
EXTRN	?g_MUHelper@@3VMUHelper@@A:BYTE			; g_MUHelper
EXTRN	?ReqQuestInfo@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; cWinQuestSystem::ReqQuestInfo
EXTRN	?gWinQuestSystem@@3VcWinQuestSystem@@A:BYTE	; gWinQuestSystem
EXTRN	?ReqExDBGensInfo@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::ReqExDBGensInfo
EXTRN	?gGensSystem@@3VGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGENS@@3HA:DWORD				; gGENS
EXTRN	?DGGuildMemberInfoRequest@@YAXH@Z:PROC		; DGGuildMemberInfoRequest
EXTRN	?Quest3rdRequestInfo@CQuestUtil@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CQuestUtil::Quest3rdRequestInfo
EXTRN	?g_QuestUtil@@3VCQuestUtil@@A:DWORD		; g_QuestUtil
EXTRN	?CGRequestQuestInfo@@YAXH@Z:PROC		; CGRequestQuestInfo
EXTRN	?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::GDReqMasterLevelInfo
EXTRN	?GDReqLuckyItemSelect@LuckyItemManager@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; LuckyItemManager::GDReqLuckyItemSelect
EXTRN	?g_LuckyItemManager@@3ULuckyItemManager@@A:BYTE	; g_LuckyItemManager
EXTRN	?RequestPeriodItemInfo@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CPeriodItemZt::RequestPeriodItemInfo
EXTRN	?GCMagicListMultiSend@@YAXPAUOBJECTSTRUCT@@E@Z:PROC ; GCMagicListMultiSend
EXTRN	?QuestInfoSave@CQuestInfo@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CQuestInfo::QuestInfoSave
EXTRN	?g_QuestInfo@@3VCQuestInfo@@A:BYTE		; g_QuestInfo
EXTRN	?gObjGetStatPointState@@YAXHAAF000@Z:PROC	; gObjGetStatPointState
EXTRN	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter
EXTRN	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A:BYTE ; g_MasterLevelSystem
EXTRN	?GJReqMapSvrMove@@YAXHGGEE@Z:PROC		; GJReqMapSvrMove
EXTRN	?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z:PROC ; CMapServerManager::CheckMoveMapSvr
EXTRN	?MapNumberCheck@@YAHH@Z:PROC			; MapNumberCheck
EXTRN	?DestroyGIocp@@YAXXZ:PROC			; DestroyGIocp
EXTRN	?szAuthKey@@3PADA:BYTE				; szAuthKey
EXTRN	?gObjSetCharacter@@YAHPAEH@Z:PROC		; gObjSetCharacter
EXTRN	_strncmp:PROC
;	COMDAT ??_C@_0GD@LBDNOPPJ@?$FLFRUIT?5System?$FN?5Character?5Stat?5Er@
; File e:\work\tranet_version\gs\include\prodef.h
CONST	SEGMENT
??_C@_0GD@LBDNOPPJ@?$FLFRUIT?5System?$FN?5Character?5Stat?5Er@ DB '[FRUIT'
	DB	' System] Character Stat Error [%s][%s] (MinusPoint:%d/PlusPoi'
	DB	'nt:%d) (MaxMinus:%d/MaxPlus:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@MMCPKNFL@?$FLFRUIT?5System?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CIMinusPo@
CONST	SEGMENT
??_C@_0EO@MMCPKNFL@?$FLFRUIT?5System?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CIMinusPo@ DB '['
	DB	'FRUIT System] [%s][%s] (MinusPoint:%d/PlusPoint:%d) (MaxMinus'
	DB	':%d/MaxPlus:%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KJANBCDD@?$FLMapServerMng?$FN?5Request?5to?5Move?5M@
CONST	SEGMENT
??_C@_0EB@KJANBCDD@?$FLMapServerMng?$FN?5Request?5to?5Move?5M@ DB '[MapSe'
	DB	'rverMng] Request to Move Map Server : (%d) - [%s][%s] (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@ICCPKMCE@?$FLMapServerMng?$FN?5Map?5Server?5Move?5F@
CONST	SEGMENT
??_C@_0EM@ICCPKMCE@?$FLMapServerMng?$FN?5Map?5Server?5Move?5F@ DB '[MapSe'
	DB	'rverMng] Map Server Move Fail : CheckMoveMapSvr() == -1 [%s]['
	DB	'%s] (%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LBNJKNBE@error?9L3?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BB@LBNJKNBE@error?9L3?5?3?5?$CFs?5?$CFd?$AA@ DB 'error-L3 : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KKFLDHLB@?$DP?$KH?$LM?$DP?$KH?$LL?5ZEN?5MODIFY?5?$DP?$KH?$LL?$DP?$KH?$LM?5?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CK@KKFLDHLB@?$DP?$KH?$LM?$DP?$KH?$LL?5ZEN?5MODIFY?5?$DP?$KH?$LL?$DP?$KH?$LM?5?$FL?$CFs?$FN?$FL?$CFs@ DB '?'
	DB	0a7H, 0bcH, '?', 0a7H, 0bbH, ' ZEN MODIFY ?', 0a7H, 0bbH, '?', 0a7H
	DB	0bcH, ' [%s][%s] %d -> 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@JOJGEKKO@?$FLAnti?9HACK?$FN?$FLJGGetCharacterInfo?$FN?5@
CONST	SEGMENT
??_C@_0FE@JOJGEKKO@?$FLAnti?9HACK?$FN?$FLJGGetCharacterInfo?$FN?5@ DB '[A'
	DB	'nti-HACK][JGGetCharacterInfo] Attempted Character-Copy by dou'
	DB	'ble logging [%s][%s]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ECFCLMFK@error?9L1?5?3?5Load?5Block?5Character?5@
CONST	SEGMENT
??_C@_0CL@ECFCLMFK@error?9L1?5?3?5Load?5Block?5Character?5@ DB 'error-L1 '
	DB	': Load Block Character infomation', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dsprotocol.cpp
CONST	ENDS
;	COMDAT ?JGGetCharacterInfo@@YAXPAUSDHP_DBCHAR_INFORESULT@@@Z
_TEXT	SEGMENT
_aIndex$ = -184						; size = 4
_MaxAddPoint$ = -180					; size = 2
_AddPoint$ = -176					; size = 2
_pResult$ = -172					; size = 5
_MaxMinusPoint$ = -164					; size = 2
_MinusPoint$ = -160					; size = 2
tv1089 = -156						; size = 8
tv1077 = -156						; size = 8
tv1066 = -156						; size = 8
tv1056 = -156						; size = 8
tv1091 = -152						; size = 4
tv1080 = -152						; size = 4
tv1069 = -152						; size = 4
tv1058 = -152						; size = 4
_lpMsg$GSCopy$ = -152					; size = 4
tv1140 = -148						; size = 4
tv1138 = -148						; size = 4
tv1131 = -148						; size = 4
tv1129 = -148						; size = 4
tv1122 = -148						; size = 4
tv1120 = -148						; size = 4
tv1113 = -148						; size = 4
tv1111 = -148						; size = 4
tv1143 = -142						; size = 2
tv1134 = -142						; size = 2
tv1125 = -142						; size = 2
tv1116 = -142						; size = 2
tv1095 = -142						; size = 2
tv1084 = -142						; size = 2
tv1073 = -142						; size = 2
tv1061 = -142						; size = 2
_pjMsg$ = -140						; size = 112
_szAccountId$ = -28					; size = 11
_szName$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGGetCharacterInfo@@YAXPAUSDHP_DBCHAR_INFORESULT@@@Z PROC ; JGGetCharacterInfo, COMDAT

; 1593 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]

; 1594 : 	PMSG_CHARMAPJOINRESULT pjMsg;
; 1595 : 
; 1596 : 	char szAccountId[MAX_ACCOUNT_LEN+1];
; 1597 : 	char szName[MAX_ACCOUNT_LEN+1];
; 1598 : 	int aIndex = lpMsg->Number;
; 1599 : 
; 1600 : 	szAccountId[MAX_ACCOUNT_LEN] = 0;
; 1601 : 	memcpy(szAccountId, lpMsg->AccountID, sizeof(lpMsg->AccountID));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	0f bf 5f 06	 movsx	 ebx, WORD PTR [edi+6]
  0001f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00022	66 8b 57 10	 mov	 dx, WORD PTR [edi+16]
  00026	89 45 e4	 mov	 DWORD PTR _szAccountId$[ebp], eax

; 1602 : 
; 1603 : 	if ( gObjIsAccontConnect(aIndex, szAccountId) == FALSE )

  00029	8d 45 e4	 lea	 eax, DWORD PTR _szAccountId$[ebp]
  0002c	50		 push	 eax
  0002d	53		 push	 ebx
  0002e	89 bd 68 ff ff
	ff		 mov	 DWORD PTR _lpMsg$GSCopy$[ebp], edi
  00034	89 9d 48 ff ff
	ff		 mov	 DWORD PTR _aIndex$[ebp], ebx
  0003a	c6 45 ee 00	 mov	 BYTE PTR _szAccountId$[ebp+10], 0
  0003e	89 4d e8	 mov	 DWORD PTR _szAccountId$[ebp+4], ecx
  00041	66 89 55 ec	 mov	 WORD PTR _szAccountId$[ebp+8], dx
  00045	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0004a	83 c4 08	 add	 esp, 8
  0004d	85 c0		 test	 eax, eax
  0004f	75 35		 jne	 SHORT $LN31@JGGetChara

; 1604 : 	{
; 1605 : 		LogAddC(2, lMsg.Get(MSGGET(1, 170)), szAccountId);

  00051	8d 4d e4	 lea	 ecx, DWORD PTR _szAccountId$[ebp]
  00054	51		 push	 ecx
  00055	68 aa 01 00 00	 push	 426			; 000001aaH
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0005f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00064	50		 push	 eax
  00065	6a 02		 push	 2
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1606 : 		CloseClient(aIndex);

  0006d	53		 push	 ebx
  0006e	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00073	83 c4 10	 add	 esp, 16			; 00000010H
  00076	5f		 pop	 edi
  00077	5b		 pop	 ebx

; 1951 : }

  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN31@JGGetChara:

; 1607 : 		return;
; 1608 : 	}
; 1609 : 
; 1610 : 	szName[MAX_ACCOUNT_LEN] = 0;
; 1611 : 	memcpy(szName, lpMsg->Name, MAX_ACCOUNT_LEN);
; 1612 : 
; 1613 : 	if ( lpMsg->result == false )

  00086	80 7f 04 00	 cmp	 BYTE PTR [edi+4], 0
  0008a	8b 57 12	 mov	 edx, DWORD PTR [edi+18]
  0008d	8b 47 16	 mov	 eax, DWORD PTR [edi+22]
  00090	66 8b 4f 1a	 mov	 cx, WORD PTR [edi+26]
  00094	c6 45 fa 00	 mov	 BYTE PTR _szName$[ebp+10], 0
  00098	89 55 f0	 mov	 DWORD PTR _szName$[ebp], edx
  0009b	89 45 f4	 mov	 DWORD PTR _szName$[ebp+4], eax
  0009e	66 89 4d f8	 mov	 WORD PTR _szName$[ebp+8], cx
  000a2	75 47		 jne	 SHORT $LN30@JGGetChara

; 1614 : 	{
; 1615 : 		LogAddC(2, lMsg.Get(MSGGET(1, 171)), szName, gObj[aIndex].AccountID);

  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a9	8b d3		 mov	 edx, ebx
  000ab	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000b1	8d 4c 02 6c	 lea	 ecx, DWORD PTR [edx+eax+108]
  000b5	51		 push	 ecx
  000b6	8d 55 f0	 lea	 edx, DWORD PTR _szName$[ebp]
  000b9	52		 push	 edx
  000ba	68 ab 01 00 00	 push	 427			; 000001abH
  000bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000c4	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000c9	50		 push	 eax
$LN41@JGGetChara:
  000ca	6a 02		 push	 2
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1616 : 		CloseClient(aIndex);

  000d2	53		 push	 ebx
  000d3	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  000d8	83 c4 14	 add	 esp, 20			; 00000014H
  000db	5f		 pop	 edi
  000dc	5b		 pop	 ebx

; 1951 : }

  000dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e0	33 cd		 xor	 ecx, ebp
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
$LN30@JGGetChara:

; 1617 : 		return;
; 1618 : 	}
; 1619 : 
; 1620 : 	if ( (lpMsg->CtlCode&1) != 0 )

  000eb	f6 87 d4 10 00
	00 01		 test	 BYTE PTR [edi+4308], 1
  000f2	74 1e		 je	 SHORT $LN29@JGGetChara

; 1621 : 	{
; 1622 : 		LogAddC(2, "error-L1 : Load Block Character infomation", szName, gObj[aIndex].AccountID);

  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fa	8b c3		 mov	 eax, ebx
  000fc	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00102	8d 54 08 6c	 lea	 edx, DWORD PTR [eax+ecx+108]
  00106	52		 push	 edx
  00107	8d 45 f0	 lea	 eax, DWORD PTR _szName$[ebp]
  0010a	50		 push	 eax
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@ECFCLMFK@error?9L1?5?3?5Load?5Block?5Character?5@

; 1623 : 		CloseClient(aIndex);
; 1624 : 		return;

  00110	eb b8		 jmp	 SHORT $LN41@JGGetChara
$LN29@JGGetChara:

; 1625 : 	}
; 1626 : 
; 1627 : 	for (int i=OBJ_STARTUSERINDZT;i<OBJMAX;i++)

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00117	56		 push	 esi
  00118	be 00 a7 40 09	 mov	 esi, 155232000		; 0940a700H
  0011d	8d 49 00	 npad	 3
$LL28@JGGetChara:

; 1628 : 	{
; 1629 : 		if ( gObj[i].Connected == PLAYER_PLAYING )

  00120	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00125	75 40		 jne	 SHORT $LN27@JGGetChara

; 1630 : 		{
; 1631 : 			if ( gObj[i].Type == OBJ_USER )

  00127	66 83 7c 06 68
	01		 cmp	 WORD PTR [esi+eax+104], 1
  0012d	75 38		 jne	 SHORT $LN27@JGGetChara

; 1632 : 			{
; 1633 : 				if ( !strncmp(szName, gObj[i].Name, MAX_ACCOUNT_LEN) || !strncmp(szAccountId, gObj[i].AccountID, MAX_ACCOUNT_LEN))

  0012f	6a 0a		 push	 10			; 0000000aH
  00131	8d 4c 06 77	 lea	 ecx, DWORD PTR [esi+eax+119]
  00135	51		 push	 ecx
  00136	8d 55 f0	 lea	 edx, DWORD PTR _szName$[ebp]
  00139	52		 push	 edx
  0013a	e8 00 00 00 00	 call	 _strncmp
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	85 c0		 test	 eax, eax
  00144	74 73		 je	 SHORT $LN22@JGGetChara
  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014b	6a 0a		 push	 10			; 0000000aH
  0014d	8d 4c 06 6c	 lea	 ecx, DWORD PTR [esi+eax+108]
  00151	51		 push	 ecx
  00152	8d 55 e4	 lea	 edx, DWORD PTR _szAccountId$[ebp]
  00155	52		 push	 edx
  00156	e8 00 00 00 00	 call	 _strncmp
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015e	85 c0		 test	 eax, eax
  00160	74 57		 je	 SHORT $LN22@JGGetChara
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN27@JGGetChara:

; 1625 : 	}
; 1626 : 
; 1627 : 	for (int i=OBJ_STARTUSERINDZT;i<OBJMAX;i++)

  00167	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  0016d	81 fe 80 d7 e9
	09		 cmp	 esi, 166320000		; 09e9d780H
  00173	7c ab		 jl	 SHORT $LL28@JGGetChara

; 1637 : 					return;
; 1638 : 				}
; 1639 : 			}
; 1640 : 		}
; 1641 : 	}
; 1642 : 
; 1643 : 	if ( gObjSetCharacter( (LPBYTE)lpMsg, aIndex) == FALSE )

  00175	53		 push	 ebx
  00176	57		 push	 edi
  00177	e8 00 00 00 00	 call	 ?gObjSetCharacter@@YAHPAEH@Z ; gObjSetCharacter
  0017c	83 c4 08	 add	 esp, 8
  0017f	85 c0		 test	 eax, eax
  00181	75 72		 jne	 SHORT $LN21@JGGetChara

; 1644 : 	{
; 1645 : 		LogAddC(2, lMsg.Get(MSGGET(1, 172)), szName);

  00183	8d 4d f0	 lea	 ecx, DWORD PTR _szName$[ebp]
  00186	51		 push	 ecx
  00187	68 ac 01 00 00	 push	 428			; 000001acH
  0018c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00191	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00196	50		 push	 eax
  00197	6a 02		 push	 2
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1646 : 		CloseClient(aIndex);

  0019f	53		 push	 ebx
  001a0	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  001a5	83 c4 10	 add	 esp, 16			; 00000010H
  001a8	5e		 pop	 esi
  001a9	5f		 pop	 edi
  001aa	5b		 pop	 ebx

; 1951 : }

  001ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ae	33 cd		 xor	 ecx, ebp
  001b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
$LN22@JGGetChara:

; 1634 : 				{
; 1635 : 					LogAddTD("[Anti-HACK][JGGetCharacterInfo] Attempted Character-Copy by double logging [%s][%s]",	szName, gObj[aIndex].AccountID);

  001b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001bf	8b c3		 mov	 eax, ebx
  001c1	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  001c7	8d 54 08 6c	 lea	 edx, DWORD PTR [eax+ecx+108]
  001cb	52		 push	 edx
  001cc	8d 45 f0	 lea	 eax, DWORD PTR _szName$[ebp]
  001cf	50		 push	 eax
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@JOJGEKKO@?$FLAnti?9HACK?$FN?$FLJGGetCharacterInfo?$FN?5@
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1636 : 					CloseClient(aIndex);

  001db	53		 push	 ebx
  001dc	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  001e1	83 c4 10	 add	 esp, 16			; 00000010H
  001e4	5e		 pop	 esi
  001e5	5f		 pop	 edi
  001e6	5b		 pop	 ebx

; 1951 : }

  001e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c3		 ret	 0
$LN21@JGGetChara:

; 1647 : 		return;
; 1648 : 	}
; 1649 : 
; 1650 : 	gObj[aIndex].iShield = gObj[aIndex].iMaxShield + gObj[aIndex].iAddShield;

  001f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fa	8b f3		 mov	 esi, ebx
  001fc	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00202	8b 94 06 5c 01
	00 00		 mov	 edx, DWORD PTR [esi+eax+348]
  00209	03 94 06 58 01
	00 00		 add	 edx, DWORD PTR [esi+eax+344]
  00210	89 94 06 54 01
	00 00		 mov	 DWORD PTR [esi+eax+340], edx

; 1651 : 
; 1652 : 	if ( szAuthKey[0] != AUTHKEY0 )

  00217	80 3d 00 00 00
	00 29		 cmp	 BYTE PTR ?szAuthKey@@3PADA, 41 ; 00000029H
  0021e	74 05		 je	 SHORT $LN20@JGGetChara

; 1653 : 	{
; 1654 : 		DestroyGIocp();

  00220	e8 00 00 00 00	 call	 ?DestroyGIocp@@YAXXZ	; DestroyGIocp
$LN20@JGGetChara:

; 1655 : 	}
; 1656 : 
; 1657 : 	LPOBJ lpObj = &gObj[aIndex];

  00225	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1658 : 
; 1659 : 	if ( gObj[aIndex].m_Index != aIndex )

  0022b	39 1e		 cmp	 DWORD PTR [esi], ebx
  0022d	74 3c		 je	 SHORT $LN19@JGGetChara

; 1660 : 	{
; 1661 : 		LogAddC(2, lMsg.Get(MSGGET(1, 173)), __FILE__, __LINE__);

  0022f	68 7d 06 00 00	 push	 1661			; 0000067dH
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@
  00239	68 ad 01 00 00	 push	 429			; 000001adH
  0023e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00243	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00248	50		 push	 eax
  00249	6a 02		 push	 2
  0024b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1662 : 		CloseClient(aIndex);

  00251	53		 push	 ebx
  00252	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00257	83 c4 14	 add	 esp, 20			; 00000014H
  0025a	5e		 pop	 esi
  0025b	5f		 pop	 edi
  0025c	5b		 pop	 ebx

; 1951 : }

  0025d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00260	33 cd		 xor	 ecx, ebp
  00262	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00267	8b e5		 mov	 esp, ebp
  00269	5d		 pop	 ebp
  0026a	c3		 ret	 0
$LN19@JGGetChara:

; 1663 : 		return;
; 1664 : 	}
; 1665 : 
; 1666 : 	if ( lpObj->Money < 0 )

  0026b	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00271	85 c0		 test	 eax, eax
  00273	79 23		 jns	 SHORT $LN38@JGGetChara

; 1667 : 	{
; 1668 : 		LogAddC(2, "ЎЪЎЩ ZEN MODIFY ЎЩЎЪ [%s][%s] %d -> 0", szName, gObj[aIndex].AccountID, lpObj->Money);

  00275	50		 push	 eax
  00276	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00279	51		 push	 ecx
  0027a	8d 55 f0	 lea	 edx, DWORD PTR _szName$[ebp]
  0027d	52		 push	 edx
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KKFLDHLB@?$DP?$KH?$LM?$DP?$KH?$LL?5ZEN?5MODIFY?5?$DP?$KH?$LL?$DP?$KH?$LM?5?$FL?$CFs?$FN?$FL?$CFs@
  00283	6a 02		 push	 2
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0028b	83 c4 14	 add	 esp, 20			; 00000014H

; 1669 : 		lpObj->Money = 0;

  0028e	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], 0
$LN38@JGGetChara:

; 1670 : 	}
; 1671 : 
; 1672 : 	if ( lpObj->m_bMapSvrMoveReq == false )

  00298	80 be e5 1b 00
	00 00		 cmp	 BYTE PTR [esi+7141], 0
  0029f	0f 85 f7 00 00
	00		 jne	 $LN39@JGGetChara

; 1673 : 	{
; 1674 : 		if ( MapNumberCheck(lpObj->MapNumber) == FALSE )

  002a5	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 ?MapNumberCheck@@YAHH@Z	; MapNumberCheck
  002b2	83 c4 04	 add	 esp, 4
  002b5	85 c0		 test	 eax, eax
  002b7	75 2f		 jne	 SHORT $LN16@JGGetChara

; 1675 : 		{
; 1676 : 			LogAdd("error-L3 : %s %d", __FILE__, __LINE__);

  002b9	68 8c 06 00 00	 push	 1676			; 0000068cH
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@
  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LBNJKNBE@error?9L3?5?3?5?$CFs?5?$CFd?$AA@
  002c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1677 : 			CloseClient(aIndex);

  002ce	53		 push	 ebx
  002cf	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  002d4	83 c4 10	 add	 esp, 16			; 00000010H
  002d7	5e		 pop	 esi
  002d8	5f		 pop	 edi
  002d9	5b		 pop	 ebx

; 1951 : }

  002da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002dd	33 cd		 xor	 ecx, ebp
  002df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e4	8b e5		 mov	 esp, ebp
  002e6	5d		 pop	 ebp
  002e7	c3		 ret	 0
$LN16@JGGetChara:

; 1678 : 
; 1679 : 			return;
; 1680 : 		}
; 1681 : 
; 1682 : 		short wGameServerCode = g_MapServerManager.CheckMoveMapSvr(lpObj->m_Index, lpObj->MapNumber, lpObj->m_sPrevMapSvrCode);

  002e8	0f b7 8e ec 1b
	00 00		 movzx	 ecx, WORD PTR [esi+7148]
  002ef	0f b6 96 49 01
	00 00		 movzx	 edx, BYTE PTR [esi+329]
  002f6	8b 06		 mov	 eax, DWORD PTR [esi]
  002f8	51		 push	 ecx
  002f9	52		 push	 edx
  002fa	50		 push	 eax
  002fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  00300	e8 00 00 00 00	 call	 ?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z ; CMapServerManager::CheckMoveMapSvr
  00305	0f b7 f8	 movzx	 edi, ax

; 1683 : 
; 1684 : 		if ( wGameServerCode != gGameServerCode )

  00308	66 3b 3d 00 00
	00 00		 cmp	 di, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  0030f	0f 84 87 00 00
	00		 je	 $LN39@JGGetChara

; 1685 : 		{
; 1686 : 			if ( wGameServerCode == -1 )

  00315	66 83 ff ff	 cmp	 di, -1
  00319	75 32		 jne	 SHORT $LN14@JGGetChara

; 1687 : 			{
; 1688 : 				LogAddC(2,"[MapServerMng] Map Server Move Fail : CheckMoveMapSvr() == -1 [%s][%s] (%d)", lpObj->AccountID, lpObj->Name, lpObj->m_Index);

  0031b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0031d	51		 push	 ecx
  0031e	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  00321	52		 push	 edx
  00322	83 c6 6c	 add	 esi, 108		; 0000006cH
  00325	56		 push	 esi
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@ICCPKMCE@?$FLMapServerMng?$FN?5Map?5Server?5Move?5F@
  0032b	6a 02		 push	 2
  0032d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1689 : 				CloseClient(aIndex);

  00333	53		 push	 ebx
  00334	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00339	83 c4 18	 add	 esp, 24			; 00000018H
  0033c	5e		 pop	 esi
  0033d	5f		 pop	 edi
  0033e	5b		 pop	 ebx

; 1951 : }

  0033f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00342	33 cd		 xor	 ecx, ebp
  00344	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00349	8b e5		 mov	 esp, ebp
  0034b	5d		 pop	 ebp
  0034c	c3		 ret	 0
$LN14@JGGetChara:

; 1690 : 				return;
; 1691 : 			}
; 1692 : 
; 1693 : 			GJReqMapSvrMove(lpObj->m_Index, wGameServerCode, lpObj->MapNumber, lpObj->X, lpObj->Y);

  0034d	0f b6 86 46 01
	00 00		 movzx	 eax, BYTE PTR [esi+326]
  00354	0f b6 8e 44 01
	00 00		 movzx	 ecx, BYTE PTR [esi+324]
  0035b	50		 push	 eax
  0035c	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  00363	51		 push	 ecx
  00364	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00366	50		 push	 eax
  00367	57		 push	 edi
  00368	51		 push	 ecx
  00369	e8 00 00 00 00	 call	 ?GJReqMapSvrMove@@YAXHGGEE@Z ; GJReqMapSvrMove

; 1694 : 			LogAddTD("[MapServerMng] Request to Move Map Server : (%d) - [%s][%s] (%d)", wGameServerCode, lpObj->AccountID, lpObj->Name, lpObj->m_Index);

  0036e	8b 16		 mov	 edx, DWORD PTR [esi]
  00370	52		 push	 edx
  00371	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  00374	50		 push	 eax
  00375	0f bf cf	 movsx	 ecx, di
  00378	83 c6 6c	 add	 esi, 108		; 0000006cH
  0037b	56		 push	 esi
  0037c	51		 push	 ecx
  0037d	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KJANBCDD@?$FLMapServerMng?$FN?5Request?5to?5Move?5M@
  00382	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00388	83 c4 28	 add	 esp, 40			; 00000028H
  0038b	5e		 pop	 esi
  0038c	5f		 pop	 edi
  0038d	5b		 pop	 ebx

; 1951 : }

  0038e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00391	33 cd		 xor	 ecx, ebp
  00393	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00398	8b e5		 mov	 esp, ebp
  0039a	5d		 pop	 ebp
  0039b	c3		 ret	 0
$LN39@JGGetChara:

; 1695 : 			return;
; 1696 : 		}
; 1697 : 	}
; 1698 : 
; 1699 : 	lpObj->m_bMapSvrMoveReq = false;

  0039c	c6 86 e5 1b 00
	00 00		 mov	 BYTE PTR [esi+7141], 0

; 1700 : 
; 1701 : 	pjMsg.h.c = 0xC3;

  003a3	c6 85 74 ff ff
	ff c3		 mov	 BYTE PTR _pjMsg$[ebp], 195 ; 000000c3H

; 1702 : 	pjMsg.h.headcode = 0xF3;

  003aa	66 c7 85 75 ff
	ff ff 70 f3	 mov	 WORD PTR _pjMsg$[ebp+1], 62320 ; 0000f370H

; 1703 : 	pjMsg.h.size = sizeof(PMSG_CHARMAPJOINRESULT); //0x44
; 1704 : 	pjMsg.subcode = 0x03;

  003b3	c6 85 77 ff ff
	ff 03		 mov	 BYTE PTR _pjMsg$[ebp+3], 3

; 1705 : 
; 1706 : 	pjMsg.MapX = lpObj->X; //124

  003ba	0f b6 96 44 01
	00 00		 movzx	 edx, BYTE PTR [esi+324]
  003c1	88 95 78 ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+4], dl

; 1707 : 	pjMsg.MapY = lpObj->Y; //126

  003c7	8a 86 46 01 00
	00		 mov	 al, BYTE PTR [esi+326]
  003cd	88 85 79 ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+5], al

; 1708 : 	pjMsg.MapNumber = lpObj->MapNumber; //129

  003d3	8a 8e 49 01 00
	00		 mov	 cl, BYTE PTR [esi+329]
  003d9	88 8d 7a ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+6], cl

; 1709 : 	pjMsg.Dir = lpObj->Dir; //128

  003df	0f b6 96 48 01
	00 00		 movzx	 edx, BYTE PTR [esi+328]
  003e6	88 95 7b ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+7], dl

; 1710 : 
; 1711 : 	__int64 Experience = lpObj->Experience; //0AC

  003ec	8b 9e c8 00 00
	00		 mov	 ebx, DWORD PTR [esi+200]

; 1712 : 
; 1713 : 	if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpObj) != FALSE) //Set ML Exp Info

  003f2	56		 push	 esi
  003f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  003f8	33 ff		 xor	 edi, edi
  003fa	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  003ff	85 c0		 test	 eax, eax
  00401	74 0c		 je	 SHORT $LN13@JGGetChara

; 1714 : 	{
; 1715 : 		Experience = lpObj->MLExp;

  00403	8b 9e d8 00 00
	00		 mov	 ebx, DWORD PTR [esi+216]
  00409	8b be dc 00 00
	00		 mov	 edi, DWORD PTR [esi+220]
$LN13@JGGetChara:

; 1716 : 	}
; 1717 : 
; 1718 : 	pjMsg.ExpHHH = SET_NUMBERH(SET_NUMBERHW(HIDWORD(Experience)));

  0040f	8b c7		 mov	 eax, edi
  00411	8b cf		 mov	 ecx, edi
  00413	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00416	8b c8		 mov	 ecx, eax
  00418	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0041b	8b d1		 mov	 edx, ecx

; 1719 : 	pjMsg.ExpHHL = SET_NUMBERL(SET_NUMBERHW(HIDWORD(Experience)));

  0041d	88 8d 7d ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+9], cl

; 1720 : 	pjMsg.ExpHLH = SET_NUMBERH(SET_NUMBERLW(HIDWORD(Experience)));

  00423	8b c8		 mov	 ecx, eax

; 1721 : 	pjMsg.ExpHLL = SET_NUMBERL(SET_NUMBERLW(HIDWORD(Experience)));

  00425	88 85 7f ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+11], al
  0042b	c1 ea 08	 shr	 edx, 8

; 1722 : 	pjMsg.ExpLHH = SET_NUMBERH(SET_NUMBERHW(LODWORD(Experience)));

  0042e	8b c3		 mov	 eax, ebx
  00430	c1 e8 10	 shr	 eax, 16			; 00000010H
  00433	88 95 7c ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+8], dl
  00439	8b d0		 mov	 edx, eax

; 1723 : 	pjMsg.ExpLHL = SET_NUMBERL(SET_NUMBERHW(LODWORD(Experience)));

  0043b	88 45 81	 mov	 BYTE PTR _pjMsg$[ebp+13], al
  0043e	c1 e9 08	 shr	 ecx, 8

; 1724 : 	pjMsg.ExpLLH = SET_NUMBERH(SET_NUMBERLW(LODWORD(Experience)));

  00441	8b c3		 mov	 eax, ebx
  00443	88 8d 7e ff ff
	ff		 mov	 BYTE PTR _pjMsg$[ebp+10], cl
  00449	c1 ea 08	 shr	 edx, 8
  0044c	c1 e8 08	 shr	 eax, 8
  0044f	88 55 80	 mov	 BYTE PTR _pjMsg$[ebp+12], dl
  00452	88 45 82	 mov	 BYTE PTR _pjMsg$[ebp+14], al

; 1725 : 	pjMsg.ExpLLL = SET_NUMBERL(SET_NUMBERLW(LODWORD(Experience)));

  00455	88 5d 83	 mov	 BYTE PTR _pjMsg$[ebp+15], bl

; 1726 : 
; 1727 : 	__int64 NextExperience = lpObj->NextExp;

  00458	8b 9e cc 00 00
	00		 mov	 ebx, DWORD PTR [esi+204]

; 1728 : 
; 1729 : 	if(g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpObj) != FALSE) //Set ML NextExp Info

  0045e	56		 push	 esi
  0045f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  00464	33 ff		 xor	 edi, edi
  00466	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  0046b	85 c0		 test	 eax, eax
  0046d	74 0c		 je	 SHORT $LN12@JGGetChara

; 1730 : 	{
; 1731 : 		NextExperience = lpObj->MLNextExp;

  0046f	8b 9e e0 00 00
	00		 mov	 ebx, DWORD PTR [esi+224]
  00475	8b be e4 00 00
	00		 mov	 edi, DWORD PTR [esi+228]
$LN12@JGGetChara:

; 1732 : 	}
; 1733 : 
; 1734 : 	pjMsg.NextExpHHH = SET_NUMBERH(SET_NUMBERHW(HIDWORD(NextExperience)));

  0047b	8b c7		 mov	 eax, edi

; 1735 : 	pjMsg.NextExpHHL = SET_NUMBERL(SET_NUMBERHW(HIDWORD(NextExperience)));
; 1736 : 	pjMsg.NextExpHLH = SET_NUMBERH(SET_NUMBERLW(HIDWORD(NextExperience)));
; 1737 : 	pjMsg.NextExpHLL = SET_NUMBERL(SET_NUMBERLW(HIDWORD(NextExperience)));
; 1738 : 	pjMsg.NextExpLHH = SET_NUMBERH(SET_NUMBERHW(LODWORD(NextExperience)));
; 1739 : 	pjMsg.NextExpLHL = SET_NUMBERL(SET_NUMBERHW(LODWORD(NextExperience)));
; 1740 : 	pjMsg.NextExpLLH = SET_NUMBERH(SET_NUMBERLW(LODWORD(NextExperience)));
; 1741 : 	pjMsg.NextExpLLL = SET_NUMBERL(SET_NUMBERLW(LODWORD(NextExperience)));
; 1742 : 
; 1743 : 	pjMsg.LevelUpPoint = lpObj->LevelUpPoint;
; 1744 : 	pjMsg.Str = lpObj->Strength;
; 1745 : 	pjMsg.Dex = lpObj->Dexterity;
; 1746 : 	pjMsg.Vit = lpObj->Vitality;
; 1747 : 	pjMsg.Energy = lpObj->Energy;
; 1748 : 	pjMsg.Money = lpObj->Money;
; 1749 : 	pjMsg.PkLevel = lpObj->m_PK_Level;
; 1750 : 	pjMsg.Life = (WORD)lpObj->Life;

  0047d	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1143[ebp]
  00483	88 45 87	 mov	 BYTE PTR _pjMsg$[ebp+19], al
  00486	8b cf		 mov	 ecx, edi
  00488	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0048b	8b c8		 mov	 ecx, eax
  0048d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00490	88 4d 85	 mov	 BYTE PTR _pjMsg$[ebp+17], cl
  00493	8b d1		 mov	 edx, ecx
  00495	8b c8		 mov	 ecx, eax
  00497	c1 ea 08	 shr	 edx, 8
  0049a	88 55 84	 mov	 BYTE PTR _pjMsg$[ebp+16], dl
  0049d	88 5d 8b	 mov	 BYTE PTR _pjMsg$[ebp+23], bl
  004a0	8b c3		 mov	 eax, ebx
  004a2	c1 e8 10	 shr	 eax, 16			; 00000010H
  004a5	88 45 89	 mov	 BYTE PTR _pjMsg$[ebp+21], al
  004a8	8b d0		 mov	 edx, eax
  004aa	c1 e9 08	 shr	 ecx, 8
  004ad	88 4d 86	 mov	 BYTE PTR _pjMsg$[ebp+18], cl
  004b0	c1 ea 08	 shr	 edx, 8
  004b3	88 55 88	 mov	 BYTE PTR _pjMsg$[ebp+20], dl
  004b6	8b c3		 mov	 eax, ebx
  004b8	c1 e8 08	 shr	 eax, 8
  004bb	88 45 8a	 mov	 BYTE PTR _pjMsg$[ebp+22], al
  004be	0f b7 8e c0 00
	00 00		 movzx	 ecx, WORD PTR [esi+192]
  004c5	66 89 4d 8c	 mov	 WORD PTR _pjMsg$[ebp+24], cx
  004c9	0f b7 96 f4 00
	00 00		 movzx	 edx, WORD PTR [esi+244]
  004d0	66 89 55 8e	 mov	 WORD PTR _pjMsg$[ebp+26], dx
  004d4	0f b7 86 f6 00
	00 00		 movzx	 eax, WORD PTR [esi+246]
  004db	66 89 45 90	 mov	 WORD PTR _pjMsg$[ebp+28], ax
  004df	0f b7 8e f8 00
	00 00		 movzx	 ecx, WORD PTR [esi+248]
  004e6	66 89 4d 92	 mov	 WORD PTR _pjMsg$[ebp+30], cx
  004ea	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  004f1	66 89 55 94	 mov	 WORD PTR _pjMsg$[ebp+32], dx
  004f5	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  004fb	89 45 a8	 mov	 DWORD PTR _pjMsg$[ebp+52], eax
  004fe	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1143[ebp]
  00505	8a 8e 3d 01 00
	00		 mov	 cl, BYTE PTR [esi+317]
  0050b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00510	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv1140[ebp], eax
  00516	88 4d ac	 mov	 BYTE PTR _pjMsg$[ebp+56], cl
  00519	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0051f	d9 ad 6c ff ff
	ff		 fldcw	 WORD PTR tv1140[ebp]
  00525	db 9d 6c ff ff
	ff		 fistp	 DWORD PTR tv1138[ebp]
  0052b	0f b7 95 6c ff
	ff ff		 movzx	 edx, WORD PTR tv1138[ebp]
  00532	66 89 55 96	 mov	 WORD PTR _pjMsg$[ebp+34], dx
  00536	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1143[ebp]

; 1751 : 	pjMsg.MaxLife = (WORD)(lpObj->AddLife + lpObj->MaxLife);

  0053c	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00542	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1134[ebp]
  00548	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  0054e	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1134[ebp]
  00555	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0055a	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv1131[ebp], eax
  00560	d9 ad 6c ff ff
	ff		 fldcw	 WORD PTR tv1131[ebp]
  00566	db 9d 6c ff ff
	ff		 fistp	 DWORD PTR tv1129[ebp]
  0056c	0f b7 85 6c ff
	ff ff		 movzx	 eax, WORD PTR tv1129[ebp]
  00573	66 89 45 98	 mov	 WORD PTR _pjMsg$[ebp+36], ax
  00577	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1134[ebp]

; 1752 : 	pjMsg.Mana = (WORD)lpObj->Mana;

  0057d	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  00583	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1125[ebp]
  00589	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1125[ebp]
  00590	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00595	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv1122[ebp], eax
  0059b	d9 ad 6c ff ff
	ff		 fldcw	 WORD PTR tv1122[ebp]
  005a1	db 9d 6c ff ff
	ff		 fistp	 DWORD PTR tv1120[ebp]
  005a7	0f b7 8d 6c ff
	ff ff		 movzx	 ecx, WORD PTR tv1120[ebp]
  005ae	66 89 4d 9a	 mov	 WORD PTR _pjMsg$[ebp+38], cx
  005b2	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1125[ebp]

; 1753 : 	pjMsg.MaxMana = (WORD)(lpObj->AddMana + lpObj->MaxMana);

  005b8	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  005be	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1116[ebp]
  005c4	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  005ca	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1116[ebp]
  005d1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005d6	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv1113[ebp], eax
  005dc	d9 ad 6c ff ff
	ff		 fldcw	 WORD PTR tv1113[ebp]
  005e2	db 9d 6c ff ff
	ff		 fistp	 DWORD PTR tv1111[ebp]
  005e8	0f b7 95 6c ff
	ff ff		 movzx	 edx, WORD PTR tv1111[ebp]
  005ef	66 89 55 9c	 mov	 WORD PTR _pjMsg$[ebp+40], dx

; 1754 : 	pjMsg.wShield = lpObj->iShield;

  005f3	0f b7 86 54 01
	00 00		 movzx	 eax, WORD PTR [esi+340]
  005fa	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1116[ebp]
  00600	66 89 45 9e	 mov	 WORD PTR _pjMsg$[ebp+42], ax

; 1755 : 	pjMsg.wMaxShield = lpObj->iMaxShield + lpObj->iAddShield;

  00604	0f b7 8e 58 01
	00 00		 movzx	 ecx, WORD PTR [esi+344]
  0060b	66 03 8e 5c 01
	00 00		 add	 cx, WORD PTR [esi+348]

; 1756 : 	pjMsg.CtlCode = lpMsg->CtlCode;

  00612	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _lpMsg$GSCopy$[ebp]
  00618	8a 82 d4 10 00
	00		 mov	 al, BYTE PTR [edx+4308]
  0061e	88 45 ad	 mov	 BYTE PTR _pjMsg$[ebp+57], al
  00621	66 89 4d a0	 mov	 WORD PTR _pjMsg$[ebp+44], cx

; 1757 : 	pjMsg.BP = lpObj->BP;

  00625	0f b7 8e 28 01
	00 00		 movzx	 ecx, WORD PTR [esi+296]
  0062c	66 89 4d a2	 mov	 WORD PTR _pjMsg$[ebp+46], cx

; 1758 : 	pjMsg.MaxBP = lpObj->MaxBP + lpObj->AddBP;

  00630	0f b7 96 2c 01
	00 00		 movzx	 edx, WORD PTR [esi+300]
  00637	66 03 96 30 01
	00 00		 add	 dx, WORD PTR [esi+304]
  0063e	66 89 55 a4	 mov	 WORD PTR _pjMsg$[ebp+48], dx

; 1759 : 	pjMsg.Leadership = lpObj->Leadership;

  00642	0f b7 86 18 01
	00 00		 movzx	 eax, WORD PTR [esi+280]
  00649	66 89 45 b2	 mov	 WORD PTR _pjMsg$[ebp+62], ax

; 1760 : 
; 1761 : 	pjMsg.UpPoint = lpObj->LevelUpPoint;

  0064d	8b 8e c0 00 00
	00		 mov	 ecx, DWORD PTR [esi+192]

; 1762 : 
; 1763 : 	short AddPoint = 0;

  00653	33 c0		 xor	 eax, eax
  00655	89 85 50 ff ff
	ff		 mov	 DWORD PTR _AddPoint$[ebp], eax

; 1764 : 	short MaxAddPoint = 0;

  0065b	89 85 4c ff ff
	ff		 mov	 DWORD PTR _MaxAddPoint$[ebp], eax

; 1765 : 	short MinusPoint = 0;

  00661	89 85 60 ff ff
	ff		 mov	 DWORD PTR _MinusPoint$[ebp], eax

; 1766 : 	short MaxMinusPoint = 0;

  00667	89 85 5c ff ff
	ff		 mov	 DWORD PTR _MaxMinusPoint$[ebp], eax
  0066d	89 4d bc	 mov	 DWORD PTR _pjMsg$[ebp+72], ecx

; 1767 : 
; 1768 : #ifdef ZTPINV
; 1769 : 	pjMsg.ExpandedInventoryLevel = lpObj->ExpandedInventory;

  00670	8a 96 24 26 00
	00		 mov	 dl, BYTE PTR [esi+9764]

; 1770 : #endif
; 1771 : 	
; 1772 : 	gObjGetStatPointState(lpObj->m_Index, AddPoint, MaxAddPoint, MinusPoint, MaxMinusPoint);

  00676	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _MaxMinusPoint$[ebp]
  0067c	50		 push	 eax
  0067d	88 55 b8	 mov	 BYTE PTR _pjMsg$[ebp+68], dl
  00680	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _MinusPoint$[ebp]
  00686	51		 push	 ecx
  00687	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00689	8d 95 4c ff ff
	ff		 lea	 edx, DWORD PTR _MaxAddPoint$[ebp]
  0068f	52		 push	 edx
  00690	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _AddPoint$[ebp]
  00696	50		 push	 eax
  00697	51		 push	 ecx
  00698	e8 00 00 00 00	 call	 ?gObjGetStatPointState@@YAXHAAF000@Z ; gObjGetStatPointState

; 1773 : 
; 1774 : 	pjMsg.AddPoint = AddPoint;
; 1775 : 	pjMsg.MaxAddPoint = MaxAddPoint;
; 1776 : 	pjMsg.wMinusPoint = MinusPoint;

  0069d	0f b7 85 60 ff
	ff ff		 movzx	 eax, WORD PTR _MinusPoint$[ebp]

; 1777 : 	pjMsg.wMaxMinusPoint = MaxMinusPoint;
; 1778 : 
; 1779 : 	pjMsg.Reset = lpObj->Reset;
; 1780 : 	pjMsg.GReset = lpObj->GReset;
; 1781 : 
; 1782 : 	pjMsg.dwLife = lpObj->Life;

  006a4	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1095[ebp]
  006aa	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _AddPoint$[ebp]
  006b0	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _MaxAddPoint$[ebp]
  006b6	66 89 45 b4	 mov	 WORD PTR _pjMsg$[ebp+64], ax
  006ba	0f b7 85 5c ff
	ff ff		 movzx	 eax, WORD PTR _MaxMinusPoint$[ebp]
  006c1	66 89 45 b6	 mov	 WORD PTR _pjMsg$[ebp+66], ax
  006c5	66 89 4d ae	 mov	 WORD PTR _pjMsg$[ebp+58], cx
  006c9	66 89 55 b0	 mov	 WORD PTR _pjMsg$[ebp+60], dx
  006cd	0f b7 86 90 22
	00 00		 movzx	 eax, WORD PTR [esi+8848]
  006d4	66 89 45 c0	 mov	 WORD PTR _pjMsg$[ebp+76], ax
  006d8	0f b7 86 94 22
	00 00		 movzx	 eax, WORD PTR [esi+8852]
  006df	66 89 45 c2	 mov	 WORD PTR _pjMsg$[ebp+78], ax
  006e3	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1095[ebp]
  006ea	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  006f0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  006f5	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv1091[ebp], eax
  006fb	d9 ad 68 ff ff
	ff		 fldcw	 WORD PTR tv1091[ebp]
  00701	df bd 64 ff ff
	ff		 fistp	 QWORD PTR tv1089[ebp]
  00707	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv1089[ebp]
  0070d	89 45 c4	 mov	 DWORD PTR _pjMsg$[ebp+80], eax
  00710	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1095[ebp]

; 1783 : 	pjMsg.dwMaxLife = lpObj->AddLife + lpObj->MaxLife;

  00716	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  0071c	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1084[ebp]
  00722	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00728	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1084[ebp]
  0072f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00734	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv1080[ebp], eax
  0073a	d9 ad 68 ff ff
	ff		 fldcw	 WORD PTR tv1080[ebp]
  00740	df bd 64 ff ff
	ff		 fistp	 QWORD PTR tv1077[ebp]
  00746	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv1077[ebp]
  0074c	89 45 c8	 mov	 DWORD PTR _pjMsg$[ebp+84], eax
  0074f	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1084[ebp]

; 1784 : 	pjMsg.dwMana = lpObj->Mana;

  00755	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  0075b	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1073[ebp]
  00761	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1073[ebp]
  00768	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0076d	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv1069[ebp], eax
  00773	d9 ad 68 ff ff
	ff		 fldcw	 WORD PTR tv1069[ebp]
  00779	df bd 64 ff ff
	ff		 fistp	 QWORD PTR tv1066[ebp]
  0077f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv1066[ebp]
  00785	89 45 cc	 mov	 DWORD PTR _pjMsg$[ebp+88], eax
  00788	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1073[ebp]

; 1785 : 	pjMsg.dwMaxMana = lpObj->AddMana + lpObj->MaxMana;

  0078e	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  00794	d9 bd 72 ff ff
	ff		 fnstcw	 WORD PTR tv1061[ebp]
  0079a	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  007a0	0f b7 85 72 ff
	ff ff		 movzx	 eax, WORD PTR tv1061[ebp]
  007a7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  007ac	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv1058[ebp], eax
  007b2	d9 ad 68 ff ff
	ff		 fldcw	 WORD PTR tv1058[ebp]

; 1786 : 	pjMsg.dwShield = lpObj->iShield;
; 1787 : 	pjMsg.dwMaxShield = lpObj->iMaxShield + lpObj->iAddShield;
; 1788 : 	pjMsg.dwBP = lpObj->BP;
; 1789 : 	pjMsg.dwMaxBP = lpObj->MaxBP + lpObj->AddBP;
; 1790 : 
; 1791 : 	LogAddTD("[FRUIT System] [%s][%s] (MinusPoint:%d/PlusPoint:%d) (MaxMinus:%d/MaxPlus:%d)", lpObj->AccountID, lpObj->Name, MinusPoint, AddPoint, MaxMinusPoint, MaxAddPoint);

  007b8	0f bf d2	 movsx	 edx, dx
  007bb	52		 push	 edx
  007bc	0f bf 95 60 ff
	ff ff		 movsx	 edx, WORD PTR _MinusPoint$[ebp]
  007c3	df bd 64 ff ff
	ff		 fistp	 QWORD PTR tv1056[ebp]
  007c9	0f bf c9	 movsx	 ecx, cx
  007cc	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv1056[ebp]
  007d2	89 45 d0	 mov	 DWORD PTR _pjMsg$[ebp+92], eax
  007d5	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  007db	89 45 d4	 mov	 DWORD PTR _pjMsg$[ebp+96], eax
  007de	d9 ad 72 ff ff
	ff		 fldcw	 WORD PTR tv1061[ebp]
  007e4	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  007ea	03 86 5c 01 00
	00		 add	 eax, DWORD PTR [esi+348]
  007f0	8d 7e 77	 lea	 edi, DWORD PTR [esi+119]
  007f3	89 45 d8	 mov	 DWORD PTR _pjMsg$[ebp+100], eax
  007f6	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  007fc	89 45 dc	 mov	 DWORD PTR _pjMsg$[ebp+104], eax
  007ff	8b 86 2c 01 00
	00		 mov	 eax, DWORD PTR [esi+300]
  00805	03 86 30 01 00
	00		 add	 eax, DWORD PTR [esi+304]
  0080b	8d 5e 6c	 lea	 ebx, DWORD PTR [esi+108]
  0080e	89 45 e0	 mov	 DWORD PTR _pjMsg$[ebp+108], eax
  00811	0f bf 85 5c ff
	ff ff		 movsx	 eax, WORD PTR _MaxMinusPoint$[ebp]
  00818	50		 push	 eax
  00819	51		 push	 ecx
  0081a	52		 push	 edx
  0081b	57		 push	 edi
  0081c	53		 push	 ebx
  0081d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@MMCPKNFL@?$FLFRUIT?5System?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CIMinusPo@
  00822	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1792 : 
; 1793 : 	if ( AddPoint < 0 || AddPoint > MaxAddPoint || MinusPoint < 0 || MinusPoint > MaxMinusPoint )

  00828	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _AddPoint$[ebp]
  0082e	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _MaxMinusPoint$[ebp]
  00834	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _MaxAddPoint$[ebp]
  0083a	83 c4 30	 add	 esp, 48			; 00000030H
  0083d	66 85 c0	 test	 ax, ax
  00840	78 18		 js	 SHORT $LN10@JGGetChara
  00842	66 3b c2	 cmp	 ax, dx
  00845	7f 13		 jg	 SHORT $LN10@JGGetChara
  00847	66 83 bd 60 ff
	ff ff 00	 cmp	 WORD PTR _MinusPoint$[ebp], 0
  0084f	7c 09		 jl	 SHORT $LN10@JGGetChara
  00851	66 39 8d 60 ff
	ff ff		 cmp	 WORD PTR _MinusPoint$[ebp], cx
  00858	7e 24		 jle	 SHORT $LN11@JGGetChara
$LN10@JGGetChara:

; 1794 : 	{
; 1795 : 		LogAddTD("[FRUIT System] Character Stat Error [%s][%s] (MinusPoint:%d/PlusPoint:%d) (MaxMinus:%d/MaxPlus:%d)", lpObj->AccountID, lpObj->Name, MinusPoint, AddPoint, MaxMinusPoint, MaxAddPoint);

  0085a	0f bf d2	 movsx	 edx, dx
  0085d	52		 push	 edx
  0085e	0f bf c9	 movsx	 ecx, cx
  00861	51		 push	 ecx
  00862	0f bf d0	 movsx	 edx, ax
  00865	0f bf 85 60 ff
	ff ff		 movsx	 eax, WORD PTR _MinusPoint$[ebp]
  0086c	52		 push	 edx
  0086d	50		 push	 eax
  0086e	57		 push	 edi
  0086f	53		 push	 ebx
  00870	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@LBDNOPPJ@?$FLFRUIT?5System?$FN?5Character?5Stat?5Er@
  00875	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0087b	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN11@JGGetChara:

; 1796 : 	}
; 1797 : 
; 1798 : 	g_QuestInfo.QuestInfoSave(lpObj);

  0087e	56		 push	 esi
  0087f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestInfo@@3VCQuestInfo@@A ; g_QuestInfo
  00884	e8 00 00 00 00	 call	 ?QuestInfoSave@CQuestInfo@@QAEXPAUOBJECTSTRUCT@@@Z ; CQuestInfo::QuestInfoSave

; 1799 : 	
; 1800 : 	DataSend(aIndex, (LPBYTE)&pjMsg, pjMsg.h.size);

  00889	0f b6 8d 75 ff
	ff ff		 movzx	 ecx, BYTE PTR _pjMsg$[ebp+1]
  00890	8b bd 48 ff ff
	ff		 mov	 edi, DWORD PTR _aIndex$[ebp]
  00896	51		 push	 ecx
  00897	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _pjMsg$[ebp]
  0089d	52		 push	 edx
  0089e	57		 push	 edi
  0089f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1801 : 
; 1802 : 	GCItemListSend(aIndex);

  008a4	57		 push	 edi
  008a5	e8 00 00 00 00	 call	 ?GCItemListSend@@YAXH@Z	; GCItemListSend

; 1803 : 	GCMagicListMultiSend(lpObj, 0);

  008aa	6a 00		 push	 0
  008ac	56		 push	 esi
  008ad	e8 00 00 00 00	 call	 ?GCMagicListMultiSend@@YAXPAUOBJECTSTRUCT@@E@Z ; GCMagicListMultiSend
  008b2	83 c4 18	 add	 esp, 24			; 00000018H

; 1804 : 
; 1805 : #ifdef PERIOD
; 1806 : 	g_PeriodItemZt.RequestPeriodItemInfo(lpObj);	//1.01.00

  008b5	56		 push	 esi
  008b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  008bb	e8 00 00 00 00	 call	 ?RequestPeriodItemInfo@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::RequestPeriodItemInfo

; 1807 : #endif
; 1808 : #ifdef LUCKYITEM
; 1809 : 	g_LuckyItemManager.GDReqLuckyItemSelect(lpObj);	//1.01.00

  008c0	56		 push	 esi
  008c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  008c6	e8 00 00 00 00	 call	 ?GDReqLuckyItemSelect@LuckyItemManager@@QAEXPAUOBJECTSTRUCT@@@Z ; LuckyItemManager::GDReqLuckyItemSelect

; 1810 : #endif
; 1811 : 
; 1812 : 	g_MasterLevelSystem.GDReqMasterLevelInfo(lpObj);

  008cb	56		 push	 esi
  008cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  008d1	e8 00 00 00 00	 call	 ?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDReqMasterLevelInfo

; 1813 : 
; 1814 : 	CGRequestQuestInfo(aIndex);

  008d6	57		 push	 edi
  008d7	e8 00 00 00 00	 call	 ?CGRequestQuestInfo@@YAXH@Z ; CGRequestQuestInfo
  008dc	83 c4 04	 add	 esp, 4

; 1815 : 	
; 1816 : 	//Season 2.5 Quest New CALL
; 1817 : 	g_QuestUtil.Quest3rdRequestInfo(lpObj);

  008df	56		 push	 esi
  008e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestUtil@@3VCQuestUtil@@A ; g_QuestUtil
  008e5	e8 00 00 00 00	 call	 ?Quest3rdRequestInfo@CQuestUtil@@QAEXPAUOBJECTSTRUCT@@@Z ; CQuestUtil::Quest3rdRequestInfo

; 1818 : 
; 1819 : 	DGGuildMemberInfoRequest(aIndex);

  008ea	57		 push	 edi
  008eb	e8 00 00 00 00	 call	 ?DGGuildMemberInfoRequest@@YAXH@Z ; DGGuildMemberInfoRequest

; 1820 : #if(FIX_LAND_OWNDER==TRUE)
; 1821 : 	lpObj->GuildLoadTick = 1;

  008f0	b8 01 00 00 00	 mov	 eax, 1
  008f5	83 c4 04	 add	 esp, 4
  008f8	66 89 86 10 29
	00 00		 mov	 WORD PTR [esi+10512], ax

; 1822 : #endif
; 1823 : 	if(gGENS)

  008ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  00906	74 0b		 je	 SHORT $LN9@JGGetChara

; 1824 : 	{
; 1825 : 		gGensSystem.ReqExDBGensInfo(lpObj);

  00908	56		 push	 esi
  00909	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  0090e	e8 00 00 00 00	 call	 ?ReqExDBGensInfo@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::ReqExDBGensInfo
$LN9@JGGetChara:

; 1826 : 		//gGensSystem.GDReqAbusingInfo(lpObj);
; 1827 : 		//Off for time
; 1828 : 		//gGensSystem.ReqGensRewardDay(lpObj);
; 1829 : 	}
; 1830 : 
; 1831 : 	if(g_ZtLicense.user.WinQuest)

  00913	80 3d ce 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+206, 0
  0091a	74 0b		 je	 SHORT $LN8@JGGetChara

; 1832 : 	{
; 1833 : 		gWinQuestSystem.ReqQuestInfo(lpObj);

  0091c	56		 push	 esi
  0091d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWinQuestSystem@@3VcWinQuestSystem@@A ; gWinQuestSystem
  00922	e8 00 00 00 00	 call	 ?ReqQuestInfo@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; cWinQuestSystem::ReqQuestInfo
$LN8@JGGetChara:

; 1834 : 	}
; 1835 : 
; 1836 : #ifdef MUHELPER
; 1837 : 	g_MUHelper.ReqMacro(lpObj->m_Index);

  00927	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00929	51		 push	 ecx
  0092a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MUHelper@@3VMUHelper@@A ; g_MUHelper
  0092f	e8 00 00 00 00	 call	 ?ReqMacro@MUHelper@@QAEXH@Z ; MUHelper::ReqMacro

; 1838 : #endif
; 1839 : 
; 1840 : 	//g_ZtGDManager.DB_Load(aIndex);
; 1841 : 
; 1842 : #if(CUSTOM_MARRIAGE)
; 1843 : 	g_Marriage.GDLoad(aIndex);

  00934	57		 push	 edi
  00935	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Marriage@@3VCMarriage@@A ; g_Marriage
  0093a	e8 00 00 00 00	 call	 ?GDLoad@CMarriage@@QAEXH@Z ; CMarriage::GDLoad

; 1844 : #endif
; 1845 : 
; 1846 : 	FriendListRequest(aIndex);

  0093f	57		 push	 edi
  00940	e8 00 00 00 00	 call	 ?FriendListRequest@@YAXH@Z ; FriendListRequest
  00945	83 c4 04	 add	 esp, 4

; 1847 : 
; 1848 : 	if ( gTamaJJangEvent != FALSE )

  00948	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gTamaJJangEvent@@3HA, 0 ; gTamaJJangEvent
  0094f	74 22		 je	 SHORT $LN5@JGGetChara

; 1849 : 	{
; 1850 : 		if ( gAppearTamaJJang != 0 )

  00951	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gAppearTamaJJang@@3HA ; gAppearTamaJJang
  00956	85 c0		 test	 eax, eax
  00958	74 19		 je	 SHORT $LN5@JGGetChara

; 1851 : 		{
; 1852 : 			if ( lpObj->MapNumber == MAP_INDEX_RORENCIA )

  0095a	80 be 49 01 00
	00 00		 cmp	 BYTE PTR [esi+329], 0
  00961	75 10		 jne	 SHORT $LN5@JGGetChara

; 1853 : 			{
; 1854 : 				GCMapEventStateSend(MAP_INDEX_RORENCIA, gAppearTamaJJang, 2);

  00963	0f b6 d0	 movzx	 edx, al
  00966	6a 02		 push	 2
  00968	52		 push	 edx
  00969	6a 00		 push	 0
  0096b	e8 00 00 00 00	 call	 ?GCMapEventStateSend@@YAXHEE@Z ; GCMapEventStateSend
  00970	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@JGGetChara:

; 1855 : 			}
; 1856 : 		}
; 1857 : 	}
; 1858 : 
; 1859 : 	gObjUseSkill.SkillChangeUse(lpObj->m_Index);

  00973	8b 06		 mov	 eax, DWORD PTR [esi]
  00975	50		 push	 eax
  00976	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  0097b	e8 00 00 00 00	 call	 ?SkillChangeUse@CObjUseSkill@@QAEHH@Z ; CObjUseSkill::SkillChangeUse

; 1860 : 
; 1861 : 	PMSG_QUESTSYSTEM_TEMP pResult;
; 1862 : 	pResult.h.set((LPBYTE)&pResult, 0xF6, 0x1A, sizeof(pResult));
; 1863 : 	pResult.Result = NULL;
; 1864 : 	DataSend(aIndex, (LPBYTE)&pResult, pResult.h.size);

  00980	6a 05		 push	 5
  00982	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _pResult$[ebp]
  00988	51		 push	 ecx
  00989	57		 push	 edi
  0098a	c7 85 54 ff ff
	ff c1 05 f6 1a	 mov	 DWORD PTR _pResult$[ebp], 452330945 ; 1af605c1H
  00994	c6 85 58 ff ff
	ff 00		 mov	 BYTE PTR _pResult$[ebp+4], 0
  0099b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1865 : 
; 1866 : 	//if(g_ZtLicense.user.Rage)
; 1867 : 	//{
; 1868 : 	//	gSystemOfRage.RageConnect(aIndex);
; 1869 : 	//}
; 1870 : 
; 1871 : 	GCServerMsgStringSend(gWelcomeMessage, lpObj->m_Index, 0);

  009a0	8b 16		 mov	 edx, DWORD PTR [esi]
  009a2	6a 00		 push	 0
  009a4	52		 push	 edx
  009a5	68 00 00 00 00	 push	 OFFSET ?gWelcomeMessage@@3PADA ; gWelcomeMessage
  009aa	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1872 : 
; 1873 : 	ZtUserDataSend(aIndex);

  009af	57		 push	 edi
  009b0	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  009b5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1874 : 
; 1875 : 	g_GMManager.ConnectAdmin(aIndex);

  009b8	57		 push	 edi
  009b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GMManager@@3VGMManager@@A ; g_GMManager
  009be	e8 00 00 00 00	 call	 ?ConnectAdmin@GMManager@@QAEXH@Z ; GMManager::ConnectAdmin

; 1876 : 
; 1877 : #if(CUSTOM_NPC_BUFFER==TRUE)
; 1878 : 	//g_BufferSystem.UserConnect(aIndex);
; 1879 : #endif
; 1880 : 
; 1881 : #if(CUSTOM_NEWS==TRUE)
; 1882 : 	if( g_NewsBoard.m_ShowOnLogin )

  009c3	80 3d 01 00 00
	00 00		 cmp	 BYTE PTR ?g_NewsBoard@@3VNewsBoard@@A+1, 0
  009ca	74 0b		 je	 SHORT $LN4@JGGetChara

; 1883 : 	{
; 1884 : 		g_NewsBoard.OpenMain(lpObj);

  009cc	56		 push	 esi
  009cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewsBoard@@3VNewsBoard@@A ; g_NewsBoard
  009d2	e8 00 00 00 00	 call	 ?OpenMain@NewsBoard@@QAEXPAUOBJECTSTRUCT@@@Z ; NewsBoard::OpenMain
$LN4@JGGetChara:

; 1885 : 	}
; 1886 : #endif // NEWS_BOARD
; 1887 : 
; 1888 : //#if(ANTI_CHEAT_PLUS==TRUE)
; 1889 : //	g_AntiCheatPlus.GC_Cheat(aIndex);
; 1890 : //	g_AntiCheatPlus.CheckMultiWindow(aIndex);
; 1891 : //	g_AntiCheatPlus.CheckMaxWindow(aIndex);
; 1892 : //#endif
; 1893 : //
; 1894 : //#if(CUSTOM_SMITHY == TRUE)
; 1895 : //	g_Smithy.GCIemSend(aIndex);
; 1896 : //#endif
; 1897 : 
; 1898 : #if(CUSTOM_SAVE_PT==TRUE)
; 1899 : 	gParty.RestoreParty(aIndex);

  009d7	57		 push	 edi
  009d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  009dd	e8 00 00 00 00	 call	 ?RestoreParty@PartyClass@@QAEXH@Z ; PartyClass::RestoreParty

; 1900 : #endif
; 1901 : //#if(OFFLINE_MODE==TRUE)
; 1902 : //	if(g_ZtLicense.user.OfflineMode)
; 1903 : //	{
; 1904 : //		g_OfflineMode.GCConfig(aIndex);
; 1905 : //	}
; 1906 : //#endif
; 1907 : #if(CUSTOM_PREMIUM_SYSTEM==TRUE)
; 1908 : 	g_PremiumSystemZt.UserConnect(aIndex);

  009e2	57		 push	 edi
  009e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PremiumSystemZt@@3VPremiumSystemZt@@A ; g_PremiumSystemZt
  009e8	e8 00 00 00 00	 call	 ?UserConnect@PremiumSystemZt@@QAEXH@Z ; PremiumSystemZt::UserConnect

; 1909 : #endif
; 1910 : 
; 1911 : 	#if(DEV_PLAYERSHOP)
; 1912 : 	g_ItemMarket.ConnectPlayer(aIndex);

  009ed	57		 push	 edi
  009ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMarket@@3VCItemMarket@@A ; g_ItemMarket
  009f3	e8 00 00 00 00	 call	 ?ConnectPlayer@CItemMarket@@QAEXH@Z ; CItemMarket::ConnectPlayer

; 1913 : 	#endif
; 1914 : 
; 1915 : #if(_RECONNECT_)
; 1916 : 	if(g_ConnectZt.ConnectIndex == aIndex)
; 1917 : 	{
; 1918 : 		//g_ConnectZt.ConnectTick = 0;
; 1919 : 	}
; 1920 : #endif
; 1921 : 
; 1922 : 	if(Premium.CheckPremiumServer(aIndex) == false)

  009f8	57		 push	 edi
  009f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?Premium@@3VPremiumSystem@@A ; Premium
  009fe	e8 00 00 00 00	 call	 ?CheckPremiumServer@PremiumSystem@@QAE_NH@Z ; PremiumSystem::CheckPremiumServer
  00a03	84 c0		 test	 al, al
  00a05	75 0d		 jne	 SHORT $LN2@JGGetChara

; 1923 : 	{
; 1924 : 		#if(_RECONNECT_)
; 1925 : 		g_ConnectZt.SendClose(aIndex, NORM_DC);

  00a07	6a 00		 push	 0
  00a09	57		 push	 edi
  00a0a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectZt@@3VConnectZt@@A ; g_ConnectZt
  00a0f	e8 00 00 00 00	 call	 ?SendClose@ConnectZt@@QAEXHH@Z ; ConnectZt::SendClose
$LN2@JGGetChara:

; 1926 : 		#else
; 1927 : 		CloseClient(aIndex);
; 1928 : 		#endif
; 1929 : 	}
; 1930 : #if(CONFIG_WAITOPEN)
; 1931 : 	if(g_WaitOpen == true)

  00a14	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?g_WaitOpen@@3_NA, 1 ; g_WaitOpen
  00a1b	75 1e		 jne	 SHORT $LN1@JGGetChara

; 1932 : 	{
; 1933 : #if(_RECONNECT_)
; 1934 : 		g_ConnectZt.SendClose(aIndex, NORM_DC);

  00a1d	6a 00		 push	 0
  00a1f	57		 push	 edi
  00a20	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectZt@@3VConnectZt@@A ; g_ConnectZt
  00a25	e8 00 00 00 00	 call	 ?SendClose@ConnectZt@@QAEXHH@Z ; ConnectZt::SendClose
  00a2a	5e		 pop	 esi
  00a2b	5f		 pop	 edi
  00a2c	5b		 pop	 ebx

; 1951 : }

  00a2d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a30	33 cd		 xor	 ecx, ebp
  00a32	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a37	8b e5		 mov	 esp, ebp
  00a39	5d		 pop	 ebp
  00a3a	c3		 ret	 0
$LN1@JGGetChara:

; 1935 : #else
; 1936 : 		CloseClient(aIndex);
; 1937 : #endif
; 1938 : 		return;
; 1939 : 	}
; 1940 : #endif
; 1941 : #if(EVENT_DUNGEON_SIEGE)
; 1942 : 	g_DungeonSiege.GCPlayerConnect(aIndex);

  00a3b	57		 push	 edi
  00a3c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DungeonSiege@@3VCDungeonSiege@@A ; g_DungeonSiege
  00a41	e8 00 00 00 00	 call	 ?GCPlayerConnect@CDungeonSiege@@QAEXH@Z ; CDungeonSiege::GCPlayerConnect

; 1943 : #endif
; 1944 : 
; 1945 : //#if(CUSTOM_MAPQUEST)
; 1946 : //	g_MapQuest.TeleportMap(lpObj->m_Index, lpObj->MapNumber);
; 1947 : //#endif
; 1948 : 
; 1949 : 	lpObj->m_iLoadConfigNumber = 1;

  00a46	c7 86 d4 2a 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+10964], 1

; 1950 : 	lpObj->m_iLoadConfigTickCount = GetTickCount();

  00a50	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 1951 : }

  00a56	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a59	89 86 d8 2a 00
	00		 mov	 DWORD PTR [esi+10968], eax
  00a5f	5e		 pop	 esi
  00a60	5f		 pop	 edi
  00a61	33 cd		 xor	 ecx, ebp
  00a63	5b		 pop	 ebx
  00a64	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a69	8b e5		 mov	 esp, ebp
  00a6b	5d		 pop	 ebp
  00a6c	c3		 ret	 0
?JGGetCharacterInfo@@YAXPAUSDHP_DBCHAR_INFORESULT@@@Z ENDP ; JGGetCharacterInfo
_TEXT	ENDS
PUBLIC	__real@437f0000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	??_C@_0DP@HCBBCCKB@?$FL380Item?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5380?5It@ ; `string'
PUBLIC	_lpMsg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DGGetWarehouseList@@YAXPAUSDHP_GETWAREHOUSEDB_SAVE@@@Z ; DGGetWarehouseList
EXTRN	?GCWarehouseStateSend@@YAXHE@Z:PROC		; GCWarehouseStateSend
EXTRN	?bCanWarehouseLock@@3HA:DWORD			; bCanWarehouseLock
EXTRN	?GCUserWarehouseSend@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; GCUserWarehouseSend
EXTRN	?gObjWarehouseItemSet@@YAXHHE@Z:PROC		; gObjWarehouseItemSet
EXTRN	?gObjWarehouseInsertItemPos@@YAEHVCItem@@HH@Z:PROC ; gObjWarehouseInsertItemPos
EXTRN	?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z:PROC ; CItemSystemFor380::Is380Item
EXTRN	?g_kItemSystemFor380@@3VCItemSystemFor380@@A:BYTE ; g_kItemSystemFor380
EXTRN	?IsItem@@YAHH@Z:PROC				; IsItem
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0DP@HCBBCCKB@?$FL380Item?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5380?5It@
CONST	SEGMENT
??_C@_0DP@HCBBCCKB@?$FL380Item?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5380?5It@ DB '['
	DB	'380Item][%s][%s] Invalid 380 Item Option in Warehouse pos[%d]'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGGetWarehouseList@@YAXPAUSDHP_GETWAREHOUSEDB_SAVE@@@Z
_TEXT	SEGMENT
tv2067 = -304						; size = 4
_lpObj$ = -300						; size = 4
tv807 = -296						; size = 4
tv1235 = -292						; size = 4
_SocketOptionIndex$228631 = -288			; size = 1
_lpMsg$GSCopy$ = -284					; size = 4
tv1711 = -280						; size = 4
_aIndex$ = -276						; size = 4
tv1713 = -272						; size = 4
_n$228594 = -268					; size = 4
__type$ = -264						; size = 4
_dbsize$ = -260						; size = 4
_itype$ = -256						; size = 4
_item$ = -252						; size = 212
_pResult$ = -36						; size = 11
_szId$ = -24						; size = 11
_SocketOption$228630 = -12				; size = 5
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGGetWarehouseList@@YAXPAUSDHP_GETWAREHOUSEDB_SAVE@@@Z PROC ; DGGetWarehouseList, COMDAT

; 2294 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpMsg$[ebp]

; 2295 : 	char szId[11];
; 2296 : 	int aIndex = 0;
; 2297 : 	PMSG_TALKRESULT pResult;
; 2298 : 
; 2299 : 	szId[MAX_ACCOUNT_LEN]=0;
; 2300 : 	memcpy(szId, lpMsg->AccountID, sizeof(lpMsg->AccountID));

  00017	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0001d	66 8b 53 0c	 mov	 dx, WORD PTR [ebx+12]
  00021	56		 push	 esi

; 2301 : 	aIndex = lpMsg->aIndex;

  00022	0f bf 73 0e	 movsx	 esi, WORD PTR [ebx+14]
  00026	89 45 e8	 mov	 DWORD PTR _szId$[ebp], eax
  00029	57		 push	 edi

; 2302 : 
; 2303 : 	if ( !gObjIsAccontConnect(aIndex, szId))

  0002a	8d 45 e8	 lea	 eax, DWORD PTR _szId$[ebp]
  0002d	50		 push	 eax
  0002e	56		 push	 esi
  0002f	89 9d e4 fe ff
	ff		 mov	 DWORD PTR _lpMsg$GSCopy$[ebp], ebx
  00035	c6 45 f2 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  00039	89 4d ec	 mov	 DWORD PTR _szId$[ebp+4], ecx
  0003c	66 89 55 f0	 mov	 WORD PTR _szId$[ebp+8], dx
  00040	89 b5 ec fe ff
	ff		 mov	 DWORD PTR _aIndex$[ebp], esi
  00046	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0004b	83 c4 08	 add	 esp, 8
  0004e	85 c0		 test	 eax, eax
  00050	75 31		 jne	 SHORT $LN63@DGGetWareh

; 2304 : 	{
; 2305 : 		LogAddC(2, lMsg.Get(MSGGET(1, 175)), szId, aIndex);

  00052	56		 push	 esi
  00053	8d 4d e8	 lea	 ecx, DWORD PTR _szId$[ebp]
  00056	51		 push	 ecx
  00057	68 af 01 00 00	 push	 431			; 000001afH
  0005c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00061	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00066	50		 push	 eax
  00067	6a 02		 push	 2
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0006f	83 c4 10	 add	 esp, 16			; 00000010H

; 2596 : 	}
; 2597 : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN63@DGGetWareh:

; 2306 : 		return;
; 2307 : 	}
; 2308 : 
; 2309 : 	LPOBJ lpObj = &gObj[aIndex];

  00083	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00089	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0008f	8d 3c 16	 lea	 edi, DWORD PTR [esi+edx]

; 2310 : 	int itype;
; 2311 : 	int _type;
; 2312 : 	BYTE OptionData;
; 2313 : 	CItem item;

  00092	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _item$[ebp]
  00098	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR tv807[ebp], esi
  0009e	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], edi
  000a4	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 2314 : 
; 2315 : 	memset(gObj[aIndex].pWarehouseMap, (BYTE)-1, WAREHOUSE_SIZE);

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ae	8b 8c 06 60 0e
	00 00		 mov	 ecx, DWORD PTR [esi+eax+3680]
  000b5	68 f0 00 00 00	 push	 240			; 000000f0H
  000ba	68 ff 00 00 00	 push	 255			; 000000ffH
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _memset

; 2316 : 	gObj[aIndex].WarehouseMoney = lpMsg->Money;

  000c5	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cd	89 94 06 6c 0e
	00 00		 mov	 DWORD PTR [esi+eax+3692], edx

; 2317 : 	gObj[aIndex].WarehousePW = lpMsg->pw;

  000d4	66 8b 8b 16 0f
	00 00		 mov	 cx, WORD PTR [ebx+3862]
  000db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e1	66 89 8c 16 66
	0e 00 00	 mov	 WORD PTR [esi+edx+3686], cx

; 2318 : 	int dbsize = 7;
; 2319 : 
; 2320 : 	if ( lpMsg->DbVersion >= 3 )

  000e9	8a 83 14 0f 00
	00		 mov	 al, BYTE PTR [ebx+3860]
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f2	c7 85 fc fe ff
	ff 07 00 00 00	 mov	 DWORD PTR _dbsize$[ebp], 7
  000fc	3c 03		 cmp	 al, 3
  000fe	72 0c		 jb	 SHORT $LN62@DGGetWareh

; 2321 : 	{
; 2322 : 		dbsize = 16;

  00100	c7 85 fc fe ff
	ff 10 00 00 00	 mov	 DWORD PTR _dbsize$[ebp], 16 ; 00000010H
  0010a	eb 0e		 jmp	 SHORT $LN78@DGGetWareh
$LN62@DGGetWareh:

; 2323 : 	}
; 2324 : 	else if ( lpMsg->DbVersion >= 1 )

  0010c	3c 01		 cmp	 al, 1
  0010e	72 0a		 jb	 SHORT $LN78@DGGetWareh

; 2325 : 	{
; 2326 : 		dbsize = 10;

  00110	c7 85 fc fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR _dbsize$[ebp], 10 ; 0000000aH
$LN78@DGGetWareh:

; 2327 : 	}
; 2328 : 
; 2329 : 	for ( int n=0;n<WAREHOUSE_SIZE;n++)

  0011a	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _lpMsg$GSCopy$[ebp]
  00120	33 f6		 xor	 esi, esi
  00122	83 c3 14	 add	 ebx, 20			; 00000014H
  00125	83 c2 1b	 add	 edx, 27			; 0000001bH
  00128	8b c2		 mov	 eax, edx
  0012a	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _n$228594[ebp], esi
  00130	89 b5 dc fe ff
	ff		 mov	 DWORD PTR tv1235[ebp], esi
  00136	89 95 e8 fe ff
	ff		 mov	 DWORD PTR tv1711[ebp], edx
  0013c	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv1713[ebp], eax
  00142	eb 0c		 jmp	 SHORT $LN59@DGGetWareh
$LL81@DGGetWareh:
  00144	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR tv1711[ebp]
  0014a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR tv1713[ebp]
$LN59@DGGetWareh:

; 2330 : 	{
; 2331 : 		itype = lpMsg->dbItems[n*dbsize];
; 2332 : 		
; 2333 : 		if ( dbsize == 16 )

  00150	83 bd fc fe ff
	ff 10		 cmp	 DWORD PTR _dbsize$[ebp], 16 ; 00000010H
  00157	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]
  0015a	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _itype$[ebp], ecx
  00160	75 29		 jne	 SHORT $LN56@DGGetWareh

; 2334 : 		{
; 2335 : 			itype |= (lpMsg->dbItems[n*dbsize+9] & 0xF0) << 5;
; 2336 : 			itype |= (lpMsg->dbItems[n*dbsize+7] & 0x80) << 1;

  00162	0f b6 50 02	 movzx	 edx, BYTE PTR [eax+2]
  00166	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00169	81 e2 f0 00 00
	00		 and	 edx, 240		; 000000f0H
  0016f	c1 e2 04	 shl	 edx, 4
  00172	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00177	0b d0		 or	 edx, eax
  00179	03 d2		 add	 edx, edx
  0017b	0b ca		 or	 ecx, edx
  0017d	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _itype$[ebp], ecx

; 2337 : 			_type = itype;

  00183	89 8d f8 fe ff
	ff		 mov	 DWORD PTR __type$[ebp], ecx
  00189	eb 59		 jmp	 SHORT $LN52@DGGetWareh
$LN56@DGGetWareh:

; 2338 : 		}
; 2339 : 		else if ( dbsize == 10 )

  0018b	83 bd fc fe ff
	ff 0a		 cmp	 DWORD PTR _dbsize$[ebp], 10 ; 0000000aH
  00192	75 2d		 jne	 SHORT $LN54@DGGetWareh

; 2340 : 		{
; 2341 : 			if ( ((lpMsg->dbItems[n*dbsize+7] >> 7) & 0x01) )

  00194	f6 02 80	 test	 BYTE PTR [edx], 128	; 00000080H
  00197	74 0c		 je	 SHORT $LN53@DGGetWareh

; 2342 : 			{
; 2343 : 				itype += 256;

  00199	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  0019f	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _itype$[ebp], ecx
$LN53@DGGetWareh:

; 2344 : 			}
; 2345 : 
; 2346 : 			_type = (itype / 32 * MAX_SUBTYPE_ITEMS) + itype % 32;

  001a5	8b c1		 mov	 eax, ecx
  001a7	99		 cdq
  001a8	83 e2 1f	 and	 edx, 31			; 0000001fH
  001ab	03 c2		 add	 eax, edx
  001ad	c1 f8 05	 sar	 eax, 5
  001b0	c1 e0 09	 shl	 eax, 9
  001b3	81 e1 1f 00 00
	80		 and	 ecx, -2147483617	; 8000001fH
  001b9	79 21		 jns	 SHORT $LN89@DGGetWareh
  001bb	49		 dec	 ecx
  001bc	83 c9 e0	 or	 ecx, -32		; ffffffe0H

; 2347 : 		}
; 2348 : 		else

  001bf	eb 1a		 jmp	 SHORT $LN90@DGGetWareh
$LN54@DGGetWareh:

; 2349 : 		{
; 2350 : 			_type = (itype / MAX_TYPE_ITEMS * MAX_SUBTYPE_ITEMS) + itype % 16;

  001c1	8b c1		 mov	 eax, ecx
  001c3	99		 cdq
  001c4	83 e2 0f	 and	 edx, 15			; 0000000fH
  001c7	03 c2		 add	 eax, edx
  001c9	c1 f8 04	 sar	 eax, 4
  001cc	c1 e0 09	 shl	 eax, 9
  001cf	81 e1 0f 00 00
	80		 and	 ecx, -2147483633	; 8000000fH
  001d5	79 05		 jns	 SHORT $LN89@DGGetWareh
  001d7	49		 dec	 ecx
  001d8	83 c9 f0	 or	 ecx, -16		; fffffff0H
$LN90@DGGetWareh:
  001db	41		 inc	 ecx
$LN89@DGGetWareh:
  001dc	03 c1		 add	 eax, ecx
  001de	89 85 f8 fe ff
	ff		 mov	 DWORD PTR __type$[ebp], eax
$LN52@DGGetWareh:

; 2351 : 		}
; 2352 : 
; 2353 : 		gObj[aIndex].pWarehouse[n].Clear();

  001e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ea	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR tv807[ebp]
  001f0	8b 8c 0a 5c 0e
	00 00		 mov	 ecx, DWORD PTR [edx+ecx+3676]
  001f7	03 ce		 add	 ecx, esi
  001f9	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 2354 : 
; 2355 : 		if ( dbsize >= 16 )

  001fe	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dbsize$[ebp]
  00204	83 f8 10	 cmp	 eax, 16			; 00000010H
  00207	7c 16		 jl	 SHORT $LN51@DGGetWareh

; 2356 : 		{
; 2357 : 			if ( lpMsg->dbItems[n*dbsize] == (BYTE)-1 && (lpMsg->dbItems[n*dbsize+9] & 0xF0) == 0xF0 && (lpMsg->dbItems[n*dbsize+7] & 0x80) == 0x80)

  00209	80 3b ff	 cmp	 BYTE PTR [ebx], 255	; 000000ffH
  0020c	75 2a		 jne	 SHORT $LN79@DGGetWareh
  0020e	8a 43 09	 mov	 al, BYTE PTR [ebx+9]
  00211	24 f0		 and	 al, 240			; 000000f0H
  00213	3c f0		 cmp	 al, 240			; 000000f0H
$LN92@DGGetWareh:
  00215	75 21		 jne	 SHORT $LN79@DGGetWareh
  00217	f6 43 07 80	 test	 BYTE PTR [ebx+7], 128	; 00000080H
  0021b	74 1b		 je	 SHORT $LN79@DGGetWareh

; 2358 : 			{
; 2359 : 				itype = -1;
; 2360 : 			}
; 2361 : 		}

  0021d	eb 0f		 jmp	 SHORT $LN91@DGGetWareh
$LN51@DGGetWareh:

; 2362 : 		else if ( dbsize >= 10 )

  0021f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00222	7c 05		 jl	 SHORT $LN48@DGGetWareh

; 2363 : 		{
; 2364 : 			if ( lpMsg->dbItems[n*dbsize] == (BYTE)-1 && (lpMsg->dbItems[n*dbsize+7] & 0x80) == 0x80)

  00224	80 3b ff	 cmp	 BYTE PTR [ebx], 255	; 000000ffH

; 2365 : 			{
; 2366 : 				itype = -1;
; 2367 : 			}
; 2368 : 		}
; 2369 : 		else

  00227	eb ec		 jmp	 SHORT $LN92@DGGetWareh
$LN48@DGGetWareh:

; 2370 : 		{
; 2371 : 			if ( lpMsg->dbItems[n*dbsize] == (BYTE)-1 )

  00229	80 3b ff	 cmp	 BYTE PTR [ebx], 255	; 000000ffH
  0022c	75 0a		 jne	 SHORT $LN79@DGGetWareh
$LN91@DGGetWareh:

; 2372 : 			{
; 2373 : 				itype = -1;

  0022e	c7 85 00 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _itype$[ebp], -1
$LN79@DGGetWareh:

; 2374 : 			}
; 2375 : 		}
; 2376 : 
; 2377 : 		if ( IsItem(_type) == FALSE )

  00238	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR __type$[ebp]
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 ?IsItem@@YAHH@Z		; IsItem
  00244	83 c4 04	 add	 esp, 4

; 2378 : 		{
; 2379 : 			itype = -1;

  00247	83 c9 ff	 or	 ecx, -1
  0024a	85 c0		 test	 eax, eax
  0024c	75 06		 jne	 SHORT $LN44@DGGetWareh
  0024e	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _itype$[ebp], ecx
$LN44@DGGetWareh:

; 2380 : 		}
; 2381 : 
; 2382 : 		if ( _type == ITEMGET(14,17) || _type == ITEMGET(14,18) )

  00254	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR __type$[ebp]
  0025a	3d 11 1c 00 00	 cmp	 eax, 7185		; 00001c11H
  0025f	74 07		 je	 SHORT $LN42@DGGetWareh
  00261	3d 12 1c 00 00	 cmp	 eax, 7186		; 00001c12H
  00266	75 0e		 jne	 SHORT $LN41@DGGetWareh
$LN42@DGGetWareh:

; 2383 : 		{
; 2384 : 			if ( lpMsg->dbItems[n*dbsize+2]== 0 )

  00268	80 7b 02 00	 cmp	 BYTE PTR [ebx+2], 0
  0026c	75 08		 jne	 SHORT $LN41@DGGetWareh

; 2385 : 			{
; 2386 : 				_type = -1;

  0026e	89 8d f8 fe ff
	ff		 mov	 DWORD PTR __type$[ebp], ecx

; 2387 : 			}
; 2388 : 		}
; 2389 : 
; 2390 : 		if ( _type == ITEMGET(14,19) )

  00274	eb 11		 jmp	 SHORT $LN39@DGGetWareh
$LN41@DGGetWareh:
  00276	3d 13 1c 00 00	 cmp	 eax, 7187		; 00001c13H
  0027b	75 0a		 jne	 SHORT $LN39@DGGetWareh

; 2391 : 		{
; 2392 : 			if ( lpMsg->dbItems[n*dbsize+2] == (BYTE)-1 )

  0027d	80 7b 02 ff	 cmp	 BYTE PTR [ebx+2], 255	; 000000ffH

; 2393 : 			{
; 2394 : 				itype = -1;
; 2395 : 			}
; 2396 : 		}
; 2397 : 
; 2398 : 		if ( itype != -1 )

  00281	0f 84 8b 03 00
	00		 je	 $LN58@DGGetWareh
$LN39@DGGetWareh:
  00287	39 8d 00 ff ff
	ff		 cmp	 DWORD PTR _itype$[ebp], ecx
  0028d	0f 84 7f 03 00
	00		 je	 $LN58@DGGetWareh

; 2399 : 		{
; 2400 : 			item.m_Level = DBI_GET_LEVEL(lpMsg->dbItems[n*dbsize+1]);

  00293	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  00296	8a d0		 mov	 dl, al
  00298	c0 ea 03	 shr	 dl, 3
  0029b	80 e2 0f	 and	 dl, 15			; 0000000fH
  0029e	0f b6 ca	 movzx	 ecx, dl

; 2401 : 
; 2402 : 			if ( lpMsg->DbVersion	< 2 )

  002a1	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _lpMsg$GSCopy$[ebp]
  002a7	80 ba 14 0f 00
	00 02		 cmp	 BYTE PTR [edx+3860], 2
  002ae	66 89 8d 0c ff
	ff ff		 mov	 WORD PTR _item$[ebp+8], cx
  002b5	73 06		 jae	 SHORT $LN37@DGGetWareh

; 2403 : 			{
; 2404 : 				lpMsg->dbItems[n*dbsize+8] = -1;

  002b7	66 c7 43 08 ff
	ff		 mov	 WORD PTR [ebx+8], 65535	; 0000ffffH
$LN37@DGGetWareh:

; 2405 : 				lpMsg->dbItems[n*dbsize+9] = -1;
; 2406 : 			}
; 2407 : 
; 2408 : 			if ( _type != ITEMGET(14,11) )

  002bd	81 bd f8 fe ff
	ff 0b 1c 00 00	 cmp	 DWORD PTR __type$[ebp], 7179 ; 00001c0bH
  002c7	74 0f		 je	 SHORT $LN35@DGGetWareh

; 2409 : 			{
; 2410 : 				if ( item.m_Level > 15 )	//Season 5 +15 Items

  002c9	66 83 f9 0f	 cmp	 cx, 15			; 0000000fH
  002cd	7e 09		 jle	 SHORT $LN35@DGGetWareh

; 2411 : 				{
; 2412 : 					item.m_Level = 0;

  002cf	33 c9		 xor	 ecx, ecx
  002d1	66 89 8d 0c ff
	ff ff		 mov	 WORD PTR _item$[ebp+8], cx
$LN35@DGGetWareh:

; 2413 : 				}
; 2414 : 			}
; 2415 : 
; 2416 : 			OptionData = lpMsg->dbItems[n*dbsize+1];
; 2417 : 			item.m_Option1 = ( (OptionData) >> 7 );

  002d8	8a d0		 mov	 dl, al

; 2418 : 			item.m_Option2 = DBI_GET_LUCK(OptionData);

  002da	8a c8		 mov	 cl, al

; 2419 : 			item.m_Option3 = DBI_GET_OPTION(OptionData);

  002dc	24 03		 and	 al, 3
  002de	c0 e9 02	 shr	 cl, 2
  002e1	88 45 9a	 mov	 BYTE PTR _item$[ebp+150], al

; 2420 : 
; 2421 : 			if ( dbsize >= 10 )

  002e4	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dbsize$[ebp]
  002ea	c0 ea 07	 shr	 dl, 7
  002ed	80 e1 01	 and	 cl, 1
  002f0	88 55 98	 mov	 BYTE PTR _item$[ebp+148], dl
  002f3	88 4d 99	 mov	 BYTE PTR _item$[ebp+149], cl
  002f6	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002f9	7c 0c		 jl	 SHORT $LN34@DGGetWareh

; 2422 : 			{
; 2423 : 				//if ( _type == ITEMGET(13,3) )
; 2424 : 				//{
; 2425 : 					item.m_Option3 |= DBI_GET_DINO_OPTION(lpMsg->dbItems[n*dbsize+7]);

  002fb	8a 53 07	 mov	 dl, BYTE PTR [ebx+7]
  002fe	c0 ea 04	 shr	 dl, 4
  00301	80 e2 04	 and	 dl, 4
  00304	08 55 9a	 or	 BYTE PTR _item$[ebp+150], dl
$LN34@DGGetWareh:

; 2426 : 				//}
; 2427 : 				//else
; 2428 : 				//{
; 2429 : 				//	if ( DBI_GET_OPTION16(lpMsg->dbItems[n*dbsize+7]) == 0x40 )
; 2430 : 				//	{
; 2431 : 				//		item.m_Option3 = 4;
; 2432 : 				//	}
; 2433 : 				//}
; 2434 : 			}
; 2435 : 
; 2436 : 			item.m_Durability = lpMsg->dbItems[n*dbsize+2];

  00307	0f b6 4b 02	 movzx	 ecx, BYTE PTR [ebx+2]
  0030b	89 8d d0 fe ff
	ff		 mov	 DWORD PTR tv2067[ebp], ecx
  00311	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv2067[ebp]
  00317	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _item$[ebp+36]

; 2437 : 
; 2438 : 			if ( dbsize >= 16 )

  0031d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00320	7c 58		 jl	 SHORT $LN83@DGGetWareh

; 2439 : 			{
; 2440 : 				item.m_JewelOfHarmonyOption = lpMsg->dbItems[n*dbsize+10];
; 2441 : 			}
; 2442 : 
; 2443 : 			if ( dbsize >= 16 )
; 2444 : 			{
; 2445 : 				item.m_ItemOptionEx = DBI_GET_380OPTION(lpMsg->dbItems[n*dbsize+9]);

  00322	8a 43 09	 mov	 al, BYTE PTR [ebx+9]
  00325	8a 53 0a	 mov	 dl, BYTE PTR [ebx+10]
  00328	24 f8		 and	 al, 248			; 000000f8H
  0032a	c0 e0 04	 shl	 al, 4
  0032d	88 55 c8	 mov	 BYTE PTR _item$[ebp+196], dl
  00330	88 45 ce	 mov	 BYTE PTR _item$[ebp+202], al

; 2446 : 
; 2447 : 				if ( item.m_ItemOptionEx != 0 )

  00333	84 c0		 test	 al, al
  00335	74 43		 je	 SHORT $LN83@DGGetWareh

; 2448 : 				{
; 2449 : 					item.m_Type = itype;

  00337	66 8b 85 00 ff
	ff ff		 mov	 ax, WORD PTR _itype$[ebp]

; 2450 : 					if ( g_kItemSystemFor380.Is380Item(&item)== FALSE )

  0033e	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _item$[ebp]
  00344	51		 push	 ecx
  00345	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  0034a	66 89 85 0a ff
	ff ff		 mov	 WORD PTR _item$[ebp+6], ax
  00351	e8 00 00 00 00	 call	 ?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380Item
  00356	85 c0		 test	 eax, eax
  00358	75 20		 jne	 SHORT $LN83@DGGetWareh

; 2451 : 					{
; 2452 : 						item.m_ItemOptionEx = 0;
; 2453 : 
; 2454 : 						LogAddTD("[380Item][%s][%s] Invalid 380 Item Option in Warehouse pos[%d]", lpObj->AccountID, lpObj->Name, n);

  0035a	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _n$228594[ebp]
  00360	52		 push	 edx
  00361	88 45 ce	 mov	 BYTE PTR _item$[ebp+202], al
  00364	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00367	50		 push	 eax
  00368	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  0036b	51		 push	 ecx
  0036c	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@HCBBCCKB@?$FL380Item?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5380?5It@
  00371	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00377	83 c4 10	 add	 esp, 16			; 00000010H
$LN83@DGGetWareh:

; 2455 : 					}
; 2456 : 				}
; 2457 : 			}
; 2458 : 			//SocketSystem Season 4.5 addon start
; 2459 : 			BYTE SocketOption[5];
; 2460 : 			BYTE SocketOptionIndex = 0xFF;
; 2461 : 			int i = 0;
; 2462 : 			memset(&SocketOption, 0xFF, 5);
; 2463 : 			
; 2464 : 			if ( g_SocketOption.CheckItemType(itype) == 1 )

  0037a	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _itype$[ebp]
  00380	83 c8 ff	 or	 eax, -1
  00383	52		 push	 edx
  00384	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  00389	89 45 f4	 mov	 DWORD PTR _SocketOption$228630[ebp], eax
  0038c	88 45 f8	 mov	 BYTE PTR _SocketOption$228630[ebp+4], al
  0038f	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType
  00394	3c 01		 cmp	 al, 1
  00396	75 2f		 jne	 SHORT $LN29@DGGetWareh

; 2465 : 			{
; 2466 : 				SocketOptionIndex = lpMsg->dbItems[n*dbsize+10];

  00398	0f b6 43 0a	 movzx	 eax, BYTE PTR [ebx+10]

; 2467 : 
; 2468 : 				for(i = 0; i < 5; i++)
; 2469 : 				{
; 2470 : 					SocketOption[i] =  lpMsg->dbItems[((n*dbsize)+11)+i];

  0039c	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [ebx+11]
  003a0	0f b6 53 0c	 movzx	 edx, BYTE PTR [ebx+12]
  003a4	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _SocketOptionIndex$228631[ebp], al
  003aa	0f b6 43 0d	 movzx	 eax, BYTE PTR [ebx+13]
  003ae	88 4d f4	 mov	 BYTE PTR _SocketOption$228630[ebp], cl
  003b1	0f b6 4b 0e	 movzx	 ecx, BYTE PTR [ebx+14]
  003b5	88 55 f5	 mov	 BYTE PTR _SocketOption$228630[ebp+1], dl
  003b8	0f b6 53 0f	 movzx	 edx, BYTE PTR [ebx+15]
  003bc	88 45 f6	 mov	 BYTE PTR _SocketOption$228630[ebp+2], al
  003bf	88 4d f7	 mov	 BYTE PTR _SocketOption$228630[ebp+3], cl
  003c2	88 55 f8	 mov	 BYTE PTR _SocketOption$228630[ebp+4], dl

; 2471 : 				}
; 2472 : 			}
; 2473 : 			else

  003c5	eb 10		 jmp	 SHORT $LN24@DGGetWareh
$LN29@DGGetWareh:

; 2474 : 			{
; 2475 : 				SocketOptionIndex = 0;
; 2476 : 
; 2477 : 				for(i = 0; i < 5; i++)
; 2478 : 				{
; 2479 : 					SocketOption[i] = 0xFF;

  003c7	83 c8 ff	 or	 eax, -1
  003ca	c6 85 e0 fe ff
	ff 00		 mov	 BYTE PTR _SocketOptionIndex$228631[ebp], 0
  003d1	89 45 f4	 mov	 DWORD PTR _SocketOption$228630[ebp], eax
  003d4	88 45 f8	 mov	 BYTE PTR _SocketOption$228630[ebp+4], al
$LN24@DGGetWareh:

; 2480 : 				}
; 2481 : 			}
; 2482 : 			//SocketSystem Season 4.5 addon end
; 2483 : 
; 2484 : #ifdef PERIOD
; 2485 : 			if( dbsize >= 16 )	//1.01.00

  003d7	83 bd fc fe ff
	ff 10		 cmp	 DWORD PTR _dbsize$[ebp], 16 ; 00000010H
  003de	7c 0a		 jl	 SHORT $LN21@DGGetWareh

; 2486 : 			{
; 2487 : 				item.m_PeriodItemOption = (lpMsg->dbItems[n*dbsize+DBI_OPTION380_DATA] & 6) >> 1;

  003e0	8a 43 09	 mov	 al, BYTE PTR [ebx+9]
  003e3	d0 e8		 shr	 al, 1
  003e5	24 03		 and	 al, 3
  003e7	88 45 d6	 mov	 BYTE PTR _item$[ebp+210], al
$LN21@DGGetWareh:

; 2488 : 			}
; 2489 : #endif
; 2490 : 
; 2491 : 			if ( lpMsg->DbVersion == 0 )

  003ea	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _lpMsg$GSCopy$[ebp]
  003f0	8a 81 14 0f 00
	00		 mov	 al, BYTE PTR [ecx+3860]
  003f6	84 c0		 test	 al, al
  003f8	75 26		 jne	 SHORT $LN20@DGGetWareh

; 2492 : 			{
; 2493 : 				item.Convert(itype, item.m_Option1, item.m_Option2, item.m_Option3, 0, 0, 0, NULL, 0xFF, 0, 3);

  003fa	8b 55 9a	 mov	 edx, DWORD PTR _item$[ebp+150]
  003fd	8b 45 99	 mov	 eax, DWORD PTR _item$[ebp+149]
  00400	8b 4d 98	 mov	 ecx, DWORD PTR _item$[ebp+148]
  00403	6a 03		 push	 3
  00405	6a 00		 push	 0
  00407	68 ff 00 00 00	 push	 255			; 000000ffH
  0040c	6a 00		 push	 0
  0040e	6a 00		 push	 0
  00410	6a 00		 push	 0
  00412	6a 00		 push	 0
  00414	52		 push	 edx
  00415	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _itype$[ebp]
  0041b	50		 push	 eax
  0041c	51		 push	 ecx
  0041d	52		 push	 edx
  0041e	eb 6c		 jmp	 SHORT $LN93@DGGetWareh
$LN20@DGGetWareh:

; 2494 : 			}
; 2495 : #ifdef PERIOD
; 2496 : 			else if ( lpMsg->DbVersion <= 2 )

  00420	3c 02		 cmp	 al, 2

; 2497 : 			{
; 2498 : 				item.Convert(itype, item.m_Option1, item.m_Option2, item.m_Option3, DBI_GET_NOPTION(lpMsg->dbItems[n*dbsize+7]), lpMsg->dbItems[n*dbsize+8], item.m_ItemOptionEx, 0, 0xFF, item.m_PeriodItemOption, 1);

  00422	8b 45 d6	 mov	 eax, DWORD PTR _item$[ebp+210]
  00425	77 31		 ja	 SHORT $LN18@DGGetWareh
  00427	8b 4d ce	 mov	 ecx, DWORD PTR _item$[ebp+202]
  0042a	0f b6 53 08	 movzx	 edx, BYTE PTR [ebx+8]
  0042e	6a 01		 push	 1
  00430	50		 push	 eax
  00431	8a 43 07	 mov	 al, BYTE PTR [ebx+7]
  00434	68 ff 00 00 00	 push	 255			; 000000ffH
  00439	6a 00		 push	 0
  0043b	51		 push	 ecx
  0043c	52		 push	 edx
  0043d	8b 55 9a	 mov	 edx, DWORD PTR _item$[ebp+150]
  00440	24 3f		 and	 al, 63			; 0000003fH
  00442	0f b6 c8	 movzx	 ecx, al
  00445	8b 45 99	 mov	 eax, DWORD PTR _item$[ebp+149]
  00448	51		 push	 ecx
  00449	8b 4d 98	 mov	 ecx, DWORD PTR _item$[ebp+148]
  0044c	52		 push	 edx
  0044d	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _itype$[ebp]
  00453	50		 push	 eax
  00454	51		 push	 ecx
  00455	52		 push	 edx

; 2499 : 			}
; 2500 : 			else

  00456	eb 34		 jmp	 SHORT $LN93@DGGetWareh
$LN18@DGGetWareh:

; 2501 : 			{
; 2502 : 				item.Convert(itype, item.m_Option1, item.m_Option2, item.m_Option3, DBI_GET_NOPTION(lpMsg->dbItems[n*dbsize+7]), lpMsg->dbItems[n*dbsize+8], item.m_ItemOptionEx, SocketOption, SocketOptionIndex, item.m_PeriodItemOption, 3);

  00458	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _SocketOptionIndex$228631[ebp]
  0045e	6a 03		 push	 3
  00460	50		 push	 eax
  00461	8b 45 ce	 mov	 eax, DWORD PTR _item$[ebp+202]
  00464	51		 push	 ecx
  00465	0f b6 4b 08	 movzx	 ecx, BYTE PTR [ebx+8]
  00469	8d 55 f4	 lea	 edx, DWORD PTR _SocketOption$228630[ebp]
  0046c	52		 push	 edx
  0046d	8a 53 07	 mov	 dl, BYTE PTR [ebx+7]
  00470	50		 push	 eax
  00471	51		 push	 ecx
  00472	8b 4d 9a	 mov	 ecx, DWORD PTR _item$[ebp+150]
  00475	80 e2 3f	 and	 dl, 63			; 0000003fH
  00478	0f b6 c2	 movzx	 eax, dl
  0047b	8b 55 99	 mov	 edx, DWORD PTR _item$[ebp+149]
  0047e	50		 push	 eax
  0047f	8b 45 98	 mov	 eax, DWORD PTR _item$[ebp+148]
  00482	51		 push	 ecx
  00483	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _itype$[ebp]
  00489	52		 push	 edx
  0048a	50		 push	 eax
  0048b	51		 push	 ecx
$LN93@DGGetWareh:
  0048c	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _item$[ebp]
  00492	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 2503 : 			}
; 2504 : #else
; 2505 : 			else if ( lpMsg->DbVersion <= 2 )
; 2506 : 			{
; 2507 : 				item.Convert(itype, item.m_Option1, item.m_Option2, item.m_Option3, DBI_GET_NOPTION(lpMsg->dbItems[n*dbsize+7]), lpMsg->dbItems[n*dbsize+8], item.m_ItemOptionEx, 0, 0xFF, 0, 1);
; 2508 : 			}
; 2509 : 			else
; 2510 : 			{
; 2511 : 				item.Convert(itype, item.m_Option1, item.m_Option2, item.m_Option3, DBI_GET_NOPTION(lpMsg->dbItems[n*dbsize+7]), lpMsg->dbItems[n*dbsize+8], item.m_ItemOptionEx, SocketOption, SocketOptionIndex, 0, 3);
; 2512 : 			}
; 2513 : #endif
; 2514 : 
; 2515 : 
; 2516 : 
; 2517 : 			if ( _type == ITEMGET(14,7) )

  00497	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR __type$[ebp]
  0049d	3d 07 1c 00 00	 cmp	 eax, 7175		; 00001c07H
  004a2	0f 84 9a 00 00
	00		 je	 $LN7@DGGetWareh

; 2518 : 			{
; 2519 : 				
; 2520 : 			}
; 2521 : 			else if ( (_type >= ITEMGET(14,0) && _type <= ITEMGET(14,8)) || ( _type >= ITEMGET(14,35) && _type <= ITEMGET(14,40) ) )

  004a8	3d 00 1c 00 00	 cmp	 eax, 7168		; 00001c00H
  004ad	7c 07		 jl	 SHORT $LN12@DGGetWareh
  004af	3d 08 1c 00 00	 cmp	 eax, 7176		; 00001c08H
  004b4	7e 0b		 jle	 SHORT $LN13@DGGetWareh
$LN12@DGGetWareh:
  004b6	8d 90 dd e3 ff
	ff		 lea	 edx, DWORD PTR [eax-7203]
  004bc	83 fa 05	 cmp	 edx, 5
  004bf	77 3a		 ja	 SHORT $LN14@DGGetWareh
$LN13@DGGetWareh:

; 2522 : 			{
; 2523 : 				if ( item.m_Durability == 0.0f )

  004c1	d9 85 28 ff ff
	ff		 fld	 DWORD PTR _item$[ebp+36]
  004c7	d9 ee		 fldz
  004c9	da e9		 fucompp
  004cb	df e0		 fnstsw	 ax
  004cd	f6 c4 44	 test	 ah, 68			; 00000044H
  004d0	7a 08		 jp	 SHORT $LN11@DGGetWareh

; 2524 : 				{
; 2525 : 					item.m_Durability = 1.0f;

  004d2	d9 e8		 fld1
  004d4	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _item$[ebp+36]
$LN11@DGGetWareh:

; 2526 : 				}
; 2527 : 
; 2528 : 				if ( item.m_Durability > 255.0f )

  004da	d9 85 28 ff ff
	ff		 fld	 DWORD PTR _item$[ebp+36]
  004e0	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@406fe00000000000
  004e6	df e0		 fnstsw	 ax
  004e8	f6 c4 41	 test	 ah, 65			; 00000041H
  004eb	75 55		 jne	 SHORT $LN7@DGGetWareh

; 2529 : 				{
; 2530 : 					item.m_Durability = 255.0f;

  004ed	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@437f0000
  004f3	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _item$[ebp+36]

; 2531 : 				}
; 2532 : 			}

  004f9	eb 47		 jmp	 SHORT $LN7@DGGetWareh
$LN14@DGGetWareh:

; 2533 : 			else if ( _type != ITEMGET(13,10) && _type != ITEMGET(14,29) && _type != ITEMGET(14,21) && item.m_Level == 3 && _type != ITEMGET(14,100))//Lucky Coin  (S4.5)

  004fb	3d 0a 1a 00 00	 cmp	 eax, 6666		; 00001a0aH
  00500	74 40		 je	 SHORT $LN7@DGGetWareh
  00502	3d 1d 1c 00 00	 cmp	 eax, 7197		; 00001c1dH
  00507	74 39		 je	 SHORT $LN7@DGGetWareh
  00509	3d 15 1c 00 00	 cmp	 eax, 7189		; 00001c15H
  0050e	74 32		 je	 SHORT $LN7@DGGetWareh
  00510	66 83 bd 0c ff
	ff ff 03	 cmp	 WORD PTR _item$[ebp+8], 3
  00518	75 28		 jne	 SHORT $LN7@DGGetWareh
  0051a	3d 64 1c 00 00	 cmp	 eax, 7268		; 00001c64H
  0051f	74 21		 je	 SHORT $LN7@DGGetWareh

; 2534 : 			{
; 2535 : 				if ( item.m_Durability > item.m_BaseDurability )

  00521	d9 85 28 ff ff
	ff		 fld	 DWORD PTR _item$[ebp+36]
  00527	d9 85 30 ff ff
	ff		 fld	 DWORD PTR _item$[ebp+44]
  0052d	d8 d1		 fcom	 ST(1)
  0052f	df e0		 fnstsw	 ax
  00531	dd d9		 fstp	 ST(1)
  00533	f6 c4 05	 test	 ah, 5
  00536	7a 08		 jp	 SHORT $LN86@DGGetWareh

; 2536 : 				{
; 2537 : 					item.m_Durability = item.m_BaseDurability;

  00538	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _item$[ebp+36]
  0053e	eb 02		 jmp	 SHORT $LN7@DGGetWareh
$LN86@DGGetWareh:
  00540	dd d8		 fstp	 ST(0)
$LN7@DGGetWareh:

; 2538 : 				}
; 2539 : 			}
; 2540 : 
; 2541 : 			lpObj->pWarehouse[n].m_Option1 = item.m_Option1;

  00542	8b 87 5c 0e 00
	00		 mov	 eax, DWORD PTR [edi+3676]
  00548	0f b6 4d 98	 movzx	 ecx, BYTE PTR _item$[ebp+148]
  0054c	88 8c 30 94 00
	00 00		 mov	 BYTE PTR [eax+esi+148], cl

; 2542 : 			lpObj->pWarehouse[n].m_Option2 = item.m_Option2;

  00553	8b 97 5c 0e 00
	00		 mov	 edx, DWORD PTR [edi+3676]
  00559	0f b6 45 99	 movzx	 eax, BYTE PTR _item$[ebp+149]
  0055d	88 84 32 95 00
	00 00		 mov	 BYTE PTR [edx+esi+149], al

; 2543 : 			lpObj->pWarehouse[n].m_Option3 = item.m_Option3;

  00564	8b 8f 5c 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3676]
  0056a	8a 55 9a	 mov	 dl, BYTE PTR _item$[ebp+150]
  0056d	88 94 31 96 00
	00 00		 mov	 BYTE PTR [ecx+esi+150], dl

; 2544 : 
; 2545 : 			lpObj->pWarehouse[n].m_JewelOfHarmonyOption = item.m_JewelOfHarmonyOption;

  00574	8b 87 5c 0e 00
	00		 mov	 eax, DWORD PTR [edi+3676]
  0057a	0f b6 4d c8	 movzx	 ecx, BYTE PTR _item$[ebp+196]
  0057e	88 8c 30 c4 00
	00 00		 mov	 BYTE PTR [eax+esi+196], cl

; 2546 : 			lpObj->pWarehouse[n].m_ItemOptionEx = item.m_ItemOptionEx;

  00585	8b 97 5c 0e 00
	00		 mov	 edx, DWORD PTR [edi+3676]
  0058b	0f b6 45 ce	 movzx	 eax, BYTE PTR _item$[ebp+202]
  0058f	88 84 32 ca 00
	00 00		 mov	 BYTE PTR [edx+esi+202], al

; 2547 : 
; 2548 : 			WORD hiword = MAKE_NUMBERW(lpMsg->dbItems[n*dbsize+3], lpMsg->dbItems[n*dbsize+4]);
; 2549 : 			WORD loword = MAKE_NUMBERW(lpMsg->dbItems[n*dbsize+5], lpMsg->dbItems[n*dbsize+6]);
; 2550 : 
; 2551 : 			item.m_Number = MAKE_NUMBERDW(hiword, loword);

  00596	0f b6 4b 03	 movzx	 ecx, BYTE PTR [ebx+3]
  0059a	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  0059e	66 c1 e1 08	 shl	 cx, 8
  005a2	0f b7 d1	 movzx	 edx, cx
  005a5	0f b6 4b 05	 movzx	 ecx, BYTE PTR [ebx+5]
  005a9	0b d0		 or	 edx, eax
  005ab	66 c1 e1 08	 shl	 cx, 8
  005af	0f b7 c1	 movzx	 eax, cx
  005b2	0f b6 4b 06	 movzx	 ecx, BYTE PTR [ebx+6]
  005b6	c1 e2 10	 shl	 edx, 16			; 00000010H
  005b9	0b d0		 or	 edx, eax
  005bb	0b d1		 or	 edx, ecx
  005bd	89 95 04 ff ff
	ff		 mov	 DWORD PTR _item$[ebp], edx

; 2552 : 
; 2553 : 			gObjWarehouseInsertItemPos(lpObj->m_Index, item, n, -1);

  005c3	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _n$228594[ebp]
  005c9	6a ff		 push	 -1
  005cb	52		 push	 edx
  005cc	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  005d2	8b fc		 mov	 edi, esp
  005d4	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  005d9	8d b5 04 ff ff
	ff		 lea	 esi, DWORD PTR _item$[ebp]
  005df	f3 a5		 rep movsd
  005e1	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR _lpObj$[ebp]
  005e7	8b 06		 mov	 eax, DWORD PTR [esi]
  005e9	50		 push	 eax
  005ea	e8 00 00 00 00	 call	 ?gObjWarehouseInsertItemPos@@YAEHVCItem@@HH@Z ; gObjWarehouseInsertItemPos

; 2554 : 			gObjWarehouseItemSet(lpObj->m_Index, n, 1);

  005ef	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _n$228594[ebp]
  005f5	8b 16		 mov	 edx, DWORD PTR [esi]
  005f7	6a 01		 push	 1
  005f9	51		 push	 ecx
  005fa	52		 push	 edx
  005fb	e8 00 00 00 00	 call	 ?gObjWarehouseItemSet@@YAXHHE@Z ; gObjWarehouseItemSet
  00600	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR tv1235[ebp]
  00606	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR _lpObj$[ebp]
  0060c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
$LN58@DGGetWareh:

; 2327 : 	}
; 2328 : 
; 2329 : 	for ( int n=0;n<WAREHOUSE_SIZE;n++)

  00612	ff 85 f4 fe ff
	ff		 inc	 DWORD PTR _n$228594[ebp]
  00618	83 85 f0 fe ff
	ff 10		 add	 DWORD PTR tv1713[ebp], 16 ; 00000010H
  0061f	83 85 e8 fe ff
	ff 0a		 add	 DWORD PTR tv1711[ebp], 10 ; 0000000aH
  00626	03 9d fc fe ff
	ff		 add	 ebx, DWORD PTR _dbsize$[ebp]
  0062c	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00632	89 b5 dc fe ff
	ff		 mov	 DWORD PTR tv1235[ebp], esi
  00638	81 fe c0 c6 00
	00		 cmp	 esi, 50880		; 0000c6c0H
  0063e	0f 8c 00 fb ff
	ff		 jl	 $LL81@DGGetWareh

; 2555 : 		}
; 2556 : 	}
; 2557 : 
; 2558 : 	pResult.h.c = 0xC3;
; 2559 : 	pResult.h.headcode = 0x30;
; 2560 : 	pResult.h.size = sizeof(PMSG_TALKRESULT);
; 2561 : 	pResult.result = 2;
; 2562 : #ifdef DEBUG_CODE
; 2563 : 	//if(lpObj->TESTW == 0)	//DeBug
; 2564 : #endif
; 2565 : 
; 2566 : 	DataSend(lpObj->m_Index, (LPBYTE)&pResult, pResult.h.size);	//Пакет на открытие окна сундука

  00644	6a 0b		 push	 11			; 0000000bH
  00646	8d 45 dc	 lea	 eax, DWORD PTR _pResult$[ebp]
  00649	c6 45 dc c3	 mov	 BYTE PTR _pResult$[ebp], 195 ; 000000c3H
  0064d	66 c7 45 dd 0b
	30		 mov	 WORD PTR _pResult$[ebp+1], 12299 ; 0000300bH
  00653	c6 45 df 02	 mov	 BYTE PTR _pResult$[ebp+3], 2
  00657	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00659	50		 push	 eax
  0065a	51		 push	 ecx
  0065b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2567 : 
; 2568 : 	GCUserWarehouseSend(&gObj[aIndex]);//Отсылает пакет вещей в Клиент

  00660	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00666	8b b5 d8 fe ff
	ff		 mov	 esi, DWORD PTR tv807[ebp]
  0066c	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?GCUserWarehouseSend@@YAXPAUOBJECTSTRUCT@@@Z ; GCUserWarehouseSend
  00675	83 c4 10	 add	 esp, 16			; 00000010H

; 2569 : 
; 2570 : 	if ( bCanWarehouseLock == TRUE )

  00678	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?bCanWarehouseLock@@3HA, 1 ; bCanWarehouseLock
  0067f	75 41		 jne	 SHORT $LN2@DGGetWareh

; 2571 : 	{
; 2572 : 		if ( gObj[aIndex].WarehousePW > 0 )

  00681	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00686	66 83 bc 06 66
	0e 00 00 00	 cmp	 WORD PTR [esi+eax+3686], 0
  0068f	7e 20		 jle	 SHORT $LN5@DGGetWareh

; 2573 : 		{
; 2574 : 			if ( gObj[aIndex].WarehouseLock == 0 )

  00691	80 bc 06 68 0e
	00 00 00	 cmp	 BYTE PTR [esi+eax+3688], 0
  00699	75 0b		 jne	 SHORT $LN4@DGGetWareh

; 2575 : 			{
; 2576 : 				GCWarehouseStateSend(aIndex, 12);

  0069b	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _aIndex$[ebp]
  006a1	6a 0c		 push	 12			; 0000000cH
  006a3	51		 push	 ecx

; 2577 : 			}
; 2578 : 			else

  006a4	eb 14		 jmp	 SHORT $LN94@DGGetWareh
$LN4@DGGetWareh:

; 2579 : 			{
; 2580 : 				GCWarehouseStateSend(aIndex, 1);

  006a6	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _aIndex$[ebp]
  006ac	6a 01		 push	 1
  006ae	52		 push	 edx

; 2581 : 			}
; 2582 : 		}
; 2583 : 		else

  006af	eb 09		 jmp	 SHORT $LN94@DGGetWareh
$LN5@DGGetWareh:

; 2584 : 		{
; 2585 : 			GCWarehouseStateSend(aIndex, 0);

  006b1	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _aIndex$[ebp]
  006b7	6a 00		 push	 0
  006b9	50		 push	 eax
$LN94@DGGetWareh:
  006ba	e8 00 00 00 00	 call	 ?GCWarehouseStateSend@@YAXHE@Z ; GCWarehouseStateSend
  006bf	83 c4 08	 add	 esp, 8
$LN2@DGGetWareh:

; 2586 : 		}
; 2587 : 	}
; 2588 : 
; 2589 : 	lpObj->LoadWareHouseInfo = true;
; 2590 : 	lpObj->m_ReqWarehouseOpen = false;
; 2591 : 	gObjRequestPetItemInfo(lpObj->m_Index, 1);

  006c2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  006c4	6a 01		 push	 1
  006c6	51		 push	 ecx
  006c7	c6 87 54 10 00
	00 01		 mov	 BYTE PTR [edi+4180], 1
  006ce	c6 87 1c 11 00
	00 00		 mov	 BYTE PTR [edi+4380], 0
  006d5	e8 00 00 00 00	 call	 ?gObjRequestPetItemInfo@@YAXHH@Z ; gObjRequestPetItemInfo
  006da	83 c4 08	 add	 esp, 8

; 2592 : 
; 2593 : 	if ( szAuthKey[2] != AUTHKEY2 )

  006dd	80 3d 02 00 00
	00 be		 cmp	 BYTE PTR ?szAuthKey@@3PADA+2, -66 ; ffffffbeH
  006e4	74 05		 je	 SHORT $LN1@DGGetWareh

; 2594 : 	{
; 2595 : 		DestroyGIocp();

  006e6	e8 00 00 00 00	 call	 ?DestroyGIocp@@YAXXZ	; DestroyGIocp
$LN1@DGGetWareh:

; 2596 : 	}
; 2597 : }

  006eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006ee	5f		 pop	 edi
  006ef	5e		 pop	 esi
  006f0	33 cd		 xor	 ecx, ebp
  006f2	5b		 pop	 ebx
  006f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006f8	8b e5		 mov	 esp, ebp
  006fa	5d		 pop	 ebp
  006fb	c3		 ret	 0
?DGGetWarehouseList@@YAXPAUSDHP_GETWAREHOUSEDB_SAVE@@@Z ENDP ; DGGetWarehouseList
_TEXT	ENDS
PUBLIC	??_C@_0CI@MIGOHDHJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5WareHouse?5Save?5Fail?5?3?5N@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GDSetWarehouseList@@YAXH@Z			; GDSetWarehouseList
EXTRN	?gObjWarehouseTextSave@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjWarehouseTextSave
EXTRN	?GDSetGuildWarehouseList@CGuildBank@@QAEXH@Z:PROC ; CGuildBank::GDSetGuildWarehouseList
;	COMDAT ??_C@_0CI@MIGOHDHJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5WareHouse?5Save?5Fail?5?3?5N@
CONST	SEGMENT
??_C@_0CI@MIGOHDHJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5WareHouse?5Save?5Fail?5?3?5N@ DB '['
	DB	'%s][%s] WareHouse Save Fail : Not Open', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GDSetWarehouseList@@YAXH@Z
_TEXT	SEGMENT
_pMsg$ = -3872						; size = 3868
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GDSetWarehouseList@@YAXH@Z PROC			; GDSetWarehouseList, COMDAT

; 2654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 0f 00
	00		 sub	 esp, 3872		; 00000f20H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2655 : #if(DEV_GUILDBANK)
; 2656 : 	if(g_GuildBank.m_iEnable == 1 && gObj[aIndex].m_bGuildBank == true)

  00013	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_GuildBank@@3VCGuildBank@@A, 1
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00023	75 2c		 jne	 SHORT $LN2@GDSetWareh
  00025	8b cf		 mov	 ecx, edi
  00027	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0002d	80 bc 01 25 2b
	00 00 01	 cmp	 BYTE PTR [ecx+eax+11045], 1
  00035	75 1a		 jne	 SHORT $LN2@GDSetWareh

; 2657 : 	{
; 2658 : 		g_GuildBank.GDSetGuildWarehouseList(aIndex);

  00037	57		 push	 edi
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GuildBank@@3VCGuildBank@@A ; g_GuildBank
  0003d	e8 00 00 00 00	 call	 ?GDSetGuildWarehouseList@CGuildBank@@QAEXH@Z ; CGuildBank::GDSetGuildWarehouseList
  00042	5f		 pop	 edi

; 2698 : 
; 2699 : #if(DEV_GUILDBANK)
; 2700 : /* Guild Bank Fix */
; 2701 : 	/*LPOBJ lpObj = &gObj[aIndex];
; 2702 : 
; 2703 : 	if(lpObj->Type == OBJ_USER)
; 2704 : 	{
; 2705 : 		for(int i=0;i<WAREHOUSE_SIZE;i++)
; 2706 : 		{
; 2707 : 			lpObj->pWarehouse[i].Clear();
; 2708 : 		}
; 2709 : 	}*/
; 2710 : #endif
; 2711 : }

  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN2@GDSetWareh:
  00051	56		 push	 esi

; 2659 : 		/* Guild Bank Fix */
; 2660 : 		/*LPOBJ lpObj = &gObj[aIndex];
; 2661 : 
; 2662 : 		if(lpObj->Type == OBJ_USER)
; 2663 : 		{
; 2664 : 			for(int i=0;i<WAREHOUSE_SIZE;i++)
; 2665 : 			{
; 2666 : 				lpObj->pWarehouse[i].Clear();
; 2667 : 			}
; 2668 : 		}*/
; 2669 : 
; 2670 : 		return;
; 2671 : 	}
; 2672 : #endif
; 2673 : 
; 2674 : 	SDHP_GETWAREHOUSEDB_SAVE pMsg;
; 2675 : 	
; 2676 : 	if ( gObj[aIndex].LoadWareHouseInfo == false )

  00052	8b f7		 mov	 esi, edi
  00054	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0005a	80 bc 06 54 10
	00 00 00	 cmp	 BYTE PTR [esi+eax+4180], 0
  00062	75 28		 jne	 SHORT $LN1@GDSetWareh

; 2677 : 	{
; 2678 : 		LogAddTD("[%s][%s] WareHouse Save Fail : Not Open",	gObj[aIndex].AccountID, gObj[aIndex].Name);

  00064	8d 54 06 77	 lea	 edx, DWORD PTR [esi+eax+119]
  00068	52		 push	 edx
  00069	8d 44 06 6c	 lea	 eax, DWORD PTR [esi+eax+108]
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@MIGOHDHJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5WareHouse?5Save?5Fail?5?3?5N@
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2697 : 	gObjWarehouseTextSave(&gObj[aIndex]);

  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	5e		 pop	 esi
  0007d	5f		 pop	 edi

; 2698 : 
; 2699 : #if(DEV_GUILDBANK)
; 2700 : /* Guild Bank Fix */
; 2701 : 	/*LPOBJ lpObj = &gObj[aIndex];
; 2702 : 
; 2703 : 	if(lpObj->Type == OBJ_USER)
; 2704 : 	{
; 2705 : 		for(int i=0;i<WAREHOUSE_SIZE;i++)
; 2706 : 		{
; 2707 : 			lpObj->pWarehouse[i].Clear();
; 2708 : 		}
; 2709 : 	}*/
; 2710 : #endif
; 2711 : }

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00081	33 cd		 xor	 ecx, ebp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
$LN1@GDSetWareh:

; 2679 : 		return;
; 2680 : 	}
; 2681 : 
; 2682 : 	memcpy(pMsg.AccountID, gObj[aIndex].AccountID, sizeof(pMsg.AccountID));

  0008c	8b 4c 06 6c	 mov	 ecx, DWORD PTR [esi+eax+108]
  00090	89 8d e4 f0 ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00096	8b 54 06 70	 mov	 edx, DWORD PTR [esi+eax+112]
  0009a	89 95 e8 f0 ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], edx
  000a0	0f b7 4c 06 74	 movzx	 ecx, WORD PTR [esi+eax+116]
  000a5	66 89 8d ec f0
	ff ff		 mov	 WORD PTR _pMsg$[ebp+12], cx

; 2683 : 	pMsg.aIndex = aIndex;

  000ac	66 89 bd ee f0
	ff ff		 mov	 WORD PTR _pMsg$[ebp+14], di

; 2684 : 	pMsg.h.c = 0xC2;

  000b3	c7 85 e0 f0 ff
	ff c2 0f 1c 09	 mov	 DWORD PTR _pMsg$[ebp], 152833986 ; 091c0fc2H

; 2685 : 	pMsg.h.headcode = 0x09;
; 2686 : 	pMsg.h.sizeH = HIBYTE(sizeof(pMsg));
; 2687 : 	pMsg.h.sizeL = LOBYTE(sizeof(pMsg));
; 2688 : 	pMsg.Money = gObj[aIndex].WarehouseMoney;

  000bd	8b 94 06 6c 0e
	00 00		 mov	 edx, DWORD PTR [esi+eax+3692]
  000c4	89 95 f0 f0 ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+16], edx

; 2689 : 	pMsg.pw = gObj[aIndex].WarehousePW;

  000ca	0f b7 8c 06 66
	0e 00 00	 movzx	 ecx, WORD PTR [esi+eax+3686]
  000d2	66 89 4d f6	 mov	 WORD PTR _pMsg$[ebp+3862], cx

; 2690 : 
; 2691 : 	pMsg.Number	= gObj[aIndex].WarehouseNumber;

  000d6	8b 94 06 e8 2a
	00 00		 mov	 edx, DWORD PTR [esi+eax+10984]
  000dd	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+3864], edx

; 2692 : 
; 2693 : 	ItemByteConvert16(pMsg.dbItems, gObj[aIndex].pWarehouse, WAREHOUSE_SIZE);

  000e0	8b 84 06 5c 0e
	00 00		 mov	 eax, DWORD PTR [esi+eax+3676]
  000e7	68 f0 00 00 00	 push	 240			; 000000f0H
  000ec	50		 push	 eax
  000ed	8d 8d f4 f0 ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+20]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?ItemByteConvert16@@YAXPAEQAVCItem@@H@Z ; ItemByteConvert16
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2694 : 
; 2695 : 	cDBSMng.Send((char*)&pMsg, sizeof(pMsg));

  000fc	68 1c 0f 00 00	 push	 3868			; 00000f1cH
  00101	8d 95 e0 f0 ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp]
  00107	52		 push	 edx
  00108	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0010d	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 2696 : 	gObjSavePetItemInfo(aIndex, 1);

  00112	6a 01		 push	 1
  00114	57		 push	 edi
  00115	e8 00 00 00 00	 call	 ?gObjSavePetItemInfo@@YAXHH@Z ; gObjSavePetItemInfo

; 2697 : 	gObjWarehouseTextSave(&gObj[aIndex]);

  0011a	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00120	56		 push	 esi
  00121	e8 00 00 00 00	 call	 ?gObjWarehouseTextSave@@YAXPAUOBJECTSTRUCT@@@Z ; gObjWarehouseTextSave

; 2698 : 
; 2699 : #if(DEV_GUILDBANK)
; 2700 : /* Guild Bank Fix */
; 2701 : 	/*LPOBJ lpObj = &gObj[aIndex];
; 2702 : 
; 2703 : 	if(lpObj->Type == OBJ_USER)
; 2704 : 	{
; 2705 : 		for(int i=0;i<WAREHOUSE_SIZE;i++)
; 2706 : 		{
; 2707 : 			lpObj->pWarehouse[i].Clear();
; 2708 : 		}
; 2709 : 	}*/
; 2710 : #endif
; 2711 : }

  00126	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00129	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012c	5e		 pop	 esi
  0012d	33 cd		 xor	 ecx, ebp
  0012f	5f		 pop	 edi
  00130	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
?GDSetWarehouseList@@YAXH@Z ENDP			; GDSetWarehouseList
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	??_C@_0FG@OKDBPAON@?$FLMapServerMng?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5GJSetChar@ ; `string'
PUBLIC	??_C@_0EM@LOGFDPHA@?$FLMapServerMng?$FN?5GJSetCharacterInf@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z	; GJSetCharacterInfo
EXTRN	?DB_Save@CZtGDManager@@QAEXH@Z:PROC		; CZtGDManager::DB_Save
EXTRN	?DGSendInformation@cWinQuestSystem@@QAEXH@Z:PROC ; cWinQuestSystem::DGSendInformation
EXTRN	?SendSaveData@cSystemOfRage@@QAEXH@Z:PROC	; cSystemOfRage::SendSaveData
EXTRN	?gSystemOfRage@@3VcSystemOfRage@@A:BYTE		; gSystemOfRage
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
EXTRN	?GDReqSaveContributePoint@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::GDReqSaveContributePoint
EXTRN	?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::GDRequestMasterLevelInfoSave
EXTRN	?Quest3rdSaveInfo@CQuestUtil@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CQuestUtil::Quest3rdSaveInfo
EXTRN	?GDReqLuckyItemInsert2nd@LuckyItemManager@@QAEXH@Z:PROC ; LuckyItemManager::GDReqLuckyItemInsert2nd
EXTRN	?gObjStatTextSave@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjStatTextSave
EXTRN	?gObjItemTextSave@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjItemTextSave
EXTRN	?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z:PROC	; MagicByteConvert
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT ??_C@_0FG@OKDBPAON@?$FLMapServerMng?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5GJSetChar@
CONST	SEGMENT
??_C@_0FG@OKDBPAON@?$FLMapServerMng?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5GJSetChar@ DB '['
	DB	'MapServerMng][%s][%s] GJSetCharacterInfo() - MapServerMove Ch'
	DB	'aracter Save Start (%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@LOGFDPHA@?$FLMapServerMng?$FN?5GJSetCharacterInf@
CONST	SEGMENT
??_C@_0EM@LOGFDPHA@?$FLMapServerMng?$FN?5GJSetCharacterInf@ DB '[MapServe'
	DB	'rMng] GJSetCharacterInfo() - Inventory Already Saved [%s][%s]'
	DB	' (%d)', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
tv422 = -4492						; size = 4
tv633 = -4488						; size = 4
tv631 = -4488						; size = 4
tv626 = -4488						; size = 4
tv624 = -4488						; size = 4
tv619 = -4488						; size = 4
tv617 = -4488						; size = 4
tv612 = -4488						; size = 4
tv610 = -4488						; size = 4
tv636 = -4482						; size = 2
tv629 = -4482						; size = 2
tv622 = -4482						; size = 2
tv615 = -4482						; size = 2
_pCSave$ = -4480					; size = 4476
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_aIndex$ = 12						; size = 4
_bMapServerMove$ = 16					; size = 4
?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z PROC	; GJSetCharacterInfo, COMDAT

; 2091 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 8c 11 00 00	 mov	 eax, 4492		; 0000118cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 2092 : 	if ( lpObj->m_bMapSvrMoveQuit == true )

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	38 83 e4 1b 00
	00		 cmp	 BYTE PTR [ebx+7140], al
  00026	75 2a		 jne	 SHORT $LN10@GJSetChara

; 2093 : 	{
; 2094 : 		LogAddC(2,"[MapServerMng] GJSetCharacterInfo() - Inventory Already Saved [%s][%s] (%d)",
; 2095 : 			lpObj->AccountID, lpObj->Name, lpObj->m_Index);

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	50		 push	 eax
  0002b	8d 4b 77	 lea	 ecx, DWORD PTR [ebx+119]
  0002e	51		 push	 ecx
  0002f	83 c3 6c	 add	 ebx, 108		; 0000006cH
  00032	53		 push	 ebx
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LOGFDPHA@?$FLMapServerMng?$FN?5GJSetCharacterInf@
  00038	6a 02		 push	 2
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00040	83 c4 14	 add	 esp, 20			; 00000014H
  00043	5b		 pop	 ebx

; 2250 : }

  00044	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00047	33 cd		 xor	 ecx, ebp
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN10@GJSetChara:

; 2096 : 
; 2097 : 		return;
; 2098 : 	}
; 2099 : 
; 2100 : 	if ( bMapServerMove == TRUE )

  00052	39 45 10	 cmp	 DWORD PTR _bMapServerMove$[ebp], eax
  00055	75 21		 jne	 SHORT $LN9@GJSetChara

; 2101 : 	{
; 2102 : 		lpObj->m_bMapSvrMoveQuit = TRUE;
; 2103 : 
; 2104 : 		LogAddC(5, "[MapServerMng][%s][%s] GJSetCharacterInfo() - MapServerMove Character Save Start (%d)",
; 2105 : 			lpObj->AccountID, lpObj->Name, lpObj->m_Index);

  00057	8b 13		 mov	 edx, DWORD PTR [ebx]
  00059	52		 push	 edx
  0005a	88 83 e4 1b 00
	00		 mov	 BYTE PTR [ebx+7140], al
  00060	8d 43 77	 lea	 eax, DWORD PTR [ebx+119]
  00063	50		 push	 eax
  00064	8d 4b 6c	 lea	 ecx, DWORD PTR [ebx+108]
  00067	51		 push	 ecx
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@OKDBPAON@?$FLMapServerMng?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5GJSetChar@
  0006d	6a 05		 push	 5
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00075	83 c4 14	 add	 esp, 20			; 00000014H
$LN9@GJSetChara:

; 2106 : 	}
; 2107 : 
; 2108 : 
; 2109 : 	if ( lpObj->m_IfState.use > 0 && lpObj->m_IfState.type == 6 && lpObj->m_IfState.state == 1)

  00078	8b 83 1c 0e 00
	00		 mov	 eax, DWORD PTR [ebx+3612]
  0007e	a8 03		 test	 al, 3
  00080	76 22		 jbe	 SHORT $LN8@GJSetChara
  00082	8b d0		 mov	 edx, eax
  00084	81 e2 c0 ff 00
	00		 and	 edx, 65472		; 0000ffc0H
  0008a	81 fa 80 01 00
	00		 cmp	 edx, 384		; 00000180H
  00090	75 12		 jne	 SHORT $LN8@GJSetChara
  00092	24 3c		 and	 al, 60			; 0000003cH
  00094	3c 04		 cmp	 al, 4
  00096	75 0c		 jne	 SHORT $LN8@GJSetChara

; 2110 : 	{
; 2111 : 		GDSetWarehouseList(aIndex);

  00098	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?GDSetWarehouseList@@YAXH@Z ; GDSetWarehouseList
  000a1	83 c4 04	 add	 esp, 4
$LN8@GJSetChara:

; 2112 : 	}
; 2113 : 
; 2114 : 	if ( szAuthKey[1] != AUTHKEY1 )

  000a4	80 3d 01 00 00
	00 23		 cmp	 BYTE PTR ?szAuthKey@@3PADA+1, 35 ; 00000023H
  000ab	74 05		 je	 SHORT $LN7@GJSetChara

; 2115 : 	{
; 2116 : 		DestroyGIocp();

  000ad	e8 00 00 00 00	 call	 ?DestroyGIocp@@YAXXZ	; DestroyGIocp
$LN7@GJSetChara:

; 2117 : 	}
; 2118 : 
; 2119 : 	SDHP_DBCHAR_INFOSAVE pCSave;
; 2120 :  
; 2121 : 	pCSave.h.c = 0xC2;
; 2122 : 	pCSave.h.headcode = 0x07;
; 2123 : 	pCSave.h.sizeH = sizeof(SDHP_DBCHAR_INFOSAVE) >> 8;
; 2124 : 	pCSave.h.sizeL = sizeof(SDHP_DBCHAR_INFOSAVE) & 0xFF;
; 2125 : 
; 2126 : 
; 2127 : 	pCSave.AccountID[MAX_ACCOUNT_LEN] = 0;
; 2128 : 	memcpy(pCSave.AccountID, lpObj->AccountID, sizeof(pCSave.AccountID)-1);

  000b2	0f b7 43 74	 movzx	 eax, WORD PTR [ebx+116]

; 2129 : 	pCSave.Name[MAX_ACCOUNT_LEN] = 0;
; 2130 : 	memcpy(pCSave.Name, lpObj->Name, sizeof(pCSave.Name)-1);
; 2131 : 	pCSave.Brother[MAX_ACCOUNT_LEN] = 0;
; 2132 : 	memcpy(pCSave.Brother, lpObj->Brotherhood, sizeof(pCSave.Brother)-1);
; 2133 : 
; 2134 : 	pCSave.Class = lpObj->DbClass;
; 2135 : 	pCSave.Level = lpObj->Level;
; 2136 : 	pCSave.LevelUpPoint = lpObj->LevelUpPoint;
; 2137 : 	pCSave.Exp = lpObj->Experience;
; 2138 : 	pCSave.NextExp = lpObj->NextExp;
; 2139 : 	pCSave.Money = lpObj->Money;
; 2140 : 	pCSave.Str = lpObj->Strength;
; 2141 : 	pCSave.Dex = lpObj->Dexterity;
; 2142 : 	pCSave.Vit = lpObj->Vitality;
; 2143 : 	pCSave.Energy = lpObj->Energy;
; 2144 : 	pCSave.Life = (WORD)(lpObj->Life*10.0f);

  000b6	d9 83 fc 00 00
	00		 fld	 DWORD PTR [ebx+252]
  000bc	8b 4b 6c	 mov	 ecx, DWORD PTR [ebx+108]
  000bf	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  000c5	8b 53 70	 mov	 edx, DWORD PTR [ebx+112]
  000c8	d9 bd 7e ee ff
	ff		 fnstcw	 WORD PTR tv636[ebp]
  000ce	66 89 85 8c ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+12], ax
  000d5	dc c9		 fmul	 ST(1), ST(0)
  000d7	89 8d 84 ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+4], ecx
  000dd	d9 c9		 fxch	 ST(1)
  000df	8b 4b 77	 mov	 ecx, DWORD PTR [ebx+119]
  000e2	89 95 88 ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+8], edx
  000e8	8b 53 7b	 mov	 edx, DWORD PTR [ebx+123]
  000eb	8d 43 77	 lea	 eax, DWORD PTR [ebx+119]
  000ee	89 85 74 ee ff
	ff		 mov	 DWORD PTR tv422[ebp], eax
  000f4	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000f8	66 89 85 97 ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+23], ax
  000ff	0f b7 83 75 28
	00 00		 movzx	 eax, WORD PTR [ebx+10357]
  00106	66 89 45 e8	 mov	 WORD PTR _pCSave$[ebp+4456], ax
  0010a	8b 83 c0 00 00
	00		 mov	 eax, DWORD PTR [ebx+192]
  00110	89 85 a0 ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+32], eax
  00116	8b 83 f0 00 00
	00		 mov	 eax, DWORD PTR [ebx+240]
  0011c	89 85 ac ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+44], eax
  00122	0f b7 83 f8 00
	00 00		 movzx	 eax, WORD PTR [ebx+248]
  00129	66 89 85 b4 ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+52], ax
  00130	0f b7 85 7e ee
	ff ff		 movzx	 eax, WORD PTR tv636[ebp]
  00137	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0013c	89 85 78 ee ff
	ff		 mov	 DWORD PTR tv633[ebp], eax
  00142	89 95 93 ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+19], edx
  00148	8b 93 71 28 00
	00		 mov	 edx, DWORD PTR [ebx+10353]
  0014e	d9 ad 78 ee ff
	ff		 fldcw	 WORD PTR tv633[ebp]
  00154	89 55 e4	 mov	 DWORD PTR _pCSave$[ebp+4452], edx
  00157	0f b7 93 be 00
	00 00		 movzx	 edx, WORD PTR [ebx+190]
  0015e	66 89 95 9a ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+26], dx
  00165	8b 93 cc 00 00
	00		 mov	 edx, DWORD PTR [ebx+204]
  0016b	db 9d 78 ee ff
	ff		 fistp	 DWORD PTR tv631[ebp]
  00171	89 95 a8 ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+40], edx
  00177	0f b7 93 f6 00
	00 00		 movzx	 edx, WORD PTR [ebx+246]
  0017e	66 89 95 b2 ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+50], dx
  00185	d9 ad 7e ee ff
	ff		 fldcw	 WORD PTR tv636[ebp]
  0018b	0f b7 95 78 ee
	ff ff		 movzx	 edx, WORD PTR tv631[ebp]
  00192	89 8d 8f ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+15], ecx
  00198	8b 8b 6d 28 00
	00		 mov	 ecx, DWORD PTR [ebx+10349]
  0019e	89 4d e0	 mov	 DWORD PTR _pCSave$[ebp+4448], ecx
  001a1	0f b6 8b ba 00
	00 00		 movzx	 ecx, BYTE PTR [ebx+186]

; 2145 : 	pCSave.MaxLife =(WORD)(lpObj->MaxLife*10.0f);

  001a8	d9 83 00 01 00
	00		 fld	 DWORD PTR [ebx+256]
  001ae	d9 bd 7e ee ff
	ff		 fnstcw	 WORD PTR tv629[ebp]
  001b4	0f b7 85 7e ee
	ff ff		 movzx	 eax, WORD PTR tv629[ebp]
  001bb	d8 c9		 fmul	 ST(0), ST(1)
  001bd	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001c2	89 85 78 ee ff
	ff		 mov	 DWORD PTR tv626[ebp], eax
  001c8	88 8d 9c ee ff
	ff		 mov	 BYTE PTR _pCSave$[ebp+28], cl
  001ce	8b 8b c8 00 00
	00		 mov	 ecx, DWORD PTR [ebx+200]
  001d4	d9 ad 78 ee ff
	ff		 fldcw	 WORD PTR tv626[ebp]
  001da	89 8d a4 ee ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+36], ecx
  001e0	0f b7 8b f4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+244]
  001e7	66 89 8d b0 ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+48], cx
  001ee	db 9d 78 ee ff
	ff		 fistp	 DWORD PTR tv624[ebp]
  001f4	0f b7 8b fa 00
	00 00		 movzx	 ecx, WORD PTR [ebx+250]
  001fb	0f b7 85 78 ee
	ff ff		 movzx	 eax, WORD PTR tv624[ebp]
  00202	d9 ad 7e ee ff
	ff		 fldcw	 WORD PTR tv629[ebp]
  00208	66 89 85 ba ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+58], ax
  0020f	66 89 8d b6 ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+54], cx
  00216	c7 85 80 ee ff
	ff c2 11 7c 07	 mov	 DWORD PTR _pCSave$[ebp], 125571522 ; 077c11c2H
  00220	c6 85 8e ee ff
	ff 00		 mov	 BYTE PTR _pCSave$[ebp+14], 0
  00227	c6 85 99 ee ff
	ff 00		 mov	 BYTE PTR _pCSave$[ebp+25], 0
  0022e	c6 45 ea 00	 mov	 BYTE PTR _pCSave$[ebp+4458], 0
  00232	66 89 95 b8 ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+56], dx

; 2146 : 	pCSave.Mana = (WORD)(lpObj->Mana*10.0f);

  00239	d9 83 10 01 00
	00		 fld	 DWORD PTR [ebx+272]
  0023f	d9 bd 7e ee ff
	ff		 fnstcw	 WORD PTR tv622[ebp]
  00245	d8 c9		 fmul	 ST(0), ST(1)
  00247	0f b7 85 7e ee
	ff ff		 movzx	 eax, WORD PTR tv622[ebp]
  0024e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00253	89 85 78 ee ff
	ff		 mov	 DWORD PTR tv619[ebp], eax
  00259	d9 ad 78 ee ff
	ff		 fldcw	 WORD PTR tv619[ebp]
  0025f	db 9d 78 ee ff
	ff		 fistp	 DWORD PTR tv617[ebp]
  00265	0f b7 8d 78 ee
	ff ff		 movzx	 ecx, WORD PTR tv617[ebp]
  0026c	66 89 8d bc ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+60], cx
  00273	d9 ad 7e ee ff
	ff		 fldcw	 WORD PTR tv622[ebp]

; 2147 : 	pCSave.MaxMana = (WORD)(lpObj->MaxMana*10.0f);

  00279	d8 8b 14 01 00
	00		 fmul	 DWORD PTR [ebx+276]
  0027f	d9 bd 7e ee ff
	ff		 fnstcw	 WORD PTR tv615[ebp]
  00285	0f b7 85 7e ee
	ff ff		 movzx	 eax, WORD PTR tv615[ebp]
  0028c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00291	89 85 78 ee ff
	ff		 mov	 DWORD PTR tv612[ebp], eax

; 2148 : 	ItemByteConvert16((LPBYTE)pCSave.dbInventory , lpObj->pInventory, INVENTORY_SIZE);

  00297	8b 83 24 0e 00
	00		 mov	 eax, DWORD PTR [ebx+3620]
  0029d	68 ec 00 00 00	 push	 236			; 000000ecH
  002a2	d9 ad 78 ee ff
	ff		 fldcw	 WORD PTR tv612[ebp]
  002a8	50		 push	 eax
  002a9	8d 8d c0 ee ff
	ff		 lea	 ecx, DWORD PTR _pCSave$[ebp+64]
  002af	51		 push	 ecx
  002b0	db 9d 78 ee ff
	ff		 fistp	 DWORD PTR tv610[ebp]
  002b6	0f b7 95 78 ee
	ff ff		 movzx	 edx, WORD PTR tv610[ebp]
  002bd	66 89 95 be ee
	ff ff		 mov	 WORD PTR _pCSave$[ebp+62], dx
  002c4	d9 ad 7e ee ff
	ff		 fldcw	 WORD PTR tv615[ebp]
  002ca	e8 00 00 00 00	 call	 ?ItemByteConvert16@@YAXPAEQAVCItem@@H@Z ; ItemByteConvert16

; 2149 : 	MagicByteConvert(pCSave.dbMagicList, lpObj->Magic, MAGIC_SIZE);

  002cf	8b 93 c8 04 00
	00		 mov	 edx, DWORD PTR [ebx+1224]
  002d5	68 96 00 00 00	 push	 150			; 00000096H
  002da	52		 push	 edx
  002db	8d 85 80 fd ff
	ff		 lea	 eax, DWORD PTR _pCSave$[ebp+3840]
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 ?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z ; MagicByteConvert

; 2150 : 	pCSave.MapNumber = lpObj->MapNumber;
; 2151 : 	pCSave.MapX = lpObj->X;
; 2152 : 	pCSave.MapY = lpObj->Y;
; 2153 : 	pCSave.Dir = lpObj->Dir;
; 2154 : 	pCSave.PkCount = lpObj->m_PK_Count;
; 2155 : 	pCSave.PkLevel = lpObj->m_PK_Level;
; 2156 : 	pCSave.PkTime = lpObj->m_PK_Time;
; 2157 : 	pCSave.Leadership = lpObj->Leadership;
; 2158 : 	pCSave.ChatLitmitTime = lpObj->ChatLitmitTime;
; 2159 : 	pCSave.iFruitPoint = lpObj->iFruitPoint;
; 2160 : 	pCSave.PCPoint = lpObj->PCPoint;
; 2161 : 	pCSave.ZtFreePoints = lpObj->ZtFreePoints;
; 2162 : 	pCSave.Reset = lpObj->Reset;
; 2163 : 	pCSave.GReset = lpObj->GReset;
; 2164 : 	pCSave.ZtQuestNum = lpObj->ZtQuestNum;
; 2165 : 	pCSave.ZtQuestKill = lpObj->ZtQuestKill;
; 2166 : 
; 2167 : 	//if(g_ZtLicense.CheckUser(SILVER1) || g_ZtLicense.CheckUser(SILVER2))
; 2168 : 	//{
; 2169 : 	//	pCSave.PremiumTime = time(NULL) + lpObj->PremiumTime;
; 2170 : 	//}
; 2171 : 	//else
; 2172 : 	//{
; 2173 : 		pCSave.PremiumTime = lpObj->PremiumTime;
; 2174 : 	//}
; 2175 : 
; 2176 : #ifdef PREM_TYPE
; 2177 : 	pCSave.PremiumTimeType = lpObj->PremiumTimeType;
; 2178 : #endif
; 2179 : 	pCSave.ZtCred = lpObj->ZtCred;

  002e7	d9 83 a8 22 00
	00		 fld	 DWORD PTR [ebx+8872]
  002ed	0f b6 8b 49 01
	00 00		 movzx	 ecx, BYTE PTR [ebx+329]
  002f4	d9 5d b0	 fstp	 DWORD PTR _pCSave$[ebp+4400]
  002f7	8a 93 44 01 00
	00		 mov	 dl, BYTE PTR [ebx+324]
  002fd	8a 83 46 01 00
	00		 mov	 al, BYTE PTR [ebx+326]
  00303	88 95 43 ff ff
	ff		 mov	 BYTE PTR _pCSave$[ebp+4291], dl
  00309	0f be 93 3c 01
	00 00		 movsx	 edx, BYTE PTR [ebx+316]
  00310	88 8d 42 ff ff
	ff		 mov	 BYTE PTR _pCSave$[ebp+4290], cl
  00316	0f b6 8b 48 01
	00 00		 movzx	 ecx, BYTE PTR [ebx+328]
  0031d	88 85 44 ff ff
	ff		 mov	 BYTE PTR _pCSave$[ebp+4292], al
  00323	0f be 83 3d 01
	00 00		 movsx	 eax, BYTE PTR [ebx+317]
  0032a	89 95 48 ff ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+4296], edx
  00330	0f b7 93 18 01
	00 00		 movzx	 edx, WORD PTR [ebx+280]
  00337	88 8d 45 ff ff
	ff		 mov	 BYTE PTR _pCSave$[ebp+4293], cl
  0033d	8b 8b 40 01 00
	00		 mov	 ecx, DWORD PTR [ebx+320]
  00343	89 85 4c ff ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+4300], eax
  00349	0f b7 83 1c 01
	00 00		 movzx	 eax, WORD PTR [ebx+284]
  00350	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _pCSave$[ebp+4304], ecx
  00356	8b 8b c4 00 00
	00		 mov	 ecx, DWORD PTR [ebx+196]
  0035c	66 89 55 88	 mov	 WORD PTR _pCSave$[ebp+4360], dx
  00360	8b 93 88 22 00
	00		 mov	 edx, DWORD PTR [ebx+8840]
  00366	66 89 45 8a	 mov	 WORD PTR _pCSave$[ebp+4362], ax
  0036a	8b 83 8c 22 00
	00		 mov	 eax, DWORD PTR [ebx+8844]
  00370	89 4d 8c	 mov	 DWORD PTR _pCSave$[ebp+4364], ecx
  00373	8b 8b 90 22 00
	00		 mov	 ecx, DWORD PTR [ebx+8848]
  00379	89 55 90	 mov	 DWORD PTR _pCSave$[ebp+4368], edx
  0037c	8b 93 94 22 00
	00		 mov	 edx, DWORD PTR [ebx+8852]
  00382	89 45 94	 mov	 DWORD PTR _pCSave$[ebp+4372], eax
  00385	8b 83 b0 22 00
	00		 mov	 eax, DWORD PTR [ebx+8880]
  0038b	89 4d 98	 mov	 DWORD PTR _pCSave$[ebp+4376], ecx
  0038e	8b 8b b4 22 00
	00		 mov	 ecx, DWORD PTR [ebx+8884]
  00394	89 55 9c	 mov	 DWORD PTR _pCSave$[ebp+4380], edx
  00397	8b 93 b8 22 00
	00		 mov	 edx, DWORD PTR [ebx+8888]
  0039d	89 45 a0	 mov	 DWORD PTR _pCSave$[ebp+4384], eax
  003a0	8b 83 bc 22 00
	00		 mov	 eax, DWORD PTR [ebx+8892]
  003a6	89 4d a4	 mov	 DWORD PTR _pCSave$[ebp+4388], ecx

; 2180 : 	pCSave.BanChat = lpObj->BanChat;

  003a9	8b 8b b4 27 00
	00		 mov	 ecx, DWORD PTR [ebx+10164]
  003af	89 55 a8	 mov	 DWORD PTR _pCSave$[ebp+4392], edx

; 2181 : 	pCSave.BanPost = lpObj->BanPost;

  003b2	8b 93 b8 27 00
	00		 mov	 edx, DWORD PTR [ebx+10168]
  003b8	89 45 ac	 mov	 DWORD PTR _pCSave$[ebp+4396], eax

; 2182 : 	pCSave.BanChar = lpObj->BanChar;

  003bb	8b 83 bc 27 00
	00		 mov	 eax, DWORD PTR [ebx+10172]
  003c1	89 4d b4	 mov	 DWORD PTR _pCSave$[ebp+4404], ecx

; 2183 : 	pCSave.ChaosBank = lpObj->ChaosBank;

  003c4	8b 8b e4 27 00
	00		 mov	 ecx, DWORD PTR [ebx+10212]
  003ca	89 55 b8	 mov	 DWORD PTR _pCSave$[ebp+4408], edx

; 2184 : 	pCSave.BlessBank = lpObj->BlessBank;

  003cd	8b 93 e8 27 00
	00		 mov	 edx, DWORD PTR [ebx+10216]
  003d3	89 45 bc	 mov	 DWORD PTR _pCSave$[ebp+4412], eax

; 2185 : 	pCSave.SoulBank = lpObj->SoulBank;

  003d6	8b 83 ec 27 00
	00		 mov	 eax, DWORD PTR [ebx+10220]
  003dc	89 4d c0	 mov	 DWORD PTR _pCSave$[ebp+4416], ecx

; 2186 : 	pCSave.LifeBank = lpObj->LifeBank;

  003df	8b 8b f0 27 00
	00		 mov	 ecx, DWORD PTR [ebx+10224]
  003e5	89 55 c4	 mov	 DWORD PTR _pCSave$[ebp+4420], edx

; 2187 : 	pCSave.MTDate = lpObj->MTDate;

  003e8	8b 93 0c 28 00
	00		 mov	 edx, DWORD PTR [ebx+10252]
  003ee	89 45 c8	 mov	 DWORD PTR _pCSave$[ebp+4424], eax

; 2188 : 	pCSave.AutoParty = lpObj->AutoPt;

  003f1	0f b7 83 10 28
	00 00		 movzx	 eax, WORD PTR [ebx+10256]
  003f8	89 4d cc	 mov	 DWORD PTR _pCSave$[ebp+4428], ecx

; 2189 : 	pCSave.Zen = lpObj->Zen;

  003fb	8b 8b 14 28 00
	00		 mov	 ecx, DWORD PTR [ebx+10260]
  00401	89 55 d0	 mov	 DWORD PTR _pCSave$[ebp+4432], edx

; 2190 : 	pCSave.QTDate = lpObj->QTDate;

  00404	8b 93 18 28 00
	00		 mov	 edx, DWORD PTR [ebx+10264]
  0040a	83 c4 18	 add	 esp, 24			; 00000018H
  0040d	66 89 45 d4	 mov	 WORD PTR _pCSave$[ebp+4436], ax
  00411	89 4d d8	 mov	 DWORD PTR _pCSave$[ebp+4440], ecx
  00414	89 55 dc	 mov	 DWORD PTR _pCSave$[ebp+4444], edx

; 2191 : 
; 2192 : #ifdef ZTPINV
; 2193 : 	pCSave.ExpandedInventory = lpObj->ExpandedInventory;

  00417	0f b6 83 24 26
	00 00		 movzx	 eax, BYTE PTR [ebx+9764]
  0041e	89 45 ec	 mov	 DWORD PTR _pCSave$[ebp+4460], eax

; 2194 : 
; 2195 : 	if( pCSave.ExpandedInventory < 0 || pCSave.ExpandedInventory > 2 )

  00421	85 c0		 test	 eax, eax
  00423	78 05		 js	 SHORT $LN5@GJSetChara
  00425	83 f8 02	 cmp	 eax, 2
  00428	7e 07		 jle	 SHORT $LN6@GJSetChara
$LN5@GJSetChara:

; 2196 : 	{
; 2197 : 		pCSave.ExpandedInventory = 0;

  0042a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pCSave$[ebp+4460], 0
$LN6@GJSetChara:

; 2198 : 	}
; 2199 : #endif
; 2200 : 
; 2201 : 	pCSave.CharInfoSave = 0;
; 2202 : 	memcpy(pCSave.dbQuest, lpObj->m_Quest, sizeof(pCSave.dbQuest));
; 2203 : 
; 2204 : #if(CUSTOM_SAVE_PT==TRUE)
; 2205 : 	pCSave.PartyIndex = lpObj->PartyIndex;

  00431	8b 83 d0 28 00
	00		 mov	 eax, DWORD PTR [ebx+10448]

; 2206 : #endif	
; 2207 : 
; 2208 : 	pCSave.DonateCredit = lpObj->m_iDonateCredit;
; 2209 : #if(ENABLE_VOTER_ANONS)
; 2210 : 	pCSave.ATDate = lpObj->ATDate;

  00437	8b 93 40 2b 00
	00		 mov	 edx, DWORD PTR [ebx+11072]
  0043d	56		 push	 esi
  0043e	57		 push	 edi
  0043f	c6 45 86 00	 mov	 BYTE PTR _pCSave$[ebp+4358], 0
  00443	8d b3 8c 10 00
	00		 lea	 esi, DWORD PTR [ebx+4236]
  00449	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0044e	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR _pCSave$[ebp+4308]
  00454	f3 a5		 rep movsd
  00456	8b 8b 18 2b 00
	00		 mov	 ecx, DWORD PTR [ebx+11032]
  0045c	66 a5		 movsw
  0045e	89 45 f0	 mov	 DWORD PTR _pCSave$[ebp+4464], eax

; 2211 : 	#endif
; 2212 : 	if ( cDBSMng.Send((char*)&pCSave, sizeof(SDHP_DBCHAR_INFOSAVE)) == FALSE )

  00461	68 7c 11 00 00	 push	 4476			; 0000117cH
  00466	8d 85 80 ee ff
	ff		 lea	 eax, DWORD PTR _pCSave$[ebp]
  0046c	89 4d f4	 mov	 DWORD PTR _pCSave$[ebp+4468], ecx
  0046f	50		 push	 eax
  00470	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00475	89 55 f8	 mov	 DWORD PTR _pCSave$[ebp+4472], edx
  00478	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  0047d	85 c0		 test	 eax, eax
  0047f	75 33		 jne	 SHORT $LN4@GJSetChara

; 2213 : 	{
; 2214 : 		LogAddC(2, lMsg.Get(MSGGET(1, 174)), lpObj->Name);

  00481	8b 8d 74 ee ff
	ff		 mov	 ecx, DWORD PTR tv422[ebp]
  00487	51		 push	 ecx
  00488	68 ae 01 00 00	 push	 430			; 000001aeH
  0048d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00492	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00497	50		 push	 eax
  00498	6a 02		 push	 2
  0049a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  004a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a3	5f		 pop	 edi
  004a4	5e		 pop	 esi
  004a5	5b		 pop	 ebx

; 2250 : }

  004a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a9	33 cd		 xor	 ecx, ebp
  004ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004b0	8b e5		 mov	 esp, ebp
  004b2	5d		 pop	 ebp
  004b3	c3		 ret	 0
$LN4@GJSetChara:

; 2215 : 		return;
; 2216 : 	}
; 2217 : 
; 2218 : 	gObjItemTextSave(lpObj);

  004b4	53		 push	 ebx
  004b5	e8 00 00 00 00	 call	 ?gObjItemTextSave@@YAXPAUOBJECTSTRUCT@@@Z ; gObjItemTextSave

; 2219 : 	gObjStatTextSave(lpObj);

  004ba	53		 push	 ebx
  004bb	e8 00 00 00 00	 call	 ?gObjStatTextSave@@YAXPAUOBJECTSTRUCT@@@Z ; gObjStatTextSave

; 2220 : 	gObjSavePetItemInfo(aIndex, 0);

  004c0	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  004c3	6a 00		 push	 0
  004c5	56		 push	 esi
  004c6	e8 00 00 00 00	 call	 ?gObjSavePetItemInfo@@YAXHH@Z ; gObjSavePetItemInfo
  004cb	83 c4 10	 add	 esp, 16			; 00000010H

; 2221 : #ifdef LUCKYITEM
; 2222 : 	g_LuckyItemManager.GDReqLuckyItemInsert2nd(aIndex);//Season 6 up (1.01.00)

  004ce	56		 push	 esi
  004cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  004d4	e8 00 00 00 00	 call	 ?GDReqLuckyItemInsert2nd@LuckyItemManager@@QAEXH@Z ; LuckyItemManager::GDReqLuckyItemInsert2nd

; 2223 : #endif
; 2224 : 	//Season 2.5 Quest New CALL
; 2225 : 	g_QuestUtil.Quest3rdSaveInfo(lpObj);

  004d9	53		 push	 ebx
  004da	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestUtil@@3VCQuestUtil@@A ; g_QuestUtil
  004df	e8 00 00 00 00	 call	 ?Quest3rdSaveInfo@CQuestUtil@@QAEXPAUOBJECTSTRUCT@@@Z ; CQuestUtil::Quest3rdSaveInfo

; 2226 : 
; 2227 : 	//Season 3.0 Master Level New CALL
; 2228 : 	g_MasterLevelSystem.GDRequestMasterLevelInfoSave(lpObj);

  004e4	53		 push	 ebx
  004e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  004ea	e8 00 00 00 00	 call	 ?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDRequestMasterLevelInfoSave

; 2229 : 
; 2230 : 	if(gGENS)

  004ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  004f6	74 0b		 je	 SHORT $LN3@GJSetChara

; 2231 : 	{
; 2232 : 		gGensSystem.GDReqSaveContributePoint(lpObj);

  004f8	53		 push	 ebx
  004f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  004fe	e8 00 00 00 00	 call	 ?GDReqSaveContributePoint@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::GDReqSaveContributePoint
$LN3@GJSetChara:

; 2233 : 		//gGensSystem.DBSaveAbusingKillUserName(lpObj);
; 2234 : 	}
; 2235 : #ifdef GAMESHOP
; 2236 : 	gGameShop.GDSaveUserInfo(aIndex);

  00503	56		 push	 esi
  00504	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00509	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 2237 : #endif
; 2238 : 
; 2239 : 	if(g_ZtLicense.user.Rage)

  0050e	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  00515	74 0b		 je	 SHORT $LN2@GJSetChara

; 2240 : 	{
; 2241 : 		gSystemOfRage.SendSaveData(aIndex);

  00517	56		 push	 esi
  00518	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  0051d	e8 00 00 00 00	 call	 ?SendSaveData@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendSaveData
$LN2@GJSetChara:

; 2242 : 	}
; 2243 : 
; 2244 : 	if(g_ZtLicense.user.WinQuest) 

  00522	80 3d ce 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+206, 0
  00529	74 0b		 je	 SHORT $LN1@GJSetChara

; 2245 : 	{
; 2246 : 		gWinQuestSystem.DGSendInformation(aIndex);

  0052b	56		 push	 esi
  0052c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWinQuestSystem@@3VcWinQuestSystem@@A ; gWinQuestSystem
  00531	e8 00 00 00 00	 call	 ?DGSendInformation@cWinQuestSystem@@QAEXH@Z ; cWinQuestSystem::DGSendInformation
$LN1@GJSetChara:

; 2247 : 	}
; 2248 : 
; 2249 : 	g_ZtGDManager.DB_Save(aIndex);

  00536	56		 push	 esi
  00537	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0053c	e8 00 00 00 00	 call	 ?DB_Save@CZtGDManager@@QAEXH@Z ; CZtGDManager::DB_Save

; 2250 : }

  00541	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00544	5f		 pop	 edi
  00545	5e		 pop	 esi
  00546	33 cd		 xor	 ecx, ebp
  00548	5b		 pop	 ebx
  00549	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0054e	8b e5		 mov	 esp, ebp
  00550	5d		 pop	 ebp
  00551	c3		 ret	 0
?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z ENDP	; GJSetCharacterInfo
_TEXT	ENDS
PUBLIC	??_C@_0DI@GOOKFHLK@?$DP?$KH?$LC?$KH?$KJ?$KH?$LE?5?$DP?$DP?$KB?m?$KH?h?$KB?$KE?$KH?$LA?5?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KJ?$KH?$LK?$KH?$KC?$KH@ ; `string'
PUBLIC	??_C@_0BN@FCIFDLKG@?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KB?$KH?$KO?5?$KH?$KC?$DP?$KB?$KE?$KH?R?$DP?$KH?$KN?$DP?$KH?$LB?$DP?$KH?$LL?4?$AA@ ; `string'
PUBLIC	??_C@_0CE@IPHEEDFH@?$FLCharTrasfer?$FN?5Success?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI@ ; `string'
PUBLIC	??_C@_0EP@CFJMIAGA@?$KB?m?$DP?$KH?$KC?$DP?5?$KB?m?$KH?A?$DP?$KH?o?$DP?$KH?$KE?5change?$EAwebzen?4@ ; `string'
PUBLIC	??_C@_0CB@DOBLFOAF@?$FLCharTrasfer?$FN?5Fail?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFd?$CJ@ ; `string'
PUBLIC	?DGMoveOtherServer@@YAXPAUSDHP_CHARACTER_TRANSFER_RESULT@@@Z ; DGMoveOtherServer
EXTRN	?gObjCloseSet@@YAXHH@Z:PROC			; gObjCloseSet
;	COMDAT ??_C@_0DI@GOOKFHLK@?$DP?$KH?$LC?$KH?$KJ?$KH?$LE?5?$DP?$DP?$KB?m?$KH?h?$KB?$KE?$KH?$LA?5?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KJ?$KH?$LK?$KH?$KC?$KH@
CONST	SEGMENT
??_C@_0DI@GOOKFHLK@?$DP?$KH?$LC?$KH?$KJ?$KH?$LE?5?$DP?$DP?$KB?m?$KH?h?$KB?$KE?$KH?$LA?5?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KJ?$KH?$LK?$KH?$KC?$KH@ DB '?'
	DB	0a7H, 0b2H, 0a7H, 0a9H, 0a7H, 0b4H, ' ??', 0a1H, 0edH, 0a7H, 0e8H
	DB	0a1H, 0a4H, 0a7H, 0b0H, ' ', 0a7H, 0a2H, '??', 0a7H, 0b5H, 0a7H
	DB	0a9H, 0a7H, 0baH, 0a7H, 0a2H, 0a7H, 0b8H, '?', 0a7H, 0a4H, 0a1H
	DB	0c0H, 0a7H, 0d3H, ' ', 0a1H, 0edH, 0a7H, 0bbH, '?', 0a7H, 0eaH
	DB	'?', 0a7H, 0b1H, '?', 0a7H, 0bbH, '.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FCIFDLKG@?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KB?$KH?$KO?5?$KH?$KC?$DP?$KB?$KE?$KH?R?$DP?$KH?$KN?$DP?$KH?$LB?$DP?$KH?$LL?4?$AA@
CONST	SEGMENT
??_C@_0BN@FCIFDLKG@?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KB?$KH?$KO?5?$KH?$KC?$DP?$KB?$KE?$KH?R?$DP?$KH?$KN?$DP?$KH?$LB?$DP?$KH?$LL?4?$AA@ DB 0a7H
	DB	0a2H, '??', 0a7H, 0b5H, 0a7H, 0a1H, 0a7H, 0aeH, ' ', 0a7H, 0a2H
	DB	'?', 0a1H, 0a4H, 0a7H, 0d2H, '?', 0a7H, 0adH, '?', 0a7H, 0b1H, '?'
	DB	0a7H, 0bbH, '.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IPHEEDFH@?$FLCharTrasfer?$FN?5Success?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI@
CONST	SEGMENT
??_C@_0CE@IPHEEDFH@?$FLCharTrasfer?$FN?5Success?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI@ DB '['
	DB	'CharTrasfer] Success [%s][%s] (%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@CFJMIAGA@?$KB?m?$DP?$KH?$KC?$DP?5?$KB?m?$KH?A?$DP?$KH?o?$DP?$KH?$KE?5change?$EAwebzen?4@
CONST	SEGMENT
??_C@_0EP@CFJMIAGA@?$KB?m?$DP?$KH?$KC?$DP?5?$KB?m?$KH?A?$DP?$KH?o?$DP?$KH?$KE?5change?$EAwebzen?4@ DB 0a1H
	DB	0edH, '?', 0a7H, 0a2H, '? ', 0a1H, 0edH, 0a7H, 0c1H, '?', 0a7H
	DB	0efH, '?', 0a7H, 0a4H, ' change@webzen.co.kr', 0a1H, 0a4H, 0a7H
	DB	0b0H, ' ', 0a1H, 0edH, '?', 0a7H, 0a1H, 0a7H, 0a9H, 0a7H, 0a9H
	DB	0a7H, 0baH, ' ', 0a7H, 0a2H, 0a7H, 0b8H, '?', 0a7H, 0a4H, 0a1H
	DB	0c0H, 0a7H, 0d3H, 0a1H, 0edH, 0a7H, 0bbH, '?', 0a7H, 0eaH, '?', 0a7H
	DB	0b1H, '?', 0a7H, 0bbH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DOBLFOAF@?$FLCharTrasfer?$FN?5Fail?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_0CB@DOBLFOAF@?$FLCharTrasfer?$FN?5Fail?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFd?$CJ@ DB '['
	DB	'CharTrasfer] Fail [%s][%s] (%d)', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGMoveOtherServer@@YAXPAUSDHP_CHARACTER_TRANSFER_RESULT@@@Z
_TEXT	SEGMENT
_pResult$229039 = 8					; size = 4
_lpMsg$ = 8						; size = 4
?DGMoveOtherServer@@YAXPAUSDHP_CHARACTER_TRANSFER_RESULT@@@Z PROC ; DGMoveOtherServer, COMDAT

; 3529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 3530 : 	if ( !gObjIsConnectedGP(lpMsg->Number))

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]
  00007	0f bf 47 0e	 movsx	 eax, WORD PTR [edi+14]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  00011	83 c4 04	 add	 esp, 4
  00014	85 c0		 test	 eax, eax
  00016	75 1d		 jne	 SHORT $LN2@DGMoveOthe

; 3531 : 	{
; 3532 : 		LogAddC(2, "error-L3 [%s][%d]", __FILE__, __LINE__);

  00018	68 cc 0d 00 00	 push	 3532			; 00000dccH
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNGOKBGI@DSProtocol?4cpp?$AA@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OFCHNMFP@error?9L3?5?$FL?$CFs?$FN?$FL?$CFd?$FN?$AA@
  00027	6a 02		 push	 2
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0002f	83 c4 10	 add	 esp, 16			; 00000010H
  00032	5f		 pop	 edi

; 3565 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN2@DGMoveOthe:
  00035	56		 push	 esi

; 3533 : 		return;
; 3534 : 	}
; 3535 : 
; 3536 : 	LPOBJ lpObj = &gObj[lpMsg->Number];

  00036	0f bf 77 0e	 movsx	 esi, WORD PTR [edi+14]
  0003a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00040	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 3537 : 
; 3538 : 	if ( lpMsg->Result != 0 )

  00046	80 7f 10 00	 cmp	 BYTE PTR [edi+16], 0
  0004a	74 5c		 je	 SHORT $LN1@DGMoveOthe

; 3539 : 	{
; 3540 : 		PMSG_DEFRESULT pResult;
; 3541 : 
; 3542 : 		PHeadSetB((LPBYTE)&pResult, 0x99, sizeof(pResult));

  0004c	6a 04		 push	 4
  0004e	8d 4d 08	 lea	 ecx, DWORD PTR _pResult$229039[ebp]
  00051	68 99 00 00 00	 push	 153			; 00000099H
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 3543 : 		pResult.result = 1;
; 3544 : 
; 3545 : 		DataSend(lpMsg->Number, (LPBYTE)&pResult, pResult.h.size);

  0005c	0f b6 55 09	 movzx	 edx, BYTE PTR _pResult$229039[ebp+1]
  00060	0f bf 4f 0e	 movsx	 ecx, WORD PTR [edi+14]
  00064	52		 push	 edx
  00065	8d 45 08	 lea	 eax, DWORD PTR _pResult$229039[ebp]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	c6 45 0b 01	 mov	 BYTE PTR _pResult$229039[ebp+3], 1
  0006e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3546 : 
; 3547 : 		LogAddTD("[CharTrasfer] Fail [%s][%s] (%d)", lpObj->AccountID, lpObj->Name, lpMsg->Result);

  00073	0f b6 57 10	 movzx	 edx, BYTE PTR [edi+16]
  00077	52		 push	 edx
  00078	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  0007b	50		 push	 eax
  0007c	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0007f	51		 push	 ecx
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DOBLFOAF@?$FLCharTrasfer?$FN?5Fail?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFd?$CJ@
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3548 : 		
; 3549 : 		lpObj->m_MoveOtherServer = 0;
; 3550 : 		
; 3551 : 		GCServerMsgStringSend("№®Б¦ №Я»эЅГ change@webzen.co.kr·О №®АЗЗШ БЦЅГ±в№Щ¶шґПґЩ",lpObj->m_Index, 1);

  0008b	8b 16		 mov	 edx, DWORD PTR [esi]
  0008d	6a 01		 push	 1
  0008f	52		 push	 edx
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@CFJMIAGA@?$KB?m?$DP?$KH?$KC?$DP?5?$KB?m?$KH?A?$DP?$KH?o?$DP?$KH?$KE?5change?$EAwebzen?4@
  00095	c6 86 d8 10 00
	00 00		 mov	 BYTE PTR [esi+4312], 0
  0009c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000a1	83 c4 34	 add	 esp, 52			; 00000034H
  000a4	5e		 pop	 esi
  000a5	5f		 pop	 edi

; 3565 : }

  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN1@DGMoveOthe:

; 3552 : 		return;
; 3553 : 	}
; 3554 : 
; 3555 : 	LogAddTD("[CharTrasfer] Success [%s][%s] (%d)",	lpObj->AccountID, lpObj->Name, lpMsg->Result);

  000a8	6a 00		 push	 0
  000aa	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  000ad	50		 push	 eax
  000ae	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  000b1	51		 push	 ecx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@IPHEEDFH@?$FLCharTrasfer?$FN?5Success?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI@
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3556 : 
; 3557 : 	GCServerMsgStringSend("БўјУАМ Бѕ·бµЛґПґЩ.", lpObj->m_Index, 1);

  000bd	8b 16		 mov	 edx, DWORD PTR [esi]
  000bf	6a 01		 push	 1
  000c1	52		 push	 edx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FCIFDLKG@?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KB?$KH?$KO?5?$KH?$KC?$DP?$KB?$KE?$KH?R?$DP?$KH?$KN?$DP?$KH?$LB?$DP?$KH?$LL?4?$AA@
  000c7	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 3558 : 	GCServerMsgStringSend("єРЗТ ј­№ц·О БўјУЗШБЦЅГ±в №Щ¶шґПґЩ.", lpObj->m_Index, 1);

  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	6a 01		 push	 1
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@GOOKFHLK@?$DP?$KH?$LC?$KH?$KJ?$KH?$LE?5?$DP?$DP?$KB?m?$KH?h?$KB?$KE?$KH?$LA?5?$KH?$KC?$DP?$DP?$KH?$LF?$KH?$KJ?$KH?$LK?$KH?$KC?$KH@
  000d6	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 3559 : 
; 3560 : 	GJSetCharacterInfo(lpObj, lpObj->m_Index, 0);

  000db	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000dd	6a 00		 push	 0
  000df	51		 push	 ecx
  000e0	56		 push	 esi
  000e1	e8 00 00 00 00	 call	 ?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z ; GJSetCharacterInfo

; 3561 : 
; 3562 : 	lpObj->LoadWareHouseInfo = false;
; 3563 : 	gObjCloseSet(lpObj->m_Index, 2);

  000e6	8b 16		 mov	 edx, DWORD PTR [esi]
  000e8	6a 02		 push	 2
  000ea	52		 push	 edx
  000eb	c6 86 54 10 00
	00 00		 mov	 BYTE PTR [esi+4180], 0
  000f2	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  000f7	83 c4 3c	 add	 esp, 60			; 0000003cH

; 3564 : 	lpObj->m_MoveOtherServer = 0;

  000fa	c6 86 d8 10 00
	00 00		 mov	 BYTE PTR [esi+4312], 0
  00101	5e		 pop	 esi
  00102	5f		 pop	 edi

; 3565 : }

  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
?DGMoveOtherServer@@YAXPAUSDHP_CHARACTER_TRANSFER_RESULT@@@Z ENDP ; DGMoveOtherServer
_TEXT	ENDS
PUBLIC	??_C@_0CC@MBCBAID@error?9L2DataServer?5RECV?5?3?5?$CFd?5?$CI?$CFd@ ; `string'
PUBLIC	?DataServerProtocolCore@@YAXEPAEH@Z		; DataServerProtocolCore
EXTRN	?GDReqItemDate@CItemMarket@@QAEXPAUSDHP_REQ_MARKET_ITEMRECV@@@Z:PROC ; CItemMarket::GDReqItemDate
EXTRN	?DGAnsItemStatus@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_STATUS@@@Z:PROC ; CItemMarket::DGAnsItemStatus
EXTRN	?DGAnsItemBuy@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_BUY@@@Z:PROC ; CItemMarket::DGAnsItemBuy
EXTRN	?DGAnsItemSell@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_SELL@@@Z:PROC ; CItemMarket::DGAnsItemSell
EXTRN	?DGAnsItemList@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_ITEM@@@Z:PROC ; CItemMarket::DGAnsItemList
EXTRN	?DGAnsLoad@CAccountSecurity@@QAEXPAUPMSG_ANS_ACC_DATABASE_LOAD@@@Z:PROC ; CAccountSecurity::DGAnsLoad
EXTRN	?DGAnsSave@CAccountSecurity@@QAEXPAUPMSG_ANS_ACC_DATABASE_SAVE@@@Z:PROC ; CAccountSecurity::DGAnsSave
EXTRN	?g_AccountSecurity@@3VCAccountSecurity@@A:BYTE	; g_AccountSecurity
EXTRN	?Protocol@CZtWebManager@@QAEXEPAE@Z:PROC	; CZtWebManager::Protocol
EXTRN	?g_ZtWebManager@@3VCZtWebManager@@A:BYTE	; g_ZtWebManager
EXTRN	?DGPSelectData@OfflineMode@@QAEXPAUPMSG_GDLOAD_OFFMODE_DATA@@@Z:PROC ; OfflineMode::DGPSelectData
EXTRN	?DGAnsOffCharacter@OfflineMode@@QAEXPAUSDHP_DBCHAR_INFORESULT@@@Z:PROC ; OfflineMode::DGAnsOffCharacter
EXTRN	?DGAnsMasterInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_MASTER_INFO@@@Z:PROC ; CReferralSystem::DGAnsMasterInfo
EXTRN	?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z:PROC ; CBanSystem::DSAnsSelect
EXTRN	?DGAnsUserUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_USER_UPDATE@@@Z:PROC ; CReferralSystem::DGAnsUserUpdate
EXTRN	?DGAnsUserInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_USER_INFO@@@Z:PROC ; CReferralSystem::DGAnsUserInfo
EXTRN	?DGAnsMasterUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_MASTER_UPDATE@@@Z:PROC ; CReferralSystem::DGAnsMasterUpdate
EXTRN	?g_ReferralSystem@@3VCReferralSystem@@A:BYTE	; g_ReferralSystem
EXTRN	?DGAnsAccauntPassword@OfflineMode@@QAEXPAUPMSG_DGANS_OFFMODE_START@@@Z:PROC ; OfflineMode::DGAnsAccauntPassword
EXTRN	?g_OfflineMode@@3VOfflineMode@@A:BYTE		; g_OfflineMode
EXTRN	?DGSiegeOwner@CDungeonSiege@@QAEXPAUPMSG_DG_DUNGEON_SIEGE_SELECT_OENER@@@Z:PROC ; CDungeonSiege::DGSiegeOwner
EXTRN	?DGRegSiegeResult@CDungeonSiege@@QAEXPAUPMSG_GD_DUNGEON_SIEGE_GUILD_REG_RESULT@@@Z:PROC ; CDungeonSiege::DGRegSiegeResult
EXTRN	?DGRegSiegeList@CDungeonSiege@@QAEXPAUPMSG_DG_DUNGEON_SIEGE_REG_LIST@@@Z:PROC ; CDungeonSiege::DGRegSiegeList
EXTRN	?DGDelete@CMarriage@@QAEXPAUPMSG_ANS_MARRIAGE_DELETE@@@Z:PROC ; CMarriage::DGDelete
EXTRN	?DGInsert@CMarriage@@QAEXPAUPMSG_ANS_MARRIAGE_INSERT@@@Z:PROC ; CMarriage::DGInsert
EXTRN	?DGLoad@CMarriage@@QAEXPAUPMSG_ANS_MARRIAGE_LOAD@@@Z:PROC ; CMarriage::DGLoad
EXTRN	?Protocol@CZtGDManager@@QAEXEPAE@Z:PROC		; CZtGDManager::Protocol
EXTRN	?RecvDS@cRanking@@QAEXPAUDGCharTop@@@Z:PROC	; cRanking::RecvDS
EXTRN	?gRanking@@3VcRanking@@A:BYTE			; gRanking
EXTRN	?RecvQuestInfo@cWinQuestSystem@@QAEXPAUDGQuestUserInfo@@@Z:PROC ; cWinQuestSystem::RecvQuestInfo
EXTRN	?DG_RecvBrotherCount@Brotherhood@@QAEXPAUDG_CheckBrother@@@Z:PROC ; Brotherhood::DG_RecvBrotherCount
EXTRN	?gBrotherhood@@3VBrotherhood@@A:BYTE		; gBrotherhood
EXTRN	?DGPeriodItemZtList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST@@@Z:PROC ; CPeriodItemZt::DGPeriodItemZtList
EXTRN	?DGPeriodItemZtListCount@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST_COUNT@@@Z:PROC ; CPeriodItemZt::DGPeriodItemZtListCount
EXTRN	?DGPeriodItemZtExpiredItemList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_EXPIRED_ITEMLIST@@@Z:PROC ; CPeriodItemZt::DGPeriodItemZtExpiredItemList
EXTRN	?DGPeriodItemZtDelete@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_DELETE@@@Z:PROC ; CPeriodItemZt::DGPeriodItemZtDelete
EXTRN	?DGPeriodItemZtInsert@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_INSERT@@@Z:PROC ; CPeriodItemZt::DGPeriodItemZtInsert
EXTRN	?DGAnsLuckyItemList@LuckyItemManager@@QAEXPAUPMSG_ANS_LUCKYITEM_SELECT@@@Z:PROC ; LuckyItemManager::DGAnsLuckyItemList
EXTRN	?DGGetPoint@GameShop@@QAEXPAUGAMESHOP_DG_GET_POINT@@@Z:PROC ; GameShop::DGGetPoint
EXTRN	?DGGetStorage@GameShop@@QAEXPAUGAMESHOP_GD_STORAGE@@@Z:PROC ; GameShop::DGGetStorage
EXTRN	?DGRewardAns@GensSystem@@QAEXPAUPMSG_GENS_REWARD_ANS@@@Z:PROC ; GensSystem::DGRewardAns
EXTRN	?DGAnsSecedeGensMember@@YAXPAUPMSG_ANS_SECEDE_GENS_MEMBER_EXDB@@@Z:PROC ; DGAnsSecedeGensMember
EXTRN	?DGAnsRegGensMember@@YAXPAUPMSG_ANS_REG_GENS_MEMBER_EXDB@@@Z:PROC ; DGAnsRegGensMember
EXTRN	?DGAnsGensInfo@@YAXPAUPMSG_ANS_GENS_INFO_EXDB@@@Z:PROC ; DGAnsGensInfo
EXTRN	?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z:PROC ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
EXTRN	?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z:PROC ; CCashItemPeriodSystem::DGAnsPeriodItemList
EXTRN	?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z:PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
EXTRN	?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z:PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
EXTRN	?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A:BYTE ; g_CashItemPeriodSystem
EXTRN	?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z:PROC ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad
EXTRN	?SendMacro@MUHelper@@QAEXPAUMUHELPER_MACRO_DS@@@Z:PROC ; MUHelper::SendMacro
EXTRN	?Quest3rdLoadInfo@CQuestUtil@@QAEXPAE@Z:PROC	; CQuestUtil::Quest3rdLoadInfo
;	COMDAT ??_C@_0CC@MBCBAID@error?9L2DataServer?5RECV?5?3?5?$CFd?5?$CI?$CFd@
CONST	SEGMENT
??_C@_0CC@MBCBAID@error?9L2DataServer?5RECV?5?3?5?$CFd?5?$CI?$CFd@ DB 'er'
	DB	'ror-L2DataServer RECV : %d (%d)', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DataServerProtocolCore@@YAXEPAEH@Z
_TEXT	SEGMENT
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
_aLen$ = 16						; size = 4
?DataServerProtocolCore@@YAXEPAEH@Z PROC		; DataServerProtocolCore, COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 	switch ( protoNum )

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _protoNum$[ebp]
  00007	3d cf 00 00 00	 cmp	 eax, 207		; 000000cfH
  0000c	0f 8f cc 02 00
	00		 jg	 $LN151@DataServer@4
  00012	0f 84 b8 02 00
	00		 je	 $LN93@DataServer@4
  00018	3d c6 00 00 00	 cmp	 eax, 198		; 000000c6H
  0001d	0f 87 85 06 00
	00		 ja	 $LN1@DataServer@4
  00023	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN152@DataServer@4[eax]
  0002a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN156@DataServer@4[eax*4]
$LN146@DataServer@4:

; 81   : 	{
; 82   : 		case 0x00:
; 83   : 			DataServerLoginResult((SDHP_RESULT *)aRecv);

  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ?DataServerLoginResult@@YAXPAUSDHP_RESULT@@@Z ; DataServerLoginResult
  0003a	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN145@DataServer@4:

; 84   : 			break;
; 85   : 
; 86   : 		case 0x01:
; 87   : 			JGPGetCharList(aRecv);

  0003f	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ?JGPGetCharList@@YAXPAE@Z ; JGPGetCharList
  00048	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN144@DataServer@4:

; 88   : 			break;
; 89   : 
; 90   : 		case 0x04:
; 91   : 			JGCharacterCreateRequest((SDHP_CREATECHARRESULT *)aRecv);

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?JGCharacterCreateRequest@@YAXPAUSDHP_CREATECHARRESULT@@@Z ; JGCharacterCreateRequest
  00056	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN143@DataServer@4:

; 92   : 			break;
; 93   : 
; 94   : 		case 0x05:
; 95   : 			JGCharDelRequest((SDHP_CHARDELETERESULT *)aRecv);

  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?JGCharDelRequest@@YAXPAUSDHP_CHARDELETERESULT@@@Z ; JGCharDelRequest
  00064	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
$LN142@DataServer@4:

; 96   : 			break;
; 97   : 
; 98   : 		case 0x06:
; 99   : 			JGGetCharacterInfo((SDHP_DBCHAR_INFORESULT *)aRecv);

  00069	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ?JGGetCharacterInfo@@YAXPAUSDHP_DBCHAR_INFORESULT@@@Z ; JGGetCharacterInfo
  00072	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
$LN141@DataServer@4:

; 100  : 			break;
; 101  : 
; 102  : 		case 0x08:
; 103  : 			DGGetWarehouseList((SDHP_GETWAREHOUSEDB_SAVE *)aRecv);

  00077	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?DGGetWarehouseList@@YAXPAUSDHP_GETWAREHOUSEDB_SAVE@@@Z ; DGGetWarehouseList
  00080	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN140@DataServer@4:

; 104  : 			break;
; 105  : 
; 106  : 		case 0x10:
; 107  : 			GDGetWarehouseNoItem((SDHP_GETWAREHOUSEDB_RESULT *)aRecv);

  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ?GDGetWarehouseNoItem@@YAXPAUSDHP_GETWAREHOUSEDB_RESULT@@@Z ; GDGetWarehouseNoItem
  0008e	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN139@DataServer@4:

; 108  : 			break;
; 109  : 
; 110  : 			//Season 2.5 Quest Load
; 111  : 		case 0x14:
; 112  : 			g_QuestUtil.Quest3rdLoadInfo(aRecv);

  00093	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00096	52		 push	 edx
  00097	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestUtil@@3VCQuestUtil@@A ; g_QuestUtil
  0009c	e8 00 00 00 00	 call	 ?Quest3rdLoadInfo@CQuestUtil@@QAEXPAE@Z ; CQuestUtil::Quest3rdLoadInfo

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
$LN138@DataServer@4:

; 113  : 			break;
; 114  : 
; 115  : 		case 0x16://Season 4.5 ChangeCharacterName
; 116  : 			DGChangeNameResult((SDHP_CHANGENAME_RESULT *)aRecv);

  000a3	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?DGChangeNameResult@@YAXPAUSDHP_CHANGENAME_RESULT@@@Z ; DGChangeNameResult
  000ac	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN137@DataServer@4:

; 117  : 			break;
; 118  : 
; 119  : #ifdef MUHELPER
; 120  : 		case 0x17:
; 121  : 			g_MUHelper.SendMacro((MUHELPER_MACRO_DS*)aRecv);

  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  000b4	51		 push	 ecx
  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MUHelper@@3VMUHelper@@A ; g_MUHelper
  000ba	e8 00 00 00 00	 call	 ?SendMacro@MUHelper@@QAEXPAUMUHELPER_MACRO_DS@@@Z ; MUHelper::SendMacro

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
$LN136@DataServer@4:

; 122  : 			break;
; 123  : #endif
; 124  : 
; 125  : 		case 0x30:
; 126  : 			g_MasterLevelSystem.DGRequestMasterLevelInfoLoad(aRecv);

  000c1	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  000c4	52		 push	 edx
  000c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  000ca	e8 00 00 00 00	 call	 ?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
$LN135@DataServer@4:

; 127  : 			break;
; 128  : 
; 129  : 		case 0x52:
; 130  : 			ItemSerialCreateRecv((SDHP_ITEMCREATERECV *)aRecv);

  000d1	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?ItemSerialCreateRecv@@YAXPAUSDHP_ITEMCREATERECV@@@Z ; ItemSerialCreateRecv
  000da	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
$LN134@DataServer@4:

; 131  : 			break;
; 132  : 
; 133  : 		case 0x56:
; 134  : 			DGRecvPetItemInfo(aRecv);

  000df	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ?DGRecvPetItemInfo@@YAXPAE@Z ; DGRecvPetItemInfo
  000e8	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
$LN133@DataServer@4:

; 135  : 			break;
; 136  : 
; 137  : 		case 0x60:
; 138  : 			DGOptionDataRecv((SDHP_SKILLKEYDATA_SEND *)aRecv);

  000ed	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  000f0	52		 push	 edx
  000f1	e8 00 00 00 00	 call	 ?DGOptionDataRecv@@YAXPAUSDHP_SKILLKEYDATA_SEND@@@Z ; DGOptionDataRecv
  000f6	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
$LN132@DataServer@4:

; 139  : 			break;
; 140  : 
; 141  : 		case 0x80:
; 142  : 			{
; 143  : 				PMSG_DEFAULT2 * lpDef1 = (PMSG_DEFAULT2 *)aRecv;
; 144  : 
; 145  : 				switch ( lpDef1->subcode )

  000fb	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000fe	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00102	83 f9 1b	 cmp	 ecx, 27			; 0000001bH
  00105	0f 87 9d 05 00
	00		 ja	 $LN1@DataServer@4
  0010b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN157@DataServer@4[ecx*4]
$LN129@DataServer@4:

; 146  : 				{
; 147  : 					case 0x00:
; 148  : 						GS_DGAnsCastleTotalInfo(aRecv);

  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?GS_DGAnsCastleTotalInfo@@YAXPAE@Z ; GS_DGAnsCastleTotalInfo
  00118	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
$LN128@DataServer@4:

; 149  : 						break;
; 150  : 
; 151  : 					case 0x01:
; 152  : 						GS_DGAnsOwnerGuildMaster(aRecv);

  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?GS_DGAnsOwnerGuildMaster@@YAXPAE@Z ; GS_DGAnsOwnerGuildMaster
  00123	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
$LN127@DataServer@4:

; 153  : 						break;
; 154  : 
; 155  : 					case 0x03:
; 156  : 						GS_DGAnsCastleNpcBuy(aRecv);

  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ?GS_DGAnsCastleNpcBuy@@YAXPAE@Z ; GS_DGAnsCastleNpcBuy
  0012e	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
$LN126@DataServer@4:

; 157  : 						break;
; 158  : 
; 159  : 					case 0x04:
; 160  : 						GS_DGAnsCastleNpcRepair(aRecv);

  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ?GS_DGAnsCastleNpcRepair@@YAXPAE@Z ; GS_DGAnsCastleNpcRepair
  00139	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
$LN125@DataServer@4:

; 161  : 						break;
; 162  : 
; 163  : 					case 0x05:
; 164  : 						GS_DGAnsCastleNpcUpgrade(aRecv);

  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 ?GS_DGAnsCastleNpcUpgrade@@YAXPAE@Z ; GS_DGAnsCastleNpcUpgrade
  00144	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
$LN124@DataServer@4:

; 165  : 						break;
; 166  : 
; 167  : 					case 0x06:
; 168  : 						GS_DGAnsTaxInfo(aRecv);

  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ?GS_DGAnsTaxInfo@@YAXPAE@Z ; GS_DGAnsTaxInfo
  0014f	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
$LN123@DataServer@4:

; 169  : 						break;
; 170  : 
; 171  : 					case 0x07:
; 172  : 						GS_DGAnsTaxRateChange(aRecv);

  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ?GS_DGAnsTaxRateChange@@YAXPAE@Z ; GS_DGAnsTaxRateChange
  0015a	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
$LN122@DataServer@4:

; 173  : 						break;
; 174  : 
; 175  : 					case 0x08:
; 176  : 						GS_DGAnsCastleMoneyChange(aRecv);

  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?GS_DGAnsCastleMoneyChange@@YAXPAE@Z ; GS_DGAnsCastleMoneyChange
  00165	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
$LN121@DataServer@4:

; 177  : 						break;
; 178  : 
; 179  : 					case 0x09:
; 180  : 						GS_DGAnsSiegeDateChange(aRecv);

  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ?GS_DGAnsSiegeDateChange@@YAXPAE@Z ; GS_DGAnsSiegeDateChange
  00170	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
$LN120@DataServer@4:

; 181  : 						break;
; 182  : 
; 183  : 					case 0x0A:
; 184  : 						GS_DGAnsGuildMarkRegInfo(aRecv);

  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 ?GS_DGAnsGuildMarkRegInfo@@YAXPAE@Z ; GS_DGAnsGuildMarkRegInfo
  0017b	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
$LN119@DataServer@4:

; 185  : 						break;
; 186  : 
; 187  : 					case 0x0B:
; 188  : 						GS_DGAnsSiegeEndedChange(aRecv);

  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?GS_DGAnsSiegeEndedChange@@YAXPAE@Z ; GS_DGAnsSiegeEndedChange
  00186	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
$LN118@DataServer@4:

; 189  : 						break;
; 190  : 
; 191  : 					case 0x0C:
; 192  : 						GS_DGAnsCastleOwnerChange(aRecv);

  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?GS_DGAnsCastleOwnerChange@@YAXPAE@Z ; GS_DGAnsCastleOwnerChange
  00191	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
$LN117@DataServer@4:

; 193  : 						break;
; 194  : 
; 195  : 					case 0x0D:
; 196  : 						GS_DGAnsRegAttackGuild(aRecv);

  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 ?GS_DGAnsRegAttackGuild@@YAXPAE@Z ; GS_DGAnsRegAttackGuild
  0019c	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0019f	5d		 pop	 ebp
  001a0	c3		 ret	 0
$LN116@DataServer@4:

; 197  : 						break;
; 198  : 
; 199  : 					case 0x0E:
; 200  : 						GS_DGAnsRestartCastleState(aRecv);

  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?GS_DGAnsRestartCastleState@@YAXPAE@Z ; GS_DGAnsRestartCastleState
  001a7	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
$LN115@DataServer@4:

; 201  : 						break;
; 202  : 
; 203  : 					case 0x0F:
; 204  : 						GS_DGAnsMapSvrMsgMultiCast(aRecv);

  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ?GS_DGAnsMapSvrMsgMultiCast@@YAXPAE@Z ; GS_DGAnsMapSvrMsgMultiCast
  001b2	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
$LN114@DataServer@4:

; 205  : 						break;
; 206  : 
; 207  : 					case 0x10:
; 208  : 						GS_DGAnsRegGuildMark(aRecv);

  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?GS_DGAnsRegGuildMark@@YAXPAE@Z ; GS_DGAnsRegGuildMark
  001bd	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001c0	5d		 pop	 ebp
  001c1	c3		 ret	 0
$LN113@DataServer@4:

; 209  : 						break;
; 210  : 
; 211  : 					case 0x11:
; 212  : 						GS_DGAnsGuildMarkReset(aRecv);

  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ?GS_DGAnsGuildMarkReset@@YAXPAE@Z ; GS_DGAnsGuildMarkReset
  001c8	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001cb	5d		 pop	 ebp
  001cc	c3		 ret	 0
$LN112@DataServer@4:

; 213  : 						break;
; 214  : 
; 215  : 					case 0x12:
; 216  : 						GS_DGAnsGuildSetGiveUp(aRecv);

  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ?GS_DGAnsGuildSetGiveUp@@YAXPAE@Z ; GS_DGAnsGuildSetGiveUp
  001d3	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001d6	5d		 pop	 ebp
  001d7	c3		 ret	 0
$LN111@DataServer@4:

; 217  : 						break;
; 218  : 
; 219  : 					case 0x16:
; 220  : 						GS_DGAnsNpcRemove(aRecv);

  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ?GS_DGAnsNpcRemove@@YAXPAE@Z ; GS_DGAnsNpcRemove
  001de	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
$LN110@DataServer@4:

; 221  : 						break;
; 222  : 
; 223  : 					case 0x17:
; 224  : 						GS_DGAnsCastleStateSync(aRecv);

  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?GS_DGAnsCastleStateSync@@YAXPAE@Z ; GS_DGAnsCastleStateSync
  001e9	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001ec	5d		 pop	 ebp
  001ed	c3		 ret	 0
$LN109@DataServer@4:

; 225  : 						break;
; 226  : 
; 227  : 					case 0x18:
; 228  : 						GS_DGAnsCastleTributeMoney(aRecv);

  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?GS_DGAnsCastleTributeMoney@@YAXPAE@Z ; GS_DGAnsCastleTributeMoney
  001f4	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  001f7	5d		 pop	 ebp
  001f8	c3		 ret	 0
$LN108@DataServer@4:

; 229  : 						break;
; 230  : 
; 231  : 					case 0x19:
; 232  : 						GS_DGAnsResetCastleTaxInfo(aRecv);

  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ?GS_DGAnsResetCastleTaxInfo@@YAXPAE@Z ; GS_DGAnsResetCastleTaxInfo
  001ff	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00202	5d		 pop	 ebp
  00203	c3		 ret	 0
$LN107@DataServer@4:

; 233  : 						break;
; 234  : 
; 235  : 					case 0x1A:
; 236  : 						GS_DGAnsResetSiegeGuildInfo(aRecv);

  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ?GS_DGAnsResetSiegeGuildInfo@@YAXPAE@Z ; GS_DGAnsResetSiegeGuildInfo
  0020a	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0020d	5d		 pop	 ebp
  0020e	c3		 ret	 0
$LN106@DataServer@4:

; 237  : 						break;
; 238  : 
; 239  : 					case 0x1B:
; 240  : 						GS_DGAnsResetRegSiegeInfo(aRecv);

  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ?GS_DGAnsResetRegSiegeInfo@@YAXPAE@Z ; GS_DGAnsResetRegSiegeInfo
  00215	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00218	5d		 pop	 ebp
  00219	c3		 ret	 0
$LN105@DataServer@4:

; 241  : 						break;
; 242  : 				}
; 243  : 			}
; 244  : 			break;
; 245  : 
; 246  : 		case 0x81:
; 247  : 			GS_DGAnsCastleInitData(aRecv);

  0021a	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 ?GS_DGAnsCastleInitData@@YAXPAE@Z ; GS_DGAnsCastleInitData
  00223	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
$LN104@DataServer@4:

; 248  : 			break;
; 249  : 
; 250  : 		case 0x82:
; 251  : 			GS_DGAnsCastleNpcInfo(aRecv);

  00228	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0022b	51		 push	 ecx
  0022c	e8 00 00 00 00	 call	 ?GS_DGAnsCastleNpcInfo@@YAXPAE@Z ; GS_DGAnsCastleNpcInfo
  00231	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00234	5d		 pop	 ebp
  00235	c3		 ret	 0
$LN103@DataServer@4:

; 252  : 			break;
; 253  : 
; 254  : 		case 0x83:
; 255  : 			GS_DGAnsAllGuildMarkRegInfo(aRecv);

  00236	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00239	52		 push	 edx
  0023a	e8 00 00 00 00	 call	 ?GS_DGAnsAllGuildMarkRegInfo@@YAXPAE@Z ; GS_DGAnsAllGuildMarkRegInfo
  0023f	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00242	5d		 pop	 ebp
  00243	c3		 ret	 0
$LN102@DataServer@4:

; 256  : 			break;
; 257  : 
; 258  : 		case 0x84:
; 259  : 			GS_DGAnsFirstCreateNPC(aRecv);

  00244	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?GS_DGAnsFirstCreateNPC@@YAXPAE@Z ; GS_DGAnsFirstCreateNPC
  0024d	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
$LN101@DataServer@4:

; 260  : 			break;
; 261  : 
; 262  : 		case 0x85:
; 263  : 			GS_DGAnsCalcREgGuildList(aRecv);

  00252	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00255	51		 push	 ecx
  00256	e8 00 00 00 00	 call	 ?GS_DGAnsCalcREgGuildList@@YAXPAE@Z ; GS_DGAnsCalcREgGuildList
  0025b	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0025e	5d		 pop	 ebp
  0025f	c3		 ret	 0
$LN100@DataServer@4:

; 264  : 			break;
; 265  : 
; 266  : 		case 0x86:
; 267  : 			GS_DGAnsCsGulidUnionInfo(aRecv);

  00260	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00263	52		 push	 edx
  00264	e8 00 00 00 00	 call	 ?GS_DGAnsCsGulidUnionInfo@@YAXPAE@Z ; GS_DGAnsCsGulidUnionInfo
  00269	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0026c	5d		 pop	 ebp
  0026d	c3		 ret	 0
$LN99@DataServer@4:

; 268  : 			break;
; 269  : 
; 270  : 		case 0x87:
; 271  : 			GS_DGAnsCsSaveTotalGuildInfo(aRecv);

  0026e	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?GS_DGAnsCsSaveTotalGuildInfo@@YAXPAE@Z ; GS_DGAnsCsSaveTotalGuildInfo
  00277	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0027a	5d		 pop	 ebp
  0027b	c3		 ret	 0
$LN98@DataServer@4:

; 272  : 			break;
; 273  : 
; 274  : 		case 0x88:
; 275  : 			GS_DGAnsCsLoadTotalGuildInfo(aRecv);

  0027c	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0027f	51		 push	 ecx
  00280	e8 00 00 00 00	 call	 ?GS_DGAnsCsLoadTotalGuildInfo@@YAXPAE@Z ; GS_DGAnsCsLoadTotalGuildInfo
  00285	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00288	5d		 pop	 ebp
  00289	c3		 ret	 0
$LN97@DataServer@4:

; 276  : 			break;
; 277  : 
; 278  : 		case 0x89:
; 279  : 			GS_DGAnsCastleNpcUpdate(aRecv);

  0028a	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0028d	52		 push	 edx
  0028e	e8 00 00 00 00	 call	 ?GS_DGAnsCastleNpcUpdate@@YAXPAE@Z ; GS_DGAnsCastleNpcUpdate
  00293	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00296	5d		 pop	 ebp
  00297	c3		 ret	 0
$LN96@DataServer@4:

; 280  : 			break;
; 281  : 
; 282  : 		case 0xB0:
; 283  : 			DGAnsCrywolfSync(aRecv);

  00298	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0029b	50		 push	 eax
  0029c	e8 00 00 00 00	 call	 ?DGAnsCrywolfSync@@YAXPAE@Z ; DGAnsCrywolfSync
  002a1	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  002a4	5d		 pop	 ebp
  002a5	c3		 ret	 0
$LN95@DataServer@4:

; 284  : 			break;
; 285  : 
; 286  : 		case 0xB1:
; 287  : 			DGAnsCrywolfInfoLoad(aRecv);

  002a6	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  002a9	51		 push	 ecx
  002aa	e8 00 00 00 00	 call	 ?DGAnsCrywolfInfoLoad@@YAXPAE@Z ; DGAnsCrywolfInfoLoad
  002af	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  002b2	5d		 pop	 ebp
  002b3	c3		 ret	 0
$LN85@DataServer@4:

; 318  : 						break;
; 319  : 				}
; 320  : 			}
; 321  : 			break;
; 322  : 
; 323  : 		//Season3
; 324  : 		case 0xA1:
; 325  : 			DGSummonerStateUpdatedSend((PMSG_ANS_SUMMONER_CREATE *)aRecv);

  002b4	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  002b7	52		 push	 edx
  002b8	e8 00 00 00 00	 call	 ?DGSummonerStateUpdatedSend@@YAXPAUPMSG_ANS_SUMMONER_CREATE@@@Z ; DGSummonerStateUpdatedSend
  002bd	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  002c0	5d		 pop	 ebp
  002c1	c3		 ret	 0
$LN84@DataServer@4:

; 326  : 			break;
; 327  : 		case 0xA2:
; 328  : 			DGSummonerStateRecv((PMSG_ANS_SUMMONER_STATUS *)aRecv);

  002c2	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ?DGSummonerStateRecv@@YAXPAUPMSG_ANS_SUMMONER_STATUS@@@Z ; DGSummonerStateRecv
  002cb	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  002ce	5d		 pop	 ebp
  002cf	c3		 ret	 0
$LN93@DataServer@4:

; 288  : 			break;
; 289  : 
; 290  : 		case 0xB2:
; 291  : 			DGAnsCrywolfInfoSave(aRecv);
; 292  : 			break;
; 293  : 
; 294  : 		case 0xCF:
; 295  : 			DGMoveOtherServer((SDHP_CHARACTER_TRANSFER_RESULT *)aRecv);

  002d0	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  002d3	52		 push	 edx
  002d4	e8 00 00 00 00	 call	 ?DGMoveOtherServer@@YAXPAUSDHP_CHARACTER_TRANSFER_RESULT@@@Z ; DGMoveOtherServer
  002d9	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  002dc	5d		 pop	 ebp
  002dd	c3		 ret	 0
$LN151@DataServer@4:

; 80   : 	switch ( protoNum )

  002de	2d d0 00 00 00	 sub	 eax, 208		; 000000d0H
  002e3	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  002e6	0f 87 bc 03 00
	00		 ja	 $LN1@DataServer@4
  002ec	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN153@DataServer@4[eax]
  002f3	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN158@DataServer@4[eax*4]
$LN92@DataServer@4:

; 296  : 			break;
; 297  : 
; 298  : 		case 0xD0:
; 299  : 			{
; 300  : 				PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 301  : 
; 302  : 				switch ( lpMsg->subcode )

  002fa	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  002fd	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  00301	83 c0 fe	 add	 eax, -2			; fffffffeH
  00304	83 f8 06	 cmp	 eax, 6
  00307	0f 87 9b 03 00
	00		 ja	 $LN1@DataServer@4
  0030d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN159@DataServer@4[eax*4]
$LN89@DataServer@4:

; 303  : 				{
; 304  : 					case 0x02:
; 305  : 						g_CashItemPeriodSystem.DGAnsPeriodItemInquiry((PMSG_ANS_PERIODITEM_INQUIRY *)aRecv);

  00314	51		 push	 ecx
  00315	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  0031a	e8 00 00 00 00	 call	 ?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0031f	5d		 pop	 ebp
  00320	c3		 ret	 0
$LN88@DataServer@4:

; 306  : 						break;
; 307  : 
; 308  : 					case 0x04:
; 309  : 						g_CashItemPeriodSystem.DGAnsPeriodItemInsert((PMSG_ANS_PERIODITEM_INSERT *)aRecv);

  00321	51		 push	 ecx
  00322	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00327	e8 00 00 00 00	 call	 ?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInsert

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0032c	5d		 pop	 ebp
  0032d	c3		 ret	 0
$LN87@DataServer@4:

; 310  : 						break;
; 311  : 
; 312  : 					case 0x06:
; 313  : 						g_CashItemPeriodSystem.DGAnsPeriodItemList((PMSG_ANS_PERIODITEM_LIST *)aRecv);

  0032e	51		 push	 ecx
  0032f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00334	e8 00 00 00 00	 call	 ?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemList

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00339	5d		 pop	 ebp
  0033a	c3		 ret	 0
$LN86@DataServer@4:

; 314  : 						break;
; 315  : 
; 316  : 					case 0x08:
; 317  : 						g_CashItemPeriodSystem.DGAnsPeriodItemUpdate((PMSG_ANS_PERIODITEM_UPDATE *)aRecv);

  0033b	51		 push	 ecx
  0033c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00341	e8 00 00 00 00	 call	 ?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00346	5d		 pop	 ebp
  00347	c3		 ret	 0
$LN83@DataServer@4:

; 329  : 			break;
; 330  : 
; 331  : 		case 0xFF:	// Test Packet
; 332  : 			{
; 333  : 				PMSG_TEST * pMsg = (PMSG_TEST *)aRecv;
; 334  : 
; 335  : 				LogAddC(2, "error-L2DataServer RECV : %d (%d)", aLen, pMsg->count);

  00348	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0034b	8b 91 d0 07 00
	00		 mov	 edx, DWORD PTR [ecx+2000]
  00351	8b 45 10	 mov	 eax, DWORD PTR _aLen$[ebp]
  00354	52		 push	 edx
  00355	50		 push	 eax
  00356	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MBCBAID@error?9L2DataServer?5RECV?5?3?5?$CFd?5?$CI?$CFd@
  0035b	6a 02		 push	 2
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00363	83 c4 10	 add	 esp, 16			; 00000010H

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00366	5d		 pop	 ebp
  00367	c3		 ret	 0
$LN79@DataServer@4:

; 336  : 			}
; 337  : 			break;
; 338  : 
; 339  : 		case 0xE6:
; 340  : #ifdef OLDCASHSHOP
; 341  : 			DGRequestWcoinInfoLoad(aRecv);
; 342  : #endif
; 343  : 			break;
; 344  : 
; 345  : 		case 0xE0:
; 346  : 			if(g_ZtLicense.user.Rage)
; 347  : 			{
; 348  : 				//gSystemOfRage.RecvDSProtocol((DSRageUser *)aRecv);
; 349  : 			}
; 350  : 			break;
; 351  : 
; 352  : 		case 0xF8: // Gens System
; 353  : 			{
; 354  : 				if(gGENS)

  00368	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  0036f	0f 84 33 03 00
	00		 je	 $LN1@DataServer@4

; 355  : 				{
; 356  : 					PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 357  : 					// ----
; 358  : 					switch(lpMsg->subcode)

  00375	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00378	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  0037c	48		 dec	 eax
  0037d	83 f8 04	 cmp	 eax, 4
  00380	0f 87 22 03 00
	00		 ja	 $LN1@DataServer@4
  00386	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN160@DataServer@4[eax*4]
$LN75@DataServer@4:

; 359  : 					{
; 360  : 					case 0x01: //-> Get member info
; 361  : 						{
; 362  : 							DGAnsGensInfo((PMSG_ANS_GENS_INFO_EXDB*)aRecv);

  0038d	51		 push	 ecx
  0038e	e8 00 00 00 00	 call	 ?DGAnsGensInfo@@YAXPAUPMSG_ANS_GENS_INFO_EXDB@@@Z ; DGAnsGensInfo
  00393	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00396	5d		 pop	 ebp
  00397	c3		 ret	 0
$LN74@DataServer@4:

; 363  : 						}
; 364  : 						break;
; 365  : 						// --
; 366  : 					case 0x03: //-> Register new member
; 367  : 						{
; 368  : 							DGAnsRegGensMember((PMSG_ANS_REG_GENS_MEMBER_EXDB*)aRecv);

  00398	51		 push	 ecx
  00399	e8 00 00 00 00	 call	 ?DGAnsRegGensMember@@YAXPAUPMSG_ANS_REG_GENS_MEMBER_EXDB@@@Z ; DGAnsRegGensMember
  0039e	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  003a1	5d		 pop	 ebp
  003a2	c3		 ret	 0
$LN73@DataServer@4:

; 369  : 						}
; 370  : 						break;
; 371  : 						// --
; 372  : 					case 0x04: //-> Delete member
; 373  : 						{
; 374  : 							 DGAnsSecedeGensMember((PMSG_ANS_SECEDE_GENS_MEMBER_EXDB*)aRecv);

  003a3	51		 push	 ecx
  003a4	e8 00 00 00 00	 call	 ?DGAnsSecedeGensMember@@YAXPAUPMSG_ANS_SECEDE_GENS_MEMBER_EXDB@@@Z ; DGAnsSecedeGensMember
  003a9	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  003ac	5d		 pop	 ebp
  003ad	c3		 ret	 0
$LN72@DataServer@4:

; 375  : 						}
; 376  : 						break;
; 377  : 						// --
; 378  : 					case 0x05: //-> Reward answer
; 379  : 						{
; 380  : 							gGensSystem.DGRewardAns((PMSG_GENS_REWARD_ANS*)aRecv);

  003ae	51		 push	 ecx
  003af	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  003b4	e8 00 00 00 00	 call	 ?DGRewardAns@GensSystem@@QAEXPAUPMSG_GENS_REWARD_ANS@@@Z ; GensSystem::DGRewardAns

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  003b9	5d		 pop	 ebp
  003ba	c3		 ret	 0
$LN71@DataServer@4:

; 381  : 						}
; 382  : 						break;
; 383  : 					}
; 384  : 				}
; 385  : 			}
; 386  : 			break;
; 387  : 			// --
; 388  : #ifdef GAMESHOP
; 389  : 		case 0xD3:
; 390  : 			{
; 391  : 				PWMSG_HEAD2 * lpMsg2	= (PWMSG_HEAD2*)aRecv;
; 392  : 				// ----
; 393  : 				switch(lpMsg2->subcode)

  003bb	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  003be	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  003c2	48		 dec	 eax
  003c3	0f 85 df 02 00
	00		 jne	 $LN1@DataServer@4

; 394  : 				{
; 395  : 				case 1:
; 396  : 					{
; 397  : 						gGameShop.DGGetStorage((GAMESHOP_GD_STORAGE*)aRecv);

  003c9	51		 push	 ecx
  003ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  003cf	e8 00 00 00 00	 call	 ?DGGetStorage@GameShop@@QAEXPAUGAMESHOP_GD_STORAGE@@@Z ; GameShop::DGGetStorage

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  003d4	5d		 pop	 ebp
  003d5	c3		 ret	 0
$LN67@DataServer@4:

; 398  : 					}
; 399  : 					break;
; 400  : 				}
; 401  : 			}
; 402  : 			break;
; 403  : 			// --
; 404  : 
; 405  : 		case 0xD2:	//-> GameShop
; 406  : 			{
; 407  : 				PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 408  : 				// ----
; 409  : 				switch(lpMsg->subcode)

  003d6	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  003d9	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  003dd	83 e8 02	 sub	 eax, 2
  003e0	0f 85 c2 02 00
	00		 jne	 $LN1@DataServer@4

; 410  : 				{
; 411  : 				case 2:	//-> Answer point
; 412  : 					{
; 413  : 						gGameShop.DGGetPoint((GAMESHOP_DG_GET_POINT*)aRecv);

  003e6	51		 push	 ecx
  003e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  003ec	e8 00 00 00 00	 call	 ?DGGetPoint@GameShop@@QAEXPAUGAMESHOP_DG_GET_POINT@@@Z ; GameShop::DGGetPoint

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  003f1	5d		 pop	 ebp
  003f2	c3		 ret	 0
$LN63@DataServer@4:

; 414  : 					}
; 415  : 					break;
; 416  : 				}
; 417  : 			}
; 418  : 			break;
; 419  : #endif
; 420  : #ifdef LUCKYITEM
; 421  : 		case 0xD4:	//-> LuckyItem Select
; 422  : 			{
; 423  : 				g_LuckyItemManager.DGAnsLuckyItemList((PMSG_ANS_LUCKYITEM_SELECT*)aRecv);

  003f3	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  003f6	51		 push	 ecx
  003f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  003fc	e8 00 00 00 00	 call	 ?DGAnsLuckyItemList@LuckyItemManager@@QAEXPAUPMSG_ANS_LUCKYITEM_SELECT@@@Z ; LuckyItemManager::DGAnsLuckyItemList

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00401	5d		 pop	 ebp
  00402	c3		 ret	 0
$LN62@DataServer@4:

; 424  : 			}
; 425  : 			break;
; 426  : #endif
; 427  : #ifdef PERIOD
; 428  : 		case 0xD1:	//-> PeriodItemZt Main
; 429  : 			{
; 430  : 				PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 431  : 				// ----
; 432  : 				switch(lpMsg->subcode)

  00403	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00406	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0040a	49		 dec	 ecx
  0040b	83 f9 04	 cmp	 ecx, 4
  0040e	0f 87 94 02 00
	00		 ja	 $LN1@DataServer@4
  00414	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN161@DataServer@4[ecx*4]
$LN59@DataServer@4:

; 433  : 				{
; 434  : 				case 1:
; 435  : 					g_PeriodItemZt.DGPeriodItemZtInsert((PMSG_ANS_PERIODITEMZT_INSERT*)aRecv);

  0041b	50		 push	 eax
  0041c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  00421	e8 00 00 00 00	 call	 ?DGPeriodItemZtInsert@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_INSERT@@@Z ; CPeriodItemZt::DGPeriodItemZtInsert

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00426	5d		 pop	 ebp
  00427	c3		 ret	 0
$LN58@DataServer@4:

; 436  : 					break;
; 437  : 				case 2:
; 438  : 					g_PeriodItemZt.DGPeriodItemZtDelete((PMSG_ANS_PERIODITEMZT_DELETE*)aRecv);

  00428	50		 push	 eax
  00429	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  0042e	e8 00 00 00 00	 call	 ?DGPeriodItemZtDelete@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_DELETE@@@Z ; CPeriodItemZt::DGPeriodItemZtDelete

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00433	5d		 pop	 ebp
  00434	c3		 ret	 0
$LN57@DataServer@4:

; 439  : 					break;
; 440  : 				case 3:
; 441  : 					g_PeriodItemZt.DGPeriodItemZtExpiredItemList((PMSG_ANS_PERIODITEMZT_EXPIRED_ITEMLIST*)aRecv);

  00435	50		 push	 eax
  00436	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  0043b	e8 00 00 00 00	 call	 ?DGPeriodItemZtExpiredItemList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_EXPIRED_ITEMLIST@@@Z ; CPeriodItemZt::DGPeriodItemZtExpiredItemList

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00440	5d		 pop	 ebp
  00441	c3		 ret	 0
$LN56@DataServer@4:

; 442  : 					break;
; 443  : 				case 4:
; 444  : 					g_PeriodItemZt.DGPeriodItemZtListCount((PMSG_ANS_PERIODITEMZT_LIST_COUNT*)aRecv);

  00442	50		 push	 eax
  00443	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  00448	e8 00 00 00 00	 call	 ?DGPeriodItemZtListCount@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST_COUNT@@@Z ; CPeriodItemZt::DGPeriodItemZtListCount

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0044d	5d		 pop	 ebp
  0044e	c3		 ret	 0
$LN55@DataServer@4:

; 445  : 					break;
; 446  : 				case 5:
; 447  : 					g_PeriodItemZt.DGPeriodItemZtList((PMSG_ANS_PERIODITEMZT_LIST*)aRecv);

  0044f	50		 push	 eax
  00450	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  00455	e8 00 00 00 00	 call	 ?DGPeriodItemZtList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST@@@Z ; CPeriodItemZt::DGPeriodItemZtList

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0045a	5d		 pop	 ebp
  0045b	c3		 ret	 0
$LN54@DataServer@4:

; 448  : 					break;
; 449  : 				}
; 450  : 			}
; 451  : 			break;
; 452  : #endif
; 453  : #ifdef ZTPINV
; 454  : 		case 0xD5:
; 455  : 			{
; 456  : 				DGUpdateExtendedInvenCountResult((SDHP_ANS_SET_EXTENDEDINVEN_COUNT*)aRecv);

  0045c	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0045f	52		 push	 edx
  00460	e8 00 00 00 00	 call	 ?DGUpdateExtendedInvenCountResult@@YAXPAUSDHP_ANS_SET_EXTENDEDINVEN_COUNT@@@Z ; DGUpdateExtendedInvenCountResult
  00465	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00468	5d		 pop	 ebp
  00469	c3		 ret	 0
$LN53@DataServer@4:

; 457  : 			}
; 458  : 			break;
; 459  : 			// --
; 460  : 		case 0xD6:
; 461  : 			{
; 462  : 				DGUpdateExtendedWarehouseResult((SDHP_ANS_SET_EXTENDEDWAREHOUSE_COUNT*)aRecv);

  0046a	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0046d	50		 push	 eax
  0046e	e8 00 00 00 00	 call	 ?DGUpdateExtendedWarehouseResult@@YAXPAUSDHP_ANS_SET_EXTENDEDWAREHOUSE_COUNT@@@Z ; DGUpdateExtendedWarehouseResult
  00473	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00476	5d		 pop	 ebp
  00477	c3		 ret	 0
$LN52@DataServer@4:

; 463  : 			}
; 464  : 			break;
; 465  : #endif
; 466  : 		case 0xE2:
; 467  : 			{
; 468  : 				PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 469  : 				switch(lpMsg->subcode)

  00478	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0047b	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  0047f	83 e8 00	 sub	 eax, 0
  00482	74 31		 je	 SHORT $LN49@DataServer@4
  00484	48		 dec	 eax
  00485	74 14		 je	 SHORT $LN48@DataServer@4
  00487	48		 dec	 eax
  00488	0f 85 1a 02 00
	00		 jne	 $LN1@DataServer@4

; 481  : 					}
; 482  : 					break;
; 483  : 				case 0x02:
; 484  : 					{
; 485  : 						gBrotherhood.DG_RecvBrotherCount((DG_CheckBrother*)aRecv);

  0048e	51		 push	 ecx
  0048f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBrotherhood@@3VBrotherhood@@A ; gBrotherhood
  00494	e8 00 00 00 00	 call	 ?DG_RecvBrotherCount@Brotherhood@@QAEXPAUDG_CheckBrother@@@Z ; Brotherhood::DG_RecvBrotherCount

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00499	5d		 pop	 ebp
  0049a	c3		 ret	 0
$LN48@DataServer@4:

; 474  : 					}
; 475  : 					break;
; 476  : 
; 477  : 				case 0x01:
; 478  : 					if(g_ZtLicense.user.WinQuest)

  0049b	80 3d ce 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+206, 0
  004a2	0f 84 00 02 00
	00		 je	 $LN1@DataServer@4

; 479  : 					{
; 480  : 						gWinQuestSystem.RecvQuestInfo((DGQuestUserInfo*)aRecv);

  004a8	51		 push	 ecx
  004a9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWinQuestSystem@@3VcWinQuestSystem@@A ; gWinQuestSystem
  004ae	e8 00 00 00 00	 call	 ?RecvQuestInfo@cWinQuestSystem@@QAEXPAUDGQuestUserInfo@@@Z ; cWinQuestSystem::RecvQuestInfo

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  004b3	5d		 pop	 ebp
  004b4	c3		 ret	 0
$LN49@DataServer@4:

; 470  : 				{
; 471  : 				case 0x00:
; 472  : 					{
; 473  : 						DSBanSystem((BAN_CHAR_DS *)aRecv);

  004b5	51		 push	 ecx
  004b6	e8 00 00 00 00	 call	 ?DSBanSystem@@YAXPAUBAN_CHAR_DS@@@Z ; DSBanSystem
  004bb	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  004be	5d		 pop	 ebp
  004bf	c3		 ret	 0
$LN45@DataServer@4:

; 486  : 					}
; 487  : 					break;
; 488  : 
; 489  : 				}
; 490  : 			}
; 491  : 			break;
; 492  : 		case 0xE3:
; 493  : 			{
; 494  : 				gRanking.RecvDS((DGCharTop*)aRecv);

  004c0	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  004c3	51		 push	 ecx
  004c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gRanking@@3VcRanking@@A ; gRanking
  004c9	e8 00 00 00 00	 call	 ?RecvDS@cRanking@@QAEXPAUDGCharTop@@@Z ; cRanking::RecvDS

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  004ce	5d		 pop	 ebp
  004cf	c3		 ret	 0
$LN40@DataServer@4:

; 495  : 			}
; 496  : 			break;
; 497  : 		case 0xE4:
; 498  : 			{
; 499  : 				
; 500  : 			}
; 501  : 			break;
; 502  : 		case 0xE5:
; 503  : 			{
; 504  : 				PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 505  : 
; 506  : 				switch(lpMsg->subcode)
; 507  : 				{
; 508  : #if(CUSTOM_RETURNSPOT==TRUE)
; 509  : 				case 0x00:
; 510  : 					g_SpotReturn.DGStatus((PMSG_DG_SPOTSTATUS*)aRecv);
; 511  : 					break;
; 512  : #endif
; 513  : 				}
; 514  : 			};
; 515  : 			break;
; 516  : 		case 0xEA:
; 517  : 			{
; 518  : 				PMSG_DEFAULT2* lpDef = (PMSG_DEFAULT2*)aRecv;
; 519  : 				g_ZtGDManager.Protocol(lpDef->subcode, aRecv);

  004d0	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  004d3	0f b6 50 03	 movzx	 edx, BYTE PTR [eax+3]
  004d7	50		 push	 eax
  004d8	52		 push	 edx
  004d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  004de	e8 00 00 00 00	 call	 ?Protocol@CZtGDManager@@QAEXEPAE@Z ; CZtGDManager::Protocol

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  004e3	5d		 pop	 ebp
  004e4	c3		 ret	 0
$LN39@DataServer@4:

; 520  : 			}
; 521  : 			break;
; 522  : 		case 0xEB:
; 523  : 			{
; 524  : 				PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 525  : 
; 526  : 				switch(lpMsg->subcode)

  004e5	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  004e8	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  004ec	83 f9 20	 cmp	 ecx, 32			; 00000020H
  004ef	0f 87 b3 01 00
	00		 ja	 $LN1@DataServer@4
  004f5	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN154@DataServer@4[ecx]
  004fc	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN162@DataServer@4[ecx*4]
$LN36@DataServer@4:

; 527  : 				{
; 528  : #if(CUSTOM_MARRIAGE)
; 529  : 				case 0x00:
; 530  : 					g_Marriage.DGLoad((PMSG_ANS_MARRIAGE_LOAD*) aRecv);

  00503	50		 push	 eax
  00504	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Marriage@@3VCMarriage@@A ; g_Marriage
  00509	e8 00 00 00 00	 call	 ?DGLoad@CMarriage@@QAEXPAUPMSG_ANS_MARRIAGE_LOAD@@@Z ; CMarriage::DGLoad

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0050e	5d		 pop	 ebp
  0050f	c3		 ret	 0
$LN35@DataServer@4:

; 531  : 					break;
; 532  : 				case 0x01:
; 533  : 					g_Marriage.DGInsert((PMSG_ANS_MARRIAGE_INSERT*) aRecv);

  00510	50		 push	 eax
  00511	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Marriage@@3VCMarriage@@A ; g_Marriage
  00516	e8 00 00 00 00	 call	 ?DGInsert@CMarriage@@QAEXPAUPMSG_ANS_MARRIAGE_INSERT@@@Z ; CMarriage::DGInsert

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0051b	5d		 pop	 ebp
  0051c	c3		 ret	 0
$LN34@DataServer@4:

; 534  : 					break;
; 535  : 				case 0x02:
; 536  : 					g_Marriage.DGDelete((PMSG_ANS_MARRIAGE_DELETE*) aRecv);

  0051d	50		 push	 eax
  0051e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Marriage@@3VCMarriage@@A ; g_Marriage
  00523	e8 00 00 00 00	 call	 ?DGDelete@CMarriage@@QAEXPAUPMSG_ANS_MARRIAGE_DELETE@@@Z ; CMarriage::DGDelete

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00528	5d		 pop	 ebp
  00529	c3		 ret	 0
$LN33@DataServer@4:

; 537  : 					break;
; 538  : #endif
; 539  : #if(EVENT_DUNGEON_SIEGE)
; 540  : 				case 0x03:
; 541  : 					g_DungeonSiege.DGRegSiegeList((PMSG_DG_DUNGEON_SIEGE_REG_LIST*)aRecv); 

  0052a	50		 push	 eax
  0052b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DungeonSiege@@3VCDungeonSiege@@A ; g_DungeonSiege
  00530	e8 00 00 00 00	 call	 ?DGRegSiegeList@CDungeonSiege@@QAEXPAUPMSG_DG_DUNGEON_SIEGE_REG_LIST@@@Z ; CDungeonSiege::DGRegSiegeList

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00535	5d		 pop	 ebp
  00536	c3		 ret	 0
$LN32@DataServer@4:

; 542  : 					break;
; 543  : 				case 0x04:
; 544  : 					g_DungeonSiege.DGRegSiegeResult((PMSG_GD_DUNGEON_SIEGE_GUILD_REG_RESULT*)aRecv); 

  00537	50		 push	 eax
  00538	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DungeonSiege@@3VCDungeonSiege@@A ; g_DungeonSiege
  0053d	e8 00 00 00 00	 call	 ?DGRegSiegeResult@CDungeonSiege@@QAEXPAUPMSG_GD_DUNGEON_SIEGE_GUILD_REG_RESULT@@@Z ; CDungeonSiege::DGRegSiegeResult

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00542	5d		 pop	 ebp
  00543	c3		 ret	 0
$LN31@DataServer@4:

; 545  : 					break;
; 546  : 				case 0x06:
; 547  : 					g_DungeonSiege.DGSiegeOwner((PMSG_DG_DUNGEON_SIEGE_SELECT_OENER*)aRecv); 

  00544	50		 push	 eax
  00545	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DungeonSiege@@3VCDungeonSiege@@A ; g_DungeonSiege
  0054a	e8 00 00 00 00	 call	 ?DGSiegeOwner@CDungeonSiege@@QAEXPAUPMSG_DG_DUNGEON_SIEGE_SELECT_OENER@@@Z ; CDungeonSiege::DGSiegeOwner

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0054f	5d		 pop	 ebp
  00550	c3		 ret	 0
$LN30@DataServer@4:

; 548  : 					break;
; 549  : #endif
; 550  : 				case 0x11:
; 551  : 					#if(OFFLINE_MODE_RESTORE)
; 552  : 					g_OfflineMode.DGAnsAccauntPassword((PMSG_DGANS_OFFMODE_START*)aRecv);

  00551	50		 push	 eax
  00552	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  00557	e8 00 00 00 00	 call	 ?DGAnsAccauntPassword@OfflineMode@@QAEXPAUPMSG_DGANS_OFFMODE_START@@@Z ; OfflineMode::DGAnsAccauntPassword

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0055c	5d		 pop	 ebp
  0055d	c3		 ret	 0
$LN28@DataServer@4:

; 553  : 					#endif
; 554  : #if(CUSTOM_REFERAL_SYSTEM)
; 555  : 				case 0x14:
; 556  : 					//g_ReferralSystem.DGAnsMasterInfo((PMSG_DGANS_REFERRAL_MASTER_INFO*)aRecv);
; 557  : 					break;
; 558  : 				case 0x15:
; 559  : 					g_ReferralSystem.DGAnsMasterUpdate((PMSG_GDANS_REFERRAL_MASTER_UPDATE*)aRecv);

  0055e	50		 push	 eax
  0055f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ReferralSystem@@3VCReferralSystem@@A ; g_ReferralSystem
  00564	e8 00 00 00 00	 call	 ?DGAnsMasterUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_MASTER_UPDATE@@@Z ; CReferralSystem::DGAnsMasterUpdate

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00569	5d		 pop	 ebp
  0056a	c3		 ret	 0
$LN27@DataServer@4:

; 560  : 					break;
; 561  : 				case 0x16:
; 562  : 					g_ReferralSystem.DGAnsUserInfo((PMSG_DGANS_REFERRAL_USER_INFO*)aRecv);

  0056b	50		 push	 eax
  0056c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ReferralSystem@@3VCReferralSystem@@A ; g_ReferralSystem
  00571	e8 00 00 00 00	 call	 ?DGAnsUserInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_USER_INFO@@@Z ; CReferralSystem::DGAnsUserInfo

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00576	5d		 pop	 ebp
  00577	c3		 ret	 0
$LN26@DataServer@4:

; 563  : 					break;
; 564  : 				case 0x17:
; 565  : 					g_ReferralSystem.DGAnsUserUpdate((PMSG_GDANS_REFERRAL_USER_UPDATE*)aRecv);

  00578	50		 push	 eax
  00579	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ReferralSystem@@3VCReferralSystem@@A ; g_ReferralSystem
  0057e	e8 00 00 00 00	 call	 ?DGAnsUserUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_USER_UPDATE@@@Z ; CReferralSystem::DGAnsUserUpdate

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00583	5d		 pop	 ebp
  00584	c3		 ret	 0
$LN25@DataServer@4:

; 566  : 					break;
; 567  : #endif
; 568  : #if(DEV_BANSYSTEM)
; 569  : 				case 0x20:
; 570  : 					g_BanSystem.DSAnsSelect((PMSG_SELECT_BANSYSTEM*)aRecv);

  00585	50		 push	 eax
  00586	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BanSystem@@3VCBanSystem@@A ; g_BanSystem
  0058b	e8 00 00 00 00	 call	 ?DSAnsSelect@CBanSystem@@QAEXPAUPMSG_SELECT_BANSYSTEM@@@Z ; CBanSystem::DSAnsSelect

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00590	5d		 pop	 ebp
  00591	c3		 ret	 0
$LN24@DataServer@4:

; 571  : 					break;
; 572  : #endif
; 573  : 				}
; 574  : 			}
; 575  : 			break;
; 576  : 		case 0xE1:
; 577  : 			{
; 578  : 				PWMSG_HEAD2 * lpMsg = (PWMSG_HEAD2*)aRecv;
; 579  : 
; 580  : 				switch(lpMsg->subcode)

  00592	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00595	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  00599	0f 85 09 01 00
	00		 jne	 $LN1@DataServer@4

; 581  : 				{
; 582  : #if(CUSTOM_REFERAL_SYSTEM)
; 583  : 				case 0x00:
; 584  : 					g_ReferralSystem.DGAnsMasterInfo((PMSG_DGANS_REFERRAL_MASTER_INFO*)aRecv);

  0059f	50		 push	 eax
  005a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ReferralSystem@@3VCReferralSystem@@A ; g_ReferralSystem
  005a5	e8 00 00 00 00	 call	 ?DGAnsMasterInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_MASTER_INFO@@@Z ; CReferralSystem::DGAnsMasterInfo

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  005aa	5d		 pop	 ebp
  005ab	c3		 ret	 0
$LN20@DataServer@4:

; 585  : 					break;
; 586  : #endif
; 587  : 				}
; 588  : 			}
; 589  : 			break;
; 590  : 		case 0xEC:
; 591  : 			#if(OFFLINE_MODE_RESTORE)
; 592  : 			g_OfflineMode.DGAnsOffCharacter((SDHP_DBCHAR_INFORESULT*)aRecv);

  005ac	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  005af	52		 push	 edx
  005b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  005b5	e8 00 00 00 00	 call	 ?DGAnsOffCharacter@OfflineMode@@QAEXPAUSDHP_DBCHAR_INFORESULT@@@Z ; OfflineMode::DGAnsOffCharacter

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  005ba	5d		 pop	 ebp
  005bb	c3		 ret	 0
$LN19@DataServer@4:

; 593  : 			#endif
; 594  : 			break;
; 595  : 		case 0xED:
; 596  : 			#if(OFFLINE_MODE_RESTORE)
; 597  : 			g_OfflineMode.DGPSelectData((PMSG_GDLOAD_OFFMODE_DATA*) aRecv);

  005bc	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  005bf	50		 push	 eax
  005c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  005c5	e8 00 00 00 00	 call	 ?DGPSelectData@OfflineMode@@QAEXPAUPMSG_GDLOAD_OFFMODE_DATA@@@Z ; OfflineMode::DGPSelectData

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  005ca	5d		 pop	 ebp
  005cb	c3		 ret	 0
$LN18@DataServer@4:

; 598  : 			#endif
; 599  : 			break;
; 600  : 		case 0xEE:
; 601  : 			{
; 602  : 				PMSG_DEFAULT2* lpDef = (PMSG_DEFAULT2*)aRecv;
; 603  : 				g_ZtWebManager.Protocol(lpDef->subcode, aRecv);

  005cc	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  005cf	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  005d3	50		 push	 eax
  005d4	51		 push	 ecx
  005d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtWebManager@@3VCZtWebManager@@A ; g_ZtWebManager
  005da	e8 00 00 00 00	 call	 ?Protocol@CZtWebManager@@QAEXEPAE@Z ; CZtWebManager::Protocol

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  005df	5d		 pop	 ebp
  005e0	c3		 ret	 0
$LN17@DataServer@4:

; 604  : 			}
; 605  : 			break;
; 606  : 		case 0xEF:
; 607  : 			{
; 608  : 				PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 609  : 
; 610  : 				switch(lpMsg->subcode)

  005e1	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  005e4	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  005e8	83 e8 00	 sub	 eax, 0
  005eb	74 14		 je	 SHORT $LN14@DataServer@4
  005ed	48		 dec	 eax
  005ee	0f 85 b4 00 00
	00		 jne	 $LN1@DataServer@4

; 614  : 					break;
; 615  : 				case 0x01:
; 616  : 					g_AccountSecurity.DGAnsSave((PMSG_ANS_ACC_DATABASE_SAVE*)aRecv);

  005f4	51		 push	 ecx
  005f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AccountSecurity@@3VCAccountSecurity@@A ; g_AccountSecurity
  005fa	e8 00 00 00 00	 call	 ?DGAnsSave@CAccountSecurity@@QAEXPAUPMSG_ANS_ACC_DATABASE_SAVE@@@Z ; CAccountSecurity::DGAnsSave

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  005ff	5d		 pop	 ebp
  00600	c3		 ret	 0
$LN14@DataServer@4:

; 611  : 				{
; 612  : 				case 0x00:
; 613  : 					g_AccountSecurity.DGAnsLoad((PMSG_ANS_ACC_DATABASE_LOAD*)aRecv);

  00601	51		 push	 ecx
  00602	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AccountSecurity@@3VCAccountSecurity@@A ; g_AccountSecurity
  00607	e8 00 00 00 00	 call	 ?DGAnsLoad@CAccountSecurity@@QAEXPAUPMSG_ANS_ACC_DATABASE_LOAD@@@Z ; CAccountSecurity::DGAnsLoad

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  0060c	5d		 pop	 ebp
  0060d	c3		 ret	 0
$LN12@DataServer@4:

; 617  : 					break;
; 618  : 				}
; 619  : 			}
; 620  : 			break;
; 621  : 		case 0xFD:
; 622  : 		{
; 623  : 			PMSG_DEFAULT2 * lpMsg = (PMSG_DEFAULT2 *)aRecv;
; 624  : 			switch (lpMsg->subcode)

  0060e	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00611	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  00615	48		 dec	 eax
  00616	0f 85 8c 00 00
	00		 jne	 $LN1@DataServer@4

; 625  : 			{
; 626  : #if(CUSTOM_MULTIWAREHOUSE)
; 627  : 				case 0x01:
; 628  : 					GDGetWarehouseNumber((LOADWAREHOUSENUMBER_SAVE*)aRecv);

  0061c	51		 push	 ecx
  0061d	e8 00 00 00 00	 call	 ?GDGetWarehouseNumber@@YAXPAULOADWAREHOUSENUMBER_SAVE@@@Z ; GDGetWarehouseNumber
  00622	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00625	5d		 pop	 ebp
  00626	c3		 ret	 0
$LN7@DataServer@4:

; 629  : 					break;
; 630  : #endif
; 631  : 			}
; 632  : 		}
; 633  : 		break;
; 634  : 
; 635  : #if (DEV_GUILDBANK)
; 636  : 		//case Protocol_GSRecv_GetWarehouseList:
; 637  : 		//	DGGetWarehouseList((SDHP_GETWAREHOUSEDB_SAVE *)aRecv);
; 638  : 		//	break;
; 639  : 		case Protocol_GSRecv_GetWarehouseNoItem:
; 640  : 			GDGetWarehouseNoItem((SDHP_GETWAREHOUSEDB_RESULT *)aRecv);
; 641  : 			break;
; 642  : 		//case Protocol_GSRecv_GetWarehouseList:
; 643  : 		//	DGGetWarehouseList((SDHP_GETWAREHOUSEDB_SAVE *)aRecv);
; 644  : 		//	break;
; 645  : 		case Protocol_GSRecv_GetGuildWarehouseList:
; 646  : 			DGGetWarehouseList((SDHP_GETWAREHOUSEDB_SAVE *)aRecv);

  00627	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0062a	52		 push	 edx
  0062b	e8 00 00 00 00	 call	 ?DGGetWarehouseList@@YAXPAUSDHP_GETWAREHOUSEDB_SAVE@@@Z ; DGGetWarehouseList
  00630	83 c4 04	 add	 esp, 4

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  00633	5d		 pop	 ebp
  00634	c3		 ret	 0
$LN6@DataServer@4:
  00635	56		 push	 esi

; 647  : 			break;
; 648  : #endif
; 649  : 		#if(DEV_PLAYERSHOP)
; 650  : 		case 0xFE:
; 651  : 			{
; 652  : 				if(aRecv[0] == 0xC2 && aRecv[4] == 0x00)

  00636	8b 75 0c	 mov	 esi, DWORD PTR _aRecv$[ebp]
  00639	80 3e c2	 cmp	 BYTE PTR [esi], 194	; 000000c2H
  0063c	75 11		 jne	 SHORT $LN5@DataServer@4
  0063e	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00642	75 0b		 jne	 SHORT $LN5@DataServer@4

; 653  : 				{
; 654  : 					g_ItemMarket.DGAnsItemList((SDHP_ANS_MARKET_ITEM*)aRecv);

  00644	56		 push	 esi
  00645	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMarket@@3VCItemMarket@@A ; g_ItemMarket
  0064a	e8 00 00 00 00	 call	 ?DGAnsItemList@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_ITEM@@@Z ; CItemMarket::DGAnsItemList
$LN5@DataServer@4:

; 655  : 				}
; 656  : 
; 657  : 				if(aRecv[0] == 0xC1 && aRecv[3] == 0x01)

  0064f	80 3e c1	 cmp	 BYTE PTR [esi], 193	; 000000c1H
  00652	75 53		 jne	 SHORT $LN155@DataServer@4
  00654	80 7e 03 01	 cmp	 BYTE PTR [esi+3], 1
  00658	75 0b		 jne	 SHORT $LN4@DataServer@4

; 658  : 				{
; 659  : 					g_ItemMarket.DGAnsItemSell((SDHP_ANS_MARKET_SELL*)aRecv);

  0065a	56		 push	 esi
  0065b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMarket@@3VCItemMarket@@A ; g_ItemMarket
  00660	e8 00 00 00 00	 call	 ?DGAnsItemSell@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_SELL@@@Z ; CItemMarket::DGAnsItemSell
$LN4@DataServer@4:

; 660  : 				}
; 661  : 
; 662  : 				if(aRecv[0] == 0xC1 && aRecv[3] == 0x02)

  00665	80 3e c1	 cmp	 BYTE PTR [esi], 193	; 000000c1H
  00668	75 3d		 jne	 SHORT $LN155@DataServer@4
  0066a	80 7e 03 02	 cmp	 BYTE PTR [esi+3], 2
  0066e	75 0b		 jne	 SHORT $LN3@DataServer@4

; 663  : 				{
; 664  : 					g_ItemMarket.DGAnsItemBuy((SDHP_ANS_MARKET_BUY*)aRecv);

  00670	56		 push	 esi
  00671	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMarket@@3VCItemMarket@@A ; g_ItemMarket
  00676	e8 00 00 00 00	 call	 ?DGAnsItemBuy@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_BUY@@@Z ; CItemMarket::DGAnsItemBuy
$LN3@DataServer@4:

; 665  : 				}
; 666  : 
; 667  : 				if(aRecv[0] == 0xC1 && aRecv[3] == 0x03)

  0067b	80 3e c1	 cmp	 BYTE PTR [esi], 193	; 000000c1H
  0067e	75 27		 jne	 SHORT $LN155@DataServer@4
  00680	80 7e 03 03	 cmp	 BYTE PTR [esi+3], 3
  00684	75 0b		 jne	 SHORT $LN2@DataServer@4

; 668  : 				{
; 669  : 					g_ItemMarket.DGAnsItemStatus((SDHP_ANS_MARKET_STATUS*)aRecv);

  00686	56		 push	 esi
  00687	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMarket@@3VCItemMarket@@A ; g_ItemMarket
  0068c	e8 00 00 00 00	 call	 ?DGAnsItemStatus@CItemMarket@@QAEXPAUSDHP_ANS_MARKET_STATUS@@@Z ; CItemMarket::DGAnsItemStatus
$LN2@DataServer@4:

; 670  : 				}
; 671  : 				#if(MARKET_ITEM_RECV)
; 672  : 				if(aRecv[0] == 0xC1 && aRecv[3] == 0x04)

  00691	80 3e c1	 cmp	 BYTE PTR [esi], 193	; 000000c1H
  00694	75 11		 jne	 SHORT $LN155@DataServer@4
  00696	80 7e 03 04	 cmp	 BYTE PTR [esi+3], 4
  0069a	75 0b		 jne	 SHORT $LN155@DataServer@4

; 673  : 				{
; 674  : 					g_ItemMarket.GDReqItemDate((SDHP_REQ_MARKET_ITEMRECV*)aRecv);

  0069c	56		 push	 esi
  0069d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMarket@@3VCItemMarket@@A ; g_ItemMarket
  006a2	e8 00 00 00 00	 call	 ?GDReqItemDate@CItemMarket@@QAEXPAUSDHP_REQ_MARKET_ITEMRECV@@@Z ; CItemMarket::GDReqItemDate
$LN155@DataServer@4:
  006a7	5e		 pop	 esi
$LN1@DataServer@4:

; 675  : 				}
; 676  : 				#endif
; 677  : 			}
; 678  : 			break;
; 679  : 	#endif
; 680  : 	}
; 681  : }

  006a8	5d		 pop	 ebp
  006a9	c3		 ret	 0
  006aa	8b ff		 npad	 2
$LN156@DataServer@4:
  006ac	00 00 00 00	 DD	 $LN146@DataServer@4
  006b0	00 00 00 00	 DD	 $LN145@DataServer@4
  006b4	00 00 00 00	 DD	 $LN144@DataServer@4
  006b8	00 00 00 00	 DD	 $LN143@DataServer@4
  006bc	00 00 00 00	 DD	 $LN142@DataServer@4
  006c0	00 00 00 00	 DD	 $LN141@DataServer@4
  006c4	00 00 00 00	 DD	 $LN140@DataServer@4
  006c8	00 00 00 00	 DD	 $LN139@DataServer@4
  006cc	00 00 00 00	 DD	 $LN138@DataServer@4
  006d0	00 00 00 00	 DD	 $LN137@DataServer@4
  006d4	00 00 00 00	 DD	 $LN136@DataServer@4
  006d8	00 00 00 00	 DD	 $LN135@DataServer@4
  006dc	00 00 00 00	 DD	 $LN134@DataServer@4
  006e0	00 00 00 00	 DD	 $LN133@DataServer@4
  006e4	00 00 00 00	 DD	 $LN132@DataServer@4
  006e8	00 00 00 00	 DD	 $LN105@DataServer@4
  006ec	00 00 00 00	 DD	 $LN104@DataServer@4
  006f0	00 00 00 00	 DD	 $LN103@DataServer@4
  006f4	00 00 00 00	 DD	 $LN102@DataServer@4
  006f8	00 00 00 00	 DD	 $LN101@DataServer@4
  006fc	00 00 00 00	 DD	 $LN100@DataServer@4
  00700	00 00 00 00	 DD	 $LN99@DataServer@4
  00704	00 00 00 00	 DD	 $LN98@DataServer@4
  00708	00 00 00 00	 DD	 $LN97@DataServer@4
  0070c	00 00 00 00	 DD	 $LN85@DataServer@4
  00710	00 00 00 00	 DD	 $LN84@DataServer@4
  00714	00 00 00 00	 DD	 $LN96@DataServer@4
  00718	00 00 00 00	 DD	 $LN95@DataServer@4
  0071c	00 00 00 00	 DD	 $LN1@DataServer@4
  00720	00 00 00 00	 DD	 $LN1@DataServer@4
$LN152@DataServer@4:
  00724	00		 DB	 0
  00725	01		 DB	 1
  00726	1d		 DB	 29			; 0000001dH
  00727	1d		 DB	 29			; 0000001dH
  00728	02		 DB	 2
  00729	03		 DB	 3
  0072a	04		 DB	 4
  0072b	1d		 DB	 29			; 0000001dH
  0072c	05		 DB	 5
  0072d	1d		 DB	 29			; 0000001dH
  0072e	1d		 DB	 29			; 0000001dH
  0072f	1d		 DB	 29			; 0000001dH
  00730	1d		 DB	 29			; 0000001dH
  00731	1d		 DB	 29			; 0000001dH
  00732	1d		 DB	 29			; 0000001dH
  00733	1d		 DB	 29			; 0000001dH
  00734	06		 DB	 6
  00735	1d		 DB	 29			; 0000001dH
  00736	1d		 DB	 29			; 0000001dH
  00737	1d		 DB	 29			; 0000001dH
  00738	07		 DB	 7
  00739	1d		 DB	 29			; 0000001dH
  0073a	08		 DB	 8
  0073b	09		 DB	 9
  0073c	1d		 DB	 29			; 0000001dH
  0073d	1d		 DB	 29			; 0000001dH
  0073e	1d		 DB	 29			; 0000001dH
  0073f	1d		 DB	 29			; 0000001dH
  00740	1d		 DB	 29			; 0000001dH
  00741	1d		 DB	 29			; 0000001dH
  00742	1d		 DB	 29			; 0000001dH
  00743	1d		 DB	 29			; 0000001dH
  00744	1d		 DB	 29			; 0000001dH
  00745	1d		 DB	 29			; 0000001dH
  00746	1d		 DB	 29			; 0000001dH
  00747	1d		 DB	 29			; 0000001dH
  00748	1d		 DB	 29			; 0000001dH
  00749	1d		 DB	 29			; 0000001dH
  0074a	1d		 DB	 29			; 0000001dH
  0074b	1d		 DB	 29			; 0000001dH
  0074c	1d		 DB	 29			; 0000001dH
  0074d	1d		 DB	 29			; 0000001dH
  0074e	1d		 DB	 29			; 0000001dH
  0074f	1d		 DB	 29			; 0000001dH
  00750	1d		 DB	 29			; 0000001dH
  00751	1d		 DB	 29			; 0000001dH
  00752	1d		 DB	 29			; 0000001dH
  00753	1d		 DB	 29			; 0000001dH
  00754	0a		 DB	 10			; 0000000aH
  00755	1d		 DB	 29			; 0000001dH
  00756	1d		 DB	 29			; 0000001dH
  00757	1d		 DB	 29			; 0000001dH
  00758	1d		 DB	 29			; 0000001dH
  00759	1d		 DB	 29			; 0000001dH
  0075a	1d		 DB	 29			; 0000001dH
  0075b	1d		 DB	 29			; 0000001dH
  0075c	1d		 DB	 29			; 0000001dH
  0075d	1d		 DB	 29			; 0000001dH
  0075e	1d		 DB	 29			; 0000001dH
  0075f	1d		 DB	 29			; 0000001dH
  00760	1d		 DB	 29			; 0000001dH
  00761	1d		 DB	 29			; 0000001dH
  00762	1d		 DB	 29			; 0000001dH
  00763	1d		 DB	 29			; 0000001dH
  00764	1d		 DB	 29			; 0000001dH
  00765	1d		 DB	 29			; 0000001dH
  00766	1d		 DB	 29			; 0000001dH
  00767	1d		 DB	 29			; 0000001dH
  00768	1d		 DB	 29			; 0000001dH
  00769	1d		 DB	 29			; 0000001dH
  0076a	1d		 DB	 29			; 0000001dH
  0076b	1d		 DB	 29			; 0000001dH
  0076c	1d		 DB	 29			; 0000001dH
  0076d	1d		 DB	 29			; 0000001dH
  0076e	1d		 DB	 29			; 0000001dH
  0076f	1d		 DB	 29			; 0000001dH
  00770	1d		 DB	 29			; 0000001dH
  00771	1d		 DB	 29			; 0000001dH
  00772	1d		 DB	 29			; 0000001dH
  00773	1d		 DB	 29			; 0000001dH
  00774	1d		 DB	 29			; 0000001dH
  00775	1d		 DB	 29			; 0000001dH
  00776	0b		 DB	 11			; 0000000bH
  00777	1d		 DB	 29			; 0000001dH
  00778	1d		 DB	 29			; 0000001dH
  00779	1d		 DB	 29			; 0000001dH
  0077a	0c		 DB	 12			; 0000000cH
  0077b	1d		 DB	 29			; 0000001dH
  0077c	1d		 DB	 29			; 0000001dH
  0077d	1d		 DB	 29			; 0000001dH
  0077e	1d		 DB	 29			; 0000001dH
  0077f	1d		 DB	 29			; 0000001dH
  00780	1d		 DB	 29			; 0000001dH
  00781	1d		 DB	 29			; 0000001dH
  00782	1d		 DB	 29			; 0000001dH
  00783	1d		 DB	 29			; 0000001dH
  00784	0d		 DB	 13			; 0000000dH
  00785	1d		 DB	 29			; 0000001dH
  00786	1d		 DB	 29			; 0000001dH
  00787	1d		 DB	 29			; 0000001dH
  00788	1d		 DB	 29			; 0000001dH
  00789	1d		 DB	 29			; 0000001dH
  0078a	1d		 DB	 29			; 0000001dH
  0078b	1d		 DB	 29			; 0000001dH
  0078c	1d		 DB	 29			; 0000001dH
  0078d	1d		 DB	 29			; 0000001dH
  0078e	1d		 DB	 29			; 0000001dH
  0078f	1d		 DB	 29			; 0000001dH
  00790	1d		 DB	 29			; 0000001dH
  00791	1d		 DB	 29			; 0000001dH
  00792	1d		 DB	 29			; 0000001dH
  00793	1d		 DB	 29			; 0000001dH
  00794	1d		 DB	 29			; 0000001dH
  00795	1d		 DB	 29			; 0000001dH
  00796	1d		 DB	 29			; 0000001dH
  00797	1d		 DB	 29			; 0000001dH
  00798	1d		 DB	 29			; 0000001dH
  00799	1d		 DB	 29			; 0000001dH
  0079a	1d		 DB	 29			; 0000001dH
  0079b	1d		 DB	 29			; 0000001dH
  0079c	1d		 DB	 29			; 0000001dH
  0079d	1d		 DB	 29			; 0000001dH
  0079e	1d		 DB	 29			; 0000001dH
  0079f	1d		 DB	 29			; 0000001dH
  007a0	1d		 DB	 29			; 0000001dH
  007a1	1d		 DB	 29			; 0000001dH
  007a2	1d		 DB	 29			; 0000001dH
  007a3	1d		 DB	 29			; 0000001dH
  007a4	0e		 DB	 14			; 0000000eH
  007a5	0f		 DB	 15			; 0000000fH
  007a6	10		 DB	 16			; 00000010H
  007a7	11		 DB	 17			; 00000011H
  007a8	12		 DB	 18			; 00000012H
  007a9	13		 DB	 19			; 00000013H
  007aa	14		 DB	 20			; 00000014H
  007ab	15		 DB	 21			; 00000015H
  007ac	16		 DB	 22			; 00000016H
  007ad	17		 DB	 23			; 00000017H
  007ae	1d		 DB	 29			; 0000001dH
  007af	1d		 DB	 29			; 0000001dH
  007b0	1d		 DB	 29			; 0000001dH
  007b1	1d		 DB	 29			; 0000001dH
  007b2	1d		 DB	 29			; 0000001dH
  007b3	1d		 DB	 29			; 0000001dH
  007b4	1d		 DB	 29			; 0000001dH
  007b5	1d		 DB	 29			; 0000001dH
  007b6	1d		 DB	 29			; 0000001dH
  007b7	1d		 DB	 29			; 0000001dH
  007b8	1d		 DB	 29			; 0000001dH
  007b9	1d		 DB	 29			; 0000001dH
  007ba	1d		 DB	 29			; 0000001dH
  007bb	1d		 DB	 29			; 0000001dH
  007bc	1d		 DB	 29			; 0000001dH
  007bd	1d		 DB	 29			; 0000001dH
  007be	1d		 DB	 29			; 0000001dH
  007bf	1d		 DB	 29			; 0000001dH
  007c0	1d		 DB	 29			; 0000001dH
  007c1	1d		 DB	 29			; 0000001dH
  007c2	1d		 DB	 29			; 0000001dH
  007c3	1d		 DB	 29			; 0000001dH
  007c4	1d		 DB	 29			; 0000001dH
  007c5	18		 DB	 24			; 00000018H
  007c6	19		 DB	 25			; 00000019H
  007c7	1d		 DB	 29			; 0000001dH
  007c8	1d		 DB	 29			; 0000001dH
  007c9	1d		 DB	 29			; 0000001dH
  007ca	1d		 DB	 29			; 0000001dH
  007cb	1d		 DB	 29			; 0000001dH
  007cc	1d		 DB	 29			; 0000001dH
  007cd	1d		 DB	 29			; 0000001dH
  007ce	1d		 DB	 29			; 0000001dH
  007cf	1d		 DB	 29			; 0000001dH
  007d0	1d		 DB	 29			; 0000001dH
  007d1	1d		 DB	 29			; 0000001dH
  007d2	1d		 DB	 29			; 0000001dH
  007d3	1d		 DB	 29			; 0000001dH
  007d4	1a		 DB	 26			; 0000001aH
  007d5	1b		 DB	 27			; 0000001bH
  007d6	1c		 DB	 28			; 0000001cH
  007d7	1d		 DB	 29			; 0000001dH
  007d8	1d		 DB	 29			; 0000001dH
  007d9	1d		 DB	 29			; 0000001dH
  007da	1d		 DB	 29			; 0000001dH
  007db	1d		 DB	 29			; 0000001dH
  007dc	1d		 DB	 29			; 0000001dH
  007dd	1d		 DB	 29			; 0000001dH
  007de	1d		 DB	 29			; 0000001dH
  007df	1d		 DB	 29			; 0000001dH
  007e0	1d		 DB	 29			; 0000001dH
  007e1	1d		 DB	 29			; 0000001dH
  007e2	1d		 DB	 29			; 0000001dH
  007e3	1d		 DB	 29			; 0000001dH
  007e4	1d		 DB	 29			; 0000001dH
  007e5	1d		 DB	 29			; 0000001dH
  007e6	1d		 DB	 29			; 0000001dH
  007e7	1d		 DB	 29			; 0000001dH
  007e8	1d		 DB	 29			; 0000001dH
  007e9	1d		 DB	 29			; 0000001dH
  007ea	06		 DB	 6
  007eb	90		 npad	 1
$LN157@DataServer@4:
  007ec	00 00 00 00	 DD	 $LN129@DataServer@4
  007f0	00 00 00 00	 DD	 $LN128@DataServer@4
  007f4	00 00 00 00	 DD	 $LN1@DataServer@4
  007f8	00 00 00 00	 DD	 $LN127@DataServer@4
  007fc	00 00 00 00	 DD	 $LN126@DataServer@4
  00800	00 00 00 00	 DD	 $LN125@DataServer@4
  00804	00 00 00 00	 DD	 $LN124@DataServer@4
  00808	00 00 00 00	 DD	 $LN123@DataServer@4
  0080c	00 00 00 00	 DD	 $LN122@DataServer@4
  00810	00 00 00 00	 DD	 $LN121@DataServer@4
  00814	00 00 00 00	 DD	 $LN120@DataServer@4
  00818	00 00 00 00	 DD	 $LN119@DataServer@4
  0081c	00 00 00 00	 DD	 $LN118@DataServer@4
  00820	00 00 00 00	 DD	 $LN117@DataServer@4
  00824	00 00 00 00	 DD	 $LN116@DataServer@4
  00828	00 00 00 00	 DD	 $LN115@DataServer@4
  0082c	00 00 00 00	 DD	 $LN114@DataServer@4
  00830	00 00 00 00	 DD	 $LN113@DataServer@4
  00834	00 00 00 00	 DD	 $LN112@DataServer@4
  00838	00 00 00 00	 DD	 $LN1@DataServer@4
  0083c	00 00 00 00	 DD	 $LN1@DataServer@4
  00840	00 00 00 00	 DD	 $LN1@DataServer@4
  00844	00 00 00 00	 DD	 $LN111@DataServer@4
  00848	00 00 00 00	 DD	 $LN110@DataServer@4
  0084c	00 00 00 00	 DD	 $LN109@DataServer@4
  00850	00 00 00 00	 DD	 $LN108@DataServer@4
  00854	00 00 00 00	 DD	 $LN107@DataServer@4
  00858	00 00 00 00	 DD	 $LN106@DataServer@4
$LN158@DataServer@4:
  0085c	00 00 00 00	 DD	 $LN92@DataServer@4
  00860	00 00 00 00	 DD	 $LN62@DataServer@4
  00864	00 00 00 00	 DD	 $LN67@DataServer@4
  00868	00 00 00 00	 DD	 $LN71@DataServer@4
  0086c	00 00 00 00	 DD	 $LN63@DataServer@4
  00870	00 00 00 00	 DD	 $LN54@DataServer@4
  00874	00 00 00 00	 DD	 $LN53@DataServer@4
  00878	00 00 00 00	 DD	 $LN7@DataServer@4
  0087c	00 00 00 00	 DD	 $LN1@DataServer@4
  00880	00 00 00 00	 DD	 $LN24@DataServer@4
  00884	00 00 00 00	 DD	 $LN52@DataServer@4
  00888	00 00 00 00	 DD	 $LN45@DataServer@4
  0088c	00 00 00 00	 DD	 $LN40@DataServer@4
  00890	00 00 00 00	 DD	 $LN39@DataServer@4
  00894	00 00 00 00	 DD	 $LN20@DataServer@4
  00898	00 00 00 00	 DD	 $LN19@DataServer@4
  0089c	00 00 00 00	 DD	 $LN18@DataServer@4
  008a0	00 00 00 00	 DD	 $LN17@DataServer@4
  008a4	00 00 00 00	 DD	 $LN79@DataServer@4
  008a8	00 00 00 00	 DD	 $LN12@DataServer@4
  008ac	00 00 00 00	 DD	 $LN6@DataServer@4
  008b0	00 00 00 00	 DD	 $LN83@DataServer@4
  008b4	00 00 00 00	 DD	 $LN1@DataServer@4
$LN153@DataServer@4:
  008b8	00		 DB	 0
  008b9	01		 DB	 1
  008ba	02		 DB	 2
  008bb	03		 DB	 3
  008bc	04		 DB	 4
  008bd	05		 DB	 5
  008be	06		 DB	 6
  008bf	07		 DB	 7
  008c0	16		 DB	 22			; 00000016H
  008c1	16		 DB	 22			; 00000016H
  008c2	16		 DB	 22			; 00000016H
  008c3	16		 DB	 22			; 00000016H
  008c4	16		 DB	 22			; 00000016H
  008c5	16		 DB	 22			; 00000016H
  008c6	16		 DB	 22			; 00000016H
  008c7	16		 DB	 22			; 00000016H
  008c8	08		 DB	 8
  008c9	09		 DB	 9
  008ca	0a		 DB	 10			; 0000000aH
  008cb	0b		 DB	 11			; 0000000bH
  008cc	16		 DB	 22			; 00000016H
  008cd	08		 DB	 8
  008ce	16		 DB	 22			; 00000016H
  008cf	16		 DB	 22			; 00000016H
  008d0	16		 DB	 22			; 00000016H
  008d1	16		 DB	 22			; 00000016H
  008d2	0c		 DB	 12			; 0000000cH
  008d3	0d		 DB	 13			; 0000000dH
  008d4	0e		 DB	 14			; 0000000eH
  008d5	0f		 DB	 15			; 0000000fH
  008d6	10		 DB	 16			; 00000010H
  008d7	11		 DB	 17			; 00000011H
  008d8	16		 DB	 22			; 00000016H
  008d9	16		 DB	 22			; 00000016H
  008da	16		 DB	 22			; 00000016H
  008db	16		 DB	 22			; 00000016H
  008dc	16		 DB	 22			; 00000016H
  008dd	16		 DB	 22			; 00000016H
  008de	16		 DB	 22			; 00000016H
  008df	16		 DB	 22			; 00000016H
  008e0	12		 DB	 18			; 00000012H
  008e1	16		 DB	 22			; 00000016H
  008e2	16		 DB	 22			; 00000016H
  008e3	16		 DB	 22			; 00000016H
  008e4	16		 DB	 22			; 00000016H
  008e5	13		 DB	 19			; 00000013H
  008e6	14		 DB	 20			; 00000014H
  008e7	15		 DB	 21			; 00000015H
$LN159@DataServer@4:
  008e8	00 00 00 00	 DD	 $LN89@DataServer@4
  008ec	00 00 00 00	 DD	 $LN1@DataServer@4
  008f0	00 00 00 00	 DD	 $LN88@DataServer@4
  008f4	00 00 00 00	 DD	 $LN1@DataServer@4
  008f8	00 00 00 00	 DD	 $LN87@DataServer@4
  008fc	00 00 00 00	 DD	 $LN1@DataServer@4
  00900	00 00 00 00	 DD	 $LN86@DataServer@4
$LN160@DataServer@4:
  00904	00 00 00 00	 DD	 $LN75@DataServer@4
  00908	00 00 00 00	 DD	 $LN1@DataServer@4
  0090c	00 00 00 00	 DD	 $LN74@DataServer@4
  00910	00 00 00 00	 DD	 $LN73@DataServer@4
  00914	00 00 00 00	 DD	 $LN72@DataServer@4
$LN161@DataServer@4:
  00918	00 00 00 00	 DD	 $LN59@DataServer@4
  0091c	00 00 00 00	 DD	 $LN58@DataServer@4
  00920	00 00 00 00	 DD	 $LN57@DataServer@4
  00924	00 00 00 00	 DD	 $LN56@DataServer@4
  00928	00 00 00 00	 DD	 $LN55@DataServer@4
$LN162@DataServer@4:
  0092c	00 00 00 00	 DD	 $LN36@DataServer@4
  00930	00 00 00 00	 DD	 $LN35@DataServer@4
  00934	00 00 00 00	 DD	 $LN34@DataServer@4
  00938	00 00 00 00	 DD	 $LN33@DataServer@4
  0093c	00 00 00 00	 DD	 $LN32@DataServer@4
  00940	00 00 00 00	 DD	 $LN31@DataServer@4
  00944	00 00 00 00	 DD	 $LN30@DataServer@4
  00948	00 00 00 00	 DD	 $LN28@DataServer@4
  0094c	00 00 00 00	 DD	 $LN27@DataServer@4
  00950	00 00 00 00	 DD	 $LN26@DataServer@4
  00954	00 00 00 00	 DD	 $LN25@DataServer@4
  00958	00 00 00 00	 DD	 $LN1@DataServer@4
$LN154@DataServer@4:
  0095c	00		 DB	 0
  0095d	01		 DB	 1
  0095e	02		 DB	 2
  0095f	03		 DB	 3
  00960	04		 DB	 4
  00961	0b		 DB	 11			; 0000000bH
  00962	05		 DB	 5
  00963	0b		 DB	 11			; 0000000bH
  00964	0b		 DB	 11			; 0000000bH
  00965	0b		 DB	 11			; 0000000bH
  00966	0b		 DB	 11			; 0000000bH
  00967	0b		 DB	 11			; 0000000bH
  00968	0b		 DB	 11			; 0000000bH
  00969	0b		 DB	 11			; 0000000bH
  0096a	0b		 DB	 11			; 0000000bH
  0096b	0b		 DB	 11			; 0000000bH
  0096c	0b		 DB	 11			; 0000000bH
  0096d	06		 DB	 6
  0096e	0b		 DB	 11			; 0000000bH
  0096f	0b		 DB	 11			; 0000000bH
  00970	0b		 DB	 11			; 0000000bH
  00971	07		 DB	 7
  00972	08		 DB	 8
  00973	09		 DB	 9
  00974	0b		 DB	 11			; 0000000bH
  00975	0b		 DB	 11			; 0000000bH
  00976	0b		 DB	 11			; 0000000bH
  00977	0b		 DB	 11			; 0000000bH
  00978	0b		 DB	 11			; 0000000bH
  00979	0b		 DB	 11			; 0000000bH
  0097a	0b		 DB	 11			; 0000000bH
  0097b	0b		 DB	 11			; 0000000bH
  0097c	0a		 DB	 10			; 0000000aH
?DataServerProtocolCore@@YAXEPAEH@Z ENDP		; DataServerProtocolCore
_TEXT	ENDS
END
