; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\DbSave.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Initialize@CDbSave@@QAEHXZ			; CDbSave::Initialize
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	??0WZQueue@@QAE@I@Z:PROC			; WZQueue::WZQueue
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File e:\work\tranet_version\gs\gameserver\dbsave.cpp
xdata$x	SEGMENT
__unwindtable$?Initialize@CDbSave@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CDbSave@@QAEHXZ$0
__ehfuncinfo$?Initialize@CDbSave@@QAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@CDbSave@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?Initialize@CDbSave@@QAEHXZ
_TEXT	SEGMENT
$T209058 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Initialize@CDbSave@@QAEHXZ PROC			; CDbSave::Initialize, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Initialize@CDbSave@@QAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 25   : 	
; 26   : 	this->m_lpWzQueue  = new WZQueue(1280);

  00026	6a 2c		 push	 44			; 0000002cH
  00028	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f0	 mov	 DWORD PTR $T209058[ebp], eax
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	85 c0		 test	 eax, eax
  0003c	74 0e		 je	 SHORT $LN4@Initialize
  0003e	68 00 05 00 00	 push	 1280			; 00000500H
  00043	8b c8		 mov	 ecx, eax
  00045	e8 00 00 00 00	 call	 ??0WZQueue@@QAE@I@Z	; WZQueue::WZQueue
  0004a	eb 02		 jmp	 SHORT $LN5@Initialize
$LN4@Initialize:
  0004c	33 c0		 xor	 eax, eax
$LN5@Initialize:
  0004e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 27   : 
; 28   : 	if ( this->m_lpWzQueue == 0)

  00051	85 c0		 test	 eax, eax
  00053	75 10		 jne	 SHORT $LN1@Initialize

; 35   : }

  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN1@Initialize:

; 29   : 	{
; 30   : 		return FALSE;
; 31   : 	}
; 32   : 	
; 33   : 	InitializeCriticalSection(&this->criti );

  00065	83 c6 14	 add	 esi, 20			; 00000014H
  00068	56		 push	 esi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 34   : 	return TRUE;

  0006f	b8 01 00 00 00	 mov	 eax, 1

; 35   : }

  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@CDbSave@@QAEHXZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T209058[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Initialize@CDbSave@@QAEHXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@CDbSave@@QAEHXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@CDbSave@@QAEHXZ ENDP			; CDbSave::Initialize
PUBLIC	??_GWZQueue@@QAEPAXI@Z				; WZQueue::`scalar deleting destructor'
EXTRN	??1WZQueue@@QAE@XZ:PROC				; WZQueue::~WZQueue
; Function compile flags: /Ogtp
;	COMDAT ??_GWZQueue@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWZQueue@@QAEPAXI@Z PROC				; WZQueue::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1WZQueue@@QAE@XZ	; WZQueue::~WZQueue
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GWZQueue@@QAEPAXI@Z ENDP				; WZQueue::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Add@CDbSave@@QAEHPAEHEH@Z			; CDbSave::Add
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	?AddToQueue@WZQueue@@QAEHQAEIEH@Z:PROC		; WZQueue::AddToQueue
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Add@CDbSave@@QAEHPAEHEH@Z
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_index$ = 20						; size = 4
?Add@CDbSave@@QAEHPAEHEH@Z PROC				; CDbSave::Add, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 52   : 	EnterCriticalSection(&this->criti);

  00007	8d 7e 14	 lea	 edi, DWORD PTR [esi+20]
  0000a	57		 push	 edi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 53   : 
; 54   : 	BOOL bRet=this->m_lpWzQueue->AddToQueue(pObject, nSize, headcode, index);

  00011	8b 45 14	 mov	 eax, DWORD PTR _index$[ebp]
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _headcode$[ebp]
  00017	8b 55 0c	 mov	 edx, DWORD PTR _nSize$[ebp]
  0001a	50		 push	 eax
  0001b	8b 45 08	 mov	 eax, DWORD PTR _pObject$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?AddToQueue@WZQueue@@QAEHQAEIEH@Z ; WZQueue::AddToQueue

; 55   : 
; 56   : 	LeaveCriticalSection(&this->criti);

  00029	57		 push	 edi
  0002a	8b f0		 mov	 esi, eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00032	5f		 pop	 edi

; 57   : 	return bRet;

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi

; 58   : }

  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
?Add@CDbSave@@QAEHPAEHEH@Z ENDP				; CDbSave::Add
_TEXT	ENDS
PUBLIC	?End@CDbSave@@QAEXXZ				; CDbSave::End
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
; Function compile flags: /Ogtp
;	COMDAT ?End@CDbSave@@QAEXXZ
_TEXT	SEGMENT
?End@CDbSave@@QAEXXZ PROC				; CDbSave::End, COMDAT
; _this$ = ecx

; 87   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 88   : 	if ( this->m_ThreadHandle != 0 )

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	85 c0		 test	 eax, eax
  00008	74 21		 je	 SHORT $LN1@End

; 89   : 	{
; 90   : 		this->m_bIsRunning = FALSE;
; 91   : 		WaitForSingleObject(this->m_ThreadHandle , INFINITE);

  0000a	6a ff		 push	 -1
  0000c	50		 push	 eax
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 92   : 		CloseHandle(this->m_ThreadHandle );

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 93   : 		this->m_ThreadHandle=0;

  00024	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@End:
  0002b	5e		 pop	 esi

; 94   : 	}
; 95   : }

  0002c	c3		 ret	 0
?End@CDbSave@@QAEXXZ ENDP				; CDbSave::End
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ThreadProc@CDbSave@@QAEKXZ			; CDbSave::ThreadProc
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?wsDataCli@@3VwsJoinServerCli@@A:BYTE		; wsDataCli
EXTRN	?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z:PROC	; WZQueue::GetFromQueue
EXTRN	?GetCount@WZQueue@@QAEIXZ:PROC			; WZQueue::GetCount
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ThreadProc@CDbSave@@QAEKXZ
_TEXT	SEGMENT
_headcode$ = -5016					; size = 4
_nSize$ = -5012						; size = 4
_uindex$ = -5008					; size = 4
_RecvData$ = -5004					; size = 5000
__$ArrayPad$ = -4					; size = 4
?ThreadProc@CDbSave@@QAEKXZ PROC			; CDbSave::ThreadProc, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 98 13 00 00	 mov	 eax, 5016		; 00001398H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx
  0001c	8d 5f 14	 lea	 ebx, DWORD PTR [edi+20]
  0001f	90		 npad	 1
$LL7@ThreadProc:

; 99   : 	int count;
; 100  : 	BYTE RecvData[5000];
; 101  : 	unsigned int nSize;
; 102  : 	int headcode;
; 103  : 	int uindex;
; 104  : 
; 105  : 	while ( true )
; 106  : 	{
; 107  : 		EnterCriticalSection(&this->criti);

  00020	53		 push	 ebx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 108  : 		count=this->m_lpWzQueue->GetCount();

  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002a	e8 00 00 00 00	 call	 ?GetCount@WZQueue@@QAEIXZ ; WZQueue::GetCount
  0002f	8b f0		 mov	 esi, eax

; 109  : 
; 110  : 		if ( count != 0 )

  00031	85 f6		 test	 esi, esi
  00033	74 75		 je	 SHORT $LN14@ThreadProc

; 111  : 		{
; 112  : 			if (this->m_lpWzQueue->GetFromQueue((LPBYTE)RecvData, &nSize, (UCHAR*)&headcode, &uindex) == 1 )

  00035	8d 85 70 ec ff
	ff		 lea	 eax, DWORD PTR _uindex$[ebp]
  0003b	50		 push	 eax
  0003c	8d 8d 68 ec ff
	ff		 lea	 ecx, DWORD PTR _headcode$[ebp]
  00042	51		 push	 ecx
  00043	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00046	8d 95 6c ec ff
	ff		 lea	 edx, DWORD PTR _nSize$[ebp]
  0004c	52		 push	 edx
  0004d	8d 85 74 ec ff
	ff		 lea	 eax, DWORD PTR _RecvData$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z ; WZQueue::GetFromQueue
  00059	83 f8 01	 cmp	 eax, 1
  0005c	75 4c		 jne	 SHORT $LN14@ThreadProc

; 113  : 			{
; 114  : 				if (wsDataCli.DataSend((char*)RecvData, nSize) == 0 )

  0005e	8b 8d 6c ec ff
	ff		 mov	 ecx, DWORD PTR _nSize$[ebp]
  00064	51		 push	 ecx
  00065	8d 95 74 ec ff
	ff		 lea	 edx, DWORD PTR _RecvData$[ebp]
  0006b	52		 push	 edx
  0006c	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsDataCli@@3VwsJoinServerCli@@A ; wsDataCli
  00071	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
  00076	85 c0		 test	 eax, eax
  00078	75 0f		 jne	 SHORT $LN3@ThreadProc

; 115  : 				{
; 116  : 					LogAdd(lMsg.Get(MSGGET(1, 189)), count, uindex);

  0007a	8b 85 70 ec ff
	ff		 mov	 eax, DWORD PTR _uindex$[ebp]
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	68 bd 01 00 00	 push	 445			; 000001bdH

; 117  : 				}
; 118  : 				else

  00087	eb 0d		 jmp	 SHORT $LN15@ThreadProc
$LN3@ThreadProc:

; 119  : 				{
; 120  : 					LogAdd(lMsg.Get(MSGGET(1, 190)), count, uindex);

  00089	8b 8d 70 ec ff
	ff		 mov	 ecx, DWORD PTR _uindex$[ebp]
  0008f	51		 push	 ecx
  00090	56		 push	 esi
  00091	68 be 01 00 00	 push	 446			; 000001beH
$LN15@ThreadProc:
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0009b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@ThreadProc:

; 121  : 				}
; 122  : 			}
; 123  : 		}
; 124  : 
; 125  : 		if ( this->m_bIsRunning == FALSE && count == 0)

  000aa	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  000ae	75 04		 jne	 SHORT $LN1@ThreadProc
  000b0	85 f6		 test	 esi, esi
  000b2	74 1b		 je	 SHORT $LN13@ThreadProc
$LN1@ThreadProc:

; 126  : 		{
; 127  : 			break;
; 128  : 		}
; 129  : 
; 130  : 		LeaveCriticalSection(&this->criti);

  000b4	53		 push	 ebx
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 131  : 		WaitForSingleObject(this->m_ThreadHandle , 300);

  000bb	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000be	68 2c 01 00 00	 push	 300			; 0000012cH
  000c3	52		 push	 edx
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 132  : 	}

  000ca	e9 51 ff ff ff	 jmp	 $LL7@ThreadProc
$LN13@ThreadProc:

; 133  : 	return FALSE;
; 134  : }

  000cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	33 cd		 xor	 ecx, ebp
  000d6	33 c0		 xor	 eax, eax
  000d8	5b		 pop	 ebx
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
?ThreadProc@CDbSave@@QAEKXZ ENDP			; CDbSave::ThreadProc
_TEXT	ENDS
PUBLIC	??_7CDbSave@@6B@				; CDbSave::`vftable'
PUBLIC	??0CDbSave@@QAE@XZ				; CDbSave::CDbSave
PUBLIC	??_R4CDbSave@@6B@				; CDbSave::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDbSave@@@8				; CDbSave `RTTI Type Descriptor'
PUBLIC	??_R3CDbSave@@8					; CDbSave::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDbSave@@8					; CDbSave::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDbSave@@8			; CDbSave::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECDbSave@@UAEPAXI@Z:PROC			; CDbSave::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CDbSave@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDbSave@@8 DD FLAT:??_R0?AVCDbSave@@@8	; CDbSave::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDbSave@@8
rdata$r	ENDS
;	COMDAT ??_R2CDbSave@@8
rdata$r	SEGMENT
??_R2CDbSave@@8 DD FLAT:??_R1A@?0A@EA@CDbSave@@8	; CDbSave::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDbSave@@8
rdata$r	SEGMENT
??_R3CDbSave@@8 DD 00H					; CDbSave::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDbSave@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDbSave@@@8
_DATA	SEGMENT
??_R0?AVCDbSave@@@8 DD FLAT:??_7type_info@@6B@		; CDbSave `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDbSave@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDbSave@@6B@
rdata$r	SEGMENT
??_R4CDbSave@@6B@ DD 00H				; CDbSave::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDbSave@@@8
	DD	FLAT:??_R3CDbSave@@8
rdata$r	ENDS
;	COMDAT ??_7CDbSave@@6B@
CONST	SEGMENT
??_7CDbSave@@6B@ DD FLAT:??_R4CDbSave@@6B@		; CDbSave::`vftable'
	DD	FLAT:??_ECDbSave@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CDbSave@@QAE@XZ
_TEXT	SEGMENT
??0CDbSave@@QAE@XZ PROC					; CDbSave::CDbSave, COMDAT
; _this$ = ecx

; 11   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 12   : 	this->m_lpWzQueue=NULL;

  00003	33 c0		 xor	 eax, eax
  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDbSave@@6B@
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 13   : 	this->m_bIsRunning=FALSE;

  0000e	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 14   : 	this->Initialize();

  00011	e8 00 00 00 00	 call	 ?Initialize@CDbSave@@QAEHXZ ; CDbSave::Initialize

; 15   : }

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??0CDbSave@@QAE@XZ ENDP					; CDbSave::CDbSave
_TEXT	ENDS
PUBLIC	?Feee@CDbSave@@QAEHXZ				; CDbSave::Feee
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Feee@CDbSave@@QAEHXZ
_TEXT	SEGMENT
?Feee@CDbSave@@QAEHXZ PROC				; CDbSave::Feee, COMDAT
; _this$ = ecx

; 38   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 39   : 	if ( this->m_lpWzQueue != 0 )

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 17		 je	 SHORT $LN1@Feee

; 40   : 	{
; 41   : 		delete this->m_lpWzQueue;

  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ??1WZQueue@@QAE@XZ	; WZQueue::~WZQueue
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4

; 42   : 		this->m_lpWzQueue = 0;

  0001b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
$LN1@Feee:

; 43   : 	}
; 44   : 
; 45   : 	DeleteCriticalSection(&this->criti );

  00022	83 c7 14	 add	 edi, 20			; 00000014H
  00025	57		 push	 edi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  0002c	5f		 pop	 edi

; 46   : 	return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	5e		 pop	 esi

; 47   : }

  00033	c3		 ret	 0
?Feee@CDbSave@@QAEHXZ ENDP				; CDbSave::Feee
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?cSaveThreadProc@@YGJPAVCDbSave@@@Z
_TEXT	SEGMENT
_pThis$ = 8						; size = 4
?cSaveThreadProc@@YGJPAVCDbSave@@@Z PROC		; cSaveThreadProc, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 82   : 	return pThis->ThreadProc();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pThis$[ebp]
  00006	e8 00 00 00 00	 call	 ?ThreadProc@CDbSave@@QAEKXZ ; CDbSave::ThreadProc

; 83   : 
; 84   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?cSaveThreadProc@@YGJPAVCDbSave@@@Z ENDP		; cSaveThreadProc
_TEXT	ENDS
PUBLIC	??1CDbSave@@UAE@XZ				; CDbSave::~CDbSave
; Function compile flags: /Ogtp
;	COMDAT ??1CDbSave@@UAE@XZ
_TEXT	SEGMENT
??1CDbSave@@UAE@XZ PROC					; CDbSave::~CDbSave, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDbSave@@6B@

; 19   : 	this->End();

  00009	e8 00 00 00 00	 call	 ?End@CDbSave@@QAEXXZ	; CDbSave::End

; 20   : 	this->Feee();

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ?Feee@CDbSave@@QAEHXZ	; CDbSave::Feee
??1CDbSave@@UAE@XZ ENDP					; CDbSave::~CDbSave
_TEXT	ENDS
PUBLIC	??_C@_0L@ILEIIOHD@DbSave?4cpp?$AA@		; `string'
PUBLIC	?Begin@CDbSave@@QAEHXZ				; CDbSave::Begin
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	__imp__CreateThread@24:PROC
;	COMDAT ??_C@_0L@ILEIIOHD@DbSave?4cpp?$AA@
CONST	SEGMENT
??_C@_0L@ILEIIOHD@DbSave?4cpp?$AA@ DB 'DbSave.cpp', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Begin@CDbSave@@QAEHXZ
_TEXT	SEGMENT
?Begin@CDbSave@@QAEHXZ PROC				; CDbSave::Begin, COMDAT
; _this$ = ecx

; 61   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 62   : 	if ( this->m_ThreadHandle != 0 )

  00003	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00007	74 05		 je	 SHORT $LN2@Begin

; 63   : 	{
; 64   : 		this->End();

  00009	e8 00 00 00 00	 call	 ?End@CDbSave@@QAEXXZ	; CDbSave::End
$LN2@Begin:

; 65   : 	}
; 66   : 
; 67   : 	this->m_bIsRunning=TRUE;
; 68   : 
; 69   : 	this->m_ThreadHandle=CreateThread( NULL, 0, (LPTHREAD_START_ROUTINE)cSaveThreadProc, this, 0, &this->m_dwThreadID  );

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	6a 00		 push	 0
  00014	56		 push	 esi
  00015	68 00 00 00 00	 push	 OFFSET ?cSaveThreadProc@@YGJPAVCDbSave@@@Z ; cSaveThreadProc
  0001a	6a 00		 push	 0
  0001c	6a 00		 push	 0
  0001e	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24
  0002b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002e	5e		 pop	 esi

; 70   : 
; 71   : 	if ( this->m_ThreadHandle == 0 )

  0002f	85 c0		 test	 eax, eax
  00031	75 1f		 jne	 SHORT $LN1@Begin

; 72   : 	{
; 73   : 		MsgBox(lMsg.Get(MSGGET(0, 113)), __FILE__, __LINE__);

  00033	6a 49		 push	 73			; 00000049H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0L@ILEIIOHD@DbSave?4cpp?$AA@
  0003a	6a 71		 push	 113			; 00000071H
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00041	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 74   : 		return FALSE;

  0004f	33 c0		 xor	 eax, eax

; 78   : }

  00051	c3		 ret	 0
$LN1@Begin:

; 75   : 	}
; 76   : 
; 77   : 	return TRUE;

  00052	b8 01 00 00 00	 mov	 eax, 1

; 78   : }

  00057	c3		 ret	 0
?Begin@CDbSave@@QAEHXZ ENDP				; CDbSave::Begin
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCDbSave@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDbSave@@UAEPAXI@Z PROC				; CDbSave::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDbSave@@UAE@XZ	; CDbSave::~CDbSave
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCDbSave@@UAEPAXI@Z ENDP				; CDbSave::`scalar deleting destructor'
_TEXT	ENDS
END
