; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\DevilSquareGround.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	070H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
	DD	010eH
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z ; DevilSquareScoreSort
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\devilsquareground.cpp
;	COMDAT ?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z PROC	; DevilSquareScoreSort, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   : 	if ( lhs->m_nEventScore == rhs->m_nEventScore )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lhs$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _rhs$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000d	8b 90 90 0e 00
	00		 mov	 edx, DWORD PTR [eax+3728]
  00013	56		 push	 esi
  00014	8b b1 90 0e 00
	00		 mov	 esi, DWORD PTR [ecx+3728]
  0001a	3b d6		 cmp	 edx, esi
  0001c	75 14		 jne	 SHORT $LN6@DevilSquar

; 19   : 	{
; 20   : 		if ( lhs->Level < rhs->Level)

  0001e	66 8b 90 be 00
	00 00		 mov	 dx, WORD PTR [eax+190]
  00025	66 3b 91 be 00
	00 00		 cmp	 dx, WORD PTR [ecx+190]
  0002c	5e		 pop	 esi
  0002d	0f 9c c0	 setl	 al

; 29   : 	{
; 30   : 		return true;
; 31   : 	}
; 32   : 
; 33   : 	return false;
; 34   : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN6@DevilSquar:

; 21   : 		{
; 22   : 			return true;
; 23   : 		}
; 24   : 
; 25   : 		return false;
; 26   : 	}
; 27   : 
; 28   : 	if ( lhs->m_nEventScore > rhs->m_nEventScore)

  00032	0f 9f c0	 setg	 al
  00035	5e		 pop	 esi

; 29   : 	{
; 30   : 		return true;
; 31   : 	}
; 32   : 
; 33   : 	return false;
; 34   : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z ENDP	; DevilSquareScoreSort
_TEXT	ENDS
PUBLIC	?Init@CDevilSquareGround@@QAEXH@Z		; CDevilSquareGround::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CDevilSquareGround@@QAEXH@Z
_TEXT	SEGMENT
_Index$ = 8						; size = 4
?Init@CDevilSquareGround@@QAEXH@Z PROC			; CDevilSquareGround::Init, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  : 	this->m_dwObjCount = 0;
; 102  : 	this->m_iIndex = Index;

  00003	8b 45 08	 mov	 eax, DWORD PTR _Index$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 103  : 	memset(this->m_DevilSquareMonsterInfo, 0xFF, sizeof(this->m_DevilSquareMonsterInfo));

  00009	68 f0 00 00 00	 push	 240			; 000000f0H
  0000e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00011	68 ff 00 00 00	 push	 255			; 000000ffH
  00016	51		 push	 ecx
  00017	c7 86 18 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1048], 0
  00021	89 86 f4 03 00
	00		 mov	 DWORD PTR [esi+1012], eax
  00027	e8 00 00 00 00	 call	 _memset

; 104  : 	memset(this->m_DevilSquareBossMonsterInfo, 0xFF, sizeof(this->m_DevilSquareBossMonsterInfo));

  0002c	68 e0 01 00 00	 push	 480			; 000001e0H
  00031	68 ff 00 00 00	 push	 255			; 000000ffH
  00036	81 c6 f4 00 00
	00		 add	 esi, 244		; 000000f4H
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	5e		 pop	 esi

; 105  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?Init@CDevilSquareGround@@QAEXH@Z ENDP			; CDevilSquareGround::Init
_TEXT	ENDS
PUBLIC	?Clear@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?Clear@CDevilSquareGround@@QAEXXZ PROC			; CDevilSquareGround::Clear, COMDAT
; _this$ = ecx

; 109  : 	this->m_dwObjCount = 0;

  00000	c7 81 18 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1048], 0

; 110  : }

  0000a	c3		 ret	 0
?Clear@CDevilSquareGround@@QAEXXZ ENDP			; CDevilSquareGround::Clear
_TEXT	ENDS
PUBLIC	?Set@CDevilSquareGround@@QAEXGHH@Z		; CDevilSquareGround::Set
; Function compile flags: /Ogtp
;	COMDAT ?Set@CDevilSquareGround@@QAEXGHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
_starttime$ = 12					; size = 4
_endtime$ = 16						; size = 4
?Set@CDevilSquareGround@@QAEXGHH@Z PROC			; CDevilSquareGround::Set, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00003	33 c0		 xor	 eax, eax
  00005	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  00008	56		 push	 esi
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL4@Set:

; 115  : 	{
; 116  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type == (WORD)-1  )

  00010	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  00015	66 39 32	 cmp	 WORD PTR [edx], si
  00018	74 0e		 je	 SHORT $LN8@Set

; 114  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  0001a	40		 inc	 eax
  0001b	83 c2 10	 add	 edx, 16			; 00000010H
  0001e	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00021	7c ed		 jl	 SHORT $LL4@Set
  00023	5e		 pop	 esi

; 122  : 			
; 123  : 			return;
; 124  : 		}
; 125  : 	}
; 126  : }

  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
$LN8@Set:

; 117  : 		{
; 118  : 			this->m_DevilSquareMonsterInfo[i].m_Type = type;

  00028	66 8b 55 08	 mov	 dx, WORD PTR _type$[ebp]
  0002c	c1 e0 04	 shl	 eax, 4
  0002f	03 c1		 add	 eax, ecx
  00031	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 119  : 			this->m_DevilSquareMonsterInfo[i].m_RegenStartTime = starttime;

  00035	8b 55 0c	 mov	 edx, DWORD PTR _starttime$[ebp]
  00038	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 120  : 			this->m_DevilSquareMonsterInfo[i].m_RegenEndTime = endtime;

  0003b	8b 55 10	 mov	 edx, DWORD PTR _endtime$[ebp]
  0003e	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 121  : 			this->m_DevilSquareMonsterInfo[i].m_iDevilSquareNumber = this->m_iIndex;

  00041	8b 89 f4 03 00
	00		 mov	 ecx, DWORD PTR [ecx+1012]
  00047	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004a	5e		 pop	 esi

; 122  : 			
; 123  : 			return;
; 124  : 		}
; 125  : 	}
; 126  : }

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
?Set@CDevilSquareGround@@QAEXGHH@Z ENDP			; CDevilSquareGround::Set
_TEXT	ENDS
PUBLIC	?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z	; CDevilSquareGround::SetBoss
; Function compile flags: /Ogtp
;	COMDAT ?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
_starttime$ = 12					; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_tx$ = 24						; size = 4
_ty$ = 28						; size = 4
?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z PROC		; CDevilSquareGround::SetBoss, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00003	33 c0		 xor	 eax, eax
  00005	8d 91 f4 00 00
	00		 lea	 edx, DWORD PTR [ecx+244]
  0000b	56		 push	 esi
  0000c	8d 64 24 00	 npad	 4
$LL4@SetBoss:

; 131  : 	{
; 132  : 		if ( this->m_DevilSquareBossMonsterInfo[i].m_Type == (WORD)-1  )

  00010	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  00015	66 39 32	 cmp	 WORD PTR [edx], si
  00018	74 0e		 je	 SHORT $LN8@SetBoss

; 130  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  0001a	40		 inc	 eax
  0001b	83 c2 20	 add	 edx, 32			; 00000020H
  0001e	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00021	7c ed		 jl	 SHORT $LL4@SetBoss
  00023	5e		 pop	 esi

; 141  : 			
; 142  : 			return;
; 143  : 		}
; 144  : 	}
; 145  : }

  00024	5d		 pop	 ebp
  00025	c2 18 00	 ret	 24			; 00000018H
$LN8@SetBoss:

; 133  : 		{
; 134  : 			this->m_DevilSquareBossMonsterInfo[i].m_Type = type;

  00028	66 8b 75 08	 mov	 si, WORD PTR _type$[ebp]
  0002c	8b d0		 mov	 edx, eax
  0002e	c1 e2 05	 shl	 edx, 5
  00031	03 d1		 add	 edx, ecx
  00033	66 89 b2 f4 00
	00 00		 mov	 WORD PTR [edx+244], si

; 135  : 			this->m_DevilSquareBossMonsterInfo[i].m_RegenStartTime = starttime;

  0003a	8b 75 0c	 mov	 esi, DWORD PTR _starttime$[ebp]

; 136  : 			this->m_DevilSquareBossMonsterInfo[i].X = x;

  0003d	83 c0 08	 add	 eax, 8
  00040	89 b2 f8 00 00
	00		 mov	 DWORD PTR [edx+248], esi
  00046	8b 75 10	 mov	 esi, DWORD PTR _x$[ebp]
  00049	c1 e0 05	 shl	 eax, 5
  0004c	89 34 08	 mov	 DWORD PTR [eax+ecx], esi

; 137  : 			this->m_DevilSquareBossMonsterInfo[i].Y = y;

  0004f	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  00052	89 82 04 01 00
	00		 mov	 DWORD PTR [edx+260], eax

; 138  : 			this->m_DevilSquareBossMonsterInfo[i].TX = tx;

  00058	8b 45 18	 mov	 eax, DWORD PTR _tx$[ebp]
  0005b	89 82 08 01 00
	00		 mov	 DWORD PTR [edx+264], eax

; 139  : 			this->m_DevilSquareBossMonsterInfo[i].TY = ty;

  00061	8b 45 1c	 mov	 eax, DWORD PTR _ty$[ebp]
  00064	89 82 0c 01 00
	00		 mov	 DWORD PTR [edx+268], eax

; 140  : 			this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber = this->m_iIndex;

  0006a	8b 89 f4 03 00
	00		 mov	 ecx, DWORD PTR [ecx+1012]
  00070	89 8a 10 01 00
	00		 mov	 DWORD PTR [edx+272], ecx
  00076	5e		 pop	 esi

; 141  : 			
; 142  : 			return;
; 143  : 		}
; 144  : 	}
; 145  : }

  00077	5d		 pop	 ebp
  00078	c2 18 00	 ret	 24			; 00000018H
?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z ENDP		; CDevilSquareGround::SetBoss
_TEXT	ENDS
PUBLIC	?SetBonus@CDevilSquareGround@@QAEXHHH@Z		; CDevilSquareGround::SetBonus
; Function compile flags: /Ogtp
;	COMDAT ?SetBonus@CDevilSquareGround@@QAEXHHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_zen$ = 12						; size = 4
_exp$ = 16						; size = 4
?SetBonus@CDevilSquareGround@@QAEXHHH@Z PROC		; CDevilSquareGround::SetBonus, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 	this->m_Bonus[index][0] = exp;

  00003	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR _exp$[ebp]
  00009	89 94 c1 f8 03
	00 00		 mov	 DWORD PTR [ecx+eax*8+1016], edx

; 150  : 	this->m_Bonus[index][1] = zen;

  00010	8b 55 0c	 mov	 edx, DWORD PTR _zen$[ebp]
  00013	89 94 c1 fc 03
	00 00		 mov	 DWORD PTR [ecx+eax*8+1020], edx

; 151  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?SetBonus@CDevilSquareGround@@QAEXHHH@Z ENDP		; CDevilSquareGround::SetBonus
_TEXT	ENDS
PUBLIC	?IncExp@CDevilSquareGround@@QAEXM@Z		; CDevilSquareGround::IncExp
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
;	COMDAT ?IncExp@CDevilSquareGround@@QAEXM@Z
_TEXT	SEGMENT
_exp$ = 8						; size = 4
?IncExp@CDevilSquareGround@@QAEXM@Z PROC		; CDevilSquareGround::IncExp, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 155  : 	for( int i = 0; i < 4; i++)

  00003	d9 45 08	 fld	 DWORD PTR _exp$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 __ftol2_sse
  0000e	8d 8e fc 03 00
	00		 lea	 ecx, DWORD PTR [esi+1020]
  00014	ba 04 00 00 00	 mov	 edx, 4
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL3@IncExp:

; 156  : 	{
; 157  : 		this->m_Bonus[i][1] *= (int)exp; //check

  00020	8b 31		 mov	 esi, DWORD PTR [ecx]
  00022	0f af f0	 imul	 esi, eax
  00025	89 31		 mov	 DWORD PTR [ecx], esi
  00027	83 c1 08	 add	 ecx, 8
  0002a	4a		 dec	 edx
  0002b	75 f3		 jne	 SHORT $LL3@IncExp
  0002d	5e		 pop	 esi

; 158  : 	}
; 159  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?IncExp@CDevilSquareGround@@QAEXM@Z ENDP		; CDevilSquareGround::IncExp
_TEXT	ENDS
PUBLIC	?IncObjCount@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::IncObjCount
EXTRN	__imp__InterlockedIncrement@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?IncObjCount@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?IncObjCount@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::IncObjCount, COMDAT
; _this$ = ecx

; 163  : 	InterlockedIncrement((LPLONG)&this->m_dwObjCount);

  00000	81 c1 18 04 00
	00		 add	 ecx, 1048		; 00000418H
  00006	51		 push	 ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedIncrement@4

; 164  : }

  0000d	c3		 ret	 0
?IncObjCount@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::IncObjCount
_TEXT	ENDS
PUBLIC	?GetObjCount@CDevilSquareGround@@QAEJXZ		; CDevilSquareGround::GetObjCount
; Function compile flags: /Ogtp
;	COMDAT ?GetObjCount@CDevilSquareGround@@QAEJXZ
_TEXT	SEGMENT
?GetObjCount@CDevilSquareGround@@QAEJXZ PROC		; CDevilSquareGround::GetObjCount, COMDAT
; _this$ = ecx

; 168  : 	return this->m_dwObjCount;

  00000	8b 81 18 04 00
	00		 mov	 eax, DWORD PTR [ecx+1048]

; 169  : }

  00006	c3		 ret	 0
?GetObjCount@CDevilSquareGround@@QAEJXZ ENDP		; CDevilSquareGround::GetObjCount
_TEXT	ENDS
PUBLIC	??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@ ; `string'
PUBLIC	?RegenBossMonster@CDevilSquareGround@@QAEXH@Z	; CDevilSquareGround::RegenBossMonster
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z:PROC ; CMonsterSetBase::GetBoxPosition
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@
CONST	SEGMENT
??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@ DB '['
	DB	'DevilSquare] Boss %d %d %d create ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RegenBossMonster@CDevilSquareGround@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv163 = -4						; size = 4
_currtime$ = 8						; size = 4
?RegenBossMonster@CDevilSquareGround@@QAEXH@Z PROC	; CDevilSquareGround::RegenBossMonster, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 173  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  0000c	8d b9 10 01 00
	00		 lea	 edi, DWORD PTR [ecx+272]
  00012	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR tv163[ebp], 15 ; 0000000fH
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL6@RegenBossM:

; 174  : 	{
; 175  : 		if ( this->m_DevilSquareBossMonsterInfo[i].m_Type != (WORD)-1 )

  00020	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00025	66 39 47 e4	 cmp	 WORD PTR [edi-28], ax
  00029	0f 84 97 01 00
	00		 je	 $LN5@RegenBossM

; 176  : 		{
; 177  : 			if ( currtime == this->m_DevilSquareBossMonsterInfo[i].m_RegenStartTime )

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _currtime$[ebp]
  00032	3b 4f e8	 cmp	 ecx, DWORD PTR [edi-24]
  00035	0f 85 8b 01 00
	00		 jne	 $LN5@RegenBossM

; 178  : 			{
; 179  : 				int iMapNumber = (this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber >= DEVIL_SQUARE_GROUND_1&& this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber <= DEVIL_SQUARE_GROUND_4)?MAP_INDEX_DEVILSQUARE:(this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber>=DEVIL_SQUARE_GROUND_5  && this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber < DEVIL_SQUARE_GROUND_7+1 )?MAP_INDEX_DEVILSQUARE2:-1;

  0003b	8b 07		 mov	 eax, DWORD PTR [edi]
  0003d	85 c0		 test	 eax, eax
  0003f	78 0c		 js	 SHORT $LN9@RegenBossM
  00041	83 f8 03	 cmp	 eax, 3
  00044	7f 07		 jg	 SHORT $LN9@RegenBossM
  00046	bb 09 00 00 00	 mov	 ebx, 9
  0004b	eb 14		 jmp	 SHORT $LN11@RegenBossM
$LN9@RegenBossM:
  0004d	83 f8 04	 cmp	 eax, 4
  00050	7c 0c		 jl	 SHORT $LN10@RegenBossM
  00052	83 f8 07	 cmp	 eax, 7
  00055	7d 07		 jge	 SHORT $LN10@RegenBossM
  00057	bb 20 00 00 00	 mov	 ebx, 32			; 00000020H
  0005c	eb 03		 jmp	 SHORT $LN11@RegenBossM
$LN10@RegenBossM:
  0005e	83 cb ff	 or	 ebx, -1
$LN11@RegenBossM:

; 180  : 
; 181  : 				int iMonIndex = gObjAddMonster(iMapNumber);

  00061	53		 push	 ebx
  00062	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00067	0f bf f0	 movsx	 esi, ax
  0006a	83 c4 04	 add	 esp, 4

; 182  : 
; 183  : 				if ( iMonIndex >= 0 )

  0006d	85 f6		 test	 esi, esi
  0006f	0f 88 51 01 00
	00		 js	 $LN5@RegenBossM

; 184  : 				{
; 185  : 					gObjSetMonster(iMonIndex, this->m_DevilSquareBossMonsterInfo[i].m_Type);

  00075	0f b7 57 e4	 movzx	 edx, WORD PTR [edi-28]
  00079	52		 push	 edx
  0007a	56		 push	 esi
  0007b	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 186  : 					gObj[iMonIndex].MapNumber = iMapNumber;

  00080	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008b	88 9c 06 49 01
	00 00		 mov	 BYTE PTR [esi+eax+329], bl

; 187  : 					
; 188  : 					gMSetBase.GetBoxPosition(gObj[iMonIndex].MapNumber,	this->m_DevilSquareBossMonsterInfo[i].X, this->m_DevilSquareBossMonsterInfo[i].Y, this->m_DevilSquareBossMonsterInfo[i].TX, this->m_DevilSquareBossMonsterInfo[i].TY, gObj[iMonIndex].X, gObj[iMonIndex].Y);

  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00097	83 c4 08	 add	 esp, 8
  0009a	8d 8c 06 46 01
	00 00		 lea	 ecx, DWORD PTR [esi+eax+326]
  000a1	51		 push	 ecx
  000a2	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
  000a5	8d 94 06 44 01
	00 00		 lea	 edx, DWORD PTR [esi+eax+324]
  000ac	0f b6 84 06 49
	01 00 00	 movzx	 eax, BYTE PTR [esi+eax+329]
  000b4	52		 push	 edx
  000b5	8b 57 f8	 mov	 edx, DWORD PTR [edi-8]
  000b8	51		 push	 ecx
  000b9	8b 4f f4	 mov	 ecx, DWORD PTR [edi-12]
  000bc	52		 push	 edx
  000bd	8b 57 f0	 mov	 edx, DWORD PTR [edi-16]
  000c0	51		 push	 ecx
  000c1	52		 push	 edx
  000c2	50		 push	 eax
  000c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  000c8	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition

; 189  : 					
; 190  : 					int map = gObj[iMonIndex].MapNumber;
; 191  : 					int x = gObj[iMonIndex].X;
; 192  : 					int y = gObj[iMonIndex].Y;

  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 193  : 
; 194  : 					LogAddTD("[DevilSquare] Boss %d %d %d create ", map, x, y);

  000d2	0f bf 8c 06 46
	01 00 00	 movsx	 ecx, WORD PTR [esi+eax+326]
  000da	0f bf 94 06 44
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+324]
  000e2	0f b6 84 06 49
	01 00 00	 movzx	 eax, BYTE PTR [esi+eax+329]
  000ea	51		 push	 ecx
  000eb	52		 push	 edx
  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 195  : 
; 196  : 					gObj[iMonIndex].TX = gObj[iMonIndex].X;

  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fd	0f b7 8c 06 44
	01 00 00	 movzx	 ecx, WORD PTR [esi+eax+324]
  00105	66 89 8c 06 7c
	01 00 00	 mov	 WORD PTR [esi+eax+380], cx

; 197  : 					gObj[iMonIndex].TY = gObj[iMonIndex].Y;

  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00112	0f b7 94 06 46
	01 00 00	 movzx	 edx, WORD PTR [esi+eax+326]
  0011a	66 89 94 06 7e
	01 00 00	 mov	 WORD PTR [esi+eax+382], dx

; 198  : 					gObj[iMonIndex].MTX = gObj[iMonIndex].X;

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00127	0f b7 8c 06 44
	01 00 00	 movzx	 ecx, WORD PTR [esi+eax+324]
  0012f	66 89 8c 06 80
	01 00 00	 mov	 WORD PTR [esi+eax+384], cx

; 199  : 					gObj[iMonIndex].MTY = gObj[iMonIndex].Y;

  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013c	0f b7 94 06 46
	01 00 00	 movzx	 edx, WORD PTR [esi+eax+326]
  00144	66 89 94 06 82
	01 00 00	 mov	 WORD PTR [esi+eax+386], dx

; 200  : 					gObj[iMonIndex].StartX = gObj[iMonIndex].X;

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00151	0f b6 8c 06 44
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+324]
  00159	88 8c 06 76 01
	00 00		 mov	 BYTE PTR [esi+eax+374], cl

; 201  : 					gObj[iMonIndex].StartY = gObj[iMonIndex].Y;

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00165	8a 94 06 46 01
	00 00		 mov	 dl, BYTE PTR [esi+eax+326]
  0016c	88 94 06 77 01
	00 00		 mov	 BYTE PTR [esi+eax+375], dl

; 202  : 					gObj[iMonIndex].m_bDevilSquareIndex = this->m_iIndex;

  00173	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00176	0f b6 88 f4 03
	00 00		 movzx	 ecx, BYTE PTR [eax+1012]
  0017d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00183	88 8c 16 9c 0e
	00 00		 mov	 BYTE PTR [esi+edx+3740], cl

; 203  : 					gObj[iMonIndex].DieRegen = FALSE;

  0018a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018f	c6 84 06 a2 03
	00 00 00	 mov	 BYTE PTR [esi+eax+930], 0

; 204  : 					gObj[iMonIndex].m_PosNum = -1;

  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019d	83 c4 10	 add	 esp, 16			; 00000010H
  001a0	83 c9 ff	 or	 ecx, -1
  001a3	66 89 8c 16 b0
	03 00 00	 mov	 WORD PTR [esi+edx+944], cx

; 205  : 					gObj[iMonIndex].Live = TRUE;

  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b0	c6 44 06 6a 01	 mov	 BYTE PTR [esi+eax+106], 1

; 206  : 					gObj[iMonIndex].m_State = 1;

  001b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001bb	c7 84 0e 20 02
	00 00 01 00 00
	00		 mov	 DWORD PTR [esi+ecx+544], 1
$LN5@RegenBossM:

; 173  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  001c6	83 c7 20	 add	 edi, 32			; 00000020H
  001c9	ff 4d fc	 dec	 DWORD PTR tv163[ebp]
  001cc	0f 85 4e fe ff
	ff		 jne	 $LL6@RegenBossM
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx

; 207  : 				}
; 208  : 			}
; 209  : 		}
; 210  : 	}
; 211  : }

  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 04 00	 ret	 4
?RegenBossMonster@CDevilSquareGround@@QAEXH@Z ENDP	; CDevilSquareGround::RegenBossMonster
_TEXT	ENDS
PUBLIC	?FindMonsterType@CDevilSquareGround@@QAEHG@Z	; CDevilSquareGround::FindMonsterType
; Function compile flags: /Ogtp
;	COMDAT ?FindMonsterType@CDevilSquareGround@@QAEHG@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
?FindMonsterType@CDevilSquareGround@@QAEHG@Z PROC	; CDevilSquareGround::FindMonsterType, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00003	66 8b 55 08	 mov	 dx, WORD PTR _type$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	83 c1 04	 add	 ecx, 4
  0000c	8d 64 24 00	 npad	 4
$LL4@FindMonste:

; 216  : 	{
; 217  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type == type )

  00010	66 39 11	 cmp	 WORD PTR [ecx], dx
  00013	74 0f		 je	 SHORT $LN8@FindMonste

; 215  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00015	40		 inc	 eax
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0001c	7c f2		 jl	 SHORT $LL4@FindMonste

; 220  : 		}
; 221  : 	}
; 222  : 
; 223  : 	return FALSE;

  0001e	33 c0		 xor	 eax, eax

; 224  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@FindMonste:

; 218  : 		{
; 219  : 			return TRUE;

  00024	b8 01 00 00 00	 mov	 eax, 1

; 224  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?FindMonsterType@CDevilSquareGround@@QAEHG@Z ENDP	; CDevilSquareGround::FindMonsterType
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetMonsterType@CDevilSquareGround@@QAEGH@Z	; CDevilSquareGround::GetMonsterType
EXTRN	_rand:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetMonsterType@CDevilSquareGround@@QAEGH@Z
_TEXT	SEGMENT
_sTemp$ = -36						; size = 30
__$ArrayPad$ = -4					; size = 4
_currtime$ = 8						; size = 4
?GetMonsterType@CDevilSquareGround@@QAEGH@Z PROC	; CDevilSquareGround::GetMonsterType, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 228  : 	WORD sTemp[MAX_ST_DEVILSQUARE_MONSTER];
; 229  : 
; 230  : 	int icount = 0;

  00010	8b 55 08	 mov	 edx, DWORD PTR _currtime$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	33 f6		 xor	 esi, esi
  00017	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001a	8d 7e 03	 lea	 edi, DWORD PTR [esi+3]
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL7@GetMonster:

; 233  : 	{
; 234  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type != (WORD)-1 )

  00020	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00023	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH
  00028	66 3b cb	 cmp	 cx, bx
  0002b	74 10		 je	 SHORT $LN6@GetMonster

; 235  : 		{
; 236  : 			if ( currtime >= this->m_DevilSquareMonsterInfo[i].m_RegenStartTime )

  0002d	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00030	7c 0b		 jl	 SHORT $LN6@GetMonster

; 237  : 			{
; 238  : 				if ( currtime <= this->m_DevilSquareMonsterInfo[i].m_RegenEndTime )

  00032	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00035	7f 06		 jg	 SHORT $LN6@GetMonster

; 239  : 				{
; 240  : 					sTemp[icount] = this->m_DevilSquareMonsterInfo[i].m_Type;

  00037	66 89 4c 75 dc	 mov	 WORD PTR _sTemp$[ebp+esi*2], cx

; 241  : 					icount++;

  0003c	46		 inc	 esi
$LN6@GetMonster:

; 233  : 	{
; 234  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type != (WORD)-1 )

  0003d	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  00041	66 3b cb	 cmp	 cx, bx
  00044	74 10		 je	 SHORT $LN13@GetMonster

; 235  : 		{
; 236  : 			if ( currtime >= this->m_DevilSquareMonsterInfo[i].m_RegenStartTime )

  00046	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  00049	7c 0b		 jl	 SHORT $LN13@GetMonster

; 237  : 			{
; 238  : 				if ( currtime <= this->m_DevilSquareMonsterInfo[i].m_RegenEndTime )

  0004b	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  0004e	7f 06		 jg	 SHORT $LN13@GetMonster

; 239  : 				{
; 240  : 					sTemp[icount] = this->m_DevilSquareMonsterInfo[i].m_Type;

  00050	66 89 4c 75 dc	 mov	 WORD PTR _sTemp$[ebp+esi*2], cx

; 241  : 					icount++;

  00055	46		 inc	 esi
$LN13@GetMonster:

; 233  : 	{
; 234  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type != (WORD)-1 )

  00056	0f b7 48 20	 movzx	 ecx, WORD PTR [eax+32]
  0005a	66 3b cb	 cmp	 cx, bx
  0005d	74 10		 je	 SHORT $LN14@GetMonster

; 235  : 		{
; 236  : 			if ( currtime >= this->m_DevilSquareMonsterInfo[i].m_RegenStartTime )

  0005f	3b 50 24	 cmp	 edx, DWORD PTR [eax+36]
  00062	7c 0b		 jl	 SHORT $LN14@GetMonster

; 237  : 			{
; 238  : 				if ( currtime <= this->m_DevilSquareMonsterInfo[i].m_RegenEndTime )

  00064	3b 50 28	 cmp	 edx, DWORD PTR [eax+40]
  00067	7f 06		 jg	 SHORT $LN14@GetMonster

; 239  : 				{
; 240  : 					sTemp[icount] = this->m_DevilSquareMonsterInfo[i].m_Type;

  00069	66 89 4c 75 dc	 mov	 WORD PTR _sTemp$[ebp+esi*2], cx

; 241  : 					icount++;

  0006e	46		 inc	 esi
$LN14@GetMonster:

; 233  : 	{
; 234  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type != (WORD)-1 )

  0006f	0f b7 48 30	 movzx	 ecx, WORD PTR [eax+48]
  00073	66 3b cb	 cmp	 cx, bx
  00076	74 10		 je	 SHORT $LN15@GetMonster

; 235  : 		{
; 236  : 			if ( currtime >= this->m_DevilSquareMonsterInfo[i].m_RegenStartTime )

  00078	3b 50 34	 cmp	 edx, DWORD PTR [eax+52]
  0007b	7c 0b		 jl	 SHORT $LN15@GetMonster

; 237  : 			{
; 238  : 				if ( currtime <= this->m_DevilSquareMonsterInfo[i].m_RegenEndTime )

  0007d	3b 50 38	 cmp	 edx, DWORD PTR [eax+56]
  00080	7f 06		 jg	 SHORT $LN15@GetMonster

; 239  : 				{
; 240  : 					sTemp[icount] = this->m_DevilSquareMonsterInfo[i].m_Type;

  00082	66 89 4c 75 dc	 mov	 WORD PTR _sTemp$[ebp+esi*2], cx

; 241  : 					icount++;

  00087	46		 inc	 esi
$LN15@GetMonster:

; 233  : 	{
; 234  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type != (WORD)-1 )

  00088	0f b7 48 40	 movzx	 ecx, WORD PTR [eax+64]
  0008c	66 3b cb	 cmp	 cx, bx
  0008f	74 10		 je	 SHORT $LN17@GetMonster

; 235  : 		{
; 236  : 			if ( currtime >= this->m_DevilSquareMonsterInfo[i].m_RegenStartTime )

  00091	3b 50 44	 cmp	 edx, DWORD PTR [eax+68]
  00094	7c 0b		 jl	 SHORT $LN17@GetMonster

; 237  : 			{
; 238  : 				if ( currtime <= this->m_DevilSquareMonsterInfo[i].m_RegenEndTime )

  00096	3b 50 48	 cmp	 edx, DWORD PTR [eax+72]
  00099	7f 06		 jg	 SHORT $LN17@GetMonster

; 239  : 				{
; 240  : 					sTemp[icount] = this->m_DevilSquareMonsterInfo[i].m_Type;

  0009b	66 89 4c 75 dc	 mov	 WORD PTR _sTemp$[ebp+esi*2], cx

; 241  : 					icount++;

  000a0	46		 inc	 esi
$LN17@GetMonster:

; 231  : 
; 232  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  000a1	83 c0 50	 add	 eax, 80			; 00000050H
  000a4	4f		 dec	 edi
  000a5	0f 85 75 ff ff
	ff		 jne	 $LL7@GetMonster

; 242  : 				}
; 243  : 			}
; 244  : 		}
; 245  : 	}
; 246  : 
; 247  : 	if ( icount == 0 )

  000ab	5b		 pop	 ebx
  000ac	85 f6		 test	 esi, esi
  000ae	75 17		 jne	 SHORT $LN1@GetMonster

; 248  : 	{
; 249  : 		return (BYTE)-1;

  000b0	5f		 pop	 edi
  000b1	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000b6	5e		 pop	 esi

; 253  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
$LN1@GetMonster:

; 250  : 	}
; 251  : 
; 252  : 	return sTemp[rand()%icount];

  000c7	e8 00 00 00 00	 call	 _rand
  000cc	99		 cdq
  000cd	f7 fe		 idiv	 esi

; 253  : }

  000cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	5f		 pop	 edi
  000d3	33 cd		 xor	 ecx, ebp
  000d5	5e		 pop	 esi
  000d6	66 8b 44 55 dc	 mov	 ax, WORD PTR _sTemp$[ebp+edx*2]
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
?GetMonsterType@CDevilSquareGround@@QAEGH@Z ENDP	; CDevilSquareGround::GetMonsterType
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::SendRankingInfo
EXTRN	?DataSendRank@@YAXPADH@Z:PROC			; DataSendRank
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?Main@cDevilSquareRewardItem@@QAEXH@Z:PROC	; cDevilSquareRewardItem::Main
EXTRN	?gDevilSquareRewardItem@@3VcDevilSquareRewardItem@@A:BYTE ; gDevilSquareRewardItem
; Function compile flags: /Ogtp
;	COMDAT ?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquareGround::SendRankingInfo, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 489  : 	if ( lpObj->m_nEventScore <= 0 )

  00014	83 be 90 0e 00
	00 00		 cmp	 DWORD PTR [esi+3728], 0
  0001b	7e 74		 jle	 SHORT $LN2@SendRankin

; 490  : 	{
; 491  : 		return;
; 492  : 	}
; 493  : 				//////////////////////////////////////////////////////////////////////Confict
; 494  : 				//DevilSquareRewardItem
; 495  : #ifdef DS_REWARD_ITEM
; 496  : 				gDevilSquareRewardItem.Main(lpObj->m_Index);

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	50		 push	 eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDevilSquareRewardItem@@3VcDevilSquareRewardItem@@A ; gDevilSquareRewardItem
  00025	e8 00 00 00 00	 call	 ?Main@cDevilSquareRewardItem@@QAEXH@Z ; cDevilSquareRewardItem::Main

; 497  : #endif // DS_REWARD_ITEM
; 498  : 	PMSG_ANS_EVENTUSERSCORE pMsg;
; 499  : 
; 500  : 	pMsg.h.c = 0xC1;
; 501  : 	pMsg.h.headcode = 0x01;
; 502  : 	pMsg.h.size = sizeof(pMsg);
; 503  : 	pMsg.Score = lpObj->m_nEventScore;

  0002a	8b 8e 90 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3728]

; 504  : 	pMsg.SquareNum = lpObj->m_bDevilSquareIndex;

  00030	0f b6 96 9c 0e
	00 00		 movzx	 edx, BYTE PTR [esi+3740]

; 505  : 	pMsg.Class = lpObj->Class;

  00037	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  0003e	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 506  : 	pMsg.ServerCode = gGameServerCode;

  00041	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  00048	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+36], edx

; 507  : 	memcpy(pMsg.AccountID, lpObj->AccountID, MAX_ACCOUNT_LEN);

  0004b	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0004e	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  00051	0f b7 4e 74	 movzx	 ecx, WORD PTR [esi+116]
  00055	89 55 d7	 mov	 DWORD PTR _pMsg$[ebp+3], edx

; 508  : 	memcpy(pMsg.GameID, lpObj->Name, MAX_ACCOUNT_LEN);

  00058	8b 56 77	 mov	 edx, DWORD PTR [esi+119]
  0005b	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+32], eax
  0005e	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00061	66 89 4d df	 mov	 WORD PTR _pMsg$[ebp+11], cx
  00065	0f b7 4e 7f	 movzx	 ecx, WORD PTR [esi+127]
  00069	89 55 e1	 mov	 DWORD PTR _pMsg$[ebp+13], edx
  0006c	89 45 db	 mov	 DWORD PTR _pMsg$[ebp+7], eax
  0006f	8b 46 7b	 mov	 eax, DWORD PTR [esi+123]

; 509  : 
; 510  : 	DataSendRank((char *)&pMsg, pMsg.h.size);

  00072	8d 55 d4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00075	6a 28		 push	 40			; 00000028H
  00077	52		 push	 edx
  00078	c6 45 d4 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  0007c	66 c7 45 d5 28
	01		 mov	 WORD PTR _pMsg$[ebp+1], 296 ; 00000128H
  00082	89 45 e5	 mov	 DWORD PTR _pMsg$[ebp+17], eax
  00085	66 89 4d e9	 mov	 WORD PTR _pMsg$[ebp+21], cx
  00089	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank
  0008e	83 c4 08	 add	 esp, 8
$LN2@SendRankin:

; 511  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	5e		 pop	 esi
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquareGround::SendRankingInfo
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBE_NPBQAUOBJECTSTRUCT@@@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBE_NPBQAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBE_NPBQAUOBJECTSTRUCT@@@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBE_NPBQAUOBJECTSTRUCT@@@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXPAPAUOBJECTSTRUCT@@0@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXPAPAUOBJECTSTRUCT@@0@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   : 		}

  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator*
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXXZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ; std::allocator<OBJECTSTRUCT *>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z PROC ; std::allocator<OBJECTSTRUCT *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ENDP ; std::allocator<OBJECTSTRUCT *>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ; std::allocator<OBJECTSTRUCT *>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ PROC ; std::allocator<OBJECTSTRUCT *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ENDP ; std::allocator<OBJECTSTRUCT *>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@@Z ; std::addressof<OBJECTSTRUCT * const>
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@@Z PROC ; std::addressof<OBJECTSTRUCT * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@@Z ENDP ; std::addressof<OBJECTSTRUCT * const>
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator-
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 02	 sar	 eax, 2

; 193  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator-
_TEXT	ENDS
PUBLIC	??$forward@AAPAUOBJECTSTRUCT@@@std@@YAAAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::forward<OBJECTSTRUCT * &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAUOBJECTSTRUCT@@@std@@YAAAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUOBJECTSTRUCT@@@std@@YAAAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::forward<OBJECTSTRUCT * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAUOBJECTSTRUCT@@@std@@YAAAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::forward<OBJECTSTRUCT * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAUOBJECTSTRUCT@@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z ; std::allocator<OBJECTSTRUCT *>::construct<OBJECTSTRUCT * &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAUOBJECTSTRUCT@@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAUOBJECTSTRUCT@@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z PROC ; std::allocator<OBJECTSTRUCT *>::construct<OBJECTSTRUCT * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAUOBJECTSTRUCT@@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::construct<OBJECTSTRUCT * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAUOBJECTSTRUCT@@@std@@YAABQAUOBJECTSTRUCT@@ABQAU1@@Z ; std::forward<OBJECTSTRUCT * const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAUOBJECTSTRUCT@@@std@@YAABQAUOBJECTSTRUCT@@ABQAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAUOBJECTSTRUCT@@@std@@YAABQAUOBJECTSTRUCT@@ABQAU1@@Z PROC ; std::forward<OBJECTSTRUCT * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAUOBJECTSTRUCT@@@std@@YAABQAUOBJECTSTRUCT@@ABQAU1@@Z ENDP ; std::forward<OBJECTSTRUCT * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUOBJECTSTRUCT@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUOBJECTSTRUCT@@0@Z ; std::_Ptr_cat<OBJECTSTRUCT *,OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAUOBJECTSTRUCT@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUOBJECTSTRUCT@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUOBJECTSTRUCT@@0@Z PROC ; std::_Ptr_cat<OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAUOBJECTSTRUCT@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUOBJECTSTRUCT@@0@Z ENDP ; std::_Ptr_cat<OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
EXTRN	_memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2527 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<OBJECTSTRUCT *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAUOBJECTSTRUCT@@ABQAU1@@std@@YAXPAPAUOBJECTSTRUCT@@ABQAU1@@Z ; std::_Construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@PAUOBJECTSTRUCT@@ABQAU1@@std@@YAXPAPAUOBJECTSTRUCT@@ABQAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAUOBJECTSTRUCT@@ABQAU1@@std@@YAXPAPAUOBJECTSTRUCT@@ABQAU1@@Z PROC ; std::_Construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAUOBJECTSTRUCT@@ABQAU1@@std@@YAXPAPAUOBJECTSTRUCT@@ABQAU1@@Z ENDP ; std::_Construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEPAPAUOBJECTSTRUCT@@XZ ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Unchecked
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEPAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEPAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEPAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Unchecked
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z ; std::_Val_type<OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z PROC ; std::_Val_type<OBJECTSTRUCT * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z ENDP ; std::_Val_type<OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUOBJECTSTRUCT@@PAU1@PAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<OBJECTSTRUCT *,OBJECTSTRUCT *,OBJECTSTRUCT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUOBJECTSTRUCT@@PAU1@PAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUOBJECTSTRUCT@@PAU1@PAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<OBJECTSTRUCT *,OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 462  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninit_move@PAUOBJECTSTRUCT@@PAU1@PAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<OBJECTSTRUCT *,OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z ; std::_Unchecked<OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z PROC ; std::_Unchecked<OBJECTSTRUCT * *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z ENDP ; std::_Unchecked<OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAPAUOBJECTSTRUCT@@@std@@YAPAHPAPAUOBJECTSTRUCT@@@Z ; std::_Dist_type<OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dist_type@PAPAUOBJECTSTRUCT@@@std@@YAPAHPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAPAUOBJECTSTRUCT@@@std@@YAPAHPAPAUOBJECTSTRUCT@@@Z PROC ; std::_Dist_type<OBJECTSTRUCT * *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAPAUOBJECTSTRUCT@@@std@@YAPAHPAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Dist_type<OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$forward@AAPAPAUOBJECTSTRUCT@@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@@Z ; std::forward<OBJECTSTRUCT * * &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAPAUOBJECTSTRUCT@@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAPAUOBJECTSTRUCT@@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@@Z PROC ; std::forward<OBJECTSTRUCT * * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAPAUOBJECTSTRUCT@@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@@Z ENDP ; std::forward<OBJECTSTRUCT * * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$_Pair_base@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z ; std::_Pair_base<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::_Pair_base<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$_Pair_base@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$_Pair_base@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z PROC ; std::_Pair_base<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::_Pair_base<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$_Pair_base@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::_Pair_base<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::_Pair_base<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &>
_TEXT	ENDS
PUBLIC	??$_Move@AAPAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ; std::_Move<OBJECTSTRUCT * &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@AAPAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::_Move<OBJECTSTRUCT * &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::_Move<OBJECTSTRUCT * &>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z PROC ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00008	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000b	99		 cdq
  0000c	2b c2		 sub	 eax, edx
  0000e	8b f0		 mov	 esi, eax
  00010	d1 fe		 sar	 esi, 1

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00012	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  00015	7d 47		 jge	 SHORT $LN12@Push_heap
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@Push_heap:
  00020	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00023	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00026	8d 1c b0	 lea	 ebx, DWORD PTR [eax+esi*4]
  00029	51		 push	 ecx
  0002a	53		 push	 ebx
  0002b	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  0002e	83 c4 08	 add	 esp, 8
  00031	84 c0		 test	 al, al

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00033	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00036	74 19		 je	 SHORT $LN13@Push_heap
  00038	8b 13		 mov	 edx, DWORD PTR [ebx]
  0003a	89 14 b8	 mov	 DWORD PTR [eax+edi*4], edx
  0003d	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00040	99		 cdq
  00041	2b c2		 sub	 eax, edx

; 2461 : 		_Hole = _Idx;

  00043	8b fe		 mov	 edi, esi
  00045	d1 f8		 sar	 eax, 1
  00047	8b f0		 mov	 esi, eax
  00049	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  0004c	7c d2		 jl	 SHORT $LL3@Push_heap

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  0004e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
$LN13@Push_heap:
  00051	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00054	8b 11		 mov	 edx, DWORD PTR [ecx]
  00056	5b		 pop	 ebx
  00057	89 14 b8	 mov	 DWORD PTR [eax+edi*4], edx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 2465 : 	}

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN12@Push_heap:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  0005e	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00061	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 14 b8	 mov	 DWORD PTR [eax+edi*4], edx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi

; 2465 : 	}

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ENDP ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 2627 : 	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2628 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 2629 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2630 : 		_Count * sizeof (*_First));

  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  00012	03 c0		 add	 eax, eax
  00014	03 c0		 add	 eax, eax
  00016	50		 push	 eax
  00017	2b f0		 sub	 esi, eax
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2631 : 	return (_Dest - _Count);

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 2632 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEAAPAUOBJECTSTRUCT@@XZ ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEAAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEAAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEAAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ; std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@V?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEII@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEII@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEII@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@AAPAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@AAPAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@AAPAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@AAPAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@AAPAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@AAPAU2@@Z PROC ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@AAPAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@AAPAU2@@Z ENDP ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * &>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z ; std::_Move<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z PROC ; std::_Move<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2536 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z ENDP ; std::_Move<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z ; std::_Destroy_range<std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z PROC ; std::_Destroy_range<std::allocator<OBJECTSTRUCT *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@IPAPAU1@@Z ; std::_Allocate<OBJECTSTRUCT *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@IPAPAU1@@Z
_TEXT	SEGMENT
$T214138 = -12						; size = 12
$T214143 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@IPAPAU1@@Z PROC ; std::_Allocate<OBJECTSTRUCT *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T214143[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T214138[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T214143[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T214138[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T214138[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@IPAPAU1@@Z ENDP ; std::_Allocate<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU3@@Z ; std::allocator<OBJECTSTRUCT *>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU3@@Z PROC ; std::allocator<OBJECTSTRUCT *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@2:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU3@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::construct
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator-
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 02	 sar	 eax, 2

; 382  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator-
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAUOBJECTSTRUCT@@PAPAU1@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z ; std::_Uninitialized_move<OBJECTSTRUCT * *,OBJECTSTRUCT * *,std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAUOBJECTSTRUCT@@PAPAU1@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUOBJECTSTRUCT@@PAPAU1@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z PROC ; std::_Uninitialized_move<OBJECTSTRUCT * *,OBJECTSTRUCT * *,std::allocator<OBJECTSTRUCT *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 472  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninitialized_move@PAPAUOBJECTSTRUCT@@PAPAU1@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAV?$allocator@PAUOBJECTSTRUCT@@@0@@Z ENDP ; std::_Uninitialized_move<OBJECTSTRUCT * *,OBJECTSTRUCT * *,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z ; std::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z PROC ; std::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@@?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &>
_TEXT	ENDS
PUBLIC	??$swap@PAUOBJECTSTRUCT@@@std@@YAXAAPAUOBJECTSTRUCT@@0@Z ; std::swap<OBJECTSTRUCT *>
; Function compile flags: /Ogtp
;	COMDAT ??$swap@PAUOBJECTSTRUCT@@@std@@YAXAAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUOBJECTSTRUCT@@@std@@YAXAAPAUOBJECTSTRUCT@@0@Z PROC ; std::swap<OBJECTSTRUCT *>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);
; 103  : 	_Left = _Move(_Right);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	56		 push	 esi
  0000c	8b 32		 mov	 esi, DWORD PTR [edx]
  0000e	89 30		 mov	 DWORD PTR [eax], esi

; 104  : 	_Right = _Move(_Tmp);

  00010	89 0a		 mov	 DWORD PTR [edx], ecx
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAUOBJECTSTRUCT@@@std@@YAXAAPAUOBJECTSTRUCT@@0@Z ENDP ; std::swap<OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z PROC ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2566 : 	_Diff _Top = _Hole;
; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00003	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Hole$[ebp]
  0000a	56		 push	 esi
  0000b	8d 74 1b 02	 lea	 esi, DWORD PTR [ebx+ebx+2]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00013	89 5d 0c	 mov	 DWORD PTR __Top$[ebp], ebx
  00016	3b f0		 cmp	 esi, eax
  00018	7d 2f		 jge	 SHORT $LN29@Adjust_hea
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL5@Adjust_hea:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00020	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00023	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00026	51		 push	 ecx
  00027	50		 push	 eax
  00028	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  0002b	83 c4 08	 add	 esp, 8
  0002e	84 c0		 test	 al, al
  00030	74 01		 je	 SHORT $LN2@Adjust_hea

; 2572 : 			--_Idx;

  00032	4e		 dec	 esi
$LN2@Adjust_hea:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00033	8b 14 b7	 mov	 edx, DWORD PTR [edi+esi*4]
  00036	89 14 9f	 mov	 DWORD PTR [edi+ebx*4], edx

; 2574 : 		_Hole = _Idx;

  00039	8b de		 mov	 ebx, esi
  0003b	8d 74 36 02	 lea	 esi, DWORD PTR [esi+esi+2]
  0003f	3b 75 10	 cmp	 esi, DWORD PTR __Bottom$[ebp]
  00042	7c dc		 jl	 SHORT $LL5@Adjust_hea

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  00044	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00047	3b f0		 cmp	 esi, eax
$LN29@Adjust_hea:
  00049	75 0a		 jne	 SHORT $LN1@Adjust_hea

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0004b	8b 4c 87 fc	 mov	 ecx, DWORD PTR [edi+eax*4-4]
  0004f	89 0c 9f	 mov	 DWORD PTR [edi+ebx*4], ecx

; 2580 : 		_Hole = _Bottom - 1;

  00052	8d 58 ff	 lea	 ebx, DWORD PTR [eax-1]
$LN1@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00055	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00058	99		 cdq
  00059	2b c2		 sub	 eax, edx
  0005b	8b f0		 mov	 esi, eax
  0005d	d1 fe		 sar	 esi, 1
  0005f	39 5d 0c	 cmp	 DWORD PTR __Top$[ebp], ebx
  00062	7d 36		 jge	 SHORT $LN27@Adjust_hea
$LL16@Adjust_hea:
  00064	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  00067	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  0006a	52		 push	 edx
  0006b	50		 push	 eax
  0006c	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  0006f	83 c4 08	 add	 esp, 8
  00072	84 c0		 test	 al, al
  00074	74 31		 je	 SHORT $LN28@Adjust_hea
  00076	8b 04 b7	 mov	 eax, DWORD PTR [edi+esi*4]
  00079	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax
  0007c	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0007f	99		 cdq
  00080	2b c2		 sub	 eax, edx
  00082	8b de		 mov	 ebx, esi
  00084	d1 f8		 sar	 eax, 1
  00086	8b f0		 mov	 esi, eax
  00088	39 5d 0c	 cmp	 DWORD PTR __Top$[ebp], ebx
  0008b	7c d7		 jl	 SHORT $LL16@Adjust_hea
  0008d	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00090	8b 11		 mov	 edx, DWORD PTR [ecx]
  00092	89 14 9f	 mov	 DWORD PTR [edi+ebx*4], edx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 2583 : 	}

  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN27@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  0009a	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 0c 9f	 mov	 DWORD PTR [edi+ebx*4], ecx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx

; 2583 : 	}

  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN28@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  000a7	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  000aa	8b 02		 mov	 eax, DWORD PTR [edx]
  000ac	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx

; 2583 : 	}

  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ENDP ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z PROC ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  00012	03 c0		 add	 eax, eax
  00014	03 c0		 add	 eax, eax
  00016	50		 push	 eax
  00017	2b f0		 sub	 esi, eax
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 2641 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z ENDP ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00$$QAPAU1@P6A_NABQAU1@2@ZPAH@Z ; std::_Pop_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00$$QAPAU1@P6A_NABQAU1@2@ZPAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
___formal$ = 28						; size = 4
??$_Pop_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00$$QAPAU1@P6A_NABQAU1@2@ZPAH@Z PROC ; std::_Pop_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	*_Dest = _Move(*_First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000b	89 0a		 mov	 DWORD PTR [edx], ecx

; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00010	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00017	52		 push	 edx
  00018	2b c8		 sub	 ecx, eax
  0001a	c1 f9 02	 sar	 ecx, 2
  0001d	51		 push	 ecx
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  00026	83 c4 14	 add	 esp, 20			; 00000014H

; 2595 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Pop_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00$$QAPAU1@P6A_NABQAU1@2@ZPAH@Z ENDP ; std::_Pop_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??0?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 04	 add	 edx, 4
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXPAPAUOBJECTSTRUCT@@0@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXPAPAUOBJECTSTRUCT@@0@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Destroy
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ; std::allocator<OBJECTSTRUCT *>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z
_TEXT	SEGMENT
$T214371 = -12						; size = 12
$T214363 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z PROC ; std::allocator<OBJECTSTRUCT *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate
  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T214363[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T214371[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T214363[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T214371[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T214371[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ENDP ; std::allocator<OBJECTSTRUCT *>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@ABQAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@ABQAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@ABQAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@ABQAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@ABQAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@ABQAU2@@Z PROC ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN9@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@ABQAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@ABQAU2@@Z ENDP ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAUOBJECTSTRUCT@@@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEPAPAUOBJECTSTRUCT@@PAPAU2@00@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Umove<OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAUOBJECTSTRUCT@@@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEPAPAUOBJECTSTRUCT@@PAPAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAUOBJECTSTRUCT@@@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEPAPAUOBJECTSTRUCT@@PAPAU2@00@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Umove<OBJECTSTRUCT * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1326 : 		}

  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAUOBJECTSTRUCT@@@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEPAPAUOBJECTSTRUCT@@PAPAU2@00@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Umove<OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0@Z ; std::iter_swap<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0@Z PROC ; std::iter_swap<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2134 : 	swap(*_Left, *_Right);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	56		 push	 esi
  0000c	8b 32		 mov	 esi, DWORD PTR [edx]
  0000e	89 30		 mov	 DWORD PTR [eax], esi
  00010	89 0a		 mov	 DWORD PTR [edx], ecx
  00012	5e		 pop	 esi

; 2135 : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$iter_swap@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::iter_swap<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z
_TEXT	SEGMENT
__Val$213462 = -8					; size = 4
tv235 = -4						; size = 4
__Bottom$ = 8						; size = 4
__First$ = 8						; size = 4
$T214500 = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z PROC ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2659 : 	_Diff _Bottom = _Last - _First;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	2b cf		 sub	 ecx, edi
  00010	c1 f9 02	 sar	 ecx, 2

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00013	8b c1		 mov	 eax, ecx
  00015	99		 cdq
  00016	2b c2		 sub	 eax, edx
  00018	8b d8		 mov	 ebx, eax
  0001a	d1 fb		 sar	 ebx, 1
  0001c	89 4d 08	 mov	 DWORD PTR __Bottom$[ebp], ecx
  0001f	85 db		 test	 ebx, ebx
  00021	0f 8e 81 00 00
	00		 jle	 $LN1@Make_heap

; 2659 : 	_Diff _Bottom = _Last - _First;

  00027	56		 push	 esi
  00028	8d 74 1b 02	 lea	 esi, DWORD PTR [ebx+ebx+2]
  0002c	eb 08		 jmp	 SHORT $LN2@Make_heap
  0002e	8b ff		 npad	 2
$LL26@Make_heap:
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  00033	8b 75 fc	 mov	 esi, DWORD PTR tv235[ebp]
$LN2@Make_heap:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;
; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00036	8b 44 9f fc	 mov	 eax, DWORD PTR [edi+ebx*4-4]
  0003a	4b		 dec	 ebx
  0003b	83 ee 02	 sub	 esi, 2
  0003e	89 75 fc	 mov	 DWORD PTR tv235[ebp], esi
  00041	89 45 f8	 mov	 DWORD PTR __Val$213462[ebp], eax

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  00044	89 5d 0c	 mov	 DWORD PTR $T214500[ebp], ebx
  00047	3b f1		 cmp	 esi, ecx
  00049	7d 32		 jge	 SHORT $LN27@Make_heap
  0004b	eb 03 8d 49 00	 npad	 5
$LL13@Make_heap:
  00050	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00053	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  0005b	83 c4 08	 add	 esp, 8
  0005e	84 c0		 test	 al, al
  00060	74 01		 je	 SHORT $LN10@Make_heap
  00062	4e		 dec	 esi
$LN10@Make_heap:
  00063	8b 45 0c	 mov	 eax, DWORD PTR $T214500[ebp]
  00066	8b 14 b7	 mov	 edx, DWORD PTR [edi+esi*4]
  00069	89 75 0c	 mov	 DWORD PTR $T214500[ebp], esi
  0006c	8d 74 36 02	 lea	 esi, DWORD PTR [esi+esi+2]
  00070	89 14 87	 mov	 DWORD PTR [edi+eax*4], edx
  00073	3b 75 08	 cmp	 esi, DWORD PTR __Bottom$[ebp]
  00076	7c d8		 jl	 SHORT $LL13@Make_heap
  00078	8b 4d 08	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  0007b	3b f1		 cmp	 esi, ecx
$LN27@Make_heap:
  0007d	75 0e		 jne	 SHORT $LN9@Make_heap
  0007f	8b 54 8f fc	 mov	 edx, DWORD PTR [edi+ecx*4-4]
  00083	8b 45 0c	 mov	 eax, DWORD PTR $T214500[ebp]
  00086	49		 dec	 ecx
  00087	89 14 87	 mov	 DWORD PTR [edi+eax*4], edx
  0008a	89 4d 0c	 mov	 DWORD PTR $T214500[ebp], ecx
$LN9@Make_heap:
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00090	8b 45 0c	 mov	 eax, DWORD PTR $T214500[ebp]
  00093	51		 push	 ecx
  00094	8d 55 f8	 lea	 edx, DWORD PTR __Val$213462[ebp]
  00097	52		 push	 edx
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
  000a3	85 db		 test	 ebx, ebx
  000a5	7f 89		 jg	 SHORT $LL26@Make_heap
  000a7	5e		 pop	 esi
$LN1@Make_heap:
  000a8	5f		 pop	 edi
  000a9	5b		 pop	 ebx

; 2666 : 		}
; 2667 : 	}

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ENDP ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z
_TEXT	SEGMENT
tv214 = -8						; size = 4
__Val$213506 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z PROC ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3651 : 	if (_First != _Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	3b f0		 cmp	 esi, eax
  0000f	0f 84 8f 00 00
	00		 je	 $LN6@Insertion_

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00015	57		 push	 edi
  00016	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00019	3b f8		 cmp	 edi, eax
  0001b	0f 84 82 00 00
	00		 je	 $LN28@Insertion_
  00021	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00024	89 45 f8	 mov	 DWORD PTR tv214[ebp], eax
  00027	53		 push	 ebx
$LL7@Insertion_:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  00028	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  0002a	8d 55 fc	 lea	 edx, DWORD PTR __Val$213506[ebp]
  0002d	56		 push	 esi
  0002e	52		 push	 edx
  0002f	8b df		 mov	 ebx, edi
  00031	89 4d fc	 mov	 DWORD PTR __Val$213506[ebp], ecx
  00034	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  00037	83 c4 08	 add	 esp, 8
  0003a	84 c0		 test	 al, al
  0003c	74 24		 je	 SHORT $LN5@Insertion_

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  0003e	8b c7		 mov	 eax, edi
  00040	2b c6		 sub	 eax, esi
  00042	c1 f8 02	 sar	 eax, 2
  00045	03 c0		 add	 eax, eax
  00047	03 c0		 add	 eax, eax
  00049	50		 push	 eax
  0004a	8b cf		 mov	 ecx, edi
  0004c	2b c8		 sub	 ecx, eax
  0004e	83 c1 04	 add	 ecx, 4
  00051	56		 push	 esi
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _memmove

; 3660 : 				*_First = _Move(_Val);

  00058	8b 55 fc	 mov	 edx, DWORD PTR __Val$213506[ebp]
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	89 16		 mov	 DWORD PTR [esi], edx

; 3661 : 				}
; 3662 : 			else

  00060	eb 34		 jmp	 SHORT $LN4@Insertion_
$LN5@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  00062	8b 75 f8	 mov	 esi, DWORD PTR tv214[ebp]
  00065	8b c6		 mov	 eax, esi
  00067	50		 push	 eax
  00068	8d 4d fc	 lea	 ecx, DWORD PTR __Val$213506[ebp]
  0006b	51		 push	 ecx
  0006c	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  0006f	83 c4 08	 add	 esp, 8
  00072	84 c0		 test	 al, al
  00074	74 18		 je	 SHORT $LN1@Insertion_
$LL3@Insertion_:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  00076	8b 16		 mov	 edx, DWORD PTR [esi]
  00078	89 13		 mov	 DWORD PTR [ebx], edx
  0007a	8b de		 mov	 ebx, esi
  0007c	83 ee 04	 sub	 esi, 4
  0007f	8d 45 fc	 lea	 eax, DWORD PTR __Val$213506[ebp]
  00082	56		 push	 esi
  00083	50		 push	 eax
  00084	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  00087	83 c4 08	 add	 esp, 8
  0008a	84 c0		 test	 al, al
  0008c	75 e8		 jne	 SHORT $LL3@Insertion_
$LN1@Insertion_:

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR __Val$213506[ebp]
  00091	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00094	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN4@Insertion_:

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00096	83 45 f8 04	 add	 DWORD PTR tv214[ebp], 4
  0009a	83 c7 04	 add	 edi, 4
  0009d	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  000a0	75 86		 jne	 SHORT $LL7@Insertion_
  000a2	5b		 pop	 ebx
$LN28@Insertion_:
  000a3	5f		 pop	 edi
$LN6@Insertion_:
  000a4	5e		 pop	 esi

; 3669 : 				}
; 3670 : 			}
; 3671 : 	}

  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ENDP ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ; std::_Med3<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Med3@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Med3@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z PROC ; std::_Med3<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00010	83 c4 08	 add	 esp, 8
  00013	84 c0		 test	 al, al
  00015	74 08		 je	 SHORT $LN8@Med3

; 3685 : 		_STD iter_swap(_Mid, _First);

  00017	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	89 0e		 mov	 DWORD PTR [esi], ecx
  0001d	89 07		 mov	 DWORD PTR [edi], eax
$LN8@Med3:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  0001f	53		 push	 ebx
  00020	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  00023	56		 push	 esi
  00024	53		 push	 ebx
  00025	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00028	83 c4 08	 add	 esp, 8
  0002b	84 c0		 test	 al, al
  0002d	74 08		 je	 SHORT $LN18@Med3

; 3687 : 		_STD iter_swap(_Last, _Mid);

  0002f	8b 16		 mov	 edx, DWORD PTR [esi]
  00031	8b 03		 mov	 eax, DWORD PTR [ebx]
  00033	89 13		 mov	 DWORD PTR [ebx], edx
  00035	89 06		 mov	 DWORD PTR [esi], eax
$LN18@Med3:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00037	57		 push	 edi
  00038	56		 push	 esi
  00039	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0003c	83 c4 08	 add	 esp, 8
  0003f	5b		 pop	 ebx
  00040	84 c0		 test	 al, al
  00042	74 08		 je	 SHORT $LN28@Med3

; 3689 : 		_STD iter_swap(_Mid, _First);

  00044	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	89 0e		 mov	 DWORD PTR [esi], ecx
  0004a	89 07		 mov	 DWORD PTR [edi], eax
$LN28@Med3:
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 3690 : 	}

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??$_Med3@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ENDP ; std::_Med3<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAPAUOBJECTSTRUCT@@PAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ; std::_Pop_heap_0<OBJECTSTRUCT * *,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Pop_heap_0@PAPAUOBJECTSTRUCT@@PAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$ = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAPAUOBJECTSTRUCT@@PAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z PROC ; std::_Pop_heap_0<OBJECTSTRUCT * *,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00009	89 4d 0c	 mov	 DWORD PTR __Val$[ebp], ecx

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  00014	8b 55 10	 mov	 edx, DWORD PTR __Pred$[ebp]
  00017	52		 push	 edx
  00018	2b c1		 sub	 eax, ecx
  0001a	8d 55 0c	 lea	 edx, DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	83 e8 04	 sub	 eax, 4
  00021	c1 f8 02	 sar	 eax, 2
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 2605 : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Pop_heap_0@PAPAUOBJECTSTRUCT@@PAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ENDP ; std::_Pop_heap_0<OBJECTSTRUCT * *,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::end
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@0@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@0@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
  00011	3b ca		 cmp	 ecx, edx
  00013	74 28		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00015	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00018	53		 push	 ebx
  00019	2b c2		 sub	 eax, edx
  0001b	56		 push	 esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00026	56		 push	 esi
  00027	52		 push	 edx
  00028	51		 push	 ecx
  00029	8b d9		 mov	 ebx, ecx
  0002b	e8 00 00 00 00	 call	 _memmove

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;
; 1212 : 			}
; 1213 : 		return (_First);

  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	03 f3		 add	 esi, ebx
  00038	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
$LN1@erase:
  0003d	5f		 pop	 edi

; 1214 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@2@0@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXXZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::reserve
; Function compile flags: /Ogtp
;	COMDAT ?reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXI@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00015	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0001d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	3b c8		 cmp	 ecx, eax
  00024	73 50		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00026	53		 push	 ebx
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002c	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ; std::allocator<OBJECTSTRUCT *>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00031	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00034	8b d8		 mov	 ebx, eax
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	2b d0		 sub	 edx, eax
  0003a	c1 fa 02	 sar	 edx, 2
  0003d	03 d2		 add	 edx, edx
  0003f	03 d2		 add	 edx, edx
  00041	52		 push	 edx
  00042	50		 push	 eax
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 _memmove

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004e	2b f8		 sub	 edi, eax
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00056	85 c0		 test	 eax, eax
  00058	74 09		 je	 SHORT $LN37@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	83 c4 04	 add	 esp, 4
$LN37@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00063	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00066	8d 14 bb	 lea	 edx, DWORD PTR [ebx+edi*4]
  00069	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  0006c	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  0006d	89 1e		 mov	 DWORD PTR [esi], ebx
  0006f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00072	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00075	5b		 pop	 ebx
$LN3@reserve:
  00076	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXI@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::reserve
_TEXT	ENDS
PUBLIC	??$make_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::make_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$make_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$make_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::make_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	8b d0		 mov	 edx, eax
  0000b	2b d1		 sub	 edx, ecx
  0000d	83 e2 fc	 and	 edx, -4			; fffffffcH
  00010	83 fa 04	 cmp	 edx, 4
  00013	7e 12		 jle	 SHORT $LN1@make_heap

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00015	8b 55 10	 mov	 edx, DWORD PTR __Pred$[ebp]
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	52		 push	 edx
  0001d	50		 push	 eax
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  00024	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:

; 2678 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$make_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::make_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Insertion_sort<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Insertion_sort@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Insertion_sort@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::_Insertion_sort<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Insertion_sort@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::_Insertion_sort<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
tv328 = -12						; size = 4
tv325 = -8						; size = 4
$T215043 = -4						; size = 4
tv327 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z PROC ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3696 : 	if (40 < _Last - _First)

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	8b c3		 mov	 eax, ebx
  00010	2b c6		 sub	 eax, esi
  00012	c1 f8 02	 sar	 eax, 2
  00015	57		 push	 edi

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;
; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00016	56		 push	 esi
  00017	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001a	0f 8e 45 01 00
	00		 jle	 $LN2@Median
  00020	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  00023	40		 inc	 eax
  00024	99		 cdq
  00025	83 e2 07	 and	 edx, 7
  00028	03 c2		 add	 eax, edx
  0002a	c1 f8 03	 sar	 eax, 3
  0002d	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00034	03 c0		 add	 eax, eax
  00036	03 c0		 add	 eax, eax
  00038	8d 3c 30	 lea	 edi, DWORD PTR [eax+esi]
  0003b	89 4d f8	 mov	 DWORD PTR tv325[ebp], ecx
  0003e	03 ce		 add	 ecx, esi
  00040	57		 push	 edi
  00041	89 4d fc	 mov	 DWORD PTR $T215043[ebp], ecx
  00044	89 45 08	 mov	 DWORD PTR tv327[ebp], eax
  00047	89 7d f4	 mov	 DWORD PTR tv328[ebp], edi
  0004a	ff d3		 call	 ebx
  0004c	83 c4 08	 add	 esp, 8
  0004f	84 c0		 test	 al, al
  00051	74 08		 je	 SHORT $LN12@Median
  00053	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00055	8b 07		 mov	 eax, DWORD PTR [edi]
  00057	89 0f		 mov	 DWORD PTR [edi], ecx
  00059	89 06		 mov	 DWORD PTR [esi], eax
$LN12@Median:
  0005b	8b 55 fc	 mov	 edx, DWORD PTR $T215043[ebp]
  0005e	57		 push	 edi
  0005f	52		 push	 edx
  00060	ff d3		 call	 ebx
  00062	83 c4 08	 add	 esp, 8
  00065	84 c0		 test	 al, al
  00067	74 0b		 je	 SHORT $LN22@Median
  00069	8b 4d fc	 mov	 ecx, DWORD PTR $T215043[ebp]
  0006c	8b 17		 mov	 edx, DWORD PTR [edi]
  0006e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00070	89 11		 mov	 DWORD PTR [ecx], edx
  00072	89 07		 mov	 DWORD PTR [edi], eax
$LN22@Median:
  00074	56		 push	 esi
  00075	57		 push	 edi
  00076	ff d3		 call	 ebx
  00078	83 c4 08	 add	 esp, 8
  0007b	84 c0		 test	 al, al
  0007d	74 08		 je	 SHORT $LN32@Median
  0007f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00081	8b 07		 mov	 eax, DWORD PTR [edi]
  00083	89 0f		 mov	 DWORD PTR [edi], ecx
  00085	89 06		 mov	 DWORD PTR [esi], eax
$LN32@Median:

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00087	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  0008a	8b fe		 mov	 edi, esi
  0008c	2b 7d 08	 sub	 edi, DWORD PTR tv327[ebp]
  0008f	57		 push	 edi
  00090	56		 push	 esi
  00091	ff d3		 call	 ebx
  00093	83 c4 08	 add	 esp, 8
  00096	84 c0		 test	 al, al
  00098	74 08		 je	 SHORT $LN47@Median
  0009a	8b 17		 mov	 edx, DWORD PTR [edi]
  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	89 16		 mov	 DWORD PTR [esi], edx
  000a0	89 07		 mov	 DWORD PTR [edi], eax
$LN47@Median:
  000a2	8b 45 08	 mov	 eax, DWORD PTR tv327[ebp]
  000a5	03 c6		 add	 eax, esi
  000a7	56		 push	 esi
  000a8	50		 push	 eax
  000a9	ff d3		 call	 ebx
  000ab	83 c4 08	 add	 esp, 8
  000ae	84 c0		 test	 al, al
  000b0	74 0d		 je	 SHORT $LN57@Median
  000b2	8b 45 08	 mov	 eax, DWORD PTR tv327[ebp]
  000b5	8b 16		 mov	 edx, DWORD PTR [esi]
  000b7	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  000ba	89 14 30	 mov	 DWORD PTR [eax+esi], edx
  000bd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN57@Median:
  000bf	57		 push	 edi
  000c0	56		 push	 esi
  000c1	ff d3		 call	 ebx
  000c3	83 c4 08	 add	 esp, 8
  000c6	84 c0		 test	 al, al
  000c8	74 08		 je	 SHORT $LN67@Median
  000ca	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	89 0e		 mov	 DWORD PTR [esi], ecx
  000d0	89 07		 mov	 DWORD PTR [edi], eax
$LN67@Median:

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  000d2	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  000d5	8b fb		 mov	 edi, ebx
  000d7	2b 5d f8	 sub	 ebx, DWORD PTR tv325[ebp]
  000da	2b 7d 08	 sub	 edi, DWORD PTR tv327[ebp]
  000dd	53		 push	 ebx
  000de	57		 push	 edi
  000df	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000e2	83 c4 08	 add	 esp, 8
  000e5	84 c0		 test	 al, al
  000e7	74 08		 je	 SHORT $LN82@Median
  000e9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000eb	8b 07		 mov	 eax, DWORD PTR [edi]
  000ed	89 17		 mov	 DWORD PTR [edi], edx
  000ef	89 03		 mov	 DWORD PTR [ebx], eax
$LN82@Median:
  000f1	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  000f4	57		 push	 edi
  000f5	50		 push	 eax
  000f6	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000f9	83 c4 08	 add	 esp, 8
  000fc	84 c0		 test	 al, al
  000fe	74 0b		 je	 SHORT $LN92@Median
  00100	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00103	8b 17		 mov	 edx, DWORD PTR [edi]
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	89 11		 mov	 DWORD PTR [ecx], edx
  00109	89 07		 mov	 DWORD PTR [edi], eax
$LN92@Median:
  0010b	53		 push	 ebx
  0010c	57		 push	 edi
  0010d	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00110	83 c4 08	 add	 esp, 8
  00113	84 c0		 test	 al, al
  00115	74 08		 je	 SHORT $LN102@Median
  00117	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00119	8b 07		 mov	 eax, DWORD PTR [edi]
  0011b	89 0f		 mov	 DWORD PTR [edi], ecx
  0011d	89 03		 mov	 DWORD PTR [ebx], eax
$LN102@Median:

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0011f	8b 5d f4	 mov	 ebx, DWORD PTR tv328[ebp]
  00122	53		 push	 ebx
  00123	56		 push	 esi
  00124	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00127	83 c4 08	 add	 esp, 8
  0012a	84 c0		 test	 al, al
  0012c	74 08		 je	 SHORT $LN117@Median
  0012e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00130	8b 06		 mov	 eax, DWORD PTR [esi]
  00132	89 16		 mov	 DWORD PTR [esi], edx
  00134	89 03		 mov	 DWORD PTR [ebx], eax
$LN117@Median:
  00136	56		 push	 esi
  00137	57		 push	 edi
  00138	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0013b	83 c4 08	 add	 esp, 8
  0013e	84 c0		 test	 al, al
  00140	74 08		 je	 SHORT $LN127@Median
  00142	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00144	8b 07		 mov	 eax, DWORD PTR [edi]
  00146	89 0f		 mov	 DWORD PTR [edi], ecx
  00148	89 06		 mov	 DWORD PTR [esi], eax
$LN127@Median:
  0014a	53		 push	 ebx
  0014b	56		 push	 esi
  0014c	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0014f	83 c4 08	 add	 esp, 8
  00152	84 c0		 test	 al, al
  00154	74 4d		 je	 SHORT $LN172@Median
  00156	8b 13		 mov	 edx, DWORD PTR [ebx]
  00158	8b 06		 mov	 eax, DWORD PTR [esi]
  0015a	5f		 pop	 edi
  0015b	89 16		 mov	 DWORD PTR [esi], edx
  0015d	5e		 pop	 esi
  0015e	89 03		 mov	 DWORD PTR [ebx], eax
  00160	5b		 pop	 ebx

; 3706 : 	}

  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
$LN2@Median:

; 3703 : 		}
; 3704 : 	else
; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  00165	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  00168	57		 push	 edi
  00169	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0016c	83 c4 08	 add	 esp, 8
  0016f	84 c0		 test	 al, al
  00171	74 08		 je	 SHORT $LN152@Median
  00173	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00175	8b 07		 mov	 eax, DWORD PTR [edi]
  00177	89 0f		 mov	 DWORD PTR [edi], ecx
  00179	89 06		 mov	 DWORD PTR [esi], eax
$LN152@Median:
  0017b	57		 push	 edi
  0017c	53		 push	 ebx
  0017d	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00180	83 c4 08	 add	 esp, 8
  00183	84 c0		 test	 al, al
  00185	74 08		 je	 SHORT $LN162@Median
  00187	8b 17		 mov	 edx, DWORD PTR [edi]
  00189	8b 03		 mov	 eax, DWORD PTR [ebx]
  0018b	89 13		 mov	 DWORD PTR [ebx], edx
  0018d	89 07		 mov	 DWORD PTR [edi], eax
$LN162@Median:
  0018f	56		 push	 esi
  00190	57		 push	 edi
  00191	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00194	83 c4 08	 add	 esp, 8
  00197	84 c0		 test	 al, al
  00199	74 08		 je	 SHORT $LN172@Median
  0019b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019d	8b 07		 mov	 eax, DWORD PTR [edi]
  0019f	89 0f		 mov	 DWORD PTR [edi], ecx
  001a1	89 06		 mov	 DWORD PTR [esi], eax
$LN172@Median:
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx

; 3706 : 	}

  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c3		 ret	 0
??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ENDP ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Pop_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Pop_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$215626 = 12					; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::_Pop_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00009	89 4d 0c	 mov	 DWORD PTR __Val$215626[ebp], ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  00014	8b 55 10	 mov	 edx, DWORD PTR __Pred$[ebp]
  00017	52		 push	 edx
  00018	2b c1		 sub	 eax, ecx
  0001a	8d 55 0c	 lea	 edx, DWORD PTR __Val$215626[ebp]
  0001d	52		 push	 edx
  0001e	83 e8 04	 sub	 eax, 4
  00021	c1 f8 02	 sar	 eax, 2
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 2613 : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Pop_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::_Pop_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@ ; `string'
PUBLIC	??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	?SendScore@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::SendScore
EXTRN	?gLevelExperience@@3PAKA:BYTE			; gLevelExperience
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?GCKillPlayerExpSend@@YAXHHHHH@Z:PROC		; GCKillPlayerExpSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?gObjCheckMaxZen@@YAHHH@Z:PROC			; gObjCheckMaxZen
EXTRN	?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z:PROC ; gObjLevelUp
EXTRN	?gObjUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_J@Z:PROC ; gObjUserSetExp
EXTRN	?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; gObjSealUserSetExp
EXTRN	?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ:PROC ; CCrywolfSync::GetGettingExpPenaltyRate
EXTRN	?g_iCrywolfApplyMvpPenalty@@3HA:DWORD		; g_iCrywolfApplyMvpPenalty
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
;	COMDAT ??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@ DB 'R'
	DB	'ank :[%d] : [%s][%s][%d][%d][%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@ DB '[Dev'
	DB	'ilSquare] Rank [%d]', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\devilsquareground.cpp
CONST	ENDS
;	COMDAT ?SendScore@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
_exp$212465 = -44					; size = 8
_exp$212457 = -36					; size = 8
_exp$212449 = -28					; size = 8
_exp$212432 = -20					; size = 8
tv1386 = -12						; size = 4
_iSize$ = -8						; size = 4
_Itor$ = -8						; size = 4
_ret$212434 = -1					; size = 1
_count$ = -1						; size = 1
?SendScore@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::SendScore, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 283  : 	if ( this->m_DevilSquareRankList.size() < 1 )

  00009	8b 87 d8 02 00
	00		 mov	 eax, DWORD PTR [edi+728]
  0000f	2b 87 d4 02 00
	00		 sub	 eax, DWORD PTR [edi+724]
  00015	c1 f8 02	 sar	 eax, 2
  00018	89 45 f4	 mov	 DWORD PTR tv1386[ebp], eax
  0001b	83 f8 01	 cmp	 eax, 1
  0001e	0f 82 3c 05 00
	00		 jb	 $LN33@SendScore

; 284  : 	{
; 285  : 		return;
; 286  : 	}
; 287  : 
; 288  : 	BYTE count = 1;
; 289  : 	int iUserCount = this->m_DevilSquareRankList.size();
; 290  : 
; 291  : 	int iExp = 0;
; 292  : 	std::vector<OBJECTSTRUCT *>::iterator Itor;
; 293  : 	for (Itor = this->m_DevilSquareRankList.begin() ; Itor != this->m_DevilSquareRankList.end() ; Itor++ )

  00024	8b 8f d4 02 00
	00		 mov	 ecx, DWORD PTR [edi+724]
  0002a	53		 push	 ebx
  0002b	56		 push	 esi
  0002c	b3 01		 mov	 bl, 1
  0002e	89 4d f8	 mov	 DWORD PTR _Itor$[ebp], ecx
  00031	3b 8f d8 02 00
	00		 cmp	 ecx, DWORD PTR [edi+728]
  00037	0f 84 1c 01 00
	00		 je	 $LN408@SendScore
  0003d	eb 04		 jmp	 SHORT $LN73@SendScore
  0003f	90		 npad	 1
$LL415@SendScore:
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _Itor$[ebp]
$LN73@SendScore:

; 294  : 	{
; 295  : 		memcpy(this->m_DevilSquareScoreInfoTOP10.Score[count].Name , (*(Itor))->Name, MAX_ACCOUNT_LEN);

  00043	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00045	0f b6 c3	 movzx	 eax, bl
  00048	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0004b	8d 34 d7	 lea	 esi, DWORD PTR [edi+edx*8]
  0004e	8b 51 77	 mov	 edx, DWORD PTR [ecx+119]
  00051	89 96 e9 02 00
	00		 mov	 DWORD PTR [esi+745], edx
  00057	8b 51 7b	 mov	 edx, DWORD PTR [ecx+123]
  0005a	89 96 ed 02 00
	00		 mov	 DWORD PTR [esi+749], edx
  00060	66 8b 49 7f	 mov	 cx, WORD PTR [ecx+127]

; 296  : 		this->m_DevilSquareScoreInfoTOP10.Score[count].TotalScore = (*(Itor))->m_nEventScore;

  00064	8b 55 f8	 mov	 edx, DWORD PTR _Itor$[ebp]
  00067	66 89 8e f1 02
	00 00		 mov	 WORD PTR [esi+753], cx
  0006e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00070	8b 91 90 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3728]

; 297  : 
; 298  : 		if ( iUserCount <= 6 )

  00076	8b 4d f4	 mov	 ecx, DWORD PTR tv1386[ebp]
  00079	89 96 f5 02 00
	00		 mov	 DWORD PTR [esi+757], edx
  0007f	83 f9 06	 cmp	 ecx, 6
  00082	7f 3e		 jg	 SHORT $LN46@SendScore

; 299  : 		{
; 300  : 			if ( count < 4 )

  00084	80 fb 04	 cmp	 bl, 4
  00087	73 1f		 jae	 SHORT $LN45@SendScore

; 301  : 			{
; 302  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[count-1][0];

  00089	8b 8c c7 f0 03
	00 00		 mov	 ecx, DWORD PTR [edi+eax*8+1008]
  00090	89 8e fd 02 00
	00		 mov	 DWORD PTR [esi+765], ecx

; 303  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[count-1][1];

  00096	8b 94 c7 f4 03
	00 00		 mov	 edx, DWORD PTR [edi+eax*8+1012]
  0009d	89 96 f9 02 00
	00		 mov	 DWORD PTR [esi+761], edx

; 304  : 			}
; 305  : 			else

  000a3	e9 95 00 00 00	 jmp	 $LN37@SendScore
$LN45@SendScore:

; 306  : 			{
; 307  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[3][0];

  000a8	8b 87 10 04 00
	00		 mov	 eax, DWORD PTR [edi+1040]
  000ae	89 86 fd 02 00
	00		 mov	 DWORD PTR [esi+765], eax

; 308  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[3][1];

  000b4	8b 8f 14 04 00
	00		 mov	 ecx, DWORD PTR [edi+1044]
  000ba	89 8e f9 02 00
	00		 mov	 DWORD PTR [esi+761], ecx

; 309  : 			}
; 310  : 		}
; 311  : 		else

  000c0	eb 7b		 jmp	 SHORT $LN37@SendScore
$LN46@SendScore:

; 312  : 		{
; 313  : 			int lc5 = count*100/iUserCount;

  000c2	6b c0 64	 imul	 eax, 100		; 00000064H
  000c5	99		 cdq
  000c6	f7 f9		 idiv	 ecx

; 314  : 
; 315  : 			if ( count == 1 )

  000c8	80 fb 01	 cmp	 bl, 1
  000cb	75 1a		 jne	 SHORT $LN42@SendScore

; 316  : 			{
; 317  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[0][0];

  000cd	8b 97 f8 03 00
	00		 mov	 edx, DWORD PTR [edi+1016]
  000d3	89 97 15 03 00
	00		 mov	 DWORD PTR [edi+789], edx

; 318  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[0][1];

  000d9	8b 87 fc 03 00
	00		 mov	 eax, DWORD PTR [edi+1020]
  000df	89 87 11 03 00
	00		 mov	 DWORD PTR [edi+785], eax
  000e5	eb 56		 jmp	 SHORT $LN37@SendScore
$LN42@SendScore:

; 319  : 			}
; 320  : 			else if ( lc5 <= 30 )

  000e7	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  000ea	7f 1a		 jg	 SHORT $LN40@SendScore

; 321  : 			{
; 322  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[1][0];

  000ec	8b 8f 00 04 00
	00		 mov	 ecx, DWORD PTR [edi+1024]
  000f2	89 8e fd 02 00
	00		 mov	 DWORD PTR [esi+765], ecx

; 323  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[1][1];

  000f8	8b 97 04 04 00
	00		 mov	 edx, DWORD PTR [edi+1028]
  000fe	89 96 f9 02 00
	00		 mov	 DWORD PTR [esi+761], edx
  00104	eb 37		 jmp	 SHORT $LN37@SendScore
$LN40@SendScore:

; 324  : 			}
; 325  : 			else if ( lc5 <= 50 )

  00106	83 f8 32	 cmp	 eax, 50			; 00000032H
  00109	7f 1a		 jg	 SHORT $LN38@SendScore

; 326  : 			{
; 327  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[2][0];

  0010b	8b 87 08 04 00
	00		 mov	 eax, DWORD PTR [edi+1032]
  00111	89 86 fd 02 00
	00		 mov	 DWORD PTR [esi+765], eax

; 328  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[2][1];

  00117	8b 8f 0c 04 00
	00		 mov	 ecx, DWORD PTR [edi+1036]
  0011d	89 8e f9 02 00
	00		 mov	 DWORD PTR [esi+761], ecx

; 329  : 			}
; 330  : 			else

  00123	eb 18		 jmp	 SHORT $LN37@SendScore
$LN38@SendScore:

; 331  : 			{
; 332  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[3][0];

  00125	8b 97 10 04 00
	00		 mov	 edx, DWORD PTR [edi+1040]
  0012b	89 96 fd 02 00
	00		 mov	 DWORD PTR [esi+765], edx

; 333  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[3][1];

  00131	8b 87 14 04 00
	00		 mov	 eax, DWORD PTR [edi+1044]
  00137	89 86 f9 02 00
	00		 mov	 DWORD PTR [esi+761], eax
$LN37@SendScore:

; 334  : 			}
; 335  : 		}
; 336  : 
; 337  : 		count++;

  0013d	fe c3		 inc	 bl

; 338  : 
; 339  : 		if ( count >= 10 )

  0013f	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00142	73 15		 jae	 SHORT $LN408@SendScore

; 284  : 	{
; 285  : 		return;
; 286  : 	}
; 287  : 
; 288  : 	BYTE count = 1;
; 289  : 	int iUserCount = this->m_DevilSquareRankList.size();
; 290  : 
; 291  : 	int iExp = 0;
; 292  : 	std::vector<OBJECTSTRUCT *>::iterator Itor;
; 293  : 	for (Itor = this->m_DevilSquareRankList.begin() ; Itor != this->m_DevilSquareRankList.end() ; Itor++ )

  00144	8b 45 f8	 mov	 eax, DWORD PTR _Itor$[ebp]
  00147	83 c0 04	 add	 eax, 4
  0014a	89 45 f8	 mov	 DWORD PTR _Itor$[ebp], eax
  0014d	3b 87 d8 02 00
	00		 cmp	 eax, DWORD PTR [edi+728]
  00153	0f 85 e7 fe ff
	ff		 jne	 $LL415@SendScore
$LN408@SendScore:

; 340  : 		{
; 341  : 			break;
; 342  : 		}
; 343  : 	}
; 344  : 
; 345  : 	this->m_DevilSquareScoreInfoTOP10.Count  = count;
; 346  : 	int iSize = count * 24 + 5;

  00159	0f b6 c3	 movzx	 eax, bl
  0015c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0015f	8d 04 c5 05 00
	00 00		 lea	 eax, DWORD PTR [eax*8+5]

; 347  : 
; 348  : 	PHeadSetB((LPBYTE)&this->m_DevilSquareScoreInfoTOP10, 0x93, iSize);

  00166	50		 push	 eax
  00167	8d 8f e4 02 00
	00		 lea	 ecx, DWORD PTR [edi+740]
  0016d	68 93 00 00 00	 push	 147			; 00000093H
  00172	51		 push	 ecx
  00173	88 9f e8 02 00
	00		 mov	 BYTE PTR [edi+744], bl
  00179	89 45 f8	 mov	 DWORD PTR _iSize$[ebp], eax
  0017c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 349  : 	count = 1;
; 350  : 
; 351  : 	Itor = this->m_DevilSquareRankList.begin();
; 352  : 
; 353  : 	LogAddTD("[DevilSquare] Rank [%d]", this->m_iIndex);

  00181	8b 8f f4 03 00
	00		 mov	 ecx, DWORD PTR [edi+1012]
  00187	8b b7 d4 02 00
	00		 mov	 esi, DWORD PTR [edi+724]
  0018d	51		 push	 ecx
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@
  00193	b3 01		 mov	 bl, 1
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0019b	83 c4 14	 add	 esp, 20			; 00000014H

; 354  : 
; 355  : 	for ( ; Itor != this->m_DevilSquareRankList.end(); Itor++ )

  0019e	3b b7 d8 02 00
	00		 cmp	 esi, DWORD PTR [edi+728]
  001a4	0f 84 b4 03 00
	00		 je	 $LN416@SendScore
  001aa	8d 9b 00 00 00
	00		 npad	 6
$LL115@SendScore:

; 356  : 	{
; 357  : 		if ( iUserCount <= 6 )

  001b0	8b 4d f4	 mov	 ecx, DWORD PTR tv1386[ebp]
  001b3	83 f9 06	 cmp	 ecx, 6
  001b6	7f 41		 jg	 SHORT $LN32@SendScore

; 358  : 		{
; 359  : 			if ( count < 4 ) //webzen fixed on season 3.0

  001b8	80 fb 04	 cmp	 bl, 4
  001bb	73 22		 jae	 SHORT $LN31@SendScore

; 360  : 			{
; 361  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[count-1][0];

  001bd	0f b6 c3	 movzx	 eax, bl
  001c0	8b 94 c7 f0 03
	00 00		 mov	 edx, DWORD PTR [edi+eax*8+1008]
  001c7	89 97 fd 02 00
	00		 mov	 DWORD PTR [edi+765], edx

; 362  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[count-1][1];

  001cd	8b 84 c7 f4 03
	00 00		 mov	 eax, DWORD PTR [edi+eax*8+1012]
  001d4	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax

; 363  : 			}
; 364  : 			else

  001da	e9 8c 00 00 00	 jmp	 $LN23@SendScore
$LN31@SendScore:

; 365  : 			{
; 366  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[3][0];

  001df	8b 8f 10 04 00
	00		 mov	 ecx, DWORD PTR [edi+1040]

; 367  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[3][1];

  001e5	8b 97 14 04 00
	00		 mov	 edx, DWORD PTR [edi+1044]
  001eb	89 8f fd 02 00
	00		 mov	 DWORD PTR [edi+765], ecx
  001f1	89 97 f9 02 00
	00		 mov	 DWORD PTR [edi+761], edx

; 368  : 			}
; 369  : 		}
; 370  : 		else

  001f7	eb 72		 jmp	 SHORT $LN23@SendScore
$LN32@SendScore:

; 371  : 		{
; 372  : 			int lc7 = count*100/iUserCount;

  001f9	0f b6 c3	 movzx	 eax, bl
  001fc	6b c0 64	 imul	 eax, 100		; 00000064H
  001ff	99		 cdq
  00200	f7 f9		 idiv	 ecx

; 373  : 
; 374  : 			if ( count ==1 )

  00202	80 fb 01	 cmp	 bl, 1
  00205	75 0e		 jne	 SHORT $LN28@SendScore

; 375  : 			{
; 376  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[0][0];

  00207	8b 87 f8 03 00
	00		 mov	 eax, DWORD PTR [edi+1016]

; 377  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[0][1];

  0020d	8b 8f fc 03 00
	00		 mov	 ecx, DWORD PTR [edi+1020]
  00213	eb 4a		 jmp	 SHORT $LN418@SendScore
$LN28@SendScore:

; 378  : 			}
; 379  : 			else if ( lc7 <= 30 )

  00215	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00218	7f 1a		 jg	 SHORT $LN26@SendScore

; 380  : 			{
; 381  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[1][0];

  0021a	8b 97 00 04 00
	00		 mov	 edx, DWORD PTR [edi+1024]

; 382  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[1][1];

  00220	8b 87 04 04 00
	00		 mov	 eax, DWORD PTR [edi+1028]
  00226	89 97 fd 02 00
	00		 mov	 DWORD PTR [edi+765], edx
  0022c	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax
  00232	eb 37		 jmp	 SHORT $LN23@SendScore
$LN26@SendScore:

; 383  : 			}
; 384  : 			else if ( lc7 <= 50 )

  00234	83 f8 32	 cmp	 eax, 50			; 00000032H
  00237	7f 1a		 jg	 SHORT $LN24@SendScore

; 385  : 			{
; 386  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[2][0];

  00239	8b 8f 08 04 00
	00		 mov	 ecx, DWORD PTR [edi+1032]

; 387  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[2][1];

  0023f	8b 97 0c 04 00
	00		 mov	 edx, DWORD PTR [edi+1036]
  00245	89 8f fd 02 00
	00		 mov	 DWORD PTR [edi+765], ecx
  0024b	89 97 f9 02 00
	00		 mov	 DWORD PTR [edi+761], edx

; 388  : 			}
; 389  : 			else

  00251	eb 18		 jmp	 SHORT $LN23@SendScore
$LN24@SendScore:

; 390  : 			{
; 391  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[3][0];

  00253	8b 87 10 04 00
	00		 mov	 eax, DWORD PTR [edi+1040]

; 392  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[3][1];

  00259	8b 8f 14 04 00
	00		 mov	 ecx, DWORD PTR [edi+1044]
$LN418@SendScore:
  0025f	89 8f f9 02 00
	00		 mov	 DWORD PTR [edi+761], ecx
  00265	89 87 fd 02 00
	00		 mov	 DWORD PTR [edi+765], eax
$LN23@SendScore:

; 393  : 			}
; 394  : 		}
; 395  : 
; 396  : 		if ( g_CrywolfSync.GetOccupationState() == 1 && g_iCrywolfApplyMvpPenalty != FALSE)

  0026b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00270	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  00275	83 f8 01	 cmp	 eax, 1
  00278	75 33		 jne	 SHORT $LN410@SendScore
  0027a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpPenalty@@3HA, 0 ; g_iCrywolfApplyMvpPenalty
  00281	74 2a		 je	 SHORT $LN410@SendScore

; 397  : 		{
; 398  : 			this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp =  (this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp * g_CrywolfSync.GetGettingExpPenaltyRate()) / 100;

  00283	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00288	e8 00 00 00 00	 call	 ?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetGettingExpPenaltyRate
  0028d	8b c8		 mov	 ecx, eax
  0028f	0f af 8f f9 02
	00 00		 imul	 ecx, DWORD PTR [edi+761]
  00296	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0029b	f7 e9		 imul	 ecx
  0029d	c1 fa 05	 sar	 edx, 5
  002a0	8b c2		 mov	 eax, edx
  002a2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a5	03 c2		 add	 eax, edx
  002a7	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax
$LN410@SendScore:

; 399  : 		}
; 400  : 
; 401  : 		__int64 exp = this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp;

  002ad	8b 87 f9 02 00
	00		 mov	 eax, DWORD PTR [edi+761]
  002b3	99		 cdq

; 402  : 		gObjSealUserSetExp((*(Itor)), exp, TRUE); //Seal Exp (Season3 add-on)

  002b4	6a 01		 push	 1
  002b6	8d 4d ec	 lea	 ecx, DWORD PTR _exp$212432[ebp]
  002b9	89 55 f0	 mov	 DWORD PTR _exp$212432[ebp+4], edx
  002bc	8b 16		 mov	 edx, DWORD PTR [esi]
  002be	51		 push	 ecx
  002bf	52		 push	 edx
  002c0	89 45 ec	 mov	 DWORD PTR _exp$212432[ebp], eax
  002c3	e8 00 00 00 00	 call	 ?gObjSealUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; gObjSealUserSetExp

; 403  : 		gObjUserSetExp((*(Itor)),exp);	//Panda Use

  002c8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ca	8d 45 ec	 lea	 eax, DWORD PTR _exp$212432[ebp]
  002cd	50		 push	 eax
  002ce	51		 push	 ecx
  002cf	e8 00 00 00 00	 call	 ?gObjUserSetExp@@YAXPAUOBJECTSTRUCT@@AA_J@Z ; gObjUserSetExp

; 404  : 
; 405  : 		(*(Itor))->Experience += (int)exp;		

  002d4	8b 06		 mov	 eax, DWORD PTR [esi]
  002d6	8b 55 ec	 mov	 edx, DWORD PTR _exp$212432[ebp]
  002d9	01 90 c8 00 00
	00		 add	 DWORD PTR [eax+200], edx

; 406  : 		
; 407  : 		bool ret = gObjLevelUp((*(Itor)), exp, 0, EVENT_TYPE_DEVILSQUARE);

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	6a 02		 push	 2
  002e3	6a 00		 push	 0
  002e5	8d 45 ec	 lea	 eax, DWORD PTR _exp$212432[ebp]
  002e8	50		 push	 eax
  002e9	51		 push	 ecx
  002ea	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z ; gObjLevelUp

; 408  : 
; 409  : 		(*(Itor))->m_nEventMoney = this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen;

  002ef	8b 16		 mov	 edx, DWORD PTR [esi]
  002f1	88 45 ff	 mov	 BYTE PTR _ret$212434[ebp], al
  002f4	8b 87 fd 02 00
	00		 mov	 eax, DWORD PTR [edi+765]
  002fa	89 82 98 0e 00
	00		 mov	 DWORD PTR [edx+3736], eax

; 410  : 
; 411  : 		if ( gObjCheckMaxZen((*(Itor))->m_Index, (*(Itor))->m_nEventMoney) == FALSE )

  00300	8b 06		 mov	 eax, DWORD PTR [esi]
  00302	8b 88 98 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3736]
  00308	8b 10		 mov	 edx, DWORD PTR [eax]
  0030a	51		 push	 ecx
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ?gObjCheckMaxZen@@YAHHH@Z ; gObjCheckMaxZen
  00311	83 c4 2c	 add	 esp, 44			; 0000002cH
  00314	85 c0		 test	 eax, eax

; 412  : 		{
; 413  : 			int Zen = MAX_ZEN - (*(Itor))->Money;
; 414  : 			(*(Itor))->Money += Zen;

  00316	8b 06		 mov	 eax, DWORD PTR [esi]
  00318	75 0c		 jne	 SHORT $LN198@SendScore
  0031a	c7 80 f0 00 00
	00 00 94 35 77	 mov	 DWORD PTR [eax+240], 2000000000 ; 77359400H

; 415  : 		}
; 416  : 		else

  00324	eb 0c		 jmp	 SHORT $LN212@SendScore

; 417  : 		{
; 418  : 			(*(Itor))->Money += (*(Itor))->m_nEventMoney;

$LN198@SendScore:
  00326	8b 88 98 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3736]
  0032c	01 88 f0 00 00
	00		 add	 DWORD PTR [eax+240], ecx

; 419  : 		}
; 420  : 
; 421  : 		GCMoneySend((*(Itor))->m_Index, (*(Itor))->Money);

$LN212@SendScore:
  00332	8b 06		 mov	 eax, DWORD PTR [esi]
  00334	8b 90 f0 00 00
	00		 mov	 edx, DWORD PTR [eax+240]
  0033a	8b 00		 mov	 eax, DWORD PTR [eax]
  0033c	52		 push	 edx
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00343	83 c4 08	 add	 esp, 8

; 422  : 
; 423  : 		if ( ret == true )

  00346	80 7d ff 01	 cmp	 BYTE PTR _ret$212434[ebp], 1
  0034a	75 1a		 jne	 SHORT $LN233@SendScore

; 424  : 		{
; 425  : 			GCKillPlayerExpSend((*(Itor))->m_Index, (WORD)-1, exp, 0, 0);//Season 4.5 changed

  0034c	8b 4d ec	 mov	 ecx, DWORD PTR _exp$212432[ebp]
  0034f	8b 16		 mov	 edx, DWORD PTR [esi]
  00351	8b 02		 mov	 eax, DWORD PTR [edx]
  00353	6a 00		 push	 0
  00355	6a 00		 push	 0
  00357	51		 push	 ecx
  00358	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0035d	50		 push	 eax
  0035e	e8 00 00 00 00	 call	 ?GCKillPlayerExpSend@@YAXHHHHH@Z ; GCKillPlayerExpSend
  00363	83 c4 14	 add	 esp, 20			; 00000014H

; 426  : 		}
; 427  : 
; 428  : 		this->SendRankingInfo((*(Itor)));

$LN233@SendScore:
  00366	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00368	51		 push	 ecx
  00369	8b cf		 mov	 ecx, edi
  0036b	e8 00 00 00 00	 call	 ?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::SendRankingInfo

; 429  : 
; 430  : 		LogAddTD("Rank :[%d] : [%s][%s][%d][%d][%d]", count, (*(Itor))->AccountID, (*(Itor))->Name, (*(Itor))->m_nEventMoney, (*(Itor))->m_nEventExp, (*(Itor))->m_nEventScore);

  00370	8b 06		 mov	 eax, DWORD PTR [esi]
  00372	8b 90 90 0e 00
	00		 mov	 edx, DWORD PTR [eax+3728]
  00378	8b 88 94 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3732]
  0037e	52		 push	 edx
  0037f	8b 90 98 0e 00
	00		 mov	 edx, DWORD PTR [eax+3736]
  00385	51		 push	 ecx
  00386	52		 push	 edx
  00387	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  0038a	51		 push	 ecx
  0038b	83 c0 6c	 add	 eax, 108		; 0000006cH
  0038e	0f b6 d3	 movzx	 edx, bl
  00391	50		 push	 eax
  00392	52		 push	 edx
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@
  00398	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 431  : 		
; 432  : 		memcpy(this->m_DevilSquareScoreInfoTOP10.Score[0].Name , (*(Itor))->Name, MAX_ACCOUNT_LEN);

  0039e	8b 06		 mov	 eax, DWORD PTR [esi]
  003a0	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  003a3	89 8f e9 02 00
	00		 mov	 DWORD PTR [edi+745], ecx
  003a9	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  003ac	89 97 ed 02 00
	00		 mov	 DWORD PTR [edi+749], edx
  003b2	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  003b6	66 89 87 f1 02
	00 00		 mov	 WORD PTR [edi+753], ax

; 433  : 		this->m_DevilSquareScoreInfoTOP10.Score[0].TotalScore = (*(Itor))->m_nEventScore;

  003bd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003bf	8b 91 90 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3728]

; 434  : 		this->m_DevilSquareScoreInfoTOP10.MyRank = count;
; 435  : 		count++;
; 436  : 
; 437  : 		DataSend((*(Itor))->m_Index, (LPBYTE)&this->m_DevilSquareScoreInfoTOP10 , iSize);

  003c5	8b 45 f8	 mov	 eax, DWORD PTR _iSize$[ebp]
  003c8	88 9f e7 02 00
	00		 mov	 BYTE PTR [edi+743], bl
  003ce	50		 push	 eax
  003cf	89 97 f5 02 00
	00		 mov	 DWORD PTR [edi+757], edx
  003d5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003d7	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d9	8d 87 e4 02 00
	00		 lea	 eax, DWORD PTR [edi+740]
  003df	50		 push	 eax
  003e0	fe c3		 inc	 bl
  003e2	52		 push	 edx
  003e3	88 5d ff	 mov	 BYTE PTR _count$[ebp], bl
  003e6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  003eb	83 c4 28	 add	 esp, 40			; 00000028H

; 438  : 		
; 439  : 		#if(ENABLE_NSGAME_UPDATE)
; 440  : 		if ( count < 4 )

  003ee	80 fb 04	 cmp	 bl, 4
  003f1	0f 83 3e 01 00
	00		 jae	 $LN380@SendScore

; 441  : 		{
; 442  : 			if(count == 1)

  003f7	80 fb 01	 cmp	 bl, 1
  003fa	75 6b		 jne	 SHORT $LN17@SendScore

; 443  : 			{
; 444  : 				if(ZtConfig.Event.Zt_DSRewardLevelUp1)

  003fc	a1 90 08 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2192
  00401	85 c0		 test	 eax, eax
  00403	0f 84 2c 01 00
	00		 je	 $LN380@SendScore

; 445  : 				{
; 446  : 					for(int i = 0; i < ZtConfig.Event.Zt_DSRewardLevelUp1; i++)

  00409	33 db		 xor	 ebx, ebx
  0040b	85 c0		 test	 eax, eax
  0040d	0f 8e 1f 01 00
	00		 jle	 $LN413@SendScore
  00413	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL15@SendScore:

; 447  : 					{
; 448  : 						__int64 exp = gLevelExperience[(*(Itor))->Level];

  00420	8b 06		 mov	 eax, DWORD PTR [esi]
  00422	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00429	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gLevelExperience@@3PAKA[ecx*4]
  00430	89 4d e4	 mov	 DWORD PTR _exp$212449[ebp], ecx
  00433	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _exp$212449[ebp+4], 0

; 449  : 						(*(Itor))->Experience = exp;

  0043a	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 450  : 						gObjLevelUp((*(Itor)), exp, (*(Itor))->Class, 0);

  00440	8b 06		 mov	 eax, DWORD PTR [esi]
  00442	0f b7 90 b8 00
	00 00		 movzx	 edx, WORD PTR [eax+184]
  00449	6a 00		 push	 0
  0044b	52		 push	 edx
  0044c	8d 4d e4	 lea	 ecx, DWORD PTR _exp$212449[ebp]
  0044f	51		 push	 ecx
  00450	50		 push	 eax
  00451	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z ; gObjLevelUp
  00456	43		 inc	 ebx
  00457	83 c4 10	 add	 esp, 16			; 00000010H
  0045a	3b 1d 90 08 00
	00		 cmp	 ebx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2192
  00460	7c be		 jl	 SHORT $LL15@SendScore

; 451  : 					}
; 452  : 				}
; 453  : 			}

  00462	e9 cb 00 00 00	 jmp	 $LN413@SendScore
$LN17@SendScore:

; 454  : 			else if(count == 2)

  00467	80 fb 02	 cmp	 bl, 2
  0046a	75 68		 jne	 SHORT $LN11@SendScore

; 455  : 			{
; 456  : 				if(ZtConfig.Event.Zt_DSRewardLevelUp2)

  0046c	a1 94 08 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2196
  00471	85 c0		 test	 eax, eax
  00473	0f 84 bc 00 00
	00		 je	 $LN380@SendScore

; 457  : 				{
; 458  : 					for(int i = 0; i < ZtConfig.Event.Zt_DSRewardLevelUp2; i++)

  00479	33 db		 xor	 ebx, ebx
  0047b	85 c0		 test	 eax, eax
  0047d	0f 8e af 00 00
	00		 jle	 $LN413@SendScore
  00483	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL9@SendScore:

; 459  : 					{
; 460  : 						__int64 exp = gLevelExperience[(*(Itor))->Level];

  00490	8b 06		 mov	 eax, DWORD PTR [esi]
  00492	0f bf 90 be 00
	00 00		 movsx	 edx, WORD PTR [eax+190]
  00499	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?gLevelExperience@@3PAKA[edx*4]
  004a0	89 4d dc	 mov	 DWORD PTR _exp$212457[ebp], ecx
  004a3	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _exp$212457[ebp+4], 0

; 461  : 						(*(Itor))->Experience = exp;

  004aa	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 462  : 						gObjLevelUp((*(Itor)), exp, (*(Itor))->Class, 0);

  004b0	8b 06		 mov	 eax, DWORD PTR [esi]
  004b2	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  004b9	6a 00		 push	 0
  004bb	51		 push	 ecx
  004bc	8d 55 dc	 lea	 edx, DWORD PTR _exp$212457[ebp]
  004bf	52		 push	 edx
  004c0	50		 push	 eax
  004c1	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z ; gObjLevelUp
  004c6	43		 inc	 ebx
  004c7	83 c4 10	 add	 esp, 16			; 00000010H
  004ca	3b 1d 94 08 00
	00		 cmp	 ebx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2196
  004d0	7c be		 jl	 SHORT $LL9@SendScore

; 463  : 					}
; 464  : 				}
; 465  : 			}

  004d2	eb 5e		 jmp	 SHORT $LN413@SendScore
$LN11@SendScore:

; 466  : 			else if(count == 3)

  004d4	80 fb 03	 cmp	 bl, 3
  004d7	75 5c		 jne	 SHORT $LN380@SendScore

; 467  : 			{
; 468  : 				if(ZtConfig.Event.Zt_DSRewardLevelUp3)

  004d9	a1 98 08 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2200
  004de	85 c0		 test	 eax, eax
  004e0	74 53		 je	 SHORT $LN380@SendScore

; 469  : 				{
; 470  : 					for(int i = 0; i < ZtConfig.Event.Zt_DSRewardLevelUp3; i++)

  004e2	33 db		 xor	 ebx, ebx
  004e4	85 c0		 test	 eax, eax
  004e6	7e 4a		 jle	 SHORT $LN413@SendScore
  004e8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@SendScore:

; 471  : 					{
; 472  : 						__int64 exp = gLevelExperience[(*(Itor))->Level];

  004f0	8b 06		 mov	 eax, DWORD PTR [esi]
  004f2	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  004f9	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gLevelExperience@@3PAKA[ecx*4]
  00500	89 4d d4	 mov	 DWORD PTR _exp$212465[ebp], ecx
  00503	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _exp$212465[ebp+4], 0

; 473  : 						(*(Itor))->Experience = exp;

  0050a	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 474  : 						gObjLevelUp((*(Itor)), exp, (*(Itor))->Class, 0);

  00510	8b 06		 mov	 eax, DWORD PTR [esi]
  00512	0f b7 90 b8 00
	00 00		 movzx	 edx, WORD PTR [eax+184]
  00519	6a 00		 push	 0
  0051b	52		 push	 edx
  0051c	8d 4d d4	 lea	 ecx, DWORD PTR _exp$212465[ebp]
  0051f	51		 push	 ecx
  00520	50		 push	 eax
  00521	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@AA_JHH@Z ; gObjLevelUp
  00526	43		 inc	 ebx
  00527	83 c4 10	 add	 esp, 16			; 00000010H
  0052a	3b 1d 98 08 00
	00		 cmp	 ebx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2200
  00530	7c be		 jl	 SHORT $LL3@SendScore
$LN413@SendScore:

; 451  : 					}
; 452  : 				}
; 453  : 			}

  00532	8a 5d ff	 mov	 bl, BYTE PTR _count$[ebp]

; 475  : 					}
; 476  : 				}
; 477  : 			}
; 478  : 		}
; 479  : 		#endif
; 480  : 
; 481  : 		(*(Itor))->m_nEventScore = 0;

$LN380@SendScore:
  00535	8b 16		 mov	 edx, DWORD PTR [esi]
  00537	33 c0		 xor	 eax, eax
  00539	89 82 90 0e 00
	00		 mov	 DWORD PTR [edx+3728], eax

; 482  : 		(*(Itor))->m_nEventMoney = 0;

  0053f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00541	89 81 98 0e 00
	00		 mov	 DWORD PTR [ecx+3736], eax

; 483  : 		(*(Itor))->m_nEventExp = 0;

  00547	8b 16		 mov	 edx, DWORD PTR [esi]
  00549	83 c6 04	 add	 esi, 4
  0054c	89 82 94 0e 00
	00		 mov	 DWORD PTR [edx+3732], eax
  00552	3b b7 d8 02 00
	00		 cmp	 esi, DWORD PTR [edi+728]
  00558	0f 85 52 fc ff
	ff		 jne	 $LL115@SendScore
$LN416@SendScore:
  0055e	5e		 pop	 esi
  0055f	5b		 pop	 ebx
$LN33@SendScore:
  00560	5f		 pop	 edi

; 484  : 	}
; 485  : }

  00561	8b e5		 mov	 esp, ebp
  00563	5d		 pop	 ebp
  00564	c3		 ret	 0
?SendScore@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::SendScore
_TEXT	ENDS
PUBLIC	??1?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXXZ ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 1218 : 		erase(begin(), end());

  00003	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00006	56		 push	 esi
  00007	8b 33		 mov	 esi, DWORD PTR [ebx]
  00009	3b f1		 cmp	 esi, ecx
  0000b	74 20		 je	 SHORT $LN19@clear
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c1		 sub	 eax, ecx
  00011	57		 push	 edi
  00012	c1 f8 02	 sar	 eax, 2
  00015	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _memmove
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	03 fe		 add	 edi, esi
  00029	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  0002c	5f		 pop	 edi
$LN19@clear:

; 1219 : 		}

  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	c3		 ret	 0
?clear@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  00014	c1 f8 02	 sar	 eax, 2
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 02	 sar	 edx, 2
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z
_TEXT	SEGMENT
__Tmp$216823 = -16					; size = 4
$T216832 = -12						; size = 4
__Glast$ = -8						; size = 4
__Plast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z PROC ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	8b c1		 mov	 eax, ecx
  00011	2b c7		 sub	 eax, edi
  00013	c1 f8 02	 sar	 eax, 2
  00016	99		 cdq
  00017	2b c2		 sub	 eax, edx
  00019	d1 f8		 sar	 eax, 1
  0001b	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  0001e	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00021	50		 push	 eax
  00022	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00025	51		 push	 ecx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  00030	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00033	89 5d fc	 mov	 DWORD PTR __Plast$[ebp], ebx

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00036	3b fe		 cmp	 edi, esi
  00038	73 28		 jae	 SHORT $LN129@Unguarded_
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL27@Unguarded_:
  00040	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  00043	56		 push	 esi
  00044	57		 push	 edi
  00045	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00048	83 c4 08	 add	 esp, 8
  0004b	84 c0		 test	 al, al
  0004d	75 13		 jne	 SHORT $LN129@Unguarded_
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00054	83 c4 08	 add	 esp, 8
  00057	84 c0		 test	 al, al
  00059	75 07		 jne	 SHORT $LN129@Unguarded_

; 3721 : 		--_Pfirst;

  0005b	8b f7		 mov	 esi, edi
  0005d	39 75 0c	 cmp	 DWORD PTR __First$[ebp], esi
  00060	72 de		 jb	 SHORT $LL27@Unguarded_
$LN129@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00062	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00065	73 24		 jae	 SHORT $LN24@Unguarded_
$LL25@Unguarded_:
  00067	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0006a	56		 push	 esi
  0006b	53		 push	 ebx
  0006c	ff d7		 call	 edi
  0006e	83 c4 08	 add	 esp, 8
  00071	84 c0		 test	 al, al
  00073	75 13		 jne	 SHORT $LN131@Unguarded_
  00075	53		 push	 ebx
  00076	56		 push	 esi
  00077	ff d7		 call	 edi
  00079	83 c4 08	 add	 esp, 8
  0007c	84 c0		 test	 al, al
  0007e	75 08		 jne	 SHORT $LN131@Unguarded_

; 3725 : 		++_Plast;

  00080	83 c3 04	 add	 ebx, 4
  00083	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00086	72 df		 jb	 SHORT $LL25@Unguarded_
$LN131@Unguarded_:
  00088	89 5d fc	 mov	 DWORD PTR __Plast$[ebp], ebx
$LN24@Unguarded_:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;
; 3728 : 	_RanIt _Glast = _Pfirst;

  0008b	8b c6		 mov	 eax, esi
  0008d	8b fb		 mov	 edi, ebx
  0008f	89 45 f8	 mov	 DWORD PTR __Glast$[ebp], eax
$LL23@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00092	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00095	73 33		 jae	 SHORT $LN118@Unguarded_
$LL21@Unguarded_:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  00097	57		 push	 edi
  00098	56		 push	 esi
  00099	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0009c	83 c4 08	 add	 esp, 8
  0009f	84 c0		 test	 al, al
  000a1	75 19		 jne	 SHORT $LN20@Unguarded_

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000a3	56		 push	 esi
  000a4	57		 push	 edi
  000a5	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000a8	83 c4 08	 add	 esp, 8
  000ab	84 c0		 test	 al, al
  000ad	75 15		 jne	 SHORT $LN133@Unguarded_

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000af	8b 17		 mov	 edx, DWORD PTR [edi]
  000b1	8b c3		 mov	 eax, ebx
  000b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b5	89 10		 mov	 DWORD PTR [eax], edx
  000b7	83 c3 04	 add	 ebx, 4
  000ba	89 0f		 mov	 DWORD PTR [edi], ecx
$LN20@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000bc	83 c7 04	 add	 edi, 4
  000bf	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000c2	72 d3		 jb	 SHORT $LL21@Unguarded_
$LN133@Unguarded_:
  000c4	8b 45 f8	 mov	 eax, DWORD PTR __Glast$[ebp]

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000c7	89 5d fc	 mov	 DWORD PTR __Plast$[ebp], ebx
$LN118@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000ca	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  000cd	76 41		 jbe	 SHORT $LN134@Unguarded_
  000cf	8d 58 fc	 lea	 ebx, DWORD PTR [eax-4]
$LL14@Unguarded_:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000d2	56		 push	 esi
  000d3	53		 push	 ebx
  000d4	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000d7	83 c4 08	 add	 esp, 8
  000da	84 c0		 test	 al, al
  000dc	75 18		 jne	 SHORT $LN13@Unguarded_

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000de	53		 push	 ebx
  000df	56		 push	 esi
  000e0	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000e3	83 c4 08	 add	 esp, 8
  000e6	84 c0		 test	 al, al
  000e8	75 1d		 jne	 SHORT $LN127@Unguarded_

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  000ea	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ec	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  000ef	83 ee 04	 sub	 esi, 4
  000f2	89 0e		 mov	 DWORD PTR [esi], ecx
  000f4	89 03		 mov	 DWORD PTR [ebx], eax
$LN13@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000f6	8b 45 f8	 mov	 eax, DWORD PTR __Glast$[ebp]
  000f9	83 e8 04	 sub	 eax, 4
  000fc	83 eb 04	 sub	 ebx, 4
  000ff	89 45 f8	 mov	 DWORD PTR __Glast$[ebp], eax
  00102	39 45 0c	 cmp	 DWORD PTR __First$[ebp], eax
  00105	72 cb		 jb	 SHORT $LL14@Unguarded_
$LN127@Unguarded_:
  00107	8b 45 f8	 mov	 eax, DWORD PTR __Glast$[ebp]
  0010a	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$[ebp]

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  0010d	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
$LN134@Unguarded_:
  00110	75 3b		 jne	 SHORT $LN6@Unguarded_
  00112	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00115	74 74		 je	 SHORT $LN120@Unguarded_

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  00117	3b df		 cmp	 ebx, edi
  00119	74 08		 je	 SHORT $LN64@Unguarded_

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  0011b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0011d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011f	89 16		 mov	 DWORD PTR [esi], edx
  00121	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN64@Unguarded_:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  00123	8b ce		 mov	 ecx, esi
  00125	8b 11		 mov	 edx, DWORD PTR [ecx]
  00127	89 7d f4	 mov	 DWORD PTR $T216832[ebp], edi
  0012a	89 55 f0	 mov	 DWORD PTR __Tmp$216823[ebp], edx
  0012d	8b 55 f4	 mov	 edx, DWORD PTR $T216832[ebp]
  00130	8b 12		 mov	 edx, DWORD PTR [edx]
  00132	89 11		 mov	 DWORD PTR [ecx], edx
  00134	8b 4d f0	 mov	 ecx, DWORD PTR __Tmp$216823[ebp]
  00137	8b 55 f4	 mov	 edx, DWORD PTR $T216832[ebp]
  0013a	83 c3 04	 add	 ebx, 4
  0013d	83 c6 04	 add	 esi, 4
  00140	89 5d fc	 mov	 DWORD PTR __Plast$[ebp], ebx
  00143	83 c7 04	 add	 edi, 4
  00146	89 0a		 mov	 DWORD PTR [edx], ecx
  00148	e9 45 ff ff ff	 jmp	 $LL23@Unguarded_
$LN6@Unguarded_:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  0014d	83 e8 04	 sub	 eax, 4
  00150	89 45 f8	 mov	 DWORD PTR __Glast$[ebp], eax
  00153	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00156	75 23		 jne	 SHORT $LN3@Unguarded_
  00158	83 ee 04	 sub	 esi, 4
  0015b	3b c6		 cmp	 eax, esi
  0015d	74 08		 je	 SHORT $LN84@Unguarded_

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  0015f	8b 16		 mov	 edx, DWORD PTR [esi]
  00161	8b 08		 mov	 ecx, DWORD PTR [eax]
  00163	89 10		 mov	 DWORD PTR [eax], edx
  00165	89 0e		 mov	 DWORD PTR [esi], ecx
$LN84@Unguarded_:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  00167	8b 53 fc	 mov	 edx, DWORD PTR [ebx-4]
  0016a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016c	83 eb 04	 sub	 ebx, 4
  0016f	89 16		 mov	 DWORD PTR [esi], edx
  00171	89 5d fc	 mov	 DWORD PTR __Plast$[ebp], ebx
  00174	89 0b		 mov	 DWORD PTR [ebx], ecx

; 3761 : 			}
; 3762 : 		else

  00176	e9 17 ff ff ff	 jmp	 $LL23@Unguarded_
$LN3@Unguarded_:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  0017b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0017d	8b 10		 mov	 edx, DWORD PTR [eax]
  0017f	89 17		 mov	 DWORD PTR [edi], edx
  00181	89 08		 mov	 DWORD PTR [eax], ecx
  00183	83 c7 04	 add	 edi, 4

; 3764 : 		}

  00186	e9 07 ff ff ff	 jmp	 $LL23@Unguarded_
$LN120@Unguarded_:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  0018b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0018e	5f		 pop	 edi
  0018f	89 30		 mov	 DWORD PTR [eax], esi
  00191	5e		 pop	 esi
  00192	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00195	5b		 pop	 ebx

; 3765 : 	}

  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z ENDP ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$217012 = 12					; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000a	2b c6		 sub	 eax, esi
  0000c	8b c8		 mov	 ecx, eax
  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00011	83 f9 04	 cmp	 ecx, 4
  00014	7e 3e		 jle	 SHORT $LN1@Sort_heap
  00016	53		 push	 ebx
  00017	8b 5d 10	 mov	 ebx, DWORD PTR __Pred$[ebp]
  0001a	57		 push	 edi
  0001b	eb 03 8d 49 00	 npad	 5
$LL3@Sort_heap:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00020	8b 54 06 fc	 mov	 edx, DWORD PTR [esi+eax-4]
  00024	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00026	8d 78 fc	 lea	 edi, DWORD PTR [eax-4]
  00029	89 4c 06 fc	 mov	 DWORD PTR [esi+eax-4], ecx
  0002d	53		 push	 ebx
  0002e	89 55 0c	 mov	 DWORD PTR __Val$217012[ebp], edx
  00031	8d 55 0c	 lea	 edx, DWORD PTR __Val$217012[ebp]
  00034	52		 push	 edx
  00035	8b c7		 mov	 eax, edi
  00037	c1 f8 02	 sar	 eax, 2
  0003a	50		 push	 eax
  0003b	6a 00		 push	 0
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  00043	8b c7		 mov	 eax, edi
  00045	8b cf		 mov	 ecx, edi
  00047	83 e1 fc	 and	 ecx, -4			; fffffffcH
  0004a	83 c4 14	 add	 esp, 20			; 00000014H
  0004d	83 f9 04	 cmp	 ecx, 4
  00050	7f ce		 jg	 SHORT $LL3@Sort_heap
  00052	5f		 pop	 edi
  00053	5b		 pop	 ebx
$LN1@Sort_heap:
  00054	5e		 pop	 esi

; 2703 : 	}

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??_7CDevilSquareGround@@6B@			; CDevilSquareGround::`vftable'
PUBLIC	??0CDevilSquareGround@@QAE@XZ			; CDevilSquareGround::CDevilSquareGround
PUBLIC	??_R4CDevilSquareGround@@6B@			; CDevilSquareGround::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDevilSquareGround@@@8			; CDevilSquareGround `RTTI Type Descriptor'
PUBLIC	??_R3CDevilSquareGround@@8			; CDevilSquareGround::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDevilSquareGround@@8			; CDevilSquareGround::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDevilSquareGround@@8		; CDevilSquareGround::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECDevilSquareGround@@UAEPAXI@Z:PROC		; CDevilSquareGround::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CDevilSquareGround@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@CDevilSquareGround@@8 DD FLAT:??_R0?AVCDevilSquareGround@@@8 ; CDevilSquareGround::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDevilSquareGround@@8
rdata$r	ENDS
;	COMDAT ??_R2CDevilSquareGround@@8
rdata$r	SEGMENT
??_R2CDevilSquareGround@@8 DD FLAT:??_R1A@?0A@EA@CDevilSquareGround@@8 ; CDevilSquareGround::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDevilSquareGround@@8
rdata$r	SEGMENT
??_R3CDevilSquareGround@@8 DD 00H			; CDevilSquareGround::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDevilSquareGround@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDevilSquareGround@@@8
_DATA	SEGMENT
??_R0?AVCDevilSquareGround@@@8 DD FLAT:??_7type_info@@6B@ ; CDevilSquareGround `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDevilSquareGround@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDevilSquareGround@@6B@
rdata$r	SEGMENT
??_R4CDevilSquareGround@@6B@ DD 00H			; CDevilSquareGround::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDevilSquareGround@@@8
	DD	FLAT:??_R3CDevilSquareGround@@8
rdata$r	ENDS
;	COMDAT ??_7CDevilSquareGround@@6B@
CONST	SEGMENT
??_7CDevilSquareGround@@6B@ DD FLAT:??_R4CDevilSquareGround@@6B@ ; CDevilSquareGround::`vftable'
	DD	FLAT:??_ECDevilSquareGround@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\devilsquareground.cpp
CONST	ENDS
;	COMDAT ??0CDevilSquareGround@@QAE@XZ
_TEXT	SEGMENT
??0CDevilSquareGround@@QAE@XZ PROC			; CDevilSquareGround::CDevilSquareGround, COMDAT
; _this$ = ecx

; 37   : {

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDevilSquareGround@@6B@

; 38   : 	this->Init(0);

  0000b	50		 push	 eax
  0000c	89 86 d4 02 00
	00		 mov	 DWORD PTR [esi+724], eax
  00012	89 86 d8 02 00
	00		 mov	 DWORD PTR [esi+728], eax
  00018	89 86 dc 02 00
	00		 mov	 DWORD PTR [esi+732], eax
  0001e	e8 00 00 00 00	 call	 ?Init@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::Init

; 39   : }

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??0CDevilSquareGround@@QAE@XZ ENDP			; CDevilSquareGround::CDevilSquareGround
_TEXT	ENDS
PUBLIC	??1CDevilSquareGround@@UAE@XZ			; CDevilSquareGround::~CDevilSquareGround
; Function compile flags: /Ogtp
;	COMDAT ??1CDevilSquareGround@@UAE@XZ
_TEXT	SEGMENT
??1CDevilSquareGround@@UAE@XZ PROC			; CDevilSquareGround::~CDevilSquareGround, COMDAT
; _this$ = ecx

; 43   : 	//Dark Wizard until 4th Floor
; 44   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_1] = 0;
; 45   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_2] = 0;
; 46   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_3] = 0;
; 47   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_4] = 170;
; 48   : 	
; 49   : 	//Dark Knight until 4th Floor
; 50   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_1] = 20;
; 51   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_2] = 90;
; 52   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_3] = 120;
; 53   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_4] = 400;
; 54   : 
; 55   : 	//Elf until 4th Floor
; 56   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_1] = 10;

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	ba aa 00 00 00	 mov	 edx, 170		; 000000aaH
  0000d	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  00012	89 86 54 04 00
	00		 mov	 DWORD PTR [esi+1108], eax

; 57   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_2] = 10;

  00018	89 86 58 04 00
	00		 mov	 DWORD PTR [esi+1112], eax

; 58   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_3] = 10;

  0001e	89 86 5c 04 00
	00		 mov	 DWORD PTR [esi+1116], eax

; 59   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_4] = 200;

  00024	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  00029	57		 push	 edi
  0002a	33 ff		 xor	 edi, edi
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDevilSquareGround@@6B@
  00032	89 be 1c 04 00
	00		 mov	 DWORD PTR [esi+1052], edi
  00038	89 be 20 04 00
	00		 mov	 DWORD PTR [esi+1056], edi
  0003e	89 be 24 04 00
	00		 mov	 DWORD PTR [esi+1060], edi
  00044	89 96 28 04 00
	00		 mov	 DWORD PTR [esi+1064], edx
  0004a	c7 86 38 04 00
	00 14 00 00 00	 mov	 DWORD PTR [esi+1080], 20 ; 00000014H
  00054	c7 86 3c 04 00
	00 5a 00 00 00	 mov	 DWORD PTR [esi+1084], 90 ; 0000005aH
  0005e	c7 86 40 04 00
	00 78 00 00 00	 mov	 DWORD PTR [esi+1088], 120 ; 00000078H
  00068	89 8e 44 04 00
	00		 mov	 DWORD PTR [esi+1092], ecx
  0006e	89 86 60 04 00
	00		 mov	 DWORD PTR [esi+1120], eax

; 60   : 
; 61   : 	//Magumsa until 4th Floor
; 62   : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_1] = 0;

  00074	89 be 70 04 00
	00		 mov	 DWORD PTR [esi+1136], edi

; 63   : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_2] = 0;

  0007a	89 be 74 04 00
	00		 mov	 DWORD PTR [esi+1140], edi

; 64   : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_3] = 0;

  00080	89 be 78 04 00
	00		 mov	 DWORD PTR [esi+1144], edi

; 65   : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_4] = 0;

  00086	89 be 7c 04 00
	00		 mov	 DWORD PTR [esi+1148], edi

; 66   : 
; 67   : 	//Dark Wizard 5th & 6th Floor
; 68   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_5] = 170;

  0008c	89 96 2c 04 00
	00		 mov	 DWORD PTR [esi+1068], edx

; 69   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_6] = 170;

  00092	89 96 30 04 00
	00		 mov	 DWORD PTR [esi+1072], edx

; 70   : 
; 71   : 	//Dark Knight 5th & 6th Floor
; 72   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_5] = 400;

  00098	89 8e 48 04 00
	00		 mov	 DWORD PTR [esi+1096], ecx

; 73   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_6] = 400;

  0009e	89 8e 4c 04 00
	00		 mov	 DWORD PTR [esi+1100], ecx

; 74   : 
; 75   : 	//Elf 5th & 6th Floor
; 76   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_5] = 200;

  000a4	89 86 64 04 00
	00		 mov	 DWORD PTR [esi+1124], eax

; 77   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_6] = 200;

  000aa	89 86 68 04 00
	00		 mov	 DWORD PTR [esi+1128], eax

; 78   : 
; 79   : 	//Magumsa 5th & 6th Floor
; 80   : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_5] = 0;

  000b0	89 be 80 04 00
	00		 mov	 DWORD PTR [esi+1152], edi

; 81   : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_6] = 0;

  000b6	89 be 84 04 00
	00		 mov	 DWORD PTR [esi+1156], edi

; 82   : 
; 83   : 	//Dark Lord All Floors
; 84   : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_1] = 0;

  000bc	89 be 8c 04 00
	00		 mov	 DWORD PTR [esi+1164], edi

; 85   : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_2] = 0;

  000c2	89 be 90 04 00
	00		 mov	 DWORD PTR [esi+1168], edi

; 86   : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_3] = 0;

  000c8	89 be 94 04 00
	00		 mov	 DWORD PTR [esi+1172], edi

; 87   : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_4] = 0;

  000ce	89 be 98 04 00
	00		 mov	 DWORD PTR [esi+1176], edi

; 88   : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_5] = 0;

  000d4	89 be 9c 04 00
	00		 mov	 DWORD PTR [esi+1180], edi

; 89   : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_6] = 0;

  000da	89 be a0 04 00
	00		 mov	 DWORD PTR [esi+1184], edi

; 90   : 
; 91   : 	//Season3 add-on (All Classes 7th Floor)
; 92   : 	this->m_BonusScoreTable[CLASS_WIZARD][DEVIL_SQUARE_GROUND_7] = 170;

  000e0	89 96 34 04 00
	00		 mov	 DWORD PTR [esi+1076], edx

; 93   : 	this->m_BonusScoreTable[CLASS_KNIGHT][DEVIL_SQUARE_GROUND_7] = 400;

  000e6	89 8e 50 04 00
	00		 mov	 DWORD PTR [esi+1104], ecx

; 94   : 	this->m_BonusScoreTable[CLASS_ELF][DEVIL_SQUARE_GROUND_7] = 200;

  000ec	89 86 6c 04 00
	00		 mov	 DWORD PTR [esi+1132], eax

; 95   : 	this->m_BonusScoreTable[CLASS_MAGUMSA][DEVIL_SQUARE_GROUND_7] = 0;

  000f2	89 be 88 04 00
	00		 mov	 DWORD PTR [esi+1160], edi

; 96   : 	this->m_BonusScoreTable[CLASS_DARKLORD][DEVIL_SQUARE_GROUND_7] = 0;

  000f8	89 be a4 04 00
	00		 mov	 DWORD PTR [esi+1188], edi

; 97   : }

  000fe	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  00104	3b c7		 cmp	 eax, edi
  00106	74 09		 je	 SHORT $LN11@CDevilSqua
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010e	83 c4 04	 add	 esp, 4
$LN11@CDevilSqua:
  00111	89 be d4 02 00
	00		 mov	 DWORD PTR [esi+724], edi
  00117	89 be d8 02 00
	00		 mov	 DWORD PTR [esi+728], edi
  0011d	89 be dc 02 00
	00		 mov	 DWORD PTR [esi+732], edi
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	c3		 ret	 0
??1CDevilSquareGround@@UAE@XZ ENDP			; CDevilSquareGround::~CDevilSquareGround
_TEXT	ENDS
PUBLIC	?ClearScore@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::ClearScore
; Function compile flags: /Ogtp
;	COMDAT ?ClearScore@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?ClearScore@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::ClearScore, COMDAT
; _this$ = ecx

; 256  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 257  : 	this->m_DevilSquareRankList.clear();

  00003	8b 8b d8 02 00
	00		 mov	 ecx, DWORD PTR [ebx+728]
  00009	56		 push	 esi
  0000a	8b b3 d4 02 00
	00		 mov	 esi, DWORD PTR [ebx+724]
  00010	3b f1		 cmp	 esi, ecx
  00012	74 23		 je	 SHORT $LN21@ClearScore
  00014	8b c1		 mov	 eax, ecx
  00016	2b c1		 sub	 eax, ecx
  00018	57		 push	 edi
  00019	c1 f8 02	 sar	 eax, 2
  0001c	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00023	57		 push	 edi
  00024	51		 push	 ecx
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 _memmove
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	03 fe		 add	 edi, esi
  00030	89 bb d8 02 00
	00		 mov	 DWORD PTR [ebx+728], edi
  00036	5f		 pop	 edi
$LN21@ClearScore:

; 258  : }

  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	c3		 ret	 0
?ClearScore@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::ClearScore
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@AAPAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@AAPAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@PAUOBJECTSTRUCT@@@std@@PAUOBJECTSTRUCT@@ABQAU3@@std@@YAXAAV?$allocator@PAUOBJECTSTRUCT@@@0@PAPAUOBJECTSTRUCT@@ABQAU2@@Z ; std::_Cons_val<std::allocator<OBJECTSTRUCT *>,OBJECTSTRUCT *,OBJECTSTRUCT * const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back
_TEXT	ENDS
PUBLIC	??$sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2713 : 	}

  00003	5d		 pop	 ebp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00004	e9 00 00 00 00	 jmp	 ??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
??$sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCDevilSquareGround@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDevilSquareGround@@UAEPAXI@Z PROC			; CDevilSquareGround::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCDevilSquareGround@@UAEPAXI@Z ENDP			; CDevilSquareGround::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::InsertObj
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\devilsquareground.cpp
;	COMDAT ?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquareGround::InsertObj, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 267  : 	if ( lpObj->Authority != 2 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	83 be 0c 02 00
	00 02		 cmp	 DWORD PTR [esi+524], 2
  0000e	74 5b		 je	 SHORT $LN3@InsertObj

; 268  : 	{
; 269  : 		if ( lpObj->Class >= 0 && lpObj->Class < MAX_TYPE_PLAYER-1)

  00010	57		 push	 edi
  00011	0f b7 be b8 00
	00 00		 movzx	 edi, WORD PTR [esi+184]
  00018	83 ff 06	 cmp	 edi, 6
  0001b	73 3e		 jae	 SHORT $LN1@InsertObj

; 270  : 		{
; 271  : 			if ( DS_LEVEL_RANGE(lpObj->m_bDevilSquareIndex) != FALSE )

  0001d	8a 96 9c 0e 00
	00		 mov	 dl, BYTE PTR [esi+3740]
  00023	b8 06 00 00 00	 mov	 eax, 6
  00028	3a c2		 cmp	 al, dl
  0002a	1b c0		 sbb	 eax, eax
  0002c	40		 inc	 eax
  0002d	74 2c		 je	 SHORT $LN1@InsertObj

; 272  : 			{
; 273  : 				lpObj->m_nEventScore +=  this->m_BonusScoreTable[lpObj->Class][lpObj->m_bDevilSquareIndex] / 100;

  0002f	8b c7		 mov	 eax, edi
  00031	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR [eax*8]
  00038	2b f8		 sub	 edi, eax
  0003a	0f b6 d2	 movzx	 edx, dl
  0003d	03 fa		 add	 edi, edx
  0003f	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00044	f7 ac b9 1c 04
	00 00		 imul	 DWORD PTR [ecx+edi*4+1052]
  0004b	c1 fa 05	 sar	 edx, 5
  0004e	8b c2		 mov	 eax, edx
  00050	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00053	03 c2		 add	 eax, edx
  00055	01 86 90 0e 00
	00		 add	 DWORD PTR [esi+3728], eax
$LN1@InsertObj:

; 274  : 			}
; 275  : 		}
; 276  : 
; 277  : 		this->m_DevilSquareRankList.push_back(lpObj);

  0005b	8d 55 08	 lea	 edx, DWORD PTR _lpObj$[ebp]
  0005e	52		 push	 edx
  0005f	81 c1 d4 02 00
	00		 add	 ecx, 724		; 000002d4H
  00065	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back
  0006a	5f		 pop	 edi
$LN3@InsertObj:
  0006b	5e		 pop	 esi

; 278  : 	}
; 279  : }

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquareGround::InsertObj
_TEXT	ENDS
PUBLIC	??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__Mid$213158 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z PROC ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b c7		 mov	 eax, edi
  00011	2b c3		 sub	 eax, ebx
  00013	c1 f8 02	 sar	 eax, 2
  00016	83 f8 20	 cmp	 eax, 32			; 00000020H
  00019	7e 77		 jle	 SHORT $LN34@Sort
  0001b	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
  0001e	8b ff		 npad	 2
$LL7@Sort:
  00020	85 f6		 test	 esi, esi
  00022	0f 8e 86 00 00
	00		 jle	 $LN6@Sort

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	8d 4d f8	 lea	 ecx, DWORD PTR __Mid$213158[ebp]
  00030	53		 push	 ebx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00037	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$213158[ebp]
  0003a	8b c6		 mov	 eax, esi
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b f0		 mov	 esi, eax
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	03 f0		 add	 esi, eax
  0004a	8b 45 fc	 mov	 eax, DWORD PTR __Mid$213158[ebp+4]
  0004d	8b d7		 mov	 edx, edi
  0004f	2b d0		 sub	 edx, eax
  00051	2b cb		 sub	 ecx, ebx
  00053	83 e2 fc	 and	 edx, -4			; fffffffcH
  00056	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ca		 cmp	 ecx, edx
  0005e	7d 14		 jge	 SHORT $LN5@Sort

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00060	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00063	8b 45 f8	 mov	 eax, DWORD PTR __Mid$213158[ebp]
  00066	52		 push	 edx
  00067	56		 push	 esi
  00068	50		 push	 eax
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 3782 : 			_First = _Mid.second;

  0006f	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$213158[ebp+4]

; 3783 : 			}
; 3784 : 		else

  00072	eb 0f		 jmp	 SHORT $LN35@Sort
$LN5@Sort:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  00074	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00077	51		 push	 ecx
  00078	56		 push	 esi
  00079	57		 push	 edi
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 3787 : 			_Last = _Mid.first;

  00080	8b 7d f8	 mov	 edi, DWORD PTR __Mid$213158[ebp]
$LN35@Sort:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00083	8b c7		 mov	 eax, edi
  00085	2b c3		 sub	 eax, ebx
  00087	c1 f8 02	 sar	 eax, 2

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00090	7f 8e		 jg	 SHORT $LL7@Sort
$LN34@Sort:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  00092	83 f8 01	 cmp	 eax, 1
  00095	7e 10		 jle	 SHORT $LN27@Sort

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  00097	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  0009a	6a 00		 push	 0
  0009c	52		 push	 edx
  0009d	57		 push	 edi
  0009e	53		 push	 ebx
  0009f	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
  000a4	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@Sort:
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx

; 3798 : 	}

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN6@Sort:

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  000ae	83 f8 20	 cmp	 eax, 32			; 00000020H
  000b1	7e df		 jle	 SHORT $LN34@Sort

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  000b3	8b d7		 mov	 edx, edi
  000b5	2b d3		 sub	 edx, ebx
  000b7	83 e2 fc	 and	 edx, -4			; fffffffcH
  000ba	83 fa 04	 cmp	 edx, 4
  000bd	7e 12		 jle	 SHORT $LN33@Sort
  000bf	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  000c2	6a 00		 push	 0
  000c4	6a 00		 push	 0
  000c6	50		 push	 eax
  000c7	57		 push	 edi
  000c8	53		 push	 ebx
  000c9	e8 00 00 00 00	 call	 ??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
$LN33@Sort:

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  000d1	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  000d4	51		 push	 ecx
  000d5	57		 push	 edi
  000d6	53		 push	 ebx
  000d7	e8 00 00 00 00	 call	 ??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx

; 3798 : 	}

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ENDP ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@P6A_NABQAUOBJECTSTRUCT@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@0P6A_NABQAUOBJECTSTRUCT@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
; Function compile flags: /Ogtp
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@P6A_NABQAUOBJECTSTRUCT@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@0P6A_NABQAUOBJECTSTRUCT@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@P6A_NABQAUOBJECTSTRUCT@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@0P6A_NABQAUOBJECTSTRUCT@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000d	8b d0		 mov	 edx, eax
  0000f	2b d1		 sub	 edx, ecx
  00011	c1 fa 02	 sar	 edx, 2
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0001c	83 c4 10	 add	 esp, 16			; 00000010H

; 3807 : 	}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@P6A_NABQAUOBJECTSTRUCT@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@0@0P6A_NABQAUOBJECTSTRUCT@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
PUBLIC	?SortScore@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::SortScore
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\devilsquareground.cpp
;	COMDAT ?SortScore@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?SortScore@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::SortScore, COMDAT
; _this$ = ecx

; 262  : 	std::sort( this->m_DevilSquareRankList.begin(), this->m_DevilSquareRankList.end(), DevilSquareScoreSort);

  00000	8b 81 d8 02 00
	00		 mov	 eax, DWORD PTR [ecx+728]
  00006	8b 89 d4 02 00
	00		 mov	 ecx, DWORD PTR [ecx+724]
  0000c	8b d0		 mov	 edx, eax
  0000e	2b d1		 sub	 edx, ecx
  00010	68 00 00 00 00	 push	 OFFSET ?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z ; DevilSquareScoreSort
  00015	c1 fa 02	 sar	 edx, 2
  00018	52		 push	 edx
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 263  : }

  00023	c3		 ret	 0
?SortScore@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::SortScore
_TEXT	ENDS
END
