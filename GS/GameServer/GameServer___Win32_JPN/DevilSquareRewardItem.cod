; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\DevilSquareRewardItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gDevilSquareRewardItem@@3VcDevilSquareRewardItem@@A ; gDevilSquareRewardItem
_BSS	SEGMENT
?gDevilSquareRewardItem@@3VcDevilSquareRewardItem@@A DB 0c828H DUP (?) ; gDevilSquareRewardItem
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0BA@CDGAONCL@RewardItemCount?$AA@		; `string'
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CJ@FEBAJPHJ@?4?4?2Data?2ZtData?2DevilSquareReward@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cDevilSquareRewardItem@@QAEXXZ		; cDevilSquareRewardItem::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
; File e:\work\tranet_version\gs\gameserver\devilsquarerewarditem.cpp
CONST	SEGMENT
??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB ' '
	DB	'%d %d %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CDGAONCL@RewardItemCount?$AA@
CONST	SEGMENT
??_C@_0BA@CDGAONCL@RewardItemCount?$AA@ DB 'RewardItemCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FEBAJPHJ@?4?4?2Data?2ZtData?2DevilSquareReward@
CONST	SEGMENT
??_C@_0CJ@FEBAJPHJ@?4?4?2Data?2ZtData?2DevilSquareReward@ DB '..\Data\ZtD'
	DB	'ata\DevilSquareRewardItem.ini', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@cDevilSquareRewardItem@@QAEXXZ
_TEXT	SEGMENT
_file$ = -300						; size = 4
_Flag$ = -296						; size = 4
_n$202967 = -292					; size = 32
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Load@cDevilSquareRewardItem@@QAEXXZ PROC		; cDevilSquareRewardItem::Load, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 22   : 
; 23   : 	this->Enable = GetPrivateProfileInt("ZtTeam","Enable",0,DS_REWARD_ITEM_DIR);

  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@FEBAJPHJ@?4?4?2Data?2ZtData?2DevilSquareReward@
  00021	33 f6		 xor	 esi, esi
  00023	56		 push	 esi
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  0002e	8b d9		 mov	 ebx, ecx
  00030	ff d7		 call	 edi

; 24   : 	this->m_iRewardItemCount = GetPrivateProfileInt("ZtTeam","RewardItemCount",0,DS_REWARD_ITEM_DIR);

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@FEBAJPHJ@?4?4?2Data?2ZtData?2DevilSquareReward@
  00037	56		 push	 esi
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDGAONCL@RewardItemCount?$AA@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00042	89 03		 mov	 DWORD PTR [ebx], eax
  00044	ff d7		 call	 edi
  00046	89 83 24 c8 00
	00		 mov	 DWORD PTR [ebx+51236], eax

; 26   : 	{
; 27   : 		for(int i=0;i<MAX_DS_REWARD_ITEM;i++)

  0004c	8d 53 28	 lea	 edx, DWORD PTR [ebx+40]
  0004f	8d 7e 07	 lea	 edi, DWORD PTR [esi+7]
$LL18@Load:
  00052	8b c2		 mov	 eax, edx
  00054	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL15@Load:

; 28   : 		{
; 29   : 			this->Reward[i][j].Type	= 0;

  00060	89 70 fc	 mov	 DWORD PTR [eax-4], esi

; 30   : 			this->Reward[i][j].Index	= 0;

  00063	89 30		 mov	 DWORD PTR [eax], esi

; 31   : 			this->Reward[i][j].Level	= 0;

  00065	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 32   : 			this->Reward[i][j].Skill	= 0;

  00068	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 33   : 			this->Reward[i][j].Luck	= 0;

  0006b	89 70 0c	 mov	 DWORD PTR [eax+12], esi

; 34   : 			this->Reward[i][j].Opt		= 0;

  0006e	89 70 10	 mov	 DWORD PTR [eax+16], esi

; 35   : 			this->Reward[i][j].Exl		= 0;

  00071	89 70 14	 mov	 DWORD PTR [eax+20], esi

; 36   : 			this->Reward[i][j].Anc		= 0;

  00074	89 70 18	 mov	 DWORD PTR [eax+24], esi
  00077	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0007c	49		 dec	 ecx
  0007d	75 e1		 jne	 SHORT $LL15@Load

; 25   : 	for (int j = 1; j < 8; j++)

  0007f	83 c2 20	 add	 edx, 32			; 00000020H
  00082	4f		 dec	 edi
  00083	75 cd		 jne	 SHORT $LL18@Load

; 37   : 		}
; 38   : 	}
; 39   : 
; 40   : 	//CheckFile(DS_REWARD_ITEM_DIR);
; 41   : 
; 42   : 	FILE *file = fopen(DS_REWARD_ITEM_DIR,"r");

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@FEBAJPHJ@?4?4?2Data?2ZtData?2DevilSquareReward@
  0008f	e8 00 00 00 00	 call	 _fopen
  00094	8b f8		 mov	 edi, eax
  00096	83 c4 08	 add	 esp, 8
  00099	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _file$[ebp], edi

; 43   : 
; 44   : 	if(file == NULL)

  0009f	3b fe		 cmp	 edi, esi
  000a1	75 13		 jne	 SHORT $LN12@Load

; 45   : 	{
; 46   : 		this->Enable = 0;

  000a3	5f		 pop	 edi
  000a4	89 33		 mov	 DWORD PTR [ebx], esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 90   : }

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
$LN12@Load:

; 47   : 		return;
; 48   : 	}
; 49   : 
; 50   : 	char Buff[256];
; 51   : 	int Flag = 0;
; 52   : 	for (int j = 1; j < 8; j++)
; 53   : 	{
; 54   : 		this->Count[j] = 0;
; 55   : 	}
; 56   : 	
; 57   : 	while(!feof(file))

  000b6	57		 push	 edi
  000b7	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], esi
  000bd	89 b3 08 c8 00
	00		 mov	 DWORD PTR [ebx+51208], esi
  000c3	89 b3 0c c8 00
	00		 mov	 DWORD PTR [ebx+51212], esi
  000c9	89 b3 10 c8 00
	00		 mov	 DWORD PTR [ebx+51216], esi
  000cf	89 b3 14 c8 00
	00		 mov	 DWORD PTR [ebx+51220], esi
  000d5	89 b3 18 c8 00
	00		 mov	 DWORD PTR [ebx+51224], esi
  000db	89 b3 1c c8 00
	00		 mov	 DWORD PTR [ebx+51228], esi
  000e1	89 b3 20 c8 00
	00		 mov	 DWORD PTR [ebx+51232], esi
  000e7	e8 00 00 00 00	 call	 _feof
  000ec	83 c4 04	 add	 esp, 4
  000ef	85 c0		 test	 eax, eax
  000f1	0f 85 5f 01 00
	00		 jne	 $LN7@Load
  000f7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL8@Load:

; 58   : 	{
; 59   : 		fgets(Buff,256,file);	

  00100	57		 push	 edi
  00101	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00107	68 00 01 00 00	 push	 256			; 00000100H
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _fgets

; 60   : 		if(Zt_IsBadFileLine(Buff, Flag))	

  00112	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  00118	51		 push	 ecx
  00119	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  00125	83 c4 14	 add	 esp, 20			; 00000014H
  00128	84 c0		 test	 al, al
  0012a	0f 85 15 01 00
	00		 jne	 $LN27@Load

; 61   : 			continue;
; 62   : 		for (int j = 1; j < 8; j++)

  00130	bf 01 00 00 00	 mov	 edi, 1
  00135	8d b3 08 c8 00
	00		 lea	 esi, DWORD PTR [ebx+51208]
  0013b	eb 03 8d 49 00	 npad	 5
$LL5@Load:

; 63   : 		{
; 64   : 			if(Flag == j)

  00140	39 bd d8 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], edi
  00146	0f 85 e6 00 00
	00		 jne	 $LN4@Load

; 65   : 			{
; 66   : 				int n[8];
; 67   : 
; 68   : 				sscanf(Buff," %d %d %d %d %d %d %d %d %d",&n[0],&n[1],&n[2],&n[3],&n[4],&n[5],&n[6],&n[7]);

  0014c	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _n$202967[ebp+28]
  00152	50		 push	 eax
  00153	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202967[ebp+24]
  00159	51		 push	 ecx
  0015a	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _n$202967[ebp+20]
  00160	52		 push	 edx
  00161	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$202967[ebp+16]
  00167	50		 push	 eax
  00168	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202967[ebp+12]
  0016e	51		 push	 ecx
  0016f	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$202967[ebp+8]
  00175	52		 push	 edx
  00176	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$202967[ebp+4]
  0017c	50		 push	 eax
  0017d	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$202967[ebp]
  00183	51		 push	 ecx
  00184	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  0018f	52		 push	 edx
  00190	e8 00 00 00 00	 call	 _sscanf

; 69   : 
; 70   : 				this->Reward[this->Count[j]][j].Type		= n[0];

  00195	8b 06		 mov	 eax, DWORD PTR [esi]
  00197	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp]
  0019d	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  001a0	c1 e1 05	 shl	 ecx, 5
  001a3	89 54 19 04	 mov	 DWORD PTR [ecx+ebx+4], edx

; 71   : 				this->Reward[this->Count[j]][j].Index		= n[1];

  001a7	8b 06		 mov	 eax, DWORD PTR [esi]
  001a9	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp+4]
  001af	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  001b2	c1 e1 05	 shl	 ecx, 5
  001b5	89 54 19 08	 mov	 DWORD PTR [ecx+ebx+8], edx

; 72   : 				this->Reward[this->Count[j]][j].Level		= n[2];

  001b9	8b 06		 mov	 eax, DWORD PTR [esi]
  001bb	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp+8]
  001c1	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  001c4	c1 e1 05	 shl	 ecx, 5
  001c7	89 54 19 0c	 mov	 DWORD PTR [ecx+ebx+12], edx

; 73   : 				this->Reward[this->Count[j]][j].Skill		= n[3];

  001cb	8b 06		 mov	 eax, DWORD PTR [esi]
  001cd	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp+12]
  001d3	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  001d6	c1 e1 05	 shl	 ecx, 5
  001d9	89 54 19 10	 mov	 DWORD PTR [ecx+ebx+16], edx

; 74   : 				this->Reward[this->Count[j]][j].Luck		= n[4];

  001dd	8b 06		 mov	 eax, DWORD PTR [esi]
  001df	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp+16]
  001e5	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  001e8	c1 e1 05	 shl	 ecx, 5
  001eb	89 54 19 14	 mov	 DWORD PTR [ecx+ebx+20], edx

; 75   : 				this->Reward[this->Count[j]][j].Opt		= n[5];

  001ef	8b 06		 mov	 eax, DWORD PTR [esi]
  001f1	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp+20]
  001f7	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  001fa	c1 e1 05	 shl	 ecx, 5
  001fd	89 54 19 18	 mov	 DWORD PTR [ecx+ebx+24], edx

; 76   : 				this->Reward[this->Count[j]][j].Exl		= n[6];

  00201	8b 06		 mov	 eax, DWORD PTR [esi]
  00203	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp+24]
  00209	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  0020c	c1 e1 05	 shl	 ecx, 5
  0020f	89 54 19 1c	 mov	 DWORD PTR [ecx+ebx+28], edx

; 77   : 				this->Reward[this->Count[j]][j].Anc		= n[7];

  00213	8b 06		 mov	 eax, DWORD PTR [esi]
  00215	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _n$202967[ebp+28]
  0021b	8d 4c c7 01	 lea	 ecx, DWORD PTR [edi+eax*8+1]
  0021f	c1 e1 05	 shl	 ecx, 5
  00222	89 14 19	 mov	 DWORD PTR [ecx+ebx], edx

; 78   : 
; 79   : 				this->Count[j]++;

  00225	ff 06		 inc	 DWORD PTR [esi]
  00227	83 c4 28	 add	 esp, 40			; 00000028H

; 80   : 
; 81   : 				if (this->Count[j]>=MAX_DS_REWARD_ITEM)

  0022a	81 3e c8 00 00
	00		 cmp	 DWORD PTR [esi], 200	; 000000c8H
  00230	7d 0d		 jge	 SHORT $LN40@Load
$LN4@Load:

; 61   : 			continue;
; 62   : 		for (int j = 1; j < 8; j++)

  00232	47		 inc	 edi
  00233	83 c6 04	 add	 esi, 4
  00236	83 ff 08	 cmp	 edi, 8
  00239	0f 8c 01 ff ff
	ff		 jl	 $LL5@Load
$LN40@Load:
  0023f	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR _file$[ebp]
$LN27@Load:

; 47   : 		return;
; 48   : 	}
; 49   : 
; 50   : 	char Buff[256];
; 51   : 	int Flag = 0;
; 52   : 	for (int j = 1; j < 8; j++)
; 53   : 	{
; 54   : 		this->Count[j] = 0;
; 55   : 	}
; 56   : 	
; 57   : 	while(!feof(file))

  00245	57		 push	 edi
  00246	e8 00 00 00 00	 call	 _feof
  0024b	83 c4 04	 add	 esp, 4
  0024e	85 c0		 test	 eax, eax
  00250	0f 84 aa fe ff
	ff		 je	 $LL8@Load
$LN7@Load:

; 82   : 				{
; 83   : 					break;
; 84   : 				}
; 85   : 			}
; 86   : 		
; 87   : 		}
; 88   : 	}
; 89   : 	fclose(file);

  00256	57		 push	 edi
  00257	e8 00 00 00 00	 call	 _fclose

; 90   : }

  0025c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025f	83 c4 04	 add	 esp, 4
  00262	5f		 pop	 edi
  00263	5e		 pop	 esi
  00264	33 cd		 xor	 ecx, ebp
  00266	5b		 pop	 ebx
  00267	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
?Load@cDevilSquareRewardItem@@QAEXXZ ENDP		; cDevilSquareRewardItem::Load
_TEXT	ENDS
PUBLIC	?Main@cDevilSquareRewardItem@@QAEXH@Z		; cDevilSquareRewardItem::Main
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	_rand:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?Main@cDevilSquareRewardItem@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?Main@cDevilSquareRewardItem@@QAEXH@Z PROC		; cDevilSquareRewardItem::Main, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 94   : 	
; 95   : 	if(!this->Enable) return;

  00006	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00009	0f 84 a4 00 00
	00		 je	 $LN1@Main

; 96   : 	LPOBJ lpObj = &gObj[aIndex];

  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00013	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00019	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001f	57		 push	 edi

; 97   : 	
; 98   : 	for (int j = 1; j < 8; j++)

  00020	0f b6 86 9c 0e
	00 00		 movzx	 eax, BYTE PTR [esi+3740]
  00027	bf 01 00 00 00	 mov	 edi, 1
  0002c	8d 64 24 00	 npad	 4
$LL10@Main:

; 99   : 	{
; 100  : 		if (lpObj->m_bDevilSquareIndex == j)

  00030	3b c7		 cmp	 eax, edi
  00032	74 0d		 je	 SHORT $LN15@Main

; 97   : 	
; 98   : 	for (int j = 1; j < 8; j++)

  00034	47		 inc	 edi
  00035	83 ff 08	 cmp	 edi, 8
  00038	7c f6		 jl	 SHORT $LL10@Main
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx

; 120  : 			}
; 121  : 			return;	
; 122  : 		}
; 123  : 	}
; 124  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN15@Main:

; 101  : 		{
; 102  : 			//srand(time(NULL));
; 103  : 			if (this->Count[j] == 0)

  00041	83 bc bb 04 c8
	00 00 00	 cmp	 DWORD PTR [ebx+edi*4+51204], 0
  00049	74 66		 je	 SHORT $LN17@Main

; 104  : 			{
; 105  : 				return;
; 106  : 			}
; 107  : 
; 108  : 			if(THINNAKORN_MAC)
; 109  : 			{
; 110  : 				for(int i = 0; i < this->m_iRewardItemCount; i++)
; 111  : 				{
; 112  : 					int itemId = rand()%this->Count[j];
; 113  : 					ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,ITEMGET(this->Reward[itemId][j].Type,this->Reward[itemId][j].Index),this->Reward[itemId][j].Level,0,this->Reward[itemId][j].Skill,this->Reward[itemId][j].Luck,this->Reward[itemId][j].Opt,aIndex,this->Reward[itemId][j].Exl,this->Reward[itemId][j].Anc);
; 114  : 				}
; 115  : 			}
; 116  : 			else
; 117  : 			{
; 118  : 				int itemId = rand()%this->Count[j];

  0004b	e8 00 00 00 00	 call	 _rand
  00050	99		 cdq
  00051	f7 bc bb 04 c8
	00 00		 idiv	 DWORD PTR [ebx+edi*4+51204]

; 119  : 				ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,ITEMGET(this->Reward[itemId][j].Type,this->Reward[itemId][j].Index),this->Reward[itemId][j].Level,0,this->Reward[itemId][j].Skill,this->Reward[itemId][j].Luck,this->Reward[itemId][j].Opt,aIndex,this->Reward[itemId][j].Exl,this->Reward[itemId][j].Anc);

  00058	8d 04 d7	 lea	 eax, DWORD PTR [edi+edx*8]
  0005b	c1 e0 05	 shl	 eax, 5
  0005e	0f b6 4c 18 20	 movzx	 ecx, BYTE PTR [eax+ebx+32]
  00063	0f b6 54 18 1c	 movzx	 edx, BYTE PTR [eax+ebx+28]
  00068	03 c3		 add	 eax, ebx
  0006a	51		 push	 ecx
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0006e	52		 push	 edx
  0006f	0f b6 50 18	 movzx	 edx, BYTE PTR [eax+24]
  00073	51		 push	 ecx
  00074	52		 push	 edx
  00075	0f b6 50 14	 movzx	 edx, BYTE PTR [eax+20]
  00079	52		 push	 edx
  0007a	0f b6 50 10	 movzx	 edx, BYTE PTR [eax+16]
  0007e	52		 push	 edx
  0007f	0f b6 50 0c	 movzx	 edx, BYTE PTR [eax+12]
  00083	6a 00		 push	 0
  00085	52		 push	 edx
  00086	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00089	c1 e2 09	 shl	 edx, 9
  0008c	03 50 08	 add	 edx, DWORD PTR [eax+8]
  0008f	0f b6 86 46 01
	00 00		 movzx	 eax, BYTE PTR [esi+326]
  00096	52		 push	 edx
  00097	0f b6 96 44 01
	00 00		 movzx	 edx, BYTE PTR [esi+324]
  0009e	50		 push	 eax
  0009f	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  000a6	52		 push	 edx
  000a7	50		 push	 eax
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  000ae	83 c4 34	 add	 esp, 52			; 00000034H
$LN17@Main:
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
$LN1@Main:
  000b3	5b		 pop	 ebx

; 120  : 			}
; 121  : 			return;	
; 122  : 		}
; 123  : 	}
; 124  : }

  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
?Main@cDevilSquareRewardItem@@QAEXH@Z ENDP		; cDevilSquareRewardItem::Main
_TEXT	ENDS
END
