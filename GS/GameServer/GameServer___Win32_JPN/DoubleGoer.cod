; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\DoubleGoer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?DGEnabled@@3HA					; DGEnabled
PUBLIC	?DGCoolDown@@3HA				; DGCoolDown
PUBLIC	?DGUseAutoStat@@3HA				; DGUseAutoStat
PUBLIC	?DGEnterMoney@@3HA				; DGEnterMoney
PUBLIC	?DGSilverChestOpenRate@@3HA			; DGSilverChestOpenRate
PUBLIC	?TickCount@@3HA					; TickCount
_BSS	SEGMENT
?DGEnabled@@3HA DD 01H DUP (?)				; DGEnabled
?DGCoolDown@@3HA DD 01H DUP (?)				; DGCoolDown
?DGUseAutoStat@@3HA DD 01H DUP (?)			; DGUseAutoStat
?DGEnterMoney@@3HA DD 01H DUP (?)			; DGEnterMoney
?TickCount@@3HA DD 01H DUP (?)				; TickCount
_BSS	ENDS
_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	070H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
	DD	010eH
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
?DGSilverChestOpenRate@@3HA DD 01388H			; DGSilverChestOpenRate
_DATA	ENDS
CONST	SEGMENT
_g_DGEntrance DD 0c3H
	DD	022H
	DD	0c7H
	DD	028H
	DD	086H
	DD	04eH
	DD	08bH
	DD	054H
	DD	06aH
	DD	041H
	DD	06fH
	DD	047H
	DD	05dH
	DD	017H
	DD	061H
	DD	019H
_g_DGPortal DB	0c5H
	DB	01eH
	DB	085H
	DB	044H
	DB	06eH
	DB	03cH
	DB	05fH
	DB	0fH
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Clear@DOPPELGANGEREVENT@@QAEXXZ		; DOPPELGANGEREVENT::Clear
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\doublegoer.h
;	COMDAT ?Clear@DOPPELGANGEREVENT@@QAEXXZ
_TEXT	SEGMENT
?Clear@DOPPELGANGEREVENT@@QAEXXZ PROC			; DOPPELGANGEREVENT::Clear, COMDAT
; _this$ = ecx

; 41   : 	{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 42   : 		this->PlayerCount	= 0;

  00005	33 db		 xor	 ebx, ebx
  00007	66 89 1e	 mov	 WORD PTR [esi], bx

; 43   : 		this->BossCount		= 0;
; 44   : 		this->MonsterCount	= 0;

  0000a	88 5e 02	 mov	 BYTE PTR [esi+2], bl

; 45   : 		this->CreateMonsterDelay = 0;
; 46   : 		this->MoveProcDelay = 0;
; 47   : 		this->GoldBoxIndex  = -1;

  0000d	83 cf ff	 or	 edi, -1
  00010	8b c7		 mov	 eax, edi
  00012	66 89 46 08	 mov	 WORD PTR [esi+8], ax

; 48   : 		this->PhazesPassed	= 0;

  00016	88 9e df 01 00
	00		 mov	 BYTE PTR [esi+479], bl

; 49   : 		this->eDuration = 0;

  0001c	89 9e c4 01 00
	00		 mov	 DWORD PTR [esi+452], ebx
  00022	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 50   : 		this->IceWalkerPhazeTime = 0;
; 51   : 		this->btPhaze = 0;
; 52   : 		this->btPlayState = 0;
; 53   : 		this->TickCount = 0;

  00025	89 9e d4 01 00
	00		 mov	 DWORD PTR [esi+468], ebx
  0002b	33 c9		 xor	 ecx, ecx
  0002d	66 89 8e da 01
	00 00		 mov	 WORD PTR [esi+474], cx

; 54   : 		// ----
; 55   : 		memset(PlayerIndex, -1, sizeof(PlayerIndex));

  00034	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00037	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 56   : 		memset(MonsterIndex, -1, sizeof(MonsterIndex));	

  0003a	68 9a 01 00 00	 push	 410			; 0000019aH
  0003f	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00042	8d 56 24	 lea	 edx, DWORD PTR [esi+36]
  00045	57		 push	 edi
  00046	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00049	52		 push	 edx
  0004a	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0004d	e8 00 00 00 00	 call	 _memset

; 57   : 		memset(SilverBoxIndex,-1,sizeof(SilverBoxIndex));

  00052	8b c7		 mov	 eax, edi
  00054	89 86 be 01 00
	00		 mov	 DWORD PTR [esi+446], eax
  0005a	66 89 86 c2 01
	00 00		 mov	 WORD PTR [esi+450], ax
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 		// ----
; 59   : 		IceWalkerLive		= 0;
; 60   : 		this->MapNumber = -1;

  00064	89 be cc 01 00
	00		 mov	 DWORD PTR [esi+460], edi

; 61   : 		this->PartyNumber = -1;

  0006a	89 be d0 01 00
	00		 mov	 DWORD PTR [esi+464], edi

; 62   : 		this->HalfTimeInfoSent = false;
; 63   : 		this->IceWalkerIndex = -1;
; 64   : 		this->AngryButcherIndex = -1;

  00070	8b cf		 mov	 ecx, edi

; 65   : 		this->ButcherIndex = -1;

  00072	66 89 7e 0a	 mov	 WORD PTR [esi+10], di
  00076	5f		 pop	 edi
  00077	88 9e de 01 00
	00		 mov	 BYTE PTR [esi+478], bl
  0007d	88 9e d8 01 00
	00		 mov	 BYTE PTR [esi+472], bl
  00083	66 89 46 0e	 mov	 WORD PTR [esi+14], ax
  00087	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 66   : 
; 67   : 
; 68   : 	};

  0008d	c3		 ret	 0
?Clear@DOPPELGANGEREVENT@@QAEXXZ ENDP			; DOPPELGANGEREVENT::Clear
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0BN@JEHNLCPA@?$FLDoppelGanger?$FN?5SetState?5OPEN?$AA@ ; `string'
PUBLIC	?SetState_OPEN@CDoppelGanger@@QAEXXZ		; CDoppelGanger::SetState_OPEN
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0BN@JEHNLCPA@?$FLDoppelGanger?$FN?5SetState?5OPEN?$AA@
; File e:\work\tranet_version\gs\gameserver\doublegoer.h
CONST	SEGMENT
??_C@_0BN@JEHNLCPA@?$FLDoppelGanger?$FN?5SetState?5OPEN?$AA@ DB '[DoppelG'
	DB	'anger] SetState OPEN', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\doublegoer.cpp
CONST	ENDS
;	COMDAT ?SetState_OPEN@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?SetState_OPEN@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SetState_OPEN, COMDAT
; _this$ = ecx

; 88   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 89   : 	for(int i=OBJ_STARTUSERINDZT;i<OBJMAX;++i)

  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	bb b0 36 00 00	 mov	 ebx, 14000		; 000036b0H
  00010	bf 00 a7 40 09	 mov	 edi, 155232000		; 0940a700H
  00015	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL8@SetState_O:

; 90   : 	{
; 91   : 		gObj[i].m_btDoubleGoerRoom = -1;

  00020	c6 84 0f b9 21
	00 00 ff	 mov	 BYTE PTR [edi+ecx+8633], 255 ; 000000ffH

; 92   : 		if(DG_MAP_RANGE(gObj[i].MapNumber) && gObj[i].Connected == PLAYER_PLAYING)

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002e	0f b6 84 0f 49
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+329]
  00036	3c 41		 cmp	 al, 65			; 00000041H
  00038	72 24		 jb	 SHORT $LN7@SetState_O
  0003a	b2 44		 mov	 dl, 68			; 00000044H
  0003c	3a d0		 cmp	 dl, al
  0003e	1b c0		 sbb	 eax, eax
  00040	40		 inc	 eax
  00041	74 1b		 je	 SHORT $LN7@SetState_O
  00043	83 7c 0f 04 03	 cmp	 DWORD PTR [edi+ecx+4], 3
  00048	75 14		 jne	 SHORT $LN7@SetState_O

; 93   : 		{
; 94   : 			gObjMoveGate(i, 267);

  0004a	68 0b 01 00 00	 push	 267			; 0000010bH
  0004f	53		 push	 ebx
  00050	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005b	83 c4 08	 add	 esp, 8
$LN7@SetState_O:

; 89   : 	for(int i=OBJ_STARTUSERINDZT;i<OBJMAX;++i)

  0005e	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  00064	43		 inc	 ebx
  00065	81 ff 80 d7 e9
	09		 cmp	 edi, 166320000		; 09e9d780H
  0006b	7c b3		 jl	 SHORT $LL8@SetState_O

; 95   : 		}
; 96   : 	}
; 97   : 	for(int i=0;i<OBJ_MAXMONSTER;++i)

  0006d	33 db		 xor	 ebx, ebx
  0006f	33 ff		 xor	 edi, edi
$LL4@SetState_O:

; 98   : 	{
; 99   : 		if(gObjIsConnected(i) && DG_MAP_RANGE(gObj[i].MapNumber))

  00071	53		 push	 ebx
  00072	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00077	83 c4 04	 add	 esp, 4
  0007a	85 c0		 test	 eax, eax
  0007c	74 23		 je	 SHORT $LN3@SetState_O
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00083	0f b6 84 07 49
	01 00 00	 movzx	 eax, BYTE PTR [edi+eax+329]
  0008b	3c 41		 cmp	 al, 65			; 00000041H
  0008d	72 12		 jb	 SHORT $LN3@SetState_O
  0008f	b1 44		 mov	 cl, 68			; 00000044H
  00091	3a c8		 cmp	 cl, al
  00093	1b c0		 sbb	 eax, eax
  00095	40		 inc	 eax
  00096	74 09		 je	 SHORT $LN3@SetState_O

; 100  : 			gObjDel(i);

  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0009e	83 c4 04	 add	 esp, 4
$LN3@SetState_O:

; 95   : 		}
; 96   : 	}
; 97   : 	for(int i=0;i<OBJ_MAXMONSTER;++i)

  000a1	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  000a7	43		 inc	 ebx
  000a8	81 ff 80 76 97
	08		 cmp	 edi, 144144000		; 08977680H
  000ae	7c c1		 jl	 SHORT $LL4@SetState_O

; 101  : 	}
; 102  : 	this->m_DGData.Clear();

  000b0	33 c0		 xor	 eax, eax
  000b2	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  000b8	89 46 48	 mov	 DWORD PTR [esi+72], eax
  000bb	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  000c1	83 cf ff	 or	 edi, -1
  000c4	8b c7		 mov	 eax, edi
  000c6	66 c7 46 44 00
	00		 mov	 WORD PTR [esi+68], 0
  000cc	c6 46 46 00	 mov	 BYTE PTR [esi+70], 0
  000d0	c6 86 23 02 00
	00 00		 mov	 BYTE PTR [esi+547], 0
  000d7	8b d7		 mov	 edx, edi
  000d9	66 89 56 4c	 mov	 WORD PTR [esi+76], dx
  000dd	33 c9		 xor	 ecx, ecx
  000df	66 89 8e 1e 02
	00 00		 mov	 WORD PTR [esi+542], cx
  000e6	89 46 54	 mov	 DWORD PTR [esi+84], eax
  000e9	89 46 58	 mov	 DWORD PTR [esi+88], eax
  000ec	68 9a 01 00 00	 push	 410			; 0000019aH
  000f1	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000f4	8d 56 68	 lea	 edx, DWORD PTR [esi+104]
  000f7	57		 push	 edi
  000f8	89 46 60	 mov	 DWORD PTR [esi+96], eax
  000fb	52		 push	 edx
  000fc	89 46 64	 mov	 DWORD PTR [esi+100], eax
  000ff	e8 00 00 00 00	 call	 _memset
  00104	8b c7		 mov	 eax, edi
  00106	89 86 02 02 00
	00		 mov	 DWORD PTR [esi+514], eax
  0010c	66 89 86 06 02
	00 00		 mov	 WORD PTR [esi+518], ax
  00113	8b cf		 mov	 ecx, edi
  00115	c6 86 22 02 00
	00 00		 mov	 BYTE PTR [esi+546], 0
  0011c	89 be 10 02 00
	00		 mov	 DWORD PTR [esi+528], edi
  00122	89 be 14 02 00
	00		 mov	 DWORD PTR [esi+532], edi
  00128	c6 86 1c 02 00
	00 00		 mov	 BYTE PTR [esi+540], 0
  0012f	66 89 46 52	 mov	 WORD PTR [esi+82], ax
  00133	66 89 4e 50	 mov	 WORD PTR [esi+80], cx
  00137	66 89 7e 4e	 mov	 WORD PTR [esi+78], di

; 103  : 	this->m_DGData.btPlayState = DG_STATE_OPEN;
; 104  : 	LogAddTD("[DoppelGanger] SetState OPEN");

  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JEHNLCPA@?$FLDoppelGanger?$FN?5SetState?5OPEN?$AA@
  00140	c6 46 4a 01	 mov	 BYTE PTR [esi+74], 1
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0014a	83 c4 10	 add	 esp, 16			; 00000010H
  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx

; 105  : }

  00150	c3		 ret	 0
?SetState_OPEN@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SetState_OPEN
_TEXT	ENDS
PUBLIC	??_C@_0CA@FNMGCOPM@?$FLDoppelGanger?$FN?5SetState?5WAITING?$AA@ ; `string'
PUBLIC	?SetState_WAITING@CDoppelGanger@@QAEXXZ		; CDoppelGanger::SetState_WAITING
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0CA@FNMGCOPM@?$FLDoppelGanger?$FN?5SetState?5WAITING?$AA@
CONST	SEGMENT
??_C@_0CA@FNMGCOPM@?$FLDoppelGanger?$FN?5SetState?5WAITING?$AA@ DB '[Dopp'
	DB	'elGanger] SetState WAITING', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_WAITING@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?SetState_WAITING@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SetState_WAITING, COMDAT
; _this$ = ecx

; 108  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 109  : 	this->m_DGData.eDuration = 660000; // 11 minutes (10 for event, 1 for cooldown)

  00003	c7 86 08 02 00
	00 20 12 0a 00	 mov	 DWORD PTR [esi+520], 660000 ; 000a1220H

; 110  : 	this->m_DGData.TickCount = GetTickCount();

  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 111  : 	this->m_DGData.btPlayState = DG_STATE_WAITING;
; 112  : 	LogAddTD("[DoppelGanger] SetState WAITING");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FNMGCOPM@?$FLDoppelGanger?$FN?5SetState?5WAITING?$AA@
  00018	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  0001e	c6 46 4a 02	 mov	 BYTE PTR [esi+74], 2
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00028	83 c4 04	 add	 esp, 4
  0002b	5e		 pop	 esi

; 113  : }

  0002c	c3		 ret	 0
?SetState_WAITING@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SetState_WAITING
_TEXT	ENDS
PUBLIC	??_C@_0DP@GOLHLEJH@?$FLDoppelGanger?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Add?5to?5e@ ; `string'
PUBLIC	?AddPlayer@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::AddPlayer
;	COMDAT ??_C@_0DP@GOLHLEJH@?$FLDoppelGanger?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Add?5to?5e@
CONST	SEGMENT
??_C@_0DP@GOLHLEJH@?$FLDoppelGanger?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Add?5to?5e@ DB '['
	DB	'DoppelGanger] (%s)(%s) Add to event, current player count: %d'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AddPlayer@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?AddPlayer@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z PROC	; CDoppelGanger::AddPlayer, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 371  : 	for(int i=0;i<5;++i)

  00003	33 c0		 xor	 eax, eax
  00005	8d 51 54	 lea	 edx, DWORD PTR [ecx+84]
$LL5@AddPlayer:

; 372  : 	{
; 373  : 		if(this->m_DGData.PlayerIndex[i] == -1)

  00008	83 3a ff	 cmp	 DWORD PTR [edx], -1
  0000b	74 0f		 je	 SHORT $LN9@AddPlayer

; 371  : 	for(int i=0;i<5;++i)

  0000d	40		 inc	 eax
  0000e	83 c2 04	 add	 edx, 4
  00011	83 f8 05	 cmp	 eax, 5
  00014	7c f2		 jl	 SHORT $LL5@AddPlayer

; 384  : 		}
; 385  : 	}
; 386  : 	return false;

  00016	32 c0		 xor	 al, al

; 387  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN9@AddPlayer:

; 374  : 		{
; 375  : 			this->m_DGData.PlayerIndex[i] = lpObj->m_Index;

  0001c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0001f	56		 push	 esi
  00020	8b 32		 mov	 esi, DWORD PTR [edx]
  00022	89 74 81 54	 mov	 DWORD PTR [ecx+eax*4+84], esi

; 376  : 			lpObj->m_btDoubleGoerRoom = 1;

  00026	c6 82 b9 21 00
	00 01		 mov	 BYTE PTR [edx+8633], 1
  0002d	5e		 pop	 esi

; 377  : 			if(i == 0) // first player, set party number, that other teammates can enter to event

  0002e	85 c0		 test	 eax, eax
  00030	75 0c		 jne	 SHORT $LN1@AddPlayer

; 378  : 			{
; 379  : 				this->m_DGData.PartyNumber = lpObj->PartyNumber;

  00032	8b 82 2c 04 00
	00		 mov	 eax, DWORD PTR [edx+1068]
  00038	89 81 14 02 00
	00		 mov	 DWORD PTR [ecx+532], eax
$LN1@AddPlayer:

; 380  : 			}
; 381  : 			++this->m_DGData.PlayerCount;

  0003e	fe 41 44	 inc	 BYTE PTR [ecx+68]

; 382  : 			LogAddTD("[DoppelGanger] (%s)(%s) Add to event, current player count: %d", lpObj->AccountID, lpObj->Name, this->m_DGData.PlayerCount);

  00041	0f b6 49 44	 movzx	 ecx, BYTE PTR [ecx+68]
  00045	51		 push	 ecx
  00046	8d 42 77	 lea	 eax, DWORD PTR [edx+119]
  00049	50		 push	 eax
  0004a	83 c2 6c	 add	 edx, 108		; 0000006cH
  0004d	52		 push	 edx
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@GOLHLEJH@?$FLDoppelGanger?$FN?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Add?5to?5e@
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00059	83 c4 10	 add	 esp, 16			; 00000010H

; 383  : 			return true;

  0005c	b0 01		 mov	 al, 1

; 387  : }

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?AddPlayer@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP	; CDoppelGanger::AddPlayer
_TEXT	ENDS
PUBLIC	?GetEventTime@CDoppelGanger@@QAEDPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::GetEventTime
; Function compile flags: /Ogtp
;	COMDAT ?GetEventTime@CDoppelGanger@@QAEDPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetEventTime@CDoppelGanger@@QAEDPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::GetEventTime, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 391  : 	if(lpObj->PartyNumber == this->m_DGData.PartyNumber && this->m_DGData.btPlayState == DG_STATE_WAITING)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 90 2c 04 00
	00		 mov	 edx, DWORD PTR [eax+1068]
  0000c	3b 91 14 02 00
	00		 cmp	 edx, DWORD PTR [ecx+532]
  00012	75 0c		 jne	 SHORT $LN3@GetEventTi
  00014	80 79 4a 02	 cmp	 BYTE PTR [ecx+74], 2
  00018	75 06		 jne	 SHORT $LN3@GetEventTi
$LN6@GetEventTi:

; 392  : 	{
; 393  : 		return 0;

  0001a	32 c0		 xor	 al, al

; 400  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@GetEventTi:

; 394  : 	}
; 395  : 	else if(this->m_DGData.btPlayState == DG_STATE_OPEN)

  00020	80 79 4a 01	 cmp	 BYTE PTR [ecx+74], 1

; 396  : 	{
; 397  : 		return 0;

  00024	74 f4		 je	 SHORT $LN6@GetEventTi

; 398  : 	}
; 399  : 	return this->m_DGData.eDuration;

  00026	8a 81 08 02 00
	00		 mov	 al, BYTE PTR [ecx+520]

; 400  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?GetEventTime@CDoppelGanger@@QAEDPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::GetEventTime
_TEXT	ENDS
PUBLIC	?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObjIsConnectedGP@@YAHH@Z:PROC			; gObjIsConnectedGP
; Function compile flags: /Ogtp
;	COMDAT ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_iSize$ = 12						; size = 4
?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z PROC	; CDoppelGanger::SendDoppelGangerPlayer, COMDAT
; _this$ = ecx

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b d9		 mov	 ebx, ecx
  00007	57		 push	 edi

; 441  : 	for(int i=0;i<5;++i)

  00008	8d 73 54	 lea	 esi, DWORD PTR [ebx+84]
  0000b	bf 05 00 00 00	 mov	 edi, 5
$LL4@SendDoppel:

; 442  : 	{
; 443  : 		if(this->m_DGData.PlayerIndex[i] != -1 && gObjIsConnectedGP(this->m_DGData.PlayerIndex[i]) && gObj[this->m_DGData.PlayerIndex[i]].MapNumber == this->m_DGData.MapNumber)

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	74 3e		 je	 SHORT $LN3@SendDoppel
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  0001d	83 c4 04	 add	 esp, 4
  00020	85 c0		 test	 eax, eax
  00022	74 31		 je	 SHORT $LN3@SendDoppel
  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	8b c8		 mov	 ecx, eax
  0002e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00034	0f b6 8c 11 49
	01 00 00	 movzx	 ecx, BYTE PTR [ecx+edx+329]
  0003c	3b 8b 10 02 00
	00		 cmp	 ecx, DWORD PTR [ebx+528]
  00042	75 11		 jne	 SHORT $LN3@SendDoppel

; 444  : 		{
; 445  : 			DataSend(this->m_DGData.PlayerIndex[i], lpMsg, iSize);

  00044	8b 55 0c	 mov	 edx, DWORD PTR _iSize$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  0004a	52		 push	 edx
  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendDoppel:

; 441  : 	for(int i=0;i<5;++i)

  00055	83 c6 04	 add	 esi, 4
  00058	4f		 dec	 edi
  00059	75 b5		 jne	 SHORT $LL4@SendDoppel
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 446  : 		}
; 447  : 	}
; 448  : }

  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ENDP	; CDoppelGanger::SendDoppelGangerPlayer
_TEXT	ENDS
PUBLIC	?SendHalfTimeInfo@CDoppelGanger@@QAEXH@Z	; CDoppelGanger::SendHalfTimeInfo
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
; Function compile flags: /Ogtp
;	COMDAT ?SendHalfTimeInfo@CDoppelGanger@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -4						; size = 4
_Type$ = 8						; size = 4
?SendHalfTimeInfo@CDoppelGanger@@QAEXH@Z PROC		; CDoppelGanger::SendHalfTimeInfo, COMDAT
; _this$ = ecx

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 452  : 	PMSG_SET_DEVILSQUARE pMsg;
; 453  : 
; 454  : 	PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  00005	6a 04		 push	 4
  00007	8d 45 fc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000a	68 92 00 00 00	 push	 146			; 00000092H
  0000f	50		 push	 eax
  00010	8b f1		 mov	 esi, ecx
  00012	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 455  : 	pMsg.Type = Type;
; 456  : 
; 457  : 	this->SendDoppelGangerPlayer((LPBYTE)&pMsg, pMsg.h.size);

  00017	0f b6 55 fd	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0001b	8a 4d 08	 mov	 cl, BYTE PTR _Type$[ebp]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	52		 push	 edx
  00022	8d 45 fc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00025	88 4d ff	 mov	 BYTE PTR _pMsg$[ebp+3], cl
  00028	50		 push	 eax
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer

; 458  : 	this->m_DGData.HalfTimeInfoSent = true;

  00030	c6 86 1c 02 00
	00 01		 mov	 BYTE PTR [esi+540], 1
  00037	5e		 pop	 esi

; 459  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?SendHalfTimeInfo@CDoppelGanger@@QAEXH@Z ENDP		; CDoppelGanger::SendHalfTimeInfo
_TEXT	ENDS
PUBLIC	?SetEventInterface@CDoppelGanger@@QAEXXZ	; CDoppelGanger::SetEventInterface
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
; Function compile flags: /Ogtp
;	COMDAT ?SetEventInterface@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
?SetEventInterface@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SetEventInterface, COMDAT
; _this$ = ecx

; 462  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 463  : 	PMSG_DGOER_TIMER_INIT pMsg;
; 464  : 
; 465  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBF, 0x10, sizeof(pMsg));

  00007	6a 05		 push	 5
  00009	6a 10		 push	 16			; 00000010H
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000e	68 bf 00 00 00	 push	 191			; 000000bfH
  00013	50		 push	 eax
  00014	8b f1		 mov	 esi, ecx
  00016	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 466  : 	pMsg.Timer = 2;
; 467  : 
; 468  : 	this->SendDoppelGangerPlayer((LPBYTE)&pMsg, pMsg.h.size);

  0001b	0f b6 4d f9	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	51		 push	 ecx
  00023	8d 55 f8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00026	52		 push	 edx
  00027	8b ce		 mov	 ecx, esi
  00029	c6 45 fc 02	 mov	 BYTE PTR _pMsg$[ebp+4], 2
  0002d	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer
  00032	5e		 pop	 esi

; 469  : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?SetEventInterface@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SetEventInterface
_TEXT	ENDS
PUBLIC	?SetMonsterCountOnInterface@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetMonsterCountOnInterface
; Function compile flags: /Ogtp
;	COMDAT ?SetMonsterCountOnInterface@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?SetMonsterCountOnInterface@CDoppelGanger@@QAEXXZ PROC	; CDoppelGanger::SetMonsterCountOnInterface, COMDAT
; _this$ = ecx

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 473  : 	PMSG_DGOER_MONSTER_COUNT pMsg;
; 474  : 
; 475  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBF, 0x14, sizeof(pMsg));

  00007	6a 06		 push	 6
  00009	6a 14		 push	 20			; 00000014H
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000e	68 bf 00 00 00	 push	 191			; 000000bfH
  00013	50		 push	 eax
  00014	8b f1		 mov	 esi, ecx
  00016	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 476  : 	pMsg.Killed = this->m_DGData.MonsterPassed;
; 477  : 	pMsg.Total = GOER_MAX_PASS_PORTAL;
; 478  : 
; 479  : 	this->SendDoppelGangerPlayer((LPBYTE)&pMsg, pMsg.h.size);

  0001b	0f b6 55 f9	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0001f	8a 4e 47	 mov	 cl, BYTE PTR [esi+71]
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	52		 push	 edx
  00026	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00029	88 4d fd	 mov	 BYTE PTR _pMsg$[ebp+5], cl
  0002c	50		 push	 eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	c6 45 fc 03	 mov	 BYTE PTR _pMsg$[ebp+4], 3
  00033	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer
  00038	5e		 pop	 esi

; 480  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?SetMonsterCountOnInterface@CDoppelGanger@@QAEXXZ ENDP	; CDoppelGanger::SetMonsterCountOnInterface
_TEXT	ENDS
PUBLIC	?SetMapNumber@CDoppelGanger@@QAEHXZ		; CDoppelGanger::SetMapNumber
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SetMapNumber@CDoppelGanger@@QAEHXZ
_TEXT	SEGMENT
?SetMapNumber@CDoppelGanger@@QAEHXZ PROC		; CDoppelGanger::SetMapNumber, COMDAT
; _this$ = ecx

; 556  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 557  : 	if(this->m_DGData.MapNumber != -1)

  00003	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  00009	83 f8 ff	 cmp	 eax, -1

; 558  : 	{
; 559  : 		return (264+this->m_DGData.MapNumber);

  0000c	75 1a		 jne	 SHORT $LN6@SetMapNumb

; 560  : 	}
; 561  : 	else
; 562  : 	{
; 563  : 		this->m_DGData.MapNumber = 65 + (rand()%4);

  0000e	e8 00 00 00 00	 call	 _rand
  00013	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00018	79 05		 jns	 SHORT $LN5@SetMapNumb
  0001a	48		 dec	 eax
  0001b	83 c8 fc	 or	 eax, -4			; fffffffcH
  0001e	40		 inc	 eax
$LN5@SetMapNumb:
  0001f	83 c0 41	 add	 eax, 65			; 00000041H
  00022	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
$LN6@SetMapNumb:

; 564  : 		return (264+this->m_DGData.MapNumber);

  00028	05 08 01 00 00	 add	 eax, 264		; 00000108H
  0002d	5e		 pop	 esi

; 565  : 	}
; 566  : }

  0002e	c3		 ret	 0
?SetMapNumber@CDoppelGanger@@QAEHXZ ENDP		; CDoppelGanger::SetMapNumber
_TEXT	ENDS
PUBLIC	??_C@_0DA@HKJFDGCO@?$FLDoppelGanger?$FN?5Spawn?5Illusion?3?5?$CI@ ; `string'
PUBLIC	?CreateMonster@CDoppelGanger@@QAEXXZ		; CDoppelGanger::CreateMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0DA@HKJFDGCO@?$FLDoppelGanger?$FN?5Spawn?5Illusion?3?5?$CI@
CONST	SEGMENT
??_C@_0DA@HKJFDGCO@?$FLDoppelGanger?$FN?5Spawn?5Illusion?3?5?$CI@ DB '[Do'
	DB	'ppelGanger] Spawn Illusion: (%d) Index: (%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateMonster@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?CreateMonster@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::CreateMonster, COMDAT
; _this$ = ecx

; 569  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 570  : 	if(this->m_DGData.MonsterCount < (40 * this->m_DGData.PlayerCount))

  00003	0f b6 46 44	 movzx	 eax, BYTE PTR [esi+68]
  00007	0f b6 4e 46	 movzx	 ecx, BYTE PTR [esi+70]
  0000b	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0000e	03 c0		 add	 eax, eax
  00010	03 c0		 add	 eax, eax
  00012	03 c0		 add	 eax, eax
  00014	3b c8		 cmp	 ecx, eax
  00016	0f 8d d4 00 00
	00		 jge	 $LN3@CreateMons

; 571  : 	{
; 572  : 		for(int i=0;i<200;++i)

  0001c	53		 push	 ebx
  0001d	57		 push	 edi
  0001e	33 ff		 xor	 edi, edi
  00020	8d 5e 68	 lea	 ebx, DWORD PTR [esi+104]
$LL5@CreateMons:

; 573  : 		{
; 574  : 			if(this->m_DGData.MonsterIndex[i] == -1)

  00023	66 83 3b ff	 cmp	 WORD PTR [ebx], -1
  00027	75 17		 jne	 SHORT $LN4@CreateMons

; 575  : 			{
; 576  : 				this->m_DGData.MonsterIndex[i] = gObjAddMonster(this->m_DGData.MapNumber);

  00029	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00035	83 c4 04	 add	 esp, 4
  00038	66 89 03	 mov	 WORD PTR [ebx], ax

; 577  : 				if(this->m_DGData.MonsterIndex[i] >= 0)

  0003b	66 85 c0	 test	 ax, ax
  0003e	79 10		 jns	 SHORT $LN10@CreateMons
$LN4@CreateMons:

; 571  : 	{
; 572  : 		for(int i=0;i<200;++i)

  00040	47		 inc	 edi
  00041	83 c3 02	 add	 ebx, 2
  00044	81 ff c8 00 00
	00		 cmp	 edi, 200		; 000000c8H
  0004a	7c d7		 jl	 SHORT $LL5@CreateMons
  0004c	5f		 pop	 edi
  0004d	5b		 pop	 ebx
  0004e	5e		 pop	 esi

; 586  : 					return;
; 587  : 				}
; 588  : 			}
; 589  : 		}
; 590  : 	}
; 591  : }

  0004f	c3		 ret	 0
$LN10@CreateMons:

; 578  : 				{
; 579  : 					gObj[this->m_DGData.MonsterIndex[i]].MapNumber = this->m_DGData.MapNumber;

  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00056	8a 8e 10 02 00
	00		 mov	 cl, BYTE PTR [esi+528]
  0005c	98		 cwde
  0005d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00063	88 8c 10 49 01
	00 00		 mov	 BYTE PTR [eax+edx+329], cl

; 580  : 					gObj[this->m_DGData.MonsterIndex[i]].X = this->MPOSX[this->m_DGData.MapNumber-65];

  0006a	0f bf 4c 7e 68	 movsx	 ecx, WORD PTR [esi+edi*2+104]
  0006f	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  00075	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0007b	66 8b 94 86 20
	ff ff ff	 mov	 dx, WORD PTR [esi+eax*4-224]
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00088	66 89 94 01 44
	01 00 00	 mov	 WORD PTR [ecx+eax+324], dx

; 581  : 					gObj[this->m_DGData.MonsterIndex[i]].Y = this->MPOSY[this->m_DGData.MapNumber-65];

  00090	0f bf 54 7e 68	 movsx	 edx, WORD PTR [esi+edi*2+104]
  00095	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  0009b	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000a1	66 8b 84 8e 30
	ff ff ff	 mov	 ax, WORD PTR [esi+ecx*4-208]
  000a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000af	66 89 84 0a 46
	01 00 00	 mov	 WORD PTR [edx+ecx+326], ax

; 582  : 
; 583  : 					gObjSetMonster(this->m_DGData.MonsterIndex[i], (rand()%6+533));

  000b7	e8 00 00 00 00	 call	 _rand
  000bc	99		 cdq
  000bd	b9 06 00 00 00	 mov	 ecx, 6
  000c2	f7 f9		 idiv	 ecx
  000c4	81 c2 15 02 00
	00		 add	 edx, 533		; 00000215H
  000ca	52		 push	 edx
  000cb	0f bf 54 7e 68	 movsx	 edx, WORD PTR [esi+edi*2+104]
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 584  : 					++this->m_DGData.MonsterCount;

  000d6	fe 46 46	 inc	 BYTE PTR [esi+70]

; 585  : 					LogAddTD("[DoppelGanger] Spawn Illusion: (%d) Index: (%d)", i, this->m_DGData.MonsterIndex[i]);

  000d9	0f bf 44 7e 68	 movsx	 eax, WORD PTR [esi+edi*2+104]
  000de	50		 push	 eax
  000df	57		 push	 edi
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HKJFDGCO@?$FLDoppelGanger?$FN?5Spawn?5Illusion?3?5?$CI@
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000eb	83 c4 14	 add	 esp, 20			; 00000014H
  000ee	5f		 pop	 edi
  000ef	5b		 pop	 ebx
$LN3@CreateMons:
  000f0	5e		 pop	 esi

; 586  : 					return;
; 587  : 				}
; 588  : 			}
; 589  : 		}
; 590  : 	}
; 591  : }

  000f1	c3		 ret	 0
?CreateMonster@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::CreateMonster
_TEXT	ENDS
PUBLIC	?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::IsDGMonster
; Function compile flags: /Ogtp
;	COMDAT ?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::IsDGMonster, COMDAT
; _this$ = ecx

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 	for(int i=0;i<200;++i)

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	57		 push	 edi
  0000a	33 c0		 xor	 eax, eax
  0000c	8d 51 68	 lea	 edx, DWORD PTR [ecx+104]
  0000f	90		 npad	 1
$LL11@IsDGMonste:

; 607  : 	{
; 608  : 		if(this->m_DGData.MonsterIndex[i] == lpObj->m_Index)

  00010	0f bf 3a	 movsx	 edi, WORD PTR [edx]
  00013	3b fe		 cmp	 edi, esi
  00015	74 43		 je	 SHORT $LN16@IsDGMonste

; 606  : 	for(int i=0;i<200;++i)

  00017	40		 inc	 eax
  00018	83 c2 02	 add	 edx, 2
  0001b	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00020	7c ee		 jl	 SHORT $LL11@IsDGMonste

; 611  : 		}
; 612  : 	}
; 613  : 	if(this->m_DGData.ButcherIndex == lpObj->m_Index) return true;

  00022	0f bf 41 4e	 movsx	 eax, WORD PTR [ecx+78]
  00026	3b c6		 cmp	 eax, esi
  00028	74 30		 je	 SHORT $LN16@IsDGMonste

; 614  : 	if(this->m_DGData.AngryButcherIndex == lpObj->m_Index) return true;

  0002a	0f bf 51 50	 movsx	 edx, WORD PTR [ecx+80]
  0002e	3b d6		 cmp	 edx, esi
  00030	74 28		 je	 SHORT $LN16@IsDGMonste

; 615  : 	if(this->m_DGData.IceWalkerIndex == lpObj->m_Index) return true;

  00032	0f bf 41 52	 movsx	 eax, WORD PTR [ecx+82]
  00036	3b c6		 cmp	 eax, esi
  00038	74 20		 je	 SHORT $LN16@IsDGMonste

; 616  : 	for(int n=0;n<3;++n)

  0003a	33 c0		 xor	 eax, eax
  0003c	81 c1 02 02 00
	00		 add	 ecx, 514		; 00000202H
$LL4@IsDGMonste:

; 617  : 	{
; 618  : 		if(this->m_DGData.SilverBoxIndex[n] == lpObj->m_Index)

  00042	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00045	3b d6		 cmp	 edx, esi
  00047	74 11		 je	 SHORT $LN16@IsDGMonste

; 616  : 	for(int n=0;n<3;++n)

  00049	40		 inc	 eax
  0004a	83 c1 02	 add	 ecx, 2
  0004d	83 f8 03	 cmp	 eax, 3
  00050	7c f0		 jl	 SHORT $LL4@IsDGMonste

; 619  : 		{
; 620  : 			return true;
; 621  : 		}
; 622  : 	}
; 623  : 	return false;

  00052	5f		 pop	 edi
  00053	32 c0		 xor	 al, al
  00055	5e		 pop	 esi

; 624  : }

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN16@IsDGMonste:
  0005a	5f		 pop	 edi

; 609  : 		{
; 610  : 			return true;

  0005b	b0 01		 mov	 al, 1
  0005d	5e		 pop	 esi

; 624  : }

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::IsDGMonster
_TEXT	ENDS
PUBLIC	?RegenProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::RegenProc
; Function compile flags: /Ogtp
;	COMDAT ?RegenProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?RegenProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CDoppelGanger::RegenProc, COMDAT
; _this$ = ecx

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 628  : 	if(this->IsDGMonster(lpObj) == true)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 ?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::IsDGMonster
  00011	3c 01		 cmp	 al, 1
  00013	75 50		 jne	 SHORT $LN8@RegenProc

; 629  : 	{
; 630  : 		lpObj->RegenMapX = this->MPOSX[this->m_DGData.MapNumber-65];

  00015	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  0001b	8a 8c 86 20 ff
	ff ff		 mov	 cl, BYTE PTR [esi+eax*4-224]
  00022	88 8f a5 03 00
	00		 mov	 BYTE PTR [edi+933], cl

; 631  : 		lpObj->RegenMapY = this->MPOSY[this->m_DGData.MapNumber-65];

  00028	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  0002e	8a 84 96 30 ff
	ff ff		 mov	 al, BYTE PTR [esi+edx*4-208]
  00035	88 87 a6 03 00
	00		 mov	 BYTE PTR [edi+934], al

; 632  : 		lpObj->X = this->MPOSX[this->m_DGData.MapNumber-65];

  0003b	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  00041	66 8b 94 8e 20
	ff ff ff	 mov	 dx, WORD PTR [esi+ecx*4-224]
  00049	66 89 97 44 01
	00 00		 mov	 WORD PTR [edi+324], dx

; 633  : 		lpObj->Y = this->MPOSY[this->m_DGData.MapNumber-65];

  00050	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  00056	66 8b 8c 86 30
	ff ff ff	 mov	 cx, WORD PTR [esi+eax*4-208]
  0005e	66 89 8f 46 01
	00 00		 mov	 WORD PTR [edi+326], cx
$LN8@RegenProc:

; 634  : 	}
; 635  : 	if(this->m_DGData.ButcherIndex == lpObj->m_Index) gObjDel(lpObj->m_Index);

  00065	0f bf 56 4e	 movsx	 edx, WORD PTR [esi+78]
  00069	8b 07		 mov	 eax, DWORD PTR [edi]
  0006b	3b d0		 cmp	 edx, eax
  0006d	75 09		 jne	 SHORT $LN7@RegenProc
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00075	83 c4 04	 add	 esp, 4
$LN7@RegenProc:

; 636  : 	if(this->m_DGData.AngryButcherIndex == lpObj->m_Index) gObjDel(lpObj->m_Index);

  00078	0f bf 4e 50	 movsx	 ecx, WORD PTR [esi+80]
  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
  0007e	3b c8		 cmp	 ecx, eax
  00080	75 09		 jne	 SHORT $LN6@RegenProc
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00088	83 c4 04	 add	 esp, 4
$LN6@RegenProc:

; 637  : 	if(this->m_DGData.IceWalkerIndex == lpObj->m_Index) gObjDel(lpObj->m_Index);

  0008b	0f bf 56 52	 movsx	 edx, WORD PTR [esi+82]
  0008f	8b 07		 mov	 eax, DWORD PTR [edi]
  00091	3b d0		 cmp	 edx, eax
  00093	75 09		 jne	 SHORT $LN5@RegenProc
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0009b	83 c4 04	 add	 esp, 4
$LN5@RegenProc:

; 638  : 	for(int i=0;i<2;++i)

  0009e	81 c6 02 02 00
	00		 add	 esi, 514		; 00000202H
  000a4	bb 02 00 00 00	 mov	 ebx, 2
  000a9	8d a4 24 00 00
	00 00		 npad	 7
$LL4@RegenProc:

; 639  : 	{
; 640  : 		if(this->m_DGData.SilverBoxIndex[i] == lpObj->m_Index)

  000b0	0f bf 06	 movsx	 eax, WORD PTR [esi]
  000b3	3b 07		 cmp	 eax, DWORD PTR [edi]
  000b5	75 11		 jne	 SHORT $LN3@RegenProc

; 641  : 		{
; 642  : 			this->m_DGData.SilverBoxIndex[i] = -1;

  000b7	83 c9 ff	 or	 ecx, -1
  000ba	66 89 0e	 mov	 WORD PTR [esi], cx

; 643  : 			gObjDel(lpObj->m_Index);

  000bd	8b 17		 mov	 edx, DWORD PTR [edi]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  000c5	83 c4 04	 add	 esp, 4
$LN3@RegenProc:

; 638  : 	for(int i=0;i<2;++i)

  000c8	83 c6 02	 add	 esi, 2
  000cb	4b		 dec	 ebx
  000cc	75 e2		 jne	 SHORT $LL4@RegenProc
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx

; 644  : 		}
; 645  : 	}
; 646  : }

  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
?RegenProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CDoppelGanger::RegenProc
_TEXT	ENDS
PUBLIC	__real@4010666666666666
PUBLIC	__real@4036000000000000
PUBLIC	__real@400999999999999a
PUBLIC	?CalcPos@CDoppelGanger@@QAEHH_N@Z		; CDoppelGanger::CalcPos
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4010666666666666
CONST	SEGMENT
__real@4010666666666666 DQ 04010666666666666r	; 4.1
CONST	ENDS
;	COMDAT __real@4036000000000000
CONST	SEGMENT
__real@4036000000000000 DQ 04036000000000000r	; 22
CONST	ENDS
;	COMDAT __real@400999999999999a
CONST	SEGMENT
__real@400999999999999a DQ 0400999999999999ar	; 3.2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CalcPos@CDoppelGanger@@QAEHH_N@Z
_TEXT	SEGMENT
_player$ = 8						; size = 4
tv381 = 12						; size = 4
tv364 = 12						; size = 4
tv354 = 12						; size = 4
tv310 = 12						; size = 4
tv168 = 12						; size = 4
tv145 = 12						; size = 4
_MonsterCalc$ = 12					; size = 1
?CalcPos@CDoppelGanger@@QAEHH_N@Z PROC			; CDoppelGanger::CalcPos, COMDAT
; _this$ = ecx

; 649  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 650  : 	if(MonsterCalc == false)

  00003	80 7d 0c 00	 cmp	 BYTE PTR _MonsterCalc$[ebp], 0
  00007	0f 85 14 01 00
	00		 jne	 $LN32@CalcPos

; 651  : 	{
; 652  : 		if(this->m_DGData.MapNumber == 65)

  0000d	8b 81 10 02 00
	00		 mov	 eax, DWORD PTR [ecx+528]
  00013	83 f8 41	 cmp	 eax, 65			; 00000041H
  00016	75 44		 jne	 SHORT $LN31@CalcPos

; 653  : 		{
; 654  : 			if(gObj[this->m_DGData.PlayerIndex[player]].Y>31)

  00018	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001b	8b 4c 81 54	 mov	 ecx, DWORD PTR [ecx+eax*4+84]
  0001f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0002b	0f b7 84 11 46
	01 00 00	 movzx	 eax, WORD PTR [ecx+edx+326]
  00033	66 83 f8 1f	 cmp	 ax, 31			; 0000001fH
  00037	0f 8e e7 01 00
	00		 jle	 $LN1@CalcPos

; 655  : 			{
; 656  : 				return 22-((gObj[this->m_DGData.PlayerIndex[player]].Y-31)/3.2);

  0003d	98		 cwde
  0003e	83 e8 1f	 sub	 eax, 31			; 0000001fH
  00041	89 45 0c	 mov	 DWORD PTR tv381[ebp], eax
  00044	db 45 0c	 fild	 DWORD PTR tv381[ebp]
  00047	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@400999999999999a
  0004d	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4036000000000000
  00053	e8 00 00 00 00	 call	 __ftol2_sse

; 760  : }

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
$LN31@CalcPos:

; 657  : 			}
; 658  : 			else
; 659  : 			{
; 660  : 				return 22;
; 661  : 			}
; 662  : 		}
; 663  : 		else if(this->m_DGData.MapNumber == 66)

  0005c	83 f8 42	 cmp	 eax, 66			; 00000042H
  0005f	75 48		 jne	 SHORT $LN27@CalcPos

; 664  : 		{
; 665  : 			if(gObj[this->m_DGData.PlayerIndex[player]].Y>69)

  00061	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00064	8b 44 91 54	 mov	 eax, DWORD PTR [ecx+edx*4+84]
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00074	0f b7 84 08 46
	01 00 00	 movzx	 eax, WORD PTR [eax+ecx+326]
  0007c	66 83 f8 45	 cmp	 ax, 69			; 00000045H
  00080	0f 8e 9e 01 00
	00		 jle	 $LN1@CalcPos

; 666  : 			{
; 667  : 				return 22-(((gObj[this->m_DGData.PlayerIndex[player]].Y -70)*2)/10);

  00086	0f bf d0	 movsx	 edx, ax
  00089	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0008e	2b ca		 sub	 ecx, edx
  00090	03 c9		 add	 ecx, ecx
  00092	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00097	f7 e9		 imul	 ecx
  00099	c1 fa 02	 sar	 edx, 2
  0009c	8b c2		 mov	 eax, edx
  0009e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a1	8d 44 02 16	 lea	 eax, DWORD PTR [edx+eax+22]

; 760  : }

  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
$LN27@CalcPos:

; 668  : 			}
; 669  : 			else
; 670  : 			{
; 671  : 				return 22;
; 672  : 			}
; 673  : 		}
; 674  : 		else if(this->m_DGData.MapNumber == 67)

  000a9	83 f8 43	 cmp	 eax, 67			; 00000043H
  000ac	75 36		 jne	 SHORT $LN23@CalcPos

; 675  : 		{
; 676  : 			if(gObj[this->m_DGData.PlayerIndex[player]].Y>61)

  000ae	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000b1	8b 44 91 54	 mov	 eax, DWORD PTR [ecx+edx*4+84]
  000b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bb	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000c1	0f b7 84 08 46
	01 00 00	 movzx	 eax, WORD PTR [eax+ecx+326]
  000c9	66 83 f8 3d	 cmp	 ax, 61			; 0000003dH
  000cd	0f 8e 51 01 00
	00		 jle	 $LN1@CalcPos

; 677  : 			{
; 678  : 				return 22-((gObj[this->m_DGData.PlayerIndex[player]].Y-61)/4.1);

  000d3	0f bf d0	 movsx	 edx, ax
  000d6	83 ea 3d	 sub	 edx, 61			; 0000003dH
  000d9	89 55 0c	 mov	 DWORD PTR tv364[ebp], edx
  000dc	db 45 0c	 fild	 DWORD PTR tv364[ebp]

; 679  : 			}
; 680  : 			else
; 681  : 			{
; 682  : 				return 22;

  000df	e9 2b 01 00 00	 jmp	 $LN36@CalcPos
$LN23@CalcPos:

; 683  : 			}
; 684  : 		}
; 685  : 		else if(this->m_DGData.MapNumber == 68)

  000e4	83 f8 44	 cmp	 eax, 68			; 00000044H
  000e7	0f 85 37 01 00
	00		 jne	 $LN1@CalcPos

; 686  : 		{
; 687  : 			//for(int n=1;n<23;n++)
; 688  : 			//{	
; 689  : 			//	if(gObj[this->m_DGData.PlayerIndex[player]].MapNumber == 68 && gObj[this->m_DGData.PlayerIndex[player]].Y > 24+((n-1)*4) && gObj[this->m_DGData.PlayerIndex[player]].Y <= 27+((n-1)*4))
; 690  : 			//	{
; 691  : 			//		return n;
; 692  : 			//	}
; 693  : 			//}
; 694  : 			if(gObj[this->m_DGData.PlayerIndex[player]].Y>18)

  000ed	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f0	8b 4c 81 54	 mov	 ecx, DWORD PTR [ecx+eax*4+84]
  000f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fa	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00100	0f b7 84 11 46
	01 00 00	 movzx	 eax, WORD PTR [ecx+edx+326]
  00108	66 83 f8 12	 cmp	 ax, 18			; 00000012H
  0010c	0f 8e 12 01 00
	00		 jle	 $LN1@CalcPos

; 695  : 			{
; 696  : 				return 22-((gObj[this->m_DGData.PlayerIndex[player]].Y-18)/4.1);

  00112	98		 cwde
  00113	83 e8 12	 sub	 eax, 18			; 00000012H
  00116	89 45 0c	 mov	 DWORD PTR tv354[ebp], eax
  00119	db 45 0c	 fild	 DWORD PTR tv354[ebp]

; 697  : 			}
; 698  : 			else
; 699  : 			{
; 700  : 				return 22;

  0011c	e9 ee 00 00 00	 jmp	 $LN36@CalcPos
$LN32@CalcPos:

; 701  : 			}
; 702  : 		}
; 703  : 
; 704  : 	}
; 705  : 	else
; 706  : 	{
; 707  : 		if(this->m_DGData.MapNumber == 65)

  00121	8b 89 10 02 00
	00		 mov	 ecx, DWORD PTR [ecx+528]
  00127	83 f9 41	 cmp	 ecx, 65			; 00000041H
  0012a	75 40		 jne	 SHORT $LN15@CalcPos

; 708  : 		{
; 709  : 			if(gObj[player].Y>31)

  0012c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0012f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00135	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0013b	0f b7 84 11 46
	01 00 00	 movzx	 eax, WORD PTR [ecx+edx+326]
  00143	66 83 f8 1f	 cmp	 ax, 31			; 0000001fH
  00147	0f 8e d7 00 00
	00		 jle	 $LN1@CalcPos

; 710  : 			{
; 711  : 				return 22-((gObj[player].Y-31)/3.2);

  0014d	98		 cwde
  0014e	83 e8 1f	 sub	 eax, 31			; 0000001fH
  00151	89 45 0c	 mov	 DWORD PTR tv168[ebp], eax
  00154	db 45 0c	 fild	 DWORD PTR tv168[ebp]
  00157	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@400999999999999a

; 750  : 			{
; 751  : 				return 22-((gObj[player].Y-18)/4.1);

  0015d	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4036000000000000
  00163	e8 00 00 00 00	 call	 __ftol2_sse

; 760  : }

  00168	5d		 pop	 ebp
  00169	c2 08 00	 ret	 8
$LN15@CalcPos:

; 712  : 			}
; 713  : 			else
; 714  : 			{
; 715  : 				return 22;
; 716  : 			}
; 717  : 		}
; 718  : 		else if(this->m_DGData.MapNumber == 66)

  0016c	83 f9 42	 cmp	 ecx, 66			; 00000042H
  0016f	75 42		 jne	 SHORT $LN11@CalcPos

; 719  : 		{
; 720  : 			if(gObj[player].Y>69)

  00171	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00174	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017a	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00180	0f b7 84 11 46
	01 00 00	 movzx	 eax, WORD PTR [ecx+edx+326]
  00188	66 83 f8 45	 cmp	 ax, 69			; 00000045H
  0018c	0f 8e 92 00 00
	00		 jle	 $LN1@CalcPos

; 721  : 			{
; 722  : 				return 22-(((gObj[player].Y -70)*2)/10);

  00192	98		 cwde
  00193	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00198	2b c8		 sub	 ecx, eax
  0019a	03 c9		 add	 ecx, ecx
  0019c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001a1	f7 e9		 imul	 ecx
  001a3	c1 fa 02	 sar	 edx, 2
  001a6	8b ca		 mov	 ecx, edx
  001a8	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001ab	8d 44 0a 16	 lea	 eax, DWORD PTR [edx+ecx+22]

; 760  : }

  001af	5d		 pop	 ebp
  001b0	c2 08 00	 ret	 8
$LN11@CalcPos:

; 723  : 			}
; 724  : 			else
; 725  : 			{
; 726  : 				return 22;
; 727  : 			}
; 728  : 		}
; 729  : 		else if(this->m_DGData.MapNumber == 67)

  001b3	83 f9 43	 cmp	 ecx, 67			; 00000043H
  001b6	75 2a		 jne	 SHORT $LN7@CalcPos

; 730  : 		{
; 731  : 			if(gObj[player].Y>61)

  001b8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c0	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  001c6	0f b7 84 02 46
	01 00 00	 movzx	 eax, WORD PTR [edx+eax+326]
  001ce	66 83 f8 3d	 cmp	 ax, 61			; 0000003dH
  001d2	7e 50		 jle	 SHORT $LN1@CalcPos

; 732  : 			{
; 733  : 				return 22-((gObj[player].Y-61)/4.1);

  001d4	0f bf c8	 movsx	 ecx, ax
  001d7	83 e9 3d	 sub	 ecx, 61			; 0000003dH
  001da	89 4d 0c	 mov	 DWORD PTR tv145[ebp], ecx
  001dd	db 45 0c	 fild	 DWORD PTR tv145[ebp]

; 734  : 			}
; 735  : 			else
; 736  : 			{
; 737  : 				return 22;

  001e0	eb 2d		 jmp	 SHORT $LN36@CalcPos
$LN7@CalcPos:

; 738  : 			}
; 739  : 		}
; 740  : 		else if(this->m_DGData.MapNumber == 68)

  001e2	83 f9 44	 cmp	 ecx, 68			; 00000044H
  001e5	75 3d		 jne	 SHORT $LN1@CalcPos

; 741  : 		{
; 742  : 			//for(int n=1;n<23;n++)
; 743  : 			//{	
; 744  : 			//	if(gObj[player].MapNumber == 68 && gObj[player].Y > 24+((n-1)*4) && gObj[player].Y <= 27+((n-1)*4))
; 745  : 			//	{
; 746  : 			//		return n;
; 747  : 			//	}
; 748  : 			//}
; 749  : 			if(gObj[player].Y>18)

  001e7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ef	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  001f5	0f b7 84 02 46
	01 00 00	 movzx	 eax, WORD PTR [edx+eax+326]
  001fd	66 83 f8 12	 cmp	 ax, 18			; 00000012H
  00201	7e 21		 jle	 SHORT $LN1@CalcPos

; 750  : 			{
; 751  : 				return 22-((gObj[player].Y-18)/4.1);

  00203	0f bf c8	 movsx	 ecx, ax
  00206	83 e9 12	 sub	 ecx, 18			; 00000012H
  00209	89 4d 0c	 mov	 DWORD PTR tv310[ebp], ecx
  0020c	db 45 0c	 fild	 DWORD PTR tv310[ebp]
$LN36@CalcPos:
  0020f	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4010666666666666
  00215	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4036000000000000
  0021b	e8 00 00 00 00	 call	 __ftol2_sse

; 760  : }

  00220	5d		 pop	 ebp
  00221	c2 08 00	 ret	 8
$LN1@CalcPos:

; 752  : 			}
; 753  : 			else
; 754  : 			{
; 755  : 				return 22;
; 756  : 			}
; 757  : 		}
; 758  : 	}
; 759  : 	return 22;

  00224	b8 16 00 00 00	 mov	 eax, 22			; 00000016H

; 760  : }

  00229	5d		 pop	 ebp
  0022a	c2 08 00	 ret	 8
?CalcPos@CDoppelGanger@@QAEHH_N@Z ENDP			; CDoppelGanger::CalcPos
_TEXT	ENDS
PUBLIC	??_C@_0DA@OOOKDDFK@?$FLDoppelGanger?$FN?5Increase?5Monster?5@ ; `string'
PUBLIC	?CheckPosition@CDoppelGanger@@QAEXXZ		; CDoppelGanger::CheckPosition
;	COMDAT ??_C@_0DA@OOOKDDFK@?$FLDoppelGanger?$FN?5Increase?5Monster?5@
CONST	SEGMENT
??_C@_0DA@OOOKDDFK@?$FLDoppelGanger?$FN?5Increase?5Monster?5@ DB '[Doppel'
	DB	'Ganger] Increase Monster Passed: (%d/%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckPosition@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
tv153 = -4						; size = 4
?CheckPosition@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::CheckPosition, COMDAT
; _this$ = ecx

; 763  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 764  : 	for(int i=0;i<200;++i)

  00009	8d 7e 68	 lea	 edi, DWORD PTR [esi+104]
  0000c	c7 45 fc c8 00
	00 00		 mov	 DWORD PTR tv153[ebp], 200 ; 000000c8H
  00013	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL5@CheckPosit:

; 765  : 	{
; 766  : 		if(gObj[this->m_DGData.MonsterIndex[i]].X > g_DGPortal[this->m_DGData.MapNumber-65].StartX - 3 &&
; 767  : 			gObj[this->m_DGData.MonsterIndex[i]].X < g_DGPortal[this->m_DGData.MapNumber-65].StartX +3 )

  00020	0f bf 07	 movsx	 eax, WORD PTR [edi]
  00023	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  00029	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00035	8d 8c 09 7e ff
	ff ff		 lea	 ecx, DWORD PTR [ecx+ecx-130]
  0003c	0f b6 99 00 00
	00 00		 movzx	 ebx, BYTE PTR _g_DGPortal[ecx]
  00043	0f bf 90 44 01
	00 00		 movsx	 edx, WORD PTR [eax+324]
  0004a	83 c3 fd	 add	 ebx, -3			; fffffffdH
  0004d	3b d3		 cmp	 edx, ebx
  0004f	7e 6b		 jle	 SHORT $LN10@CheckPosit
  00051	0f b6 99 00 00
	00 00		 movzx	 ebx, BYTE PTR _g_DGPortal[ecx]
  00058	83 c3 03	 add	 ebx, 3
  0005b	3b d3		 cmp	 edx, ebx
  0005d	7d 5d		 jge	 SHORT $LN10@CheckPosit

; 768  : 		{
; 769  : 			if(gObj[this->m_DGData.MonsterIndex[i]].Y > g_DGPortal[this->m_DGData.MapNumber-65].StartY - 5 &&
; 770  : 				gObj[this->m_DGData.MonsterIndex[i]].Y < g_DGPortal[this->m_DGData.MapNumber-65].StartY +5 )

  0005f	0f b6 89 01 00
	00 00		 movzx	 ecx, BYTE PTR _g_DGPortal[ecx+1]
  00066	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]
  0006d	8d 59 fb	 lea	 ebx, DWORD PTR [ecx-5]
  00070	3b d3		 cmp	 edx, ebx
  00072	7e 48		 jle	 SHORT $LN10@CheckPosit
  00074	83 c1 05	 add	 ecx, 5
  00077	3b d1		 cmp	 edx, ecx
  00079	7d 41		 jge	 SHORT $LN10@CheckPosit

; 771  : 			{
; 772  : 				gObj[this->m_DGData.MonsterIndex[i]].m_ViewSkillState[105] = 1;

  0007b	bb 01 00 00 00	 mov	 ebx, 1
  00080	88 98 23 22 00
	00		 mov	 BYTE PTR [eax+8739], bl

; 773  : 				//BuffEffectC.EnableBuff(this->m_DGData.MonsterIndex[i], 105, -1, 0, 0, 0);
; 774  : 				gObjDel(this->m_DGData.MonsterIndex[i]);

  00086	0f bf 17	 movsx	 edx, WORD PTR [edi]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 775  : 				this->m_DGData.MonsterIndex[i] = -1;

  0008f	83 c8 ff	 or	 eax, -1
  00092	66 89 07	 mov	 WORD PTR [edi], ax

; 776  : 				--this->m_DGData.MonsterCount;

  00095	fe 4e 46	 dec	 BYTE PTR [esi+70]

; 777  : 				++this->m_DGData.MonsterPassed;

  00098	00 5e 47	 add	 BYTE PTR [esi+71], bl
  0009b	83 c4 04	 add	 esp, 4

; 778  : 				this->SetMonsterCountOnInterface();

  0009e	8b ce		 mov	 ecx, esi
  000a0	e8 00 00 00 00	 call	 ?SetMonsterCountOnInterface@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetMonsterCountOnInterface

; 779  : 				LogAddTD("[DoppelGanger] Increase Monster Passed: (%d/%d)", this->m_DGData.MonsterPassed, GOER_MAX_PASS_PORTAL);

  000a5	0f b6 4e 47	 movzx	 ecx, BYTE PTR [esi+71]
  000a9	6a 03		 push	 3
  000ab	51		 push	 ecx
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@OOOKDDFK@?$FLDoppelGanger?$FN?5Increase?5Monster?5@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ba	eb 05		 jmp	 SHORT $LN4@CheckPosit
$LN10@CheckPosit:
  000bc	bb 01 00 00 00	 mov	 ebx, 1
$LN4@CheckPosit:

; 764  : 	for(int i=0;i<200;++i)

  000c1	83 c7 02	 add	 edi, 2
  000c4	29 5d fc	 sub	 DWORD PTR tv153[ebp], ebx
  000c7	0f 85 53 ff ff
	ff		 jne	 $LL5@CheckPosit
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx

; 780  : 			}
; 781  : 		}
; 782  : 	}
; 783  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
?CheckPosition@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::CheckPosition
_TEXT	ENDS
PUBLIC	?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z	; CDoppelGanger::SendResultMessage
; Function compile flags: /Ogtp
;	COMDAT ?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z
_TEXT	SEGMENT
_pResult$ = -8						; size = 5
_Result$ = 8						; size = 1
_SendForAll$ = 12					; size = 1
_aIndex$ = 16						; size = 4
?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z PROC	; CDoppelGanger::SendResultMessage, COMDAT
; _this$ = ecx

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 787  : 	PMSG_DGOER_END pResult;
; 788  : 
; 789  : 	PHeadSubSetB((LPBYTE)&pResult, 0xBF, 0x13, sizeof(pResult));

  00007	6a 05		 push	 5
  00009	6a 13		 push	 19			; 00000013H
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _pResult$[ebp]
  0000e	68 bf 00 00 00	 push	 191			; 000000bfH
  00013	50		 push	 eax
  00014	8b f1		 mov	 esi, ecx
  00016	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 790  : 
; 791  : 	pResult.Status = Result;

  0001b	8a 4d 08	 mov	 cl, BYTE PTR _Result$[ebp]
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 792  : 
; 793  : 	if(SendForAll)

  00021	80 7d 0c 00	 cmp	 BYTE PTR _SendForAll$[ebp], 0
  00025	88 4d fc	 mov	 BYTE PTR _pResult$[ebp+4], cl
  00028	74 17		 je	 SHORT $LN2@SendResult

; 794  : 	{
; 795  : 		this->SendDoppelGangerPlayer((LPBYTE)&pResult, pResult.h.size);

  0002a	0f b6 55 f9	 movzx	 edx, BYTE PTR _pResult$[ebp+1]
  0002e	52		 push	 edx
  0002f	8d 45 f8	 lea	 eax, DWORD PTR _pResult$[ebp]
  00032	50		 push	 eax
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer
  0003a	5e		 pop	 esi

; 800  : 	}
; 801  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SendResult:

; 796  : 	}
; 797  : 	else
; 798  : 	{
; 799  : 		DataSend(aIndex, (LPBYTE)&pResult, pResult.h.size);

  00041	0f b6 4d f9	 movzx	 ecx, BYTE PTR _pResult$[ebp+1]
  00045	8b 45 10	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00048	51		 push	 ecx
  00049	8d 55 f8	 lea	 edx, DWORD PTR _pResult$[ebp]
  0004c	52		 push	 edx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	5e		 pop	 esi

; 800  : 	}
; 801  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z ENDP	; CDoppelGanger::SendResultMessage
_TEXT	ENDS
PUBLIC	?DeleteMonster@CDoppelGanger@@QAEXXZ		; CDoppelGanger::DeleteMonster
; Function compile flags: /Ogtp
;	COMDAT ?DeleteMonster@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?DeleteMonster@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::DeleteMonster, COMDAT
; _this$ = ecx

; 804  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 805  : 	for(int i=0;i<200;++i)

  00005	8d 7e 68	 lea	 edi, DWORD PTR [esi+104]
  00008	bb c8 00 00 00	 mov	 ebx, 200		; 000000c8H
  0000d	8d 49 00	 npad	 3
$LL12@DeleteMons:

; 806  : 	{
; 807  : 		if(this->m_DGData.MonsterIndex[i] != -1)

  00010	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00013	66 83 f8 ff	 cmp	 ax, -1
  00017	74 13		 je	 SHORT $LN11@DeleteMons

; 808  : 		{
; 809  : 			gObjDel(this->m_DGData.MonsterIndex[i]);

  00019	98		 cwde
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 810  : 			this->m_DGData.MonsterIndex[i] = -1;

  00020	83 c9 ff	 or	 ecx, -1
  00023	83 c4 04	 add	 esp, 4
  00026	66 89 0f	 mov	 WORD PTR [edi], cx

; 811  : 			--this->m_DGData.MonsterCount;

  00029	fe 4e 46	 dec	 BYTE PTR [esi+70]
$LN11@DeleteMons:

; 805  : 	for(int i=0;i<200;++i)

  0002c	83 c7 02	 add	 edi, 2
  0002f	4b		 dec	 ebx
  00030	75 de		 jne	 SHORT $LL12@DeleteMons

; 812  : 		}
; 813  : 	}
; 814  : 	if(this->m_DGData.ButcherIndex >= 0)

  00032	0f b7 46 4e	 movzx	 eax, WORD PTR [esi+78]
  00036	66 85 c0	 test	 ax, ax
  00039	78 0c		 js	 SHORT $LN8@DeleteMons

; 815  : 		gObjDel(this->m_DGData.ButcherIndex);

  0003b	0f bf d0	 movsx	 edx, ax
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00044	83 c4 04	 add	 esp, 4
$LN8@DeleteMons:

; 816  : 	if(this->m_DGData.AngryButcherIndex >= 0)

  00047	0f b7 46 50	 movzx	 eax, WORD PTR [esi+80]
  0004b	66 85 c0	 test	 ax, ax
  0004e	78 0a		 js	 SHORT $LN7@DeleteMons

; 817  : 		gObjDel(this->m_DGData.AngryButcherIndex);

  00050	98		 cwde
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00057	83 c4 04	 add	 esp, 4
$LN7@DeleteMons:

; 818  : 	if(this->m_DGData.IceWalkerIndex >= 0)

  0005a	0f b7 46 52	 movzx	 eax, WORD PTR [esi+82]
  0005e	66 85 c0	 test	 ax, ax
  00061	78 0c		 js	 SHORT $LN6@DeleteMons

; 819  : 		gObjDel(this->m_DGData.IceWalkerIndex);

  00063	0f bf c8	 movsx	 ecx, ax
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0006c	83 c4 04	 add	 esp, 4
$LN6@DeleteMons:

; 820  : 
; 821  : 	this->m_DGData.SilverBoxIndex[0] = -1;

  0006f	83 ca ff	 or	 edx, -1

; 822  : 	this->m_DGData.SilverBoxIndex[1] = -1;

  00072	0b c2		 or	 eax, edx

; 823  : 	this->m_DGData.SilverBoxIndex[2] = -1;

  00074	0b ca		 or	 ecx, edx
  00076	66 89 96 02 02
	00 00		 mov	 WORD PTR [esi+514], dx
  0007d	66 89 86 04 02
	00 00		 mov	 WORD PTR [esi+516], ax
  00084	66 89 8e 06 02
	00 00		 mov	 WORD PTR [esi+518], cx

; 824  : 
; 825  : 	for(int i=0;i<OBJ_MAXMONSTER;++i)

  0008b	33 ff		 xor	 edi, edi
  0008d	33 f6		 xor	 esi, esi
  0008f	90		 npad	 1
$LL5@DeleteMons:

; 826  : 	{
; 827  : 		if(gObj[i].Class == 541 || gObj[i].Class == 532)

  00090	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00096	0f b7 84 16 b8
	00 00 00	 movzx	 eax, WORD PTR [esi+edx+184]
  0009e	b9 1d 02 00 00	 mov	 ecx, 541		; 0000021dH
  000a3	66 3b c1	 cmp	 ax, cx
  000a6	74 0a		 je	 SHORT $LN1@DeleteMons
  000a8	ba 14 02 00 00	 mov	 edx, 532		; 00000214H
  000ad	66 3b c2	 cmp	 ax, dx
  000b0	75 09		 jne	 SHORT $LN4@DeleteMons
$LN1@DeleteMons:

; 828  : 			gObjDel(i);

  000b2	57		 push	 edi
  000b3	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  000b8	83 c4 04	 add	 esp, 4
$LN4@DeleteMons:

; 824  : 
; 825  : 	for(int i=0;i<OBJ_MAXMONSTER;++i)

  000bb	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  000c1	47		 inc	 edi
  000c2	81 fe 80 76 97
	08		 cmp	 esi, 144144000		; 08977680H
  000c8	7c c6		 jl	 SHORT $LL5@DeleteMons

; 829  : 	}
; 830  : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	c3		 ret	 0
?DeleteMonster@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::DeleteMonster
_TEXT	ENDS
PUBLIC	??_C@_0CN@JCFIIPPC@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5Bu@ ; `string'
PUBLIC	?CreateButcher@CDoppelGanger@@QAEXXZ		; CDoppelGanger::CreateButcher
;	COMDAT ??_C@_0CN@JCFIIPPC@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5Bu@
CONST	SEGMENT
??_C@_0CN@JCFIIPPC@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5Bu@ DB '[Doppe'
	DB	'lGanger] Current Phaze: Butcher Attack', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateButcher@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?CreateButcher@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::CreateButcher, COMDAT
; _this$ = ecx

; 833  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 834  : 	if(this->m_DGData.ButcherIndex >= 0) gObjDel(this->m_DGData.ButcherIndex);

  00003	0f b7 46 4e	 movzx	 eax, WORD PTR [esi+78]
  00007	66 85 c0	 test	 ax, ax
  0000a	78 0a		 js	 SHORT $LN2@CreateButc
  0000c	98		 cwde
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00013	83 c4 04	 add	 esp, 4
$LN2@CreateButc:

; 835  : 	this->m_DGData.ButcherIndex = gObjAddMonster(this->m_DGData.MapNumber);

  00016	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00022	83 c4 04	 add	 esp, 4
  00025	66 89 46 4e	 mov	 WORD PTR [esi+78], ax

; 836  : 	if(this->m_DGData.ButcherIndex >= 0)

  00029	66 85 c0	 test	 ax, ax
  0002c	0f 88 a6 00 00
	00		 js	 $LN1@CreateButc

; 837  : 	{
; 838  : 		gObj[this->m_DGData.ButcherIndex].MapNumber = this->m_DGData.MapNumber;

  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00038	0f bf d0	 movsx	 edx, ax
  0003b	8a 86 10 02 00
	00		 mov	 al, BYTE PTR [esi+528]
  00041	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00047	88 84 0a 49 01
	00 00		 mov	 BYTE PTR [edx+ecx+329], al

; 839  : 		gObj[this->m_DGData.ButcherIndex].X = this->MPOSX[this->m_DGData.MapNumber-65];

  0004e	0f bf 46 4e	 movsx	 eax, WORD PTR [esi+78]
  00052	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  00058	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0005e	66 8b 8c 96 20
	ff ff ff	 mov	 cx, WORD PTR [esi+edx*4-224]
  00066	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006c	66 89 8c 10 44
	01 00 00	 mov	 WORD PTR [eax+edx+324], cx

; 840  : 		gObj[this->m_DGData.ButcherIndex].Y = this->MPOSY[this->m_DGData.MapNumber-65];

  00074	0f bf 4e 4e	 movsx	 ecx, WORD PTR [esi+78]
  00078	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  0007e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00084	66 8b 94 86 30
	ff ff ff	 mov	 dx, WORD PTR [esi+eax*4-208]
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00091	66 89 94 01 46
	01 00 00	 mov	 WORD PTR [ecx+eax+326], dx

; 841  : 		gObj[this->m_DGData.ButcherIndex].m_MoveRange = 30;

  00099	0f bf 4e 4e	 movsx	 ecx, WORD PTR [esi+78]
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a2	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000a8	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  000ad	66 89 94 01 ae
	04 00 00	 mov	 WORD PTR [ecx+eax+1198], dx

; 842  : 		++this->m_DGData.PhazesPassed;
; 843  : 		gObjSetMonster(this->m_DGData.ButcherIndex, 530);

  000b5	0f bf 4e 4e	 movsx	 ecx, WORD PTR [esi+78]
  000b9	fe 86 23 02 00
	00		 inc	 BYTE PTR [esi+547]
  000bf	68 12 02 00 00	 push	 530			; 00000212H
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 844  : 
; 845  : 		LogAddTD("[DoppelGanger] Current Phaze: Butcher Attack");

  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@JCFIIPPC@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5Bu@
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CreateButc:
  000d8	5e		 pop	 esi

; 846  : 	}
; 847  : }

  000d9	c3		 ret	 0
?CreateButcher@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::CreateButcher
_TEXT	ENDS
PUBLIC	??_C@_0DD@NJFAEIED@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5An@ ; `string'
PUBLIC	?CreateAngryButcher@CDoppelGanger@@QAEXXZ	; CDoppelGanger::CreateAngryButcher
;	COMDAT ??_C@_0DD@NJFAEIED@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5An@
CONST	SEGMENT
??_C@_0DD@NJFAEIED@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5An@ DB '[Doppe'
	DB	'lGanger] Current Phaze: Angry Butcher Attack', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateAngryButcher@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?CreateAngryButcher@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::CreateAngryButcher, COMDAT
; _this$ = ecx

; 850  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 851  : 	if(this->m_DGData.AngryButcherIndex >= 0) gObjDel(this->m_DGData.AngryButcherIndex);

  00003	0f b7 46 50	 movzx	 eax, WORD PTR [esi+80]
  00007	66 85 c0	 test	 ax, ax
  0000a	78 0a		 js	 SHORT $LN2@CreateAngr
  0000c	98		 cwde
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00013	83 c4 04	 add	 esp, 4
$LN2@CreateAngr:

; 852  : 	this->m_DGData.AngryButcherIndex = gObjAddMonster(this->m_DGData.MapNumber);

  00016	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00022	83 c4 04	 add	 esp, 4
  00025	66 89 46 50	 mov	 WORD PTR [esi+80], ax

; 853  : 	if(this->m_DGData.AngryButcherIndex >= 0)

  00029	66 85 c0	 test	 ax, ax
  0002c	0f 88 a6 00 00
	00		 js	 $LN1@CreateAngr

; 854  : 	{
; 855  : 		gObj[this->m_DGData.AngryButcherIndex].MapNumber = this->m_DGData.MapNumber;

  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00038	0f bf d0	 movsx	 edx, ax
  0003b	8a 86 10 02 00
	00		 mov	 al, BYTE PTR [esi+528]
  00041	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00047	88 84 0a 49 01
	00 00		 mov	 BYTE PTR [edx+ecx+329], al

; 856  : 		gObj[this->m_DGData.AngryButcherIndex].X = this->MPOSX[this->m_DGData.MapNumber-65];

  0004e	0f bf 46 50	 movsx	 eax, WORD PTR [esi+80]
  00052	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  00058	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0005e	66 8b 8c 96 20
	ff ff ff	 mov	 cx, WORD PTR [esi+edx*4-224]
  00066	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006c	66 89 8c 10 44
	01 00 00	 mov	 WORD PTR [eax+edx+324], cx

; 857  : 		gObj[this->m_DGData.AngryButcherIndex].Y = this->MPOSY[this->m_DGData.MapNumber-65];

  00074	0f bf 4e 50	 movsx	 ecx, WORD PTR [esi+80]
  00078	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  0007e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00084	66 8b 94 86 30
	ff ff ff	 mov	 dx, WORD PTR [esi+eax*4-208]
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00091	66 89 94 01 46
	01 00 00	 mov	 WORD PTR [ecx+eax+326], dx

; 858  : 		gObj[this->m_DGData.AngryButcherIndex].m_MoveRange = 30;

  00099	0f bf 4e 50	 movsx	 ecx, WORD PTR [esi+80]
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a2	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000a8	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  000ad	66 89 94 01 ae
	04 00 00	 mov	 WORD PTR [ecx+eax+1198], dx

; 859  : 		++this->m_DGData.PhazesPassed;
; 860  : 		gObjSetMonster(this->m_DGData.AngryButcherIndex, 529);

  000b5	0f bf 4e 50	 movsx	 ecx, WORD PTR [esi+80]
  000b9	fe 86 23 02 00
	00		 inc	 BYTE PTR [esi+547]
  000bf	68 11 02 00 00	 push	 529			; 00000211H
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 861  : 
; 862  : 		LogAddTD("[DoppelGanger] Current Phaze: Angry Butcher Attack");

  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@NJFAEIED@?$FLDoppelGanger?$FN?5Current?5Phaze?3?5An@
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CreateAngr:
  000d8	5e		 pop	 esi

; 863  : 	}
; 864  : }

  000d9	c3		 ret	 0
?CreateAngryButcher@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::CreateAngryButcher
_TEXT	ENDS
PUBLIC	??_C@_0BK@PNNNMAGF@ICE?5Walker?5has?5been?5Spawn?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CreateIceWalker@CDoppelGanger@@QAEXXZ		; CDoppelGanger::CreateIceWalker
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
;	COMDAT ??_C@_0BK@PNNNMAGF@ICE?5Walker?5has?5been?5Spawn?$AA@
CONST	SEGMENT
??_C@_0BK@PNNNMAGF@ICE?5Walker?5has?5been?5Spawn?$AA@ DB 'ICE Walker has '
	DB	'been Spawn', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateIceWalker@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
_pNotice$213618 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?CreateIceWalker@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::CreateIceWalker, COMDAT
; _this$ = ecx

; 867  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 868  : 	if(this->m_DGData.IceWalkerIndex >= 0) gObjDel(this->m_DGData.IceWalkerIndex);

  00016	0f b7 46 52	 movzx	 eax, WORD PTR [esi+82]
  0001a	66 85 c0	 test	 ax, ax
  0001d	78 0a		 js	 SHORT $LN2@CreateIceW
  0001f	98		 cwde
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00026	83 c4 04	 add	 esp, 4
$LN2@CreateIceW:

; 869  : 	this->m_DGData.IceWalkerIndex = gObjAddMonster(this->m_DGData.MapNumber);

  00029	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00035	83 c4 04	 add	 esp, 4
  00038	66 89 46 52	 mov	 WORD PTR [esi+82], ax

; 870  : 	if(this->m_DGData.IceWalkerIndex >= 0)

  0003c	66 85 c0	 test	 ax, ax
  0003f	0f 88 d0 00 00
	00		 js	 $LN1@CreateIceW

; 871  : 	{
; 872  : 		gObj[this->m_DGData.IceWalkerIndex].MapNumber = this->m_DGData.MapNumber;

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004b	0f bf d0	 movsx	 edx, ax
  0004e	8a 86 10 02 00
	00		 mov	 al, BYTE PTR [esi+528]
  00054	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  0005a	88 84 0a 49 01
	00 00		 mov	 BYTE PTR [edx+ecx+329], al

; 873  : 		gObj[this->m_DGData.IceWalkerIndex].X = this->MPOSX[this->m_DGData.MapNumber-65];

  00061	0f bf 46 52	 movsx	 eax, WORD PTR [esi+82]
  00065	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  0006b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00071	66 8b 8c 96 20
	ff ff ff	 mov	 cx, WORD PTR [esi+edx*4-224]
  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007f	66 89 8c 10 44
	01 00 00	 mov	 WORD PTR [eax+edx+324], cx

; 874  : 		gObj[this->m_DGData.IceWalkerIndex].Y = this->MPOSY[this->m_DGData.MapNumber-65];

  00087	0f bf 4e 52	 movsx	 ecx, WORD PTR [esi+82]
  0008b	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  00091	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00097	66 8b 94 86 30
	ff ff ff	 mov	 dx, WORD PTR [esi+eax*4-208]
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a4	66 89 94 01 46
	01 00 00	 mov	 WORD PTR [ecx+eax+326], dx

; 875  : 		gObj[this->m_DGData.IceWalkerIndex].m_MoveRange = 30;

  000ac	0f bf 4e 52	 movsx	 ecx, WORD PTR [esi+82]
  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b5	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000bb	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  000c0	66 89 94 01 ae
	04 00 00	 mov	 WORD PTR [ecx+eax+1198], dx

; 876  : 		++this->m_DGData.PhazesPassed;
; 877  : 		this->m_DGData.IceWalkerPhazeTime = 90;
; 878  : 		gObjSetMonster(this->m_DGData.IceWalkerIndex, 531);

  000c8	0f bf 56 52	 movsx	 edx, WORD PTR [esi+82]
  000cc	fe 86 23 02 00
	00		 inc	 BYTE PTR [esi+547]
  000d2	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  000d7	68 13 02 00 00	 push	 531			; 00000213H
  000dc	52		 push	 edx
  000dd	66 89 8e 1e 02
	00 00		 mov	 WORD PTR [esi+542], cx
  000e4	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 879  : 
; 880  : 		PMSG_NOTICE pNotice;
; 881  : 		TNotice::MakeNoticeMsg(&pNotice, 0, "ICE Walker has been Spawn");

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PNNNMAGF@ICE?5Walker?5has?5been?5Spawn?$AA@
  000ee	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$213618[ebp]
  000f4	6a 00		 push	 0
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 882  : 		this->SendDoppelGangerPlayer((LPBYTE)&pNotice, pNotice.h.size);

  000fc	0f b6 8d ed fe
	ff ff		 movzx	 ecx, BYTE PTR _pNotice$213618[ebp+1]
  00103	83 c4 14	 add	 esp, 20			; 00000014H
  00106	51		 push	 ecx
  00107	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$213618[ebp]
  0010d	52		 push	 edx
  0010e	8b ce		 mov	 ecx, esi
  00110	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer
$LN1@CreateIceW:

; 883  : 	}
; 884  : }

  00115	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00118	33 cd		 xor	 ecx, ebp
  0011a	5e		 pop	 esi
  0011b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
?CreateIceWalker@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::CreateIceWalker
_TEXT	ENDS
PUBLIC	?CreateSilverChest@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::CreateSilverChest
; Function compile flags: /Ogtp
;	COMDAT ?CreateSilverChest@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv152 = 8						; size = 4
_lpObj$ = 8						; size = 4
?CreateSilverChest@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::CreateSilverChest, COMDAT
; _this$ = ecx

; 887  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 888  : 	if(this->IsDGMonster(lpObj))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	57		 push	 edi
  00009	8b d9		 mov	 ebx, ecx
  0000b	e8 00 00 00 00	 call	 ?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::IsDGMonster
  00010	84 c0		 test	 al, al
  00012	0f 84 b4 00 00
	00		 je	 $LN4@CreateSilv

; 889  : 	{
; 890  : 		for(int i=0;i<3;++i)

  00018	56		 push	 esi
  00019	8d b3 02 02 00
	00		 lea	 esi, DWORD PTR [ebx+514]
  0001f	c7 45 08 03 00
	00 00		 mov	 DWORD PTR tv152[ebp], 3
  00026	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL3@CreateSilv:

; 891  : 		{
; 892  : 			this->m_DGData.SilverBoxIndex[i] = gObjAddMonster(this->m_DGData.MapNumber);

  00030	8b 83 10 02 00
	00		 mov	 eax, DWORD PTR [ebx+528]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster

; 893  : 			gObj[this->m_DGData.SilverBoxIndex[i]].MapNumber = lpObj->MapNumber;

  0003c	0f bf c8	 movsx	 ecx, ax
  0003f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00045	66 89 06	 mov	 WORD PTR [esi], ax
  00048	8a 97 49 01 00
	00		 mov	 dl, BYTE PTR [edi+329]
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00053	88 94 01 49 01
	00 00		 mov	 BYTE PTR [ecx+eax+329], dl

; 894  : 			gObj[this->m_DGData.SilverBoxIndex[i]].X = lpObj->X;

  0005a	0f bf 0e	 movsx	 ecx, WORD PTR [esi]
  0005d	66 8b 97 44 01
	00 00		 mov	 dx, WORD PTR [edi+324]
  00064	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006f	66 89 94 01 44
	01 00 00	 mov	 WORD PTR [ecx+eax+324], dx

; 895  : 			gObj[this->m_DGData.SilverBoxIndex[i]].Y = lpObj->Y+rand()%2;

  00077	e8 00 00 00 00	 call	 _rand
  0007c	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00081	79 05		 jns	 SHORT $LN9@CreateSilv
  00083	48		 dec	 eax
  00084	83 c8 fe	 or	 eax, -2			; fffffffeH
  00087	40		 inc	 eax
$LN9@CreateSilv:
  00088	0f bf 0e	 movsx	 ecx, WORD PTR [esi]
  0008b	66 03 87 46 01
	00 00		 add	 ax, WORD PTR [edi+326]
  00092	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009e	66 89 84 11 46
	01 00 00	 mov	 WORD PTR [ecx+edx+326], ax

; 896  : 			gObjSetMonster(this->m_DGData.SilverBoxIndex[i], 541);

  000a6	0f bf 06	 movsx	 eax, WORD PTR [esi]
  000a9	68 1d 02 00 00	 push	 541			; 0000021dH
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b7	83 c6 02	 add	 esi, 2
  000ba	ff 4d 08	 dec	 DWORD PTR tv152[ebp]
  000bd	0f 85 6d ff ff
	ff		 jne	 $LL3@CreateSilv

; 897  : 		}
; 898  : 		return true;

  000c3	5e		 pop	 esi
  000c4	5f		 pop	 edi
  000c5	b0 01		 mov	 al, 1
  000c7	5b		 pop	 ebx

; 901  : }

  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN4@CreateSilv:
  000cc	5f		 pop	 edi

; 899  : 	}
; 900  : 	return false;

  000cd	32 c0		 xor	 al, al
  000cf	5b		 pop	 ebx

; 901  : }

  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?CreateSilverChest@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::CreateSilverChest
_TEXT	ENDS
PUBLIC	?DeadUserProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::DeadUserProc
; Function compile flags: /Ogtp
;	COMDAT ?DeadUserProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?DeadUserProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::DeadUserProc, COMDAT
; _this$ = ecx

; 904  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 905  : 	unsigned char index = -1;
; 906  : 
; 907  : 	for(int i=0;i<5;++i)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00009	8b 37		 mov	 esi, DWORD PTR [edi]
  0000b	80 cb ff	 or	 bl, 255			; 000000ffH
  0000e	33 c0		 xor	 eax, eax
  00010	8d 51 54	 lea	 edx, DWORD PTR [ecx+84]
$LL5@DeadUserPr:

; 908  : 	{
; 909  : 		if(this->m_DGData.PlayerIndex[i] == lpObj->m_Index)

  00013	39 32		 cmp	 DWORD PTR [edx], esi
  00015	74 0b		 je	 SHORT $LN9@DeadUserPr

; 905  : 	unsigned char index = -1;
; 906  : 
; 907  : 	for(int i=0;i<5;++i)

  00017	40		 inc	 eax
  00018	83 c2 04	 add	 edx, 4
  0001b	83 f8 05	 cmp	 eax, 5
  0001e	7c f3		 jl	 SHORT $LL5@DeadUserPr

; 908  : 	{
; 909  : 		if(this->m_DGData.PlayerIndex[i] == lpObj->m_Index)

  00020	eb 02		 jmp	 SHORT $LN3@DeadUserPr
$LN9@DeadUserPr:

; 910  : 		{
; 911  : 			index = i;

  00022	8a d8		 mov	 bl, al
$LN3@DeadUserPr:

; 912  : 			break;
; 913  : 		}
; 914  : 	}
; 915  : 	if(index == -1)

  00024	0f b6 c3	 movzx	 eax, bl
  00027	83 f8 ff	 cmp	 eax, -1
  0002a	74 17		 je	 SHORT $LN6@DeadUserPr

; 916  : 	{
; 917  : 		return;
; 918  : 	}
; 919  : 
; 920  : 	this->m_DGData.PlayerIndex[index] = -1;

  0002c	c7 44 81 54 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+84], -1

; 921  : 	--this->m_DGData.PlayerCount;

  00034	fe 49 44	 dec	 BYTE PTR [ecx+68]

; 922  : 
; 923  : 	this->SendResultMessage(DG_RESULT_DEAD_PLAYER, false, lpObj->m_Index);

  00037	8b 07		 mov	 eax, DWORD PTR [edi]
  00039	50		 push	 eax
  0003a	6a 00		 push	 0
  0003c	6a 01		 push	 1
  0003e	e8 00 00 00 00	 call	 ?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z ; CDoppelGanger::SendResultMessage
$LN6@DeadUserPr:
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx

; 924  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?DeadUserProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::DeadUserProc
_TEXT	ENDS
PUBLIC	??_C@_0DH@CGFAOOPN@?$FLDoppelGanger?$FN?5Spawn?5Golden?5Larv@ ; `string'
PUBLIC	?CreateGoldenLarva@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::CreateGoldenLarva
;	COMDAT ??_C@_0DH@CGFAOOPN@?$FLDoppelGanger?$FN?5Spawn?5Golden?5Larv@
CONST	SEGMENT
??_C@_0DH@CGFAOOPN@?$FLDoppelGanger?$FN?5Spawn?5Golden?5Larv@ DB '[Doppel'
	DB	'Ganger] Spawn Golden Larva Trap (%d) (%d/%d/%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateGoldenLarva@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv140 = 8						; size = 4
_lpObj$ = 8						; size = 4
?CreateGoldenLarva@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::CreateGoldenLarva, COMDAT
; _this$ = ecx

; 927  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 928  : 	int index;
; 929  : 	for(int i=0;i<2;++i)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	c7 45 08 02 00
	00 00		 mov	 DWORD PTR tv140[ebp], 2
$LL4@CreateGold:

; 930  : 	{
; 931  : 		index = gObjAddMonster(lpObj->MapNumber);

  00010	0f b6 83 49 01
	00 00		 movzx	 eax, BYTE PTR [ebx+329]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0001d	0f bf f8	 movsx	 edi, ax
  00020	83 c4 04	 add	 esp, 4

; 932  : 		if(index >= 0)

  00023	85 ff		 test	 edi, edi
  00025	78 7e		 js	 SHORT $LN3@CreateGold

; 933  : 		{
; 934  : 			gObj[index].MapNumber = lpObj->MapNumber;

  00027	8a 8b 49 01 00
	00		 mov	 cl, BYTE PTR [ebx+329]
  0002d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	8b f7		 mov	 esi, edi
  00035	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0003b	88 8c 16 49 01
	00 00		 mov	 BYTE PTR [esi+edx+329], cl

; 935  : 			gObj[index].X = lpObj->X;

  00042	66 8b 83 44 01
	00 00		 mov	 ax, WORD PTR [ebx+324]
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004f	66 89 84 0e 44
	01 00 00	 mov	 WORD PTR [esi+ecx+324], ax

; 936  : 			gObj[index].Y = lpObj->Y;

  00057	66 8b 93 46 01
	00 00		 mov	 dx, WORD PTR [ebx+326]
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 937  : 			gObjSetMonster(index, 532);

  00063	68 14 02 00 00	 push	 532			; 00000214H
  00068	57		 push	 edi
  00069	66 89 94 06 46
	01 00 00	 mov	 WORD PTR [esi+eax+326], dx
  00071	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 938  : 			LogAddTD("[DoppelGanger] Spawn Golden Larva Trap (%d) (%d/%d/%d)", index, gObj[index].MapNumber, gObj[index].X, gObj[index].Y);

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007b	0f bf 8c 06 46
	01 00 00	 movsx	 ecx, WORD PTR [esi+eax+326]
  00083	0f bf 94 06 44
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+324]
  0008b	0f b6 84 06 49
	01 00 00	 movzx	 eax, BYTE PTR [esi+eax+329]
  00093	51		 push	 ecx
  00094	52		 push	 edx
  00095	50		 push	 eax
  00096	57		 push	 edi
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@CGFAOOPN@?$FLDoppelGanger?$FN?5Spawn?5Golden?5Larv@
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a2	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@CreateGold:

; 928  : 	int index;
; 929  : 	for(int i=0;i<2;++i)

  000a5	ff 4d 08	 dec	 DWORD PTR tv140[ebp]
  000a8	0f 85 62 ff ff
	ff		 jne	 $LL4@CreateGold
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx

; 939  : 		}
; 940  : 	}
; 941  : }

  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
?CreateGoldenLarva@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::CreateGoldenLarva
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?SilverChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::SilverChestOpen
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	?DropSilverChestItem@CItemBagZt@@QAEHHEEE@Z:PROC ; CItemBagZt::DropSilverChestItem
EXTRN	?SilverChestItemBag@@3PAVCItemBagZt@@A:DWORD	; SilverChestItemBag
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SilverChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpChest$ = 8						; size = 4
?SilverChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::SilverChestOpen, COMDAT
; _this$ = ecx

; 944  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 945  : 	if(rand()%10000 < DGSilverChestOpenRate)

  00008	e8 00 00 00 00	 call	 _rand
  0000d	99		 cdq
  0000e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00013	f7 f9		 idiv	 ecx

; 946  : 	{
; 947  : 		SilverChestItemBag->DropSilverChestItem(lpChest->m_Index, lpChest->MapNumber, lpChest->X, lpChest->Y);

  00015	8b 75 08	 mov	 esi, DWORD PTR _lpChest$[ebp]
  00018	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?DGSilverChestOpenRate@@3HA ; DGSilverChestOpenRate
  0001e	7d 28		 jge	 SHORT $LN6@SilverChes
  00020	0f b6 96 46 01
	00 00		 movzx	 edx, BYTE PTR [esi+326]
  00027	0f b6 86 44 01
	00 00		 movzx	 eax, BYTE PTR [esi+324]
  0002e	0f b6 8e 49 01
	00 00		 movzx	 ecx, BYTE PTR [esi+329]
  00035	52		 push	 edx
  00036	8b 16		 mov	 edx, DWORD PTR [esi]
  00038	50		 push	 eax
  00039	51		 push	 ecx
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SilverChestItemBag@@3PAVCItemBagZt@@A ; SilverChestItemBag
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ?DropSilverChestItem@CItemBagZt@@QAEHHEEE@Z ; CItemBagZt::DropSilverChestItem

; 948  : 	}
; 949  : 	else

  00046	eb 08		 jmp	 SHORT $LN5@SilverChes
$LN6@SilverChes:

; 950  : 	{
; 951  : 		this->CreateGoldenLarva(lpChest);

  00048	56		 push	 esi
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?CreateGoldenLarva@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::CreateGoldenLarva
$LN5@SilverChes:

; 952  : 	}
; 953  : 	lpChest->Life = 0.0;

  00050	d9 ee		 fldz

; 954  : 	gObjLifeCheck(lpChest, lpChest, 1, 0, 0, 0, 0, 0);

  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  0005c	6a 00		 push	 0
  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	6a 01		 push	 1
  00064	56		 push	 esi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  0006b	83 c4 20	 add	 esp, 32			; 00000020H
  0006e	81 c7 02 02 00
	00		 add	 edi, 514		; 00000202H
  00074	bb 03 00 00 00	 mov	 ebx, 3
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL4@SilverChes:

; 956  : 	{
; 957  : 		if(this->m_DGData.SilverBoxIndex[i] != lpChest->m_Index)

  00080	0f bf 07	 movsx	 eax, WORD PTR [edi]
  00083	3b 06		 cmp	 eax, DWORD PTR [esi]
  00085	74 09		 je	 SHORT $LN3@SilverChes

; 958  : 		{
; 959  : 			gObjDel(this->m_DGData.SilverBoxIndex[i]);

  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0008d	83 c4 04	 add	 esp, 4
$LN3@SilverChes:

; 955  : 	for(int i=0;i<3;++i)

  00090	83 c7 02	 add	 edi, 2
  00093	4b		 dec	 ebx
  00094	75 ea		 jne	 SHORT $LL4@SilverChes
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx

; 960  : 		}
; 961  : 	}
; 962  : }

  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
?SilverChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::SilverChestOpen
_TEXT	ENDS
PUBLIC	?CreateFinalChest@CDoppelGanger@@QAEXXZ		; CDoppelGanger::CreateFinalChest
; Function compile flags: /Ogtp
;	COMDAT ?CreateFinalChest@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
?CreateFinalChest@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::CreateFinalChest, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 966  : 	int index = -1;
; 967  : 	for(int i=0;i<5;++i)

  00009	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  0000c	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR tv72[ebp], 5
$LL5@CreateFina:

; 968  : 	{
; 969  : 		if(this->m_DGData.PlayerIndex[i] != -1)

  00013	83 3e ff	 cmp	 DWORD PTR [esi], -1
  00016	74 7b		 je	 SHORT $LN4@CreateFina

; 970  : 		{
; 971  : 			index = gObjAddMonster(this->m_DGData.MapNumber);

  00018	8b 87 10 02 00
	00		 mov	 eax, DWORD PTR [edi+528]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00024	0f bf c8	 movsx	 ecx, ax
  00027	83 c4 04	 add	 esp, 4

; 972  : 			if(index >= 0)

  0002a	85 c9		 test	 ecx, ecx
  0002c	78 65		 js	 SHORT $LN4@CreateFina

; 973  : 			{
; 974  : 				gObj[index].MapNumber = this->m_DGData.MapNumber;

  0002e	8a 97 10 02 00
	00		 mov	 dl, BYTE PTR [edi+528]
  00034	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003a	8b c1		 mov	 eax, ecx
  0003c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00042	88 94 18 49 01
	00 00		 mov	 BYTE PTR [eax+ebx+329], dl

; 975  : 				gObj[index].X = gObj[this->m_DGData.PlayerIndex[i]].X;

  00049	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0004b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00057	0f b7 9c 13 44
	01 00 00	 movzx	 ebx, WORD PTR [ebx+edx+324]
  0005f	66 89 9c 10 44
	01 00 00	 mov	 WORD PTR [eax+edx+324], bx

; 976  : 				gObj[index].Y = gObj[this->m_DGData.PlayerIndex[i]].Y;

  00067	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00069	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006f	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00075	0f b7 9c 13 46
	01 00 00	 movzx	 ebx, WORD PTR [ebx+edx+326]

; 977  : 				gObjSetMonster(index, 542);

  0007d	68 1e 02 00 00	 push	 542			; 0000021eH
  00082	51		 push	 ecx
  00083	66 89 9c 10 46
	01 00 00	 mov	 WORD PTR [eax+edx+326], bx
  0008b	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  00090	83 c4 08	 add	 esp, 8
$LN4@CreateFina:

; 966  : 	int index = -1;
; 967  : 	for(int i=0;i<5;++i)

  00093	83 c6 04	 add	 esi, 4
  00096	ff 4d fc	 dec	 DWORD PTR tv72[ebp]
  00099	0f 85 74 ff ff
	ff		 jne	 $LL5@CreateFina
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 978  : 			}
; 979  : 		}
; 980  : 	}
; 981  : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?CreateFinalChest@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::CreateFinalChest
_TEXT	ENDS
PUBLIC	?FinalChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::FinalChestOpen
EXTRN	?DropGoldenChestItem@CItemBagZt@@QAEHHEEE@Z:PROC ; CItemBagZt::DropGoldenChestItem
EXTRN	?GoldenChestItemBag@@3PAVCItemBagZt@@A:DWORD	; GoldenChestItemBag
; Function compile flags: /Ogtp
;	COMDAT ?FinalChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpChest$ = 8						; size = 4
?FinalChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::FinalChestOpen, COMDAT
; _this$ = ecx

; 984  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 985  : 	GoldenChestItemBag->DropGoldenChestItem(lpChest->m_Index, lpChest->MapNumber, lpChest->X, lpChest->Y);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpChest$[ebp]
  00007	0f b6 86 46 01
	00 00		 movzx	 eax, BYTE PTR [esi+326]
  0000e	0f b6 8e 44 01
	00 00		 movzx	 ecx, BYTE PTR [esi+324]
  00015	0f b6 96 49 01
	00 00		 movzx	 edx, BYTE PTR [esi+329]
  0001c	50		 push	 eax
  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	51		 push	 ecx
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?GoldenChestItemBag@@3PAVCItemBagZt@@A ; GoldenChestItemBag
  00026	52		 push	 edx
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?DropGoldenChestItem@CItemBagZt@@QAEHHEEE@Z ; CItemBagZt::DropGoldenChestItem

; 986  : 	lpChest->Life = 0.0;
; 987  : 	gObjLifeCheck(lpChest, lpChest, 1, 0, 0, 0, 0, 0);

  0002d	6a 00		 push	 0
  0002f	d9 ee		 fldz
  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	6a 01		 push	 1
  00041	56		 push	 esi
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  00048	83 c4 20	 add	 esp, 32			; 00000020H
  0004b	5e		 pop	 esi

; 988  : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?FinalChestOpen@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::FinalChestOpen
_TEXT	ENDS
PUBLIC	?CheckUsers@CDoppelGanger@@QAEXXZ		; CDoppelGanger::CheckUsers
; Function compile flags: /Ogtp
;	COMDAT ?CheckUsers@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?CheckUsers@CDoppelGanger@@QAEXXZ PROC			; CDoppelGanger::CheckUsers, COMDAT
; _this$ = ecx

; 991  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 992  : 	for(int i=0;i<5;++i)

  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	bb 05 00 00 00	 mov	 ebx, 5
  0000d	8d 49 00	 npad	 3
$LL6@CheckUsers:

; 993  : 	{
; 994  : 		if(this->m_DGData.PlayerIndex[i] != -1)

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	74 42		 je	 SHORT $LN5@CheckUsers

; 995  : 		{
; 996  : 			if(gObj[this->m_DGData.PlayerIndex[i]].MapNumber != this->m_DGData.MapNumber || !gObjIsConnectedGP(this->m_DGData.PlayerIndex[i]))

  00017	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	8b c8		 mov	 ecx, eax
  0001f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00025	0f b6 8c 11 49
	01 00 00	 movzx	 ecx, BYTE PTR [ecx+edx+329]
  0002d	3b 8f 10 02 00
	00		 cmp	 ecx, DWORD PTR [edi+528]
  00033	75 0d		 jne	 SHORT $LN1@CheckUsers
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  0003b	83 c4 04	 add	 esp, 4
  0003e	85 c0		 test	 eax, eax
  00040	75 17		 jne	 SHORT $LN5@CheckUsers
$LN1@CheckUsers:

; 997  : 			{
; 998  : 				this->SendResultMessage(DG_RESULT_DEAD_PLAYER, false, this->m_DGData.PlayerIndex[i]);

  00042	8b 16		 mov	 edx, DWORD PTR [esi]
  00044	52		 push	 edx
  00045	6a 00		 push	 0
  00047	6a 01		 push	 1
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z ; CDoppelGanger::SendResultMessage

; 999  : 				this->m_DGData.PlayerIndex[i] = -1;

  00050	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 1000 : 				--this->m_DGData.PlayerCount;

  00056	fe 4f 44	 dec	 BYTE PTR [edi+68]
$LN5@CheckUsers:

; 992  : 	for(int i=0;i<5;++i)

  00059	83 c6 04	 add	 esi, 4
  0005c	4b		 dec	 ebx
  0005d	75 b1		 jne	 SHORT $LL6@CheckUsers

; 1001 : 			}
; 1002 : 		}
; 1003 : 	}
; 1004 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	c3		 ret	 0
?CheckUsers@CDoppelGanger@@QAEXXZ ENDP			; CDoppelGanger::CheckUsers
_TEXT	ENDS
PUBLIC	??_C@_0CI@FOAGBNK@?$FLDoppelGanger?$FN?5ERROR?3?5EventLevel@ ; `string'
PUBLIC	?SetEventLevel@CDoppelGanger@@QAE_NXZ		; CDoppelGanger::SetEventLevel
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
;	COMDAT ??_C@_0CI@FOAGBNK@?$FLDoppelGanger?$FN?5ERROR?3?5EventLevel@
CONST	SEGMENT
??_C@_0CI@FOAGBNK@?$FLDoppelGanger?$FN?5ERROR?3?5EventLevel@ DB '[DoppelG'
	DB	'anger] ERROR: EventLevel == -1!', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetEventLevel@CDoppelGanger@@QAE_NXZ
_TEXT	SEGMENT
?SetEventLevel@CDoppelGanger@@QAE_NXZ PROC		; CDoppelGanger::SetEventLevel, COMDAT
; _this$ = ecx

; 1096 : 	if(!DGUseAutoStat)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DGUseAutoStat@@3HA, 0 ; DGUseAutoStat

; 1097 : 	{
; 1098 : 		return true;

  00007	0f 84 e2 00 00
	00		 je	 $LN22@SetEventLe

; 1099 : 	}
; 1100 : 	int temp = -1;
; 1101 : 	int level;
; 1102 : 	for(int i=0;i<5;++i)
; 1103 : 	{
; 1104 : 		if((level = (gObj[this->m_DGData.PlayerIndex[i]].Level + gObj[this->m_DGData.PlayerIndex[i]].MLevel)) > temp)

  0000d	56		 push	 esi
  0000e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00014	57		 push	 edi
  00015	8b 79 54	 mov	 edi, DWORD PTR [ecx+84]
  00018	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0001e	0f bf 84 37 d0
	00 00 00	 movsx	 eax, WORD PTR [edi+esi+208]
  00026	0f bf bc 37 be
	00 00 00	 movsx	 edi, WORD PTR [edi+esi+190]
  0002e	83 ca ff	 or	 edx, -1
  00031	03 c7		 add	 eax, edi
  00033	3b c2		 cmp	 eax, edx
  00035	7e 02		 jle	 SHORT $LN4@SetEventLe

; 1105 : 		{
; 1106 : 			temp = level;

  00037	8b d0		 mov	 edx, eax
$LN4@SetEventLe:

; 1099 : 	}
; 1100 : 	int temp = -1;
; 1101 : 	int level;
; 1102 : 	for(int i=0;i<5;++i)
; 1103 : 	{
; 1104 : 		if((level = (gObj[this->m_DGData.PlayerIndex[i]].Level + gObj[this->m_DGData.PlayerIndex[i]].MLevel)) > temp)

  00039	8b 79 58	 mov	 edi, DWORD PTR [ecx+88]
  0003c	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00042	0f bf 84 37 d0
	00 00 00	 movsx	 eax, WORD PTR [edi+esi+208]
  0004a	0f bf bc 37 be
	00 00 00	 movsx	 edi, WORD PTR [edi+esi+190]
  00052	03 c7		 add	 eax, edi
  00054	3b c2		 cmp	 eax, edx
  00056	7e 02		 jle	 SHORT $LN15@SetEventLe

; 1105 : 		{
; 1106 : 			temp = level;

  00058	8b d0		 mov	 edx, eax
$LN15@SetEventLe:

; 1099 : 	}
; 1100 : 	int temp = -1;
; 1101 : 	int level;
; 1102 : 	for(int i=0;i<5;++i)
; 1103 : 	{
; 1104 : 		if((level = (gObj[this->m_DGData.PlayerIndex[i]].Level + gObj[this->m_DGData.PlayerIndex[i]].MLevel)) > temp)

  0005a	8b 79 5c	 mov	 edi, DWORD PTR [ecx+92]
  0005d	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00063	0f bf 84 37 d0
	00 00 00	 movsx	 eax, WORD PTR [edi+esi+208]
  0006b	0f bf bc 37 be
	00 00 00	 movsx	 edi, WORD PTR [edi+esi+190]
  00073	03 c7		 add	 eax, edi
  00075	3b c2		 cmp	 eax, edx
  00077	7e 02		 jle	 SHORT $LN17@SetEventLe

; 1105 : 		{
; 1106 : 			temp = level;

  00079	8b d0		 mov	 edx, eax
$LN17@SetEventLe:

; 1099 : 	}
; 1100 : 	int temp = -1;
; 1101 : 	int level;
; 1102 : 	for(int i=0;i<5;++i)
; 1103 : 	{
; 1104 : 		if((level = (gObj[this->m_DGData.PlayerIndex[i]].Level + gObj[this->m_DGData.PlayerIndex[i]].MLevel)) > temp)

  0007b	8b 79 60	 mov	 edi, DWORD PTR [ecx+96]
  0007e	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00084	0f bf 84 37 d0
	00 00 00	 movsx	 eax, WORD PTR [edi+esi+208]
  0008c	0f bf bc 37 be
	00 00 00	 movsx	 edi, WORD PTR [edi+esi+190]
  00094	03 c7		 add	 eax, edi
  00096	3b c2		 cmp	 eax, edx
  00098	7e 02		 jle	 SHORT $LN19@SetEventLe

; 1105 : 		{
; 1106 : 			temp = level;

  0009a	8b d0		 mov	 edx, eax
$LN19@SetEventLe:

; 1099 : 	}
; 1100 : 	int temp = -1;
; 1101 : 	int level;
; 1102 : 	for(int i=0;i<5;++i)
; 1103 : 	{
; 1104 : 		if((level = (gObj[this->m_DGData.PlayerIndex[i]].Level + gObj[this->m_DGData.PlayerIndex[i]].MLevel)) > temp)

  0009c	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  0009f	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000a5	03 f0		 add	 esi, eax
  000a7	0f bf 86 d0 00
	00 00		 movsx	 eax, WORD PTR [esi+208]
  000ae	0f bf b6 be 00
	00 00		 movsx	 esi, WORD PTR [esi+190]
  000b5	03 c6		 add	 eax, esi
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	3b c2		 cmp	 eax, edx
  000bb	7e 02		 jle	 SHORT $LN21@SetEventLe

; 1105 : 		{
; 1106 : 			temp = level;

  000bd	8b d0		 mov	 edx, eax
$LN21@SetEventLe:

; 1107 : 		}
; 1108 : 	}
; 1109 : 	if(temp == -1)

  000bf	83 fa ff	 cmp	 edx, -1
  000c2	75 13		 jne	 SHORT $LN1@SetEventLe

; 1110 : 	{
; 1111 : 		LogAddC(2, "[DoppelGanger] ERROR: EventLevel == -1!");

  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FOAGBNK@?$FLDoppelGanger?$FN?5ERROR?3?5EventLevel@
  000c9	6a 02		 push	 2
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000d1	83 c4 08	 add	 esp, 8

; 1112 : 		return false;

  000d4	32 c0		 xor	 al, al

; 1116 : }

  000d6	c3		 ret	 0
$LN1@SetEventLe:

; 1113 : 	}
; 1114 : 	this->m_DGData.EventLevel = temp/10;

  000d7	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000dc	f7 ea		 imul	 edx
  000de	c1 fa 02	 sar	 edx, 2
  000e1	8b c2		 mov	 eax, edx
  000e3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e6	03 c2		 add	 eax, edx
  000e8	66 89 81 20 02
	00 00		 mov	 WORD PTR [ecx+544], ax
$LN22@SetEventLe:

; 1115 : 	return true;

  000ef	b0 01		 mov	 al, 1

; 1116 : }

  000f1	c3		 ret	 0
?SetEventLevel@CDoppelGanger@@QAE_NXZ ENDP		; CDoppelGanger::SetEventLevel
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBE_NPBUDG_MONSTER_STAT@@@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBE_NPBUDG_MONSTER_STAT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBE_NPBUDG_MONSTER_STAT@@@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBE_NPBUDG_MONSTER_STAT@@@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXPAUDG_MONSTER_STAT@@0@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXPAUDG_MONSTER_STAT@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXPAUDG_MONSTER_STAT@@0@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXPAUDG_MONSTER_STAT@@0@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ ; std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::~_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::~_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::~_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@XZ	; std::allocator<DG_MONSTER_STAT>::allocator<DG_MONSTER_STAT>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@XZ PROC	; std::allocator<DG_MONSTER_STAT>::allocator<DG_MONSTER_STAT>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@XZ ENDP	; std::allocator<DG_MONSTER_STAT>::allocator<DG_MONSTER_STAT>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   : 		}

  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 18	 add	 DWORD PTR [eax], 24	; 00000018H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 778  : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 880  : 		}

  00016	c3		 ret	 0
?size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXXZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXXZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEXXZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@ABV01@@Z ; std::allocator<DG_MONSTER_STAT>::allocator<DG_MONSTER_STAT>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@ABV01@@Z PROC ; std::allocator<DG_MONSTER_STAT>::allocator<DG_MONSTER_STAT>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UDG_MONSTER_STAT@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<DG_MONSTER_STAT>::allocator<DG_MONSTER_STAT>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@I@Z ; std::allocator<DG_MONSTER_STAT>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@I@Z PROC ; std::allocator<DG_MONSTER_STAT>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@I@Z ENDP ; std::allocator<DG_MONSTER_STAT>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEABUDG_MONSTER_STAT@@XZ ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEABUDG_MONSTER_STAT@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEABUDG_MONSTER_STAT@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEABUDG_MONSTER_STAT@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator*
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UDG_MONSTER_STAT@@@std@@QBEIXZ ; std::allocator<DG_MONSTER_STAT>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UDG_MONSTER_STAT@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UDG_MONSTER_STAT@@@std@@QBEIXZ PROC ; std::allocator<DG_MONSTER_STAT>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UDG_MONSTER_STAT@@@std@@QBEIXZ ENDP ; std::allocator<DG_MONSTER_STAT>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUDG_MONSTER_STAT@@@std@@YAPBUDG_MONSTER_STAT@@ABU1@@Z ; std::addressof<DG_MONSTER_STAT const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUDG_MONSTER_STAT@@@std@@YAPBUDG_MONSTER_STAT@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUDG_MONSTER_STAT@@@std@@YAPBUDG_MONSTER_STAT@@ABU1@@Z PROC ; std::addressof<DG_MONSTER_STAT const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUDG_MONSTER_STAT@@@std@@YAPBUDG_MONSTER_STAT@@ABU1@@Z ENDP ; std::addressof<DG_MONSTER_STAT const >
_TEXT	ENDS
PUBLIC	??$forward@AAUDG_MONSTER_STAT@@@std@@YAAAUDG_MONSTER_STAT@@AAU1@@Z ; std::forward<DG_MONSTER_STAT &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUDG_MONSTER_STAT@@@std@@YAAAUDG_MONSTER_STAT@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUDG_MONSTER_STAT@@@std@@YAAAUDG_MONSTER_STAT@@AAU1@@Z PROC ; std::forward<DG_MONSTER_STAT &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUDG_MONSTER_STAT@@@std@@YAAAUDG_MONSTER_STAT@@AAU1@@Z ENDP ; std::forward<DG_MONSTER_STAT &>
_TEXT	ENDS
PUBLIC	??$construct@AAUDG_MONSTER_STAT@@@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@AAU2@@Z ; std::allocator<DG_MONSTER_STAT>::construct<DG_MONSTER_STAT &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUDG_MONSTER_STAT@@@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUDG_MONSTER_STAT@@@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@AAU2@@Z PROC ; std::allocator<DG_MONSTER_STAT>::construct<DG_MONSTER_STAT &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@construct:

; 209  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??$construct@AAUDG_MONSTER_STAT@@@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@AAU2@@Z ENDP ; std::allocator<DG_MONSTER_STAT>::construct<DG_MONSTER_STAT &>
_TEXT	ENDS
PUBLIC	??$forward@ABUDG_MONSTER_STAT@@@std@@YAABUDG_MONSTER_STAT@@ABU1@@Z ; std::forward<DG_MONSTER_STAT const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUDG_MONSTER_STAT@@@std@@YAABUDG_MONSTER_STAT@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUDG_MONSTER_STAT@@@std@@YAABUDG_MONSTER_STAT@@ABU1@@Z PROC ; std::forward<DG_MONSTER_STAT const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUDG_MONSTER_STAT@@@std@@YAABUDG_MONSTER_STAT@@ABU1@@Z ENDP ; std::forward<DG_MONSTER_STAT const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UDG_MONSTER_STAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDG_MONSTER_STAT@@0@Z ; std::_Ptr_cat<DG_MONSTER_STAT,DG_MONSTER_STAT>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UDG_MONSTER_STAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDG_MONSTER_STAT@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UDG_MONSTER_STAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDG_MONSTER_STAT@@0@Z PROC ; std::_Ptr_cat<DG_MONSTER_STAT,DG_MONSTER_STAT>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UDG_MONSTER_STAT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDG_MONSTER_STAT@@0@Z ENDP ; std::_Ptr_cat<DG_MONSTER_STAT,DG_MONSTER_STAT>
_TEXT	ENDS
PUBLIC	??$_Construct@UDG_MONSTER_STAT@@ABU1@@std@@YAXPAUDG_MONSTER_STAT@@ABU1@@Z ; std::_Construct<DG_MONSTER_STAT,DG_MONSTER_STAT const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UDG_MONSTER_STAT@@ABU1@@std@@YAXPAUDG_MONSTER_STAT@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UDG_MONSTER_STAT@@ABU1@@std@@YAXPAUDG_MONSTER_STAT@@ABU1@@Z PROC ; std::_Construct<DG_MONSTER_STAT,DG_MONSTER_STAT const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@Construct:

; 49   : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Construct@UDG_MONSTER_STAT@@ABU1@@std@@YAXPAUDG_MONSTER_STAT@@ABU1@@Z ENDP ; std::_Construct<DG_MONSTER_STAT,DG_MONSTER_STAT const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@@Z ; std::_Val_type<DG_MONSTER_STAT *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@@Z PROC ; std::_Val_type<DG_MONSTER_STAT *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@@Z ENDP ; std::_Val_type<DG_MONSTER_STAT *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UDG_MONSTER_STAT@@@std@@YAXPAUDG_MONSTER_STAT@@@Z ; std::_Destroy<DG_MONSTER_STAT>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UDG_MONSTER_STAT@@@std@@YAXPAUDG_MONSTER_STAT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UDG_MONSTER_STAT@@@std@@YAXPAUDG_MONSTER_STAT@@@Z PROC ; std::_Destroy<DG_MONSTER_STAT>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UDG_MONSTER_STAT@@@std@@YAXPAUDG_MONSTER_STAT@@@Z ENDP ; std::_Destroy<DG_MONSTER_STAT>
_TEXT	ENDS
PUBLIC	??$forward@UDG_MONSTER_STAT@@@std@@YA$$QAUDG_MONSTER_STAT@@AAU1@@Z ; std::forward<DG_MONSTER_STAT>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UDG_MONSTER_STAT@@@std@@YA$$QAUDG_MONSTER_STAT@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UDG_MONSTER_STAT@@@std@@YA$$QAUDG_MONSTER_STAT@@AAU1@@Z PROC ; std::forward<DG_MONSTER_STAT>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UDG_MONSTER_STAT@@@std@@YA$$QAUDG_MONSTER_STAT@@AAU1@@Z ENDP ; std::forward<DG_MONSTER_STAT>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??_C@_0BO@ODJOIHKO@?$FLDoppelGanger?$FN?5SetState?5ENDED?$AA@ ; `string'
PUBLIC	?SetState_ENDED@CDoppelGanger@@QAEXXZ		; CDoppelGanger::SetState_ENDED
;	COMDAT ??_C@_0BO@ODJOIHKO@?$FLDoppelGanger?$FN?5SetState?5ENDED?$AA@
; File e:\work\tranet_version\gs\gameserver\doublegoer.cpp
CONST	SEGMENT
??_C@_0BO@ODJOIHKO@?$FLDoppelGanger?$FN?5SetState?5ENDED?$AA@ DB '[Doppel'
	DB	'Ganger] SetState ENDED', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_ENDED@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?SetState_ENDED@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SetState_ENDED, COMDAT
; _this$ = ecx

; 136  : 	this->m_DGData.eDuration = DGCoolDown * 60 * 1000;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DGCoolDown@@3HA ; DGCoolDown
  00005	69 c0 60 ea 00
	00		 imul	 eax, 60000		; 0000ea60H
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax

; 137  : 	this->DeleteMonster();

  00014	e8 00 00 00 00	 call	 ?DeleteMonster@CDoppelGanger@@QAEXXZ ; CDoppelGanger::DeleteMonster

; 138  : 	this->m_DGData.TickCount = GetTickCount();

  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 139  : 	this->m_DGData.btPlayState = DG_STATE_ENDED;
; 140  : 	LogAddTD("[DoppelGanger] SetState ENDED");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ODJOIHKO@?$FLDoppelGanger?$FN?5SetState?5ENDED?$AA@
  00024	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  0002a	c6 46 4a 04	 mov	 BYTE PTR [esi+74], 4
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00034	83 c4 04	 add	 esp, 4
  00037	5e		 pop	 esi

; 141  : }

  00038	c3		 ret	 0
?SetState_ENDED@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SetState_ENDED
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetMapAttr@CDoppelGanger@@QAEX_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::SetMapAttr
; Function compile flags: /Ogtp
;	COMDAT ?SetMapAttr@CDoppelGanger@@QAEX_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -272						; size = 7
_pBodyMsg$ = -264					; size = 2
_cTEMP_BUF$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_Block$ = 8						; size = 1
_lpObj$ = 12						; size = 4
?SetMapAttr@CDoppelGanger@@QAEX_NPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::SetMapAttr, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 414  : 
; 415  : 	pBodyMsg.btX = g_DGEntrance[this->m_DGData.MapNumber-65].iStartX;

  00013	53		 push	 ebx

; 420  : 	pBodyMsg.btY   = g_DGEntrance[this->m_DGData.MapNumber-65].iEndY;
; 421  : 	memcpy(&cTEMP_BUF[lOfs], &pBodyMsg, sizeof(pBodyMsg));
; 422  : 	lOfs += sizeof(pBodyMsg);
; 423  : 
; 424  : 	pMsg.h.c = 0xC1;
; 425  : 	pMsg.h.size = lOfs;
; 426  : 	pMsg.h.headcode = 0x46;
; 427  : 	memcpy(&cTEMP_BUF, &pMsg, sizeof(pMsg));
; 428  : 
; 429  : 	if(Block)

  00014	56		 push	 esi

; 404  : 	char cTEMP_BUF[256];
; 405  : 	int lOfs = 0;
; 406  : 	PMSG_SETMAPATTR_COUNT pMsg;
; 407  : 	PMSG_SETMAPATTR pBodyMsg;
; 408  : 	lOfs += sizeof(pMsg);
; 409  : 
; 410  : 	pMsg.btType = 0;
; 411  : 	pMsg.btCount = 1;
; 412  : 	pMsg.btMapAttr = 4;
; 413  : 	pMsg.btMapSetType = (Block == true) ? 4 : 1;

  00015	8a 45 08	 mov	 al, BYTE PTR _Block$[ebp]
  00018	fe c8		 dec	 al
  0001a	f6 d8		 neg	 al
  0001c	1a c0		 sbb	 al, al
  0001e	24 fd		 and	 al, 253			; 000000fdH
  00020	04 04		 add	 al, 4
  00022	88 85 f5 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], al

; 414  : 
; 415  : 	pBodyMsg.btX = g_DGEntrance[this->m_DGData.MapNumber-65].iStartX;

  00028	8b 81 10 02 00
	00		 mov	 eax, DWORD PTR [ecx+528]
  0002e	83 e8 41	 sub	 eax, 65			; 00000041H
  00031	c1 e0 04	 shl	 eax, 4
  00034	0f b6 98 00 00
	00 00		 movzx	 ebx, BYTE PTR _g_DGEntrance[eax]

; 416  : 	pBodyMsg.btY = g_DGEntrance[this->m_DGData.MapNumber-65].iStartY;

  0003b	0f b6 80 04 00
	00 00		 movzx	 eax, BYTE PTR _g_DGEntrance[eax+4]
  00042	88 85 f9 fe ff
	ff		 mov	 BYTE PTR _pBodyMsg$[ebp+1], al
  00048	88 9d f8 fe ff
	ff		 mov	 BYTE PTR _pBodyMsg$[ebp], bl

; 417  : 	memcpy(&cTEMP_BUF[lOfs], &pBodyMsg, sizeof(pBodyMsg));

  0004e	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pBodyMsg$[ebp]
  00055	66 89 85 03 ff
	ff ff		 mov	 WORD PTR _cTEMP_BUF$[ebp+7], ax

; 418  : 	lOfs += sizeof(pBodyMsg);
; 419  : 	pBodyMsg.btX   = g_DGEntrance[this->m_DGData.MapNumber-65].iEndX;

  0005c	8b 81 10 02 00
	00		 mov	 eax, DWORD PTR [ecx+528]
  00062	83 e8 41	 sub	 eax, 65			; 00000041H
  00065	c1 e0 04	 shl	 eax, 4

; 420  : 	pBodyMsg.btY   = g_DGEntrance[this->m_DGData.MapNumber-65].iEndY;
; 421  : 	memcpy(&cTEMP_BUF[lOfs], &pBodyMsg, sizeof(pBodyMsg));
; 422  : 	lOfs += sizeof(pBodyMsg);
; 423  : 
; 424  : 	pMsg.h.c = 0xC1;
; 425  : 	pMsg.h.size = lOfs;
; 426  : 	pMsg.h.headcode = 0x46;
; 427  : 	memcpy(&cTEMP_BUF, &pMsg, sizeof(pMsg));
; 428  : 
; 429  : 	if(Block)

  00068	80 7d 08 00	 cmp	 BYTE PTR _Block$[ebp], 0
  0006c	0f b6 98 08 00
	00 00		 movzx	 ebx, BYTE PTR _g_DGEntrance[eax+8]
  00073	0f b6 80 0c 00
	00 00		 movzx	 eax, BYTE PTR _g_DGEntrance[eax+12]
  0007a	88 85 f9 fe ff
	ff		 mov	 BYTE PTR _pBodyMsg$[ebp+1], al
  00080	88 9d f8 fe ff
	ff		 mov	 BYTE PTR _pBodyMsg$[ebp], bl
  00086	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pBodyMsg$[ebp]
  0008d	66 c7 85 f3 fe
	ff ff 00 04	 mov	 WORD PTR _pMsg$[ebp+3], 1024 ; 00000400H
  00096	66 89 85 05 ff
	ff ff		 mov	 WORD PTR _cTEMP_BUF$[ebp+9], ax
  0009d	66 c7 85 f0 fe
	ff ff c1 0b	 mov	 WORD PTR _pMsg$[ebp], 3009 ; 00000bc1H
  000a6	c6 85 f2 fe ff
	ff 46		 mov	 BYTE PTR _pMsg$[ebp+2], 70 ; 00000046H
  000ad	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pMsg$[ebp]
  000b3	89 85 fc fe ff
	ff		 mov	 DWORD PTR _cTEMP_BUF$[ebp], eax
  000b9	0f b7 85 f4 fe
	ff ff		 movzx	 eax, WORD PTR _pMsg$[ebp+4]
  000c0	8b 75 0c	 mov	 esi, DWORD PTR _lpObj$[ebp]
  000c3	b2 01		 mov	 dl, 1
  000c5	66 89 85 00 ff
	ff ff		 mov	 WORD PTR _cTEMP_BUF$[ebp+4], ax
  000cc	88 95 02 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+6], dl

; 430  : 	{
; 431  : 		DataSend(lpObj->m_Index, (LPBYTE)&cTEMP_BUF, lOfs);

  000d2	6a 0b		 push	 11			; 0000000bH
  000d4	74 24		 je	 SHORT $LN2@SetMapAttr
  000d6	8b 16		 mov	 edx, DWORD PTR [esi]
  000d8	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _cTEMP_BUF$[ebp]
  000de	51		 push	 ecx
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 436  : 	}
; 437  : }

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 08 00	 ret	 8
$LN2@SetMapAttr:

; 432  : 	}
; 433  : 	else
; 434  : 	{
; 435  : 		this->SendDoppelGangerPlayer((LPBYTE)&cTEMP_BUF, lOfs);

  000fa	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cTEMP_BUF$[ebp]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer

; 436  : 	}
; 437  : }

  00106	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00109	5e		 pop	 esi
  0010a	33 cd		 xor	 ecx, ebp
  0010c	5b		 pop	 ebx
  0010d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
?SetMapAttr@CDoppelGanger@@QAEX_NPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::SetMapAttr
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendPlayerPos@CDoppelGanger@@QAEXXZ		; CDoppelGanger::SendPlayerPos
; Function compile flags: /Ogtp
;	COMDAT ?SendPlayerPos@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
_Time$ = -280						; size = 4
_pMsg$ = -276						; size = 8
_lOfs$ = -268						; size = 4
_pPlayer$ = -264					; size = 4
_cBUFF$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?SendPlayerPos@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SendPlayerPos, COMDAT
; _this$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 484  : 	PMSG_DGOER_UPDATE_BAR pMsg;
; 485  : 	PLAYER_BAR_INFO pPlayer;
; 486  : 
; 487  : 	int Time = this->m_DGData.eDuration / 1000;

  00016	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0001b	f7 ab 08 02 00
	00		 imul	 DWORD PTR [ebx+520]
  00021	c1 fa 06	 sar	 edx, 6
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	56		 push	 esi
  0002a	03 c2		 add	 eax, edx
  0002c	57		 push	 edi
  0002d	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _Time$[ebp], eax

; 488  : 	char cBUFF[256];
; 489  : 	int lOfs = 8;

  00033	c7 85 f4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 8

; 490  : 
; 491  : 	for(int i=0;i<5;++i)

  0003d	33 ff		 xor	 edi, edi

; 492  : 	{
; 493  : 		memset(&pPlayer, 0x00, sizeof(pPlayer));
; 494  : 		if(gObjIsConnectedGP(this->m_DGData.PlayerIndex[i]) )

  0003f	8d 73 54	 lea	 esi, DWORD PTR [ebx+84]
$LL9@SendPlayer:
  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	50		 push	 eax
  00045	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pPlayer$[ebp], 0
  0004f	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  00054	83 c4 04	 add	 esp, 4
  00057	85 c0		 test	 eax, eax
  00059	74 28		 je	 SHORT $LN1@SendPlayer

; 495  : 		{
; 496  : 			pPlayer.UserH = HIBYTE(this->m_DGData.PlayerIndex[i]);

  0005b	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]

; 497  : 			pPlayer.UserL = LOBYTE(this->m_DGData.PlayerIndex[i]);

  0005e	8a 16		 mov	 dl, BYTE PTR [esi]

; 498  : 			pPlayer.Visible = 1; // visible on bar
; 499  : 			pPlayer.Pos = this->CalcPos(i, false);

  00060	6a 00		 push	 0
  00062	88 8d f9 fe ff
	ff		 mov	 BYTE PTR _pPlayer$[ebp+1], cl
  00068	57		 push	 edi
  00069	8b cb		 mov	 ecx, ebx
  0006b	88 95 f8 fe ff
	ff		 mov	 BYTE PTR _pPlayer$[ebp], dl
  00071	c6 85 fa fe ff
	ff 01		 mov	 BYTE PTR _pPlayer$[ebp+2], 1
  00078	e8 00 00 00 00	 call	 ?CalcPos@CDoppelGanger@@QAEHH_N@Z ; CDoppelGanger::CalcPos
  0007d	88 85 fb fe ff
	ff		 mov	 BYTE PTR _pPlayer$[ebp+3], al
$LN1@SendPlayer:

; 500  : 		}
; 501  : 		memcpy(&cBUFF[lOfs], &pPlayer, sizeof(pPlayer));

  00083	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  00089	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _pPlayer$[ebp]
  0008f	89 8c 05 fc fe
	ff ff		 mov	 DWORD PTR _cBUFF$[ebp+eax], ecx

; 502  : 		lOfs += sizeof(pPlayer);

  00096	83 c0 04	 add	 eax, 4
  00099	47		 inc	 edi
  0009a	83 c6 04	 add	 esi, 4
  0009d	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], eax
  000a3	83 ff 05	 cmp	 edi, 5
  000a6	7c 9a		 jl	 SHORT $LL9@SendPlayer

; 503  : 	}
; 504  : 
; 505  : 	pMsg.UserCount = this->m_DGData.PlayerCount;
; 506  : 	pMsg.Unk = 0;
; 507  : 	pMsg.TimerH = HIBYTE(Time);
; 508  : 	pMsg.TimerL = LOBYTE(Time);
; 509  : 
; 510  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBF, 0x12, lOfs);

  000a8	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _lOfs$[ebp]
  000ae	8a 53 44	 mov	 dl, BYTE PTR [ebx+68]
  000b1	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _Time$[ebp]
  000b7	56		 push	 esi
  000b8	6a 12		 push	 18			; 00000012H
  000ba	88 95 f2 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+6], dl
  000c0	8b c8		 mov	 ecx, eax
  000c2	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp]
  000c8	c1 e9 08	 shr	 ecx, 8
  000cb	68 bf 00 00 00	 push	 191			; 000000bfH
  000d0	52		 push	 edx
  000d1	c6 85 f3 fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+7], 0
  000d8	88 8d f1 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], cl
  000de	88 85 f0 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+4], al
  000e4	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 511  : 	memcpy(&cBUFF, &pMsg, sizeof(pMsg));

  000e9	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pMsg$[ebp+4]
  000ef	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _pMsg$[ebp]
  000f5	83 c4 10	 add	 esp, 16			; 00000010H

; 512  : 
; 513  : 	this->SendDoppelGangerPlayer((LPBYTE)&cBUFF, lOfs);

  000f8	56		 push	 esi
  000f9	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _cBUFF$[ebp]
  000ff	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _cBUFF$[ebp+4], ecx
  00105	52		 push	 edx
  00106	8b cb		 mov	 ecx, ebx
  00108	89 85 fc fe ff
	ff		 mov	 DWORD PTR _cBUFF$[ebp], eax
  0010e	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer

; 514  : }

  00113	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	33 cd		 xor	 ecx, ebp
  0011a	5b		 pop	 ebx
  0011b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
?SendPlayerPos@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SendPlayerPos
_TEXT	ENDS
PUBLIC	?SendMonsterPos@CDoppelGanger@@QAEXXZ		; CDoppelGanger::SendMonsterPos
; Function compile flags: /Ogtp
;	COMDAT ?SendMonsterPos@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -16						; size = 5
_this$ = -8						; size = 4
_nearest$ = -4						; size = 4
?SendMonsterPos@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SendMonsterPos, COMDAT
; _this$ = ecx

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 518  : 	PMSG_DGOER_TRIANG_POS pMsg;
; 519  : 
; 520  : 	int nearest = 0, temp = -1;
; 521  : 
; 522  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBF, 0x0F, sizeof(pMsg));

  00009	6a 05		 push	 5
  0000b	6a 0f		 push	 15			; 0000000fH
  0000d	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00010	68 bf 00 00 00	 push	 191			; 000000bfH
  00015	33 ff		 xor	 edi, edi
  00017	50		 push	 eax
  00018	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	89 7d fc	 mov	 DWORD PTR _nearest$[ebp], edi
  0001e	83 cb ff	 or	 ebx, -1
  00021	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00026	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	83 c6 6a	 add	 esi, 106		; 0000006aH
$LL6@SendMonste:

; 525  : 	{
; 526  : 		if(this->IsDGMonster(&gObj[i]) && this->m_DGData.MapNumber == gObj[i].MapNumber && gObj[i].Live == true && gObj[i].Connected == PLAYER_PLAYING)

  00032	8d 4e 96	 lea	 ecx, DWORD PTR [esi-106]
  00035	51		 push	 ecx
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::IsDGMonster
  0003e	84 c0		 test	 al, al
  00040	74 27		 je	 SHORT $LN3@SendMonste
  00042	0f b6 96 df 00
	00 00		 movzx	 edx, BYTE PTR [esi+223]
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	39 91 10 02 00
	00		 cmp	 DWORD PTR [ecx+528], edx
  00052	75 15		 jne	 SHORT $LN3@SendMonste
  00054	80 3e 01	 cmp	 BYTE PTR [esi], 1
  00057	75 10		 jne	 SHORT $LN3@SendMonste
  00059	83 7e 9a 03	 cmp	 DWORD PTR [esi-102], 3
  0005d	75 0a		 jne	 SHORT $LN3@SendMonste

; 527  : 		{
; 528  : 			temp = this->CalcPos(i, true);

  0005f	6a 01		 push	 1
  00061	57		 push	 edi
  00062	e8 00 00 00 00	 call	 ?CalcPos@CDoppelGanger@@QAEHH_N@Z ; CDoppelGanger::CalcPos
  00067	8b d8		 mov	 ebx, eax
$LN3@SendMonste:

; 529  : 		}
; 530  : 		if(temp > nearest)

  00069	3b 5d fc	 cmp	 ebx, DWORD PTR _nearest$[ebp]
  0006c	7e 03		 jle	 SHORT $LN5@SendMonste

; 531  : 		{
; 532  : 			nearest = temp;

  0006e	89 5d fc	 mov	 DWORD PTR _nearest$[ebp], ebx
$LN5@SendMonste:

; 523  : 
; 524  : 	for(int i=0;i<OBJ_MAXMONSTER;++i)

  00071	47		 inc	 edi
  00072	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  00078	81 ff c8 32 00
	00		 cmp	 edi, 13000		; 000032c8H
  0007e	7c b2		 jl	 SHORT $LL6@SendMonste

; 533  : 		}
; 534  : 	}
; 535  : 	if(nearest == -1)

  00080	83 7d fc ff	 cmp	 DWORD PTR _nearest$[ebp], -1
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	75 07		 jne	 SHORT $LN1@SendMonste

; 536  : 		nearest = 0;

  00089	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nearest$[ebp], 0
$LN1@SendMonste:

; 537  : 
; 538  : 	pMsg.Pos = nearest;
; 539  : 	this->SendDoppelGangerPlayer((LPBYTE)&pMsg, pMsg.h.size);

  00090	0f b6 4d f1	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00094	8a 45 fc	 mov	 al, BYTE PTR _nearest$[ebp]
  00097	51		 push	 ecx
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	8d 55 f0	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0009e	52		 push	 edx
  0009f	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+4], al
  000a2	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer

; 540  : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?SendMonsterPos@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SendMonsterPos
_TEXT	ENDS
PUBLIC	?SendIceWalkerPos@CDoppelGanger@@QAEXXZ		; CDoppelGanger::SendIceWalkerPos
; Function compile flags: /Ogtp
;	COMDAT ?SendIceWalkerPos@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?SendIceWalkerPos@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SendIceWalkerPos, COMDAT
; _this$ = ecx

; 543  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 544  : 	PMSG_DGOER_RTRIANG_POS pMsg;
; 545  : 
; 546  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBF, 0x11, sizeof(pMsg));

  00007	6a 06		 push	 6
  00009	6a 11		 push	 17			; 00000011H
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000e	68 bf 00 00 00	 push	 191			; 000000bfH
  00013	50		 push	 eax
  00014	8b f1		 mov	 esi, ecx
  00016	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 547  : 
; 548  : 	pMsg.Unk = (gObj[this->m_DGData.IceWalkerIndex].Live==true) ? 0 : 1;

  0001b	0f bf 46 52	 movsx	 eax, WORD PTR [esi+82]
  0001f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	8b c8		 mov	 ecx, eax
  00027	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0002d	83 c4 10	 add	 esp, 16			; 00000010H
  00030	80 7c 11 6a 01	 cmp	 BYTE PTR [ecx+edx+106], 1

; 549  : 	pMsg.Pos = this->CalcPos(this->m_DGData.IceWalkerIndex, true);

  00035	6a 01		 push	 1
  00037	0f 95 c1	 setne	 cl
  0003a	88 4d fc	 mov	 BYTE PTR _pMsg$[ebp+4], cl
  0003d	50		 push	 eax
  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?CalcPos@CDoppelGanger@@QAEHH_N@Z ; CDoppelGanger::CalcPos

; 550  : 
; 551  : 	this->SendDoppelGangerPlayer((LPBYTE)&pMsg, pMsg.h.size);

  00045	0f b6 55 f9	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00049	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al
  0004c	52		 push	 edx
  0004d	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00050	50		 push	 eax
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer
  00058	5e		 pop	 esi

; 552  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?SendIceWalkerPos@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SendIceWalkerPos
_TEXT	ENDS
PUBLIC	?MoveProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::MoveProc
EXTRN	?FindPathToMoveMonster@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HHHH@Z:PROC ; TMonsterAIUtil::FindPathToMoveMonster
; Function compile flags: /Ogtp
;	COMDAT ?MoveProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?MoveProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CDoppelGanger::MoveProc, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 595  : 	if(this->IsDGMonster(lpObj) == true)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?IsDGMonster@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::IsDGMonster
  00010	3c 01		 cmp	 al, 1
  00012	75 4f		 jne	 SHORT $LN1@MoveProc

; 596  : 	{
; 597  : 		lpObj->MTX = this->POSX[this->m_DGData.MapNumber-65];

  00014	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  0001a	66 8b 8c 86 00
	ff ff ff	 mov	 cx, WORD PTR [esi+eax*4-256]
  00022	66 89 8f 80 01
	00 00		 mov	 WORD PTR [edi+384], cx

; 598  : 		lpObj->MTY = this->POSY[this->m_DGData.MapNumber-65];

  00029	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  0002f	66 8b 84 96 10
	ff ff ff	 mov	 ax, WORD PTR [esi+edx*4-240]
  00037	66 89 87 82 01
	00 00		 mov	 WORD PTR [edi+386], ax

; 599  : 
; 600  : 		DG_UTIL.FindPathToMoveMonster(lpObj, this->POSX[this->m_DGData.MapNumber-65], this->POSY[this->m_DGData.MapNumber-65], 40, 2);

  0003e	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  00044	8b 8c 86 10 ff
	ff ff		 mov	 ecx, DWORD PTR [esi+eax*4-240]
  0004b	8b 94 86 00 ff
	ff ff		 mov	 edx, DWORD PTR [esi+eax*4-256]
  00052	6a 02		 push	 2
  00054	6a 28		 push	 40			; 00000028H
  00056	51		 push	 ecx
  00057	52		 push	 edx
  00058	57		 push	 edi
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET _DG_UTIL
  0005e	e8 00 00 00 00	 call	 ?FindPathToMoveMonster@TMonsterAIUtil@@QAEHPAUOBJECTSTRUCT@@HHHH@Z ; TMonsterAIUtil::FindPathToMoveMonster
$LN1@MoveProc:
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 601  : 	}
; 602  : }

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?MoveProc@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CDoppelGanger::MoveProc
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 18	 add	 DWORD PTR [eax], 24	; 00000018H

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@V?$allocator@UDG_MONSTER_STAT@@@1@@Z ; std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@V?$allocator@UDG_MONSTER_STAT@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@V?$allocator@UDG_MONSTER_STAT@@@1@@Z PROC ; std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@V?$allocator@UDG_MONSTER_STAT@@@1@@Z ENDP ; std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEAAUDG_MONSTER_STAT@@XZ ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEAAUDG_MONSTER_STAT@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEAAUDG_MONSTER_STAT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEAAUDG_MONSTER_STAT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator*
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QBEIXZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEII@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEII@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]
  00008	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000d	f7 ea		 imul	 edx
  0000f	c1 fa 02	 sar	 edx, 2
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00019	8b c8		 mov	 ecx, eax
  0001b	d1 e9		 shr	 ecx, 1
  0001d	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00022	2b d1		 sub	 edx, ecx
  00024	3b d0		 cmp	 edx, eax
  00026	73 04		 jae	 SHORT $LN4@Grow_to
  00028	33 c0		 xor	 eax, eax
  0002a	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0002c	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00035	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Grow_to@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IBEII@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@AAU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@AAU2@@Z ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@AAU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@AAU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@Cons_val:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@AAU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@IPAU1@@Z ; std::_Allocate<DG_MONSTER_STAT>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@IPAU1@@Z
_TEXT	SEGMENT
$T215125 = -12						; size = 12
$T215130 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@IPAU1@@Z PROC ; std::_Allocate<DG_MONSTER_STAT>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 46		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN1@Allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002b	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T215130[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T215125[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T215130[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T215125[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T215125[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UDG_MONSTER_STAT@@@std@@YAPAUDG_MONSTER_STAT@@IPAU1@@Z ENDP ; std::_Allocate<DG_MONSTER_STAT>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@ABU3@@Z ; std::allocator<DG_MONSTER_STAT>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@ABU3@@Z PROC ; std::allocator<DG_MONSTER_STAT>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN5@construct@2:

; 198  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@ABU3@@Z ENDP ; std::allocator<DG_MONSTER_STAT>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@@Z ; std::allocator<DG_MONSTER_STAT>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@@Z PROC ; std::allocator<DG_MONSTER_STAT>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@@Z ENDP ; std::allocator<DG_MONSTER_STAT>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@$$QAU3@@Z ; std::allocator<DG_MONSTER_STAT>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@$$QAU3@@Z PROC ; std::allocator<DG_MONSTER_STAT>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@construct@3:

; 203  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?construct@?$allocator@UDG_MONSTER_STAT@@@std@@QAEXPAUDG_MONSTER_STAT@@$$QAU3@@Z ENDP ; std::allocator<DG_MONSTER_STAT>::construct
_TEXT	ENDS
PUBLIC	??_C@_0EA@IKMKDNOO@?$FLDoppelGanger?$FN?5SetState?5STARTED?5@ ; `string'
PUBLIC	?SetState@CDoppelGanger@@QAEXH@Z		; CDoppelGanger::SetState
PUBLIC	?SetState_STARTED@CDoppelGanger@@QAEXXZ		; CDoppelGanger::SetState_STARTED
;	COMDAT ??_C@_0EA@IKMKDNOO@?$FLDoppelGanger?$FN?5SetState?5STARTED?5@
; File e:\work\tranet_version\gs\gameserver\doublegoer.cpp
CONST	SEGMENT
??_C@_0EA@IKMKDNOO@?$FLDoppelGanger?$FN?5SetState?5STARTED?5@ DB '[Doppel'
	DB	'Ganger] SetState STARTED | Players: (%d) MapNumber: (%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_STARTED@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?SetState_STARTED@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::SetState_STARTED, COMDAT
; _this$ = ecx

; 116  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 117  : 	this->m_DGData.eDuration = 600000; // for certainly..

  00003	c7 86 08 02 00
	00 c0 27 09 00	 mov	 DWORD PTR [esi+520], 600000 ; 000927c0H

; 118  : 	this->m_DGData.HalfTimeInfoSent = false; // for Ice Walker msg

  0000d	c6 86 1c 02 00
	00 00		 mov	 BYTE PTR [esi+540], 0

; 119  : 	this->m_DGData.CreateMonsterDelay = 2; // first monster create

  00014	66 c7 46 47 00
	02		 mov	 WORD PTR [esi+71], 512	; 00000200H

; 120  : 	this->m_DGData.MonsterPassed = 0; // set monster passed portal to 0
; 121  : 	if(this->SetEventLevel() == false)

  0001a	e8 00 00 00 00	 call	 ?SetEventLevel@CDoppelGanger@@QAE_NXZ ; CDoppelGanger::SetEventLevel

; 122  : 	{
; 123  : 		this->SetState(DG_STATE_ENDED);

  0001f	8b ce		 mov	 ecx, esi
  00021	84 c0		 test	 al, al
  00023	75 09		 jne	 SHORT $LN1@SetState_S
  00025	6a 04		 push	 4
  00027	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
  0002c	5e		 pop	 esi

; 132  : }

  0002d	c3		 ret	 0
$LN1@SetState_S:

; 124  : 		return;
; 125  : 	}
; 126  : 	this->SetMapAttr(false, NULL); // unblock portal zone exit

  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	e8 00 00 00 00	 call	 ?SetMapAttr@CDoppelGanger@@QAEX_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::SetMapAttr

; 127  : 	this->SetEventInterface(); // activate interface

  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?SetEventInterface@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetEventInterface

; 128  : 	this->SetMonsterCountOnInterface();

  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?SetMonsterCountOnInterface@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetMonsterCountOnInterface

; 129  : 	this->m_DGData.TickCount = GetTickCount();

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 130  : 	this->m_DGData.btPlayState = DG_STATE_STARTED;
; 131  : 	LogAddTD("[DoppelGanger] SetState STARTED | Players: (%d) MapNumber: (%d)", this->m_DGData.PlayerCount, this->m_DGData.MapNumber);

  0004b	0f b6 4e 44	 movzx	 ecx, BYTE PTR [esi+68]
  0004f	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  00055	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  0005b	50		 push	 eax
  0005c	51		 push	 ecx
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@IKMKDNOO@?$FLDoppelGanger?$FN?5SetState?5STARTED?5@
  00062	c6 46 4a 03	 mov	 BYTE PTR [esi+74], 3
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	5e		 pop	 esi

; 132  : }

  00070	c3		 ret	 0
?SetState_STARTED@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::SetState_STARTED
_TEXT	ENDS
PUBLIC	??_C@_0DF@JEEBAHNK@?$FLDoppelGanger?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Entered?5@ ; `string'
PUBLIC	??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@ ; `string'
PUBLIC	?EnterEvent@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::EnterEvent
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?gObjInventoryDeleteItem@@YAEHH@Z:PROC		; gObjInventoryDeleteItem
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
;	COMDAT ??_C@_0DF@JEEBAHNK@?$FLDoppelGanger?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Entered?5@
CONST	SEGMENT
??_C@_0DF@JEEBAHNK@?$FLDoppelGanger?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Entered?5@ DB '['
	DB	'DoppelGanger] [%s][%s] Entered to DoppelGanger (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@
CONST	SEGMENT
??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@ DB 'You are short of mo'
	DB	'ney', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?EnterEvent@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?EnterEvent@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CDoppelGanger::EnterEvent, COMDAT
; _this$ = ecx

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 310  : 
; 311  : 	if(this->m_DGData.btPlayState != DG_STATE_OPEN && this->m_DGData.btPlayState != DG_STATE_WAITING)

  00006	8a 47 4a	 mov	 al, BYTE PTR [edi+74]
  00009	3c 01		 cmp	 al, 1
  0000b	74 08		 je	 SHORT $LN11@EnterEvent
  0000d	3c 02		 cmp	 al, 2
  0000f	0f 85 19 01 00
	00		 jne	 $LN1@EnterEvent
$LN11@EnterEvent:
  00015	56		 push	 esi

; 312  : 	{
; 313  : 		return;
; 314  : 	}
; 315  : 
; 316  : 	if(lpObj->TargetShopNumber != 540) // Lugard

  00016	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00019	b8 1c 02 00 00	 mov	 eax, 540		; 0000021cH
  0001e	66 39 86 5a 04
	00 00		 cmp	 WORD PTR [esi+1114], ax
  00025	0f 85 02 01 00
	00		 jne	 $LN17@EnterEvent

; 317  : 	{
; 318  : 		return;
; 319  : 	}
; 320  : 
; 321  : 	int invitationpos = -1;
; 322  : 
; 323  : 	for(short i = 12 ; i < 76; ++i)

  0002b	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00031	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00036	53		 push	 ebx
  00037	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL9@EnterEvent:

; 324  : 	{
; 325  : 		if(lpObj->pInventory[i].m_Type > 0 && lpObj->pInventory[i].m_Type == ITEMGET(14,111))

  00040	0f bf c8	 movsx	 ecx, ax
  00043	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  00049	0f b7 4c 11 06	 movzx	 ecx, WORD PTR [ecx+edx+6]
  0004e	66 85 c9	 test	 cx, cx
  00051	7e 0a		 jle	 SHORT $LN8@EnterEvent
  00053	bb 6f 1c 00 00	 mov	 ebx, 7279		; 00001c6fH
  00058	66 3b cb	 cmp	 cx, bx
  0005b	74 0e		 je	 SHORT $LN15@EnterEvent
$LN8@EnterEvent:

; 317  : 	{
; 318  : 		return;
; 319  : 	}
; 320  : 
; 321  : 	int invitationpos = -1;
; 322  : 
; 323  : 	for(short i = 12 ; i < 76; ++i)

  0005d	40		 inc	 eax
  0005e	66 83 f8 4c	 cmp	 ax, 76			; 0000004cH
  00062	7c dc		 jl	 SHORT $LL9@EnterEvent
  00064	5b		 pop	 ebx
  00065	5e		 pop	 esi
  00066	5f		 pop	 edi

; 366  : 	}
; 367  : }

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN15@EnterEvent:

; 326  : 		{
; 327  : 			invitationpos = i;

  0006b	0f bf d8	 movsx	 ebx, ax

; 328  : 			break;
; 329  : 		}
; 330  : 	}
; 331  : 	if(invitationpos == -1)

  0006e	83 fb ff	 cmp	 ebx, -1
  00071	0f 84 b5 00 00
	00		 je	 $LN18@EnterEvent

; 332  : 		return;
; 333  : 
; 334  : 	//if(lpObj->VipType == 0)
; 335  : 	//{
; 336  : 	if(lpObj->Money < DGEnterMoney)

  00077	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DGEnterMoney@@3HA ; DGEnterMoney
  00083	3b c1		 cmp	 eax, ecx
  00085	7d 19		 jge	 SHORT $LN4@EnterEvent

; 337  : 	{
; 338  : 		GCServerMsgStringSend("You are short of money", lpObj->m_Index, 1);

  00087	8b 16		 mov	 edx, DWORD PTR [esi]
  00089	6a 01		 push	 1
  0008b	52		 push	 edx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@
  00091	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	5b		 pop	 ebx
  0009a	5e		 pop	 esi
  0009b	5f		 pop	 edi

; 366  : 	}
; 367  : }

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
$LN4@EnterEvent:

; 339  : 		return;
; 340  : 	}
; 341  : 	lpObj->Money -= DGEnterMoney;

  000a0	2b c1		 sub	 eax, ecx

; 342  : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  000a2	50		 push	 eax
  000a3	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  000a9	8b 06		 mov	 eax, DWORD PTR [esi]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  000b1	83 c4 08	 add	 esp, 8

; 343  : 	//}
; 344  : 
; 345  : 	if(this->m_DGData.btPlayState == DG_STATE_WAITING)

  000b4	80 7f 4a 02	 cmp	 BYTE PTR [edi+74], 2
  000b8	75 0e		 jne	 SHORT $LN2@EnterEvent

; 346  : 	{
; 347  : 		if(this->m_DGData.PartyNumber != lpObj->PartyNumber)

  000ba	8b 8f 14 02 00
	00		 mov	 ecx, DWORD PTR [edi+532]
  000c0	3b 8e 2c 04 00
	00		 cmp	 ecx, DWORD PTR [esi+1068]
  000c6	75 64		 jne	 SHORT $LN18@EnterEvent
$LN2@EnterEvent:

; 348  : 		{
; 349  : 			return;
; 350  : 		}
; 351  : 	}
; 352  : 	if(this->AddPlayer(lpObj) == true)

  000c8	56		 push	 esi
  000c9	8b cf		 mov	 ecx, edi
  000cb	e8 00 00 00 00	 call	 ?AddPlayer@CDoppelGanger@@QAE_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::AddPlayer
  000d0	3c 01		 cmp	 al, 1
  000d2	75 58		 jne	 SHORT $LN18@EnterEvent

; 353  : 	{		
; 354  : 		gObjInventoryDeleteItem(lpObj->m_Index, invitationpos);

  000d4	8b 16		 mov	 edx, DWORD PTR [esi]
  000d6	53		 push	 ebx
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 355  : 		GCInventoryItemDeleteSend(lpObj->m_Index, invitationpos, 1);

  000dd	8b 06		 mov	 eax, DWORD PTR [esi]
  000df	6a 01		 push	 1
  000e1	53		 push	 ebx
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  000e8	83 c4 14	 add	 esp, 20			; 00000014H

; 356  : 
; 357  : 		int iGate = this->SetMapNumber();

  000eb	8b cf		 mov	 ecx, edi
  000ed	e8 00 00 00 00	 call	 ?SetMapNumber@CDoppelGanger@@QAEHXZ ; CDoppelGanger::SetMapNumber

; 358  : 
; 359  : 		gObjMoveGate(lpObj->m_Index, iGate);

  000f2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f4	50		 push	 eax
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000fb	83 c4 08	 add	 esp, 8

; 360  : 
; 361  : 		this->SetMapAttr(true, lpObj);

  000fe	56		 push	 esi
  000ff	6a 01		 push	 1
  00101	8b cf		 mov	 ecx, edi
  00103	e8 00 00 00 00	 call	 ?SetMapAttr@CDoppelGanger@@QAEX_NPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::SetMapAttr

; 362  : 
; 363  : 		lpObj->TargetShopNumber = 0;

  00108	33 d2		 xor	 edx, edx
  0010a	66 89 96 5a 04
	00 00		 mov	 WORD PTR [esi+1114], dx

; 364  : 
; 365  : 		LogAddTD("[DoppelGanger] [%s][%s] Entered to DoppelGanger (%d)", lpObj->AccountID, lpObj->Name, this->m_DGData.PlayerCount);

  00111	0f b6 47 44	 movzx	 eax, BYTE PTR [edi+68]
  00115	50		 push	 eax
  00116	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  00119	51		 push	 ecx
  0011a	83 c6 6c	 add	 esi, 108		; 0000006cH
  0011d	56		 push	 esi
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@JEEBAHNK@?$FLDoppelGanger?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Entered?5@
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00129	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@EnterEvent:
  0012c	5b		 pop	 ebx
$LN17@EnterEvent:
  0012d	5e		 pop	 esi
$LN1@EnterEvent:
  0012e	5f		 pop	 edi

; 366  : 	}
; 367  : }

  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
?EnterEvent@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CDoppelGanger::EnterEvent
_TEXT	ENDS
PUBLIC	??0?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEPAUDG_MONSTER_STAT@@XZ ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEPAUDG_MONSTER_STAT@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEPAUDG_MONSTER_STAT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBEPAUDG_MONSTER_STAT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator->
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@std@@QAE@PAUDG_MONSTER_STAT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >::_Vector_iterator<std::_Vector_val<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEPAUDG_MONSTER_STAT@@I@Z ; std::allocator<DG_MONSTER_STAT>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEPAUDG_MONSTER_STAT@@I@Z
_TEXT	SEGMENT
$T215253 = -12						; size = 12
$T215251 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEPAUDG_MONSTER_STAT@@I@Z PROC ; std::allocator<DG_MONSTER_STAT>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 46		 je	 SHORT $LN1@allocate
  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN3@allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T215251[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T215253[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T215251[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T215253[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T215253[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEPAUDG_MONSTER_STAT@@I@Z ENDP ; std::allocator<DG_MONSTER_STAT>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@ABU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@ABU2@@Z ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@ABU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@ABU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN9@Cons_val@2:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@ABU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT const &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@@Z ; std::_Dest_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@@Z PROC ; std::_Dest_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@@Z ENDP ; std::_Dest_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@U3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@$$QAU2@@Z ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@U3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@U3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@Cons_val@3:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@U3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT>
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\doublegoer.cpp
_TEXT	ENDS
;	COMDAT ?SetState@CDoppelGanger@@QAEXH@Z
_TEXT	SEGMENT
_iState$ = 8						; size = 4
?SetState@CDoppelGanger@@QAEXH@Z PROC			; CDoppelGanger::SetState, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	switch(iState)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iState$[ebp]
  00006	83 f8 04	 cmp	 eax, 4
  00009	77 27		 ja	 SHORT $LN6@SetState
  0000b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@SetState[eax*4]
$LN4@SetState:

; 69   : 	{
; 70   : 	case DG_STATE_NONE:
; 71   : 		return;
; 72   : 	case DG_STATE_OPEN:
; 73   : 		this->SetState_OPEN();

  00012	e8 00 00 00 00	 call	 ?SetState_OPEN@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetState_OPEN

; 83   : 		break;
; 84   : 	}
; 85   : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN3@SetState:

; 74   : 		break;
; 75   : 	case DG_STATE_WAITING:
; 76   : 		this->SetState_WAITING();

  0001b	e8 00 00 00 00	 call	 ?SetState_WAITING@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetState_WAITING

; 83   : 		break;
; 84   : 	}
; 85   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN2@SetState:

; 77   : 		break;
; 78   : 	case DG_STATE_STARTED:
; 79   : 		this->SetState_STARTED();

  00024	e8 00 00 00 00	 call	 ?SetState_STARTED@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetState_STARTED

; 83   : 		break;
; 84   : 	}
; 85   : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN1@SetState:

; 80   : 		break;
; 81   : 	case DG_STATE_ENDED:
; 82   : 		this->SetState_ENDED();

  0002d	e8 00 00 00 00	 call	 ?SetState_ENDED@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SetState_ENDED
$LN6@SetState:

; 83   : 		break;
; 84   : 	}
; 85   : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
  00036	8b ff		 npad	 2
$LN10@SetState:
  00038	00 00 00 00	 DD	 $LN6@SetState
  0003c	00 00 00 00	 DD	 $LN4@SetState
  00040	00 00 00 00	 DD	 $LN3@SetState
  00044	00 00 00 00	 DD	 $LN2@SetState
  00048	00 00 00 00	 DD	 $LN1@SetState
?SetState@CDoppelGanger@@QAEXH@Z ENDP			; CDoppelGanger::SetState
_TEXT	ENDS
PUBLIC	?ProcState_OPEN@CDoppelGanger@@QAEXXZ		; CDoppelGanger::ProcState_OPEN
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_OPEN@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?ProcState_OPEN@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::ProcState_OPEN, COMDAT
; _this$ = ecx

; 166  : 	if(this->m_DGData.PlayerCount > 0)

  00000	80 79 44 00	 cmp	 BYTE PTR [ecx+68], 0
  00004	76 07		 jbe	 SHORT $LN1@ProcState_

; 167  : 	{
; 168  : 		this->SetState(DG_STATE_WAITING);

  00006	6a 02		 push	 2
  00008	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
$LN1@ProcState_:

; 169  : 	}
; 170  : }

  0000d	c3		 ret	 0
?ProcState_OPEN@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::ProcState_OPEN
_TEXT	ENDS
PUBLIC	??_C@_0CF@CBMNKJPH@?$FLDoppelGanger?$FN?5Reset?5Event?5?9?5No?5@ ; `string'
PUBLIC	?ProcState_WAITING@CDoppelGanger@@QAEXXZ	; CDoppelGanger::ProcState_WAITING
;	COMDAT ??_C@_0CF@CBMNKJPH@?$FLDoppelGanger?$FN?5Reset?5Event?5?9?5No?5@
CONST	SEGMENT
??_C@_0CF@CBMNKJPH@?$FLDoppelGanger?$FN?5Reset?5Event?5?9?5No?5@ DB '[Dop'
	DB	'pelGanger] Reset Event - No user', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ProcState_WAITING@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?ProcState_WAITING@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::ProcState_WAITING, COMDAT
; _this$ = ecx

; 173  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 174  : 	int Tick = GetTickCount() - this->m_DGData.TickCount;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 86 18 02 00
	00		 sub	 eax, DWORD PTR [esi+536]

; 175  : 
; 176  : 	if(Tick >= 1000)

  00012	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00017	7c 68		 jl	 SHORT $LN1@ProcState_@2

; 177  : 	{
; 178  : 		this->m_DGData.eDuration -= Tick;

  00019	29 86 08 02 00
	00		 sub	 DWORD PTR [esi+520], eax

; 179  : 		this->m_DGData.TickCount = GetTickCount();

  0001f	ff d7		 call	 edi

; 180  : 
; 181  : 		this->CheckUsers();

  00021	8b ce		 mov	 ecx, esi
  00023	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  00029	e8 00 00 00 00	 call	 ?CheckUsers@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CheckUsers

; 182  : 
; 183  : 		if(this->m_DGData.PlayerCount <= 0)

  0002e	80 7e 44 00	 cmp	 BYTE PTR [esi+68], 0
  00032	77 1a		 ja	 SHORT $LN3@ProcState_@2

; 184  : 		{
; 185  : 			LogAddTD("[DoppelGanger] Reset Event - No user");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CBMNKJPH@?$FLDoppelGanger?$FN?5Reset?5Event?5?9?5No?5@
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0003f	83 c4 04	 add	 esp, 4

; 186  : 			this->SetState(DG_STATE_ENDED);

  00042	6a 04		 push	 4

; 197  : 		{
; 198  : 			this->SetState(DG_STATE_STARTED);

  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 199  : 		}
; 200  : 	}
; 201  : }

  0004d	c3		 ret	 0
$LN3@ProcState_@2:

; 187  : 			return;
; 188  : 		}
; 189  : 
; 190  : 
; 191  : 		if(this->m_DGData.eDuration <= 630000 && this->m_DGData.HalfTimeInfoSent == false)

  0004e	81 be 08 02 00
	00 f0 9c 09 00	 cmp	 DWORD PTR [esi+520], 630000 ; 00099cf0H
  00058	7f 12		 jg	 SHORT $LN2@ProcState_@2
  0005a	80 be 1c 02 00
	00 00		 cmp	 BYTE PTR [esi+540], 0
  00061	75 09		 jne	 SHORT $LN2@ProcState_@2

; 192  : 		{
; 193  : 			this->SendHalfTimeInfo(17);

  00063	6a 11		 push	 17			; 00000011H
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?SendHalfTimeInfo@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SendHalfTimeInfo
$LN2@ProcState_@2:

; 194  : 		}
; 195  : 
; 196  : 		if(this->m_DGData.eDuration <= 600000)

  0006c	81 be 08 02 00
	00 c0 27 09 00	 cmp	 DWORD PTR [esi+520], 600000 ; 000927c0H
  00076	7f 09		 jg	 SHORT $LN1@ProcState_@2

; 197  : 		{
; 198  : 			this->SetState(DG_STATE_STARTED);

  00078	6a 03		 push	 3
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
$LN1@ProcState_@2:

; 199  : 		}
; 200  : 	}
; 201  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	c3		 ret	 0
?ProcState_WAITING@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::ProcState_WAITING
_TEXT	ENDS
PUBLIC	??_C@_0DB@IKIFAIFH@?$FLDoppelGanger?$FN?5Quest?5Success?5?$HM?5M@ ; `string'
PUBLIC	??_C@_0DO@EHJBCEFB@?$FLDoppelGanger?$FN?5Quest?5Failed?5?9?5to@ ; `string'
PUBLIC	??_C@_0BH@IKDDMHHM@Ice?5walker?5time?5passed?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ProcState_STARTED@CDoppelGanger@@QAEXXZ	; CDoppelGanger::ProcState_STARTED
;	COMDAT ??_C@_0DB@IKIFAIFH@?$FLDoppelGanger?$FN?5Quest?5Success?5?$HM?5M@
CONST	SEGMENT
??_C@_0DB@IKIFAIFH@?$FLDoppelGanger?$FN?5Quest?5Success?5?$HM?5M@ DB '[Do'
	DB	'ppelGanger] Quest Success | Monsters: (%d/%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@EHJBCEFB@?$FLDoppelGanger?$FN?5Quest?5Failed?5?9?5to@
CONST	SEGMENT
??_C@_0DO@EHJBCEFB@?$FLDoppelGanger?$FN?5Quest?5Failed?5?9?5to@ DB '[Dopp'
	DB	'elGanger] Quest Failed - too many monsters passed portal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IKDDMHHM@Ice?5walker?5time?5passed?$AA@
CONST	SEGMENT
??_C@_0BH@IKDDMHHM@Ice?5walker?5time?5passed?$AA@ DB 'Ice walker time pas'
	DB	'sed', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ProcState_STARTED@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
_pNotice$213321 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcState_STARTED@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::ProcState_STARTED, COMDAT
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi

; 205  : 	int Tick = GetTickCount() - this->m_DGData.TickCount;

  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0001b	8b f1		 mov	 esi, ecx
  0001d	ff d7		 call	 edi
  0001f	2b 86 18 02 00
	00		 sub	 eax, DWORD PTR [esi+536]

; 206  : 
; 207  : 	if(Tick >= 1000)

  00025	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0002a	0f 8c f7 01 00
	00		 jl	 $LN1@ProcState_@3

; 208  : 	{
; 209  : 		this->m_DGData.eDuration -= Tick;

  00030	29 86 08 02 00
	00		 sub	 DWORD PTR [esi+520], eax
  00036	53		 push	 ebx

; 210  : 		this->m_DGData.TickCount = GetTickCount();

  00037	ff d7		 call	 edi

; 211  : 		++this->m_DGData.CreateMonsterDelay;

  00039	bb 01 00 00 00	 mov	 ebx, 1
  0003e	00 5e 48	 add	 BYTE PTR [esi+72], bl

; 212  : 		if(this->m_DGData.CreateMonsterDelay == 3)

  00041	80 7e 48 03	 cmp	 BYTE PTR [esi+72], 3
  00045	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  0004b	75 0b		 jne	 SHORT $LN12@ProcState_@3

; 213  : 		{
; 214  : 			this->CreateMonster();

  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?CreateMonster@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CreateMonster

; 215  : 			this->m_DGData.CreateMonsterDelay = 0;

  00054	c6 46 48 00	 mov	 BYTE PTR [esi+72], 0
$LN12@ProcState_@3:

; 216  : 		}
; 217  : 
; 218  : 		if(this->m_DGData.PlayerCount <= 0)

  00058	80 7e 44 00	 cmp	 BYTE PTR [esi+68], 0
  0005c	77 28		 ja	 SHORT $LN11@ProcState_@3

; 219  : 		{
; 220  : 			LogAddTD("[DoppelGanger] Reset Event - No user");

  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CBMNKJPH@?$FLDoppelGanger?$FN?5Reset?5Event?5?9?5No?5@
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00069	83 c4 04	 add	 esp, 4

; 221  : 			this->SetState(DG_STATE_ENDED);

  0006c	6a 04		 push	 4
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
  00075	5b		 pop	 ebx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi

; 284  : 		}
; 285  : 	}
; 286  : }

  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN11@ProcState_@3:

; 222  : 			return;
; 223  : 		}
; 224  : 
; 225  : 		this->SendPlayerPos();

  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?SendPlayerPos@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SendPlayerPos

; 226  : 		this->SendMonsterPos();

  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?SendMonsterPos@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SendMonsterPos

; 227  : 		this->CheckPosition();

  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ?CheckPosition@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CheckPosition

; 228  : 		this->CheckUsers();

  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?CheckUsers@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CheckUsers

; 229  : 		if(this->m_DGData.eDuration < 480000 && this->m_DGData.PhazesPassed == 0)

  000a2	81 be 08 02 00
	00 00 53 07 00	 cmp	 DWORD PTR [esi+520], 480000 ; 00075300H
  000ac	7d 10		 jge	 SHORT $LN10@ProcState_@3
  000ae	80 be 23 02 00
	00 00		 cmp	 BYTE PTR [esi+547], 0
  000b5	75 07		 jne	 SHORT $LN10@ProcState_@3

; 230  : 		{
; 231  : 			this->CreateButcher();

  000b7	8b ce		 mov	 ecx, esi
  000b9	e8 00 00 00 00	 call	 ?CreateButcher@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CreateButcher
$LN10@ProcState_@3:

; 232  : 		}
; 233  : 
; 234  : 		if(this->m_DGData.eDuration < 360000 && this->m_DGData.PhazesPassed == 1)

  000be	81 be 08 02 00
	00 40 7e 05 00	 cmp	 DWORD PTR [esi+520], 360000 ; 00057e40H
  000c8	7d 0f		 jge	 SHORT $LN9@ProcState_@3
  000ca	38 9e 23 02 00
	00		 cmp	 BYTE PTR [esi+547], bl
  000d0	75 07		 jne	 SHORT $LN9@ProcState_@3

; 235  : 		{
; 236  : 			this->CreateButcher();

  000d2	8b ce		 mov	 ecx, esi
  000d4	e8 00 00 00 00	 call	 ?CreateButcher@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CreateButcher
$LN9@ProcState_@3:

; 237  : 		}
; 238  : 
; 239  : 		if(this->m_DGData.eDuration < 300000 && this->m_DGData.PhazesPassed == 2)

  000d9	81 be 08 02 00
	00 e0 93 04 00	 cmp	 DWORD PTR [esi+520], 300000 ; 000493e0H
  000e3	7d 10		 jge	 SHORT $LN8@ProcState_@3
  000e5	80 be 23 02 00
	00 02		 cmp	 BYTE PTR [esi+547], 2
  000ec	75 07		 jne	 SHORT $LN8@ProcState_@3

; 240  : 		{
; 241  : 			this->CreateAngryButcher();

  000ee	8b ce		 mov	 ecx, esi
  000f0	e8 00 00 00 00	 call	 ?CreateAngryButcher@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CreateAngryButcher
$LN8@ProcState_@3:

; 242  : 		}
; 243  : 
; 244  : 		if(this->m_DGData.eDuration < 210000 && this->m_DGData.PhazesPassed == 3)

  000f5	81 be 08 02 00
	00 50 34 03 00	 cmp	 DWORD PTR [esi+520], 210000 ; 00033450H
  000ff	7d 10		 jge	 SHORT $LN7@ProcState_@3
  00101	80 be 23 02 00
	00 03		 cmp	 BYTE PTR [esi+547], 3
  00108	75 07		 jne	 SHORT $LN7@ProcState_@3

; 245  : 		{
; 246  : 			this->CreateIceWalker();

  0010a	8b ce		 mov	 ecx, esi
  0010c	e8 00 00 00 00	 call	 ?CreateIceWalker@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CreateIceWalker
$LN7@ProcState_@3:

; 247  : 		}
; 248  : 
; 249  : 		if(this->m_DGData.PhazesPassed == 4 && gObjIsConnected(this->m_DGData.IceWalkerIndex))

  00111	80 be 23 02 00
	00 04		 cmp	 BYTE PTR [esi+547], 4
  00118	0f 85 a5 00 00
	00		 jne	 $LN16@ProcState_@3
  0011e	0f bf 46 52	 movsx	 eax, WORD PTR [esi+82]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00128	83 c4 04	 add	 esp, 4
  0012b	85 c0		 test	 eax, eax
  0012d	0f 84 90 00 00
	00		 je	 $LN16@ProcState_@3

; 250  : 		{
; 251  : 			this->SendIceWalkerPos();

  00133	8b ce		 mov	 ecx, esi
  00135	e8 00 00 00 00	 call	 ?SendIceWalkerPos@CDoppelGanger@@QAEXXZ ; CDoppelGanger::SendIceWalkerPos

; 252  : 			if(gObj[this->m_DGData.IceWalkerIndex].Live == true)

  0013a	0f bf 4e 52	 movsx	 ecx, WORD PTR [esi+82]
  0013e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00144	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0014a	38 5c 11 6a	 cmp	 BYTE PTR [ecx+edx+106], bl
  0014e	75 73		 jne	 SHORT $LN16@ProcState_@3

; 253  : 			{
; 254  : 				--this->m_DGData.IceWalkerPhazeTime;

  00150	66 ff 8e 1e 02
	00 00		 dec	 WORD PTR [esi+542]

; 255  : 				if(this->m_DGData.IceWalkerPhazeTime <= 30 && this->m_DGData.HalfTimeInfoSent == false)

  00157	66 83 be 1e 02
	00 00 1e	 cmp	 WORD PTR [esi+542], 30	; 0000001eH
  0015f	7f 18		 jg	 SHORT $LN4@ProcState_@3
  00161	80 be 1c 02 00
	00 00		 cmp	 BYTE PTR [esi+540], 0
  00168	75 0f		 jne	 SHORT $LN4@ProcState_@3

; 256  : 				{
; 257  : 					this->SendHalfTimeInfo(18);

  0016a	6a 12		 push	 18			; 00000012H
  0016c	8b ce		 mov	 ecx, esi
  0016e	e8 00 00 00 00	 call	 ?SendHalfTimeInfo@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SendHalfTimeInfo

; 258  : 					this->m_DGData.HalfTimeInfoSent = true;

  00173	88 9e 1c 02 00
	00		 mov	 BYTE PTR [esi+540], bl
$LN4@ProcState_@3:

; 259  : 				}
; 260  : 				if(this->m_DGData.IceWalkerPhazeTime <= 0)

  00179	66 83 be 1e 02
	00 00 00	 cmp	 WORD PTR [esi+542], 0
  00181	7f 40		 jg	 SHORT $LN16@ProcState_@3

; 261  : 				{
; 262  : 					PMSG_NOTICE pNotice;
; 263  : 					TNotice::MakeNoticeMsg(&pNotice, 0, "Ice walker time passed");

  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IKDDMHHM@Ice?5walker?5time?5passed?$AA@
  00188	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$213321[ebp]
  0018e	6a 00		 push	 0
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 264  : 					this->SendDoppelGangerPlayer((LPBYTE)&pNotice, pNotice.h.size);

  00196	0f b6 8d ed fe
	ff ff		 movzx	 ecx, BYTE PTR _pNotice$213321[ebp+1]
  0019d	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a0	51		 push	 ecx
  001a1	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$213321[ebp]
  001a7	52		 push	 edx
  001a8	8b ce		 mov	 ecx, esi
  001aa	e8 00 00 00 00	 call	 ?SendDoppelGangerPlayer@CDoppelGanger@@QAEXPAEH@Z ; CDoppelGanger::SendDoppelGangerPlayer

; 265  : 					gObjDel(this->m_DGData.IceWalkerIndex);

  001af	0f bf 46 52	 movsx	 eax, WORD PTR [esi+82]
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  001b9	83 c4 04	 add	 esp, 4

; 266  : 					this->m_DGData.IceWalkerIndex = -1;

  001bc	83 c9 ff	 or	 ecx, -1
  001bf	66 89 4e 52	 mov	 WORD PTR [esi+82], cx
$LN16@ProcState_@3:

; 267  : 				}
; 268  : 			}
; 269  : 		}
; 270  : 
; 271  : 		if(this->m_DGData.MonsterPassed >= GOER_MAX_PASS_PORTAL)

  001c3	80 7e 47 03	 cmp	 BYTE PTR [esi+71], 3
  001c7	72 23		 jb	 SHORT $LN17@ProcState_@3

; 272  : 		{
; 273  : 			this->SendResultMessage(DG_RESULT_DEFENSE_FAIL, true, -1);

  001c9	6a ff		 push	 -1
  001cb	53		 push	 ebx
  001cc	6a 02		 push	 2
  001ce	8b ce		 mov	 ecx, esi
  001d0	e8 00 00 00 00	 call	 ?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z ; CDoppelGanger::SendResultMessage

; 274  : 			this->SetState(DG_STATE_ENDED);

  001d5	6a 04		 push	 4
  001d7	8b ce		 mov	 ecx, esi
  001d9	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState

; 275  : 			LogAddTD("[DoppelGanger] Quest Failed - too many monsters passed portal");

  001de	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@EHJBCEFB@?$FLDoppelGanger?$FN?5Quest?5Failed?5?9?5to@
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001e9	83 c4 04	 add	 esp, 4
$LN17@ProcState_@3:

; 276  : 		}
; 277  : 
; 278  : 		if(this->m_DGData.eDuration <= 0)

  001ec	83 be 08 02 00
	00 00		 cmp	 DWORD PTR [esi+520], 0
  001f3	7f 31		 jg	 SHORT $LN18@ProcState_@3

; 279  : 		{
; 280  : 			this->CreateFinalChest();

  001f5	8b ce		 mov	 ecx, esi
  001f7	e8 00 00 00 00	 call	 ?CreateFinalChest@CDoppelGanger@@QAEXXZ ; CDoppelGanger::CreateFinalChest

; 281  : 			this->SendResultMessage(DG_RESULT_SUCCESS, true, -1);

  001fc	6a ff		 push	 -1
  001fe	53		 push	 ebx
  001ff	6a 00		 push	 0
  00201	8b ce		 mov	 ecx, esi
  00203	e8 00 00 00 00	 call	 ?SendResultMessage@CDoppelGanger@@QAEXE_NH@Z ; CDoppelGanger::SendResultMessage

; 282  : 			this->SetState(DG_STATE_ENDED);

  00208	6a 04		 push	 4
  0020a	8b ce		 mov	 ecx, esi
  0020c	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState

; 283  : 			LogAddTD("[DoppelGanger] Quest Success | Monsters: (%d/%d)", this->m_DGData.MonsterPassed, GOER_MAX_PASS_PORTAL);

  00211	0f b6 56 47	 movzx	 edx, BYTE PTR [esi+71]
  00215	6a 03		 push	 3
  00217	52		 push	 edx
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@IKIFAIFH@?$FLDoppelGanger?$FN?5Quest?5Success?5?$HM?5M@
  0021d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00223	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@ProcState_@3:
  00226	5b		 pop	 ebx
$LN1@ProcState_@3:

; 284  : 		}
; 285  : 	}
; 286  : }

  00227	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022a	5f		 pop	 edi
  0022b	33 cd		 xor	 ecx, ebp
  0022d	5e		 pop	 esi
  0022e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c3		 ret	 0
?ProcState_STARTED@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::ProcState_STARTED
_TEXT	ENDS
PUBLIC	?ProcState_ENDED@CDoppelGanger@@QAEXXZ		; CDoppelGanger::ProcState_ENDED
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_ENDED@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?ProcState_ENDED@CDoppelGanger@@QAEXXZ PROC		; CDoppelGanger::ProcState_ENDED, COMDAT
; _this$ = ecx

; 289  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 290  : 	int Tick = GetTickCount() - this->m_DGData.TickCount;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 86 18 02 00
	00		 sub	 eax, DWORD PTR [esi+536]

; 291  : 
; 292  : 	if(Tick >= 1000)

  00012	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00017	7c 20		 jl	 SHORT $LN1@ProcState_@4

; 293  : 	{
; 294  : 		this->m_DGData.eDuration -= Tick;

  00019	29 86 08 02 00
	00		 sub	 DWORD PTR [esi+520], eax

; 295  : 		this->m_DGData.TickCount = GetTickCount();

  0001f	ff d7		 call	 edi

; 296  : 
; 297  : 		if(this->m_DGData.eDuration <= 0)

  00021	83 be 08 02 00
	00 00		 cmp	 DWORD PTR [esi+520], 0
  00028	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  0002e	7f 09		 jg	 SHORT $LN1@ProcState_@4

; 298  : 		{
; 299  : 			//this->CreateFinalChest();
; 300  : 			this->SetState(DG_STATE_OPEN);	

  00030	6a 01		 push	 1
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
$LN1@ProcState_@4:

; 301  : 		}
; 302  : 	}
; 303  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
?ProcState_ENDED@CDoppelGanger@@QAEXXZ ENDP		; CDoppelGanger::ProcState_ENDED
_TEXT	ENDS
PUBLIC	?begin@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@@2@XZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::end
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<DG_MONSTER_STAT> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<DG_MONSTER_STAT> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<DG_MONSTER_STAT> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@U1@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@U1@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@U1@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@U3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@$$QAU2@@Z ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT>
  0001e	83 c6 18	 add	 esi, 24			; 00000018H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 18	 add	 edi, 24			; 00000018H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@U1@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>
_TEXT	ENDS
PUBLIC	?Run@CDoppelGanger@@QAEXXZ			; CDoppelGanger::Run
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\doublegoer.cpp
;	COMDAT ?Run@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?Run@CDoppelGanger@@QAEXXZ PROC				; CDoppelGanger::Run, COMDAT
; _this$ = ecx

; 145  : 	switch ( this->m_DGData.btPlayState )

  00000	0f b6 41 4a	 movzx	 eax, BYTE PTR [ecx+74]
  00004	83 f8 04	 cmp	 eax, 4
  00007	77 1b		 ja	 SHORT $LN6@Run
  00009	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@Run[eax*4]
$LN4@Run:

; 146  : 	{
; 147  : 	case DG_STATE_NONE:
; 148  : 		return;
; 149  : 	case DG_STATE_OPEN:
; 150  : 		this->ProcState_OPEN();

  00010	e9 00 00 00 00	 jmp	 ?ProcState_OPEN@CDoppelGanger@@QAEXXZ ; CDoppelGanger::ProcState_OPEN
$LN3@Run:

; 151  : 		break;
; 152  : 	case DG_STATE_WAITING:
; 153  : 		this->ProcState_WAITING();

  00015	e9 00 00 00 00	 jmp	 ?ProcState_WAITING@CDoppelGanger@@QAEXXZ ; CDoppelGanger::ProcState_WAITING
$LN2@Run:

; 154  : 		break;
; 155  : 	case DG_STATE_STARTED:
; 156  : 		this->ProcState_STARTED();

  0001a	e9 00 00 00 00	 jmp	 ?ProcState_STARTED@CDoppelGanger@@QAEXXZ ; CDoppelGanger::ProcState_STARTED
$LN1@Run:

; 157  : 		break;
; 158  : 	case DG_STATE_ENDED:
; 159  : 		this->ProcState_ENDED();

  0001f	e9 00 00 00 00	 jmp	 ?ProcState_ENDED@CDoppelGanger@@QAEXXZ ; CDoppelGanger::ProcState_ENDED
$LN6@Run:

; 160  : 		break;
; 161  : 	}
; 162  : }

  00024	c3		 ret	 0
  00025	8d 49 00	 npad	 3
$LN11@Run:
  00028	00 00 00 00	 DD	 $LN6@Run
  0002c	00 00 00 00	 DD	 $LN4@Run
  00030	00 00 00 00	 DD	 $LN3@Run
  00034	00 00 00 00	 DD	 $LN2@Run
  00038	00 00 00 00	 DD	 $LN1@Run
?Run@CDoppelGanger@@QAEXXZ ENDP				; CDoppelGanger::Run
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?SetMonsterStats@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ; CDoppelGanger::SetMonsterStats
;	COMDAT __real@4059000000000000
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\doublegoer.cpp
CONST	ENDS
;	COMDAT ?SetMonsterStats@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv514 = -4						; size = 4
tv495 = 8						; size = 4
tv489 = 8						; size = 4
tv483 = 8						; size = 4
tv446 = 8						; size = 4
_lpObj$ = 8						; size = 4
?SetMonsterStats@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDoppelGanger::SetMonsterStats, COMDAT
; _this$ = ecx

; 1119 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1120 : 	if(!DGUseAutoStat)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DGUseAutoStat@@3HA, 0 ; DGUseAutoStat
  0000b	0f 84 3e 01 00
	00		 je	 $LN1@SetMonster

; 1121 : 	{
; 1122 : 		return;
; 1123 : 	}
; 1124 : 
; 1125 : 	short partyinc = 0;
; 1126 : 
; 1127 : 	switch ( this->m_DGData.PlayerCount )

  00011	0f b6 41 44	 movzx	 eax, BYTE PTR [ecx+68]
  00015	57		 push	 edi
  00016	83 c0 fe	 add	 eax, -2			; fffffffeH
  00019	33 ff		 xor	 edi, edi
  0001b	83 f8 03	 cmp	 eax, 3
  0001e	77 21		 ja	 SHORT $LN10@SetMonster
  00020	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN124@SetMonster[eax*4]
$LN9@SetMonster:

; 1128 : 	{
; 1129 : 	case 2:
; 1130 : 		partyinc = 20;

  00027	bf 14 00 00 00	 mov	 edi, 20			; 00000014H

; 1131 : 		break;

  0002c	eb 13		 jmp	 SHORT $LN10@SetMonster
$LN8@SetMonster:

; 1132 : 	case 3:
; 1133 : 		partyinc = 50;

  0002e	bf 32 00 00 00	 mov	 edi, 50			; 00000032H

; 1134 : 		break;

  00033	eb 0c		 jmp	 SHORT $LN10@SetMonster
$LN7@SetMonster:

; 1135 : 	case 4:
; 1136 : 		partyinc = 100;

  00035	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 1137 : 		break;

  0003a	eb 05		 jmp	 SHORT $LN10@SetMonster
$LN6@SetMonster:

; 1138 : 	case 5:
; 1139 : 		partyinc = 170;

  0003c	bf aa 00 00 00	 mov	 edi, 170		; 000000aaH
$LN10@SetMonster:

; 1140 : 		break;
; 1141 : 	}
; 1142 : 
; 1143 : 
; 1144 : 	std::vector<DG_MONSTER_STAT>::iterator Iterator;
; 1145 : 
; 1146 : 	for(Iterator = this->m_vtDGMobStat.begin(); Iterator != this->m_vtDGMobStat.end(); ++Iterator)

  00041	8b 81 24 02 00
	00		 mov	 eax, DWORD PTR [ecx+548]
  00047	8b 91 28 02 00
	00		 mov	 edx, DWORD PTR [ecx+552]
  0004d	3b c2		 cmp	 eax, edx
  0004f	0f 84 f9 00 00
	00		 je	 $LN121@SetMonster
  00055	0f b7 89 20 02
	00 00		 movzx	 ecx, WORD PTR [ecx+544]
  0005c	56		 push	 esi
  0005d	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 1147 : 	{
; 1148 : 		if(this->m_DGData.EventLevel == Iterator->EventLevel && lpObj->Class == Iterator->Class)

  00060	89 4d fc	 mov	 DWORD PTR tv514[ebp], ecx
  00063	53		 push	 ebx
$LL120@SetMonster:
  00064	66 8b 4d fc	 mov	 cx, WORD PTR tv514[ebp]
  00068	66 3b 08	 cmp	 cx, WORD PTR [eax]
  0006b	75 0f		 jne	 SHORT $LN4@SetMonster
  0006d	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  00074	0f bf 58 02	 movsx	 ebx, WORD PTR [eax+2]
  00078	3b cb		 cmp	 ecx, ebx
  0007a	74 10		 je	 SHORT $LN118@SetMonster
$LN4@SetMonster:

; 1140 : 		break;
; 1141 : 	}
; 1142 : 
; 1143 : 
; 1144 : 	std::vector<DG_MONSTER_STAT>::iterator Iterator;
; 1145 : 
; 1146 : 	for(Iterator = this->m_vtDGMobStat.begin(); Iterator != this->m_vtDGMobStat.end(); ++Iterator)

  0007c	83 c0 18	 add	 eax, 24			; 00000018H
  0007f	3b c2		 cmp	 eax, edx
  00081	75 e1		 jne	 SHORT $LL120@SetMonster
  00083	5b		 pop	 ebx
  00084	5e		 pop	 esi
  00085	5f		 pop	 edi

; 1163 : 			}
; 1164 : 			break;
; 1165 : 		}
; 1166 : 	}
; 1167 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
$LN118@SetMonster:

; 1149 : 		{
; 1150 : 			lpObj->Level = Iterator->Level;

  0008c	66 8b 50 04	 mov	 dx, WORD PTR [eax+4]
  00090	66 89 96 be 00
	00 00		 mov	 WORD PTR [esi+190], dx

; 1151 : 			lpObj->Life = Iterator->HP;

  00097	db 40 08	 fild	 DWORD PTR [eax+8]
  0009a	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 1152 : 			lpObj->MaxLife = Iterator->HP;

  000a0	db 40 08	 fild	 DWORD PTR [eax+8]
  000a3	d9 9e 00 01 00
	00		 fstp	 DWORD PTR [esi+256]

; 1153 : 			lpObj->m_Defense = Iterator->Defense;

  000a9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ac	89 8e 94 04 00
	00		 mov	 DWORD PTR [esi+1172], ecx

; 1154 : 			lpObj->m_AttackDamageMin = Iterator->DmgMin;

  000b2	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000b5	89 96 60 04 00
	00		 mov	 DWORD PTR [esi+1120], edx

; 1155 : 			lpObj->m_AttackDamageMax = Iterator->DmgMax;

  000bb	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000be	89 86 64 04 00
	00		 mov	 DWORD PTR [esi+1124], eax

; 1156 : 			if(partyinc != 0)

  000c4	66 85 ff	 test	 di, di
  000c7	0f 84 7f 00 00
	00		 je	 $LN123@SetMonster

; 1157 : 			{
; 1158 : 				lpObj->Life = ((lpObj->Life * partyinc)/100.0f);

  000cd	0f bf ff	 movsx	 edi, di
  000d0	89 7d 08	 mov	 DWORD PTR tv446[ebp], edi

; 1159 : 				lpObj->MaxLife = ((lpObj->MaxLife * partyinc)/100.0f);
; 1160 : 				lpObj->m_Defense = ((lpObj->m_Defense * partyinc)/100.0f);

  000d3	0f af cf	 imul	 ecx, edi
  000d6	db 45 08	 fild	 DWORD PTR tv446[ebp]
  000d9	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  000df	d8 c9		 fmul	 ST(0), ST(1)
  000e1	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  000e7	dc f9		 fdiv	 ST(1), ST(0)
  000e9	89 4d 08	 mov	 DWORD PTR tv495[ebp], ecx
  000ec	d9 c9		 fxch	 ST(1)
  000ee	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  000f4	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  000fa	de ca		 fmulp	 ST(2), ST(0)
  000fc	dc f9		 fdiv	 ST(1), ST(0)
  000fe	d9 c9		 fxch	 ST(1)
  00100	d9 9e 00 01 00
	00		 fstp	 DWORD PTR [esi+256]
  00106	db 45 08	 fild	 DWORD PTR tv495[ebp]
  00109	d8 f1		 fdiv	 ST(0), ST(1)
  0010b	e8 00 00 00 00	 call	 __ftol2_sse

; 1161 : 				lpObj->m_AttackDamageMin = ((lpObj->m_AttackDamageMin * partyinc)/100.0f);

  00110	8b 96 60 04 00
	00		 mov	 edx, DWORD PTR [esi+1120]
  00116	0f af d7	 imul	 edx, edi
  00119	89 55 08	 mov	 DWORD PTR tv489[ebp], edx
  0011c	89 86 94 04 00
	00		 mov	 DWORD PTR [esi+1172], eax
  00122	db 45 08	 fild	 DWORD PTR tv489[ebp]
  00125	d8 f1		 fdiv	 ST(0), ST(1)
  00127	e8 00 00 00 00	 call	 __ftol2_sse
  0012c	89 86 60 04 00
	00		 mov	 DWORD PTR [esi+1120], eax

; 1162 : 				lpObj->m_AttackDamageMax = ((lpObj->m_AttackDamageMax * partyinc)/100.0f);

  00132	8b 86 64 04 00
	00		 mov	 eax, DWORD PTR [esi+1124]
  00138	0f af c7	 imul	 eax, edi
  0013b	89 45 08	 mov	 DWORD PTR tv483[ebp], eax
  0013e	da 7d 08	 fidivr	 DWORD PTR tv483[ebp]
  00141	e8 00 00 00 00	 call	 __ftol2_sse
  00146	89 86 64 04 00
	00		 mov	 DWORD PTR [esi+1124], eax
$LN123@SetMonster:
  0014c	5b		 pop	 ebx
  0014d	5e		 pop	 esi
$LN121@SetMonster:
  0014e	5f		 pop	 edi
$LN1@SetMonster:

; 1163 : 			}
; 1164 : 			break;
; 1165 : 		}
; 1166 : 	}
; 1167 : }

  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 04 00	 ret	 4
  00155	8d 49 00	 npad	 3
$LN124@SetMonster:
  00158	00 00 00 00	 DD	 $LN9@SetMonster
  0015c	00 00 00 00	 DD	 $LN8@SetMonster
  00160	00 00 00 00	 DD	 $LN7@SetMonster
  00164	00 00 00 00	 DD	 $LN6@SetMonster
?SetMonsterStats@CDoppelGanger@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDoppelGanger::SetMonsterStats
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z ; std::_Destroy_range<std::allocator<DG_MONSTER_STAT> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z PROC ; std::_Destroy_range<std::allocator<DG_MONSTER_STAT> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAXPAUDG_MONSTER_STAT@@0AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<DG_MONSTER_STAT> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z ; std::_Uninitialized_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z
_TEXT	SEGMENT
__Cat$215718 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z PROC ; std::_Uninitialized_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$215718[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@U1@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@@Z ENDP ; std::_Uninitialized_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXPAUDG_MONSTER_STAT@@0@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXPAUDG_MONSTER_STAT@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXPAUDG_MONSTER_STAT@@0@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXPAUDG_MONSTER_STAT@@0@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUDG_MONSTER_STAT@@@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEPAUDG_MONSTER_STAT@@PAU2@00@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Umove<DG_MONSTER_STAT *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUDG_MONSTER_STAT@@@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEPAUDG_MONSTER_STAT@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$215741 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUDG_MONSTER_STAT@@@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEPAUDG_MONSTER_STAT@@PAU2@00@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Umove<DG_MONSTER_STAT *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$215741[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@U1@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUDG_MONSTER_STAT@@@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEPAUDG_MONSTER_STAT@@PAU2@00@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Umove<DG_MONSTER_STAT *>
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXXZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXXZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXXZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$214004 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$215809 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00036	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004c	f7 e9		 imul	 ecx
  0004e	c1 fa 02	 sar	 edx, 2
  00051	8b c2		 mov	 eax, edx
  00053	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00056	03 c2		 add	 eax, edx
  00058	3b c3		 cmp	 eax, ebx
  0005a	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005c	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005f	53		 push	 ebx
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@UDG_MONSTER_STAT@@@std@@QAEPAUDG_MONSTER_STAT@@I@Z ; std::allocator<DG_MONSTER_STAT>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00067	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$215809[ebp]
  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006d	8b 16		 mov	 edx, DWORD PTR [esi]
  0006f	53		 push	 ebx
  00070	6a 00		 push	 0
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	89 45 ec	 mov	 DWORD PTR __Ptr$214004[ebp], eax
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00080	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUDG_MONSTER_STAT@@PAU1@V?$allocator@UDG_MONSTER_STAT@@@std@@U1@@std@@YAPAUDG_MONSTER_STAT@@PAU1@00AAV?$allocator@UDG_MONSTER_STAT@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DG_MONSTER_STAT *,DG_MONSTER_STAT *,std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00085	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00087	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008a	2b cb		 sub	 ecx, ebx
  0008c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00091	f7 e9		 imul	 ecx
  00093	c1 fa 02	 sar	 edx, 2
  00096	8b fa		 mov	 edi, edx
  00098	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	03 fa		 add	 edi, edx

; 761  : 			if (this->_Myfirst != 0)

  000a0	85 db		 test	 ebx, ebx
  000a2	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000ad	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000b0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000b3	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$214004[ebp]
  000b6	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000b9	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000bc	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000bf	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  000c2	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000c5	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000db	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$214004[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000e7	6a 00		 push	 0
  000e9	6a 00		 push	 0
  000eb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000f0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::reserve
PUBLIC	??1?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::~vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::~vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAE@XZ ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::~vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXI@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXI@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 39		 mov	 edi, DWORD PTR [ecx]
  0000a	2b d7		 sub	 edx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 ea		 imul	 edx

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	c1 fa 02	 sar	 edx, 2
  00019	8b f2		 mov	 esi, edx
  0001b	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001e	03 f2		 add	 esi, edx
  00020	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00025	2b d0		 sub	 edx, eax
  00027	3b d6		 cmp	 edx, esi
  00029	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00030	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	03 f0		 add	 esi, eax
  0003a	2b d7		 sub	 edx, edi
  0003c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00041	f7 ea		 imul	 edx
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	3b f0		 cmp	 esi, eax
  0004f	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00051	8b d0		 mov	 edx, eax
  00053	d1 ea		 shr	 edx, 1
  00055	bf aa aa aa 0a	 mov	 edi, 178956970		; 0aaaaaaaH
  0005a	2b fa		 sub	 edi, edx
  0005c	3b f8		 cmp	 edi, eax
  0005e	73 04		 jae	 SHORT $LN23@Reserve
  00060	33 c0		 xor	 eax, eax
  00062	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00064	03 c2		 add	 eax, edx
$LN24@Reserve:
  00066	3b c6		 cmp	 eax, esi
  00068	73 02		 jae	 SHORT $LN20@Reserve
  0006a	8b c6		 mov	 eax, esi
$LN20@Reserve:
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXI@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::reserve
$LN1@Reserve:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi

; 1298 : 		}

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CDoppelGanger@@QAE@XZ			; CDoppelGanger::CDoppelGanger
; Function compile flags: /Ogtp
;	COMDAT ??0CDoppelGanger@@QAE@XZ
_TEXT	SEGMENT
??0CDoppelGanger@@QAE@XZ PROC				; CDoppelGanger::CDoppelGanger, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 88 24 02 00
	00		 mov	 DWORD PTR [eax+548], ecx
  0000a	89 88 28 02 00
	00		 mov	 DWORD PTR [eax+552], ecx
  00010	89 88 2c 02 00
	00		 mov	 DWORD PTR [eax+556], ecx
  00016	c3		 ret	 0
??0CDoppelGanger@@QAE@XZ ENDP				; CDoppelGanger::CDoppelGanger
_TEXT	ENDS
PUBLIC	??1CDoppelGanger@@QAE@XZ			; CDoppelGanger::~CDoppelGanger
; Function compile flags: /Ogtp
;	COMDAT ??1CDoppelGanger@@QAE@XZ
_TEXT	SEGMENT
??1CDoppelGanger@@QAE@XZ PROC				; CDoppelGanger::~CDoppelGanger, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 86 24 02 00
	00		 mov	 eax, DWORD PTR [esi+548]
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN11@CDoppelGan
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN11@CDoppelGan:
  00016	c7 86 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+548], 0
  00020	c7 86 28 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+552], 0
  0002a	c7 86 2c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+556], 0
  00034	5e		 pop	 esi
  00035	c3		 ret	 0
??1CDoppelGanger@@QAE@XZ ENDP				; CDoppelGanger::~CDoppelGanger
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXABUDG_MONSTER_STAT@@@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXABUDG_MONSTER_STAT@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXABUDG_MONSTER_STAT@@@Z PROC ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4a		 jae	 SHORT $LN4@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 44		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 02	 sar	 edx, 2
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXI@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0003d	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	52		 push	 edx
  00044	50		 push	 eax
  00045	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@AAU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@AAU2@@Z ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00051	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0005b	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005e	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00060	6a 01		 push	 1
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@IAEXI@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00069	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0006c	57		 push	 edi
  0006d	52		 push	 edx
  0006e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDG_MONSTER_STAT@@@std@@UDG_MONSTER_STAT@@ABU3@@std@@YAXAAV?$allocator@UDG_MONSTER_STAT@@@0@PAUDG_MONSTER_STAT@@ABU2@@Z ; std::_Cons_val<std::allocator<DG_MONSTER_STAT>,DG_MONSTER_STAT,DG_MONSTER_STAT const &>
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0007a	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?push_back@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXABUDG_MONSTER_STAT@@@Z ENDP ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0CH@FDGIGGED@?$FLDoppelGanger?$FN?5Loaded?5?$CFd?5Monster@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0FE@LHJMLGEG@?$FLDoppelGanger?$FN?5Load?5Option?3?5Enab@ ; `string'
PUBLIC	??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadConfigFile@CDoppelGanger@@QAE_NPAD@Z	; CDoppelGanger::LoadConfigFile
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
;	COMDAT ??_C@_0CH@FDGIGGED@?$FLDoppelGanger?$FN?5Loaded?5?$CFd?5Monster@
; File e:\work\tranet_version\gs\gameserver\doublegoer.cpp
CONST	SEGMENT
??_C@_0CH@FDGIGGED@?$FLDoppelGanger?$FN?5Loaded?5?$CFd?5Monster@ DB '[Dop'
	DB	'pelGanger] Loaded %d Monster stats', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@LHJMLGEG@?$FLDoppelGanger?$FN?5Load?5Option?3?5Enab@
CONST	SEGMENT
??_C@_0FE@LHJMLGEG@?$FLDoppelGanger?$FN?5Load?5Option?3?5Enab@ DB '[Doppe'
	DB	'lGanger] Load Option: Enabled: %d, CoolDown: %d, AutoStat: %d'
	DB	', EnterMoney: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@ DB '%s file not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadConfigFile@CDoppelGanger@@QAE_NPAD@Z
_TEXT	SEGMENT
_Stat$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_hFile$ = 8						; size = 4
?LoadConfigFile@CDoppelGanger@@QAE_NPAD@Z PROC		; CDoppelGanger::LoadConfigFile, COMDAT
; _this$ = ecx

; 1007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _hFile$[ebp]
  00014	57		 push	 edi

; 1008 : 	SMDFile = fopen(hFile, "r");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001a	56		 push	 esi
  0001b	8b f9		 mov	 edi, ecx
  0001d	e8 00 00 00 00	 call	 _fopen
  00022	83 c4 08	 add	 esp, 8
  00025	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 1009 : 
; 1010 : 	if(SMDFile == NULL)

  0002a	85 c0		 test	 eax, eax
  0002c	75 22		 jne	 SHORT $LN12@LoadConfig

; 1011 : 	{
; 1012 : 		MsgBox("%s file not found", hFile);

  0002e	56		 push	 esi
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@
  00034	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi

; 1013 : 		return false;

  0003d	32 c0		 xor	 al, al
  0003f	5e		 pop	 esi

; 1091 : 	return true;
; 1092 : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN12@LoadConfig:

; 1014 : 	}
; 1015 : 
; 1016 : 	int Token;
; 1017 : 	int n = 0;

  00050	33 f6		 xor	 esi, esi

; 1018 : 	int type;
; 1019 : 
; 1020 : 	DG_MONSTER_STAT Stat;
; 1021 : 
; 1022 : 	while(true)
; 1023 : 	{
; 1024 : 		type = 0;
; 1025 : 
; 1026 : 		Token = GetToken();

  00052	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1027 : 
; 1028 : 		if(Token == END)

  00057	83 f8 02	 cmp	 eax, 2
  0005a	0f 84 9c 01 00
	00		 je	 $LN21@LoadConfig
$LL11@LoadConfig:

; 1029 : 			break;
; 1030 : 
; 1031 : 		if(Token == NAME)

  00060	85 c0		 test	 eax, eax
  00062	0f 84 86 01 00
	00		 je	 $LN19@LoadConfig

; 1032 : 			continue;
; 1033 : 
; 1034 : 		type = TokenNumber;

  00068	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0006e	e8 00 00 00 00	 call	 __ftol2_sse

; 1035 : 
; 1036 : 		if(type == 1)

  00073	83 f8 01	 cmp	 eax, 1
  00076	75 7c		 jne	 SHORT $LN7@LoadConfig

; 1037 : 		{
; 1038 : 			Token = GetToken();

  00078	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1039 : 			DGEnabled = TokenNumber;

  0007d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00083	e8 00 00 00 00	 call	 __ftol2_sse
  00088	a3 00 00 00 00	 mov	 DWORD PTR ?DGEnabled@@3HA, eax ; DGEnabled

; 1040 : 
; 1041 : 			Token = GetToken();

  0008d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1042 : 			DGCoolDown = TokenNumber;

  00092	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00098	e8 00 00 00 00	 call	 __ftol2_sse
  0009d	a3 00 00 00 00	 mov	 DWORD PTR ?DGCoolDown@@3HA, eax ; DGCoolDown

; 1043 : 
; 1044 : 			Token = GetToken();

  000a2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1045 : 			DGUseAutoStat = TokenNumber;

  000a7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ad	e8 00 00 00 00	 call	 __ftol2_sse
  000b2	a3 00 00 00 00	 mov	 DWORD PTR ?DGUseAutoStat@@3HA, eax ; DGUseAutoStat

; 1046 : 
; 1047 : 			Token = GetToken();

  000b7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1048 : 			DGEnterMoney = TokenNumber;

  000bc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c2	e8 00 00 00 00	 call	 __ftol2_sse

; 1049 : 
; 1050 : 			LogAddTD("[DoppelGanger] Load Option: Enabled: %d, CoolDown: %d, AutoStat: %d, EnterMoney: %d", DGEnabled, DGCoolDown, DGUseAutoStat, DGEnterMoney);

  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DGCoolDown@@3HA ; DGCoolDown
  000cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DGEnabled@@3HA ; DGEnabled
  000d3	50		 push	 eax
  000d4	a3 00 00 00 00	 mov	 DWORD PTR ?DGEnterMoney@@3HA, eax ; DGEnterMoney
  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DGUseAutoStat@@3HA ; DGUseAutoStat
  000de	50		 push	 eax
  000df	51		 push	 ecx
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@LHJMLGEG@?$FLDoppelGanger?$FN?5Load?5Option?3?5Enab@
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000ec	83 c4 14	 add	 esp, 20			; 00000014H
  000ef	e9 fa 00 00 00	 jmp	 $LN19@LoadConfig
$LN7@LoadConfig:

; 1051 : 		}
; 1052 : 
; 1053 : 		else if(type == 2)

  000f4	83 f8 02	 cmp	 eax, 2
  000f7	0f 85 f1 00 00
	00		 jne	 $LN19@LoadConfig

; 1054 : 		{
; 1055 : 			while(true)
; 1056 : 			{
; 1057 : 				Token = GetToken();

  000fd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1058 : 
; 1059 : 				if(Token == END)

  00102	83 f8 02	 cmp	 eax, 2
  00105	0f 84 e3 00 00
	00		 je	 $LN19@LoadConfig
  0010b	eb 03 8d 49 00	 npad	 5
$LL4@LoadConfig:

; 1060 : 					break;
; 1061 : 
; 1062 : 				if(strcmp("end", TokenString)== 0)

  00110	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00115	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0011a	8d 9b 00 00 00
	00		 npad	 6
$LL23@LoadConfig:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN24@LoadConfig
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN25@LoadConfig
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN24@LoadConfig
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL23@LoadConfig
$LN25@LoadConfig:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN26@LoadConfig
$LN24@LoadConfig:
  00140	1b c0		 sbb	 eax, eax
  00142	83 d8 ff	 sbb	 eax, -1
$LN26@LoadConfig:
  00145	85 c0		 test	 eax, eax
  00147	0f 84 a1 00 00
	00		 je	 $LN19@LoadConfig

; 1063 : 					break;
; 1064 : 
; 1065 : 				Stat.EventLevel = TokenNumber;

  0014d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00153	e8 00 00 00 00	 call	 __ftol2_sse
  00158	66 89 45 e4	 mov	 WORD PTR _Stat$[ebp], ax

; 1066 : 
; 1067 : 				Token = GetToken();

  0015c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1068 : 				Stat.Class = TokenNumber;

  00161	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00167	e8 00 00 00 00	 call	 __ftol2_sse
  0016c	66 89 45 e6	 mov	 WORD PTR _Stat$[ebp+2], ax

; 1069 : 
; 1070 : 				Token = GetToken();

  00170	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1071 : 				Stat.Level = TokenNumber;

  00175	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0017b	e8 00 00 00 00	 call	 __ftol2_sse
  00180	66 89 45 e8	 mov	 WORD PTR _Stat$[ebp+4], ax

; 1072 : 
; 1073 : 				Token = GetToken();

  00184	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1074 : 				Stat.HP = TokenNumber;

  00189	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018f	e8 00 00 00 00	 call	 __ftol2_sse
  00194	89 45 ec	 mov	 DWORD PTR _Stat$[ebp+8], eax

; 1075 : 
; 1076 : 				Token = GetToken();

  00197	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1077 : 				Stat.DmgMin = TokenNumber;

  0019c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a2	e8 00 00 00 00	 call	 __ftol2_sse
  001a7	89 45 f0	 mov	 DWORD PTR _Stat$[ebp+12], eax

; 1078 : 
; 1079 : 				Token = GetToken();

  001aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1080 : 				Stat.DmgMax = TokenNumber;

  001af	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b5	e8 00 00 00 00	 call	 __ftol2_sse
  001ba	89 45 f4	 mov	 DWORD PTR _Stat$[ebp+16], eax

; 1081 : 
; 1082 : 				Token = GetToken();

  001bd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1083 : 				Stat.Defense = TokenNumber;

  001c2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c8	e8 00 00 00 00	 call	 __ftol2_sse
  001cd	89 45 f8	 mov	 DWORD PTR _Stat$[ebp+20], eax

; 1084 : 
; 1085 : 				this->m_vtDGMobStat.push_back(Stat);

  001d0	8d 45 e4	 lea	 eax, DWORD PTR _Stat$[ebp]
  001d3	50		 push	 eax
  001d4	8d 8f 24 02 00
	00		 lea	 ecx, DWORD PTR [edi+548]
  001da	e8 00 00 00 00	 call	 ?push_back@?$vector@UDG_MONSTER_STAT@@V?$allocator@UDG_MONSTER_STAT@@@std@@@std@@QAEXABUDG_MONSTER_STAT@@@Z ; std::vector<DG_MONSTER_STAT,std::allocator<DG_MONSTER_STAT> >::push_back

; 1086 : 				++n;

  001df	46		 inc	 esi
  001e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001e5	83 f8 02	 cmp	 eax, 2
  001e8	0f 85 22 ff ff
	ff		 jne	 $LL4@LoadConfig
$LN19@LoadConfig:

; 1018 : 	int type;
; 1019 : 
; 1020 : 	DG_MONSTER_STAT Stat;
; 1021 : 
; 1022 : 	while(true)
; 1023 : 	{
; 1024 : 		type = 0;
; 1025 : 
; 1026 : 		Token = GetToken();

  001ee	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 1027 : 
; 1028 : 		if(Token == END)

  001f3	83 f8 02	 cmp	 eax, 2
  001f6	0f 85 64 fe ff
	ff		 jne	 $LL11@LoadConfig
$LN21@LoadConfig:

; 1087 : 			}
; 1088 : 		}
; 1089 : 	}
; 1090 : 	LogAddTD("[DoppelGanger] Loaded %d Monster stats",n);

  001fc	56		 push	 esi
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FDGIGGED@?$FLDoppelGanger?$FN?5Loaded?5?$CFd?5Monster@
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1091 : 	return true;
; 1092 : }

  00208	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020b	83 c4 08	 add	 esp, 8
  0020e	5f		 pop	 edi
  0020f	33 cd		 xor	 ecx, ebp
  00211	b0 01		 mov	 al, 1
  00213	5e		 pop	 esi
  00214	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00219	8b e5		 mov	 esp, ebp
  0021b	5d		 pop	 ebp
  0021c	c2 04 00	 ret	 4
?LoadConfigFile@CDoppelGanger@@QAE_NPAD@Z ENDP		; CDoppelGanger::LoadConfigFile
_TEXT	ENDS
PUBLIC	??_C@_0BH@MHAMEAEE@?2Events?2DoubleGoer?4dat?$AA@ ; `string'
PUBLIC	?Init@CDoppelGanger@@QAEXXZ			; CDoppelGanger::Init
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BH@MHAMEAEE@?2Events?2DoubleGoer?4dat?$AA@
CONST	SEGMENT
??_C@_0BH@MHAMEAEE@?2Events?2DoubleGoer?4dat?$AA@ DB '\Events\DoubleGoer.'
	DB	'dat', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@CDoppelGanger@@QAEXXZ
_TEXT	SEGMENT
?Init@CDoppelGanger@@QAEXXZ PROC			; CDoppelGanger::Init, COMDAT
; _this$ = ecx

; 38   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 39   : 
; 40   : 	// player pos
; 41   : 	this->POSX[0] = 197,	this->POSY[0] = 30;
; 42   : 	this->POSX[1] = 133,	this->POSY[1] = 68;
; 43   : 	this->POSX[2] = 110,	this->POSY[2] = 60;

  00003	b8 6e 00 00 00	 mov	 eax, 110		; 0000006eH

; 44   : 	this->POSX[3] = 95,		this->POSY[3] = 15;
; 45   : 
; 46   : 	// monster pos
; 47   : 	this->MPOSX[0] = 224,	this->MPOSY[0] = 100;
; 48   : 	this->MPOSX[1] = 113,	this->MPOSY[1] = 180;
; 49   : 	this->MPOSX[2] = 110,	this->MPOSY[2] = 150;
; 50   : 	this->MPOSX[3] = 43,	this->MPOSY[3] = 108;
; 51   : 
; 52   : 	this->m_DGData.Clear();

  00008	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  0000b	c7 46 04 c5 00
	00 00		 mov	 DWORD PTR [esi+4], 197	; 000000c5H
  00012	c7 46 14 1e 00
	00 00		 mov	 DWORD PTR [esi+20], 30	; 0000001eH
  00019	c7 46 08 85 00
	00 00		 mov	 DWORD PTR [esi+8], 133	; 00000085H
  00020	c7 46 18 44 00
	00 00		 mov	 DWORD PTR [esi+24], 68	; 00000044H
  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002a	c7 46 1c 3c 00
	00 00		 mov	 DWORD PTR [esi+28], 60	; 0000003cH
  00031	c7 46 10 5f 00
	00 00		 mov	 DWORD PTR [esi+16], 95	; 0000005fH
  00038	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  0003f	c7 46 24 e0 00
	00 00		 mov	 DWORD PTR [esi+36], 224	; 000000e0H
  00046	c7 46 34 64 00
	00 00		 mov	 DWORD PTR [esi+52], 100	; 00000064H
  0004d	c7 46 28 71 00
	00 00		 mov	 DWORD PTR [esi+40], 113	; 00000071H
  00054	c7 46 38 b4 00
	00 00		 mov	 DWORD PTR [esi+56], 180	; 000000b4H
  0005b	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0005e	c7 46 3c 96 00
	00 00		 mov	 DWORD PTR [esi+60], 150	; 00000096H
  00065	c7 46 30 2b 00
	00 00		 mov	 DWORD PTR [esi+48], 43	; 0000002bH
  0006c	c7 46 40 6c 00
	00 00		 mov	 DWORD PTR [esi+64], 108	; 0000006cH
  00073	e8 00 00 00 00	 call	 ?Clear@DOPPELGANGEREVENT@@QAEXXZ ; DOPPELGANGEREVENT::Clear

; 53   : 
; 54   : 	this->LoadConfigFile(gDirPath.GetNewPath("\\Events\\DoubleGoer.dat"));

  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MHAMEAEE@?2Events?2DoubleGoer?4dat?$AA@
  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00082	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00087	50		 push	 eax
  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?LoadConfigFile@CDoppelGanger@@QAE_NPAD@Z ; CDoppelGanger::LoadConfigFile

; 55   : 
; 56   : 	if(!DGEnabled)

  0008f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DGEnabled@@3HA, 0 ; DGEnabled

; 57   : 	{
; 58   : 		this->SetState(DG_STATE_NONE);

  00096	8b ce		 mov	 ecx, esi
  00098	75 09		 jne	 SHORT $LN2@Init
  0009a	6a 00		 push	 0

; 59   : 	}
; 60   : 	else
; 61   : 	{
; 62   : 		this->SetState(DG_STATE_OPEN);

  0009c	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
  000a1	5e		 pop	 esi

; 63   : 	}
; 64   : }

  000a2	c3		 ret	 0
$LN2@Init:

; 59   : 	}
; 60   : 	else
; 61   : 	{
; 62   : 		this->SetState(DG_STATE_OPEN);

  000a3	6a 01		 push	 1
  000a5	e8 00 00 00 00	 call	 ?SetState@CDoppelGanger@@QAEXH@Z ; CDoppelGanger::SetState
  000aa	5e		 pop	 esi

; 63   : 	}
; 64   : }

  000ab	c3		 ret	 0
?Init@CDoppelGanger@@QAEXXZ ENDP			; CDoppelGanger::Init
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_DoppelGanger@@YAXXZ
text$yc	SEGMENT
??__Eg_DoppelGanger@@YAXXZ PROC				; `dynamic initializer for 'g_DoppelGanger'', COMDAT

; 19   : CDoppelGanger g_DoppelGanger;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fg_DoppelGanger@@YAXXZ ; `dynamic atexit destructor for 'g_DoppelGanger''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Eg_DoppelGanger@@YAXXZ ENDP				; `dynamic initializer for 'g_DoppelGanger''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EstTickRate@@YAXXZ
text$yc	SEGMENT
??__EstTickRate@@YAXXZ PROC				; `dynamic initializer for 'stTickRate'', COMDAT

; 29   : int			stTickRate		= GetTickCount();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?stTickRate@@3HA, eax ; stTickRate
  0000b	c3		 ret	 0
??__EstTickRate@@YAXXZ ENDP				; `dynamic initializer for 'stTickRate''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EEventTimeTick@@YAXXZ
text$yc	SEGMENT
??__EEventTimeTick@@YAXXZ PROC				; `dynamic initializer for 'EventTimeTick'', COMDAT

; 30   : int			EventTimeTick	= GetTickCount();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?EventTimeTick@@3HA, eax ; EventTimeTick
  0000b	c3		 ret	 0
??__EEventTimeTick@@YAXXZ ENDP				; `dynamic initializer for 'EventTimeTick''
text$yc	ENDS
EXTRN	??0TMonsterAIUtil@@QAE@XZ:PROC			; TMonsterAIUtil::TMonsterAIUtil
; Function compile flags: /Ogtp
;	COMDAT ??__EDG_UTIL@@YAXXZ
text$yc	SEGMENT
??__EDG_UTIL@@YAXXZ PROC				; `dynamic initializer for 'DG_UTIL'', COMDAT

; 33   : static		TMonsterAIUtil DG_UTIL;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET _DG_UTIL
  00005	e8 00 00 00 00	 call	 ??0TMonsterAIUtil@@QAE@XZ ; TMonsterAIUtil::TMonsterAIUtil
  0000a	68 00 00 00 00	 push	 OFFSET ??__FDG_UTIL@@YAXXZ ; `dynamic atexit destructor for 'DG_UTIL''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EDG_UTIL@@YAXXZ ENDP				; `dynamic initializer for 'DG_UTIL''
text$yc	ENDS
EXTRN	??1TMonsterAIUtil@@UAE@XZ:PROC			; TMonsterAIUtil::~TMonsterAIUtil
; Function compile flags: /Ogtp
;	COMDAT ??__FDG_UTIL@@YAXXZ
text$yd	SEGMENT
??__FDG_UTIL@@YAXXZ PROC				; `dynamic atexit destructor for 'DG_UTIL'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET _DG_UTIL
  00005	e9 00 00 00 00	 jmp	 ??1TMonsterAIUtil@@UAE@XZ ; TMonsterAIUtil::~TMonsterAIUtil
??__FDG_UTIL@@YAXXZ ENDP				; `dynamic atexit destructor for 'DG_UTIL''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__Fg_DoppelGanger@@YAXXZ
text$yd	SEGMENT
??__Fg_DoppelGanger@@YAXXZ PROC				; `dynamic atexit destructor for 'g_DoppelGanger'', COMDAT
  00000	a1 24 02 00 00	 mov	 eax, DWORD PTR ?g_DoppelGanger@@3VCDoppelGanger@@A+548
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN12@dynamic
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN12@dynamic:
  00012	c7 05 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_DoppelGanger@@3VCDoppelGanger@@A+548, 0
  0001c	c7 05 28 02 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_DoppelGanger@@3VCDoppelGanger@@A+552, 0
  00026	c7 05 2c 02 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_DoppelGanger@@3VCDoppelGanger@@A+556, 0
  00030	c3		 ret	 0
??__Fg_DoppelGanger@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_DoppelGanger''
text$yd	ENDS
PUBLIC	?EventTimeTick@@3HA				; EventTimeTick
PUBLIC	?stTickRate@@3HA				; stTickRate
PUBLIC	?g_DoppelGanger@@3VCDoppelGanger@@A		; g_DoppelGanger
_BSS	SEGMENT
_DG_UTIL DD	01H DUP (?)
?EventTimeTick@@3HA DD 01H DUP (?)			; EventTimeTick
?stTickRate@@3HA DD 01H DUP (?)				; stTickRate
?g_DoppelGanger@@3VCDoppelGanger@@A DB 0234H DUP (?)	; g_DoppelGanger
_BSS	ENDS
CRT$XCU	SEGMENT
_g_DoppelGanger$initializer$ DD FLAT:??__Eg_DoppelGanger@@YAXXZ
_stTickRate$initializer$ DD FLAT:??__EstTickRate@@YAXXZ
_EventTimeTick$initializer$ DD FLAT:??__EEventTimeTick@@YAXXZ
_DG_UTIL$initializer$ DD FLAT:??__EDG_UTIL@@YAXXZ
CRT$XCU	ENDS
END
