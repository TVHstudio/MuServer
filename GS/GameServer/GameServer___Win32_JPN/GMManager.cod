; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\GMManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1GMManager@@QAE@XZ				; GMManager::~GMManager
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\gmmanager.cpp
;	COMDAT ??1GMManager@@QAE@XZ
_TEXT	SEGMENT
??1GMManager@@QAE@XZ PROC				; GMManager::~GMManager, COMDAT
; _this$ = ecx

; 23   : 	// ----
; 24   : }

  00000	c3		 ret	 0
??1GMManager@@QAE@XZ ENDP				; GMManager::~GMManager
_TEXT	ENDS
PUBLIC	?Init@GMManager@@QAEXXZ				; GMManager::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@GMManager@@QAEXXZ
_TEXT	SEGMENT
?Init@GMManager@@QAEXXZ PROC				; GMManager::Init, COMDAT
; _this$ = ecx

; 29   : 	this->Enable = false;
; 30   : 	this->GMCount = 0;
; 31   : 	ZeroMemory(&this->gm_data,sizeof(this->gm_data));

  00000	68 70 17 00 00	 push	 6000			; 00001770H
  00005	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00008	c7 81 74 17 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+6004], 0
  00012	83 c1 04	 add	 ecx, 4
  00015	6a 00		 push	 0
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : }

  00020	c3		 ret	 0
?Init@GMManager@@QAEXXZ ENDP				; GMManager::Init
_TEXT	ENDS
PUBLIC	??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@ ; `string'
PUBLIC	??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@GMManager@@QAEXPAD@Z			; GMManager::Read
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	_strncpy:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@
CONST	SEGMENT
??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@ DB '[GMMan'
	DB	'ager] Load successfully. Total GMs: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
CONST	SEGMENT
??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ DB '%'
	DB	'd %10s %d %d %d %d %d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@GMManager@@QAEXPAD@Z
_TEXT	SEGMENT
_isAdmin$209370 = -324					; size = 4
_Flag$ = -320						; size = 4
_n$209368 = -316					; size = 44
_Buff$ = -272						; size = 256
_GetGMName$209369 = -16					; size = 11
__$ArrayPad$ = -4					; size = 4
_File$ = 8						; size = 4
?Read@GMManager@@QAEXPAD@Z PROC				; GMManager::Read, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi

; 56   :     FILE *file = fopen(File,"r");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001d	50		 push	 eax
  0001e	8b f1		 mov	 esi, ecx
  00020	e8 00 00 00 00	 call	 _fopen
  00025	8b d8		 mov	 ebx, eax

; 57   : 	// ----
; 58   :     if (file == NULL)

  00027	33 c0		 xor	 eax, eax
  00029	83 c4 08	 add	 esp, 8
  0002c	3b d8		 cmp	 ebx, eax
  0002e	0f 84 39 02 00
	00		 je	 $LN6@Read

; 59   :     {
; 60   :         return;
; 61   :     }
; 62   : 	// ----
; 63   : 	this->GMCount = 0;
; 64   :     char Buff[256];
; 65   :     int Flag = 0;
; 66   : 	// ----
; 67   :     while (!feof(file))

  00034	53		 push	 ebx
  00035	89 86 74 17 00
	00		 mov	 DWORD PTR [esi+6004], eax
  0003b	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], eax
  00041	e8 00 00 00 00	 call	 _feof
  00046	83 c4 04	 add	 esp, 4
  00049	85 c0		 test	 eax, eax
  0004b	0f 85 01 02 00
	00		 jne	 $LN3@Read
  00051	57		 push	 edi
  00052	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00055	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL4@Read:

; 68   :     {
; 69   :         fgets(Buff,256,file);

  00060	53		 push	 ebx
  00061	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00067	68 00 01 00 00	 push	 256			; 00000100H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _fgets

; 70   : 		// ----
; 71   :         if(Zt_IsBadFileLine(Buff, Flag))

  00072	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  00078	51		 push	 ecx
  00079	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  00085	83 c4 14	 add	 esp, 20			; 00000014H
  00088	84 c0		 test	 al, al
  0008a	0f 85 b0 01 00
	00		 jne	 $LN1@Read

; 72   : 		{
; 73   :             continue;
; 74   : 		}
; 75   : 		// ----
; 76   :         if (Flag == 1)

  00090	39 bd c0 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], edi
  00096	0f 85 a4 01 00
	00		 jne	 $LN1@Read

; 77   :         {
; 78   : 			int n[11];
; 79   :             char GetGMName[11];
; 80   :             int isAdmin;
; 81   : 			// --
; 82   :             sscanf(Buff, "%d %10s %d %d %d %d %d %d %d %d %d %d %d",&isAdmin, &GetGMName, &n[0], &n[1], &n[2], &n[3], &n[4], &n[5],  &n[6], &n[7], &n[8], &n[9], &n[10]);

  0009c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$209368[ebp+40]
  000a2	50		 push	 eax
  000a3	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$209368[ebp+36]
  000a9	51		 push	 ecx
  000aa	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$209368[ebp+32]
  000b0	52		 push	 edx
  000b1	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$209368[ebp+28]
  000b7	50		 push	 eax
  000b8	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$209368[ebp+24]
  000be	51		 push	 ecx
  000bf	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR _n$209368[ebp+20]
  000c5	52		 push	 edx
  000c6	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _n$209368[ebp+16]
  000cc	50		 push	 eax
  000cd	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$209368[ebp+12]
  000d3	51		 push	 ecx
  000d4	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _n$209368[ebp+8]
  000da	52		 push	 edx
  000db	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _n$209368[ebp+4]
  000e1	50		 push	 eax
  000e2	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$209368[ebp]
  000e8	51		 push	 ecx
  000e9	8d 55 f0	 lea	 edx, DWORD PTR _GetGMName$209369[ebp]
  000ec	52		 push	 edx
  000ed	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _isAdmin$209370[ebp]
  000f3	50		 push	 eax
  000f4	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GKMDOKEN@?$CFd?5?$CF10s?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 _sscanf

; 83   : 			// --
; 84   : 			this->gm_data[this->GMCount].Type				= isAdmin;

  00105	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  0010b	8b d0		 mov	 edx, eax
  0010d	c1 e2 04	 shl	 edx, 4
  00110	2b d0		 sub	 edx, eax
  00112	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _isAdmin$209370[ebp]
  00118	89 44 96 04	 mov	 DWORD PTR [esi+edx*4+4], eax

; 85   : 			strncpy(this->gm_data[this->GMCount].Name, GetGMName, 10);

  0011c	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  00122	8b d0		 mov	 edx, eax
  00124	c1 e2 04	 shl	 edx, 4
  00127	6a 0a		 push	 10			; 0000000aH
  00129	8d 4d f0	 lea	 ecx, DWORD PTR _GetGMName$209369[ebp]
  0012c	2b d0		 sub	 edx, eax
  0012e	51		 push	 ecx
  0012f	8d 44 96 08	 lea	 eax, DWORD PTR [esi+edx*4+8]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _strncpy

; 86   :             this->gm_data[this->GMCount].cmd_gg				= n[0];

  00139	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  0013f	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp]
  00145	8b c8		 mov	 ecx, eax
  00147	c1 e1 04	 shl	 ecx, 4
  0014a	2b c8		 sub	 ecx, eax
  0014c	89 54 8e 14	 mov	 DWORD PTR [esi+ecx*4+20], edx

; 87   :             this->gm_data[this->GMCount].cmd_sellpremium	= n[1];

  00150	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  00156	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+4]
  0015c	8b c8		 mov	 ecx, eax
  0015e	c1 e1 04	 shl	 ecx, 4
  00161	2b c8		 sub	 ecx, eax
  00163	89 54 8e 18	 mov	 DWORD PTR [esi+ecx*4+24], edx

; 88   :             this->gm_data[this->GMCount].cmd_sellcredit		= n[2];

  00167	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  0016d	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+8]
  00173	8b c8		 mov	 ecx, eax
  00175	c1 e1 04	 shl	 ecx, 4
  00178	2b c8		 sub	 ecx, eax
  0017a	89 54 8e 1c	 mov	 DWORD PTR [esi+ecx*4+28], edx

; 89   :             this->gm_data[this->GMCount].cmd_gmove			= n[3];

  0017e	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  00184	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+12]
  0018a	8b c8		 mov	 ecx, eax
  0018c	c1 e1 04	 shl	 ecx, 4
  0018f	2b c8		 sub	 ecx, eax
  00191	89 54 8e 20	 mov	 DWORD PTR [esi+ecx*4+32], edx

; 90   :             this->gm_data[this->GMCount].cmd_banchar		= n[4];

  00195	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  0019b	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+16]
  001a1	8b c8		 mov	 ecx, eax
  001a3	c1 e1 04	 shl	 ecx, 4
  001a6	2b c8		 sub	 ecx, eax
  001a8	89 54 8e 24	 mov	 DWORD PTR [esi+ecx*4+36], edx

; 91   :             this->gm_data[this->GMCount].cmd_exreload		= n[5];

  001ac	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  001b2	8b c8		 mov	 ecx, eax
  001b4	c1 e1 04	 shl	 ecx, 4
  001b7	83 c4 48	 add	 esp, 72			; 00000048H
  001ba	2b c8		 sub	 ecx, eax
  001bc	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+20]
  001c2	89 54 8e 28	 mov	 DWORD PTR [esi+ecx*4+40], edx

; 92   :             this->gm_data[this->GMCount].cmd_banchat		= n[6];

  001c6	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  001cc	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+24]
  001d2	8b c8		 mov	 ecx, eax
  001d4	c1 e1 04	 shl	 ecx, 4
  001d7	2b c8		 sub	 ecx, eax
  001d9	89 54 8e 2c	 mov	 DWORD PTR [esi+ecx*4+44], edx

; 93   :             this->gm_data[this->GMCount].cmd_disconnect		= n[7];

  001dd	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  001e3	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+28]
  001e9	8b c8		 mov	 ecx, eax
  001eb	c1 e1 04	 shl	 ecx, 4
  001ee	2b c8		 sub	 ecx, eax
  001f0	89 54 8e 30	 mov	 DWORD PTR [esi+ecx*4+48], edx

; 94   :             this->gm_data[this->GMCount].cmd_trace			= n[8];

  001f4	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  001fa	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+32]
  00200	8b c8		 mov	 ecx, eax
  00202	c1 e1 04	 shl	 ecx, 4
  00205	2b c8		 sub	 ecx, eax
  00207	89 54 8e 34	 mov	 DWORD PTR [esi+ecx*4+52], edx

; 95   : 			this->gm_data[this->GMCount].cmd_sendwcoin		= n[9];

  0020b	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  00211	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+36]
  00217	8b c8		 mov	 ecx, eax
  00219	c1 e1 04	 shl	 ecx, 4
  0021c	2b c8		 sub	 ecx, eax
  0021e	89 54 8e 38	 mov	 DWORD PTR [esi+ecx*4+56], edx

; 96   : 			this->gm_data[this->GMCount].cmd_item			= n[10];

  00222	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  00228	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _n$209368[ebp+40]
  0022e	03 c7		 add	 eax, edi
  00230	8b c8		 mov	 ecx, eax
  00232	c1 e1 04	 shl	 ecx, 4
  00235	2b c8		 sub	 ecx, eax
  00237	89 14 8e	 mov	 DWORD PTR [esi+ecx*4], edx

; 97   : 
; 98   :             this->GMCount++;

  0023a	01 be 74 17 00
	00		 add	 DWORD PTR [esi+6004], edi
$LN1@Read:

; 59   :     {
; 60   :         return;
; 61   :     }
; 62   : 	// ----
; 63   : 	this->GMCount = 0;
; 64   :     char Buff[256];
; 65   :     int Flag = 0;
; 66   : 	// ----
; 67   :     while (!feof(file))

  00240	53		 push	 ebx
  00241	e8 00 00 00 00	 call	 _feof
  00246	83 c4 04	 add	 esp, 4
  00249	85 c0		 test	 eax, eax
  0024b	0f 84 0f fe ff
	ff		 je	 $LL4@Read
  00251	5f		 pop	 edi
$LN3@Read:

; 99   :         }
; 100  :     }
; 101  : 	// ----
; 102  :     fclose(file);

  00252	53		 push	 ebx
  00253	e8 00 00 00 00	 call	 _fclose

; 103  :     LogAdd("[GMManager] Load successfully. Total GMs: %d", this->GMCount);

  00258	8b 86 74 17 00
	00		 mov	 eax, DWORD PTR [esi+6004]
  0025e	50		 push	 eax
  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NKMHLAGH@?$FLGMManager?$FN?5Load?5successfully?4?5T@
  00264	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0026a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Read:

; 104  : }

  0026d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00270	5e		 pop	 esi
  00271	33 cd		 xor	 ecx, ebp
  00273	5b		 pop	 ebx
  00274	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	c2 04 00	 ret	 4
?Read@GMManager@@QAEXPAD@Z ENDP				; GMManager::Read
_TEXT	ENDS
PUBLIC	?CheckCommand@GMManager@@QAE_NHH@Z		; GMManager::CheckCommand
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedZt@@YA_NH@Z:PROC		; gObjIsConnectedZt
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
;	COMDAT ?CheckCommand@GMManager@@QAE_NHH@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_cmd_type$ = 12						; size = 4
?CheckCommand@GMManager@@QAE_NHH@Z PROC			; GMManager::CheckCommand, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 109  : 	if(g_ZtLicense.user.GM_Manager == false)

  00003	80 3d d7 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+215, 0
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	75 07		 jne	 SHORT $LN35@CheckComma

; 110  : 	{
; 111  : 		return true;

  0000f	b0 01		 mov	 al, 1
  00011	5f		 pop	 edi

; 241  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
$LN35@CheckComma:

; 112  : 	}
; 113  : 	// ----
; 114  : 	if(!this->Enable)

  00016	80 3f 00	 cmp	 BYTE PTR [edi], 0
  00019	75 07		 jne	 SHORT $LN34@CheckComma

; 115  : 	{
; 116  : 		return false;

  0001b	32 c0		 xor	 al, al
  0001d	5f		 pop	 edi

; 241  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
$LN34@CheckComma:
  00022	56		 push	 esi

; 117  : 	}
; 118  : 	// ----
; 119  : 	if(!gObjIsConnectedZt(aIndex))

  00023	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ?gObjIsConnectedZt@@YA_NH@Z ; gObjIsConnectedZt
  0002c	83 c4 04	 add	 esp, 4
  0002f	84 c0		 test	 al, al
  00031	75 06		 jne	 SHORT $LN33@CheckComma
  00033	5e		 pop	 esi
  00034	5f		 pop	 edi

; 241  : }

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN33@CheckComma:

; 120  : 	{
; 121  : 		return false;
; 122  : 	}
; 123  : 	// ----
; 124  : 	LPOBJ lpUser = &gObj[aIndex];

  00039	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0003f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	53		 push	 ebx
  00046	8b 9f 74 17 00
	00		 mov	 ebx, DWORD PTR [edi+6004]
  0004c	89 75 08	 mov	 DWORD PTR _lpUser$[ebp], esi

; 125  : 	// ----
; 126  : 	for(int i = 0; i < this->GMCount; i++)

  0004f	33 f6		 xor	 esi, esi
  00051	85 db		 test	 ebx, ebx
  00053	0f 8e ad 00 00
	00		 jle	 $LN30@CheckComma

; 120  : 	{
; 121  : 		return false;
; 122  : 	}
; 123  : 	// ----
; 124  : 	LPOBJ lpUser = &gObj[aIndex];

  00059	83 c7 04	 add	 edi, 4
  0005c	8d 64 24 00	 npad	 4
$LL57@CheckComma:

; 127  : 	{
; 128  : 		if( this->gm_data[i].Type > 0 )

  00060	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00063	0f 8e 91 00 00
	00		 jle	 $LN31@CheckComma

; 129  : 		{
; 130  : 			if( lpUser->Name[0] == this->gm_data[i].Name[0] )

  00069	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0006c	8a 50 77	 mov	 dl, BYTE PTR [eax+119]
  0006f	83 c0 77	 add	 eax, 119		; 00000077H
  00072	3a 57 04	 cmp	 dl, BYTE PTR [edi+4]
  00075	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00078	0f 85 7c 00 00
	00		 jne	 $LN31@CheckComma
  0007e	8b ff		 npad	 2
$LL52@CheckComma:

; 131  : 			{
; 132  : 				if( !strcmp(lpUser->Name, this->gm_data[i].Name) )

  00080	8a 10		 mov	 dl, BYTE PTR [eax]
  00082	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00084	75 1a		 jne	 SHORT $LN53@CheckComma
  00086	84 d2		 test	 dl, dl
  00088	74 12		 je	 SHORT $LN54@CheckComma
  0008a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0008d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00090	75 0e		 jne	 SHORT $LN53@CheckComma
  00092	83 c0 02	 add	 eax, 2
  00095	83 c1 02	 add	 ecx, 2
  00098	84 d2		 test	 dl, dl
  0009a	75 e4		 jne	 SHORT $LL52@CheckComma
$LN54@CheckComma:
  0009c	33 c0		 xor	 eax, eax
  0009e	eb 05		 jmp	 SHORT $LN55@CheckComma
$LN53@CheckComma:
  000a0	1b c0		 sbb	 eax, eax
  000a2	83 d8 ff	 sbb	 eax, -1
$LN55@CheckComma:
  000a5	85 c0		 test	 eax, eax
  000a7	75 51		 jne	 SHORT $LN31@CheckComma

; 133  : 				{
; 134  : 					// ----
; 135  : 					if(this->gm_data[i].Type == 0)
; 136  : 					{
; 137  : 						return false;
; 138  : 					}
; 139  : 					// ----
; 140  : 					switch(cmd_type)

  000a9	8b 45 0c	 mov	 eax, DWORD PTR _cmd_type$[ebp]
  000ac	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000af	77 55		 ja	 SHORT $LN30@CheckComma
  000b1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN61@CheckComma[eax*4]
$LN23@CheckComma:

; 141  : 					{
; 142  : 					case egm_cmd_gg:
; 143  : 						{
; 144  : 							if(this->gm_data[i].cmd_gg)

  000b8	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0

; 145  : 							{
; 146  : 								return true;
; 147  : 							}
; 148  : 						}
; 149  : 						break;

  000bc	eb 3a		 jmp	 SHORT $LN60@CheckComma
$LN21@CheckComma:

; 150  : 					case egm_cmd_sellpremium:
; 151  : 						{
; 152  : 							if(this->gm_data[i].cmd_sellpremium)

  000be	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 153  : 							{
; 154  : 								return true;
; 155  : 							}
; 156  : 						}
; 157  : 						break;

  000c2	eb 34		 jmp	 SHORT $LN60@CheckComma
$LN19@CheckComma:

; 158  : 					case egm_cmd_sellcredit:
; 159  : 						{
; 160  : 							if(this->gm_data[i].cmd_sellcredit)

  000c4	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0

; 161  : 							{
; 162  : 								return true;
; 163  : 							}
; 164  : 						}
; 165  : 						break;

  000c8	eb 2e		 jmp	 SHORT $LN60@CheckComma
$LN17@CheckComma:

; 166  : 					case egm_cmd_gmove:
; 167  : 						{
; 168  : 							if(this->gm_data[i].cmd_gmove)

  000ca	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0

; 169  : 							{
; 170  : 								return true;
; 171  : 							}
; 172  : 						}
; 173  : 						break;

  000ce	eb 28		 jmp	 SHORT $LN60@CheckComma
$LN15@CheckComma:

; 174  : 					case egm_cmd_banchar:
; 175  : 						{
; 176  : 							if(this->gm_data[i].cmd_banchar)

  000d0	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0

; 177  : 							{
; 178  : 								return true;
; 179  : 							}
; 180  : 						}
; 181  : 						break;

  000d4	eb 22		 jmp	 SHORT $LN60@CheckComma
$LN13@CheckComma:

; 182  : 					case egm_cmd_exreload:
; 183  : 						{
; 184  : 							if(this->gm_data[i].cmd_exreload)

  000d6	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0

; 185  : 							{
; 186  : 								return true;
; 187  : 							}
; 188  : 						}
; 189  : 						break;

  000da	eb 1c		 jmp	 SHORT $LN60@CheckComma
$LN11@CheckComma:

; 190  : 					case egm_cmd_banchat:
; 191  : 						{
; 192  : 							if(this->gm_data[i].cmd_banchat)

  000dc	83 7f 28 00	 cmp	 DWORD PTR [edi+40], 0

; 193  : 							{
; 194  : 								return true;
; 195  : 							}
; 196  : 						}
; 197  : 						break;

  000e0	eb 16		 jmp	 SHORT $LN60@CheckComma
$LN9@CheckComma:

; 198  : 					case egm_cmd_disconnect:
; 199  : 						{
; 200  : 							if(this->gm_data[i].cmd_disconnect)

  000e2	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0

; 201  : 							{
; 202  : 								return true;
; 203  : 							}
; 204  : 						}
; 205  : 						break;

  000e6	eb 10		 jmp	 SHORT $LN60@CheckComma
$LN7@CheckComma:

; 206  : 					case egm_cmd_trace:
; 207  : 						{
; 208  : 							if(this->gm_data[i].cmd_trace)

  000e8	83 7f 30 00	 cmp	 DWORD PTR [edi+48], 0

; 209  : 							{
; 210  : 								return true;
; 211  : 							}
; 212  : 						}
; 213  : 						break;

  000ec	eb 0a		 jmp	 SHORT $LN60@CheckComma
$LN5@CheckComma:

; 214  : 					case egm_cmd_sendwcoin:
; 215  : 						{
; 216  : 							if(this->gm_data[i].cmd_sendwcoin)

  000ee	83 7f 34 00	 cmp	 DWORD PTR [edi+52], 0

; 217  : 							{
; 218  : 								return true;
; 219  : 							}
; 220  : 						}
; 221  : 						break;

  000f2	eb 04		 jmp	 SHORT $LN60@CheckComma
$LN3@CheckComma:

; 222  : 					case egm_cmd_item:
; 223  : 						{
; 224  : 							if(this->gm_data[i].cmd_item)

  000f4	83 7f 38 00	 cmp	 DWORD PTR [edi+56], 0
$LN60@CheckComma:
  000f8	75 15		 jne	 SHORT $LN50@CheckComma
$LN31@CheckComma:

; 125  : 	// ----
; 126  : 	for(int i = 0; i < this->GMCount; i++)

  000fa	46		 inc	 esi
  000fb	83 c7 3c	 add	 edi, 60			; 0000003cH
  000fe	3b f3		 cmp	 esi, ebx
  00100	0f 8c 5a ff ff
	ff		 jl	 $LL57@CheckComma
$LN30@CheckComma:
  00106	5b		 pop	 ebx
  00107	5e		 pop	 esi

; 227  : 							}
; 228  : 						}
; 229  : 						break;
; 230  : 					default:
; 231  : 						{
; 232  : 							return false;
; 233  : 						}
; 234  : 					}
; 235  : 				}
; 236  : 			}
; 237  : 		}
; 238  : 	}
; 239  : 	// ----
; 240  : 	return false;

  00108	32 c0		 xor	 al, al
  0010a	5f		 pop	 edi

; 241  : }

  0010b	5d		 pop	 ebp
  0010c	c2 08 00	 ret	 8
$LN50@CheckComma:
  0010f	5b		 pop	 ebx
  00110	5e		 pop	 esi

; 225  : 							{
; 226  : 								return true;

  00111	b0 01		 mov	 al, 1
  00113	5f		 pop	 edi

; 241  : }

  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
$LN61@CheckComma:
  00118	00 00 00 00	 DD	 $LN23@CheckComma
  0011c	00 00 00 00	 DD	 $LN21@CheckComma
  00120	00 00 00 00	 DD	 $LN19@CheckComma
  00124	00 00 00 00	 DD	 $LN17@CheckComma
  00128	00 00 00 00	 DD	 $LN15@CheckComma
  0012c	00 00 00 00	 DD	 $LN13@CheckComma
  00130	00 00 00 00	 DD	 $LN11@CheckComma
  00134	00 00 00 00	 DD	 $LN9@CheckComma
  00138	00 00 00 00	 DD	 $LN7@CheckComma
  0013c	00 00 00 00	 DD	 $LN5@CheckComma
  00140	00 00 00 00	 DD	 $LN3@CheckComma
?CheckCommand@GMManager@@QAE_NHH@Z ENDP			; GMManager::CheckCommand
_TEXT	ENDS
PUBLIC	??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@ ; `string'
PUBLIC	??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@ ; `string'
PUBLIC	?ConnectAdmin@GMManager@@QAEXH@Z		; GMManager::ConnectAdmin
EXTRN	?MessaageAllGlobal@@YAXPADZZ:PROC		; MessaageAllGlobal
;	COMDAT ??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@
CONST	SEGMENT
??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@ DB '[Game '
	DB	'Master] %s Connected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@
CONST	SEGMENT
??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@ DB '[Admi'
	DB	'nistrator] %s Connected', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ConnectAdmin@GMManager@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_lpUser$ = -4						; size = 4
_i$209426 = 8						; size = 4
_aIndex$ = 8						; size = 4
?ConnectAdmin@GMManager@@QAEXH@Z PROC			; GMManager::ConnectAdmin, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 246  : 	if(g_ZtLicense.user.GM_Manager == false)

  00006	80 3d d7 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+215, 0
  0000d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00010	0f 84 c1 00 00
	00		 je	 $LN9@ConnectAdm

; 247  : 	{
; 248  : 		return;
; 249  : 	}
; 250  : 	// ----
; 251  : 	if(!this->Enable)

  00016	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00019	0f 84 b8 00 00
	00		 je	 $LN9@ConnectAdm

; 252  : 	{
; 253  : 		return;
; 254  : 	}
; 255  : 	// ----
; 256  : 	if ( aIndex < 0 || aIndex > OBJMAX-1)

  0001f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00022	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00027	0f 87 aa 00 00
	00		 ja	 $LN9@ConnectAdm

; 257  : 	{
; 258  : 		return;
; 259  : 	}
; 260  : 	// ----
; 261  : 	LPOBJ lpUser = &gObj[aIndex];

  0002d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00033	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 262  : 	// ----
; 263  : 	for(int i = 0; i < this->GMCount; i++)

  00039	83 b9 74 17 00
	00 00		 cmp	 DWORD PTR [ecx+6004], 0
  00040	89 45 fc	 mov	 DWORD PTR _lpUser$[ebp], eax
  00043	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _i$209426[ebp], 0
  0004a	0f 8e 87 00 00
	00		 jle	 $LN9@ConnectAdm

; 257  : 	{
; 258  : 		return;
; 259  : 	}
; 260  : 	// ----
; 261  : 	LPOBJ lpUser = &gObj[aIndex];

  00050	53		 push	 ebx
  00051	56		 push	 esi
  00052	57		 push	 edi
  00053	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
$LL24@ConnectAdm:

; 264  : 	{
; 265  : 		if( this->gm_data[i].Type > 0 )

  00056	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00058	85 db		 test	 ebx, ebx
  0005a	7e 63		 jle	 SHORT $LN7@ConnectAdm

; 266  : 		{
; 267  : 			if( lpUser->Name[0] == this->gm_data[i].Name[0] )

  0005c	8b 75 fc	 mov	 esi, DWORD PTR _lpUser$[ebp]
  0005f	8a 46 77	 mov	 al, BYTE PTR [esi+119]
  00062	83 c6 77	 add	 esi, 119		; 00000077H
  00065	3a 47 04	 cmp	 al, BYTE PTR [edi+4]
  00068	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0006b	75 52		 jne	 SHORT $LN7@ConnectAdm

; 268  : 			{
; 269  : 				if( !strcmp(lpUser->Name, this->gm_data[i].Name) )

  0006d	8b c6		 mov	 eax, esi
  0006f	90		 npad	 1
$LL17@ConnectAdm:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN18@ConnectAdm
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN19@ConnectAdm
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN18@ConnectAdm
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL17@ConnectAdm
$LN19@ConnectAdm:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN20@ConnectAdm
$LN18@ConnectAdm:
  00090	1b c0		 sbb	 eax, eax
  00092	83 d8 ff	 sbb	 eax, -1
$LN20@ConnectAdm:
  00095	85 c0		 test	 eax, eax
  00097	75 26		 jne	 SHORT $LN7@ConnectAdm

; 270  : 				{
; 271  : 					if(this->gm_data[i].Type == 1)

  00099	83 fb 01	 cmp	 ebx, 1
  0009c	75 0e		 jne	 SHORT $LN2@ConnectAdm

; 272  : 					{
; 273  : 						MessaageAllGlobal("[Administrator] %s Connected", lpUser->Name);

  0009e	56		 push	 esi
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BEHDNBEF@?$FLAdministrator?$FN?5?$CFs?5Connected?$AA@
  000a4	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  000a9	83 c4 08	 add	 esp, 8
$LN2@ConnectAdm:

; 274  : 					}
; 275  : 					if(this->gm_data[i].Type == 2)

  000ac	83 3f 02	 cmp	 DWORD PTR [edi], 2
  000af	75 0e		 jne	 SHORT $LN7@ConnectAdm

; 276  : 					{
; 277  : 						MessaageAllGlobal("[Game Master] %s Connected", lpUser->Name);

  000b1	56		 push	 esi
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PNMGPPHN@?$FLGame?5Master?$FN?5?$CFs?5Connected?$AA@
  000b7	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  000bc	83 c4 08	 add	 esp, 8
$LN7@ConnectAdm:

; 262  : 	// ----
; 263  : 	for(int i = 0; i < this->GMCount; i++)

  000bf	8b 45 08	 mov	 eax, DWORD PTR _i$209426[ebp]
  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	40		 inc	 eax
  000c6	83 c7 3c	 add	 edi, 60			; 0000003cH
  000c9	89 45 08	 mov	 DWORD PTR _i$209426[ebp], eax
  000cc	3b 81 74 17 00
	00		 cmp	 eax, DWORD PTR [ecx+6004]
  000d2	7c 82		 jl	 SHORT $LL24@ConnectAdm
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
$LN9@ConnectAdm:

; 278  : 					}
; 279  : 				}
; 280  : 			}
; 281  : 		}
; 282  : 	}
; 283  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 04 00	 ret	 4
?ConnectAdmin@GMManager@@QAEXH@Z ENDP			; GMManager::ConnectAdmin
_TEXT	ENDS
PUBLIC	??0GMManager@@QAE@XZ				; GMManager::GMManager
; Function compile flags: /Ogtp
;	COMDAT ??0GMManager@@QAE@XZ
_TEXT	SEGMENT
??0GMManager@@QAE@XZ PROC				; GMManager::GMManager, COMDAT
; _this$ = ecx

; 16   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 17   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@GMManager@@QAEXXZ	; GMManager::Init

; 18   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0GMManager@@QAE@XZ ENDP				; GMManager::GMManager
_TEXT	ENDS
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0BF@EIHBHBCA@ZtData?2GMManager?4ini?$AA@	; `string'
PUBLIC	?Load@GMManager@@QAEXXZ				; GMManager::Load
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?CheckFile@@YA_NPAD@Z:PROC			; CheckFile
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EIHBHBCA@ZtData?2GMManager?4ini?$AA@
CONST	SEGMENT
??_C@_0BF@EIHBHBCA@ZtData?2GMManager?4ini?$AA@ DB 'ZtData\GMManager.ini', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@GMManager@@QAEXXZ
_TEXT	SEGMENT
?Load@GMManager@@QAEXXZ PROC				; GMManager::Load, COMDAT
; _this$ = ecx

; 36   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 37   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@GMManager@@QAEXXZ	; GMManager::Init

; 38   : 	// ----
; 39   : 	if(g_ZtLicense.user.GM_Manager == false)

  00008	80 3d d7 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+215, 0
  0000f	74 5c		 je	 SHORT $LN3@Load

; 40   : 	{
; 41   : 		return;
; 42   : 	}
; 43   : 	// ----
; 44   : 	if(!CheckFile(gDirPath.GetNewPath(GM_MANAGER_DIR)))

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EIHBHBCA@ZtData?2GMManager?4ini?$AA@
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0001b	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?CheckFile@@YA_NPAD@Z	; CheckFile
  00026	83 c4 04	 add	 esp, 4
  00029	84 c0		 test	 al, al
  0002b	74 40		 je	 SHORT $LN3@Load

; 45   : 	{
; 46   : 		return;
; 47   : 	}
; 48   : 	// ----
; 49   : 	this->Enable = GetPrivateProfileInt("ZtTeam", "Enable", 0, gDirPath.GetNewPath(GM_MANAGER_DIR));

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EIHBHBCA@ZtData?2GMManager?4ini?$AA@
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00037	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0003c	50		 push	 eax
  0003d	6a 00		 push	 0
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0004f	85 c0		 test	 eax, eax
  00051	0f 95 c0	 setne	 al

; 50   : 	this->Read(gDirPath.GetNewPath(GM_MANAGER_DIR));

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EIHBHBCA@ZtData?2GMManager?4ini?$AA@
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0005e	88 06		 mov	 BYTE PTR [esi], al
  00060	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00065	50		 push	 eax
  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?Read@GMManager@@QAEXPAD@Z ; GMManager::Read
$LN3@Load:
  0006d	5e		 pop	 esi

; 51   : }

  0006e	c3		 ret	 0
?Load@GMManager@@QAEXXZ ENDP				; GMManager::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_GMManager@@YAXXZ
text$yc	SEGMENT
??__Eg_GMManager@@YAXXZ PROC				; `dynamic initializer for 'g_GMManager'', COMDAT

; 12   : GMManager g_GMManager;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GMManager@@3VGMManager@@A ; g_GMManager
  00005	e8 00 00 00 00	 call	 ??0GMManager@@QAE@XZ	; GMManager::GMManager
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_GMManager@@YAXXZ ; `dynamic atexit destructor for 'g_GMManager''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_GMManager@@YAXXZ ENDP				; `dynamic initializer for 'g_GMManager''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_GMManager@@YAXXZ
text$yd	SEGMENT
??__Fg_GMManager@@YAXXZ PROC				; `dynamic atexit destructor for 'g_GMManager'', COMDAT
  00000	c3		 ret	 0
??__Fg_GMManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_GMManager''
text$yd	ENDS
PUBLIC	?g_GMManager@@3VGMManager@@A			; g_GMManager
_BSS	SEGMENT
?g_GMManager@@3VGMManager@@A DB 01778H DUP (?)		; g_GMManager
_BSS	ENDS
CRT$XCU	SEGMENT
_g_GMManager$initializer$ DD FLAT:??__Eg_GMManager@@YAXXZ
CRT$XCU	ENDS
END
