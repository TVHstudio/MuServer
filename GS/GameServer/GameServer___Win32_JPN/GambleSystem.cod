; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\GambleSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??0CItemBagAttrZt@@QAE@XZ			; CItemBagAttrZt::CItemBagAttrZt
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\gamblesystem.h
;	COMDAT ??0CItemBagAttrZt@@QAE@XZ
_TEXT	SEGMENT
??0CItemBagAttrZt@@QAE@XZ PROC				; CItemBagAttrZt::CItemBagAttrZt, COMDAT
; _this$ = ecx

; 23   : 	CItemBagAttrZt()

  00000	8b c1		 mov	 eax, ecx

; 24   : 	{
; 25   : 		this->m_type = 0;

  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 26   : 		this->m_index = 0;
; 27   : 		this->m_minLevel = 0;
; 28   : 		this->m_maxLevel = 0;
; 29   : 		this->m_isskill = 0;

  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 30   : 		this->m_isluck = 0;
; 31   : 		this->m_isoption = 0;
; 32   : 		this->m_isexitem = 0;
; 33   : 	}

  0000f	c3		 ret	 0
??0CItemBagAttrZt@@QAE@XZ ENDP				; CItemBagAttrZt::CItemBagAttrZt
_TEXT	ENDS
PUBLIC	??0ST_GAMBLE_INFO@@QAE@XZ			; ST_GAMBLE_INFO::ST_GAMBLE_INFO
; Function compile flags: /Ogtp
;	COMDAT ??0ST_GAMBLE_INFO@@QAE@XZ
_TEXT	SEGMENT
??0ST_GAMBLE_INFO@@QAE@XZ PROC				; ST_GAMBLE_INFO::ST_GAMBLE_INFO, COMDAT
; _this$ = ecx

; 56   : 	ST_GAMBLE_INFO()

  00000	8b c1		 mov	 eax, ecx

; 57   : 	{
; 58   : 		m_iSkillRate = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 59   : 		m_iLuckRate = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 60   : 		m_iOptionRate = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 61   : 		m_iExcRate = 0;

  0000c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 62   : 		m_iSortItemRate = 0;

  0000f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 63   : 	};

  00012	c3		 ret	 0
??0ST_GAMBLE_INFO@@QAE@XZ ENDP				; ST_GAMBLE_INFO::ST_GAMBLE_INFO
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CGambleSystem@@6B@				; CGambleSystem::`vftable'
PUBLIC	??0CGambleSystem@@QAE@XZ			; CGambleSystem::CGambleSystem
PUBLIC	??_R4CGambleSystem@@6B@				; CGambleSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGambleSystem@@@8			; CGambleSystem `RTTI Type Descriptor'
PUBLIC	??_R3CGambleSystem@@8				; CGambleSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGambleSystem@@8				; CGambleSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGambleSystem@@8			; CGambleSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECGambleSystem@@UAEPAXI@Z:PROC		; CGambleSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CGambleSystem@@8
; File e:\work\tranet_version\gs\gameserver\gamblesystem.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CGambleSystem@@8 DD FLAT:??_R0?AVCGambleSystem@@@8 ; CGambleSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGambleSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CGambleSystem@@8
rdata$r	SEGMENT
??_R2CGambleSystem@@8 DD FLAT:??_R1A@?0A@EA@CGambleSystem@@8 ; CGambleSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGambleSystem@@8
rdata$r	SEGMENT
??_R3CGambleSystem@@8 DD 00H				; CGambleSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGambleSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGambleSystem@@@8
_DATA	SEGMENT
??_R0?AVCGambleSystem@@@8 DD FLAT:??_7type_info@@6B@	; CGambleSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGambleSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CGambleSystem@@6B@
rdata$r	SEGMENT
??_R4CGambleSystem@@6B@ DD 00H				; CGambleSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGambleSystem@@@8
	DD	FLAT:??_R3CGambleSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CGambleSystem@@6B@
CONST	SEGMENT
??_7CGambleSystem@@6B@ DD FLAT:??_R4CGambleSystem@@6B@	; CGambleSystem::`vftable'
	DD	FLAT:??_ECGambleSystem@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\gamblesystem.cpp
CONST	ENDS
;	COMDAT ??0CGambleSystem@@QAE@XZ
_TEXT	SEGMENT
??0CGambleSystem@@QAE@XZ PROC				; CGambleSystem::CGambleSystem, COMDAT
; _this$ = ecx

; 20   : {

  00000	53		 push	 ebx
  00001	8b c1		 mov	 eax, ecx
  00003	56		 push	 esi
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGambleSystem@@6B@
  0000a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
  0000d	be 18 00 00 00	 mov	 esi, 24			; 00000018H
  00012	33 db		 xor	 ebx, ebx
$LL4@CGambleSys:
  00014	89 1a		 mov	 DWORD PTR [edx], ebx
  00016	89 5a 04	 mov	 DWORD PTR [edx+4], ebx
  00019	89 5a 08	 mov	 DWORD PTR [edx+8], ebx
  0001c	89 5a 0c	 mov	 DWORD PTR [edx+12], ebx
  0001f	89 5a 10	 mov	 DWORD PTR [edx+16], ebx
  00022	83 c2 14	 add	 edx, 20			; 00000014H
  00025	4e		 dec	 esi
  00026	79 ec		 jns	 SHORT $LL4@CGambleSys
  00028	8d 90 cc 02 00
	00		 lea	 edx, DWORD PTR [eax+716]
  0002e	be 95 00 00 00	 mov	 esi, 149		; 00000095H
$LL10@CGambleSys:
  00033	89 1a		 mov	 DWORD PTR [edx], ebx
  00035	89 5a 04	 mov	 DWORD PTR [edx+4], ebx
  00038	83 c2 08	 add	 edx, 8
  0003b	4e		 dec	 esi
  0003c	79 f5		 jns	 SHORT $LL10@CGambleSys

; 21   : 	//this->Init(gDirPath.GetNewPath("GamblingItemBag.txt")); //Set Gamble System Initialization
; 22   : }

  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	c3		 ret	 0
??0CGambleSystem@@QAE@XZ ENDP				; CGambleSystem::CGambleSystem
_TEXT	ENDS
PUBLIC	??1CGambleSystem@@UAE@XZ			; CGambleSystem::~CGambleSystem
; Function compile flags: /Ogtp
;	COMDAT ??1CGambleSystem@@UAE@XZ
_TEXT	SEGMENT
??1CGambleSystem@@UAE@XZ PROC				; CGambleSystem::~CGambleSystem, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGambleSystem@@6B@

; 26   : 	//No destructor needed
; 27   : }

  00006	c3		 ret	 0
??1CGambleSystem@@UAE@XZ ENDP				; CGambleSystem::~CGambleSystem
_TEXT	ENDS
PUBLIC	??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CGambleSystem@@QAEXPAD@Z			; CGambleSystem::Load
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ DB 'Load Script Error '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CGambleSystem@@QAEXPAD@Z
_TEXT	SEGMENT
tv665 = -20						; size = 8
tv667 = -16						; size = 4
tv586 = -16						; size = 4
tv584 = -16						; size = 4
tv578 = -16						; size = 4
tv576 = -16						; size = 4
tv570 = -16						; size = 4
tv568 = -16						; size = 4
tv562 = -16						; size = 4
tv560 = -16						; size = 4
tv554 = -16						; size = 4
tv552 = -16						; size = 4
tv546 = -16						; size = 4
tv544 = -16						; size = 4
tv538 = -16						; size = 4
tv536 = -16						; size = 4
tv530 = -16						; size = 4
tv528 = -16						; size = 4
_iProbability$ = -12					; size = 4
tv805 = -8						; size = 4
tv670 = -2						; size = 2
tv589 = -2						; size = 2
tv581 = -2						; size = 2
tv573 = -2						; size = 2
tv565 = -2						; size = 2
tv557 = -2						; size = 2
tv549 = -2						; size = 2
tv541 = -2						; size = 2
tv533 = -2						; size = 2
_filename$ = 8						; size = 4
?Load@CGambleSystem@@QAEXPAD@Z PROC			; CGambleSystem::Load, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 67   : 	this->bLoad = FALSE;
; 68   : 	this->m_iGambleBagCount = 0;
; 69   : 
; 70   : 	SMDFile = fopen(filename, "r");

  00008	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0000b	57		 push	 edi
  0000c	8b d9		 mov	 ebx, ecx
  0000e	33 ff		 xor	 edi, edi
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00015	56		 push	 esi
  00016	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00019	89 bb 60 02 00
	00		 mov	 DWORD PTR [ebx+608], edi
  0001f	e8 00 00 00 00	 call	 _fopen
  00024	83 c4 08	 add	 esp, 8
  00027	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 71   : 
; 72   : 	if ( SMDFile == NULL )

  0002c	3b c7		 cmp	 eax, edi
  0002e	75 23		 jne	 SHORT $LN48@Load

; 73   : 	{
; 74   : 		LogAdd(lMsg.Get(453), filename);

  00030	56		 push	 esi
  00031	68 c5 01 00 00	 push	 453			; 000001c5H
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 313  : 	LogAdd(lMsg.Get(454), filename);

  00047	83 c4 08	 add	 esp, 8
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx

; 315  : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
$LN48@Load:

; 75   : 		return;
; 76   : 	}
; 77   : 	SMDToken Token;
; 78   : 
; 79   : 	int n = 0;
; 80   : 	int iProbability = 0;

  00053	89 7d f4	 mov	 DWORD PTR _iProbability$[ebp], edi

; 81   : 	int Count = 0;
; 82   : 
; 83   : 	while(true)
; 84   : 	{
; 85   : 		Token = GetToken();

  00056	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 
; 87   : 		if ( Token == END )

  0005b	83 f8 02	 cmp	 eax, 2
  0005e	0f 84 29 05 00
	00		 je	 $LN73@Load

; 75   : 		return;
; 76   : 	}
; 77   : 	SMDToken Token;
; 78   : 
; 79   : 	int n = 0;
; 80   : 	int iProbability = 0;

  00064	8d 8b 64 02 00
	00		 lea	 ecx, DWORD PTR [ebx+612]
  0006a	89 4d f8	 mov	 DWORD PTR tv805[ebp], ecx
  0006d	eb 04		 jmp	 SHORT $LN47@Load
  0006f	90		 npad	 1
$LL98@Load:
  00070	8b 7d f4	 mov	 edi, DWORD PTR _iProbability$[ebp]
$LN47@Load:

; 88   : 		{
; 89   : 			break;
; 90   : 		}
; 91   : 
; 92   : 		if ( Token == 1 )

  00073	83 f8 01	 cmp	 eax, 1
  00076	0f 85 03 05 00
	00		 jne	 $LN8@Load

; 93   : 		{
; 94   : 			int Type = (int)TokenNumber;

  0007c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00082	e8 00 00 00 00	 call	 __ftol2_sse

; 95   : 
; 96   : 			if (Type == 0)

  00087	85 c0		 test	 eax, eax
  00089	0f 85 b0 00 00
	00		 jne	 $LN43@Load

; 97   : 			{
; 98   : 				Count = 0;

  0008f	33 ff		 xor	 edi, edi
  00091	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
$LL42@Load:

; 99   : 
; 100  : 				while(true)
; 101  : 				{
; 102  : 					Token = GetToken();

  00094	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 103  : 
; 104  : 					if( Token == 0 )

  00099	85 c0		 test	 eax, eax
  0009b	75 37		 jne	 SHORT $LN39@Load

; 105  : 					{
; 106  : 						if (strcmp("end",TokenString) == 0)

  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000a2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL74@Load:
  000a7	8a 10		 mov	 dl, BYTE PTR [eax]
  000a9	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000ab	75 1a		 jne	 SHORT $LN75@Load
  000ad	84 d2		 test	 dl, dl
  000af	74 12		 je	 SHORT $LN76@Load
  000b1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000b4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000b7	75 0e		 jne	 SHORT $LN75@Load
  000b9	83 c0 02	 add	 eax, 2
  000bc	83 c1 02	 add	 ecx, 2
  000bf	84 d2		 test	 dl, dl
  000c1	75 e4		 jne	 SHORT $LL74@Load
$LN76@Load:
  000c3	33 c0		 xor	 eax, eax
  000c5	eb 05		 jmp	 SHORT $LN77@Load
$LN75@Load:
  000c7	1b c0		 sbb	 eax, eax
  000c9	83 d8 ff	 sbb	 eax, -1
$LN77@Load:
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 ab 04 00
	00		 je	 $LN8@Load
$LN39@Load:

; 107  : 						{
; 108  : 							break;
; 109  : 						}
; 110  : 					}
; 111  : 
; 112  : 					if ( Count > GAMBLE_MAX_ITEM_INFO )

  000d4	83 ff 19	 cmp	 edi, 25			; 00000019H
  000d7	0f 8f 52 01 00
	00		 jg	 $LN64@Load

; 113  : 					{
; 114  : 						MsgBox("Load Script Error %s",filename);
; 115  : 						break;
; 116  : 					}
; 117  : 
; 118  : 					m_GamblingInfo[Count].m_iSkillRate = (int)TokenNumber;

  000dd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e3	e8 00 00 00 00	 call	 __ftol2_sse
  000e8	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 119  : 
; 120  : 					Token = GetToken();

  000eb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 					m_GamblingInfo[Count].m_iLuckRate = (int)TokenNumber;

  000f0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f6	e8 00 00 00 00	 call	 __ftol2_sse
  000fb	89 06		 mov	 DWORD PTR [esi], eax

; 122  : 
; 123  : 					Token = GetToken();

  000fd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 					m_GamblingInfo[Count].m_iOptionRate = (int)TokenNumber;

  00102	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00108	e8 00 00 00 00	 call	 __ftol2_sse
  0010d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 125  : 
; 126  : 					Token = GetToken();

  00110	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 					m_GamblingInfo[Count].m_iExcRate = (int)TokenNumber;

  00115	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0011b	e8 00 00 00 00	 call	 __ftol2_sse
  00120	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 128  : 
; 129  : 					Token = GetToken();

  00123	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 130  : 					m_GamblingInfo[Count].m_iSortItemRate = (int)TokenNumber;

  00128	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012e	e8 00 00 00 00	 call	 __ftol2_sse
  00133	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 131  : 					
; 132  : 					Count++;

  00136	47		 inc	 edi
  00137	83 c6 14	 add	 esi, 20			; 00000014H

; 133  : 				}

  0013a	e9 55 ff ff ff	 jmp	 $LL42@Load
$LN43@Load:

; 134  : 			}
; 135  : 			else if (Type == 1)

  0013f	83 f8 01	 cmp	 eax, 1
  00142	75 68		 jne	 SHORT $LN36@Load

; 136  : 			{
; 137  : 				Count = 0;

  00144	33 ff		 xor	 edi, edi
  00146	8d b3 fc 01 00
	00		 lea	 esi, DWORD PTR [ebx+508]
  0014c	8d 64 24 00	 npad	 4
$LL35@Load:

; 138  : 
; 139  : 				while(true)
; 140  : 				{
; 141  : 					Token = GetToken();

  00150	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 142  : 
; 143  : 					if( Token == 0 )

  00155	85 c0		 test	 eax, eax
  00157	75 37		 jne	 SHORT $LN32@Load

; 144  : 					{
; 145  : 						if (strcmp("end",TokenString) == 0)

  00159	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0015e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL78@Load:
  00163	8a 10		 mov	 dl, BYTE PTR [eax]
  00165	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00167	75 1a		 jne	 SHORT $LN79@Load
  00169	84 d2		 test	 dl, dl
  0016b	74 12		 je	 SHORT $LN80@Load
  0016d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00170	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00173	75 0e		 jne	 SHORT $LN79@Load
  00175	83 c0 02	 add	 eax, 2
  00178	83 c1 02	 add	 ecx, 2
  0017b	84 d2		 test	 dl, dl
  0017d	75 e4		 jne	 SHORT $LL78@Load
$LN80@Load:
  0017f	33 c0		 xor	 eax, eax
  00181	eb 05		 jmp	 SHORT $LN81@Load
$LN79@Load:
  00183	1b c0		 sbb	 eax, eax
  00185	83 d8 ff	 sbb	 eax, -1
$LN81@Load:
  00188	85 c0		 test	 eax, eax
  0018a	0f 84 ef 03 00
	00		 je	 $LN8@Load
$LN32@Load:

; 146  : 						{
; 147  : 							break;
; 148  : 						}
; 149  : 					}
; 150  : 					if ( Count > GAMBLE_MAX_SECRET_ITEM_CLASS )

  00190	83 ff 04	 cmp	 edi, 4
  00193	0f 8f 11 01 00
	00		 jg	 $LN66@Load

; 151  : 					{
; 152  : 						MsgBox("Load Script Error %s",filename);
; 153  : 						break;
; 154  : 					}
; 155  : 
; 156  : 					this->m_iBagItemOptionRate[Count] = (int)TokenNumber;

  00199	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019f	e8 00 00 00 00	 call	 __ftol2_sse
  001a4	89 06		 mov	 DWORD PTR [esi], eax

; 157  : 
; 158  : 					Count++;

  001a6	47		 inc	 edi
  001a7	83 c6 04	 add	 esi, 4

; 159  : 				}

  001aa	eb a4		 jmp	 SHORT $LL35@Load
$LN36@Load:

; 160  : 			}
; 161  : 			else if (Type == 2)

  001ac	83 f8 02	 cmp	 eax, 2
  001af	0f 85 90 00 00
	00		 jne	 $LN29@Load

; 162  : 			{
; 163  : 				Count = 0;

  001b5	33 ff		 xor	 edi, edi
  001b7	8d b3 0c 02 00
	00		 lea	 esi, DWORD PTR [ebx+524]
  001bd	8d 49 00	 npad	 3
$LL28@Load:

; 164  : 
; 165  : 				while(true)
; 166  : 				{
; 167  : 					Token = GetToken();

  001c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 168  : 
; 169  : 					if( Token == 0 )

  001c5	85 c0		 test	 eax, eax
  001c7	75 37		 jne	 SHORT $LN25@Load

; 170  : 					{
; 171  : 						if (strcmp("end",TokenString) == 0)

  001c9	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001ce	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL82@Load:
  001d3	8a 10		 mov	 dl, BYTE PTR [eax]
  001d5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001d7	75 1a		 jne	 SHORT $LN83@Load
  001d9	84 d2		 test	 dl, dl
  001db	74 12		 je	 SHORT $LN84@Load
  001dd	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001e0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001e3	75 0e		 jne	 SHORT $LN83@Load
  001e5	83 c0 02	 add	 eax, 2
  001e8	83 c1 02	 add	 ecx, 2
  001eb	84 d2		 test	 dl, dl
  001ed	75 e4		 jne	 SHORT $LL82@Load
$LN84@Load:
  001ef	33 c0		 xor	 eax, eax
  001f1	eb 05		 jmp	 SHORT $LN85@Load
$LN83@Load:
  001f3	1b c0		 sbb	 eax, eax
  001f5	83 d8 ff	 sbb	 eax, -1
$LN85@Load:
  001f8	85 c0		 test	 eax, eax
  001fa	0f 84 7f 03 00
	00		 je	 $LN8@Load
$LN25@Load:

; 172  : 						{
; 173  : 							break;
; 174  : 						}
; 175  : 					}
; 176  : 
; 177  : 					if ( Count > GAMBLE_MAX_NORMAL_ITEM )

  00200	83 ff 05	 cmp	 edi, 5
  00203	7f 2a		 jg	 SHORT $LN64@Load

; 180  : 						break;
; 181  : 					}
; 182  : 
; 183  : 					this->m_dwSpecialItemRate[Count] = (DWORD)TokenNumber;

  00205	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber

; 184  : 
; 185  : 					Count++;

  0020b	47		 inc	 edi
  0020c	d9 7d fe	 fnstcw	 WORD PTR tv670[ebp]
  0020f	0f b7 45 fe	 movzx	 eax, WORD PTR tv670[ebp]
  00213	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00218	89 45 f0	 mov	 DWORD PTR tv667[ebp], eax
  0021b	83 c6 04	 add	 esi, 4
  0021e	d9 6d f0	 fldcw	 WORD PTR tv667[ebp]
  00221	df 7d ec	 fistp	 QWORD PTR tv665[ebp]
  00224	8b 4d ec	 mov	 ecx, DWORD PTR tv665[ebp]
  00227	89 4e fc	 mov	 DWORD PTR [esi-4], ecx
  0022a	d9 6d fe	 fldcw	 WORD PTR tv670[ebp]

; 186  : 				}

  0022d	eb 91		 jmp	 SHORT $LL28@Load
$LN64@Load:

; 178  : 					{
; 179  : 						MsgBox("Load Script Error %s",filename);

  0022f	8b 55 08	 mov	 edx, DWORD PTR _filename$[ebp]
  00232	52		 push	 edx
  00233	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  00238	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0023d	83 c4 08	 add	 esp, 8

; 187  : 			}
; 188  : 			else if (Type == 3)

  00240	e9 3a 03 00 00	 jmp	 $LN8@Load
$LN29@Load:
  00245	83 f8 03	 cmp	 eax, 3
  00248	75 76		 jne	 SHORT $LN22@Load

; 189  : 			{
; 190  : 				Count = 0;

  0024a	33 ff		 xor	 edi, edi
  0024c	8d b3 20 02 00
	00		 lea	 esi, DWORD PTR [ebx+544]
$LL21@Load:

; 191  : 
; 192  : 				while(true)
; 193  : 				{
; 194  : 					Token = GetToken();

  00252	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 195  : 
; 196  : 					if( Token == 0 )

  00257	85 c0		 test	 eax, eax
  00259	75 37		 jne	 SHORT $LN18@Load

; 197  : 					{
; 198  : 						if (strcmp("end",TokenString) == 0)

  0025b	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00260	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL86@Load:
  00265	8a 10		 mov	 dl, BYTE PTR [eax]
  00267	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00269	75 1a		 jne	 SHORT $LN87@Load
  0026b	84 d2		 test	 dl, dl
  0026d	74 12		 je	 SHORT $LN88@Load
  0026f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00272	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00275	75 0e		 jne	 SHORT $LN87@Load
  00277	83 c0 02	 add	 eax, 2
  0027a	83 c1 02	 add	 ecx, 2
  0027d	84 d2		 test	 dl, dl
  0027f	75 e4		 jne	 SHORT $LL86@Load
$LN88@Load:
  00281	33 c0		 xor	 eax, eax
  00283	eb 05		 jmp	 SHORT $LN89@Load
$LN87@Load:
  00285	1b c0		 sbb	 eax, eax
  00287	83 d8 ff	 sbb	 eax, -1
$LN89@Load:
  0028a	85 c0		 test	 eax, eax
  0028c	0f 84 ed 02 00
	00		 je	 $LN8@Load
$LN18@Load:

; 199  : 						{
; 200  : 							break;
; 201  : 						}
; 202  : 					}
; 203  : 					if ( Count > GAMBLE_MAX_SECRET_ITEM_CLASS )

  00292	83 ff 04	 cmp	 edi, 4
  00295	7f 13		 jg	 SHORT $LN66@Load

; 206  : 						break;
; 207  : 					}
; 208  : 
; 209  : 					this->m_iBagItemExcRate[Count] = (int)TokenNumber;

  00297	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029d	e8 00 00 00 00	 call	 __ftol2_sse
  002a2	89 06		 mov	 DWORD PTR [esi], eax

; 210  : 
; 211  : 					Count++;

  002a4	47		 inc	 edi
  002a5	83 c6 04	 add	 esi, 4

; 212  : 				}

  002a8	eb a8		 jmp	 SHORT $LL21@Load
$LN66@Load:

; 204  : 					{
; 205  : 						MsgBox("Load Script Error %s",filename);

  002aa	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  002ad	50		 push	 eax
  002ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  002b3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002b8	83 c4 08	 add	 esp, 8

; 213  : 			}
; 214  : 			else if (Type == 4)

  002bb	e9 bf 02 00 00	 jmp	 $LN8@Load
$LN22@Load:
  002c0	83 f8 04	 cmp	 eax, 4
  002c3	0f 85 89 00 00
	00		 jne	 $LN15@Load

; 215  : 			{
; 216  : 				Count = 0;

  002c9	33 ff		 xor	 edi, edi
  002cb	8d b3 48 02 00
	00		 lea	 esi, DWORD PTR [ebx+584]
$LL14@Load:

; 217  : 
; 218  : 				while(true)
; 219  : 				{
; 220  : 					Token = GetToken();

  002d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 221  : 
; 222  : 					if( Token == 0 )

  002d6	85 c0		 test	 eax, eax
  002d8	75 37		 jne	 SHORT $LN11@Load

; 223  : 					{
; 224  : 						if (strcmp("end",TokenString) == 0)

  002da	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  002df	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL90@Load:
  002e4	8a 10		 mov	 dl, BYTE PTR [eax]
  002e6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002e8	75 1a		 jne	 SHORT $LN91@Load
  002ea	84 d2		 test	 dl, dl
  002ec	74 12		 je	 SHORT $LN92@Load
  002ee	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002f1	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002f4	75 0e		 jne	 SHORT $LN91@Load
  002f6	83 c0 02	 add	 eax, 2
  002f9	83 c1 02	 add	 ecx, 2
  002fc	84 d2		 test	 dl, dl
  002fe	75 e4		 jne	 SHORT $LL90@Load
$LN92@Load:
  00300	33 c0		 xor	 eax, eax
  00302	eb 05		 jmp	 SHORT $LN93@Load
$LN91@Load:
  00304	1b c0		 sbb	 eax, eax
  00306	83 d8 ff	 sbb	 eax, -1
$LN93@Load:
  00309	85 c0		 test	 eax, eax
  0030b	0f 84 6e 02 00
	00		 je	 $LN8@Load
$LN11@Load:

; 225  : 						{
; 226  : 							break;
; 227  : 						}
; 228  : 					}
; 229  : 
; 230  : 					if ( Count > GAMBLE_MAX_SECRET_ITEM_TYPE )

  00311	83 ff 06	 cmp	 edi, 6
  00314	7f 26		 jg	 SHORT $LN68@Load

; 233  : 						break;
; 234  : 					}
; 235  : 
; 236  : 					this->m_iExcRatePerItemKind[Count] = (int)TokenNumber;

  00316	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0031c	e8 00 00 00 00	 call	 __ftol2_sse
  00321	89 46 e8	 mov	 DWORD PTR [esi-24], eax

; 237  : 
; 238  : 					Token = GetToken();

  00324	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 239  : 					this->m_iGeneralExcRate[Count] = (int)TokenNumber;

  00329	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0032f	e8 00 00 00 00	 call	 __ftol2_sse
  00334	89 06		 mov	 DWORD PTR [esi], eax

; 240  : 
; 241  : 					Count++;

  00336	47		 inc	 edi
  00337	83 c6 04	 add	 esi, 4

; 242  : 				}

  0033a	eb 95		 jmp	 SHORT $LL14@Load
$LN68@Load:

; 231  : 					{
; 232  : 						MsgBox("Load Script Error %s",filename);

  0033c	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0033f	51		 push	 ecx
  00340	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  00345	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0034a	83 c4 08	 add	 esp, 8

; 243  : 			}
; 244  : 			else if (Type >= 5)

  0034d	e9 2d 02 00 00	 jmp	 $LN8@Load
$LN15@Load:
  00352	83 f8 05	 cmp	 eax, 5
  00355	0f 8c 24 02 00
	00		 jl	 $LN8@Load

; 245  : 			{
; 246  : 				n = 0;

  0035b	33 f6		 xor	 esi, esi
  0035d	8d 49 00	 npad	 3
$LL7@Load:

; 247  : 
; 248  : 				while(true)
; 249  : 				{
; 250  : 					Token = GetToken();

  00360	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 251  : 
; 252  : 					if( Token == 0 )

  00365	85 c0		 test	 eax, eax
  00367	75 37		 jne	 SHORT $LN4@Load

; 253  : 					{
; 254  : 						if (strcmp("end",TokenString) == 0)

  00369	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0036e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL94@Load:
  00373	8a 10		 mov	 dl, BYTE PTR [eax]
  00375	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00377	75 1a		 jne	 SHORT $LN95@Load
  00379	84 d2		 test	 dl, dl
  0037b	74 12		 je	 SHORT $LN96@Load
  0037d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00380	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00383	75 0e		 jne	 SHORT $LN95@Load
  00385	83 c0 02	 add	 eax, 2
  00388	83 c1 02	 add	 ecx, 2
  0038b	84 d2		 test	 dl, dl
  0038d	75 e4		 jne	 SHORT $LL94@Load
$LN96@Load:
  0038f	33 c0		 xor	 eax, eax
  00391	eb 05		 jmp	 SHORT $LN97@Load
$LN95@Load:
  00393	1b c0		 sbb	 eax, eax
  00395	83 d8 ff	 sbb	 eax, -1
$LN97@Load:
  00398	85 c0		 test	 eax, eax
  0039a	0f 84 c7 01 00
	00		 je	 $LN69@Load
$LN4@Load:

; 257  : 							break;
; 258  : 						}
; 259  : 					}
; 260  : 					
; 261  : 					this->BagObject[m_iGambleBagCount].m_type = (BYTE)TokenNumber;

  003a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003a6	d9 7d fe	 fnstcw	 WORD PTR tv589[ebp]
  003a9	0f b7 45 fe	 movzx	 eax, WORD PTR tv589[ebp]
  003ad	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003b2	89 45 f0	 mov	 DWORD PTR tv586[ebp], eax
  003b5	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  003bb	d9 6d f0	 fldcw	 WORD PTR tv586[ebp]
  003be	db 5d f0	 fistp	 DWORD PTR tv584[ebp]
  003c1	0f b6 55 f0	 movzx	 edx, BYTE PTR tv584[ebp]
  003c5	88 94 c3 cc 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+716], dl
  003cc	d9 6d fe	 fldcw	 WORD PTR tv589[ebp]

; 262  : 						
; 263  : 					Token = GetToken();

  003cf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 264  : 					this->BagObject[m_iGambleBagCount].m_index = (BYTE)TokenNumber;

  003d4	8b 93 60 02 00
	00		 mov	 edx, DWORD PTR [ebx+608]
  003da	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003e0	d9 7d fe	 fnstcw	 WORD PTR tv581[ebp]
  003e3	0f b7 45 fe	 movzx	 eax, WORD PTR tv581[ebp]
  003e7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003ec	89 45 f0	 mov	 DWORD PTR tv578[ebp], eax
  003ef	d9 6d f0	 fldcw	 WORD PTR tv578[ebp]
  003f2	db 5d f0	 fistp	 DWORD PTR tv576[ebp]
  003f5	0f b6 4d f0	 movzx	 ecx, BYTE PTR tv576[ebp]
  003f9	88 8c d3 cd 02
	00 00		 mov	 BYTE PTR [ebx+edx*8+717], cl
  00400	d9 6d fe	 fldcw	 WORD PTR tv581[ebp]

; 265  : 
; 266  : 					Token = GetToken();

  00403	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 267  : 					this->BagObject[m_iGambleBagCount].m_minLevel = (BYTE)TokenNumber;

  00408	8b 8b 60 02 00
	00		 mov	 ecx, DWORD PTR [ebx+608]
  0040e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00414	d9 7d fe	 fnstcw	 WORD PTR tv573[ebp]
  00417	0f b7 45 fe	 movzx	 eax, WORD PTR tv573[ebp]
  0041b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00420	89 45 f0	 mov	 DWORD PTR tv570[ebp], eax
  00423	d9 6d f0	 fldcw	 WORD PTR tv570[ebp]
  00426	db 5d f0	 fistp	 DWORD PTR tv568[ebp]
  00429	0f b6 45 f0	 movzx	 eax, BYTE PTR tv568[ebp]
  0042d	88 84 cb ce 02
	00 00		 mov	 BYTE PTR [ebx+ecx*8+718], al
  00434	d9 6d fe	 fldcw	 WORD PTR tv573[ebp]

; 268  : 
; 269  : 					Token = GetToken();

  00437	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 270  : 					this->BagObject[m_iGambleBagCount].m_maxLevel = (BYTE)TokenNumber;

  0043c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00442	d9 7d fe	 fnstcw	 WORD PTR tv565[ebp]
  00445	0f b7 45 fe	 movzx	 eax, WORD PTR tv565[ebp]
  00449	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0044e	89 45 f0	 mov	 DWORD PTR tv562[ebp], eax
  00451	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  00457	d9 6d f0	 fldcw	 WORD PTR tv562[ebp]
  0045a	db 5d f0	 fistp	 DWORD PTR tv560[ebp]
  0045d	0f b6 55 f0	 movzx	 edx, BYTE PTR tv560[ebp]
  00461	88 94 c3 cf 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+719], dl
  00468	d9 6d fe	 fldcw	 WORD PTR tv565[ebp]

; 271  : 
; 272  : 					Token = GetToken();

  0046b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 273  : 					this->BagObject[m_iGambleBagCount].m_isskill = (BYTE)TokenNumber;

  00470	8b 93 60 02 00
	00		 mov	 edx, DWORD PTR [ebx+608]
  00476	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0047c	d9 7d fe	 fnstcw	 WORD PTR tv557[ebp]
  0047f	0f b7 45 fe	 movzx	 eax, WORD PTR tv557[ebp]
  00483	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00488	89 45 f0	 mov	 DWORD PTR tv554[ebp], eax
  0048b	d9 6d f0	 fldcw	 WORD PTR tv554[ebp]
  0048e	db 5d f0	 fistp	 DWORD PTR tv552[ebp]
  00491	0f b6 4d f0	 movzx	 ecx, BYTE PTR tv552[ebp]
  00495	88 8c d3 d0 02
	00 00		 mov	 BYTE PTR [ebx+edx*8+720], cl
  0049c	d9 6d fe	 fldcw	 WORD PTR tv557[ebp]

; 274  : 
; 275  : 					Token = GetToken();

  0049f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 276  : 					this->BagObject[m_iGambleBagCount].m_isluck = (BYTE)TokenNumber;

  004a4	8b 8b 60 02 00
	00		 mov	 ecx, DWORD PTR [ebx+608]
  004aa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004b0	d9 7d fe	 fnstcw	 WORD PTR tv549[ebp]
  004b3	0f b7 45 fe	 movzx	 eax, WORD PTR tv549[ebp]
  004b7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004bc	89 45 f0	 mov	 DWORD PTR tv546[ebp], eax
  004bf	d9 6d f0	 fldcw	 WORD PTR tv546[ebp]
  004c2	db 5d f0	 fistp	 DWORD PTR tv544[ebp]
  004c5	0f b6 45 f0	 movzx	 eax, BYTE PTR tv544[ebp]
  004c9	88 84 cb d1 02
	00 00		 mov	 BYTE PTR [ebx+ecx*8+721], al
  004d0	d9 6d fe	 fldcw	 WORD PTR tv549[ebp]

; 277  : 
; 278  : 					Token = GetToken();

  004d3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 279  : 					this->BagObject[m_iGambleBagCount].m_isoption = (BYTE)TokenNumber;

  004d8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004de	d9 7d fe	 fnstcw	 WORD PTR tv541[ebp]
  004e1	0f b7 45 fe	 movzx	 eax, WORD PTR tv541[ebp]
  004e5	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004ea	89 45 f0	 mov	 DWORD PTR tv538[ebp], eax
  004ed	d9 6d f0	 fldcw	 WORD PTR tv538[ebp]
  004f0	db 5d f0	 fistp	 DWORD PTR tv536[ebp]
  004f3	0f b6 55 f0	 movzx	 edx, BYTE PTR tv536[ebp]
  004f7	d9 6d fe	 fldcw	 WORD PTR tv541[ebp]
  004fa	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  00500	88 94 c3 d2 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+722], dl

; 280  : 
; 281  : 					Token = GetToken();

  00507	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 282  : 					this->BagObject[m_iGambleBagCount].m_isexitem = (BYTE)TokenNumber;

  0050c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00512	8b 93 60 02 00
	00		 mov	 edx, DWORD PTR [ebx+608]
  00518	d9 7d fe	 fnstcw	 WORD PTR tv533[ebp]
  0051b	0f b7 45 fe	 movzx	 eax, WORD PTR tv533[ebp]
  0051f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00524	89 45 f0	 mov	 DWORD PTR tv530[ebp], eax
  00527	d9 6d f0	 fldcw	 WORD PTR tv530[ebp]
  0052a	db 5d f0	 fistp	 DWORD PTR tv528[ebp]
  0052d	0f b6 4d f0	 movzx	 ecx, BYTE PTR tv528[ebp]
  00531	88 8c d3 d3 02
	00 00		 mov	 BYTE PTR [ebx+edx*8+723], cl

; 283  : 
; 284  : 					if(this->BagObject[m_iGambleBagCount].m_minLevel > this->BagObject[m_iGambleBagCount].m_maxLevel )

  00538	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  0053e	0f b6 8c c3 ce
	02 00 00	 movzx	 ecx, BYTE PTR [ebx+eax*8+718]
  00546	d9 6d fe	 fldcw	 WORD PTR tv533[ebp]
  00549	3a 8c c3 cf 02
	00 00		 cmp	 cl, BYTE PTR [ebx+eax*8+719]
  00550	77 77		 ja	 SHORT $LN70@Load

; 287  : 						return;
; 288  : 					}
; 289  : 					
; 290  : 					n++;
; 291  : 					this->m_iGambleBagCount++;

  00552	40		 inc	 eax
  00553	46		 inc	 esi
  00554	89 83 60 02 00
	00		 mov	 DWORD PTR [ebx+608], eax

; 292  : 
; 293  : 					if (this->m_iGambleBagCount > GAMBLE_MAX_ITEM-1 )

  0055a	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0055f	0f 8e fb fd ff
	ff		 jle	 $LL7@Load

; 294  : 					{
; 295  : 						break;
; 296  : 					}
; 297  : 
; 298  : 				}

  00565	eb 05		 jmp	 SHORT $LN71@Load
$LN69@Load:

; 255  : 						{
; 256  : 							this->m_iDropRatePerItemCount[iProbability] = n;

  00567	8b 55 f8	 mov	 edx, DWORD PTR tv805[ebp]
  0056a	89 32		 mov	 DWORD PTR [edx], esi
$LN71@Load:

; 299  : 
; 300  : 				iProbability++;

  0056c	83 45 f8 04	 add	 DWORD PTR tv805[ebp], 4
  00570	47		 inc	 edi
  00571	89 7d f4	 mov	 DWORD PTR _iProbability$[ebp], edi

; 301  : 
; 302  : 				if(iProbability > GAMBLE_MAX_ITEM_INFO-1)

  00574	83 ff 18	 cmp	 edi, 24			; 00000018H
  00577	7f 14		 jg	 SHORT $LN73@Load

; 303  : 				{
; 304  : 					break;
; 305  : 				}
; 306  : 
; 307  : 				this->m_iRateKindCount = iProbability;

  00579	89 bb c8 02 00
	00		 mov	 DWORD PTR [ebx+712], edi
$LN8@Load:

; 81   : 	int Count = 0;
; 82   : 
; 83   : 	while(true)
; 84   : 	{
; 85   : 		Token = GetToken();

  0057f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 
; 87   : 		if ( Token == END )

  00584	83 f8 02	 cmp	 eax, 2
  00587	0f 85 e3 fa ff
	ff		 jne	 $LL98@Load
$LN73@Load:

; 308  : 			}
; 309  : 		}
; 310  : 	}
; 311  : 
; 312  : 	fclose(SMDFile);

  0058d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00593	51		 push	 ecx
  00594	e8 00 00 00 00	 call	 _fclose

; 313  : 	LogAdd(lMsg.Get(454), filename);

  00599	8b 55 08	 mov	 edx, DWORD PTR _filename$[ebp]
  0059c	83 c4 04	 add	 esp, 4
  0059f	52		 push	 edx
  005a0	68 c6 01 00 00	 push	 454			; 000001c6H
  005a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  005aa	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  005af	50		 push	 eax
  005b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  005b6	83 c4 08	 add	 esp, 8
  005b9	5f		 pop	 edi
  005ba	5e		 pop	 esi

; 314  : 	this->bLoad = TRUE;

  005bb	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [ebx+4], 1
  005c2	5b		 pop	 ebx

; 315  : }

  005c3	8b e5		 mov	 esp, ebp
  005c5	5d		 pop	 ebp
  005c6	c2 04 00	 ret	 4
$LN70@Load:

; 285  : 					{
; 286  : 						MsgBox("Load Script Error %s",filename);

  005c9	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  005cc	50		 push	 eax
  005cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  005d2	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 313  : 	LogAdd(lMsg.Get(454), filename);

  005d7	83 c4 08	 add	 esp, 8
  005da	5f		 pop	 edi
  005db	5e		 pop	 esi
  005dc	5b		 pop	 ebx

; 315  : }

  005dd	8b e5		 mov	 esp, ebp
  005df	5d		 pop	 ebp
  005e0	c2 04 00	 ret	 4
?Load@CGambleSystem@@QAEXPAD@Z ENDP			; CGambleSystem::Load
_TEXT	ENDS
PUBLIC	?GetLevel@CGambleSystem@@QAEEH@Z		; CGambleSystem::GetLevel
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetLevel@CGambleSystem@@QAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetLevel@CGambleSystem@@QAEEH@Z PROC			; CGambleSystem::GetLevel, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 319  : 	if ( n <0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  00006	81 fa 95 00 00
	00		 cmp	 edx, 149		; 00000095H
  0000c	77 36		 ja	 SHORT $LN2@GetLevel

; 322  : 	}
; 323  : 
; 324  : 	if ( this->BagObject[n].m_minLevel == this->BagObject[n].m_maxLevel )

  0000e	8a 84 d1 ce 02
	00 00		 mov	 al, BYTE PTR [ecx+edx*8+718]
  00015	56		 push	 esi
  00016	8d b4 d1 ce 02
	00 00		 lea	 esi, DWORD PTR [ecx+edx*8+718]
  0001d	8a 8c d1 cf 02
	00 00		 mov	 cl, BYTE PTR [ecx+edx*8+719]
  00024	3a c1		 cmp	 al, cl

; 325  : 	{
; 326  : 		return this->BagObject[n].m_minLevel;

  00026	74 17		 je	 SHORT $LN6@GetLevel

; 327  : 	}
; 328  : 
; 329  : 	int sub = (this->BagObject[n].m_maxLevel - this->BagObject[n].m_minLevel) + 1;

  00028	57		 push	 edi
  00029	0f b6 c0	 movzx	 eax, al
  0002c	0f b6 f9	 movzx	 edi, cl
  0002f	2b f8		 sub	 edi, eax
  00031	47		 inc	 edi

; 330  : 	int level = this->BagObject[n].m_minLevel + (rand()%sub);

  00032	e8 00 00 00 00	 call	 _rand
  00037	99		 cdq
  00038	f7 ff		 idiv	 edi
  0003a	5f		 pop	 edi
  0003b	8b c2		 mov	 eax, edx
  0003d	02 06		 add	 al, BYTE PTR [esi]
$LN6@GetLevel:
  0003f	5e		 pop	 esi

; 331  : 
; 332  : 	return level;
; 333  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN2@GetLevel:

; 320  : 	{
; 321  : 		return 0;

  00044	32 c0		 xor	 al, al

; 331  : 
; 332  : 	return level;
; 333  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?GetLevel@CGambleSystem@@QAEEH@Z ENDP			; CGambleSystem::GetLevel
_TEXT	ENDS
PUBLIC	?GetBagItemCount@CGambleSystem@@QAEHXZ		; CGambleSystem::GetBagItemCount
; Function compile flags: /Ogtp
;	COMDAT ?GetBagItemCount@CGambleSystem@@QAEHXZ
_TEXT	SEGMENT
?GetBagItemCount@CGambleSystem@@QAEHXZ PROC		; CGambleSystem::GetBagItemCount, COMDAT
; _this$ = ecx

; 553  : 	return m_iGambleBagCount;

  00000	8b 81 60 02 00
	00		 mov	 eax, DWORD PTR [ecx+608]

; 554  : }

  00006	c3		 ret	 0
?GetBagItemCount@CGambleSystem@@QAEHXZ ENDP		; CGambleSystem::GetBagItemCount
_TEXT	ENDS
PUBLIC	?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z	; CGambleSystem::SortExcNumberPerKind
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
; Function compile flags: /Ogtp
;	COMDAT ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z
_TEXT	SEGMENT
_iFullOptRate$ = -8					; size = 4
_btExOption$ = -1					; size = 1
_n$ = 8							; size = 4
?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z PROC	; CGambleSystem::SortExcNumberPerKind, COMDAT
; _this$ = ecx

; 557  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 558  : 	BYTE btExOption = 0;

  00009	33 c0		 xor	 eax, eax

; 559  : 	int iFullOptRate = 0;
; 560  : 	int iItemIndex = 0;

  0000b	bf 06 00 00 00	 mov	 edi, 6
  00010	33 f6		 xor	 esi, esi
  00012	2b 7d 08	 sub	 edi, DWORD PTR _n$[ebp]
  00015	88 45 ff	 mov	 BYTE PTR _btExOption$[ebp], al
  00018	89 45 f8	 mov	 DWORD PTR _iFullOptRate$[ebp], eax
  0001b	8d 99 30 02 00
	00		 lea	 ebx, DWORD PTR [ecx+560]
$LL8@SortExcNum:

; 561  : 
; 562  : 	while(true)
; 563  : 	{
; 564  : 		if (this->m_iExcRatePerItemKind[iItemIndex] >= GetLargeRand() % 1000000)

  00021	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00026	33 d2		 xor	 edx, edx
  00028	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0002d	f7 f1		 div	 ecx
  0002f	39 13		 cmp	 DWORD PTR [ebx], edx
  00031	72 0b		 jb	 SHORT $LN6@SortExcNum

; 565  : 		{
; 566  : 			btExOption |= 1 << iItemIndex;

  00033	b2 01		 mov	 dl, 1
  00035	8b ce		 mov	 ecx, esi
  00037	d2 e2		 shl	 dl, cl
  00039	08 55 ff	 or	 BYTE PTR _btExOption$[ebp], dl

; 567  : 		}
; 568  : 		else

  0003c	eb 03		 jmp	 SHORT $LN5@SortExcNum
$LN6@SortExcNum:

; 569  : 		{
; 570  : 			iFullOptRate++;

  0003e	ff 45 f8	 inc	 DWORD PTR _iFullOptRate$[ebp]
$LN5@SortExcNum:

; 585  : 			}
; 586  : 			break;
; 587  : 		}
; 588  : 		iItemIndex++;

  00041	46		 inc	 esi
  00042	39 7d f8	 cmp	 DWORD PTR _iFullOptRate$[ebp], edi
  00045	7d 05		 jge	 SHORT $LN13@SortExcNum
  00047	83 c3 04	 add	 ebx, 4

; 589  : 	}

  0004a	eb d5		 jmp	 SHORT $LL8@SortExcNum
$LN13@SortExcNum:

; 571  : 		}
; 572  : 
; 573  : 		if(iFullOptRate >= 6-n)
; 574  : 		{
; 575  : 			while(true)
; 576  : 			{
; 577  : 				iItemIndex++;
; 578  : 
; 579  : 				if(iItemIndex >= GAMBLE_MAX_SECRET_ITEM_TYPE)

  0004c	8a 45 ff	 mov	 al, BYTE PTR _btExOption$[ebp]
  0004f	83 fe 06	 cmp	 esi, 6
  00052	7d 0e		 jge	 SHORT $LN14@SortExcNum
$LL3@SortExcNum:

; 580  : 				{
; 581  : 					break;
; 582  : 				}
; 583  : 
; 584  : 				btExOption |= 1 << iItemIndex;

  00054	8b ce		 mov	 ecx, esi
  00056	b2 01		 mov	 dl, 1
  00058	d2 e2		 shl	 dl, cl
  0005a	46		 inc	 esi
  0005b	0a c2		 or	 al, dl
  0005d	83 fe 06	 cmp	 esi, 6
  00060	7c f2		 jl	 SHORT $LL3@SortExcNum
$LN14@SortExcNum:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx

; 590  : 
; 591  : 	return btExOption;
; 592  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ENDP	; CGambleSystem::SortExcNumberPerKind
_TEXT	ENDS
PUBLIC	?SortExcOption@CGambleSystem@@QAEEXZ		; CGambleSystem::SortExcOption
; Function compile flags: /Ogtp
;	COMDAT ?SortExcOption@CGambleSystem@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SortExcOption@CGambleSystem@@QAEEXZ PROC		; CGambleSystem::SortExcOption, COMDAT
; _this$ = ecx

; 595  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 596  : 	BYTE btExOption = 0;

  00007	32 db		 xor	 bl, bl

; 597  : 	int iItemIndex = 0;

  00009	33 f6		 xor	 esi, esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 598  : 	int count = 0;

  0000e	33 ff		 xor	 edi, edi
$LL10@SortExcOpt:

; 599  : 
; 600  : 	while(true)
; 601  : 	{
; 602  : 		if (this->m_iGeneralExcRate[iItemIndex] >= GetLargeRand() % 1000000)

  00010	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00015	33 d2		 xor	 edx, edx
  00017	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0001c	f7 f1		 div	 ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	39 94 b0 48 02
	00 00		 cmp	 DWORD PTR [eax+esi*4+584], edx
  00028	72 09		 jb	 SHORT $LN18@SortExcOpt

; 603  : 		{
; 604  : 			btExOption |= 1 << iItemIndex;

  0002a	b2 01		 mov	 dl, 1
  0002c	8b ce		 mov	 ecx, esi
  0002e	d2 e2		 shl	 dl, cl
  00030	0a da		 or	 bl, dl

; 605  : 			count++;

  00032	47		 inc	 edi
$LN18@SortExcOpt:

; 606  : 		}
; 607  : 
; 608  : 		iItemIndex++;

  00033	46		 inc	 esi

; 609  : 
; 610  : 		if(count == 0)

  00034	85 ff		 test	 edi, edi
  00036	75 09		 jne	 SHORT $LN7@SortExcOpt

; 611  : 		{
; 612  : 			if(iItemIndex >= GAMBLE_MAX_SECRET_ITEM_TYPE)

  00038	83 fe 06	 cmp	 esi, 6
  0003b	7c d3		 jl	 SHORT $LL10@SortExcOpt

; 613  : 			{
; 614  : 				iItemIndex = 0;

  0003d	33 f6		 xor	 esi, esi

; 615  : 			}
; 616  : 		}

  0003f	eb cf		 jmp	 SHORT $LL10@SortExcOpt
$LN7@SortExcOpt:

; 617  : 		else if(count == 1)

  00041	83 ff 01	 cmp	 edi, 1
  00044	75 05		 jne	 SHORT $LN4@SortExcOpt

; 618  : 		{
; 619  : 			if(iItemIndex >= GAMBLE_MAX_SECRET_ITEM_TYPE)

  00046	83 fe 06	 cmp	 esi, 6

; 620  : 			{
; 621  : 				break;
; 622  : 			}
; 623  : 		}

  00049	eb 03		 jmp	 SHORT $LN19@SortExcOpt
$LN4@SortExcOpt:

; 624  : 		else if(count >= 2)

  0004b	83 ff 02	 cmp	 edi, 2
$LN19@SortExcOpt:

; 625  : 		{
; 626  : 			break;
; 627  : 		}
; 628  : 	}

  0004e	7c c0		 jl	 SHORT $LL10@SortExcOpt

; 629  : 
; 630  : 	return btExOption;

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	8a c3		 mov	 al, bl
  00054	5b		 pop	 ebx

; 631  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?SortExcOption@CGambleSystem@@QAEEXZ ENDP		; CGambleSystem::SortExcOption
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCGambleSystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGambleSystem@@UAEPAXI@Z PROC			; CGambleSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGambleSystem@@UAE@XZ ; CGambleSystem::~CGambleSystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCGambleSystem@@UAEPAXI@Z ENDP			; CGambleSystem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Init@CGambleSystem@@QAEXPAD@Z			; CGambleSystem::Init
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
; Function compile flags: /Ogtp
;	COMDAT ?Init@CGambleSystem@@QAEXPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?Init@CGambleSystem@@QAEXPAD@Z PROC			; CGambleSystem::Init, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	this->bLoad = FALSE; //0x4

  00003	33 c0		 xor	 eax, eax
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 32   : 	this->m_iGambleBagCount = 0; //0x260

  0000b	89 86 60 02 00
	00		 mov	 DWORD PTR [esi+608], eax

; 33   : 	this->m_iRateKindCount = 0; //0x2C8

  00011	89 86 c8 02 00
	00		 mov	 DWORD PTR [esi+712], eax

; 34   : 
; 35   : 	int i;
; 36   : 
; 37   : 	for(i = 0; i < GAMBLE_MAX_SECRET_ITEM_CLASS; i++)
; 38   : 	{
; 39   : 		this->m_iBagItemOptionRate[i] = 0;

  00017	89 86 fc 01 00
	00		 mov	 DWORD PTR [esi+508], eax
  0001d	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax
  00023	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  00029	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax

; 40   : 	}
; 41   : 
; 42   : 	for(i = 0; i < GAMBLE_MAX_NORMAL_ITEM; i++)
; 43   : 	{
; 44   : 		this->m_dwSpecialItemRate[i] = NULL;

  0002f	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  00035	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  0003b	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax
  00041	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  00047	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax

; 45   : 	}
; 46   : 
; 47   : 	for(i = 0; i < GAMBLE_MAX_SECRET_ITEM_CLASS; i++)
; 48   : 	{
; 49   : 		//empty (maybe debug log?)
; 50   : 	}
; 51   : 
; 52   : 	for(i = 0; i < GAMBLE_MAX_SECRET_ITEM_TYPE; i++)
; 53   : 	{
; 54   : 		//empty (maybe debug log?)
; 55   : 	}
; 56   : 
; 57   : 	for(i = 0; i < GAMBLE_MAX_ITEM_INFO; i++)
; 58   : 	{
; 59   : 		this->m_iDropRatePerItemCount[i] = 0;

  0004d	89 86 64 02 00
	00		 mov	 DWORD PTR [esi+612], eax
  00053	89 86 68 02 00
	00		 mov	 DWORD PTR [esi+616], eax
  00059	89 86 6c 02 00
	00		 mov	 DWORD PTR [esi+620], eax
  0005f	89 86 70 02 00
	00		 mov	 DWORD PTR [esi+624], eax
  00065	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  0006b	89 86 78 02 00
	00		 mov	 DWORD PTR [esi+632], eax
  00071	89 86 7c 02 00
	00		 mov	 DWORD PTR [esi+636], eax
  00077	89 86 80 02 00
	00		 mov	 DWORD PTR [esi+640], eax
  0007d	89 86 84 02 00
	00		 mov	 DWORD PTR [esi+644], eax
  00083	89 86 88 02 00
	00		 mov	 DWORD PTR [esi+648], eax
  00089	89 86 8c 02 00
	00		 mov	 DWORD PTR [esi+652], eax
  0008f	89 86 90 02 00
	00		 mov	 DWORD PTR [esi+656], eax
  00095	89 86 94 02 00
	00		 mov	 DWORD PTR [esi+660], eax
  0009b	89 86 98 02 00
	00		 mov	 DWORD PTR [esi+664], eax
  000a1	89 86 9c 02 00
	00		 mov	 DWORD PTR [esi+668], eax
  000a7	89 86 a0 02 00
	00		 mov	 DWORD PTR [esi+672], eax
  000ad	89 86 a4 02 00
	00		 mov	 DWORD PTR [esi+676], eax
  000b3	89 86 a8 02 00
	00		 mov	 DWORD PTR [esi+680], eax
  000b9	89 86 ac 02 00
	00		 mov	 DWORD PTR [esi+684], eax
  000bf	89 86 b0 02 00
	00		 mov	 DWORD PTR [esi+688], eax
  000c5	89 86 b4 02 00
	00		 mov	 DWORD PTR [esi+692], eax
  000cb	89 86 b8 02 00
	00		 mov	 DWORD PTR [esi+696], eax
  000d1	89 86 bc 02 00
	00		 mov	 DWORD PTR [esi+700], eax
  000d7	89 86 c0 02 00
	00		 mov	 DWORD PTR [esi+704], eax
  000dd	89 86 c4 02 00
	00		 mov	 DWORD PTR [esi+708], eax

; 60   : 	}
; 61   : 
; 62   : 	this->Load(gDirPath.GetNewPath(filename));

  000e3	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000e6	50		 push	 eax
  000e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000ec	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000f1	50		 push	 eax
  000f2	8b ce		 mov	 ecx, esi
  000f4	e8 00 00 00 00	 call	 ?Load@CGambleSystem@@QAEXPAD@Z ; CGambleSystem::Load
  000f9	5e		 pop	 esi

; 63   : }

  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
?Init@CGambleSystem@@QAEXPAD@Z ENDP			; CGambleSystem::Init
_TEXT	ENDS
PUBLIC	??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@ ; `string'
PUBLIC	?TryGamble@CGambleSystem@@QAEEHEHHE@Z		; CGambleSystem::TryGamble
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@
CONST	SEGMENT
??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@ DB '['
	DB	' GAMBLING ][ TryGambling ] %s(%s) Try Item : [%s]%d Level:%d '
	DB	'op1:%d op2:%d op3:%d ExOp:%d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?TryGamble@CGambleSystem@@QAEEHEHHE@Z
_TEXT	SEGMENT
_iRandA$209961 = -24					; size = 4
_Level$ = -24						; size = 4
_Op1$ = -20						; size = 4
_Op2$ = -16						; size = 4
_NewOp$ = -12						; size = 4
_dwSortItemRand$209973 = -8				; size = 4
_ItemType$ = -8						; size = 4
_Op3$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_MapNumber$ = 12					; size = 1
_cX$ = 16						; size = 4
_cY$ = 20						; size = 4
tv812 = 24						; size = 4
tv430 = 24						; size = 4
_btRareItemNum$ = 24					; size = 1
?TryGamble@CGambleSystem@@QAEEHEHHE@Z PROC		; CGambleSystem::TryGamble, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 337  : 	if (this->bLoad == FALSE)

  00009	33 c0		 xor	 eax, eax
  0000b	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  0000e	75 09		 jne	 SHORT $LN55@TryGamble

; 338  : 	{
; 339  : 		return 0;

  00010	32 c0		 xor	 al, al
  00012	5e		 pop	 esi

; 549  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 14 00	 ret	 20			; 00000014H
$LN55@TryGamble:
  00019	53		 push	 ebx

; 340  : 	}
; 341  : 
; 342  : 	float Dur = 0;
; 343  : 	int ItemType = 0;
; 344  : 	int Level = 0;
; 345  : 	int MapPosX = 0;
; 346  : 	int MapPosY = 0;
; 347  : 	int Op1 = 0;
; 348  : 	int Op2 = 0;
; 349  : 	int Op3 = 0;
; 350  : 	DWORD n = 0; //loc10
; 351  : 	int loc_11 = 0;
; 352  : 	int NewOp = 0;
; 353  : 
; 354  : 	LPOBJ lpObj = &gObj[aIndex]; //loc_13

  0001a	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0001d	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00023	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	57		 push	 edi
  0002a	89 45 f8	 mov	 DWORD PTR _ItemType$[ebp], eax
  0002d	89 45 ec	 mov	 DWORD PTR _Op1$[ebp], eax
  00030	89 45 f0	 mov	 DWORD PTR _Op2$[ebp], eax
  00033	89 45 fc	 mov	 DWORD PTR _Op3$[ebp], eax
  00036	89 45 f4	 mov	 DWORD PTR _NewOp$[ebp], eax
  00039	89 5d 08	 mov	 DWORD PTR _lpObj$[ebp], ebx

; 355  : 	 
; 356  : 	if(this->GetBagItemCount() > 0)

  0003c	e8 00 00 00 00	 call	 ?GetBagItemCount@CGambleSystem@@QAEHXZ ; CGambleSystem::GetBagItemCount
  00041	85 c0		 test	 eax, eax
  00043	0f 8e ef 03 00
	00		 jle	 $LN54@TryGamble

; 357  : 	{
; 358  : 		if (this->m_dwSpecialItemRate[btRareItemNum] >= GetLargeRand() % 1000000)

  00049	0f b6 7d 18	 movzx	 edi, BYTE PTR _btRareItemNum$[ebp]
  0004d	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00052	33 d2		 xor	 edx, edx
  00054	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00059	f7 f1		 div	 ecx
  0005b	39 94 be 0c 02
	00 00		 cmp	 DWORD PTR [esi+edi*4+524], edx
  00062	0f 82 6d 01 00
	00		 jb	 $LN53@TryGamble

; 359  : 		{
; 360  : 			Level = 0;

  00068	33 c0		 xor	 eax, eax

; 361  : 			Dur = 0;
; 362  : 			Op1 = 1;

  0006a	bf 01 00 00 00	 mov	 edi, 1
  0006f	89 45 e8	 mov	 DWORD PTR _Level$[ebp], eax
  00072	89 7d ec	 mov	 DWORD PTR _Op1$[ebp], edi

; 363  : 			Op2 = 0;

  00075	89 45 f0	 mov	 DWORD PTR _Op2$[ebp], eax

; 364  : 
; 365  : 			DWORD dwOptionRate = GetLargeRand() % 1000000;

  00078	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0007d	33 d2		 xor	 edx, edx
  0007f	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00084	f7 f1		 div	 ecx

; 366  : 
; 367  : 			if ( dwOptionRate <= this->m_iBagItemOptionRate[0])

  00086	8b 86 fc 01 00
	00		 mov	 eax, DWORD PTR [esi+508]
  0008c	3b d0		 cmp	 edx, eax
  0008e	77 05		 ja	 SHORT $LN52@TryGamble

; 368  : 			{
; 369  : 				Op3 = 1;

  00090	89 7d fc	 mov	 DWORD PTR _Op3$[ebp], edi
  00093	eb 4c		 jmp	 SHORT $LN64@TryGamble
$LN52@TryGamble:

; 370  : 			}
; 371  : 			else if ( dwOptionRate <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1])

  00095	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  0009b	8d 3c 01	 lea	 edi, DWORD PTR [ecx+eax]
  0009e	3b d7		 cmp	 edx, edi
  000a0	77 09		 ja	 SHORT $LN50@TryGamble

; 372  : 			{
; 373  : 				Op3 = 2;

  000a2	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 2
  000a9	eb 36		 jmp	 SHORT $LN64@TryGamble
$LN50@TryGamble:

; 374  : 			}
; 375  : 			else if ( dwOptionRate <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2])

  000ab	8b be 04 02 00
	00		 mov	 edi, DWORD PTR [esi+516]
  000b1	03 f9		 add	 edi, ecx
  000b3	03 f8		 add	 edi, eax
  000b5	3b d7		 cmp	 edx, edi
  000b7	77 09		 ja	 SHORT $LN48@TryGamble

; 376  : 			{
; 377  : 				Op3 = 3;

  000b9	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 3
  000c0	eb 1f		 jmp	 SHORT $LN64@TryGamble
$LN48@TryGamble:

; 378  : 			}
; 379  : 			else if ( dwOptionRate <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2] + this->m_iBagItemOptionRate[3])

  000c2	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
  000c8	03 8e 04 02 00
	00		 add	 ecx, DWORD PTR [esi+516]
  000ce	03 8e 00 02 00
	00		 add	 ecx, DWORD PTR [esi+512]
  000d4	03 c8		 add	 ecx, eax
  000d6	3b d1		 cmp	 edx, ecx
  000d8	77 07		 ja	 SHORT $LN64@TryGamble

; 380  : 			{
; 381  : 				Op3 = 4;

  000da	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 4
$LN64@TryGamble:

; 382  : 			}
; 383  : 
; 384  : 			DWORD dwNewOptionRate = GetLargeRand() % 1000000;

  000e1	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  000e6	33 d2		 xor	 edx, edx
  000e8	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000ed	f7 f1		 div	 ecx

; 385  : 
; 386  : 			if ( dwNewOptionRate <= this->m_iBagItemExcRate[0])

  000ef	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  000f5	3b d0		 cmp	 edx, eax
  000f7	77 04		 ja	 SHORT $LN45@TryGamble

; 387  : 			{
; 388  : 				NewOp = this->SortExcNumberPerKind(1);

  000f9	6a 01		 push	 1
  000fb	eb 53		 jmp	 SHORT $LN71@TryGamble
$LN45@TryGamble:

; 389  : 			}
; 390  : 			else if ( dwNewOptionRate <= this->m_iBagItemExcRate[0] + this->m_iBagItemExcRate[1])

  000fd	8b 8e 24 02 00
	00		 mov	 ecx, DWORD PTR [esi+548]
  00103	8d 3c 01	 lea	 edi, DWORD PTR [ecx+eax]
  00106	3b d7		 cmp	 edx, edi
  00108	77 11		 ja	 SHORT $LN43@TryGamble

; 391  : 			{
; 392  : 				NewOp = this->SortExcNumberPerKind(2);

  0010a	6a 02		 push	 2
  0010c	8b ce		 mov	 ecx, esi
  0010e	e8 00 00 00 00	 call	 ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ; CGambleSystem::SortExcNumberPerKind
  00113	0f b6 c0	 movzx	 eax, al
  00116	89 45 f4	 mov	 DWORD PTR _NewOp$[ebp], eax
  00119	eb 42		 jmp	 SHORT $LN39@TryGamble
$LN43@TryGamble:

; 393  : 			}
; 394  : 			else if ( dwNewOptionRate <= this->m_iBagItemExcRate[0] + this->m_iBagItemExcRate[1] + this->m_iBagItemExcRate[2])

  0011b	8b be 28 02 00
	00		 mov	 edi, DWORD PTR [esi+552]
  00121	03 f9		 add	 edi, ecx
  00123	03 f8		 add	 edi, eax
  00125	3b d7		 cmp	 edx, edi
  00127	77 11		 ja	 SHORT $LN41@TryGamble

; 395  : 			{
; 396  : 				NewOp = this->SortExcNumberPerKind(3);

  00129	6a 03		 push	 3
  0012b	8b ce		 mov	 ecx, esi
  0012d	e8 00 00 00 00	 call	 ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ; CGambleSystem::SortExcNumberPerKind
  00132	0f b6 c8	 movzx	 ecx, al
  00135	89 4d f4	 mov	 DWORD PTR _NewOp$[ebp], ecx
  00138	eb 23		 jmp	 SHORT $LN39@TryGamble
$LN41@TryGamble:

; 397  : 			}
; 398  : 			else if ( dwNewOptionRate <= this->m_iBagItemExcRate[0] + this->m_iBagItemExcRate[1] + this->m_iBagItemExcRate[2] + this->m_iBagItemExcRate[3])

  0013a	8b be 2c 02 00
	00		 mov	 edi, DWORD PTR [esi+556]
  00140	03 be 28 02 00
	00		 add	 edi, DWORD PTR [esi+552]
  00146	03 f9		 add	 edi, ecx
  00148	03 f8		 add	 edi, eax
  0014a	3b d7		 cmp	 edx, edi
  0014c	77 0f		 ja	 SHORT $LN39@TryGamble

; 399  : 			{
; 400  : 				NewOp = this->SortExcNumberPerKind(4);

  0014e	6a 04		 push	 4
$LN71@TryGamble:
  00150	8b ce		 mov	 ecx, esi
  00152	e8 00 00 00 00	 call	 ?SortExcNumberPerKind@CGambleSystem@@QAEEH@Z ; CGambleSystem::SortExcNumberPerKind
  00157	0f b6 d0	 movzx	 edx, al
  0015a	89 55 f4	 mov	 DWORD PTR _NewOp$[ebp], edx
$LN39@TryGamble:

; 401  : 			}
; 402  : 
; 403  : 			switch ( btRareItemNum ) //5 Types of Special Item

  0015d	0f b6 45 18	 movzx	 eax, BYTE PTR _btRareItemNum$[ebp]
  00161	83 f8 04	 cmp	 eax, 4
  00164	0f 87 6f 02 00
	00		 ja	 $LN1@TryGamble
  0016a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN72@TryGamble[eax*4]
$LN36@TryGamble:

; 404  : 			{
; 405  : 				case 0:
; 406  : 					ItemType = ItemGetNumberMake(3, 11);

  00171	6a 0b		 push	 11			; 0000000bH
  00173	6a 03		 push	 3
  00175	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0017a	83 c4 08	 add	 esp, 8
  0017d	89 45 f8	 mov	 DWORD PTR _ItemType$[ebp], eax

; 407  : 				break;

  00180	e9 54 02 00 00	 jmp	 $LN1@TryGamble
$LN35@TryGamble:

; 408  : 				case 1:
; 409  : 					ItemType = ItemGetNumberMake(5, 33);

  00185	6a 21		 push	 33			; 00000021H
  00187	6a 05		 push	 5
  00189	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0018e	83 c4 08	 add	 esp, 8
  00191	89 45 f8	 mov	 DWORD PTR _ItemType$[ebp], eax

; 410  : 				break;

  00194	e9 40 02 00 00	 jmp	 $LN1@TryGamble
$LN34@TryGamble:

; 411  : 				case 2:
; 412  : 					ItemType = ItemGetNumberMake(4, 24);

  00199	6a 18		 push	 24			; 00000018H
  0019b	6a 04		 push	 4
  0019d	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  001a2	83 c4 08	 add	 esp, 8
  001a5	89 45 f8	 mov	 DWORD PTR _ItemType$[ebp], eax

; 413  : 				break;

  001a8	e9 2c 02 00 00	 jmp	 $LN1@TryGamble
$LN33@TryGamble:

; 414  : 				case 3:
; 415  : 					ItemType = ItemGetNumberMake(2, 18);

  001ad	6a 12		 push	 18			; 00000012H
  001af	6a 02		 push	 2
  001b1	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  001b6	83 c4 08	 add	 esp, 8
  001b9	89 45 f8	 mov	 DWORD PTR _ItemType$[ebp], eax

; 416  : 				break;

  001bc	e9 18 02 00 00	 jmp	 $LN1@TryGamble
$LN32@TryGamble:

; 417  : 				case 4:
; 418  : 					ItemType = ItemGetNumberMake(5, 34);

  001c1	6a 22		 push	 34			; 00000022H
  001c3	6a 05		 push	 5
  001c5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  001ca	83 c4 08	 add	 esp, 8
  001cd	89 45 f8	 mov	 DWORD PTR _ItemType$[ebp], eax

; 419  : 				break;
; 420  : 			}
; 421  : 		}
; 422  : 		else //else for common items like a bag

  001d0	e9 04 02 00 00	 jmp	 $LN1@TryGamble
$LN53@TryGamble:

; 423  : 		{
; 424  : 			int iBagNumberCount = 0;
; 425  : 			int iRandA = 0;

  001d5	33 db		 xor	 ebx, ebx
  001d7	89 5d e8	 mov	 DWORD PTR _iRandA$209961[ebp], ebx

; 426  : 			int iRandB = 0;
; 427  : 			int iBagNumber = 0;
; 428  : 
; 429  : 			switch( btRareItemNum )

  001da	83 ff 04	 cmp	 edi, 4
  001dd	77 21		 ja	 SHORT $LN29@TryGamble
  001df	ff 24 bd 00 00
	00 00		 jmp	 DWORD PTR $LN73@TryGamble[edi*4]
$LN27@TryGamble:

; 430  : 			{
; 431  : 				case 0:
; 432  : 					iBagNumber = 0;
; 433  : 					break;
; 434  : 				case 1:
; 435  : 					iBagNumber = 5;

  001e6	bb 05 00 00 00	 mov	 ebx, 5

; 436  : 					break;

  001eb	eb 13		 jmp	 SHORT $LN29@TryGamble
$LN26@TryGamble:

; 437  : 				case 2:
; 438  : 					iBagNumber = 10;

  001ed	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH

; 439  : 					break;

  001f2	eb 0c		 jmp	 SHORT $LN29@TryGamble
$LN25@TryGamble:

; 440  : 				case 3:
; 441  : 					iBagNumber = 15;

  001f4	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 442  : 					break;

  001f9	eb 05		 jmp	 SHORT $LN29@TryGamble
$LN24@TryGamble:

; 443  : 				case 4:
; 444  : 					iBagNumber = 20;

  001fb	bb 14 00 00 00	 mov	 ebx, 20			; 00000014H
$LN29@TryGamble:

; 445  : 					break;
; 446  : 			}
; 447  : 
; 448  : 			DWORD dwSortItemRand = GetLargeRand() % 1000000;

  00200	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00205	33 d2		 xor	 edx, edx
  00207	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0020c	f7 f1		 div	 ecx

; 449  : 			
; 450  : 			int iSortItemRate = 0;
; 451  : 
; 452  : 			for ( int i = iBagNumber; i < iBagNumber + GAMBLE_MAX_NORMAL_ITEM; i++)

  0020e	8d 4b 05	 lea	 ecx, DWORD PTR [ebx+5]
  00211	8b c3		 mov	 eax, ebx
  00213	89 55 f8	 mov	 DWORD PTR _dwSortItemRand$209973[ebp], edx
  00216	33 d2		 xor	 edx, edx
  00218	3b d9		 cmp	 ebx, ecx
  0021a	7d 21		 jge	 SHORT $LN59@TryGamble

; 445  : 					break;
; 446  : 			}
; 447  : 
; 448  : 			DWORD dwSortItemRand = GetLargeRand() % 1000000;

  0021c	8d 3c 9b	 lea	 edi, DWORD PTR [ebx+ebx*4]
  0021f	8d 7c be 18	 lea	 edi, DWORD PTR [esi+edi*4+24]
  00223	89 7d 18	 mov	 DWORD PTR tv812[ebp], edi
$LL23@TryGamble:

; 453  : 			{
; 454  : 				iSortItemRate += this->m_GamblingInfo[i].m_iSortItemRate;

  00226	8b 7d 18	 mov	 edi, DWORD PTR tv812[ebp]
  00229	03 17		 add	 edx, DWORD PTR [edi]

; 455  : 
; 456  : 				if(dwSortItemRand <= iSortItemRate)

  0022b	39 55 f8	 cmp	 DWORD PTR _dwSortItemRand$209973[ebp], edx
  0022e	76 0b		 jbe	 SHORT $LN60@TryGamble

; 449  : 			
; 450  : 			int iSortItemRate = 0;
; 451  : 
; 452  : 			for ( int i = iBagNumber; i < iBagNumber + GAMBLE_MAX_NORMAL_ITEM; i++)

  00230	83 45 18 14	 add	 DWORD PTR tv812[ebp], 20 ; 00000014H
  00234	40		 inc	 eax
  00235	3b c1		 cmp	 eax, ecx
  00237	7c ed		 jl	 SHORT $LL23@TryGamble

; 466  : 	
; 467  : 				if (iBagNumber <= iBagNumberCount)

  00239	eb 02		 jmp	 SHORT $LN59@TryGamble
$LN60@TryGamble:

; 457  : 				{
; 458  : 					iBagNumber = i;

  0023b	8b d8		 mov	 ebx, eax
$LN59@TryGamble:

; 459  : 					break;
; 460  : 				}
; 461  : 			}
; 462  : 			
; 463  : 			while(true) //Max 25
; 464  : 			{
; 465  : 				iRandB += this->m_iDropRatePerItemCount[iBagNumberCount];

  0023d	8b be 64 02 00
	00		 mov	 edi, DWORD PTR [esi+612]
  00243	8d 8e 64 02 00
	00		 lea	 ecx, DWORD PTR [esi+612]

; 466  : 	
; 467  : 				if (iBagNumber <= iBagNumberCount)

  00249	85 db		 test	 ebx, ebx
  0024b	7e 15		 jle	 SHORT $LN61@TryGamble
  0024d	8b c7		 mov	 eax, edi
  0024f	89 5d 18	 mov	 DWORD PTR tv430[ebp], ebx
$LL19@TryGamble:

; 468  : 				{
; 469  : 					break;
; 470  : 				}
; 471  : 
; 472  : 				iRandA += this->m_iDropRatePerItemCount[iBagNumberCount];

  00252	01 45 e8	 add	 DWORD PTR _iRandA$209961[ebp], eax
  00255	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 473  : 				iBagNumberCount++;

  00258	83 c1 04	 add	 ecx, 4
  0025b	03 f8		 add	 edi, eax
  0025d	ff 4d 18	 dec	 DWORD PTR tv430[ebp]
  00260	75 f0		 jne	 SHORT $LL19@TryGamble
$LN61@TryGamble:

; 474  : 			}
; 475  : 
; 476  : 			n = (GetLargeRand() % (iRandB - iRandA)) + iRandA;

  00262	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00267	8b 4d e8	 mov	 ecx, DWORD PTR _iRandA$209961[ebp]
  0026a	2b f9		 sub	 edi, ecx
  0026c	33 d2		 xor	 edx, edx
  0026e	f7 f7		 div	 edi
  00270	8d 3c 11	 lea	 edi, DWORD PTR [ecx+edx]

; 477  : 		
; 478  : 			Dur = 0;
; 479  : 			MapPosX = 0;
; 480  : 			MapPosY = 0;
; 481  : 
; 482  : 			Level = this->GetLevel(n);

  00273	57		 push	 edi
  00274	8b ce		 mov	 ecx, esi
  00276	e8 00 00 00 00	 call	 ?GetLevel@CGambleSystem@@QAEEH@Z ; CGambleSystem::GetLevel

; 483  : 
; 484  : 			ItemType = ItemGetNumberMake(this->BagObject[n].m_type,this->BagObject[n].m_index);

  0027b	0f b6 8c fe cc
	02 00 00	 movzx	 ecx, BYTE PTR [esi+edi*8+716]
  00283	0f b6 d0	 movzx	 edx, al
  00286	0f b6 84 fe cd
	02 00 00	 movzx	 eax, BYTE PTR [esi+edi*8+717]
  0028e	50		 push	 eax
  0028f	51		 push	 ecx
  00290	89 55 e8	 mov	 DWORD PTR _Level$[ebp], edx
  00293	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00298	83 c4 08	 add	 esp, 8
  0029b	89 45 f8	 mov	 DWORD PTR _ItemType$[ebp], eax

; 485  : 
; 486  : 			if (ItemType == -1)

  0029e	83 f8 ff	 cmp	 eax, -1
  002a1	75 0b		 jne	 SHORT $LN16@TryGamble

; 487  : 			{
; 488  : 				return 0;

  002a3	5f		 pop	 edi
  002a4	5b		 pop	 ebx
  002a5	32 c0		 xor	 al, al
  002a7	5e		 pop	 esi

; 549  : }

  002a8	8b e5		 mov	 esp, ebp
  002aa	5d		 pop	 ebp
  002ab	c2 14 00	 ret	 20			; 00000014H
$LN16@TryGamble:

; 489  : 			}
; 490  : 
; 491  : 			if( this->BagObject[n].m_isskill != 0)

  002ae	80 bc fe d0 02
	00 00 00	 cmp	 BYTE PTR [esi+edi*8+720], 0
  002b6	74 1e		 je	 SHORT $LN65@TryGamble

; 492  : 			{
; 493  : 				if (this->m_GamblingInfo[iBagNumber].m_iSkillRate >= GetLargeRand()%1000000)

  002b8	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  002bd	33 d2		 xor	 edx, edx
  002bf	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  002c4	f7 f1		 div	 ecx
  002c6	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  002c9	39 54 86 08	 cmp	 DWORD PTR [esi+eax*4+8], edx
  002cd	72 07		 jb	 SHORT $LN65@TryGamble

; 494  : 				{
; 495  : 					Op1 = 1;

  002cf	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _Op1$[ebp], 1
$LN65@TryGamble:

; 496  : 				}
; 497  : 			}
; 498  : 
; 499  : 			if(this->BagObject[n].m_isluck != 0)

  002d6	80 bc fe d1 02
	00 00 00	 cmp	 BYTE PTR [esi+edi*8+721], 0
  002de	74 1e		 je	 SHORT $LN12@TryGamble

; 500  : 			{
; 501  : 				if (this->m_GamblingInfo[iBagNumber].m_iLuckRate >= GetLargeRand()%1000000)

  002e0	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  002e5	33 d2		 xor	 edx, edx
  002e7	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  002ec	f7 f1		 div	 ecx
  002ee	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  002f1	39 54 86 0c	 cmp	 DWORD PTR [esi+eax*4+12], edx
  002f5	72 07		 jb	 SHORT $LN12@TryGamble

; 502  : 				{
; 503  : 					Op2 = 1;

  002f7	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _Op2$[ebp], 1
$LN12@TryGamble:

; 504  : 				}
; 505  : 			}
; 506  : 
; 507  : 			if(this->BagObject[n].m_isoption != 0)

  002fe	80 bc fe d2 02
	00 00 00	 cmp	 BYTE PTR [esi+edi*8+722], 0
  00306	0f 84 8d 00 00
	00		 je	 $LN3@TryGamble

; 508  : 			{
; 509  : 				if (this->m_GamblingInfo[iBagNumber].m_iOptionRate >= GetLargeRand()%1000000)

  0030c	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00311	33 d2		 xor	 edx, edx
  00313	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00318	f7 f1		 div	 ecx
  0031a	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  0031d	39 54 86 10	 cmp	 DWORD PTR [esi+eax*4+16], edx
  00321	72 76		 jb	 SHORT $LN3@TryGamble

; 510  : 				{
; 511  : 					int iOpt3Rand = GetLargeRand() % 1000000;

  00323	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00328	33 d2		 xor	 edx, edx
  0032a	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0032f	f7 f1		 div	 ecx

; 512  : 
; 513  : 					if ( iOpt3Rand <= this->m_iBagItemOptionRate[0])

  00331	8b 86 fc 01 00
	00		 mov	 eax, DWORD PTR [esi+508]
  00337	3b d0		 cmp	 edx, eax
  00339	7f 09		 jg	 SHORT $LN9@TryGamble

; 514  : 					{
; 515  : 						Op3 = 1;

  0033b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 1
  00342	eb 55		 jmp	 SHORT $LN3@TryGamble
$LN9@TryGamble:

; 516  : 					}
; 517  : 					else if ( iOpt3Rand <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1])

  00344	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  0034a	03 c8		 add	 ecx, eax
  0034c	3b d1		 cmp	 edx, ecx
  0034e	7f 09		 jg	 SHORT $LN7@TryGamble

; 518  : 					{
; 519  : 						Op3 = 2;

  00350	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 2
  00357	eb 40		 jmp	 SHORT $LN3@TryGamble
$LN7@TryGamble:

; 520  : 					}
; 521  : 					else if ( iOpt3Rand <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2])

  00359	8b 86 04 02 00
	00		 mov	 eax, DWORD PTR [esi+516]
  0035f	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  00365	03 c1		 add	 eax, ecx
  00367	03 86 fc 01 00
	00		 add	 eax, DWORD PTR [esi+508]
  0036d	3b d0		 cmp	 edx, eax
  0036f	7f 09		 jg	 SHORT $LN5@TryGamble

; 522  : 					{
; 523  : 						Op3 = 3;

  00371	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 3
  00378	eb 1f		 jmp	 SHORT $LN3@TryGamble
$LN5@TryGamble:

; 524  : 					}
; 525  : 					else if ( iOpt3Rand <= this->m_iBagItemOptionRate[0] + this->m_iBagItemOptionRate[1] + this->m_iBagItemOptionRate[2] + this->m_iBagItemOptionRate[3])

  0037a	8b 86 08 02 00
	00		 mov	 eax, DWORD PTR [esi+520]
  00380	03 86 04 02 00
	00		 add	 eax, DWORD PTR [esi+516]
  00386	03 c1		 add	 eax, ecx
  00388	03 86 fc 01 00
	00		 add	 eax, DWORD PTR [esi+508]
  0038e	3b d0		 cmp	 edx, eax
  00390	7f 07		 jg	 SHORT $LN3@TryGamble

; 526  : 					{
; 527  : 						Op3 = 4;

  00392	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _Op3$[ebp], 4
$LN3@TryGamble:

; 528  : 					}
; 529  : 				}
; 530  : 			}
; 531  : 			
; 532  : 			if(this->BagObject[n].m_isexitem != 0)

  00399	80 bc fe d3 02
	00 00 00	 cmp	 BYTE PTR [esi+edi*8+723], 0
  003a1	74 33		 je	 SHORT $LN67@TryGamble

; 533  : 			{
; 534  : 				if (this->m_GamblingInfo[iBagNumber].m_iExcRate >= GetLargeRand()%1000000)

  003a3	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  003a8	33 d2		 xor	 edx, edx
  003aa	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  003af	f7 f1		 div	 ecx
  003b1	8d 44 9b 05	 lea	 eax, DWORD PTR [ebx+ebx*4+5]
  003b5	39 14 86	 cmp	 DWORD PTR [esi+eax*4], edx
  003b8	72 1c		 jb	 SHORT $LN67@TryGamble

; 535  : 				{
; 536  : 					NewOp = this->SortExcOption();

  003ba	8b ce		 mov	 ecx, esi
  003bc	e8 00 00 00 00	 call	 ?SortExcOption@CGambleSystem@@QAEEXZ ; CGambleSystem::SortExcOption
  003c1	0f b6 c8	 movzx	 ecx, al

; 537  : 					
; 538  : 					Op2 = 0;

  003c4	33 c0		 xor	 eax, eax
  003c6	89 4d f4	 mov	 DWORD PTR _NewOp$[ebp], ecx
  003c9	89 45 f0	 mov	 DWORD PTR _Op2$[ebp], eax

; 539  : 					Op1 = 1;

  003cc	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _Op1$[ebp], 1

; 540  : 					Level = 0;	

  003d3	89 45 e8	 mov	 DWORD PTR _Level$[ebp], eax
$LN67@TryGamble:
  003d6	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
$LN1@TryGamble:

; 541  : 				}
; 542  : 			}
; 543  : 		}
; 544  : 
; 545  : 		ItemSerialCreateSend(lpObj->m_Index,(BYTE)MapNumber,(BYTE)MapPosX,(BYTE)MapPosY,ItemType,(BYTE)Level,(BYTE)Dur,(BYTE)Op1,(BYTE)Op2,(BYTE)Op3,lpObj->m_Index,(BYTE)NewOp,0);

  003d9	8b 03		 mov	 eax, DWORD PTR [ebx]
  003db	8b 7d f4	 mov	 edi, DWORD PTR _NewOp$[ebp]
  003de	8b 55 fc	 mov	 edx, DWORD PTR _Op3$[ebp]
  003e1	8b 4d f0	 mov	 ecx, DWORD PTR _Op2$[ebp]
  003e4	8b 75 f8	 mov	 esi, DWORD PTR _ItemType$[ebp]
  003e7	6a 00		 push	 0
  003e9	57		 push	 edi
  003ea	50		 push	 eax
  003eb	52		 push	 edx
  003ec	8b 55 ec	 mov	 edx, DWORD PTR _Op1$[ebp]
  003ef	51		 push	 ecx
  003f0	8b 4d e8	 mov	 ecx, DWORD PTR _Level$[ebp]
  003f3	52		 push	 edx
  003f4	8b 55 0c	 mov	 edx, DWORD PTR _MapNumber$[ebp]
  003f7	6a 00		 push	 0
  003f9	51		 push	 ecx
  003fa	56		 push	 esi
  003fb	6a 00		 push	 0
  003fd	6a 00		 push	 0
  003ff	52		 push	 edx
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 546  : 		LogAddTD("[ GAMBLING ][ TryGambling ] %s(%s) Try Item : [%s]%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",lpObj->AccountID,lpObj->Name,ItemAttribute[ItemType].Name,ItemType,Level,Op1,Op2, Op3,NewOp);

  00406	8b 45 fc	 mov	 eax, DWORD PTR _Op3$[ebp]
  00409	8b 4d f0	 mov	 ecx, DWORD PTR _Op2$[ebp]
  0040c	8b 55 ec	 mov	 edx, DWORD PTR _Op1$[ebp]
  0040f	57		 push	 edi
  00410	50		 push	 eax
  00411	8b 45 e8	 mov	 eax, DWORD PTR _Level$[ebp]
  00414	51		 push	 ecx
  00415	52		 push	 edx
  00416	50		 push	 eax
  00417	56		 push	 esi
  00418	6b f6 70	 imul	 esi, 112		; 00000070H
  0041b	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00421	56		 push	 esi
  00422	8d 4b 77	 lea	 ecx, DWORD PTR [ebx+119]
  00425	51		 push	 ecx
  00426	83 c3 6c	 add	 ebx, 108		; 0000006cH
  00429	53		 push	 ebx
  0042a	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@
  0042f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00435	83 c4 5c	 add	 esp, 92			; 0000005cH
$LN54@TryGamble:

; 547  : 	}
; 548  : 	return 1;

  00438	5f		 pop	 edi
  00439	5b		 pop	 ebx
  0043a	b0 01		 mov	 al, 1
  0043c	5e		 pop	 esi

; 549  : }

  0043d	8b e5		 mov	 esp, ebp
  0043f	5d		 pop	 ebp
  00440	c2 14 00	 ret	 20			; 00000014H
  00443	90		 npad	 1
$LN72@TryGamble:
  00444	00 00 00 00	 DD	 $LN36@TryGamble
  00448	00 00 00 00	 DD	 $LN35@TryGamble
  0044c	00 00 00 00	 DD	 $LN34@TryGamble
  00450	00 00 00 00	 DD	 $LN33@TryGamble
  00454	00 00 00 00	 DD	 $LN32@TryGamble
$LN73@TryGamble:
  00458	00 00 00 00	 DD	 $LN29@TryGamble
  0045c	00 00 00 00	 DD	 $LN27@TryGamble
  00460	00 00 00 00	 DD	 $LN26@TryGamble
  00464	00 00 00 00	 DD	 $LN25@TryGamble
  00468	00 00 00 00	 DD	 $LN24@TryGamble
?TryGamble@CGambleSystem@@QAEEHEHHE@Z ENDP		; CGambleSystem::TryGamble
_TEXT	ENDS
END
