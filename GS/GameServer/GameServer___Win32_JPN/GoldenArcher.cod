; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\GoldenArcher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GoldenArcher@@3VcGoldenArcher@@A		; GoldenArcher
_BSS	SEGMENT
?GoldenArcher@@3VcGoldenArcher@@A DB 0710H DUP (?)	; GoldenArcher
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Start@cGoldenArcher@@QAEXXZ			; cGoldenArcher::Start
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\goldenarcher.cpp
;	COMDAT ?Start@cGoldenArcher@@QAEXXZ
_TEXT	SEGMENT
?Start@cGoldenArcher@@QAEXXZ PROC			; cGoldenArcher::Start, COMDAT
; _this$ = ecx

; 13   : 	for (int i=0; i < 100; i++)

  00000	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]
  00003	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00008	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@Start:

; 14   : 	{
; 15   : 		Items[i].Index		= 0;

  00010	33 d2		 xor	 edx, edx
  00012	66 89 50 fe	 mov	 WORD PTR [eax-2], dx

; 16   : 		Items[i].ItemID		= 0;

  00016	66 89 10	 mov	 WORD PTR [eax], dx

; 17   : 		Items[i].Level		= 0;

  00019	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 18   : 		Items[i].Skill		= 0;

  0001d	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 19   : 		Items[i].Luck		= 0;

  00021	66 89 50 06	 mov	 WORD PTR [eax+6], dx

; 20   : 		Items[i].Options	= 0;

  00025	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 21   : 		Items[i].Exl		= 0;

  00029	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 22   : 		Items[i].Anc		= 0;

  0002d	66 89 50 0c	 mov	 WORD PTR [eax+12], dx
  00031	83 c0 12	 add	 eax, 18			; 00000012H
  00034	49		 dec	 ecx
  00035	75 d9		 jne	 SHORT $LL3@Start

; 23   : 	}
; 24   : }

  00037	c3		 ret	 0
?Start@cGoldenArcher@@QAEXXZ ENDP			; cGoldenArcher::Start
_TEXT	ENDS
PUBLIC	??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0EM@OEJKKKDI@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@ ; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@		; `string'
PUBLIC	??_C@_09JIJFGCOH@RenaCount?$AA@			; `string'
PUBLIC	??_C@_0CH@OFBHDNDL@?4?4?2Data?2ZtData?2Events?2GoldenArch@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cGoldenArcher@@QAEXXZ			; cGoldenArcher::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%'
	DB	'd %d %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@OEJKKKDI@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@
CONST	SEGMENT
??_C@_0EM@OEJKKKDI@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@ DB '[Golde'
	DB	'nArcher] Info file Load Fail [..\Data\ZtData\Events\GoldenArc'
	DB	'her.ini]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@
CONST	SEGMENT
??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@ DB 'GoldenArcher', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JIJFGCOH@RenaCount?$AA@
CONST	SEGMENT
??_C@_09JIJFGCOH@RenaCount?$AA@ DB 'RenaCount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OFBHDNDL@?4?4?2Data?2ZtData?2Events?2GoldenArch@
CONST	SEGMENT
??_C@_0CH@OFBHDNDL@?4?4?2Data?2ZtData?2Events?2GoldenArch@ DB '..\Data\Zt'
	DB	'Data\Events\GoldenArcher.ini', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@cGoldenArcher@@QAEXXZ
_TEXT	SEGMENT
_Flag$ = -300						; size = 4
_n$202936 = -296					; size = 36
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Load@cGoldenArcher@@QAEXXZ PROC			; cGoldenArcher::Load, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 28   : 	this->Ex_RenaCount = GetPrivateProfileInt("GoldenArcher","RenaCount",1,"..\\Data\\ZtData\\Events\\GoldenArcher.ini");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OFBHDNDL@?4?4?2Data?2ZtData?2Events?2GoldenArch@
  0001b	bb 01 00 00 00	 mov	 ebx, 1
  00020	53		 push	 ebx
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_09JIJFGCOH@RenaCount?$AA@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OMGHBJKJ@GoldenArcher?$AA@
  0002b	8b f1		 mov	 esi, ecx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 29   : 	GoldenArcher.Start();

  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?GoldenArcher@@3VcGoldenArcher@@A ; GoldenArcher
  00038	89 06		 mov	 DWORD PTR [esi], eax
  0003a	e8 00 00 00 00	 call	 ?Start@cGoldenArcher@@QAEXXZ ; cGoldenArcher::Start

; 30   : 
; 31   : 	FILE *file;
; 32   : 	file = fopen("..\\Data\\ZtData\\Events\\GoldenArcher.ini","r");

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OFBHDNDL@?4?4?2Data?2ZtData?2Events?2GoldenArch@
  00049	e8 00 00 00 00	 call	 _fopen
  0004e	8b f8		 mov	 edi, eax

; 33   : 
; 34   : 	if (file == NULL)

  00050	33 c0		 xor	 eax, eax
  00052	83 c4 08	 add	 esp, 8
  00055	3b f8		 cmp	 edi, eax
  00057	75 19		 jne	 SHORT $LN5@Load

; 35   : 	{
; 36   : 		MessageBoxA(0,"[GoldenArcher] Info file Load Fail [..\\Data\\ZtData\\Events\\GoldenArcher.ini]","LOAD FILE ERROR",0);

  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OEJKKKDI@?$FLGoldenArcher?$FN?5Info?5file?5Load?5Fa@
  00064	50		 push	 eax
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 37   : 		ExitProcess(1);

  0006b	53		 push	 ebx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN11@Load:
$LN5@Load:

; 38   : 		return;
; 39   : 	}
; 40   : 
; 41   : 	char Buff[256];
; 42   : 	int Flag = 0;
; 43   : 	ArcherItemsCount = 0;
; 44   : 
; 45   : 	while (!feof(file))

  00072	57		 push	 edi
  00073	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], eax
  00079	89 86 0c 07 00
	00		 mov	 DWORD PTR [esi+1804], eax
  0007f	e8 00 00 00 00	 call	 _feof
  00084	83 c4 04	 add	 esp, 4
  00087	85 c0		 test	 eax, eax
  00089	0f 85 65 01 00
	00		 jne	 $LN3@Load
  0008f	90		 npad	 1
$LL4@Load:

; 46   : 	{
; 47   : 		fgets(Buff,256,file);

  00090	57		 push	 edi
  00091	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00097	68 00 01 00 00	 push	 256			; 00000100H
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _fgets

; 48   : 
; 49   : 		if(Zt_IsBadFileLine(Buff, Flag))

  000a2	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  000a8	51		 push	 ecx
  000a9	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  000b5	83 c4 14	 add	 esp, 20			; 00000014H
  000b8	84 c0		 test	 al, al
  000ba	0f 85 23 01 00
	00		 jne	 $LN1@Load

; 50   : 			continue;
; 51   : 
; 52   : 		if (Flag == 1)

  000c0	39 9d d4 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], ebx
  000c6	0f 85 17 01 00
	00		 jne	 $LN1@Load

; 53   : 		{
; 54   : 			int n[9];
; 55   : 
; 56   : 			sscanf(Buff,"%d %d %d %d %d %d %d %d %d", &n[0], &n[1], &n[2], &n[3], &n[4], &n[5], &n[6], &n[7], &n[8]);

  000cc	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _n$202936[ebp+32]
  000d2	50		 push	 eax
  000d3	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202936[ebp+28]
  000d9	51		 push	 ecx
  000da	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _n$202936[ebp+24]
  000e0	52		 push	 edx
  000e1	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$202936[ebp+20]
  000e7	50		 push	 eax
  000e8	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202936[ebp+16]
  000ee	51		 push	 ecx
  000ef	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$202936[ebp+12]
  000f5	52		 push	 edx
  000f6	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$202936[ebp+8]
  000fc	50		 push	 eax
  000fd	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$202936[ebp+4]
  00103	51		 push	 ecx
  00104	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR _n$202936[ebp]
  0010a	52		 push	 edx
  0010b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KIOGKLLB@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 _sscanf

; 57   : 
; 58   : 			Items[ArcherItemsCount].Index	= n[0];

  0011c	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  00122	0f b7 95 d8 fe
	ff ff		 movzx	 edx, WORD PTR _n$202936[ebp]
  00129	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0012c	66 89 54 4e 04	 mov	 WORD PTR [esi+ecx*2+4], dx

; 59   : 			Items[ArcherItemsCount].ItemID	= n[1];

  00131	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  00137	0f b7 8d dc fe
	ff ff		 movzx	 ecx, WORD PTR _n$202936[ebp+4]
  0013e	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00141	66 89 4c 46 06	 mov	 WORD PTR [esi+eax*2+6], cx

; 60   : 			Items[ArcherItemsCount].Level	= n[2];

  00146	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  0014c	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  0014f	0f b7 85 e0 fe
	ff ff		 movzx	 eax, WORD PTR _n$202936[ebp+8]
  00156	66 89 44 56 08	 mov	 WORD PTR [esi+edx*2+8], ax

; 61   : 			Items[ArcherItemsCount].Skill	= n[3];

  0015b	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  00161	0f b7 95 e4 fe
	ff ff		 movzx	 edx, WORD PTR _n$202936[ebp+12]
  00168	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0016b	66 89 54 4e 0a	 mov	 WORD PTR [esi+ecx*2+10], dx

; 62   : 			Items[ArcherItemsCount].Luck	= n[4];

  00170	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  00176	0f b7 8d e8 fe
	ff ff		 movzx	 ecx, WORD PTR _n$202936[ebp+16]
  0017d	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00180	66 89 4c 46 0c	 mov	 WORD PTR [esi+eax*2+12], cx

; 63   : 			Items[ArcherItemsCount].Options	= n[5];

  00185	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  0018b	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  0018e	0f b7 85 ec fe
	ff ff		 movzx	 eax, WORD PTR _n$202936[ebp+20]
  00195	66 89 44 56 0e	 mov	 WORD PTR [esi+edx*2+14], ax

; 64   : 			Items[ArcherItemsCount].Exl		= n[6];

  0019a	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  001a0	0f b7 95 f0 fe
	ff ff		 movzx	 edx, WORD PTR _n$202936[ebp+24]
  001a7	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  001aa	66 89 54 4e 10	 mov	 WORD PTR [esi+ecx*2+16], dx

; 65   : 			Items[ArcherItemsCount].Anc		= n[7];

  001af	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  001b5	0f b7 8d f4 fe
	ff ff		 movzx	 ecx, WORD PTR _n$202936[ebp+28]
  001bc	03 c3		 add	 eax, ebx
  001be	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  001c1	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx

; 66   : 			Items[ArcherItemsCount].Count	= n[8];

  001c5	8b 86 0c 07 00
	00		 mov	 eax, DWORD PTR [esi+1804]
  001cb	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  001ce	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _n$202936[ebp+32]
  001d5	83 c4 2c	 add	 esp, 44			; 0000002cH
  001d8	66 89 44 56 14	 mov	 WORD PTR [esi+edx*2+20], ax

; 67   : 
; 68   : 			ArcherItemsCount++;

  001dd	01 9e 0c 07 00
	00		 add	 DWORD PTR [esi+1804], ebx
$LN1@Load:

; 38   : 		return;
; 39   : 	}
; 40   : 
; 41   : 	char Buff[256];
; 42   : 	int Flag = 0;
; 43   : 	ArcherItemsCount = 0;
; 44   : 
; 45   : 	while (!feof(file))

  001e3	57		 push	 edi
  001e4	e8 00 00 00 00	 call	 _feof
  001e9	83 c4 04	 add	 esp, 4
  001ec	85 c0		 test	 eax, eax
  001ee	0f 84 9c fe ff
	ff		 je	 $LL4@Load
$LN3@Load:

; 69   : 		}
; 70   : 	}
; 71   : 
; 72   : 	fclose(file);

  001f4	57		 push	 edi
  001f5	e8 00 00 00 00	 call	 _fclose

; 73   : }

  001fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fd	83 c4 04	 add	 esp, 4
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	33 cd		 xor	 ecx, ebp
  00204	5b		 pop	 ebx
  00205	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
$LN10@Load:
?Load@cGoldenArcher@@QAEXXZ ENDP			; cGoldenArcher::Load
_TEXT	ENDS
PUBLIC	??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@ ; `string'
PUBLIC	?ClickArcher@cGoldenArcher@@QAEXH@Z		; cGoldenArcher::ClickArcher
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	_rand:PROC
EXTRN	?gObjDeleteItemsCount@@YAHHFFH@Z:PROC		; gObjDeleteItemsCount
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
EXTRN	?gObjGetItemCountInInventory@@YAHHHH@Z:PROC	; gObjGetItemCountInInventory
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@
CONST	SEGMENT
??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@ DB '[Archer] Ne'
	DB	'ed %d Rens', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ClickArcher@cGoldenArcher@@QAEXH@Z
_TEXT	SEGMENT
_i$202952 = -12						; size = 4
_Exe$ = -8						; size = 4
_Anc$ = -4						; size = 4
tv227 = 8						; size = 4
_Type$ = 8						; size = 4
_PlayerID$ = 8						; size = 4
?ClickArcher@cGoldenArcher@@QAEXH@Z PROC		; cGoldenArcher::ClickArcher, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 76   : 	LPOBJ lpObj = &gObj[PlayerID];

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _PlayerID$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fb		 mov	 edi, ebx
  0000e	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00014	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 77   : 
; 78   : 	if(gObjGetItemCountInInventory(PlayerID,0x01C15,0) < this->Ex_RenaCount)

  0001a	6a 00		 push	 0
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	68 15 1c 00 00	 push	 7189			; 00001c15H
  00025	53		 push	 ebx
  00026	89 45 08	 mov	 DWORD PTR tv227[ebp], eax
  00029	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR tv227[ebp]
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 79   : 	{
; 80   : 		MsgNormal(PlayerID,"[Archer] Need %d Rens",this->Ex_RenaCount);

  00034	51		 push	 ecx
  00035	3b c1		 cmp	 eax, ecx
  00037	7d 17		 jge	 SHORT $LN7@ClickArche
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MPAKDKHC@?$FLArcher?$FN?5Need?5?$CFd?5Rens?$AA@
  0003e	53		 push	 ebx
  0003f	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 99   : 	}
; 100  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN7@ClickArche:

; 81   : 		return;
; 82   : 	}
; 83   : 
; 84   : 	gObjDeleteItemsCount(PlayerID,0x01C15,0,this->Ex_RenaCount);

  00050	6a 00		 push	 0
  00052	68 15 1c 00 00	 push	 7189			; 00001c15H
  00057	53		 push	 ebx
  00058	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount
  0005d	83 c4 10	 add	 esp, 16			; 00000010H

; 85   : 
; 86   : 	int num = rand()%ArcherItemsCount;

  00060	e8 00 00 00 00	 call	 _rand
  00065	99		 cdq
  00066	f7 be 0c 07 00
	00		 idiv	 DWORD PTR [esi+1804]

; 87   : 	int Exe = 0;

  0006c	33 c0		 xor	 eax, eax
  0006e	89 45 f8	 mov	 DWORD PTR _Exe$[ebp], eax

; 88   : 	int Anc = 0;

  00071	89 45 fc	 mov	 DWORD PTR _Anc$[ebp], eax

; 89   : 	int Type = ITEMGET(Items[num].Index,Items[num].ItemID);

  00074	8d 0c d2	 lea	 ecx, DWORD PTR [edx+edx*8]
  00077	0f bf 44 4e 04	 movsx	 eax, WORD PTR [esi+ecx*2+4]
  0007c	0f bf 54 4e 06	 movsx	 edx, WORD PTR [esi+ecx*2+6]
  00081	8d 34 4e	 lea	 esi, DWORD PTR [esi+ecx*2]
  00084	c1 e0 09	 shl	 eax, 9
  00087	03 c2		 add	 eax, edx

; 90   : 	if ( Items[num].Exl > 0 )

  00089	66 83 7e 10 00	 cmp	 WORD PTR [esi+16], 0
  0008e	89 45 08	 mov	 DWORD PTR _Type$[ebp], eax
  00091	7e 13		 jle	 SHORT $LN6@ClickArche

; 91   : 		Exe = GenExcOpt(Items[num].Exl);

  00093	0f bf 46 10	 movsx	 eax, WORD PTR [esi+16]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  0009d	89 45 f8	 mov	 DWORD PTR _Exe$[ebp], eax
  000a0	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  000a3	83 c4 04	 add	 esp, 4
$LN6@ClickArche:

; 92   : 
; 93   : 	if ( Items[num].Anc == 5 || Items[num].Anc == 10 )

  000a6	0f b7 4e 12	 movzx	 ecx, WORD PTR [esi+18]
  000aa	66 83 f9 05	 cmp	 cx, 5
  000ae	74 06		 je	 SHORT $LN4@ClickArche
  000b0	66 83 f9 0a	 cmp	 cx, 10			; 0000000aH
  000b4	75 06		 jne	 SHORT $LN5@ClickArche
$LN4@ClickArche:

; 94   : 		Anc = Items[num].Anc;

  000b6	0f bf c9	 movsx	 ecx, cx
  000b9	89 4d fc	 mov	 DWORD PTR _Anc$[ebp], ecx
$LN5@ClickArche:

; 95   : 
; 96   : 	for(int i = 0; i < Items[num].Count; i++)

  000bc	33 d2		 xor	 edx, edx
  000be	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$202952[ebp], 0
  000c5	66 3b 56 14	 cmp	 dx, WORD PTR [esi+20]
  000c9	7d 58		 jge	 SHORT $LN1@ClickArche
  000cb	eb 06		 jmp	 SHORT $LN3@ClickArche
  000cd	8d 49 00	 npad	 3
$LL12@ClickArche:
  000d0	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
$LN3@ClickArche:

; 97   : 	{
; 98   : 		ItemSerialCreateSend(PlayerID,(BYTE)lpObj->MapNumber,(BYTE)lpObj->X,(BYTE)lpObj->Y,Type,(BYTE)Items[num].Level,0,(BYTE)Items[num].Skill,(BYTE)Items[num].Luck,(BYTE)Items[num].Options,PlayerID,(BYTE)Exe,(BYTE)Anc);

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _Anc$[ebp]
  000d6	8b 55 f8	 mov	 edx, DWORD PTR _Exe$[ebp]
  000d9	51		 push	 ecx
  000da	0f b6 4e 0e	 movzx	 ecx, BYTE PTR [esi+14]
  000de	52		 push	 edx
  000df	0f b6 56 0c	 movzx	 edx, BYTE PTR [esi+12]
  000e3	53		 push	 ebx
  000e4	51		 push	 ecx
  000e5	0f b6 4e 0a	 movzx	 ecx, BYTE PTR [esi+10]
  000e9	52		 push	 edx
  000ea	0f b6 56 08	 movzx	 edx, BYTE PTR [esi+8]
  000ee	51		 push	 ecx
  000ef	0f b6 8f 44 01
	00 00		 movzx	 ecx, BYTE PTR [edi+324]
  000f6	6a 00		 push	 0
  000f8	52		 push	 edx
  000f9	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  00100	50		 push	 eax
  00101	0f b6 87 46 01
	00 00		 movzx	 eax, BYTE PTR [edi+326]
  00108	50		 push	 eax
  00109	51		 push	 ecx
  0010a	52		 push	 edx
  0010b	53		 push	 ebx
  0010c	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00111	8b 45 f4	 mov	 eax, DWORD PTR _i$202952[ebp]
  00114	0f bf 4e 14	 movsx	 ecx, WORD PTR [esi+20]
  00118	40		 inc	 eax
  00119	83 c4 34	 add	 esp, 52			; 00000034H
  0011c	89 45 f4	 mov	 DWORD PTR _i$202952[ebp], eax
  0011f	3b c1		 cmp	 eax, ecx
  00121	7c ad		 jl	 SHORT $LL12@ClickArche
$LN1@ClickArche:
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 99   : 	}
; 100  : }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
?ClickArcher@cGoldenArcher@@QAEXH@Z ENDP		; cGoldenArcher::ClickArcher
_TEXT	ENDS
END
