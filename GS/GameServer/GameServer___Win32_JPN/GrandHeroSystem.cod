; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\GrandHeroSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 134  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	?NPCLoad@cGrandHero@@QAEXHH@Z			; cGrandHero::NPCLoad
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\grandherosystem.cpp
;	COMDAT ?NPCLoad@cGrandHero@@QAEXHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_MonsterClass$ = 12					; size = 4
?NPCLoad@cGrandHero@@QAEXHH@Z PROC			; cGrandHero::NPCLoad, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	if(!g_ZtLicense.user.GrandHero) return;

  00003	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  0000a	74 27		 je	 SHORT $LN1@NPCLoad

; 112  : 	if(!this->Enable)return;

  0000c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0000f	74 22		 je	 SHORT $LN1@NPCLoad

; 113  : 
; 114  :  	LPOBJ lpObj = &gObj[aIndex];
; 115  : 
; 116  : 	if(/*MonsterClass == 520 ||*/ MonsterClass == 586)

  00011	81 7d 0c 4a 02
	00 00		 cmp	 DWORD PTR _MonsterClass$[ebp], 586 ; 0000024aH
  00018	75 19		 jne	 SHORT $LN1@NPCLoad

; 117  : 	{
; 118  : 		lpObj->Type = OBJ_NPC;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00023	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00029	b9 03 00 00 00	 mov	 ecx, 3
  0002e	66 89 4c 10 68	 mov	 WORD PTR [eax+edx+104], cx
$LN1@NPCLoad:

; 119  : 	}
; 120  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?NPCLoad@cGrandHero@@QAEXHH@Z ENDP			; cGrandHero::NPCLoad
_TEXT	ENDS
PUBLIC	??_C@_0BB@IBKAIPHM@Need?5Grand?5Reset?$AA@	; `string'
PUBLIC	??_C@_0O@JHDAALMN@Need?5?$CFd?5Reset?$AA@	; `string'
PUBLIC	??_C@_0O@BLCJAAEN@Need?5?$CFd?5Level?$AA@	; `string'
PUBLIC	?NPCTeleport@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z ; cGrandHero::NPCTeleport
EXTRN	?ChatTargetSend@@YAXPAUOBJECTSTRUCT@@PADH@Z:PROC ; ChatTargetSend
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
;	COMDAT ??_C@_0BB@IBKAIPHM@Need?5Grand?5Reset?$AA@
CONST	SEGMENT
??_C@_0BB@IBKAIPHM@Need?5Grand?5Reset?$AA@ DB 'Need Grand Reset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JHDAALMN@Need?5?$CFd?5Reset?$AA@
CONST	SEGMENT
??_C@_0O@JHDAALMN@Need?5?$CFd?5Reset?$AA@ DB 'Need %d Reset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BLCJAAEN@Need?5?$CFd?5Level?$AA@
CONST	SEGMENT
??_C@_0O@BLCJAAEN@Need?5?$CFd?5Level?$AA@ DB 'Need %d Level', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?NPCTeleport@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?NPCTeleport@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z PROC	; cGrandHero::NPCTeleport, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 124  : 	if(!g_ZtLicense.user.GrandHero) return false;

  00003	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	0f 84 03 01 00
	00		 je	 $LN10@NPCTelepor

; 125  : 	if(!this->Enable) return false;

  00013	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00016	0f 84 fa 00 00
	00		 je	 $LN10@NPCTelepor

; 126  : 
; 127  : 	/*if(lpNpc->Class == 520)
; 128  : 	{
; 129  : 		if(lpObj->MapNumber == 79)
; 130  : 		{
; 131  : 			gObjTeleport(lpObj->m_Index,0,146,136);
; 132  : 		}
; 133  : 		else
; 134  : 		{
; 135  : 			gObjTeleport(lpObj->m_Index,79,116,127);
; 136  : 		}
; 137  : 		return true;
; 138  : 	}*/
; 139  : 	else if(lpNpc->Class == 586)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  0001f	b9 4a 02 00 00	 mov	 ecx, 586		; 0000024aH
  00024	66 39 88 b8 00
	00 00		 cmp	 WORD PTR [eax+184], cx
  0002b	0f 85 e5 00 00
	00		 jne	 $LN10@NPCTelepor

; 140  : 	{
; 141  : 		if(lpObj->GReset >= this->GRTp && lpObj->Reset >= this->ResetTP )

  00031	57		 push	 edi
  00032	8b 7d 0c	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00035	8b 97 94 22 00
	00		 mov	 edx, DWORD PTR [edi+8852]
  0003b	3b 56 04	 cmp	 edx, DWORD PTR [esi+4]
  0003e	0f 8c 95 00 00
	00		 jl	 $LN9@NPCTelepor
  00044	8b 8f 90 22 00
	00		 mov	 ecx, DWORD PTR [edi+8848]
  0004a	3b 4e 24	 cmp	 ecx, DWORD PTR [esi+36]
  0004d	0f 8c 86 00 00
	00		 jl	 $LN9@NPCTelepor

; 142  : 		{
; 143  : 			if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu) || g_ZtLicense.CheckUser(eZtUB::Local3) || g_ZtLicense.CheckUser(eZtUB::Local))

  00053	6a 1a		 push	 26			; 0000001aH
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0005f	84 c0		 test	 al, al
  00061	75 30		 jne	 SHORT $LN7@NPCTelepor
  00063	6a 11		 push	 17			; 00000011H
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0006a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0006f	84 c0		 test	 al, al
  00071	75 20		 jne	 SHORT $LN7@NPCTelepor
  00073	6a 1c		 push	 28			; 0000001cH
  00075	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0007a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0007f	84 c0		 test	 al, al
  00081	75 10		 jne	 SHORT $LN7@NPCTelepor
  00083	6a 00		 push	 0
  00085	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0008a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0008f	84 c0		 test	 al, al

; 152  : 				}
; 153  : 
; 154  : 			}
; 155  : 			else
; 156  : 			{
; 157  : 				gObjTeleport(lpObj->m_Index,this->TPMap,this->TPX,this->TPY);

  00091	74 27		 je	 SHORT $LN6@NPCTelepor
$LN7@NPCTelepor:

; 144  : 			{
; 145  : 				if (lpObj->Level < 300)

  00093	b8 2c 01 00 00	 mov	 eax, 300		; 0000012cH
  00098	66 39 87 be 00
	00 00		 cmp	 WORD PTR [edi+190], ax
  0009f	7d 19		 jge	 SHORT $LN6@NPCTelepor

; 146  : 				{
; 147  : 					MsgOutput(lpObj->m_Index,"Need %d Level",300);

  000a1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a3	50		 push	 eax
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BLCJAAEN@Need?5?$CFd?5Level?$AA@
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 165  : 			}
; 166  : 			else
; 167  : 			{
; 168  : 				ChatTargetSend(lpNpc, "Need Grand Reset", lpObj->m_Index);

  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b2	5f		 pop	 edi

; 169  : 			}
; 170  : 			
; 171  : 		}
; 172  : 
; 173  : 		return true;

  000b3	b0 01		 mov	 al, 1
  000b5	5e		 pop	 esi

; 176  : }

  000b6	5d		 pop	 ebp
  000b7	c2 08 00	 ret	 8
$LN6@NPCTelepor:

; 148  : 				}
; 149  : 				else
; 150  : 				{
; 151  : 					gObjTeleport(lpObj->m_Index,this->TPMap,this->TPX,this->TPY);

  000ba	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  000bd	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000c0	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  000c3	52		 push	 edx
  000c4	8b 17		 mov	 edx, DWORD PTR [edi]
  000c6	50		 push	 eax
  000c7	51		 push	 ecx
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  000ce	83 c4 10	 add	 esp, 16			; 00000010H
  000d1	5f		 pop	 edi

; 169  : 			}
; 170  : 			
; 171  : 		}
; 172  : 
; 173  : 		return true;

  000d2	b0 01		 mov	 al, 1
  000d4	5e		 pop	 esi

; 176  : }

  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
$LN9@NPCTelepor:

; 158  : 			}
; 159  : 		}
; 160  : 		else
; 161  : 		{
; 162  : 			if(this->ResetTP > lpObj->Reset)

  000d9	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  000dc	3b b7 90 22 00
	00		 cmp	 esi, DWORD PTR [edi+8848]
  000e2	7e 19		 jle	 SHORT $LN2@NPCTelepor

; 163  : 			{
; 164  : 				MsgOutput(lpObj->m_Index,"Need %d Reset",this->ResetTP);

  000e4	8b 07		 mov	 eax, DWORD PTR [edi]
  000e6	56		 push	 esi
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JHDAALMN@Need?5?$CFd?5Reset?$AA@
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 165  : 			}
; 166  : 			else
; 167  : 			{
; 168  : 				ChatTargetSend(lpNpc, "Need Grand Reset", lpObj->m_Index);

  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	5f		 pop	 edi

; 169  : 			}
; 170  : 			
; 171  : 		}
; 172  : 
; 173  : 		return true;

  000f6	b0 01		 mov	 al, 1
  000f8	5e		 pop	 esi

; 176  : }

  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN2@NPCTelepor:

; 165  : 			}
; 166  : 			else
; 167  : 			{
; 168  : 				ChatTargetSend(lpNpc, "Need Grand Reset", lpObj->m_Index);

  000fd	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000ff	51		 push	 ecx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IBKAIPHM@Need?5Grand?5Reset?$AA@
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?ChatTargetSend@@YAXPAUOBJECTSTRUCT@@PADH@Z ; ChatTargetSend
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	5f		 pop	 edi

; 169  : 			}
; 170  : 			
; 171  : 		}
; 172  : 
; 173  : 		return true;

  0010f	b0 01		 mov	 al, 1
  00111	5e		 pop	 esi

; 176  : }

  00112	5d		 pop	 ebp
  00113	c2 08 00	 ret	 8
$LN10@NPCTelepor:

; 174  : 	}
; 175  : 	return false;

  00116	32 c0		 xor	 al, al
  00118	5e		 pop	 esi

; 176  : }

  00119	5d		 pop	 ebp
  0011a	c2 08 00	 ret	 8
?NPCTeleport@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z ENDP	; cGrandHero::NPCTeleport
_TEXT	ENDS
PUBLIC	?ItemOption@cGrandHero@@QAEXH@Z			; cGrandHero::ItemOption
; Function compile flags: /Ogtp
;	COMDAT ?ItemOption@cGrandHero@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?ItemOption@cGrandHero@@QAEXH@Z PROC			; cGrandHero::ItemOption, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  : 	if(!g_ZtLicense.user.GrandHero) return;

  00003	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  0000a	0f 84 0c 02 00
	00		 je	 $LN2@ItemOption

; 181  : 	LPOBJ lpObj = &gObj[aIndex];

  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00014	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001a	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00020	57		 push	 edi

; 182  : 
; 183  : 	if( lpObj->pInventory[7].m_Type >= ITEMGET(7,84) && lpObj->pInventory[7].m_Type <= ITEMGET(7,90) )

  00021	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00027	0f b7 91 d2 05
	00 00		 movzx	 edx, WORD PTR [ecx+1490]
  0002e	bf 54 0e 00 00	 mov	 edi, 3668		; 00000e54H
  00033	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  00038	66 3b d7	 cmp	 dx, di
  0003b	7c 34		 jl	 SHORT $LN14@ItemOption
  0003d	bf 5a 0e 00 00	 mov	 edi, 3674		; 00000e5aH
  00042	66 3b d7	 cmp	 dx, di
  00045	7f 2a		 jg	 SHORT $LN14@ItemOption

; 184  : 	{
; 185  : 		lpObj->m_Defense += 30;

  00047	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 186  : 
; 187  : 		lpObj->m_AttackDamageMaxLeft +=  30;

  0004d	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 188  : 		lpObj->m_AttackDamageMinLeft +=  30;

  00053	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 189  : 		lpObj->m_AttackDamageMaxRight += 30;

  00059	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 190  : 		lpObj->m_AttackDamageMinRight += 30;

  0005f	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 191  : 		lpObj->m_MagicDamageMax += 30;

  00065	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 192  : 		lpObj->m_MagicDamageMin += 30;

  0006b	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax
$LN14@ItemOption:

; 193  : 	}
; 194  : 	if( lpObj->pInventory[8].m_Type >= ITEMGET(8,84) && lpObj->pInventory[8].m_Type <= ITEMGET(8,90) )

  00071	0f b7 91 a6 06
	00 00		 movzx	 edx, WORD PTR [ecx+1702]
  00078	bf 54 10 00 00	 mov	 edi, 4180		; 00001054H
  0007d	66 3b d7	 cmp	 dx, di
  00080	7c 34		 jl	 SHORT $LN13@ItemOption
  00082	bf 5a 10 00 00	 mov	 edi, 4186		; 0000105aH
  00087	66 3b d7	 cmp	 dx, di
  0008a	7f 2a		 jg	 SHORT $LN13@ItemOption

; 195  : 	{
; 196  : 		lpObj->m_Defense += 30;

  0008c	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 197  : 
; 198  : 		lpObj->m_AttackDamageMaxLeft +=  30;

  00092	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 199  : 		lpObj->m_AttackDamageMinLeft +=  30;

  00098	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 200  : 		lpObj->m_AttackDamageMaxRight += 30;

  0009e	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 201  : 		lpObj->m_AttackDamageMinRight += 30;

  000a4	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 202  : 		lpObj->m_MagicDamageMax += 30;

  000aa	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 203  : 		lpObj->m_MagicDamageMin += 30;

  000b0	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax
$LN13@ItemOption:

; 204  : 	}
; 205  : 	if( lpObj->pInventory[9].m_Type >= ITEMGET(9,84) && lpObj->pInventory[9].m_Type <= ITEMGET(9,90) )

  000b6	0f b7 91 7a 07
	00 00		 movzx	 edx, WORD PTR [ecx+1914]
  000bd	bf 54 12 00 00	 mov	 edi, 4692		; 00001254H
  000c2	66 3b d7	 cmp	 dx, di
  000c5	7c 34		 jl	 SHORT $LN12@ItemOption
  000c7	bf 5a 12 00 00	 mov	 edi, 4698		; 0000125aH
  000cc	66 3b d7	 cmp	 dx, di
  000cf	7f 2a		 jg	 SHORT $LN12@ItemOption

; 206  : 	{
; 207  : 		lpObj->m_Defense += 30;

  000d1	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 208  : 
; 209  : 		lpObj->m_AttackDamageMaxLeft +=  30;

  000d7	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 210  : 		lpObj->m_AttackDamageMinLeft +=  30;

  000dd	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 211  : 		lpObj->m_AttackDamageMaxRight += 30;

  000e3	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 212  : 		lpObj->m_AttackDamageMinRight += 30;

  000e9	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 213  : 		lpObj->m_MagicDamageMax += 30;

  000ef	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 214  : 		lpObj->m_MagicDamageMin += 30;

  000f5	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax
$LN12@ItemOption:

; 215  : 	}
; 216  : 	if( lpObj->pInventory[10].m_Type >= ITEMGET(10,84) && lpObj->pInventory[10].m_Type <= ITEMGET(10,90) )

  000fb	0f b7 91 4e 08
	00 00		 movzx	 edx, WORD PTR [ecx+2126]
  00102	bf 54 14 00 00	 mov	 edi, 5204		; 00001454H
  00107	66 3b d7	 cmp	 dx, di
  0010a	7c 34		 jl	 SHORT $LN11@ItemOption
  0010c	bf 5a 14 00 00	 mov	 edi, 5210		; 0000145aH
  00111	66 3b d7	 cmp	 dx, di
  00114	7f 2a		 jg	 SHORT $LN11@ItemOption

; 217  : 	{
; 218  : 		lpObj->m_Defense += 30;

  00116	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 219  : 
; 220  : 		lpObj->m_AttackDamageMaxLeft +=  30;

  0011c	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 221  : 		lpObj->m_AttackDamageMinLeft +=  30;

  00122	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 222  : 		lpObj->m_AttackDamageMaxRight += 30;

  00128	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 223  : 		lpObj->m_AttackDamageMinRight += 30;

  0012e	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 224  : 		lpObj->m_MagicDamageMax += 30;

  00134	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 225  : 		lpObj->m_MagicDamageMin += 30;

  0013a	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax
$LN11@ItemOption:

; 226  : 	}
; 227  : 	if( lpObj->pInventory[11].m_Type >= ITEMGET(11,84) && lpObj->pInventory[11].m_Type <= ITEMGET(11,90) )

  00140	0f b7 89 22 09
	00 00		 movzx	 ecx, WORD PTR [ecx+2338]
  00147	ba 54 16 00 00	 mov	 edx, 5716		; 00001654H
  0014c	66 3b ca	 cmp	 cx, dx
  0014f	7c 34		 jl	 SHORT $LN10@ItemOption
  00151	ba 5a 16 00 00	 mov	 edx, 5722		; 0000165aH
  00156	66 3b ca	 cmp	 cx, dx
  00159	7f 2a		 jg	 SHORT $LN10@ItemOption

; 228  : 	{
; 229  : 		lpObj->m_Defense += 30;

  0015b	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 230  : 
; 231  : 		lpObj->m_AttackDamageMaxLeft +=  30;

  00161	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 232  : 		lpObj->m_AttackDamageMinLeft +=  30;

  00167	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 233  : 		lpObj->m_AttackDamageMaxRight += 30;

  0016d	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 234  : 		lpObj->m_AttackDamageMinRight += 30;

  00173	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 235  : 		lpObj->m_MagicDamageMax += 30;

  00179	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 236  : 		lpObj->m_MagicDamageMin += 30;

  0017f	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax
$LN10@ItemOption:

; 237  : 	}
; 238  : 	if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu))

  00185	6a 1a		 push	 26			; 0000001aH
  00187	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0018c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00191	84 c0		 test	 al, al
  00193	75 0c		 jne	 SHORT $LN8@ItemOption
  00195	6a 11		 push	 17			; 00000011H
  00197	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0019c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
$LN8@ItemOption:

; 239  : 	{
; 240  : 		if( lpObj->pInventory[0].m_Type == ITEMGET(0,41) || 
; 241  : 			lpObj->pInventory[0].m_Type == ITEMGET(0,42) ||
; 242  : 			lpObj->pInventory[1].m_Type == ITEMGET(0,41) || 
; 243  : 			lpObj->pInventory[1].m_Type == ITEMGET(0,42) ||
; 244  : 			lpObj->pInventory[1].m_Type == ITEMGET(0,34) ||
; 245  : 			lpObj->pInventory[0].m_Type == ITEMGET(2,20) )

  001a1	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  001a7	0f b7 50 06	 movzx	 edx, WORD PTR [eax+6]
  001ab	8d 48 06	 lea	 ecx, DWORD PTR [eax+6]
  001ae	66 83 fa 29	 cmp	 dx, 41			; 00000029H
  001b2	74 29		 je	 SHORT $LN6@ItemOption
  001b4	66 83 fa 2a	 cmp	 dx, 42			; 0000002aH
  001b8	74 23		 je	 SHORT $LN6@ItemOption
  001ba	0f b7 80 da 00
	00 00		 movzx	 eax, WORD PTR [eax+218]
  001c1	66 83 f8 29	 cmp	 ax, 41			; 00000029H
  001c5	74 16		 je	 SHORT $LN6@ItemOption
  001c7	66 83 f8 2a	 cmp	 ax, 42			; 0000002aH
  001cb	74 10		 je	 SHORT $LN6@ItemOption
  001cd	66 83 f8 22	 cmp	 ax, 34			; 00000022H
  001d1	74 0a		 je	 SHORT $LN6@ItemOption
  001d3	b8 14 04 00 00	 mov	 eax, 1044		; 00000414H
  001d8	66 3b d0	 cmp	 dx, ax
  001db	75 0e		 jne	 SHORT $LN7@ItemOption
$LN6@ItemOption:

; 246  : 		{
; 247  : 			lpObj->SetOpDoubleDamage += 3;

  001dd	b0 03		 mov	 al, 3
  001df	00 86 3f 11 00
	00		 add	 BYTE PTR [esi+4415], al

; 248  : 			lpObj->SetOpIgnoreDefense += 3;

  001e5	00 86 3e 11 00
	00		 add	 BYTE PTR [esi+4414], al
$LN7@ItemOption:

; 249  : 		}
; 250  : 	}
; 251  : 	else
; 252  : 	{
; 253  : 		if( lpObj->pInventory[0].m_Type == ITEMGET(0,41) || 
; 254  : 			lpObj->pInventory[0].m_Type == ITEMGET(0,42) ||
; 255  : 			lpObj->pInventory[1].m_Type == ITEMGET(0,41) || 
; 256  : 			lpObj->pInventory[1].m_Type == ITEMGET(0,42) ||
; 257  : 			lpObj->pInventory[1].m_Type == ITEMGET(0,34) ||
; 258  : 			lpObj->pInventory[0].m_Type == ITEMGET(2,20) )
; 259  : 		{
; 260  : 			lpObj->SetOpDoubleDamage += 3;
; 261  : 			lpObj->SetOpIgnoreDefense += 3;
; 262  : 		}
; 263  : 	}
; 264  : 	if(	lpObj->pInventory[0].m_Type == ITEMGET(4,30) ||
; 265  : 		lpObj->pInventory[0].m_Type == ITEMGET(5,41) ||
; 266  : 		lpObj->pInventory[0].m_Type == ITEMGET(5,42) )

  001eb	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  001ee	b9 1e 08 00 00	 mov	 ecx, 2078		; 0000081eH
  001f3	66 3b c1	 cmp	 ax, cx
  001f6	74 14		 je	 SHORT $LN1@ItemOption
  001f8	ba 29 0a 00 00	 mov	 edx, 2601		; 00000a29H
  001fd	66 3b c2	 cmp	 ax, dx
  00200	74 0a		 je	 SHORT $LN1@ItemOption
  00202	b9 2a 0a 00 00	 mov	 ecx, 2602		; 00000a2aH
  00207	66 3b c1	 cmp	 ax, cx
  0020a	75 0e		 jne	 SHORT $LN18@ItemOption
$LN1@ItemOption:

; 267  : 	{
; 268  : 		lpObj->SetOpDoubleDamage += 6;

  0020c	b0 06		 mov	 al, 6
  0020e	00 86 3f 11 00
	00		 add	 BYTE PTR [esi+4415], al

; 269  : 		lpObj->SetOpIgnoreDefense += 6;

  00214	00 86 3e 11 00
	00		 add	 BYTE PTR [esi+4414], al
$LN18@ItemOption:
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi
$LN2@ItemOption:

; 270  : 	}
; 271  : }

  0021c	5d		 pop	 ebp
  0021d	c2 04 00	 ret	 4
?ItemOption@cGrandHero@@QAEXH@Z ENDP			; cGrandHero::ItemOption
_TEXT	ENDS
PUBLIC	?SockeetItem@cGrandHero@@QAE_NH@Z		; cGrandHero::SockeetItem
; Function compile flags: /Ogtp
;	COMDAT ?SockeetItem@cGrandHero@@QAE_NH@Z
_TEXT	SEGMENT
_ItemNumber$ = 8					; size = 4
?SockeetItem@cGrandHero@@QAE_NH@Z PROC			; cGrandHero::SockeetItem, COMDAT
; _this$ = ecx

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 275  : 	if(!g_ZtLicense.user.GrandHero) return false;

  00003	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  0000a	74 65		 je	 SHORT $LN6@SockeetIte

; 276  : 
; 277  : 	if(!this->m_SocketMixEnable)

  0000c	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0

; 278  : 	{
; 279  : 		return false;

  00010	74 5f		 je	 SHORT $LN6@SockeetIte

; 280  : 	}
; 281  : 
; 282  : 	switch(ItemNumber)

  00012	8b 45 08	 mov	 eax, DWORD PTR _ItemNumber$[ebp]
  00015	3d 1e 08 00 00	 cmp	 eax, 2078		; 0000081eH
  0001a	7f 5b		 jg	 SHORT $LN14@SockeetIte
  0001c	74 75		 je	 SHORT $LN7@SockeetIte
  0001e	83 f8 29	 cmp	 eax, 41			; 00000029H
  00021	7c 0c		 jl	 SHORT $LN15@SockeetIte
  00023	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00026	7e 6b		 jle	 SHORT $LN7@SockeetIte
  00028	3d 14 04 00 00	 cmp	 eax, 1044		; 00000414H
  0002d	74 64		 je	 SHORT $LN7@SockeetIte
$LN15@SockeetIte:

; 295  : 	}
; 296  : 
; 297  : 	if( ItemNumber >= ITEMGET(7,84) && ItemNumber <= ITEMGET(7,90) ||
; 298  : 		ItemNumber >= ITEMGET(8,84) && ItemNumber <= ITEMGET(8,90) ||
; 299  : 		ItemNumber >= ITEMGET(9,84) && ItemNumber <= ITEMGET(9,90) ||
; 300  : 		ItemNumber >= ITEMGET(10,84) && ItemNumber <= ITEMGET(10,90) ||
; 301  : 		ItemNumber >= ITEMGET(11,84) && ItemNumber <= ITEMGET(11,90) )

  0002f	3d 54 0e 00 00	 cmp	 eax, 3668		; 00000e54H
  00034	7c 07		 jl	 SHORT $LN4@SockeetIte
  00036	3d 5a 0e 00 00	 cmp	 eax, 3674		; 00000e5aH
  0003b	7e 56		 jle	 SHORT $LN7@SockeetIte
$LN4@SockeetIte:
  0003d	3d 54 10 00 00	 cmp	 eax, 4180		; 00001054H
  00042	7c 07		 jl	 SHORT $LN3@SockeetIte
  00044	3d 5a 10 00 00	 cmp	 eax, 4186		; 0000105aH
  00049	7e 48		 jle	 SHORT $LN7@SockeetIte
$LN3@SockeetIte:
  0004b	3d 54 12 00 00	 cmp	 eax, 4692		; 00001254H
  00050	7c 07		 jl	 SHORT $LN2@SockeetIte
  00052	3d 5a 12 00 00	 cmp	 eax, 4698		; 0000125aH
  00057	7e 3a		 jle	 SHORT $LN7@SockeetIte
$LN2@SockeetIte:
  00059	3d 54 14 00 00	 cmp	 eax, 5204		; 00001454H
  0005e	7c 07		 jl	 SHORT $LN1@SockeetIte
  00060	3d 5a 14 00 00	 cmp	 eax, 5210		; 0000145aH
  00065	7e 2c		 jle	 SHORT $LN7@SockeetIte
$LN1@SockeetIte:
  00067	05 ac e9 ff ff	 add	 eax, -5716		; ffffe9acH
  0006c	83 f8 06	 cmp	 eax, 6

; 302  : 	{
; 303  : 		return true;

  0006f	76 22		 jbe	 SHORT $LN7@SockeetIte
$LN6@SockeetIte:

; 304  : 	}
; 305  : 
; 306  : 	return false;

  00071	32 c0		 xor	 al, al

; 307  : }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN14@SockeetIte:

; 280  : 	}
; 281  : 
; 282  : 	switch(ItemNumber)

  00077	3d 21 0c 00 00	 cmp	 eax, 3105		; 00000c21H
  0007c	7f b1		 jg	 SHORT $LN15@SockeetIte
  0007e	3d 1e 0c 00 00	 cmp	 eax, 3102		; 00000c1eH
  00083	7d 0e		 jge	 SHORT $LN7@SockeetIte
  00085	3d 29 0a 00 00	 cmp	 eax, 2601		; 00000a29H
  0008a	7c a3		 jl	 SHORT $LN15@SockeetIte
  0008c	3d 2a 0a 00 00	 cmp	 eax, 2602		; 00000a2aH
  00091	7f 9c		 jg	 SHORT $LN15@SockeetIte
$LN7@SockeetIte:

; 283  : 	{
; 284  : 		case ITEMGET(0,41):
; 285  : 		case ITEMGET(0,42):
; 286  : 		case ITEMGET(2,20):
; 287  : 		case ITEMGET(4,30):
; 288  : 		case ITEMGET(5,41):
; 289  : 		case ITEMGET(5,42):
; 290  : 		case ITEMGET(6,30):
; 291  : 		case ITEMGET(6,31):
; 292  : 		case ITEMGET(6,32):
; 293  : 		case ITEMGET(6,33):
; 294  : 			return true;

  00093	b0 01		 mov	 al, 1

; 307  : }

  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?SockeetItem@cGrandHero@@QAE_NH@Z ENDP			; cGrandHero::SockeetItem
_TEXT	ENDS
PUBLIC	?BossDrop@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z	; cGrandHero::BossDrop
EXTRN	?MakeRewardSetItem@@YAXHEEHH@Z:PROC		; MakeRewardSetItem
EXTRN	_srand:PROC
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?BossDrop@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_Type$204914 = -16					; size = 4
tv303 = -12						; size = 4
_num$204911 = -12					; size = 4
_Exe$204912 = -8					; size = 4
_this$ = -4						; size = 4
_Anc$204913 = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?BossDrop@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z PROC	; cGrandHero::BossDrop, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 447  : 	if(!this->Enable)return false;

  0000a	33 db		 xor	 ebx, ebx
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	39 1e		 cmp	 DWORD PTR [esi], ebx
  00011	0f 84 8f 01 00
	00		 je	 $LN20@BossDrop

; 448  : 
; 449  : 	if(lpObj->Class == 593)

  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001b	b8 51 02 00 00	 mov	 eax, 593		; 00000251H
  00020	66 39 87 b8 00
	00 00		 cmp	 WORD PTR [edi+184], ax
  00027	0f 85 23 01 00
	00		 jne	 $LN11@BossDrop

; 450  : 	{
; 451  : 		//srand(time(NULL));
; 452  : 		int num = rand()%this->ItemCoint;

  0002d	e8 00 00 00 00	 call	 _rand
  00032	99		 cdq
  00033	f7 be 78 06 00
	00		 idiv	 DWORD PTR [esi+1656]

; 453  : 		int Exe = 0;

  00039	89 5d f8	 mov	 DWORD PTR _Exe$204912[ebp], ebx

; 454  : 		int Anc = 0;

  0003c	89 5d 08	 mov	 DWORD PTR _Anc$204913[ebp], ebx
  0003f	89 55 f4	 mov	 DWORD PTR _num$204911[ebp], edx

; 455  : 		int Type = ITEMGET(this->Items[num].Index,this->Items[num].ItemID);

  00042	c1 e2 04	 shl	 edx, 4
  00045	0f bf 44 16 38	 movsx	 eax, WORD PTR [esi+edx+56]
  0004a	0f bf 4c 16 3a	 movsx	 ecx, WORD PTR [esi+edx+58]
  0004f	03 f2		 add	 esi, edx
  00051	c1 e0 09	 shl	 eax, 9
  00054	03 c1		 add	 eax, ecx
  00056	89 45 f0	 mov	 DWORD PTR _Type$204914[ebp], eax

; 456  : 		if ( this->Items[num].Exl > 0 )

  00059	66 39 5e 44	 cmp	 WORD PTR [esi+68], bx
  0005d	7e 10		 jle	 SHORT $LN10@BossDrop

; 457  : 		{
; 458  : 			Exe = GenExcOpt(this->Items[num].Exl);

  0005f	0f bf 56 44	 movsx	 edx, WORD PTR [esi+68]
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  00069	83 c4 04	 add	 esp, 4
  0006c	89 45 f8	 mov	 DWORD PTR _Exe$204912[ebp], eax
$LN10@BossDrop:

; 459  : 		}
; 460  : 
; 461  : 		if ( this->Items[num].Anc == 5 || this->Items[num].Anc == 10 )

  0006f	0f b7 46 46	 movzx	 eax, WORD PTR [esi+70]
  00073	66 83 f8 05	 cmp	 ax, 5
  00077	74 06		 je	 SHORT $LN8@BossDrop
  00079	66 83 f8 0a	 cmp	 ax, 10			; 0000000aH
  0007d	75 04		 jne	 SHORT $LN9@BossDrop
$LN8@BossDrop:

; 462  : 		{
; 463  : 			Anc = this->Items[num].Anc;

  0007f	98		 cwde
  00080	89 45 08	 mov	 DWORD PTR _Anc$204913[ebp], eax
$LN9@BossDrop:

; 464  : 		}
; 465  : 
; 466  : 		for(int i=0;i<this->BossDropCount;i++)

  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	39 58 20	 cmp	 DWORD PTR [eax+32], ebx
  00089	7e 69		 jle	 SHORT $LN5@BossDrop
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR _num$204911[ebp]
  0008e	83 c1 04	 add	 ecx, 4
  00091	c1 e1 04	 shl	 ecx, 4
  00094	03 c8		 add	 ecx, eax
  00096	89 4d f4	 mov	 DWORD PTR tv303[ebp], ecx
  00099	8d a4 24 00 00
	00 00		 npad	 7
$LL19@BossDrop:

; 467  : 		{
; 468  : 			ItemSerialCreateSend(lpTargetObj->m_Index,(BYTE)lpObj->MapNumber,(BYTE)lpObj->X,(BYTE)lpObj->Y,Type,(BYTE)Items[num].Level,0,(BYTE)Items[num].Skill,(BYTE)Items[num].Luck,(BYTE)Items[num].Options,lpTargetObj->m_Index,(BYTE)Exe,(BYTE)Anc);

  000a0	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  000a3	8b 02		 mov	 eax, DWORD PTR [edx]
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _Anc$204913[ebp]
  000a8	8b 55 f8	 mov	 edx, DWORD PTR _Exe$204912[ebp]
  000ab	51		 push	 ecx
  000ac	0f b6 4e 42	 movzx	 ecx, BYTE PTR [esi+66]
  000b0	52		 push	 edx
  000b1	8b 55 f4	 mov	 edx, DWORD PTR tv303[ebp]
  000b4	50		 push	 eax
  000b5	51		 push	 ecx
  000b6	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000b9	0f b6 56 3e	 movzx	 edx, BYTE PTR [esi+62]
  000bd	51		 push	 ecx
  000be	0f b6 4e 3c	 movzx	 ecx, BYTE PTR [esi+60]
  000c2	52		 push	 edx
  000c3	8b 55 f0	 mov	 edx, DWORD PTR _Type$204914[ebp]
  000c6	6a 00		 push	 0
  000c8	51		 push	 ecx
  000c9	0f b6 8f 46 01
	00 00		 movzx	 ecx, BYTE PTR [edi+326]
  000d0	52		 push	 edx
  000d1	0f b6 97 44 01
	00 00		 movzx	 edx, BYTE PTR [edi+324]
  000d8	51		 push	 ecx
  000d9	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  000e0	52		 push	 edx
  000e1	51		 push	 ecx
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  000e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000eb	43		 inc	 ebx
  000ec	83 c4 34	 add	 esp, 52			; 00000034H
  000ef	3b 5a 20	 cmp	 ebx, DWORD PTR [edx+32]
  000f2	7c ac		 jl	 SHORT $LL19@BossDrop
$LN5@BossDrop:

; 469  : 		}
; 470  : 
; 471  : 		srand(time(NULL));

  000f4	6a 00		 push	 0
  000f6	e8 00 00 00 00	 call	 __time64
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _srand
  00101	83 c4 08	 add	 esp, 8

; 472  : 		if(this->BossAncDrop > rand()%10000)

  00104	e8 00 00 00 00	 call	 _rand
  00109	99		 cdq
  0010a	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0010f	f7 f9		 idiv	 ecx
  00111	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00114	39 50 18	 cmp	 DWORD PTR [eax+24], edx
  00117	0f 8e 88 00 00
	00		 jle	 $LN1@BossDrop

; 473  : 		{
; 474  : 			MakeRewardSetItem(lpTargetObj->m_Index, lpObj->X, lpObj->Y, 1, lpObj->MapNumber);

  0011d	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00124	0f b6 97 46 01
	00 00		 movzx	 edx, BYTE PTR [edi+326]
  0012b	0f b6 87 44 01
	00 00		 movzx	 eax, BYTE PTR [edi+324]
  00132	51		 push	 ecx
  00133	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00136	6a 01		 push	 1
  00138	52		 push	 edx
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	50		 push	 eax
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ?MakeRewardSetItem@@YAXHEEHH@Z ; MakeRewardSetItem
  00142	83 c4 14	 add	 esp, 20			; 00000014H
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi

; 488  : 		}
; 489  : #if(_MegaMu_)
; 490  : 		return true;
; 491  : #endif
; 492  : 	}
; 493  : 	return false;

  00147	32 c0		 xor	 al, al
  00149	5b		 pop	 ebx

; 494  : }

  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 08 00	 ret	 8
$LN11@BossDrop:

; 475  : 		}
; 476  : 
; 477  : #if(_MegaMu_)
; 478  : 		return true;
; 479  : #endif
; 480  : 	}
; 481  : 	else if(lpTargetObj->MapNumber == HERO_MAP)

  00150	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  00153	80 bb 49 01 00
	00 51		 cmp	 BYTE PTR [ebx+329], 81	; 00000051H
  0015a	75 49		 jne	 SHORT $LN1@BossDrop

; 482  : 	{
; 483  : 		//srand(time(NULL));
; 484  : 		if(this->ZtStoneDropRate > rand()%10000)

  0015c	e8 00 00 00 00	 call	 _rand
  00161	99		 cdq
  00162	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00167	f7 f9		 idiv	 ecx
  00169	39 56 14	 cmp	 DWORD PTR [esi+20], edx
  0016c	7e 37		 jle	 SHORT $LN1@BossDrop

; 485  : 		{
; 486  : 			
; 487  : 			ItemSerialCreateSend(lpTargetObj->m_Index,(BYTE)lpObj->MapNumber,(BYTE)lpObj->X,(BYTE)lpObj->Y,ITEMGET(14,195),0,0,0,0,0,lpTargetObj->m_Index,0,0);

  0016e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00170	0f b6 97 46 01
	00 00		 movzx	 edx, BYTE PTR [edi+326]
  00177	0f b6 8f 44 01
	00 00		 movzx	 ecx, BYTE PTR [edi+324]
  0017e	6a 00		 push	 0
  00180	6a 00		 push	 0
  00182	50		 push	 eax
  00183	6a 00		 push	 0
  00185	6a 00		 push	 0
  00187	6a 00		 push	 0
  00189	6a 00		 push	 0
  0018b	6a 00		 push	 0
  0018d	68 c3 1c 00 00	 push	 7363			; 00001cc3H
  00192	52		 push	 edx
  00193	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  0019a	51		 push	 ecx
  0019b	52		 push	 edx
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  001a2	83 c4 34	 add	 esp, 52			; 00000034H
$LN1@BossDrop:
  001a5	5f		 pop	 edi
$LN20@BossDrop:
  001a6	5e		 pop	 esi

; 488  : 		}
; 489  : #if(_MegaMu_)
; 490  : 		return true;
; 491  : #endif
; 492  : 	}
; 493  : 	return false;

  001a7	32 c0		 xor	 al, al
  001a9	5b		 pop	 ebx

; 494  : }

  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 08 00	 ret	 8
?BossDrop@cGrandHero@@QAE_NPAUOBJECTSTRUCT@@0@Z ENDP	; cGrandHero::BossDrop
_TEXT	ENDS
PUBLIC	??_C@_0CA@KEHEBAKI@Grand?5Item?5Need?5Grand?5Reset?3?5?$CFd?$AA@ ; `string'
PUBLIC	?MoveGRItem@cGrandHero@@QAE_NHHH@Z		; cGrandHero::MoveGRItem
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
;	COMDAT ??_C@_0CA@KEHEBAKI@Grand?5Item?5Need?5Grand?5Reset?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0CA@KEHEBAKI@Grand?5Item?5Need?5Grand?5Reset?3?5?$CFd?$AA@ DB 'Gran'
	DB	'd Item Need Grand Reset: %d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MoveGRItem@cGrandHero@@QAE_NHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_ItemNumber$ = 12					; size = 4
_target$ = 16						; size = 4
?MoveGRItem@cGrandHero@@QAE_NHHH@Z PROC			; cGrandHero::MoveGRItem, COMDAT
; _this$ = ecx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 	if(!this->Enable)return true;

  00003	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00006	74 47		 je	 SHORT $LN4@MoveGRItem

; 499  : 
; 500  : 	if(this->SockeetItem(ItemNumber) == true && target >= 0 && target <= 6)

  00008	8b 45 0c	 mov	 eax, DWORD PTR _ItemNumber$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ?SockeetItem@cGrandHero@@QAE_NH@Z ; cGrandHero::SockeetItem
  00011	3c 01		 cmp	 al, 1
  00013	75 3a		 jne	 SHORT $LN4@MoveGRItem
  00015	83 7d 10 06	 cmp	 DWORD PTR _target$[ebp], 6
  00019	77 34		 ja	 SHORT $LN4@MoveGRItem

; 501  : 	{
; 502  : 		LPOBJ lpObj = &gObj[aIndex];
; 503  : 		if(lpObj->GReset >= this->GRItem)

  0001b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00021	8b d1		 mov	 edx, ecx
  00023	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00029	56		 push	 esi
  0002a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	39 84 32 94 22
	00 00		 cmp	 DWORD PTR [edx+esi+8852], eax
  00037	5e		 pop	 esi

; 504  : 		{
; 505  : 			return true;

  00038	7d 15		 jge	 SHORT $LN4@MoveGRItem

; 506  : 		}
; 507  : 		else
; 508  : 		{
; 509  : 			MsgNormal(aIndex, "Grand Item Need Grand Reset: %d", this->GRItem);

  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHEBAKI@Grand?5Item?5Need?5Grand?5Reset?3?5?$CFd?$AA@
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 510  : 			return false;

  00049	32 c0		 xor	 al, al

; 516  : 	}
; 517  : }

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@MoveGRItem:

; 511  : 		}
; 512  : 	}
; 513  : 	else
; 514  : 	{
; 515  : 		return true;

  0004f	b0 01		 mov	 al, 1

; 516  : 	}
; 517  : }

  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
?MoveGRItem@cGrandHero@@QAE_NHHH@Z ENDP			; cGrandHero::MoveGRItem
_TEXT	ENDS
PUBLIC	?HeroMap@cGrandHero@@QAE_NH@Z			; cGrandHero::HeroMap
; Function compile flags: /Ogtp
;	COMDAT ?HeroMap@cGrandHero@@QAE_NH@Z
_TEXT	SEGMENT
_iMap$ = 8						; size = 4
?HeroMap@cGrandHero@@QAE_NH@Z PROC			; cGrandHero::HeroMap, COMDAT
; _this$ = ecx

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 569  : 	if(!g_ZtLicense.user.GrandHero) return false;

  00003	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  0000a	75 06		 jne	 SHORT $LN3@HeroMap
$LN6@HeroMap:
  0000c	32 c0		 xor	 al, al

; 573  : 	{
; 574  : 		return true;
; 575  : 	}
; 576  : 
; 577  : 	return false;
; 578  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN3@HeroMap:

; 570  : 	if(!this->Enable) return false;

  00012	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00015	74 f5		 je	 SHORT $LN6@HeroMap

; 571  : 
; 572  : 	if(iMap == TPMap)

  00017	8b 45 08	 mov	 eax, DWORD PTR _iMap$[ebp]
  0001a	3b 41 28	 cmp	 eax, DWORD PTR [ecx+40]
  0001d	0f 94 c0	 sete	 al

; 573  : 	{
; 574  : 		return true;
; 575  : 	}
; 576  : 
; 577  : 	return false;
; 578  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?HeroMap@cGrandHero@@QAE_NH@Z ENDP			; cGrandHero::HeroMap
_TEXT	ENDS
PUBLIC	??_C@_0BE@LPPOANDO@Need?5?$CFd?5Grand?5Reset?$AA@ ; `string'
PUBLIC	?CheckGRMap@cGrandHero@@QAEXH@Z			; cGrandHero::CheckGRMap
;	COMDAT ??_C@_0BE@LPPOANDO@Need?5?$CFd?5Grand?5Reset?$AA@
CONST	SEGMENT
??_C@_0BE@LPPOANDO@Need?5?$CFd?5Grand?5Reset?$AA@ DB 'Need %d Grand Reset'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckGRMap@cGrandHero@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?CheckGRMap@cGrandHero@@QAEXH@Z PROC			; cGrandHero::CheckGRMap, COMDAT
; _this$ = ecx

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 	if(!g_ZtLicense.user.GrandHero) return;

  00003	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  0000a	74 4b		 je	 SHORT $LN1@CheckGRMap

; 583  : 	LPOBJ lpObj = &gObj[aIndex];

  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00010	8b c6		 mov	 eax, esi
  00012	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00018	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 584  : 	if(lpObj->MapNumber == TPMap)

  0001e	0f b6 90 49 01
	00 00		 movzx	 edx, BYTE PTR [eax+329]
  00025	3b 51 28	 cmp	 edx, DWORD PTR [ecx+40]
  00028	75 2c		 jne	 SHORT $LN6@CheckGRMap

; 585  : 	{
; 586  : 		if(lpObj->GReset < this->GRTp)

  0002a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002d	39 88 94 22 00
	00		 cmp	 DWORD PTR [eax+8852], ecx
  00033	7d 21		 jge	 SHORT $LN6@CheckGRMap

; 587  : 		{
; 588  : 			MsgNormal(aIndex,"Need %d Grand Reset",this->GRTp);

  00035	51		 push	 ecx
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LPPOANDO@Need?5?$CFd?5Grand?5Reset?$AA@
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal

; 589  : 			gObjTeleport(aIndex,0,140,135);

  00041	68 87 00 00 00	 push	 135			; 00000087H
  00046	68 8c 00 00 00	 push	 140			; 0000008cH
  0004b	6a 00		 push	 0
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN6@CheckGRMap:
  00056	5e		 pop	 esi
$LN1@CheckGRMap:

; 590  : 		}
; 591  : 	}
; 592  : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?CheckGRMap@cGrandHero@@QAEXH@Z ENDP			; cGrandHero::CheckGRMap
_TEXT	ENDS
PUBLIC	?size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEAAUGRANDMIX_DATA@@I@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEAAUGRANDMIX_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEAAUGRANDMIX_DATA@@I@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEAAUGRANDMIX_DATA@@I@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBE_NPBUGRANDMIX_DATA@@@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBE_NPBUGRANDMIX_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBE_NPBUGRANDMIX_DATA@@@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBE_NPBUGRANDMIX_DATA@@@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXPAUGRANDMIX_DATA@@0@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXPAUGRANDMIX_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXPAUGRANDMIX_DATA@@0@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXPAUGRANDMIX_DATA@@0@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::~_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::~_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::~_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@XZ	; std::allocator<GRANDMIX_DATA>::allocator<GRANDMIX_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@XZ PROC	; std::allocator<GRANDMIX_DATA>::allocator<GRANDMIX_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@XZ ENDP	; std::allocator<GRANDMIX_DATA>::allocator<GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXXZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<GRANDMIX_DATA>::allocator<GRANDMIX_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<GRANDMIX_DATA>::allocator<GRANDMIX_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UGRANDMIX_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<GRANDMIX_DATA>::allocator<GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@I@Z ; std::allocator<GRANDMIX_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@I@Z PROC ; std::allocator<GRANDMIX_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@I@Z ENDP ; std::allocator<GRANDMIX_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UGRANDMIX_DATA@@@std@@QBEIXZ ; std::allocator<GRANDMIX_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UGRANDMIX_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UGRANDMIX_DATA@@@std@@QBEIXZ PROC	; std::allocator<GRANDMIX_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UGRANDMIX_DATA@@@std@@QBEIXZ ENDP	; std::allocator<GRANDMIX_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUGRANDMIX_DATA@@@std@@YAPBUGRANDMIX_DATA@@ABU1@@Z ; std::addressof<GRANDMIX_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUGRANDMIX_DATA@@@std@@YAPBUGRANDMIX_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUGRANDMIX_DATA@@@std@@YAPBUGRANDMIX_DATA@@ABU1@@Z PROC ; std::addressof<GRANDMIX_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUGRANDMIX_DATA@@@std@@YAPBUGRANDMIX_DATA@@ABU1@@Z ENDP ; std::addressof<GRANDMIX_DATA const >
_TEXT	ENDS
PUBLIC	??$forward@AAUGRANDMIX_DATA@@@std@@YAAAUGRANDMIX_DATA@@AAU1@@Z ; std::forward<GRANDMIX_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUGRANDMIX_DATA@@@std@@YAAAUGRANDMIX_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUGRANDMIX_DATA@@@std@@YAAAUGRANDMIX_DATA@@AAU1@@Z PROC ; std::forward<GRANDMIX_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUGRANDMIX_DATA@@@std@@YAAAUGRANDMIX_DATA@@AAU1@@Z ENDP ; std::forward<GRANDMIX_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUGRANDMIX_DATA@@@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@AAU2@@Z ; std::allocator<GRANDMIX_DATA>::construct<GRANDMIX_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUGRANDMIX_DATA@@@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUGRANDMIX_DATA@@@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@AAU2@@Z PROC ; std::allocator<GRANDMIX_DATA>::construct<GRANDMIX_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUGRANDMIX_DATA@@@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@AAU2@@Z ENDP ; std::allocator<GRANDMIX_DATA>::construct<GRANDMIX_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUGRANDMIX_DATA@@@std@@YAABUGRANDMIX_DATA@@ABU1@@Z ; std::forward<GRANDMIX_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUGRANDMIX_DATA@@@std@@YAABUGRANDMIX_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUGRANDMIX_DATA@@@std@@YAABUGRANDMIX_DATA@@ABU1@@Z PROC ; std::forward<GRANDMIX_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUGRANDMIX_DATA@@@std@@YAABUGRANDMIX_DATA@@ABU1@@Z ENDP ; std::forward<GRANDMIX_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UGRANDMIX_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGRANDMIX_DATA@@0@Z ; std::_Ptr_cat<GRANDMIX_DATA,GRANDMIX_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UGRANDMIX_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGRANDMIX_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UGRANDMIX_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGRANDMIX_DATA@@0@Z PROC ; std::_Ptr_cat<GRANDMIX_DATA,GRANDMIX_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UGRANDMIX_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGRANDMIX_DATA@@0@Z ENDP ; std::_Ptr_cat<GRANDMIX_DATA,GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UGRANDMIX_DATA@@ABU1@@std@@YAXPAUGRANDMIX_DATA@@ABU1@@Z ; std::_Construct<GRANDMIX_DATA,GRANDMIX_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UGRANDMIX_DATA@@ABU1@@std@@YAXPAUGRANDMIX_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UGRANDMIX_DATA@@ABU1@@std@@YAXPAUGRANDMIX_DATA@@ABU1@@Z PROC ; std::_Construct<GRANDMIX_DATA,GRANDMIX_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UGRANDMIX_DATA@@ABU1@@std@@YAXPAUGRANDMIX_DATA@@ABU1@@Z ENDP ; std::_Construct<GRANDMIX_DATA,GRANDMIX_DATA const &>
_TEXT	ENDS
PUBLIC	??$move@AAUGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z ; std::move<GRANDMIX_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z PROC ; std::move<GRANDMIX_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z ENDP ; std::move<GRANDMIX_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@PAU1@@Z ; std::_Val_type<GRANDMIX_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@PAU1@@Z PROC ; std::_Val_type<GRANDMIX_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@PAU1@@Z ENDP ; std::_Val_type<GRANDMIX_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UGRANDMIX_DATA@@@std@@YAXPAUGRANDMIX_DATA@@@Z ; std::_Destroy<GRANDMIX_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UGRANDMIX_DATA@@@std@@YAXPAUGRANDMIX_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UGRANDMIX_DATA@@@std@@YAXPAUGRANDMIX_DATA@@@Z PROC ; std::_Destroy<GRANDMIX_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UGRANDMIX_DATA@@@std@@YAXPAUGRANDMIX_DATA@@@Z ENDP ; std::_Destroy<GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z ; std::forward<GRANDMIX_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z PROC ; std::forward<GRANDMIX_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UGRANDMIX_DATA@@@std@@YA$$QAUGRANDMIX_DATA@@AAU1@@Z ENDP ; std::forward<GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?GetMixGrandData@cGrandHero@@QAEHXZ		; cGrandHero::GetMixGrandData
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\grandherosystem.cpp
;	COMDAT ?GetMixGrandData@cGrandHero@@QAEHXZ
_TEXT	SEGMENT
?GetMixGrandData@cGrandHero@@QAEHXZ PROC		; cGrandHero::GetMixGrandData, COMDAT
; _this$ = ecx

; 595  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 596  : 	int iSize = this->m_MixData.size();

  00004	8b b7 80 06 00
	00		 mov	 esi, DWORD PTR [edi+1664]
  0000a	2b b7 7c 06 00
	00		 sub	 esi, DWORD PTR [edi+1660]
  00010	c1 fe 03	 sar	 esi, 3

; 597  : 
; 598  : 	if(iSize == 0)

  00013	85 f6		 test	 esi, esi
  00015	75 06		 jne	 SHORT $LN1@GetMixGran

; 599  : 	{
; 600  : 		return -1;

  00017	5f		 pop	 edi
  00018	83 c8 ff	 or	 eax, -1
  0001b	5e		 pop	 esi

; 609  : }

  0001c	c3		 ret	 0
$LN1@GetMixGran:

; 601  : 	}
; 602  : 
; 603  : 	int iRand = rand()%iSize;

  0001d	e8 00 00 00 00	 call	 _rand
  00022	99		 cdq
  00023	f7 fe		 idiv	 esi

; 604  : 
; 605  : 	int ItemType = this->m_MixData[iRand].iType;

  00025	8b 87 7c 06 00
	00		 mov	 eax, DWORD PTR [edi+1660]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]

; 606  : 	int ItemIndex = this->m_MixData[iRand].iIndex;
; 607  : 
; 608  : 	return ITEMGET(ItemType, ItemIndex);

  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	c1 e0 09	 shl	 eax, 9
  00035	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 609  : }

  00038	c3		 ret	 0
?GetMixGrandData@cGrandHero@@QAEHXZ ENDP		; cGrandHero::GetMixGrandData
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@V?$allocator@UGRANDMIX_DATA@@@1@@Z ; std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@V?$allocator@UGRANDMIX_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@V?$allocator@UGRANDMIX_DATA@@@1@@Z PROC ; std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@V?$allocator@UGRANDMIX_DATA@@@1@@Z ENDP ; std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEII@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@AAU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@AAU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@AAU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@AAU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@IPAU1@@Z ; std::_Allocate<GRANDMIX_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T206166 = -12						; size = 12
$T206171 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@IPAU1@@Z PROC ; std::_Allocate<GRANDMIX_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T206171[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T206166[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T206171[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T206166[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T206166[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UGRANDMIX_DATA@@@std@@YAPAUGRANDMIX_DATA@@IPAU1@@Z ENDP ; std::_Allocate<GRANDMIX_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@ABU3@@Z ; std::allocator<GRANDMIX_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@ABU3@@Z PROC ; std::allocator<GRANDMIX_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@2:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@ABU3@@Z ENDP ; std::allocator<GRANDMIX_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<GRANDMIX_DATA *,GRANDMIX_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<GRANDMIX_DATA *,GRANDMIX_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN1@Move
  00010	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL3@Move
  00025	5e		 pop	 esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<GRANDMIX_DATA *,GRANDMIX_DATA *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@@Z ; std::allocator<GRANDMIX_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@@Z PROC ; std::allocator<GRANDMIX_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@@Z ENDP ; std::allocator<GRANDMIX_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@$$QAU3@@Z ; std::allocator<GRANDMIX_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@$$QAU3@@Z PROC ; std::allocator<GRANDMIX_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@3:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UGRANDMIX_DATA@@@std@@QAEXPAUGRANDMIX_DATA@@$$QAU3@@Z ENDP ; std::allocator<GRANDMIX_DATA>::construct
_TEXT	ENDS
PUBLIC	??_C@_0CH@OLGCEEAC@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@ ; `string'
PUBLIC	??_C@_0EL@NDAHJHIE@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MixGrandItem@cGrandHero@@QAEXPAUOBJECTSTRUCT@@@Z ; cGrandHero::MixGrandItem
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; GCUserChaosBoxSend
EXTRN	?ChaosBoxInit@CMixSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMixSystem::ChaosBoxInit
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObjInventoryCommit@@YAHH@Z:PROC		; gObjInventoryCommit
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?CheckItemCondition@CMixSystem@@QAEHPAVCItem@@FEEEEE@Z:PROC ; CMixSystem::CheckItemCondition
EXTRN	?g_MixSystem@@3VCMixSystem@@A:BYTE		; g_MixSystem
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CH@OLGCEEAC@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@
; File e:\work\tranet_version\gs\gameserver\grandherosystem.cpp
CONST	SEGMENT
??_C@_0CH@OLGCEEAC@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@ DB '[G'
	DB	'randHeroSystem][Mix Item] CBMix Fail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@NDAHJHIE@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@
CONST	SEGMENT
??_C@_0EL@NDAHJHIE@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@ DB '[G'
	DB	'randHeroSystem][Mix Item] CBMix Item Create Item:%d, Accaunt:'
	DB	'%s, Nick:%s', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MixGrandItem@cGrandHero@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_Creation$ = -72					; size = 4
_ExStone$ = -68						; size = 4
_AncItem$ = -64						; size = 4
_this$GSCopy$ = -60					; size = 4
_ExlRand$204898 = -60					; size = 4
_iLevel$204895 = -56					; size = 4
_Chaos$ = -56						; size = 4
_AncItem$204888 = -52					; size = 4
_Need30Soul$ = -52					; size = 4
_iSkill$204879 = -48					; size = 4
_Need30Bless$ = -48					; size = 4
_pMsg$ = -44						; size = 16
_ExcellentOpt$204897 = -28				; size = 24
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?MixGrandItem@cGrandHero@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; cGrandHero::MixGrandItem, COMDAT
; _this$ = ecx

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 311  : 	if(!g_ZtLicense.user.GrandHero) return;

  00010	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001b	89 4d c4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001e	0f 84 70 03 00
	00		 je	 $LN1@MixGrandIt

; 312  : 	int Item = 0;
; 313  : 
; 314  : 	PMSG_CHAOSMIXRESULT pMsg;
; 315  : 
; 316  : 	pMsg.h.c = 0xC1;
; 317  : 	pMsg.h.headcode = 0x86;
; 318  : 	pMsg.h.size = sizeof(PMSG_CHAOSMIXRESULT);
; 319  : 
; 320  : 	pMsg.Result = CB_ERROR;
; 321  : 
; 322  : 	int ExStone = 0;

  00024	53		 push	 ebx
  00025	57		 push	 edi
  00026	33 ff		 xor	 edi, edi
  00028	c6 45 d4 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  0002c	66 c7 45 d5 10
	86		 mov	 WORD PTR _pMsg$[ebp+1], 34320 ; 00008610H
  00032	c6 45 d7 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00036	89 7d bc	 mov	 DWORD PTR _ExStone$[ebp], edi

; 323  : 	int ExlItem = 0;

  00039	33 db		 xor	 ebx, ebx

; 324  : 	int AncItem = 0;

  0003b	89 7d c0	 mov	 DWORD PTR _AncItem$[ebp], edi

; 325  : 	int Creation = 0;

  0003e	89 7d b8	 mov	 DWORD PTR _Creation$[ebp], edi

; 326  : 	int Chaos = 0;

  00041	89 7d c8	 mov	 DWORD PTR _Chaos$[ebp], edi

; 327  : 	int Need30Bless = 0;

  00044	89 7d d0	 mov	 DWORD PTR _Need30Bless$[ebp], edi

; 328  : 	int Need30Soul = 0;

  00047	89 7d cc	 mov	 DWORD PTR _Need30Soul$[ebp], edi
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL33@MixGrandIt:

; 331  : 	{
; 332  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 78 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3704]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	0f 85 ad 00 00
	00		 jne	 $LN32@MixGrandIt

; 333  : 		{
; 334  : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,195) )

  00066	8b 86 78 0e 00
	00		 mov	 eax, DWORD PTR [esi+3704]
  0006c	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
  0006f	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00073	ba c3 1c 00 00	 mov	 edx, 7363		; 00001cc3H
  00078	66 3b c2	 cmp	 ax, dx
  0007b	75 08		 jne	 SHORT $LN29@MixGrandIt

; 335  : 			{
; 336  : 				ExStone++;

  0007d	ff 45 bc	 inc	 DWORD PTR _ExStone$[ebp]
  00080	e9 8e 00 00 00	 jmp	 $LN32@MixGrandIt
$LN29@MixGrandIt:

; 337  : 			}
; 338  : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(12,15))

  00085	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0008a	66 3b c2	 cmp	 ax, dx
  0008d	75 08		 jne	 SHORT $LN27@MixGrandIt

; 339  : 			{
; 340  : 				Chaos++;

  0008f	ff 45 c8	 inc	 DWORD PTR _Chaos$[ebp]
  00092	e9 7c 00 00 00	 jmp	 $LN32@MixGrandIt
$LN27@MixGrandIt:

; 341  : 			}
; 342  : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(14,22))

  00097	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  0009c	66 3b c2	 cmp	 ax, dx
  0009f	75 05		 jne	 SHORT $LN25@MixGrandIt

; 343  : 			{
; 344  : 				Creation++;

  000a1	ff 45 b8	 inc	 DWORD PTR _Creation$[ebp]
  000a4	eb 6d		 jmp	 SHORT $LN32@MixGrandIt
$LN25@MixGrandIt:

; 345  : 			}
; 346  : 			else if( g_MixSystem.CheckItemCondition(&lpObj->pChaosBox[n],9,0,0,1,1,0) != FALSE )

  000a6	6a 00		 push	 0
  000a8	6a 01		 push	 1
  000aa	6a 01		 push	 1
  000ac	6a 00		 push	 0
  000ae	6a 00		 push	 0
  000b0	6a 09		 push	 9
  000b2	51		 push	 ecx
  000b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MixSystem@@3VCMixSystem@@A ; g_MixSystem
  000b8	e8 00 00 00 00	 call	 ?CheckItemCondition@CMixSystem@@QAEHPAVCItem@@FEEEEE@Z ; CMixSystem::CheckItemCondition
  000bd	85 c0		 test	 eax, eax
  000bf	74 05		 je	 SHORT $LN23@MixGrandIt

; 347  : 			{
; 348  : 				AncItem++;

  000c1	ff 45 c0	 inc	 DWORD PTR _AncItem$[ebp]
  000c4	eb 4d		 jmp	 SHORT $LN32@MixGrandIt
$LN23@MixGrandIt:

; 349  : 			}
; 350  : 			else if( g_MixSystem.CheckItemCondition(&lpObj->pChaosBox[n],9,0,0,1,0,1) != FALSE )

  000c6	8b 86 78 0e 00
	00		 mov	 eax, DWORD PTR [esi+3704]
  000cc	6a 01		 push	 1
  000ce	6a 00		 push	 0
  000d0	6a 01		 push	 1
  000d2	6a 00		 push	 0
  000d4	6a 00		 push	 0
  000d6	6a 09		 push	 9
  000d8	03 c7		 add	 eax, edi
  000da	50		 push	 eax
  000db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MixSystem@@3VCMixSystem@@A ; g_MixSystem
  000e0	e8 00 00 00 00	 call	 ?CheckItemCondition@CMixSystem@@QAEHPAVCItem@@FEEEEE@Z ; CMixSystem::CheckItemCondition
  000e5	85 c0		 test	 eax, eax
  000e7	74 03		 je	 SHORT $LN21@MixGrandIt

; 351  : 			{
; 352  : 				ExlItem++;

  000e9	43		 inc	 ebx
  000ea	eb 27		 jmp	 SHORT $LN32@MixGrandIt
$LN21@MixGrandIt:

; 353  : 			}
; 354  : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,30))	

  000ec	8b 8e 78 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3704]
  000f2	0f b7 44 0f 06	 movzx	 eax, WORD PTR [edi+ecx+6]
  000f7	ba 1e 18 00 00	 mov	 edx, 6174		; 0000181eH
  000fc	66 3b c2	 cmp	 ax, dx
  000ff	75 05		 jne	 SHORT $LN19@MixGrandIt

; 355  : 			{
; 356  : 				Need30Bless++;

  00101	ff 45 d0	 inc	 DWORD PTR _Need30Bless$[ebp]
  00104	eb 0d		 jmp	 SHORT $LN32@MixGrandIt
$LN19@MixGrandIt:

; 357  : 			}
; 358  : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,31))	//30 S

  00106	b9 1f 18 00 00	 mov	 ecx, 6175		; 0000181fH
  0010b	66 3b c1	 cmp	 ax, cx
  0010e	75 03		 jne	 SHORT $LN32@MixGrandIt

; 359  : 			{
; 360  : 				Need30Soul++;

  00110	ff 45 cc	 inc	 DWORD PTR _Need30Soul$[ebp]
$LN32@MixGrandIt:

; 329  : 
; 330  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++ )

  00113	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00119	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0011f	0f 8c 2b ff ff
	ff		 jl	 $LL33@MixGrandIt

; 361  : 			}
; 362  : 		}
; 363  : 	}
; 364  : 
; 365  : 	if(ExStone != 10 || ExlItem == 0 || AncItem == 0 || Creation == 0 || Chaos == 0 || Need30Bless != 1 || Need30Soul != 1)

  00125	83 7d bc 0a	 cmp	 DWORD PTR _ExStone$[ebp], 10 ; 0000000aH
  00129	0f 85 4b 02 00
	00		 jne	 $LN15@MixGrandIt
  0012f	85 db		 test	 ebx, ebx
  00131	0f 84 43 02 00
	00		 je	 $LN15@MixGrandIt
  00137	83 7d c0 00	 cmp	 DWORD PTR _AncItem$[ebp], 0
  0013b	0f 84 39 02 00
	00		 je	 $LN15@MixGrandIt
  00141	83 7d b8 00	 cmp	 DWORD PTR _Creation$[ebp], 0
  00145	0f 84 2f 02 00
	00		 je	 $LN15@MixGrandIt
  0014b	83 7d c8 00	 cmp	 DWORD PTR _Chaos$[ebp], 0
  0014f	0f 84 25 02 00
	00		 je	 $LN15@MixGrandIt
  00155	b8 01 00 00 00	 mov	 eax, 1
  0015a	39 45 d0	 cmp	 DWORD PTR _Need30Bless$[ebp], eax
  0015d	0f 85 17 02 00
	00		 jne	 $LN15@MixGrandIt
  00163	39 45 cc	 cmp	 DWORD PTR _Need30Soul$[ebp], eax
  00166	0f 85 0e 02 00
	00		 jne	 $LN15@MixGrandIt

; 369  : 		return;
; 370  : 	}
; 371  : 
; 372  : 	if(this->MixMoney > lpObj->Money)

  0016c	8b 7d c4	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  0016f	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00172	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00178	3b c8		 cmp	 ecx, eax
  0017a	7e 09		 jle	 SHORT $LN14@MixGrandIt

; 373  : 	{
; 374  : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0017c	c6 45 d7 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 375  : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 376  : 		return;

  00180	e9 f9 01 00 00	 jmp	 $LN45@MixGrandIt
$LN14@MixGrandIt:

; 377  : 	}
; 378  : 
; 379  : 	lpObj->Money -= this->MixMoney;
; 380  : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00185	8b 16		 mov	 edx, DWORD PTR [esi]
  00187	2b c1		 sub	 eax, ecx
  00189	50		 push	 eax
  0018a	52		 push	 edx
  0018b	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  00191	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00196	83 c4 08	 add	 esp, 8

; 381  : 
; 382  : 	if(this->MixItemRate > (rand()%100))

  00199	e8 00 00 00 00	 call	 _rand
  0019e	99		 cdq
  0019f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a4	f7 f9		 idiv	 ecx
  001a6	39 57 0c	 cmp	 DWORD PTR [edi+12], edx
  001a9	0f 8e 86 01 00
	00		 jle	 $LN13@MixGrandIt

; 383  : 	{
; 384  : 		int ItemType = this->GetMixGrandData();

  001af	8b cf		 mov	 ecx, edi
  001b1	e8 00 00 00 00	 call	 ?GetMixGrandData@cGrandHero@@QAEHXZ ; cGrandHero::GetMixGrandData
  001b6	8b f8		 mov	 edi, eax

; 385  : 		int iSkill = 0;

  001b8	33 c9		 xor	 ecx, ecx
  001ba	89 4d d0	 mov	 DWORD PTR _iSkill$204879[ebp], ecx

; 386  : 
; 387  : 		switch(ItemType)

  001bd	81 ff 1e 08 00
	00		 cmp	 edi, 2078		; 0000081eH
  001c3	7f 16		 jg	 SHORT $LN37@MixGrandIt
  001c5	74 24		 je	 SHORT $LN10@MixGrandIt
  001c7	83 ff 29	 cmp	 edi, 41			; 00000029H
  001ca	7c 26		 jl	 SHORT $LN11@MixGrandIt
  001cc	83 ff 2a	 cmp	 edi, 42			; 0000002aH
  001cf	7e 1a		 jle	 SHORT $LN10@MixGrandIt
  001d1	81 ff 14 04 00
	00		 cmp	 edi, 1044		; 00000414H
  001d7	74 12		 je	 SHORT $LN10@MixGrandIt
  001d9	eb 17		 jmp	 SHORT $LN11@MixGrandIt
$LN37@MixGrandIt:
  001db	81 ff 1e 0c 00
	00		 cmp	 edi, 3102		; 00000c1eH
  001e1	7c 0f		 jl	 SHORT $LN11@MixGrandIt
  001e3	81 ff 21 0c 00
	00		 cmp	 edi, 3105		; 00000c21H
  001e9	7f 07		 jg	 SHORT $LN11@MixGrandIt
$LN10@MixGrandIt:

; 388  : 		{
; 389  : 			case ITEMGET(0,41):
; 390  : 			case ITEMGET(0,42):
; 391  : 			case ITEMGET(2,20):
; 392  : 			case ITEMGET(4,30):
; 393  : 			case ITEMGET(6,30):
; 394  : 			case ITEMGET(6,31):
; 395  : 			case ITEMGET(6,32):
; 396  : 			case ITEMGET(6,33):
; 397  : 				iSkill = 1; //break;

  001eb	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _iSkill$204879[ebp], 1
$LN11@MixGrandIt:

; 398  : 		}
; 399  : 
; 400  : 		if(ItemAttribute[ItemType].Width == 0 || ItemAttribute[ItemType].Height == 0)

  001f2	8b c7		 mov	 eax, edi
  001f4	6b c0 70	 imul	 eax, 112		; 00000070H
  001f7	38 88 23 00 00
	00		 cmp	 BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+35], cl
  001fd	0f 84 2d 01 00
	00		 je	 $LN8@MixGrandIt
  00203	38 88 24 00 00
	00		 cmp	 BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+36], cl
  00209	0f 84 21 01 00
	00		 je	 $LN8@MixGrandIt

; 405  : 		}
; 406  : 
; 407  : 		int AncItem = 0;

  0020f	89 4d cc	 mov	 DWORD PTR _AncItem$204888[ebp], ecx

; 408  : 
; 409  : 		if( ItemType >= ITEMGET(7,84) && ItemType <= ITEMGET(7,90) ||
; 410  : 			ItemType >= ITEMGET(8,84) && ItemType <= ITEMGET(8,90) ||
; 411  : 			ItemType >= ITEMGET(9,84) && ItemType <= ITEMGET(9,90) ||
; 412  : 			ItemType >= ITEMGET(10,84) && ItemType <= ITEMGET(10,90) ||
; 413  : 			ItemType >= ITEMGET(11,84) && ItemType <= ITEMGET(11,90) )

  00212	81 ff 54 0e 00
	00		 cmp	 edi, 3668		; 00000e54H
  00218	7c 08		 jl	 SHORT $LN5@MixGrandIt
  0021a	81 ff 5a 0e 00
	00		 cmp	 edi, 3674		; 00000e5aH
  00220	7e 3b		 jle	 SHORT $LN6@MixGrandIt
$LN5@MixGrandIt:
  00222	81 ff 54 10 00
	00		 cmp	 edi, 4180		; 00001054H
  00228	7c 08		 jl	 SHORT $LN4@MixGrandIt
  0022a	81 ff 5a 10 00
	00		 cmp	 edi, 4186		; 0000105aH
  00230	7e 2b		 jle	 SHORT $LN6@MixGrandIt
$LN4@MixGrandIt:
  00232	81 ff 54 12 00
	00		 cmp	 edi, 4692		; 00001254H
  00238	7c 08		 jl	 SHORT $LN3@MixGrandIt
  0023a	81 ff 5a 12 00
	00		 cmp	 edi, 4698		; 0000125aH
  00240	7e 1b		 jle	 SHORT $LN6@MixGrandIt
$LN3@MixGrandIt:
  00242	81 ff 54 14 00
	00		 cmp	 edi, 5204		; 00001454H
  00248	7c 08		 jl	 SHORT $LN2@MixGrandIt
  0024a	81 ff 5a 14 00
	00		 cmp	 edi, 5210		; 0000145aH
  00250	7e 0b		 jle	 SHORT $LN6@MixGrandIt
$LN2@MixGrandIt:
  00252	8d 97 ac e9 ff
	ff		 lea	 edx, DWORD PTR [edi-5716]
  00258	83 fa 06	 cmp	 edx, 6
  0025b	77 07		 ja	 SHORT $LN7@MixGrandIt
$LN6@MixGrandIt:

; 414  : 		{
; 415  : 			AncItem = 5;

  0025d	c7 45 cc 05 00
	00 00		 mov	 DWORD PTR _AncItem$204888[ebp], 5
$LN7@MixGrandIt:

; 416  : 		}
; 417  : 
; 418  : 		//srand(time(NULL));
; 419  : 		int iLevel = rand()%5;

  00264	e8 00 00 00 00	 call	 _rand
  00269	99		 cdq
  0026a	b9 05 00 00 00	 mov	 ecx, 5
  0026f	f7 f9		 idiv	 ecx
  00271	89 55 c8	 mov	 DWORD PTR _iLevel$204895[ebp], edx

; 420  : 
; 421  : 		//srand(time(NULL));
; 422  : 		int iLuck = rand()%2;

  00274	e8 00 00 00 00	 call	 _rand
  00279	8b d8		 mov	 ebx, eax
  0027b	81 e3 01 00 00
	80		 and	 ebx, -2147483647	; 80000001H
  00281	79 05		 jns	 SHORT $LN43@MixGrandIt
  00283	4b		 dec	 ebx
  00284	83 cb fe	 or	 ebx, -2			; fffffffeH
  00287	43		 inc	 ebx
$LN43@MixGrandIt:

; 423  : 
; 424  : 		int ExcellentOpt[6] = { 1, 2, 4, 8, 16, 32 };

  00288	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204897[ebp], 1
  0028f	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204897[ebp+4], 2
  00296	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204897[ebp+8], 4
  0029d	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204897[ebp+12], 8
  002a4	c7 45 f4 10 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204897[ebp+16], 16 ; 00000010H
  002ab	c7 45 f8 20 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204897[ebp+20], 32 ; 00000020H

; 425  : 		//srand(time(NULL));
; 426  : 		int ExlRand = ExcellentOpt[rand()%6];

  002b2	e8 00 00 00 00	 call	 _rand
  002b7	99		 cdq
  002b8	b9 06 00 00 00	 mov	 ecx, 6
  002bd	f7 f9		 idiv	 ecx
  002bf	8b 54 95 e4	 mov	 edx, DWORD PTR _ExcellentOpt$204897[ebp+edx*4]
  002c3	89 55 c4	 mov	 DWORD PTR _ExlRand$204898[ebp], edx

; 427  : 
; 428  : 		int Option = rand()%8;

  002c6	e8 00 00 00 00	 call	 _rand
  002cb	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  002d0	79 05		 jns	 SHORT $LN44@MixGrandIt
  002d2	48		 dec	 eax
  002d3	83 c8 f8	 or	 eax, -8			; fffffff8H
  002d6	40		 inc	 eax
$LN44@MixGrandIt:

; 429  : 
; 430  : 		ItemSerialCreateSend(lpObj->m_Index, 0xFF, 0, 0, ItemType, iLevel, 0, iSkill, iLuck, Option, lpObj->m_Index, ExlRand, AncItem);

  002d7	8b 55 cc	 mov	 edx, DWORD PTR _AncItem$204888[ebp]
  002da	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002dc	52		 push	 edx
  002dd	8b 55 c4	 mov	 edx, DWORD PTR _ExlRand$204898[ebp]
  002e0	52		 push	 edx
  002e1	8b 55 c8	 mov	 edx, DWORD PTR _iLevel$204895[ebp]
  002e4	51		 push	 ecx
  002e5	50		 push	 eax
  002e6	8b 45 d0	 mov	 eax, DWORD PTR _iSkill$204879[ebp]
  002e9	53		 push	 ebx
  002ea	50		 push	 eax
  002eb	6a 00		 push	 0
  002ed	52		 push	 edx
  002ee	57		 push	 edi
  002ef	6a 00		 push	 0
  002f1	6a 00		 push	 0
  002f3	68 ff 00 00 00	 push	 255			; 000000ffH
  002f8	51		 push	 ecx
  002f9	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 431  : 		::gObjInventoryCommit(lpObj->m_Index);

  002fe	8b 06		 mov	 eax, DWORD PTR [esi]
  00300	50		 push	 eax
  00301	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 432  : 
; 433  : 		LogAddTD("[GrandHeroSystem][Mix Item] CBMix Item Create Item:%d, Accaunt:%s, Nick:%s",ItemType,lpObj->AccountID,lpObj->Name);

  00306	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  00309	51		 push	 ecx
  0030a	83 c6 6c	 add	 esi, 108		; 0000006cH
  0030d	56		 push	 esi
  0030e	57		 push	 edi
  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NDAHJHIE@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@
  00314	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0031a	83 c4 48	 add	 esp, 72			; 00000048H
  0031d	5f		 pop	 edi
  0031e	5b		 pop	 ebx
  0031f	5e		 pop	 esi

; 442  : 	}
; 443  : }

  00320	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00323	33 cd		 xor	 ecx, ebp
  00325	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032a	8b e5		 mov	 esp, ebp
  0032c	5d		 pop	 ebp
  0032d	c2 04 00	 ret	 4
$LN8@MixGrandIt:

; 401  : 		{
; 402  : 			pMsg.Result = CB_ERROR;

  00330	88 4d d7	 mov	 BYTE PTR _pMsg$[ebp+3], cl

; 403  : 			DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 404  : 			return;

  00333	eb 49		 jmp	 SHORT $LN45@MixGrandIt
$LN13@MixGrandIt:

; 434  : 	}
; 435  : 	else
; 436  : 	{
; 437  : 		g_MixSystem.ChaosBoxInit(lpObj);

  00335	56		 push	 esi
  00336	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MixSystem@@3VCMixSystem@@A ; g_MixSystem
  0033b	e8 00 00 00 00	 call	 ?ChaosBoxInit@CMixSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMixSystem::ChaosBoxInit

; 438  : 		::GCUserChaosBoxSend(lpObj, 0);

  00340	6a 00		 push	 0
  00342	56		 push	 esi
  00343	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 439  : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00348	0f b6 55 d5	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0034c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0034e	52		 push	 edx
  0034f	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00352	50		 push	 eax
  00353	51		 push	 ecx
  00354	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 440  : 
; 441  : 		LogAddTD("[GrandHeroSystem][Mix Item] CBMix Fail");

  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OLGCEEAC@?$FLGrandHeroSystem?$FN?$FLMix?5Item?$FN?5CBMi@
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00364	83 c4 18	 add	 esp, 24			; 00000018H
  00367	5f		 pop	 edi
  00368	5b		 pop	 ebx
  00369	5e		 pop	 esi

; 442  : 	}
; 443  : }

  0036a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036d	33 cd		 xor	 ecx, ebp
  0036f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00374	8b e5		 mov	 esp, ebp
  00376	5d		 pop	 ebp
  00377	c2 04 00	 ret	 4
$LN15@MixGrandIt:

; 366  : 	{
; 367  : 		pMsg.Result = CB_INCORRECT_MIX_ITEMS;

  0037a	c6 45 d7 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN45@MixGrandIt:

; 368  : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  0037e	0f b6 55 d5	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00382	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00384	52		 push	 edx
  00385	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00388	50		 push	 eax
  00389	51		 push	 ecx
  0038a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0038f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00392	5f		 pop	 edi
  00393	5b		 pop	 ebx
$LN1@MixGrandIt:

; 442  : 	}
; 443  : }

  00394	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00397	33 cd		 xor	 ecx, ebp
  00399	5e		 pop	 esi
  0039a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039f	8b e5		 mov	 esp, ebp
  003a1	5d		 pop	 ebp
  003a2	c2 04 00	 ret	 4
?MixGrandItem@cGrandHero@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; cGrandHero::MixGrandItem
_TEXT	ENDS
PUBLIC	??0?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Vector_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Vector_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QAE@PAUGRANDMIX_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::_Vector_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEPAUGRANDMIX_DATA@@I@Z ; std::allocator<GRANDMIX_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEPAUGRANDMIX_DATA@@I@Z
_TEXT	SEGMENT
$T206290 = -12						; size = 12
$T206288 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEPAUGRANDMIX_DATA@@I@Z PROC ; std::allocator<GRANDMIX_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate
  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T206288[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T206290[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T206288[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T206290[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T206290[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEPAUGRANDMIX_DATA@@I@Z ENDP ; std::allocator<GRANDMIX_DATA>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@ABU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@ABU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@ABU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@ABU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00@Z ; std::_Move<GRANDMIX_DATA *,GRANDMIX_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00@Z PROC ; std::_Move<GRANDMIX_DATA *,GRANDMIX_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN5@Move@2
  00010	56		 push	 esi
$LL7@Move@2:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL7@Move@2
  00025	5e		 pop	 esi
$LN5@Move@2:

; 2536 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUGRANDMIX_DATA@@PAU1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00@Z ENDP ; std::_Move<GRANDMIX_DATA *,GRANDMIX_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@@Z ; std::_Dest_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@@Z PROC ; std::_Dest_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@U3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@U3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@U3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@3:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@U3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<GRANDMIX_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<GRANDMIX_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<GRANDMIX_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@U1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@U1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@U1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@U3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA>
  0001e	83 c6 08	 add	 esi, 8
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 08	 add	 edi, 8
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@U1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<GRANDMIX_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<GRANDMIX_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAXPAUGRANDMIX_DATA@@0AAV?$allocator@UGRANDMIX_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<GRANDMIX_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@@Z ; std::_Uninitialized_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$206483 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@@Z PROC ; std::_Uninitialized_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$206483[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@U1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXPAUGRANDMIX_DATA@@0@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXPAUGRANDMIX_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXPAUGRANDMIX_DATA@@0@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXPAUGRANDMIX_DATA@@0@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUGRANDMIX_DATA@@@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEPAUGRANDMIX_DATA@@PAU2@00@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Umove<GRANDMIX_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUGRANDMIX_DATA@@@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEPAUGRANDMIX_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$206505 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUGRANDMIX_DATA@@@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEPAUGRANDMIX_DATA@@PAU2@00@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Umove<GRANDMIX_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$206505[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@U1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUGRANDMIX_DATA@@@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEPAUGRANDMIX_DATA@@PAU2@00@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Umove<GRANDMIX_DATA *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@0@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First_arg$[ebp]
  0000d	89 30		 mov	 DWORD PTR [eax], esi
  0000f	3b f2		 cmp	 esi, edx
  00011	74 26		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00013	57		 push	 edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	3b d7		 cmp	 edx, edi
  00019	74 1a		 je	 SHORT $LN30@erase
  0001b	53		 push	 ebx
  0001c	8d 64 24 00	 npad	 4
$LL32@erase:
  00020	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00022	89 1e		 mov	 DWORD PTR [esi], ebx
  00024	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  00027	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002a	83 c2 08	 add	 edx, 8
  0002d	83 c6 08	 add	 esi, 8
  00030	3b d7		 cmp	 edx, edi
  00032	75 ec		 jne	 SHORT $LL32@erase
  00034	5b		 pop	 ebx
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00035	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00038	5f		 pop	 edi
$LN1@erase:
  00039	5e		 pop	 esi

; 1212 : 			}
; 1213 : 		return (_First);
; 1214 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXXZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$205216 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$206675 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 03	 sar	 ecx, 3
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 56		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UGRANDMIX_DATA@@@std@@QAEPAUGRANDMIX_DATA@@I@Z ; std::allocator<GRANDMIX_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$206675[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$205216[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUGRANDMIX_DATA@@PAU1@V?$allocator@UGRANDMIX_DATA@@@std@@U1@@std@@YAPAUGRANDMIX_DATA@@PAU1@00AAV?$allocator@UGRANDMIX_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<GRANDMIX_DATA *,GRANDMIX_DATA *,std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	2b f8		 sub	 edi, eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	c1 ff 03	 sar	 edi, 3

; 761  : 			if (this->_Myfirst != 0)

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00098	8d 14 fb	 lea	 edx, DWORD PTR [ebx+edi*8]
  0009b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009e	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$205216[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::reserve
PUBLIC	??1?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::~vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::~vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::~vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXXZ ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::clear, COMDAT
; _this$ = ecx

; 1218 : 		erase(begin(), end());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00006	3b d6		 cmp	 edx, esi
  00008	74 1f		 je	 SHORT $LN19@clear
  0000a	8b c6		 mov	 eax, esi
  0000c	3b f6		 cmp	 esi, esi
  0000e	74 16		 je	 SHORT $LN48@clear
  00010	57		 push	 edi
$LL50@clear:
  00011	8b 38		 mov	 edi, DWORD PTR [eax]
  00013	89 3a		 mov	 DWORD PTR [edx], edi
  00015	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00018	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0001b	83 c0 08	 add	 eax, 8
  0001e	83 c2 08	 add	 edx, 8
  00021	3b c6		 cmp	 eax, esi
  00023	75 ec		 jne	 SHORT $LL50@clear
  00025	5f		 pop	 edi
$LN48@clear:
  00026	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN19@clear:
  00029	5e		 pop	 esi

; 1219 : 		}

  0002a	c3		 ret	 0
?clear@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXI@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00014	c1 f8 03	 sar	 eax, 3
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 03	 sar	 edx, 3
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??0cGrandHero@@QAE@XZ				; cGrandHero::cGrandHero
; Function compile flags: /Ogtp
;	COMDAT ??0cGrandHero@@QAE@XZ
_TEXT	SEGMENT
??0cGrandHero@@QAE@XZ PROC				; cGrandHero::cGrandHero, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 88 7c 06 00
	00		 mov	 DWORD PTR [eax+1660], ecx
  0000a	89 88 80 06 00
	00		 mov	 DWORD PTR [eax+1664], ecx
  00010	89 88 84 06 00
	00		 mov	 DWORD PTR [eax+1668], ecx
  00016	c3		 ret	 0
??0cGrandHero@@QAE@XZ ENDP				; cGrandHero::cGrandHero
_TEXT	ENDS
PUBLIC	??1cGrandHero@@QAE@XZ				; cGrandHero::~cGrandHero
; Function compile flags: /Ogtp
;	COMDAT ??1cGrandHero@@QAE@XZ
_TEXT	SEGMENT
??1cGrandHero@@QAE@XZ PROC				; cGrandHero::~cGrandHero, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 86 7c 06 00
	00		 mov	 eax, DWORD PTR [esi+1660]
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN11@cGrandHero
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN11@cGrandHero:
  00016	c7 86 7c 06 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1660], 0
  00020	c7 86 80 06 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1664], 0
  0002a	c7 86 84 06 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1668], 0
  00034	5e		 pop	 esi
  00035	c3		 ret	 0
??1cGrandHero@@QAE@XZ ENDP				; cGrandHero::~cGrandHero
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXABUGRANDMIX_DATA@@@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXABUGRANDMIX_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXABUGRANDMIX_DATA@@@Z PROC ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXI@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@AAU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@IAEXI@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@ABU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXABUGRANDMIX_DATA@@@Z ENDP ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0BA@KPCJHCMJ@SocketMixEnable?$AA@		; `string'
PUBLIC	??_C@_03JNBBHALL@TPY?$AA@			; `string'
PUBLIC	??_C@_03IEAKEBPK@TPX?$AA@			; `string'
PUBLIC	??_C@_05OOGFIDHH@TPMap?$AA@			; `string'
PUBLIC	??_C@_0O@PIPGGBGE@BossDropCount?$AA@		; `string'
PUBLIC	??_C@_07LNGHNMMO@ResetTP?$AA@			; `string'
PUBLIC	??_C@_0M@PPCBFIMA@BossAncDrop?$AA@		; `string'
PUBLIC	??_C@_0BA@HMOPKGIC@ZtStoneDropRate?$AA@		; `string'
PUBLIC	??_C@_08OFLEJILH@MixMoney?$AA@			; `string'
PUBLIC	??_C@_0M@FJBFOEAM@MixItemRate?$AA@		; `string'
PUBLIC	??_C@_06INIINDFI@GRItem?$AA@			; `string'
PUBLIC	??_C@_04PGIALEAI@GRTp?$AA@			; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cGrandHero@@QAEXXZ			; cGrandHero::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%'
	DB	'd %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KPCJHCMJ@SocketMixEnable?$AA@
CONST	SEGMENT
??_C@_0BA@KPCJHCMJ@SocketMixEnable?$AA@ DB 'SocketMixEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JNBBHALL@TPY?$AA@
CONST	SEGMENT
??_C@_03JNBBHALL@TPY?$AA@ DB 'TPY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IEAKEBPK@TPX?$AA@
CONST	SEGMENT
??_C@_03IEAKEBPK@TPX?$AA@ DB 'TPX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OOGFIDHH@TPMap?$AA@
CONST	SEGMENT
??_C@_05OOGFIDHH@TPMap?$AA@ DB 'TPMap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIPGGBGE@BossDropCount?$AA@
CONST	SEGMENT
??_C@_0O@PIPGGBGE@BossDropCount?$AA@ DB 'BossDropCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LNGHNMMO@ResetTP?$AA@
CONST	SEGMENT
??_C@_07LNGHNMMO@ResetTP?$AA@ DB 'ResetTP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPCBFIMA@BossAncDrop?$AA@
CONST	SEGMENT
??_C@_0M@PPCBFIMA@BossAncDrop?$AA@ DB 'BossAncDrop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMOPKGIC@ZtStoneDropRate?$AA@
CONST	SEGMENT
??_C@_0BA@HMOPKGIC@ZtStoneDropRate?$AA@ DB 'ZtStoneDropRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFLEJILH@MixMoney?$AA@
CONST	SEGMENT
??_C@_08OFLEJILH@MixMoney?$AA@ DB 'MixMoney', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJBFOEAM@MixItemRate?$AA@
CONST	SEGMENT
??_C@_0M@FJBFOEAM@MixItemRate?$AA@ DB 'MixItemRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06INIINDFI@GRItem?$AA@
CONST	SEGMENT
??_C@_06INIINDFI@GRItem?$AA@ DB 'GRItem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PGIALEAI@GRTp?$AA@
CONST	SEGMENT
??_C@_04PGIALEAI@GRTp?$AA@ DB 'GRTp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
CONST	SEGMENT
??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@ DB '..\Data\Zt'
	DB	'Data\GrandHeroSystem.ini', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\grandherosystem.cpp
CONST	ENDS
;	COMDAT ?Load@cGrandHero@@QAEXXZ
_TEXT	SEGMENT
_n$204769 = -320					; size = 8
__Idx$207571 = -312					; size = 4
_info$204771 = -308					; size = 8
_Flag$ = -300						; size = 4
_file$ = -296						; size = 4
_n$204766 = -292					; size = 32
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Load@cGrandHero@@QAEXXZ PROC				; cGrandHero::Load, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 21   : 	if(!g_ZtLicense.user.GrandHero) return;

  00013	80 3d d2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+210, 0
  0001a	56		 push	 esi
  0001b	8b f1		 mov	 esi, ecx
  0001d	0f 84 97 04 00
	00		 je	 $LN11@Load

; 22   : 	//CheckFile(GRANDHERO_DIR);
; 23   : 	this->Enable = GetPrivateProfileInt("Common","Enable",0,GRANDHERO_DIR);

  00023	57		 push	 edi
  00024	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  0002f	6a 00		 push	 0
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0003b	ff d7		 call	 edi

; 24   : 	this->GRTp = GetPrivateProfileInt("Common","GRTp",0,GRANDHERO_DIR);

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  00042	6a 00		 push	 0
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_04PGIALEAI@GRTp?$AA@
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0004e	89 06		 mov	 DWORD PTR [esi], eax
  00050	ff d7		 call	 edi

; 25   : 	this->GRItem = GetPrivateProfileInt("Common","GRItem",1,GRANDHERO_DIR);

  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  00057	6a 01		 push	 1
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_06INIINDFI@GRItem?$AA@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00063	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00066	ff d7		 call	 edi

; 26   : 	this->MixItemRate = GetPrivateProfileInt("Common","MixItemRate",100,GRANDHERO_DIR);

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  0006d	6a 64		 push	 100			; 00000064H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FJBFOEAM@MixItemRate?$AA@
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00079	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0007c	ff d7		 call	 edi

; 27   : 	this->MixMoney = GetPrivateProfileInt("Common","MixMoney",0,GRANDHERO_DIR);

  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  00083	6a 00		 push	 0
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_08OFLEJILH@MixMoney?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0008f	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00092	ff d7		 call	 edi

; 28   : 	this->ZtStoneDropRate = GetPrivateProfileInt("Common","ZtStoneDropRate",0,GRANDHERO_DIR);

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  00099	6a 00		 push	 0
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HMOPKGIC@ZtStoneDropRate?$AA@
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000a5	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000a8	ff d7		 call	 edi

; 29   : 	//this->OffTradeLoren = GetPrivateProfileInt("Common","OffTradeLoren",1,GRANDHERO_DIR);
; 30   : 	this->BossAncDrop = GetPrivateProfileInt("Common","BossAncDrop",10000,GRANDHERO_DIR);

  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  000af	68 10 27 00 00	 push	 10000			; 00002710H
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PPCBFIMA@BossAncDrop?$AA@
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000be	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000c1	ff d7		 call	 edi

; 31   : 
; 32   : 	
; 33   : 
; 34   : 	this->ResetTP = GetPrivateProfileInt("Common","ResetTP",0,GRANDHERO_DIR);

  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_07LNGHNMMO@ResetTP?$AA@
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000d4	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000d7	ff d7		 call	 edi

; 35   : 
; 36   : 	this->BossDropCount = GetPrivateProfileInt("Common","BossDropCount",1,GRANDHERO_DIR);

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  000de	6a 01		 push	 1
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PIPGGBGE@BossDropCount?$AA@
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000ea	89 46 24	 mov	 DWORD PTR [esi+36], eax
  000ed	ff d7		 call	 edi

; 37   : 
; 38   : 	this->TPMap = GetPrivateProfileInt("Common","TPMap",81,GRANDHERO_DIR);

  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  000f4	6a 51		 push	 81			; 00000051H
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_05OOGFIDHH@TPMap?$AA@
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00100	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00103	ff d7		 call	 edi

; 39   : 	this->TPX = GetPrivateProfileInt("Common","TPX",165,GRANDHERO_DIR);

  00105	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  0010a	68 a5 00 00 00	 push	 165			; 000000a5H
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_03IEAKEBPK@TPX?$AA@
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00119	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0011c	ff d7		 call	 edi

; 40   : 	this->TPY = GetPrivateProfileInt("Common","TPY",15,GRANDHERO_DIR);

  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  00123	6a 0f		 push	 15			; 0000000fH
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_03JNBBHALL@TPY?$AA@
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0012f	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00132	ff d7		 call	 edi

; 41   : 
; 42   : 	this->m_SocketMixEnable = GetPrivateProfileInt("Common","SocketMixEnable",1,GRANDHERO_DIR);

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  00139	6a 01		 push	 1
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KPCJHCMJ@SocketMixEnable?$AA@
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00145	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00148	ff d7		 call	 edi
  0014a	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0014d	8d 46 3a	 lea	 eax, DWORD PTR [esi+58]

; 22   : 	//CheckFile(GRANDHERO_DIR);
; 23   : 	this->Enable = GetPrivateProfileInt("Common","Enable",0,GRANDHERO_DIR);

  00150	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
$LL9@Load:

; 43   : 
; 44   : 	for (int i=0; i < 100; i++)
; 45   : 	{
; 46   : 		Items[i].Index		= 0;

  00155	33 d2		 xor	 edx, edx
  00157	66 89 50 fe	 mov	 WORD PTR [eax-2], dx

; 47   : 		Items[i].ItemID		= 0;

  0015b	66 89 10	 mov	 WORD PTR [eax], dx

; 48   : 		Items[i].Level		= 0;

  0015e	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 49   : 		Items[i].Skill		= 0;

  00162	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 50   : 		Items[i].Luck		= 0;

  00166	66 89 50 06	 mov	 WORD PTR [eax+6], dx

; 51   : 		Items[i].Options	= 0;

  0016a	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 52   : 		Items[i].Exl		= 0;

  0016e	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 53   : 		Items[i].Anc		= 0;

  00172	66 89 50 0c	 mov	 WORD PTR [eax+12], dx
  00176	83 c0 10	 add	 eax, 16			; 00000010H
  00179	49		 dec	 ecx
  0017a	75 d9		 jne	 SHORT $LL9@Load

; 54   : 	}
; 55   : 
; 56   : 	this->m_MixData.clear();

  0017c	8b 8e 7c 06 00
	00		 mov	 ecx, DWORD PTR [esi+1660]
  00182	8b 96 80 06 00
	00		 mov	 edx, DWORD PTR [esi+1664]
  00188	53		 push	 ebx
  00189	3b ca		 cmp	 ecx, edx
  0018b	74 20		 je	 SHORT $LN31@Load
  0018d	8b c2		 mov	 eax, edx
  0018f	3b d2		 cmp	 edx, edx
  00191	74 14		 je	 SHORT $LN60@Load
$LL62@Load:
  00193	8b 18		 mov	 ebx, DWORD PTR [eax]
  00195	89 19		 mov	 DWORD PTR [ecx], ebx
  00197	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0019a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
  0019d	83 c0 08	 add	 eax, 8
  001a0	83 c1 08	 add	 ecx, 8
  001a3	3b c2		 cmp	 eax, edx
  001a5	75 ec		 jne	 SHORT $LL62@Load
$LN60@Load:
  001a7	89 8e 80 06 00
	00		 mov	 DWORD PTR [esi+1664], ecx
$LN31@Load:

; 57   : 
; 58   : 	FILE * file = fopen(GRANDHERO_DIR,"r");

  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKJFHHJE@?4?4?2Data?2ZtData?2GrandHeroSystem?4i@
  001b7	e8 00 00 00 00	 call	 _fopen
  001bc	8b d8		 mov	 ebx, eax

; 59   : 
; 60   : 	if (file == NULL)

  001be	33 c0		 xor	 eax, eax
  001c0	83 c4 08	 add	 esp, 8
  001c3	89 9d d8 fe ff
	ff		 mov	 DWORD PTR _file$[ebp], ebx
  001c9	3b d8		 cmp	 ebx, eax
  001cb	75 13		 jne	 SHORT $LN6@Load

; 61   : 	{
; 62   : 		this->Enable = 0;

  001cd	5b		 pop	 ebx
  001ce	5f		 pop	 edi
  001cf	89 06		 mov	 DWORD PTR [esi], eax
  001d1	5e		 pop	 esi

; 107  : }

  001d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d5	33 cd		 xor	 ecx, ebp
  001d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c3		 ret	 0
$LN6@Load:

; 63   : 		return;
; 64   : 	}
; 65   : 
; 66   : 	char Buff[256];
; 67   : 	int Flag = 0;
; 68   : 	this->ItemCoint = 0;
; 69   : 
; 70   : 	while (!feof(file))

  001e0	53		 push	 ebx
  001e1	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], eax
  001e7	89 86 78 06 00
	00		 mov	 DWORD PTR [esi+1656], eax
  001ed	e8 00 00 00 00	 call	 _feof
  001f2	83 c4 04	 add	 esp, 4
  001f5	85 c0		 test	 eax, eax
  001f7	0f 85 b2 02 00
	00		 jne	 $LN4@Load
  001fd	8d 49 00	 npad	 3
$LL5@Load:

; 71   : 	{
; 72   : 		fgets(Buff,256,file);

  00200	53		 push	 ebx
  00201	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00207	68 00 01 00 00	 push	 256			; 00000100H
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _fgets

; 73   : 
; 74   : 		if(Zt_IsBadFileLine(Buff, Flag))

  00212	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  00218	51		 push	 ecx
  00219	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  00225	83 c4 14	 add	 esp, 20			; 00000014H
  00228	84 c0		 test	 al, al
  0022a	0f 85 6e 02 00
	00		 jne	 $LN68@Load

; 75   : 			continue;
; 76   : 
; 77   : 		if (Flag == 1)

  00230	83 bd d4 fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  00237	0f 85 f4 00 00
	00		 jne	 $LN2@Load

; 78   : 		{
; 79   : 			int n[8];
; 80   : 
; 81   : 			sscanf(Buff,"%d %d %d %d %d %d %d %d", &n[0], &n[1], &n[2], &n[3], &n[4], &n[5], &n[6], &n[7]);

  0023d	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _n$204766[ebp+28]
  00243	50		 push	 eax
  00244	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204766[ebp+24]
  0024a	51		 push	 ecx
  0024b	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _n$204766[ebp+20]
  00251	52		 push	 edx
  00252	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$204766[ebp+16]
  00258	50		 push	 eax
  00259	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204766[ebp+12]
  0025f	51		 push	 ecx
  00260	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$204766[ebp+8]
  00266	52		 push	 edx
  00267	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$204766[ebp+4]
  0026d	50		 push	 eax
  0026e	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$204766[ebp]
  00274	51		 push	 ecx
  00275	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0027b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  00280	52		 push	 edx
  00281	e8 00 00 00 00	 call	 _sscanf

; 82   : 
; 83   : 			Items[this->ItemCoint].Index	= n[0];

  00286	8b 86 78 06 00
	00		 mov	 eax, DWORD PTR [esi+1656]
  0028c	0f b7 8d dc fe
	ff ff		 movzx	 ecx, WORD PTR _n$204766[ebp]
  00293	03 c0		 add	 eax, eax
  00295	66 89 4c c6 38	 mov	 WORD PTR [esi+eax*8+56], cx

; 84   : 			Items[this->ItemCoint].ItemID	= n[1];

  0029a	8b 96 78 06 00
	00		 mov	 edx, DWORD PTR [esi+1656]
  002a0	0f b7 85 e0 fe
	ff ff		 movzx	 eax, WORD PTR _n$204766[ebp+4]
  002a7	03 d2		 add	 edx, edx
  002a9	66 89 44 d6 3a	 mov	 WORD PTR [esi+edx*8+58], ax

; 85   : 			Items[this->ItemCoint].Level	= n[2];

  002ae	8b 8e 78 06 00
	00		 mov	 ecx, DWORD PTR [esi+1656]
  002b4	0f b7 95 e4 fe
	ff ff		 movzx	 edx, WORD PTR _n$204766[ebp+8]
  002bb	03 c9		 add	 ecx, ecx
  002bd	66 89 54 ce 3c	 mov	 WORD PTR [esi+ecx*8+60], dx

; 86   : 			Items[this->ItemCoint].Skill	= n[3];

  002c2	8b 86 78 06 00
	00		 mov	 eax, DWORD PTR [esi+1656]
  002c8	0f b7 8d e8 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204766[ebp+12]
  002cf	03 c0		 add	 eax, eax
  002d1	66 89 4c c6 3e	 mov	 WORD PTR [esi+eax*8+62], cx

; 87   : 			Items[this->ItemCoint].Luck		= n[4];

  002d6	8b 96 78 06 00
	00		 mov	 edx, DWORD PTR [esi+1656]
  002dc	0f b7 85 ec fe
	ff ff		 movzx	 eax, WORD PTR _n$204766[ebp+16]
  002e3	83 c2 04	 add	 edx, 4
  002e6	03 d2		 add	 edx, edx
  002e8	66 89 04 d6	 mov	 WORD PTR [esi+edx*8], ax

; 88   : 			Items[this->ItemCoint].Options	= n[5];

  002ec	8b 8e 78 06 00
	00		 mov	 ecx, DWORD PTR [esi+1656]
  002f2	0f b7 95 f0 fe
	ff ff		 movzx	 edx, WORD PTR _n$204766[ebp+20]
  002f9	03 c9		 add	 ecx, ecx
  002fb	66 89 54 ce 42	 mov	 WORD PTR [esi+ecx*8+66], dx

; 89   : 			Items[this->ItemCoint].Exl		= n[6];

  00300	8b 86 78 06 00
	00		 mov	 eax, DWORD PTR [esi+1656]
  00306	0f b7 8d f4 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204766[ebp+24]
  0030d	03 c0		 add	 eax, eax
  0030f	66 89 4c c6 44	 mov	 WORD PTR [esi+eax*8+68], cx

; 90   : 			Items[this->ItemCoint].Anc		= n[7];

  00314	8b 96 78 06 00
	00		 mov	 edx, DWORD PTR [esi+1656]
  0031a	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _n$204766[ebp+28]
  00321	03 d2		 add	 edx, edx
  00323	83 c4 28	 add	 esp, 40			; 00000028H
  00326	66 89 44 d6 46	 mov	 WORD PTR [esi+edx*8+70], ax

; 91   : 
; 92   : 			this->ItemCoint++;

  0032b	ff 86 78 06 00
	00		 inc	 DWORD PTR [esi+1656]
$LN2@Load:

; 93   : 		}
; 94   : 
; 95   : 		if (Flag == 2)

  00331	83 bd d4 fe ff
	ff 02		 cmp	 DWORD PTR _Flag$[ebp], 2
  00338	0f 85 60 01 00
	00		 jne	 $LN68@Load

; 96   : 		{
; 97   : 			int n[2];
; 98   : 			sscanf(Buff,"%d %d",  &n[0], &n[1]);

  0033e	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204769[ebp+4]
  00344	51		 push	 ecx
  00345	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR _n$204769[ebp]
  0034b	52		 push	 edx
  0034c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00352	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  00357	50		 push	 eax
  00358	e8 00 00 00 00	 call	 _sscanf

; 99   : 			GRANDMIX_DATA info;
; 100  : 			info.iType = n[0];

  0035d	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _n$204769[ebp]

; 101  : 			info.iIndex = n[1];
; 102  : 			this->m_MixData.push_back(info);

  00363	8b 86 80 06 00
	00		 mov	 eax, DWORD PTR [esi+1664]
  00369	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _n$204769[ebp+4]
  0036f	89 8d cc fe ff
	ff		 mov	 DWORD PTR _info$204771[ebp], ecx
  00375	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _info$204771[ebp]
  0037b	83 c4 10	 add	 esp, 16			; 00000010H
  0037e	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _info$204771[ebp+4], edx
  00384	3b c8		 cmp	 ecx, eax
  00386	0f 83 97 00 00
	00		 jae	 $LN70@Load
  0038c	8b 9e 7c 06 00
	00		 mov	 ebx, DWORD PTR [esi+1660]
  00392	8b d1		 mov	 edx, ecx
  00394	3b da		 cmp	 ebx, edx
  00396	0f 87 81 00 00
	00		 ja	 $LN161@Load
  0039c	8b 8e 84 06 00
	00		 mov	 ecx, DWORD PTR [esi+1668]
  003a2	2b d3		 sub	 edx, ebx
  003a4	c1 fa 03	 sar	 edx, 3
  003a7	89 95 c8 fe ff
	ff		 mov	 DWORD PTR __Idx$207571[ebp], edx
  003ad	3b c1		 cmp	 eax, ecx
  003af	75 47		 jne	 SHORT $LN160@Load
  003b1	2b c3		 sub	 eax, ebx
  003b3	c1 f8 03	 sar	 eax, 3
  003b6	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  003bb	0f 87 08 01 00
	00		 ja	 $LN155@Load
  003c1	2b cb		 sub	 ecx, ebx
  003c3	40		 inc	 eax
  003c4	c1 f9 03	 sar	 ecx, 3
  003c7	3b c1		 cmp	 eax, ecx
  003c9	76 2d		 jbe	 SHORT $LN160@Load
  003cb	8b d1		 mov	 edx, ecx
  003cd	d1 ea		 shr	 edx, 1
  003cf	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  003d4	2b da		 sub	 ebx, edx
  003d6	3b d9		 cmp	 ebx, ecx
  003d8	73 04		 jae	 SHORT $LN103@Load
  003da	33 c9		 xor	 ecx, ecx
  003dc	eb 02		 jmp	 SHORT $LN104@Load
$LN103@Load:
  003de	03 ca		 add	 ecx, edx
$LN104@Load:
  003e0	3b c8		 cmp	 ecx, eax
  003e2	73 02		 jae	 SHORT $LN100@Load
  003e4	8b c8		 mov	 ecx, eax
$LN100@Load:
  003e6	51		 push	 ecx
  003e7	8d 8e 7c 06 00
	00		 lea	 ecx, DWORD PTR [esi+1660]
  003ed	e8 00 00 00 00	 call	 ?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::reserve
  003f2	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR __Idx$207571[ebp]
$LN160@Load:
  003f8	8b 86 7c 06 00
	00		 mov	 eax, DWORD PTR [esi+1660]
  003fe	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00401	8b 96 80 06 00
	00		 mov	 edx, DWORD PTR [esi+1664]
  00407	51		 push	 ecx
  00408	52		 push	 edx
  00409	8d 86 88 06 00
	00		 lea	 eax, DWORD PTR [esi+1672]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@AAU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA &>
  00415	8b 9d d8 fe ff
	ff		 mov	 ebx, DWORD PTR _file$[ebp]
  0041b	eb 77		 jmp	 SHORT $LN165@Load
$LN161@Load:
  0041d	8b 9d d8 fe ff
	ff		 mov	 ebx, DWORD PTR _file$[ebp]
$LN70@Load:
  00423	8b 8e 84 06 00
	00		 mov	 ecx, DWORD PTR [esi+1668]
  00429	3b c1		 cmp	 eax, ecx
  0042b	75 4d		 jne	 SHORT $LN116@Load
  0042d	8b 96 7c 06 00
	00		 mov	 edx, DWORD PTR [esi+1660]
  00433	2b c2		 sub	 eax, edx
  00435	c1 f8 03	 sar	 eax, 3
  00438	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  0043d	0f 87 86 00 00
	00		 ja	 $LN155@Load
  00443	2b ca		 sub	 ecx, edx
  00445	40		 inc	 eax
  00446	c1 f9 03	 sar	 ecx, 3
  00449	3b c1		 cmp	 eax, ecx
  0044b	76 2d		 jbe	 SHORT $LN116@Load
  0044d	8b d1		 mov	 edx, ecx
  0044f	d1 ea		 shr	 edx, 1
  00451	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00456	2b da		 sub	 ebx, edx
  00458	3b d9		 cmp	 ebx, ecx
  0045a	73 04		 jae	 SHORT $LN138@Load
  0045c	33 c9		 xor	 ecx, ecx
  0045e	eb 02		 jmp	 SHORT $LN139@Load
$LN138@Load:
  00460	03 ca		 add	 ecx, edx
$LN139@Load:
  00462	3b c8		 cmp	 ecx, eax
  00464	73 02		 jae	 SHORT $LN135@Load
  00466	8b c8		 mov	 ecx, eax
$LN135@Load:
  00468	51		 push	 ecx
  00469	8d 8e 7c 06 00
	00		 lea	 ecx, DWORD PTR [esi+1660]
  0046f	e8 00 00 00 00	 call	 ?reserve@?$vector@UGRANDMIX_DATA@@V?$allocator@UGRANDMIX_DATA@@@std@@@std@@QAEXI@Z ; std::vector<GRANDMIX_DATA,std::allocator<GRANDMIX_DATA> >::reserve
  00474	8b 9d d8 fe ff
	ff		 mov	 ebx, DWORD PTR _file$[ebp]
$LN116@Load:
  0047a	8b 96 80 06 00
	00		 mov	 edx, DWORD PTR [esi+1664]
  00480	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _info$204771[ebp]
  00486	51		 push	 ecx
  00487	52		 push	 edx
  00488	8d 86 88 06 00
	00		 lea	 eax, DWORD PTR [esi+1672]
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UGRANDMIX_DATA@@@std@@UGRANDMIX_DATA@@ABU3@@std@@YAXAAV?$allocator@UGRANDMIX_DATA@@@0@PAUGRANDMIX_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<GRANDMIX_DATA>,GRANDMIX_DATA,GRANDMIX_DATA const &>
$LN165@Load:
  00494	83 c4 0c	 add	 esp, 12			; 0000000cH
  00497	83 86 80 06 00
	00 08		 add	 DWORD PTR [esi+1664], 8
$LN68@Load:

; 63   : 		return;
; 64   : 	}
; 65   : 
; 66   : 	char Buff[256];
; 67   : 	int Flag = 0;
; 68   : 	this->ItemCoint = 0;
; 69   : 
; 70   : 	while (!feof(file))

  0049e	53		 push	 ebx
  0049f	e8 00 00 00 00	 call	 _feof
  004a4	83 c4 04	 add	 esp, 4
  004a7	85 c0		 test	 eax, eax
  004a9	0f 84 51 fd ff
	ff		 je	 $LL5@Load
$LN4@Load:

; 103  : 		}
; 104  : 	}
; 105  : 
; 106  : 	fclose(file);

  004af	53		 push	 ebx
  004b0	e8 00 00 00 00	 call	 _fclose
  004b5	83 c4 04	 add	 esp, 4
  004b8	5b		 pop	 ebx
  004b9	5f		 pop	 edi
$LN11@Load:

; 107  : }

  004ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004bd	33 cd		 xor	 ecx, ebp
  004bf	5e		 pop	 esi
  004c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c5	8b e5		 mov	 esp, ebp
  004c7	5d		 pop	 ebp
  004c8	c3		 ret	 0
$LN155@Load:

; 101  : 			info.iIndex = n[1];
; 102  : 			this->m_MixData.push_back(info);

  004c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  004ce	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN166@Load:
$LN164@Load:
  004d3	cc		 int	 3
?Load@cGrandHero@@QAEXXZ ENDP				; cGrandHero::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EGrandHero@@YAXXZ
text$yc	SEGMENT
??__EGrandHero@@YAXXZ PROC				; `dynamic initializer for 'GrandHero'', COMDAT

; 17   : cGrandHero GrandHero;

  00000	68 00 00 00 00	 push	 OFFSET ??__FGrandHero@@YAXXZ ; `dynamic atexit destructor for 'GrandHero''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EGrandHero@@YAXXZ ENDP				; `dynamic initializer for 'GrandHero''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FGrandHero@@YAXXZ
text$yd	SEGMENT
??__FGrandHero@@YAXXZ PROC				; `dynamic atexit destructor for 'GrandHero'', COMDAT
  00000	a1 7c 06 00 00	 mov	 eax, DWORD PTR ?GrandHero@@3VcGrandHero@@A+1660
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN12@dynamic
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN12@dynamic:
  00012	c7 05 7c 06 00
	00 00 00 00 00	 mov	 DWORD PTR ?GrandHero@@3VcGrandHero@@A+1660, 0
  0001c	c7 05 80 06 00
	00 00 00 00 00	 mov	 DWORD PTR ?GrandHero@@3VcGrandHero@@A+1664, 0
  00026	c7 05 84 06 00
	00 00 00 00 00	 mov	 DWORD PTR ?GrandHero@@3VcGrandHero@@A+1668, 0
  00030	c3		 ret	 0
??__FGrandHero@@YAXXZ ENDP				; `dynamic atexit destructor for 'GrandHero''
text$yd	ENDS
PUBLIC	?GrandHero@@3VcGrandHero@@A			; GrandHero
_BSS	SEGMENT
?GrandHero@@3VcGrandHero@@A DB 068cH DUP (?)		; GrandHero
_BSS	ENDS
CRT$XCU	SEGMENT
_GrandHero$initializer$ DD FLAT:??__EGrandHero@@YAXXZ
CRT$XCU	ENDS
END
