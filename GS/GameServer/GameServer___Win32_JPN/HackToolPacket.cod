; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\HackToolPacket.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SetState@CHackToolPacket@@QAEPAV1@_N@Z		; CHackToolPacket::SetState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\hacktoolpacket.cpp
;	COMDAT ?SetState@CHackToolPacket@@QAEPAV1@_N@Z
_TEXT	SEGMENT
_bResult$ = 8						; size = 1
?SetState@CHackToolPacket@@QAEPAV1@_N@Z PROC		; CHackToolPacket::SetState, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 14   : 	this->m_dwTick = 0;
; 15   : 	this->bLoad = bResult;

  00005	8a 4d 08	 mov	 cl, BYTE PTR _bResult$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 16   : 	this->bSetTick = 0;

  00011	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 17   : 
; 18   : 	return this;
; 19   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetState@CHackToolPacket@@QAEPAV1@_N@Z ENDP		; CHackToolPacket::SetState
_TEXT	ENDS
PUBLIC	?ClearTick@CHackToolPacket@@QAEXXZ		; CHackToolPacket::ClearTick
; Function compile flags: /Ogtp
;	COMDAT ?ClearTick@CHackToolPacket@@QAEXXZ
_TEXT	SEGMENT
?ClearTick@CHackToolPacket@@QAEXXZ PROC			; CHackToolPacket::ClearTick, COMDAT
; _this$ = ecx

; 23   : 	this->bSetTick = 0;

  00000	c6 41 05 00	 mov	 BYTE PTR [ecx+5], 0

; 24   : 	this->m_dwTick = 0;

  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 25   : }

  0000a	c3		 ret	 0
?ClearTick@CHackToolPacket@@QAEXXZ ENDP			; CHackToolPacket::ClearTick
_TEXT	ENDS
PUBLIC	?Init@CHackToolPacket@@QAEXXZ			; CHackToolPacket::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CHackToolPacket@@QAEXXZ
_TEXT	SEGMENT
?Init@CHackToolPacket@@QAEXXZ PROC			; CHackToolPacket::Init, COMDAT
; _this$ = ecx

; 29   : 	//empty?
; 30   : }

  00000	c3		 ret	 0
?Init@CHackToolPacket@@QAEXXZ ENDP			; CHackToolPacket::Init
_TEXT	ENDS
PUBLIC	?CheckExpiredTick@CHackToolPacket@@QAEEXZ	; CHackToolPacket::CheckExpiredTick
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?CheckExpiredTick@CHackToolPacket@@QAEEXZ
_TEXT	SEGMENT
?CheckExpiredTick@CHackToolPacket@@QAEEXZ PROC		; CHackToolPacket::CheckExpiredTick, COMDAT
; _this$ = ecx

; 33   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 34   : 	if(this->m_dwTick <= GetTickCount())

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	39 06		 cmp	 DWORD PTR [esi], eax
  0000b	77 0d		 ja	 SHORT $LN2@CheckExpir

; 35   : 	{
; 36   : 		if(this->bLoad == 1)

  0000d	b0 01		 mov	 al, 1
  0000f	38 46 04	 cmp	 BYTE PTR [esi+4], al
  00012	75 08		 jne	 SHORT $LN3@CheckExpir

; 37   : 		{
; 38   : 			this->bSetTick = 0;

  00014	c6 46 05 00	 mov	 BYTE PTR [esi+5], 0
  00018	5e		 pop	 esi

; 43   : }

  00019	c3		 ret	 0
$LN2@CheckExpir:

; 39   : 		}
; 40   : 		return 1;
; 41   : 	}
; 42   : 	return 0;

  0001a	32 c0		 xor	 al, al
$LN3@CheckExpir:
  0001c	5e		 pop	 esi

; 43   : }

  0001d	c3		 ret	 0
?CheckExpiredTick@CHackToolPacket@@QAEEXZ ENDP		; CHackToolPacket::CheckExpiredTick
_TEXT	ENDS
PUBLIC	?SetTick@CHackToolPacket@@QAEXK@Z		; CHackToolPacket::SetTick
; Function compile flags: /Ogtp
;	COMDAT ?SetTick@CHackToolPacket@@QAEXK@Z
_TEXT	SEGMENT
_dwTick$ = 8						; size = 4
?SetTick@CHackToolPacket@@QAEXK@Z PROC			; CHackToolPacket::SetTick, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 47   : 	this->bSetTick = 1;

  00006	c6 46 05 01	 mov	 BYTE PTR [esi+5], 1

; 48   : 	this->m_dwTick = GetTickCount() + dwTick;

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00010	03 45 08	 add	 eax, DWORD PTR _dwTick$[ebp]
  00013	89 06		 mov	 DWORD PTR [esi], eax
  00015	5e		 pop	 esi

; 49   : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?SetTick@CHackToolPacket@@QAEXK@Z ENDP			; CHackToolPacket::SetTick
_TEXT	ENDS
PUBLIC	??0CHackToolPacket@@QAE@XZ			; CHackToolPacket::CHackToolPacket
; Function compile flags: /Ogtp
;	COMDAT ??0CHackToolPacket@@QAE@XZ
_TEXT	SEGMENT
??0CHackToolPacket@@QAE@XZ PROC				; CHackToolPacket::CHackToolPacket, COMDAT
; _this$ = ecx

; 55   : 	this->SetState(1);

  00000	6a 01		 push	 1
  00002	8b d1		 mov	 edx, ecx
  00004	e8 00 00 00 00	 call	 ?SetState@CHackToolPacket@@QAEPAV1@_N@Z ; CHackToolPacket::SetState

; 56   : 	this->unk_8 = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 57   : 	this->m_iPacketCount = 0;

  0000e	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 58   : 	this->unk_10 = 0;

  00011	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 59   : 	this->unk_14 = 0;

  00014	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 60   : }

  00017	8b c2		 mov	 eax, edx
  00019	c3		 ret	 0
??0CHackToolPacket@@QAE@XZ ENDP				; CHackToolPacket::CHackToolPacket
_TEXT	ENDS
PUBLIC	?Clear@CHackToolPacket@@QAEXK@Z			; CHackToolPacket::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@CHackToolPacket@@QAEXK@Z
_TEXT	SEGMENT
_dwTick$ = 8						; size = 4
?Clear@CHackToolPacket@@QAEXK@Z PROC			; CHackToolPacket::Clear, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : 	this->unk_8 = dwTick;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwTick$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 65   : 	this->m_iPacketCount = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 66   : 	this->unk_10 = 0;

  0000e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 67   : 	this->unk_14 = 0;

  00011	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 68   : 	this->ClearTick();

  00014	e8 00 00 00 00	 call	 ?ClearTick@CHackToolPacket@@QAEXXZ ; CHackToolPacket::ClearTick

; 69   : 	this->SetTick(this->unk_8);

  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?SetTick@CHackToolPacket@@QAEXK@Z ; CHackToolPacket::SetTick

; 70   : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?Clear@CHackToolPacket@@QAEXK@Z ENDP			; CHackToolPacket::Clear
_TEXT	ENDS
PUBLIC	??1CHackToolPacket@@QAE@XZ			; CHackToolPacket::~CHackToolPacket
; Function compile flags: /Ogtp
;	COMDAT ??1CHackToolPacket@@QAE@XZ
_TEXT	SEGMENT
??1CHackToolPacket@@QAE@XZ PROC				; CHackToolPacket::~CHackToolPacket, COMDAT
; _this$ = ecx

; 74   : 	this->Init();
; 75   : }

  00000	c3		 ret	 0
??1CHackToolPacket@@QAE@XZ ENDP				; CHackToolPacket::~CHackToolPacket
_TEXT	ENDS
PUBLIC	?CheckPacketCount@CHackToolPacket@@QAEHXZ	; CHackToolPacket::CheckPacketCount
; Function compile flags: /Ogtp
;	COMDAT ?CheckPacketCount@CHackToolPacket@@QAEHXZ
_TEXT	SEGMENT
?CheckPacketCount@CHackToolPacket@@QAEHXZ PROC		; CHackToolPacket::CheckPacketCount, COMDAT
; _this$ = ecx

; 79   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 80   : 	if(CheckExpiredTick() == 1)

  00003	e8 00 00 00 00	 call	 ?CheckExpiredTick@CHackToolPacket@@QAEEXZ ; CHackToolPacket::CheckExpiredTick
  00008	3c 01		 cmp	 al, 1
  0000a	75 12		 jne	 SHORT $LN1@CheckPacke

; 81   : 	{
; 82   : 		this->Clear(this->unk_8);

  0000c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?Clear@CHackToolPacket@@QAEXK@Z ; CHackToolPacket::Clear

; 83   : 		return 2;

  00017	b8 02 00 00 00	 mov	 eax, 2
  0001c	5e		 pop	 esi

; 86   : }

  0001d	c3		 ret	 0
$LN1@CheckPacke:

; 84   : 	}
; 85   : 	return 1;

  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	5e		 pop	 esi

; 86   : }

  00024	c3		 ret	 0
?CheckPacketCount@CHackToolPacket@@QAEHXZ ENDP		; CHackToolPacket::CheckPacketCount
_TEXT	ENDS
PUBLIC	?IncreasePacketCount@CHackToolPacket@@QAEXEK@Z	; CHackToolPacket::IncreasePacketCount
; Function compile flags: /Ogtp
;	COMDAT ?IncreasePacketCount@CHackToolPacket@@QAEXEK@Z
_TEXT	SEGMENT
_arg1$ = 8						; size = 1
_arg2$ = 12						; size = 4
?IncreasePacketCount@CHackToolPacket@@QAEXEK@Z PROC	; CHackToolPacket::IncreasePacketCount, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   : 	this->m_iPacketCount++;
; 91   : 	this->unk_14 += arg2;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _arg2$[ebp]
  00006	01 51 14	 add	 DWORD PTR [ecx+20], edx
  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	01 41 0c	 add	 DWORD PTR [ecx+12], eax

; 92   : 
; 93   : 	if(arg1 == 1)

  00011	38 45 08	 cmp	 BYTE PTR _arg1$[ebp], al
  00014	75 03		 jne	 SHORT $LN1@IncreasePa

; 94   : 	{
; 95   : 		this->unk_10++;

  00016	01 41 10	 add	 DWORD PTR [ecx+16], eax
$LN1@IncreasePa:

; 96   : 	}
; 97   : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?IncreasePacketCount@CHackToolPacket@@QAEXEK@Z ENDP	; CHackToolPacket::IncreasePacketCount
_TEXT	ENDS
PUBLIC	?GetState@CHackToolPacket@@QAEXPAHPAK1@Z	; CHackToolPacket::GetState
; Function compile flags: /Ogtp
;	COMDAT ?GetState@CHackToolPacket@@QAEXPAHPAK1@Z
_TEXT	SEGMENT
_PacketCount$ = 8					; size = 4
_arg2$ = 12						; size = 4
_arg3$ = 16						; size = 4
?GetState@CHackToolPacket@@QAEXPAHPAK1@Z PROC		; CHackToolPacket::GetState, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  : 	*PacketCount = this->m_iPacketCount;

  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	8b 55 08	 mov	 edx, DWORD PTR _PacketCount$[ebp]
  00009	89 02		 mov	 DWORD PTR [edx], eax

; 102  : 	*arg2 = this->unk_10;

  0000b	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000e	8b 55 0c	 mov	 edx, DWORD PTR _arg2$[ebp]
  00011	89 02		 mov	 DWORD PTR [edx], eax

; 103  : 	*arg3 = this->unk_14;

  00013	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _arg3$[ebp]
  00019	89 01		 mov	 DWORD PTR [ecx], eax

; 104  : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?GetState@CHackToolPacket@@QAEXPAHPAK1@Z ENDP		; CHackToolPacket::GetState
_TEXT	ENDS
END
