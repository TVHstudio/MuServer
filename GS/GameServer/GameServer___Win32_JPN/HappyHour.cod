; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\HappyHour.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?HappyHour@@3VcHappyHour@@A			; HappyHour
_BSS	SEGMENT
?HappyHour@@3VcHappyHour@@A DB 0814H DUP (?)		; HappyHour
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadFile@cHappyHour@@QAEXXZ			; cHappyHour::LoadFile
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
; File e:\work\tranet_version\gs\gameserver\happyhour.cpp
CONST	SEGMENT
??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@
CONST	SEGMENT
??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@ DB '..\Data\Z'
	DB	'tData\Events\HappyHour.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadFile@cHappyHour@@QAEXXZ
_TEXT	SEGMENT
_Flag$ = -280						; size = 4
_n$202903 = -276					; size = 16
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?LoadFile@cHappyHour@@QAEXXZ PROC			; cHappyHour::LoadFile, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 27   : 	FILE * file = fopen(HH_DIR,"r");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@
  00020	8b f1		 mov	 esi, ecx
  00022	e8 00 00 00 00	 call	 _fopen
  00027	8b f8		 mov	 edi, eax

; 28   : 
; 29   : 	if(file == NULL)

  00029	33 db		 xor	 ebx, ebx
  0002b	83 c4 08	 add	 esp, 8
  0002e	3b fb		 cmp	 edi, ebx
  00030	75 1a		 jne	 SHORT $LN5@LoadFile

; 30   : 	{
; 31   : 		MessageBoxA(0,HH_DIR,"LOAD FILE ERROR",0);

  00032	53		 push	 ebx
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@
  0003d	53		 push	 ebx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 32   : 		ExitProcess(1);

  00044	6a 01		 push	 1
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN11@LoadFile:
$LN5@LoadFile:

; 33   : 		return;
; 34   : 	}
; 35   : 
; 36   : 	char Buff[256];
; 37   : 	int Flag = 0;
; 38   : 	this->Count = 0;
; 39   : 
; 40   : 	while(!feof(file)) // Проверяем есть ли строка ?документ?

  0004c	57		 push	 edi
  0004d	89 9d e8 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], ebx
  00053	89 9e 10 08 00
	00		 mov	 DWORD PTR [esi+2064], ebx
  00059	e8 00 00 00 00	 call	 _feof
  0005e	83 c4 04	 add	 esp, 4
  00061	85 c0		 test	 eax, eax
  00063	0f 85 03 01 00
	00		 jne	 $LN3@LoadFile
  00069	8d a4 24 00 00
	00 00		 npad	 7
$LL4@LoadFile:

; 41   : 	{
; 42   : 		fgets(Buff,256,file);//Функция читает текущу?строку

  00070	57		 push	 edi
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00077	68 00 01 00 00	 push	 256			; 00000100H
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _fgets

; 43   : 		if(Zt_IsBadFileLine(Buff, Flag)) //Вспомогательная функция

  00082	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  00088	51		 push	 ecx
  00089	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  00095	83 c4 14	 add	 esp, 20			; 00000014H
  00098	84 c0		 test	 al, al
  0009a	0f 85 bb 00 00
	00		 jne	 $LN1@LoadFile

; 44   : 			continue;
; 45   : 		if(Flag == 1)

  000a0	83 bd e8 fe ff
	ff 01		 cmp	 DWORD PTR _Flag$[ebp], 1
  000a7	0f 85 ae 00 00
	00		 jne	 $LN1@LoadFile

; 46   : 		{
; 47   : 			this->HappyStruct[this->Count].Hour		= 0;

  000ad	8b 86 10 08 00
	00		 mov	 eax, DWORD PTR [esi+2064]
  000b3	40		 inc	 eax
  000b4	03 c0		 add	 eax, eax
  000b6	89 1c c6	 mov	 DWORD PTR [esi+eax*8], ebx

; 48   : 			this->HappyStruct[this->Count].Min		= 0;

  000b9	8b 8e 10 08 00
	00		 mov	 ecx, DWORD PTR [esi+2064]
  000bf	03 c9		 add	 ecx, ecx
  000c1	89 5c ce 14	 mov	 DWORD PTR [esi+ecx*8+20], ebx

; 49   : 			this->HappyStruct[this->Count].EndHour	= 0;

  000c5	8b 96 10 08 00
	00		 mov	 edx, DWORD PTR [esi+2064]
  000cb	03 d2		 add	 edx, edx
  000cd	89 5c d6 18	 mov	 DWORD PTR [esi+edx*8+24], ebx

; 50   : 			this->HappyStruct[this->Count].EndMin	= 0;

  000d1	8b 86 10 08 00
	00		 mov	 eax, DWORD PTR [esi+2064]
  000d7	03 c0		 add	 eax, eax

; 51   : 
; 52   : 			int n[4];
; 53   : 			sscanf(Buff, "%d %d %d %d", &n[0], &n[1], &n[2], &n[3]);

  000d9	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202903[ebp+12]
  000df	51		 push	 ecx
  000e0	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _n$202903[ebp+8]
  000e6	52		 push	 edx
  000e7	89 5c c6 1c	 mov	 DWORD PTR [esi+eax*8+28], ebx
  000eb	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _n$202903[ebp+4]
  000f1	50		 push	 eax
  000f2	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _n$202903[ebp]
  000f8	51		 push	 ecx
  000f9	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 _sscanf

; 54   : 			this->HappyStruct[this->Count].Hour		= n[0];

  0010a	8b 86 10 08 00
	00		 mov	 eax, DWORD PTR [esi+2064]
  00110	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _n$202903[ebp]
  00116	40		 inc	 eax
  00117	03 c0		 add	 eax, eax
  00119	89 0c c6	 mov	 DWORD PTR [esi+eax*8], ecx

; 55   : 			this->HappyStruct[this->Count].Min		= n[1];

  0011c	8b 96 10 08 00
	00		 mov	 edx, DWORD PTR [esi+2064]
  00122	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _n$202903[ebp+4]
  00128	03 d2		 add	 edx, edx
  0012a	89 44 d6 14	 mov	 DWORD PTR [esi+edx*8+20], eax

; 56   : 			this->HappyStruct[this->Count].EndHour	= n[2];

  0012e	8b 8e 10 08 00
	00		 mov	 ecx, DWORD PTR [esi+2064]
  00134	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _n$202903[ebp+8]
  0013a	03 c9		 add	 ecx, ecx
  0013c	89 54 ce 18	 mov	 DWORD PTR [esi+ecx*8+24], edx

; 57   : 			this->HappyStruct[this->Count].EndMin	= n[3];

  00140	8b 86 10 08 00
	00		 mov	 eax, DWORD PTR [esi+2064]
  00146	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$202903[ebp+12]
  0014c	03 c0		 add	 eax, eax
  0014e	83 c4 18	 add	 esp, 24			; 00000018H
  00151	89 4c c6 1c	 mov	 DWORD PTR [esi+eax*8+28], ecx

; 58   : 			this->Count++;

  00155	ff 86 10 08 00
	00		 inc	 DWORD PTR [esi+2064]
$LN1@LoadFile:

; 33   : 		return;
; 34   : 	}
; 35   : 
; 36   : 	char Buff[256];
; 37   : 	int Flag = 0;
; 38   : 	this->Count = 0;
; 39   : 
; 40   : 	while(!feof(file)) // Проверяем есть ли строка ?документ?

  0015b	57		 push	 edi
  0015c	e8 00 00 00 00	 call	 _feof
  00161	83 c4 04	 add	 esp, 4
  00164	85 c0		 test	 eax, eax
  00166	0f 84 04 ff ff
	ff		 je	 $LL4@LoadFile
$LN3@LoadFile:

; 59   : 		}
; 60   : 	}
; 61   : 	fclose(file);

  0016c	57		 push	 edi
  0016d	e8 00 00 00 00	 call	 _fclose

; 62   : }

  00172	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00175	83 c4 04	 add	 esp, 4
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	33 cd		 xor	 ecx, ebp
  0017c	5b		 pop	 ebx
  0017d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
$LN10@LoadFile:
?LoadFile@cHappyHour@@QAEXXZ ENDP			; cHappyHour::LoadFile
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Timetick@cHappyHour@@QAEXXZ			; cHappyHour::Timetick
EXTRN	?GetText@CZtText@@QAEPADH@Z:PROC		; CZtText::GetText
EXTRN	?g_ZtText@@3VCZtText@@A:BYTE			; g_ZtText
EXTRN	?MessaageAllGlobal@@YAXPADZZ:PROC		; MessaageAllGlobal
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	?GetSecond@CTimerZt@@QAEHXZ:PROC		; CTimerZt::GetSecond
EXTRN	?g_TimerZt@@3VCTimerZt@@A:DWORD			; g_TimerZt
EXTRN	__imp__GetLocalTime@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Timetick@cHappyHour@@QAEXXZ
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
_i$202910 = -24						; size = 4
_time$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?Timetick@cHappyHour@@QAEXXZ PROC			; cHappyHour::Timetick, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 66   : 	SYSTEMTIME time;
; 67   : 	GetLocalTime(&time);

  00011	8d 45 ec	 lea	 eax, DWORD PTR _time$[ebp]
  00014	8b f1		 mov	 esi, ecx
  00016	50		 push	 eax

; 68   : 
; 69   : #if(NEWTIMEREX)
; 70   : 	if(g_TimerZt.GetSecond() == 00)
; 71   : #else
; 72   : 	if(time.wSecond == 00)
; 73   : #endif
; 74   : 	{
; 75   : 		for(int i = 0; i < this->Count; i++)

  00017	89 75 e4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TimerZt@@3VCTimerZt@@A ; g_TimerZt
  00025	e8 00 00 00 00	 call	 ?GetSecond@CTimerZt@@QAEHXZ ; CTimerZt::GetSecond
  0002a	85 c0		 test	 eax, eax
  0002c	0f 85 f2 04 00
	00		 jne	 $LN43@Timetick
  00032	89 45 e8	 mov	 DWORD PTR _i$202910[ebp], eax
  00035	39 86 10 08 00
	00		 cmp	 DWORD PTR [esi+2064], eax
  0003b	0f 8e e3 04 00
	00		 jle	 $LN43@Timetick
  00041	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00045	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00049	57		 push	 edi
  0004a	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
  0004d	53		 push	 ebx
  0004e	8b ff		 npad	 2
$LL74@Timetick:

; 76   : 		{
; 77   : #ifdef _MESSAGE_CONFIG_
; 78   : 			if(HappyStruct[i].Min > 5)

  00050	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00053	83 f9 05	 cmp	 ecx, 5
  00056	7e 3f		 jle	 SHORT $LN42@Timetick

; 79   : 			{
; 80   : 				for(int j=1; j <= 5; j++)

  00058	be 01 00 00 00	 mov	 esi, 1
  0005d	8d 49 00	 npad	 3
$LL41@Timetick:

; 81   : 				{
; 82   : 			
; 83   : 					if(HappyStruct[i].Hour == time.wHour && (HappyStruct[i].Min-j) == time.wMinute)

  00060	0f b7 c8	 movzx	 ecx, ax
  00063	39 0f		 cmp	 DWORD PTR [edi], ecx
  00065	75 22		 jne	 SHORT $LN40@Timetick
  00067	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0006a	0f b7 da	 movzx	 ebx, dx
  0006d	2b ce		 sub	 ecx, esi
  0006f	3b cb		 cmp	 ecx, ebx
  00071	75 16		 jne	 SHORT $LN40@Timetick

; 84   : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, j);

  00073	56		 push	 esi
  00074	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00079	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  0007e	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00082	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00086	83 c4 08	 add	 esp, 8
$LN40@Timetick:

; 79   : 			{
; 80   : 				for(int j=1; j <= 5; j++)

  00089	46		 inc	 esi
  0008a	83 fe 05	 cmp	 esi, 5
  0008d	7e d1		 jle	 SHORT $LL41@Timetick

; 85   : 				}
; 86   : 			}
; 87   : 			else if(HappyStruct[i].Min == 4)

  0008f	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00092	e9 e8 03 00 00	 jmp	 $LN68@Timetick
$LN42@Timetick:
  00097	83 f9 04	 cmp	 ecx, 4
  0009a	0f 85 b4 00 00
	00		 jne	 $LN36@Timetick

; 88   : 			{
; 89   : 					if(HappyStruct[i].Hour-1 == time.wHour && 59 == time.wMinute)

  000a0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a2	0f b7 d8	 movzx	 ebx, ax
  000a5	49		 dec	 ecx
  000a6	3b cb		 cmp	 ecx, ebx
  000a8	75 21		 jne	 SHORT $LN56@Timetick
  000aa	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  000af	66 3b ca	 cmp	 cx, dx
  000b2	75 17		 jne	 SHORT $LN56@Timetick

; 90   : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 5);

  000b4	6a 05		 push	 5
  000b6	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  000bb	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  000c0	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  000c4	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  000c8	83 c4 08	 add	 esp, 8
$LN56@Timetick:

; 91   : 					if(HappyStruct[i].Hour == time.wHour && 0 == time.wMinute)

  000cb	0f b7 c8	 movzx	 ecx, ax
  000ce	39 0f		 cmp	 DWORD PTR [edi], ecx
  000d0	75 1e		 jne	 SHORT $LN57@Timetick
  000d2	33 c9		 xor	 ecx, ecx
  000d4	66 3b ca	 cmp	 cx, dx
  000d7	75 17		 jne	 SHORT $LN57@Timetick

; 92   : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 4);

  000d9	6a 04		 push	 4
  000db	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  000e0	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  000e5	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  000e9	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  000ed	83 c4 08	 add	 esp, 8
$LN57@Timetick:

; 93   : 					if(HappyStruct[i].Hour == time.wHour && 1 == time.wMinute)

  000f0	0f b7 c8	 movzx	 ecx, ax
  000f3	39 0f		 cmp	 DWORD PTR [edi], ecx
  000f5	75 21		 jne	 SHORT $LN58@Timetick
  000f7	b9 01 00 00 00	 mov	 ecx, 1
  000fc	66 3b ca	 cmp	 cx, dx
  000ff	75 17		 jne	 SHORT $LN58@Timetick

; 94   : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 3);

  00101	6a 03		 push	 3
  00103	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00108	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  0010d	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00111	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00115	83 c4 08	 add	 esp, 8
$LN58@Timetick:

; 95   : 					if(HappyStruct[i].Hour == time.wHour && 2 == time.wMinute)

  00118	0f b7 c8	 movzx	 ecx, ax
  0011b	39 0f		 cmp	 DWORD PTR [edi], ecx
  0011d	75 20		 jne	 SHORT $LN60@Timetick
  0011f	b9 02 00 00 00	 mov	 ecx, 2
  00124	66 3b ca	 cmp	 cx, dx
  00127	75 16		 jne	 SHORT $LN60@Timetick

; 96   : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 2);

  00129	51		 push	 ecx
  0012a	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  0012f	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00134	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00138	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  0013c	83 c4 08	 add	 esp, 8
$LN60@Timetick:

; 97   : 					if(HappyStruct[i].Hour == time.wHour && 3 == time.wMinute)

  0013f	0f b7 c8	 movzx	 ecx, ax
  00142	39 0f		 cmp	 DWORD PTR [edi], ecx
  00144	0f 85 35 03 00
	00		 jne	 $LN68@Timetick
  0014a	b9 03 00 00 00	 mov	 ecx, 3

; 98   : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 1);
; 99   : 
; 100  : 			}

  0014f	e9 0f 03 00 00	 jmp	 $LN79@Timetick
$LN36@Timetick:

; 101  : 			else if(HappyStruct[i].Min == 3)

  00154	83 f9 03	 cmp	 ecx, 3
  00157	0f 85 b8 00 00
	00		 jne	 $LN29@Timetick

; 102  : 			{
; 103  : 					if(HappyStruct[i].Hour-1 == time.wHour && 58 == time.wMinute)

  0015d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0015f	0f b7 d8	 movzx	 ebx, ax
  00162	49		 dec	 ecx
  00163	3b cb		 cmp	 ecx, ebx
  00165	75 21		 jne	 SHORT $LN28@Timetick
  00167	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0016c	66 3b ca	 cmp	 cx, dx
  0016f	75 17		 jne	 SHORT $LN28@Timetick

; 104  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 5);

  00171	6a 05		 push	 5
  00173	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00178	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  0017d	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00181	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00185	83 c4 08	 add	 esp, 8
$LN28@Timetick:

; 105  : 					if(HappyStruct[i].Hour-1 == time.wHour && 59 == time.wMinute)

  00188	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0018a	0f b7 d8	 movzx	 ebx, ax
  0018d	49		 dec	 ecx
  0018e	3b cb		 cmp	 ecx, ebx
  00190	75 21		 jne	 SHORT $LN61@Timetick
  00192	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00197	66 3b ca	 cmp	 cx, dx
  0019a	75 17		 jne	 SHORT $LN61@Timetick

; 106  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 4);

  0019c	6a 04		 push	 4
  0019e	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  001a3	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  001a8	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  001ac	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  001b0	83 c4 08	 add	 esp, 8
$LN61@Timetick:

; 107  : 					if(HappyStruct[i].Hour == time.wHour && 0 == time.wMinute)

  001b3	0f b7 c8	 movzx	 ecx, ax
  001b6	39 0f		 cmp	 DWORD PTR [edi], ecx
  001b8	75 1e		 jne	 SHORT $LN62@Timetick
  001ba	33 c9		 xor	 ecx, ecx
  001bc	66 3b ca	 cmp	 cx, dx
  001bf	75 17		 jne	 SHORT $LN62@Timetick

; 108  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 3);

  001c1	6a 03		 push	 3
  001c3	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  001c8	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  001cd	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  001d1	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  001d5	83 c4 08	 add	 esp, 8
$LN62@Timetick:

; 109  : 					if(HappyStruct[i].Hour == time.wHour && 1 == time.wMinute)

  001d8	0f b7 c8	 movzx	 ecx, ax
  001db	39 0f		 cmp	 DWORD PTR [edi], ecx
  001dd	75 21		 jne	 SHORT $LN63@Timetick
  001df	b9 01 00 00 00	 mov	 ecx, 1
  001e4	66 3b ca	 cmp	 cx, dx
  001e7	75 17		 jne	 SHORT $LN63@Timetick

; 110  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 2);

  001e9	6a 02		 push	 2
  001eb	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  001f0	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  001f5	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  001f9	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  001fd	83 c4 08	 add	 esp, 8
$LN63@Timetick:

; 111  : 					if(HappyStruct[i].Hour == time.wHour && 2 == time.wMinute)

  00200	0f b7 c8	 movzx	 ecx, ax
  00203	39 0f		 cmp	 DWORD PTR [edi], ecx
  00205	0f 85 74 02 00
	00		 jne	 $LN68@Timetick
  0020b	b9 02 00 00 00	 mov	 ecx, 2

; 112  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 1);
; 113  : 			}

  00210	e9 4e 02 00 00	 jmp	 $LN79@Timetick
$LN29@Timetick:

; 114  : 			else if(HappyStruct[i].Min == 2)

  00215	83 f9 02	 cmp	 ecx, 2
  00218	0f 85 bb 00 00
	00		 jne	 $LN22@Timetick

; 115  : 			{
; 116  : 					if(HappyStruct[i].Hour-1 == time.wHour && 57 == time.wMinute)

  0021e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00220	0f b7 d8	 movzx	 ebx, ax
  00223	49		 dec	 ecx
  00224	3b cb		 cmp	 ecx, ebx
  00226	75 21		 jne	 SHORT $LN21@Timetick
  00228	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  0022d	66 3b ca	 cmp	 cx, dx
  00230	75 17		 jne	 SHORT $LN21@Timetick

; 117  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 5);

  00232	6a 05		 push	 5
  00234	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00239	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  0023e	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00242	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00246	83 c4 08	 add	 esp, 8
$LN21@Timetick:

; 118  : 					if(HappyStruct[i].Hour-1 == time.wHour && 58 == time.wMinute)

  00249	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0024b	0f b7 d8	 movzx	 ebx, ax
  0024e	49		 dec	 ecx
  0024f	3b cb		 cmp	 ecx, ebx
  00251	75 21		 jne	 SHORT $LN20@Timetick
  00253	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00258	66 3b ca	 cmp	 cx, dx
  0025b	75 17		 jne	 SHORT $LN20@Timetick

; 119  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 4);

  0025d	6a 04		 push	 4
  0025f	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00264	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00269	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  0026d	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00271	83 c4 08	 add	 esp, 8
$LN20@Timetick:

; 120  : 					if(HappyStruct[i].Hour-1 == time.wHour && 59 == time.wMinute)

  00274	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00276	0f b7 d8	 movzx	 ebx, ax
  00279	49		 dec	 ecx
  0027a	3b cb		 cmp	 ecx, ebx
  0027c	75 21		 jne	 SHORT $LN65@Timetick
  0027e	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00283	66 3b ca	 cmp	 cx, dx
  00286	75 17		 jne	 SHORT $LN65@Timetick

; 121  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 3);

  00288	6a 03		 push	 3
  0028a	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  0028f	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00294	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00298	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  0029c	83 c4 08	 add	 esp, 8
$LN65@Timetick:

; 122  : 					if(HappyStruct[i].Hour == time.wHour && 0 == time.wMinute)

  0029f	0f b7 c8	 movzx	 ecx, ax
  002a2	39 0f		 cmp	 DWORD PTR [edi], ecx
  002a4	75 1e		 jne	 SHORT $LN66@Timetick
  002a6	33 c9		 xor	 ecx, ecx
  002a8	66 3b ca	 cmp	 cx, dx
  002ab	75 17		 jne	 SHORT $LN66@Timetick

; 123  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 2);

  002ad	6a 02		 push	 2
  002af	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  002b4	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  002b9	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  002bd	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  002c1	83 c4 08	 add	 esp, 8
$LN66@Timetick:

; 124  : 					if(HappyStruct[i].Hour == time.wHour && 1 == time.wMinute)

  002c4	0f b7 c8	 movzx	 ecx, ax
  002c7	39 0f		 cmp	 DWORD PTR [edi], ecx
  002c9	0f 85 b0 01 00
	00		 jne	 $LN68@Timetick
  002cf	b9 01 00 00 00	 mov	 ecx, 1

; 125  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 1);
; 126  : 			}

  002d4	e9 8a 01 00 00	 jmp	 $LN79@Timetick
$LN22@Timetick:

; 127  : 			else if(HappyStruct[i].Min == 1)

  002d9	83 f9 01	 cmp	 ecx, 1
  002dc	0f 85 be 00 00
	00		 jne	 $LN15@Timetick

; 128  : 			{
; 129  : 					if(HappyStruct[i].Hour-1 == time.wHour && 56 == time.wMinute)

  002e2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002e4	0f b7 d8	 movzx	 ebx, ax
  002e7	49		 dec	 ecx
  002e8	3b cb		 cmp	 ecx, ebx
  002ea	75 21		 jne	 SHORT $LN14@Timetick
  002ec	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  002f1	66 3b ca	 cmp	 cx, dx
  002f4	75 17		 jne	 SHORT $LN14@Timetick

; 130  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 5);

  002f6	6a 05		 push	 5
  002f8	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  002fd	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00302	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00306	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  0030a	83 c4 08	 add	 esp, 8
$LN14@Timetick:

; 131  : 					if(HappyStruct[i].Hour-1 == time.wHour && 57 == time.wMinute)

  0030d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0030f	0f b7 d8	 movzx	 ebx, ax
  00312	49		 dec	 ecx
  00313	3b cb		 cmp	 ecx, ebx
  00315	75 21		 jne	 SHORT $LN13@Timetick
  00317	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  0031c	66 3b ca	 cmp	 cx, dx
  0031f	75 17		 jne	 SHORT $LN13@Timetick

; 132  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 4);

  00321	6a 04		 push	 4
  00323	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00328	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  0032d	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00331	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00335	83 c4 08	 add	 esp, 8
$LN13@Timetick:

; 133  : 					if(HappyStruct[i].Hour-1 == time.wHour && 58 == time.wMinute)

  00338	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0033a	0f b7 d8	 movzx	 ebx, ax
  0033d	49		 dec	 ecx
  0033e	3b cb		 cmp	 ecx, ebx
  00340	75 21		 jne	 SHORT $LN12@Timetick
  00342	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00347	66 3b ca	 cmp	 cx, dx
  0034a	75 17		 jne	 SHORT $LN12@Timetick

; 134  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 3);

  0034c	6a 03		 push	 3
  0034e	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00353	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00358	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  0035c	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00360	83 c4 08	 add	 esp, 8
$LN12@Timetick:

; 135  : 					if(HappyStruct[i].Hour-1 == time.wHour && 59 == time.wMinute)

  00363	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00365	0f b7 d8	 movzx	 ebx, ax
  00368	49		 dec	 ecx
  00369	3b cb		 cmp	 ecx, ebx
  0036b	75 21		 jne	 SHORT $LN67@Timetick
  0036d	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00372	66 3b ca	 cmp	 cx, dx
  00375	75 17		 jne	 SHORT $LN67@Timetick

; 136  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 2);

  00377	6a 02		 push	 2
  00379	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  0037e	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00383	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00387	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  0038b	83 c4 08	 add	 esp, 8
$LN67@Timetick:

; 137  : 					if(HappyStruct[i].Hour == time.wHour && 0 == time.wMinute)

  0038e	0f b7 c8	 movzx	 ecx, ax
  00391	39 0f		 cmp	 DWORD PTR [edi], ecx
  00393	0f 85 e6 00 00
	00		 jne	 $LN68@Timetick
  00399	33 c9		 xor	 ecx, ecx

; 138  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 1);
; 139  : 			}

  0039b	e9 c3 00 00 00	 jmp	 $LN79@Timetick
$LN15@Timetick:

; 140  : 			else if(HappyStruct[i].Min == 0)

  003a0	85 c9		 test	 ecx, ecx
  003a2	0f 85 d7 00 00
	00		 jne	 $LN68@Timetick

; 141  : 			{
; 142  : 					if(HappyStruct[i].Hour-1 == time.wHour && 55 == time.wMinute)

  003a8	8b 0f		 mov	 ecx, DWORD PTR [edi]
  003aa	0f b7 d8	 movzx	 ebx, ax
  003ad	49		 dec	 ecx
  003ae	3b cb		 cmp	 ecx, ebx
  003b0	75 21		 jne	 SHORT $LN7@Timetick
  003b2	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  003b7	66 3b ca	 cmp	 cx, dx
  003ba	75 17		 jne	 SHORT $LN7@Timetick

; 143  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 5);

  003bc	6a 05		 push	 5
  003be	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  003c3	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  003c8	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  003cc	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  003d0	83 c4 08	 add	 esp, 8
$LN7@Timetick:

; 144  : 					if(HappyStruct[i].Hour-1 == time.wHour && 56 == time.wMinute)

  003d3	8b 0f		 mov	 ecx, DWORD PTR [edi]
  003d5	0f b7 d8	 movzx	 ebx, ax
  003d8	49		 dec	 ecx
  003d9	3b cb		 cmp	 ecx, ebx
  003db	75 21		 jne	 SHORT $LN6@Timetick
  003dd	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  003e2	66 3b ca	 cmp	 cx, dx
  003e5	75 17		 jne	 SHORT $LN6@Timetick

; 145  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 4);

  003e7	6a 04		 push	 4
  003e9	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  003ee	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  003f3	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  003f7	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  003fb	83 c4 08	 add	 esp, 8
$LN6@Timetick:

; 146  : 					if(HappyStruct[i].Hour-1 == time.wHour && 57 == time.wMinute)

  003fe	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00400	0f b7 d8	 movzx	 ebx, ax
  00403	49		 dec	 ecx
  00404	3b cb		 cmp	 ecx, ebx
  00406	75 21		 jne	 SHORT $LN5@Timetick
  00408	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  0040d	66 3b ca	 cmp	 cx, dx
  00410	75 17		 jne	 SHORT $LN5@Timetick

; 147  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 3);

  00412	6a 03		 push	 3
  00414	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00419	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  0041e	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00422	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00426	83 c4 08	 add	 esp, 8
$LN5@Timetick:

; 148  : 					if(HappyStruct[i].Hour-1 == time.wHour && 58 == time.wMinute)

  00429	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0042b	0f b7 d8	 movzx	 ebx, ax
  0042e	49		 dec	 ecx
  0042f	3b cb		 cmp	 ecx, ebx
  00431	75 21		 jne	 SHORT $LN4@Timetick
  00433	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00438	66 3b ca	 cmp	 cx, dx
  0043b	75 17		 jne	 SHORT $LN4@Timetick

; 149  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 2);

  0043d	6a 02		 push	 2
  0043f	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  00444	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00449	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  0044d	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  00451	83 c4 08	 add	 esp, 8
$LN4@Timetick:

; 150  : 					if(HappyStruct[i].Hour-1 == time.wHour && 59 == time.wMinute)

  00454	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00456	0f b7 d8	 movzx	 ebx, ax
  00459	49		 dec	 ecx
  0045a	3b cb		 cmp	 ecx, ebx
  0045c	75 21		 jne	 SHORT $LN68@Timetick
  0045e	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
$LN79@Timetick:
  00463	66 3b ca	 cmp	 cx, dx
  00466	75 17		 jne	 SHORT $LN68@Timetick

; 151  : 						MessaageAllGlobal(ZtConfig.MessageConfig.HappyHour, 1);

  00468	6a 01		 push	 1
  0046a	68 68 0a 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+2664
  0046f	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  00474	66 8b 55 f6	 mov	 dx, WORD PTR _time$[ebp+10]
  00478	66 8b 45 f4	 mov	 ax, WORD PTR _time$[ebp+8]
  0047c	83 c4 08	 add	 esp, 8
$LN68@Timetick:

; 152  : 			
; 153  : 			}
; 154  : #endif
; 155  : 			if(HappyStruct[i].Hour == time.wHour && HappyStruct[i].Min == time.wMinute)

  0047f	0f b7 c8	 movzx	 ecx, ax
  00482	39 0f		 cmp	 DWORD PTR [edi], ecx
  00484	75 08		 jne	 SHORT $LN2@Timetick
  00486	0f b7 da	 movzx	 ebx, dx
  00489	39 5f 04	 cmp	 DWORD PTR [edi+4], ebx
  0048c	74 34		 je	 SHORT $LN51@Timetick
$LN2@Timetick:

; 160  : 				break;
; 161  : 			}
; 162  : 			if(HappyStruct[i].EndHour == time.wHour && HappyStruct[i].EndMin == time.wMinute)

  0048e	39 4f 08	 cmp	 DWORD PTR [edi+8], ecx
  00491	75 08		 jne	 SHORT $LN44@Timetick
  00493	0f b7 ca	 movzx	 ecx, dx
  00496	39 4f 0c	 cmp	 DWORD PTR [edi+12], ecx
  00499	74 6e		 je	 SHORT $LN52@Timetick
$LN44@Timetick:

; 68   : 
; 69   : #if(NEWTIMEREX)
; 70   : 	if(g_TimerZt.GetSecond() == 00)
; 71   : #else
; 72   : 	if(time.wSecond == 00)
; 73   : #endif
; 74   : 	{
; 75   : 		for(int i = 0; i < this->Count; i++)

  0049b	8b 4d e8	 mov	 ecx, DWORD PTR _i$202910[ebp]
  0049e	41		 inc	 ecx
  0049f	83 c7 10	 add	 edi, 16			; 00000010H
  004a2	89 4d e8	 mov	 DWORD PTR _i$202910[ebp], ecx
  004a5	3b 8e 10 08 00
	00		 cmp	 ecx, DWORD PTR [esi+2064]
  004ab	0f 8c 9f fb ff
	ff		 jl	 $LL74@Timetick
  004b1	5b		 pop	 ebx
  004b2	5f		 pop	 edi
  004b3	5e		 pop	 esi

; 166  : 				break;
; 167  : 			}
; 168  : 		}
; 169  : 	}
; 170  : }

  004b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b7	33 cd		 xor	 ecx, ebp
  004b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004be	8b e5		 mov	 esp, ebp
  004c0	5d		 pop	 ebp
  004c1	c3		 ret	 0
$LN51@Timetick:

; 156  : 			{
; 157  : 				this->StartHappyHour = true;
; 158  : 				MessaageAllGlobal(g_ZtText.GetText(99));

  004c2	6a 63		 push	 99			; 00000063H
  004c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  004c9	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1
  004cd	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  004d2	50		 push	 eax
  004d3	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal

; 159  : 				MessaageAllGlobal(g_ZtText.GetText(100),PlusExp,PlusDrop);

  004d8	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  004db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  004de	83 c4 04	 add	 esp, 4
  004e1	52		 push	 edx
  004e2	50		 push	 eax
  004e3	6a 64		 push	 100			; 00000064H
  004e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  004ea	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  004ef	50		 push	 eax
  004f0	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  004f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f8	5b		 pop	 ebx
  004f9	5f		 pop	 edi
  004fa	5e		 pop	 esi

; 166  : 				break;
; 167  : 			}
; 168  : 		}
; 169  : 	}
; 170  : }

  004fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004fe	33 cd		 xor	 ecx, ebp
  00500	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00505	8b e5		 mov	 esp, ebp
  00507	5d		 pop	 ebp
  00508	c3		 ret	 0
$LN52@Timetick:

; 163  : 			{
; 164  : 				MessaageAllGlobal(g_ZtText.GetText(101));

  00509	6a 65		 push	 101			; 00000065H
  0050b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00510	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00515	50		 push	 eax
  00516	e8 00 00 00 00	 call	 ?MessaageAllGlobal@@YAXPADZZ ; MessaageAllGlobal
  0051b	83 c4 04	 add	 esp, 4
  0051e	5b		 pop	 ebx

; 165  : 				this->StartHappyHour = false;

  0051f	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00523	5f		 pop	 edi
$LN43@Timetick:

; 166  : 				break;
; 167  : 			}
; 168  : 		}
; 169  : 	}
; 170  : }

  00524	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00527	33 cd		 xor	 ecx, ebp
  00529	5e		 pop	 esi
  0052a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0052f	8b e5		 mov	 esp, ebp
  00531	5d		 pop	 ebp
  00532	c3		 ret	 0
?Timetick@cHappyHour@@QAEXXZ ENDP			; cHappyHour::Timetick
_TEXT	ENDS
PUBLIC	?UserBonusExp@cHappyHour@@QAEXAA_J@Z		; cHappyHour::UserBonusExp
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Ogtp
;	COMDAT ?UserBonusExp@cHappyHour@@QAEXAA_J@Z
_TEXT	SEGMENT
_Experience$ = 8					; size = 4
?UserBonusExp@cHappyHour@@QAEXAA_J@Z PROC		; cHappyHour::UserBonusExp, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 174  : 	if(!this->Enable || !this->StartHappyHour) return;

  00003	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00006	74 35		 je	 SHORT $LN1@UserBonusE
  00008	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0000c	74 2f		 je	 SHORT $LN1@UserBonusE

; 175  : 
; 176  : 	Experience += ( Experience * this->PlusExp ) / 100;

  0000e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	8b 75 08	 mov	 esi, DWORD PTR _Experience$[ebp]
  00016	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00019	57		 push	 edi
  0001a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001c	53		 push	 ebx
  0001d	99		 cdq
  0001e	57		 push	 edi
  0001f	52		 push	 edx
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __allmul
  00026	6a 00		 push	 0
  00028	6a 64		 push	 100			; 00000064H
  0002a	52		 push	 edx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 __alldiv
  00031	03 c7		 add	 eax, edi
  00033	13 d3		 adc	 edx, ebx
  00035	5f		 pop	 edi
  00036	89 06		 mov	 DWORD PTR [esi], eax
  00038	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
$LN1@UserBonusE:

; 177  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?UserBonusExp@cHappyHour@@QAEXAA_J@Z ENDP		; cHappyHour::UserBonusExp
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?UserBonusZen@cHappyHour@@QAEXAAM@Z		; cHappyHour::UserBonusZen
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?UserBonusZen@cHappyHour@@QAEXAAM@Z
_TEXT	SEGMENT
_money$ = 8						; size = 4
?UserBonusZen@cHappyHour@@QAEXAAM@Z PROC		; cHappyHour::UserBonusZen, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  : 	if(!this->Enable || !this->StartHappyHour) return;

  00003	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00006	74 18		 je	 SHORT $LN1@UserBonusZ
  00008	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0000c	74 12		 je	 SHORT $LN1@UserBonusZ

; 182  : 
; 183  : 	money += ( money * this->PlusDrop ) / 100;

  0000e	db 41 08	 fild	 DWORD PTR [ecx+8]
  00011	8b 45 08	 mov	 eax, DWORD PTR _money$[ebp]
  00014	d8 08		 fmul	 DWORD PTR [eax]
  00016	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0001c	d8 00		 fadd	 DWORD PTR [eax]
  0001e	d9 18		 fstp	 DWORD PTR [eax]
$LN1@UserBonusZ:

; 184  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?UserBonusZen@cHappyHour@@QAEXAAM@Z ENDP		; cHappyHour::UserBonusZen
_TEXT	ENDS
PUBLIC	??_C@_08NPPHPMEF@PlusDrop?$AA@			; `string'
PUBLIC	??_C@_07LPGHBLLN@PlusExp?$AA@			; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	?LoadConfig@cHappyHour@@QAEXXZ			; cHappyHour::LoadConfig
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_08NPPHPMEF@PlusDrop?$AA@
CONST	SEGMENT
??_C@_08NPPHPMEF@PlusDrop?$AA@ DB 'PlusDrop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LPGHBLLN@PlusExp?$AA@
CONST	SEGMENT
??_C@_07LPGHBLLN@PlusExp?$AA@ DB 'PlusExp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadConfig@cHappyHour@@QAEXXZ
_TEXT	SEGMENT
?LoadConfig@cHappyHour@@QAEXXZ PROC			; cHappyHour::LoadConfig, COMDAT
; _this$ = ecx

; 15   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 16   : 	this->Enable = GetPrivateProfileInt("Common","Enable",1,HH_DIR);

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@
  0000d	6a 01		 push	 1
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00019	8b f1		 mov	 esi, ecx
  0001b	ff d7		 call	 edi

; 17   : 	this->PlusExp = GetPrivateProfileInt("Common","PlusExp",10,HH_DIR);

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@
  00022	6a 0a		 push	 10			; 0000000aH
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_07LPGHBLLN@PlusExp?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0002e	89 06		 mov	 DWORD PTR [esi], eax
  00030	ff d7		 call	 edi

; 18   : 	this->PlusDrop = GetPrivateProfileInt("Common","PlusDrop",10,HH_DIR);

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ICNFBOAK@?4?4?2Data?2ZtData?2Events?2HappyHour?4@
  00037	6a 0a		 push	 10			; 0000000aH
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_08NPPHPMEF@PlusDrop?$AA@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00046	ff d7		 call	 edi

; 19   : 
; 20   : 	this->LoadFile();

  00048	8b ce		 mov	 ecx, esi
  0004a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004d	e8 00 00 00 00	 call	 ?LoadFile@cHappyHour@@QAEXXZ ; cHappyHour::LoadFile
  00052	5f		 pop	 edi

; 21   : 
; 22   : 	this->StartHappyHour = false;

  00053	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00057	5e		 pop	 esi

; 23   : }

  00058	c3		 ret	 0
?LoadConfig@cHappyHour@@QAEXXZ ENDP			; cHappyHour::LoadConfig
_TEXT	ENDS
END
