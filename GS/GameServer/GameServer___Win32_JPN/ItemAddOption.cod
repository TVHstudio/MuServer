; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ItemAddOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CItemAddOption@@6B@				; CItemAddOption::`vftable'
PUBLIC	??1CItemAddOption@@UAE@XZ			; CItemAddOption::~CItemAddOption
PUBLIC	??_R4CItemAddOption@@6B@			; CItemAddOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCItemAddOption@@@8			; CItemAddOption `RTTI Type Descriptor'
PUBLIC	??_R3CItemAddOption@@8				; CItemAddOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CItemAddOption@@8				; CItemAddOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CItemAddOption@@8			; CItemAddOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECItemAddOption@@UAEPAXI@Z:PROC		; CItemAddOption::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CItemAddOption@@8
; File e:\work\tranet_version\gs\gameserver\itemaddoption.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CItemAddOption@@8 DD FLAT:??_R0?AVCItemAddOption@@@8 ; CItemAddOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CItemAddOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CItemAddOption@@8
rdata$r	SEGMENT
??_R2CItemAddOption@@8 DD FLAT:??_R1A@?0A@EA@CItemAddOption@@8 ; CItemAddOption::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CItemAddOption@@8
rdata$r	SEGMENT
??_R3CItemAddOption@@8 DD 00H				; CItemAddOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CItemAddOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCItemAddOption@@@8
_DATA	SEGMENT
??_R0?AVCItemAddOption@@@8 DD FLAT:??_7type_info@@6B@	; CItemAddOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCItemAddOption@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CItemAddOption@@6B@
rdata$r	SEGMENT
??_R4CItemAddOption@@6B@ DD 00H				; CItemAddOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCItemAddOption@@@8
	DD	FLAT:??_R3CItemAddOption@@8
rdata$r	ENDS
;	COMDAT ??_7CItemAddOption@@6B@
CONST	SEGMENT
??_7CItemAddOption@@6B@ DD FLAT:??_R4CItemAddOption@@6B@ ; CItemAddOption::`vftable'
	DD	FLAT:??_ECItemAddOption@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CItemAddOption@@UAE@XZ
_TEXT	SEGMENT
??1CItemAddOption@@UAE@XZ PROC				; CItemAddOption::~CItemAddOption, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CItemAddOption@@6B@

; 18   : 	return;
; 19   : }

  00006	c3		 ret	 0
??1CItemAddOption@@UAE@XZ ENDP				; CItemAddOption::~CItemAddOption
_TEXT	ENDS
PUBLIC	?Initialize@CItemAddOption@@QAEXXZ		; CItemAddOption::Initialize
; Function compile flags: /Ogtp
;	COMDAT ?Initialize@CItemAddOption@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CItemAddOption@@QAEXXZ PROC			; CItemAddOption::Initialize, COMDAT
; _this$ = ecx

; 178  : 	for ( int i=0;i<MAX_ITEM_ADD_OPTION;i++)

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00003	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  00008	33 c9		 xor	 ecx, ecx
  0000a	56		 push	 esi
  0000b	eb 03 8d 49 00	 npad	 5
$LL3@Initialize:

; 179  : 	{
; 180  : 		this->m_ItemAddOption[i].iItemNumber = 0;
; 181  : 		this->m_ItemAddOption[i].iItemType = 0;
; 182  : 		this->m_ItemAddOption[i].iItemIndex = 0;
; 183  : 		this->m_ItemAddOption[i].wEffectType1 = 0;

  00010	33 f6		 xor	 esi, esi
  00012	89 48 fc	 mov	 DWORD PTR [eax-4], ecx
  00015	89 08		 mov	 DWORD PTR [eax], ecx
  00017	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001a	66 89 70 f6	 mov	 WORD PTR [eax-10], si

; 184  : 		this->m_ItemAddOption[i].iEffectValue1 = 0;

  0001e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 185  : 		this->m_ItemAddOption[i].wEffectType2 = 0;

  00021	66 89 70 f8	 mov	 WORD PTR [eax-8], si

; 186  : 		this->m_ItemAddOption[i].iEffectValue2 = 0;

  00025	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 187  : 		this->m_ItemAddOption[i].iEffectValidTime = 0;

  00028	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0002b	83 c0 20	 add	 eax, 32			; 00000020H
  0002e	4a		 dec	 edx
  0002f	75 df		 jne	 SHORT $LL3@Initialize
  00031	5e		 pop	 esi

; 188  : 	}
; 189  : }

  00032	c3		 ret	 0
?Initialize@CItemAddOption@@QAEXXZ ENDP			; CItemAddOption::Initialize
_TEXT	ENDS
PUBLIC	?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z ; CItemAddOption::SendItemUse
EXTRN	?GCUseEffectItem@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; GCUseEffectItem
; Function compile flags: /Ogtp
;	COMDAT ?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iItemNumber$ = 12					; size = 4
_iOptionType$ = 16					; size = 4
_iEffectType$ = 20					; size = 4
_iEffectValue$ = 24					; size = 4
_iValidTime$ = 28					; size = 4
?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z PROC ; CItemAddOption::SendItemUse, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 371  : 	if ( lpObj == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN1@SendItemUs

; 372  : 	{
; 373  : 		return;
; 374  : 	}
; 375  : 	
; 376  : 	if ( iItemNumber== 0 || iEffectType == 0 )

  0000a	83 7d 0c 00	 cmp	 DWORD PTR _iItemNumber$[ebp], 0
  0000e	74 1b		 je	 SHORT $LN1@SendItemUs
  00010	8b 45 14	 mov	 eax, DWORD PTR _iEffectType$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	74 14		 je	 SHORT $LN1@SendItemUs

; 377  : 	{
; 378  : 		return;
; 379  : 	}
; 380  : 
; 381  : 	GCUseEffectItem(lpObj, 0, iOptionType, iEffectType, iValidTime);

  00017	8b 55 1c	 mov	 edx, DWORD PTR _iValidTime$[ebp]
  0001a	52		 push	 edx
  0001b	50		 push	 eax
  0001c	8b 45 10	 mov	 eax, DWORD PTR _iOptionType$[ebp]
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?GCUseEffectItem@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; GCUseEffectItem
  00028	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@SendItemUs:

; 382  : }

  0002b	5d		 pop	 ebp
  0002c	c2 18 00	 ret	 24			; 00000018H
?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z ENDP ; CItemAddOption::SendItemUse
_TEXT	ENDS
PUBLIC	?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
;	COMDAT ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
tv290 = 8						; size = 4
tv262 = 8						; size = 4
_lpObj$ = 8						; size = 4
_iEffectType$ = 12					; size = 4
_iEffectValue$ = 16					; size = 4
?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z PROC ; CItemAddOption::_SetItemEffect, COMDAT
; _this$ = ecx

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 475  : 	if ( iEffectType <= 0 )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iEffectType$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	7f 06		 jg	 SHORT $LN16@SetItemEff

; 476  : 		return false;

  0000a	32 c0		 xor	 al, al

; 550  : }

  0000c	5d		 pop	 ebp
  0000d	c2 0c 00	 ret	 12			; 0000000cH
$LN16@SetItemEff:

; 477  : 
; 478  : 	switch ( iEffectType )

  00010	83 c0 fe	 add	 eax, -2			; fffffffeH
  00013	56		 push	 esi
  00014	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00017	0f 87 e6 01 00
	00		 ja	 $LN1@SetItemEff
  0001d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@SetItemEff[eax*4]
$LN13@SetItemEff:

; 479  : 	{
; 480  : 		case ADD_OPTION_LIFE:
; 481  : 			lpObj->AddLife += iEffectValue;

  00024	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00027	8b 45 10	 mov	 eax, DWORD PTR _iEffectValue$[ebp]

; 482  : 			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield));

  0002a	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00030	01 86 4c 01 00
	00		 add	 DWORD PTR [esi+332], eax
  00036	8b 8e 4c 01 00
	00		 mov	 ecx, DWORD PTR [esi+332]
  0003c	8b 96 5c 01 00
	00		 mov	 edx, DWORD PTR [esi+348]
  00042	03 96 58 01 00
	00		 add	 edx, DWORD PTR [esi+344]
  00048	89 4d 08	 mov	 DWORD PTR tv262[ebp], ecx
  0004b	da 45 08	 fiadd	 DWORD PTR tv262[ebp]
  0004e	52		 push	 edx
  0004f	6a 00		 push	 0
  00051	68 fe 00 00 00	 push	 254			; 000000feH
  00056	e8 00 00 00 00	 call	 __ftol2_sse
  0005b	50		 push	 eax
  0005c	8b 06		 mov	 eax, DWORD PTR [esi]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 483  : 			GCReFillSend(lpObj->m_Index, (lpObj->Life), -1, 0, (lpObj->iShield));

  00064	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0006a	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  00070	83 c4 14	 add	 esp, 20			; 00000014H
  00073	51		 push	 ecx
  00074	6a 00		 push	 0
  00076	68 ff 00 00 00	 push	 255			; 000000ffH
  0007b	e8 00 00 00 00	 call	 __ftol2_sse
  00080	8b 16		 mov	 edx, DWORD PTR [esi]
  00082	50		 push	 eax
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00089	83 c4 14	 add	 esp, 20			; 00000014H

; 547  : 	}
; 548  : 
; 549  : 	return true;

  0008c	b0 01		 mov	 al, 1
  0008e	5e		 pop	 esi

; 550  : }

  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
$LN12@SetItemEff:

; 484  : 			break;
; 485  : 
; 486  : 		case ADD_OPTION_MANA:
; 487  : 			lpObj->AddMana += iEffectValue;

  00093	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00096	8b 45 10	 mov	 eax, DWORD PTR _iEffectValue$[ebp]

; 488  : 			GCManaSend(lpObj->m_Index, (lpObj->AddMana + lpObj->MaxMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));

  00099	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  0009f	01 86 50 01 00
	00		 add	 DWORD PTR [esi+336], eax
  000a5	8b 8e 50 01 00
	00		 mov	 ecx, DWORD PTR [esi+336]
  000ab	8b 96 30 01 00
	00		 mov	 edx, DWORD PTR [esi+304]
  000b1	03 96 2c 01 00
	00		 add	 edx, DWORD PTR [esi+300]
  000b7	89 4d 08	 mov	 DWORD PTR tv290[ebp], ecx
  000ba	da 45 08	 fiadd	 DWORD PTR tv290[ebp]
  000bd	52		 push	 edx
  000be	6a 00		 push	 0
  000c0	68 fe 00 00 00	 push	 254			; 000000feH
  000c5	e8 00 00 00 00	 call	 __ftol2_sse
  000ca	50		 push	 eax
  000cb	8b 06		 mov	 eax, DWORD PTR [esi]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 489  : 			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);

  000d3	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  000d9	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  000df	83 c4 14	 add	 esp, 20			; 00000014H
  000e2	51		 push	 ecx
  000e3	6a 00		 push	 0
  000e5	68 ff 00 00 00	 push	 255			; 000000ffH
  000ea	e8 00 00 00 00	 call	 __ftol2_sse
  000ef	8b 16		 mov	 edx, DWORD PTR [esi]
  000f1	50		 push	 eax
  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  000f8	83 c4 14	 add	 esp, 20			; 00000014H

; 547  : 	}
; 548  : 
; 549  : 	return true;

  000fb	b0 01		 mov	 al, 1
  000fd	5e		 pop	 esi

; 550  : }

  000fe	5d		 pop	 ebp
  000ff	c2 0c 00	 ret	 12			; 0000000cH
$LN11@SetItemEff:

; 490  : 			break;
; 491  : 
; 492  : 		case ADD_OPTION_ATTACK_DAMAGE:
; 493  : 			lpObj->m_AttackDamageMaxLeft += iEffectValue;

  00102	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00105	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  00108	01 88 78 04 00
	00		 add	 DWORD PTR [eax+1144], ecx

; 494  : 			lpObj->m_AttackDamageMinLeft += iEffectValue;

  0010e	01 88 7c 04 00
	00		 add	 DWORD PTR [eax+1148], ecx

; 495  : 			lpObj->m_AttackDamageMaxRight += iEffectValue;

  00114	01 88 80 04 00
	00		 add	 DWORD PTR [eax+1152], ecx

; 496  : 			lpObj->m_AttackDamageMinRight += iEffectValue;

  0011a	01 88 84 04 00
	00		 add	 DWORD PTR [eax+1156], ecx

; 535  : 			break;
; 536  : 
; 537  : 		case ADD_OPTION_WIZARDRY:
; 538  : 			lpObj->m_MagicDamageMin += iEffectValue;

  00120	01 88 68 04 00
	00		 add	 DWORD PTR [eax+1128], ecx

; 539  : 			lpObj->m_MagicDamageMax += iEffectValue;

  00126	01 88 6c 04 00
	00		 add	 DWORD PTR [eax+1132], ecx

; 547  : 	}
; 548  : 
; 549  : 	return true;

  0012c	b0 01		 mov	 al, 1
  0012e	5e		 pop	 esi

; 550  : }

  0012f	5d		 pop	 ebp
  00130	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SetItemEff:

; 497  : 			lpObj->m_MagicDamageMin += iEffectValue;
; 498  : 			lpObj->m_MagicDamageMax += iEffectValue;
; 499  : 			break;
; 500  : 
; 501  : 		/*case ADD_OPTION_SPEED:
; 502  : 			lpObj->m_AttackSpeed += iEffectValue;
; 503  : 			lpObj->m_MagicSpeed += iEffectValue;
; 504  : 			break;*/
; 505  : 
; 506  : 		case ADD_OPTION_DEFENSE:
; 507  : 			lpObj->m_Defense += iEffectValue * 10 / 20;

  00133	8b 45 10	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  00136	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00139	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0013c	03 c9		 add	 ecx, ecx
  0013e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00143	f7 e9		 imul	 ecx
  00145	c1 fa 03	 sar	 edx, 3
  00148	8b c2		 mov	 eax, edx
  0014a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0014d	03 c2		 add	 eax, edx
  0014f	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 547  : 	}
; 548  : 
; 549  : 	return true;

  00155	b0 01		 mov	 al, 1
  00157	5e		 pop	 esi

; 550  : }

  00158	5d		 pop	 ebp
  00159	c2 0c 00	 ret	 12			; 0000000cH
$LN9@SetItemEff:

; 508  : 			break;
; 509  : 
; 510  : 		case ADD_OPTION_STRENGTH:
; 511  : 			lpObj->AddStrength += iEffectValue;

  0015c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0015f	66 8b 4d 10	 mov	 cx, WORD PTR _iEffectValue$[ebp]
  00163	66 01 88 20 01
	00 00		 add	 WORD PTR [eax+288], cx

; 547  : 	}
; 548  : 
; 549  : 	return true;

  0016a	b0 01		 mov	 al, 1
  0016c	5e		 pop	 esi

; 550  : }

  0016d	5d		 pop	 ebp
  0016e	c2 0c 00	 ret	 12			; 0000000cH
$LN8@SetItemEff:

; 512  : 			break;
; 513  : 
; 514  : 		case ADD_OPTION_DEXTERITY:
; 515  : 			lpObj->AddDexterity += iEffectValue;

  00171	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00174	66 8b 55 10	 mov	 dx, WORD PTR _iEffectValue$[ebp]
  00178	66 01 90 22 01
	00 00		 add	 WORD PTR [eax+290], dx

; 547  : 	}
; 548  : 
; 549  : 	return true;

  0017f	b0 01		 mov	 al, 1
  00181	5e		 pop	 esi

; 550  : }

  00182	5d		 pop	 ebp
  00183	c2 0c 00	 ret	 12			; 0000000cH
$LN7@SetItemEff:

; 516  : 			break;
; 517  : 
; 518  : 		case ADD_OPTION_VITALITY:
; 519  : 			lpObj->AddVitality += iEffectValue;

  00186	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00189	66 8b 4d 10	 mov	 cx, WORD PTR _iEffectValue$[ebp]
  0018d	66 01 88 24 01
	00 00		 add	 WORD PTR [eax+292], cx

; 547  : 	}
; 548  : 
; 549  : 	return true;

  00194	b0 01		 mov	 al, 1
  00196	5e		 pop	 esi

; 550  : }

  00197	5d		 pop	 ebp
  00198	c2 0c 00	 ret	 12			; 0000000cH
$LN6@SetItemEff:

; 520  : 			break;
; 521  : 
; 522  : 		case ADD_OPTION_ENERGY:
; 523  : 			lpObj->AddEnergy += iEffectValue;

  0019b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0019e	66 8b 55 10	 mov	 dx, WORD PTR _iEffectValue$[ebp]
  001a2	66 01 90 26 01
	00 00		 add	 WORD PTR [eax+294], dx

; 547  : 	}
; 548  : 
; 549  : 	return true;

  001a9	b0 01		 mov	 al, 1
  001ab	5e		 pop	 esi

; 550  : }

  001ac	5d		 pop	 ebp
  001ad	c2 0c 00	 ret	 12			; 0000000cH
$LN5@SetItemEff:

; 524  : 			break;
; 525  : 
; 526  : 		case ADD_OPTION_LEADERSHIP:
; 527  : 			lpObj->AddLeadership += iEffectValue;

  001b0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001b3	66 8b 4d 10	 mov	 cx, WORD PTR _iEffectValue$[ebp]
  001b7	66 01 88 1a 01
	00 00		 add	 WORD PTR [eax+282], cx

; 547  : 	}
; 548  : 
; 549  : 	return true;

  001be	b0 01		 mov	 al, 1
  001c0	5e		 pop	 esi

; 550  : }

  001c1	5d		 pop	 ebp
  001c2	c2 0c 00	 ret	 12			; 0000000cH
$LN4@SetItemEff:

; 528  : 			break;
; 529  : 
; 530  : 		case ADD_OPTION_WRATH:
; 531  : 			lpObj->m_AttackDamageMaxLeft += iEffectValue;

  001c5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001c8	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  001cb	01 88 78 04 00
	00		 add	 DWORD PTR [eax+1144], ecx

; 532  : 			lpObj->m_AttackDamageMinLeft += iEffectValue;

  001d1	01 88 7c 04 00
	00		 add	 DWORD PTR [eax+1148], ecx

; 533  : 			lpObj->m_AttackDamageMaxRight += iEffectValue;

  001d7	01 88 80 04 00
	00		 add	 DWORD PTR [eax+1152], ecx

; 534  : 			lpObj->m_AttackDamageMinRight += iEffectValue;

  001dd	01 88 84 04 00
	00		 add	 DWORD PTR [eax+1156], ecx

; 547  : 	}
; 548  : 
; 549  : 	return true;

  001e3	b0 01		 mov	 al, 1
  001e5	5e		 pop	 esi

; 550  : }

  001e6	5d		 pop	 ebp
  001e7	c2 0c 00	 ret	 12			; 0000000cH
$LN3@SetItemEff:

; 535  : 			break;
; 536  : 
; 537  : 		case ADD_OPTION_WIZARDRY:
; 538  : 			lpObj->m_MagicDamageMin += iEffectValue;

  001ea	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001ed	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  001f0	01 88 68 04 00
	00		 add	 DWORD PTR [eax+1128], ecx

; 539  : 			lpObj->m_MagicDamageMax += iEffectValue;

  001f6	01 88 6c 04 00
	00		 add	 DWORD PTR [eax+1132], ecx
$LN2@SetItemEff:

; 547  : 	}
; 548  : 
; 549  : 	return true;

  001fc	b0 01		 mov	 al, 1
  001fe	5e		 pop	 esi

; 550  : }

  001ff	5d		 pop	 ebp
  00200	c2 0c 00	 ret	 12			; 0000000cH
$LN1@SetItemEff:

; 540  : 			break;
; 541  : 
; 542  : 		case ADD_OPTION_MOBILITY:
; 543  : 			break;
; 544  : 
; 545  : 		default:
; 546  : 			return false;

  00203	32 c0		 xor	 al, al
  00205	5e		 pop	 esi

; 550  : }

  00206	5d		 pop	 ebp
  00207	c2 0c 00	 ret	 12			; 0000000cH
  0020a	8b ff		 npad	 2
$LN21@SetItemEff:
  0020c	00 00 00 00	 DD	 $LN11@SetItemEff
  00210	00 00 00 00	 DD	 $LN10@SetItemEff
  00214	00 00 00 00	 DD	 $LN13@SetItemEff
  00218	00 00 00 00	 DD	 $LN12@SetItemEff
  0021c	00 00 00 00	 DD	 $LN1@SetItemEff
  00220	00 00 00 00	 DD	 $LN1@SetItemEff
  00224	00 00 00 00	 DD	 $LN1@SetItemEff
  00228	00 00 00 00	 DD	 $LN9@SetItemEff
  0022c	00 00 00 00	 DD	 $LN8@SetItemEff
  00230	00 00 00 00	 DD	 $LN7@SetItemEff
  00234	00 00 00 00	 DD	 $LN6@SetItemEff
  00238	00 00 00 00	 DD	 $LN5@SetItemEff
  0023c	00 00 00 00	 DD	 $LN4@SetItemEff
  00240	00 00 00 00	 DD	 $LN3@SetItemEff
  00244	00 00 00 00	 DD	 $LN2@SetItemEff
?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ENDP ; CItemAddOption::_SetItemEffect
_TEXT	ENDS
PUBLIC	?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z ; CItemAddOption::_ClearItemEffect
; Function compile flags: /Ogtp
;	COMDAT ?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iEffectOption$ = 12					; size = 4
_iOptionType$ = 16					; size = 4
_iEffectType$ = 20					; size = 4
tv390 = 24						; size = 4
tv358 = 24						; size = 4
_iEffectValue$ = 24					; size = 4
?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z PROC ; CItemAddOption::_ClearItemEffect, COMDAT
; _this$ = ecx

; 553  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 554  : 	if ( iEffectType <= 0 )

  00004	8b 7d 14	 mov	 edi, DWORD PTR _iEffectType$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	7f 07		 jg	 SHORT $LN18@ClearItemE

; 555  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5f		 pop	 edi

; 644  : }

  0000e	5d		 pop	 ebp
  0000f	c2 14 00	 ret	 20			; 00000014H
$LN18@ClearItemE:

; 556  : 
; 557  : 	switch ( iEffectType )

  00012	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]
  00015	56		 push	 esi
  00016	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00019	0f 87 f9 01 00
	00		 ja	 $LN1@ClearItemE
  0001f	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00022	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN29@ClearItemE[eax*4]
$LN15@ClearItemE:

; 558  : 	{
; 559  : 		case ADD_OPTION_LIFE:
; 560  : 			lpObj->AddLife -= iEffectValue;

  00029	8b 45 18	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  0002c	29 86 4c 01 00
	00		 sub	 DWORD PTR [esi+332], eax
  00032	8b 8e 4c 01 00
	00		 mov	 ecx, DWORD PTR [esi+332]
  00038	89 4d 18	 mov	 DWORD PTR tv358[ebp], ecx

; 561  : 
; 562  : 			if ( (lpObj->AddLife + lpObj->MaxLife ) < lpObj->Life )

  0003b	db 45 18	 fild	 DWORD PTR tv358[ebp]
  0003e	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00044	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0004a	d8 d9		 fcomp	 ST(1)
  0004c	df e0		 fnstsw	 ax
  0004e	f6 c4 41	 test	 ah, 65			; 00000041H
  00051	75 08		 jne	 SHORT $LN23@ClearItemE

; 563  : 			{
; 564  : 				lpObj->Life = lpObj->AddLife + lpObj->MaxLife;

  00053	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  00059	eb 02		 jmp	 SHORT $LN14@ClearItemE
$LN23@ClearItemE:
  0005b	dd d8		 fstp	 ST(0)
$LN14@ClearItemE:

; 565  : 			}
; 566  : 
; 567  : 			GCReFillSend(lpObj->m_Index, (lpObj->Life), 0xFF, 0, (lpObj->iShield));

  0005d	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  00063	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00069	52		 push	 edx
  0006a	6a 00		 push	 0
  0006c	68 ff 00 00 00	 push	 255			; 000000ffH
  00071	e8 00 00 00 00	 call	 __ftol2_sse
  00076	50		 push	 eax
  00077	8b 06		 mov	 eax, DWORD PTR [esi]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 568  : 			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), 0xFE, 0, (lpObj->iMaxShield + lpObj->iAddShield));

  0007f	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00085	8b 8e 5c 01 00
	00		 mov	 ecx, DWORD PTR [esi+348]
  0008b	03 8e 58 01 00
	00		 add	 ecx, DWORD PTR [esi+344]
  00091	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00097	83 c4 14	 add	 esp, 20			; 00000014H
  0009a	51		 push	 ecx
  0009b	6a 00		 push	 0
  0009d	68 fe 00 00 00	 push	 254			; 000000feH
  000a2	e8 00 00 00 00	 call	 __ftol2_sse
  000a7	8b 16		 mov	 edx, DWORD PTR [esi]
  000a9	50		 push	 eax
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  000b0	83 c4 14	 add	 esp, 20			; 00000014H

; 569  : 			break;

  000b3	e9 44 01 00 00	 jmp	 $LN2@ClearItemE
$LN13@ClearItemE:

; 570  : 
; 571  : 		case ADD_OPTION_MANA:
; 572  : 			lpObj->AddMana -= iEffectValue;

  000b8	8b 45 18	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  000bb	29 86 50 01 00
	00		 sub	 DWORD PTR [esi+336], eax
  000c1	8b 8e 50 01 00
	00		 mov	 ecx, DWORD PTR [esi+336]
  000c7	89 4d 18	 mov	 DWORD PTR tv390[ebp], ecx

; 573  : 
; 574  : 			if ( (lpObj->AddMana + lpObj->MaxMana ) < lpObj->Mana )

  000ca	db 45 18	 fild	 DWORD PTR tv390[ebp]
  000cd	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  000d3	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  000d9	d8 d9		 fcomp	 ST(1)
  000db	df e0		 fnstsw	 ax
  000dd	f6 c4 41	 test	 ah, 65			; 00000041H
  000e0	75 08		 jne	 SHORT $LN26@ClearItemE

; 575  : 			{
; 576  : 				lpObj->Mana = lpObj->AddMana + lpObj->MaxMana;

  000e2	d9 9e 10 01 00
	00		 fstp	 DWORD PTR [esi+272]
  000e8	eb 02		 jmp	 SHORT $LN12@ClearItemE
$LN26@ClearItemE:
  000ea	dd d8		 fstp	 ST(0)
$LN12@ClearItemE:

; 577  : 			}
; 578  : 
; 579  : 			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);

  000ec	8b 96 28 01 00
	00		 mov	 edx, DWORD PTR [esi+296]
  000f2	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  000f8	52		 push	 edx
  000f9	6a 00		 push	 0
  000fb	68 ff 00 00 00	 push	 255			; 000000ffH
  00100	e8 00 00 00 00	 call	 __ftol2_sse
  00105	50		 push	 eax
  00106	8b 06		 mov	 eax, DWORD PTR [esi]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 580  : 			GCManaSend(lpObj->m_Index, (lpObj->AddMana + lpObj->MaxMana), 0xFE, 0, (lpObj->MaxBP + lpObj->AddBP));

  0010e	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  00114	8b 8e 30 01 00
	00		 mov	 ecx, DWORD PTR [esi+304]
  0011a	03 8e 2c 01 00
	00		 add	 ecx, DWORD PTR [esi+300]
  00120	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00126	83 c4 14	 add	 esp, 20			; 00000014H
  00129	51		 push	 ecx
  0012a	6a 00		 push	 0
  0012c	68 fe 00 00 00	 push	 254			; 000000feH
  00131	e8 00 00 00 00	 call	 __ftol2_sse
  00136	8b 16		 mov	 edx, DWORD PTR [esi]
  00138	50		 push	 eax
  00139	52		 push	 edx
  0013a	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0013f	83 c4 14	 add	 esp, 20			; 00000014H

; 581  : 			break;

  00142	e9 b5 00 00 00	 jmp	 $LN2@ClearItemE
$LN11@ClearItemE:

; 582  : 
; 583  : 		case ADD_OPTION_ATTACK_DAMAGE:
; 584  : 			lpObj->m_AttackDamageMaxLeft -= iEffectValue;

  00147	8b 45 18	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  0014a	29 86 78 04 00
	00		 sub	 DWORD PTR [esi+1144], eax

; 585  : 			lpObj->m_AttackDamageMinLeft -= iEffectValue;

  00150	29 86 7c 04 00
	00		 sub	 DWORD PTR [esi+1148], eax

; 586  : 			lpObj->m_AttackDamageMaxRight -= iEffectValue;

  00156	29 86 80 04 00
	00		 sub	 DWORD PTR [esi+1152], eax

; 587  : 			lpObj->m_AttackDamageMinRight -= iEffectValue;

  0015c	29 86 84 04 00
	00		 sub	 DWORD PTR [esi+1156], eax

; 588  : 			lpObj->m_MagicDamageMin -= iEffectValue;
; 589  : 			lpObj->m_MagicDamageMax -= iEffectValue;
; 590  : 			break;

  00162	e9 89 00 00 00	 jmp	 $LN28@ClearItemE
$LN10@ClearItemE:

; 591  : 
; 592  : 		/*case ADD_OPTION_SPEED:
; 593  : 			lpObj->m_AttackSpeed -= iEffectValue;
; 594  : 			lpObj->m_MagicSpeed -= iEffectValue;
; 595  : 			break;*/
; 596  : 
; 597  : 		case ADD_OPTION_DEFENSE:
; 598  : 			lpObj->m_Defense -= iEffectValue * 10 / 20;

  00167	8b 45 18	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  0016a	8b c8		 mov	 ecx, eax
  0016c	f7 d9		 neg	 ecx
  0016e	03 c9		 add	 ecx, ecx
  00170	03 c9		 add	 ecx, ecx
  00172	2b c8		 sub	 ecx, eax
  00174	03 c9		 add	 ecx, ecx
  00176	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0017b	f7 e9		 imul	 ecx
  0017d	c1 fa 03	 sar	 edx, 3
  00180	8b c2		 mov	 eax, edx
  00182	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00185	03 c2		 add	 eax, edx
  00187	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 599  : 			break;

  0018d	eb 6d		 jmp	 SHORT $LN2@ClearItemE
$LN9@ClearItemE:

; 600  : 
; 601  : 		case ADD_OPTION_STRENGTH:
; 602  : 			lpObj->AddStrength -= iEffectValue;

  0018f	66 8b 4d 18	 mov	 cx, WORD PTR _iEffectValue$[ebp]
  00193	66 29 8e 20 01
	00 00		 sub	 WORD PTR [esi+288], cx

; 603  : 			break;

  0019a	eb 60		 jmp	 SHORT $LN2@ClearItemE
$LN8@ClearItemE:

; 604  : 
; 605  : 		case ADD_OPTION_DEXTERITY:
; 606  : 			lpObj->AddDexterity -= iEffectValue;

  0019c	66 8b 55 18	 mov	 dx, WORD PTR _iEffectValue$[ebp]
  001a0	66 29 96 22 01
	00 00		 sub	 WORD PTR [esi+290], dx

; 607  : 			break;

  001a7	eb 53		 jmp	 SHORT $LN2@ClearItemE
$LN7@ClearItemE:

; 608  : 
; 609  : 		case ADD_OPTION_VITALITY:
; 610  : 			lpObj->AddVitality -= iEffectValue;

  001a9	66 8b 45 18	 mov	 ax, WORD PTR _iEffectValue$[ebp]
  001ad	66 29 86 24 01
	00 00		 sub	 WORD PTR [esi+292], ax

; 611  : 			break;

  001b4	eb 46		 jmp	 SHORT $LN2@ClearItemE
$LN6@ClearItemE:

; 612  : 
; 613  : 		case ADD_OPTION_ENERGY:
; 614  : 			lpObj->AddEnergy -= iEffectValue;

  001b6	66 8b 4d 18	 mov	 cx, WORD PTR _iEffectValue$[ebp]
  001ba	66 29 8e 26 01
	00 00		 sub	 WORD PTR [esi+294], cx

; 615  : 			break;

  001c1	eb 39		 jmp	 SHORT $LN2@ClearItemE
$LN5@ClearItemE:

; 616  : 
; 617  : 		case ADD_OPTION_LEADERSHIP:
; 618  : 			lpObj->AddLeadership -= iEffectValue;

  001c3	66 8b 55 18	 mov	 dx, WORD PTR _iEffectValue$[ebp]
  001c7	66 29 96 1a 01
	00 00		 sub	 WORD PTR [esi+282], dx

; 619  : 			break;

  001ce	eb 2c		 jmp	 SHORT $LN2@ClearItemE
$LN4@ClearItemE:

; 620  : 
; 621  : 		case ADD_OPTION_WRATH:
; 622  : 
; 623  : 			lpObj->m_AttackDamageMaxLeft -= iEffectValue;

  001d0	8b 45 18	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  001d3	29 86 78 04 00
	00		 sub	 DWORD PTR [esi+1144], eax

; 624  : 			lpObj->m_AttackDamageMinLeft -= iEffectValue;

  001d9	29 86 7c 04 00
	00		 sub	 DWORD PTR [esi+1148], eax

; 625  : 			lpObj->m_AttackDamageMaxRight -= iEffectValue;

  001df	29 86 80 04 00
	00		 sub	 DWORD PTR [esi+1152], eax

; 626  : 			lpObj->m_AttackDamageMinRight -= iEffectValue;

  001e5	29 86 84 04 00
	00		 sub	 DWORD PTR [esi+1156], eax

; 627  : 			break;

  001eb	eb 0f		 jmp	 SHORT $LN2@ClearItemE
$LN3@ClearItemE:

; 628  : 
; 629  : 		case ADD_OPTION_WIZARDRY:
; 630  : 			lpObj->m_MagicDamageMin -= iEffectValue;

  001ed	8b 45 18	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
$LN28@ClearItemE:
  001f0	29 86 68 04 00
	00		 sub	 DWORD PTR [esi+1128], eax

; 631  : 			lpObj->m_MagicDamageMax -= iEffectValue;

  001f6	29 86 6c 04 00
	00		 sub	 DWORD PTR [esi+1132], eax
$LN2@ClearItemE:

; 639  : 	}
; 640  : 
; 641  : 	GCUseEffectItem(lpObj, iEffectOption, iOptionType, iEffectType, 0);

  001fc	8b 45 10	 mov	 eax, DWORD PTR _iOptionType$[ebp]
  001ff	8b 4d 0c	 mov	 ecx, DWORD PTR _iEffectOption$[ebp]
  00202	6a 00		 push	 0
  00204	57		 push	 edi
  00205	50		 push	 eax
  00206	51		 push	 ecx
  00207	56		 push	 esi
  00208	e8 00 00 00 00	 call	 ?GCUseEffectItem@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; GCUseEffectItem
  0020d	83 c4 14	 add	 esp, 20			; 00000014H
  00210	5e		 pop	 esi

; 642  : 
; 643  : 	return true;

  00211	b0 01		 mov	 al, 1
  00213	5f		 pop	 edi

; 644  : }

  00214	5d		 pop	 ebp
  00215	c2 14 00	 ret	 20			; 00000014H
$LN1@ClearItemE:
  00218	5e		 pop	 esi

; 632  : 			break;
; 633  : 
; 634  : 		case ADD_OPTION_MOBILITY:
; 635  : 			break;
; 636  : 
; 637  : 		default:
; 638  : 			return false;

  00219	32 c0		 xor	 al, al
  0021b	5f		 pop	 edi

; 644  : }

  0021c	5d		 pop	 ebp
  0021d	c2 14 00	 ret	 20			; 00000014H
$LN29@ClearItemE:
  00220	00 00 00 00	 DD	 $LN11@ClearItemE
  00224	00 00 00 00	 DD	 $LN10@ClearItemE
  00228	00 00 00 00	 DD	 $LN15@ClearItemE
  0022c	00 00 00 00	 DD	 $LN13@ClearItemE
  00230	00 00 00 00	 DD	 $LN1@ClearItemE
  00234	00 00 00 00	 DD	 $LN1@ClearItemE
  00238	00 00 00 00	 DD	 $LN1@ClearItemE
  0023c	00 00 00 00	 DD	 $LN9@ClearItemE
  00240	00 00 00 00	 DD	 $LN8@ClearItemE
  00244	00 00 00 00	 DD	 $LN7@ClearItemE
  00248	00 00 00 00	 DD	 $LN6@ClearItemE
  0024c	00 00 00 00	 DD	 $LN5@ClearItemE
  00250	00 00 00 00	 DD	 $LN4@ClearItemE
  00254	00 00 00 00	 DD	 $LN3@ClearItemE
  00258	00 00 00 00	 DD	 $LN2@ClearItemE
?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z ENDP ; CItemAddOption::_ClearItemEffect
_TEXT	ENDS
PUBLIC	?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
; Function compile flags: /Ogtp
;	COMDAT ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z
_TEXT	SEGMENT
_iItemNumber$ = 8					; size = 4
?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z PROC ; CItemAddOption::_SearchItemEffect, COMDAT
; _this$ = ecx

; 677  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 678  : 	for ( int i=0;i<MAX_ITEM_ADD_OPTION;i++)

  00004	8b 75 08	 mov	 esi, DWORD PTR _iItemNumber$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	8d 51 0c	 lea	 edx, DWORD PTR [ecx+12]
  0000c	8d 64 24 00	 npad	 4
$LL4@SearchItem:

; 679  : 	{
; 680  : 		if ( this->m_ItemAddOption[i].iItemNumber == iItemNumber )

  00010	39 32		 cmp	 DWORD PTR [edx], esi
  00012	74 10		 je	 SHORT $LN8@SearchItem

; 678  : 	for ( int i=0;i<MAX_ITEM_ADD_OPTION;i++)

  00014	40		 inc	 eax
  00015	83 c2 20	 add	 edx, 32			; 00000020H
  00018	83 f8 64	 cmp	 eax, 100		; 00000064H
  0001b	7c f3		 jl	 SHORT $LL4@SearchItem

; 683  : 		}
; 684  : 	}
; 685  : 
; 686  : 	return NULL;

  0001d	33 c0		 xor	 eax, eax
  0001f	5e		 pop	 esi

; 687  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@SearchItem:

; 681  : 		{
; 682  : 			return &this->m_ItemAddOption[i];

  00024	c1 e0 05	 shl	 eax, 5
  00027	8d 44 08 04	 lea	 eax, DWORD PTR [eax+ecx+4]
  0002b	5e		 pop	 esi

; 687  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ENDP ; CItemAddOption::_SearchItemEffect
_TEXT	ENDS
PUBLIC	?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z ; CItemAddOption::SearchItemEffectType
; Function compile flags: /Ogtp
;	COMDAT ?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z
_TEXT	SEGMENT
_iItemNumber$ = 8					; size = 4
_iEffectType1$ = 12					; size = 4
_iEffectType2$ = 16					; size = 4
_iEffectValidTime$ = 20					; size = 4
?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z PROC ; CItemAddOption::SearchItemEffectType, COMDAT
; _this$ = ecx

; 690  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 691  : 	LPITEMEFFECT lpItemEffect = NULL;
; 692  : 
; 693  : 	lpItemEffect = this->_SearchItemEffect(iItemNumber);

  00003	8b 45 08	 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect

; 694  : 
; 695  : 	if ( lpItemEffect == NULL )

  0000c	85 c0		 test	 eax, eax
  0000e	75 06		 jne	 SHORT $LN1@SearchItem@2

; 696  : 	{
; 697  : 		return false;

  00010	32 c0		 xor	 al, al

; 705  : }

  00012	5d		 pop	 ebp
  00013	c2 10 00	 ret	 16			; 00000010H
$LN1@SearchItem@2:

; 698  : 	}
; 699  : 
; 700  : 	*iEffectType1 = lpItemEffect->wEffectType1;

  00016	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _iEffectType1$[ebp]
  0001d	89 0a		 mov	 DWORD PTR [edx], ecx

; 701  : 	*iEffectType2 = lpItemEffect->wEffectType2;

  0001f	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00023	8b 55 10	 mov	 edx, DWORD PTR _iEffectType2$[ebp]
  00026	89 0a		 mov	 DWORD PTR [edx], ecx

; 702  : 	*iEffectValidTime = lpItemEffect->iEffectValidTime;

  00028	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0002b	8b 4d 14	 mov	 ecx, DWORD PTR _iEffectValidTime$[ebp]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax

; 703  : 
; 704  : 	return true;

  00030	b0 01		 mov	 al, 1

; 705  : }

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z ENDP ; CItemAddOption::SearchItemEffectType
_TEXT	ENDS
PUBLIC	?SearchItemOptionType@CItemAddOption@@QAEHH@Z	; CItemAddOption::SearchItemOptionType
; Function compile flags: /Ogtp
;	COMDAT ?SearchItemOptionType@CItemAddOption@@QAEHH@Z
_TEXT	SEGMENT
_iItemNumber$ = 8					; size = 4
?SearchItemOptionType@CItemAddOption@@QAEHH@Z PROC	; CItemAddOption::SearchItemOptionType, COMDAT
; _this$ = ecx

; 708  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 709  : 	LPITEMEFFECT lpItemEffect = NULL;
; 710  : 	int iOptionType = -1;
; 711  : 
; 712  : 	lpItemEffect = this->_SearchItemEffect(iItemNumber);

  00003	8b 45 08	 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect

; 713  : 
; 714  : 	if ( lpItemEffect == NULL )

  0000c	85 c0		 test	 eax, eax
  0000e	75 07		 jne	 SHORT $LN1@SearchItem@3

; 715  : 	{
; 716  : 		return iOptionType;

  00010	83 c8 ff	 or	 eax, -1

; 722  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN1@SearchItem@3:

; 717  : 	}
; 718  : 
; 719  : 	iOptionType = lpItemEffect->wOptionType;
; 720  : 
; 721  : 	return iOptionType;

  00017	0f b7 00	 movzx	 eax, WORD PTR [eax]

; 722  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SearchItemOptionType@CItemAddOption@@QAEHH@Z ENDP	; CItemAddOption::SearchItemOptionType
_TEXT	ENDS
PUBLIC	?SearchForClearItemEffect@CItemAddOption@@QAEEH@Z ; CItemAddOption::SearchForClearItemEffect
; Function compile flags: /Ogtp
;	COMDAT ?SearchForClearItemEffect@CItemAddOption@@QAEEH@Z
_TEXT	SEGMENT
_iItemNumber$ = 8					; size = 4
?SearchForClearItemEffect@CItemAddOption@@QAEEH@Z PROC	; CItemAddOption::SearchForClearItemEffect, COMDAT
; _this$ = ecx

; 725  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 726  : 	if ( this->_SearchItemEffect(iItemNumber) == NULL )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
  0000c	85 c0		 test	 eax, eax
  0000e	0f 95 c0	 setne	 al

; 727  : 	{
; 728  : 		return 0;
; 729  : 	}
; 730  : 
; 731  : 	return 1;
; 732  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SearchForClearItemEffect@CItemAddOption@@QAEEH@Z ENDP	; CItemAddOption::SearchForClearItemEffect
_TEXT	ENDS
PUBLIC	?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ; CItemAddOption::SearchItemEffectType1
; Function compile flags: /Ogtp
;	COMDAT ?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z
_TEXT	SEGMENT
_iItemNumber$ = 8					; size = 4
?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z PROC ; CItemAddOption::SearchItemEffectType1, COMDAT
; _this$ = ecx

; 735  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : }

  00003	5d		 pop	 ebp

; 736  : 	return this->_SearchItemEffect(iItemNumber);

  00004	e9 00 00 00 00	 jmp	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ENDP ; CItemAddOption::SearchItemEffectType1
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?SetItemEquipment@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::SetItemEquipment
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetItemEquipment@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
tv479 = 8						; size = 4
tv465 = 8						; size = 4
tv437 = 8						; size = 4
tv421 = 8						; size = 4
_lpObj$ = 8						; size = 4
_iEffectType$ = 12					; size = 4
_iEffectValue$ = 16					; size = 4
?SetItemEquipment@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z PROC ; CItemAddOption::SetItemEquipment, COMDAT
; _this$ = ecx

; 773  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 774  : 	if ( iEffectType <= 0 )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iEffectType$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	7f 06		 jg	 SHORT $LN21@SetItemEqu

; 775  : 		return false;

  0000a	32 c0		 xor	 al, al

; 901  : }

  0000c	5d		 pop	 ebp
  0000d	c2 0c 00	 ret	 12			; 0000000cH
$LN21@SetItemEqu:

; 776  : 
; 777  : // 1) Increase Speed
; 778  : // 2) Increase Attack Damage
; 779  : // 3) Increase Defence
; 780  : // 4) Increase MaxLife
; 781  : // 5) Increase MaxMana
; 782  : // 6) Increase Experience Percent
; 783  : // 7) Increase Drop Rate Percent
; 784  : // 8) +%d Remove Extra Experience
; 785  : // 9) Increase Strength
; 786  : //10) Increase Agility
; 787  : //11) Increase Vitality
; 788  : //12) Increase Energy
; 789  : //13) Increase Leadership
; 790  : //51) Increase Attack Power Percent
; 791  : //52) Increase Dmg Absorbtion Percent
; 792  : //60) Increase Experience Rate (20 = +20x in %)
; 793  : //61) Increase Drop Rate (1 = 1000*1/100 = 10)
; 794  : //64) Increase Increase Damage Percentage
; 795  : 
; 796  : 	switch ( iEffectType )

  00010	83 c0 fe	 add	 eax, -2			; fffffffeH
  00013	56		 push	 esi
  00014	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  00017	0f 87 64 03 00
	00		 ja	 $LN19@SetItemEqu
  0001d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN24@SetItemEqu[eax]
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN25@SetItemEqu[eax*4]
$LN18@SetItemEqu:

; 797  : 	{
; 798  : 		case ADD_OPTION_LIFE_AUTO_RECOVERY: 
; 799  : 			lpObj->RecoveryHp += iEffectValue; 

  0002b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  00031	01 88 c0 27 00
	00		 add	 DWORD PTR [eax+10176], ecx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00037	b0 01		 mov	 al, 1
  00039	5e		 pop	 esi

; 901  : }

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@SetItemEqu:

; 800  : 			break;
; 801  : 
; 802  : 		case ADD_OPTION_MANA_AUTO_RECOVERY:
; 803  : 			lpObj->RecoveryMp += iEffectValue;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00041	8b 55 10	 mov	 edx, DWORD PTR _iEffectValue$[ebp]
  00044	01 90 c8 27 00
	00		 add	 DWORD PTR [eax+10184], edx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  0004a	b0 01		 mov	 al, 1
  0004c	5e		 pop	 esi

; 901  : }

  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
$LN16@SetItemEqu:

; 804  : 			break;
; 805  : 
; 806  : 		case ADD_OPTION_ATTACK_NORMAL_DAMAGE:
; 807  : 			lpObj->m_AttackDamageMaxLeft += iEffectValue;

  00051	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  00057	01 88 78 04 00
	00		 add	 DWORD PTR [eax+1144], ecx

; 808  : 			lpObj->m_AttackDamageMinLeft += iEffectValue;

  0005d	01 88 7c 04 00
	00		 add	 DWORD PTR [eax+1148], ecx

; 809  : 			lpObj->m_AttackDamageMaxRight += iEffectValue;

  00063	01 88 80 04 00
	00		 add	 DWORD PTR [eax+1152], ecx

; 810  : 			lpObj->m_AttackDamageMinRight += iEffectValue;

  00069	01 88 84 04 00
	00		 add	 DWORD PTR [eax+1156], ecx

; 811  : 			lpObj->m_MagicDamageMin += iEffectValue;

  0006f	01 88 68 04 00
	00		 add	 DWORD PTR [eax+1128], ecx

; 812  : 			lpObj->m_MagicDamageMax += iEffectValue;

  00075	01 88 6c 04 00
	00		 add	 DWORD PTR [eax+1132], ecx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  0007b	b0 01		 mov	 al, 1
  0007d	5e		 pop	 esi

; 901  : }

  0007e	5d		 pop	 ebp
  0007f	c2 0c 00	 ret	 12			; 0000000cH
$LN15@SetItemEqu:

; 813  : 			break;
; 814  : 
; 815  : 		case ADD_OPTION_LIFE:
; 816  : 			lpObj->AddLife += ( (lpObj->MaxLife + lpObj->AddLife) * iEffectValue ) /100;

  00082	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00085	8b 86 4c 01 00
	00		 mov	 eax, DWORD PTR [esi+332]
  0008b	89 45 08	 mov	 DWORD PTR tv421[ebp], eax
  0008e	db 45 08	 fild	 DWORD PTR tv421[ebp]
  00091	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00097	da 4d 10	 fimul	 DWORD PTR _iEffectValue$[ebp]
  0009a	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000a0	da 45 08	 fiadd	 DWORD PTR tv421[ebp]
  000a3	e8 00 00 00 00	 call	 __ftol2_sse

; 817  : 			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield));

  000a8	8b 8e 5c 01 00
	00		 mov	 ecx, DWORD PTR [esi+348]
  000ae	03 8e 58 01 00
	00		 add	 ecx, DWORD PTR [esi+344]
  000b4	89 45 08	 mov	 DWORD PTR tv437[ebp], eax
  000b7	db 45 08	 fild	 DWORD PTR tv437[ebp]
  000ba	51		 push	 ecx
  000bb	6a 00		 push	 0
  000bd	68 fe 00 00 00	 push	 254			; 000000feH
  000c2	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  000c8	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  000ce	e8 00 00 00 00	 call	 __ftol2_sse
  000d3	8b 16		 mov	 edx, DWORD PTR [esi]
  000d5	50		 push	 eax
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 818  : 			GCReFillSend(lpObj->m_Index, (lpObj->Life), -1, 0, (lpObj->iShield));

  000dc	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  000e2	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  000e8	83 c4 14	 add	 esp, 20			; 00000014H
  000eb	50		 push	 eax
  000ec	6a 00		 push	 0
  000ee	68 ff 00 00 00	 push	 255			; 000000ffH
  000f3	e8 00 00 00 00	 call	 __ftol2_sse
  000f8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000fa	50		 push	 eax
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00101	83 c4 14	 add	 esp, 20			; 00000014H

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00104	b0 01		 mov	 al, 1
  00106	5e		 pop	 esi

; 901  : }

  00107	5d		 pop	 ebp
  00108	c2 0c 00	 ret	 12			; 0000000cH
$LN14@SetItemEqu:

; 819  : 			break;
; 820  : 
; 821  : 		case ADD_OPTION_EXCELLENT_DAMAGE:
; 822  : 			lpObj->m_ExcelentDamage += iEffectValue;

  0010b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0010e	8b 55 10	 mov	 edx, DWORD PTR _iEffectValue$[ebp]
  00111	01 90 c0 04 00
	00		 add	 DWORD PTR [eax+1216], edx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00117	b0 01		 mov	 al, 1
  00119	5e		 pop	 esi

; 901  : }

  0011a	5d		 pop	 ebp
  0011b	c2 0c 00	 ret	 12			; 0000000cH
$LN13@SetItemEqu:

; 823  : 			break;
; 824  : 
; 825  : 		case ADD_OPTION_CRITICAL_DAMAGE:
; 826  : 			lpObj->m_CriticalDamage += iEffectValue;

  0011e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00121	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  00124	01 88 bc 04 00
	00		 add	 DWORD PTR [eax+1212], ecx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  0012a	b0 01		 mov	 al, 1
  0012c	5e		 pop	 esi

; 901  : }

  0012d	5d		 pop	 ebp
  0012e	c2 0c 00	 ret	 12			; 0000000cH
$LN12@SetItemEqu:

; 827  : 			break;
; 828  : 
; 829  : 		case ADD_OPTION_MANA:
; 830  : 			lpObj->AddMana += ( (lpObj->AddMana + lpObj->MaxMana) * iEffectValue ) / 100;

  00131	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00134	8b 96 50 01 00
	00		 mov	 edx, DWORD PTR [esi+336]
  0013a	89 55 08	 mov	 DWORD PTR tv465[ebp], edx
  0013d	db 45 08	 fild	 DWORD PTR tv465[ebp]
  00140	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00146	da 4d 10	 fimul	 DWORD PTR _iEffectValue$[ebp]
  00149	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0014f	da 45 08	 fiadd	 DWORD PTR tv465[ebp]
  00152	e8 00 00 00 00	 call	 __ftol2_sse
  00157	89 45 08	 mov	 DWORD PTR tv479[ebp], eax

; 831  : 			GCManaSend(lpObj->m_Index, (lpObj->AddMana + lpObj->MaxMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));

  0015a	db 45 08	 fild	 DWORD PTR tv479[ebp]
  0015d	89 86 50 01 00
	00		 mov	 DWORD PTR [esi+336], eax
  00163	8b 86 30 01 00
	00		 mov	 eax, DWORD PTR [esi+304]
  00169	03 86 2c 01 00
	00		 add	 eax, DWORD PTR [esi+300]
  0016f	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00175	50		 push	 eax
  00176	6a 00		 push	 0
  00178	68 fe 00 00 00	 push	 254			; 000000feH
  0017d	e8 00 00 00 00	 call	 __ftol2_sse
  00182	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00184	50		 push	 eax
  00185	51		 push	 ecx
  00186	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 832  : 			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);

  0018b	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  00191	8b 96 28 01 00
	00		 mov	 edx, DWORD PTR [esi+296]
  00197	83 c4 14	 add	 esp, 20			; 00000014H
  0019a	52		 push	 edx
  0019b	6a 00		 push	 0
  0019d	68 ff 00 00 00	 push	 255			; 000000ffH
  001a2	e8 00 00 00 00	 call	 __ftol2_sse
  001a7	50		 push	 eax
  001a8	8b 06		 mov	 eax, DWORD PTR [esi]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  001b0	83 c4 14	 add	 esp, 20			; 00000014H

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  001b3	b0 01		 mov	 al, 1
  001b5	5e		 pop	 esi

; 901  : }

  001b6	5d		 pop	 ebp
  001b7	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SetItemEqu:

; 833  : 			break;
; 834  : 
; 835  : 		case ADD_OPTION_ATTACK_DAMAGE:
; 836  : 			lpObj->m_AttackDamageMaxLeft += iEffectValue;
; 837  : 			lpObj->m_AttackDamageMinLeft += iEffectValue;
; 838  : 			lpObj->m_AttackDamageMaxRight += iEffectValue;
; 839  : 			lpObj->m_AttackDamageMinRight += iEffectValue;
; 840  : 			lpObj->m_MagicDamageMin += iEffectValue;
; 841  : 			lpObj->m_MagicDamageMax += iEffectValue;
; 842  : 			break;
; 843  : 
; 844  : 		/*case ADD_OPTION_SPEED:
; 845  : 			lpObj->m_AttackSpeed += iEffectValue;
; 846  : 			lpObj->m_MagicSpeed += iEffectValue;
; 847  : 			break;*/
; 848  : 
; 849  : 		case ADD_OPTION_DEFENSE:
; 850  : 			lpObj->m_Defense += iEffectValue * 10 / 20;

  001ba	8b 45 10	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  001bd	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  001c0	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  001c3	03 c9		 add	 ecx, ecx
  001c5	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001ca	f7 e9		 imul	 ecx
  001cc	c1 fa 03	 sar	 edx, 3
  001cf	8b ca		 mov	 ecx, edx
  001d1	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001d4	03 ca		 add	 ecx, edx
  001d6	01 8e 94 04 00
	00		 add	 DWORD PTR [esi+1172], ecx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  001dc	b0 01		 mov	 al, 1
  001de	5e		 pop	 esi

; 901  : }

  001df	5d		 pop	 ebp
  001e0	c2 0c 00	 ret	 12			; 0000000cH
$LN9@SetItemEqu:

; 851  : 			break;
; 852  : 
; 853  : 		case ADD_OPTION_STRENGTH:
; 854  : 			lpObj->AddStrength += iEffectValue;

  001e3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001e6	66 8b 55 10	 mov	 dx, WORD PTR _iEffectValue$[ebp]
  001ea	66 01 90 20 01
	00 00		 add	 WORD PTR [eax+288], dx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  001f1	b0 01		 mov	 al, 1
  001f3	5e		 pop	 esi

; 901  : }

  001f4	5d		 pop	 ebp
  001f5	c2 0c 00	 ret	 12			; 0000000cH
$LN8@SetItemEqu:

; 855  : 			break;
; 856  : 
; 857  : 		case ADD_OPTION_DEXTERITY:
; 858  : 			lpObj->AddDexterity += iEffectValue;

  001f8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001fb	66 8b 4d 10	 mov	 cx, WORD PTR _iEffectValue$[ebp]
  001ff	66 01 88 22 01
	00 00		 add	 WORD PTR [eax+290], cx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00206	b0 01		 mov	 al, 1
  00208	5e		 pop	 esi

; 901  : }

  00209	5d		 pop	 ebp
  0020a	c2 0c 00	 ret	 12			; 0000000cH
$LN7@SetItemEqu:

; 859  : 			break;
; 860  : 
; 861  : 		case ADD_OPTION_VITALITY:
; 862  : 			lpObj->AddVitality += iEffectValue;

  0020d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00210	66 8b 55 10	 mov	 dx, WORD PTR _iEffectValue$[ebp]
  00214	66 01 90 24 01
	00 00		 add	 WORD PTR [eax+292], dx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  0021b	b0 01		 mov	 al, 1
  0021d	5e		 pop	 esi

; 901  : }

  0021e	5d		 pop	 ebp
  0021f	c2 0c 00	 ret	 12			; 0000000cH
$LN6@SetItemEqu:

; 863  : 			break;
; 864  : 
; 865  : 		case ADD_OPTION_ENERGY:
; 866  : 			lpObj->AddEnergy += iEffectValue;

  00222	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00225	66 8b 4d 10	 mov	 cx, WORD PTR _iEffectValue$[ebp]
  00229	66 01 88 26 01
	00 00		 add	 WORD PTR [eax+294], cx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00230	b0 01		 mov	 al, 1
  00232	5e		 pop	 esi

; 901  : }

  00233	5d		 pop	 ebp
  00234	c2 0c 00	 ret	 12			; 0000000cH
$LN5@SetItemEqu:

; 867  : 			break;
; 868  : 
; 869  : 		case ADD_OPTION_LEADERSHIP:
; 870  : 			lpObj->AddLeadership += iEffectValue;

  00237	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0023a	66 8b 55 10	 mov	 dx, WORD PTR _iEffectValue$[ebp]
  0023e	66 01 90 1a 01
	00 00		 add	 WORD PTR [eax+282], dx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00245	b0 01		 mov	 al, 1
  00247	5e		 pop	 esi

; 901  : }

  00248	5d		 pop	 ebp
  00249	c2 0c 00	 ret	 12			; 0000000cH
$LN4@SetItemEqu:

; 871  : 			break;
; 872  : 
; 873  : 		case ADD_OPTION_WRATH:
; 874  : 			lpObj->m_AttackDamageMaxLeft += iEffectValue;

  0024c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0024f	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  00252	01 88 78 04 00
	00		 add	 DWORD PTR [eax+1144], ecx

; 875  : 			lpObj->m_AttackDamageMinLeft += iEffectValue;

  00258	01 88 7c 04 00
	00		 add	 DWORD PTR [eax+1148], ecx

; 876  : 			lpObj->m_AttackDamageMaxRight += iEffectValue;

  0025e	01 88 80 04 00
	00		 add	 DWORD PTR [eax+1152], ecx

; 877  : 			lpObj->m_AttackDamageMinRight += iEffectValue;

  00264	01 88 84 04 00
	00		 add	 DWORD PTR [eax+1156], ecx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  0026a	b0 01		 mov	 al, 1
  0026c	5e		 pop	 esi

; 901  : }

  0026d	5d		 pop	 ebp
  0026e	c2 0c 00	 ret	 12			; 0000000cH
$LN3@SetItemEqu:

; 878  : 			break;
; 879  : 
; 880  : 		case ADD_OPTION_WIZARDRY:
; 881  : 			lpObj->m_MagicDamageMin += iEffectValue;

  00271	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00274	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  00277	01 88 68 04 00
	00		 add	 DWORD PTR [eax+1128], ecx

; 882  : 			lpObj->m_MagicDamageMax += iEffectValue;

  0027d	01 88 6c 04 00
	00		 add	 DWORD PTR [eax+1132], ecx

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00283	b0 01		 mov	 al, 1
  00285	5e		 pop	 esi

; 901  : }

  00286	5d		 pop	 ebp
  00287	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SetItemEqu:

; 883  : 			break;
; 884  : 
; 885  : 		case ADD_IncreaseIncreaseDamagePercentage:
; 886  : 			lpObj->m_AttackDamageMaxLeft +=  (( lpObj->m_AttackDamageMaxLeft * iEffectValue ) / 100 );

  0028a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0028d	8b 75 10	 mov	 esi, DWORD PTR _iEffectValue$[ebp]
  00290	57		 push	 edi
  00291	8b b9 78 04 00
	00		 mov	 edi, DWORD PTR [ecx+1144]
  00297	8b d7		 mov	 edx, edi
  00299	0f af d6	 imul	 edx, esi
  0029c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002a1	f7 ea		 imul	 edx
  002a3	c1 fa 05	 sar	 edx, 5
  002a6	8b c2		 mov	 eax, edx
  002a8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ab	03 c2		 add	 eax, edx
  002ad	03 c7		 add	 eax, edi

; 887  : 			lpObj->m_AttackDamageMinLeft +=  (( lpObj->m_AttackDamageMinLeft * iEffectValue ) / 100 );

  002af	8b b9 7c 04 00
	00		 mov	 edi, DWORD PTR [ecx+1148]
  002b5	89 81 78 04 00
	00		 mov	 DWORD PTR [ecx+1144], eax
  002bb	8b d7		 mov	 edx, edi
  002bd	0f af d6	 imul	 edx, esi
  002c0	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002c5	f7 ea		 imul	 edx
  002c7	c1 fa 05	 sar	 edx, 5
  002ca	8b c2		 mov	 eax, edx
  002cc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002cf	03 c2		 add	 eax, edx
  002d1	03 c7		 add	 eax, edi

; 888  : 			lpObj->m_AttackDamageMaxRight += (( lpObj->m_AttackDamageMaxRight* iEffectValue ) / 100 );

  002d3	8b b9 80 04 00
	00		 mov	 edi, DWORD PTR [ecx+1152]
  002d9	89 81 7c 04 00
	00		 mov	 DWORD PTR [ecx+1148], eax
  002df	8b d7		 mov	 edx, edi
  002e1	0f af d6	 imul	 edx, esi
  002e4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002e9	f7 ea		 imul	 edx
  002eb	c1 fa 05	 sar	 edx, 5
  002ee	8b c2		 mov	 eax, edx
  002f0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002f3	03 c2		 add	 eax, edx
  002f5	03 c7		 add	 eax, edi

; 889  : 			lpObj->m_AttackDamageMinRight += (( lpObj->m_AttackDamageMinRight* iEffectValue ) / 100 );

  002f7	8b b9 84 04 00
	00		 mov	 edi, DWORD PTR [ecx+1156]
  002fd	89 81 80 04 00
	00		 mov	 DWORD PTR [ecx+1152], eax
  00303	8b d7		 mov	 edx, edi
  00305	0f af d6	 imul	 edx, esi
  00308	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0030d	f7 ea		 imul	 edx
  0030f	c1 fa 05	 sar	 edx, 5
  00312	8b c2		 mov	 eax, edx
  00314	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00317	03 c2		 add	 eax, edx
  00319	03 c7		 add	 eax, edi
  0031b	89 81 84 04 00
	00		 mov	 DWORD PTR [ecx+1156], eax

; 890  : 	
; 891  : 			lpObj->m_MagicDamageMax += (( gObj->m_MagicDamageMax * iEffectValue ) / 100 );

  00321	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00327	8b 92 6c 04 00
	00		 mov	 edx, DWORD PTR [edx+1132]
  0032d	0f af d6	 imul	 edx, esi
  00330	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00335	f7 ea		 imul	 edx
  00337	c1 fa 05	 sar	 edx, 5
  0033a	8b c2		 mov	 eax, edx
  0033c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0033f	03 c2		 add	 eax, edx
  00341	01 81 6c 04 00
	00		 add	 DWORD PTR [ecx+1132], eax

; 892  : 			lpObj->m_MagicDamageMin += (( gObj->m_MagicDamageMin * iEffectValue ) / 100 );

  00347	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0034d	8b 92 68 04 00
	00		 mov	 edx, DWORD PTR [edx+1128]
  00353	0f af d6	 imul	 edx, esi
  00356	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0035b	f7 ea		 imul	 edx
  0035d	c1 fa 05	 sar	 edx, 5
  00360	8b c2		 mov	 eax, edx
  00362	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00365	03 c2		 add	 eax, edx
  00367	01 81 68 04 00
	00		 add	 DWORD PTR [ecx+1128], eax
  0036d	5f		 pop	 edi

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  0036e	b0 01		 mov	 al, 1
  00370	5e		 pop	 esi

; 901  : }

  00371	5d		 pop	 ebp
  00372	c2 0c 00	 ret	 12			; 0000000cH
$LN1@SetItemEqu:

; 893  : 			break;
; 894  : 
; 895  : 		case ADD_OPTION_MONSTER_DAMAGE_ABSORB:
; 896  : 			lpObj->DamageMinus += iEffectValue;

  00375	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00378	8a 4d 10	 mov	 cl, BYTE PTR _iEffectValue$[ebp]
  0037b	00 88 70 01 00
	00		 add	 BYTE PTR [eax+368], cl
$LN19@SetItemEqu:

; 897  : 			break;
; 898  : 	}
; 899  : 
; 900  : 	return true;

  00381	b0 01		 mov	 al, 1
  00383	5e		 pop	 esi

; 901  : }

  00384	5d		 pop	 ebp
  00385	c2 0c 00	 ret	 12			; 0000000cH
$LN25@SetItemEqu:
  00388	00 00 00 00	 DD	 $LN16@SetItemEqu
  0038c	00 00 00 00	 DD	 $LN10@SetItemEqu
  00390	00 00 00 00	 DD	 $LN15@SetItemEqu
  00394	00 00 00 00	 DD	 $LN12@SetItemEqu
  00398	00 00 00 00	 DD	 $LN9@SetItemEqu
  0039c	00 00 00 00	 DD	 $LN8@SetItemEqu
  003a0	00 00 00 00	 DD	 $LN7@SetItemEqu
  003a4	00 00 00 00	 DD	 $LN6@SetItemEqu
  003a8	00 00 00 00	 DD	 $LN5@SetItemEqu
  003ac	00 00 00 00	 DD	 $LN4@SetItemEqu
  003b0	00 00 00 00	 DD	 $LN3@SetItemEqu
  003b4	00 00 00 00	 DD	 $LN1@SetItemEqu
  003b8	00 00 00 00	 DD	 $LN18@SetItemEqu
  003bc	00 00 00 00	 DD	 $LN17@SetItemEqu
  003c0	00 00 00 00	 DD	 $LN13@SetItemEqu
  003c4	00 00 00 00	 DD	 $LN14@SetItemEqu
  003c8	00 00 00 00	 DD	 $LN2@SetItemEqu
  003cc	00 00 00 00	 DD	 $LN19@SetItemEqu
$LN24@SetItemEqu:
  003d0	00		 DB	 0
  003d1	01		 DB	 1
  003d2	02		 DB	 2
  003d3	03		 DB	 3
  003d4	11		 DB	 17			; 00000011H
  003d5	11		 DB	 17			; 00000011H
  003d6	11		 DB	 17			; 00000011H
  003d7	04		 DB	 4
  003d8	05		 DB	 5
  003d9	06		 DB	 6
  003da	07		 DB	 7
  003db	08		 DB	 8
  003dc	09		 DB	 9
  003dd	0a		 DB	 10			; 0000000aH
  003de	11		 DB	 17			; 00000011H
  003df	11		 DB	 17			; 00000011H
  003e0	11		 DB	 17			; 00000011H
  003e1	11		 DB	 17			; 00000011H
  003e2	11		 DB	 17			; 00000011H
  003e3	11		 DB	 17			; 00000011H
  003e4	11		 DB	 17			; 00000011H
  003e5	11		 DB	 17			; 00000011H
  003e6	11		 DB	 17			; 00000011H
  003e7	11		 DB	 17			; 00000011H
  003e8	11		 DB	 17			; 00000011H
  003e9	11		 DB	 17			; 00000011H
  003ea	11		 DB	 17			; 00000011H
  003eb	11		 DB	 17			; 00000011H
  003ec	11		 DB	 17			; 00000011H
  003ed	11		 DB	 17			; 00000011H
  003ee	11		 DB	 17			; 00000011H
  003ef	11		 DB	 17			; 00000011H
  003f0	11		 DB	 17			; 00000011H
  003f1	11		 DB	 17			; 00000011H
  003f2	11		 DB	 17			; 00000011H
  003f3	11		 DB	 17			; 00000011H
  003f4	11		 DB	 17			; 00000011H
  003f5	11		 DB	 17			; 00000011H
  003f6	11		 DB	 17			; 00000011H
  003f7	11		 DB	 17			; 00000011H
  003f8	11		 DB	 17			; 00000011H
  003f9	11		 DB	 17			; 00000011H
  003fa	11		 DB	 17			; 00000011H
  003fb	11		 DB	 17			; 00000011H
  003fc	11		 DB	 17			; 00000011H
  003fd	11		 DB	 17			; 00000011H
  003fe	11		 DB	 17			; 00000011H
  003ff	11		 DB	 17			; 00000011H
  00400	11		 DB	 17			; 00000011H
  00401	00		 DB	 0
  00402	0b		 DB	 11			; 0000000bH
  00403	0c		 DB	 12			; 0000000cH
  00404	0d		 DB	 13			; 0000000dH
  00405	0e		 DB	 14			; 0000000eH
  00406	0f		 DB	 15			; 0000000fH
  00407	11		 DB	 17			; 00000011H
  00408	11		 DB	 17			; 00000011H
  00409	11		 DB	 17			; 00000011H
  0040a	11		 DB	 17			; 00000011H
  0040b	11		 DB	 17			; 00000011H
  0040c	11		 DB	 17			; 00000011H
  0040d	11		 DB	 17			; 00000011H
  0040e	10		 DB	 16			; 00000010H
?SetItemEquipment@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ENDP ; CItemAddOption::SetItemEquipment
_TEXT	ENDS
PUBLIC	??0CItemAddOption@@QAE@XZ			; CItemAddOption::CItemAddOption
; Function compile flags: /Ogtp
;	COMDAT ??0CItemAddOption@@QAE@XZ
_TEXT	SEGMENT
??0CItemAddOption@@QAE@XZ PROC				; CItemAddOption::CItemAddOption, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CItemAddOption@@6B@

; 13   : 	this->Initialize();

  00009	e8 00 00 00 00	 call	 ?Initialize@CItemAddOption@@QAEXXZ ; CItemAddOption::Initialize

; 14   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CItemAddOption@@QAE@XZ ENDP				; CItemAddOption::CItemAddOption
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCItemAddOption@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCItemAddOption@@UAEPAXI@Z PROC			; CItemAddOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CItemAddOption@@UAE@XZ ; CItemAddOption::~CItemAddOption
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCItemAddOption@@UAEPAXI@Z ENDP			; CItemAddOption::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DD@FOAHMPMA@?$FLItemAddOption?$FN?5Overflow?5ItemAdd@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CItemAddOption@@QAEXPAD@Z			; CItemAddOption::Load
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_0DD@FOAHMPMA@?$FLItemAddOption?$FN?5Overflow?5ItemAdd@
CONST	SEGMENT
??_C@_0DD@FOAHMPMA@?$FLItemAddOption?$FN?5Overflow?5ItemAdd@ DB '[ItemAdd'
	DB	'Option] Overflow ItemAddOption Table Index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CItemAddOption@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
_iItemValue1$202661 = -52				; size = 4
_iItemValue2$202636 = -52				; size = 4
_iItemOption2$202662 = -48				; size = 4
_iItemOption2$202635 = -48				; size = 4
_iItemValue2$202663 = -44				; size = 4
_iItemValue1$202634 = -44				; size = 4
_iType$202620 = -40					; size = 4
tv509 = -36						; size = 4
tv515 = -32						; size = 4
tv517 = -28						; size = 4
tv519 = -24						; size = 4
_iItemAddOptionIndex$ = -20				; size = 4
tv511 = -16						; size = 4
tv513 = -12						; size = 4
tv521 = -8						; size = 4
tv523 = -4						; size = 4
tv525 = 8						; size = 4
_chFileName$ = 8					; size = 4
?Load@CItemAddOption@@QAEXPAD@Z PROC			; CItemAddOption::Load, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 75 c8	 mov	 DWORD PTR _this$[ebp], esi

; 23   : 	SMDToken Token;
; 24   : 
; 25   : 	this->Initialize();

  0000c	e8 00 00 00 00	 call	 ?Initialize@CItemAddOption@@QAEXXZ ; CItemAddOption::Initialize

; 26   : 
; 27   : 	SMDFile = fopen(chFileName, "r");

  00011	8b 45 08	 mov	 eax, DWORD PTR _chFileName$[ebp]
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _fopen
  0001f	83 c4 08	 add	 esp, 8
  00022	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 28   : 
; 29   : 	if ( SMDFile == NULL )

  00027	85 c0		 test	 eax, eax
  00029	0f 84 d2 00 00
	00		 je	 $LN17@Load

; 30   : 	{
; 31   : 		return;
; 32   : 	}
; 33   : 
; 34   : 	int iItemAddOptionIndex = 0;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iItemAddOptionIndex$[ebp], 0

; 35   : 
; 36   : 	while ( true )
; 37   : 	{
; 38   : 		Token = (SMDToken)GetToken();

  00036	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 39   : 
; 40   : 		if ( Token == END )

  0003b	83 f8 02	 cmp	 eax, 2
  0003e	0f 84 ae 00 00
	00		 je	 $LN25@Load
  00044	53		 push	 ebx
  00045	57		 push	 edi
$LL15@Load:

; 41   : 		{
; 42   : 			break;
; 43   : 		}
; 44   : 
; 45   : 		if ( Token == NUMBER )

  00046	83 f8 01	 cmp	 eax, 1
  00049	0f 85 93 00 00
	00		 jne	 $LN22@Load

; 46   : 		{
; 47   : 			int iType = (int)TokenNumber;

  0004f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00055	e8 00 00 00 00	 call	 __ftol2_sse
  0005a	89 45 d8	 mov	 DWORD PTR _iType$202620[ebp], eax
  0005d	8b 45 ec	 mov	 eax, DWORD PTR _iItemAddOptionIndex$[ebp]
  00060	c1 e0 05	 shl	 eax, 5
  00063	03 c6		 add	 eax, esi
  00065	8d 50 20	 lea	 edx, DWORD PTR [eax+32]
  00068	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
  0006b	89 55 dc	 mov	 DWORD PTR tv509[ebp], edx
  0006e	89 4d f0	 mov	 DWORD PTR tv511[ebp], ecx
  00071	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
  00074	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
  00077	89 55 f4	 mov	 DWORD PTR tv513[ebp], edx
  0007a	89 4d e0	 mov	 DWORD PTR tv515[ebp], ecx
  0007d	8d 50 06	 lea	 edx, DWORD PTR [eax+6]
  00080	8d 48 14	 lea	 ecx, DWORD PTR [eax+20]
  00083	89 55 e4	 mov	 DWORD PTR tv517[ebp], edx
  00086	89 4d e8	 mov	 DWORD PTR tv519[ebp], ecx
  00089	8d 50 10	 lea	 edx, DWORD PTR [eax+16]
  0008c	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0008f	83 c0 04	 add	 eax, 4
  00092	89 55 f8	 mov	 DWORD PTR tv521[ebp], edx
  00095	89 4d fc	 mov	 DWORD PTR tv523[ebp], ecx
  00098	89 45 08	 mov	 DWORD PTR tv525[ebp], eax
  0009b	eb 03 8d 49 00	 npad	 5
$LL11@Load:

; 48   : 
; 49   : 			while ( true )
; 50   : 			{
; 51   : 				if ( iType == 0 )

  000a0	8b 45 d8	 mov	 eax, DWORD PTR _iType$202620[ebp]
  000a3	85 c0		 test	 eax, eax
  000a5	75 61		 jne	 SHORT $LN8@Load

; 52   : 				{
; 53   : 					Token = (SMDToken)GetToken();

  000a7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 54   : 
; 55   : 					if ( strcmp("end", TokenString) == 0 )

  000ac	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000b1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL26@Load:
  000b6	8a 10		 mov	 dl, BYTE PTR [eax]
  000b8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000ba	75 1a		 jne	 SHORT $LN27@Load
  000bc	84 d2		 test	 dl, dl
  000be	74 12		 je	 SHORT $LN42@Load
  000c0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000c3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c6	75 0e		 jne	 SHORT $LN27@Load
  000c8	83 c0 02	 add	 eax, 2
  000cb	83 c1 02	 add	 ecx, 2
  000ce	84 d2		 test	 dl, dl
  000d0	75 e4		 jne	 SHORT $LL26@Load
$LN42@Load:
  000d2	33 c0		 xor	 eax, eax
  000d4	eb 05		 jmp	 SHORT $LN29@Load
$LN27@Load:
  000d6	1b c0		 sbb	 eax, eax
  000d8	83 d8 ff	 sbb	 eax, -1
$LN29@Load:
  000db	85 c0		 test	 eax, eax
  000dd	75 c1		 jne	 SHORT $LL11@Load
$LN44@Load:

; 167  : 					}
; 168  : 				}
; 169  : 			}

  000df	8b 75 c8	 mov	 esi, DWORD PTR _this$[ebp]
$LN22@Load:

; 35   : 
; 36   : 	while ( true )
; 37   : 	{
; 38   : 		Token = (SMDToken)GetToken();

  000e2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 39   : 
; 40   : 		if ( Token == END )

  000e7	83 f8 02	 cmp	 eax, 2
  000ea	0f 85 56 ff ff
	ff		 jne	 $LL15@Load
  000f0	5f		 pop	 edi
  000f1	5b		 pop	 ebx
$LN25@Load:

; 170  : 		}
; 171  : 	}
; 172  : 
; 173  : 	fclose(SMDFile);

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 _fclose
  000fe	83 c4 04	 add	 esp, 4
$LN17@Load:
  00101	5e		 pop	 esi

; 174  : }

  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 04 00	 ret	 4
$LN8@Load:

; 56   : 					{
; 57   : 						break;
; 58   : 					}
; 59   : 				}
; 60   : 
; 61   : 				if ( iType == 1 )

  00108	83 f8 01	 cmp	 eax, 1
  0010b	0f 85 45 01 00
	00		 jne	 $LN7@Load

; 62   : 				{
; 63   : 					int iItemNumber = 0;
; 64   : 					int iItemType = 0;
; 65   : 					int iItemIndex = 0;
; 66   : 					int iItemOption1 = 0;
; 67   : 					int iItemValue1 = 0;
; 68   : 					int iItemOption2 = 0;
; 69   : 					int iItemValue2 = 0;
; 70   : 					int iItemValidTime = 0;
; 71   : 
; 72   : 					Token = (SMDToken)GetToken();

  00111	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 73   : 
; 74   : 					if ( !strcmp("end", TokenString))

  00116	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0011b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL30@Load:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN31@Load
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN43@Load
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN31@Load
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL30@Load
$LN43@Load:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN33@Load
$LN31@Load:
  00140	1b c0		 sbb	 eax, eax
  00142	83 d8 ff	 sbb	 eax, -1
$LN33@Load:
  00145	85 c0		 test	 eax, eax
  00147	74 96		 je	 SHORT $LN44@Load

; 75   : 						break;
; 76   : 
; 77   : 					iItemType = (int)TokenNumber;

  00149	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0014f	e8 00 00 00 00	 call	 __ftol2_sse
  00154	8b f0		 mov	 esi, eax

; 78   : 
; 79   : 					Token = (SMDToken)GetToken();

  00156	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 					iItemIndex = (int)TokenNumber;

  0015b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00161	e8 00 00 00 00	 call	 __ftol2_sse
  00166	8b f8		 mov	 edi, eax

; 81   : 
; 82   : 					Token = (SMDToken)GetToken();

  00168	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 					iItemOption1 = (int)TokenNumber;					

  0016d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00173	e8 00 00 00 00	 call	 __ftol2_sse
  00178	8b d8		 mov	 ebx, eax

; 84   : 
; 85   : 					Token = (SMDToken)GetToken();

  0017a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 					iItemValue1 = (int)TokenNumber;

  0017f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00185	e8 00 00 00 00	 call	 __ftol2_sse
  0018a	89 45 d4	 mov	 DWORD PTR _iItemValue1$202634[ebp], eax

; 87   : 
; 88   : 					Token = (SMDToken)GetToken();

  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 					iItemOption2 = (int)TokenNumber;

  00192	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00198	e8 00 00 00 00	 call	 __ftol2_sse
  0019d	89 45 d0	 mov	 DWORD PTR _iItemOption2$202635[ebp], eax

; 90   : 
; 91   : 					Token = (SMDToken)GetToken();

  001a0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 92   : 					iItemValue2 = (int)TokenNumber;

  001a5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ab	e8 00 00 00 00	 call	 __ftol2_sse
  001b0	89 45 cc	 mov	 DWORD PTR _iItemValue2$202636[ebp], eax

; 93   : 
; 94   : 					Token = (SMDToken)GetToken();

  001b3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 95   : 					iItemValidTime = (int)TokenNumber;
; 96   : 
; 97   : 					iItemNumber = ITEMGET(iItemType, iItemIndex);
; 98   : 					this->m_ItemAddOption[iItemAddOptionIndex].wOptionType = iType;
; 99   : 					this->m_ItemAddOption[iItemAddOptionIndex].iItemNumber = iItemNumber;
; 100  : 					this->m_ItemAddOption[iItemAddOptionIndex].iItemType = iItemType;
; 101  : 					this->m_ItemAddOption[iItemAddOptionIndex].iItemIndex = iItemIndex;
; 102  : 					this->m_ItemAddOption[iItemAddOptionIndex].wEffectType1 = iItemOption1;
; 103  : 					this->m_ItemAddOption[iItemAddOptionIndex].iEffectValue1 = iItemValue1;
; 104  : 					this->m_ItemAddOption[iItemAddOptionIndex].wEffectType2 = iItemOption2;
; 105  : 					this->m_ItemAddOption[iItemAddOptionIndex].iEffectValue2 = iItemValue2;
; 106  : 					this->m_ItemAddOption[iItemAddOptionIndex].iEffectValidTime = iItemValidTime;

  001b8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001be	8b 45 08	 mov	 eax, DWORD PTR tv525[ebp]
  001c1	ba 01 00 00 00	 mov	 edx, 1
  001c6	66 89 10	 mov	 WORD PTR [eax], dx
  001c9	8b 45 f8	 mov	 eax, DWORD PTR tv521[ebp]
  001cc	8b 55 fc	 mov	 edx, DWORD PTR tv523[ebp]
  001cf	8b ce		 mov	 ecx, esi
  001d1	c1 e1 09	 shl	 ecx, 9
  001d4	89 30		 mov	 DWORD PTR [eax], esi
  001d6	8b 75 e8	 mov	 esi, DWORD PTR tv519[ebp]
  001d9	8b 45 f4	 mov	 eax, DWORD PTR tv513[ebp]
  001dc	03 cf		 add	 ecx, edi
  001de	89 0a		 mov	 DWORD PTR [edx], ecx
  001e0	8b 4d d4	 mov	 ecx, DWORD PTR _iItemValue1$202634[ebp]
  001e3	66 8b 55 d0	 mov	 dx, WORD PTR _iItemOption2$202635[ebp]
  001e7	89 3e		 mov	 DWORD PTR [esi], edi
  001e9	8b 7d e4	 mov	 edi, DWORD PTR tv517[ebp]
  001ec	66 89 1f	 mov	 WORD PTR [edi], bx
  001ef	8b 5d e0	 mov	 ebx, DWORD PTR tv515[ebp]
  001f2	89 0b		 mov	 DWORD PTR [ebx], ecx
  001f4	8b 4d cc	 mov	 ecx, DWORD PTR _iItemValue2$202636[ebp]
  001f7	66 89 10	 mov	 WORD PTR [eax], dx
  001fa	8b 55 f0	 mov	 edx, DWORD PTR tv511[ebp]
  001fd	89 0a		 mov	 DWORD PTR [edx], ecx
  001ff	e8 00 00 00 00	 call	 __ftol2_sse
  00204	8b 4d dc	 mov	 ecx, DWORD PTR tv509[ebp]

; 107  : 
; 108  : 					iItemAddOptionIndex++;

  00207	83 45 08 20	 add	 DWORD PTR tv525[ebp], 32 ; 00000020H
  0020b	83 45 fc 20	 add	 DWORD PTR tv523[ebp], 32 ; 00000020H
  0020f	83 45 f8 20	 add	 DWORD PTR tv521[ebp], 32 ; 00000020H
  00213	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00218	01 55 f4	 add	 DWORD PTR tv513[ebp], edx
  0021b	01 55 f0	 add	 DWORD PTR tv511[ebp], edx
  0021e	89 01		 mov	 DWORD PTR [ecx], eax
  00220	8b 45 ec	 mov	 eax, DWORD PTR _iItemAddOptionIndex$[ebp]
  00223	40		 inc	 eax
  00224	03 f2		 add	 esi, edx
  00226	03 fa		 add	 edi, edx
  00228	03 da		 add	 ebx, edx
  0022a	03 ca		 add	 ecx, edx
  0022c	89 45 ec	 mov	 DWORD PTR _iItemAddOptionIndex$[ebp], eax
  0022f	89 75 e8	 mov	 DWORD PTR tv519[ebp], esi
  00232	89 7d e4	 mov	 DWORD PTR tv517[ebp], edi
  00235	89 5d e0	 mov	 DWORD PTR tv515[ebp], ebx
  00238	89 4d dc	 mov	 DWORD PTR tv509[ebp], ecx

; 109  : 
; 110  : 					if (iItemAddOptionIndex > MAX_ITEM_ADD_OPTION )

  0023b	83 f8 64	 cmp	 eax, 100		; 00000064H
  0023e	0f 8e 5c fe ff
	ff		 jle	 $LL11@Load

; 111  : 					{
; 112  : 						MsgBox("[ItemAddOption] Overflow ItemAddOption Table Index");

  00244	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FOAHMPMA@?$FLItemAddOption?$FN?5Overflow?5ItemAdd@
  00249	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0024e	83 c4 04	 add	 esp, 4

; 113  : 					}
; 114  : 				}

  00251	e9 4a fe ff ff	 jmp	 $LL11@Load
$LN7@Load:

; 115  : 				else if ( iType >= 2 )

  00256	83 f8 02	 cmp	 eax, 2
  00259	0f 8c 41 fe ff
	ff		 jl	 $LL11@Load

; 116  : 				{
; 117  : 					int iItemNumber = 0;
; 118  : 					int iItemType = 0;
; 119  : 					int iItemIndex = 0;
; 120  : 					int iItemOption1 = 0;
; 121  : 					int iItemValue1 = 0;
; 122  : 					int iItemOption2 = 0;
; 123  : 					int iItemValue2 = 0;
; 124  : 					int iItemValidTime = 0;
; 125  : 
; 126  : 					Token = (SMDToken)GetToken();

  0025f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 
; 128  : 					if ( !strcmp("end", TokenString))

  00264	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00269	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0026e	8b ff		 npad	 2
$LL34@Load:
  00270	8a 10		 mov	 dl, BYTE PTR [eax]
  00272	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00274	75 1a		 jne	 SHORT $LN35@Load
  00276	84 d2		 test	 dl, dl
  00278	74 12		 je	 SHORT $LN36@Load
  0027a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0027d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00280	75 0e		 jne	 SHORT $LN35@Load
  00282	83 c0 02	 add	 eax, 2
  00285	83 c1 02	 add	 ecx, 2
  00288	84 d2		 test	 dl, dl
  0028a	75 e4		 jne	 SHORT $LL34@Load
$LN36@Load:
  0028c	33 c0		 xor	 eax, eax
  0028e	eb 05		 jmp	 SHORT $LN37@Load
$LN35@Load:
  00290	1b c0		 sbb	 eax, eax
  00292	83 d8 ff	 sbb	 eax, -1
$LN37@Load:
  00295	85 c0		 test	 eax, eax
  00297	0f 84 42 fe ff
	ff		 je	 $LN44@Load

; 129  : 						break;
; 130  : 
; 131  : 					iItemType = (int)TokenNumber;

  0029d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002a3	e8 00 00 00 00	 call	 __ftol2_sse
  002a8	8b f0		 mov	 esi, eax

; 132  : 
; 133  : 					Token = (SMDToken)GetToken();

  002aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 					iItemIndex = (int)TokenNumber;

  002af	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b5	e8 00 00 00 00	 call	 __ftol2_sse
  002ba	8b f8		 mov	 edi, eax

; 135  : 
; 136  : 					Token = (SMDToken)GetToken();

  002bc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 					iItemOption1 = (int)TokenNumber;					

  002c1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c7	e8 00 00 00 00	 call	 __ftol2_sse
  002cc	8b d8		 mov	 ebx, eax

; 138  : 
; 139  : 					Token = (SMDToken)GetToken();

  002ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 					iItemValue1 = (int)TokenNumber;

  002d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002d9	e8 00 00 00 00	 call	 __ftol2_sse
  002de	89 45 cc	 mov	 DWORD PTR _iItemValue1$202661[ebp], eax

; 141  : 
; 142  : 					Token = (SMDToken)GetToken();

  002e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 143  : 					iItemOption2 = (int)TokenNumber;

  002e6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ec	e8 00 00 00 00	 call	 __ftol2_sse
  002f1	89 45 d0	 mov	 DWORD PTR _iItemOption2$202662[ebp], eax

; 144  : 
; 145  : 					Token = (SMDToken)GetToken();

  002f4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 146  : 					iItemValue2 = (int)TokenNumber;

  002f9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ff	e8 00 00 00 00	 call	 __ftol2_sse
  00304	89 45 d4	 mov	 DWORD PTR _iItemValue2$202663[ebp], eax

; 147  : 
; 148  : 					Token = (SMDToken)GetToken();

  00307	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 149  : 					iItemValidTime = (int)TokenNumber;
; 150  : 
; 151  : 					iItemNumber = ITEMGET(iItemType, iItemIndex);
; 152  : 					this->m_ItemAddOption[iItemAddOptionIndex].wOptionType = iType;
; 153  : 					this->m_ItemAddOption[iItemAddOptionIndex].iItemNumber = iItemNumber;
; 154  : 					this->m_ItemAddOption[iItemAddOptionIndex].iItemType = iItemType;
; 155  : 					this->m_ItemAddOption[iItemAddOptionIndex].iItemIndex = iItemIndex;
; 156  : 					this->m_ItemAddOption[iItemAddOptionIndex].wEffectType1 = iItemOption1;
; 157  : 					this->m_ItemAddOption[iItemAddOptionIndex].iEffectValue1 = iItemValue1;
; 158  : 					this->m_ItemAddOption[iItemAddOptionIndex].wEffectType2 = iItemOption2;
; 159  : 					this->m_ItemAddOption[iItemAddOptionIndex].iEffectValue2 = iItemValue2;
; 160  : 					this->m_ItemAddOption[iItemAddOptionIndex].iEffectValidTime = iItemValidTime;

  0030c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00312	0f b7 45 d8	 movzx	 eax, WORD PTR _iType$202620[ebp]
  00316	8b 4d 08	 mov	 ecx, DWORD PTR tv525[ebp]
  00319	66 89 01	 mov	 WORD PTR [ecx], ax
  0031c	8b 4d f8	 mov	 ecx, DWORD PTR tv521[ebp]
  0031f	8b 45 fc	 mov	 eax, DWORD PTR tv523[ebp]
  00322	8b d6		 mov	 edx, esi
  00324	c1 e2 09	 shl	 edx, 9
  00327	03 d7		 add	 edx, edi
  00329	89 31		 mov	 DWORD PTR [ecx], esi
  0032b	8b 75 e8	 mov	 esi, DWORD PTR tv519[ebp]
  0032e	8b 4d f4	 mov	 ecx, DWORD PTR tv513[ebp]
  00331	89 10		 mov	 DWORD PTR [eax], edx
  00333	0f b7 45 d0	 movzx	 eax, WORD PTR _iItemOption2$202662[ebp]
  00337	8b 55 cc	 mov	 edx, DWORD PTR _iItemValue1$202661[ebp]
  0033a	89 3e		 mov	 DWORD PTR [esi], edi
  0033c	8b 7d e4	 mov	 edi, DWORD PTR tv517[ebp]
  0033f	66 89 1f	 mov	 WORD PTR [edi], bx
  00342	8b 5d e0	 mov	 ebx, DWORD PTR tv515[ebp]
  00345	89 13		 mov	 DWORD PTR [ebx], edx
  00347	8b 55 d4	 mov	 edx, DWORD PTR _iItemValue2$202663[ebp]
  0034a	66 89 01	 mov	 WORD PTR [ecx], ax
  0034d	8b 45 f0	 mov	 eax, DWORD PTR tv511[ebp]
  00350	89 10		 mov	 DWORD PTR [eax], edx
  00352	e8 00 00 00 00	 call	 __ftol2_sse
  00357	8b 4d dc	 mov	 ecx, DWORD PTR tv509[ebp]

; 161  : 
; 162  : 					iItemAddOptionIndex++;

  0035a	83 45 08 20	 add	 DWORD PTR tv525[ebp], 32 ; 00000020H
  0035e	83 45 fc 20	 add	 DWORD PTR tv523[ebp], 32 ; 00000020H
  00362	83 45 f8 20	 add	 DWORD PTR tv521[ebp], 32 ; 00000020H
  00366	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0036b	01 55 f4	 add	 DWORD PTR tv513[ebp], edx
  0036e	01 55 f0	 add	 DWORD PTR tv511[ebp], edx
  00371	89 01		 mov	 DWORD PTR [ecx], eax
  00373	8b 45 ec	 mov	 eax, DWORD PTR _iItemAddOptionIndex$[ebp]
  00376	40		 inc	 eax
  00377	03 f2		 add	 esi, edx
  00379	03 fa		 add	 edi, edx
  0037b	03 da		 add	 ebx, edx
  0037d	03 ca		 add	 ecx, edx
  0037f	89 45 ec	 mov	 DWORD PTR _iItemAddOptionIndex$[ebp], eax
  00382	89 75 e8	 mov	 DWORD PTR tv519[ebp], esi
  00385	89 7d e4	 mov	 DWORD PTR tv517[ebp], edi
  00388	89 5d e0	 mov	 DWORD PTR tv515[ebp], ebx
  0038b	89 4d dc	 mov	 DWORD PTR tv509[ebp], ecx

; 163  : 
; 164  : 					if (iItemAddOptionIndex > MAX_ITEM_ADD_OPTION )

  0038e	83 f8 64	 cmp	 eax, 100		; 00000064H
  00391	0f 8e 09 fd ff
	ff		 jle	 $LL11@Load

; 165  : 					{
; 166  : 						MsgBox("[ItemAddOption] Overflow ItemAddOption Table Index");

  00397	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FOAHMPMA@?$FLItemAddOption?$FN?5Overflow?5ItemAdd@
  0039c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  003a1	83 c4 04	 add	 esp, 4

; 167  : 					}
; 168  : 				}
; 169  : 			}

  003a4	e9 f7 fc ff ff	 jmp	 $LL11@Load
?Load@CItemAddOption@@QAEXPAD@Z ENDP			; CItemAddOption::Load
_TEXT	ENDS
PUBLIC	?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::ClearItemEffect2
; Function compile flags: /Ogtp
;	COMDAT ?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iItemNumber$ = 12					; size = 4
_iEffectOption$ = 16					; size = 4
?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z PROC ; CItemAddOption::ClearItemEffect2, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 	LPITEMEFFECT lpItemEffect = NULL;
; 194  : 
; 195  : 	lpItemEffect = this->_SearchItemEffect(iItemNumber);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	50		 push	 eax
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
  00010	8b f0		 mov	 esi, eax

; 196  : 
; 197  : 	if(lpItemEffect == NULL)

  00012	85 f6		 test	 esi, esi
  00014	75 08		 jne	 SHORT $LN1@ClearItemE@2

; 198  : 	{
; 199  : 		return 0;

  00016	5f		 pop	 edi
  00017	32 c0		 xor	 al, al
  00019	5e		 pop	 esi

; 206  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
$LN1@ClearItemE@2:

; 200  : 	}
; 201  : 
; 202  : 	this->_ClearItemEffect(lpObj, iEffectOption, lpItemEffect->wOptionType, lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1);

  0001e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00021	0f b7 56 02	 movzx	 edx, WORD PTR [esi+2]
  00025	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00028	53		 push	 ebx
  00029	8b 5d 10	 mov	 ebx, DWORD PTR _iEffectOption$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00030	52		 push	 edx
  00031	50		 push	 eax
  00032	53		 push	 ebx
  00033	51		 push	 ecx
  00034	8b cf		 mov	 ecx, edi
  00036	e8 00 00 00 00	 call	 ?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z ; CItemAddOption::_ClearItemEffect

; 203  : 	this->_ClearItemEffect(lpObj, iEffectOption, lpItemEffect->wOptionType, lpItemEffect->wEffectType2, lpItemEffect->iEffectValue2);

  0003b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0003e	0f b7 46 04	 movzx	 eax, WORD PTR [esi+4]
  00042	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00045	52		 push	 edx
  00046	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00049	50		 push	 eax
  0004a	51		 push	 ecx
  0004b	53		 push	 ebx
  0004c	52		 push	 edx
  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z ; CItemAddOption::_ClearItemEffect
  00054	5b		 pop	 ebx
  00055	5f		 pop	 edi

; 204  : 
; 205  : 	return 1;

  00056	b0 01		 mov	 al, 1
  00058	5e		 pop	 esi

; 206  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?ClearItemEffect2@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ENDP ; CItemAddOption::ClearItemEffect2
_TEXT	ENDS
PUBLIC	?PrevSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ; CItemAddOption::PrevSetItemLastEffectForCashShop
EXTRN	?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z:PROC ; CCashItemPeriodSystem::GetItemPeriodInfo
EXTRN	?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A:BYTE ; g_CashItemPeriodSystem
; Function compile flags: /Ogtp
;	COMDAT ?PrevSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv158 = -4						; size = 4
_lpObj$ = 8						; size = 4
?PrevSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CItemAddOption::PrevSetItemLastEffectForCashShop, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 210  : 	ITEMPERIOD_INFO* lpItemPeriodInfo = NULL;
; 211  : 	LPITEMEFFECT lpItemEffect = NULL;
; 212  : 
; 213  : 	lpItemPeriodInfo = ::g_CashItemPeriodSystem.GetItemPeriodInfo(lpObj);

  00004	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	50		 push	 eax
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00010	e8 00 00 00 00	 call	 ?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetItemPeriodInfo

; 214  : 
; 215  : 	if( lpItemPeriodInfo == NULL )

  00015	85 c0		 test	 eax, eax
  00017	75 09		 jne	 SHORT $LN14@PrevSetIte

; 216  : 	{
; 217  : 		return false;

  00019	32 c0		 xor	 al, al
  0001b	5f		 pop	 edi

; 267  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN14@PrevSetIte:
  00022	53		 push	 ebx
  00023	56		 push	 esi

; 218  : 	}
; 219  : 
; 220  : 	for( int i = 0; i < MAX_ITEM_PERIOD_EFFECT; i++ )

  00024	8d 58 1c	 lea	 ebx, DWORD PTR [eax+28]
  00027	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR tv158[ebp], 10 ; 0000000aH
  0002e	8b ff		 npad	 2
$LL13@PrevSetIte:

; 221  : 	{
; 222  : 		if( lpItemPeriodInfo->vItemEffect[i].bInUse == true )

  00030	80 7b fc 01	 cmp	 BYTE PTR [ebx-4], 1
  00034	75 64		 jne	 SHORT $LN12@PrevSetIte

; 223  : 		{
; 224  : 			lpItemEffect = this->_SearchItemEffect(lpItemPeriodInfo->vItemEffect[i].iItemCode);

  00036	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00038	51		 push	 ecx
  00039	8b cf		 mov	 ecx, edi
  0003b	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
  00040	8b f0		 mov	 esi, eax

; 225  : 			
; 226  : 			if( lpItemEffect != NULL )

  00042	85 f6		 test	 esi, esi
  00044	74 54		 je	 SHORT $LN12@PrevSetIte

; 227  : 			{
; 228  : #ifdef DEBUG_CODE
; 229  : 				LogAddC(1,"lpItemEffect->wEffectType1: %d",lpItemEffect->wEffectType1);
; 230  : #endif
; 231  : 
; 232  : 				switch( lpItemEffect->wEffectType1 )

  00046	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0004a	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  0004d	83 f9 09	 cmp	 ecx, 9
  00050	77 1e		 ja	 SHORT $LN5@PrevSetIte
  00052	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN19@PrevSetIte[ecx]
  00059	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN22@PrevSetIte[edx*4]
$LN6@PrevSetIte:

; 233  : 				{
; 234  : 					case ADD_OPTION_LIFE: //4
; 235  : 					case ADD_OPTION_MANA: //5
; 236  : 					case ADD_OPTION_STRENGTH: //9
; 237  : 					case ADD_OPTION_DEXTERITY: //10
; 238  : 					case ADD_OPTION_VITALITY: //11
; 239  : 					case ADD_OPTION_ENERGY: //12
; 240  : 					case ADD_OPTION_LEADERSHIP: //13
; 241  : 						this->_SetItemEffect(lpObj,lpItemEffect->wEffectType1,lpItemEffect->iEffectValue1);

  00060	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00063	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00066	51		 push	 ecx
  00067	50		 push	 eax
  00068	52		 push	 edx
  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect
$LN5@PrevSetIte:

; 242  : 						break;
; 243  : 
; 244  : 					default :
; 245  : 						break;
; 246  : 				}
; 247  : 
; 248  : 				switch( lpItemEffect->wEffectType2 )

  00070	0f b7 46 04	 movzx	 eax, WORD PTR [esi+4]
  00074	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00077	83 f9 09	 cmp	 ecx, 9
  0007a	77 1e		 ja	 SHORT $LN12@PrevSetIte
  0007c	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN20@PrevSetIte[ecx]
  00083	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@PrevSetIte[ecx*4]
$LN2@PrevSetIte:

; 249  : 				{
; 250  : 					case ADD_OPTION_LIFE: //4
; 251  : 					case ADD_OPTION_MANA: //5
; 252  : 					case ADD_OPTION_STRENGTH: //9
; 253  : 					case ADD_OPTION_DEXTERITY: //10
; 254  : 					case ADD_OPTION_VITALITY: //11
; 255  : 					case ADD_OPTION_ENERGY: //12
; 256  : 					case ADD_OPTION_LEADERSHIP: //13
; 257  : 						this->_SetItemEffect(lpObj,lpItemEffect->wEffectType2,lpItemEffect->iEffectValue2);

  0008a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0008d	52		 push	 edx
  0008e	50		 push	 eax
  0008f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00092	50		 push	 eax
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect
$LN12@PrevSetIte:

; 218  : 	}
; 219  : 
; 220  : 	for( int i = 0; i < MAX_ITEM_PERIOD_EFFECT; i++ )

  0009a	83 c3 10	 add	 ebx, 16			; 00000010H
  0009d	ff 4d fc	 dec	 DWORD PTR tv158[ebp]
  000a0	75 8e		 jne	 SHORT $LL13@PrevSetIte

; 258  : 						break;
; 259  : 					
; 260  : 					default :
; 261  : 						break;
; 262  : 				}
; 263  : 			}
; 264  : 		}	
; 265  : 	}
; 266  : 	return true;

  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	b0 01		 mov	 al, 1
  000a6	5f		 pop	 edi

; 267  : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
  000ad	8d 49 00	 npad	 3
$LN22@PrevSetIte:
  000b0	00 00 00 00	 DD	 $LN6@PrevSetIte
  000b4	00 00 00 00	 DD	 $LN5@PrevSetIte
$LN19@PrevSetIte:
  000b8	00		 DB	 0
  000b9	00		 DB	 0
  000ba	01		 DB	 1
  000bb	01		 DB	 1
  000bc	01		 DB	 1
  000bd	00		 DB	 0
  000be	00		 DB	 0
  000bf	00		 DB	 0
  000c0	00		 DB	 0
  000c1	00		 DB	 0
  000c2	8b ff		 npad	 2
$LN23@PrevSetIte:
  000c4	00 00 00 00	 DD	 $LN2@PrevSetIte
  000c8	00 00 00 00	 DD	 $LN12@PrevSetIte
$LN20@PrevSetIte:
  000cc	00		 DB	 0
  000cd	00		 DB	 0
  000ce	01		 DB	 1
  000cf	01		 DB	 1
  000d0	01		 DB	 1
  000d1	00		 DB	 0
  000d2	00		 DB	 0
  000d3	00		 DB	 0
  000d4	00		 DB	 0
  000d5	00		 DB	 0
?PrevSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CItemAddOption::PrevSetItemLastEffectForCashShop
_TEXT	ENDS
PUBLIC	?NextSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ; CItemAddOption::NextSetItemLastEffectForCashShop
; Function compile flags: /Ogtp
;	COMDAT ?NextSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv158 = -4						; size = 4
_lpObj$ = 8						; size = 4
?NextSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CItemAddOption::NextSetItemLastEffectForCashShop, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 272  : 	ITEMPERIOD_INFO* lpItemPeriodInfo = NULL;
; 273  : 	LPITEMEFFECT lpItemEffect = NULL;
; 274  : 
; 275  : 	lpItemPeriodInfo = ::g_CashItemPeriodSystem.GetItemPeriodInfo(lpObj);

  00004	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	50		 push	 eax
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00010	e8 00 00 00 00	 call	 ?GetItemPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetItemPeriodInfo

; 276  : 
; 277  : 	if( lpItemPeriodInfo == NULL )

  00015	85 c0		 test	 eax, eax
  00017	75 09		 jne	 SHORT $LN14@NextSetIte

; 278  : 	{
; 279  : 		return false;

  00019	32 c0		 xor	 al, al
  0001b	5f		 pop	 edi

; 327  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN14@NextSetIte:
  00022	53		 push	 ebx
  00023	56		 push	 esi

; 280  : 	}
; 281  : 
; 282  : 	for( int i = 0; i < MAX_ITEM_PERIOD_EFFECT; i++ )

  00024	8d 58 1c	 lea	 ebx, DWORD PTR [eax+28]
  00027	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR tv158[ebp], 10 ; 0000000aH
  0002e	8b ff		 npad	 2
$LL13@NextSetIte:

; 283  : 	{
; 284  : 		if( lpItemPeriodInfo->vItemEffect[i].bInUse == true )

  00030	80 7b fc 01	 cmp	 BYTE PTR [ebx-4], 1
  00034	75 64		 jne	 SHORT $LN12@NextSetIte

; 285  : 		{
; 286  : 			lpItemEffect = this->_SearchItemEffect(lpItemPeriodInfo->vItemEffect[i].iItemCode);

  00036	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00038	51		 push	 ecx
  00039	8b cf		 mov	 ecx, edi
  0003b	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
  00040	8b f0		 mov	 esi, eax

; 287  : 			
; 288  : 			if( lpItemEffect != NULL )

  00042	85 f6		 test	 esi, esi
  00044	74 54		 je	 SHORT $LN12@NextSetIte

; 289  : 			{
; 290  : 				switch( lpItemEffect->wEffectType1 )

  00046	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0004a	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  0004d	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00050	77 0e		 ja	 SHORT $LN5@NextSetIte
  00052	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN19@NextSetIte[ecx]
  00059	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN22@NextSetIte[edx*4]
$LN5@NextSetIte:

; 291  : 				{
; 292  : 					case ADD_OPTION_SPEED: //1 -> Season3.5 add-on
; 293  : 					case ADD_OPTION_LIFE: //4
; 294  : 					case ADD_OPTION_MANA: //5
; 295  : 					case ADD_OPTION_STRENGTH: //9
; 296  : 					case ADD_OPTION_DEXTERITY: //10
; 297  : 					case ADD_OPTION_VITALITY: //11
; 298  : 					case ADD_OPTION_ENERGY: //12
; 299  : 					case ADD_OPTION_LEADERSHIP: //13
; 300  : 						break;
; 301  : 
; 302  : 					default :
; 303  : 						this->_SetItemEffect(lpObj,lpItemEffect->wEffectType1,lpItemEffect->iEffectValue1);

  00060	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00063	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00066	51		 push	 ecx
  00067	50		 push	 eax
  00068	52		 push	 edx
  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect
$LN7@NextSetIte:

; 304  : 						break;
; 305  : 				}
; 306  : 
; 307  : 				switch( lpItemEffect->wEffectType2 )

  00070	0f b7 46 04	 movzx	 eax, WORD PTR [esi+4]
  00074	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00077	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  0007a	77 0e		 ja	 SHORT $LN1@NextSetIte
  0007c	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN20@NextSetIte[ecx]
  00083	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@NextSetIte[ecx*4]
$LN1@NextSetIte:

; 308  : 				{
; 309  : 					case ADD_OPTION_SPEED: //1 -> Season3.5 add-on
; 310  : 					case ADD_OPTION_LIFE: //4
; 311  : 					case ADD_OPTION_MANA: //5
; 312  : 					case ADD_OPTION_STRENGTH: //9
; 313  : 					case ADD_OPTION_DEXTERITY: //10
; 314  : 					case ADD_OPTION_VITALITY: //11
; 315  : 					case ADD_OPTION_ENERGY: //12
; 316  : 					case ADD_OPTION_LEADERSHIP: //13
; 317  : 						break;
; 318  : 					
; 319  : 					default :
; 320  : 						this->_SetItemEffect(lpObj,lpItemEffect->wEffectType2,lpItemEffect->iEffectValue2);

  0008a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0008d	52		 push	 edx
  0008e	50		 push	 eax
  0008f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00092	50		 push	 eax
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect
$LN12@NextSetIte:

; 280  : 	}
; 281  : 
; 282  : 	for( int i = 0; i < MAX_ITEM_PERIOD_EFFECT; i++ )

  0009a	83 c3 10	 add	 ebx, 16			; 00000010H
  0009d	ff 4d fc	 dec	 DWORD PTR tv158[ebp]
  000a0	75 8e		 jne	 SHORT $LL13@NextSetIte

; 321  : 						break;
; 322  : 				}
; 323  : 			}
; 324  : 		}	
; 325  : 	}
; 326  : 	return true;

  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	b0 01		 mov	 al, 1
  000a6	5f		 pop	 edi

; 327  : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
  000ad	8d 49 00	 npad	 3
$LN22@NextSetIte:
  000b0	00 00 00 00	 DD	 $LN7@NextSetIte
  000b4	00 00 00 00	 DD	 $LN5@NextSetIte
$LN19@NextSetIte:
  000b8	00		 DB	 0
  000b9	01		 DB	 1
  000ba	01		 DB	 1
  000bb	00		 DB	 0
  000bc	00		 DB	 0
  000bd	01		 DB	 1
  000be	01		 DB	 1
  000bf	01		 DB	 1
  000c0	00		 DB	 0
  000c1	00		 DB	 0
  000c2	00		 DB	 0
  000c3	00		 DB	 0
  000c4	00		 DB	 0
  000c5	8d 49 00	 npad	 3
$LN23@NextSetIte:
  000c8	00 00 00 00	 DD	 $LN12@NextSetIte
  000cc	00 00 00 00	 DD	 $LN1@NextSetIte
$LN20@NextSetIte:
  000d0	00		 DB	 0
  000d1	01		 DB	 1
  000d2	01		 DB	 1
  000d3	00		 DB	 0
  000d4	00		 DB	 0
  000d5	01		 DB	 1
  000d6	01		 DB	 1
  000d7	01		 DB	 1
  000d8	00		 DB	 0
  000d9	00		 DB	 0
  000da	00		 DB	 0
  000db	00		 DB	 0
  000dc	00		 DB	 0
?NextSetItemLastEffectForCashShop@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CItemAddOption::NextSetItemLastEffectForCashShop
_TEXT	ENDS
PUBLIC	?PrevSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ; CItemAddOption::PrevSetItemLastEffectForHallowin
; Function compile flags: /Ogtp
;	COMDAT ?PrevSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?PrevSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CItemAddOption::PrevSetItemLastEffectForHallowin, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 331  : 	LPITEMEFFECT lpItemEffect = NULL;
; 332  : 	int iItemEffectType = lpObj->m_wItemEffectType;
; 333  : 
; 334  : 	lpItemEffect = this->_SearchItemEffect(iItemEffectType);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	0f b7 86 14 20
	00 00		 movzx	 eax, WORD PTR [esi+8212]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect

; 335  : 
; 336  : 	if ( lpItemEffect == NULL )

  00014	85 c0		 test	 eax, eax
  00016	75 07		 jne	 SHORT $LN3@PrevSetIte@2

; 337  : 	{
; 338  : 		return false;

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 347  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN3@PrevSetIte@2:

; 339  : 	}
; 340  : 
; 341  : 	if ( lpItemEffect->wEffectType1 == ADD_OPTION_LIFE || lpItemEffect->wEffectType1 == ADD_OPTION_MANA )

  0001f	0f b7 50 02	 movzx	 edx, WORD PTR [eax+2]
  00023	83 fa 04	 cmp	 edx, 4
  00026	74 05		 je	 SHORT $LN1@PrevSetIte@2
  00028	83 fa 05	 cmp	 edx, 5
  0002b	75 0b		 jne	 SHORT $LN2@PrevSetIte@2
$LN1@PrevSetIte@2:

; 342  : 	{
; 343  : 		this->_SetItemEffect(lpObj, lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1);

  0002d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect
$LN2@PrevSetIte@2:

; 344  : 	}
; 345  : 
; 346  : 	return true;

  00038	b0 01		 mov	 al, 1
  0003a	5e		 pop	 esi

; 347  : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?PrevSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CItemAddOption::PrevSetItemLastEffectForHallowin
_TEXT	ENDS
PUBLIC	?NextSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ; CItemAddOption::NextSetItemLastEffectForHallowin
; Function compile flags: /Ogtp
;	COMDAT ?NextSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?NextSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CItemAddOption::NextSetItemLastEffectForHallowin, COMDAT
; _this$ = ecx

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 351  : 	LPITEMEFFECT lpItemEffect = NULL;
; 352  : 	int iItemEffectType = lpObj->m_wItemEffectType;
; 353  : 
; 354  : 	lpItemEffect = this->_SearchItemEffect(iItemEffectType);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	0f b7 86 14 20
	00 00		 movzx	 eax, WORD PTR [esi+8212]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect

; 355  : 
; 356  : 	if ( lpItemEffect == NULL )

  00014	85 c0		 test	 eax, eax
  00016	75 07		 jne	 SHORT $LN2@NextSetIte@2

; 357  : 	{
; 358  : 		return false;

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 367  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN2@NextSetIte@2:

; 359  : 	}
; 360  : 
; 361  : 	if ( lpItemEffect->wEffectType1 != ADD_OPTION_LIFE && lpItemEffect->wEffectType1 != ADD_OPTION_MANA )

  0001f	0f b7 50 02	 movzx	 edx, WORD PTR [eax+2]
  00023	83 fa 04	 cmp	 edx, 4
  00026	74 10		 je	 SHORT $LN1@NextSetIte@2
  00028	83 fa 05	 cmp	 edx, 5
  0002b	74 0b		 je	 SHORT $LN1@NextSetIte@2

; 362  : 	{
; 363  : 		this->_SetItemEffect(lpObj, lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1);

  0002d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect
$LN1@NextSetIte@2:

; 364  : 	}
; 365  : 
; 366  : 	return true;

  00038	b0 01		 mov	 al, 1
  0003a	5e		 pop	 esi

; 367  : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?NextSetItemLastEffectForHallowin@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CItemAddOption::NextSetItemLastEffectForHallowin
_TEXT	ENDS
PUBLIC	?SetManualItemEffect@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HHH@Z ; CItemAddOption::SetManualItemEffect
; Function compile flags: /Ogtp
;	COMDAT ?SetManualItemEffect@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iEffectType$ = 12					; size = 4
_iEffectValue$ = 16					; size = 4
_iLeftTime$ = 20					; size = 4
?SetManualItemEffect@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HHH@Z PROC ; CItemAddOption::SetManualItemEffect, COMDAT
; _this$ = ecx

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 453  : 	if(iEffectType <= 0)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _iEffectType$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000b	85 f6		 test	 esi, esi
  0000d	7f 09		 jg	 SHORT $LN2@SetManualI

; 454  : 	{
; 455  : 		return FALSE;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 469  : 
; 470  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 10 00	 ret	 16			; 00000010H
$LN2@SetManualI:
  00018	53		 push	 ebx

; 456  : 	}
; 457  : 
; 458  : 	if(iLeftTime <= 0)

  00019	8b 5d 14	 mov	 ebx, DWORD PTR _iLeftTime$[ebp]
  0001c	57		 push	 edi
  0001d	85 db		 test	 ebx, ebx
  0001f	7f 05		 jg	 SHORT $LN1@SetManualI

; 459  : 	{
; 460  : 		iLeftTime = 60;

  00021	bb 3c 00 00 00	 mov	 ebx, 60			; 0000003cH
$LN1@SetManualI:

; 461  : 	}
; 462  : 
; 463  : 	this->_SetItemEffect(lpObj,iEffectType,iEffectValue);

  00026	8b 45 10	 mov	 eax, DWORD PTR _iEffectValue$[ebp]
  00029	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0002c	50		 push	 eax
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect

; 464  : 
; 465  : 	GCUseEffectItem(lpObj,0,1,iEffectType,iLeftTime);

  00034	53		 push	 ebx
  00035	56		 push	 esi
  00036	6a 01		 push	 1
  00038	6a 00		 push	 0
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 ?GCUseEffectItem@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; GCUseEffectItem

; 466  :     this->SendItemUse(lpObj,iEffectType,1,iEffectType,iEffectValue,iLeftTime);

  00040	8b 4d 10	 mov	 ecx, DWORD PTR _iEffectValue$[ebp]
  00043	83 c4 14	 add	 esp, 20			; 00000014H
  00046	53		 push	 ebx
  00047	51		 push	 ecx
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	56		 push	 esi
  0004c	6a 01		 push	 1
  0004e	56		 push	 esi
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z ; CItemAddOption::SendItemUse
  00055	5f		 pop	 edi
  00056	5b		 pop	 ebx

; 467  : 
; 468  : 	return TRUE;

  00057	b0 01		 mov	 al, 1
  00059	5e		 pop	 esi

; 469  : 
; 470  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 10 00	 ret	 16			; 00000010H
?SetManualItemEffect@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HHH@Z ENDP ; CItemAddOption::SetManualItemEffect
_TEXT	ENDS
PUBLIC	?GetCurrentEffectType@CItemAddOption@@QAEPAUITEMEFFECT@@PAUOBJECTSTRUCT@@@Z ; CItemAddOption::GetCurrentEffectType
; Function compile flags: /Ogtp
;	COMDAT ?GetCurrentEffectType@CItemAddOption@@QAEPAUITEMEFFECT@@PAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetCurrentEffectType@CItemAddOption@@QAEPAUITEMEFFECT@@PAUOBJECTSTRUCT@@@Z PROC ; CItemAddOption::GetCurrentEffectType, COMDAT
; _this$ = ecx

; 667  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 668  : 	if ( lpObj->m_wItemEffectType <= 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	0f b7 80 14 20
	00 00		 movzx	 eax, WORD PTR [eax+8212]
  0000d	66 85 c0	 test	 ax, ax
  00010	75 06		 jne	 SHORT $LN1@GetCurrent

; 669  : 	{
; 670  : 		return NULL;

  00012	33 c0		 xor	 eax, eax

; 674  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetCurrent:

; 671  : 	}
; 672  : 
; 673  : 	return this->_SearchItemEffect(lpObj->m_wItemEffectType);

  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect

; 674  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?GetCurrentEffectType@CItemAddOption@@QAEPAUITEMEFFECT@@PAUOBJECTSTRUCT@@@Z ENDP ; CItemAddOption::GetCurrentEffectType
_TEXT	ENDS
PUBLIC	?ApplyForEquipment@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ; CItemAddOption::ApplyForEquipment
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Ogtp
;	COMDAT ?ApplyForEquipment@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ApplyForEquipment@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CItemAddOption::ApplyForEquipment, COMDAT
; _this$ = ecx

; 740  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 741  : 	//ITEMOPTION_FOR380ITEM_EFFECT * pItemEffect = &lpObj->m_ItemOptionExFor380;
; 742  : 	//this->InitEffectValue(pItemEffect);
; 743  : 	int iItemIndex = 0;
; 744  : 
; 745  : 	for ( iItemIndex = 0; iItemIndex < INVETORY_WEAR_SIZE ; iItemIndex++)

  00008	33 db		 xor	 ebx, ebx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL6@ApplyForEq:

; 746  : 	{
; 747  : 		CItem * pItem = &lpObj->pInventory[iItemIndex];

  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00013	8b b0 24 0e 00
	00		 mov	 esi, DWORD PTR [eax+3620]
  00019	03 f3		 add	 esi, ebx

; 748  : 
; 749  : 		if ( pItem->IsItem()
; 750  : 			/* pItem->m_IsValidItem &&*/
; 751  : 			 )

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00022	85 c0		 test	 eax, eax
  00024	74 40		 je	 SHORT $LN5@ApplyForEq

; 752  : 		{
; 753  : 			LPITEMEFFECT lpItemEffect = NULL;
; 754  : 			lpItemEffect = this->_SearchItemEffect(pItem->m_Type); 

  00026	0f bf 4e 06	 movsx	 ecx, WORD PTR [esi+6]
  0002a	51		 push	 ecx
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
  00032	8b f0		 mov	 esi, eax

; 755  : 
; 756  : 			if ( lpItemEffect == NULL )

  00034	85 f6		 test	 esi, esi
  00036	74 2e		 je	 SHORT $LN5@ApplyForEq

; 757  : 			{
; 758  : 				continue;
; 759  : 			}
; 760  : 
; 761  : 			if(lpItemEffect->iEffectValidTime == 0)

  00038	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0003c	75 28		 jne	 SHORT $LN5@ApplyForEq

; 762  : 			{
; 763  : 				this->SetItemEquipment(lpObj,lpItemEffect->wEffectType1,lpItemEffect->iEffectValue1);

  0003e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00041	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00048	52		 push	 edx
  00049	50		 push	 eax
  0004a	51		 push	 ecx
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?SetItemEquipment@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::SetItemEquipment

; 764  : 				this->SetItemEquipment(lpObj,lpItemEffect->wEffectType2,lpItemEffect->iEffectValue2);

  00052	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00055	0f b7 46 04	 movzx	 eax, WORD PTR [esi+4]
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0005c	52		 push	 edx
  0005d	50		 push	 eax
  0005e	51		 push	 ecx
  0005f	8b cf		 mov	 ecx, edi
  00061	e8 00 00 00 00	 call	 ?SetItemEquipment@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::SetItemEquipment
$LN5@ApplyForEq:

; 741  : 	//ITEMOPTION_FOR380ITEM_EFFECT * pItemEffect = &lpObj->m_ItemOptionExFor380;
; 742  : 	//this->InitEffectValue(pItemEffect);
; 743  : 	int iItemIndex = 0;
; 744  : 
; 745  : 	for ( iItemIndex = 0; iItemIndex < INVETORY_WEAR_SIZE ; iItemIndex++)

  00066	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  0006c	81 fb f0 09 00
	00		 cmp	 ebx, 2544		; 000009f0H
  00072	7c 9c		 jl	 SHORT $LL6@ApplyForEq

; 765  : 			}
; 766  : 		}
; 767  : 	}
; 768  : 
; 769  : 	return TRUE;

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	b0 01		 mov	 al, 1
  00078	5b		 pop	 ebx

; 770  : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?ApplyForEquipment@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CItemAddOption::ApplyForEquipment
_TEXT	ENDS
PUBLIC	?ClearItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CItemAddOption::ClearItemEffect
; Function compile flags: /Ogtp
;	COMDAT ?ClearItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iEffectOption$ = 12					; size = 4
?ClearItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@H@Z PROC ; CItemAddOption::ClearItemEffect, COMDAT
; _this$ = ecx

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 648  : 	LPITEMEFFECT lpItemEffect = NULL;
; 649  : 	
; 650  : 	lpItemEffect = this->GetCurrentEffectType(lpObj);

  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00009	57		 push	 edi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	e8 00 00 00 00	 call	 ?GetCurrentEffectType@CItemAddOption@@QAEPAUITEMEFFECT@@PAUOBJECTSTRUCT@@@Z ; CItemAddOption::GetCurrentEffectType
  00011	8b f0		 mov	 esi, eax

; 651  : 
; 652  : 	if ( lpItemEffect == NULL )

  00013	85 f6		 test	 esi, esi
  00015	75 09		 jne	 SHORT $LN1@ClearItemE@3

; 653  : 	{
; 654  : 		return false;

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	32 c0		 xor	 al, al
  0001b	5b		 pop	 ebx

; 664  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN1@ClearItemE@3:

; 655  : 	}
; 656  : 
; 657  : 	this->_ClearItemEffect(lpObj, iEffectOption, lpItemEffect->wOptionType,	lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1);

  00020	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00023	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]
  00027	0f b7 16	 movzx	 edx, WORD PTR [esi]
  0002a	50		 push	 eax
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _iEffectOption$[ebp]
  0002e	51		 push	 ecx
  0002f	52		 push	 edx
  00030	50		 push	 eax
  00031	57		 push	 edi
  00032	8b cb		 mov	 ecx, ebx
  00034	e8 00 00 00 00	 call	 ?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z ; CItemAddOption::_ClearItemEffect

; 658  : 	this->_ClearItemEffect(lpObj, iEffectOption, lpItemEffect->wOptionType,	lpItemEffect->wEffectType2, lpItemEffect->iEffectValue2);

  00039	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0003c	0f b7 56 04	 movzx	 edx, WORD PTR [esi+4]
  00040	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00043	51		 push	 ecx
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _iEffectOption$[ebp]
  00047	52		 push	 edx
  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	57		 push	 edi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	e8 00 00 00 00	 call	 ?_ClearItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HHHH@Z ; CItemAddOption::_ClearItemEffect

; 659  : 
; 660  : 	lpObj->m_wItemEffectType = 0; //Season3 add-on

  00052	33 d2		 xor	 edx, edx
  00054	66 89 97 14 20
	00 00		 mov	 WORD PTR [edi+8212], dx

; 661  : 	lpObj->m_iItemEffectValidTime = 0; //Season3 add-on

  0005b	89 97 18 20 00
	00		 mov	 DWORD PTR [edi+8216], edx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 662  : 
; 663  : 	return true;

  00063	b0 01		 mov	 al, 1
  00065	5b		 pop	 ebx

; 664  : }

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
?ClearItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@H@Z ENDP ; CItemAddOption::ClearItemEffect
_TEXT	ENDS
PUBLIC	?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::SetItemEffect
; Function compile flags: /Ogtp
;	COMDAT ?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
tv276 = 8						; size = 4
_lpObj$ = 8						; size = 4
_iItemNumber$ = 12					; size = 4
_iItemUseTime$ = 16					; size = 4
?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z PROC ; CItemAddOption::SetItemEffect, COMDAT
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 386  : 	LPITEMEFFECT lpItemEffectBefore = NULL;
; 387  : 	LPITEMEFFECT lpItemEffect = NULL;
; 388  : 
; 389  : 	if ( lpObj == NULL )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	75 08		 jne	 SHORT $LN10@SetItemEff@2
$LN15@SetItemEff@2:
  0000e	5f		 pop	 edi

; 390  : 	{
; 391  : 		return false;

  0000f	32 c0		 xor	 al, al
  00011	5b		 pop	 ebx

; 448  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SetItemEff@2:

; 392  : 	}
; 393  : 
; 394  : 	if ( lpObj->Type != OBJ_USER )

  00016	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1

; 395  : 	{
; 396  : 		return false;

  0001b	75 f1		 jne	 SHORT $LN15@SetItemEff@2

; 397  : 	}
; 398  : 
; 399  : 	lpItemEffect = this->_SearchItemEffect(iItemNumber);

  0001d	8b 45 0c	 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  00020	56		 push	 esi
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?_SearchItemEffect@CItemAddOption@@AAEPAUITEMEFFECT@@H@Z ; CItemAddOption::_SearchItemEffect
  00027	8b f0		 mov	 esi, eax

; 400  : 
; 401  : 	if ( lpItemEffect == NULL )

  00029	85 f6		 test	 esi, esi
  0002b	75 09		 jne	 SHORT $LN8@SetItemEff@2

; 402  : 	{
; 403  : 		return false;

  0002d	5e		 pop	 esi
  0002e	5f		 pop	 edi
  0002f	32 c0		 xor	 al, al
  00031	5b		 pop	 ebx

; 448  : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
$LN8@SetItemEff@2:

; 404  : 	}
; 405  : 
; 406  : 	lpItemEffectBefore = this->GetCurrentEffectType(lpObj);

  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?GetCurrentEffectType@CItemAddOption@@QAEPAUITEMEFFECT@@PAUOBJECTSTRUCT@@@Z ; CItemAddOption::GetCurrentEffectType

; 407  : 
; 408  : 	if ( lpItemEffectBefore != NULL )

  0003c	85 c0		 test	 eax, eax
  0003e	74 12		 je	 SHORT $LN6@SetItemEff@2

; 409  : 	{
; 410  : 		if ( lpItemEffectBefore->wOptionType == lpItemEffect->wOptionType )

  00040	66 8b 08	 mov	 cx, WORD PTR [eax]
  00043	66 3b 0e	 cmp	 cx, WORD PTR [esi]
  00046	75 0a		 jne	 SHORT $LN6@SetItemEff@2

; 411  : 		{
; 412  : 			this->ClearItemEffect(lpObj, 2);

  00048	6a 02		 push	 2
  0004a	57		 push	 edi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	e8 00 00 00 00	 call	 ?ClearItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CItemAddOption::ClearItemEffect
$LN6@SetItemEff@2:

; 413  : 		}
; 414  : 	}
; 415  : 
; 416  : 	if ( iItemUseTime > 0 )

  00052	83 7d 10 00	 cmp	 DWORD PTR _iItemUseTime$[ebp], 0
  00056	7e 64		 jle	 SHORT $LN5@SetItemEff@2

; 417  : 	{
; 418  : 		this->_SetItemEffect(lpObj, lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1);

  00058	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0005b	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0005f	52		 push	 edx
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect

; 419  : 		this->SendItemUse(lpObj, iItemNumber, lpItemEffect->wOptionType, lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1, iItemUseTime * 60);

  00069	8b 4d 10	 mov	 ecx, DWORD PTR _iItemUseTime$[ebp]
  0006c	0f b7 56 02	 movzx	 edx, WORD PTR [esi+2]
  00070	8b c1		 mov	 eax, ecx
  00072	c1 e0 04	 shl	 eax, 4
  00075	2b c1		 sub	 eax, ecx
  00077	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0007a	03 c0		 add	 eax, eax
  0007c	03 c0		 add	 eax, eax
  0007e	50		 push	 eax
  0007f	51		 push	 ecx
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemNumber$[ebp]
  00083	89 45 08	 mov	 DWORD PTR tv276[ebp], eax
  00086	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00089	52		 push	 edx
  0008a	50		 push	 eax
  0008b	51		 push	 ecx
  0008c	57		 push	 edi
  0008d	8b cb		 mov	 ecx, ebx
  0008f	e8 00 00 00 00	 call	 ?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z ; CItemAddOption::SendItemUse

; 420  : 
; 421  : 		this->_SetItemEffect(lpObj, lpItemEffect->wEffectType2, lpItemEffect->iEffectValue2);

  00094	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00097	0f b7 46 04	 movzx	 eax, WORD PTR [esi+4]
  0009b	52		 push	 edx
  0009c	50		 push	 eax
  0009d	57		 push	 edi
  0009e	8b cb		 mov	 ecx, ebx
  000a0	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect

; 422  : 		this->SendItemUse(lpObj, iItemNumber, lpItemEffect->wOptionType, lpItemEffect->wEffectType2, lpItemEffect->iEffectValue2, iItemUseTime * 60);

  000a5	8b 4d 08	 mov	 ecx, DWORD PTR tv276[ebp]
  000a8	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000ab	0f b7 46 04	 movzx	 eax, WORD PTR [esi+4]
  000af	51		 push	 ecx
  000b0	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000b3	52		 push	 edx
  000b4	8b 55 0c	 mov	 edx, DWORD PTR _iItemNumber$[ebp]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	52		 push	 edx

; 423  : 	}
; 424  : 	else

  000ba	eb 54		 jmp	 SHORT $LN14@SetItemEff@2
$LN5@SetItemEff@2:

; 425  : 	{
; 426  : 		this->_SetItemEffect(lpObj, lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1);

  000bc	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]
  000c0	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	57		 push	 edi
  000c6	8b cb		 mov	 ecx, ebx
  000c8	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect

; 427  : 		this->SendItemUse(lpObj, iItemNumber, lpItemEffect->wOptionType, lpItemEffect->wEffectType1, lpItemEffect->iEffectValue1, lpItemEffect->iEffectValidTime);

  000cd	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  000d0	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000d3	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]
  000d7	52		 push	 edx
  000d8	0f b7 16	 movzx	 edx, WORD PTR [esi]
  000db	50		 push	 eax
  000dc	8b 45 0c	 mov	 eax, DWORD PTR _iItemNumber$[ebp]
  000df	51		 push	 ecx
  000e0	52		 push	 edx
  000e1	50		 push	 eax
  000e2	57		 push	 edi
  000e3	8b cb		 mov	 ecx, ebx
  000e5	e8 00 00 00 00	 call	 ?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z ; CItemAddOption::SendItemUse

; 428  : 
; 429  : 		this->_SetItemEffect(lpObj, lpItemEffect->wEffectType2, lpItemEffect->iEffectValue2);

  000ea	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000ed	0f b7 56 04	 movzx	 edx, WORD PTR [esi+4]
  000f1	51		 push	 ecx
  000f2	52		 push	 edx
  000f3	57		 push	 edi
  000f4	8b cb		 mov	 ecx, ebx
  000f6	e8 00 00 00 00	 call	 ?_SetItemEffect@CItemAddOption@@AAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::_SetItemEffect

; 430  : 		this->SendItemUse(lpObj, iItemNumber, lpItemEffect->wOptionType, lpItemEffect->wEffectType2, lpItemEffect->iEffectValue2, lpItemEffect->iEffectValidTime);

  000fb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000fe	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00101	0f b7 56 04	 movzx	 edx, WORD PTR [esi+4]
  00105	50		 push	 eax
  00106	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00109	51		 push	 ecx
  0010a	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemNumber$[ebp]
  0010d	52		 push	 edx
  0010e	50		 push	 eax
  0010f	51		 push	 ecx
$LN14@SetItemEff@2:
  00110	57		 push	 edi
  00111	8b cb		 mov	 ecx, ebx
  00113	e8 00 00 00 00	 call	 ?SendItemUse@CItemAddOption@@QAEXPAUOBJECTSTRUCT@@HHHHH@Z ; CItemAddOption::SendItemUse

; 431  : 	}
; 432  : 	
; 433  : 	if( lpItemEffect->wOptionType == 1 )

  00118	66 83 3e 01	 cmp	 WORD PTR [esi], 1
  0011c	75 35		 jne	 SHORT $LN1@SetItemEff@2

; 434  : 	{
; 435  : 		if ( iItemUseTime > 0 )

  0011e	8b 45 10	 mov	 eax, DWORD PTR _iItemUseTime$[ebp]

; 436  : 		{
; 437  : 			lpObj->m_wItemEffectType = lpItemEffect->iItemNumber;

  00121	66 8b 56 08	 mov	 dx, WORD PTR [esi+8]
  00125	66 89 97 14 20
	00 00		 mov	 WORD PTR [edi+8212], dx
  0012c	85 c0		 test	 eax, eax
  0012e	7e 1a		 jle	 SHORT $LN2@SetItemEff@2

; 438  : 			lpObj->m_iItemEffectValidTime = iItemUseTime * 60;

  00130	8b c8		 mov	 ecx, eax
  00132	c1 e1 04	 shl	 ecx, 4
  00135	2b c8		 sub	 ecx, eax
  00137	03 c9		 add	 ecx, ecx
  00139	03 c9		 add	 ecx, ecx
  0013b	5e		 pop	 esi
  0013c	89 8f 18 20 00
	00		 mov	 DWORD PTR [edi+8216], ecx
  00142	5f		 pop	 edi

; 444  : 		}
; 445  : 	}
; 446  : 
; 447  : 	return true;

  00143	b0 01		 mov	 al, 1
  00145	5b		 pop	 ebx

; 448  : }

  00146	5d		 pop	 ebp
  00147	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SetItemEff@2:

; 439  : 		}
; 440  : 		else
; 441  : 		{
; 442  : 			lpObj->m_wItemEffectType = lpItemEffect->iItemNumber;
; 443  : 			lpObj->m_iItemEffectValidTime = lpItemEffect->iEffectValidTime;

  0014a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0014d	89 87 18 20 00
	00		 mov	 DWORD PTR [edi+8216], eax
$LN1@SetItemEff@2:

; 444  : 		}
; 445  : 	}
; 446  : 
; 447  : 	return true;

  00153	5e		 pop	 esi
  00154	5f		 pop	 edi
  00155	b0 01		 mov	 al, 1
  00157	5b		 pop	 ebx

; 448  : }

  00158	5d		 pop	 ebp
  00159	c2 0c 00	 ret	 12			; 0000000cH
?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z ENDP ; CItemAddOption::SetItemEffect
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ItemAddOption@@YAXXZ
text$yc	SEGMENT
??__Eg_ItemAddOption@@YAXXZ PROC			; `dynamic initializer for 'g_ItemAddOption'', COMDAT

; 9    : CItemAddOption g_ItemAddOption;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00005	e8 00 00 00 00	 call	 ??0CItemAddOption@@QAE@XZ ; CItemAddOption::CItemAddOption
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ItemAddOption@@YAXXZ ; `dynamic atexit destructor for 'g_ItemAddOption''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ItemAddOption@@YAXXZ ENDP			; `dynamic initializer for 'g_ItemAddOption''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ItemAddOption@@YAXXZ
text$yd	SEGMENT
??__Fg_ItemAddOption@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ItemAddOption'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00005	e9 00 00 00 00	 jmp	 ??1CItemAddOption@@UAE@XZ ; CItemAddOption::~CItemAddOption
??__Fg_ItemAddOption@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ItemAddOption''
text$yd	ENDS
PUBLIC	?g_ItemAddOption@@3VCItemAddOption@@A		; g_ItemAddOption
_BSS	SEGMENT
?g_ItemAddOption@@3VCItemAddOption@@A DB 0c84H DUP (?)	; g_ItemAddOption
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ItemAddOption$initializer$ DD FLAT:??__Eg_ItemAddOption@@YAXXZ
CRT$XCU	ENDS
END
