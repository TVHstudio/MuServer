; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ItemDropManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadAnc@CItemDropManager@@QAEXPAD@Z		; CItemDropManager::ReadAnc
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
; File e:\work\tranet_version\gs\gameserver\itemdropmanager.cpp
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@
CONST	SEGMENT
??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@ DB '['
	DB	'Ancent Drop] %s file not found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadAnc@CItemDropManager@@QAEXPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?ReadAnc@CItemDropManager@@QAEXPAD@Z PROC		; CItemDropManager::ReadAnc, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 121  : 	if( //!g_ZtLicense.CheckUser(eZtUB::Local) && 
; 122  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy) &&
; 123  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy2) && 
; 124  : 		!g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 125  : 		!g_ZtLicense.CheckUser(eZtUB::MedoniAndrei)&&
; 126  : 		!g_ZtLicense.CheckUser(eZtUB::EpicMU) &&
; 127  : 		!g_ZtLicense.CheckUser(eZtUB::masonX) && 
; 128  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich) &&
; 129  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich2) )

  00006	6a 20		 push	 32			; 00000020H
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00012	84 c0		 test	 al, al
  00014	75 74		 jne	 SHORT $LN14@ReadAnc
  00016	6a 22		 push	 34			; 00000022H
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00022	84 c0		 test	 al, al
  00024	75 64		 jne	 SHORT $LN14@ReadAnc
  00026	6a 21		 push	 33			; 00000021H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00032	84 c0		 test	 al, al
  00034	75 54		 jne	 SHORT $LN14@ReadAnc
  00036	6a 32		 push	 50			; 00000032H
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00042	84 c0		 test	 al, al
  00044	75 44		 jne	 SHORT $LN14@ReadAnc
  00046	6a 3b		 push	 59			; 0000003bH
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0004d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00052	84 c0		 test	 al, al
  00054	75 34		 jne	 SHORT $LN14@ReadAnc
  00056	6a 3c		 push	 60			; 0000003cH
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00062	84 c0		 test	 al, al
  00064	75 24		 jne	 SHORT $LN14@ReadAnc
  00066	6a 17		 push	 23			; 00000017H
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0006d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00072	84 c0		 test	 al, al
  00074	75 14		 jne	 SHORT $LN14@ReadAnc
  00076	6a 24		 push	 36			; 00000024H
  00078	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0007d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00082	84 c0		 test	 al, al
  00084	0f 84 f6 01 00
	00		 je	 $LN15@ReadAnc
$LN14@ReadAnc:
  0008a	56		 push	 esi

; 130  : 	{
; 131  : 		return;
; 132  : 	}
; 133  : 
; 134  : 	for(int i = 0; i < 100; i++)

  0008b	8d 8b a6 b1 01
	00		 lea	 ecx, DWORD PTR [ebx+111014]
  00091	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  00096	57		 push	 edi
$LL13@ReadAnc:

; 135  : 	{
; 136  : 		this->m_AncData[i].sMap = 0; 

  00097	33 c0		 xor	 eax, eax
  00099	89 41 fe	 mov	 DWORD PTR [ecx-2], eax

; 137  : 		this->m_AncData[i].sMinLvlMob = 0;
; 138  : 		this->m_AncData[i].sMaxLvlMob = 0;

  0009c	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 139  : 		this->m_AncData[i].iRate = 0;

  000a0	89 41 06	 mov	 DWORD PTR [ecx+6], eax

; 140  : 		this->m_AncData[i].ItemCount = 0;

  000a3	89 41 0a	 mov	 DWORD PTR [ecx+10], eax
  000a6	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  000a9	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000ae	8b ff		 npad	 2
$LL10@ReadAnc:

; 141  : 		for(int j = 0; j < 256; j++)
; 142  : 		{
; 143  : 			this->m_AncData[i].m_item[j].sType = 0;

  000b0	33 ff		 xor	 edi, edi
  000b2	66 89 78 fe	 mov	 WORD PTR [eax-2], di

; 144  : 			this->m_AncData[i].m_item[j].sIndex = 0;

  000b6	66 89 38	 mov	 WORD PTR [eax], di

; 145  : 			this->m_AncData[i].m_item[j].sOpt = 0;

  000b9	66 89 78 02	 mov	 WORD PTR [eax+2], di
  000bd	83 c0 06	 add	 eax, 6
  000c0	4a		 dec	 edx
  000c1	75 ed		 jne	 SHORT $LL10@ReadAnc

; 130  : 	{
; 131  : 		return;
; 132  : 	}
; 133  : 
; 134  : 	for(int i = 0; i < 100; i++)

  000c3	81 c1 10 06 00
	00		 add	 ecx, 1552		; 00000610H
  000c9	4e		 dec	 esi
  000ca	75 cb		 jne	 SHORT $LL13@ReadAnc

; 146  : 		}
; 147  : 	}
; 148  : 
; 149  : 	this->iAncCount = 0;
; 150  : 
; 151  : 	SMDToken Token;
; 152  : 
; 153  : 	SMDFile = fopen(filename, "r");

  000cc	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000d4	56		 push	 esi
  000d5	89 bb e4 0f 04
	00		 mov	 DWORD PTR [ebx+266212], edi
  000db	e8 00 00 00 00	 call	 _fopen
  000e0	83 c4 08	 add	 esp, 8
  000e3	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 154  : 
; 155  : 	if(!SMDFile)

  000e8	85 c0		 test	 eax, eax
  000ea	75 15		 jne	 SHORT $LN20@ReadAnc

; 156  : 	{
; 157  : 		MsgBox("[Ancent Drop] %s file not found", filename);

  000ec	56		 push	 esi
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PAICKKOH@?$FLAncent?5Drop?$FN?5?$CFs?5file?5not?5found?$AA@
  000f2	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000f7	83 c4 08	 add	 esp, 8
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx

; 213  : }

  000fd	5d		 pop	 ebp
  000fe	c2 04 00	 ret	 4
$LN20@ReadAnc:

; 158  : 		return;
; 159  : 	}
; 160  : 
; 161  : 	while(true)
; 162  : 	{
; 163  : 		Token = GetToken();

  00101	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 164  : 
; 165  : 		if( Token == END )

  00106	83 f8 02	 cmp	 eax, 2
  00109	0f 84 54 01 00
	00		 je	 $LN24@ReadAnc
  0010f	90		 npad	 1
$LL6@ReadAnc:

; 166  : 		{
; 167  : 			break;
; 168  : 		}
; 169  : 
; 170  : 		int a = this->iAncCount;

  00110	8b b3 e4 0f 04
	00		 mov	 esi, DWORD PTR [ebx+266212]

; 171  : 		int n = 0;
; 172  : 
; 173  : 		this->m_AncData[a].sMap = (int)TokenNumber;

  00116	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0011c	69 f6 10 06 00
	00		 imul	 esi, 1552		; 00000610H
  00122	33 ff		 xor	 edi, edi
  00124	03 f3		 add	 esi, ebx
  00126	e8 00 00 00 00	 call	 __ftol2_sse
  0012b	66 89 86 a4 b1
	01 00		 mov	 WORD PTR [esi+111012], ax

; 174  : 		Token = GetToken();

  00132	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 175  : 
; 176  : 		this->m_AncData[a].sMinLvlMob = (int)TokenNumber;

  00137	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0013d	e8 00 00 00 00	 call	 __ftol2_sse
  00142	66 89 86 a6 b1
	01 00		 mov	 WORD PTR [esi+111014], ax

; 177  : 		Token = GetToken();

  00149	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 178  : 
; 179  : 		this->m_AncData[a].sMaxLvlMob = (int)TokenNumber;

  0014e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00154	e8 00 00 00 00	 call	 __ftol2_sse
  00159	66 89 86 a8 b1
	01 00		 mov	 WORD PTR [esi+111016], ax

; 180  : 		Token = GetToken();

  00160	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 181  : 
; 182  : 		this->m_AncData[a].iRate = (int)TokenNumber;

  00165	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016b	e8 00 00 00 00	 call	 __ftol2_sse
  00170	89 86 ac b1 01
	00		 mov	 DWORD PTR [esi+111020], eax

; 183  : 
; 184  : 		while(true)
; 185  : 		{
; 186  : 			Token = GetToken();

  00176	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 187  : 
; 188  : 			if(!strcmp("end", TokenString))

  0017b	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00180	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL28@ReadAnc:
  00185	8a 10		 mov	 dl, BYTE PTR [eax]
  00187	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00189	75 1a		 jne	 SHORT $LN29@ReadAnc
  0018b	84 d2		 test	 dl, dl
  0018d	74 12		 je	 SHORT $LN30@ReadAnc
  0018f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00192	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00195	75 0e		 jne	 SHORT $LN29@ReadAnc
  00197	83 c0 02	 add	 eax, 2
  0019a	83 c1 02	 add	 ecx, 2
  0019d	84 d2		 test	 dl, dl
  0019f	75 e4		 jne	 SHORT $LL28@ReadAnc
$LN30@ReadAnc:
  001a1	33 c0		 xor	 eax, eax
  001a3	eb 05		 jmp	 SHORT $LN31@ReadAnc
$LN29@ReadAnc:
  001a5	1b c0		 sbb	 eax, eax
  001a7	83 d8 ff	 sbb	 eax, -1
$LN31@ReadAnc:
  001aa	85 c0		 test	 eax, eax
  001ac	0f 84 87 00 00
	00		 je	 $LN23@ReadAnc

; 166  : 		{
; 167  : 			break;
; 168  : 		}
; 169  : 
; 170  : 		int a = this->iAncCount;

  001b2	81 c6 b6 b1 01
	00		 add	 esi, 111030		; 0001b1b6H
  001b8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@ReadAnc:

; 189  : 			{
; 190  : 				break;
; 191  : 			}
; 192  : 
; 193  : 			this->m_AncData[a].m_item[n].sType = (int)TokenNumber;

  001c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c6	e8 00 00 00 00	 call	 __ftol2_sse
  001cb	66 89 46 fe	 mov	 WORD PTR [esi-2], ax

; 194  : 
; 195  : 			Token = GetToken();

  001cf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 196  : 			this->m_AncData[a].m_item[n].sIndex = (int)TokenNumber;

  001d4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001da	e8 00 00 00 00	 call	 __ftol2_sse
  001df	66 89 06	 mov	 WORD PTR [esi], ax

; 197  : 
; 198  : 			//if(g_ZtLicense.CheckUser(eZtUB::masonX))
; 199  : 			{
; 200  : 				Token = GetToken();

  001e2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 201  : 				this->m_AncData[a].m_item[n].sOpt = (int)TokenNumber;

  001e7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ed	e8 00 00 00 00	 call	 __ftol2_sse
  001f2	66 89 46 02	 mov	 WORD PTR [esi+2], ax

; 202  : 			}
; 203  : 
; 204  : 			n++;

  001f6	47		 inc	 edi
  001f7	83 c6 06	 add	 esi, 6
  001fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001ff	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00204	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00209	8d a4 24 00 00
	00 00		 npad	 7
$LL32@ReadAnc:

; 187  : 
; 188  : 			if(!strcmp("end", TokenString))

  00210	8a 10		 mov	 dl, BYTE PTR [eax]
  00212	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00214	75 1a		 jne	 SHORT $LN33@ReadAnc
  00216	84 d2		 test	 dl, dl
  00218	74 12		 je	 SHORT $LN34@ReadAnc
  0021a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0021d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00220	75 0e		 jne	 SHORT $LN33@ReadAnc
  00222	83 c0 02	 add	 eax, 2
  00225	83 c1 02	 add	 ecx, 2
  00228	84 d2		 test	 dl, dl
  0022a	75 e4		 jne	 SHORT $LL32@ReadAnc
$LN34@ReadAnc:
  0022c	33 c0		 xor	 eax, eax
  0022e	eb 05		 jmp	 SHORT $LN35@ReadAnc
$LN33@ReadAnc:
  00230	1b c0		 sbb	 eax, eax
  00232	83 d8 ff	 sbb	 eax, -1
$LN35@ReadAnc:
  00235	85 c0		 test	 eax, eax
  00237	75 87		 jne	 SHORT $LL3@ReadAnc
$LN23@ReadAnc:

; 205  : 		}
; 206  : 
; 207  : 		this->m_AncData[this->iAncCount].ItemCount = n;

  00239	8b 8b e4 0f 04
	00		 mov	 ecx, DWORD PTR [ebx+266212]
  0023f	69 c9 10 06 00
	00		 imul	 ecx, 1552		; 00000610H
  00245	89 bc 19 b0 b1
	01 00		 mov	 DWORD PTR [ecx+ebx+111024], edi

; 208  : 		this->iAncCount++;

  0024c	ff 83 e4 0f 04
	00		 inc	 DWORD PTR [ebx+266212]
  00252	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00257	83 f8 02	 cmp	 eax, 2
  0025a	0f 85 b0 fe ff
	ff		 jne	 $LL6@ReadAnc

; 164  : 
; 165  : 		if( Token == END )

  00260	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
$LN24@ReadAnc:

; 209  : 	}
; 210  : 
; 211  : 	fclose(SMDFile);

  00263	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00269	52		 push	 edx
  0026a	e8 00 00 00 00	 call	 _fclose

; 212  : 	LogAdd("%s file load!", filename);

  0026f	56		 push	 esi
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0027b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
$LN15@ReadAnc:
  00280	5b		 pop	 ebx

; 213  : }

  00281	5d		 pop	 ebp
  00282	c2 04 00	 ret	 4
?ReadAnc@CItemDropManager@@QAEXPAD@Z ENDP		; CItemDropManager::ReadAnc
_TEXT	ENDS
PUBLIC	??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@ ; `string'
PUBLIC	?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z	; CItemDropManager::BlockItemDrop
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@
CONST	SEGMENT
??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@ DB '[D'
	DB	'ropBlock] Item %d has been blocked', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_ItemID$ = 12						; size = 4
_MapNumber$ = 16					; size = 4
?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z PROC	; CItemDropManager::BlockItemDrop, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 331  : 	if( MapNumber >= 0 && MapNumber <= MAX_NUMBER_MAP )

  00003	83 7d 10 53	 cmp	 DWORD PTR _MapNumber$[ebp], 83 ; 00000053H
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
  0000c	0f 87 ba 00 00
	00		 ja	 $LN2@BlockItemD

; 332  : 	{
; 333  : 		if(g_ZtLicense.CheckUser(Local) || g_ZtLicense.CheckUser(ulasevich) || g_ZtLicense.CheckUser(ulasevich2))

  00012	6a 00		 push	 0
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00019	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _ItemID$[ebp]
  00021	84 c0		 test	 al, al
  00023	75 20		 jne	 SHORT $LN14@BlockItemD
  00025	6a 17		 push	 23			; 00000017H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00031	84 c0		 test	 al, al
  00033	75 10		 jne	 SHORT $LN14@BlockItemD
  00035	6a 24		 push	 36			; 00000024H
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00041	84 c0		 test	 al, al
  00043	74 2e		 je	 SHORT $LN11@BlockItemD
$LN14@BlockItemD:
  00045	8b 96 c0 82 01
	00		 mov	 edx, DWORD PTR [esi+99008]

; 334  : 		{
; 335  : 			for(int i = 0; i< this->MapBlockCount; i++)

  0004b	33 c9		 xor	 ecx, ecx
  0004d	85 d2		 test	 edx, edx
  0004f	7e 22		 jle	 SHORT $LN11@BlockItemD
  00051	8d 86 c8 82 01
	00		 lea	 eax, DWORD PTR [esi+99016]
$LL29@BlockItemD:

; 336  : 			{
; 337  : 				if(this->MapBlockDrop[i].Map == MapNumber && ItemID == ITEMGET(this->MapBlockDrop[i].Type,this->MapBlockDrop[i].Index))

  00057	8b 5d 10	 mov	 ebx, DWORD PTR _MapNumber$[ebp]
  0005a	39 58 fc	 cmp	 DWORD PTR [eax-4], ebx
  0005d	75 0c		 jne	 SHORT $LN12@BlockItemD
  0005f	8b 18		 mov	 ebx, DWORD PTR [eax]
  00061	c1 e3 09	 shl	 ebx, 9
  00064	03 58 04	 add	 ebx, DWORD PTR [eax+4]
  00067	3b fb		 cmp	 edi, ebx
  00069	74 79		 je	 SHORT $LN22@BlockItemD
$LN12@BlockItemD:

; 334  : 		{
; 335  : 			for(int i = 0; i< this->MapBlockCount; i++)

  0006b	41		 inc	 ecx
  0006c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0006f	3b ca		 cmp	 ecx, edx
  00071	7c e4		 jl	 SHORT $LL29@BlockItemD
$LN11@BlockItemD:

; 338  : 				{
; 339  : 					return false;
; 340  : 				}
; 341  : 			}
; 342  : 		}
; 343  : 
; 344  : 		if(this->iUser[aIndex] == true)

  00073	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00076	80 3c 30 01	 cmp	 BYTE PTR [eax+esi], 1
  0007a	75 2a		 jne	 SHORT $LN6@BlockItemD

; 345  : 		{
; 346  : 			this->iUser[aIndex] = false;

  0007c	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  00080	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]

; 347  : 			for(int i = 0; i< this->DropCount; i++)

  00086	33 c0		 xor	 eax, eax
  00088	85 d2		 test	 edx, edx
  0008a	7e 1a		 jle	 SHORT $LN6@BlockItemD

; 345  : 		{
; 346  : 			this->iUser[aIndex] = false;

  0008c	8d 8e a0 3a 00
	00		 lea	 ecx, DWORD PTR [esi+15008]
$LL8@BlockItemD:

; 348  : 			{
; 349  : 				if(ItemID == ITEMGET(this->Drop[i].Type,this->Drop[i].Index) )

  00092	8b 59 fc	 mov	 ebx, DWORD PTR [ecx-4]
  00095	c1 e3 09	 shl	 ebx, 9
  00098	03 19		 add	 ebx, DWORD PTR [ecx]
  0009a	3b fb		 cmp	 edi, ebx
  0009c	74 2e		 je	 SHORT $LN2@BlockItemD

; 347  : 			for(int i = 0; i< this->DropCount; i++)

  0009e	40		 inc	 eax
  0009f	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000a2	3b c2		 cmp	 eax, edx
  000a4	7c ec		 jl	 SHORT $LL8@BlockItemD
$LN6@BlockItemD:
  000a6	8b 96 7c 63 01
	00		 mov	 edx, DWORD PTR [esi+91004]

; 350  : 				{
; 351  : 					return true;
; 352  : 				}
; 353  : 			}
; 354  : 		}
; 355  : 
; 356  : 		for(int i = 0; i< this->BlockCount; i++)

  000ac	33 c0		 xor	 eax, eax
  000ae	85 d2		 test	 edx, edx
  000b0	7e 1a		 jle	 SHORT $LN2@BlockItemD
  000b2	8d 8e 84 63 01
	00		 lea	 ecx, DWORD PTR [esi+91012]
$LL4@BlockItemD:

; 357  : 		{
; 358  : 			if(ItemID == ITEMGET(this->Block[i].Type,this->Block[i].Index))

  000b8	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  000bb	c1 e6 09	 shl	 esi, 9
  000be	03 31		 add	 esi, DWORD PTR [ecx]
  000c0	3b fe		 cmp	 edi, esi
  000c2	74 11		 je	 SHORT $LN24@BlockItemD

; 350  : 				{
; 351  : 					return true;
; 352  : 				}
; 353  : 			}
; 354  : 		}
; 355  : 
; 356  : 		for(int i = 0; i< this->BlockCount; i++)

  000c4	40		 inc	 eax
  000c5	83 c1 08	 add	 ecx, 8
  000c8	3b c2		 cmp	 eax, edx
  000ca	7c ec		 jl	 SHORT $LL4@BlockItemD
$LN2@BlockItemD:
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi

; 362  : 			}
; 363  : 		}
; 364  : 	}
; 365  : 
; 366  : 	//for(int i = 0; i < this->m_MapDropRate.size(); i++)
; 367  : 	//{
; 368  : 	//	if(this->m_MapDropRate[i].MapNum == MapNumber)
; 369  : 	//	{
; 370  : 	//		if(this->m_MapDropRate[i].Rate < rand()%100)
; 371  : 	//		{
; 372  : 	//			return false;
; 373  : 	//		}
; 374  : 	//	}
; 375  : 	//}
; 376  : 
; 377  : 	return true;

  000ce	b0 01		 mov	 al, 1
  000d0	5b		 pop	 ebx

; 378  : }

  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
$LN24@BlockItemD:

; 359  : 			{
; 360  : 				LogAddTD("[DropBlock] Item %d has been blocked", ItemID);

  000d5	57		 push	 edi
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KBOLHJLA@?$FLDropBlock?$FN?5Item?5?$CFd?5has?5been?5blo@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e1	83 c4 08	 add	 esp, 8
$LN22@BlockItemD:

; 361  : 				return false;

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	32 c0		 xor	 al, al
  000e8	5b		 pop	 ebx

; 378  : }

  000e9	5d		 pop	 ebp
  000ea	c2 0c 00	 ret	 12			; 0000000cH
?BlockItemDrop@CItemDropManager@@QAE_NHHH@Z ENDP	; CItemDropManager::BlockItemDrop
_TEXT	ENDS
PUBLIC	?DropAncent@CItemDropManager@@QAEXHH@Z		; CItemDropManager::DropAncent
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?GenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::GenSetOption
EXTRN	?IsSetItem@CSetItemOption@@QAEHH@Z:PROC		; CSetItemOption::IsSetItem
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
EXTRN	_rand:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?DropAncent@CItemDropManager@@QAEXHH@Z
_TEXT	SEGMENT
_optionc$211086 = -12					; size = 4
_lpMonster$ = -8					; size = 4
_SetOption$211080 = -4					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_option3rand$211085 = 12				; size = 4
_i$211066 = 12						; size = 4
_iMobIndex$ = 12					; size = 4
?DropAncent@CItemDropManager@@QAEXHH@Z PROC		; CItemDropManager::DropAncent, COMDAT
; _this$ = ecx

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 382  : 	if( //!g_ZtLicense.CheckUser(eZtUB::Local)	&& 
; 383  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy)	&&
; 384  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy2)	&& 
; 385  : 		!g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 386  : 		!g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) &&
; 387  : 		!g_ZtLicense.CheckUser(eZtUB::EpicMU) &&
; 388  : 		!g_ZtLicense.CheckUser(eZtUB::masonX) &&
; 389  : 		!g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) &&
; 390  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich) &&
; 391  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich2)	)

  00009	6a 20		 push	 32			; 00000020H
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00010	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
  00013	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00018	84 c0		 test	 al, al
  0001a	0f 85 84 00 00
	00		 jne	 $LN24@DropAncent
  00020	6a 22		 push	 34			; 00000022H
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00027	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0002c	84 c0		 test	 al, al
  0002e	75 74		 jne	 SHORT $LN24@DropAncent
  00030	6a 21		 push	 33			; 00000021H
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00037	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0003c	84 c0		 test	 al, al
  0003e	75 64		 jne	 SHORT $LN24@DropAncent
  00040	6a 32		 push	 50			; 00000032H
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00047	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0004c	84 c0		 test	 al, al
  0004e	75 54		 jne	 SHORT $LN24@DropAncent
  00050	6a 3b		 push	 59			; 0000003bH
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00057	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0005c	84 c0		 test	 al, al
  0005e	75 44		 jne	 SHORT $LN24@DropAncent
  00060	6a 3c		 push	 60			; 0000003cH
  00062	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00067	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0006c	84 c0		 test	 al, al
  0006e	75 34		 jne	 SHORT $LN24@DropAncent
  00070	6a 32		 push	 50			; 00000032H
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00077	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0007c	84 c0		 test	 al, al
  0007e	75 24		 jne	 SHORT $LN24@DropAncent
  00080	6a 17		 push	 23			; 00000017H
  00082	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00087	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0008c	84 c0		 test	 al, al
  0008e	75 14		 jne	 SHORT $LN24@DropAncent
  00090	6a 24		 push	 36			; 00000024H
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00097	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0009c	84 c0		 test	 al, al
  0009e	0f 84 ce 01 00
	00		 je	 $LN22@DropAncent
$LN24@DropAncent:

; 392  : 	{
; 393  : 		return;
; 394  : 	}
; 395  : 
; 396  : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(iMobIndex))

  000a4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000a7	85 c0		 test	 eax, eax
  000a9	0f 88 c3 01 00
	00		 js	 $LN22@DropAncent
  000af	33 c9		 xor	 ecx, ecx
  000b1	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  000b6	0f 9e c1	 setle	 cl
  000b9	8b c1		 mov	 eax, ecx
  000bb	85 c0		 test	 eax, eax
  000bd	0f 84 af 01 00
	00		 je	 $LN22@DropAncent
  000c3	8b 45 0c	 mov	 eax, DWORD PTR _iMobIndex$[ebp]
  000c6	85 c0		 test	 eax, eax
  000c8	0f 88 a4 01 00
	00		 js	 $LN22@DropAncent
  000ce	33 c9		 xor	 ecx, ecx
  000d0	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  000d5	0f 9e c1	 setle	 cl
  000d8	85 c9		 test	 ecx, ecx
  000da	0f 84 92 01 00
	00		 je	 $LN22@DropAncent

; 397  : 	{
; 398  : 		return;
; 399  : 	}
; 400  : 
; 401  : 	LPOBJ lpUser = &gObj[aIndex];
; 402  : 	LPOBJ lpMonster = &gObj[iMobIndex];

  000e0	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000e6	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 403  : 	
; 404  : 	for(int i = 0; i < this->iAncCount; i++)

  000ec	83 bf e4 0f 04
	00 00		 cmp	 DWORD PTR [edi+266212], 0
  000f3	53		 push	 ebx
  000f4	8b d8		 mov	 ebx, eax
  000f6	89 5d f8	 mov	 DWORD PTR _lpMonster$[ebp], ebx
  000f9	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _i$211066[ebp], 0
  00100	0f 8e 6b 01 00
	00		 jle	 $LN36@DropAncent

; 397  : 	{
; 398  : 		return;
; 399  : 	}
; 400  : 
; 401  : 	LPOBJ lpUser = &gObj[aIndex];
; 402  : 	LPOBJ lpMonster = &gObj[iMobIndex];

  00106	81 c7 a4 b1 01
	00		 add	 edi, 111012		; 0001b1a4H
  0010c	56		 push	 esi
  0010d	8d 49 00	 npad	 3
$LL21@DropAncent:

; 405  : 	{
; 406  : 		ANCENT_GROUP_DATA* lpDrop = &this->m_AncData[i];
; 407  : 
; 408  : 		if(lpDrop->sMap == lpMonster->MapNumber || lpDrop->sMap == -1)

  00110	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00113	0f b6 93 49 01
	00 00		 movzx	 edx, BYTE PTR [ebx+329]
  0011a	66 3b c2	 cmp	 ax, dx
  0011d	74 06		 je	 SHORT $LN17@DropAncent
  0011f	66 83 f8 ff	 cmp	 ax, -1
  00123	75 5d		 jne	 SHORT $LN20@DropAncent
$LN17@DropAncent:

; 409  : 		{
; 410  : 			if(lpMonster->Level >= lpDrop->sMinLvlMob && lpMonster->Level <= lpDrop->sMaxLvlMob)

  00125	0f b7 83 be 00
	00 00		 movzx	 eax, WORD PTR [ebx+190]
  0012c	66 3b 47 02	 cmp	 ax, WORD PTR [edi+2]
  00130	7c 50		 jl	 SHORT $LN20@DropAncent
  00132	66 3b 47 04	 cmp	 ax, WORD PTR [edi+4]
  00136	7f 4a		 jg	 SHORT $LN20@DropAncent

; 411  : 			{
; 412  : 				if(lpDrop->iRate > (rand()%10000))

  00138	e8 00 00 00 00	 call	 _rand
  0013d	99		 cdq
  0013e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00143	f7 f9		 idiv	 ecx
  00145	39 57 08	 cmp	 DWORD PTR [edi+8], edx
  00148	7e 38		 jle	 SHORT $LN20@DropAncent

; 413  : 				{
; 414  : 					int icount = lpDrop->ItemCount;

  0014a	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]

; 415  : 
; 416  : 					if(icount <= 0)

  0014d	85 f6		 test	 esi, esi
  0014f	7e 31		 jle	 SHORT $LN20@DropAncent

; 417  : 					{
; 418  : 						continue;
; 419  : 					}
; 420  : 
; 421  : 					int iRand = rand()%icount;

  00151	e8 00 00 00 00	 call	 _rand
  00156	99		 cdq
  00157	f7 fe		 idiv	 esi
  00159	8b f2		 mov	 esi, edx

; 422  : 
; 423  : 					int itemnum = ITEMGET(lpDrop->m_item[iRand].sType, lpDrop->m_item[iRand].sIndex); 

  0015b	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  0015e	0f bf 5c 57 10	 movsx	 ebx, WORD PTR [edi+edx*2+16]
  00163	8d 44 76 09	 lea	 eax, DWORD PTR [esi+esi*2+9]
  00167	0f bf 0c 47	 movsx	 ecx, WORD PTR [edi+eax*2]
  0016b	c1 e3 09	 shl	 ebx, 9
  0016e	03 d9		 add	 ebx, ecx

; 424  : 
; 425  : 					if(!gSetItemOption.IsSetItem(itemnum))

  00170	53		 push	 ebx
  00171	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00176	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  0017b	85 c0		 test	 eax, eax
  0017d	75 28		 jne	 SHORT $LN13@DropAncent
  0017f	8b 5d f8	 mov	 ebx, DWORD PTR _lpMonster$[ebp]
$LN20@DropAncent:

; 403  : 	
; 404  : 	for(int i = 0; i < this->iAncCount; i++)

  00182	8b 45 0c	 mov	 eax, DWORD PTR _i$211066[ebp]
  00185	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00188	40		 inc	 eax
  00189	81 c7 10 06 00
	00		 add	 edi, 1552		; 00000610H
  0018f	89 45 0c	 mov	 DWORD PTR _i$211066[ebp], eax
  00192	3b 82 e4 0f 04
	00		 cmp	 eax, DWORD PTR [edx+266212]
  00198	0f 8c 72 ff ff
	ff		 jl	 $LL21@DropAncent
  0019e	5e		 pop	 esi
  0019f	5b		 pop	 ebx
  001a0	5f		 pop	 edi

; 479  : 					return;
; 480  : 				}
; 481  : 			}
; 482  : 		}
; 483  : 	}
; 484  : 	
; 485  : }

  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 08 00	 ret	 8
$LN13@DropAncent:

; 426  : 					{
; 427  : 						continue;
; 428  : 					}
; 429  : 
; 430  : 					int SetOption = gSetItemOption.GenSetOption(itemnum);

  001a7	53		 push	 ebx
  001a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  001ad	e8 00 00 00 00	 call	 ?GenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::GenSetOption
  001b2	89 45 fc	 mov	 DWORD PTR _SetOption$211080[ebp], eax

; 431  : 
; 432  : 					//if(g_ZtLicense.CheckUser(eZtUB::masonX))
; 433  : 					{
; 434  : 						if(lpDrop->m_item[iRand].sOpt == 5 || lpDrop->m_item[iRand].sOpt == 10)

  001b5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  001b8	0f b7 44 47 14	 movzx	 eax, WORD PTR [edi+eax*2+20]
  001bd	66 83 f8 05	 cmp	 ax, 5
  001c1	74 06		 je	 SHORT $LN11@DropAncent
  001c3	66 83 f8 0a	 cmp	 ax, 10			; 0000000aH
  001c7	75 06		 jne	 SHORT $LN12@DropAncent
$LN11@DropAncent:

; 435  : 						{
; 436  : 							SetOption = lpDrop->m_item[iRand].sOpt;

  001c9	0f bf c8	 movsx	 ecx, ax
  001cc	89 4d fc	 mov	 DWORD PTR _SetOption$211080[ebp], ecx
$LN12@DropAncent:

; 437  : 						}
; 438  : 					}
; 439  : 
; 440  : 					int option1rand = 6;
; 441  : 					int option2rand = 4;
; 442  : 					int option3rand = rand()%100;

  001cf	e8 00 00 00 00	 call	 _rand
  001d4	99		 cdq
  001d5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001da	f7 f9		 idiv	 ecx
  001dc	89 55 0c	 mov	 DWORD PTR _option3rand$211085[ebp], edx

; 443  : 					int optionc = rand()%3;

  001df	e8 00 00 00 00	 call	 _rand
  001e4	99		 cdq
  001e5	b9 03 00 00 00	 mov	 ecx, 3
  001ea	f7 f9		 idiv	 ecx

; 444  : 					int Option1 = 0;
; 445  : 					int Option2 = 0;

  001ec	33 ff		 xor	 edi, edi

; 446  : 					int Option3 = 0;

  001ee	33 f6		 xor	 esi, esi
  001f0	89 55 f4	 mov	 DWORD PTR _optionc$211086[ebp], edx

; 447  : 
; 448  : 					if(rand()%100 < option2rand)

  001f3	e8 00 00 00 00	 call	 _rand
  001f8	99		 cdq
  001f9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001fe	f7 f9		 idiv	 ecx
  00200	83 fa 04	 cmp	 edx, 4
  00203	7d 03		 jge	 SHORT $LN33@DropAncent

; 449  : 					{
; 450  : 						Option2 = 1;

  00205	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LN33@DropAncent:

; 451  : 					}
; 452  : 
; 453  : 					switch(optionc)

  00208	8b 45 f4	 mov	 eax, DWORD PTR _optionc$211086[ebp]
  0020b	83 e8 00	 sub	 eax, 0
  0020e	74 1e		 je	 SHORT $LN7@DropAncent
  00210	48		 dec	 eax
  00211	74 0e		 je	 SHORT $LN5@DropAncent
  00213	48		 dec	 eax
  00214	75 23		 jne	 SHORT $LN35@DropAncent

; 467  : 					case 2: 
; 468  : 						if(option3rand < 12)

  00216	83 7d 0c 0c	 cmp	 DWORD PTR _option3rand$211085[ebp], 12 ; 0000000cH
  0021a	7d 1d		 jge	 SHORT $LN35@DropAncent

; 469  : 						{
; 470  : 							Option3 = 1;

  0021c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 471  : 						}
; 472  : 						break;

  0021f	eb 18		 jmp	 SHORT $LN35@DropAncent
$LN5@DropAncent:

; 459  : 						}
; 460  : 						break;
; 461  : 					case 1:
; 462  : 						if(option3rand < 8)

  00221	83 7d 0c 08	 cmp	 DWORD PTR _option3rand$211085[ebp], 8
  00225	7d 12		 jge	 SHORT $LN35@DropAncent

; 463  : 						{
; 464  : 							Option3 = 2;

  00227	be 02 00 00 00	 mov	 esi, 2

; 465  : 						}
; 466  : 						break;

  0022c	eb 0b		 jmp	 SHORT $LN35@DropAncent
$LN7@DropAncent:

; 454  : 					{
; 455  : 					case 0: 
; 456  : 						if(option3rand < 4)

  0022e	83 7d 0c 04	 cmp	 DWORD PTR _option3rand$211085[ebp], 4
  00232	7d 05		 jge	 SHORT $LN35@DropAncent

; 457  : 						{
; 458  : 							Option3 = 3;

  00234	be 03 00 00 00	 mov	 esi, 3
$LN35@DropAncent:

; 473  : 					default: break;
; 474  : 					}
; 475  : 
; 476  : 					Option1 = 1;
; 477  : 
; 478  : 					ItemSerialCreateSend(aIndex,lpMonster->MapNumber,(BYTE)lpMonster->X,(BYTE)lpMonster->Y,itemnum,0,0,(BYTE)Option1,(BYTE)Option2,(BYTE)Option3,aIndex,0,(BYTE)SetOption);

  00239	8b 55 fc	 mov	 edx, DWORD PTR _SetOption$211080[ebp]
  0023c	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0023f	8b 45 f8	 mov	 eax, DWORD PTR _lpMonster$[ebp]
  00242	52		 push	 edx
  00243	0f b6 90 46 01
	00 00		 movzx	 edx, BYTE PTR [eax+326]
  0024a	6a 00		 push	 0
  0024c	51		 push	 ecx
  0024d	56		 push	 esi
  0024e	57		 push	 edi
  0024f	6a 01		 push	 1
  00251	6a 00		 push	 0
  00253	6a 00		 push	 0
  00255	53		 push	 ebx
  00256	52		 push	 edx
  00257	0f b6 90 44 01
	00 00		 movzx	 edx, BYTE PTR [eax+324]
  0025e	0f b6 80 49 01
	00 00		 movzx	 eax, BYTE PTR [eax+329]
  00265	52		 push	 edx
  00266	50		 push	 eax
  00267	51		 push	 ecx
  00268	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0026d	83 c4 34	 add	 esp, 52			; 00000034H
  00270	5e		 pop	 esi
$LN36@DropAncent:
  00271	5b		 pop	 ebx
$LN22@DropAncent:
  00272	5f		 pop	 edi

; 479  : 					return;
; 480  : 				}
; 481  : 			}
; 482  : 		}
; 483  : 	}
; 484  : 	
; 485  : }

  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c2 08 00	 ret	 8
?DropAncent@CItemDropManager@@QAEXHH@Z ENDP		; CItemDropManager::DropAncent
_TEXT	ENDS
PUBLIC	?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEAAUMAP_DROPRATE_DATA@@I@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBE_NPBUMAP_DROPRATE_DATA@@@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXPAUMAP_DROPRATE_DATA@@0@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ	; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ PROC	; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@XZ ENDP	; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UMAP_DROPRATE_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::allocator<MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@I@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ ; std::allocator<MAP_DROPRATE_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ PROC ; std::allocator<MAP_DROPRATE_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UMAP_DROPRATE_DATA@@@std@@QBEIXZ ENDP ; std::allocator<MAP_DROPRATE_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z ; std::addressof<MAP_DROPRATE_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z PROC ; std::addressof<MAP_DROPRATE_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUMAP_DROPRATE_DATA@@@std@@YAPBUMAP_DROPRATE_DATA@@ABU1@@Z ENDP ; std::addressof<MAP_DROPRATE_DATA const >
_TEXT	ENDS
PUBLIC	??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z PROC ; std::forward<MAP_DROPRATE_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUMAP_DROPRATE_DATA@@@std@@YAAAUMAP_DROPRATE_DATA@@AAU1@@Z ENDP ; std::forward<MAP_DROPRATE_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct<MAP_DROPRATE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::construct<MAP_DROPRATE_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUMAP_DROPRATE_DATA@@@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@AAU2@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::construct<MAP_DROPRATE_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z ; std::forward<MAP_DROPRATE_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z PROC ; std::forward<MAP_DROPRATE_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUMAP_DROPRATE_DATA@@@std@@YAABUMAP_DROPRATE_DATA@@ABU1@@Z ENDP ; std::forward<MAP_DROPRATE_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z PROC ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UMAP_DROPRATE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAP_DROPRATE_DATA@@0@Z ENDP ; std::_Ptr_cat<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z ; std::_Construct<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z PROC ; std::_Construct<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UMAP_DROPRATE_DATA@@ABU1@@std@@YAXPAUMAP_DROPRATE_DATA@@ABU1@@Z ENDP ; std::_Construct<MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
_TEXT	ENDS
PUBLIC	??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::move<MAP_DROPRATE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z PROC ; std::move<MAP_DROPRATE_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ENDP ; std::move<MAP_DROPRATE_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z ; std::_Val_type<MAP_DROPRATE_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z PROC ; std::_Val_type<MAP_DROPRATE_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@@Z ENDP ; std::_Val_type<MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z ; std::_Destroy<MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z PROC ; std::_Destroy<MAP_DROPRATE_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UMAP_DROPRATE_DATA@@@std@@YAXPAUMAP_DROPRATE_DATA@@@Z ENDP ; std::_Destroy<MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ; std::forward<MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z PROC ; std::forward<MAP_DROPRATE_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UMAP_DROPRATE_DATA@@@std@@YA$$QAUMAP_DROPRATE_DATA@@AAU1@@Z ENDP ; std::forward<MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?ProccessItemDrop@CItemDropManager@@QAE_NPAUOBJECTSTRUCT@@0@Z ; CItemDropManager::ProccessItemDrop
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\itemdropmanager.cpp
;	COMDAT ?ProccessItemDrop@CItemDropManager@@QAE_NPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_iLevel$211008 = -20					; size = 4
_iSkill$211011 = -16					; size = 4
_iLuck$211010 = -12					; size = 4
_iOption$211009 = -8					; size = 4
_iAncOpt$211013 = -4					; size = 4
_i$211000 = 8						; size = 4
_lpMobObj$ = 8						; size = 4
_iExlOpt$211012 = 12					; size = 4
_lpTargetObj$ = 12					; size = 4
?ProccessItemDrop@CItemDropManager@@QAE_NPAUOBJECTSTRUCT@@0@Z PROC ; CItemDropManager::ProccessItemDrop, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 217  : 
; 218  : 	switch(lpMobObj->Class)

  00008	8b 7d 08	 mov	 edi, DWORD PTR _lpMobObj$[ebp]
  0000b	0f b7 87 b8 00
	00 00		 movzx	 eax, WORD PTR [edi+184]
  00012	8b d9		 mov	 ebx, ecx
  00014	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx
  00017	83 f8 52	 cmp	 eax, 82			; 00000052H
  0001a	0f 8f 96 00 00
	00		 jg	 $LN28@ProccessIt
  00020	0f 84 9e 00 00
	00		 je	 $LN23@ProccessIt
  00026	83 f8 35	 cmp	 eax, 53			; 00000035H
  00029	0f 84 95 00 00
	00		 je	 $LN23@ProccessIt
  0002f	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  00032	7e 09		 jle	 SHORT $LN24@ProccessIt
  00034	83 f8 50	 cmp	 eax, 80			; 00000050H
  00037	0f 8e 87 00 00
	00		 jle	 $LN23@ProccessIt
$LN24@ProccessIt:

; 237  : 		}
; 238  : 		break;
; 239  : 	}
; 240  : 
; 241  : 	this->DropAncent(lpTargetObj->m_Index, lpMobObj->m_Index);

  0003d	8b 07		 mov	 eax, DWORD PTR [edi]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	56		 push	 esi
  00045	50		 push	 eax
  00046	52		 push	 edx
  00047	8b cb		 mov	 ecx, ebx
  00049	e8 00 00 00 00	 call	 ?DropAncent@CItemDropManager@@QAEXHH@Z ; CItemDropManager::DropAncent

; 242  : 
; 243  : 	for (int i=0; i < this->DropCount; i++)

  0004e	83 bb 98 3a 00
	00 00		 cmp	 DWORD PTR [ebx+15000], 0
  00055	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _i$211000[ebp], 0
  0005c	7e 4d		 jle	 SHORT $LN20@ProccessIt

; 237  : 		}
; 238  : 		break;
; 239  : 	}
; 240  : 
; 241  : 	this->DropAncent(lpTargetObj->m_Index, lpMobObj->m_Index);

  0005e	8d b3 e0 3a 00
	00		 lea	 esi, DWORD PTR [ebx+15072]
$LL22@ProccessIt:

; 244  : 	{
; 245  : 		if ( lpMobObj->MapNumber == this->Drop[i].MonsterMap || this->Drop[i].MonsterMap == -1 )

  00064	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	3b c8		 cmp	 ecx, eax
  0006f	74 05		 je	 SHORT $LN18@ProccessIt
  00071	83 f8 ff	 cmp	 eax, -1
  00074	75 23		 jne	 SHORT $LN21@ProccessIt
$LN18@ProccessIt:

; 246  : 		{
; 247  : 			if ( lpMobObj->Level >= this->Drop[i].MonsterMinLevel && lpMobObj->Level <= this->Drop[i].MonsterMaxLevel )

  00076	0f bf 87 be 00
	00 00		 movsx	 eax, WORD PTR [edi+190]
  0007d	3b 46 f8	 cmp	 eax, DWORD PTR [esi-8]
  00080	7c 17		 jl	 SHORT $LN21@ProccessIt
  00082	3b 46 fc	 cmp	 eax, DWORD PTR [esi-4]
  00085	7f 12		 jg	 SHORT $LN21@ProccessIt

; 248  : 			{
; 249  : 				if ( (rand()%10000) < this->Drop[i].ItemDropRate )

  00087	e8 00 00 00 00	 call	 _rand
  0008c	99		 cdq
  0008d	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00092	f7 f9		 idiv	 ecx
  00094	3b 56 04	 cmp	 edx, DWORD PTR [esi+4]
  00097	7c 35		 jl	 SHORT $LN30@ProccessIt
$LN21@ProccessIt:

; 242  : 
; 243  : 	for (int i=0; i < this->DropCount; i++)

  00099	8b 45 08	 mov	 eax, DWORD PTR _i$211000[ebp]
  0009c	40		 inc	 eax
  0009d	83 c6 4c	 add	 esi, 76			; 0000004cH
  000a0	89 45 08	 mov	 DWORD PTR _i$211000[ebp], eax
  000a3	3b 83 98 3a 00
	00		 cmp	 eax, DWORD PTR [ebx+15000]
  000a9	7c b9		 jl	 SHORT $LL22@ProccessIt
$LN20@ProccessIt:
  000ab	5e		 pop	 esi
  000ac	5f		 pop	 edi

; 321  : 				}
; 322  : 			}
; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	return false;

  000ad	32 c0		 xor	 al, al
  000af	5b		 pop	 ebx

; 327  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN28@ProccessIt:

; 217  : 
; 218  : 	switch(lpMobObj->Class)

  000b6	05 13 fe ff ff	 add	 eax, -493		; fffffe13H
  000bb	83 f8 09	 cmp	 eax, 9
  000be	0f 87 79 ff ff
	ff		 ja	 $LN24@ProccessIt
$LN23@ProccessIt:
  000c4	5f		 pop	 edi

; 219  : 	{
; 220  : 	case 78:	//-> Golden Goblin
; 221  : 	case 53:	//-> Golden Titan
; 222  : 	case 79:	//-> Golden Dragon
; 223  : 	case 80:	//-> Golden Lizard
; 224  : 	case 82:	//-> Golden Tantalos
; 225  : 	case 502:	//-> Golden Rabbit
; 226  : 	case 493:	//-> Golden Dark Knight
; 227  : 	case 494:	//-> Golden Devil
; 228  : 	case 495:	//-> ???
; 229  : 	case 496:	//-> Golden Crust
; 230  : 	case 497:	//-> Golden Satiros
; 231  : 	case 498:	//-> Golden Twintail
; 232  : 	case 499:	//-> Golden Iron Knight
; 233  : 	case 500:	//-> Golden Neipin
; 234  : 	case 501:	//-> Golden Great Dragon
; 235  : 		{
; 236  : 			return false;

  000c5	32 c0		 xor	 al, al
  000c7	5b		 pop	 ebx

; 327  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
$LN30@ProccessIt:

; 250  : 				{
; 251  : 					int iLevel	= 0;
; 252  : 					int iOption	= 0;
; 253  : 					int iLuck	= 0;
; 254  : 					int iSkill	= 0;
; 255  : 					int iExlOpt	= 0;
; 256  : 					int iAncOpt	= 0;
; 257  : 					
; 258  : 					if( this->Drop[i].MaxLevel == this->Drop[i].MinLevel )

  000ce	8b 75 08	 mov	 esi, DWORD PTR _i$211000[ebp]
  000d1	6b f6 4c	 imul	 esi, 76			; 0000004cH
  000d4	33 c0		 xor	 eax, eax
  000d6	03 f3		 add	 esi, ebx
  000d8	89 45 f8	 mov	 DWORD PTR _iOption$211009[ebp], eax
  000db	89 45 f4	 mov	 DWORD PTR _iLuck$211010[ebp], eax
  000de	89 45 f0	 mov	 DWORD PTR _iSkill$211011[ebp], eax
  000e1	89 45 0c	 mov	 DWORD PTR _iExlOpt$211012[ebp], eax
  000e4	89 45 fc	 mov	 DWORD PTR _iAncOpt$211013[ebp], eax
  000e7	8b 86 a4 3a 00
	00		 mov	 eax, DWORD PTR [esi+15012]
  000ed	39 86 a8 3a 00
	00		 cmp	 DWORD PTR [esi+15016], eax
  000f3	75 05		 jne	 SHORT $LN15@ProccessIt

; 259  : 					{
; 260  : 						iLevel = this->Drop[i].MinLevel;

  000f5	89 45 ec	 mov	 DWORD PTR _iLevel$211008[ebp], eax

; 261  : 					}
; 262  : 					else

  000f8	eb 1b		 jmp	 SHORT $LN14@ProccessIt
$LN15@ProccessIt:

; 263  : 					{
; 264  : 						iLevel = this->Drop[i].MinLevel + (rand() % (this->Drop[i].MaxLevel - this->Drop[i].MinLevel + 1));

  000fa	8b d8		 mov	 ebx, eax
  000fc	e8 00 00 00 00	 call	 _rand
  00101	8b 8e a8 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15016]
  00107	2b cb		 sub	 ecx, ebx
  00109	41		 inc	 ecx
  0010a	99		 cdq
  0010b	f7 f9		 idiv	 ecx
  0010d	03 d3		 add	 edx, ebx
  0010f	8b 5d e8	 mov	 ebx, DWORD PTR _this$[ebp]
  00112	89 55 ec	 mov	 DWORD PTR _iLevel$211008[ebp], edx
$LN14@ProccessIt:

; 265  : 					}	
; 266  : 
; 267  : 					if( this->Drop[i].MaxOption != 0 )

  00115	83 be b4 3a 00
	00 00		 cmp	 DWORD PTR [esi+15028], 0
  0011c	74 25		 je	 SHORT $LN33@ProccessIt

; 268  : 					{
; 269  : 						if( rand() % 100 < this->Drop[i].OptionRate )

  0011e	e8 00 00 00 00	 call	 _rand
  00123	99		 cdq
  00124	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00129	f7 f9		 idiv	 ecx
  0012b	3b 96 b0 3a 00
	00		 cmp	 edx, DWORD PTR [esi+15024]
  00131	7d 10		 jge	 SHORT $LN33@ProccessIt

; 270  : 						{
; 271  : 							iOption = rand() % this->Drop[i].MaxOption + 1;

  00133	e8 00 00 00 00	 call	 _rand
  00138	99		 cdq
  00139	f7 be b4 3a 00
	00		 idiv	 DWORD PTR [esi+15028]
  0013f	42		 inc	 edx
  00140	89 55 f8	 mov	 DWORD PTR _iOption$211009[ebp], edx
$LN33@ProccessIt:

; 272  : 						}
; 273  : 					}
; 274  : 
; 275  : 					if( this->Drop[i].LuckOption == 1 )

  00143	83 be bc 3a 00
	00 01		 cmp	 DWORD PTR [esi+15036], 1
  0014a	75 1c		 jne	 SHORT $LN34@ProccessIt

; 276  : 					{
; 277  : 						if( rand() % 100 < this->Drop[i].LuckRate )

  0014c	e8 00 00 00 00	 call	 _rand
  00151	99		 cdq
  00152	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00157	f7 f9		 idiv	 ecx
  00159	3b 96 b8 3a 00
	00		 cmp	 edx, DWORD PTR [esi+15032]
  0015f	7d 07		 jge	 SHORT $LN34@ProccessIt

; 278  : 						{
; 279  : 							iLuck = 1;

  00161	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _iLuck$211010[ebp], 1
$LN34@ProccessIt:

; 280  : 						}
; 281  : 					}
; 282  : 
; 283  : 					if( this->Drop[i].SkillOption == 1 )

  00168	83 be c4 3a 00
	00 01		 cmp	 DWORD PTR [esi+15044], 1
  0016f	75 1c		 jne	 SHORT $LN35@ProccessIt

; 284  : 					{
; 285  : 						if( rand() % 100 < this->Drop[i].SkillRate )

  00171	e8 00 00 00 00	 call	 _rand
  00176	99		 cdq
  00177	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0017c	f7 f9		 idiv	 ecx
  0017e	3b 96 c0 3a 00
	00		 cmp	 edx, DWORD PTR [esi+15040]
  00184	7d 07		 jge	 SHORT $LN35@ProccessIt

; 286  : 						{
; 287  : 							iSkill = 1;

  00186	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iSkill$211011[ebp], 1
$LN35@ProccessIt:

; 288  : 						}
; 289  : 					}
; 290  : 
; 291  : 					if(this->Drop[i].ExlOption)

  0018d	83 be cc 3a 00
	00 00		 cmp	 DWORD PTR [esi+15052], 0
  00194	74 4f		 je	 SHORT $LN36@ProccessIt

; 292  : 					{
; 293  : 						if( rand() % 100 < this->Drop[i].ExlRate )

  00196	e8 00 00 00 00	 call	 _rand
  0019b	99		 cdq
  0019c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a1	f7 f9		 idiv	 ecx
  001a3	8b 45 08	 mov	 eax, DWORD PTR _i$211000[ebp]
  001a6	05 c6 00 00 00	 add	 eax, 198		; 000000c6H
  001ab	6b c0 4c	 imul	 eax, 76			; 0000004cH
  001ae	3b 14 18	 cmp	 edx, DWORD PTR [eax+ebx]
  001b1	7d 32		 jge	 SHORT $LN36@ProccessIt

; 294  : 						{
; 295  : 							if(g_ZtLicense.CheckUser(eZtUB::masonX))

  001b3	6a 3c		 push	 60			; 0000003cH
  001b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001ba	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001bf	84 c0		 test	 al, al
  001c1	74 10		 je	 SHORT $LN5@ProccessIt

; 296  : 							{
; 297  : 								int iRandExl = rand() % this->Drop[i].ExlOption + 1;

  001c3	e8 00 00 00 00	 call	 _rand
  001c8	99		 cdq
  001c9	f7 be cc 3a 00
	00		 idiv	 DWORD PTR [esi+15052]
  001cf	42		 inc	 edx

; 298  : 
; 299  : 								iExlOpt = GenExcOpt(iRandExl);

  001d0	52		 push	 edx

; 300  : 							}
; 301  : 							else

  001d1	eb 07		 jmp	 SHORT $LN39@ProccessIt
$LN5@ProccessIt:

; 302  : 							{
; 303  : 								iExlOpt = GenExcOpt(this->Drop[i].ExlOption);

  001d3	8b 8e cc 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15052]
  001d9	51		 push	 ecx
$LN39@ProccessIt:
  001da	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  001df	89 45 0c	 mov	 DWORD PTR _iExlOpt$211012[ebp], eax
  001e2	83 c4 04	 add	 esp, 4
$LN36@ProccessIt:

; 304  : 							}
; 305  : 						}
; 306  : 					}
; 307  : 
; 308  : 					if(this->Drop[i].AncOption == 5 || this->Drop[i].AncOption == 10)

  001e5	8b 86 d4 3a 00
	00		 mov	 eax, DWORD PTR [esi+15060]
  001eb	83 f8 05	 cmp	 eax, 5
  001ee	74 05		 je	 SHORT $LN2@ProccessIt
  001f0	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001f3	75 1e		 jne	 SHORT $LN37@ProccessIt
$LN2@ProccessIt:

; 309  : 					{
; 310  : 						if( rand() % 100 < this->Drop[i].AncRate )

  001f5	e8 00 00 00 00	 call	 _rand
  001fa	99		 cdq
  001fb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00200	f7 f9		 idiv	 ecx
  00202	3b 96 d0 3a 00
	00		 cmp	 edx, DWORD PTR [esi+15056]
  00208	7d 09		 jge	 SHORT $LN37@ProccessIt

; 311  : 						{
; 312  : 							iAncOpt = this->Drop[i].AncOption;

  0020a	8b 96 d4 3a 00
	00		 mov	 edx, DWORD PTR [esi+15060]
  00210	89 55 fc	 mov	 DWORD PTR _iAncOpt$211013[ebp], edx
$LN37@ProccessIt:

; 313  : 						}
; 314  : 					}
; 315  : 
; 316  : 					this->iUser[lpMobObj->m_Index] = true;
; 317  : 
; 318  : 					ItemSerialCreateSend(lpMobObj->m_Index,lpMobObj->MapNumber,lpMobObj->X,lpMobObj->Y,ITEMGET(this->Drop[i].Type,this->Drop[i].Index),iLevel,this->Drop[i].Dur,iSkill,iLuck,iOption,gObjMonsterTopHitDamageUser(lpMobObj),iExlOpt,iAncOpt);	

  00213	8b 4d fc	 mov	 ecx, DWORD PTR _iAncOpt$211013[ebp]
  00216	8b 55 0c	 mov	 edx, DWORD PTR _iExlOpt$211012[ebp]
  00219	8b 07		 mov	 eax, DWORD PTR [edi]
  0021b	51		 push	 ecx
  0021c	52		 push	 edx
  0021d	57		 push	 edi
  0021e	c6 04 03 01	 mov	 BYTE PTR [ebx+eax], 1
  00222	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser
  00227	8b 4d f4	 mov	 ecx, DWORD PTR _iLuck$211010[ebp]
  0022a	8b 55 f0	 mov	 edx, DWORD PTR _iSkill$211011[ebp]
  0022d	83 c4 04	 add	 esp, 4
  00230	50		 push	 eax
  00231	8b 45 f8	 mov	 eax, DWORD PTR _iOption$211009[ebp]
  00234	50		 push	 eax
  00235	0f b6 86 ac 3a
	00 00		 movzx	 eax, BYTE PTR [esi+15020]
  0023c	51		 push	 ecx
  0023d	8b 4d ec	 mov	 ecx, DWORD PTR _iLevel$211008[ebp]
  00240	52		 push	 edx
  00241	8b 96 9c 3a 00
	00		 mov	 edx, DWORD PTR [esi+15004]
  00247	50		 push	 eax
  00248	0f b6 87 46 01
	00 00		 movzx	 eax, BYTE PTR [edi+326]
  0024f	51		 push	 ecx
  00250	0f b6 8f 44 01
	00 00		 movzx	 ecx, BYTE PTR [edi+324]
  00257	c1 e2 09	 shl	 edx, 9
  0025a	03 96 a0 3a 00
	00		 add	 edx, DWORD PTR [esi+15008]
  00260	52		 push	 edx
  00261	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  00268	50		 push	 eax
  00269	8b 07		 mov	 eax, DWORD PTR [edi]
  0026b	51		 push	 ecx
  0026c	52		 push	 edx
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00273	83 c4 34	 add	 esp, 52			; 00000034H
  00276	5e		 pop	 esi
  00277	5f		 pop	 edi

; 319  : 
; 320  : 					return true;

  00278	b0 01		 mov	 al, 1
  0027a	5b		 pop	 ebx

; 327  : }

  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c2 08 00	 ret	 8
?ProccessItemDrop@CItemDropManager@@QAE_NPAUOBJECTSTRUCT@@0@Z ENDP ; CItemDropManager::ProccessItemDrop
_TEXT	ENDS
PUBLIC	?GetMapDropRate@CItemDropManager@@QAEHH@Z	; CItemDropManager::GetMapDropRate
EXTRN	?gItemDropPer@@3HA:DWORD			; gItemDropPer
; Function compile flags: /Ogtp
;	COMDAT ?GetMapDropRate@CItemDropManager@@QAEHH@Z
_TEXT	SEGMENT
_Map$ = 8						; size = 4
?GetMapDropRate@CItemDropManager@@QAEHH@Z PROC		; CItemDropManager::GetMapDropRate, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 489  : 	for(int i = 0; i < this->m_MapDropRate.size(); i++)

  00003	8b 81 ec 0f 04
	00		 mov	 eax, DWORD PTR [ecx+266220]
  00009	2b 81 e8 0f 04
	00		 sub	 eax, DWORD PTR [ecx+266216]
  0000f	56		 push	 esi
  00010	c1 f8 03	 sar	 eax, 3
  00013	33 d2		 xor	 edx, edx
  00015	57		 push	 edi
  00016	85 c0		 test	 eax, eax
  00018	74 17		 je	 SHORT $LN2@GetMapDrop
  0001a	8b b1 e8 0f 04
	00		 mov	 esi, DWORD PTR [ecx+266216]
  00020	8b 7d 08	 mov	 edi, DWORD PTR _Map$[ebp]
  00023	8b ce		 mov	 ecx, esi
$LL4@GetMapDrop:

; 490  : 	{
; 491  : 		if(this->m_MapDropRate[i].MapNum == Map)

  00025	39 39		 cmp	 DWORD PTR [ecx], edi
  00027	74 13		 je	 SHORT $LN14@GetMapDrop

; 489  : 	for(int i = 0; i < this->m_MapDropRate.size(); i++)

  00029	42		 inc	 edx
  0002a	83 c1 08	 add	 ecx, 8
  0002d	3b d0		 cmp	 edx, eax
  0002f	72 f4		 jb	 SHORT $LL4@GetMapDrop
$LN2@GetMapDrop:

; 494  : 		}
; 495  : 	}
; 496  : 
; 497  : 	return gItemDropPer;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gItemDropPer@@3HA ; gItemDropPer
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 498  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN14@GetMapDrop:

; 492  : 		{
; 493  : 			return this->m_MapDropRate[i].Rate;

  0003c	8b 44 d6 04	 mov	 eax, DWORD PTR [esi+edx*8+4]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 498  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?GetMapDropRate@CItemDropManager@@QAEHH@Z ENDP		; CItemDropManager::GetMapDropRate
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z PROC ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@V?$allocator@UMAP_DROPRATE_DATA@@@1@@Z ENDP ; std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z ; std::_Allocate<MAP_DROPRATE_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T212373 = -12						; size = 12
$T212378 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z PROC ; std::_Allocate<MAP_DROPRATE_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T212378[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T212373[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T212378[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T212373[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T212373[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UMAP_DROPRATE_DATA@@@std@@YAPAUMAP_DROPRATE_DATA@@IPAU1@@Z ENDP ; std::_Allocate<MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@2:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@ABU3@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN1@Move
  00010	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL3@Move
  00025	5e		 pop	 esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z ; std::allocator<MAP_DROPRATE_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z ; std::allocator<MAP_DROPRATE_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@3:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEXPAUMAP_DROPRATE_DATA@@$$QAU3@@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QAE@PAUMAP_DROPRATE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::_Vector_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z
_TEXT	SEGMENT
$T212481 = -12						; size = 12
$T212479 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z PROC ; std::allocator<MAP_DROPRATE_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate
  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T212479[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T212481[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T212479[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T212481[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T212481[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z ENDP ; std::allocator<MAP_DROPRATE_DATA>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z PROC ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN5@Move@2
  00010	56		 push	 esi
$LL7@Move@2:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL7@Move@2
  00025	5e		 pop	 esi
$LN5@Move@2:

; 2536 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUMAP_DROPRATE_DATA@@PAU1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00@Z ENDP ; std::_Move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z PROC ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@3:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@U3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA>
  0001e	83 c6 08	 add	 esi, 8
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 08	 add	 edi, 8
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAXPAUMAP_DROPRATE_DATA@@0AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ; std::_Uninitialized_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$212674 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z PROC ; std::_Uninitialized_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$212674[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXPAUMAP_DROPRATE_DATA@@0@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Umove<MAP_DROPRATE_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$212696 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Umove<MAP_DROPRATE_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$212696[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUMAP_DROPRATE_DATA@@@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEPAUMAP_DROPRATE_DATA@@PAU2@00@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Umove<MAP_DROPRATE_DATA *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First_arg$[ebp]
  0000d	89 30		 mov	 DWORD PTR [eax], esi
  0000f	3b f2		 cmp	 esi, edx
  00011	74 26		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00013	57		 push	 edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	3b d7		 cmp	 edx, edi
  00019	74 1a		 je	 SHORT $LN30@erase
  0001b	53		 push	 ebx
  0001c	8d 64 24 00	 npad	 4
$LL32@erase:
  00020	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00022	89 1e		 mov	 DWORD PTR [esi], ebx
  00024	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  00027	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002a	83 c2 08	 add	 edx, 8
  0002d	83 c6 08	 add	 esi, 8
  00030	3b d7		 cmp	 edx, edi
  00032	75 ec		 jne	 SHORT $LL32@erase
  00034	5b		 pop	 ebx
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00035	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00038	5f		 pop	 edi
$LN1@erase:
  00039	5e		 pop	 esi

; 1212 : 			}
; 1213 : 		return (_First);
; 1214 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$211358 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$212867 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 03	 sar	 ecx, 3
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 56		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UMAP_DROPRATE_DATA@@@std@@QAEPAUMAP_DROPRATE_DATA@@I@Z ; std::allocator<MAP_DROPRATE_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$212867[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$211358[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMAP_DROPRATE_DATA@@PAU1@V?$allocator@UMAP_DROPRATE_DATA@@@std@@U1@@std@@YAPAUMAP_DROPRATE_DATA@@PAU1@00AAV?$allocator@UMAP_DROPRATE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAP_DROPRATE_DATA *,MAP_DROPRATE_DATA *,std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	2b f8		 sub	 edi, eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	c1 ff 03	 sar	 edi, 3

; 761  : 			if (this->_Myfirst != 0)

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00098	8d 14 fb	 lea	 edx, DWORD PTR [ebx+edi*8]
  0009b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009e	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$211358[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
PUBLIC	??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::~vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::clear, COMDAT
; _this$ = ecx

; 1218 : 		erase(begin(), end());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00006	3b d6		 cmp	 edx, esi
  00008	74 1f		 je	 SHORT $LN19@clear
  0000a	8b c6		 mov	 eax, esi
  0000c	3b f6		 cmp	 esi, esi
  0000e	74 16		 je	 SHORT $LN48@clear
  00010	57		 push	 edi
$LL50@clear:
  00011	8b 38		 mov	 edi, DWORD PTR [eax]
  00013	89 3a		 mov	 DWORD PTR [edx], edi
  00015	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00018	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0001b	83 c0 08	 add	 eax, 8
  0001e	83 c2 08	 add	 edx, 8
  00021	3b c6		 cmp	 eax, esi
  00023	75 ec		 jne	 SHORT $LL50@clear
  00025	5f		 pop	 edi
$LN48@clear:
  00026	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN19@clear:
  00029	5e		 pop	 esi

; 1219 : 		}

  0002a	c3		 ret	 0
?clear@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00014	c1 f8 03	 sar	 eax, 3
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 03	 sar	 edx, 3
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CItemDropManager@@QAE@XZ			; CItemDropManager::CItemDropManager
; Function compile flags: /Ogtp
;	COMDAT ??0CItemDropManager@@QAE@XZ
_TEXT	SEGMENT
??0CItemDropManager@@QAE@XZ PROC			; CItemDropManager::CItemDropManager, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 88 e8 0f 04
	00		 mov	 DWORD PTR [eax+266216], ecx
  0000a	89 88 ec 0f 04
	00		 mov	 DWORD PTR [eax+266220], ecx
  00010	89 88 f0 0f 04
	00		 mov	 DWORD PTR [eax+266224], ecx
  00016	c3		 ret	 0
??0CItemDropManager@@QAE@XZ ENDP			; CItemDropManager::CItemDropManager
_TEXT	ENDS
PUBLIC	??1CItemDropManager@@QAE@XZ			; CItemDropManager::~CItemDropManager
; Function compile flags: /Ogtp
;	COMDAT ??1CItemDropManager@@QAE@XZ
_TEXT	SEGMENT
??1CItemDropManager@@QAE@XZ PROC			; CItemDropManager::~CItemDropManager, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 86 e8 0f 04
	00		 mov	 eax, DWORD PTR [esi+266216]
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN11@CItemDropM
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN11@CItemDropM:
  00016	c7 86 e8 0f 04
	00 00 00 00 00	 mov	 DWORD PTR [esi+266216], 0
  00020	c7 86 ec 0f 04
	00 00 00 00 00	 mov	 DWORD PTR [esi+266220], 0
  0002a	c7 86 f0 0f 04
	00 00 00 00 00	 mov	 DWORD PTR [esi+266224], 0
  00034	5e		 pop	 esi
  00035	c3		 ret	 0
??1CItemDropManager@@QAE@XZ ENDP			; CItemDropManager::~CItemDropManager
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z PROC ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXABUMAP_DROPRATE_DATA@@@Z ENDP ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ ; `string'
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	??_C@_0CD@KLIDLCFC@?4?4?2Data?2ZtData?2ItemDropManager?4i@ ; `string'
PUBLIC	??_C@_0BG@BIDLIGII@ZtData?2AncentDrop?4ini?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Init@CItemDropManager@@QAEXXZ			; CItemDropManager::Init
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	_memset:PROC
;	COMDAT ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ DB '%'
	DB	'd %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KLIDLCFC@?4?4?2Data?2ZtData?2ItemDropManager?4i@
CONST	SEGMENT
??_C@_0CD@KLIDLCFC@?4?4?2Data?2ZtData?2ItemDropManager?4i@ DB '..\Data\Zt'
	DB	'Data\ItemDropManager.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIDLIGII@ZtData?2AncentDrop?4ini?$AA@
CONST	SEGMENT
??_C@_0BG@BIDLIGII@ZtData?2AncentDrop?4ini?$AA@ DB 'ZtData\AncentDrop.ini'
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\itemdropmanager.cpp
CONST	ENDS
;	COMDAT ?Init@CItemDropManager@@QAEXXZ
_TEXT	SEGMENT
__Idx$213762 = -384					; size = 4
_n$210937 = -380					; size = 8
_n$210929 = -372					; size = 8
_List$210938 = -364					; size = 8
_file$ = -356						; size = 4
_Flag$ = -352						; size = 4
_n$210934 = -348					; size = 12
_n$210926 = -336					; size = 76
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Init@CItemDropManager@@QAEXXZ PROC			; CItemDropManager::Init, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f1		 mov	 esi, ecx

; 17   : 	ZeroMemory(&this->Drop,sizeof(this->Drop));

  00018	68 e0 28 01 00	 push	 76000			; 000128e0H
  0001d	33 db		 xor	 ebx, ebx
  0001f	8d 86 9c 3a 00
	00		 lea	 eax, DWORD PTR [esi+15004]
  00025	53		 push	 ebx
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memset

; 18   : 
; 19   : 	this->MapBlockCount = 0;
; 20   : 	ZeroMemory(&this->MapBlockDrop,sizeof(this->MapBlockDrop));

  0002c	68 e0 2e 00 00	 push	 12000			; 00002ee0H
  00031	8d 8e c4 82 01
	00		 lea	 ecx, DWORD PTR [esi+99012]
  00037	53		 push	 ebx
  00038	51		 push	 ecx
  00039	89 9e c0 82 01
	00		 mov	 DWORD PTR [esi+99008], ebx
  0003f	e8 00 00 00 00	 call	 _memset
  00044	83 c4 18	 add	 esp, 24			; 00000018H

; 21   : 
; 22   : 	for(int i = 0; i > OBJMAX; i++)
; 23   : 	{
; 24   : 		this->iUser[i]	= false;
; 25   : 	}
; 26   : 
; 27   : 	this->ReadAnc(gDirPath.GetNewPath("ZtData\\AncentDrop.ini"));

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIDLIGII@ZtData?2AncentDrop?4ini?$AA@
  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00051	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00056	50		 push	 eax
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?ReadAnc@CItemDropManager@@QAEXPAD@Z ; CItemDropManager::ReadAnc

; 28   : 
; 29   : 	FILE *file = fopen(ITEM_DROP_DIR,"r");

  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KLIDLCFC@?4?4?2Data?2ZtData?2ItemDropManager?4i@
  00068	e8 00 00 00 00	 call	 _fopen
  0006d	83 c4 08	 add	 esp, 8
  00070	89 85 9c fe ff
	ff		 mov	 DWORD PTR _file$[ebp], eax

; 30   : 
; 31   : 	if (file == NULL)

  00076	3b c3		 cmp	 eax, ebx
  00078	75 1a		 jne	 SHORT $LN10@Init

; 32   : 	{
; 33   : 		MessageBoxA(0,ITEM_DROP_DIR,"CRITICAL ERROR",0);

  0007a	53		 push	 ebx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KLIDLCFC@?4?4?2Data?2ZtData?2ItemDropManager?4i@
  00085	53		 push	 ebx
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 34   : 		ExitProcess(1);

  0008c	6a 01		 push	 1
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN169@Init:
$LN10@Init:

; 35   : 		return;
; 36   : 	}
; 37   : 
; 38   : 	this->DropCount = 0;

  00094	89 9e 98 3a 00
	00		 mov	 DWORD PTR [esi+15000], ebx

; 39   : 	this->BlockCount = 0;

  0009a	89 9e 7c 63 01
	00		 mov	 DWORD PTR [esi+91004], ebx

; 40   : 
; 41   : 	this->m_MapDropRate.clear();

  000a0	8b 96 e8 0f 04
	00		 mov	 edx, DWORD PTR [esi+266216]
  000a6	8b 8e ec 0f 04
	00		 mov	 ecx, DWORD PTR [esi+266220]
  000ac	3b d1		 cmp	 edx, ecx
  000ae	74 28		 je	 SHORT $LN34@Init
  000b0	8b c1		 mov	 eax, ecx
  000b2	3b c9		 cmp	 ecx, ecx
  000b4	74 16		 je	 SHORT $LN63@Init
$LL65@Init:
  000b6	8b 18		 mov	 ebx, DWORD PTR [eax]
  000b8	89 1a		 mov	 DWORD PTR [edx], ebx
  000ba	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  000bd	89 5a 04	 mov	 DWORD PTR [edx+4], ebx
  000c0	83 c0 08	 add	 eax, 8
  000c3	83 c2 08	 add	 edx, 8
  000c6	3b c1		 cmp	 eax, ecx
  000c8	75 ec		 jne	 SHORT $LL65@Init
  000ca	33 db		 xor	 ebx, ebx
$LN63@Init:
  000cc	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  000d2	89 96 ec 0f 04
	00		 mov	 DWORD PTR [esi+266220], edx
$LN34@Init:

; 42   : 
; 43   : 	char Buff[256];
; 44   : 	int Flag = 0;
; 45   : 	while (!feof(file))

  000d8	50		 push	 eax
  000d9	89 9d a0 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], ebx
  000df	e8 00 00 00 00	 call	 _feof
  000e4	83 c4 04	 add	 esp, 4
  000e7	85 c0		 test	 eax, eax
  000e9	0f 85 00 05 00
	00		 jne	 $LN166@Init
  000ef	90		 npad	 1
$LL9@Init:

; 46   : 	{
; 47   : 		fgets(Buff,256,file);

  000f0	8b 95 9c fe ff
	ff		 mov	 edx, DWORD PTR _file$[ebp]
  000f6	52		 push	 edx
  000f7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  000fd	68 00 01 00 00	 push	 256			; 00000100H
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _fgets

; 48   : 
; 49   : 		if(Zt_IsBadFileLine(Buff, Flag))

  00108	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  0010e	51		 push	 ecx
  0010f	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  0011b	83 c4 14	 add	 esp, 20			; 00000014H
  0011e	84 c0		 test	 al, al
  00120	0f 85 b2 04 00
	00		 jne	 $LN165@Init

; 50   : 			continue;
; 51   : 
; 52   : 		if (Flag == 1)

  00126	bb 01 00 00 00	 mov	 ebx, 1
  0012b	39 9d a0 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], ebx
  00131	0f 85 42 02 00
	00		 jne	 $LN6@Init

; 53   : 		{
; 54   : 			int n[19];
; 55   : 			sscanf(Buff,"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", &n[0],&n[1],&n[2],&n[3],&n[4],&n[5],&n[6],&n[7],&n[8],&n[9],&n[10],&n[11],&n[12],&n[13],&n[14],&n[15],&n[16],&n[17],&n[18]);

  00137	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _n$210926[ebp+72]
  0013d	50		 push	 eax
  0013e	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210926[ebp+68]
  00144	51		 push	 ecx
  00145	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _n$210926[ebp+64]
  0014b	52		 push	 edx
  0014c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$210926[ebp+60]
  00152	50		 push	 eax
  00153	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210926[ebp+56]
  00159	51		 push	 ecx
  0015a	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$210926[ebp+52]
  00160	52		 push	 edx
  00161	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$210926[ebp+48]
  00167	50		 push	 eax
  00168	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$210926[ebp+44]
  0016e	51		 push	 ecx
  0016f	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR _n$210926[ebp+40]
  00175	52		 push	 edx
  00176	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _n$210926[ebp+36]
  0017c	50		 push	 eax
  0017d	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210926[ebp+32]
  00183	51		 push	 ecx
  00184	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _n$210926[ebp+28]
  0018a	52		 push	 edx
  0018b	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _n$210926[ebp+24]
  00191	50		 push	 eax
  00192	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210926[ebp+20]
  00198	51		 push	 ecx
  00199	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR _n$210926[ebp+16]
  0019f	52		 push	 edx
  001a0	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _n$210926[ebp+12]
  001a6	50		 push	 eax
  001a7	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210926[ebp+8]
  001ad	51		 push	 ecx
  001ae	8d 95 b4 fe ff
	ff		 lea	 edx, DWORD PTR _n$210926[ebp+4]
  001b4	52		 push	 edx
  001b5	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _n$210926[ebp]
  001bb	50		 push	 eax
  001bc	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@GPAKNOIP@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
  001c7	51		 push	 ecx
  001c8	e8 00 00 00 00	 call	 _sscanf

; 56   : 			this->Drop[this->DropCount].Type			= n[0];

  001cd	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]
  001d3	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _n$210926[ebp]
  001d9	6b d2 4c	 imul	 edx, 76			; 0000004cH
  001dc	89 84 32 9c 3a
	00 00		 mov	 DWORD PTR [edx+esi+15004], eax

; 57   : 			this->Drop[this->DropCount].Index			= n[1];

  001e3	8b 8e 98 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15000]
  001e9	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR _n$210926[ebp+4]
  001ef	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  001f2	89 94 31 a0 3a
	00 00		 mov	 DWORD PTR [ecx+esi+15008], edx

; 58   : 			this->Drop[this->DropCount].MinLevel		= n[2];

  001f9	8b 86 98 3a 00
	00		 mov	 eax, DWORD PTR [esi+15000]
  001ff	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210926[ebp+8]
  00205	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00208	89 8c 30 a4 3a
	00 00		 mov	 DWORD PTR [eax+esi+15012], ecx

; 59   : 			this->Drop[this->DropCount].MaxLevel		= n[3];

  0020f	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]
  00215	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _n$210926[ebp+12]
  0021b	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0021e	89 84 32 a8 3a
	00 00		 mov	 DWORD PTR [edx+esi+15016], eax

; 60   : 			this->Drop[this->DropCount].Dur				= n[4];

  00225	8b 8e 98 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15000]
  0022b	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _n$210926[ebp+16]
  00231	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00234	89 94 31 ac 3a
	00 00		 mov	 DWORD PTR [ecx+esi+15020], edx

; 61   : 			this->Drop[this->DropCount].OptionRate		= n[5];

  0023b	8b 86 98 3a 00
	00		 mov	 eax, DWORD PTR [esi+15000]
  00241	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210926[ebp+20]
  00247	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0024a	89 8c 30 b0 3a
	00 00		 mov	 DWORD PTR [eax+esi+15024], ecx

; 62   : 			this->Drop[this->DropCount].MaxOption		= n[6];

  00251	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]
  00257	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _n$210926[ebp+24]
  0025d	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00260	89 84 32 b4 3a
	00 00		 mov	 DWORD PTR [edx+esi+15028], eax

; 63   : 			this->Drop[this->DropCount].LuckRate		= n[7];

  00267	8b 8e 98 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15000]
  0026d	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _n$210926[ebp+28]
  00273	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00276	89 94 31 b8 3a
	00 00		 mov	 DWORD PTR [ecx+esi+15032], edx

; 64   : 			this->Drop[this->DropCount].LuckOption		= n[8];

  0027d	8b 86 98 3a 00
	00		 mov	 eax, DWORD PTR [esi+15000]
  00283	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210926[ebp+32]
  00289	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0028c	89 8c 30 bc 3a
	00 00		 mov	 DWORD PTR [eax+esi+15036], ecx

; 65   : 			this->Drop[this->DropCount].SkillRate		= n[9];

  00293	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]
  00299	83 c4 54	 add	 esp, 84			; 00000054H
  0029c	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0029f	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _n$210926[ebp+36]
  002a5	89 84 32 c0 3a
	00 00		 mov	 DWORD PTR [edx+esi+15040], eax

; 66   : 			this->Drop[this->DropCount].SkillOption		= n[10];

  002ac	8b 8e 98 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15000]
  002b2	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _n$210926[ebp+40]
  002b8	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  002bb	89 94 31 c4 3a
	00 00		 mov	 DWORD PTR [ecx+esi+15044], edx

; 67   : 			this->Drop[this->DropCount].ExlRate			= n[11];

  002c2	8b 86 98 3a 00
	00		 mov	 eax, DWORD PTR [esi+15000]
  002c8	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _n$210926[ebp+44]
  002ce	05 c6 00 00 00	 add	 eax, 198		; 000000c6H
  002d3	6b c0 4c	 imul	 eax, 76			; 0000004cH
  002d6	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 68   : 			this->Drop[this->DropCount].ExlOption		= n[12];

  002d9	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]
  002df	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _n$210926[ebp+48]
  002e5	6b d2 4c	 imul	 edx, 76			; 0000004cH
  002e8	89 84 32 cc 3a
	00 00		 mov	 DWORD PTR [edx+esi+15052], eax

; 69   : 			this->Drop[this->DropCount].AncRate			= n[13];

  002ef	8b 8e 98 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15000]
  002f5	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _n$210926[ebp+52]
  002fb	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  002fe	89 94 31 d0 3a
	00 00		 mov	 DWORD PTR [ecx+esi+15056], edx

; 70   : 			this->Drop[this->DropCount].AncOption		= n[14];

  00305	8b 86 98 3a 00
	00		 mov	 eax, DWORD PTR [esi+15000]
  0030b	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210926[ebp+56]
  00311	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00314	89 8c 30 d4 3a
	00 00		 mov	 DWORD PTR [eax+esi+15060], ecx

; 71   : 			this->Drop[this->DropCount].MonsterMinLevel = n[15];

  0031b	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]
  00321	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _n$210926[ebp+60]
  00327	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0032a	89 84 32 d8 3a
	00 00		 mov	 DWORD PTR [edx+esi+15064], eax

; 72   : 			this->Drop[this->DropCount].MonsterMaxLevel = n[16];

  00331	8b 8e 98 3a 00
	00		 mov	 ecx, DWORD PTR [esi+15000]
  00337	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _n$210926[ebp+64]
  0033d	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00340	89 94 31 dc 3a
	00 00		 mov	 DWORD PTR [ecx+esi+15068], edx

; 73   : 			this->Drop[this->DropCount].MonsterMap		= n[17];

  00347	8b 86 98 3a 00
	00		 mov	 eax, DWORD PTR [esi+15000]
  0034d	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210926[ebp+68]
  00353	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00356	89 8c 30 e0 3a
	00 00		 mov	 DWORD PTR [eax+esi+15072], ecx

; 74   : 			this->Drop[this->DropCount].ItemDropRate	= n[18];

  0035d	8b 96 98 3a 00
	00		 mov	 edx, DWORD PTR [esi+15000]
  00363	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _n$210926[ebp+72]
  00369	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0036c	89 84 32 e4 3a
	00 00		 mov	 DWORD PTR [edx+esi+15076], eax

; 75   : 			this->DropCount++;

  00373	01 9e 98 3a 00
	00		 add	 DWORD PTR [esi+15000], ebx
$LN6@Init:

; 76   : 		}
; 77   : 
; 78   : 		if(Flag == 2)

  00379	83 bd a0 fe ff
	ff 02		 cmp	 DWORD PTR _Flag$[ebp], 2
  00380	75 4e		 jne	 SHORT $LN164@Init

; 79   : 		{
; 80   : 			int n[2];
; 81   : 			sscanf(Buff,"%d %d", &n[0],&n[1]);

  00382	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210929[ebp+4]
  00388	51		 push	 ecx
  00389	8d 95 8c fe ff
	ff		 lea	 edx, DWORD PTR _n$210929[ebp]
  0038f	52		 push	 edx
  00390	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 _sscanf

; 82   : 			this->Block[this->BlockCount].Type	= n[0];

  003a1	8b 8e 7c 63 01
	00		 mov	 ecx, DWORD PTR [esi+91004]
  003a7	8b 95 8c fe ff
	ff		 mov	 edx, DWORD PTR _n$210929[ebp]
  003ad	89 94 ce 80 63
	01 00		 mov	 DWORD PTR [esi+ecx*8+91008], edx

; 83   : 			this->Block[this->BlockCount].Index = n[1];

  003b4	8b 86 7c 63 01
	00		 mov	 eax, DWORD PTR [esi+91004]
  003ba	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210929[ebp+4]
  003c0	83 c4 10	 add	 esp, 16			; 00000010H
  003c3	89 8c c6 84 63
	01 00		 mov	 DWORD PTR [esi+eax*8+91012], ecx

; 84   : 			this->BlockCount++;

  003ca	01 9e 7c 63 01
	00		 add	 DWORD PTR [esi+91004], ebx
$LN164@Init:

; 85   : 		}
; 86   : 
; 87   : 		if(g_ZtLicense.CheckUser(Local) || g_ZtLicense.CheckUser(ulasevich) || g_ZtLicense.CheckUser(ulasevich2))

  003d0	6a 00		 push	 0
  003d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003d7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003dc	84 c0		 test	 al, al
  003de	75 20		 jne	 SHORT $LN3@Init
  003e0	6a 17		 push	 23			; 00000017H
  003e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003e7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003ec	84 c0		 test	 al, al
  003ee	75 10		 jne	 SHORT $LN3@Init
  003f0	6a 24		 push	 36			; 00000024H
  003f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003f7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003fc	84 c0		 test	 al, al
  003fe	74 7a		 je	 SHORT $LN163@Init
$LN3@Init:

; 88   : 		{
; 89   : 			if(Flag == 3)

  00400	83 bd a0 fe ff
	ff 03		 cmp	 DWORD PTR _Flag$[ebp], 3
  00407	75 71		 jne	 SHORT $LN163@Init

; 90   : 			{
; 91   : 				int n[3];
; 92   : 				sscanf(Buff,"%d %d %d", &n[0], &n[1], &n[2]);

  00409	8d 95 ac fe ff
	ff		 lea	 edx, DWORD PTR _n$210934[ebp+8]
  0040f	52		 push	 edx
  00410	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _n$210934[ebp+4]
  00416	50		 push	 eax
  00417	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210934[ebp]
  0041d	51		 push	 ecx
  0041e	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  00424	68 00 00 00 00	 push	 OFFSET ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
  00429	52		 push	 edx
  0042a	e8 00 00 00 00	 call	 _sscanf

; 93   : 				this->MapBlockDrop[this->MapBlockCount].Map	= n[0];

  0042f	8b 86 c0 82 01
	00		 mov	 eax, DWORD PTR [esi+99008]
  00435	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210934[ebp]
  0043b	8d 84 40 b1 60
	00 00		 lea	 eax, DWORD PTR [eax+eax*2+24753]
  00442	89 0c 86	 mov	 DWORD PTR [esi+eax*4], ecx

; 94   : 				this->MapBlockDrop[this->MapBlockCount].Type	= n[1];

  00445	8b 86 c0 82 01
	00		 mov	 eax, DWORD PTR [esi+99008]
  0044b	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0044e	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _n$210934[ebp+4]
  00454	89 84 96 c8 82
	01 00		 mov	 DWORD PTR [esi+edx*4+99016], eax

; 95   : 				this->MapBlockDrop[this->MapBlockCount].Index	= n[2];

  0045b	8b 86 c0 82 01
	00		 mov	 eax, DWORD PTR [esi+99008]
  00461	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _n$210934[ebp+8]
  00467	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0046a	83 c4 14	 add	 esp, 20			; 00000014H
  0046d	89 94 8e cc 82
	01 00		 mov	 DWORD PTR [esi+ecx*4+99020], edx

; 96   : 				this->MapBlockCount++;

  00474	01 9e c0 82 01
	00		 add	 DWORD PTR [esi+99008], ebx
$LN163@Init:

; 97   : 			}
; 98   : 		}
; 99   : 
; 100  : 		if(Flag == 4)

  0047a	83 bd a0 fe ff
	ff 04		 cmp	 DWORD PTR _Flag$[ebp], 4
  00481	0f 85 51 01 00
	00		 jne	 $LN165@Init

; 101  : 		{
; 102  : 			int n[2];
; 103  : 			sscanf(Buff,"%d %d", &n[0], &n[1]);

  00487	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _n$210937[ebp+4]
  0048d	50		 push	 eax
  0048e	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _n$210937[ebp]
  00494	51		 push	 ecx
  00495	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0049b	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  004a0	52		 push	 edx
  004a1	e8 00 00 00 00	 call	 _sscanf

; 104  : 
; 105  : 			MAP_DROPRATE_DATA List;
; 106  : 			List.MapNum = n[0];

  004a6	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _n$210937[ebp]

; 107  : 			List.Rate = n[1];

  004ac	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR _n$210937[ebp+4]
  004b2	89 85 94 fe ff
	ff		 mov	 DWORD PTR _List$210938[ebp], eax

; 108  : 
; 109  : 			this->m_MapDropRate.push_back(List);

  004b8	8b 86 ec 0f 04
	00		 mov	 eax, DWORD PTR [esi+266220]
  004be	8d 95 94 fe ff
	ff		 lea	 edx, DWORD PTR _List$210938[ebp]
  004c4	83 c4 10	 add	 esp, 16			; 00000010H
  004c7	89 8d 98 fe ff
	ff		 mov	 DWORD PTR _List$210938[ebp+4], ecx
  004cd	3b d0		 cmp	 edx, eax
  004cf	0f 83 8d 00 00
	00		 jae	 $LN73@Init
  004d5	8b 96 e8 0f 04
	00		 mov	 edx, DWORD PTR [esi+266216]
  004db	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _List$210938[ebp]
  004e1	3b d1		 cmp	 edx, ecx
  004e3	77 7d		 ja	 SHORT $LN73@Init
  004e5	8b d9		 mov	 ebx, ecx
  004e7	8b 8e f0 0f 04
	00		 mov	 ecx, DWORD PTR [esi+266224]
  004ed	2b da		 sub	 ebx, edx
  004ef	c1 fb 03	 sar	 ebx, 3
  004f2	89 9d 80 fe ff
	ff		 mov	 DWORD PTR __Idx$213762[ebp], ebx
  004f8	3b c1		 cmp	 eax, ecx
  004fa	75 47		 jne	 SHORT $LN84@Init
  004fc	2b c2		 sub	 eax, edx
  004fe	c1 f8 03	 sar	 eax, 3
  00501	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  00506	0f 87 03 01 00
	00		 ja	 $LN158@Init
  0050c	2b ca		 sub	 ecx, edx
  0050e	40		 inc	 eax
  0050f	c1 f9 03	 sar	 ecx, 3
  00512	3b c1		 cmp	 eax, ecx
  00514	76 2d		 jbe	 SHORT $LN84@Init
  00516	8b d1		 mov	 edx, ecx
  00518	d1 ea		 shr	 edx, 1
  0051a	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  0051f	2b da		 sub	 ebx, edx
  00521	3b d9		 cmp	 ebx, ecx
  00523	73 04		 jae	 SHORT $LN106@Init
  00525	33 c9		 xor	 ecx, ecx
  00527	eb 02		 jmp	 SHORT $LN107@Init
$LN106@Init:
  00529	03 ca		 add	 ecx, edx
$LN107@Init:
  0052b	3b c8		 cmp	 ecx, eax
  0052d	73 02		 jae	 SHORT $LN103@Init
  0052f	8b c8		 mov	 ecx, eax
$LN103@Init:
  00531	51		 push	 ecx
  00532	8d 8e e8 0f 04
	00		 lea	 ecx, DWORD PTR [esi+266216]
  00538	e8 00 00 00 00	 call	 ?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
  0053d	8b 9d 80 fe ff
	ff		 mov	 ebx, DWORD PTR __Idx$213762[ebp]
$LN84@Init:
  00543	8b 96 e8 0f 04
	00		 mov	 edx, DWORD PTR [esi+266216]
  00549	8b 8e ec 0f 04
	00		 mov	 ecx, DWORD PTR [esi+266220]
  0054f	8d 04 da	 lea	 eax, DWORD PTR [edx+ebx*8]
  00552	50		 push	 eax
  00553	51		 push	 ecx
  00554	8d 96 f4 0f 04
	00		 lea	 edx, DWORD PTR [esi+266228]
  0055a	52		 push	 edx
  0055b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA &>
  00560	eb 6c		 jmp	 SHORT $LN168@Init
$LN73@Init:
  00562	8b 8e f0 0f 04
	00		 mov	 ecx, DWORD PTR [esi+266224]
  00568	3b c1		 cmp	 eax, ecx
  0056a	75 48		 jne	 SHORT $LN119@Init
  0056c	8b 96 e8 0f 04
	00		 mov	 edx, DWORD PTR [esi+266216]
  00572	2b c2		 sub	 eax, edx
  00574	c1 f8 03	 sar	 eax, 3
  00577	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  0057c	0f 87 8d 00 00
	00		 ja	 $LN158@Init
  00582	2b ca		 sub	 ecx, edx
  00584	03 c3		 add	 eax, ebx
  00586	c1 f9 03	 sar	 ecx, 3
  00589	3b c1		 cmp	 eax, ecx
  0058b	76 27		 jbe	 SHORT $LN119@Init
  0058d	8b d1		 mov	 edx, ecx
  0058f	d1 ea		 shr	 edx, 1
  00591	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00596	2b da		 sub	 ebx, edx
  00598	3b d9		 cmp	 ebx, ecx
  0059a	73 04		 jae	 SHORT $LN141@Init
  0059c	33 c9		 xor	 ecx, ecx
  0059e	eb 02		 jmp	 SHORT $LN142@Init
$LN141@Init:
  005a0	03 ca		 add	 ecx, edx
$LN142@Init:
  005a2	3b c8		 cmp	 ecx, eax
  005a4	73 02		 jae	 SHORT $LN138@Init
  005a6	8b c8		 mov	 ecx, eax
$LN138@Init:
  005a8	51		 push	 ecx
  005a9	8d 8e e8 0f 04
	00		 lea	 ecx, DWORD PTR [esi+266216]
  005af	e8 00 00 00 00	 call	 ?reserve@?$vector@UMAP_DROPRATE_DATA@@V?$allocator@UMAP_DROPRATE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAP_DROPRATE_DATA,std::allocator<MAP_DROPRATE_DATA> >::reserve
$LN119@Init:
  005b4	8b 8e ec 0f 04
	00		 mov	 ecx, DWORD PTR [esi+266220]
  005ba	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _List$210938[ebp]
  005c0	50		 push	 eax
  005c1	51		 push	 ecx
  005c2	8d 96 f4 0f 04
	00		 lea	 edx, DWORD PTR [esi+266228]
  005c8	52		 push	 edx
  005c9	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAP_DROPRATE_DATA@@@std@@UMAP_DROPRATE_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAP_DROPRATE_DATA@@@0@PAUMAP_DROPRATE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<MAP_DROPRATE_DATA>,MAP_DROPRATE_DATA,MAP_DROPRATE_DATA const &>
$LN168@Init:
  005ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  005d1	83 86 ec 0f 04
	00 08		 add	 DWORD PTR [esi+266220], 8
$LN165@Init:

; 42   : 
; 43   : 	char Buff[256];
; 44   : 	int Flag = 0;
; 45   : 	while (!feof(file))

  005d8	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  005de	50		 push	 eax
  005df	e8 00 00 00 00	 call	 _feof
  005e4	83 c4 04	 add	 esp, 4
  005e7	85 c0		 test	 eax, eax
  005e9	0f 84 01 fb ff
	ff		 je	 $LL9@Init
$LN166@Init:

; 110  : 		}
; 111  : 	}
; 112  : 
; 113  : 	fclose(file);

  005ef	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _file$[ebp]
  005f5	51		 push	 ecx
  005f6	e8 00 00 00 00	 call	 _fclose

; 114  : 
; 115  : 
; 116  : 	//-> Anc Read
; 117  : }

  005fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005fe	83 c4 04	 add	 esp, 4
  00601	5f		 pop	 edi
  00602	5e		 pop	 esi
  00603	33 cd		 xor	 ecx, ebp
  00605	5b		 pop	 ebx
  00606	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0060b	8b e5		 mov	 esp, ebp
  0060d	5d		 pop	 ebp
  0060e	c3		 ret	 0
$LN158@Init:

; 108  : 
; 109  : 			this->m_MapDropRate.push_back(List);

  0060f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00614	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN170@Init:
$LN167@Init:
  00619	cc		 int	 3
?Init@CItemDropManager@@QAEXXZ ENDP			; CItemDropManager::Init
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgItemDropManager@@YAXXZ
text$yc	SEGMENT
??__EgItemDropManager@@YAXXZ PROC			; `dynamic initializer for 'gItemDropManager'', COMDAT

; 13   : CItemDropManager gItemDropManager;

  00000	68 00 00 00 00	 push	 OFFSET ??__FgItemDropManager@@YAXXZ ; `dynamic atexit destructor for 'gItemDropManager''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EgItemDropManager@@YAXXZ ENDP			; `dynamic initializer for 'gItemDropManager''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgItemDropManager@@YAXXZ
text$yd	SEGMENT
??__FgItemDropManager@@YAXXZ PROC			; `dynamic atexit destructor for 'gItemDropManager'', COMDAT
  00000	a1 e8 0f 04 00	 mov	 eax, DWORD PTR ?gItemDropManager@@3VCItemDropManager@@A+266216
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN12@dynamic
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN12@dynamic:
  00012	c7 05 e8 0f 04
	00 00 00 00 00	 mov	 DWORD PTR ?gItemDropManager@@3VCItemDropManager@@A+266216, 0
  0001c	c7 05 ec 0f 04
	00 00 00 00 00	 mov	 DWORD PTR ?gItemDropManager@@3VCItemDropManager@@A+266220, 0
  00026	c7 05 f0 0f 04
	00 00 00 00 00	 mov	 DWORD PTR ?gItemDropManager@@3VCItemDropManager@@A+266224, 0
  00030	c3		 ret	 0
??__FgItemDropManager@@YAXXZ ENDP			; `dynamic atexit destructor for 'gItemDropManager''
text$yd	ENDS
PUBLIC	?gItemDropManager@@3VCItemDropManager@@A	; gItemDropManager
_BSS	SEGMENT
?gItemDropManager@@3VCItemDropManager@@A DB 040ff8H DUP (?) ; gItemDropManager
_BSS	ENDS
CRT$XCU	SEGMENT
_gItemDropManager$initializer$ DD FLAT:??__EgItemDropManager@@YAXXZ
CRT$XCU	ENDS
END
