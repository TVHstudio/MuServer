; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ItemMove.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 880  : 		}

  00016	c3		 ret	 0
?size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEAAUITEM_MOVE_DATA@@I@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEAAUITEM_MOVE_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEAAUITEM_MOVE_DATA@@I@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000b	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]

; 941  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEAAUITEM_MOVE_DATA@@I@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBE_NPBUITEM_MOVE_DATA@@@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBE_NPBUITEM_MOVE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBE_NPBUITEM_MOVE_DATA@@@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBE_NPBUITEM_MOVE_DATA@@@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXPAUITEM_MOVE_DATA@@0@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXPAUITEM_MOVE_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXPAUITEM_MOVE_DATA@@0@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXPAUITEM_MOVE_DATA@@0@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::~_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::~_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::~_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@XZ	; std::allocator<ITEM_MOVE_DATA>::allocator<ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@XZ PROC	; std::allocator<ITEM_MOVE_DATA>::allocator<ITEM_MOVE_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@XZ ENDP	; std::allocator<ITEM_MOVE_DATA>::allocator<ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 778  : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXXZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<ITEM_MOVE_DATA>::allocator<ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ITEM_MOVE_DATA>::allocator<ITEM_MOVE_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UITEM_MOVE_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ITEM_MOVE_DATA>::allocator<ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@I@Z ; std::allocator<ITEM_MOVE_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@I@Z PROC ; std::allocator<ITEM_MOVE_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@I@Z ENDP ; std::allocator<ITEM_MOVE_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UITEM_MOVE_DATA@@@std@@QBEIXZ ; std::allocator<ITEM_MOVE_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UITEM_MOVE_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UITEM_MOVE_DATA@@@std@@QBEIXZ PROC ; std::allocator<ITEM_MOVE_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UITEM_MOVE_DATA@@@std@@QBEIXZ ENDP ; std::allocator<ITEM_MOVE_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUITEM_MOVE_DATA@@@std@@YAPBUITEM_MOVE_DATA@@ABU1@@Z ; std::addressof<ITEM_MOVE_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUITEM_MOVE_DATA@@@std@@YAPBUITEM_MOVE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUITEM_MOVE_DATA@@@std@@YAPBUITEM_MOVE_DATA@@ABU1@@Z PROC ; std::addressof<ITEM_MOVE_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUITEM_MOVE_DATA@@@std@@YAPBUITEM_MOVE_DATA@@ABU1@@Z ENDP ; std::addressof<ITEM_MOVE_DATA const >
_TEXT	ENDS
PUBLIC	??$forward@AAUITEM_MOVE_DATA@@@std@@YAAAUITEM_MOVE_DATA@@AAU1@@Z ; std::forward<ITEM_MOVE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUITEM_MOVE_DATA@@@std@@YAAAUITEM_MOVE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUITEM_MOVE_DATA@@@std@@YAAAUITEM_MOVE_DATA@@AAU1@@Z PROC ; std::forward<ITEM_MOVE_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUITEM_MOVE_DATA@@@std@@YAAAUITEM_MOVE_DATA@@AAU1@@Z ENDP ; std::forward<ITEM_MOVE_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUITEM_MOVE_DATA@@@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@AAU2@@Z ; std::allocator<ITEM_MOVE_DATA>::construct<ITEM_MOVE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUITEM_MOVE_DATA@@@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUITEM_MOVE_DATA@@@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@AAU2@@Z PROC ; std::allocator<ITEM_MOVE_DATA>::construct<ITEM_MOVE_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@construct:

; 209  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??$construct@AAUITEM_MOVE_DATA@@@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@AAU2@@Z ENDP ; std::allocator<ITEM_MOVE_DATA>::construct<ITEM_MOVE_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUITEM_MOVE_DATA@@@std@@YAABUITEM_MOVE_DATA@@ABU1@@Z ; std::forward<ITEM_MOVE_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUITEM_MOVE_DATA@@@std@@YAABUITEM_MOVE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUITEM_MOVE_DATA@@@std@@YAABUITEM_MOVE_DATA@@ABU1@@Z PROC ; std::forward<ITEM_MOVE_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUITEM_MOVE_DATA@@@std@@YAABUITEM_MOVE_DATA@@ABU1@@Z ENDP ; std::forward<ITEM_MOVE_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UITEM_MOVE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUITEM_MOVE_DATA@@0@Z ; std::_Ptr_cat<ITEM_MOVE_DATA,ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UITEM_MOVE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUITEM_MOVE_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UITEM_MOVE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUITEM_MOVE_DATA@@0@Z PROC ; std::_Ptr_cat<ITEM_MOVE_DATA,ITEM_MOVE_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UITEM_MOVE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUITEM_MOVE_DATA@@0@Z ENDP ; std::_Ptr_cat<ITEM_MOVE_DATA,ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UITEM_MOVE_DATA@@ABU1@@std@@YAXPAUITEM_MOVE_DATA@@ABU1@@Z ; std::_Construct<ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UITEM_MOVE_DATA@@ABU1@@std@@YAXPAUITEM_MOVE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UITEM_MOVE_DATA@@ABU1@@std@@YAXPAUITEM_MOVE_DATA@@ABU1@@Z PROC ; std::_Construct<ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@Construct:

; 49   : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Construct@UITEM_MOVE_DATA@@ABU1@@std@@YAXPAUITEM_MOVE_DATA@@ABU1@@Z ENDP ; std::_Construct<ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>
_TEXT	ENDS
PUBLIC	??$move@AAUITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z ; std::move<ITEM_MOVE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z PROC ; std::move<ITEM_MOVE_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z ENDP ; std::move<ITEM_MOVE_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@@Z ; std::_Val_type<ITEM_MOVE_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@@Z PROC ; std::_Val_type<ITEM_MOVE_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@@Z ENDP ; std::_Val_type<ITEM_MOVE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UITEM_MOVE_DATA@@@std@@YAXPAUITEM_MOVE_DATA@@@Z ; std::_Destroy<ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UITEM_MOVE_DATA@@@std@@YAXPAUITEM_MOVE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UITEM_MOVE_DATA@@@std@@YAXPAUITEM_MOVE_DATA@@@Z PROC ; std::_Destroy<ITEM_MOVE_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UITEM_MOVE_DATA@@@std@@YAXPAUITEM_MOVE_DATA@@@Z ENDP ; std::_Destroy<ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z ; std::forward<ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z PROC ; std::forward<ITEM_MOVE_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UITEM_MOVE_DATA@@@std@@YA$$QAUITEM_MOVE_DATA@@AAU1@@Z ENDP ; std::forward<ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?CheckDrop@CItemMove@@QAE_NH@Z			; CItemMove::CheckDrop
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\itemmove.cpp
;	COMDAT ?CheckDrop@CItemMove@@QAE_NH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?CheckDrop@CItemMove@@QAE_NH@Z PROC			; CItemMove::CheckDrop, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 104  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00005	8b 39		 mov	 edi, DWORD PTR [ecx]
  00007	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000a	2b cf		 sub	 ecx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 e9		 imul	 ecx
  00013	c1 fa 02	 sar	 edx, 2
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	33 f6		 xor	 esi, esi
  0001d	03 c2		 add	 eax, edx
  0001f	74 1f		 je	 SHORT $LN2@CheckDrop
  00021	8b 55 08	 mov	 edx, DWORD PTR _ItemType$[ebp]
  00024	8b cf		 mov	 ecx, edi
$LL4@CheckDrop:

; 105  : 	{
; 106  : 		ITEM_MOVE_DATA * lpData = &this->m_Data[i];
; 107  : 
; 108  : 		if(ItemType == ITEMGET(lpData->Type,lpData->Index) && lpData->AllowDrop == 0)

  00026	8b 39		 mov	 edi, DWORD PTR [ecx]
  00028	c1 e7 09	 shl	 edi, 9
  0002b	03 79 04	 add	 edi, DWORD PTR [ecx+4]
  0002e	3b d7		 cmp	 edx, edi
  00030	75 06		 jne	 SHORT $LN3@CheckDrop
  00032	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00036	74 10		 je	 SHORT $LN12@CheckDrop
$LN3@CheckDrop:

; 104  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00038	46		 inc	 esi
  00039	83 c1 18	 add	 ecx, 24			; 00000018H
  0003c	3b f0		 cmp	 esi, eax
  0003e	72 e6		 jb	 SHORT $LL4@CheckDrop
$LN2@CheckDrop:
  00040	5f		 pop	 edi

; 111  : 		}
; 112  : 	}
; 113  : 
; 114  : 	return false;

  00041	32 c0		 xor	 al, al
  00043	5e		 pop	 esi

; 115  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN12@CheckDrop:
  00048	5f		 pop	 edi

; 109  : 		{
; 110  : 			return true;

  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 115  : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?CheckDrop@CItemMove@@QAE_NH@Z ENDP			; CItemMove::CheckDrop
_TEXT	ENDS
PUBLIC	?CheckSell@CItemMove@@QAE_NH@Z			; CItemMove::CheckSell
; Function compile flags: /Ogtp
;	COMDAT ?CheckSell@CItemMove@@QAE_NH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?CheckSell@CItemMove@@QAE_NH@Z PROC			; CItemMove::CheckSell, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 119  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00005	8b 39		 mov	 edi, DWORD PTR [ecx]
  00007	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000a	2b cf		 sub	 ecx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 e9		 imul	 ecx
  00013	c1 fa 02	 sar	 edx, 2
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	33 f6		 xor	 esi, esi
  0001d	03 c2		 add	 eax, edx
  0001f	74 1f		 je	 SHORT $LN2@CheckSell
  00021	8b 55 08	 mov	 edx, DWORD PTR _ItemType$[ebp]
  00024	8b cf		 mov	 ecx, edi
$LL4@CheckSell:

; 120  : 	{
; 121  : 		ITEM_MOVE_DATA * lpData = &this->m_Data[i];
; 122  : 
; 123  : 		if(ItemType == ITEMGET(lpData->Type,lpData->Index) && lpData->AllowSell == 0)

  00026	8b 39		 mov	 edi, DWORD PTR [ecx]
  00028	c1 e7 09	 shl	 edi, 9
  0002b	03 79 04	 add	 edi, DWORD PTR [ecx+4]
  0002e	3b d7		 cmp	 edx, edi
  00030	75 06		 jne	 SHORT $LN3@CheckSell
  00032	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00036	74 10		 je	 SHORT $LN12@CheckSell
$LN3@CheckSell:

; 119  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00038	46		 inc	 esi
  00039	83 c1 18	 add	 ecx, 24			; 00000018H
  0003c	3b f0		 cmp	 esi, eax
  0003e	72 e6		 jb	 SHORT $LL4@CheckSell
$LN2@CheckSell:
  00040	5f		 pop	 edi

; 126  : 		}
; 127  : 	}
; 128  : 
; 129  : 	return false;

  00041	32 c0		 xor	 al, al
  00043	5e		 pop	 esi

; 130  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN12@CheckSell:
  00048	5f		 pop	 edi

; 124  : 		{
; 125  : 			return true;

  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 130  : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?CheckSell@CItemMove@@QAE_NH@Z ENDP			; CItemMove::CheckSell
_TEXT	ENDS
PUBLIC	?CheckTrade@CItemMove@@QAE_NH@Z			; CItemMove::CheckTrade
; Function compile flags: /Ogtp
;	COMDAT ?CheckTrade@CItemMove@@QAE_NH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?CheckTrade@CItemMove@@QAE_NH@Z PROC			; CItemMove::CheckTrade, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 134  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00005	8b 39		 mov	 edi, DWORD PTR [ecx]
  00007	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000a	2b cf		 sub	 ecx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 e9		 imul	 ecx
  00013	c1 fa 02	 sar	 edx, 2
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	33 f6		 xor	 esi, esi
  0001d	03 c2		 add	 eax, edx
  0001f	74 1f		 je	 SHORT $LN2@CheckTrade
  00021	8b 55 08	 mov	 edx, DWORD PTR _ItemType$[ebp]
  00024	8b cf		 mov	 ecx, edi
$LL4@CheckTrade:

; 135  : 	{
; 136  : 		ITEM_MOVE_DATA * lpData = &this->m_Data[i];
; 137  : 
; 138  : 		if(ItemType == ITEMGET(lpData->Type,lpData->Index) && lpData->AllowTrade == 0)

  00026	8b 39		 mov	 edi, DWORD PTR [ecx]
  00028	c1 e7 09	 shl	 edi, 9
  0002b	03 79 04	 add	 edi, DWORD PTR [ecx+4]
  0002e	3b d7		 cmp	 edx, edi
  00030	75 06		 jne	 SHORT $LN3@CheckTrade
  00032	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00036	74 10		 je	 SHORT $LN12@CheckTrade
$LN3@CheckTrade:

; 134  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00038	46		 inc	 esi
  00039	83 c1 18	 add	 ecx, 24			; 00000018H
  0003c	3b f0		 cmp	 esi, eax
  0003e	72 e6		 jb	 SHORT $LL4@CheckTrade
$LN2@CheckTrade:
  00040	5f		 pop	 edi

; 141  : 		}
; 142  : 	}
; 143  : 
; 144  : 	return false;

  00041	32 c0		 xor	 al, al
  00043	5e		 pop	 esi

; 145  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN12@CheckTrade:
  00048	5f		 pop	 edi

; 139  : 		{
; 140  : 			return true;

  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 145  : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?CheckTrade@CItemMove@@QAE_NH@Z ENDP			; CItemMove::CheckTrade
_TEXT	ENDS
PUBLIC	?CheckVault@CItemMove@@QAE_NH@Z			; CItemMove::CheckVault
; Function compile flags: /Ogtp
;	COMDAT ?CheckVault@CItemMove@@QAE_NH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?CheckVault@CItemMove@@QAE_NH@Z PROC			; CItemMove::CheckVault, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 149  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00005	8b 39		 mov	 edi, DWORD PTR [ecx]
  00007	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000a	2b cf		 sub	 ecx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 e9		 imul	 ecx
  00013	c1 fa 02	 sar	 edx, 2
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	33 f6		 xor	 esi, esi
  0001d	03 c2		 add	 eax, edx
  0001f	74 1f		 je	 SHORT $LN2@CheckVault
  00021	8b 55 08	 mov	 edx, DWORD PTR _ItemType$[ebp]
  00024	8b cf		 mov	 ecx, edi
$LL4@CheckVault:

; 150  : 	{
; 151  : 		ITEM_MOVE_DATA * lpData = &this->m_Data[i];
; 152  : 
; 153  : 		if(ItemType == ITEMGET(lpData->Type,lpData->Index) && lpData->AllowVault == 0)

  00026	8b 39		 mov	 edi, DWORD PTR [ecx]
  00028	c1 e7 09	 shl	 edi, 9
  0002b	03 79 04	 add	 edi, DWORD PTR [ecx+4]
  0002e	3b d7		 cmp	 edx, edi
  00030	75 06		 jne	 SHORT $LN3@CheckVault
  00032	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00036	74 10		 je	 SHORT $LN12@CheckVault
$LN3@CheckVault:

; 149  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00038	46		 inc	 esi
  00039	83 c1 18	 add	 ecx, 24			; 00000018H
  0003c	3b f0		 cmp	 esi, eax
  0003e	72 e6		 jb	 SHORT $LL4@CheckVault
$LN2@CheckVault:
  00040	5f		 pop	 edi

; 156  : 		}
; 157  : 	}
; 158  : 
; 159  : 	return false;

  00041	32 c0		 xor	 al, al
  00043	5e		 pop	 esi

; 160  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN12@CheckVault:
  00048	5f		 pop	 edi

; 154  : 		{
; 155  : 			return true;

  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 160  : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?CheckVault@CItemMove@@QAE_NH@Z ENDP			; CItemMove::CheckVault
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@V?$allocator@UITEM_MOVE_DATA@@@1@@Z ; std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@V?$allocator@UITEM_MOVE_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@V?$allocator@UITEM_MOVE_DATA@@@1@@Z PROC ; std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@V?$allocator@UITEM_MOVE_DATA@@@1@@Z ENDP ; std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEII@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]
  00008	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000d	f7 ea		 imul	 edx
  0000f	c1 fa 02	 sar	 edx, 2
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00019	8b c8		 mov	 ecx, eax
  0001b	d1 e9		 shr	 ecx, 1
  0001d	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00022	2b d1		 sub	 edx, ecx
  00024	3b d0		 cmp	 edx, eax
  00026	73 04		 jae	 SHORT $LN4@Grow_to
  00028	33 c0		 xor	 eax, eax
  0002a	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0002c	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00035	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Grow_to@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@AAU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@AAU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@AAU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@Cons_val:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@AAU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@IPAU1@@Z ; std::_Allocate<ITEM_MOVE_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T204033 = -12						; size = 12
$T204038 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@IPAU1@@Z PROC ; std::_Allocate<ITEM_MOVE_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 46		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN1@Allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002b	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T204038[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T204033[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T204038[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T204033[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T204033[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UITEM_MOVE_DATA@@@std@@YAPAUITEM_MOVE_DATA@@IPAU1@@Z ENDP ; std::_Allocate<ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@ABU3@@Z ; std::allocator<ITEM_MOVE_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@ABU3@@Z PROC ; std::allocator<ITEM_MOVE_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN5@construct@2:

; 198  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@ABU3@@Z ENDP ; std::allocator<ITEM_MOVE_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 2e		 je	 SHORT $LN1@Move
  00010	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0001e	89 70 08	 mov	 DWORD PTR [eax+8], esi
  00021	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00024	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  00027	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  0002a	89 70 10	 mov	 DWORD PTR [eax+16], esi
  0002d	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00030	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00033	83 c1 18	 add	 ecx, 24			; 00000018H
  00036	83 c0 18	 add	 eax, 24			; 00000018H
  00039	3b ca		 cmp	 ecx, edx
  0003b	75 d4		 jne	 SHORT $LL3@Move
  0003d	5e		 pop	 esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@@Z ; std::allocator<ITEM_MOVE_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@@Z PROC ; std::allocator<ITEM_MOVE_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@@Z ENDP ; std::allocator<ITEM_MOVE_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@$$QAU3@@Z ; std::allocator<ITEM_MOVE_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@$$QAU3@@Z PROC ; std::allocator<ITEM_MOVE_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN3@construct@3:

; 203  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?construct@?$allocator@UITEM_MOVE_DATA@@@std@@QAEXPAUITEM_MOVE_DATA@@$$QAU3@@Z ENDP ; std::allocator<ITEM_MOVE_DATA>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Vector_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Vector_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QAE@PAUITEM_MOVE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::_Vector_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEPAUITEM_MOVE_DATA@@I@Z ; std::allocator<ITEM_MOVE_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEPAUITEM_MOVE_DATA@@I@Z
_TEXT	SEGMENT
$T204141 = -12						; size = 12
$T204139 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEPAUITEM_MOVE_DATA@@I@Z PROC ; std::allocator<ITEM_MOVE_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 46		 je	 SHORT $LN1@allocate
  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN3@allocate
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T204139[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T204141[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T204139[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T204141[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T204141[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEPAUITEM_MOVE_DATA@@I@Z ENDP ; std::allocator<ITEM_MOVE_DATA>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@ABU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@ABU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@ABU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN9@Cons_val@2:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@ABU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00@Z ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$204202 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00@Z PROC ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$204202[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00@Z ENDP ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@@Z ; std::_Dest_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@@Z PROC ; std::_Dest_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@U3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@U3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@U3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00026	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00029	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@Cons_val@3:

; 281  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@U3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ITEM_MOVE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ITEM_MOVE_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ITEM_MOVE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@U1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@U1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@U1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@U3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA>
  0001e	83 c6 18	 add	 esi, 24			; 00000018H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 18	 add	 edi, 24			; 00000018H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@U1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<ITEM_MOVE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ITEM_MOVE_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAXPAUITEM_MOVE_DATA@@0AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ITEM_MOVE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z ; std::_Uninitialized_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$204318 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z PROC ; std::_Uninitialized_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$204318[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@U1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXPAUITEM_MOVE_DATA@@0@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXPAUITEM_MOVE_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXPAUITEM_MOVE_DATA@@0@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXPAUITEM_MOVE_DATA@@0@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUITEM_MOVE_DATA@@@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEPAUITEM_MOVE_DATA@@PAU2@00@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Umove<ITEM_MOVE_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUITEM_MOVE_DATA@@@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEPAUITEM_MOVE_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$204340 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUITEM_MOVE_DATA@@@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEPAUITEM_MOVE_DATA@@PAU2@00@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Umove<ITEM_MOVE_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$204340[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@U1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUITEM_MOVE_DATA@@@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEPAUITEM_MOVE_DATA@@PAU2@00@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Umove<ITEM_MOVE_DATA *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@0@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$204420 = 12					; size = 1
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00006	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	89 07		 mov	 DWORD PTR [edi], eax
  00012	3b c2		 cmp	 eax, edx
  00014	74 17		 je	 SHORT $LN30@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00019	53		 push	 ebx
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR __Cat$204420[ebp]
  0001d	53		 push	 ebx
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00029	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002c	5b		 pop	 ebx
$LN30@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 1214 : 		}

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXXZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$203089 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$204489 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00036	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004c	f7 e9		 imul	 ecx
  0004e	c1 fa 02	 sar	 edx, 2
  00051	8b c2		 mov	 eax, edx
  00053	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00056	03 c2		 add	 eax, edx
  00058	3b c3		 cmp	 eax, ebx
  0005a	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005c	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005f	53		 push	 ebx
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@UITEM_MOVE_DATA@@@std@@QAEPAUITEM_MOVE_DATA@@I@Z ; std::allocator<ITEM_MOVE_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00067	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$204489[ebp]
  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006d	8b 16		 mov	 edx, DWORD PTR [esi]
  0006f	53		 push	 ebx
  00070	6a 00		 push	 0
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	89 45 ec	 mov	 DWORD PTR __Ptr$203089[ebp], eax
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00080	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUITEM_MOVE_DATA@@PAU1@V?$allocator@UITEM_MOVE_DATA@@@std@@U1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00AAV?$allocator@UITEM_MOVE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *,std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00085	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00087	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008a	2b cb		 sub	 ecx, ebx
  0008c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00091	f7 e9		 imul	 ecx
  00093	c1 fa 02	 sar	 edx, 2
  00096	8b fa		 mov	 edi, edx
  00098	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	03 fa		 add	 edi, edx

; 761  : 			if (this->_Myfirst != 0)

  000a0	85 db		 test	 ebx, ebx
  000a2	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000ad	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000b0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000b3	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$203089[ebp]
  000b6	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000b9	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000bc	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000bf	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  000c2	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000c5	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000db	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$203089[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000e7	6a 00		 push	 0
  000e9	6a 00		 push	 0
  000eb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000f0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::reserve
PUBLIC	??1?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::~vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::~vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::~vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXXZ ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Cat$204712 = -4					; size = 1
?clear@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1218 : 		erase(begin(), end());

  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	3b c8		 cmp	 ecx, eax
  0000e	74 12		 je	 SHORT $LN19@clear
  00010	8b 55 fc	 mov	 edx, DWORD PTR __Cat$204712[ebp]
  00013	52		 push	 edx
  00014	51		 push	 ecx
  00015	50		 push	 eax
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN19@clear:
  00022	5e		 pop	 esi

; 1219 : 		}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?clear@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 39		 mov	 edi, DWORD PTR [ecx]
  0000a	2b d7		 sub	 edx, edi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 ea		 imul	 edx

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	c1 fa 02	 sar	 edx, 2
  00019	8b f2		 mov	 esi, edx
  0001b	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001e	03 f2		 add	 esi, edx
  00020	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00025	2b d0		 sub	 edx, eax
  00027	3b d6		 cmp	 edx, esi
  00029	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00030	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	03 f0		 add	 esi, eax
  0003a	2b d7		 sub	 edx, edi
  0003c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00041	f7 ea		 imul	 edx
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	3b f0		 cmp	 esi, eax
  0004f	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00051	8b d0		 mov	 edx, eax
  00053	d1 ea		 shr	 edx, 1
  00055	bf aa aa aa 0a	 mov	 edi, 178956970		; 0aaaaaaaH
  0005a	2b fa		 sub	 edi, edx
  0005c	3b f8		 cmp	 edi, eax
  0005e	73 04		 jae	 SHORT $LN23@Reserve
  00060	33 c0		 xor	 eax, eax
  00062	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00064	03 c2		 add	 eax, edx
$LN24@Reserve:
  00066	3b c6		 cmp	 eax, esi
  00068	73 02		 jae	 SHORT $LN20@Reserve
  0006a	8b c6		 mov	 eax, esi
$LN20@Reserve:
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::reserve
$LN1@Reserve:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi

; 1298 : 		}

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CItemMove@@QAE@XZ				; CItemMove::CItemMove
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\itemmove.cpp
;	COMDAT ??0CItemMove@@QAE@XZ
_TEXT	SEGMENT
??0CItemMove@@QAE@XZ PROC				; CItemMove::CItemMove, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 13   : 
; 14   : }

  0000c	c3		 ret	 0
??0CItemMove@@QAE@XZ ENDP				; CItemMove::CItemMove
_TEXT	ENDS
PUBLIC	??1CItemMove@@QAE@XZ				; CItemMove::~CItemMove
; Function compile flags: /Ogtp
;	COMDAT ??1CItemMove@@QAE@XZ
_TEXT	SEGMENT
??1CItemMove@@QAE@XZ PROC				; CItemMove::~CItemMove, COMDAT
; _this$ = ecx

; 17   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 18   : 
; 19   : }

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN11@CItemMove
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN11@CItemMove:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi
  00027	c3		 ret	 0
??1CItemMove@@QAE@XZ ENDP				; CItemMove::~CItemMove
_TEXT	ENDS
PUBLIC	?Init@CItemMove@@QAEXXZ				; CItemMove::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CItemMove@@QAEXXZ
_TEXT	SEGMENT
__Cat$205065 = -4					; size = 1
?Init@CItemMove@@QAEXXZ PROC				; CItemMove::Init, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 23   : 	this->m_Data.clear();

  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	3b c8		 cmp	 ecx, eax
  0000e	74 12		 je	 SHORT $LN21@Init
  00010	8b 55 fc	 mov	 edx, DWORD PTR __Cat$205065[ebp]
  00013	52		 push	 edx
  00014	51		 push	 ecx
  00015	50		 push	 eax
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Move@PAUITEM_MOVE_DATA@@PAU1@@std@@YAPAUITEM_MOVE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ITEM_MOVE_DATA *,ITEM_MOVE_DATA *>
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN21@Init:
  00022	5e		 pop	 esi

; 24   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?Init@CItemMove@@QAEXXZ ENDP				; CItemMove::Init
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXABUITEM_MOVE_DATA@@@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXABUITEM_MOVE_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXABUITEM_MOVE_DATA@@@Z PROC ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4a		 jae	 SHORT $LN4@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 44		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 02	 sar	 edx, 2
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0003d	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	52		 push	 edx
  00044	50		 push	 eax
  00045	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@AAU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00051	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0005b	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005e	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00060	6a 01		 push	 1
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00069	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0006c	57		 push	 edi
  0006d	52		 push	 edx
  0006e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@ABU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0007a	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?push_back@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@QAEXABUITEM_MOVE_DATA@@@Z ENDP ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	_FileName$GSCopy$
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CItemMove@@QAEXPAD@Z			; CItemMove::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\itemmove.cpp
CONST	ENDS
;	COMDAT ?Read@CItemMove@@QAEXPAD@Z
_TEXT	SEGMENT
_FileName$GSCopy$ = -32					; size = 4
_lpData$202806 = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_FileName$ = 8						; size = 4
?Read@CItemMove@@QAEXPAD@Z PROC				; CItemMove::Read, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _FileName$[ebp]
  00014	57		 push	 edi

; 34   : 	SMDFile = fopen(FileName, "r");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001a	56		 push	 esi
  0001b	8b f9		 mov	 edi, ecx

; 91   : 
; 92   : 				this->m_Data.push_back(lpData);

  0001d	89 75 e0	 mov	 DWORD PTR _FileName$GSCopy$[ebp], esi
  00020	e8 00 00 00 00	 call	 _fopen
  00025	83 c4 08	 add	 esp, 8
  00028	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  0002d	85 c0		 test	 eax, eax
  0002f	75 2c		 jne	 SHORT $LN5@Read

; 35   : 
; 36   : 	if(SMDFile == NULL)
; 37   : 	{
; 38   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), FileName);

  00031	56		 push	 esi
  00032	68 c6 01 00 00	 push	 454			; 000001c6H
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00048	83 c4 08	 add	 esp, 8
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 100  : }

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	33 cd		 xor	 ecx, ebp
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN5@Read:

; 39   : 		return;
; 40   : 	}
; 41   : 
; 42   : 	SMDToken Token;
; 43   : 
; 44   : 	int iType = -1;
; 45   : 
; 46   : 	while(true)
; 47   : 	{
; 48   : 		Token = GetToken();

  0005d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 49   : 
; 50   :         if(Token == END)

  00062	83 f8 02	 cmp	 eax, 2
  00065	0f 84 33 01 00
	00		 je	 $LN28@Read
  0006b	53		 push	 ebx
  0006c	8d 64 24 00	 npad	 4
$LL4@Read:

; 51   : 		{
; 52   :             break;
; 53   : 		}
; 54   : 
; 55   : 		//iType = (int)TokenNumber;
; 56   : 
; 57   : 		//if(iType != 0)
; 58   : 		//{
; 59   : 		//	break;
; 60   : 		//}
; 61   : 
; 62   : 		//while(true)
; 63   : 		{
; 64   : 			//if(iType == 0)
; 65   : 			{
; 66   : 				//Token = GetToken();
; 67   : 
; 68   : 				if(!strcmp("end", TokenString))

  00070	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00075	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL31@Read:
  00080	8a 10		 mov	 dl, BYTE PTR [eax]
  00082	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00084	75 1a		 jne	 SHORT $LN32@Read
  00086	84 d2		 test	 dl, dl
  00088	74 12		 je	 SHORT $LN33@Read
  0008a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0008d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00090	75 0e		 jne	 SHORT $LN32@Read
  00092	83 c0 02	 add	 eax, 2
  00095	83 c1 02	 add	 ecx, 2
  00098	84 d2		 test	 dl, dl
  0009a	75 e4		 jne	 SHORT $LL31@Read
$LN33@Read:
  0009c	33 c0		 xor	 eax, eax
  0009e	eb 05		 jmp	 SHORT $LN34@Read
$LN32@Read:
  000a0	1b c0		 sbb	 eax, eax
  000a2	83 d8 ff	 sbb	 eax, -1
$LN34@Read:
  000a5	85 c0		 test	 eax, eax
  000a7	0f 84 f0 00 00
	00		 je	 $LN36@Read

; 69   : 				{
; 70   : 					break;
; 71   : 				}
; 72   : 
; 73   : 				ITEM_MOVE_DATA lpData;
; 74   : 
; 75   : 				lpData.Type = TokenNumber;

  000ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b3	e8 00 00 00 00	 call	 __ftol2_sse
  000b8	89 45 e4	 mov	 DWORD PTR _lpData$202806[ebp], eax

; 76   : 
; 77   : 				Token = GetToken();

  000bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 78   : 				lpData.Index = TokenNumber;

  000c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c6	e8 00 00 00 00	 call	 __ftol2_sse
  000cb	89 45 e8	 mov	 DWORD PTR _lpData$202806[ebp+4], eax

; 79   : 
; 80   : 				Token = GetToken();

  000ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 81   : 				lpData.AllowDrop = TokenNumber;

  000d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d9	e8 00 00 00 00	 call	 __ftol2_sse
  000de	89 45 ec	 mov	 DWORD PTR _lpData$202806[ebp+8], eax

; 82   : 
; 83   : 				Token = GetToken();

  000e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 84   : 				lpData.AllowSell = TokenNumber;

  000e6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ec	e8 00 00 00 00	 call	 __ftol2_sse
  000f1	89 45 f0	 mov	 DWORD PTR _lpData$202806[ebp+12], eax

; 85   : 
; 86   : 				Token = GetToken();

  000f4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 87   : 				lpData.AllowTrade = TokenNumber;

  000f9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ff	e8 00 00 00 00	 call	 __ftol2_sse
  00104	89 45 f4	 mov	 DWORD PTR _lpData$202806[ebp+16], eax

; 88   : 
; 89   : 				Token = GetToken();

  00107	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 				lpData.AllowVault = TokenNumber;

  0010c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00112	e8 00 00 00 00	 call	 __ftol2_sse

; 91   : 
; 92   : 				this->m_Data.push_back(lpData);

  00117	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0011a	89 45 f8	 mov	 DWORD PTR _lpData$202806[ebp+20], eax
  0011d	8d 45 e4	 lea	 eax, DWORD PTR _lpData$202806[ebp]
  00120	3b c3		 cmp	 eax, ebx
  00122	73 45		 jae	 SHORT $LN11@Read
  00124	8b 07		 mov	 eax, DWORD PTR [edi]
  00126	8d 4d e4	 lea	 ecx, DWORD PTR _lpData$202806[ebp]
  00129	3b c1		 cmp	 eax, ecx
  0012b	77 3c		 ja	 SHORT $LN11@Read
  0012d	2b c8		 sub	 ecx, eax
  0012f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00134	f7 e9		 imul	 ecx
  00136	c1 fa 02	 sar	 edx, 2
  00139	8b f2		 mov	 esi, edx
  0013b	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0013e	03 f2		 add	 esi, edx
  00140	3b 5f 08	 cmp	 ebx, DWORD PTR [edi+8]
  00143	75 09		 jne	 SHORT $LN10@Read
  00145	6a 01		 push	 1
  00147	8b cf		 mov	 ecx, edi
  00149	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Reserve
$LN10@Read:
  0014e	8b 07		 mov	 eax, DWORD PTR [edi]
  00150	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  00153	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00156	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00159	51		 push	 ecx
  0015a	52		 push	 edx
  0015b	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@AAU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA &>
  00164	8b 75 e0	 mov	 esi, DWORD PTR _FileName$GSCopy$[ebp]
  00167	eb 1f		 jmp	 SHORT $LN37@Read
$LN11@Read:
  00169	3b 5f 08	 cmp	 ebx, DWORD PTR [edi+8]
  0016c	75 09		 jne	 SHORT $LN8@Read
  0016e	6a 01		 push	 1
  00170	8b cf		 mov	 ecx, edi
  00172	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UITEM_MOVE_DATA@@V?$allocator@UITEM_MOVE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<ITEM_MOVE_DATA,std::allocator<ITEM_MOVE_DATA> >::_Reserve
$LN8@Read:
  00177	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0017a	8d 4d e4	 lea	 ecx, DWORD PTR _lpData$202806[ebp]
  0017d	51		 push	 ecx
  0017e	52		 push	 edx
  0017f	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UITEM_MOVE_DATA@@@std@@UITEM_MOVE_DATA@@ABU3@@std@@YAXAAV?$allocator@UITEM_MOVE_DATA@@@0@PAUITEM_MOVE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<ITEM_MOVE_DATA>,ITEM_MOVE_DATA,ITEM_MOVE_DATA const &>
$LN37@Read:
  00188	83 47 04 18	 add	 DWORD PTR [edi+4], 24	; 00000018H
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00194	83 f8 02	 cmp	 eax, 2
  00197	0f 85 d3 fe ff
	ff		 jne	 $LL4@Read
$LN36@Read:
  0019d	5b		 pop	 ebx
$LN28@Read:

; 93   : 			}
; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	fclose(SMDFile);

  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001a4	51		 push	 ecx
  001a5	e8 00 00 00 00	 call	 _fclose

; 98   : 
; 99   : 	LogAdd("%s file load!", FileName);

  001aa	56		 push	 esi
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 100  : }

  001b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bc	5f		 pop	 edi
  001bd	33 cd		 xor	 ecx, ebp
  001bf	5e		 pop	 esi
  001c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c2 04 00	 ret	 4
?Read@CItemMove@@QAEXPAD@Z ENDP				; CItemMove::Read
_TEXT	ENDS
PUBLIC	??_C@_0BM@JJKOAPOJ@?4?4?2Data?2ZtData?2ItemMove?4txt?$AA@ ; `string'
PUBLIC	?Load@CItemMove@@QAEXXZ				; CItemMove::Load
;	COMDAT ??_C@_0BM@JJKOAPOJ@?4?4?2Data?2ZtData?2ItemMove?4txt?$AA@
CONST	SEGMENT
??_C@_0BM@JJKOAPOJ@?4?4?2Data?2ZtData?2ItemMove?4txt?$AA@ DB '..\Data\ZtD'
	DB	'ata\ItemMove.txt', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CItemMove@@QAEXXZ
_TEXT	SEGMENT
?Load@CItemMove@@QAEXXZ PROC				; CItemMove::Load, COMDAT
; _this$ = ecx

; 27   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 28   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@CItemMove@@QAEXXZ	; CItemMove::Init

; 29   : 	this->Read(ITEM_MOVE_PATH);

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JJKOAPOJ@?4?4?2Data?2ZtData?2ItemMove?4txt?$AA@
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?Read@CItemMove@@QAEXPAD@Z ; CItemMove::Read
  00014	5e		 pop	 esi

; 30   : }

  00015	c3		 ret	 0
?Load@CItemMove@@QAEXXZ ENDP				; CItemMove::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ItemMove@@YAXXZ
text$yc	SEGMENT
??__Eg_ItemMove@@YAXXZ PROC				; `dynamic initializer for 'g_ItemMove'', COMDAT

; 9    : CItemMove g_ItemMove;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMove@@3VCItemMove@@A ; g_ItemMove
  00005	e8 00 00 00 00	 call	 ??0CItemMove@@QAE@XZ	; CItemMove::CItemMove
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ItemMove@@YAXXZ ; `dynamic atexit destructor for 'g_ItemMove''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ItemMove@@YAXXZ ENDP				; `dynamic initializer for 'g_ItemMove''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ItemMove@@YAXXZ
text$yd	SEGMENT
??__Fg_ItemMove@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ItemMove'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemMove@@3VCItemMove@@A ; g_ItemMove
  00005	e9 00 00 00 00	 jmp	 ??1CItemMove@@QAE@XZ	; CItemMove::~CItemMove
??__Fg_ItemMove@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ItemMove''
text$yd	ENDS
PUBLIC	?g_ItemMove@@3VCItemMove@@A			; g_ItemMove
_BSS	SEGMENT
?g_ItemMove@@3VCItemMove@@A DB 010H DUP (?)		; g_ItemMove
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ItemMove$initializer$ DD FLAT:??__Eg_ItemMove@@YAXXZ
CRT$XCU	ENDS
END
