; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\KanturuMonsterMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_7CKanturuObjInfo@@6B@			; CKanturuObjInfo::`vftable'
PUBLIC	??1CKanturuObjInfo@@UAE@XZ			; CKanturuObjInfo::~CKanturuObjInfo
PUBLIC	??_R4CKanturuObjInfo@@6B@			; CKanturuObjInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCKanturuObjInfo@@@8			; CKanturuObjInfo `RTTI Type Descriptor'
PUBLIC	??_R3CKanturuObjInfo@@8				; CKanturuObjInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CKanturuObjInfo@@8				; CKanturuObjInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CKanturuObjInfo@@8		; CKanturuObjInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECKanturuObjInfo@@UAEPAXI@Z:PROC		; CKanturuObjInfo::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CKanturuObjInfo@@8
; File e:\work\tranet_version\gs\gameserver\kanturuobjinfo.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CKanturuObjInfo@@8 DD FLAT:??_R0?AVCKanturuObjInfo@@@8 ; CKanturuObjInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CKanturuObjInfo@@8
rdata$r	SEGMENT
??_R2CKanturuObjInfo@@8 DD FLAT:??_R1A@?0A@EA@CKanturuObjInfo@@8 ; CKanturuObjInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CKanturuObjInfo@@8
rdata$r	SEGMENT
??_R3CKanturuObjInfo@@8 DD 00H				; CKanturuObjInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKanturuObjInfo@@@8
_DATA	SEGMENT
??_R0?AVCKanturuObjInfo@@@8 DD FLAT:??_7type_info@@6B@	; CKanturuObjInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKanturuObjInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CKanturuObjInfo@@6B@
rdata$r	SEGMENT
??_R4CKanturuObjInfo@@6B@ DD 00H			; CKanturuObjInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKanturuObjInfo@@@8
	DD	FLAT:??_R3CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_7CKanturuObjInfo@@6B@
CONST	SEGMENT
??_7CKanturuObjInfo@@6B@ DD FLAT:??_R4CKanturuObjInfo@@6B@ ; CKanturuObjInfo::`vftable'
	DD	FLAT:??_ECKanturuObjInfo@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CKanturuObjInfo@@UAE@XZ
_TEXT	SEGMENT
??1CKanturuObjInfo@@UAE@XZ PROC				; CKanturuObjInfo::~CKanturuObjInfo, COMDAT
; _this$ = ecx

; 17   : 	virtual ~CKanturuObjInfo(){return;}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CKanturuObjInfo@@6B@
  00006	c3		 ret	 0
??1CKanturuObjInfo@@UAE@XZ ENDP				; CKanturuObjInfo::~CKanturuObjInfo
_TEXT	ENDS
PUBLIC	?Reset@CKanturuObjInfo@@QAEXXZ			; CKanturuObjInfo::Reset
; Function compile flags: /Ogtp
;	COMDAT ?Reset@CKanturuObjInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CKanturuObjInfo@@QAEXXZ PROC			; CKanturuObjInfo::Reset, COMDAT
; _this$ = ecx

; 20   : 	{

  00000	8b d1		 mov	 edx, ecx
  00002	57		 push	 edi

; 21   : 		for ( int iCount=0;iCount<MAX_KANTURU_OBJ_INDEX;iCount++)

  00003	8d 7a 08	 lea	 edi, DWORD PTR [edx+8]

; 22   : 		{
; 23   : 			this->m_iObjIndex[iCount]=-1;

  00006	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  0000b	83 c8 ff	 or	 eax, -1
  0000e	f3 ab		 rep stosd

; 24   : 		}
; 25   : 
; 26   : 		this->m_iObjCount=0;

  00010	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00017	5f		 pop	 edi

; 27   : 	}

  00018	c3		 ret	 0
?Reset@CKanturuObjInfo@@QAEXXZ ENDP			; CKanturuObjInfo::Reset
_TEXT	ENDS
PUBLIC	?AddObj@CKanturuObjInfo@@QAEHH@Z		; CKanturuObjInfo::AddObj
; Function compile flags: /Ogtp
;	COMDAT ?AddObj@CKanturuObjInfo@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddObj@CKanturuObjInfo@@QAEHH@Z PROC			; CKanturuObjInfo::AddObj, COMDAT
; _this$ = ecx

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 		if ( this->m_iObjCount >= MAX_KANTURU_OBJ_INDEX )

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	3d 20 03 00 00	 cmp	 eax, 800		; 00000320H
  0000b	7c 06		 jl	 SHORT $LN1@AddObj

; 32   : 		{
; 33   : 			return FALSE;

  0000d	33 c0		 xor	 eax, eax

; 38   : 
; 39   : 		return TRUE;
; 40   : 	}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN1@AddObj:

; 34   : 		}
; 35   : 
; 36   : 		this->m_iObjIndex[this->m_iObjCount] = iIndex;

  00013	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00016	89 54 81 08	 mov	 DWORD PTR [ecx+eax*4+8], edx

; 37   : 		this->m_iObjCount++;

  0001a	b8 01 00 00 00	 mov	 eax, 1
  0001f	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 38   : 
; 39   : 		return TRUE;
; 40   : 	}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?AddObj@CKanturuObjInfo@@QAEHH@Z ENDP			; CKanturuObjInfo::AddObj
_TEXT	ENDS
PUBLIC	?GetCount@CKanturuObjInfo@@QAEHXZ		; CKanturuObjInfo::GetCount
; Function compile flags: /Ogtp
;	COMDAT ?GetCount@CKanturuObjInfo@@QAEHXZ
_TEXT	SEGMENT
?GetCount@CKanturuObjInfo@@QAEHXZ PROC			; CKanturuObjInfo::GetCount, COMDAT
; _this$ = ecx

; 44   : 		return this->m_iObjCount;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 45   : 	}

  00003	c3		 ret	 0
?GetCount@CKanturuObjInfo@@QAEHXZ ENDP			; CKanturuObjInfo::GetCount
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCKanturuObjInfo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCKanturuObjInfo@@UAEPAXI@Z PROC			; CKanturuObjInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CKanturuObjInfo@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_GCKanturuObjInfo@@UAEPAXI@Z ENDP			; CKanturuObjInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CKanturuMonsterMng@@6B@			; CKanturuMonsterMng::`vftable'
PUBLIC	??1CKanturuMonsterMng@@UAE@XZ			; CKanturuMonsterMng::~CKanturuMonsterMng
PUBLIC	??_R4CKanturuMonsterMng@@6B@			; CKanturuMonsterMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCKanturuMonsterMng@@@8			; CKanturuMonsterMng `RTTI Type Descriptor'
PUBLIC	??_R3CKanturuMonsterMng@@8			; CKanturuMonsterMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CKanturuMonsterMng@@8			; CKanturuMonsterMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CKanturuMonsterMng@@8		; CKanturuMonsterMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECKanturuMonsterMng@@UAEPAXI@Z:PROC		; CKanturuMonsterMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CKanturuMonsterMng@@8
; File e:\work\tranet_version\gs\gameserver\kanturuobjinfo.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CKanturuMonsterMng@@8 DD FLAT:??_R0?AVCKanturuMonsterMng@@@8 ; CKanturuMonsterMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CKanturuMonsterMng@@8
rdata$r	SEGMENT
??_R2CKanturuMonsterMng@@8 DD FLAT:??_R1A@?0A@EA@CKanturuMonsterMng@@8 ; CKanturuMonsterMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CKanturuMonsterMng@@8
rdata$r	SEGMENT
??_R3CKanturuMonsterMng@@8 DD 00H			; CKanturuMonsterMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKanturuMonsterMng@@@8
_DATA	SEGMENT
??_R0?AVCKanturuMonsterMng@@@8 DD FLAT:??_7type_info@@6B@ ; CKanturuMonsterMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKanturuMonsterMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CKanturuMonsterMng@@6B@
rdata$r	SEGMENT
??_R4CKanturuMonsterMng@@6B@ DD 00H			; CKanturuMonsterMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKanturuMonsterMng@@@8
	DD	FLAT:??_R3CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_7CKanturuMonsterMng@@6B@
CONST	SEGMENT
??_7CKanturuMonsterMng@@6B@ DD FLAT:??_R4CKanturuMonsterMng@@6B@ ; CKanturuMonsterMng::`vftable'
	DD	FLAT:??_ECKanturuMonsterMng@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\kanturumonstermng.cpp
CONST	ENDS
;	COMDAT ??1CKanturuMonsterMng@@UAE@XZ
_TEXT	SEGMENT
??1CKanturuMonsterMng@@UAE@XZ PROC			; CKanturuMonsterMng::~CKanturuMonsterMng, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CKanturuMonsterMng@@6B@

; 26   : 	return;
; 27   : }

  00006	c7 81 e0 07 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2016], OFFSET ??_7CKanturuObjInfo@@6B@
  00010	c3		 ret	 0
??1CKanturuMonsterMng@@UAE@XZ ENDP			; CKanturuMonsterMng::~CKanturuMonsterMng
_TEXT	ENDS
PUBLIC	?ResetLoadData@CKanturuMonsterMng@@QAEXXZ	; CKanturuMonsterMng::ResetLoadData
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ
_TEXT	SEGMENT
?ResetLoadData@CKanturuMonsterMng@@QAEXXZ PROC		; CKanturuMonsterMng::ResetLoadData, COMDAT
; _this$ = ecx

; 31   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 32   : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)
; 33   : 	{
; 34   : 		memset(&this->m_SetBaseInfo[iCount], -1, sizeof(this->m_SetBaseInfo[iCount]));

  00003	68 d0 07 00 00	 push	 2000			; 000007d0H
  00008	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000b	68 ff 00 00 00	 push	 255			; 000000ffH
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   : 	}
; 36   : 
; 37   : 	this->m_iMaxMonsterCount = 0;

  00019	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00020	5e		 pop	 esi

; 38   : }

  00021	c3		 ret	 0
?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ENDP		; CKanturuMonsterMng::ResetLoadData
_TEXT	ENDS
PUBLIC	?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetRegenMonsterObjData
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Ogtp
;	COMDAT ?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ
_TEXT	SEGMENT
?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ PROC ; CKanturuMonsterMng::ResetRegenMonsterObjData, COMDAT
; _this$ = ecx

; 43   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 44   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  00004	33 ff		 xor	 edi, edi
  00006	39 be e4 07 00
	00		 cmp	 DWORD PTR [esi+2020], edi
  0000c	7e 24		 jle	 SHORT $LN19@ResetRegen
  0000e	53		 push	 ebx
  0000f	8d 9e e8 07 00
	00		 lea	 ebx, DWORD PTR [esi+2024]
$LL5@ResetRegen:

; 45   : 	{
; 46   : 		if ( this->m_KanturuMonster.m_iObjIndex[iCount] != -1 )

  00015	8b 03		 mov	 eax, DWORD PTR [ebx]
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	74 09		 je	 SHORT $LN4@ResetRegen

; 47   : 		{
; 48   : 			gObjDel(this->m_KanturuMonster.m_iObjIndex[iCount]);

  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00022	83 c4 04	 add	 esp, 4
$LN4@ResetRegen:

; 44   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  00025	47		 inc	 edi
  00026	83 c3 04	 add	 ebx, 4
  00029	3b be e4 07 00
	00		 cmp	 edi, DWORD PTR [esi+2020]
  0002f	7c e4		 jl	 SHORT $LL5@ResetRegen
  00031	5b		 pop	 ebx
$LN19@ResetRegen:

; 49   : 		}
; 50   : 	}
; 51   : 
; 52   : 	if ( this->m_iMayaObjIndex != -1 )

  00032	8b 86 d8 07 00
	00		 mov	 eax, DWORD PTR [esi+2008]
  00038	83 f8 ff	 cmp	 eax, -1
  0003b	74 09		 je	 SHORT $LN1@ResetRegen

; 53   : 	{
; 54   : 		gObjDel(this->m_iMayaObjIndex);

  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00043	83 c4 04	 add	 esp, 4
$LN1@ResetRegen:

; 55   : 	}
; 56   : 
; 57   : 	this->m_KanturuMonster.Reset();

  00046	8d be e8 07 00
	00		 lea	 edi, DWORD PTR [esi+2024]
  0004c	83 c8 ff	 or	 eax, -1
  0004f	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  00054	f3 ab		 rep stosd
  00056	33 c0		 xor	 eax, eax
  00058	89 86 e4 07 00
	00		 mov	 DWORD PTR [esi+2020], eax
  0005e	5f		 pop	 edi

; 58   : 	this->m_iMaxRegenMonsterCount = 0;

  0005f	89 86 68 14 00
	00		 mov	 DWORD PTR [esi+5224], eax

; 59   : 	this->m_iAliveMonsterCount = 0;

  00065	89 86 6c 14 00
	00		 mov	 DWORD PTR [esi+5228], eax

; 60   : 	this->m_iMayaObjIndex = -1;

  0006b	c7 86 d8 07 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+2008], -1
  00075	5e		 pop	 esi

; 61   : }

  00076	c3		 ret	 0
?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ENDP ; CKanturuMonsterMng::ResetRegenMonsterObjData
_TEXT	ENDS
PUBLIC	?MonsterDie@CKanturuMonsterMng@@QAEXH@Z		; CKanturuMonsterMng::MonsterDie
; Function compile flags: /Ogtp
;	COMDAT ?MonsterDie@CKanturuMonsterMng@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?MonsterDie@CKanturuMonsterMng@@QAEXH@Z PROC		; CKanturuMonsterMng::MonsterDie, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 	LPOBJ lpObj = &gObj[iIndex];
; 68   : 
; 69   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  00003	33 c0		 xor	 eax, eax
  00005	39 81 e4 07 00
	00		 cmp	 DWORD PTR [ecx+2020], eax
  0000b	7e 26		 jle	 SHORT $LN2@MonsterDie
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00011	8d 91 e8 07 00
	00		 lea	 edx, DWORD PTR [ecx+2024]
$LL4@MonsterDie:

; 70   : 	{
; 71   : 		if ( this->m_KanturuMonster.m_iObjIndex[iCount] == iIndex )

  00017	39 32		 cmp	 DWORD PTR [edx], esi
  00019	74 11		 je	 SHORT $LN10@MonsterDie

; 67   : 	LPOBJ lpObj = &gObj[iIndex];
; 68   : 
; 69   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  0001b	40		 inc	 eax
  0001c	83 c2 04	 add	 edx, 4
  0001f	3b 81 e4 07 00
	00		 cmp	 eax, DWORD PTR [ecx+2020]
  00025	7c f0		 jl	 SHORT $LL4@MonsterDie
  00027	5e		 pop	 esi

; 74   : 			return;
; 75   : 		}
; 76   : 	}
; 77   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN10@MonsterDie:

; 72   : 		{
; 73   : 			this->m_iAliveMonsterCount--;

  0002c	ff 89 6c 14 00
	00		 dec	 DWORD PTR [ecx+5228]
  00032	5e		 pop	 esi
$LN2@MonsterDie:

; 74   : 			return;
; 75   : 		}
; 76   : 	}
; 77   : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?MonsterDie@CKanturuMonsterMng@@QAEXH@Z ENDP		; CKanturuMonsterMng::MonsterDie
_TEXT	ENDS
PUBLIC	?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ; CKanturuMonsterMng::SetMonsterSetBaseInfo
; Function compile flags: /Ogtp
;	COMDAT ?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_btGroup$ = 12						; size = 1
_wType$ = 16						; size = 2
_btMapNumber$ = 20					; size = 1
_btDistance$ = 24					; size = 1
_btX$ = 28						; size = 1
_btY$ = 32						; size = 1
_btDir$ = 36						; size = 1
?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z PROC ; CKanturuMonsterMng::SetMonsterSetBaseInfo, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	this->m_SetBaseInfo[iIndex].btGroup = btGroup;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]

; 208  : 	this->m_SetBaseInfo[iIndex].wType = wType;

  00006	66 8b 55 10	 mov	 dx, WORD PTR _wType$[ebp]
  0000a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00010	8a 4d 0c	 mov	 cl, BYTE PTR _btGroup$[ebp]
  00013	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 209  : 	this->m_SetBaseInfo[iIndex].btMapNumber = btMapNumber;

  00016	8a 4d 14	 mov	 cl, BYTE PTR _btMapNumber$[ebp]
  00019	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 210  : 	this->m_SetBaseInfo[iIndex].btDistance = btDistance;

  0001d	8a 55 18	 mov	 dl, BYTE PTR _btDistance$[ebp]
  00020	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 211  : 	this->m_SetBaseInfo[iIndex].btX = btX;

  00023	8a 4d 1c	 mov	 cl, BYTE PTR _btX$[ebp]
  00026	88 50 0d	 mov	 BYTE PTR [eax+13], dl

; 212  : 	this->m_SetBaseInfo[iIndex].btY = btY;

  00029	8a 55 20	 mov	 dl, BYTE PTR _btY$[ebp]
  0002c	88 48 0e	 mov	 BYTE PTR [eax+14], cl

; 213  : 	this->m_SetBaseInfo[iIndex].btDir = btDir;

  0002f	8a 4d 24	 mov	 cl, BYTE PTR _btDir$[ebp]
  00032	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  00035	88 48 10	 mov	 BYTE PTR [eax+16], cl

; 214  : }

  00038	5d		 pop	 ebp
  00039	c2 20 00	 ret	 32			; 00000020H
?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ENDP ; CKanturuMonsterMng::SetMonsterSetBaseInfo
_TEXT	ENDS
PUBLIC	??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@	; `string'
PUBLIC	?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z	; CKanturuMonsterMng::GetPosition
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_rand:PROC
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
;	COMDAT ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@ DB 'ERROR : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@
CONST	SEGMENT
??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@ DB 'KanturuMonsterMng.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z
_TEXT	SEGMENT
tv238 = 8						; size = 4
_TableNum$ = 8						; size = 4
_iCount$ = 12						; size = 4
_MapNumber$ = 12					; size = 2
_x$ = 16						; size = 4
_y$ = 20						; size = 4
?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z PROC	; CKanturuMonsterMng::GetPosition, COMDAT
; _this$ = ecx

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 314  : 	if ( TableNum < 0 || TableNum > MAX_KANTURU_MONSTER-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _TableNum$[ebp]
  00006	3d c7 00 00 00	 cmp	 eax, 199		; 000000c7H
  0000b	0f 87 b3 00 00
	00		 ja	 $LN5@GetPositio

; 318  : 	}
; 319  : 
; 320  : 	int iOrx = this->m_SetBaseInfo[TableNum].btX;

  00011	53		 push	 ebx
  00012	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00015	8d 1c 41	 lea	 ebx, DWORD PTR [ecx+eax*2]

; 321  : 	int iOry = this->m_SetBaseInfo[TableNum].btY;
; 322  : 	BYTE btAttr = MapC[MapNumber].GetAttr(iOrx, iOry);

  00018	0f bf 4d 0c	 movsx	 ecx, WORD PTR _MapNumber$[ebp]
  0001c	56		 push	 esi
  0001d	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  00023	0f b6 73 0e	 movzx	 esi, BYTE PTR [ebx+14]
  00027	57		 push	 edi
  00028	0f b6 7b 0f	 movzx	 edi, BYTE PTR [ebx+15]
  0002c	57		 push	 edi
  0002d	8d 89 00 00 00
	00		 lea	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx]
  00033	56		 push	 esi
  00034	89 4d 08	 mov	 DWORD PTR tv238[ebp], ecx
  00037	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 323  : 
; 324  : 	if ( (btAttr&1)!=1 && (btAttr&4)!=4 && (btAttr&8)!=8 )

  0003c	a8 0d		 test	 al, 13			; 0000000dH
  0003e	75 18		 jne	 SHORT $LN4@GetPositio

; 325  : 	{
; 326  : 		x = iOrx;

  00040	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]

; 327  : 		y = iOry;

  00043	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  00046	66 89 31	 mov	 WORD PTR [ecx], si
  00049	66 89 3a	 mov	 WORD PTR [edx], di
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 328  : 
; 329  : 		return TRUE;

  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	5b		 pop	 ebx

; 353  : }

  00054	5d		 pop	 ebp
  00055	c2 10 00	 ret	 16			; 00000010H
$LN4@GetPositio:

; 330  : 	}
; 331  : 
; 332  : 	int iCount = 100;	// Number of Tries

  00058	c7 45 0c 64 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 100 ; 00000064H
  0005f	90		 npad	 1
$LL3@GetPositio:

; 335  : 	{
; 336  : 		iOrx = this->m_SetBaseInfo[TableNum].btX - 3;

  00060	0f b6 73 0e	 movzx	 esi, BYTE PTR [ebx+14]

; 337  : 		iOry = this->m_SetBaseInfo[TableNum].btY - 3;

  00064	0f b6 7b 0f	 movzx	 edi, BYTE PTR [ebx+15]
  00068	ff 4d 0c	 dec	 DWORD PTR _iCount$[ebp]
  0006b	83 ee 03	 sub	 esi, 3
  0006e	83 ef 03	 sub	 edi, 3

; 338  : 		iOrx += rand() % 7;

  00071	e8 00 00 00 00	 call	 _rand
  00076	99		 cdq
  00077	b9 07 00 00 00	 mov	 ecx, 7
  0007c	f7 f9		 idiv	 ecx
  0007e	03 f2		 add	 esi, edx

; 339  : 		iOry += rand() % 7;

  00080	e8 00 00 00 00	 call	 _rand
  00085	99		 cdq
  00086	b9 07 00 00 00	 mov	 ecx, 7
  0008b	f7 f9		 idiv	 ecx

; 340  : 
; 341  : 		btAttr = MapC[MapNumber].GetAttr(iOrx, iOry);

  0008d	8b 4d 08	 mov	 ecx, DWORD PTR tv238[ebp]
  00090	03 fa		 add	 edi, edx
  00092	57		 push	 edi
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 342  : 
; 343  : 		if ( (btAttr&1)!=1 && (btAttr&4)!=4 && (btAttr&8)!=8 )

  00099	a8 0d		 test	 al, 13			; 0000000dH
  0009b	74 0f		 je	 SHORT $LN10@GetPositio

; 333  : 
; 334  : 	while ( iCount-- != 0 )

  0009d	83 7d 0c 00	 cmp	 DWORD PTR _iCount$[ebp], 0
  000a1	75 bd		 jne	 SHORT $LL3@GetPositio

; 347  : 
; 348  : 			return TRUE;
; 349  : 		}
; 350  : 	}
; 351  : 
; 352  : 	return FALSE;

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	33 c0		 xor	 eax, eax
  000a7	5b		 pop	 ebx

; 353  : }

  000a8	5d		 pop	 ebp
  000a9	c2 10 00	 ret	 16			; 00000010H
$LN10@GetPositio:

; 344  : 		{
; 345  : 			x = iOrx;

  000ac	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]

; 346  : 			y = iOry;

  000af	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  000b2	66 89 32	 mov	 WORD PTR [edx], si
  000b5	66 89 38	 mov	 WORD PTR [eax], di
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	5b		 pop	 ebx

; 353  : }

  000c0	5d		 pop	 ebp
  000c1	c2 10 00	 ret	 16			; 00000010H
$LN5@GetPositio:

; 315  : 	{
; 316  : 		LogAdd("ERROR : %s %d", __FILE__, __LINE__);

  000c4	68 3c 01 00 00	 push	 316			; 0000013cH
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 317  : 		return FALSE;

  000dc	33 c0		 xor	 eax, eax

; 353  : }

  000de	5d		 pop	 ebp
  000df	c2 10 00	 ret	 16			; 00000010H
?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z ENDP	; CKanturuMonsterMng::GetPosition
_TEXT	ENDS
PUBLIC	?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ	; CKanturuMonsterMng::IsExistAliveMonster
; Function compile flags: /Ogtp
;	COMDAT ?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ
_TEXT	SEGMENT
?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ PROC	; CKanturuMonsterMng::IsExistAliveMonster, COMDAT
; _this$ = ecx

; 359  : 	if ( this->m_iAliveMonsterCount <=  0 )

  00000	33 c0		 xor	 eax, eax
  00002	39 81 6c 14 00
	00		 cmp	 DWORD PTR [ecx+5228], eax
  00008	0f 9f c0	 setg	 al

; 360  : 	{
; 361  : 		return FALSE;
; 362  : 	}
; 363  : 
; 364  : 	return TRUE;
; 365  : }

  0000b	c3		 ret	 0
?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ ENDP	; CKanturuMonsterMng::IsExistAliveMonster
_TEXT	ENDS
PUBLIC	??0CKanturuObjInfo@@QAE@XZ			; CKanturuObjInfo::CKanturuObjInfo
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\kanturuobjinfo.h
;	COMDAT ??0CKanturuObjInfo@@QAE@XZ
_TEXT	SEGMENT
??0CKanturuObjInfo@@QAE@XZ PROC				; CKanturuObjInfo::CKanturuObjInfo, COMDAT
; _this$ = ecx

; 12   : 	CKanturuObjInfo()

  00000	8b d1		 mov	 edx, ecx
  00002	57		 push	 edi

; 13   : 	{
; 14   : 		this->Reset();

  00003	83 c8 ff	 or	 eax, -1
  00006	8d 7a 08	 lea	 edi, DWORD PTR [edx+8]
  00009	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  0000e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CKanturuObjInfo@@6B@
  00014	f3 ab		 rep stosd
  00016	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 15   : 	}

  0001d	8b c2		 mov	 eax, edx
  0001f	5f		 pop	 edi
  00020	c3		 ret	 0
??0CKanturuObjInfo@@QAE@XZ ENDP				; CKanturuObjInfo::CKanturuObjInfo
_TEXT	ENDS
PUBLIC	??0CKanturuMonsterMng@@QAE@XZ			; CKanturuMonsterMng::CKanturuMonsterMng
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CKanturuMonsterMng@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CKanturuMonsterMng@@QAE@XZ$0
__ehfuncinfo$??0CKanturuMonsterMng@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CKanturuMonsterMng@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\kanturumonstermng.cpp
xdata$x	ENDS
;	COMDAT ??0CKanturuMonsterMng@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CKanturuMonsterMng@@QAE@XZ PROC			; CKanturuMonsterMng::CKanturuMonsterMng, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CKanturuMonsterMng@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CKanturuMonsterMng@@6B@
  00030	83 c8 ff	 or	 eax, -1
  00033	8d be e8 07 00
	00		 lea	 edi, DWORD PTR [esi+2024]
  00039	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  0003e	c7 86 e0 07 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2016], OFFSET ??_7CKanturuObjInfo@@6B@
  00048	f3 ab		 rep stosd
  0004a	33 c0		 xor	 eax, eax
  0004c	89 86 e4 07 00
	00		 mov	 DWORD PTR [esi+2020], eax

; 20   : 	this->ResetLoadData();

  00052	8b ce		 mov	 ecx, esi
  00054	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00057	e8 00 00 00 00	 call	 ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetLoadData

; 21   : 	this->ResetRegenMonsterObjData();

  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetRegenMonsterObjData

; 22   : }

  00063	8b c6		 mov	 eax, esi
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CKanturuMonsterMng@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  00009	e9 00 00 00 00	 jmp	 ??1CKanturuObjInfo@@UAE@XZ ; CKanturuObjInfo::~CKanturuObjInfo
__ehhandler$??0CKanturuMonsterMng@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CKanturuMonsterMng@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CKanturuMonsterMng@@QAE@XZ ENDP			; CKanturuMonsterMng::CKanturuMonsterMng
; Function compile flags: /Ogtp
;	COMDAT ??_GCKanturuMonsterMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCKanturuMonsterMng@@UAEPAXI@Z PROC			; CKanturuMonsterMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CKanturuMonsterMng@@UAE@XZ ; CKanturuMonsterMng::~CKanturuMonsterMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCKanturuMonsterMng@@UAEPAXI@Z ENDP			; CKanturuMonsterMng::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@ ; `string'
PUBLIC	??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@CKanturuMonsterMng@@QAEHPAD@Z		; CKanturuMonsterMng::LoadData
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - File load error : File Name Er'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@
CONST	SEGMENT
??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] Loading Exception Error (%s) Fil'
	DB	'e. ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - Exceed Max Info Count (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - Can''t Open %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$0
__unwindtable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
_btGroup$209131 = -52					; size = 1
_btMapNumber$209133 = -48				; size = 1
_btDistance$209134 = -44				; size = 1
_btX$209135 = -40					; size = 1
_btY$209136 = -36					; size = 1
_btDir$209137 = -32					; size = 1
tv268 = -28						; size = 4
tv266 = -28						; size = 4
tv260 = -28						; size = 4
tv258 = -28						; size = 4
tv188 = -28						; size = 4
tv186 = -28						; size = 4
tv172 = -28						; size = 4
tv168 = -28						; size = 4
tv133 = -28						; size = 4
tv129 = -28						; size = 4
tv92 = -28						; size = 4
tv84 = -28						; size = 4
tv76 = -28						; size = 4
tv66 = -28						; size = 4
_iType$209130 = -24					; size = 4
tv263 = -18						; size = 2
tv191 = -18						; size = 2
tv183 = -18						; size = 2
tv179 = -18						; size = 2
tv159 = -18						; size = 2
tv130 = -18						; size = 2
tv90 = -18						; size = 2
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@CKanturuMonsterMng@@QAEHPAD@Z PROC		; CKanturuMonsterMng::LoadData, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d c8	 mov	 DWORD PTR _this$[ebp], edi

; 82   : 	this->m_bFileDataLoad = FALSE;
; 83   : 
; 84   : 	if ( !lpszFileName || !strcmp(lpszFileName , "") )

  00030	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  00033	33 db		 xor	 ebx, ebx
  00035	89 9f dc 07 00
	00		 mov	 DWORD PTR [edi+2012], ebx
  0003b	3b f3		 cmp	 esi, ebx
  0003d	0f 84 ef 02 00
	00		 je	 $LN14@LoadData
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00048	8b c6		 mov	 eax, esi
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL26@LoadData:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN27@LoadData
  00056	3a d3		 cmp	 dl, bl
  00058	74 12		 je	 SHORT $LN28@LoadData
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN27@LoadData
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	3a d3		 cmp	 dl, bl
  0006a	75 e4		 jne	 SHORT $LL26@LoadData
$LN28@LoadData:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN29@LoadData
$LN27@LoadData:
  00070	1b c0		 sbb	 eax, eax
  00072	83 d8 ff	 sbb	 eax, -1
$LN29@LoadData:
  00075	3b c3		 cmp	 eax, ebx
  00077	0f 84 b5 02 00
	00		 je	 $LN14@LoadData

; 88   : 	}
; 89   : 
; 90   : 	try
; 91   : 	{
; 92   : 		
; 93   : 		SMDFile = fopen(lpszFileName, "r");

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00082	56		 push	 esi
  00083	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00086	e8 00 00 00 00	 call	 _fopen
  0008b	83 c4 08	 add	 esp, 8
  0008e	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 94   : 
; 95   : 		if ( SMDFile == NULL )

  00093	3b c3		 cmp	 eax, ebx
  00095	75 19		 jne	 SHORT $LN12@LoadData

; 96   : 		{
; 97   : 			DWORD dwError = GetLastError();

  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 98   : 			MsgBox("[ KANTURU ][ MonsterSetBase ] - Can't Open %s ", lpszFileName);

  0009d	56		 push	 esi
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  000a3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a8	83 c4 08	 add	 esp, 8

; 99   : 			return FALSE;

  000ab	e9 8f 02 00 00	 jmp	 $LN40@LoadData
$LN12@LoadData:

; 100  : 		}
; 101  : 
; 102  : 		this->ResetLoadData();

  000b0	8b cf		 mov	 ecx, edi
  000b2	e8 00 00 00 00	 call	 ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetLoadData
$LL11@LoadData:

; 103  : 	
; 104  : 		enum SMDToken Token;
; 105  : 		int iType = -1;
; 106  : 		BYTE btGroup = 0;
; 107  : 		WORD wType = 0;
; 108  : 		BYTE btMapNumber = 0;
; 109  : 		BYTE btDistance = 0;
; 110  : 		BYTE btX = 0;
; 111  : 		BYTE btY = 0;
; 112  : 		BYTE btDir = 0;
; 113  : 
; 114  : 		while ( true )
; 115  : 		{
; 116  : 			Token = GetToken();

  000b7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 			
; 118  : 			if ( Token == END )

  000bc	83 f8 02	 cmp	 eax, 2
  000bf	75 43		 jne	 SHORT $LN9@LoadData

; 188  : 
; 189  : 		fclose(SMDFile);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _fclose

; 190  : 		LogAddC(2, "[ KANTURU ][ MonsterSetBase ] - %s file is Loaded",
; 191  : 			lpszFileName);

  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  000cf	51		 push	 ecx
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  000d5	6a 02		 push	 2
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 192  : 
; 193  : 		this->m_bFileDataLoad = TRUE;

  000dd	c7 87 dc 07 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+2012], 1

; 199  : 
; 200  : 	return this->m_bFileDataLoad;

  000e7	8b 87 dc 07 00
	00		 mov	 eax, DWORD PTR [edi+2012]
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 201  : }

  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
$LN9@LoadData:

; 119  : 			{
; 120  : 				break;
; 121  : 			}
; 122  : 
; 123  : 			iType = (int)TokenNumber;

  00104	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0010a	e8 00 00 00 00	 call	 __ftol2_sse
  0010f	89 45 e8	 mov	 DWORD PTR _iType$209130[ebp], eax
$LL8@LoadData:

; 124  : 
; 125  : 			while ( true )
; 126  : 			{
; 127  : 				if ( iType == 0 )
; 128  : 				{
; 129  : 					btGroup = 0;
; 130  : 					wType = 0;
; 131  : 					btMapNumber = 0;
; 132  : 					btDistance = 0;
; 133  : 					btX = 0;
; 134  : 					btY = 0;
; 135  : 					btDir = 0;
; 136  : 
; 137  : 					Token = GetToken();

  00112	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 
; 139  : 					if ( !strcmp("end", TokenString))

  00117	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0011c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00121	39 5d e8	 cmp	 DWORD PTR _iType$209130[ebp], ebx
  00124	0f 85 d6 01 00
	00		 jne	 $LL34@LoadData
  0012a	8d 9b 00 00 00
	00		 npad	 6
$LL30@LoadData:
  00130	8a 10		 mov	 dl, BYTE PTR [eax]
  00132	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00134	75 1a		 jne	 SHORT $LN31@LoadData
  00136	3a d3		 cmp	 dl, bl
  00138	74 12		 je	 SHORT $LN32@LoadData
  0013a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0013d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00140	75 0e		 jne	 SHORT $LN31@LoadData
  00142	83 c0 02	 add	 eax, 2
  00145	83 c1 02	 add	 ecx, 2
  00148	3a d3		 cmp	 dl, bl
  0014a	75 e4		 jne	 SHORT $LL30@LoadData
$LN32@LoadData:
  0014c	33 c0		 xor	 eax, eax
  0014e	eb 05		 jmp	 SHORT $LN33@LoadData
$LN31@LoadData:
  00150	1b c0		 sbb	 eax, eax
  00152	83 d8 ff	 sbb	 eax, -1
$LN33@LoadData:
  00155	3b c3		 cmp	 eax, ebx
  00157	0f 84 5a ff ff
	ff		 je	 $LL11@LoadData

; 140  : 					{
; 141  : 						break;
; 142  : 					}
; 143  : 
; 144  : 					btGroup = (BYTE)TokenNumber;

  0015d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00163	d9 7d ee	 fnstcw	 WORD PTR tv159[ebp]
  00166	0f b7 45 ee	 movzx	 eax, WORD PTR tv159[ebp]
  0016a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0016f	89 45 e4	 mov	 DWORD PTR tv133[ebp], eax
  00172	d9 6d e4	 fldcw	 WORD PTR tv133[ebp]
  00175	db 5d e4	 fistp	 DWORD PTR tv129[ebp]
  00178	0f b6 55 e4	 movzx	 edx, BYTE PTR tv129[ebp]
  0017c	88 55 cc	 mov	 BYTE PTR _btGroup$209131[ebp], dl
  0017f	d9 6d ee	 fldcw	 WORD PTR tv159[ebp]

; 145  : 
; 146  : 					Token = GetToken();

  00182	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 147  : 					wType = (WORD)TokenNumber;

  00187	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018d	d9 7d ee	 fnstcw	 WORD PTR tv90[ebp]
  00190	0f b7 45 ee	 movzx	 eax, WORD PTR tv90[ebp]
  00194	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00199	89 45 e4	 mov	 DWORD PTR tv76[ebp], eax
  0019c	d9 6d e4	 fldcw	 WORD PTR tv76[ebp]
  0019f	db 5d e4	 fistp	 DWORD PTR tv172[ebp]
  001a2	66 8b 45 e4	 mov	 ax, WORD PTR tv172[ebp]
  001a6	0f b7 f0	 movzx	 esi, ax
  001a9	d9 6d ee	 fldcw	 WORD PTR tv90[ebp]

; 148  : 
; 149  : 					Token = GetToken();

  001ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 150  : 					btMapNumber = (BYTE)TokenNumber;

  001b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b7	d9 7d ee	 fnstcw	 WORD PTR tv130[ebp]
  001ba	0f b7 45 ee	 movzx	 eax, WORD PTR tv130[ebp]
  001be	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001c3	89 45 e4	 mov	 DWORD PTR tv92[ebp], eax
  001c6	d9 6d e4	 fldcw	 WORD PTR tv92[ebp]
  001c9	db 5d e4	 fistp	 DWORD PTR tv168[ebp]
  001cc	0f b6 4d e4	 movzx	 ecx, BYTE PTR tv168[ebp]
  001d0	88 4d d0	 mov	 BYTE PTR _btMapNumber$209133[ebp], cl
  001d3	d9 6d ee	 fldcw	 WORD PTR tv130[ebp]

; 151  : 
; 152  : 					Token = GetToken();

  001d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 153  : 					btDistance = (BYTE)TokenNumber;

  001db	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e1	d9 7d ee	 fnstcw	 WORD PTR tv179[ebp]
  001e4	0f b7 45 ee	 movzx	 eax, WORD PTR tv179[ebp]
  001e8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001ed	89 45 e4	 mov	 DWORD PTR tv84[ebp], eax
  001f0	d9 6d e4	 fldcw	 WORD PTR tv84[ebp]
  001f3	db 5d e4	 fistp	 DWORD PTR tv66[ebp]
  001f6	0f b6 55 e4	 movzx	 edx, BYTE PTR tv66[ebp]
  001fa	88 55 d4	 mov	 BYTE PTR _btDistance$209134[ebp], dl
  001fd	d9 6d ee	 fldcw	 WORD PTR tv179[ebp]

; 154  : 
; 155  : 					Token = GetToken();

  00200	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 156  : 					btX = (BYTE)TokenNumber;

  00205	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0020b	d9 7d ee	 fnstcw	 WORD PTR tv183[ebp]
  0020e	0f b7 45 ee	 movzx	 eax, WORD PTR tv183[ebp]
  00212	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00217	89 45 e4	 mov	 DWORD PTR tv186[ebp], eax
  0021a	d9 6d e4	 fldcw	 WORD PTR tv186[ebp]
  0021d	db 5d e4	 fistp	 DWORD PTR tv188[ebp]
  00220	8a 45 e4	 mov	 al, BYTE PTR tv188[ebp]
  00223	88 45 d8	 mov	 BYTE PTR _btX$209135[ebp], al
  00226	d9 6d ee	 fldcw	 WORD PTR tv183[ebp]

; 157  : 
; 158  : 					Token = GetToken();

  00229	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 159  : 					btY = (BYTE)TokenNumber;

  0022e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00234	d9 7d ee	 fnstcw	 WORD PTR tv191[ebp]
  00237	0f b7 45 ee	 movzx	 eax, WORD PTR tv191[ebp]
  0023b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00240	89 45 e4	 mov	 DWORD PTR tv258[ebp], eax
  00243	d9 6d e4	 fldcw	 WORD PTR tv258[ebp]
  00246	db 5d e4	 fistp	 DWORD PTR tv260[ebp]
  00249	0f b6 4d e4	 movzx	 ecx, BYTE PTR tv260[ebp]
  0024d	88 4d dc	 mov	 BYTE PTR _btY$209136[ebp], cl
  00250	d9 6d ee	 fldcw	 WORD PTR tv191[ebp]

; 160  : 
; 161  : 					Token = GetToken();

  00253	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 					btDir = (BYTE)TokenNumber;

  00258	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0025e	d9 7d ee	 fnstcw	 WORD PTR tv263[ebp]
  00261	0f b7 45 ee	 movzx	 eax, WORD PTR tv263[ebp]
  00265	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0026a	89 45 e4	 mov	 DWORD PTR tv266[ebp], eax

; 163  : 
; 164  : 					if ( this->m_iMaxMonsterCount < 0 ||
; 165  : 						 this->m_iMaxMonsterCount >= MAX_KANTURU_MONSTER )

  0026d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00270	d9 6d e4	 fldcw	 WORD PTR tv266[ebp]
  00273	db 5d e4	 fistp	 DWORD PTR tv268[ebp]
  00276	0f b6 55 e4	 movzx	 edx, BYTE PTR tv268[ebp]
  0027a	88 55 e0	 mov	 BYTE PTR _btDir$209137[ebp], dl
  0027d	d9 6d ee	 fldcw	 WORD PTR tv263[ebp]
  00280	3b c3		 cmp	 eax, ebx
  00282	7c 30		 jl	 SHORT $LN3@LoadData
  00284	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00289	7d 29		 jge	 SHORT $LN3@LoadData

; 171  : 					}
; 172  : 
; 173  : 					this->SetMonsterSetBaseInfo(this->m_iMaxMonsterCount, btGroup, wType,
; 174  : 						btMapNumber, btDistance, btX, btY, btDir);

  0028b	8b 4d e0	 mov	 ecx, DWORD PTR _btDir$209137[ebp]
  0028e	8b 55 dc	 mov	 edx, DWORD PTR _btY$209136[ebp]
  00291	51		 push	 ecx
  00292	8b 4d d8	 mov	 ecx, DWORD PTR _btX$209135[ebp]
  00295	52		 push	 edx
  00296	8b 55 d4	 mov	 edx, DWORD PTR _btDistance$209134[ebp]
  00299	51		 push	 ecx
  0029a	8b 4d d0	 mov	 ecx, DWORD PTR _btMapNumber$209133[ebp]
  0029d	52		 push	 edx
  0029e	8b 55 cc	 mov	 edx, DWORD PTR _btGroup$209131[ebp]
  002a1	51		 push	 ecx
  002a2	56		 push	 esi
  002a3	52		 push	 edx
  002a4	50		 push	 eax
  002a5	8b cf		 mov	 ecx, edi
  002a7	e8 00 00 00 00	 call	 ?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ; CKanturuMonsterMng::SetMonsterSetBaseInfo

; 175  : 					this->m_iMaxMonsterCount++;

  002ac	ff 47 04	 inc	 DWORD PTR [edi+4]

; 176  : 				}
; 177  : 				else

  002af	e9 5e fe ff ff	 jmp	 $LL8@LoadData
$LN3@LoadData:

; 166  : 					{
; 167  : 						MsgBox("[ KANTURU ][ MonsterSetBase ] - Exceed Max Info Count (%d)",
; 168  : 							this->m_iMaxMonsterCount);

  002b4	50		 push	 eax
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  002ba	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002bf	83 c4 08	 add	 esp, 8

; 169  : 
; 170  : 						break;

  002c2	e9 f0 fd ff ff	 jmp	 $LL11@LoadData
__catch$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$0:

; 194  : 	}	// __try
; 195  : 	catch(...)
; 196  : 	{
; 197  : 		MsgBox("[ KANTURU ][ MonsterSetBase ] Loading Exception Error (%s) File. ", lpszFileName);

  002c7	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  002ca	50		 push	 eax
  002cb	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@
  002d0	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002d5	83 c4 08	 add	 esp, 8

; 198  : 	}

  002d8	b8 00 00 00 00	 mov	 eax, $LN38@LoadData
  002dd	c3		 ret	 0
$LN38@LoadData:
  002de	8b 7d c8	 mov	 edi, DWORD PTR _this$[ebp]

; 199  : 
; 200  : 	return this->m_bFileDataLoad;

  002e1	8b 87 dc 07 00
	00		 mov	 eax, DWORD PTR [edi+2012]

; 201  : }

  002e7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f1	59		 pop	 ecx
  002f2	5f		 pop	 edi
  002f3	5e		 pop	 esi
  002f4	5b		 pop	 ebx
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c2 04 00	 ret	 4
  002fb	eb 03 8d 49 00	 npad	 5
$LL34@LoadData:

; 178  : 				{
; 179  : 					Token = GetToken();
; 180  : 
; 181  : 					if ( !strcmp("end", TokenString))

  00300	8a 10		 mov	 dl, BYTE PTR [eax]
  00302	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00304	75 1a		 jne	 SHORT $LN35@LoadData
  00306	3a d3		 cmp	 dl, bl
  00308	74 12		 je	 SHORT $LN36@LoadData
  0030a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0030d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00310	75 0e		 jne	 SHORT $LN35@LoadData
  00312	83 c0 02	 add	 eax, 2
  00315	83 c1 02	 add	 ecx, 2
  00318	3a d3		 cmp	 dl, bl
  0031a	75 e4		 jne	 SHORT $LL34@LoadData
$LN36@LoadData:
  0031c	33 c0		 xor	 eax, eax
  0031e	eb 05		 jmp	 SHORT $LN37@LoadData
$LN35@LoadData:
  00320	1b c0		 sbb	 eax, eax
  00322	83 d8 ff	 sbb	 eax, -1
$LN37@LoadData:
  00325	3b c3		 cmp	 eax, ebx
  00327	0f 85 e5 fd ff
	ff		 jne	 $LL8@LoadData

; 182  : 					{
; 183  : 						break;
; 184  : 					}
; 185  : 				}
; 186  : 			}	// while ( true )
; 187  : 		}	// while ( true )

  0032d	e9 85 fd ff ff	 jmp	 $LL11@LoadData
$LN14@LoadData:

; 85   : 	{
; 86   : 		MsgBox("[ KANTURU ][ MonsterSetBase ] - File load error : File Name Error");

  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  00337	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0033c	83 c4 04	 add	 esp, 4
$LN40@LoadData:

; 87   : 		return FALSE;

  0033f	33 c0		 xor	 eax, eax

; 201  : }

  00341	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00344	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0034b	59		 pop	 ecx
  0034c	5f		 pop	 edi
  0034d	5e		 pop	 esi
  0034e	5b		 pop	 ebx
  0034f	8b e5		 mov	 esp, ebp
  00351	5d		 pop	 ebp
  00352	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CKanturuMonsterMng@@QAEHPAD@Z ENDP		; CKanturuMonsterMng::LoadData
PUBLIC	??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z	; CKanturuMonsterMng::SetKanturuMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] Count:%d %s(Index:%d / ObjInd'
	DB	'ex:%d) Map:%d-[%d][%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] %s(Index:%d / ObjIndex:%d) Ma'
	DB	'p:%d-[%d][%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] Fail - Type:%d Map[%d]-[%d][%'
	DB	'd]', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z
_TEXT	SEGMENT
_iRegenCount$ = -16					; size = 4
_iCount$209199 = -12					; size = 4
_iResult$ = -8						; size = 4
_this$ = -4						; size = 4
_iGroupNumber$ = 8					; size = 4
?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z PROC	; CKanturuMonsterMng::SetKanturuMonster, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 220  : 	int iMapNumber = 0;
; 221  : 	WORD wType = 0;
; 222  : 	LPOBJ lpObj;
; 223  : 	int iResult;
; 224  : 	int iRegenCount = 0;

  00007	33 c0		 xor	 eax, eax
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	89 45 f0	 mov	 DWORD PTR _iRegenCount$[ebp], eax

; 225  : 	
; 226  : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)

  00011	89 45 f4	 mov	 DWORD PTR _iCount$209199[ebp], eax
  00014	8d 59 0e	 lea	 ebx, DWORD PTR [ecx+14]
  00017	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL19@SetKanturu:

; 227  : 	{
; 228  : 		if ( this->m_SetBaseInfo[iCount].btGroup == iGroupNumber &&
; 229  : 			 this->m_SetBaseInfo[iCount].wType != 0 )

  00020	0f b6 43 fa	 movzx	 eax, BYTE PTR [ebx-6]
  00024	3b 45 08	 cmp	 eax, DWORD PTR _iGroupNumber$[ebp]
  00027	0f 85 0d 02 00
	00		 jne	 $LN11@SetKanturu
  0002d	66 83 7b fc 00	 cmp	 WORD PTR [ebx-4], 0
  00032	0f 84 02 02 00
	00		 je	 $LN11@SetKanturu

; 230  : 		{
; 231  : 			iResult  = gObjAddMonster(this->m_SetBaseInfo[iCount].btMapNumber);

  00038	0f b6 4b fe	 movzx	 ecx, BYTE PTR [ebx-2]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00042	0f bf f8	 movsx	 edi, ax
  00045	83 c4 04	 add	 esp, 4
  00048	89 7d f8	 mov	 DWORD PTR _iResult$[ebp], edi

; 232  : 
; 233  : 			if ( iResult < 0 )

  0004b	85 ff		 test	 edi, edi
  0004d	79 26		 jns	 SHORT $LN8@SetKanturu

; 234  : 			{
; 235  : 				LogAddTD("[ KANTURU ][ SetBossMapMonster ] Fail - Type:%d Map[%d]-[%d][%d]",
; 236  : 					this->m_SetBaseInfo[iCount].wType,
; 237  : 					this->m_SetBaseInfo[iCount].btMapNumber,
; 238  : 					this->m_SetBaseInfo[iCount].btX,
; 239  : 					this->m_SetBaseInfo[iCount].btY);

  0004f	0f b6 53 01	 movzx	 edx, BYTE PTR [ebx+1]
  00053	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00056	0f b6 4b fe	 movzx	 ecx, BYTE PTR [ebx-2]
  0005a	52		 push	 edx
  0005b	0f b7 53 fc	 movzx	 edx, WORD PTR [ebx-4]
  0005f	50		 push	 eax
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006d	83 c4 14	 add	 esp, 20			; 00000014H

; 240  : 			}
; 241  : 			else

  00070	e9 c5 01 00 00	 jmp	 $LN11@SetKanturu
$LN8@SetKanturu:

; 242  : 			{
; 243  : 				lpObj = &gObj[iResult];

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007a	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00080	8d 34 07	 lea	 esi, DWORD PTR [edi+eax]

; 244  : 
; 245  : 				lpObj->m_PosNum = -1;

  00083	83 c9 ff	 or	 ecx, -1
  00086	66 89 8e b0 03
	00 00		 mov	 WORD PTR [esi+944], cx

; 246  : 				lpObj->X = this->m_SetBaseInfo[iCount].btX;

  0008d	0f b6 13	 movzx	 edx, BYTE PTR [ebx]
  00090	66 89 96 44 01
	00 00		 mov	 WORD PTR [esi+324], dx

; 247  : 				lpObj->Y = this->m_SetBaseInfo[iCount].btY;

  00097	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  0009b	8d 8e 44 01 00
	00		 lea	 ecx, DWORD PTR [esi+324]
  000a1	8d 96 46 01 00
	00		 lea	 edx, DWORD PTR [esi+326]
  000a7	66 89 02	 mov	 WORD PTR [edx], ax

; 248  : 				lpObj->MapNumber = this->m_SetBaseInfo[iCount].btMapNumber;

  000aa	8a 43 fe	 mov	 al, BYTE PTR [ebx-2]

; 249  : 
; 250  : 				if ( this->GetPosition(iCount, lpObj->MapNumber, lpObj->X, lpObj->Y) == FALSE )

  000ad	52		 push	 edx
  000ae	0f b6 d0	 movzx	 edx, al
  000b1	51		 push	 ecx
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	88 86 49 01 00
	00		 mov	 BYTE PTR [esi+329], al
  000bb	8b 45 f4	 mov	 eax, DWORD PTR _iCount$209199[ebp]
  000be	52		 push	 edx
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z ; CKanturuMonsterMng::GetPosition
  000c5	85 c0		 test	 eax, eax
  000c7	75 11		 jne	 SHORT $LN6@SetKanturu

; 251  : 				{
; 252  : 					gObjDel(iResult);

  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  000d2	83 c4 04	 add	 esp, 4

; 253  : 					continue;

  000d5	e9 60 01 00 00	 jmp	 $LN11@SetKanturu
$LN6@SetKanturu:

; 254  : 				}
; 255  : 
; 256  : 				lpObj->TX = lpObj->X;

  000da	0f b7 86 44 01
	00 00		 movzx	 eax, WORD PTR [esi+324]

; 257  : 				lpObj->TY = lpObj->Y;

  000e1	0f b7 8e 46 01
	00 00		 movzx	 ecx, WORD PTR [esi+326]

; 258  : 				lpObj->m_OldX = lpObj->X;
; 259  : 				lpObj->m_OldY = lpObj->Y;
; 260  : 				lpObj->StartX = lpObj->X;

  000e8	8a 96 44 01 00
	00		 mov	 dl, BYTE PTR [esi+324]
  000ee	66 89 86 7c 01
	00 00		 mov	 WORD PTR [esi+380], ax
  000f5	66 89 86 78 01
	00 00		 mov	 WORD PTR [esi+376], ax

; 261  : 				lpObj->StartY = lpObj->Y;

  000fc	0f b6 86 46 01
	00 00		 movzx	 eax, BYTE PTR [esi+326]
  00103	66 89 8e 7e 01
	00 00		 mov	 WORD PTR [esi+382], cx
  0010a	66 89 8e 7a 01
	00 00		 mov	 WORD PTR [esi+378], cx
  00111	88 96 76 01 00
	00		 mov	 BYTE PTR [esi+374], dl
  00117	88 86 77 01 00
	00		 mov	 BYTE PTR [esi+375], al

; 262  : 				lpObj->m_MoveRange = this->m_SetBaseInfo[iCount].btDistance;

  0011d	0f b6 4b ff	 movzx	 ecx, BYTE PTR [ebx-1]
  00121	66 89 8e ae 04
	00 00		 mov	 WORD PTR [esi+1198], cx

; 263  : 				lpObj->DieRegen = FALSE;

  00128	c6 86 a2 03 00
	00 00		 mov	 BYTE PTR [esi+930], 0

; 264  : 
; 265  : 				if ( this->m_SetBaseInfo[iCount].btDir == 0xFF )

  0012f	8a 43 02	 mov	 al, BYTE PTR [ebx+2]
  00132	3c ff		 cmp	 al, 255			; 000000ffH
  00134	75 11		 jne	 SHORT $LN5@SetKanturu

; 266  : 				{
; 267  : 					lpObj->Dir = rand()%8;

  00136	e8 00 00 00 00	 call	 _rand
  0013b	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00140	79 05		 jns	 SHORT $LN5@SetKanturu
  00142	48		 dec	 eax
  00143	83 c8 f8	 or	 eax, -8			; fffffff8H
  00146	40		 inc	 eax
$LN5@SetKanturu:

; 268  : 				}
; 269  : 				else
; 270  : 				{
; 271  : 					lpObj->Dir = this->m_SetBaseInfo[iCount].btDir;

  00147	88 86 48 01 00
	00		 mov	 BYTE PTR [esi+328], al

; 272  : 				}
; 273  : 
; 274  : 				if ( gObjSetMonster(iResult, this->m_SetBaseInfo[iCount].wType) == FALSE )

  0014d	0f b7 53 fc	 movzx	 edx, WORD PTR [ebx-4]
  00151	8b 75 f8	 mov	 esi, DWORD PTR _iResult$[ebp]
  00154	52		 push	 edx
  00155	56		 push	 esi
  00156	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  0015b	83 c4 08	 add	 esp, 8
  0015e	85 c0		 test	 eax, eax
  00160	75 0e		 jne	 SHORT $LN3@SetKanturu

; 275  : 				{
; 276  : 					gObjDel(iResult);

  00162	56		 push	 esi
  00163	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00168	83 c4 04	 add	 esp, 4

; 277  : 					continue;

  0016b	e9 ca 00 00 00	 jmp	 $LN11@SetKanturu
$LN3@SetKanturu:

; 278  : 				}
; 279  : 
; 280  : 				if ( this->m_SetBaseInfo[iCount].wType == 364 )	/// Maya Hand

  00170	b8 6c 01 00 00	 mov	 eax, 364		; 0000016cH
  00175	66 39 43 fc	 cmp	 WORD PTR [ebx-4], ax
  00179	75 48		 jne	 SHORT $LN2@SetKanturu

; 281  : 				{
; 282  : 					this->m_iMayaObjIndex = iResult;

  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	89 b1 d8 07 00
	00		 mov	 DWORD PTR [ecx+2008], esi

; 283  : 
; 284  : 					LogAddTD("[ KANTURU ][ SetBossMapMonster ] %s(Index:%d / ObjIndex:%d) Map:%d-[%d][%d]",
; 285  : 						gObj[iResult].Name, gObj[iResult].Class, iResult, gObj[iResult].MapNumber,
; 286  : 						gObj[iResult].X, gObj[iResult].Y);

  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00189	0f bf 94 07 46
	01 00 00	 movsx	 edx, WORD PTR [edi+eax+326]
  00191	0f bf 8c 07 44
	01 00 00	 movsx	 ecx, WORD PTR [edi+eax+324]
  00199	52		 push	 edx
  0019a	0f b6 94 07 49
	01 00 00	 movzx	 edx, BYTE PTR [edi+eax+329]
  001a2	51		 push	 ecx
  001a3	0f b7 8c 07 b8
	00 00 00	 movzx	 ecx, WORD PTR [edi+eax+184]
  001ab	52		 push	 edx
  001ac	56		 push	 esi
  001ad	51		 push	 ecx
  001ae	8d 54 07 77	 lea	 edx, DWORD PTR [edi+eax+119]
  001b2	52		 push	 edx
  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001be	83 c4 1c	 add	 esp, 28			; 0000001cH

; 287  : 
; 288  : 					continue;

  001c1	eb 77		 jmp	 SHORT $LN11@SetKanturu
$LN2@SetKanturu:

; 289  : 				}
; 290  : 
; 291  : 				if ( gObj[iResult].Type == OBJ_MONSTER )

  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c8	66 83 7c 07 68
	02		 cmp	 WORD PTR [edi+eax+104], 2
  001ce	75 67		 jne	 SHORT $LN17@SetKanturu

; 292  : 				{
; 293  : 					this->m_KanturuMonster.AddObj(iResult);

  001d0	56		 push	 esi
  001d1	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  001d4	8d 8e e0 07 00
	00		 lea	 ecx, DWORD PTR [esi+2016]
  001da	e8 00 00 00 00	 call	 ?AddObj@CKanturuObjInfo@@QAEHH@Z ; CKanturuObjInfo::AddObj

; 294  : 					this->m_iMaxRegenMonsterCount++;

  001df	b8 01 00 00 00	 mov	 eax, 1
  001e4	01 86 68 14 00
	00		 add	 DWORD PTR [esi+5224], eax

; 295  : 					this->m_iAliveMonsterCount++;

  001ea	01 86 6c 14 00
	00		 add	 DWORD PTR [esi+5228], eax

; 296  : 
; 297  : 					LogAddTD("[ KANTURU ][ SetBossMapMonster ] Count:%d %s(Index:%d / ObjIndex:%d) Map:%d-[%d][%d]",
; 298  : 						this->m_iAliveMonsterCount, gObj[iResult].Name, gObj[iResult].Class, iResult,
; 299  : 						gObj[iResult].MapNumber,gObj[iResult].X, gObj[iResult].Y);

  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f5	0f bf 8c 07 46
	01 00 00	 movsx	 ecx, WORD PTR [edi+eax+326]
  001fd	0f bf 94 07 44
	01 00 00	 movsx	 edx, WORD PTR [edi+eax+324]
  00205	8b b6 6c 14 00
	00		 mov	 esi, DWORD PTR [esi+5228]
  0020b	51		 push	 ecx
  0020c	0f b6 8c 07 49
	01 00 00	 movzx	 ecx, BYTE PTR [edi+eax+329]
  00214	52		 push	 edx
  00215	8b 55 f8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00218	51		 push	 ecx
  00219	0f b7 8c 07 b8
	00 00 00	 movzx	 ecx, WORD PTR [edi+eax+184]
  00221	52		 push	 edx
  00222	51		 push	 ecx
  00223	8d 54 07 77	 lea	 edx, DWORD PTR [edi+eax+119]
  00227	52		 push	 edx
  00228	56		 push	 esi
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00234	83 c4 20	 add	 esp, 32			; 00000020H
$LN17@SetKanturu:

; 300  : 				}
; 301  : 
; 302  : 				iRegenCount++;

  00237	ff 45 f0	 inc	 DWORD PTR _iRegenCount$[ebp]
$LN11@SetKanturu:

; 225  : 	
; 226  : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)

  0023a	8b 45 f4	 mov	 eax, DWORD PTR _iCount$209199[ebp]
  0023d	40		 inc	 eax
  0023e	83 c3 0a	 add	 ebx, 10			; 0000000aH
  00241	89 45 f4	 mov	 DWORD PTR _iCount$209199[ebp], eax
  00244	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00249	0f 8c d1 fd ff
	ff		 jl	 $LL19@SetKanturu

; 303  : 			}
; 304  : 		}
; 305  : 	}
; 306  : 
; 307  : 	return iRegenCount;

  0024f	8b 45 f0	 mov	 eax, DWORD PTR _iRegenCount$[ebp]
  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	5b		 pop	 ebx

; 308  : }

  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c2 04 00	 ret	 4
?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z ENDP	; CKanturuMonsterMng::SetKanturuMonster
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_KanturuMonsterMng@@YAXXZ
text$yc	SEGMENT
??__Eg_KanturuMonsterMng@@YAXXZ PROC			; `dynamic initializer for 'g_KanturuMonsterMng'', COMDAT

; 13   : CKanturuMonsterMng g_KanturuMonsterMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A ; g_KanturuMonsterMng
  00005	e8 00 00 00 00	 call	 ??0CKanturuMonsterMng@@QAE@XZ ; CKanturuMonsterMng::CKanturuMonsterMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_KanturuMonsterMng@@YAXXZ ; `dynamic atexit destructor for 'g_KanturuMonsterMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_KanturuMonsterMng@@YAXXZ ENDP			; `dynamic initializer for 'g_KanturuMonsterMng''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_KanturuMonsterMng@@YAXXZ
text$yd	SEGMENT
??__Fg_KanturuMonsterMng@@YAXXZ PROC			; `dynamic atexit destructor for 'g_KanturuMonsterMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A ; g_KanturuMonsterMng
  00005	e9 00 00 00 00	 jmp	 ??1CKanturuMonsterMng@@UAE@XZ ; CKanturuMonsterMng::~CKanturuMonsterMng
??__Fg_KanturuMonsterMng@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_KanturuMonsterMng''
text$yd	ENDS
PUBLIC	?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A	; g_KanturuMonsterMng
_BSS	SEGMENT
?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A DB 01470H DUP (?) ; g_KanturuMonsterMng
_BSS	ENDS
CRT$XCU	SEGMENT
_g_KanturuMonsterMng$initializer$ DD FLAT:??__Eg_KanturuMonsterMng@@YAXXZ
CRT$XCU	ENDS
END
