; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\LogToFile.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_07EIPNPBIJ@LOGDATA?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0CLogToFile@@QAE@QAD0H@Z			; CLogToFile::CLogToFile
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
;	COMDAT ??_C@_07EIPNPBIJ@LOGDATA?$AA@
; File e:\work\tranet_version\gs\gameserver\logtofile.cpp
CONST	SEGMENT
??_C@_07EIPNPBIJ@LOGDATA?$AA@ DB 'LOGDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CLogToFile@@QAE@QAD0H@Z
_TEXT	SEGMENT
_LogFileName$ = 8					; size = 4
_LogDirectoryName$ = 12					; size = 4
_bWithDate$ = 16					; size = 4
??0CLogToFile@@QAE@QAD0H@Z PROC				; CLogToFile::CLogToFile, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8    : 	if (strcmp(LogFileName, "") == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _LogFileName$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0000f	8b c8		 mov	 ecx, eax
  00011	53		 push	 ebx
$LL11@CLogToFile:
  00012	8a 19		 mov	 bl, BYTE PTR [ecx]
  00014	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00016	75 1a		 jne	 SHORT $LN12@CLogToFile
  00018	84 db		 test	 bl, bl
  0001a	74 12		 je	 SHORT $LN13@CLogToFile
  0001c	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  0001f	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00022	75 0e		 jne	 SHORT $LN12@CLogToFile
  00024	83 c1 02	 add	 ecx, 2
  00027	83 c2 02	 add	 edx, 2
  0002a	84 db		 test	 bl, bl
  0002c	75 e4		 jne	 SHORT $LL11@CLogToFile
$LN13@CLogToFile:
  0002e	33 c9		 xor	 ecx, ecx
  00030	eb 05		 jmp	 SHORT $LN14@CLogToFile
$LN12@CLogToFile:
  00032	1b c9		 sbb	 ecx, ecx
  00034	83 d9 ff	 sbb	 ecx, -1
$LN14@CLogToFile:
  00037	5b		 pop	 ebx
  00038	85 c9		 test	 ecx, ecx
  0003a	75 13		 jne	 SHORT $LN4@CLogToFile

; 9    : 	{
; 10   : 		strcpy(this->m_szLogFileName , "LOGDATA");

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07EIPNPBIJ@LOGDATA?$AA@
  00041	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00044	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07EIPNPBIJ@LOGDATA?$AA@+4
  0004a	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 11   : 	}
; 12   : 	else

  0004d	eb 0f		 jmp	 SHORT $LN3@CLogToFile
$LN4@CLogToFile:

; 13   : 	{
; 14   : 		strcpy(this->m_szLogFileName , LogFileName);

  0004f	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
  00052	2b d0		 sub	 edx, eax
$LL7@CLogToFile:
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00059	40		 inc	 eax
  0005a	84 c9		 test	 cl, cl
  0005c	75 f6		 jne	 SHORT $LL7@CLogToFile
$LN3@CLogToFile:

; 15   : 	}
; 16   : 
; 17   : 	
; 18   : 	if (!strcmp(LogDirectoryName, ""))

  0005e	8b 75 0c	 mov	 esi, DWORD PTR _LogDirectoryName$[ebp]
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00066	8b c6		 mov	 eax, esi
$LL15@CLogToFile:
  00068	8a 10		 mov	 dl, BYTE PTR [eax]
  0006a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0006c	75 1a		 jne	 SHORT $LN16@CLogToFile
  0006e	84 d2		 test	 dl, dl
  00070	74 12		 je	 SHORT $LN17@CLogToFile
  00072	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00075	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00078	75 0e		 jne	 SHORT $LN16@CLogToFile
  0007a	83 c0 02	 add	 eax, 2
  0007d	83 c1 02	 add	 ecx, 2
  00080	84 d2		 test	 dl, dl
  00082	75 e4		 jne	 SHORT $LL15@CLogToFile
$LN17@CLogToFile:
  00084	33 c0		 xor	 eax, eax
  00086	eb 05		 jmp	 SHORT $LN18@CLogToFile
$LN16@CLogToFile:
  00088	1b c0		 sbb	 eax, eax
  0008a	83 d8 ff	 sbb	 eax, -1
$LN18@CLogToFile:
  0008d	85 c0		 test	 eax, eax
  0008f	75 0c		 jne	 SHORT $LN2@CLogToFile

; 19   : 	{
; 20   : 		strcpy(this->m_szLogDirectoryName , "LOG");

  00091	c7 87 08 01 00
	00 4c 4f 47 00	 mov	 DWORD PTR [edi+264], 4673356 ; 00474f4cH

; 21   : 	}
; 22   : 	else

  0009b	eb 14		 jmp	 SHORT $LN1@CLogToFile
$LN2@CLogToFile:

; 23   : 	{
; 24   : 		strcpy(this->m_szLogDirectoryName  , LogDirectoryName);

  0009d	8d 97 08 01 00
	00		 lea	 edx, DWORD PTR [edi+264]
  000a3	8b c6		 mov	 eax, esi
  000a5	2b d6		 sub	 edx, esi
$LL8@CLogToFile:
  000a7	8a 08		 mov	 cl, BYTE PTR [eax]
  000a9	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000ac	40		 inc	 eax
  000ad	84 c9		 test	 cl, cl
  000af	75 f6		 jne	 SHORT $LL8@CLogToFile
$LN1@CLogToFile:

; 25   : 	}
; 26   : 	
; 27   : 	this->m_bWithDate  = bWithDate;	

  000b1	8b 55 10	 mov	 edx, DWORD PTR _bWithDate$[ebp]

; 28   : 
; 29   : 	CreateDirectory(LogDirectoryName, NULL);

  000b4	6a 00		 push	 0
  000b6	56		 push	 esi
  000b7	89 97 0c 02 01
	00		 mov	 DWORD PTR [edi+66060], edx
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 30   : 
; 31   : 	InitializeCriticalSection(&this->m_critLogToFile );

  000c3	8d 87 10 02 01
	00		 lea	 eax, DWORD PTR [edi+66064]
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 32   : 	
; 33   : }

  000d0	8b c7		 mov	 eax, edi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH
??0CLogToFile@@QAE@QAD0H@Z ENDP				; CLogToFile::CLogToFile
_TEXT	ENDS
PUBLIC	??1CLogToFile@@QAE@XZ				; CLogToFile::~CLogToFile
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1CLogToFile@@QAE@XZ
_TEXT	SEGMENT
??1CLogToFile@@QAE@XZ PROC				; CLogToFile::~CLogToFile, COMDAT
; _this$ = ecx

; 38   : 	DeleteCriticalSection(&this->m_critLogToFile );

  00000	81 c1 10 02 01
	00		 add	 ecx, 66064		; 00010210H
  00006	51		 push	 ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 39   : }

  0000d	c3		 ret	 0
??1CLogToFile@@QAE@XZ ENDP				; CLogToFile::~CLogToFile
_TEXT	ENDS
PUBLIC	??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_02DPNLHKJD@a?$CL?$AA@			; `string'
PUBLIC	??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Output@CLogToFile@@QAAXPADZZ			; CLogToFile::Output
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	_fclose:PROC
EXTRN	_fprintf:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	_vsprintf:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__except_handler4:PROC
;	COMDAT ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ DB '%d:%d:%d  %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNLHKJD@a?$CL?$AA@
CONST	SEGMENT
??_C@_02DPNLHKJD@a?$CL?$AA@ DB 'a+', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
CONST	SEGMENT
??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ DB '%'
	DB	's\%s %04d-%02d-%02d_%s.txt', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?Output@CLogToFile@@QAAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffeb8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN10@Output
	DD	FLAT:$LN11@Output
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?Output@CLogToFile@@QAAXPADZZ
_TEXT	SEGMENT
_this$GSCopy$ = -312					; size = 4
_EntCrit$ = -305					; size = 1
_strSystime$208891 = -304				; size = 16
_szLogFileName$208890 = -288				; size = 260
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_this$ = 8						; size = 4
_fmt$ = 12						; size = 4
?Output@CLogToFile@@QAAXPADZZ PROC			; CLogToFile::Output, COMDAT

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?Output@CLogToFile@@QAAXPADZZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	50		 push	 eax
  0002d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00039	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]

; 44   : 	bool EntCrit = false;

  0003c	89 b5 c8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00042	c6 85 cf fe ff
	ff 00		 mov	 BYTE PTR _EntCrit$[ebp], 0

; 45   : 	__try

  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 46   : 	{
; 47   : 		va_list argptr;
; 48   : 		int iChrWritten;
; 49   : 		char szLogFileName[260]; // Is StringZero Terminated
; 50   : 
; 51   : 		SYSTEMTIME strSystime;
; 52   : 	
; 53   : 		EnterCriticalSection(&this->m_critLogToFile );

  00050	8d 9e 10 02 01
	00		 lea	 ebx, DWORD PTR [esi+66064]
  00056	53		 push	 ebx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 54   : 		EntCrit = true;

  0005d	c6 85 cf fe ff
	ff 01		 mov	 BYTE PTR _EntCrit$[ebp], 1

; 55   : 
; 56   : 		va_start(argptr, fmt);
; 57   : 		iChrWritten=vsprintf(this->m_cBUFFER , fmt, argptr);

  00064	8d be 0c 02 00
	00		 lea	 edi, DWORD PTR [esi+524]
  0006a	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  0006d	50		 push	 eax
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00071	51		 push	 ecx
  00072	57		 push	 edi
  00073	e8 00 00 00 00	 call	 _vsprintf
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 		va_end(argptr);
; 59   : 
; 60   : 		GetLocalTime(&strSystime);

  0007b	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR _strSystime$208891[ebp]
  00081	52		 push	 edx
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 61   : 
; 62   : 		wsprintf(szLogFileName, "%s\\%s %04d-%02d-%02d_%s.txt",
; 63   : 			&this->m_szLogDirectoryName[0] , &this->m_szLogFileName [0],
; 64   : 			strSystime.wYear, strSystime.wMonth, strSystime.wDay,
; 65   : 			szServerName);

  00088	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  0008d	0f b7 85 d6 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$208891[ebp+6]
  00094	50		 push	 eax
  00095	0f b7 8d d2 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$208891[ebp+2]
  0009c	51		 push	 ecx
  0009d	0f b7 95 d0 fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$208891[ebp]
  000a4	52		 push	 edx
  000a5	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a8	50		 push	 eax
  000a9	8d 8e 08 01 00
	00		 lea	 ecx, DWORD PTR [esi+264]
  000af	51		 push	 ecx
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
  000b5	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _szLogFileName$208890[ebp]
  000bb	52		 push	 edx
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 66   : 
; 67   : 		if ( (this->m_fLogFile = fopen(szLogFileName, "a+"))==0)

  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPNLHKJD@a?$CL?$AA@
  000c7	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szLogFileName$208890[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _fopen
  000d3	83 c4 28	 add	 esp, 40			; 00000028H
  000d6	89 06		 mov	 DWORD PTR [esi], eax
  000d8	85 c0		 test	 eax, eax

; 68   : 		{
; 69   : 			LeaveCriticalSection(&this->m_critLogToFile );	
; 70   : 			EntCrit = false;
; 71   : 		}
; 72   : 		else

  000da	74 4b		 je	 SHORT $LN15@Output

; 75   : 			{
; 76   : 				fprintf(this->m_fLogFile , "%s\n", this->m_cBUFFER);

  000dc	57		 push	 edi

; 73   : 		{
; 74   : 			if (this->m_bWithDate ==0)

  000dd	83 be 0c 02 01
	00 00		 cmp	 DWORD PTR [esi+66060], 0
  000e4	75 10		 jne	 SHORT $LN3@Output

; 75   : 			{
; 76   : 				fprintf(this->m_fLogFile , "%s\n", this->m_cBUFFER);

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 _fprintf
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 77   : 			}
; 78   : 			else

  000f4	eb 26		 jmp	 SHORT $LN2@Output
$LN3@Output:

; 79   : 			{
; 80   : 				fprintf(this->m_fLogFile , "%d:%d:%d  %s\n", strSystime.wHour, strSystime.wMinute, strSystime.wSecond, this->m_cBUFFER);

  000f6	0f b7 8d dc fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$208891[ebp+12]
  000fd	51		 push	 ecx
  000fe	0f b7 95 da fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$208891[ebp+10]
  00105	52		 push	 edx
  00106	0f b7 8d d8 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$208891[ebp+8]
  0010d	51		 push	 ecx
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _fprintf
  00119	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@Output:

; 81   : 			}
; 82   : 			fclose(this->m_fLogFile );

  0011c	8b 16		 mov	 edx, DWORD PTR [esi]
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 _fclose
  00124	83 c4 04	 add	 esp, 4
$LN15@Output:

; 83   : 
; 84   : 			LeaveCriticalSection(&this->m_critLogToFile );

  00127	53		 push	 ebx
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 85   : 			EntCrit = false;

  0012e	c6 85 cf fe ff
	ff 00		 mov	 BYTE PTR _EntCrit$[ebp], 0

; 86   : 		}
; 87   : 	}

  00135	eb 31		 jmp	 SHORT $LN1@Output
$LN10@Output:
$LN16@Output:

; 88   : 	__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00137	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  0013a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013c	33 d2		 xor	 edx, edx
  0013e	81 39 05 00 00
	c0		 cmp	 DWORD PTR [ecx], -1073741819 ; c0000005H
  00144	0f 94 c2	 sete	 dl
  00147	8b c2		 mov	 eax, edx
$LN14@Output:
$LN12@Output:
  00149	c3		 ret	 0
$LN11@Output:
  0014a	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 89   : 	{
; 90   : 		if(EntCrit == true)

  0014d	80 bd cf fe ff
	ff 01		 cmp	 BYTE PTR _EntCrit$[ebp], 1
  00154	75 12		 jne	 SHORT $LN1@Output

; 91   : 		{
; 92   : 			LeaveCriticalSection(&this->m_critLogToFile);

  00156	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0015c	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  00161	50		 push	 eax
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@Output:

; 93   : 		}
; 94   : 	}

  00168	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 95   : }

  0016f	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00172	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00179	59		 pop	 ecx
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
  0017d	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	33 cd		 xor	 ecx, ebp
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
?Output@CLogToFile@@QAAXPADZZ ENDP			; CLogToFile::Output
_TEXT	ENDS
END
