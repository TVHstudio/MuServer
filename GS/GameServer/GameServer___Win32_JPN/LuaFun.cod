; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\LuaFun.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\luafun.cpp
;	COMDAT ?Debug_Print@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?Debug_Print@@YAHPAUlua_State@@@Z PROC			; Debug_Print, COMDAT

; 14   : #ifdef _DEBUG
; 15   : 	// here must be some code
; 16   : 	// no code in executable, since it was build without _DEBUG
; 17   : #endif
; 18   : 
; 19   : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 20   : }

  00002	c3		 ret	 0
?Debug_Print@@YAHPAUlua_State@@@Z ENDP			; Debug_Print
_TEXT	ENDS
PUBLIC	??_C@_0L@NNLLPGPO@DebugPrint?$AA@		; `string'
PUBLIC	?Debug_AddDebugPrintTemp@@YAXPAUlua_State@@@Z	; Debug_AddDebugPrintTemp
EXTRN	_lua_setfield:PROC
EXTRN	_lua_pushcclosure:PROC
;	COMDAT ??_C@_0L@NNLLPGPO@DebugPrint?$AA@
CONST	SEGMENT
??_C@_0L@NNLLPGPO@DebugPrint?$AA@ DB 'DebugPrint', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Debug_AddDebugPrintTemp@@YAXPAUlua_State@@@Z
_TEXT	SEGMENT
_DebugGlue$ = -16					; size = 16
_L$ = 8							; size = 4
?Debug_AddDebugPrintTemp@@YAXPAUlua_State@@@Z PROC	; Debug_AddDebugPrintTemp, COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 24   : 	luaL_reg DebugGlue[] =
; 25   : 	{
; 26   : 		{"DebugPrint", Debug_Print},
; 27   : 		{NULL, NULL}
; 28   : 	};
; 29   : 
; 30   : 
; 31   : 	for (int i = 0; DebugGlue[i].name; ++i )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	33 c0		 xor	 eax, eax
  0000d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0L@NNLLPGPO@DebugPrint?$AA@
  00012	57		 push	 edi
  00013	89 75 f0	 mov	 DWORD PTR _DebugGlue$[ebp], esi
  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _DebugGlue$[ebp+4], OFFSET ?Debug_Print@@YAHPAUlua_State@@@Z ; Debug_Print
  0001d	89 45 f8	 mov	 DWORD PTR _DebugGlue$[ebp+8], eax
  00020	89 45 fc	 mov	 DWORD PTR _DebugGlue$[ebp+12], eax
  00023	33 ff		 xor	 edi, edi
$LL8@Debug_AddD:

; 32   : 	{
; 33   : 		lua_pushcclosure(L, DebugGlue[i].func, 0);

  00025	8b 44 05 f4	 mov	 eax, DWORD PTR _DebugGlue$[ebp+eax+4]
  00029	6a 00		 push	 0
  0002b	50		 push	 eax
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 _lua_pushcclosure

; 34   : 		lua_setfield(L, LUA_GLOBALSINDEX, DebugGlue[i].name);

  00032	56		 push	 esi
  00033	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  00038	53		 push	 ebx
  00039	e8 00 00 00 00	 call	 _lua_setfield
  0003e	47		 inc	 edi
  0003f	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00046	8b 74 05 f0	 mov	 esi, DWORD PTR _DebugGlue$[ebp+eax]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H
  0004d	85 f6		 test	 esi, esi
  0004f	75 d4		 jne	 SHORT $LL8@Debug_AddD
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 35   : 	}
; 36   : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?Debug_AddDebugPrintTemp@@YAXPAUlua_State@@@Z ENDP	; Debug_AddDebugPrintTemp
_TEXT	ENDS
PUBLIC	??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@ ; `string'
PUBLIC	??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@ ; `string'
PUBLIC	??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@	; `string'
PUBLIC	?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ	; g_Generic_Call
EXTRN	_lua_settop:PROC
EXTRN	_lua_tonumber:PROC
EXTRN	_lua_isnumber:PROC
EXTRN	_lua_isstring:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_pcall:PROC
EXTRN	_luaL_checkstack:PROC
EXTRN	_lua_pushlstring:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_getfield:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@
CONST	SEGMENT
??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@ DB 'luacall_Generi'
	DB	'c_Call invalid option (%c)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@
CONST	SEGMENT
??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@ DB 'luacall_Generi'
	DB	'c_Call error running function `%s'': %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
CONST	SEGMENT
??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@ DB 'too many arguments', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ
_TEXT	SEGMENT
_nRetValCnt$ = 8					; size = 4
_nArg$ = 8						; size = 4
_LState$ = 8						; size = 4
_Func$ = 12						; size = 4
_Sig$ = 16						; size = 4
?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ PROC		; g_Generic_Call, COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 41   : 	if( LState == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _LState$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN24@g_Generic_

; 42   : 	{
; 43   : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 154  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN24@g_Generic_:

; 44   : 	}
; 45   : 	// ----
; 46   : 	va_list	VA_LIST;
; 47   : 	// -----
; 48   : 	int nArg = 0;
; 49   : 	// -----
; 50   : 	va_start(VA_LIST, Sig);
; 51   : 	lua_getglobal(LState, Func);

  00010	8b 45 0c	 mov	 eax, DWORD PTR _Func$[ebp]
  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	50		 push	 eax
  00016	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  0001b	56		 push	 esi
  0001c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _nArg$[ebp], 0
  00023	8d 5d 14	 lea	 ebx, DWORD PTR _Sig$[ebp+4]
  00026	e8 00 00 00 00	 call	 _lua_getfield

; 52   : 	// -----
; 53   : 	while (*Sig)

  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _Sig$[ebp]
  0002e	8a 01		 mov	 al, BYTE PTR [ecx]
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	84 c0		 test	 al, al
  00035	0f 84 85 00 00
	00		 je	 $endwhile$188291
  0003b	eb 03 8d 49 00	 npad	 5
$LL23@g_Generic_:

; 54   : 	{
; 55   : 		switch (*Sig++)

  00040	ff 45 10	 inc	 DWORD PTR _Sig$[ebp]
  00043	0f be c0	 movsx	 eax, al
  00046	83 e8 3e	 sub	 eax, 62			; 0000003eH
  00049	83 f8 35	 cmp	 eax, 53			; 00000035H
  0004c	0f 87 b5 00 00
	00		 ja	 $LN14@g_Generic_
  00052	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN35@g_Generic_[eax]
  00059	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN42@g_Generic_[edx*4]
$LN19@g_Generic_:

; 56   : 		{
; 57   : 			case 'd':
; 58   : 			{
; 59   : 				lua_pushnumber(LState, va_arg(VA_LIST, double));

  00060	dd 03		 fld	 QWORD PTR [ebx]
  00062	83 c3 08	 add	 ebx, 8
  00065	83 ec 08	 sub	 esp, 8
  00068	dd 1c 24	 fstp	 QWORD PTR [esp]
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 _lua_pushnumber

; 60   : 			} break;

  00071	eb 2e		 jmp	 SHORT $LN41@g_Generic_
$LN18@g_Generic_:

; 61   : 			// -----
; 62   : 			case 'i':
; 63   : 			{
; 64   : 				lua_pushnumber(LState, va_arg(VA_LIST, int));

  00073	db 03		 fild	 DWORD PTR [ebx]
  00075	83 c3 04	 add	 ebx, 4
  00078	83 ec 08	 sub	 esp, 8
  0007b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 _lua_pushnumber

; 65   : 			} break;

  00084	eb 1b		 jmp	 SHORT $LN41@g_Generic_
$LN17@g_Generic_:

; 66   : 			// -----
; 67   : 			case 's':
; 68   : 			{
; 69   : 				char *pszString = va_arg(VA_LIST, char *);

  00086	8b 13		 mov	 edx, DWORD PTR [ebx]
  00088	83 c3 04	 add	 ebx, 4

; 70   : 				
; 71   : 				lua_pushlstring(LState, pszString, strlen(pszString));

  0008b	8b c2		 mov	 eax, edx
  0008d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL36@g_Generic_:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL36@g_Generic_
  00097	2b c7		 sub	 eax, edi
  00099	50		 push	 eax
  0009a	52		 push	 edx
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 _lua_pushlstring
$LN41@g_Generic_:

; 83   : 			}
; 84   : 		}
; 85   : 		// -----
; 86   : 		nArg++;

  000a1	ff 45 08	 inc	 DWORD PTR _nArg$[ebp]
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 87   : 		// -----
; 88   : 		luaL_checkstack(LState, 1, "too many arguments");

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
  000ac	6a 01		 push	 1
  000ae	56		 push	 esi
  000af	e8 00 00 00 00	 call	 _luaL_checkstack
  000b4	8b 45 10	 mov	 eax, DWORD PTR _Sig$[ebp]
  000b7	8a 00		 mov	 al, BYTE PTR [eax]
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	84 c0		 test	 al, al
  000be	75 80		 jne	 SHORT $LL23@g_Generic_
$endwhile$188291:

; 89   : 		// -----
; 90   : 	} endwhile:
; 91   : 	// -----
; 92   : 	int nRes = strlen(Sig);

  000c0	8b 7d 10	 mov	 edi, DWORD PTR _Sig$[ebp]
  000c3	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL37@g_Generic_:
  000c6	8a 07		 mov	 al, BYTE PTR [edi]
  000c8	47		 inc	 edi
  000c9	84 c0		 test	 al, al
  000cb	75 f9		 jne	 SHORT $LL37@g_Generic_

; 93   : 	// -----
; 94   : 	if (lua_pcall(LState, nArg, nRes, 0) != 0)

  000cd	8b 45 08	 mov	 eax, DWORD PTR _nArg$[ebp]
  000d0	6a 00		 push	 0
  000d2	2b f9		 sub	 edi, ecx
  000d4	57		 push	 edi
  000d5	50		 push	 eax
  000d6	56		 push	 esi
  000d7	e8 00 00 00 00	 call	 _lua_pcall
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
  000df	85 c0		 test	 eax, eax
  000e1	74 41		 je	 SHORT $LN13@g_Generic_

; 95   : 	{
; 96   : 		LogAdd("luacall_Generic_Call error running function `%s': %s", Func, lua_tolstring(LState, -1, 0));

  000e3	6a 00		 push	 0
  000e5	6a ff		 push	 -1
  000e7	56		 push	 esi
  000e8	e8 00 00 00 00	 call	 _lua_tolstring
  000ed	8b 4d 0c	 mov	 ecx, DWORD PTR _Func$[ebp]
  000f0	50		 push	 eax
  000f1	51		 push	 ecx
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@HDBMEAKM@luacall_Generic_Call?5error?5runni@
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000fd	83 c4 18	 add	 esp, 24			; 00000018H
$LN32@g_Generic_:

; 97   : 		// -----
; 98   : 		return false;

  00100	5f		 pop	 edi
  00101	5b		 pop	 ebx
  00102	32 c0		 xor	 al, al
  00104	5e		 pop	 esi

; 154  : }

  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
$LN14@g_Generic_:

; 72   : 			} break;
; 73   : 			// -----
; 74   : 			case '>':
; 75   : 			{
; 76   : 				goto endwhile;
; 77   : 			}
; 78   : 			// -----
; 79   : 			default:
; 80   : 			{
; 81   : 				LogAdd("luacall_Generic_Call invalid option (%c)", *(Sig-1));

  00107	8b 4d 10	 mov	 ecx, DWORD PTR _Sig$[ebp]
  0010a	0f be 51 ff	 movsx	 edx, BYTE PTR [ecx-1]
  0010e	52		 push	 edx
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@EGCCEPHO@luacall_Generic_Call?5invalid?5opt@
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0011a	83 c4 08	 add	 esp, 8
  0011d	5f		 pop	 edi
  0011e	5b		 pop	 ebx

; 82   : 				return false;

  0011f	32 c0		 xor	 al, al
  00121	5e		 pop	 esi

; 154  : }

  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
$LN13@g_Generic_:

; 102  : 	// -----
; 103  : 	nRes = -nRes;
; 104  : 	// -----
; 105  : 	while (*Sig)

  00124	8b 55 10	 mov	 edx, DWORD PTR _Sig$[ebp]
  00127	8a 02		 mov	 al, BYTE PTR [edx]
  00129	8b cf		 mov	 ecx, edi
  0012b	f7 df		 neg	 edi
  0012d	89 4d 08	 mov	 DWORD PTR _nRetValCnt$[ebp], ecx
  00130	84 c0		 test	 al, al
  00132	0f 84 9e 00 00
	00		 je	 $LN11@g_Generic_

; 99   : 	}
; 100  : 	// -----
; 101  : 	int nRetValCnt = nRes;

  00138	83 c3 fc	 add	 ebx, -4			; fffffffcH
  0013b	eb 03 8d 49 00	 npad	 5
$LL12@g_Generic_:

; 106  : 	{
; 107  : 		switch (*Sig++)

  00140	ff 45 10	 inc	 DWORD PTR _Sig$[ebp]
  00143	0f be c0	 movsx	 eax, al
  00146	83 f8 64	 cmp	 eax, 100		; 00000064H
  00149	74 57		 je	 SHORT $LN8@g_Generic_
  0014b	83 f8 69	 cmp	 eax, 105		; 00000069H
  0014e	74 28		 je	 SHORT $LN6@g_Generic_
  00150	83 f8 73	 cmp	 eax, 115		; 00000073H
  00153	75 ab		 jne	 SHORT $LN32@g_Generic_

; 129  : 			// -----
; 130  : 			case 's':
; 131  : 			{
; 132  : 				if (!lua_isstring(LState, nRes))

  00155	57		 push	 edi
  00156	56		 push	 esi
  00157	e8 00 00 00 00	 call	 _lua_isstring
  0015c	83 c4 08	 add	 esp, 8
  0015f	85 c0		 test	 eax, eax
  00161	74 9d		 je	 SHORT $LN32@g_Generic_

; 133  : 				{
; 134  : 					return false;
; 135  : 				}
; 136  : 				// -----
; 137  : 				*va_arg(VA_LIST, const char **) = lua_tostring(LState, nRes);

  00163	6a 00		 push	 0
  00165	57		 push	 edi
  00166	56		 push	 esi
  00167	83 c3 04	 add	 ebx, 4
  0016a	e8 00 00 00 00	 call	 _lua_tolstring
  0016f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00171	83 c4 0c	 add	 esp, 12			; 0000000cH
  00174	89 01		 mov	 DWORD PTR [ecx], eax

; 138  : 			} break;

  00176	eb 4d		 jmp	 SHORT $LN9@g_Generic_
$LN6@g_Generic_:

; 117  : 				// -----
; 118  : 			} break;
; 119  : 			// -----
; 120  : 			case 'i':
; 121  : 			{
; 122  : 				if (!lua_isnumber(LState, nRes))

  00178	57		 push	 edi
  00179	56		 push	 esi
  0017a	e8 00 00 00 00	 call	 _lua_isnumber
  0017f	83 c4 08	 add	 esp, 8
  00182	85 c0		 test	 eax, eax
  00184	0f 84 76 ff ff
	ff		 je	 $LN32@g_Generic_

; 123  : 				{
; 124  : 					return false;
; 125  : 				}
; 126  : 				// -----
; 127  : 				*va_arg(VA_LIST, int *) = (int)lua_tonumber(LState, nRes);

  0018a	57		 push	 edi
  0018b	56		 push	 esi
  0018c	83 c3 04	 add	 ebx, 4
  0018f	e8 00 00 00 00	 call	 _lua_tonumber
  00194	83 c4 08	 add	 esp, 8
  00197	e8 00 00 00 00	 call	 __ftol2_sse
  0019c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0019e	89 02		 mov	 DWORD PTR [edx], eax

; 128  : 			} break;

  001a0	eb 23		 jmp	 SHORT $LN9@g_Generic_
$LN8@g_Generic_:

; 108  : 		{
; 109  : 			case 'd':
; 110  : 			{
; 111  : 				if (!lua_isnumber(LState, nRes))

  001a2	57		 push	 edi
  001a3	56		 push	 esi
  001a4	e8 00 00 00 00	 call	 _lua_isnumber
  001a9	83 c4 08	 add	 esp, 8
  001ac	85 c0		 test	 eax, eax
  001ae	0f 84 4c ff ff
	ff		 je	 $LN32@g_Generic_

; 112  : 				{
; 113  : 					return false;
; 114  : 				}
; 115  : 				// -----
; 116  : 				*va_arg(VA_LIST, double *) = lua_tonumber(LState, nRes);

  001b4	57		 push	 edi
  001b5	56		 push	 esi
  001b6	83 c3 04	 add	 ebx, 4
  001b9	e8 00 00 00 00	 call	 _lua_tonumber
  001be	8b 03		 mov	 eax, DWORD PTR [ebx]
  001c0	dd 18		 fstp	 QWORD PTR [eax]
  001c2	83 c4 08	 add	 esp, 8
$LN9@g_Generic_:

; 102  : 	// -----
; 103  : 	nRes = -nRes;
; 104  : 	// -----
; 105  : 	while (*Sig)

  001c5	8b 4d 10	 mov	 ecx, DWORD PTR _Sig$[ebp]
  001c8	8a 01		 mov	 al, BYTE PTR [ecx]

; 139  : 			// -----
; 140  : 			default: return false;	break;
; 141  : 		}
; 142  : 		// -----
; 143  : 		nRes++;

  001ca	47		 inc	 edi
  001cb	84 c0		 test	 al, al
  001cd	0f 85 6d ff ff
	ff		 jne	 $LL12@g_Generic_

; 108  : 		{
; 109  : 			case 'd':
; 110  : 			{
; 111  : 				if (!lua_isnumber(LState, nRes))

  001d3	8b 4d 08	 mov	 ecx, DWORD PTR _nRetValCnt$[ebp]
$LN11@g_Generic_:

; 144  : 	}
; 145  : 	// -----
; 146  : 	va_end(VA_LIST);
; 147  : 	// -----
; 148  : 	if (nRetValCnt)

  001d6	85 c9		 test	 ecx, ecx
  001d8	74 0f		 je	 SHORT $LN1@g_Generic_

; 149  : 	{
; 150  : 		lua_pop(LState, nRetValCnt);

  001da	83 ca ff	 or	 edx, -1
  001dd	2b d1		 sub	 edx, ecx
  001df	52		 push	 edx
  001e0	56		 push	 esi
  001e1	e8 00 00 00 00	 call	 _lua_settop
  001e6	83 c4 08	 add	 esp, 8
$LN1@g_Generic_:

; 151  : 	}
; 152  : 	// -----
; 153  : 	return true;

  001e9	5f		 pop	 edi
  001ea	5b		 pop	 ebx
  001eb	b0 01		 mov	 al, 1
  001ed	5e		 pop	 esi

; 154  : }

  001ee	5d		 pop	 ebp
  001ef	c3		 ret	 0
$LN42@g_Generic_:
  001f0	00 00 00 00	 DD	 $endwhile$188291
  001f4	00 00 00 00	 DD	 $LN19@g_Generic_
  001f8	00 00 00 00	 DD	 $LN18@g_Generic_
  001fc	00 00 00 00	 DD	 $LN17@g_Generic_
  00200	00 00 00 00	 DD	 $LN14@g_Generic_
$LN35@g_Generic_:
  00204	00		 DB	 0
  00205	04		 DB	 4
  00206	04		 DB	 4
  00207	04		 DB	 4
  00208	04		 DB	 4
  00209	04		 DB	 4
  0020a	04		 DB	 4
  0020b	04		 DB	 4
  0020c	04		 DB	 4
  0020d	04		 DB	 4
  0020e	04		 DB	 4
  0020f	04		 DB	 4
  00210	04		 DB	 4
  00211	04		 DB	 4
  00212	04		 DB	 4
  00213	04		 DB	 4
  00214	04		 DB	 4
  00215	04		 DB	 4
  00216	04		 DB	 4
  00217	04		 DB	 4
  00218	04		 DB	 4
  00219	04		 DB	 4
  0021a	04		 DB	 4
  0021b	04		 DB	 4
  0021c	04		 DB	 4
  0021d	04		 DB	 4
  0021e	04		 DB	 4
  0021f	04		 DB	 4
  00220	04		 DB	 4
  00221	04		 DB	 4
  00222	04		 DB	 4
  00223	04		 DB	 4
  00224	04		 DB	 4
  00225	04		 DB	 4
  00226	04		 DB	 4
  00227	04		 DB	 4
  00228	04		 DB	 4
  00229	04		 DB	 4
  0022a	01		 DB	 1
  0022b	04		 DB	 4
  0022c	04		 DB	 4
  0022d	04		 DB	 4
  0022e	04		 DB	 4
  0022f	02		 DB	 2
  00230	04		 DB	 4
  00231	04		 DB	 4
  00232	04		 DB	 4
  00233	04		 DB	 4
  00234	04		 DB	 4
  00235	04		 DB	 4
  00236	04		 DB	 4
  00237	04		 DB	 4
  00238	04		 DB	 4
  00239	03		 DB	 3
?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ENDP		; g_Generic_Call
_TEXT	ENDS
END
