; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MUHelper.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7MUHelper@@6B@				; MUHelper::`vftable'
PUBLIC	??1MUHelper@@UAE@XZ				; MUHelper::~MUHelper
PUBLIC	??_R4MUHelper@@6B@				; MUHelper::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMUHelper@@@8				; MUHelper `RTTI Type Descriptor'
PUBLIC	??_R3MUHelper@@8				; MUHelper::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MUHelper@@8				; MUHelper::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MUHelper@@8			; MUHelper::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EMUHelper@@UAEPAXI@Z:PROC			; MUHelper::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MUHelper@@8
; File e:\work\tranet_version\gs\gameserver\muhelper.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@MUHelper@@8 DD FLAT:??_R0?AVMUHelper@@@8	; MUHelper::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MUHelper@@8
rdata$r	ENDS
;	COMDAT ??_R2MUHelper@@8
rdata$r	SEGMENT
??_R2MUHelper@@8 DD FLAT:??_R1A@?0A@EA@MUHelper@@8	; MUHelper::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MUHelper@@8
rdata$r	SEGMENT
??_R3MUHelper@@8 DD 00H					; MUHelper::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MUHelper@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMUHelper@@@8
_DATA	SEGMENT
??_R0?AVMUHelper@@@8 DD FLAT:??_7type_info@@6B@		; MUHelper `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMUHelper@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MUHelper@@6B@
rdata$r	SEGMENT
??_R4MUHelper@@6B@ DD 00H				; MUHelper::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMUHelper@@@8
	DD	FLAT:??_R3MUHelper@@8
rdata$r	ENDS
;	COMDAT ??_7MUHelper@@6B@
CONST	SEGMENT
??_7MUHelper@@6B@ DD FLAT:??_R4MUHelper@@6B@		; MUHelper::`vftable'
	DD	FLAT:??_EMUHelper@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1MUHelper@@UAE@XZ
_TEXT	SEGMENT
??1MUHelper@@UAE@XZ PROC				; MUHelper::~MUHelper, COMDAT
; _this$ = ecx

; 28   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7MUHelper@@6B@

; 29   : 	// ----
; 30   : }

  00006	c3		 ret	 0
??1MUHelper@@UAE@XZ ENDP				; MUHelper::~MUHelper
_TEXT	ENDS
PUBLIC	?Init@MUHelper@@QAEXXZ				; MUHelper::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@MUHelper@@QAEXXZ
_TEXT	SEGMENT
?Init@MUHelper@@QAEXXZ PROC				; MUHelper::Init, COMDAT
; _this$ = ecx

; 35   : 	ZeroMemory(this->StagePay, sizeof(this->StagePay));

  00000	33 c0		 xor	 eax, eax
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00005	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00008	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 36   : 	this->StageTime	= DEF_HELPER_STAGETIME;

  00011	c7 41 18 c8 00
	05 00		 mov	 DWORD PTR [ecx+24], 327880 ; 000500c8H

; 37   : 	this->PayTime	= DEF_HELPER_PAYTIME;
; 38   : }

  00018	c3		 ret	 0
?Init@MUHelper@@QAEXXZ ENDP				; MUHelper::Init
_TEXT	ENDS
PUBLIC	??_C@_0BN@GMNJALND@?$FLMUHelper?$FN?5Data?5loaded?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadData@MUHelper@@QAEXPAD@Z			; MUHelper::ReadData
EXTRN	_fclose:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0BN@GMNJALND@?$FLMUHelper?$FN?5Data?5loaded?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BN@GMNJALND@?$FLMUHelper?$FN?5Data?5loaded?5?$CFd?5?$CFd?$AA@ DB '['
	DB	'MUHelper] Data loaded %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadData@MUHelper@@QAEXPAD@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
?ReadData@MUHelper@@QAEXPAD@Z PROC			; MUHelper::ReadData, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 43   : 	int Token, Type = 0;
; 44   : 	this->Init();

  00007	e8 00 00 00 00	 call	 ?Init@MUHelper@@QAEXXZ	; MUHelper::Init

; 45   : 	// ----
; 46   : 	SMDFile = fopen(File, "r");

  0000c	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _fopen
  0001a	83 c4 08	 add	 esp, 8
  0001d	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 47   : 	// ----
; 48   : 	if( SMDFile == 0 )

  00022	85 c0		 test	 eax, eax
  00024	75 1c		 jne	 SHORT $LN15@ReadData

; 49   : 	{
; 50   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), File);

  00026	56		 push	 esi
  00027	6a 70		 push	 112			; 00000070H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 104  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN15@ReadData:

; 51   : 		return;
; 52   : 	}
; 53   : 	// ----
; 54   : 	while(true) 
; 55   : 	{
; 56   : 		Token = GetToken();

  00042	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 57   : 		// ----
; 58   : 		if( Token == END )

  00047	83 f8 02	 cmp	 eax, 2
  0004a	0f 84 26 01 00
	00		 je	 $LN20@ReadData
$LL10@ReadData:

; 59   : 		{
; 60   : 			break;
; 61   : 		}
; 62   : 		// ----
; 63   : 		Type = TokenNumber;

  00050	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00056	e8 00 00 00 00	 call	 __ftol2_sse
  0005b	8b f0		 mov	 esi, eax
  0005d	8d 49 00	 npad	 3
$LL7@ReadData:

; 64   : 		// ----
; 65   : 		while(true)
; 66   : 		{
; 67   : 			if( Type == 0 )	//-> Main

  00060	85 f6		 test	 esi, esi
  00062	75 61		 jne	 SHORT $LN5@ReadData

; 68   : 			{
; 69   : 				Token = GetToken();

  00064	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 				// ----
; 71   : 				if( !strcmp("end", TokenString) )

  00069	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL21@ReadData:
  00073	8a 10		 mov	 dl, BYTE PTR [eax]
  00075	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00077	75 1a		 jne	 SHORT $LN22@ReadData
  00079	84 d2		 test	 dl, dl
  0007b	74 12		 je	 SHORT $LN23@ReadData
  0007d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00080	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00083	75 0e		 jne	 SHORT $LN22@ReadData
  00085	83 c0 02	 add	 eax, 2
  00088	83 c1 02	 add	 ecx, 2
  0008b	84 d2		 test	 dl, dl
  0008d	75 e4		 jne	 SHORT $LL21@ReadData
$LN23@ReadData:
  0008f	33 c0		 xor	 eax, eax
  00091	eb 05		 jmp	 SHORT $LN24@ReadData
$LN22@ReadData:
  00093	1b c0		 sbb	 eax, eax
  00095	83 d8 ff	 sbb	 eax, -1
$LN24@ReadData:
  00098	85 c0		 test	 eax, eax
  0009a	0f 84 c8 00 00
	00		 je	 $LN18@ReadData

; 72   : 				{
; 73   : 					break;
; 74   : 				}
; 75   : 				// ----
; 76   : 				this->StageTime	= TokenNumber;

  000a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a6	e8 00 00 00 00	 call	 __ftol2_sse
  000ab	66 89 47 18	 mov	 WORD PTR [edi+24], ax

; 77   : 				Token = GetToken();

  000af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 78   : 				this->PayTime	= TokenNumber;

  000b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ba	e8 00 00 00 00	 call	 __ftol2_sse
  000bf	66 89 47 1a	 mov	 WORD PTR [edi+26], ax
  000c3	eb 9b		 jmp	 SHORT $LL7@ReadData
$LN5@ReadData:

; 79   : 			}
; 80   : 			else if( Type == 1 ) //-> Stage pay

  000c5	83 fe 01	 cmp	 esi, 1
  000c8	75 96		 jne	 SHORT $LL7@ReadData

; 81   : 			{
; 82   : 				Token = GetToken();

  000ca	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 				// ----
; 84   : 				if( !strcmp("end", TokenString) )

  000cf	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000d4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000d9	8d a4 24 00 00
	00 00		 npad	 7
$LL25@ReadData:
  000e0	8a 10		 mov	 dl, BYTE PTR [eax]
  000e2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000e4	75 1a		 jne	 SHORT $LN26@ReadData
  000e6	84 d2		 test	 dl, dl
  000e8	74 12		 je	 SHORT $LN27@ReadData
  000ea	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000ed	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000f0	75 0e		 jne	 SHORT $LN26@ReadData
  000f2	83 c0 02	 add	 eax, 2
  000f5	83 c1 02	 add	 ecx, 2
  000f8	84 d2		 test	 dl, dl
  000fa	75 e4		 jne	 SHORT $LL25@ReadData
$LN27@ReadData:
  000fc	33 c0		 xor	 eax, eax
  000fe	eb 05		 jmp	 SHORT $LN28@ReadData
$LN26@ReadData:
  00100	1b c0		 sbb	 eax, eax
  00102	83 d8 ff	 sbb	 eax, -1
$LN28@ReadData:
  00105	85 c0		 test	 eax, eax
  00107	74 5f		 je	 SHORT $LN18@ReadData

; 85   : 				{
; 86   : 					break;
; 87   : 				}
; 88   : 				// ----
; 89   : 				this->StagePay[0] = TokenNumber;

  00109	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0010f	e8 00 00 00 00	 call	 __ftol2_sse
  00114	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 90   : 				Token = GetToken();

  00117	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 				this->StagePay[1] = TokenNumber;

  0011c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00122	e8 00 00 00 00	 call	 __ftol2_sse
  00127	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 92   : 				Token = GetToken();

  0012a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 93   : 				this->StagePay[2] = TokenNumber;

  0012f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00135	e8 00 00 00 00	 call	 __ftol2_sse
  0013a	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 94   : 				Token = GetToken();

  0013d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 95   : 				this->StagePay[3] = TokenNumber;

  00142	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00148	e8 00 00 00 00	 call	 __ftol2_sse
  0014d	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 96   : 				Token = GetToken();

  00150	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 				this->StagePay[4] = TokenNumber;

  00155	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015b	e8 00 00 00 00	 call	 __ftol2_sse
  00160	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 98   : 			}
; 99   : 		}

  00163	e9 f8 fe ff ff	 jmp	 $LL7@ReadData
$LN18@ReadData:

; 51   : 		return;
; 52   : 	}
; 53   : 	// ----
; 54   : 	while(true) 
; 55   : 	{
; 56   : 		Token = GetToken();

  00168	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 57   : 		// ----
; 58   : 		if( Token == END )

  0016d	83 f8 02	 cmp	 eax, 2
  00170	0f 85 da fe ff
	ff		 jne	 $LL10@ReadData
$LN20@ReadData:

; 100  : 	}
; 101  : 	// ----
; 102  : 	LogAddTD("[MUHelper] Data loaded %d %d", this->StageTime, this->PayTime);

  00176	0f bf 47 1a	 movsx	 eax, WORD PTR [edi+26]
  0017a	0f bf 4f 18	 movsx	 ecx, WORD PTR [edi+24]
  0017e	50		 push	 eax
  0017f	51		 push	 ecx
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GMNJALND@?$FLMUHelper?$FN?5Data?5loaded?5?$CFd?5?$CFd?$AA@
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 103  : 	fclose(SMDFile);

  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 _fclose
  00197	83 c4 10	 add	 esp, 16			; 00000010H
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi

; 104  : }

  0019c	5d		 pop	 ebp
  0019d	c2 04 00	 ret	 4
?ReadData@MUHelper@@QAEXPAD@Z ENDP			; MUHelper::ReadData
_TEXT	ENDS
PUBLIC	??_C@_0N@LECHJCFG@MUHelper?4dat?$AA@		; `string'
PUBLIC	?Load@MUHelper@@QAEXXZ				; MUHelper::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0N@LECHJCFG@MUHelper?4dat?$AA@
CONST	SEGMENT
??_C@_0N@LECHJCFG@MUHelper?4dat?$AA@ DB 'MUHelper.dat', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@MUHelper@@QAEXXZ
_TEXT	SEGMENT
?Load@MUHelper@@QAEXXZ PROC				; MUHelper::Load, COMDAT
; _this$ = ecx

; 108  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 109  : 	this->ReadData(gDirPath.GetNewPath("MUHelper.dat"));

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LECHJCFG@MUHelper?4dat?$AA@
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0000d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00012	50		 push	 eax
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?ReadData@MUHelper@@QAEXPAD@Z ; MUHelper::ReadData
  0001a	5e		 pop	 esi

; 110  : }

  0001b	c3		 ret	 0
?Load@MUHelper@@QAEXXZ ENDP				; MUHelper::Load
_TEXT	ENDS
PUBLIC	??_C@_0CF@DCCNDCBA@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5cl@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Close@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z	; MUHelper::Close
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
;	COMDAT ??_C@_0CF@DCCNDCBA@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5cl@
CONST	SEGMENT
??_C@_0CF@DCCNDCBA@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5cl@ DB '['
	DB	'MUHelper] [%s] [%s] has been closed', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Close@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pAnswer$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?Close@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z PROC		; MUHelper::Close, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]

; 332  : #if(FIX_MUHELPER_TP == TRUE)
; 333  : 	if(lpUser->MuHelperTeleportFix)

  00015	33 db		 xor	 ebx, ebx
  00017	38 9e cd 28 00
	00		 cmp	 BYTE PTR [esi+10445], bl
  0001d	74 18		 je	 SHORT $LN1@Close

; 334  : 	{
; 335  : 		lpUser->MuHelperTeleportFix = false;

  0001f	88 9e cd 28 00
	00		 mov	 BYTE PTR [esi+10445], bl
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx

; 352  : }

  00027	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002a	33 cd		 xor	 ecx, ebp
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN1@Close:

; 336  : 		return;
; 337  : 	}
; 338  : #endif
; 339  : 	MUHELPER_ANS_DATA pAnswer = { 0 };

  00037	33 c0		 xor	 eax, eax

; 340  : 	PHeadSubSetB((LPBYTE)&pAnswer, 0xBF, 0x51, sizeof(pAnswer));

  00039	6a 10		 push	 16			; 00000010H
  0003b	6a 51		 push	 81			; 00000051H
  0003d	89 45 ed	 mov	 DWORD PTR _pAnswer$[ebp+1], eax
  00040	89 45 f1	 mov	 DWORD PTR _pAnswer$[ebp+5], eax
  00043	89 45 f5	 mov	 DWORD PTR _pAnswer$[ebp+9], eax
  00046	66 89 45 f9	 mov	 WORD PTR _pAnswer$[ebp+13], ax
  0004a	88 45 fb	 mov	 BYTE PTR _pAnswer$[ebp+15], al
  0004d	8d 45 ec	 lea	 eax, DWORD PTR _pAnswer$[ebp]
  00050	68 bf 00 00 00	 push	 191			; 000000bfH
  00055	50		 push	 eax
  00056	88 5d ec	 mov	 BYTE PTR _pAnswer$[ebp], bl
  00059	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 341  : 	// ----
; 342  : 	pAnswer.Mode = 1;
; 343  : 	// ----
; 344  : 	lpUser->m_MUHelperOn		= false;
; 345  : 	lpUser->m_MUHelperReadyPay	= false;
; 346  : 	lpUser->m_MUHelperStage		= 1;
; 347  : 	lpUser->m_MUHelperTick		= 0;
; 348  : 	// ----
; 349  : 	DataSend(lpUser->m_Index, (LPBYTE)&pAnswer, pAnswer.h.size);

  0005e	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pAnswer$[ebp+1]
  00062	b0 01		 mov	 al, 1
  00064	51		 push	 ecx
  00065	8d 55 ec	 lea	 edx, DWORD PTR _pAnswer$[ebp]
  00068	88 45 f8	 mov	 BYTE PTR _pAnswer$[ebp+12], al
  0006b	88 86 a5 27 00
	00		 mov	 BYTE PTR [esi+10149], al
  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	52		 push	 edx
  00074	50		 push	 eax
  00075	66 89 9e a3 27
	00 00		 mov	 WORD PTR [esi+10147], bx
  0007c	89 9e a8 27 00
	00		 mov	 DWORD PTR [esi+10152], ebx
  00082	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 350  : 	// ----
; 351  : 	LogAddTD("[MUHelper] [%s] [%s] has been closed", lpUser->AccountID, lpUser->Name);

  00087	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  0008a	51		 push	 ecx
  0008b	83 c6 6c	 add	 esi, 108		; 0000006cH
  0008e	56		 push	 esi
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DCCNDCBA@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5cl@
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 352  : }

  0009a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009d	83 c4 28	 add	 esp, 40			; 00000028H
  000a0	5e		 pop	 esi
  000a1	33 cd		 xor	 ecx, ebp
  000a3	5b		 pop	 ebx
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?Close@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z ENDP		; MUHelper::Close
_TEXT	ENDS
PUBLIC	?SetStage@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z	; MUHelper::SetStage
; Function compile flags: /Ogtp
;	COMDAT ?SetStage@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_WorkTime$ = 12						; size = 2
?SetStage@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z PROC	; MUHelper::SetStage, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 357  : 	if( lpUser->m_MUHelperStage < MAX_HELPER_STAGE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00007	8a 86 a5 27 00
	00		 mov	 al, BYTE PTR [esi+10149]
  0000d	3c 05		 cmp	 al, 5
  0000f	73 21		 jae	 SHORT $LN7@SetStage

; 358  : 	{
; 359  : 		lpUser->m_MUHelperStage = WorkTime / this->StageTime;	//-> 1 stage = 3.2h

  00011	0f b7 45 0c	 movzx	 eax, WORD PTR _WorkTime$[ebp]
  00015	0f bf 49 18	 movsx	 ecx, WORD PTR [ecx+24]
  00019	99		 cdq
  0001a	f7 f9		 idiv	 ecx
  0001c	88 86 a5 27 00
	00		 mov	 BYTE PTR [esi+10149], al

; 360  : 		// ----
; 361  : 		if( lpUser->m_MUHelperStage < 1 )

  00022	3c 01		 cmp	 al, 1
  00024	73 15		 jae	 SHORT $LN1@SetStage

; 362  : 		{
; 363  : 			lpUser->m_MUHelperStage = 1;

  00026	c6 86 a5 27 00
	00 01		 mov	 BYTE PTR [esi+10149], 1
  0002d	5e		 pop	 esi

; 369  : 	}
; 370  : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN7@SetStage:

; 364  : 		}
; 365  : 	}
; 366  : 	else if( lpUser->m_MUHelperStage > MAX_HELPER_STAGE )

  00032	76 07		 jbe	 SHORT $LN1@SetStage

; 367  : 	{
; 368  : 		lpUser->m_MUHelperStage = MAX_HELPER_STAGE;

  00034	c6 86 a5 27 00
	00 05		 mov	 BYTE PTR [esi+10149], 5
$LN1@SetStage:
  0003b	5e		 pop	 esi

; 369  : 	}
; 370  : }

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?SetStage@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z ENDP	; MUHelper::SetStage
_TEXT	ENDS
PUBLIC	?GetMoney@MUHelper@@QAEHPAUOBJECTSTRUCT@@@Z	; MUHelper::GetMoney
; Function compile flags: /Ogtp
;	COMDAT ?GetMoney@MUHelper@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
?GetMoney@MUHelper@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; MUHelper::GetMoney, COMDAT
; _this$ = ecx

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 375  : 	int Level = lpUser->Level + lpUser->MLevel;
; 376  : 	return Level * this->StagePay[lpUser->m_MUHelperStage-1];

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpUser$[ebp]
  00006	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  0000d	56		 push	 esi
  0000e	0f bf b2 be 00
	00 00		 movsx	 esi, WORD PTR [edx+190]
  00015	0f b6 92 a5 27
	00 00		 movzx	 edx, BYTE PTR [edx+10149]
  0001c	03 c6		 add	 eax, esi
  0001e	0f af 04 91	 imul	 eax, DWORD PTR [ecx+edx*4]
  00022	5e		 pop	 esi

; 377  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?GetMoney@MUHelper@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; MUHelper::GetMoney
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CheckMoney@MUHelper@@QAE_NPAUOBJECTSTRUCT@@@Z	; MUHelper::CheckMoney
; Function compile flags: /Ogtp
;	COMDAT ?CheckMoney@MUHelper@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pAnswer$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?CheckMoney@MUHelper@@QAE_NPAUOBJECTSTRUCT@@@Z PROC	; MUHelper::CheckMoney, COMDAT
; _this$ = ecx

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00014	57		 push	 edi

; 382  : 	MUHELPER_ANS_DATA pAnswer = { 0 };

  00015	33 c0		 xor	 eax, eax

; 383  : 	PHeadSubSetB((LPBYTE)&pAnswer, 0xBF, 0x51, sizeof(pAnswer));

  00017	6a 10		 push	 16			; 00000010H
  00019	6a 51		 push	 81			; 00000051H
  0001b	88 45 ec	 mov	 BYTE PTR _pAnswer$[ebp], al
  0001e	89 45 ed	 mov	 DWORD PTR _pAnswer$[ebp+1], eax
  00021	89 45 f1	 mov	 DWORD PTR _pAnswer$[ebp+5], eax
  00024	89 45 f5	 mov	 DWORD PTR _pAnswer$[ebp+9], eax
  00027	66 89 45 f9	 mov	 WORD PTR _pAnswer$[ebp+13], ax
  0002b	88 45 fb	 mov	 BYTE PTR _pAnswer$[ebp+15], al
  0002e	8d 45 ec	 lea	 eax, DWORD PTR _pAnswer$[ebp]
  00031	68 bf 00 00 00	 push	 191			; 000000bfH
  00036	50		 push	 eax
  00037	8b f9		 mov	 edi, ecx
  00039	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 384  : 	// ----
; 385  : 	pAnswer.Mode = 2;
; 386  : 	// ----
; 387  : 	if( lpUser->Money < this->GetMoney(lpUser) )

  00041	56		 push	 esi
  00042	8b cf		 mov	 ecx, edi
  00044	c6 45 f8 02	 mov	 BYTE PTR _pAnswer$[ebp+12], 2
  00048	e8 00 00 00 00	 call	 ?GetMoney@MUHelper@@QAEHPAUOBJECTSTRUCT@@@Z ; MUHelper::GetMoney
  0004d	39 86 f0 00 00
	00		 cmp	 DWORD PTR [esi+240], eax
  00053	7d 28		 jge	 SHORT $LN1@CheckMoney

; 388  : 	{
; 389  : 		DataSend(lpUser->m_Index, (LPBYTE)&pAnswer, pAnswer.h.size);

  00055	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pAnswer$[ebp+1]
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	51		 push	 ecx
  0005c	8d 55 ec	 lea	 edx, DWORD PTR _pAnswer$[ebp]
  0005f	52		 push	 edx
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	5f		 pop	 edi

; 390  : 		return false;

  0006a	32 c0		 xor	 al, al
  0006c	5e		 pop	 esi

; 391  : 	}
; 392  : 	// ----
; 393  : 	return true;
; 394  : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
$LN1@CheckMoney:
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	5f		 pop	 edi
  00081	33 cd		 xor	 ecx, ebp
  00083	b0 01		 mov	 al, 1
  00085	5e		 pop	 esi
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?CheckMoney@MUHelper@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP	; MUHelper::CheckMoney
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendMoney@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z	; MUHelper::SendMoney
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
; Function compile flags: /Ogtp
;	COMDAT ?SendMoney@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z
_TEXT	SEGMENT
_pAnswer$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
_WorkTime$ = 12						; size = 2
?SendMoney@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z PROC	; MUHelper::SendMoney, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00014	57		 push	 edi

; 399  : 	MUHELPER_ANS_DATA pAnswer = { 0 };

  00015	33 c0		 xor	 eax, eax

; 400  : 	PHeadSubSetB((LPBYTE)&pAnswer, 0xBF, 0x51, sizeof(pAnswer));

  00017	6a 10		 push	 16			; 00000010H
  00019	6a 51		 push	 81			; 00000051H
  0001b	89 45 ed	 mov	 DWORD PTR _pAnswer$[ebp+1], eax
  0001e	89 45 f1	 mov	 DWORD PTR _pAnswer$[ebp+5], eax
  00021	89 45 f5	 mov	 DWORD PTR _pAnswer$[ebp+9], eax
  00024	66 89 45 f9	 mov	 WORD PTR _pAnswer$[ebp+13], ax
  00028	88 45 fb	 mov	 BYTE PTR _pAnswer$[ebp+15], al
  0002b	8d 45 ec	 lea	 eax, DWORD PTR _pAnswer$[ebp]
  0002e	68 bf 00 00 00	 push	 191			; 000000bfH
  00033	50		 push	 eax
  00034	8b f9		 mov	 edi, ecx
  00036	c6 45 ec 00	 mov	 BYTE PTR _pAnswer$[ebp], 0
  0003a	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0003f	83 c4 10	 add	 esp, 16			; 00000010H

; 401  : 	// ----
; 402  : 	pAnswer.Money	= this->GetMoney(lpUser);

  00042	56		 push	 esi
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ?GetMoney@MUHelper@@QAEHPAUOBJECTSTRUCT@@@Z ; MUHelper::GetMoney

; 403  : 	pAnswer.Mode	= 0;
; 404  : 	pAnswer.Time	= WorkTime;
; 405  : 	// ----
; 406  : 	lpUser->Money -= pAnswer.Money;

  0004a	29 86 f0 00 00
	00		 sub	 DWORD PTR [esi+240], eax

; 407  : 	GCMoneySend(lpUser->m_Index, lpUser->Money);

  00050	8b 16		 mov	 edx, DWORD PTR [esi]
  00052	66 8b 4d 0c	 mov	 cx, WORD PTR _WorkTime$[ebp]
  00056	89 45 f4	 mov	 DWORD PTR _pAnswer$[ebp+8], eax
  00059	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  0005f	50		 push	 eax
  00060	52		 push	 edx
  00061	c6 45 f8 00	 mov	 BYTE PTR _pAnswer$[ebp+12], 0
  00065	66 89 4d f0	 mov	 WORD PTR _pAnswer$[ebp+4], cx
  00069	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 408  : 	// ----
; 409  : 	lpUser->m_MUHelperReadyPay = false;
; 410  : 	DataSend(lpUser->m_Index, (LPBYTE)&pAnswer, pAnswer.h.size);

  0006e	0f b6 45 ed	 movzx	 eax, BYTE PTR _pAnswer$[ebp+1]
  00072	8b 16		 mov	 edx, DWORD PTR [esi]
  00074	50		 push	 eax
  00075	8d 4d ec	 lea	 ecx, DWORD PTR _pAnswer$[ebp]
  00078	51		 push	 ecx
  00079	52		 push	 edx
  0007a	c6 86 a4 27 00
	00 00		 mov	 BYTE PTR [esi+10148], 0
  00081	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 411  : }

  00086	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	83 c4 14	 add	 esp, 20			; 00000014H
  0008c	5f		 pop	 edi
  0008d	33 cd		 xor	 ecx, ebp
  0008f	5e		 pop	 esi
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
?SendMoney@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z ENDP	; MUHelper::SendMoney
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SaveMacro@MUHelper@@QAEXHPAUMUHELPER_MACRO_CLIENT@@@Z ; MUHelper::SaveMacro
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?PHeadSetW@@YAXPAEEH@Z:PROC			; PHeadSetW
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SaveMacro@MUHelper@@QAEXHPAUMUHELPER_MACRO_CLIENT@@@Z
_TEXT	SEGMENT
_pRequest$ = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpRequest$ = 12					; size = 4
?SaveMacro@MUHelper@@QAEXHPAUMUHELPER_MACRO_CLIENT@@@Z PROC ; MUHelper::SaveMacro, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _lpRequest$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _UserIndex$[ebp]

; 416  : 	LPOBJ lpUser = &gObj[UserIndex];

  0001c	8b f7		 mov	 esi, edi
  0001e	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00024	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 417  : 	// ----
; 418  : 	MUHELPER_MACRO_DS	pRequest = { 0 };

  0002a	68 1f 01 00 00	 push	 287			; 0000011fH
  0002f	8d 85 dd fe ff
	ff		 lea	 eax, DWORD PTR _pRequest$[ebp+1]
  00035	6a 00		 push	 0
  00037	50		 push	 eax
  00038	c6 85 dc fe ff
	ff 00		 mov	 BYTE PTR _pRequest$[ebp], 0
  0003f	e8 00 00 00 00	 call	 _memset

; 419  : 	PHeadSetW((LPBYTE)&pRequest, 0x18, sizeof(MUHELPER_MACRO_DS));

  00044	68 20 01 00 00	 push	 288			; 00000120H
  00049	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _pRequest$[ebp]
  0004f	6a 18		 push	 24			; 00000018H
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?PHeadSetW@@YAXPAEEH@Z	; PHeadSetW

; 420  : 	// ----
; 421  : 	memcpy(pRequest.AccountID, lpUser->AccountID, MAX_IDSTRING);

  00057	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0005a	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+8], edx
  00060	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00063	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+12], eax
  00069	0f b7 4e 74	 movzx	 ecx, WORD PTR [esi+116]
  0006d	66 89 8d ec fe
	ff ff		 mov	 WORD PTR _pRequest$[ebp+16], cx

; 422  : 	memcpy(pRequest.Name, lpUser->Name, MAX_IDSTRING);

  00074	8b 56 77	 mov	 edx, DWORD PTR [esi+119]
  00077	89 95 ef fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+19], edx
  0007d	8b 46 7b	 mov	 eax, DWORD PTR [esi+123]
  00080	89 85 f3 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+23], eax
  00086	0f b7 4e 7f	 movzx	 ecx, WORD PTR [esi+127]
  0008a	66 89 8d f7 fe
	ff ff		 mov	 WORD PTR _pRequest$[ebp+27], cx
  00091	83 c4 18	 add	 esp, 24			; 00000018H

; 423  : 	pRequest.aIndex = UserIndex;

  00094	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+4], edi

; 424  : 	memcpy(pRequest.btMacroData, lpRequest->MacroBind, sizeof(pRequest.btMacroData));

  0009a	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  0009d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000a2	8d bd fb fe ff
	ff		 lea	 edi, DWORD PTR _pRequest$[ebp+31]

; 425  : 	// ----
; 426  : 	cDBSMng.Send((char*)&pRequest, sizeof(MUHELPER_MACRO_DS));

  000a8	68 20 01 00 00	 push	 288			; 00000120H
  000ad	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _pRequest$[ebp]
  000b3	f3 a5		 rep movsd
  000b5	52		 push	 edx
  000b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000bb	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 427  : }

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	33 cd		 xor	 ecx, ebp
  000c7	5b		 pop	 ebx
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 08 00	 ret	 8
?SaveMacro@MUHelper@@QAEXHPAUMUHELPER_MACRO_CLIENT@@@Z ENDP ; MUHelper::SaveMacro
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ReqMacro@MUHelper@@QAEXH@Z			; MUHelper::ReqMacro
; Function compile flags: /Ogtp
;	COMDAT ?ReqMacro@MUHelper@@QAEXH@Z
_TEXT	SEGMENT
_pRequest$ = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?ReqMacro@MUHelper@@QAEXH@Z PROC			; MUHelper::ReqMacro, COMDAT
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _UserIndex$[ebp]

; 432  : 	LPOBJ lpUser = &gObj[UserIndex];

  00018	8b f7		 mov	 esi, edi
  0001a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00020	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 433  : 	// ----
; 434  : 	MUHELPER_MACRO_DS	pRequest = { 0 };

  00026	68 1f 01 00 00	 push	 287			; 0000011fH
  0002b	8d 85 dd fe ff
	ff		 lea	 eax, DWORD PTR _pRequest$[ebp+1]
  00031	6a 00		 push	 0
  00033	50		 push	 eax
  00034	c6 85 dc fe ff
	ff 00		 mov	 BYTE PTR _pRequest$[ebp], 0
  0003b	e8 00 00 00 00	 call	 _memset

; 435  : 	PHeadSetW((LPBYTE)&pRequest, 0x17, sizeof(MUHELPER_MACRO_DS));

  00040	68 20 01 00 00	 push	 288			; 00000120H
  00045	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _pRequest$[ebp]
  0004b	6a 17		 push	 23			; 00000017H
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ?PHeadSetW@@YAXPAEEH@Z	; PHeadSetW

; 436  : 	// ----
; 437  : 	memcpy(pRequest.AccountID, lpUser->AccountID, MAX_IDSTRING);

  00053	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00056	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+8], edx
  0005c	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  0005f	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+12], eax
  00065	0f b7 4e 74	 movzx	 ecx, WORD PTR [esi+116]
  00069	66 89 8d ec fe
	ff ff		 mov	 WORD PTR _pRequest$[ebp+16], cx

; 438  : 	memcpy(pRequest.Name, lpUser->Name, MAX_IDSTRING);

  00070	8b 56 77	 mov	 edx, DWORD PTR [esi+119]
  00073	89 95 ef fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+19], edx
  00079	8b 46 7b	 mov	 eax, DWORD PTR [esi+123]
  0007c	89 85 f3 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+23], eax
  00082	0f b7 4e 7f	 movzx	 ecx, WORD PTR [esi+127]
  00086	83 c4 18	 add	 esp, 24			; 00000018H

; 439  : 	pRequest.aIndex = UserIndex;
; 440  : 	// ----
; 441  : 	cDBSMng.Send((char*)&pRequest, sizeof(MUHELPER_MACRO_DS));

  00089	68 20 01 00 00	 push	 288			; 00000120H
  0008e	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _pRequest$[ebp]
  00094	66 89 8d f7 fe
	ff ff		 mov	 WORD PTR _pRequest$[ebp+27], cx
  0009b	52		 push	 edx
  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000a1	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _pRequest$[ebp+4], edi
  000a7	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 442  : }

  000ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000af	5f		 pop	 edi
  000b0	33 cd		 xor	 ecx, ebp
  000b2	5e		 pop	 esi
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
?ReqMacro@MUHelper@@QAEXH@Z ENDP			; MUHelper::ReqMacro
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendMacro@MUHelper@@QAEXPAUMUHELPER_MACRO_DS@@@Z ; MUHelper::SendMacro
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?SendMacro@MUHelper@@QAEXPAUMUHELPER_MACRO_DS@@@Z
_TEXT	SEGMENT
_pAnswer$ = -268					; size = 261
__$ArrayPad$ = -4					; size = 4
_lpRequest$ = 8						; size = 4
?SendMacro@MUHelper@@QAEXPAUMUHELPER_MACRO_DS@@@Z PROC	; MUHelper::SendMacro, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpRequest$[ebp]

; 447  : 	if( lpRequest->btResult || !gObjIsConnected(lpRequest->aIndex) )

  00017	80 7b 1e 00	 cmp	 BYTE PTR [ebx+30], 0
  0001b	75 6c		 jne	 SHORT $LN1@SendMacro
  0001d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	74 5c		 je	 SHORT $LN1@SendMacro

; 448  : 	{
; 449  : 		return;
; 450  : 	}
; 451  : 	// ----
; 452  : 	MUHELPER_MACRO_CLIENT pAnswer = { 0 };

  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	68 04 01 00 00	 push	 260			; 00000104H
  00034	8d 8d f5 fe ff
	ff		 lea	 ecx, DWORD PTR _pAnswer$[ebp+1]
  0003a	6a 00		 push	 0
  0003c	51		 push	 ecx
  0003d	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _pAnswer$[ebp], 0
  00044	e8 00 00 00 00	 call	 _memset

; 453  : 	PHeadSetW((LPBYTE)&pAnswer, 0xAE, sizeof(MUHELPER_MACRO_CLIENT));

  00049	68 05 01 00 00	 push	 261			; 00000105H
  0004e	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _pAnswer$[ebp]
  00054	68 ae 00 00 00	 push	 174			; 000000aeH
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?PHeadSetW@@YAXPAEEH@Z	; PHeadSetW

; 454  : 	// ----
; 455  : 	memcpy(pAnswer.MacroBind, lpRequest->btMacroData, sizeof(lpRequest->btMacroData));

  0005f	8d 73 1f	 lea	 esi, DWORD PTR [ebx+31]
  00062	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00067	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR _pAnswer$[ebp+4]

; 456  : 	// ----
; 457  : 	DataSend(lpRequest->aIndex, (LPBYTE)&pAnswer, sizeof(MUHELPER_MACRO_CLIENT));

  0006d	68 05 01 00 00	 push	 261			; 00000105H
  00072	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pAnswer$[ebp]
  00078	f3 a5		 rep movsd
  0007a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0007d	50		 push	 eax
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00084	83 c4 24	 add	 esp, 36			; 00000024H
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
$LN1@SendMacro:

; 458  : }

  00089	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008c	33 cd		 xor	 ecx, ebp
  0008e	5b		 pop	 ebx
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?SendMacro@MUHelper@@QAEXPAUMUHELPER_MACRO_DS@@@Z ENDP	; MUHelper::SendMacro
_TEXT	ENDS
PUBLIC	??0MUHelper@@QAE@XZ				; MUHelper::MUHelper
; Function compile flags: /Ogtp
;	COMDAT ??0MUHelper@@QAE@XZ
_TEXT	SEGMENT
??0MUHelper@@QAE@XZ PROC				; MUHelper::MUHelper, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7MUHelper@@6B@

; 23   : 	this->Init();

  00006	e8 00 00 00 00	 call	 ?Init@MUHelper@@QAEXXZ	; MUHelper::Init

; 24   : }

  0000b	8b c1		 mov	 eax, ecx
  0000d	c3		 ret	 0
??0MUHelper@@QAE@XZ ENDP				; MUHelper::MUHelper
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GMUHelper@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMUHelper@@UAEPAXI@Z PROC				; MUHelper::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1MUHelper@@UAE@XZ	; MUHelper::~MUHelper
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GMUHelper@@UAEPAXI@Z ENDP				; MUHelper::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0CG@NKJDGCHK@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5st@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Start@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z	; MUHelper::Start
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
;	COMDAT ??_C@_0CG@NKJDGCHK@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5st@
CONST	SEGMENT
??_C@_0CG@NKJDGCHK@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5st@ DB '['
	DB	'MUHelper] [%s] [%s] has been started', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Start@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pAnswer$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?Start@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z PROC		; MUHelper::Start, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00014	57		 push	 edi

; 141  : 	if( !gObjIsConnected(lpUser) || lpUser->Connected != PLAYER_PLAYING || !this->CheckMoney(lpUser) )

  00015	56		 push	 esi
  00016	8b f9		 mov	 edi, ecx
  00018	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  0001d	83 c4 04	 add	 esp, 4
  00020	85 c0		 test	 eax, eax
  00022	0f 84 9c 00 00
	00		 je	 $LN2@Start
  00028	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  0002c	0f 85 92 00 00
	00		 jne	 $LN2@Start
  00032	56		 push	 esi
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?CheckMoney@MUHelper@@QAE_NPAUOBJECTSTRUCT@@@Z ; MUHelper::CheckMoney
  0003a	84 c0		 test	 al, al
  0003c	0f 84 82 00 00
	00		 je	 $LN2@Start

; 142  : 	{
; 143  : 		return;
; 144  : 	}
; 145  : 
; 146  : 	if(g_ZtLicense.CheckUser(eZtUB::MuPrime))

  00042	6a 5a		 push	 90			; 0000005aH
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00049	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0004e	84 c0		 test	 al, al
  00050	75 72		 jne	 SHORT $LN2@Start

; 147  : 	{
; 148  : 		return;
; 149  : 	}
; 150  : 
; 151  : 	// ----
; 152  : 	MUHELPER_ANS_DATA pAnswer = { 0 };

  00052	88 45 ec	 mov	 BYTE PTR _pAnswer$[ebp], al
  00055	33 c0		 xor	 eax, eax

; 153  : 	PHeadSubSetB((LPBYTE)&pAnswer, 0xBF, 0x51, sizeof(pAnswer));

  00057	6a 10		 push	 16			; 00000010H
  00059	6a 51		 push	 81			; 00000051H
  0005b	89 45 ed	 mov	 DWORD PTR _pAnswer$[ebp+1], eax
  0005e	89 45 f1	 mov	 DWORD PTR _pAnswer$[ebp+5], eax
  00061	89 45 f5	 mov	 DWORD PTR _pAnswer$[ebp+9], eax
  00064	66 89 45 f9	 mov	 WORD PTR _pAnswer$[ebp+13], ax
  00068	88 45 fb	 mov	 BYTE PTR _pAnswer$[ebp+15], al
  0006b	8d 45 ec	 lea	 eax, DWORD PTR _pAnswer$[ebp]
  0006e	68 bf 00 00 00	 push	 191			; 000000bfH
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 154  : 	// ----
; 155  : 	pAnswer.Mode = 0;
; 156  : 	// ----
; 157  : 	lpUser->m_MUHelperOn		= true;

  00079	b0 01		 mov	 al, 1
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c6 45 f8 00	 mov	 BYTE PTR _pAnswer$[ebp+12], 0
  00082	66 c7 86 a3 27
	00 00 01 00	 mov	 WORD PTR [esi+10147], 1

; 158  : 	lpUser->m_MUHelperReadyPay	= false;
; 159  : 	lpUser->m_MUHelperStage		= 1;

  0008b	88 86 a5 27 00
	00		 mov	 BYTE PTR [esi+10149], al

; 160  : 	lpUser->m_MUHelperTick		= GetTickCount();

  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 161  : 	// ----
; 162  : 	DataSend(lpUser->m_Index, (LPBYTE)&pAnswer, pAnswer.h.size);

  00097	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pAnswer$[ebp+1]
  0009b	51		 push	 ecx
  0009c	8d 55 ec	 lea	 edx, DWORD PTR _pAnswer$[ebp]
  0009f	89 86 a8 27 00
	00		 mov	 DWORD PTR [esi+10152], eax
  000a5	8b 06		 mov	 eax, DWORD PTR [esi]
  000a7	52		 push	 edx
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 163  : 	LogAddTD("[MUHelper] [%s] [%s] has been started", lpUser->AccountID, lpUser->Name);

  000ae	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  000b1	51		 push	 ecx
  000b2	83 c6 6c	 add	 esi, 108		; 0000006cH
  000b5	56		 push	 esi
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NKJDGCHK@?$FLMUHelper?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5has?5been?5st@
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c1	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@Start:

; 164  : }

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	5f		 pop	 edi
  000c8	33 cd		 xor	 ecx, ebp
  000ca	5e		 pop	 esi
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
?Start@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z ENDP		; MUHelper::Start
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Work@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z		; MUHelper::Work
EXTRN	?UseSkill@CObjUseSkill@@QAEXHHPAVCMagicInf@@@Z:PROC ; CObjUseSkill::UseSkill
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
EXTRN	?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetMagicSearch
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	?ZtUserInSafeZone@@YA_NH@Z:PROC			; ZtUserInSafeZone
; Function compile flags: /Ogtp
;	COMDAT ?Work@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv286 = -24						; size = 4
_time$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?Work@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z PROC		; MUHelper::Work, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]

; 169  : 	if( !lpUser->m_MUHelperOn )

  00015	80 be a3 27 00
	00 00		 cmp	 BYTE PTR [esi+10147], 0
  0001c	8b d9		 mov	 ebx, ecx
  0001e	0f 84 8d 02 00
	00		 je	 $LN1@Work

; 170  : 	{
; 171  : 		return;
; 172  : 	}
; 173  : 	// ----
; 174  : 	DWORD CurrentTick	= GetTickCount();

  00024	57		 push	 edi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002b	8b c8		 mov	 ecx, eax

; 175  : 	DWORD WorkTime		= (CurrentTick - lpUser->m_MUHelperTick) / 60000;

  0002d	2b 8e a8 27 00
	00		 sub	 ecx, DWORD PTR [esi+10152]
  00033	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00038	f7 e1		 mul	 ecx

; 176  : 	// ----
; 177  : 	if( WorkTime > this->StageTime * MAX_HELPER_STAGE || !this->CheckMoney(lpUser) )

  0003a	0f bf 43 18	 movsx	 eax, WORD PTR [ebx+24]
  0003e	8b fa		 mov	 edi, edx
  00040	c1 ef 0e	 shr	 edi, 14			; 0000000eH
  00043	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00046	3b f8		 cmp	 edi, eax
  00048	0f 87 5a 02 00
	00		 ja	 $LN38@Work
  0004e	56		 push	 esi
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?CheckMoney@MUHelper@@QAE_NPAUOBJECTSTRUCT@@@Z ; MUHelper::CheckMoney
  00056	84 c0		 test	 al, al
  00058	0f 84 4a 02 00
	00		 je	 $LN38@Work

; 180  : 		return;
; 181  : 	}
; 182  : 	// ----
; 183  : 	this->SetStage(lpUser, WorkTime);

  0005e	57		 push	 edi
  0005f	56		 push	 esi
  00060	8b cb		 mov	 ecx, ebx
  00062	e8 00 00 00 00	 call	 ?SetStage@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z ; MUHelper::SetStage

; 184  : 	// ----
; 185  : 	if( WorkTime % this->PayTime == this->PayTime - 1 )

  00067	0f bf 4b 1a	 movsx	 ecx, WORD PTR [ebx+26]
  0006b	33 d2		 xor	 edx, edx
  0006d	8b c7		 mov	 eax, edi
  0006f	f7 f1		 div	 ecx
  00071	49		 dec	 ecx
  00072	3b d1		 cmp	 edx, ecx
  00074	75 07		 jne	 SHORT $LN37@Work

; 186  : 	{
; 187  : 		lpUser->m_MUHelperReadyPay = true;

  00076	c6 86 a4 27 00
	00 01		 mov	 BYTE PTR [esi+10148], 1
$LN37@Work:

; 188  : 	}
; 189  : 	// ----
; 190  : 	if( WorkTime % this->PayTime == 0 && WorkTime != 0 && lpUser->m_MUHelperReadyPay )

  0007d	0f bf 4b 1a	 movsx	 ecx, WORD PTR [ebx+26]
  00081	33 d2		 xor	 edx, edx
  00083	8b c7		 mov	 eax, edi
  00085	f7 f1		 div	 ecx
  00087	85 d2		 test	 edx, edx
  00089	75 15		 jne	 SHORT $LN36@Work
  0008b	85 ff		 test	 edi, edi
  0008d	74 11		 je	 SHORT $LN36@Work
  0008f	38 96 a4 27 00
	00		 cmp	 BYTE PTR [esi+10148], dl
  00095	74 09		 je	 SHORT $LN36@Work

; 191  : 	{
; 192  : 		this->SendMoney(lpUser, WorkTime);

  00097	57		 push	 edi
  00098	56		 push	 esi
  00099	8b cb		 mov	 ecx, ebx
  0009b	e8 00 00 00 00	 call	 ?SendMoney@MUHelper@@QAEXPAUOBJECTSTRUCT@@G@Z ; MUHelper::SendMoney
$LN36@Work:

; 193  : 	}
; 194  : 
; 195  : #if(FIX_HELPER_EE_BUFF==TRUE)
; 196  : 	if(ZtUserInSafeZone(lpUser->m_Index))

  000a0	8b 16		 mov	 edx, DWORD PTR [esi]
  000a2	52		 push	 edx
  000a3	e8 00 00 00 00	 call	 ?ZtUserInSafeZone@@YA_NH@Z ; ZtUserInSafeZone
  000a8	83 c4 04	 add	 esp, 4
  000ab	84 c0		 test	 al, al
  000ad	0f 85 fd 01 00
	00		 jne	 $LN59@Work

; 197  : 	{
; 198  : 		return;
; 199  : 	}
; 200  : 
; 201  : 	int dis;
; 202  : 	int SearchSkill = 0;
; 203  : 	CMagicInf * lpMagic;
; 204  : 	SYSTEMTIME time;
; 205  : 	GetLocalTime(&time);

  000b3	8d 45 ec	 lea	 eax, DWORD PTR _time$[ebp]
  000b6	50		 push	 eax
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 206  : 	if( time.wSecond == 0  || 
; 207  : 	    time.wSecond == 10 ||
; 208  : 	    time.wSecond == 20 ||
; 209  : 	    time.wSecond == 30 ||
; 210  : 	    time.wSecond == 40 ||
; 211  : 	    time.wSecond == 50 )

  000bd	66 8b 45 f8	 mov	 ax, WORD PTR _time$[ebp+12]
  000c1	66 85 c0	 test	 ax, ax
  000c4	74 22		 je	 SHORT $LN33@Work
  000c6	66 83 f8 0a	 cmp	 ax, 10			; 0000000aH
  000ca	74 1c		 je	 SHORT $LN33@Work
  000cc	66 83 f8 14	 cmp	 ax, 20			; 00000014H
  000d0	74 16		 je	 SHORT $LN33@Work
  000d2	66 83 f8 1e	 cmp	 ax, 30			; 0000001eH
  000d6	74 10		 je	 SHORT $LN33@Work
  000d8	66 83 f8 28	 cmp	 ax, 40			; 00000028H
  000dc	74 0a		 je	 SHORT $LN33@Work
  000de	66 83 f8 32	 cmp	 ax, 50			; 00000032H
  000e2	0f 85 c8 01 00
	00		 jne	 $LN59@Work
$LN33@Work:

; 212  : 	{
; 213  : 		int partynum = -1;
; 214  : 		int partycount;
; 215  : 		int number;
; 216  : 
; 217  : 		LPOBJ lpPartyObj;
; 218  : 
; 219  : 		partynum = lpUser->PartyNumber;

  000e8	8b 86 2c 04 00
	00		 mov	 eax, DWORD PTR [esi+1068]

; 220  : 
; 221  : 		if(partynum != -1)

  000ee	83 f8 ff	 cmp	 eax, -1
  000f1	0f 84 17 01 00
	00		 je	 $LN32@Work

; 222  : 		{
; 223  : 			partycount = gParty.m_PartyS[partynum].Count;
; 224  : 
; 225  : 			for(int j = 0; j < MAX_USER_IN_PARTY; j++)

  000f7	6b c0 68	 imul	 eax, 104		; 00000068H
  000fa	05 0c 00 00 00	 add	 eax, OFFSET ?gParty@@3VPartyClass@@A+12
  000ff	8b d8		 mov	 ebx, eax
  00101	c7 45 e8 0a 00
	00 00		 mov	 DWORD PTR tv286[ebp], 10 ; 0000000aH
  00108	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL57@Work:

; 226  : 			{
; 227  : 				number = gParty.m_PartyS[partynum].Number[j];

  00110	8b 03		 mov	 eax, DWORD PTR [ebx]

; 228  : 
; 229  : 				if ( OBJMAX_RANGE(number) == TRUE )

  00112	85 c0		 test	 eax, eax
  00114	0f 88 d5 00 00
	00		 js	 $LN30@Work
  0011a	33 c9		 xor	 ecx, ecx
  0011c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00121	0f 9e c1	 setle	 cl
  00124	83 f9 01	 cmp	 ecx, 1
  00127	0f 85 c2 00 00
	00		 jne	 $LN30@Work

; 230  : 				{
; 231  : 					lpPartyObj = &gObj[number];

  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00133	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H

; 232  : 
; 233  : 					if(lpUser->MapNumber == lpPartyObj->MapNumber)

  00139	8a 96 49 01 00
	00		 mov	 dl, BYTE PTR [esi+329]
  0013f	3a 94 08 49 01
	00 00		 cmp	 dl, BYTE PTR [eax+ecx+329]
  00146	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  00149	0f 85 a0 00 00
	00		 jne	 $LN30@Work

; 234  : 					{
; 235  : 						dis = gObjCalDistance(lpUser,&gObj[number]);

  0014f	57		 push	 edi
  00150	56		 push	 esi
  00151	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00156	83 c4 08	 add	 esp, 8

; 236  : 
; 237  : 						if(dis < 6)

  00159	83 f8 06	 cmp	 eax, 6
  0015c	0f 8d 8d 00 00
	00		 jge	 $LN30@Work

; 238  : 						{
; 239  : 							//Defence Baf
; 240  : 							if(gObjGetMagicSearch( lpUser, 27) != NULL) SearchSkill = 27;

  00162	6a 1b		 push	 27			; 0000001bH
  00164	56		 push	 esi
  00165	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  0016a	83 c4 08	 add	 esp, 8
  0016d	85 c0		 test	 eax, eax
  0016f	74 20		 je	 SHORT $LN22@Work

; 241  : 							//else if(gObjGetMagicSearch( lpUser, 480) != NULL) SearchSkill = 480;
; 242  : 							//else if(gObjGetMagicSearch( lpUser, 481) != NULL) SearchSkill = 481;
; 243  : 							//else if(gObjGetMagicSearch( lpUser, 482) != NULL) SearchSkill = 482;
; 244  : 							//else if(gObjGetMagicSearch( lpUser, 483) != NULL) SearchSkill = 483;
; 245  : 							//else if(gObjGetMagicSearch( lpUser, 484) != NULL) SearchSkill = 484;
; 246  : 							else SearchSkill = 0;
; 247  : 							if(SearchSkill != 0)
; 248  : 							{
; 249  : 								lpMagic = gObjGetMagicSearch( lpUser, SearchSkill);

  00171	6a 1b		 push	 27			; 0000001bH
  00173	56		 push	 esi
  00174	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  00179	83 c4 08	 add	 esp, 8

; 250  : 								if(lpMagic!=NULL) gObjUseSkill.UseSkill(lpUser->m_Index, lpPartyObj->m_Index, lpMagic);

  0017c	85 c0		 test	 eax, eax
  0017e	74 11		 je	 SHORT $LN22@Work
  00180	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00182	50		 push	 eax
  00183	8b 07		 mov	 eax, DWORD PTR [edi]
  00185	50		 push	 eax
  00186	51		 push	 ecx
  00187	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  0018c	e8 00 00 00 00	 call	 ?UseSkill@CObjUseSkill@@QAEXHHPAVCMagicInf@@@Z ; CObjUseSkill::UseSkill
$LN22@Work:

; 251  : 							}
; 252  : 							//Damage Baf
; 253  : 							if(gObjGetMagicSearch( lpUser, 28) != NULL) SearchSkill = 28;

  00191	6a 1c		 push	 28			; 0000001cH
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  00199	83 c4 08	 add	 esp, 8
  0019c	85 c0		 test	 eax, eax
  0019e	74 20		 je	 SHORT $LN18@Work

; 254  : 							//else if(gObjGetMagicSearch( lpUser, 485) != NULL) SearchSkill = 485;
; 255  : 							//else if(gObjGetMagicSearch( lpUser, 486) != NULL) SearchSkill = 486;
; 256  : 							//else if(gObjGetMagicSearch( lpUser, 487) != NULL) SearchSkill = 487;
; 257  : 							//else if(gObjGetMagicSearch( lpUser, 488) != NULL) SearchSkill = 488;
; 258  : 							//else if(gObjGetMagicSearch( lpUser, 489) != NULL) SearchSkill = 489;
; 259  : 							else SearchSkill = 0;
; 260  : 							if(SearchSkill != 0)
; 261  : 							{
; 262  : 								lpMagic = gObjGetMagicSearch( lpUser, SearchSkill);

  001a0	6a 1c		 push	 28			; 0000001cH
  001a2	56		 push	 esi
  001a3	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  001a8	83 c4 08	 add	 esp, 8

; 263  : 								if(lpMagic!=NULL) gObjUseSkill.UseSkill(lpUser->m_Index, lpPartyObj->m_Index, lpMagic);

  001ab	85 c0		 test	 eax, eax
  001ad	74 11		 je	 SHORT $LN18@Work
  001af	8b 17		 mov	 edx, DWORD PTR [edi]
  001b1	50		 push	 eax
  001b2	8b 06		 mov	 eax, DWORD PTR [esi]
  001b4	52		 push	 edx
  001b5	50		 push	 eax
  001b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  001bb	e8 00 00 00 00	 call	 ?UseSkill@CObjUseSkill@@QAEXHHPAVCMagicInf@@@Z ; CObjUseSkill::UseSkill
$LN18@Work:

; 264  : 							}
; 265  : 							//Heal Baf
; 266  : 							if(gObjGetMagicSearch( lpUser, 26) != NULL) SearchSkill = 26;

  001c0	6a 1a		 push	 26			; 0000001aH
  001c2	56		 push	 esi
  001c3	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  001c8	83 c4 08	 add	 esp, 8
  001cb	85 c0		 test	 eax, eax
  001cd	74 20		 je	 SHORT $LN30@Work

; 267  : 							//else if(gObjGetMagicSearch( lpUser, 475) != NULL) SearchSkill = 475;
; 268  : 							//else if(gObjGetMagicSearch( lpUser, 476) != NULL) SearchSkill = 476;
; 269  : 							//else if(gObjGetMagicSearch( lpUser, 477) != NULL) SearchSkill = 477;
; 270  : 							//else if(gObjGetMagicSearch( lpUser, 478) != NULL) SearchSkill = 478;
; 271  : 							//else if(gObjGetMagicSearch( lpUser, 479) != NULL) SearchSkill = 479;
; 272  : 							else SearchSkill = 0;
; 273  : 							if(SearchSkill != 0)
; 274  : 							{
; 275  : 								lpMagic = gObjGetMagicSearch( lpUser, SearchSkill);

  001cf	6a 1a		 push	 26			; 0000001aH
  001d1	56		 push	 esi
  001d2	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  001d7	83 c4 08	 add	 esp, 8

; 276  : 								if(lpMagic!=NULL) gObjUseSkill.UseSkill(lpUser->m_Index, lpPartyObj->m_Index, lpMagic);

  001da	85 c0		 test	 eax, eax
  001dc	74 11		 je	 SHORT $LN30@Work
  001de	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e0	8b 16		 mov	 edx, DWORD PTR [esi]
  001e2	50		 push	 eax
  001e3	51		 push	 ecx
  001e4	52		 push	 edx
  001e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  001ea	e8 00 00 00 00	 call	 ?UseSkill@CObjUseSkill@@QAEXHHPAVCMagicInf@@@Z ; CObjUseSkill::UseSkill
$LN30@Work:

; 222  : 		{
; 223  : 			partycount = gParty.m_PartyS[partynum].Count;
; 224  : 
; 225  : 			for(int j = 0; j < MAX_USER_IN_PARTY; j++)

  001ef	83 c3 04	 add	 ebx, 4
  001f2	ff 4d e8	 dec	 DWORD PTR tv286[ebp]
  001f5	0f 85 15 ff ff
	ff		 jne	 $LL57@Work
  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx

; 323  : 			}
; 324  : 		}
; 325  : 	}
; 326  : #endif
; 327  : }

  001fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00201	33 cd		 xor	 ecx, ebp
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c2 04 00	 ret	 4
$LN32@Work:

; 277  : 							}
; 278  : 						}
; 279  : 					}
; 280  : 				}
; 281  : 			}
; 282  : 		}
; 283  : 		else
; 284  : 		{
; 285  : 			//Defence Baf
; 286  : 			if(gObjGetMagicSearch( lpUser, 27) != NULL) SearchSkill = 27;

  0020e	6a 1b		 push	 27			; 0000001bH
  00210	56		 push	 esi
  00211	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  00216	83 c4 08	 add	 esp, 8
  00219	85 c0		 test	 eax, eax
  0021b	74 1e		 je	 SHORT $LN56@Work

; 287  : 			//else if(gObjGetMagicSearch( lpUser, 480) != NULL) SearchSkill = 480;
; 288  : 			//else if(gObjGetMagicSearch( lpUser, 481) != NULL) SearchSkill = 481;
; 289  : 			//else if(gObjGetMagicSearch( lpUser, 482) != NULL) SearchSkill = 482;
; 290  : 			//else if(gObjGetMagicSearch( lpUser, 483) != NULL) SearchSkill = 483;
; 291  : 			//else if(gObjGetMagicSearch( lpUser, 484) != NULL) SearchSkill = 484;
; 292  : 			else SearchSkill = 0;
; 293  : 			if(SearchSkill != 0)
; 294  : 			{
; 295  : 				lpMagic = gObjGetMagicSearch( lpUser, SearchSkill);

  0021d	6a 1b		 push	 27			; 0000001bH
  0021f	56		 push	 esi
  00220	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  00225	83 c4 08	 add	 esp, 8

; 296  : 				if(lpMagic!=NULL) gObjUseSkill.UseSkill(lpUser->m_Index, lpUser->m_Index, lpMagic);

  00228	85 c0		 test	 eax, eax
  0022a	74 0f		 je	 SHORT $LN56@Work
  0022c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0022e	50		 push	 eax
  0022f	51		 push	 ecx
  00230	51		 push	 ecx
  00231	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  00236	e8 00 00 00 00	 call	 ?UseSkill@CObjUseSkill@@QAEXHHPAVCMagicInf@@@Z ; CObjUseSkill::UseSkill
$LN56@Work:

; 297  : 			}
; 298  : 			//Damage Baf
; 299  : 			if(gObjGetMagicSearch( lpUser, 28) != NULL) SearchSkill = 28;

  0023b	6a 1c		 push	 28			; 0000001cH
  0023d	56		 push	 esi
  0023e	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  00243	83 c4 08	 add	 esp, 8
  00246	85 c0		 test	 eax, eax
  00248	74 1e		 je	 SHORT $LN58@Work

; 300  : 			//else if(gObjGetMagicSearch( lpUser, 485) != NULL) SearchSkill = 485;
; 301  : 			//else if(gObjGetMagicSearch( lpUser, 486) != NULL) SearchSkill = 486;
; 302  : 			//else if(gObjGetMagicSearch( lpUser, 487) != NULL) SearchSkill = 487;
; 303  : 			//else if(gObjGetMagicSearch( lpUser, 488) != NULL) SearchSkill = 488;
; 304  : 			//else if(gObjGetMagicSearch( lpUser, 489) != NULL) SearchSkill = 489;
; 305  : 			else SearchSkill = 0;
; 306  : 			if(SearchSkill != 0)
; 307  : 			{
; 308  : 				lpMagic = gObjGetMagicSearch( lpUser, SearchSkill);

  0024a	6a 1c		 push	 28			; 0000001cH
  0024c	56		 push	 esi
  0024d	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  00252	83 c4 08	 add	 esp, 8

; 309  : 				if(lpMagic!=NULL) gObjUseSkill.UseSkill(lpUser->m_Index, lpUser->m_Index, lpMagic);

  00255	85 c0		 test	 eax, eax
  00257	74 0f		 je	 SHORT $LN58@Work
  00259	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0025b	50		 push	 eax
  0025c	51		 push	 ecx
  0025d	51		 push	 ecx
  0025e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  00263	e8 00 00 00 00	 call	 ?UseSkill@CObjUseSkill@@QAEXHHPAVCMagicInf@@@Z ; CObjUseSkill::UseSkill
$LN58@Work:

; 310  : 			}
; 311  : 			//Heal Baf
; 312  : 			if(gObjGetMagicSearch( lpUser, 26) != NULL) SearchSkill = 26;

  00268	6a 1a		 push	 26			; 0000001aH
  0026a	56		 push	 esi
  0026b	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  00270	83 c4 08	 add	 esp, 8
  00273	85 c0		 test	 eax, eax
  00275	74 39		 je	 SHORT $LN59@Work

; 313  : 			//else if(gObjGetMagicSearch( lpUser, 475) != NULL) SearchSkill = 475;
; 314  : 			//else if(gObjGetMagicSearch( lpUser, 476) != NULL) SearchSkill = 476;
; 315  : 			//else if(gObjGetMagicSearch( lpUser, 477) != NULL) SearchSkill = 477;
; 316  : 			//else if(gObjGetMagicSearch( lpUser, 478) != NULL) SearchSkill = 478;
; 317  : 			//else if(gObjGetMagicSearch( lpUser, 479) != NULL) SearchSkill = 479;
; 318  : 			else SearchSkill = 0;
; 319  : 			if(SearchSkill != 0)
; 320  : 			{
; 321  : 				lpMagic = gObjGetMagicSearch( lpUser, SearchSkill);

  00277	6a 1a		 push	 26			; 0000001aH
  00279	56		 push	 esi
  0027a	e8 00 00 00 00	 call	 ?gObjGetMagicSearch@@YAPAVCMagicInf@@PAUOBJECTSTRUCT@@H@Z ; gObjGetMagicSearch
  0027f	83 c4 08	 add	 esp, 8

; 322  : 				if(lpMagic!=NULL) gObjUseSkill.UseSkill(lpUser->m_Index, lpUser->m_Index, lpMagic);

  00282	85 c0		 test	 eax, eax
  00284	74 2a		 je	 SHORT $LN59@Work
  00286	8b 36		 mov	 esi, DWORD PTR [esi]
  00288	50		 push	 eax
  00289	56		 push	 esi
  0028a	56		 push	 esi
  0028b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  00290	e8 00 00 00 00	 call	 ?UseSkill@CObjUseSkill@@QAEXHHPAVCMagicInf@@@Z ; CObjUseSkill::UseSkill
  00295	5f		 pop	 edi
  00296	5e		 pop	 esi
  00297	5b		 pop	 ebx

; 323  : 			}
; 324  : 		}
; 325  : 	}
; 326  : #endif
; 327  : }

  00298	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029b	33 cd		 xor	 ecx, ebp
  0029d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a2	8b e5		 mov	 esp, ebp
  002a4	5d		 pop	 ebp
  002a5	c2 04 00	 ret	 4
$LN38@Work:

; 178  : 	{
; 179  : 		this->Close(lpUser);

  002a8	56		 push	 esi
  002a9	8b cb		 mov	 ecx, ebx
  002ab	e8 00 00 00 00	 call	 ?Close@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z ; MUHelper::Close
$LN59@Work:
  002b0	5f		 pop	 edi
$LN1@Work:

; 323  : 			}
; 324  : 		}
; 325  : 	}
; 326  : #endif
; 327  : }

  002b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b4	5e		 pop	 esi
  002b5	33 cd		 xor	 ecx, ebp
  002b7	5b		 pop	 ebx
  002b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c2 04 00	 ret	 4
?Work@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z ENDP		; MUHelper::Work
_TEXT	ENDS
PUBLIC	?Manager@MUHelper@@QAEXHPAUMUHELPER_REQ_ACTION@@@Z ; MUHelper::Manager
; Function compile flags: /Ogtp
;	COMDAT ?Manager@MUHelper@@QAEXHPAUMUHELPER_REQ_ACTION@@@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
_lpRequest$ = 12					; size = 4
?Manager@MUHelper@@QAEXHPAUMUHELPER_REQ_ACTION@@@Z PROC	; MUHelper::Manager, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	LPOBJ lpUser = &gObj[UserIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f0		 mov	 esi, eax
  00009	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0000f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	57		 push	 edi

; 116  : 	// ----
; 117  : 	if( !gObjIsConnected(UserIndex) || lpUser->Connected != PLAYER_PLAYING )

  00016	50		 push	 eax
  00017	8b f9		 mov	 edi, ecx
  00019	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c0		 test	 eax, eax
  00023	74 2b		 je	 SHORT $LN5@Manager
  00025	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00029	75 25		 jne	 SHORT $LN5@Manager

; 118  : 	{
; 119  : 		return;
; 120  : 	}
; 121  : 	// ----
; 122  : 	switch(lpRequest->Mode)

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _lpRequest$[ebp]
  0002e	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00032	83 e8 00	 sub	 eax, 0
  00035	74 11		 je	 SHORT $LN2@Manager
  00037	48		 dec	 eax
  00038	75 16		 jne	 SHORT $LN5@Manager

; 127  : 		}
; 128  : 		break;
; 129  : 		// --
; 130  : 	case 1:
; 131  : 		{
; 132  : 			this->Close(lpUser);

  0003a	56		 push	 esi
  0003b	8b cf		 mov	 ecx, edi
  0003d	e8 00 00 00 00	 call	 ?Close@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z ; MUHelper::Close
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 133  : 		}
; 134  : 		break;
; 135  : 	}
; 136  : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN2@Manager:

; 123  : 	{
; 124  : 	case 0:
; 125  : 		{
; 126  : 			this->Start(lpUser);

  00048	56		 push	 esi
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?Start@MUHelper@@QAEXPAUOBJECTSTRUCT@@@Z ; MUHelper::Start
$LN5@Manager:
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi

; 133  : 		}
; 134  : 		break;
; 135  : 	}
; 136  : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?Manager@MUHelper@@QAEXHPAUMUHELPER_REQ_ACTION@@@Z ENDP	; MUHelper::Manager
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MUHelper@@YAXXZ
text$yc	SEGMENT
??__Eg_MUHelper@@YAXXZ PROC				; `dynamic initializer for 'g_MUHelper'', COMDAT

; 18   : MUHelper	g_MUHelper;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MUHelper@@3VMUHelper@@A ; g_MUHelper
  00005	e8 00 00 00 00	 call	 ??0MUHelper@@QAE@XZ	; MUHelper::MUHelper
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MUHelper@@YAXXZ ; `dynamic atexit destructor for 'g_MUHelper''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MUHelper@@YAXXZ ENDP				; `dynamic initializer for 'g_MUHelper''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MUHelper@@YAXXZ
text$yd	SEGMENT
??__Fg_MUHelper@@YAXXZ PROC				; `dynamic atexit destructor for 'g_MUHelper'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MUHelper@@3VMUHelper@@A ; g_MUHelper
  00005	e9 00 00 00 00	 jmp	 ??1MUHelper@@UAE@XZ	; MUHelper::~MUHelper
??__Fg_MUHelper@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_MUHelper''
text$yd	ENDS
PUBLIC	?g_MUHelper@@3VMUHelper@@A			; g_MUHelper
_BSS	SEGMENT
?g_MUHelper@@3VMUHelper@@A DB 01cH DUP (?)		; g_MUHelper
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MUHelper$initializer$ DD FLAT:??__Eg_MUHelper@@YAXXZ
CRT$XCU	ENDS
END
