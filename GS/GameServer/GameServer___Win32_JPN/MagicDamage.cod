; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MagicDamage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMagicDamage@@6B@				; CMagicDamage::`vftable'
PUBLIC	??0CMagicDamage@@QAE@XZ				; CMagicDamage::CMagicDamage
PUBLIC	??_R4CMagicDamage@@6B@				; CMagicDamage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicDamage@@@8			; CMagicDamage `RTTI Type Descriptor'
PUBLIC	??_R3CMagicDamage@@8				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicDamage@@8				; CMagicDamage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicDamage@@8			; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMagicDamage@@UAEPAXI@Z:PROC		; CMagicDamage::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMagicDamage@@8
; File e:\work\tranet_version\gs\gameserver\magicdamage.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicDamage@@8 DD FLAT:??_R0?AVCMagicDamage@@@8 ; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicDamage@@8
rdata$r	SEGMENT
??_R2CMagicDamage@@8 DD FLAT:??_R1A@?0A@EA@CMagicDamage@@8 ; CMagicDamage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicDamage@@8
rdata$r	SEGMENT
??_R3CMagicDamage@@8 DD 00H				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicDamage@@@8
_DATA	SEGMENT
??_R0?AVCMagicDamage@@@8 DD FLAT:??_7type_info@@6B@	; CMagicDamage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicDamage@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMagicDamage@@6B@
rdata$r	SEGMENT
??_R4CMagicDamage@@6B@ DD 00H				; CMagicDamage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicDamage@@@8
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_7CMagicDamage@@6B@
CONST	SEGMENT
??_7CMagicDamage@@6B@ DD FLAT:??_R4CMagicDamage@@6B@	; CMagicDamage::`vftable'
	DD	FLAT:??_ECMagicDamage@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMagicDamage@@QAE@XZ
_TEXT	SEGMENT
??0CMagicDamage@@QAE@XZ PROC				; CMagicDamage::CMagicDamage, COMDAT
; _this$ = ecx

; 17   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicDamage@@6B@

; 18   : 	return;
; 19   : }

  00008	c3		 ret	 0
??0CMagicDamage@@QAE@XZ ENDP				; CMagicDamage::CMagicDamage
_TEXT	ENDS
PUBLIC	??1CMagicDamage@@UAE@XZ				; CMagicDamage::~CMagicDamage
; Function compile flags: /Ogtp
;	COMDAT ??1CMagicDamage@@UAE@XZ
_TEXT	SEGMENT
??1CMagicDamage@@UAE@XZ PROC				; CMagicDamage::~CMagicDamage, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMagicDamage@@6B@

; 24   : 	return;
; 25   : }

  00006	c3		 ret	 0
??1CMagicDamage@@UAE@XZ ENDP				; CMagicDamage::~CMagicDamage
_TEXT	ENDS
PUBLIC	?Init@CMagicDamage@@QAEXXZ			; CMagicDamage::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMagicDamage@@QAEXXZ
_TEXT	SEGMENT
?Init@CMagicDamage@@QAEXXZ PROC				; CMagicDamage::Init, COMDAT
; _this$ = ecx

; 29   : {

  00000	57		 push	 edi

; 30   : 	for ( int n=0; n< MAX_SKILL;n++)

  00001	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]

; 31   : 	{
; 32   : 		this->m_Damage[n] = -1;

  00004	b9 bc 02 00 00	 mov	 ecx, 700		; 000002bcH
  00009	83 c8 ff	 or	 eax, -1
  0000c	f3 ab		 rep stosd
  0000e	5f		 pop	 edi

; 33   : 	}
; 34   : }

  0000f	c3		 ret	 0
?Init@CMagicDamage@@QAEXXZ ENDP				; CMagicDamage::Init
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillNameList@CMagicDamage@@QAEXPAD@Z	; CMagicDamage::LogSkillNameList
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LogSkillNameList@CMagicDamage@@QAEXPAD@Z
_TEXT	SEGMENT
_name$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LogSkillNameList@CMagicDamage@@QAEXPAD@Z PROC		; CMagicDamage::LogSkillNameList, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _filename$[ebp]
  00014	57		 push	 edi

; 212  : 	int Token;
; 213  : 	int n;
; 214  : 	int number;
; 215  : 	char name[50];
; 216  : 	
; 217  : 	SMDFile = fopen(filename, "r");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001a	53		 push	 ebx
  0001b	8b f9		 mov	 edi, ecx
  0001d	e8 00 00 00 00	 call	 _fopen
  00022	83 c4 08	 add	 esp, 8
  00025	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 218  : 
; 219  : 	if ( SMDFile == NULL )

  0002a	85 c0		 test	 eax, eax
  0002c	75 1b		 jne	 SHORT $LN5@LogSkillNa

; 220  : 	{
; 221  : 		MsgBox(lMsg.Get(MSGGET(1, 199)), filename);

  0002e	53		 push	 ebx
  0002f	68 c7 01 00 00	 push	 455			; 000001c7H
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00039	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 222  : 		return;

  00044	e9 82 00 00 00	 jmp	 $LN15@LogSkillNa
$LN5@LogSkillNa:

; 223  : 	}
; 224  : 
; 225  : 	n=0;
; 226  : 
; 227  : 	while ( true )
; 228  : 	{
; 229  : 		Token = GetToken();

  00049	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 230  : 
; 231  : 		if ( Token == 2 )

  0004e	83 f8 02	 cmp	 eax, 2
  00051	74 52		 je	 SHORT $LN14@LogSkillNa
  00053	56		 push	 esi
$LL4@LogSkillNa:

; 232  : 		{
; 233  : 			break;
; 234  : 		}
; 235  : 
; 236  : 		if ( Token == 1 )

  00054	83 f8 01	 cmp	 eax, 1
  00057	75 41		 jne	 SHORT $LN1@LogSkillNa

; 237  : 		{
; 238  : 			number = (int)TokenNumber;

  00059	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0005f	e8 00 00 00 00	 call	 __ftol2_sse
  00064	8b f0		 mov	 esi, eax

; 239  : 
; 240  : 			Token = GetToken();

  00066	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 241  : 			strcpy(name, TokenString);

  0006b	33 c0		 xor	 eax, eax
  0006d	8d 49 00	 npad	 3
$LL8@LogSkillNa:
  00070	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _TokenString[eax]
  00076	88 4c 05 c8	 mov	 BYTE PTR _name$[ebp+eax], cl
  0007a	40		 inc	 eax
  0007b	84 c9		 test	 cl, cl
  0007d	75 f1		 jne	 SHORT $LL8@LogSkillNa

; 242  : 
; 243  : 			strcpy(this->m_Name[number], name);

  0007f	6b f6 32	 imul	 esi, 50			; 00000032H
  00082	8d 45 c8	 lea	 eax, DWORD PTR _name$[ebp]
  00085	8b c8		 mov	 ecx, eax
  00087	2b f1		 sub	 esi, ecx
  00089	8d 94 3e f4 0a
	00 00		 lea	 edx, DWORD PTR [esi+edi+2804]
$LL9@LogSkillNa:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00095	40		 inc	 eax
  00096	84 c9		 test	 cl, cl
  00098	75 f6		 jne	 SHORT $LL9@LogSkillNa
$LN1@LogSkillNa:

; 223  : 	}
; 224  : 
; 225  : 	n=0;
; 226  : 
; 227  : 	while ( true )
; 228  : 	{
; 229  : 		Token = GetToken();

  0009a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 230  : 
; 231  : 		if ( Token == 2 )

  0009f	83 f8 02	 cmp	 eax, 2
  000a2	75 b0		 jne	 SHORT $LL4@LogSkillNa
  000a4	5e		 pop	 esi
$LN14@LogSkillNa:

; 244  : 		}
; 245  : 	}
; 246  : 
; 247  : 	fclose(SMDFile);

  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _fclose
  000b1	83 c4 04	 add	 esp, 4

; 248  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), filename);

  000b4	53		 push	 ebx
  000b5	68 c8 01 00 00	 push	 456			; 000001c8H
  000ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000bf	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000c4	50		 push	 eax
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
$LN15@LogSkillNa:

; 249  : }

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	83 c4 08	 add	 esp, 8
  000d1	5f		 pop	 edi
  000d2	33 cd		 xor	 ecx, ebp
  000d4	5b		 pop	 ebx
  000d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 04 00	 ret	 4
?LogSkillNameList@CMagicDamage@@QAEXPAD@Z ENDP		; CMagicDamage::LogSkillNameList
_TEXT	ENDS
PUBLIC	??_C@_0M@LDHACGGK@Skill_Local?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillNameList@CMagicDamage@@QAEXPADH@Z	; CMagicDamage::LogSkillNameList
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_C@_0M@LDHACGGK@Skill_Local?$AA@
CONST	SEGMENT
??_C@_0M@LDHACGGK@Skill_Local?$AA@ DB 'Skill_Local', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z$0
__ehfuncinfo$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
_TEXT	SEGMENT
_WzMemScript$ = -200					; size = 132
_name$ = -68						; size = 50
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LogSkillNameList@CMagicDamage@@QAEXPADH@Z PROC		; CMagicDamage::LogSkillNameList, COMDAT
; _this$ = ecx

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 75 08	 mov	 esi, DWORD PTR _Buffer$[ebp]
  00030	8b f9		 mov	 edi, ecx

; 600  : 	CWzMemScript WzMemScript;

  00032	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 601  : 	int Token;
; 602  : 	int n;
; 603  : 	int number;
; 604  : 	char name[50];
; 605  : 	
; 606  : 	WzMemScript.SetBuffer(Buffer, iSize);

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00040	50		 push	 eax
  00041	56		 push	 esi
  00042	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 607  : 
; 608  : 	n=0;
; 609  : 
; 610  : 	while ( true )
; 611  : 	{
; 612  : 		Token = WzMemScript.GetToken();

  00054	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 613  : 
; 614  : 		if ( Token == 2 )

  0005f	83 f8 02	 cmp	 eax, 2
  00062	74 59		 je	 SHORT $LN14@LogSkillNa@2
$LL4@LogSkillNa@2:

; 615  : 		{
; 616  : 			break;
; 617  : 		}
; 618  : 
; 619  : 		if ( Token == 1 )

  00064	83 f8 01	 cmp	 eax, 1
  00067	75 44		 jne	 SHORT $LN1@LogSkillNa@2

; 620  : 		{
; 621  : 			number = (int)TokenNumber;

  00069	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0006f	e8 00 00 00 00	 call	 __ftol2_sse

; 622  : 
; 623  : 			Token = WzMemScript.GetToken();	

  00074	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0007a	8b f0		 mov	 esi, eax
  0007c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 624  : 			strcpy(name, TokenString);

  00081	33 c0		 xor	 eax, eax
$LL7@LogSkillNa@2:
  00083	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _TokenString[eax]
  00089	88 4c 05 bc	 mov	 BYTE PTR _name$[ebp+eax], cl
  0008d	40		 inc	 eax
  0008e	84 c9		 test	 cl, cl
  00090	75 f1		 jne	 SHORT $LL7@LogSkillNa@2

; 625  : 
; 626  : 			strcpy(this->m_Name[number], name);

  00092	6b f6 32	 imul	 esi, 50			; 00000032H
  00095	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00098	8b c8		 mov	 ecx, eax
  0009a	2b f1		 sub	 esi, ecx
  0009c	8d 94 3e f4 0a
	00 00		 lea	 edx, DWORD PTR [esi+edi+2804]
$LL8@LogSkillNa@2:
  000a3	8a 08		 mov	 cl, BYTE PTR [eax]
  000a5	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000a8	40		 inc	 eax
  000a9	84 c9		 test	 cl, cl
  000ab	75 f6		 jne	 SHORT $LL8@LogSkillNa@2
$LN1@LogSkillNa@2:

; 607  : 
; 608  : 	n=0;
; 609  : 
; 610  : 	while ( true )
; 611  : 	{
; 612  : 		Token = WzMemScript.GetToken();

  000ad	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000b3	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 613  : 
; 614  : 		if ( Token == 2 )

  000b8	83 f8 02	 cmp	 eax, 2
  000bb	75 a7		 jne	 SHORT $LL4@LogSkillNa@2
$LN14@LogSkillNa@2:

; 627  : 		}
; 628  : 	}
; 629  : 
; 630  : 	
; 631  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill_Local");

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LDHACGGK@Skill_Local?$AA@
  000c2	68 c8 01 00 00	 push	 456			; 000001c8H
  000c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000cc	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000d1	50		 push	 eax
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d8	83 c4 08	 add	 esp, 8

; 632  : }

  000db	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e8	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z$0:
  00000	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 38 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-200]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LogSkillNameList@CMagicDamage@@QAEXPADH@Z ENDP		; CMagicDamage::LogSkillNameList
PUBLIC	??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@	; `string'
PUBLIC	?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z		; CMagicDamage::SetML
;	COMDAT ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
CONST	SEGMENT
??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@ DB 'MagicDamage.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_SkillRank$ = 12					; size = 4
_SkillGroup$ = 16					; size = 4
_rMLPoint$ = 20						; size = 4
_rAG$ = 24						; size = 4
_rShield$ = 28						; size = 4
_Duration$ = 32						; size = 2
_rStrength$ = 36					; size = 4
_rDexterity$ = 40					; size = 4
?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z PROC		; CMagicDamage::SetML, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 	if ( iSkill <0 || iSkill > MAX_SKILL -1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 7c		 ja	 SHORT $LN2@SetML

; 640  : 		return;
; 641  : 	}
; 642  : 
; 643  : 	if ( this->m_Damage[iSkill] == -1 )

  0000d	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  00012	75 11		 jne	 SHORT $LN1@SetML

; 644  : 	{
; 645  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  00014	68 85 02 00 00	 push	 645			; 00000285H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001e	68 32 02 00 00	 push	 562			; 00000232H

; 646  : 		return;

  00023	eb 73		 jmp	 SHORT $LN6@SetML
$LN1@SetML:

; 647  : 	}
; 648  : 
; 649  : 	this->m_sSkillRank[iSkill] = SkillRank;

  00025	66 8b 55 0c	 mov	 dx, WORD PTR _SkillRank$[ebp]
  00029	66 89 94 41 78
	3a 01 00	 mov	 WORD PTR [ecx+eax*2+80504], dx

; 650  : 	this->m_sSkillGroup[iSkill] = SkillGroup;

  00031	66 8b 55 10	 mov	 dx, WORD PTR _SkillGroup$[ebp]
  00035	66 89 94 41 f0
	3f 01 00	 mov	 WORD PTR [ecx+eax*2+81904], dx

; 651  : 	this->m_sReqMLPoint[iSkill] = rMLPoint;

  0003d	66 8b 55 14	 mov	 dx, WORD PTR _rMLPoint$[ebp]
  00041	66 89 94 41 68
	45 01 00	 mov	 WORD PTR [ecx+eax*2+83304], dx

; 652  : 
; 653  : 	this->m_sReqAG[iSkill] = rAG;

  00049	66 8b 55 18	 mov	 dx, WORD PTR _rAG$[ebp]
  0004d	66 89 94 41 e0
	4a 01 00	 mov	 WORD PTR [ecx+eax*2+84704], dx

; 654  : 	this->m_sReqShield[iSkill] = rShield;

  00055	66 8b 55 1c	 mov	 dx, WORD PTR _rShield$[ebp]
  00059	66 89 94 41 58
	50 01 00	 mov	 WORD PTR [ecx+eax*2+86104], dx

; 655  : 	this->m_sDuration[iSkill] = Duration;

  00061	66 8b 55 20	 mov	 dx, WORD PTR _Duration$[ebp]
  00065	66 89 94 41 d0
	55 01 00	 mov	 WORD PTR [ecx+eax*2+87504], dx

; 656  : 
; 657  : 	this->m_sReqStrength[iSkill] = rStrength;

  0006d	66 8b 55 24	 mov	 dx, WORD PTR _rStrength$[ebp]
  00071	66 89 94 41 48
	5b 01 00	 mov	 WORD PTR [ecx+eax*2+88904], dx

; 658  : 	this->m_sReqDexterity[iSkill] = rDexterity;

  00079	66 8b 55 28	 mov	 dx, WORD PTR _rDexterity$[ebp]
  0007d	66 89 94 41 c0
	60 01 00	 mov	 WORD PTR [ecx+eax*2+90304], dx

; 659  : }

  00085	5d		 pop	 ebp
  00086	c2 24 00	 ret	 36			; 00000024H
$LN2@SetML:

; 638  : 	{
; 639  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00089	68 7f 02 00 00	 push	 639			; 0000027fH
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00093	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SetML:
  00098	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0009d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 659  : }

  000ab	5d		 pop	 ebp
  000ac	c2 24 00	 ret	 36			; 00000024H
?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z ENDP		; CMagicDamage::SetML
_TEXT	ENDS
PUBLIC	?SetEx@CMagicDamage@@AAEXHHHHPAH@Z		; CMagicDamage::SetEx
; Function compile flags: /Ogtp
;	COMDAT ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iSkillUseType$ = 12					; size = 4
_iSkillBrand$ = 16					; size = 4
_iKillCount$ = 20					; size = 4
_pReqStatus$ = 24					; size = 4
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z PROC			; CMagicDamage::SetEx, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 664  : 	if ( iSkill <0 || iSkill > MAX_SKILL -1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 57		 ja	 SHORT $LN2@SetEx

; 667  : 		return;
; 668  : 	}
; 669  : 
; 670  : 	if ( this->m_Damage[iSkill] == -1 )

  0000d	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  00012	75 11		 jne	 SHORT $LN1@SetEx

; 671  : 	{
; 672  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  00014	68 a0 02 00 00	 push	 672			; 000002a0H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001e	68 32 02 00 00	 push	 562			; 00000232H

; 673  : 		return;

  00023	eb 4e		 jmp	 SHORT $LN6@SetEx
$LN1@SetEx:

; 674  : 	}
; 675  : 
; 676  : 	this->m_iSkillUseType[iSkill] = iSkillUseType;

  00025	8b 55 0c	 mov	 edx, DWORD PTR _iSkillUseType$[ebp]
  00028	89 94 81 d8 f8
	00 00		 mov	 DWORD PTR [ecx+eax*4+63704], edx

; 677  : 	this->m_iSkillBrand[iSkill] = iSkillBrand;

  0002f	8b 55 10	 mov	 edx, DWORD PTR _iSkillBrand$[ebp]
  00032	89 94 81 c8 03
	01 00		 mov	 DWORD PTR [ecx+eax*4+66504], edx

; 678  : 	this->m_iKillCount[iSkill] = iKillCount;

  00039	8b 55 14	 mov	 edx, DWORD PTR _iKillCount$[ebp]
  0003c	89 94 81 b8 0e
	01 00		 mov	 DWORD PTR [ecx+eax*4+69304], edx

; 679  : 	memcpy(this->m_iRequireStatus[iSkill], pReqStatus, sizeof(this->m_iRequireStatus[0]));

  00043	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00046	8d 84 81 a8 19
	01 00		 lea	 eax, DWORD PTR [ecx+eax*4+72104]
  0004d	8b 4d 18	 mov	 ecx, DWORD PTR _pReqStatus$[ebp]
  00050	8b 11		 mov	 edx, DWORD PTR [ecx]
  00052	89 10		 mov	 DWORD PTR [eax], edx
  00054	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00057	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0005a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 680  : }

  00060	5d		 pop	 ebp
  00061	c2 14 00	 ret	 20			; 00000014H
$LN2@SetEx:

; 665  : 	{
; 666  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00064	68 9a 02 00 00	 push	 666			; 0000029aH
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0006e	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SetEx:
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00078	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 680  : }

  00086	5d		 pop	 ebp
  00087	c2 14 00	 ret	 20			; 00000014H
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ENDP			; CMagicDamage::SetEx
_TEXT	ENDS
PUBLIC	??_C@_08MAACMGJK@skill?3?$CFd?$AA@		; `string'
PUBLIC	?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z	; CMagicDamage::Set
EXTRN	?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A:BYTE ; g_SkillAdditionInfo
EXTRN	?LogAddL@@3P6AXPADZZA:DWORD			; LogAddL
;	COMDAT ??_C@_08MAACMGJK@skill?3?$CFd?$AA@
CONST	SEGMENT
??_C@_08MAACMGJK@skill?3?$CFd?$AA@ DB 'skill:%d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_skill$ = 12						; size = 4
_damage$ = 16						; size = 4
_rlevel$ = 20						; size = 4
_mana$ = 24						; size = 4
_bp$ = 28						; size = 4
_dis$ = 32						; size = 4
_Attr$ = 36						; size = 4
_iSkillType$ = 40					; size = 4
_ReqClass$ = 44						; size = 4
_rEnergy$ = 48						; size = 4
_rLeadership$ = 52					; size = 4
_rdelay$ = 56						; size = 4
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z PROC		; CMagicDamage::Set, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 685  : 	if ( skill <0 || skill > MAX_SKILL -1 )

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _skill$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	81 ff bb 02 00
	00		 cmp	 edi, 699		; 000002bbH
  00010	0f 87 0e 07 00
	00		 ja	 $LN157@Set

; 688  : 		return;
; 689  : 	}
; 690  : 
; 691  : 	if ( this->m_Damage[skill] != -1 )

  00016	83 7c be 04 ff	 cmp	 DWORD PTR [esi+edi*4+4], -1
  0001b	74 28		 je	 SHORT $LN156@Set

; 692  : 	{
; 693  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  0001d	68 b5 02 00 00	 push	 693			; 000002b5H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00027	68 32 02 00 00	 push	 562			; 00000232H
$LN164@Set:
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00031	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00041	5d		 pop	 ebp
  00042	c2 34 00	 ret	 52			; 00000034H
$LN156@Set:

; 694  : 		return;
; 695  : 	}
; 696  : 
; 697  : 	strcpy(this->m_Name[skill], name);

  00045	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00048	8b cf		 mov	 ecx, edi
  0004a	6b c9 32	 imul	 ecx, 50			; 00000032H
  0004d	8d 94 31 f4 0a
	00 00		 lea	 edx, DWORD PTR [ecx+esi+2804]
  00054	53		 push	 ebx
  00055	2b d0		 sub	 edx, eax
  00057	33 db		 xor	 ebx, ebx
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL161@Set:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00065	40		 inc	 eax
  00066	3a cb		 cmp	 cl, bl
  00068	75 f6		 jne	 SHORT $LL161@Set

; 698  : 	this->m_Damage[skill] = damage;

  0006a	8b 55 10	 mov	 edx, DWORD PTR _damage$[ebp]

; 699  : 	this->m_rLevel[skill] = rlevel;

  0006d	8b 45 14	 mov	 eax, DWORD PTR _rlevel$[ebp]

; 700  : 	this->m_Mana[skill] = mana;

  00070	66 8b 4d 18	 mov	 cx, WORD PTR _mana$[ebp]
  00074	89 54 be 04	 mov	 DWORD PTR [esi+edi*4+4], edx

; 701  : 	this->m_Distance[skill] = dis;

  00078	8a 55 20	 mov	 dl, BYTE PTR _dis$[ebp]
  0007b	88 84 37 ac 93
	00 00		 mov	 BYTE PTR [edi+esi+37804], al

; 702  : 	this->m_RequireLeadership[skill] = rLeadership;
; 703  : 	this->m_Delay[skill] = rdelay;
; 704  : 	this->m_BrainPower[skill] = bp;
; 705  : 	this->m_Attr[skill] = Attr;
; 706  : 	this->m_iSkillType[skill] = iSkillType;
; 707  : 	memcpy(this->m_RequireClass[skill], ReqClass, sizeof(this->m_RequireClass[0]));
; 708  : 
; 709  : 	int loc2 = (rEnergy * rlevel * 4);

  00082	0f af 45 30	 imul	 eax, DWORD PTR _rEnergy$[ebp]
  00086	66 89 8c 7e 68
	96 00 00	 mov	 WORD PTR [esi+edi*2+38504], cx
  0008e	8b 4d 34	 mov	 ecx, DWORD PTR _rLeadership$[ebp]
  00091	88 94 37 e0 9b
	00 00		 mov	 BYTE PTR [edi+esi+39904], dl
  00098	8b 55 38	 mov	 edx, DWORD PTR _rdelay$[ebp]
  0009b	89 94 be 90 d2
	00 00		 mov	 DWORD PTR [esi+edi*4+53904], edx
  000a2	8b 55 24	 mov	 edx, DWORD PTR _Attr$[ebp]
  000a5	89 8c be a0 c7
	00 00		 mov	 DWORD PTR [esi+edi*4+51104], ecx
  000ac	66 8b 4d 1c	 mov	 cx, WORD PTR _bp$[ebp]
  000b0	66 89 8c 7e 80
	dd 00 00	 mov	 WORD PTR [esi+edi*2+56704], cx
  000b8	8b 4d 28	 mov	 ecx, DWORD PTR _iSkillType$[ebp]
  000bb	89 94 be f8 e2
	00 00		 mov	 DWORD PTR [esi+edi*4+58104], edx
  000c2	89 8c be e8 ed
	00 00		 mov	 DWORD PTR [esi+edi*4+60904], ecx
  000c9	8d 14 fd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*8]
  000d0	2b d7		 sub	 edx, edi
  000d2	8d 8c 32 8c a9
	00 00		 lea	 ecx, DWORD PTR [edx+esi+43404]
  000d9	8b 55 2c	 mov	 edx, DWORD PTR _ReqClass$[ebp]
  000dc	8b 12		 mov	 edx, DWORD PTR [edx]
  000de	89 11		 mov	 DWORD PTR [ecx], edx
  000e0	8b 55 2c	 mov	 edx, DWORD PTR _ReqClass$[ebp]
  000e3	66 8b 52 04	 mov	 dx, WORD PTR [edx+4]
  000e7	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  000eb	8b 55 2c	 mov	 edx, DWORD PTR _ReqClass$[ebp]
  000ee	0f b6 52 06	 movzx	 edx, BYTE PTR [edx+6]
  000f2	03 c0		 add	 eax, eax
  000f4	88 51 06	 mov	 BYTE PTR [ecx+6], dl
  000f7	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 710  : 
; 711  : 	if(loc2 > 0)

  000fa	3b cb		 cmp	 ecx, ebx
  000fc	7e 13		 jle	 SHORT $LN155@Set

; 712  : 	{
; 713  : 		loc2 = loc2 / 100;

  000fe	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00103	f7 e9		 imul	 ecx
  00105	c1 fa 05	 sar	 edx, 5
  00108	8b c2		 mov	 eax, edx
  0010a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0010d	03 c2		 add	 eax, edx

; 714  : 	}
; 715  : 	else

  0010f	eb 02		 jmp	 SHORT $LN154@Set
$LN155@Set:

; 716  : 	{
; 717  : 		loc2 = 0;

  00111	33 c0		 xor	 eax, eax
$LN154@Set:

; 718  : 	}
; 719  : 
; 720  : 	this->m_RequireEnergy[skill] = loc2 + 20;

  00113	83 c0 14	 add	 eax, 20			; 00000014H
  00116	89 84 be 9c 9e
	00 00		 mov	 DWORD PTR [esi+edi*4+40604], eax

; 721  : 
; 722  : 	if ( skill == 13 ) // Blast

  0011d	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00120	75 15		 jne	 SHORT $LN153@Set

; 723  : 	{
; 724  : 		LogAddL("skill:%d", this->m_RequireEnergy[skill]);

  00122	8b 86 d0 9e 00
	00		 mov	 eax, DWORD PTR [esi+40656]
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_08MAACMGJK@skill?3?$CFd?$AA@
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddL@@3P6AXPADZZA ; LogAddL
  00134	83 c4 08	 add	 esp, 8
$LN153@Set:

; 725  : 	}
; 726  : 
; 727  : 	// Set Level Requirements for Skills
; 728  : 	this->m_RequireLevel[skill] = 0;	// Required Level to use the skill

  00137	89 9c be b0 bc
	00 00		 mov	 DWORD PTR [esi+edi*4+48304], ebx

; 729  : 
; 730  : 	//if ( skill == 41 )	// Twisting Slash
; 731  : 	//{
; 732  : 	//	this->m_RequireLevel[skill] = 80;
; 733  : 	//}
; 734  : 	//else if ( skill == 42 )	// Rageful Blow
; 735  : 	//{
; 736  : 	//	this->m_RequireLevel[skill] = 170;
; 737  : 	//}
; 738  : 	//else if ( skill == 43 )	// Death Stab
; 739  : 	//{
; 740  : 	//	this->m_RequireLevel[skill] = 160;
; 741  : 	//}
; 742  : 	//else if ( skill == 47 )	// Impale
; 743  : 	//{
; 744  : 	//	this->m_RequireLevel[skill] = 28;
; 745  : 	//}
; 746  : 	//else if ( skill == 48 )	// Inner Strength
; 747  : 	//{
; 748  : 	//	this->m_RequireLevel[skill] = 120;
; 749  : 	//}
; 750  : 	//else if ( skill == 52 )	
; 751  : 	//{
; 752  : 	//	this->m_RequireLevel[skill] = 130;
; 753  : 	//}
; 754  : 
; 755  : 	//if ( skill == 41 )	// Twisting Slash
; 756  : 	//{
; 757  : 	//	this->m_RequireLevel[skill] = ZtConfig.Skills.TwistingSlashLevel;//80;
; 758  : 	//}
; 759  : 	//else if ( skill == 42 )	// Rageful Blow
; 760  : 	//{
; 761  : 	//	this->m_RequireLevel[skill] = ZtConfig.Skills.RagefulBlowLevel;//170;
; 762  : 	//}
; 763  : 	//else if ( skill == 43 )	// Death Stab
; 764  : 	//{
; 765  : 	//	this->m_RequireLevel[skill] = ZtConfig.Skills.DeathStabLevel;//160;
; 766  : 	//}
; 767  : 	//else if ( skill == 47 )	// Impale
; 768  : 	//{
; 769  : 	//	this->m_RequireLevel[skill] = ZtConfig.Skills.ImpaleLevel;//28;
; 770  : 	//}
; 771  : 	//else if ( skill == 48 )	// Inner Strength
; 772  : 	//{
; 773  : 	//	this->m_RequireLevel[skill] = ZtConfig.Skills.InnerStrengthLevel;//120;
; 774  : 	//}
; 775  : 	//else if ( skill == 52 )	// Penetration
; 776  : 	//{
; 777  : 	//	this->m_RequireLevel[skill] = ZtConfig.Skills.PenetrationLevel;//130;
; 778  : 	//}
; 779  : 
; 780  : 	if( g_SkillAdditionInfo.m_SkillUseReqLevel[skill] > 0 )

  0013e	8b 04 bd 5c 00
	00 00		 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A[edi*4+92]
  00145	3b c3		 cmp	 eax, ebx
  00147	7e 07		 jle	 SHORT $LN152@Set

; 781  : 	{
; 782  : 		this->m_RequireLevel[skill] = g_SkillAdditionInfo.m_SkillUseReqLevel[skill];

  00149	89 84 be b0 bc
	00 00		 mov	 DWORD PTR [esi+edi*4+48304], eax
$LN152@Set:

; 783  : 	}
; 784  : 
; 785  : 	if ( skill == 30 )

  00150	83 ff 1e	 cmp	 edi, 30			; 0000001eH
  00153	75 0d		 jne	 SHORT $LN151@Set

; 786  : 	{
; 787  : 		this->m_RequireEnergy[skill] = 30;

  00155	89 be 14 9f 00
	00		 mov	 DWORD PTR [esi+40724], edi
$LN163@Set:
  0015b	5b		 pop	 ebx
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0015e	5d		 pop	 ebp
  0015f	c2 34 00	 ret	 52			; 00000034H
$LN151@Set:

; 788  : 	}
; 789  : 	else if ( skill == 31 )

  00162	83 ff 1f	 cmp	 edi, 31			; 0000001fH
  00165	75 11		 jne	 SHORT $LN149@Set

; 790  : 	{
; 791  : 		this->m_RequireEnergy[skill] = 60;

  00167	5b		 pop	 ebx
  00168	5f		 pop	 edi
  00169	c7 86 18 9f 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+40728], 60 ; 0000003cH
  00173	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00174	5d		 pop	 ebp
  00175	c2 34 00	 ret	 52			; 00000034H
$LN149@Set:

; 792  : 	}
; 793  : 	else if ( skill == 32 )

  00178	83 ff 20	 cmp	 edi, 32			; 00000020H
  0017b	75 11		 jne	 SHORT $LN147@Set

; 794  : 	{
; 795  : 		this->m_RequireEnergy[skill] = 90;

  0017d	5b		 pop	 ebx
  0017e	5f		 pop	 edi
  0017f	c7 86 1c 9f 00
	00 5a 00 00 00	 mov	 DWORD PTR [esi+40732], 90 ; 0000005aH
  00189	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0018a	5d		 pop	 ebp
  0018b	c2 34 00	 ret	 52			; 00000034H
$LN147@Set:

; 796  : 	}
; 797  : 	else if ( skill == 33 )

  0018e	83 ff 21	 cmp	 edi, 33			; 00000021H
  00191	75 11		 jne	 SHORT $LN145@Set

; 798  : 	{
; 799  : 		this->m_RequireEnergy[skill] = 130;

  00193	5b		 pop	 ebx
  00194	5f		 pop	 edi
  00195	c7 86 20 9f 00
	00 82 00 00 00	 mov	 DWORD PTR [esi+40736], 130 ; 00000082H
  0019f	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  001a0	5d		 pop	 ebp
  001a1	c2 34 00	 ret	 52			; 00000034H
$LN145@Set:

; 800  : 	}
; 801  : 	else if ( skill == 34 )

  001a4	83 ff 22	 cmp	 edi, 34			; 00000022H
  001a7	75 11		 jne	 SHORT $LN143@Set

; 802  : 	{
; 803  : 		this->m_RequireEnergy[skill] = 170;

  001a9	5b		 pop	 ebx
  001aa	5f		 pop	 edi
  001ab	c7 86 24 9f 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+40740], 170 ; 000000aaH
  001b5	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  001b6	5d		 pop	 ebp
  001b7	c2 34 00	 ret	 52			; 00000034H
$LN143@Set:

; 804  : 	}
; 805  : 	else if ( skill == 35 )

  001ba	83 ff 23	 cmp	 edi, 35			; 00000023H
  001bd	75 11		 jne	 SHORT $LN141@Set

; 806  : 	{
; 807  : 		this->m_RequireEnergy[skill] = 210;

  001bf	5b		 pop	 ebx
  001c0	5f		 pop	 edi
  001c1	c7 86 28 9f 00
	00 d2 00 00 00	 mov	 DWORD PTR [esi+40744], 210 ; 000000d2H
  001cb	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  001cc	5d		 pop	 ebp
  001cd	c2 34 00	 ret	 52			; 00000034H
$LN141@Set:

; 808  : 	}
; 809  : 	else if ( skill == 36 )

  001d0	83 ff 24	 cmp	 edi, 36			; 00000024H
  001d3	75 11		 jne	 SHORT $LN139@Set

; 810  : 	{
; 811  : 		this->m_RequireEnergy[skill] = 300;

  001d5	5b		 pop	 ebx
  001d6	5f		 pop	 edi
  001d7	c7 86 2c 9f 00
	00 2c 01 00 00	 mov	 DWORD PTR [esi+40748], 300 ; 0000012cH
  001e1	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  001e2	5d		 pop	 ebp
  001e3	c2 34 00	 ret	 52			; 00000034H
$LN139@Set:

; 812  : 	}
; 813  : 	else if ( skill == 41 )

  001e6	83 ff 29	 cmp	 edi, 41			; 00000029H
  001e9	75 0d		 jne	 SHORT $LN137@Set

; 814  : 	{
; 815  : 		this->m_RequireEnergy[skill] = 0;

  001eb	89 9e 40 9f 00
	00		 mov	 DWORD PTR [esi+40768], ebx
  001f1	5b		 pop	 ebx
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  001f4	5d		 pop	 ebp
  001f5	c2 34 00	 ret	 52			; 00000034H
$LN137@Set:

; 816  : 	}
; 817  : 	else if ( skill == 42 )

  001f8	83 ff 2a	 cmp	 edi, 42			; 0000002aH
  001fb	75 0d		 jne	 SHORT $LN135@Set

; 818  : 	{
; 819  : 		this->m_RequireEnergy[skill] = 0;

  001fd	89 9e 44 9f 00
	00		 mov	 DWORD PTR [esi+40772], ebx
  00203	5b		 pop	 ebx
  00204	5f		 pop	 edi
  00205	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00206	5d		 pop	 ebp
  00207	c2 34 00	 ret	 52			; 00000034H
$LN135@Set:

; 820  : 	}
; 821  : 	else if ( skill == 43 )

  0020a	83 ff 2b	 cmp	 edi, 43			; 0000002bH
  0020d	75 0d		 jne	 SHORT $LN133@Set

; 822  : 	{
; 823  : 		this->m_RequireEnergy[skill] = 0;

  0020f	89 9e 48 9f 00
	00		 mov	 DWORD PTR [esi+40776], ebx
  00215	5b		 pop	 ebx
  00216	5f		 pop	 edi
  00217	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00218	5d		 pop	 ebp
  00219	c2 34 00	 ret	 52			; 00000034H
$LN133@Set:

; 824  : 	}
; 825  : 	else if ( skill == 47 )

  0021c	83 ff 2f	 cmp	 edi, 47			; 0000002fH
  0021f	75 0d		 jne	 SHORT $LN131@Set

; 826  : 	{
; 827  : 		this->m_RequireEnergy[skill] = 0;

  00221	89 9e 58 9f 00
	00		 mov	 DWORD PTR [esi+40792], ebx
  00227	5b		 pop	 ebx
  00228	5f		 pop	 edi
  00229	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0022a	5d		 pop	 ebp
  0022b	c2 34 00	 ret	 52			; 00000034H
$LN131@Set:

; 828  : 	}
; 829  : 	else if ( skill == 48 )

  0022e	83 ff 30	 cmp	 edi, 48			; 00000030H
  00231	75 0d		 jne	 SHORT $LN129@Set

; 830  : 	{
; 831  : 		this->m_RequireEnergy[skill] = 0;

  00233	89 9e 5c 9f 00
	00		 mov	 DWORD PTR [esi+40796], ebx
  00239	5b		 pop	 ebx
  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0023c	5d		 pop	 ebp
  0023d	c2 34 00	 ret	 52			; 00000034H
$LN129@Set:

; 832  : 	}
; 833  : 	else if ( skill == 49  )

  00240	83 ff 31	 cmp	 edi, 49			; 00000031H
  00243	75 0d		 jne	 SHORT $LN127@Set

; 834  : 	{
; 835  : 		this->m_RequireEnergy[skill] = 0;

  00245	89 9e 60 9f 00
	00		 mov	 DWORD PTR [esi+40800], ebx
  0024b	5b		 pop	 ebx
  0024c	5f		 pop	 edi
  0024d	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0024e	5d		 pop	 ebp
  0024f	c2 34 00	 ret	 52			; 00000034H
$LN127@Set:

; 836  : 	}
; 837  : 	else if ( skill == 55  )

  00252	83 ff 37	 cmp	 edi, 55			; 00000037H
  00255	75 0d		 jne	 SHORT $LN125@Set

; 838  : 	{
; 839  : 		this->m_RequireEnergy[skill] = 0;

  00257	89 9e 78 9f 00
	00		 mov	 DWORD PTR [esi+40824], ebx
  0025d	5b		 pop	 ebx
  0025e	5f		 pop	 edi
  0025f	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00260	5d		 pop	 ebp
  00261	c2 34 00	 ret	 52			; 00000034H
$LN125@Set:

; 840  : 	}
; 841  : 	else if ( skill == 51  )

  00264	83 ff 33	 cmp	 edi, 51			; 00000033H
  00267	75 0d		 jne	 SHORT $LN123@Set

; 842  : 	{
; 843  : 		this->m_RequireEnergy[skill] = 0;

  00269	89 9e 68 9f 00
	00		 mov	 DWORD PTR [esi+40808], ebx
  0026f	5b		 pop	 ebx
  00270	5f		 pop	 edi
  00271	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00272	5d		 pop	 ebp
  00273	c2 34 00	 ret	 52			; 00000034H
$LN123@Set:

; 844  : 	}
; 845  : 	else if ( skill == 52  )

  00276	83 ff 34	 cmp	 edi, 52			; 00000034H
  00279	75 0d		 jne	 SHORT $LN121@Set

; 846  : 	{
; 847  : 		this->m_RequireEnergy[skill] = 0;

  0027b	89 9e 6c 9f 00
	00		 mov	 DWORD PTR [esi+40812], ebx
  00281	5b		 pop	 ebx
  00282	5f		 pop	 edi
  00283	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00284	5d		 pop	 ebp
  00285	c2 34 00	 ret	 52			; 00000034H
$LN121@Set:

; 848  : 	}
; 849  : 	else if ( skill == 24  )

  00288	83 ff 18	 cmp	 edi, 24			; 00000018H
  0028b	75 0d		 jne	 SHORT $LN119@Set

; 850  : 	{
; 851  : 		this->m_RequireEnergy[skill] = 0;

  0028d	89 9e fc 9e 00
	00		 mov	 DWORD PTR [esi+40700], ebx
  00293	5b		 pop	 ebx
  00294	5f		 pop	 edi
  00295	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00296	5d		 pop	 ebp
  00297	c2 34 00	 ret	 52			; 00000034H
$LN119@Set:

; 852  : 	}
; 853  : 	else if ( skill == 17 )

  0029a	83 ff 11	 cmp	 edi, 17			; 00000011H
  0029d	75 0d		 jne	 SHORT $LN117@Set

; 854  : 	{
; 855  : 		this->m_RequireEnergy[skill] = 0;

  0029f	89 9e e0 9e 00
	00		 mov	 DWORD PTR [esi+40672], ebx
  002a5	5b		 pop	 ebx
  002a6	5f		 pop	 edi
  002a7	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  002a8	5d		 pop	 ebp
  002a9	c2 34 00	 ret	 52			; 00000034H
$LN117@Set:

; 856  : 	}
; 857  : 	else if ( skill == 18 )

  002ac	83 ff 12	 cmp	 edi, 18			; 00000012H
  002af	75 0d		 jne	 SHORT $LN115@Set

; 858  : 	{
; 859  : 		this->m_RequireEnergy[skill] = 0;

  002b1	89 9e e4 9e 00
	00		 mov	 DWORD PTR [esi+40676], ebx
  002b7	5b		 pop	 ebx
  002b8	5f		 pop	 edi
  002b9	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  002ba	5d		 pop	 ebp
  002bb	c2 34 00	 ret	 52			; 00000034H
$LN115@Set:

; 860  : 	}
; 861  : 	else if ( skill == 19 )

  002be	83 ff 13	 cmp	 edi, 19			; 00000013H
  002c1	75 0d		 jne	 SHORT $LN113@Set

; 862  : 	{
; 863  : 		this->m_RequireEnergy[skill] = 0;

  002c3	89 9e e8 9e 00
	00		 mov	 DWORD PTR [esi+40680], ebx
  002c9	5b		 pop	 ebx
  002ca	5f		 pop	 edi
  002cb	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  002cc	5d		 pop	 ebp
  002cd	c2 34 00	 ret	 52			; 00000034H
$LN113@Set:

; 864  : 	}
; 865  : 	else if ( skill == 20  )

  002d0	83 ff 14	 cmp	 edi, 20			; 00000014H
  002d3	75 0d		 jne	 SHORT $LN111@Set

; 866  : 	{
; 867  : 		this->m_RequireEnergy[skill] = 0;

  002d5	89 9e ec 9e 00
	00		 mov	 DWORD PTR [esi+40684], ebx
  002db	5b		 pop	 ebx
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  002de	5d		 pop	 ebp
  002df	c2 34 00	 ret	 52			; 00000034H
$LN111@Set:

; 868  : 	}
; 869  : 	else if ( skill == 21  )

  002e2	83 ff 15	 cmp	 edi, 21			; 00000015H
  002e5	75 0d		 jne	 SHORT $LN109@Set

; 870  : 	{
; 871  : 		this->m_RequireEnergy[skill] = 0;

  002e7	89 9e f0 9e 00
	00		 mov	 DWORD PTR [esi+40688], ebx
  002ed	5b		 pop	 ebx
  002ee	5f		 pop	 edi
  002ef	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  002f0	5d		 pop	 ebp
  002f1	c2 34 00	 ret	 52			; 00000034H
$LN109@Set:

; 872  : 	}
; 873  : 	else if ( skill == 22  )

  002f4	83 ff 16	 cmp	 edi, 22			; 00000016H
  002f7	75 0d		 jne	 SHORT $LN107@Set

; 874  : 	{
; 875  : 		this->m_RequireEnergy[skill] = 0;

  002f9	89 9e f4 9e 00
	00		 mov	 DWORD PTR [esi+40692], ebx
  002ff	5b		 pop	 ebx
  00300	5f		 pop	 edi
  00301	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00302	5d		 pop	 ebp
  00303	c2 34 00	 ret	 52			; 00000034H
$LN107@Set:

; 876  : 	}
; 877  : 	else if ( skill == 23  )

  00306	83 ff 17	 cmp	 edi, 23			; 00000017H
  00309	75 0d		 jne	 SHORT $LN105@Set

; 878  : 	{
; 879  : 		this->m_RequireEnergy[skill] = 0;

  0030b	89 9e f8 9e 00
	00		 mov	 DWORD PTR [esi+40696], ebx
  00311	5b		 pop	 ebx
  00312	5f		 pop	 edi
  00313	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00314	5d		 pop	 ebp
  00315	c2 34 00	 ret	 52			; 00000034H
$LN105@Set:

; 880  : 	}
; 881  : 	else if ( skill == 25  )

  00318	83 ff 19	 cmp	 edi, 25			; 00000019H
  0031b	75 0d		 jne	 SHORT $LN103@Set

; 882  : 	{
; 883  : 		this->m_RequireEnergy[skill] = 0;

  0031d	89 9e 00 9f 00
	00		 mov	 DWORD PTR [esi+40704], ebx
  00323	5b		 pop	 ebx
  00324	5f		 pop	 edi
  00325	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00326	5d		 pop	 ebp
  00327	c2 34 00	 ret	 52			; 00000034H
$LN103@Set:

; 884  : 	}
; 885  : 	else if ( skill == 56  )

  0032a	83 ff 38	 cmp	 edi, 56			; 00000038H
  0032d	75 0d		 jne	 SHORT $LN101@Set

; 886  : 	{
; 887  : 		this->m_RequireEnergy[skill] = 0;

  0032f	89 9e 7c 9f 00
	00		 mov	 DWORD PTR [esi+40828], ebx
  00335	5b		 pop	 ebx
  00336	5f		 pop	 edi
  00337	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00338	5d		 pop	 ebp
  00339	c2 34 00	 ret	 52			; 00000034H
$LN101@Set:

; 888  : 	}
; 889  : 	else if ( skill == 60  )

  0033c	83 ff 3c	 cmp	 edi, 60			; 0000003cH
  0033f	75 0d		 jne	 SHORT $LN99@Set

; 890  : 	{
; 891  : 		this->m_RequireEnergy[skill] = 0;

  00341	89 9e 8c 9f 00
	00		 mov	 DWORD PTR [esi+40844], ebx
  00347	5b		 pop	 ebx
  00348	5f		 pop	 edi
  00349	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0034a	5d		 pop	 ebp
  0034b	c2 34 00	 ret	 52			; 00000034H
$LN99@Set:

; 892  : 	}
; 893  : 	else if ( skill == 44  )

  0034e	83 ff 2c	 cmp	 edi, 44			; 0000002cH
  00351	75 0d		 jne	 SHORT $LN97@Set

; 894  : 	{
; 895  : 		this->m_RequireEnergy[skill] = 0;

  00353	89 9e 4c 9f 00
	00		 mov	 DWORD PTR [esi+40780], ebx
  00359	5b		 pop	 ebx
  0035a	5f		 pop	 edi
  0035b	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0035c	5d		 pop	 ebp
  0035d	c2 34 00	 ret	 52			; 00000034H
$LN97@Set:

; 896  : 	}
; 897  : 	else if ( skill == 45  )

  00360	83 ff 2d	 cmp	 edi, 45			; 0000002dH
  00363	75 0d		 jne	 SHORT $LN95@Set

; 898  : 	{
; 899  : 		this->m_RequireEnergy[skill] = 0;

  00365	89 9e 50 9f 00
	00		 mov	 DWORD PTR [esi+40784], ebx
  0036b	5b		 pop	 ebx
  0036c	5f		 pop	 edi
  0036d	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0036e	5d		 pop	 ebp
  0036f	c2 34 00	 ret	 52			; 00000034H
$LN95@Set:

; 900  : 	}
; 901  : 	else if ( skill == 46  )

  00372	83 ff 2e	 cmp	 edi, 46			; 0000002eH
  00375	75 0d		 jne	 SHORT $LN93@Set

; 902  : 	{
; 903  : 		this->m_RequireEnergy[skill] = 0;

  00377	89 9e 54 9f 00
	00		 mov	 DWORD PTR [esi+40788], ebx
  0037d	5b		 pop	 ebx
  0037e	5f		 pop	 edi
  0037f	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00380	5d		 pop	 ebp
  00381	c2 34 00	 ret	 52			; 00000034H
$LN93@Set:

; 904  : 	}
; 905  : 	else if ( skill == 57  )

  00384	83 ff 39	 cmp	 edi, 57			; 00000039H
  00387	75 0d		 jne	 SHORT $LN91@Set

; 906  : 	{
; 907  : 		this->m_RequireEnergy[skill] = 0;

  00389	89 9e 80 9f 00
	00		 mov	 DWORD PTR [esi+40832], ebx
  0038f	5b		 pop	 ebx
  00390	5f		 pop	 edi
  00391	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00392	5d		 pop	 ebp
  00393	c2 34 00	 ret	 52			; 00000034H
$LN91@Set:

; 908  : 	}
; 909  : 	else if ( skill == 73  )

  00396	83 ff 49	 cmp	 edi, 73			; 00000049H
  00399	75 0d		 jne	 SHORT $LN89@Set

; 910  : 	{
; 911  : 		this->m_RequireEnergy[skill] = 0;

  0039b	89 9e c0 9f 00
	00		 mov	 DWORD PTR [esi+40896], ebx
  003a1	5b		 pop	 ebx
  003a2	5f		 pop	 edi
  003a3	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  003a4	5d		 pop	 ebp
  003a5	c2 34 00	 ret	 52			; 00000034H
$LN89@Set:

; 912  : 	}
; 913  : 	else if ( skill == 74  )

  003a8	83 ff 4a	 cmp	 edi, 74			; 0000004aH
  003ab	75 0d		 jne	 SHORT $LN87@Set

; 914  : 	{
; 915  : 		this->m_RequireEnergy[skill] = 0;

  003ad	89 9e c4 9f 00
	00		 mov	 DWORD PTR [esi+40900], ebx
  003b3	5b		 pop	 ebx
  003b4	5f		 pop	 edi
  003b5	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  003b6	5d		 pop	 ebp
  003b7	c2 34 00	 ret	 52			; 00000034H
$LN87@Set:

; 916  : 	}
; 917  : 	else if ( skill == 67  )

  003ba	83 ff 43	 cmp	 edi, 67			; 00000043H
  003bd	75 0d		 jne	 SHORT $LN85@Set

; 918  : 	{
; 919  : 		this->m_RequireEnergy[skill] = 0;

  003bf	89 9e a8 9f 00
	00		 mov	 DWORD PTR [esi+40872], ebx
  003c5	5b		 pop	 ebx
  003c6	5f		 pop	 edi
  003c7	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  003c8	5d		 pop	 ebp
  003c9	c2 34 00	 ret	 52			; 00000034H
$LN85@Set:

; 920  : 	}
; 921  : 	else if ( skill == 68  )

  003cc	83 ff 44	 cmp	 edi, 68			; 00000044H
  003cf	75 0d		 jne	 SHORT $LN83@Set

; 922  : 	{
; 923  : 		this->m_RequireEnergy[skill] = 0;

  003d1	89 9e ac 9f 00
	00		 mov	 DWORD PTR [esi+40876], ebx
  003d7	5b		 pop	 ebx
  003d8	5f		 pop	 edi
  003d9	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  003da	5d		 pop	 ebp
  003db	c2 34 00	 ret	 52			; 00000034H
$LN83@Set:

; 924  : 	}
; 925  : 	else if ( skill == 69  )

  003de	83 ff 45	 cmp	 edi, 69			; 00000045H
  003e1	75 0d		 jne	 SHORT $LN81@Set

; 926  : 	{
; 927  : 		this->m_RequireEnergy[skill] = 0;

  003e3	89 9e b0 9f 00
	00		 mov	 DWORD PTR [esi+40880], ebx
  003e9	5b		 pop	 ebx
  003ea	5f		 pop	 edi
  003eb	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  003ec	5d		 pop	 ebp
  003ed	c2 34 00	 ret	 52			; 00000034H
$LN81@Set:

; 928  : 	}
; 929  : 	else if ( skill == 70  )

  003f0	83 ff 46	 cmp	 edi, 70			; 00000046H
  003f3	75 0d		 jne	 SHORT $LN79@Set

; 930  : 	{
; 931  : 		this->m_RequireEnergy[skill] = 0;

  003f5	89 9e b4 9f 00
	00		 mov	 DWORD PTR [esi+40884], ebx
  003fb	5b		 pop	 ebx
  003fc	5f		 pop	 edi
  003fd	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  003fe	5d		 pop	 ebp
  003ff	c2 34 00	 ret	 52			; 00000034H
$LN79@Set:

; 932  : 	}
; 933  : 	else if ( skill == 71  )

  00402	83 ff 47	 cmp	 edi, 71			; 00000047H
  00405	75 0d		 jne	 SHORT $LN77@Set

; 934  : 	{
; 935  : 		this->m_RequireEnergy[skill] = 0;

  00407	89 9e b8 9f 00
	00		 mov	 DWORD PTR [esi+40888], ebx
  0040d	5b		 pop	 ebx
  0040e	5f		 pop	 edi
  0040f	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00410	5d		 pop	 ebp
  00411	c2 34 00	 ret	 52			; 00000034H
$LN77@Set:

; 936  : 	}
; 937  : 	else if ( skill == 72  )

  00414	83 ff 48	 cmp	 edi, 72			; 00000048H
  00417	75 0d		 jne	 SHORT $LN75@Set

; 938  : 	{
; 939  : 		this->m_RequireEnergy[skill] = 0;

  00419	89 9e bc 9f 00
	00		 mov	 DWORD PTR [esi+40892], ebx
  0041f	5b		 pop	 ebx
  00420	5f		 pop	 edi
  00421	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00422	5d		 pop	 ebp
  00423	c2 34 00	 ret	 52			; 00000034H
$LN75@Set:

; 940  : 	}
; 941  : 	else if ( skill == 76  )

  00426	83 ff 4c	 cmp	 edi, 76			; 0000004cH
  00429	75 0d		 jne	 SHORT $LN73@Set

; 942  : 	{
; 943  : 		this->m_RequireEnergy[skill] = 0;

  0042b	89 9e cc 9f 00
	00		 mov	 DWORD PTR [esi+40908], ebx
  00431	5b		 pop	 ebx
  00432	5f		 pop	 edi
  00433	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00434	5d		 pop	 ebp
  00435	c2 34 00	 ret	 52			; 00000034H
$LN73@Set:

; 944  : 	}
; 945  : 	else if ( skill == 77  )

  00438	83 ff 4d	 cmp	 edi, 77			; 0000004dH
  0043b	75 0d		 jne	 SHORT $LN71@Set

; 946  : 	{
; 947  : 		this->m_RequireEnergy[skill] = 0;

  0043d	89 9e d0 9f 00
	00		 mov	 DWORD PTR [esi+40912], ebx
  00443	5b		 pop	 ebx
  00444	5f		 pop	 edi
  00445	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00446	5d		 pop	 ebp
  00447	c2 34 00	 ret	 52			; 00000034H
$LN71@Set:

; 948  : 	}
; 949  : 	else if ( skill == 78  )

  0044a	83 ff 4e	 cmp	 edi, 78			; 0000004eH
  0044d	75 0d		 jne	 SHORT $LN69@Set

; 950  : 	{
; 951  : 		this->m_RequireEnergy[skill] = 0;

  0044f	89 9e d4 9f 00
	00		 mov	 DWORD PTR [esi+40916], ebx
  00455	5b		 pop	 ebx
  00456	5f		 pop	 edi
  00457	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00458	5d		 pop	 ebp
  00459	c2 34 00	 ret	 52			; 00000034H
$LN69@Set:

; 952  : 	}
; 953  : 	else if ( skill == 79  )

  0045c	83 ff 4f	 cmp	 edi, 79			; 0000004fH
  0045f	75 0d		 jne	 SHORT $LN67@Set

; 954  : 	{
; 955  : 		this->m_RequireEnergy[skill] = 0;

  00461	89 9e d8 9f 00
	00		 mov	 DWORD PTR [esi+40920], ebx
  00467	5b		 pop	 ebx
  00468	5f		 pop	 edi
  00469	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0046a	5d		 pop	 ebp
  0046b	c2 34 00	 ret	 52			; 00000034H
$LN67@Set:

; 956  : 	}
; 957  : 	else if ( skill == 62  )

  0046e	83 ff 3e	 cmp	 edi, 62			; 0000003eH
  00471	75 0d		 jne	 SHORT $LN65@Set

; 958  : 	{
; 959  : 		this->m_RequireEnergy[skill] = 0;

  00473	89 9e 94 9f 00
	00		 mov	 DWORD PTR [esi+40852], ebx
  00479	5b		 pop	 ebx
  0047a	5f		 pop	 edi
  0047b	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0047c	5d		 pop	 ebp
  0047d	c2 34 00	 ret	 52			; 00000034H
$LN65@Set:

; 960  : 	}
; 961  : 	else if ( skill == 214  )

  00480	81 ff d6 00 00
	00		 cmp	 edi, 214		; 000000d6H
  00486	75 0d		 jne	 SHORT $LN63@Set

; 962  : 	{
; 963  : 		this->m_RequireEnergy[skill] = 0;

  00488	89 9e f4 a1 00
	00		 mov	 DWORD PTR [esi+41460], ebx
  0048e	5b		 pop	 ebx
  0048f	5f		 pop	 edi
  00490	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00491	5d		 pop	 ebp
  00492	c2 34 00	 ret	 52			; 00000034H
$LN63@Set:

; 964  : 	}
; 965  : 	else if ( skill == 215  )

  00495	81 ff d7 00 00
	00		 cmp	 edi, 215		; 000000d7H
  0049b	75 0d		 jne	 SHORT $LN61@Set

; 966  : 	{
; 967  : 		this->m_RequireEnergy[skill] = 0;

  0049d	89 9e f8 a1 00
	00		 mov	 DWORD PTR [esi+41464], ebx
  004a3	5b		 pop	 ebx
  004a4	5f		 pop	 edi
  004a5	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  004a6	5d		 pop	 ebp
  004a7	c2 34 00	 ret	 52			; 00000034H
$LN61@Set:

; 968  : 	}
; 969  : 	else if ( skill == 216  )

  004aa	81 ff d8 00 00
	00		 cmp	 edi, 216		; 000000d8H
  004b0	75 0d		 jne	 SHORT $LN59@Set

; 970  : 	{
; 971  : 		this->m_RequireEnergy[skill] = 0;

  004b2	89 9e fc a1 00
	00		 mov	 DWORD PTR [esi+41468], ebx
  004b8	5b		 pop	 ebx
  004b9	5f		 pop	 edi
  004ba	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  004bb	5d		 pop	 ebp
  004bc	c2 34 00	 ret	 52			; 00000034H
$LN59@Set:

; 972  : 	}
; 973  : 	else if ( skill == 217  )

  004bf	81 ff d9 00 00
	00		 cmp	 edi, 217		; 000000d9H
  004c5	75 0d		 jne	 SHORT $LN57@Set

; 974  : 	{
; 975  : 		this->m_RequireEnergy[skill] = 0;

  004c7	89 9e 00 a2 00
	00		 mov	 DWORD PTR [esi+41472], ebx
  004cd	5b		 pop	 ebx
  004ce	5f		 pop	 edi
  004cf	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  004d0	5d		 pop	 ebp
  004d1	c2 34 00	 ret	 52			; 00000034H
$LN57@Set:

; 976  : 	}
; 977  : 	else if ( skill == 219  )

  004d4	81 ff db 00 00
	00		 cmp	 edi, 219		; 000000dbH
  004da	75 0d		 jne	 SHORT $LN55@Set

; 978  : 	{
; 979  : 		this->m_RequireEnergy[skill] = 0;

  004dc	89 9e 08 a2 00
	00		 mov	 DWORD PTR [esi+41480], ebx
  004e2	5b		 pop	 ebx
  004e3	5f		 pop	 edi
  004e4	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  004e5	5d		 pop	 ebp
  004e6	c2 34 00	 ret	 52			; 00000034H
$LN55@Set:

; 980  : 	}
; 981  : 	else if ( skill == 220  )

  004e9	81 ff dc 00 00
	00		 cmp	 edi, 220		; 000000dcH
  004ef	75 0d		 jne	 SHORT $LN53@Set

; 982  : 	{
; 983  : 		this->m_RequireEnergy[skill] = 0;

  004f1	89 9e 0c a2 00
	00		 mov	 DWORD PTR [esi+41484], ebx
  004f7	5b		 pop	 ebx
  004f8	5f		 pop	 edi
  004f9	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  004fa	5d		 pop	 ebp
  004fb	c2 34 00	 ret	 52			; 00000034H
$LN53@Set:

; 984  : 	}
; 985  : 	else if ( skill == 223  )

  004fe	81 ff df 00 00
	00		 cmp	 edi, 223		; 000000dfH
  00504	75 0d		 jne	 SHORT $LN51@Set

; 986  : 	{
; 987  : 		this->m_RequireEnergy[skill] = 0;

  00506	89 9e 18 a2 00
	00		 mov	 DWORD PTR [esi+41496], ebx
  0050c	5b		 pop	 ebx
  0050d	5f		 pop	 edi
  0050e	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0050f	5d		 pop	 ebp
  00510	c2 34 00	 ret	 52			; 00000034H
$LN51@Set:

; 988  : 	}
; 989  : 	else if ( skill == 224  )

  00513	81 ff e0 00 00
	00		 cmp	 edi, 224		; 000000e0H
  00519	75 0d		 jne	 SHORT $LN49@Set

; 990  : 	{
; 991  : 		this->m_RequireEnergy[skill] = 0;

  0051b	89 9e 1c a2 00
	00		 mov	 DWORD PTR [esi+41500], ebx
  00521	5b		 pop	 ebx
  00522	5f		 pop	 edi
  00523	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00524	5d		 pop	 ebp
  00525	c2 34 00	 ret	 52			; 00000034H
$LN49@Set:

; 992  : 	}
; 993  : 	else if ( skill == 221  )

  00528	81 ff dd 00 00
	00		 cmp	 edi, 221		; 000000ddH
  0052e	75 0d		 jne	 SHORT $LN47@Set

; 994  : 	{
; 995  : 		this->m_RequireEnergy[skill] = 0;

  00530	89 9e 10 a2 00
	00		 mov	 DWORD PTR [esi+41488], ebx
  00536	5b		 pop	 ebx
  00537	5f		 pop	 edi
  00538	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00539	5d		 pop	 ebp
  0053a	c2 34 00	 ret	 52			; 00000034H
$LN47@Set:

; 996  : 	}
; 997  : 	else if ( skill == 222  )

  0053d	81 ff de 00 00
	00		 cmp	 edi, 222		; 000000deH
  00543	75 0d		 jne	 SHORT $LN45@Set

; 998  : 	{
; 999  : 		this->m_RequireEnergy[skill] = 0;

  00545	89 9e 14 a2 00
	00		 mov	 DWORD PTR [esi+41492], ebx
  0054b	5b		 pop	 ebx
  0054c	5f		 pop	 edi
  0054d	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0054e	5d		 pop	 ebp
  0054f	c2 34 00	 ret	 52			; 00000034H
$LN45@Set:

; 1000 : 	}
; 1001 : 	//Season 4
; 1002 :     else if ( skill == 225  )

  00552	81 ff e1 00 00
	00		 cmp	 edi, 225		; 000000e1H
  00558	75 0d		 jne	 SHORT $LN43@Set

; 1003 :     {
; 1004 :         this->m_RequireEnergy[skill] = 0;

  0055a	89 9e 20 a2 00
	00		 mov	 DWORD PTR [esi+41504], ebx
  00560	5b		 pop	 ebx
  00561	5f		 pop	 edi
  00562	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00563	5d		 pop	 ebp
  00564	c2 34 00	 ret	 52			; 00000034H
$LN43@Set:

; 1005 :     }
; 1006 :     else if ( skill == 230  )

  00567	81 ff e6 00 00
	00		 cmp	 edi, 230		; 000000e6H
  0056d	75 0d		 jne	 SHORT $LN41@Set

; 1007 :     {
; 1008 :         this->m_RequireEnergy[skill] = 0;

  0056f	89 9e 34 a2 00
	00		 mov	 DWORD PTR [esi+41524], ebx
  00575	5b		 pop	 ebx
  00576	5f		 pop	 edi
  00577	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00578	5d		 pop	 ebp
  00579	c2 34 00	 ret	 52			; 00000034H
$LN41@Set:

; 1009 :     }
; 1010 :     else if ( skill == 218  )

  0057c	81 ff da 00 00
	00		 cmp	 edi, 218		; 000000daH
  00582	75 0d		 jne	 SHORT $LN39@Set

; 1011 :     {
; 1012 :         this->m_RequireEnergy[skill] = 0;

  00584	89 9e 04 a2 00
	00		 mov	 DWORD PTR [esi+41476], ebx
  0058a	5b		 pop	 ebx
  0058b	5f		 pop	 edi
  0058c	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0058d	5d		 pop	 ebp
  0058e	c2 34 00	 ret	 52			; 00000034H
$LN39@Set:

; 1013 :     }
; 1014 :     else if ( skill == 232  )

  00591	81 ff e8 00 00
	00		 cmp	 edi, 232		; 000000e8H
  00597	75 0d		 jne	 SHORT $LN37@Set

; 1015 :     {
; 1016 :         this->m_RequireEnergy[skill] = 0;

  00599	89 9e 3c a2 00
	00		 mov	 DWORD PTR [esi+41532], ebx
  0059f	5b		 pop	 ebx
  005a0	5f		 pop	 edi
  005a1	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  005a2	5d		 pop	 ebp
  005a3	c2 34 00	 ret	 52			; 00000034H
$LN37@Set:

; 1017 :     }
; 1018 :     else if ( skill == 233  )

  005a6	81 ff e9 00 00
	00		 cmp	 edi, 233		; 000000e9H
  005ac	75 0d		 jne	 SHORT $LN35@Set

; 1019 :     {
; 1020 :         this->m_RequireEnergy[skill] = 0;

  005ae	89 9e 40 a2 00
	00		 mov	 DWORD PTR [esi+41536], ebx
  005b4	5b		 pop	 ebx
  005b5	5f		 pop	 edi
  005b6	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  005b7	5d		 pop	 ebp
  005b8	c2 34 00	 ret	 52			; 00000034H
$LN35@Set:

; 1021 :     }
; 1022 :     else if ( skill == 234  )

  005bb	81 ff ea 00 00
	00		 cmp	 edi, 234		; 000000eaH
  005c1	75 0d		 jne	 SHORT $LN33@Set

; 1023 :     {
; 1024 :         this->m_RequireEnergy[skill] = 0;

  005c3	89 9e 44 a2 00
	00		 mov	 DWORD PTR [esi+41540], ebx
  005c9	5b		 pop	 ebx
  005ca	5f		 pop	 edi
  005cb	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  005cc	5d		 pop	 ebp
  005cd	c2 34 00	 ret	 52			; 00000034H
$LN33@Set:

; 1025 :     }
; 1026 :     else if ( skill == 235  )

  005d0	81 ff eb 00 00
	00		 cmp	 edi, 235		; 000000ebH
  005d6	75 0d		 jne	 SHORT $LN31@Set

; 1027 :     {
; 1028 :         this->m_RequireEnergy[skill] = 0;

  005d8	89 9e 48 a2 00
	00		 mov	 DWORD PTR [esi+41544], ebx
  005de	5b		 pop	 ebx
  005df	5f		 pop	 edi
  005e0	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  005e1	5d		 pop	 ebp
  005e2	c2 34 00	 ret	 52			; 00000034H
$LN31@Set:

; 1029 :     }
; 1030 :     else if ( skill == 236  )

  005e5	81 ff ec 00 00
	00		 cmp	 edi, 236		; 000000ecH
  005eb	75 0d		 jne	 SHORT $LN29@Set

; 1031 :     {
; 1032 :         this->m_RequireEnergy[skill] = 0;

  005ed	89 9e 4c a2 00
	00		 mov	 DWORD PTR [esi+41548], ebx
  005f3	5b		 pop	 ebx
  005f4	5f		 pop	 edi
  005f5	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  005f6	5d		 pop	 ebp
  005f7	c2 34 00	 ret	 52			; 00000034H
$LN29@Set:

; 1033 :     }
; 1034 :     else if ( skill == 237  )

  005fa	81 ff ed 00 00
	00		 cmp	 edi, 237		; 000000edH
  00600	75 0d		 jne	 SHORT $LN27@Set

; 1035 :     {
; 1036 :         this->m_RequireEnergy[skill] = 0;

  00602	89 9e 50 a2 00
	00		 mov	 DWORD PTR [esi+41552], ebx
  00608	5b		 pop	 ebx
  00609	5f		 pop	 edi
  0060a	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0060b	5d		 pop	 ebp
  0060c	c2 34 00	 ret	 52			; 00000034H
$LN27@Set:

; 1037 :     }
; 1038 :     else if ( skill == 238  )

  0060f	81 ff ee 00 00
	00		 cmp	 edi, 238		; 000000eeH
  00615	75 0d		 jne	 SHORT $LN25@Set

; 1039 :     {
; 1040 :         this->m_RequireEnergy[skill] = 0;

  00617	89 9e 54 a2 00
	00		 mov	 DWORD PTR [esi+41556], ebx
  0061d	5b		 pop	 ebx
  0061e	5f		 pop	 edi
  0061f	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00620	5d		 pop	 ebp
  00621	c2 34 00	 ret	 52			; 00000034H
$LN25@Set:

; 1041 :     }
; 1042 : 	else if ( skill == 239  )

  00624	81 ff ef 00 00
	00		 cmp	 edi, 239		; 000000efH
  0062a	75 0d		 jne	 SHORT $LN23@Set

; 1043 : 	{
; 1044 : 		this->m_RequireEnergy[skill] = 0;

  0062c	89 9e 58 a2 00
	00		 mov	 DWORD PTR [esi+41560], ebx
  00632	5b		 pop	 ebx
  00633	5f		 pop	 edi
  00634	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00635	5d		 pop	 ebp
  00636	c2 34 00	 ret	 52			; 00000034H
$LN23@Set:

; 1045 : 	}
; 1046 : 	else if ( skill == 260  )

  00639	81 ff 04 01 00
	00		 cmp	 edi, 260		; 00000104H
  0063f	75 0d		 jne	 SHORT $LN21@Set

; 1047 : 	{
; 1048 : 		this->m_RequireEnergy[skill] = 0;

  00641	89 9e ac a2 00
	00		 mov	 DWORD PTR [esi+41644], ebx
  00647	5b		 pop	 ebx
  00648	5f		 pop	 edi
  00649	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0064a	5d		 pop	 ebp
  0064b	c2 34 00	 ret	 52			; 00000034H
$LN21@Set:

; 1049 : 	}
; 1050 : 	else if ( skill == 261  )

  0064e	81 ff 05 01 00
	00		 cmp	 edi, 261		; 00000105H
  00654	75 0d		 jne	 SHORT $LN19@Set

; 1051 : 	{
; 1052 : 		this->m_RequireEnergy[skill] = 0;

  00656	89 9e b0 a2 00
	00		 mov	 DWORD PTR [esi+41648], ebx
  0065c	5b		 pop	 ebx
  0065d	5f		 pop	 edi
  0065e	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0065f	5d		 pop	 ebp
  00660	c2 34 00	 ret	 52			; 00000034H
$LN19@Set:

; 1053 : 	}
; 1054 : 	else if ( skill == 262  )

  00663	81 ff 06 01 00
	00		 cmp	 edi, 262		; 00000106H
  00669	75 0d		 jne	 SHORT $LN17@Set

; 1055 : 	{
; 1056 : 		this->m_RequireEnergy[skill] = 0;

  0066b	89 9e b4 a2 00
	00		 mov	 DWORD PTR [esi+41652], ebx
  00671	5b		 pop	 ebx
  00672	5f		 pop	 edi
  00673	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00674	5d		 pop	 ebp
  00675	c2 34 00	 ret	 52			; 00000034H
$LN17@Set:

; 1057 : 	}
; 1058 : 	else if ( skill == 263  )

  00678	81 ff 07 01 00
	00		 cmp	 edi, 263		; 00000107H
  0067e	75 0d		 jne	 SHORT $LN15@Set

; 1059 : 	{
; 1060 : 		this->m_RequireEnergy[skill] = 0;

  00680	89 9e b8 a2 00
	00		 mov	 DWORD PTR [esi+41656], ebx
  00686	5b		 pop	 ebx
  00687	5f		 pop	 edi
  00688	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00689	5d		 pop	 ebp
  0068a	c2 34 00	 ret	 52			; 00000034H
$LN15@Set:

; 1061 : 	}
; 1062 : 	else if ( skill == 264  )

  0068d	81 ff 08 01 00
	00		 cmp	 edi, 264		; 00000108H
  00693	75 0d		 jne	 SHORT $LN13@Set

; 1063 : 	{
; 1064 : 		this->m_RequireEnergy[skill] = 0;

  00695	89 9e bc a2 00
	00		 mov	 DWORD PTR [esi+41660], ebx
  0069b	5b		 pop	 ebx
  0069c	5f		 pop	 edi
  0069d	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  0069e	5d		 pop	 ebp
  0069f	c2 34 00	 ret	 52			; 00000034H
$LN13@Set:

; 1065 : 	}
; 1066 : 	else if ( skill == 265  )

  006a2	81 ff 09 01 00
	00		 cmp	 edi, 265		; 00000109H
  006a8	75 0d		 jne	 SHORT $LN11@Set

; 1067 : 	{
; 1068 : 		this->m_RequireEnergy[skill] = 0;

  006aa	89 9e c0 a2 00
	00		 mov	 DWORD PTR [esi+41664], ebx
  006b0	5b		 pop	 ebx
  006b1	5f		 pop	 edi
  006b2	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  006b3	5d		 pop	 ebp
  006b4	c2 34 00	 ret	 52			; 00000034H
$LN11@Set:

; 1069 : 	}
; 1070 : 	else if ( skill == 266  )

  006b7	81 ff 0a 01 00
	00		 cmp	 edi, 266		; 0000010aH
  006bd	75 0d		 jne	 SHORT $LN9@Set

; 1071 : 	{
; 1072 : 		this->m_RequireEnergy[skill] = 0;

  006bf	89 9e c4 a2 00
	00		 mov	 DWORD PTR [esi+41668], ebx
  006c5	5b		 pop	 ebx
  006c6	5f		 pop	 edi
  006c7	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  006c8	5d		 pop	 ebp
  006c9	c2 34 00	 ret	 52			; 00000034H
$LN9@Set:

; 1073 : 	}
; 1074 : 	else if ( skill == 267  )

  006cc	81 ff 0b 01 00
	00		 cmp	 edi, 267		; 0000010bH
  006d2	75 0d		 jne	 SHORT $LN7@Set

; 1075 : 	{
; 1076 : 		this->m_RequireEnergy[skill] = 0;

  006d4	89 9e c8 a2 00
	00		 mov	 DWORD PTR [esi+41672], ebx
  006da	5b		 pop	 ebx
  006db	5f		 pop	 edi
  006dc	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  006dd	5d		 pop	 ebp
  006de	c2 34 00	 ret	 52			; 00000034H
$LN7@Set:

; 1077 : 	}
; 1078 : 	else if ( skill == 268  )

  006e1	81 ff 0c 01 00
	00		 cmp	 edi, 268		; 0000010cH
  006e7	75 0d		 jne	 SHORT $LN5@Set

; 1079 : 	{
; 1080 : 		this->m_RequireEnergy[skill] = 0;

  006e9	89 9e cc a2 00
	00		 mov	 DWORD PTR [esi+41676], ebx
  006ef	5b		 pop	 ebx
  006f0	5f		 pop	 edi
  006f1	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  006f2	5d		 pop	 ebp
  006f3	c2 34 00	 ret	 52			; 00000034H
$LN5@Set:

; 1081 : 	}
; 1082 : 	else if ( skill == 269  )

  006f6	81 ff 0d 01 00
	00		 cmp	 edi, 269		; 0000010dH
  006fc	75 0d		 jne	 SHORT $LN3@Set

; 1083 : 	{
; 1084 : 		this->m_RequireEnergy[skill] = 0;

  006fe	89 9e d0 a2 00
	00		 mov	 DWORD PTR [esi+41680], ebx
  00704	5b		 pop	 ebx
  00705	5f		 pop	 edi
  00706	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00707	5d		 pop	 ebp
  00708	c2 34 00	 ret	 52			; 00000034H
$LN3@Set:

; 1085 : 	}
; 1086 : 	else if ( skill == 270  )

  0070b	81 ff 0e 01 00
	00		 cmp	 edi, 270		; 0000010eH
  00711	0f 85 44 fa ff
	ff		 jne	 $LN163@Set

; 1087 : 	{
; 1088 : 		this->m_RequireEnergy[skill] = 0;

  00717	89 9e d4 a2 00
	00		 mov	 DWORD PTR [esi+41684], ebx
  0071d	5b		 pop	 ebx
  0071e	5f		 pop	 edi
  0071f	5e		 pop	 esi

; 1089 : 	}
; 1090 : }

  00720	5d		 pop	 ebp
  00721	c2 34 00	 ret	 52			; 00000034H
$LN157@Set:

; 686  : 	{
; 687  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00724	68 af 02 00 00	 push	 687			; 000002afH
  00729	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0072e	68 c9 01 00 00	 push	 457			; 000001c9H
  00733	e9 f4 f8 ff ff	 jmp	 $LN164@Set
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ENDP		; CMagicDamage::Set
_TEXT	ENDS
PUBLIC	?Get@CMagicDamage@@AAEHH@Z			; CMagicDamage::Get
; Function compile flags: /Ogtp
;	COMDAT ?Get@CMagicDamage@@AAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?Get@CMagicDamage@@AAEHH@Z PROC				; CMagicDamage::Get, COMDAT
; _this$ = ecx

; 1094 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1095 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000e	77 1a		 ja	 SHORT $LN2@Get

; 1099 : 	}
; 1100 : 
; 1101 : 	if ( this->m_Damage[skill] == -1 )

  00010	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN4@Get

; 1102 : 	{
; 1103 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 4f 04 00 00	 push	 1103			; 0000044fH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 1104 : 		return this->m_Damage[0];

  00028	eb 0f		 jmp	 SHORT $LN6@Get
$LN2@Get:

; 1096 : 	{
; 1097 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 49 04 00 00	 push	 1097			; 00000449H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@Get:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1098 : 		return this->m_Damage[0];

  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Get:
  00050	5e		 pop	 esi

; 1105 : 	}
; 1106 : 
; 1107 : 	return this->m_Damage[skill];
; 1108 : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?Get@CMagicDamage@@AAEHH@Z ENDP				; CMagicDamage::Get
_TEXT	ENDS
PUBLIC	?SkillGet@CMagicDamage@@QAEHH@Z			; CMagicDamage::SkillGet
; Function compile flags: /Ogtp
;	COMDAT ?SkillGet@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGet@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGet, COMDAT
; _this$ = ecx

; 1112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1113 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000e	77 1a		 ja	 SHORT $LN2@SkillGet

; 1117 : 	}
; 1118 : 
; 1119 : 	if ( this->m_Damage[skill] == -1 )

  00010	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN4@SkillGet

; 1120 : 	{
; 1121 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 61 04 00 00	 push	 1121			; 00000461H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 1122 : 		return this->m_Damage[0];

  00028	eb 0f		 jmp	 SHORT $LN6@SkillGet
$LN2@SkillGet:

; 1114 : 	{
; 1115 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 5b 04 00 00	 push	 1115			; 0000045bH
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGet:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1116 : 		return this->m_Damage[0];

  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SkillGet:
  00050	5e		 pop	 esi

; 1123 : 	}
; 1124 : 
; 1125 : 	return this->m_Damage[skill];
; 1126 : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?SkillGet@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGet
_TEXT	ENDS
PUBLIC	?SkillGetMana@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetMana
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetMana@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetMana@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::SkillGetMana, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000e	77 3f		 ja	 SHORT $LN2@SkillGetMa

; 1135 : 	}
; 1136 : 
; 1137 : 	if ( this->m_Damage[skill] == -1 )

  00010	83 7c 86 04 ff	 cmp	 DWORD PTR [esi+eax*4+4], -1
  00015	75 2b		 jne	 SHORT $LN1@SkillGetMa

; 1138 : 	{
; 1139 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00017	68 73 04 00 00	 push	 1139			; 00000473H
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00021	68 ca 01 00 00	 push	 458			; 000001caH
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00030	50		 push	 eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1140 : 		return this->m_Damage[0];

  00037	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	5e		 pop	 esi

; 1144 : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN1@SkillGetMa:

; 1141 : 	}
; 1142 : 
; 1143 : 	return this->m_Mana[skill];

  00042	0f b7 84 46 68
	96 00 00	 movzx	 eax, WORD PTR [esi+eax*2+38504]
  0004a	5e		 pop	 esi

; 1144 : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN2@SkillGetMa:

; 1132 : 	{
; 1133 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0004f	68 6d 04 00 00	 push	 1133			; 0000046dH
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00059	68 c9 01 00 00	 push	 457			; 000001c9H
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00063	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1134 : 		return this->m_Mana[0];

  0006f	0f b7 86 68 96
	00 00		 movzx	 eax, WORD PTR [esi+38504]
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	5e		 pop	 esi

; 1144 : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?SkillGetMana@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::SkillGetMana
_TEXT	ENDS
PUBLIC	?SkillGetBP@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetBP
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetBP@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetBP@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGetBP, COMDAT
; _this$ = ecx

; 1148 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1149 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 24		 ja	 SHORT $LN2@SkillGetBP

; 1153 : 	}
; 1154 : 
; 1155 : 	if ( this->m_Damage[skill] == -1 )

  0000d	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  00012	75 11		 jne	 SHORT $LN1@SkillGetBP

; 1156 : 	{
; 1157 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00014	68 85 04 00 00	 push	 1157			; 00000485H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001e	68 ca 01 00 00	 push	 458			; 000001caH

; 1158 : 		return 0;

  00023	eb 1b		 jmp	 SHORT $LN6@SkillGetBP
$LN1@SkillGetBP:

; 1159 : 	}
; 1160 : 
; 1161 : 	return this->m_BrainPower[skill];

  00025	0f b7 84 41 80
	dd 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+56704]

; 1162 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN2@SkillGetBP:

; 1150 : 	{
; 1151 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00031	68 7f 04 00 00	 push	 1151			; 0000047fH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0003b	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGetBP:
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00045	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1152 : 		return 0;

  00054	33 c0		 xor	 eax, eax

; 1162 : }

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?SkillGetBP@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGetBP
_TEXT	ENDS
PUBLIC	?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireEnergy
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireEnergy, COMDAT
; _this$ = ecx

; 1166 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1167 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 1d		 ja	 SHORT $LN2@SkillGetRe

; 1171 : 	}
; 1172 : 
; 1173 : 	if ( this->m_RequireEnergy[skill] == -1 )

  0000d	8b 84 81 9c 9e
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+40604]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN4@SkillGetRe

; 1174 : 	{
; 1175 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 97 04 00 00	 push	 1175			; 00000497H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 1176 : 		return -1;

  00028	eb 0f		 jmp	 SHORT $LN6@SkillGetRe
$LN2@SkillGetRe:

; 1168 : 	{
; 1169 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 91 04 00 00	 push	 1169			; 00000491H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGetRe:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1170 : 		return -1;

  0004d	83 c8 ff	 or	 eax, -1
$LN4@SkillGetRe:

; 1177 : 	}
; 1178 : 
; 1179 : 	return this->m_RequireEnergy[skill];
; 1180 : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireEnergy
_TEXT	ENDS
PUBLIC	?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z	; CMagicDamage::SkillGetRequireClass
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z
_TEXT	SEGMENT
_Cclass$ = 8						; size = 4
_ChangeUP$ = 12						; size = 4
_ChangeUP3rd$ = 16					; size = 4
_skill$ = 20						; size = 4
?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z PROC	; CMagicDamage::SkillGetRequireClass, COMDAT
; _this$ = ecx

; 1184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1185 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 14	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 5f		 ja	 SHORT $LN10@SkillGetRe@2

; 1189 : 	}
; 1190 : 
; 1191 : 	if ( Cclass < 0 || Cclass > MAX_TYPE_PLAYER-1 )

  0000d	8b 55 08	 mov	 edx, DWORD PTR _Cclass$[ebp]
  00010	83 fa 06	 cmp	 edx, 6
  00013	77 46		 ja	 SHORT $LN8@SkillGetRe@2

; 1195 : 	}
; 1196 : 
; 1197 : #if(DEBUG_CODE)
; 1198 : 	LogAddC(2,"skill: %d, Cclass: %d",skill,Cclass);
; 1199 : #endif
; 1200 : 
; 1201 : 	int requireclass = this->m_RequireClass[skill][Cclass];

  00015	56		 push	 esi
  00016	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  0001d	2b f0		 sub	 esi, eax
  0001f	03 f2		 add	 esi, edx
  00021	0f b6 84 0e 8c
	a9 00 00	 movzx	 eax, BYTE PTR [esi+ecx+43404]
  00029	5e		 pop	 esi

; 1202 : 
; 1203 : 	if ( requireclass == 0 )

  0002a	85 c0		 test	 eax, eax
  0002c	75 06		 jne	 SHORT $LN7@SkillGetRe@2
$LN15@SkillGetRe@2:

; 1204 : 	{
; 1205 : //#ifndef DEBUG_CODE
; 1206 : 		return FALSE;

  0002e	33 c0		 xor	 eax, eax

; 1233 : }

  00030	5d		 pop	 ebp
  00031	c2 10 00	 ret	 16			; 00000010H
$LN7@SkillGetRe@2:

; 1207 : //#endif
; 1208 : 	}
; 1209 : 
; 1210 : 	if (requireclass == 3)

  00034	83 f8 03	 cmp	 eax, 3
  00037	75 0c		 jne	 SHORT $LN6@SkillGetRe@2

; 1211 : 	{
; 1212 : 		if(ChangeUP3rd > 0)

  00039	33 c0		 xor	 eax, eax
  0003b	39 45 10	 cmp	 DWORD PTR _ChangeUP3rd$[ebp], eax
  0003e	0f 9f c0	 setg	 al

; 1233 : }

  00041	5d		 pop	 ebp
  00042	c2 10 00	 ret	 16			; 00000010H
$LN6@SkillGetRe@2:

; 1213 : 		{
; 1214 : 			return TRUE;
; 1215 : 		}
; 1216 : 		else
; 1217 : 		{
; 1218 : 			return FALSE;
; 1219 : 		}
; 1220 : 	}
; 1221 : 	else
; 1222 : 	{
; 1223 : 		if (requireclass > 1)

  00045	83 f8 01	 cmp	 eax, 1
  00048	7e 08		 jle	 SHORT $LN1@SkillGetRe@2

; 1224 : 		{
; 1225 : 			if ( requireclass  != (ChangeUP+1) )

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _ChangeUP$[ebp]
  0004d	41		 inc	 ecx
  0004e	3b c1		 cmp	 eax, ecx

; 1226 : 			{
; 1227 : 				return FALSE;

  00050	75 dc		 jne	 SHORT $LN15@SkillGetRe@2
$LN1@SkillGetRe@2:

; 1228 : 			}
; 1229 : 		}
; 1230 : 	}
; 1231 : 
; 1232 : 	return TRUE;

  00052	b8 01 00 00 00	 mov	 eax, 1

; 1233 : }

  00057	5d		 pop	 ebp
  00058	c2 10 00	 ret	 16			; 00000010H
$LN8@SkillGetRe@2:

; 1192 : 	{
; 1193 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  0005b	68 a9 04 00 00	 push	 1193			; 000004a9H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00065	68 ca 01 00 00	 push	 458			; 000001caH

; 1194 : 		return -1;

  0006a	eb 0f		 jmp	 SHORT $LN14@SkillGetRe@2
$LN10@SkillGetRe@2:

; 1186 : 	{
; 1187 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0006c	68 a3 04 00 00	 push	 1187			; 000004a3H
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00076	68 c9 01 00 00	 push	 457			; 000001c9H
$LN14@SkillGetRe@2:
  0007b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00080	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1188 : 		return -1;

  0008f	83 c8 ff	 or	 eax, -1

; 1233 : }

  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z ENDP	; CMagicDamage::SkillGetRequireClass
_TEXT	ENDS
PUBLIC	?GetSkillAttr@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillAttr
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillAttr@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillAttr, COMDAT
; _this$ = ecx

; 1237 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1238 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@GetSkillAt

; 1241 : 	}
; 1242 : 
; 1243 : 	return this->m_Attr[skill];

  0000d	8b 84 81 f8 e2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+58104]

; 1244 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetSkillAt:

; 1239 : 	{
; 1240 : 		return -1;

  00018	83 c8 ff	 or	 eax, -1

; 1244 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillAttr
_TEXT	ENDS
PUBLIC	?CheckSkillAttr@CMagicDamage@@AAEHHH@Z		; CMagicDamage::CheckSkillAttr
; Function compile flags: /Ogtp
;	COMDAT ?CheckSkillAttr@CMagicDamage@@AAEHHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
_attr$ = 12						; size = 4
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z PROC		; CMagicDamage::CheckSkillAttr, COMDAT
; _this$ = ecx

; 1248 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1249 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@CheckSkill

; 1252 : 	}
; 1253 : 
; 1254 : 	return this->m_Attr[skill];

  0000d	8b 84 81 f8 e2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+58104]

; 1255 : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
$LN1@CheckSkill:

; 1250 : 	{
; 1251 : 		return FALSE;

  00018	33 c0		 xor	 eax, eax

; 1255 : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z ENDP		; CMagicDamage::CheckSkillAttr
_TEXT	ENDS
PUBLIC	?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetskillRequireLeadership
; Function compile flags: /Ogtp
;	COMDAT ?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetskillRequireLeadership, COMDAT
; _this$ = ecx

; 1259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1260 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 1d		 ja	 SHORT $LN2@GetskillRe

; 1264 : 	}
; 1265 : 
; 1266 : 	if ( this->m_RequireLeadership[skill] == -1 )

  0000d	8b 84 81 a0 c7
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+51104]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN4@GetskillRe

; 1267 : 	{
; 1268 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 f4 04 00 00	 push	 1268			; 000004f4H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 1269 : 		return -1;

  00028	eb 0f		 jmp	 SHORT $LN6@GetskillRe
$LN2@GetskillRe:

; 1261 : 	{
; 1262 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 ee 04 00 00	 push	 1262			; 000004eeH
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@GetskillRe:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1263 : 		return -1;

  0004d	83 c8 ff	 or	 eax, -1
$LN4@GetskillRe:

; 1270 : 	}
; 1271 : 
; 1272 : 	return this->m_RequireLeadership[skill];
; 1273 : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetskillRequireLeadership
_TEXT	ENDS
PUBLIC	?GetDelayTime@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetDelayTime
; Function compile flags: /Ogtp
;	COMDAT ?GetDelayTime@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetDelayTime@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetDelayTime, COMDAT
; _this$ = ecx

; 1277 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1278 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@GetDelayTi

; 1282 : 	}
; 1283 : 
; 1284 : 	return this->m_Delay[skill];

  0000d	8b 84 81 90 d2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+53904]

; 1285 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetDelayTi:

; 1279 : 	{
; 1280 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 00 05 00 00	 push	 1280			; 00000500H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1281 : 		return 0;

  0003b	33 c0		 xor	 eax, eax

; 1285 : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetDelayTime@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetDelayTime
_TEXT	ENDS
PUBLIC	?GetSkillType@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillType
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillType@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetSkillType@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillType, COMDAT
; _this$ = ecx

; 1289 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1290 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@GetSkillTy

; 1294 : 	}
; 1295 : 	
; 1296 : 	return this->m_iSkillType[iSkill];

  0000d	8b 84 81 e8 ed
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+60904]

; 1297 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetSkillTy:

; 1291 : 	{
; 1292 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 0c 05 00 00	 push	 1292			; 0000050cH
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1293 : 		return 0;

  0003b	33 c0		 xor	 eax, eax

; 1297 : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetSkillType@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillType
_TEXT	ENDS
PUBLIC	?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireLevel
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireLevel, COMDAT
; _this$ = ecx

; 1301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1302 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@SkillGetRe@3

; 1306 : 	}
; 1307 : 
; 1308 : 	return this->m_RequireLevel[skill];

  0000d	8b 84 81 b0 bc
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+48304]

; 1309 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@SkillGetRe@3:

; 1303 : 	{
; 1304 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 18 05 00 00	 push	 1304			; 00000518H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1305 : 		return -1;

  0003b	83 c8 ff	 or	 eax, -1

; 1309 : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireLevel
_TEXT	ENDS
PUBLIC	?CheckStatus@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckStatus
EXTRN	?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckRequireStatus
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
; Function compile flags: /Ogtp
;	COMDAT ?CheckStatus@CMagicDamage@@QAEHHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iGuildStatus$ = 12					; size = 4
?CheckStatus@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckStatus, COMDAT
; _this$ = ecx

; 1313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1314 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iSkill$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fe bb 02 00
	00		 cmp	 esi, 699		; 000002bbH
  00010	77 75		 ja	 SHORT $LN11@CheckStatu

; 1318 : 	}
; 1319 : 
; 1320 : 	if ( this->m_iSkillUseType[iSkill] == 0 )

  00012	83 bc b7 d8 f8
	00 00 00	 cmp	 DWORD PTR [edi+esi*4+63704], 0

; 1321 : 	{
; 1322 : 		return TRUE;

  0001a	74 26		 je	 SHORT $LN15@CheckStatu

; 1323 : 	}
; 1324 : 
; 1325 : 	if(g_MasterSkillSystem.CheckRequireStatus(iSkill) != FALSE) //Season3 add-on

  0001c	56		 push	 esi
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00022	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00027	85 c0		 test	 eax, eax

; 1326 : 	{
; 1327 : 		return TRUE;

  00029	75 17		 jne	 SHORT $LN15@CheckStatu

; 1328 : 	}
; 1329 : 
; 1330 : 	if ( iGuildStatus == G_MASTER )

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _iGuildStatus$[ebp]
  0002e	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00033	75 18		 jne	 SHORT $LN8@CheckStatu

; 1331 : 	{
; 1332 : 		if ( this->m_iRequireStatus[iSkill][0] == 1 )

  00035	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00038	83 bc 87 a8 19
	01 00 01	 cmp	 DWORD PTR [edi+eax*4+72104], 1
  00040	75 68		 jne	 SHORT $LN1@CheckStatu
$LN15@CheckStatu:
  00042	5f		 pop	 edi

; 1333 : 		{
; 1334 : 			return TRUE;

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5e		 pop	 esi

; 1349 : 		}
; 1350 : 	}
; 1351 : 
; 1352 : 	return FALSE;
; 1353 : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN8@CheckStatu:

; 1335 : 		}
; 1336 : 	}
; 1337 : 	else if ( iGuildStatus == G_SUB_MASTER )

  0004d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00050	75 18		 jne	 SHORT $LN5@CheckStatu

; 1338 : 	{
; 1339 : 		if ( this->m_iRequireStatus[iSkill][1] == 1 )

  00052	8d 8c 76 6b 46
	00 00		 lea	 ecx, DWORD PTR [esi+esi*2+18027]
  00059	83 3c 8f 01	 cmp	 DWORD PTR [edi+ecx*4], 1
  0005d	75 4b		 jne	 SHORT $LN1@CheckStatu

; 1340 : 		{
; 1341 : 			return TRUE;

  0005f	5f		 pop	 edi
  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	5e		 pop	 esi

; 1349 : 		}
; 1350 : 	}
; 1351 : 
; 1352 : 	return FALSE;
; 1353 : }

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN5@CheckStatu:

; 1342 : 		}
; 1343 : 	}
; 1344 : 	else if ( iGuildStatus == G_BATTLE_MASTER )

  0006a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0006d	75 3b		 jne	 SHORT $LN1@CheckStatu

; 1345 : 	{
; 1346 : 		if ( this->m_iRequireStatus[iSkill][2] == 1 )

  0006f	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  00072	83 bc 97 b0 19
	01 00 01	 cmp	 DWORD PTR [edi+edx*4+72112], 1
  0007a	75 2e		 jne	 SHORT $LN1@CheckStatu

; 1347 : 		{
; 1348 : 			return TRUE;

  0007c	5f		 pop	 edi
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	5e		 pop	 esi

; 1349 : 		}
; 1350 : 	}
; 1351 : 
; 1352 : 	return FALSE;
; 1353 : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
$LN11@CheckStatu:

; 1315 : 	{
; 1316 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00087	68 24 05 00 00	 push	 1316			; 00000524H
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00091	68 c9 01 00 00	 push	 457			; 000001c9H
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0009b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CheckStatu:

; 1317 : 		return 0;

  000aa	5f		 pop	 edi
  000ab	33 c0		 xor	 eax, eax
  000ad	5e		 pop	 esi

; 1349 : 		}
; 1350 : 	}
; 1351 : 
; 1352 : 	return FALSE;
; 1353 : }

  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?CheckStatus@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckStatus
_TEXT	ENDS
PUBLIC	?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z	; CMagicDamage::CheckBrandOfSkill
; Function compile flags: /Ogtp
;	COMDAT ?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::CheckBrandOfSkill, COMDAT
; _this$ = ecx

; 1357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1358 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 12		 ja	 SHORT $LN2@CheckBrand

; 1362 : 	}
; 1363 : 
; 1364 : 	if ( this->m_iSkillBrand[iSkill] > 0 )

  0000d	33 d2		 xor	 edx, edx
  0000f	39 94 81 c8 03
	01 00		 cmp	 DWORD PTR [ecx+eax*4+66504], edx
  00016	0f 9f c2	 setg	 dl
  00019	8b c2		 mov	 eax, edx

; 1365 : 	{
; 1366 : 		return TRUE;
; 1367 : 	}
; 1368 : 
; 1369 : 	return FALSE;
; 1370 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN2@CheckBrand:

; 1359 : 	{
; 1360 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0001f	68 50 05 00 00	 push	 1360			; 00000550H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00029	68 c9 01 00 00	 push	 457			; 000001c9H
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00033	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1361 : 		return 0;

  00042	33 c0		 xor	 eax, eax

; 1365 : 	{
; 1366 : 		return TRUE;
; 1367 : 	}
; 1368 : 
; 1369 : 	return FALSE;
; 1370 : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::CheckBrandOfSkill
_TEXT	ENDS
PUBLIC	?CheckKillCount@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckKillCount
; Function compile flags: /Ogtp
;	COMDAT ?CheckKillCount@CMagicDamage@@QAEHHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iKillCount$ = 12					; size = 4
?CheckKillCount@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckKillCount, COMDAT
; _this$ = ecx

; 1374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1375 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00006	81 fa bb 02 00
	00		 cmp	 edx, 699		; 000002bbH
  0000c	77 0e		 ja	 SHORT $LN1@CheckKillC

; 1379 : 	}
; 1380 : 
; 1381 : 	return iKillCount - this->m_iKillCount[iSkill];

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _iKillCount$[ebp]
  00011	2b 84 91 b8 0e
	01 00		 sub	 eax, DWORD PTR [ecx+edx*4+69304]

; 1382 : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
$LN1@CheckKillC:

; 1376 : 	{
; 1377 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0001c	68 61 05 00 00	 push	 1377			; 00000561H
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00026	68 c9 01 00 00	 push	 457			; 000001c9H
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00030	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1378 : 		return -1;

  0003f	83 c8 ff	 or	 eax, -1

; 1382 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?CheckKillCount@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckKillCount
_TEXT	ENDS
PUBLIC	?GetSkillDistance@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillDistance
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillDistance@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillDistance, COMDAT
; _this$ = ecx

; 1386 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1387 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillDi

; 1391 : 	}
; 1392 : 
; 1393 : 	return this->m_Distance[skill];

  0000d	0f b6 84 08 e0
	9b 00 00	 movzx	 eax, BYTE PTR [eax+ecx+39904]

; 1394 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillDi:

; 1388 : 	{
; 1389 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 6d 05 00 00	 push	 1389			; 0000056dH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1394 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillDistance
_TEXT	ENDS
PUBLIC	?GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqMLPoint
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillReqMLPoint, COMDAT
; _this$ = ecx

; 1398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1399 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillRe

; 1403 : 	}
; 1404 : 
; 1405 : 	return this->m_sReqMLPoint[skill];

  0000d	0f bf 84 41 68
	45 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+83304]

; 1406 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillRe:

; 1400 : 	{
; 1401 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 79 05 00 00	 push	 1401			; 00000579H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1402 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1406 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillReqMLPoint
_TEXT	ENDS
PUBLIC	?GetSkillReqStrength@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqStrength
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillReqStrength@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillReqStrength@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillReqStrength, COMDAT
; _this$ = ecx

; 1410 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1411 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillRe@2

; 1415 : 	}
; 1416 : 
; 1417 : 	return this->m_sReqStrength[skill];

  0000d	0f bf 84 41 48
	5b 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+88904]

; 1418 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillRe@2:

; 1412 : 	{
; 1413 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 85 05 00 00	 push	 1413			; 00000585H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1414 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1418 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillReqStrength@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillReqStrength
_TEXT	ENDS
PUBLIC	?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqDexterity
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetSkillReqDexterity, COMDAT
; _this$ = ecx

; 1422 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1423 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillRe@3

; 1427 : 	}
; 1428 : 
; 1429 : 	return this->m_sReqDexterity[skill];

  0000d	0f bf 84 41 c0
	60 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+90304]

; 1430 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillRe@3:

; 1424 : 	{
; 1425 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 91 05 00 00	 push	 1425			; 00000591H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1426 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1430 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetSkillReqDexterity
_TEXT	ENDS
PUBLIC	?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqBrandOfSkill
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetSkillReqBrandOfSkill, COMDAT
; _this$ = ecx

; 1434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1435 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@GetSkillRe@4

; 1439 : 	}
; 1440 : 
; 1441 : 	return this->m_iSkillBrand[skill];

  0000d	8b 84 81 c8 03
	01 00		 mov	 eax, DWORD PTR [ecx+eax*4+66504]

; 1442 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetSkillRe@4:

; 1436 : 	{
; 1437 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 9d 05 00 00	 push	 1437			; 0000059dH
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1438 : 		return -1;

  0003b	83 c8 ff	 or	 eax, -1

; 1442 : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetSkillReqBrandOfSkill
_TEXT	ENDS
PUBLIC	?GetSkillUseType@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillUseType
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillUseType@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillUseType@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillUseType, COMDAT
; _this$ = ecx

; 1446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1447 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@GetSkillUs

; 1451 : 	}
; 1452 : 
; 1453 : 	return this->m_iSkillUseType[skill];

  0000d	8b 84 81 d8 f8
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+63704]

; 1454 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetSkillUs:

; 1448 : 	{
; 1449 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 a9 05 00 00	 push	 1449			; 000005a9H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1450 : 		return -1;

  0003b	83 c8 ff	 or	 eax, -1

; 1454 : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?GetSkillUseType@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillUseType
_TEXT	ENDS
PUBLIC	?GetSkillReqLevel@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillReqLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillReqLevel@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillReqLevel@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillReqLevel, COMDAT
; _this$ = ecx

; 1458 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1459 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillRe@5

; 1463 : 	}
; 1464 : 
; 1465 : 	return this->m_rLevel[skill];

  0000d	0f b6 84 08 ac
	93 00 00	 movzx	 eax, BYTE PTR [eax+ecx+37804]

; 1466 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillRe@5:

; 1460 : 	{
; 1461 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 b5 05 00 00	 push	 1461			; 000005b5H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1462 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1466 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillReqLevel@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillReqLevel
_TEXT	ENDS
PUBLIC	?GetSkillGroup@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillGroup
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillGroup@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillGroup@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillGroup, COMDAT
; _this$ = ecx

; 1470 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1471 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillGr

; 1475 : 	}
; 1476 : 
; 1477 : 	return this->m_sSkillGroup[skill];

  0000d	0f bf 84 41 f0
	3f 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+81904]

; 1478 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillGr:

; 1472 : 	{
; 1473 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 c1 05 00 00	 push	 1473			; 000005c1H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1474 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1478 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillGroup@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillGroup
_TEXT	ENDS
PUBLIC	?GetSkillRank@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillRank
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillRank@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillRank@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillRank, COMDAT
; _this$ = ecx

; 1482 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1483 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillRa

; 1487 : 	}
; 1488 : 
; 1489 : 	return this->m_sSkillRank[skill];

  0000d	0f bf 84 41 78
	3a 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+80504]

; 1490 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillRa:

; 1484 : 	{
; 1485 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 cd 05 00 00	 push	 1485			; 000005cdH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1486 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1490 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillRank@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillRank
_TEXT	ENDS
PUBLIC	?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z	; CMagicDamage::IsItemAttachedSkill
; Function compile flags: /Ogtp
;	COMDAT ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z PROC		; CMagicDamage::IsItemAttachedSkill, COMDAT
; _this$ = ecx

; 1493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1494 : 	if( iSkill < 0 
; 1495 : 		|| iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  0000b	77 0b		 ja	 SHORT $LN1@IsItemAtta

; 1501 : 	}
; 1502 : 	// ----
; 1503 : 	return this->m_byItemSkill[iSkill];

  0000d	8a 84 08 38 66
	01 00		 mov	 al, BYTE PTR [eax+ecx+91704]

; 1504 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@IsItemAtta:

; 1496 : 	{
; 1497 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), 
; 1498 : 			__FILE__, 
; 1499 : 			__LINE__);	//Line: 6

  00018	68 db 05 00 00	 push	 1499			; 000005dbH
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1500 : 		return -1;

  0003b	0c ff		 or	 al, 255			; 000000ffH

; 1504 : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ENDP		; CMagicDamage::IsItemAttachedSkill
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMagicDamage@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMagicDamage@@UAEPAXI@Z PROC			; CMagicDamage::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMagicDamage@@UAEPAXI@Z ENDP			; CMagicDamage::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_filename$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillList@CMagicDamage@@QAEXPAD@Z		; CMagicDamage::LogSkillList
EXTRN	?Set@CMagicInf@@QAEHHE@Z:PROC			; CMagicInf::Set
EXTRN	?DefMagicInf@@3PAVCMagicInf@@A:BYTE		; DefMagicInf
; Function compile flags: /Ogtp
;	COMDAT ?LogSkillList@CMagicDamage@@QAEXPAD@Z
_TEXT	SEGMENT
_iSkillType$ = -160					; size = 4
_attr$ = -156						; size = 4
_rEnergy$ = -152					; size = 4
_damage$ = -148						; size = 4
_rLeadership$ = -144					; size = 4
_iSkillBrand$ = -140					; size = 4
_filename$GSCopy$ = -136				; size = 4
_bp$ = -132						; size = 4
_SkillRank$ = -128					; size = 2
_iSkillUseType$ = -124					; size = 4
_SkillGroup$ = -120					; size = 2
_rDelay$ = -116						; size = 4
_rMLPoint$ = -112					; size = 2
_mana$ = -108						; size = 4
_rAG$ = -104						; size = 2
_dis$ = -100						; size = 4
_rShield$ = -96						; size = 2
_Duration$ = -92					; size = 2
_iKillCount$ = -88					; size = 4
_RequireStatus$ = -84					; size = 12
_RequireClass$ = -72					; size = 7
_rStrength$ = -64					; size = 2
tv288 = -62						; size = 2
tv280 = -62						; size = 2
tv161 = -62						; size = 2
tv152 = -62						; size = 2
tv149 = -62						; size = 2
tv133 = -62						; size = 2
tv85 = -62						; size = 2
tv322 = -60						; size = 4
tv293 = -60						; size = 4
tv291 = -60						; size = 4
tv285 = -60						; size = 4
tv283 = -60						; size = 4
tv279 = -60						; size = 4
_rDexterity$ = -60					; size = 2
tv169 = -60						; size = 4
tv163 = -60						; size = 4
tv157 = -60						; size = 4
tv154 = -60						; size = 4
tv143 = -60						; size = 4
tv139 = -60						; size = 4
tv95 = -60						; size = 4
tv91 = -60						; size = 4
_name$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z PROC		; CMagicDamage::LogSkillList, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 96   : 
; 97   : 			Token = GetToken();

  0001a	89 b5 78 ff ff
	ff		 mov	 DWORD PTR _filename$GSCopy$[ebp], esi
  00020	e8 00 00 00 00	 call	 ?Init@CMagicDamage@@QAEXXZ ; CMagicDamage::Init
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _fopen
  00030	83 c4 08	 add	 esp, 8
  00033	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  00038	85 c0		 test	 eax, eax
  0003a	75 1b		 jne	 SHORT $LN5@LogSkillLi

; 39   : 	this->Init();
; 40   : 
; 41   : 
; 42   : 	SMDFile = fopen(filename, "r");
; 43   : 
; 44   : 	if ( SMDFile == NULL )
; 45   : 	{
; 46   : 		MsgBox(lMsg.Get(MSGGET(1, 199)), filename);

  0003c	56		 push	 esi
  0003d	68 c7 01 00 00	 push	 455			; 000001c7H
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00047	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 47   : 		return;

  00052	e9 4c 04 00 00	 jmp	 $LN14@LogSkillLi
$LN5@LogSkillLi:

; 48   : 	}
; 49   : 
; 50   : 	int Token;
; 51   : 	int n=0;
; 52   : 	int number;
; 53   : 	char name[50];
; 54   : 	int requireLevel;
; 55   : 	int damage;
; 56   : 	int mana;
; 57   : 	int bp=0;
; 58   : 	int dis;
; 59   : 	int rEnergy;
; 60   : 	int iSkillType;
; 61   : 	int rLeadership;
; 62   : 	int rDelay;
; 63   : 	int attr;
; 64   : 	int iSkillUseType;
; 65   : 	int iSkillBrand;
; 66   : 	int iKillCount;
; 67   : 	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};

  00057	33 c0		 xor	 eax, eax
  00059	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _RequireStatus$[ebp], 0
  00060	89 45 b0	 mov	 DWORD PTR _RequireStatus$[ebp+4], eax
  00063	89 45 b4	 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 68   : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 69   : 	//Season 3 add-on
; 70   : 	short SkillRank;
; 71   : 	short SkillGroup;
; 72   : 	short rMLPoint;
; 73   : 	short rAG;
; 74   : 	short rShield;
; 75   : 	short Duration;
; 76   : 	short rStrength;
; 77   : 	short rDexterity;
; 78   : 	BYTE IconNumber;
; 79   : 	int iUseType;
; 80   : 
; 81   : 	while ( true )
; 82   : 	{
; 83   : 		Token = GetToken();

  00066	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 84   : 
; 85   : 		if ( Token == 2 )

  0006b	83 f8 02	 cmp	 eax, 2
  0006e	0f 84 09 04 00
	00		 je	 $LN12@LogSkillLi
  00074	53		 push	 ebx
$LL4@LogSkillLi:

; 86   : 		{
; 87   : 			break;
; 88   : 		}
; 89   : 
; 90   : 		if ( Token == 1 )

  00075	83 f8 01	 cmp	 eax, 1
  00078	0f 85 f0 03 00
	00		 jne	 $LN1@LogSkillLi

; 91   : 		{
; 92   : 			number = (int)TokenNumber;

  0007e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00084	e8 00 00 00 00	 call	 __ftol2_sse
  00089	8b f0		 mov	 esi, eax

; 93   : 
; 94   : 			Token = GetToken();

  0008b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 95   : 			strcpy(name, TokenString);

  00090	33 c0		 xor	 eax, eax
$LL8@LogSkillLi:
  00092	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _TokenString[eax]
  00098	88 4c 05 c8	 mov	 BYTE PTR _name$[ebp+eax], cl
  0009c	40		 inc	 eax
  0009d	84 c9		 test	 cl, cl
  0009f	75 f1		 jne	 SHORT $LL8@LogSkillLi

; 96   : 
; 97   : 			Token = GetToken();

  000a1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 			requireLevel = (int)TokenNumber;

  000a6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ac	e8 00 00 00 00	 call	 __ftol2_sse
  000b1	8b d8		 mov	 ebx, eax

; 99   : 
; 100  : 			Token = GetToken();

  000b3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 			damage = (int)TokenNumber;

  000b8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000be	e8 00 00 00 00	 call	 __ftol2_sse
  000c3	89 85 6c ff ff
	ff		 mov	 DWORD PTR _damage$[ebp], eax

; 102  : 
; 103  : 			Token = GetToken();

  000c9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 104  : 			mana = (int)TokenNumber;

  000ce	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d4	e8 00 00 00 00	 call	 __ftol2_sse
  000d9	89 45 94	 mov	 DWORD PTR _mana$[ebp], eax

; 105  : 
; 106  : 			Token = GetToken();

  000dc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 107  : 			bp = (int)TokenNumber;

  000e1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e7	e8 00 00 00 00	 call	 __ftol2_sse
  000ec	89 85 7c ff ff
	ff		 mov	 DWORD PTR _bp$[ebp], eax

; 108  : 
; 109  : 			Token = GetToken();

  000f2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 110  : 			dis = (int)TokenNumber;

  000f7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fd	e8 00 00 00 00	 call	 __ftol2_sse
  00102	89 45 9c	 mov	 DWORD PTR _dis$[ebp], eax

; 111  : 
; 112  : 			Token = GetToken();

  00105	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 113  : 			rDelay = (int)TokenNumber;

  0010a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00110	e8 00 00 00 00	 call	 __ftol2_sse
  00115	89 45 8c	 mov	 DWORD PTR _rDelay$[ebp], eax

; 114  : 
; 115  : 			Token = GetToken();

  00118	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 116  : 			rEnergy = (int)TokenNumber;

  0011d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00123	e8 00 00 00 00	 call	 __ftol2_sse
  00128	89 85 68 ff ff
	ff		 mov	 DWORD PTR _rEnergy$[ebp], eax

; 117  : 
; 118  : 			Token = GetToken();

  0012e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 			rLeadership = (int)TokenNumber;

  00133	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00139	e8 00 00 00 00	 call	 __ftol2_sse
  0013e	89 85 70 ff ff
	ff		 mov	 DWORD PTR _rLeadership$[ebp], eax

; 120  : 
; 121  : 			Token = GetToken();

  00144	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 			attr = (int)TokenNumber;

  00149	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0014f	e8 00 00 00 00	 call	 __ftol2_sse
  00154	89 85 64 ff ff
	ff		 mov	 DWORD PTR _attr$[ebp], eax

; 123  : 
; 124  : 			Token = GetToken();

  0015a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 			iSkillType = (int)TokenNumber;

  0015f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00165	e8 00 00 00 00	 call	 __ftol2_sse
  0016a	89 85 60 ff ff
	ff		 mov	 DWORD PTR _iSkillType$[ebp], eax

; 126  : 
; 127  : 			Token = GetToken();

  00170	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 			iSkillUseType = (int)TokenNumber;

  00175	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0017b	e8 00 00 00 00	 call	 __ftol2_sse
  00180	89 45 84	 mov	 DWORD PTR _iSkillUseType$[ebp], eax

; 129  : 
; 130  : 			Token = GetToken();

  00183	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 			iSkillBrand = (int)TokenNumber;

  00188	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018e	e8 00 00 00 00	 call	 __ftol2_sse
  00193	89 85 74 ff ff
	ff		 mov	 DWORD PTR _iSkillBrand$[ebp], eax

; 132  : 
; 133  : 			Token = GetToken();

  00199	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 			iKillCount = (int)TokenNumber;

  0019e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a4	e8 00 00 00 00	 call	 __ftol2_sse
  001a9	89 45 a8	 mov	 DWORD PTR _iKillCount$[ebp], eax

; 135  : 
; 136  : 			Token = GetToken();

  001ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 			RequireStatus[0] = (int)TokenNumber;

  001b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b7	e8 00 00 00 00	 call	 __ftol2_sse
  001bc	89 45 ac	 mov	 DWORD PTR _RequireStatus$[ebp], eax

; 138  : 
; 139  : 			Token = GetToken();

  001bf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 			RequireStatus[1] = (int)TokenNumber;

  001c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ca	e8 00 00 00 00	 call	 __ftol2_sse
  001cf	89 45 b0	 mov	 DWORD PTR _RequireStatus$[ebp+4], eax

; 141  : 
; 142  : 			Token = GetToken();

  001d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 143  : 			RequireStatus[2] = (int)TokenNumber;

  001d7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001dd	e8 00 00 00 00	 call	 __ftol2_sse
  001e2	89 45 b4	 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 144  : 
; 145  : 			Token = GetToken();

  001e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 146  : 			RequireClass[0] = (BYTE)TokenNumber;

  001ea	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f0	d9 7d c2	 fnstcw	 WORD PTR tv161[ebp]
  001f3	0f b7 45 c2	 movzx	 eax, WORD PTR tv161[ebp]
  001f7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001fc	89 45 c4	 mov	 DWORD PTR tv157[ebp], eax
  001ff	d9 6d c4	 fldcw	 WORD PTR tv157[ebp]
  00202	db 5d c4	 fistp	 DWORD PTR tv154[ebp]
  00205	0f b6 45 c4	 movzx	 eax, BYTE PTR tv154[ebp]
  00209	88 45 b8	 mov	 BYTE PTR _RequireClass$[ebp], al
  0020c	d9 6d c2	 fldcw	 WORD PTR tv161[ebp]

; 147  : 
; 148  : 			Token = GetToken();

  0020f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 149  : 			RequireClass[1] = (BYTE)TokenNumber;

  00214	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0021a	d9 7d c2	 fnstcw	 WORD PTR tv149[ebp]
  0021d	0f b7 45 c2	 movzx	 eax, WORD PTR tv149[ebp]
  00221	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00226	89 45 c4	 mov	 DWORD PTR tv143[ebp], eax
  00229	d9 6d c4	 fldcw	 WORD PTR tv143[ebp]
  0022c	db 5d c4	 fistp	 DWORD PTR tv139[ebp]
  0022f	0f b6 4d c4	 movzx	 ecx, BYTE PTR tv139[ebp]
  00233	88 4d b9	 mov	 BYTE PTR _RequireClass$[ebp+1], cl
  00236	d9 6d c2	 fldcw	 WORD PTR tv149[ebp]

; 150  : 
; 151  : 			Token = GetToken();

  00239	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 152  : 			RequireClass[2] = (BYTE)TokenNumber;

  0023e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00244	d9 7d c2	 fnstcw	 WORD PTR tv133[ebp]
  00247	0f b7 45 c2	 movzx	 eax, WORD PTR tv133[ebp]
  0024b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00250	89 45 c4	 mov	 DWORD PTR tv95[ebp], eax
  00253	d9 6d c4	 fldcw	 WORD PTR tv95[ebp]
  00256	db 5d c4	 fistp	 DWORD PTR tv91[ebp]
  00259	0f b6 55 c4	 movzx	 edx, BYTE PTR tv91[ebp]
  0025d	88 55 ba	 mov	 BYTE PTR _RequireClass$[ebp+2], dl
  00260	d9 6d c2	 fldcw	 WORD PTR tv133[ebp]

; 153  : 
; 154  : 			Token = GetToken();

  00263	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 155  : 			RequireClass[3] = (BYTE)TokenNumber;

  00268	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026e	d9 7d c2	 fnstcw	 WORD PTR tv85[ebp]
  00271	0f b7 45 c2	 movzx	 eax, WORD PTR tv85[ebp]
  00275	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0027a	89 45 c4	 mov	 DWORD PTR tv293[ebp], eax
  0027d	d9 6d c4	 fldcw	 WORD PTR tv293[ebp]
  00280	db 5d c4	 fistp	 DWORD PTR tv291[ebp]
  00283	0f b6 45 c4	 movzx	 eax, BYTE PTR tv291[ebp]
  00287	88 45 bb	 mov	 BYTE PTR _RequireClass$[ebp+3], al
  0028a	d9 6d c2	 fldcw	 WORD PTR tv85[ebp]

; 156  : 
; 157  : 			Token = GetToken();

  0028d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 158  : 			RequireClass[4] = (BYTE)TokenNumber;

  00292	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00298	d9 7d c2	 fnstcw	 WORD PTR tv288[ebp]
  0029b	0f b7 45 c2	 movzx	 eax, WORD PTR tv288[ebp]
  0029f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002a4	89 45 c4	 mov	 DWORD PTR tv285[ebp], eax
  002a7	d9 6d c4	 fldcw	 WORD PTR tv285[ebp]
  002aa	db 5d c4	 fistp	 DWORD PTR tv283[ebp]
  002ad	0f b6 4d c4	 movzx	 ecx, BYTE PTR tv283[ebp]
  002b1	88 4d bc	 mov	 BYTE PTR _RequireClass$[ebp+4], cl
  002b4	d9 6d c2	 fldcw	 WORD PTR tv288[ebp]

; 159  : 
; 160  : 			///////////////Summoner
; 161  : 			Token = GetToken();

  002b7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 			RequireClass[5] = (BYTE)TokenNumber;

  002bc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c2	d9 7d c2	 fnstcw	 WORD PTR tv280[ebp]
  002c5	0f b7 45 c2	 movzx	 eax, WORD PTR tv280[ebp]
  002c9	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002ce	89 45 c4	 mov	 DWORD PTR tv169[ebp], eax
  002d1	d9 6d c4	 fldcw	 WORD PTR tv169[ebp]
  002d4	db 5d c4	 fistp	 DWORD PTR tv163[ebp]
  002d7	0f b6 55 c4	 movzx	 edx, BYTE PTR tv163[ebp]
  002db	88 55 bd	 mov	 BYTE PTR _RequireClass$[ebp+5], dl
  002de	d9 6d c2	 fldcw	 WORD PTR tv280[ebp]

; 163  : 			////////////////////
; 164  : 
; 165  : 			Token = GetToken();

  002e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 166  : 			RequireClass[6] = TokenNumber;

  002e6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ec	d9 7d c2	 fnstcw	 WORD PTR tv152[ebp]
  002ef	0f b7 45 c2	 movzx	 eax, WORD PTR tv152[ebp]
  002f3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002f8	89 45 c4	 mov	 DWORD PTR tv279[ebp], eax
  002fb	d9 6d c4	 fldcw	 WORD PTR tv279[ebp]
  002fe	db 5d c4	 fistp	 DWORD PTR tv322[ebp]
  00301	0f b6 45 c4	 movzx	 eax, BYTE PTR tv322[ebp]
  00305	88 45 be	 mov	 BYTE PTR _RequireClass$[ebp+6], al
  00308	d9 6d c2	 fldcw	 WORD PTR tv152[ebp]

; 167  : 
; 168  : 			Token = GetToken();

  0030b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 169  : 			SkillRank = (short)TokenNumber;

  00310	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00316	e8 00 00 00 00	 call	 __ftol2_sse
  0031b	0f b7 c8	 movzx	 ecx, ax
  0031e	89 4d 80	 mov	 DWORD PTR _SkillRank$[ebp], ecx

; 170  : 
; 171  : 			Token = GetToken();

  00321	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 172  : 			SkillGroup = (short)TokenNumber;

  00326	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0032c	e8 00 00 00 00	 call	 __ftol2_sse
  00331	0f b7 d0	 movzx	 edx, ax
  00334	89 55 88	 mov	 DWORD PTR _SkillGroup$[ebp], edx

; 173  : 
; 174  : 			Token = GetToken();

  00337	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 175  : 			rMLPoint = (short)TokenNumber;

  0033c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00342	e8 00 00 00 00	 call	 __ftol2_sse
  00347	0f b7 c0	 movzx	 eax, ax
  0034a	89 45 90	 mov	 DWORD PTR _rMLPoint$[ebp], eax

; 176  : 
; 177  : 			Token = GetToken();

  0034d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 178  : 			rAG = (short)TokenNumber;

  00352	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00358	e8 00 00 00 00	 call	 __ftol2_sse
  0035d	0f b7 c8	 movzx	 ecx, ax
  00360	89 4d 98	 mov	 DWORD PTR _rAG$[ebp], ecx

; 179  : 
; 180  : 			Token = GetToken();

  00363	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 181  : 			rShield = (short)TokenNumber;

  00368	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0036e	e8 00 00 00 00	 call	 __ftol2_sse
  00373	0f b7 d0	 movzx	 edx, ax
  00376	89 55 a0	 mov	 DWORD PTR _rShield$[ebp], edx

; 182  : 
; 183  : 			Token = GetToken();

  00379	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 184  : 			Duration = (short)TokenNumber;

  0037e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00384	e8 00 00 00 00	 call	 __ftol2_sse
  00389	0f b7 c0	 movzx	 eax, ax
  0038c	89 45 a4	 mov	 DWORD PTR _Duration$[ebp], eax

; 185  : 
; 186  : 			Token = GetToken();

  0038f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 187  : 			rStrength = (short)TokenNumber;

  00394	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0039a	e8 00 00 00 00	 call	 __ftol2_sse
  0039f	0f b7 c8	 movzx	 ecx, ax
  003a2	89 4d c0	 mov	 DWORD PTR _rStrength$[ebp], ecx

; 188  : 
; 189  : 			Token = GetToken();

  003a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 190  : 			rDexterity = (short)TokenNumber;

  003aa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003b0	e8 00 00 00 00	 call	 __ftol2_sse
  003b5	0f b7 d0	 movzx	 edx, ax
  003b8	89 55 c4	 mov	 DWORD PTR _rDexterity$[ebp], edx

; 191  : 
; 192  : 			Token = GetToken();

  003bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 193  : 			IconNumber = (BYTE)TokenNumber;
; 194  : 
; 195  : 			Token = GetToken();

  003c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 196  : 			iUseType = (int)TokenNumber;
; 197  : 
; 198  : 			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay);

  003c5	8b 45 8c	 mov	 eax, DWORD PTR _rDelay$[ebp]
  003c8	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _rLeadership$[ebp]
  003ce	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _rEnergy$[ebp]
  003d4	50		 push	 eax
  003d5	51		 push	 ecx
  003d6	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _iSkillType$[ebp]
  003dc	52		 push	 edx
  003dd	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _attr$[ebp]
  003e3	8d 45 b8	 lea	 eax, DWORD PTR _RequireClass$[ebp]
  003e6	50		 push	 eax
  003e7	8b 45 9c	 mov	 eax, DWORD PTR _dis$[ebp]
  003ea	51		 push	 ecx
  003eb	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _bp$[ebp]
  003f1	52		 push	 edx
  003f2	8b 55 94	 mov	 edx, DWORD PTR _mana$[ebp]
  003f5	50		 push	 eax
  003f6	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _damage$[ebp]
  003fc	51		 push	 ecx
  003fd	52		 push	 edx
  003fe	53		 push	 ebx
  003ff	50		 push	 eax
  00400	56		 push	 esi
  00401	8d 4d c8	 lea	 ecx, DWORD PTR _name$[ebp]
  00404	51		 push	 ecx
  00405	8b cf		 mov	 ecx, edi
  00407	e8 00 00 00 00	 call	 ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ; CMagicDamage::Set

; 199  : 			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);

  0040c	8b 45 a8	 mov	 eax, DWORD PTR _iKillCount$[ebp]
  0040f	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _iSkillBrand$[ebp]
  00415	8d 55 ac	 lea	 edx, DWORD PTR _RequireStatus$[ebp]
  00418	52		 push	 edx
  00419	8b 55 84	 mov	 edx, DWORD PTR _iSkillUseType$[ebp]
  0041c	50		 push	 eax
  0041d	51		 push	 ecx
  0041e	52		 push	 edx
  0041f	56		 push	 esi
  00420	8b cf		 mov	 ecx, edi
  00422	e8 00 00 00 00	 call	 ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ; CMagicDamage::SetEx

; 200  : 			this->SetML(number, SkillRank, SkillGroup, rMLPoint, rAG, rShield, Duration, rStrength, rDexterity);

  00427	0f bf 45 c4	 movsx	 eax, WORD PTR _rDexterity$[ebp]
  0042b	0f bf 4d c0	 movsx	 ecx, WORD PTR _rStrength$[ebp]
  0042f	8b 55 a4	 mov	 edx, DWORD PTR _Duration$[ebp]
  00432	50		 push	 eax
  00433	0f bf 45 a0	 movsx	 eax, WORD PTR _rShield$[ebp]
  00437	51		 push	 ecx
  00438	0f bf 4d 98	 movsx	 ecx, WORD PTR _rAG$[ebp]
  0043c	52		 push	 edx
  0043d	0f bf 55 90	 movsx	 edx, WORD PTR _rMLPoint$[ebp]
  00441	50		 push	 eax
  00442	0f bf 45 88	 movsx	 eax, WORD PTR _SkillGroup$[ebp]
  00446	51		 push	 ecx
  00447	0f bf 4d 80	 movsx	 ecx, WORD PTR _SkillRank$[ebp]
  0044b	52		 push	 edx
  0044c	50		 push	 eax
  0044d	51		 push	 ecx
  0044e	56		 push	 esi
  0044f	8b cf		 mov	 ecx, edi
  00451	e8 00 00 00 00	 call	 ?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z ; CMagicDamage::SetML

; 201  : 			DefMagicInf[number].Set(number, 0);

  00456	6a 00		 push	 0
  00458	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  0045b	56		 push	 esi
  0045c	8d 0c cd 00 00
	00 00		 lea	 ecx, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A[ecx*8]
  00463	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set
  00468	8b b5 78 ff ff
	ff		 mov	 esi, DWORD PTR _filename$GSCopy$[ebp]
$LN1@LogSkillLi:

; 84   : 
; 85   : 		if ( Token == 2 )

  0046e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00473	83 f8 02	 cmp	 eax, 2
  00476	0f 85 f9 fb ff
	ff		 jne	 $LL4@LogSkillLi
  0047c	5b		 pop	 ebx
$LN12@LogSkillLi:

; 202  : 		}
; 203  : 	}
; 204  : 
; 205  : 	fclose(SMDFile);

  0047d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00483	52		 push	 edx
  00484	e8 00 00 00 00	 call	 _fclose
  00489	83 c4 04	 add	 esp, 4

; 206  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), filename);

  0048c	56		 push	 esi
  0048d	68 c8 01 00 00	 push	 456			; 000001c8H
  00492	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00497	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0049c	50		 push	 eax
  0049d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
$LN14@LogSkillLi:

; 207  : }

  004a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a6	83 c4 08	 add	 esp, 8
  004a9	5f		 pop	 edi
  004aa	33 cd		 xor	 ecx, ebp
  004ac	5e		 pop	 esi
  004ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004b2	8b e5		 mov	 esp, ebp
  004b4	5d		 pop	 ebp
  004b5	c2 04 00	 ret	 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z ENDP		; CMagicDamage::LogSkillList
_TEXT	ENDS
PUBLIC	??_C@_05OEGOMMDP@Skill?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillList@CMagicDamage@@QAEXPADH@Z		; CMagicDamage::LogSkillList
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
;	COMDAT ??_C@_05OEGOMMDP@Skill?$AA@
CONST	SEGMENT
??_C@_05OEGOMMDP@Skill?$AA@ DB 'Skill', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LogSkillList@CMagicDamage@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSkillList@CMagicDamage@@QAEXPADH@Z$0
__ehfuncinfo$?LogSkillList@CMagicDamage@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LogSkillList@CMagicDamage@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogSkillList@CMagicDamage@@QAEXPADH@Z
_TEXT	SEGMENT
_attr$ = -300						; size = 4
_bp$ = -296						; size = 4
_iSkillType$ = -292					; size = 4
_iSkillBrand$ = -288					; size = 4
_rEnergy$ = -284					; size = 4
_rDexterity$ = -280					; size = 4
_rLeadership$ = -276					; size = 4
_damage$ = -272						; size = 4
_SkillRank$ = -268					; size = 4
_rStrength$ = -264					; size = 4
_SkillGroup$ = -260					; size = 4
_rDelay$ = -256						; size = 4
_rMLPoint$ = -252					; size = 2
_iKillCount$ = -248					; size = 4
_rAG$ = -244						; size = 4
_mana$ = -240						; size = 4
_rShield$ = -236					; size = 4
_dis$ = -232						; size = 4
_Duration$ = -228					; size = 2
_iSkillUseType$ = -224					; size = 4
_RequireStatus$ = -220					; size = 12
_RequireClass$ = -208					; size = 7
_WzMemScript$ = -200					; size = 132
_name$ = -68						; size = 50
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LogSkillList@CMagicDamage@@QAEXPADH@Z PROC		; CMagicDamage::LogSkillList, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LogSkillList@CMagicDamage@@QAEXPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 75 08	 mov	 esi, DWORD PTR _Buffer$[ebp]
  00031	8b f9		 mov	 edi, ecx

; 254  : //
; 255  : //	this->Init();
; 256  : //	// ----
; 257  : //	CWzMemScript WzMemScript;
; 258  : //	WzMemScript.SetBuffer(Buffer, iSize);
; 259  : //	// ----
; 260  : //	int Token;
; 261  : //	int n=0;
; 262  : //	int number;
; 263  : //	char name[50];
; 264  : //	int requireLevel;
; 265  : //	int damage;
; 266  : //	int mana;
; 267  : //	int bp=0;
; 268  : //	int dis;
; 269  : //	int rEnergy;
; 270  : //	int iSkillType;
; 271  : //	int rLeadership;
; 272  : //	int rDelay;
; 273  : //	int attr;
; 274  : //	int iSkillUseType;
; 275  : //	int iSkillBrand;
; 276  : //	int iKillCount;
; 277  : //	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};
; 278  : //	BYTE RequireClass[MAX_TYPE_PLAYER];
; 279  : //	int SkillRank;
; 280  : //	int SkillGroup;
; 281  : //	short rMLPoint;
; 282  : //	int rAG;
; 283  : //	int rShield;
; 284  : //	short Duration;
; 285  : //	int rStrength;
; 286  : //	int rDexterity;
; 287  : //	BYTE IconNumber;
; 288  : //	int iUseType;
; 289  : //	BYTE btItemSkill;
; 290  : //	BYTE btIsDamage;
; 291  : //	// ----
; 292  : //	while(true)
; 293  : //	{
; 294  : //		Token = WzMemScript.GetToken();
; 295  : //		// ----
; 296  : //		if( Token == END )
; 297  : //		{
; 298  : //			break;
; 299  : //		}
; 300  : //		// ----
; 301  : //		if( Token == NUMBER )
; 302  : //		{
; 303  : //			number = WzMemScript.GetNumber();
; 304  : //			// ----
; 305  : //			Token = WzMemScript.GetToken();
; 306  : //			strcpy(name, WzMemScript.GetString() );
; 307  : //			// ----
; 308  : //			Token = WzMemScript.GetToken();
; 309  : //			requireLevel = WzMemScript.GetNumber();
; 310  : //			// ----
; 311  : //			Token = WzMemScript.GetToken();
; 312  : //			damage = WzMemScript.GetNumber();
; 313  : //			// ----
; 314  : //			Token = WzMemScript.GetToken();
; 315  : //			mana = WzMemScript.GetNumber();
; 316  : //			// ----
; 317  : //			Token = WzMemScript.GetToken();
; 318  : //			bp = WzMemScript.GetNumber();
; 319  : //			// ----
; 320  : //			Token = WzMemScript.GetToken();
; 321  : //			dis = WzMemScript.GetNumber();
; 322  : //			// ----
; 323  : //			Token = WzMemScript.GetToken();
; 324  : //			rDelay = WzMemScript.GetNumber();
; 325  : //			// ----
; 326  : //			Token = WzMemScript.GetToken();
; 327  : //			rEnergy = WzMemScript.GetNumber();
; 328  : //			// ----
; 329  : //			Token = WzMemScript.GetToken();
; 330  : //			rLeadership = WzMemScript.GetNumber();
; 331  : //			// ----
; 332  : //			Token = WzMemScript.GetToken();
; 333  : //			attr = WzMemScript.GetNumber();
; 334  : //			// ----
; 335  : //			Token = WzMemScript.GetToken();
; 336  : //			iSkillType = WzMemScript.GetNumber();
; 337  : //			// ----
; 338  : //			Token = WzMemScript.GetToken();
; 339  : //			iSkillUseType = WzMemScript.GetNumber();
; 340  : //			// ----
; 341  : //			Token = WzMemScript.GetToken();
; 342  : //			iSkillBrand = WzMemScript.GetNumber();
; 343  : //			// ----
; 344  : //			Token = WzMemScript.GetToken();
; 345  : //			iKillCount = WzMemScript.GetNumber();
; 346  : //			// ----
; 347  : //			Token = WzMemScript.GetToken();
; 348  : //			RequireStatus[0] = WzMemScript.GetNumber();
; 349  : //			// ----
; 350  : //			Token = WzMemScript.GetToken();
; 351  : //			RequireStatus[1] = WzMemScript.GetNumber();
; 352  : //			// ----
; 353  : //			Token = WzMemScript.GetToken();
; 354  : //			RequireStatus[2] = WzMemScript.GetNumber();
; 355  : //			// ----
; 356  : //			Token = WzMemScript.GetToken();
; 357  : //			RequireClass[CLASS_WIZARD] = WzMemScript.GetNumber(); //SM
; 358  : //			// ----
; 359  : //			Token = WzMemScript.GetToken();
; 360  : //			RequireClass[CLASS_KNIGHT] = WzMemScript.GetNumber(); //DK
; 361  : //			// ----
; 362  : //			Token = WzMemScript.GetToken();
; 363  : //			RequireClass[CLASS_ELF] = WzMemScript.GetNumber(); //ELF
; 364  : //			// ----
; 365  : //			Token = WzMemScript.GetToken();
; 366  : //			RequireClass[CLASS_MAGUMSA] = WzMemScript.GetNumber(); //MG
; 367  : //			// ----
; 368  : //			Token = WzMemScript.GetToken();
; 369  : //			RequireClass[CLASS_DARKLORD] = WzMemScript.GetNumber(); //DL
; 370  : //			// ----
; 371  : //			Token = WzMemScript.GetToken();
; 372  : //			RequireClass[CLASS_SUMMONER] = WzMemScript.GetNumber(); //SUM
; 373  : //			// ----
; 374  : //			Token = WzMemScript.GetToken();
; 375  : //			RequireClass[CLASS_MONK] = WzMemScript.GetNumber(); //RF
; 376  : //			// ----
; 377  : //			Token = WzMemScript.GetToken();
; 378  : //			SkillRank = WzMemScript.GetNumber();
; 379  : //			// ----
; 380  : //			Token = WzMemScript.GetToken();
; 381  : //			SkillGroup = WzMemScript.GetNumber();
; 382  : //			// ----
; 383  : //			Token = WzMemScript.GetToken();
; 384  : //			rMLPoint = WzMemScript.GetNumber();
; 385  : //			// ----
; 386  : //			Token = WzMemScript.GetToken();
; 387  : //			rAG = WzMemScript.GetNumber();
; 388  : //			// ----
; 389  : //			Token = WzMemScript.GetToken();
; 390  : //			rShield = WzMemScript.GetNumber();
; 391  : //			// ----
; 392  : //			Token = WzMemScript.GetToken();
; 393  : //			Duration = WzMemScript.GetNumber();
; 394  : //			// ----
; 395  : //			Token = WzMemScript.GetToken();
; 396  : //			rStrength = WzMemScript.GetNumber();
; 397  : //			// ----
; 398  : //			Token = WzMemScript.GetToken();
; 399  : //			rDexterity = WzMemScript.GetNumber();
; 400  : //			// ----
; 401  : //			Token = WzMemScript.GetToken();
; 402  : //			IconNumber = WzMemScript.GetNumber();
; 403  : //			// ----
; 404  : //			Token = WzMemScript.GetToken();
; 405  : //			iUseType = WzMemScript.GetNumber();
; 406  : //			// ----
; 407  : //			Token = WzMemScript.GetToken();
; 408  : //			btItemSkill = WzMemScript.GetNumber();
; 409  : //			// ----
; 410  : //			Token = WzMemScript.GetToken();
; 411  : //			btIsDamage = WzMemScript.GetNumber();
; 412  : //			// ----
; 413  : //			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay/*, btItemSkill  , btIsDamage*/);
; 414  : //			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);
; 415  : //			//this->SetMasterLevelSkillInfo(number, SkillRank, SkillGroup, rMLPoint, rAG, rShield, Duration, rStrength, rDexterity);
; 416  : //			DefMagicInf[number].Set(number, 0);
; 417  : //		}
; 418  : //	}
; 419  : //	// ----
; 420  : //	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill");
; 421  : 
; 422  : 	this->Init();

  00033	e8 00 00 00 00	 call	 ?Init@CMagicDamage@@QAEXXZ ; CMagicDamage::Init

; 423  : 	CWzMemScript WzMemScript;

  00038	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 424  : 
; 425  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00043	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00046	50		 push	 eax
  00047	33 db		 xor	 ebx, ebx
  00049	56		 push	 esi
  0004a	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00050	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00053	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 426  : 
; 427  : 	int Token;
; 428  : 	int n=0;
; 429  : 	int number;
; 430  : 	char name[50];
; 431  : 	int requireLevel;
; 432  : 	int damage;
; 433  : 	int mana;
; 434  : 	int bp=0;
; 435  : 	int dis;
; 436  : 	int rEnergy;
; 437  : 	int iSkillType;
; 438  : 	int rLeadership;
; 439  : 	int rDelay;
; 440  : 	int attr;
; 441  : 	int iSkillUseType;
; 442  : 	int iSkillBrand;
; 443  : 	int iKillCount;
; 444  : 	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};

  00058	33 c0		 xor	 eax, eax

; 445  : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 446  : 	//Season 3 add-on
; 447  : 	int SkillRank;
; 448  : 	int SkillGroup;
; 449  : 	short rMLPoint;
; 450  : 	int rAG;
; 451  : 	int rShield;
; 452  : 	short Duration;
; 453  : 	int rStrength;
; 454  : 	int rDexterity;
; 455  : 	BYTE IconNumber;
; 456  : 	int iUseType;
; 457  : 	BYTE btItemSkill;
; 458  : 	BYTE btIsDamage;
; 459  : 
; 460  : 	while ( true )
; 461  : 	{
; 462  : 		Token = WzMemScript.GetToken();

  0005a	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00060	89 9d 24 ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp], ebx
  00066	89 85 28 ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+4], eax
  0006c	89 85 2c ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+8], eax
  00072	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 463  : 
; 464  : 		if ( Token == 2 )

  00077	83 f8 02	 cmp	 eax, 2
  0007a	0f 84 d7 04 00
	00		 je	 $LN12@LogSkillLi@2
$LL4@LogSkillLi@2:

; 465  : 		{
; 466  : 			break;
; 467  : 		}
; 468  : 
; 469  : 		if ( Token == 1 )

  00080	83 f8 01	 cmp	 eax, 1
  00083	0f 85 ba 04 00
	00		 jne	 $LN1@LogSkillLi@2

; 470  : 		{
; 471  : 			number = WzMemScript.GetNumber();

  00089	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0008f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 472  : 
; 473  : 			Token = WzMemScript.GetToken();

  00094	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0009a	8b f0		 mov	 esi, eax
  0009c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 474  : 			strcpy(name, WzMemScript.GetString() );

  000a1	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000a7	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  000ac	8d 55 bc	 lea	 edx, DWORD PTR _name$[ebp]
  000af	2b d0		 sub	 edx, eax
$LL7@LogSkillLi@2:
  000b1	8a 08		 mov	 cl, BYTE PTR [eax]
  000b3	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000b6	40		 inc	 eax
  000b7	84 c9		 test	 cl, cl
  000b9	75 f6		 jne	 SHORT $LL7@LogSkillLi@2

; 475  : 
; 476  : 			Token = WzMemScript.GetToken();

  000bb	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000c1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 477  : 			requireLevel = WzMemScript.GetNumber();

  000c6	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000cc	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 478  : 
; 479  : 			Token = WzMemScript.GetToken();

  000d1	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000d7	8b d8		 mov	 ebx, eax
  000d9	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 480  : 			damage = WzMemScript.GetNumber();

  000de	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000e4	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 481  : 
; 482  : 			Token = WzMemScript.GetToken();

  000e9	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000ef	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _damage$[ebp], eax
  000f5	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 483  : 			mana = WzMemScript.GetNumber();

  000fa	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00100	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 484  : 
; 485  : 			Token = WzMemScript.GetToken();

  00105	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0010b	89 85 10 ff ff
	ff		 mov	 DWORD PTR _mana$[ebp], eax
  00111	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 486  : 			bp = WzMemScript.GetNumber();

  00116	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0011c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 487  : 
; 488  : 			Token = WzMemScript.GetToken();

  00121	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00127	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _bp$[ebp], eax
  0012d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 489  : 			dis = WzMemScript.GetNumber();

  00132	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00138	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 490  : 
; 491  : 			Token = WzMemScript.GetToken();

  0013d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00143	89 85 18 ff ff
	ff		 mov	 DWORD PTR _dis$[ebp], eax
  00149	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 492  : 			rDelay = WzMemScript.GetNumber();

  0014e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00154	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 493  : 
; 494  : 			Token = WzMemScript.GetToken();

  00159	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0015f	89 85 00 ff ff
	ff		 mov	 DWORD PTR _rDelay$[ebp], eax
  00165	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 495  : 			rEnergy = WzMemScript.GetNumber();

  0016a	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00170	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 496  : 
; 497  : 			Token = WzMemScript.GetToken();

  00175	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0017b	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _rEnergy$[ebp], eax
  00181	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 498  : 			rLeadership = WzMemScript.GetNumber();

  00186	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0018c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 499  : 
; 500  : 			Token = WzMemScript.GetToken();

  00191	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00197	89 85 ec fe ff
	ff		 mov	 DWORD PTR _rLeadership$[ebp], eax
  0019d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 501  : 			attr = WzMemScript.GetNumber();

  001a2	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001a8	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 502  : 
; 503  : 			Token = WzMemScript.GetToken();

  001ad	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001b3	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _attr$[ebp], eax
  001b9	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 504  : 			iSkillType = WzMemScript.GetNumber();

  001be	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001c4	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 505  : 
; 506  : 			Token = WzMemScript.GetToken();

  001c9	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001cf	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iSkillType$[ebp], eax
  001d5	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 507  : 			iSkillUseType = WzMemScript.GetNumber();

  001da	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001e0	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 508  : 
; 509  : 			Token = WzMemScript.GetToken();

  001e5	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001eb	89 85 20 ff ff
	ff		 mov	 DWORD PTR _iSkillUseType$[ebp], eax
  001f1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 510  : 			iSkillBrand = WzMemScript.GetNumber();

  001f6	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001fc	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 511  : 
; 512  : 			Token = WzMemScript.GetToken();

  00201	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00207	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _iSkillBrand$[ebp], eax
  0020d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 513  : 			iKillCount = WzMemScript.GetNumber();

  00212	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00218	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 514  : 
; 515  : 			Token = WzMemScript.GetToken();

  0021d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00223	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iKillCount$[ebp], eax
  00229	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 516  : 			RequireStatus[0] = WzMemScript.GetNumber();

  0022e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00234	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 517  : 
; 518  : 			Token = WzMemScript.GetToken();

  00239	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0023f	89 85 24 ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp], eax
  00245	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 519  : 			RequireStatus[1] = WzMemScript.GetNumber();

  0024a	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00250	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 520  : 
; 521  : 			Token = WzMemScript.GetToken();

  00255	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0025b	89 85 28 ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+4], eax
  00261	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 522  : 			RequireStatus[2] = WzMemScript.GetNumber();

  00266	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0026c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00271	89 85 2c ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 523  : 
; 524  : 			Token = WzMemScript.GetToken();

  00277	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0027d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 525  : 			RequireClass[0] = WzMemScript.GetNumber(); //SM

  00282	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00288	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 526  : 
; 527  : 			Token = WzMemScript.GetToken();

  0028d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00293	88 85 30 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp], al
  00299	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 528  : 			RequireClass[1] = WzMemScript.GetNumber(); //DK

  0029e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002a4	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 529  : 
; 530  : 			Token = WzMemScript.GetToken();

  002a9	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002af	88 85 31 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+1], al
  002b5	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 531  : 			RequireClass[2] = WzMemScript.GetNumber(); //ELF

  002ba	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002c0	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 532  : 
; 533  : 			Token = WzMemScript.GetToken();

  002c5	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002cb	88 85 32 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+2], al
  002d1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 534  : 			RequireClass[3] = WzMemScript.GetNumber(); //MG

  002d6	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002dc	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 535  : 
; 536  : 			Token = WzMemScript.GetToken();

  002e1	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002e7	88 85 33 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+3], al
  002ed	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 537  : 			RequireClass[4] = WzMemScript.GetNumber(); //DL

  002f2	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002f8	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 538  : 
; 539  : 			///////////////Summoner (23)
; 540  : 			Token = WzMemScript.GetToken();

  002fd	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00303	88 85 34 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+4], al
  00309	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 541  : 			RequireClass[5] = WzMemScript.GetNumber(); //SUM

  0030e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00314	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 542  : 			////////////////////
; 543  : 
; 544  : 			Token = WzMemScript.GetToken();

  00319	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0031f	88 85 35 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+5], al
  00325	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 545  : 			RequireClass[6] = WzMemScript.GetNumber(); //RF

  0032a	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00330	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 546  : 
; 547  : 			Token = WzMemScript.GetToken();

  00335	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0033b	88 85 36 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+6], al
  00341	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 548  : 			SkillRank = WzMemScript.GetNumber();

  00346	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0034c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 549  : 
; 550  : 			Token = WzMemScript.GetToken();

  00351	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00357	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _SkillRank$[ebp], eax
  0035d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 551  : 			SkillGroup = WzMemScript.GetNumber();

  00362	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00368	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 552  : 
; 553  : 			Token = WzMemScript.GetToken();

  0036d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00373	89 85 fc fe ff
	ff		 mov	 DWORD PTR _SkillGroup$[ebp], eax
  00379	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 554  : 			rMLPoint = WzMemScript.GetNumber();

  0037e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00384	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00389	0f b7 c8	 movzx	 ecx, ax
  0038c	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _rMLPoint$[ebp], ecx

; 555  : 
; 556  : 			Token = WzMemScript.GetToken();

  00392	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00398	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 557  : 			rAG = WzMemScript.GetNumber();

  0039d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003a3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 558  : 
; 559  : 			Token = WzMemScript.GetToken();

  003a8	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003ae	89 85 0c ff ff
	ff		 mov	 DWORD PTR _rAG$[ebp], eax
  003b4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 560  : 			rShield = WzMemScript.GetNumber();

  003b9	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003bf	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 561  : 
; 562  : 			Token = WzMemScript.GetToken();

  003c4	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003ca	89 85 14 ff ff
	ff		 mov	 DWORD PTR _rShield$[ebp], eax
  003d0	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 563  : 			Duration = WzMemScript.GetNumber();

  003d5	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003db	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  003e0	0f b7 d0	 movzx	 edx, ax

; 564  : 
; 565  : 			Token = WzMemScript.GetToken();

  003e3	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003e9	89 95 1c ff ff
	ff		 mov	 DWORD PTR _Duration$[ebp], edx
  003ef	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 566  : 			rStrength = WzMemScript.GetNumber();

  003f4	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003fa	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 567  : 
; 568  : 			Token = WzMemScript.GetToken();

  003ff	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00405	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _rStrength$[ebp], eax
  0040b	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 569  : 			rDexterity = WzMemScript.GetNumber();

  00410	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00416	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 570  : 
; 571  : 			Token = WzMemScript.GetToken();

  0041b	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00421	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _rDexterity$[ebp], eax
  00427	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 572  : 			IconNumber = WzMemScript.GetNumber();

  0042c	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00432	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 573  : 
; 574  : 			Token = WzMemScript.GetToken();

  00437	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0043d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 575  : 			iUseType = WzMemScript.GetNumber();

  00442	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00448	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 576  : 
; 577  : 			Token = WzMemScript.GetToken();

  0044d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00453	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 578  : 			btItemSkill = WzMemScript.GetNumber();

  00458	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0045e	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 579  : 			// ----
; 580  : 			Token = WzMemScript.GetToken();

  00463	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00469	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 581  : 			btIsDamage = WzMemScript.GetNumber();

  0046e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00474	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 582  : 
; 583  : 			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay);

  00479	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _rDelay$[ebp]
  0047f	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _rLeadership$[ebp]
  00485	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _rEnergy$[ebp]
  0048b	50		 push	 eax
  0048c	51		 push	 ecx
  0048d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _iSkillType$[ebp]
  00493	52		 push	 edx
  00494	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _attr$[ebp]
  0049a	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _RequireClass$[ebp]
  004a0	50		 push	 eax
  004a1	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _dis$[ebp]
  004a7	51		 push	 ecx
  004a8	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _bp$[ebp]
  004ae	52		 push	 edx
  004af	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _mana$[ebp]
  004b5	50		 push	 eax
  004b6	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _damage$[ebp]
  004bc	51		 push	 ecx
  004bd	52		 push	 edx
  004be	53		 push	 ebx
  004bf	50		 push	 eax
  004c0	56		 push	 esi
  004c1	8d 4d bc	 lea	 ecx, DWORD PTR _name$[ebp]
  004c4	51		 push	 ecx
  004c5	8b cf		 mov	 ecx, edi
  004c7	e8 00 00 00 00	 call	 ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ; CMagicDamage::Set

; 584  : 			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);

  004cc	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _iKillCount$[ebp]
  004d2	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _iSkillBrand$[ebp]
  004d8	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR _RequireStatus$[ebp]
  004de	52		 push	 edx
  004df	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _iSkillUseType$[ebp]
  004e5	50		 push	 eax
  004e6	51		 push	 ecx
  004e7	52		 push	 edx
  004e8	56		 push	 esi
  004e9	8b cf		 mov	 ecx, edi
  004eb	e8 00 00 00 00	 call	 ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ; CMagicDamage::SetEx

; 585  : 			this->SetML(number, SkillRank, SkillGroup, rMLPoint, rAG, rShield, Duration, rStrength, rDexterity);

  004f0	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _rDexterity$[ebp]
  004f6	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _rStrength$[ebp]
  004fc	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _Duration$[ebp]
  00502	50		 push	 eax
  00503	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _rShield$[ebp]
  00509	51		 push	 ecx
  0050a	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _rAG$[ebp]
  00510	52		 push	 edx
  00511	0f bf 95 04 ff
	ff ff		 movsx	 edx, WORD PTR _rMLPoint$[ebp]
  00518	50		 push	 eax
  00519	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _SkillGroup$[ebp]
  0051f	51		 push	 ecx
  00520	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _SkillRank$[ebp]
  00526	52		 push	 edx
  00527	50		 push	 eax
  00528	51		 push	 ecx
  00529	56		 push	 esi
  0052a	8b cf		 mov	 ecx, edi
  0052c	e8 00 00 00 00	 call	 ?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z ; CMagicDamage::SetML

; 586  : 			DefMagicInf[number].Set(number, 0);

  00531	6a 00		 push	 0
  00533	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00536	56		 push	 esi
  00537	8d 0c cd 00 00
	00 00		 lea	 ecx, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A[ecx*8]
  0053e	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set
$LN1@LogSkillLi@2:

; 445  : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 446  : 	//Season 3 add-on
; 447  : 	int SkillRank;
; 448  : 	int SkillGroup;
; 449  : 	short rMLPoint;
; 450  : 	int rAG;
; 451  : 	int rShield;
; 452  : 	short Duration;
; 453  : 	int rStrength;
; 454  : 	int rDexterity;
; 455  : 	BYTE IconNumber;
; 456  : 	int iUseType;
; 457  : 	BYTE btItemSkill;
; 458  : 	BYTE btIsDamage;
; 459  : 
; 460  : 	while ( true )
; 461  : 	{
; 462  : 		Token = WzMemScript.GetToken();

  00543	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00549	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 463  : 
; 464  : 		if ( Token == 2 )

  0054e	83 f8 02	 cmp	 eax, 2
  00551	0f 85 29 fb ff
	ff		 jne	 $LL4@LogSkillLi@2
$LN12@LogSkillLi@2:

; 587  : 		}
; 588  : 	}
; 589  : 
; 590  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill");

  00557	68 00 00 00 00	 push	 OFFSET ??_C@_05OEGOMMDP@Skill?$AA@
  0055c	68 c8 01 00 00	 push	 456			; 000001c8H
  00561	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00566	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0056b	50		 push	 eax
  0056c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00572	83 c4 08	 add	 esp, 8

; 591  : 
; 592  : }

  00575	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0057b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00582	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  00587	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0058a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00591	59		 pop	 ecx
  00592	5f		 pop	 edi
  00593	5e		 pop	 esi
  00594	5b		 pop	 ebx
  00595	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00598	33 cd		 xor	 ecx, ebp
  0059a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0059f	8b e5		 mov	 esp, ebp
  005a1	5d		 pop	 ebp
  005a2	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSkillList@CMagicDamage@@QAEXPADH@Z$0:
  00000	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LogSkillList@CMagicDamage@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-304]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LogSkillList@CMagicDamage@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LogSkillList@CMagicDamage@@QAEXPADH@Z ENDP		; CMagicDamage::LogSkillList
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EMagicDamageC@@YAXXZ
text$yc	SEGMENT
??__EMagicDamageC@@YAXXZ PROC				; `dynamic initializer for 'MagicDamageC'', COMDAT

; 14   : CMagicDamage MagicDamageC;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00005	e8 00 00 00 00	 call	 ??0CMagicDamage@@QAE@XZ	; CMagicDamage::CMagicDamage
  0000a	68 00 00 00 00	 push	 OFFSET ??__FMagicDamageC@@YAXXZ ; `dynamic atexit destructor for 'MagicDamageC''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EMagicDamageC@@YAXXZ ENDP				; `dynamic initializer for 'MagicDamageC''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FMagicDamageC@@YAXXZ
text$yd	SEGMENT
??__FMagicDamageC@@YAXXZ PROC				; `dynamic atexit destructor for 'MagicDamageC'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00005	e9 00 00 00 00	 jmp	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
??__FMagicDamageC@@YAXXZ ENDP				; `dynamic atexit destructor for 'MagicDamageC''
text$yd	ENDS
PUBLIC	?MagicDamageC@@3VCMagicDamage@@A		; MagicDamageC
_BSS	SEGMENT
?MagicDamageC@@3VCMagicDamage@@A DB 0168f4H DUP (?)	; MagicDamageC
_BSS	ENDS
CRT$XCU	SEGMENT
_MagicDamageC$initializer$ DD FLAT:??__EMagicDamageC@@YAXXZ
CRT$XCU	ENDS
END
