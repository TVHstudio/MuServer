; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MagicInf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMagicInf@@6B@				; CMagicInf::`vftable'
PUBLIC	??1CMagicInf@@UAE@XZ				; CMagicInf::~CMagicInf
PUBLIC	??_R4CMagicInf@@6B@				; CMagicInf::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicInf@@@8				; CMagicInf `RTTI Type Descriptor'
PUBLIC	??_R3CMagicInf@@8				; CMagicInf::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicInf@@8				; CMagicInf::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicInf@@8			; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMagicInf@@UAEPAXI@Z:PROC			; CMagicInf::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMagicInf@@8
; File e:\work\tranet_version\gs\gameserver\magicinf.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicInf@@8 DD FLAT:??_R0?AVCMagicInf@@@8 ; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicInf@@8
rdata$r	SEGMENT
??_R2CMagicInf@@8 DD FLAT:??_R1A@?0A@EA@CMagicInf@@8	; CMagicInf::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicInf@@8
rdata$r	SEGMENT
??_R3CMagicInf@@8 DD 00H				; CMagicInf::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicInf@@@8
_DATA	SEGMENT
??_R0?AVCMagicInf@@@8 DD FLAT:??_7type_info@@6B@	; CMagicInf `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicInf@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMagicInf@@6B@
rdata$r	SEGMENT
??_R4CMagicInf@@6B@ DD 00H				; CMagicInf::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicInf@@@8
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_7CMagicInf@@6B@
CONST	SEGMENT
??_7CMagicInf@@6B@ DD FLAT:??_R4CMagicInf@@6B@		; CMagicInf::`vftable'
	DD	FLAT:??_ECMagicInf@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CMagicInf@@UAE@XZ
_TEXT	SEGMENT
??1CMagicInf@@UAE@XZ PROC				; CMagicInf::~CMagicInf, COMDAT
; _this$ = ecx

; 20   : 	this->m_DamageMin  = 0;

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMagicInf@@6B@
  00008	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 21   : 	this->m_DamageMax  = 0;

  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 22   : }

  0000e	c3		 ret	 0
??1CMagicInf@@UAE@XZ ENDP				; CMagicInf::~CMagicInf
_TEXT	ENDS
PUBLIC	?Clear@CMagicInf@@QAEXXZ			; CMagicInf::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@CMagicInf@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMagicInf@@QAEXXZ PROC				; CMagicInf::Clear, COMDAT
; _this$ = ecx

; 26   : 	this->m_Skill  = 0xFF;
; 27   : 	this->m_Level  = 0;

  00000	32 c0		 xor	 al, al
  00002	c7 41 08 ff 00
	00 00		 mov	 DWORD PTR [ecx+8], 255	; 000000ffH
  00009	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 28   : 	this->m_bPass	= 0;

  0000c	88 41 14	 mov	 BYTE PTR [ecx+20], al

; 29   : }

  0000f	c3		 ret	 0
?Clear@CMagicInf@@QAEXXZ ENDP				; CMagicInf::Clear
_TEXT	ENDS
PUBLIC	?IsMagic@CMagicInf@@QAEHXZ			; CMagicInf::IsMagic
; Function compile flags: /Ogtp
;	COMDAT ?IsMagic@CMagicInf@@QAEHXZ
_TEXT	SEGMENT
?IsMagic@CMagicInf@@QAEHXZ PROC				; CMagicInf::IsMagic, COMDAT
; _this$ = ecx

; 33   : 	if ( this->m_Skill == 0xFF )

  00000	33 c0		 xor	 eax, eax
  00002	81 79 08 ff 00
	00 00		 cmp	 DWORD PTR [ecx+8], 255	; 000000ffH
  00009	0f 95 c0	 setne	 al

; 34   : 	{
; 35   : 		return false;
; 36   : 	}
; 37   : 	return true;
; 38   : }

  0000c	c3		 ret	 0
?IsMagic@CMagicInf@@QAEHXZ ENDP				; CMagicInf::IsMagic
_TEXT	ENDS
PUBLIC	?GetSkillNumberInex@@YAHHHH@Z			; GetSkillNumberInex
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillNumberInex@@YAHHHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
_Index$ = 12						; size = 4
_level$ = 16						; size = 4
?GetSkillNumberInex@@YAHHHH@Z PROC			; GetSkillNumberInex, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 	int skillnumber = -1;
; 43   : 
; 44   : 	if ( type == 15 )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  00006	83 c8 ff	 or	 eax, -1
  00009	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  0000c	0f 85 07 01 00
	00		 jne	 $LN70@GetSkillNu

; 45   : 	{
; 46   : 		if ( Index >= 0 && Index < 16 )

  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _Index$[ebp]
  00015	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00018	77 05		 ja	 SHORT $LN69@GetSkillNu

; 47   : 		{
; 48   : 			skillnumber = Index + 1;

  0001a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN69@GetSkillNu:

; 49   : 		}
; 50   : 		else if ( Index == 16 )

  0001f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00022	75 05		 jne	 SHORT $LN67@GetSkillNu

; 51   : 		{
; 52   : 			skillnumber = 38;

  00024	8d 41 16	 lea	 eax, DWORD PTR [ecx+22]

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN67@GetSkillNu:

; 53   : 		}
; 54   : 		else if ( Index == 17 )

  00029	83 f9 11	 cmp	 ecx, 17			; 00000011H
  0002c	75 05		 jne	 SHORT $LN65@GetSkillNu

; 55   : 		{
; 56   : 			skillnumber = 39;

  0002e	8d 41 16	 lea	 eax, DWORD PTR [ecx+22]

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN65@GetSkillNu:

; 57   : 		}
; 58   : 		else if ( Index == 18 )

  00033	83 f9 12	 cmp	 ecx, 18			; 00000012H
  00036	75 05		 jne	 SHORT $LN63@GetSkillNu

; 59   : 		{
; 60   : 			skillnumber = 40;

  00038	8d 41 16	 lea	 eax, DWORD PTR [ecx+22]

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN63@GetSkillNu:

; 61   : 		}
; 62   : 		else if ( Index == 19 )

  0003d	83 f9 13	 cmp	 ecx, 19			; 00000013H
  00040	75 07		 jne	 SHORT $LN61@GetSkillNu

; 63   : 		{
; 64   : 			skillnumber = 215;

  00042	b8 d7 00 00 00	 mov	 eax, 215		; 000000d7H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN61@GetSkillNu:

; 65   : 		}
; 66   : 		else if ( Index == 20 )

  00049	83 f9 14	 cmp	 ecx, 20			; 00000014H
  0004c	75 07		 jne	 SHORT $LN59@GetSkillNu

; 67   : 		{
; 68   : 			skillnumber = 214;

  0004e	b8 d6 00 00 00	 mov	 eax, 214		; 000000d6H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN59@GetSkillNu:

; 69   : 		}
; 70   : 		else if ( Index == 21 )

  00055	83 f9 15	 cmp	 ecx, 21			; 00000015H
  00058	75 07		 jne	 SHORT $LN57@GetSkillNu

; 71   : 		{
; 72   : 			skillnumber = 230; //lightning shock

  0005a	b8 e6 00 00 00	 mov	 eax, 230		; 000000e6H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN57@GetSkillNu:

; 73   : 		}
; 74   : 		else if ( Index == 22 )

  00061	83 f9 16	 cmp	 ecx, 22			; 00000016H
  00064	75 07		 jne	 SHORT $LN55@GetSkillNu

; 75   : 		{
; 76   : 			skillnumber = 217;

  00066	b8 d9 00 00 00	 mov	 eax, 217		; 000000d9H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN55@GetSkillNu:

; 77   : 		}
; 78   : 		else if ( Index == 23 )

  0006d	83 f9 17	 cmp	 ecx, 23			; 00000017H
  00070	75 07		 jne	 SHORT $LN53@GetSkillNu

; 79   : 		{
; 80   : 			skillnumber = 218; //berserker

  00072	b8 da 00 00 00	 mov	 eax, 218		; 000000daH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN53@GetSkillNu:

; 81   : 		}
; 82   : 		else if ( Index == 24 )

  00079	83 f9 18	 cmp	 ecx, 24			; 00000018H
  0007c	75 07		 jne	 SHORT $LN51@GetSkillNu

; 83   : 		{
; 84   : 			skillnumber = 219;

  0007e	b8 db 00 00 00	 mov	 eax, 219		; 000000dbH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN51@GetSkillNu:

; 85   : 		}
; 86   : 		else if ( Index == 25 )

  00085	83 f9 19	 cmp	 ecx, 25			; 00000019H
  00088	75 07		 jne	 SHORT $LN49@GetSkillNu

; 87   : 		{
; 88   : 			skillnumber = 220;

  0008a	b8 dc 00 00 00	 mov	 eax, 220		; 000000dcH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN49@GetSkillNu:

; 89   : 		}
; 90   : 		else if ( Index == 26 )

  00091	83 f9 1a	 cmp	 ecx, 26			; 0000001aH
  00094	75 07		 jne	 SHORT $LN47@GetSkillNu

; 91   : 		{
; 92   : 			skillnumber = 221;

  00096	b8 dd 00 00 00	 mov	 eax, 221		; 000000ddH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN47@GetSkillNu:

; 93   : 		}
; 94   : 		else if ( Index == 27 )

  0009d	83 f9 1b	 cmp	 ecx, 27			; 0000001bH
  000a0	75 07		 jne	 SHORT $LN45@GetSkillNu

; 95   : 		{
; 96   : 			skillnumber = 222;

  000a2	b8 de 00 00 00	 mov	 eax, 222		; 000000deH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
$LN45@GetSkillNu:

; 97   : 		}
; 98   : 		//s4
; 99   : 		else if ( Index == 28 )

  000a9	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  000ac	75 07		 jne	 SHORT $LN43@GetSkillNu

; 100  : 		{
; 101  : 			skillnumber = 233;

  000ae	b8 e9 00 00 00	 mov	 eax, 233		; 000000e9H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
$LN43@GetSkillNu:

; 102  : 		}
; 103  : 		else if ( Index == 29 )

  000b5	83 f9 1d	 cmp	 ecx, 29			; 0000001dH
  000b8	75 07		 jne	 SHORT $LN41@GetSkillNu

; 104  : 		{
; 105  : 			skillnumber = 237;

  000ba	b8 ed 00 00 00	 mov	 eax, 237		; 000000edH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
$LN41@GetSkillNu:

; 106  : 		}
; 107  : 		else if( Index == 30 )

  000c1	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  000c4	75 07		 jne	 SHORT $LN39@GetSkillNu

; 108  : 		{
; 109  : 			skillnumber = 262;

  000c6	b8 06 01 00 00	 mov	 eax, 262		; 00000106H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
$LN39@GetSkillNu:

; 110  : 		}
; 111  : 		else if( Index == 31 )

  000cd	83 f9 1f	 cmp	 ecx, 31			; 0000001fH
  000d0	75 07		 jne	 SHORT $LN37@GetSkillNu

; 112  : 		{
; 113  : 			skillnumber = 263;

  000d2	b8 07 01 00 00	 mov	 eax, 263		; 00000107H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN37@GetSkillNu:

; 114  : 		}
; 115  : 		else if( Index == 32 )

  000d9	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000dc	75 07		 jne	 SHORT $LN35@GetSkillNu

; 116  : 		{
; 117  : 			skillnumber = 264;

  000de	b8 08 01 00 00	 mov	 eax, 264		; 00000108H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
$LN35@GetSkillNu:

; 118  : 		}
; 119  : 		else if( Index == 33 )

  000e5	83 f9 21	 cmp	 ecx, 33			; 00000021H
  000e8	75 07		 jne	 SHORT $LN33@GetSkillNu

; 120  : 		{
; 121  : 			skillnumber = 265;

  000ea	b8 09 01 00 00	 mov	 eax, 265		; 00000109H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
$LN33@GetSkillNu:

; 122  : 		}
; 123  : 		else if( Index == 34 )

  000f1	83 f9 22	 cmp	 ecx, 34			; 00000022H
  000f4	75 07		 jne	 SHORT $LN31@GetSkillNu

; 124  : 		{
; 125  : 			skillnumber = 266;

  000f6	b8 0a 01 00 00	 mov	 eax, 266		; 0000010aH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN31@GetSkillNu:

; 126  : 		}
; 127  : 		else if( Index == 35 )

  000fd	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00100	75 07		 jne	 SHORT $LN29@GetSkillNu

; 128  : 		{
; 129  : 			skillnumber = 267;

  00102	b8 0b 01 00 00	 mov	 eax, 267		; 0000010bH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
$LN29@GetSkillNu:

; 130  : 		}
; 131  : 		else if( Index == 36 )

  00109	83 f9 24	 cmp	 ecx, 36			; 00000024H
  0010c	0f 85 c6 00 00
	00		 jne	 $LN23@GetSkillNu

; 132  : 		{
; 133  : 			skillnumber = 268;

  00112	b8 0c 01 00 00	 mov	 eax, 268		; 0000010cH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
$LN70@GetSkillNu:

; 134  : 		}
; 135  : 	}
; 136  : 	else if ( type == 12 )

  00119	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  0011c	0f 85 b6 00 00
	00		 jne	 $LN23@GetSkillNu

; 137  : 	{
; 138  : 		switch ( Index )

  00122	8b 4d 0c	 mov	 ecx, DWORD PTR _Index$[ebp]
  00125	83 c1 f9	 add	 ecx, -7			; fffffff9H
  00128	83 f9 29	 cmp	 ecx, 41			; 00000029H
  0012b	0f 87 a7 00 00
	00		 ja	 $LN23@GetSkillNu
  00131	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN73@GetSkillNu[ecx]
  00138	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN74@GetSkillNu[ecx*4]
$LN22@GetSkillNu:

; 139  : 		{
; 140  : 			case 7:		skillnumber = 41;	break;

  0013f	b8 29 00 00 00	 mov	 eax, 41			; 00000029H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
$LN21@GetSkillNu:

; 141  : 			case 8:		skillnumber = 26;	break;

  00146	b8 1a 00 00 00	 mov	 eax, 26			; 0000001aH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
$LN20@GetSkillNu:

; 142  : 			case 9:		skillnumber = 27;	break;

  0014d	b8 1b 00 00 00	 mov	 eax, 27			; 0000001bH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
$LN19@GetSkillNu:

; 143  : 			case 10:	skillnumber = 28;	break;

  00154	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
$LN18@GetSkillNu:

; 144  : 			case 12:	skillnumber = 42;	break;

  0015b	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
$LN17@GetSkillNu:

; 145  : 			case 13:	skillnumber = 47;	break;

  00162	b8 2f 00 00 00	 mov	 eax, 47			; 0000002fH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
$LN16@GetSkillNu:

; 146  : 			case 14:	skillnumber = 48;	break;

  00169	b8 30 00 00 00	 mov	 eax, 48			; 00000030H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
$LN15@GetSkillNu:

; 147  : 			case 19:	skillnumber = 43;	break;

  00170	b8 2b 00 00 00	 mov	 eax, 43			; 0000002bH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
$LN14@GetSkillNu:

; 148  : 			case 17:	skillnumber = 52;	break;

  00177	b8 34 00 00 00	 mov	 eax, 52			; 00000034H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
$LN13@GetSkillNu:

; 149  : 			case 18:	skillnumber = 51;	break;

  0017e	b8 33 00 00 00	 mov	 eax, 51			; 00000033H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
$LN12@GetSkillNu:

; 150  : 			case 16:	skillnumber = 55;	break;

  00185	b8 37 00 00 00	 mov	 eax, 55			; 00000037H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
$LN11@GetSkillNu:

; 151  : 			case 21:	skillnumber = 61;	break;

  0018c	b8 3d 00 00 00	 mov	 eax, 61			; 0000003dH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
$LN10@GetSkillNu:

; 152  : 			case 22:	skillnumber = 63;	break;

  00193	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
$LN9@GetSkillNu:

; 153  : 			case 23:	skillnumber = 64;	break;

  0019a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  0019f	5d		 pop	 ebp
  001a0	c3		 ret	 0
$LN8@GetSkillNu:

; 154  : 			case 24:	skillnumber = 65;	break;

  001a1	b8 41 00 00 00	 mov	 eax, 65			; 00000041H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
$LN7@GetSkillNu:

; 155  : 			case 11:	skillnumber = level + 30;	break;

  001a8	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
  001ab	83 c0 1e	 add	 eax, 30			; 0000001eH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001ae	5d		 pop	 ebp
  001af	c3		 ret	 0
$LN6@GetSkillNu:

; 156  : 			case 35:	skillnumber = 78;	break;

  001b0	b8 4e 00 00 00	 mov	 eax, 78			; 0000004eH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
$LN5@GetSkillNu:

; 157  : 			//
; 158  : 			case 44: skillnumber = 232; break;

  001b7	b8 e8 00 00 00	 mov	 eax, 232		; 000000e8H

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
$LN4@GetSkillNu:

; 159  : 			case 45: skillnumber = 235; break;

  001be	b8 eb 00 00 00	 mov	 eax, 235		; 000000ebH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001c3	5d		 pop	 ebp
  001c4	c3		 ret	 0
$LN3@GetSkillNu:

; 160  : 			case 46: skillnumber = 234; break;

  001c5	b8 ea 00 00 00	 mov	 eax, 234		; 000000eaH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
$LN2@GetSkillNu:

; 161  : 			case 47: skillnumber = 236; break;

  001cc	b8 ec 00 00 00	 mov	 eax, 236		; 000000ecH

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
$LN1@GetSkillNu:

; 162  : 			case 48: skillnumber = 238; break;

  001d3	b8 ee 00 00 00	 mov	 eax, 238		; 000000eeH
$LN23@GetSkillNu:

; 163  : 		}
; 164  : 	}
; 165  : 		
; 166  : 	return skillnumber;
; 167  : }

  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
  001da	8b ff		 npad	 2
$LN74@GetSkillNu:
  001dc	00 00 00 00	 DD	 $LN22@GetSkillNu
  001e0	00 00 00 00	 DD	 $LN21@GetSkillNu
  001e4	00 00 00 00	 DD	 $LN20@GetSkillNu
  001e8	00 00 00 00	 DD	 $LN19@GetSkillNu
  001ec	00 00 00 00	 DD	 $LN7@GetSkillNu
  001f0	00 00 00 00	 DD	 $LN18@GetSkillNu
  001f4	00 00 00 00	 DD	 $LN17@GetSkillNu
  001f8	00 00 00 00	 DD	 $LN16@GetSkillNu
  001fc	00 00 00 00	 DD	 $LN12@GetSkillNu
  00200	00 00 00 00	 DD	 $LN14@GetSkillNu
  00204	00 00 00 00	 DD	 $LN13@GetSkillNu
  00208	00 00 00 00	 DD	 $LN15@GetSkillNu
  0020c	00 00 00 00	 DD	 $LN11@GetSkillNu
  00210	00 00 00 00	 DD	 $LN10@GetSkillNu
  00214	00 00 00 00	 DD	 $LN9@GetSkillNu
  00218	00 00 00 00	 DD	 $LN8@GetSkillNu
  0021c	00 00 00 00	 DD	 $LN6@GetSkillNu
  00220	00 00 00 00	 DD	 $LN5@GetSkillNu
  00224	00 00 00 00	 DD	 $LN4@GetSkillNu
  00228	00 00 00 00	 DD	 $LN3@GetSkillNu
  0022c	00 00 00 00	 DD	 $LN2@GetSkillNu
  00230	00 00 00 00	 DD	 $LN1@GetSkillNu
  00234	00 00 00 00	 DD	 $LN23@GetSkillNu
$LN73@GetSkillNu:
  00238	00		 DB	 0
  00239	01		 DB	 1
  0023a	02		 DB	 2
  0023b	03		 DB	 3
  0023c	04		 DB	 4
  0023d	05		 DB	 5
  0023e	06		 DB	 6
  0023f	07		 DB	 7
  00240	16		 DB	 22			; 00000016H
  00241	08		 DB	 8
  00242	09		 DB	 9
  00243	0a		 DB	 10			; 0000000aH
  00244	0b		 DB	 11			; 0000000bH
  00245	16		 DB	 22			; 00000016H
  00246	0c		 DB	 12			; 0000000cH
  00247	0d		 DB	 13			; 0000000dH
  00248	0e		 DB	 14			; 0000000eH
  00249	0f		 DB	 15			; 0000000fH
  0024a	16		 DB	 22			; 00000016H
  0024b	16		 DB	 22			; 00000016H
  0024c	16		 DB	 22			; 00000016H
  0024d	16		 DB	 22			; 00000016H
  0024e	16		 DB	 22			; 00000016H
  0024f	16		 DB	 22			; 00000016H
  00250	16		 DB	 22			; 00000016H
  00251	16		 DB	 22			; 00000016H
  00252	16		 DB	 22			; 00000016H
  00253	16		 DB	 22			; 00000016H
  00254	10		 DB	 16			; 00000010H
  00255	16		 DB	 22			; 00000016H
  00256	16		 DB	 22			; 00000016H
  00257	16		 DB	 22			; 00000016H
  00258	16		 DB	 22			; 00000016H
  00259	16		 DB	 22			; 00000016H
  0025a	16		 DB	 22			; 00000016H
  0025b	16		 DB	 22			; 00000016H
  0025c	16		 DB	 22			; 00000016H
  0025d	11		 DB	 17			; 00000011H
  0025e	12		 DB	 18			; 00000012H
  0025f	13		 DB	 19			; 00000013H
  00260	14		 DB	 20			; 00000014H
  00261	15		 DB	 21			; 00000015H
?GetSkillNumberInex@@YAHHHH@Z ENDP			; GetSkillNumberInex
_TEXT	ENDS
PUBLIC	??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@		; `string'
PUBLIC	?Set@CMagicInf@@QAEHEEE@Z			; CMagicInf::Set
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@ DB 'MagicInf.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Set@CMagicInf@@QAEHEEE@Z
_TEXT	SEGMENT
_aType$ = 8						; size = 1
_aIndex$ = 12						; size = 1
_aLevel$ = 16						; size = 1
?Set@CMagicInf@@QAEHEEE@Z PROC				; CMagicInf::Set, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 171  : 	if ( this->m_Skill != 0xFF )

  00006	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  0000d	74 2b		 je	 SHORT $LN2@Set

; 172  : 	{
; 173  : 		LogAdd(lMsg.Get(MSGGET(1, 203)), __FILE__, __LINE__);

  0000f	68 ad 00 00 00	 push	 173			; 000000adH
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
  00019	68 cb 01 00 00	 push	 459			; 000001cbH
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00023	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 174  : 		return -1;

  00032	83 c8 ff	 or	 eax, -1
  00035	5e		 pop	 esi

; 190  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Set:

; 175  : 	}
; 176  : 
; 177  : 	this->m_Level = aLevel;

  0003a	8a 45 10	 mov	 al, BYTE PTR _aLevel$[ebp]

; 178  : 	this->m_Skill = GetSkillNumberInex(aType, aIndex, aLevel);

  0003d	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aIndex$[ebp]
  00041	0f b6 55 08	 movzx	 edx, BYTE PTR _aType$[ebp]
  00045	88 46 04	 mov	 BYTE PTR [esi+4], al
  00048	0f b6 c0	 movzx	 eax, al
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?GetSkillNumberInex@@YAHHHH@Z ; GetSkillNumberInex
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 179  : 	
; 180  : 	if ( this->m_Skill < 0 )

  00059	85 c0		 test	 eax, eax
  0005b	79 07		 jns	 SHORT $LN1@Set

; 181  : 	{
; 182  : 		this->m_Skill = 1;

  0005d	c7 46 08 01 00
	00 00		 mov	 DWORD PTR [esi+8], 1
$LN1@Set:

; 183  : 	}
; 184  : 
; 185  : 	int damage = MagicDamageC.SkillGet(this->m_Skill);

  00064	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00067	50		 push	 eax
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0006d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00072	8b c8		 mov	 ecx, eax

; 186  : 	this->m_DamageMin = damage;
; 187  : 	this->m_DamageMax = damage + damage/2;

  00074	99		 cdq
  00075	2b c2		 sub	 eax, edx
  00077	d1 f8		 sar	 eax, 1
  00079	03 c1		 add	 eax, ecx
  0007b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 188  : 
; 189  : 	return this->m_Skill;

  0007e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00081	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00084	5e		 pop	 esi

; 190  : }

  00085	5d		 pop	 ebp
  00086	c2 0c 00	 ret	 12			; 0000000cH
?Set@CMagicInf@@QAEHEEE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
PUBLIC	?GetDamage@CMagicInf@@QAEHXZ			; CMagicInf::GetDamage
EXTRN	_rand:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetDamage@CMagicInf@@QAEHXZ DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN6@GetDamage
	DD	FLAT:$LN7@GetDamage
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetDamage@CMagicInf@@QAEHXZ
_TEXT	SEGMENT
_subd$ = -32						; size = 4
_damage$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?GetDamage@CMagicInf@@QAEHXZ PROC			; CMagicInf::GetDamage, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetDamage@CMagicInf@@QAEHXZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	8b f1		 mov	 esi, ecx

; 194  : 	int damage = 0;

  00035	33 c0		 xor	 eax, eax
  00037	89 45 e4	 mov	 DWORD PTR _damage$[ebp], eax

; 195  : 
; 196  : 	if ( this->m_Skill == 0xFF )

  0003a	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  00041	75 37		 jne	 SHORT $LN2@GetDamage

; 197  : 	{
; 198  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00043	68 c6 00 00 00	 push	 198			; 000000c6H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
  0004d	68 ca 01 00 00	 push	 458			; 000001caH
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00057	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0005c	50		 push	 eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 199  : 		return 0;

  00066	33 c0		 xor	 eax, eax

; 214  : }

  00068	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN2@GetDamage:

; 200  : 	}
; 201  : 
; 202  : 	int subd = this->m_DamageMax - this->m_DamageMin;

  0007a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007d	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00080	89 4d e0	 mov	 DWORD PTR _subd$[ebp], ecx

; 203  : 
; 204  : 	__try

  00083	89 45 fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], eax

; 205  : 	{
; 206  : 		damage = this->m_DamageMin + (rand() % 1);

  00086	e8 00 00 00 00	 call	 _rand
  0008b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0008e	89 55 e4	 mov	 DWORD PTR _damage$[ebp], edx

; 207  : 	}

  00091	eb 2c		 jmp	 SHORT $LN11@GetDamage
$LN6@GetDamage:
$LN12@GetDamage:

; 208  : 	__except(subd=1,1)

  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	89 45 e0	 mov	 DWORD PTR _subd$[ebp], eax
$LN10@GetDamage:
$LN8@GetDamage:
  0009b	c3		 ret	 0
$LN7@GetDamage:
  0009c	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 209  : 	{
; 210  : 		LogAdd(lMsg.Get(MSGGET(0, 111)), __FILE__, __LINE__);

  0009f	68 d2 00 00 00	 push	 210			; 000000d2H
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
  000a9	6a 6f		 push	 111			; 0000006fH
  000ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000b0	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000b5	50		 push	 eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@GetDamage:

; 211  : 	}

  000bf	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 212  : 
; 213  : 	return damage;

  000c6	8b 45 e4	 mov	 eax, DWORD PTR _damage$[ebp]

; 214  : }

  000c9	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?GetDamage@CMagicInf@@QAEHXZ ENDP			; CMagicInf::GetDamage
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?Set@CMagicInf@@QAEHHE@Z			; CMagicInf::Set
EXTRN	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
EXTRN	?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::GetSkillReqBrandOfSkill
EXTRN	?GetSkillUseType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillUseType
EXTRN	?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckRequireStatus
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	__fltused:DWORD
EXTRN	__ftol2:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Set@CMagicInf@@QAEHHE@Z
_TEXT	SEGMENT
_aSkill$ = 8						; size = 4
_fValue$210318 = 12					; size = 4
_aLevel$ = 12						; size = 1
?Set@CMagicInf@@QAEHHE@Z PROC				; CMagicInf::Set, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 219  : 	int damage = 1;
; 220  : 	// ----
; 221  : 	if( this->m_Skill != 0xFF )

  00006	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  0000d	74 08		 je	 SHORT $LN11@Set@2

; 222  : 	{
; 223  : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1
  00012	5e		 pop	 esi

; 276  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN11@Set@2:

; 224  : 	}
; 225  : 	// ----
; 226  : 	this->m_Skill = aSkill;
; 227  : 	this->m_Level = aLevel;

  00017	8a 45 0c	 mov	 al, BYTE PTR _aLevel$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _aSkill$[ebp]

; 228  : 	// ----
; 229  : 	if( g_MasterSkillSystem.CheckRequireStatus(aSkill) )

  0001e	57		 push	 edi
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00024	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00027	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002a	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus

; 230  : 	{
; 231  : 		if( MagicDamageC.GetSkillUseType(aSkill) == 4 )

  0002f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00034	85 c0		 test	 eax, eax
  00036	74 72		 je	 SHORT $LN10@Set@2
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  0003e	83 f8 04	 cmp	 eax, 4
  00041	75 2d		 jne	 SHORT $LN9@Set@2

; 232  : 		{
; 233  : 			int nBrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(aSkill);

  00043	57		 push	 edi
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00049	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill

; 234  : 			// ----
; 235  : 			if( nBrandSkill > 0 && nBrandSkill != aSkill )

  0004e	85 c0		 test	 eax, eax
  00050	7e 0c		 jle	 SHORT $LN8@Set@2
  00052	3b c7		 cmp	 eax, edi
  00054	74 08		 je	 SHORT $LN8@Set@2

; 236  : 			{
; 237  : 				damage = MagicDamageC.SkillGet(nBrandSkill);

  00056	50		 push	 eax
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC

; 238  : 			}
; 239  : 			else

  0005c	eb 50		 jmp	 SHORT $LN20@Set@2
$LN8@Set@2:

; 240  : 			{
; 241  : 				float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  0005e	0f b6 4e 04	 movzx	 ecx, BYTE PTR [esi+4]
  00062	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00065	51		 push	 ecx
  00066	52		 push	 edx

; 242  : 				// ----
; 243  : 				if( fValue == 0.0f )
; 244  : 				{
; 245  : 					damage = 1;
; 246  : 				}
; 247  : 				else

  00067	eb 10		 jmp	 SHORT $LN22@Set@2
$LN6@Set@2:

; 248  : 				{
; 249  : 					damage = (INT64)fValue;

  00069	e8 00 00 00 00	 call	 __ftol2

; 250  : 				}
; 251  : 			}
; 252  : 		}
; 253  : 		else

  0006e	eb 43		 jmp	 SHORT $LN21@Set@2
$LN9@Set@2:

; 254  : 		{
; 255  : 			float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  00070	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	50		 push	 eax
  00078	51		 push	 ecx
$LN22@Set@2:
  00079	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0007e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00083	50		 push	 eax
  00084	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00089	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0008e	d9 5d 0c	 fstp	 DWORD PTR _fValue$210318[ebp]

; 256  : 			// ----
; 257  : 			if( fValue == 0.0f )

  00091	d9 45 0c	 fld	 DWORD PTR _fValue$210318[ebp]
  00094	d9 c0		 fld	 ST(0)
  00096	d9 ee		 fldz
  00098	da e9		 fucompp
  0009a	df e0		 fnstsw	 ax
  0009c	f6 c4 44	 test	 ah, 68			; 00000044H
  0009f	7a c8		 jp	 SHORT $LN6@Set@2
  000a1	dd d8		 fstp	 ST(0)

; 258  : 			{
; 259  : 				damage = 1;

  000a3	b9 01 00 00 00	 mov	 ecx, 1

; 260  : 			}
; 261  : 			else

  000a8	eb 0b		 jmp	 SHORT $LN1@Set@2
$LN10@Set@2:

; 262  : 			{
; 263  : 				damage = (INT64)fValue;
; 264  : 			}
; 265  : 		}
; 266  : 	}
; 267  : 	else
; 268  : 	{
; 269  : 		damage = MagicDamageC.SkillGet(this->m_Skill);

  000aa	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000ad	52		 push	 edx
$LN20@Set@2:
  000ae	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
$LN21@Set@2:
  000b3	8b c8		 mov	 ecx, eax
$LN1@Set@2:

; 270  : 	}
; 271  : 	// ----
; 272  : 	this->m_DamageMin = damage;
; 273  : 	this->m_DamageMax = damage + damage / 2;

  000b5	8b c1		 mov	 eax, ecx
  000b7	99		 cdq
  000b8	2b c2		 sub	 eax, edx
  000ba	d1 f8		 sar	 eax, 1
  000bc	03 c1		 add	 eax, ecx
  000be	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 274  : 	// ----
; 275  : 	return this->m_Skill;

  000c1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c4	5f		 pop	 edi
  000c5	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  000c8	5e		 pop	 esi

; 276  : }

  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
?Set@CMagicInf@@QAEHHE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
PUBLIC	??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@ ; `string'
PUBLIC	?UpdateML@CMagicInf@@QAEHKE@Z			; CMagicInf::UpdateML
;	COMDAT ??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@
CONST	SEGMENT
??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@ DB '['
	DB	'MasterSkill] [ERROR!!] Fail - Update Master Skill:%d, Level:%'
	DB	'd', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?UpdateML@CMagicInf@@QAEHKE@Z
_TEXT	SEGMENT
_aSkill$ = 8						; size = 4
_fValue$210339 = 12					; size = 4
_aLevel$ = 12						; size = 1
?UpdateML@CMagicInf@@QAEHKE@Z PROC			; CMagicInf::UpdateML, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 281  : 	int damage = 1;
; 282  : 	// ----
; 283  : 	if( this->m_Skill != 0xFF )

  00006	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  0000d	0f 84 a3 00 00
	00		 je	 $LN9@UpdateML

; 284  : 	{
; 285  : 		this->m_Skill = aSkill;

  00013	8b 45 08	 mov	 eax, DWORD PTR _aSkill$[ebp]

; 286  : 		this->m_Level = aLevel;

  00016	8a 4d 0c	 mov	 cl, BYTE PTR _aLevel$[ebp]
  00019	88 4e 04	 mov	 BYTE PTR [esi+4], cl

; 287  : 		// ----
; 288  : 		if( MagicDamageC.GetSkillUseType(this->m_Skill) == 4 )

  0001c	50		 push	 eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00022	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00025	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType

; 289  : 		{
; 290  : 			int nBrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(this->m_Skill);

  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0002f	83 f8 04	 cmp	 eax, 4
  00032	75 2f		 jne	 SHORT $LN8@UpdateML
  00034	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill

; 291  : 			// ----
; 292  : 			if( nBrandSkill > 0 && nBrandSkill != this->m_Skill )

  0003d	85 c0		 test	 eax, eax
  0003f	7e 12		 jle	 SHORT $LN7@UpdateML
  00041	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00044	74 0d		 je	 SHORT $LN7@UpdateML

; 293  : 			{
; 294  : 				damage = MagicDamageC.SkillGet(nBrandSkill);

  00046	50		 push	 eax
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0004c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet

; 295  : 			}
; 296  : 			else

  00051	eb 4a		 jmp	 SHORT $LN18@UpdateML
$LN7@UpdateML:

; 297  : 			{
; 298  : 				float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  00053	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00057	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005a	50		 push	 eax
  0005b	51		 push	 ecx
  0005c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC

; 299  : 				// ----
; 300  : 				if( fValue == 0.0f )
; 301  : 				{
; 302  : 					damage = 1;
; 303  : 				}
; 304  : 				else
; 305  : 				{
; 306  : 					damage = (INT64)fValue;
; 307  : 				}
; 308  : 			}
; 309  : 		}
; 310  : 		else

  00061	eb 09		 jmp	 SHORT $LN21@UpdateML
$LN8@UpdateML:

; 311  : 		{
; 312  : 			float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill), this->m_Level);

  00063	0f b6 56 04	 movzx	 edx, BYTE PTR [esi+4]
  00067	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006a	52		 push	 edx
  0006b	50		 push	 eax
$LN21@UpdateML:
  0006c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00071	50		 push	 eax
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00077	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0007c	d9 5d 0c	 fstp	 DWORD PTR _fValue$210339[ebp]

; 313  : 			// ----
; 314  : 			if( fValue == 0.0f )

  0007f	d9 45 0c	 fld	 DWORD PTR _fValue$210339[ebp]
  00082	d9 c0		 fld	 ST(0)
  00084	d9 ee		 fldz
  00086	da e9		 fucompp
  00088	df e0		 fnstsw	 ax
  0008a	f6 c4 44	 test	 ah, 68			; 00000044H
  0008d	7a 09		 jp	 SHORT $LN2@UpdateML

; 315  : 			{
; 316  : 				damage = 1;

  0008f	b9 01 00 00 00	 mov	 ecx, 1
  00094	dd d8		 fstp	 ST(0)

; 317  : 			}
; 318  : 			else

  00096	eb 07		 jmp	 SHORT $LN1@UpdateML
$LN2@UpdateML:

; 319  : 			{
; 320  : 				damage = (INT64)fValue;

  00098	e8 00 00 00 00	 call	 __ftol2
$LN18@UpdateML:
  0009d	8b c8		 mov	 ecx, eax
$LN1@UpdateML:

; 321  : 			}
; 322  : 		}
; 323  : 		// ----
; 324  : 		this->m_DamageMin = damage;
; 325  : 		this->m_DamageMax = damage + damage / 2;

  0009f	8b c1		 mov	 eax, ecx
  000a1	99		 cdq
  000a2	2b c2		 sub	 eax, edx
  000a4	d1 f8		 sar	 eax, 1
  000a6	03 c1		 add	 eax, ecx
  000a8	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 326  : 		// ----
; 327  : 		return this->m_Skill;

  000ab	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ae	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  000b1	5e		 pop	 esi

; 332  : }

  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN9@UpdateML:

; 328  : 	}
; 329  : 	// ----
; 330  : 	LogAdd("[MasterSkill] [ERROR!!] Fail - Update Master Skill:%d, Level:%d", aSkill, aLevel);

  000b6	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aLevel$[ebp]
  000ba	8b 55 08	 mov	 edx, DWORD PTR _aSkill$[ebp]
  000bd	51		 push	 ecx
  000be	52		 push	 edx
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 331  : 	return -1;

  000cd	83 c8 ff	 or	 eax, -1
  000d0	5e		 pop	 esi

; 332  : }

  000d1	5d		 pop	 ebp
  000d2	c2 08 00	 ret	 8
?UpdateML@CMagicInf@@QAEHKE@Z ENDP			; CMagicInf::UpdateML
_TEXT	ENDS
PUBLIC	?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z	; MagicByteConvert
; Function compile flags: /Ogtp
;	COMDAT ?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_Magici$ = 12						; size = 4
tv77 = 16						; size = 4
_maxmagic$ = 16						; size = 4
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z PROC		; MagicByteConvert, COMDAT

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 
; 339  : 	int loc2;
; 340  : 	int loc3;
; 341  : 	int loc4;
; 342  : 
; 343  : 	for (int index = 0;index < maxmagic;index++)

  00003	8b 45 10	 mov	 eax, DWORD PTR _maxmagic$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	0f 8e 7f 00 00
	00		 jle	 $LN6@MagicByteC

; 337  : 	int n=0; //loc1

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _buf$[ebp]
  00013	57		 push	 edi
  00014	8b 7d 0c	 mov	 edi, DWORD PTR _Magici$[ebp]
  00017	83 c7 08	 add	 edi, 8
  0001a	89 45 10	 mov	 DWORD PTR tv77[ebp], eax
  0001d	8d 49 00	 npad	 3
$LL14@MagicByteC:

; 344  : 	{
; 345  : 		loc3 = Magici[index].m_Skill;

  00020	8b 17		 mov	 edx, DWORD PTR [edi]

; 346  : 		loc2 = 0;

  00022	33 c0		 xor	 eax, eax

; 347  : 		loc4 = 0;

  00024	33 c9		 xor	 ecx, ecx

; 348  : 
; 349  : 		if((int)Magici[index].m_Skill > 765)

  00026	81 fa fd 02 00
	00		 cmp	 edx, 765		; 000002fdH
  0002c	7e 0d		 jle	 SHORT $LN5@MagicByteC

; 350  : 		{
; 351  : 			loc3 = 0xFF;
; 352  : 			loc2 = 3;

  0002e	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]

; 353  : 			loc4 = Magici[index].m_Skill - (loc3 * 3);

  00031	8b ca		 mov	 ecx, edx
  00033	81 e9 fd 02 00
	00		 sub	 ecx, 765		; 000002fdH
  00039	eb 2a		 jmp	 SHORT $LN15@MagicByteC
$LN5@MagicByteC:

; 354  : 		}
; 355  : 		else if((int)Magici[index].m_Skill > 510)

  0003b	8b da		 mov	 ebx, edx
  0003d	81 fb fe 01 00
	00		 cmp	 ebx, 510		; 000001feH
  00043	7e 0d		 jle	 SHORT $LN3@MagicByteC

; 356  : 		{
; 357  : 			loc3 = 0xFF;
; 358  : 			loc2 = 2;

  00045	b8 02 00 00 00	 mov	 eax, 2

; 359  : 			loc4 = Magici[index].m_Skill - (loc3 << 1);

  0004a	8d 8b 02 fe ff
	ff		 lea	 ecx, DWORD PTR [ebx-510]
  00050	eb 13		 jmp	 SHORT $LN15@MagicByteC
$LN3@MagicByteC:

; 360  : 		}
; 361  : 		else if((int)Magici[index].m_Skill > 255)

  00052	81 fb ff 00 00
	00		 cmp	 ebx, 255		; 000000ffH
  00058	7e 10		 jle	 SHORT $LN13@MagicByteC

; 364  : 			loc2 = 1;

  0005a	b8 01 00 00 00	 mov	 eax, 1

; 365  : 			loc4 = Magici[index].m_Skill - loc3;

  0005f	8d 8b 01 ff ff
	ff		 lea	 ecx, DWORD PTR [ebx-255]
$LN15@MagicByteC:

; 362  : 		{
; 363  : 			loc3 = 0xFF;

  00065	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
$LN13@MagicByteC:

; 366  : 		}
; 367  : 
; 368  : 		buf[n] = loc3; //Skill

  0006a	88 16		 mov	 BYTE PTR [esi], dl

; 369  : 		n++;
; 370  : 
; 371  : 		buf[n] = Magici[index].m_Level << 3;

  0006c	8a 57 fc	 mov	 dl, BYTE PTR [edi-4]
  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl

; 372  : 		buf[n] |= loc2 & 0x07; //Season3 add-on

  00075	24 07		 and	 al, 7
  00077	0a d0		 or	 dl, al
  00079	88 56 01	 mov	 BYTE PTR [esi+1], dl

; 373  : 		n++;
; 374  : 
; 375  : 		buf[n] = loc4; //Skill :|

  0007c	88 4e 02	 mov	 BYTE PTR [esi+2], cl

; 376  : 		n++;

  0007f	83 c6 03	 add	 esi, 3
  00082	83 c7 18	 add	 edi, 24			; 00000018H
  00085	ff 4d 10	 dec	 DWORD PTR tv77[ebp]
  00088	75 96		 jne	 SHORT $LL14@MagicByteC
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
$LN6@MagicByteC:

; 377  : 	}
; 378  : }

  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z ENDP		; MagicByteConvert
_TEXT	ENDS
PUBLIC	??0CMagicInf@@QAE@XZ				; CMagicInf::CMagicInf
; Function compile flags: /Ogtp
;	COMDAT ??0CMagicInf@@QAE@XZ
_TEXT	SEGMENT
??0CMagicInf@@QAE@XZ PROC				; CMagicInf::CMagicInf, COMDAT
; _this$ = ecx

; 14   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMagicInf@@6B@

; 15   : 	this->Clear();

  00006	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear

; 16   : }

  0000b	8b c1		 mov	 eax, ecx
  0000d	c3		 ret	 0
??0CMagicInf@@QAE@XZ ENDP				; CMagicInf::CMagicInf
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMagicInf@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMagicInf@@UAEPAXI@Z PROC				; CMagicInf::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMagicInf@@UAE@XZ	; CMagicInf::~CMagicInf
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMagicInf@@UAEPAXI@Z ENDP				; CMagicInf::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__EDefMagicInf@@YAXXZ
text$yc	SEGMENT
??__EDefMagicInf@@YAXXZ PROC				; `dynamic initializer for 'DefMagicInf'', COMDAT

; 11   : CMagicInf	DefMagicInf[MAX_MAGICINF];

  00000	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  00005	68 00 00 00 00	 push	 OFFSET ??0CMagicInf@@QAE@XZ ; CMagicInf::CMagicInf
  0000a	68 ff 00 00 00	 push	 255			; 000000ffH
  0000f	6a 18		 push	 24			; 00000018H
  00011	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__FDefMagicInf@@YAXXZ ; `dynamic atexit destructor for 'DefMagicInf''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__EDefMagicInf@@YAXXZ ENDP				; `dynamic initializer for 'DefMagicInf''
text$yc	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__FDefMagicInf@@YAXXZ
text$yd	SEGMENT
??__FDefMagicInf@@YAXXZ PROC				; `dynamic atexit destructor for 'DefMagicInf'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  00005	68 ff 00 00 00	 push	 255			; 000000ffH
  0000a	6a 18		 push	 24			; 00000018H
  0000c	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00016	c3		 ret	 0
??__FDefMagicInf@@YAXXZ ENDP				; `dynamic atexit destructor for 'DefMagicInf''
text$yd	ENDS
PUBLIC	?DefMagicInf@@3PAVCMagicInf@@A			; DefMagicInf
_BSS	SEGMENT
?DefMagicInf@@3PAVCMagicInf@@A DB 017e8H DUP (?)	; DefMagicInf
_BSS	ENDS
CRT$XCU	SEGMENT
_DefMagicInf$initializer$ DD FLAT:??__EDefMagicInf@@YAXXZ
CRT$XCU	ENDS
END
