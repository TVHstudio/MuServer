; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MapQuest.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0BO@MJJEBMGN@?$FLMap?5Quest?$FN?5Boss?5?$CFs?5in?5?$CFs?5map?$AA@ ; `string'
PUBLIC	_Map$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddBoss@CMapQuest@@QAEXHHHHHH@Z		; CMapQuest::AddBoss
EXTRN	?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z:PROC ; CMonsterSetBase::GetBoxPosition
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	_sprintf:PROC
EXTRN	?ztMapName@@YAPADH@Z:PROC			; ztMapName
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_rand:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0BO@MJJEBMGN@?$FLMap?5Quest?$FN?5Boss?5?$CFs?5in?5?$CFs?5map?$AA@
; File e:\work\tranet_version\gs\gameserver\mapquest.cpp
CONST	SEGMENT
??_C@_0BO@MJJEBMGN@?$FLMap?5Quest?$FN?5Boss?5?$CFs?5in?5?$CFs?5map?$AA@ DB '['
	DB	'Map Quest] Boss %s in %s map', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AddBoss@CMapQuest@@QAEXHHHHHH@Z
_TEXT	SEGMENT
tv274 = -148						; size = 4
_this$GSCopy$ = -148					; size = 4
_Map$GSCopy$ = -144					; size = 4
_X$ = -140						; size = 2
_Y$ = -136						; size = 2
_szMsg$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_Map$ = 8						; size = 4
_BossClass$ = 12					; size = 4
_BossX$ = 16						; size = 4
_BossY$ = 20						; size = 4
_OrcClass$ = 24						; size = 4
_OrcCount$ = 28						; size = 4
?AddBoss@CMapQuest@@QAEXHHHHHH@Z PROC			; CMapQuest::AddBoss, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _Map$[ebp]

; 164  : 	short BossIndex = gObjAddMonster(Map);

  00017	53		 push	 ebx
  00018	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 198  : 
; 199  : 	for(int i = 0; i < OrcCount; i++)

  0001e	89 9d 70 ff ff
	ff		 mov	 DWORD PTR _Map$GSCopy$[ebp], ebx
  00024	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00029	0f b7 c0	 movzx	 eax, ax
  0002c	83 c4 04	 add	 esp, 4
  0002f	66 85 c0	 test	 ax, ax
  00032	0f 88 99 03 00
	00		 js	 $LN2@AddBoss

; 165  : 
; 166  : 	if(!OBJMAX_RANGE(BossIndex))

  00038	33 d2		 xor	 edx, edx
  0003a	b9 97 3a 00 00	 mov	 ecx, 14999		; 00003a97H
  0003f	66 3b c1	 cmp	 ax, cx
  00042	0f 9e c2	 setle	 dl
  00045	8b ca		 mov	 ecx, edx
  00047	85 c9		 test	 ecx, ecx
  00049	0f 84 82 03 00
	00		 je	 $LN2@AddBoss

; 167  : 	{
; 168  : 		return;
; 169  : 	}
; 170  : 
; 171  : 	gObj[BossIndex].m_PosNum = (WORD)-1;

  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00055	56		 push	 esi
  00056	57		 push	 edi
  00057	0f bf f8	 movsx	 edi, ax
  0005a	8b f7		 mov	 esi, edi
  0005c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00062	83 c8 ff	 or	 eax, -1
  00065	66 89 84 0e b0
	03 00 00	 mov	 WORD PTR [esi+ecx+944], ax

; 172  : 	gObj[BossIndex].MapNumber = Map;

  0006d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00073	88 9c 16 49 01
	00 00		 mov	 BYTE PTR [esi+edx+329], bl

; 173  : 	gObj[BossIndex].Dir = rand()%8;

  0007a	e8 00 00 00 00	 call	 _rand
  0007f	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00084	79 05		 jns	 SHORT $LN17@AddBoss
  00086	48		 dec	 eax
  00087	83 c8 f8	 or	 eax, -8			; fffffff8H
  0008a	40		 inc	 eax
$LN17@AddBoss:
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 174  : 	gObj[BossIndex].X = BossX;

  00091	8b 5d 10	 mov	 ebx, DWORD PTR _BossX$[ebp]
  00094	88 84 0e 48 01
	00 00		 mov	 BYTE PTR [esi+ecx+328], al
  0009b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 175  : 	gObj[BossIndex].Y = BossY;

  000a1	8b 45 14	 mov	 eax, DWORD PTR _BossY$[ebp]
  000a4	66 89 9c 16 44
	01 00 00	 mov	 WORD PTR [esi+edx+324], bx
  000ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b2	66 89 84 0e 46
	01 00 00	 mov	 WORD PTR [esi+ecx+326], ax

; 176  : 	gObj[BossIndex].TX = BossX;

  000ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c0	66 89 9c 16 7c
	01 00 00	 mov	 WORD PTR [esi+edx+380], bx

; 177  : 	gObj[BossIndex].TY = BossY;

  000c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ce	66 89 84 0e 7e
	01 00 00	 mov	 WORD PTR [esi+ecx+382], ax

; 178  : 	gObj[BossIndex].m_OldX = BossX;

  000d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000dc	66 89 9c 16 78
	01 00 00	 mov	 WORD PTR [esi+edx+376], bx

; 179  : 	gObj[BossIndex].m_OldY = BossY;

  000e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ea	66 89 84 0e 7a
	01 00 00	 mov	 WORD PTR [esi+ecx+378], ax

; 180  : 	gObj[BossIndex].StartX = BossX;

  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f8	88 9c 16 76 01
	00 00		 mov	 BYTE PTR [esi+edx+374], bl

; 181  : 	gObj[BossIndex].StartY = BossY;

  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00105	88 84 0e 77 01
	00 00		 mov	 BYTE PTR [esi+ecx+375], al

; 182  : 	gObj[BossIndex].MaxRegenTime = 0;

  0010c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00112	c7 84 16 ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+edx+940], 0

; 183  : 	gObj[BossIndex].Dir = rand()%8;

  0011d	e8 00 00 00 00	 call	 _rand
  00122	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00127	79 05		 jns	 SHORT $LN18@AddBoss
  00129	48		 dec	 eax
  0012a	83 c8 f8	 or	 eax, -8			; fffffff8H
  0012d	40		 inc	 eax
$LN18@AddBoss:
  0012e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00134	88 84 0e 48 01
	00 00		 mov	 BYTE PTR [esi+ecx+328], al

; 184  : 	gObj[BossIndex].RegenTime = GetTickCount();

  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00141	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00147	89 84 16 a8 03
	00 00		 mov	 DWORD PTR [esi+edx+936], eax

; 185  : 	gObj[BossIndex].m_ActState.Emotion = 1;

  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00153	8b 8c 06 18 02
	00 00		 mov	 ecx, DWORD PTR [esi+eax+536]
  0015a	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH
  00160	83 c9 10	 or	 ecx, 16			; 00000010H
  00163	89 8c 06 18 02
	00 00		 mov	 DWORD PTR [esi+eax+536], ecx

; 186  : 	gObj[BossIndex].m_ActState.EmotionCount = 15;
; 187  : 
; 188  : 	gObjSetMonster(BossIndex, BossClass);

  0016a	8b 45 0c	 mov	 eax, DWORD PTR _BossClass$[ebp]
  0016d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00173	50		 push	 eax
  00174	57		 push	 edi
  00175	c6 84 16 19 02
	00 00 0f	 mov	 BYTE PTR [esi+edx+537], 15 ; 0000000fH
  0017d	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 189  : 
; 190  : 	char szMsg[128];
; 191  : 	sprintf(szMsg,"[Map Quest] Boss %s in %s map", gObj[BossIndex].Name, ztMapName(gObj[BossIndex].MapNumber));

  00182	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00188	0f b6 94 0e 49
	01 00 00	 movzx	 edx, BYTE PTR [esi+ecx+329]
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 ?ztMapName@@YAPADH@Z	; ztMapName
  00196	50		 push	 eax
  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019c	8d 4c 06 77	 lea	 ecx, DWORD PTR [esi+eax+119]
  001a0	51		 push	 ecx
  001a1	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _szMsg$[ebp]
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MJJEBMGN@?$FLMap?5Quest?$FN?5Boss?5?$CFs?5in?5?$CFs?5map?$AA@
  001ac	52		 push	 edx
  001ad	e8 00 00 00 00	 call	 _sprintf

; 192  : 	AllSendServerMsg(szMsg);

  001b2	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szMsg$[ebp]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg

; 193  : 
; 194  : 	this->m_BossStart[Map] = true;

  001be	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001c4	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _Map$GSCopy$[ebp]

; 195  : 
; 196  : 	short X = BossX;

  001ca	0f b7 c3	 movzx	 eax, bx
  001cd	c6 84 0a 5c 01
	00 00 01	 mov	 BYTE PTR [edx+ecx+348], 1

; 197  : 	short Y = BossY;

  001d5	0f b7 4d 14	 movzx	 ecx, WORD PTR _BossY$[ebp]
  001d9	89 85 74 ff ff
	ff		 mov	 DWORD PTR _X$[ebp], eax

; 198  : 
; 199  : 	for(int i = 0; i < OrcCount; i++)

  001df	8b 45 1c	 mov	 eax, DWORD PTR _OrcCount$[ebp]
  001e2	83 c4 20	 add	 esp, 32			; 00000020H
  001e5	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _Y$[ebp], ecx
  001eb	85 c0		 test	 eax, eax
  001ed	0f 8e dc 01 00
	00		 jle	 $LN15@AddBoss

; 167  : 	{
; 168  : 		return;
; 169  : 	}
; 170  : 
; 171  : 	gObj[BossIndex].m_PosNum = (WORD)-1;

  001f3	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  001f9	8d a4 24 00 00
	00 00		 npad	 7
$LL14@AddBoss:

; 200  : 	{
; 201  : 		int OrcIndex = gObjAddMonster(Map);

  00200	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _Map$GSCopy$[ebp]
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0020c	0f bf f8	 movsx	 edi, ax
  0020f	83 c4 04	 add	 esp, 4

; 202  : 
; 203  : 		if(!OBJMAX_RANGE(OrcIndex))

  00212	85 ff		 test	 edi, edi
  00214	0f 88 a9 01 00
	00		 js	 $LN3@AddBoss
  0021a	33 c0		 xor	 eax, eax
  0021c	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00222	0f 9e c0	 setle	 al
  00225	85 c0		 test	 eax, eax
  00227	0f 84 96 01 00
	00		 je	 $LN3@AddBoss

; 204  : 		{
; 205  : 			continue;
; 206  : 		}
; 207  : 
; 208  : 		gMSetBase.GetBoxPosition(Map, (BossX - 5), (BossY - 5), (BossX + 5), (BossY + 5), X, Y);

  0022d	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _Y$[ebp]
  00233	50		 push	 eax
  00234	8b 45 14	 mov	 eax, DWORD PTR _BossY$[ebp]
  00237	8d 50 05	 lea	 edx, DWORD PTR [eax+5]
  0023a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _X$[ebp]
  00240	51		 push	 ecx
  00241	52		 push	 edx
  00242	8d 4b 05	 lea	 ecx, DWORD PTR [ebx+5]
  00245	51		 push	 ecx
  00246	83 c0 fb	 add	 eax, -5			; fffffffbH
  00249	50		 push	 eax
  0024a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _Map$GSCopy$[ebp]
  00250	8d 53 fb	 lea	 edx, DWORD PTR [ebx-5]
  00253	52		 push	 edx
  00254	50		 push	 eax
  00255	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  0025a	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition

; 209  : 
; 210  : 		gObj[OrcIndex].m_PosNum = (WORD)-1;

  0025f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00265	8b f7		 mov	 esi, edi
  00267	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0026d	83 c9 ff	 or	 ecx, -1
  00270	66 89 8c 16 b0
	03 00 00	 mov	 WORD PTR [esi+edx+944], cx

; 211  : 		gObj[OrcIndex].MapNumber = Map;

  00278	0f b6 8d 70 ff
	ff ff		 movzx	 ecx, BYTE PTR _Map$GSCopy$[ebp]
  0027f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00284	88 8c 06 49 01
	00 00		 mov	 BYTE PTR [esi+eax+329], cl

; 212  : 		gObj[OrcIndex].Dir = rand()%8;

  0028b	e8 00 00 00 00	 call	 _rand
  00290	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00295	79 05		 jns	 SHORT $LN19@AddBoss
  00297	48		 dec	 eax
  00298	83 c8 f8	 or	 eax, -8			; fffffff8H
  0029b	40		 inc	 eax
$LN19@AddBoss:
  0029c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002a2	88 84 16 48 01
	00 00		 mov	 BYTE PTR [esi+edx+328], al

; 213  : 		gObj[OrcIndex].X = X;

  002a9	0f b7 8d 74 ff
	ff ff		 movzx	 ecx, WORD PTR _X$[ebp]
  002b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002b5	66 89 8c 06 44
	01 00 00	 mov	 WORD PTR [esi+eax+324], cx

; 214  : 		gObj[OrcIndex].Y = Y;

  002bd	0f b7 85 78 ff
	ff ff		 movzx	 eax, WORD PTR _Y$[ebp]
  002c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ca	66 89 84 16 46
	01 00 00	 mov	 WORD PTR [esi+edx+326], ax

; 215  : 		gObj[OrcIndex].TX = X;

  002d2	0f b7 95 74 ff
	ff ff		 movzx	 edx, WORD PTR _X$[ebp]
  002d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002df	66 89 94 0e 7c
	01 00 00	 mov	 WORD PTR [esi+ecx+380], dx

; 216  : 		gObj[OrcIndex].TY = Y;

  002e7	0f b7 8d 78 ff
	ff ff		 movzx	 ecx, WORD PTR _Y$[ebp]
  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002f3	66 89 8c 06 7e
	01 00 00	 mov	 WORD PTR [esi+eax+382], cx

; 217  : 		gObj[OrcIndex].m_OldX = X;

  002fb	0f b7 85 74 ff
	ff ff		 movzx	 eax, WORD PTR _X$[ebp]
  00302	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00308	66 89 84 16 78
	01 00 00	 mov	 WORD PTR [esi+edx+376], ax

; 218  : 		gObj[OrcIndex].m_OldY = Y;

  00310	0f b7 95 78 ff
	ff ff		 movzx	 edx, WORD PTR _Y$[ebp]
  00317	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0031d	66 89 94 0e 7a
	01 00 00	 mov	 WORD PTR [esi+ecx+378], dx

; 219  : 		gObj[OrcIndex].StartX = X;

  00325	0f b6 8d 74 ff
	ff ff		 movzx	 ecx, BYTE PTR _X$[ebp]
  0032c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00331	88 8c 06 76 01
	00 00		 mov	 BYTE PTR [esi+eax+374], cl

; 220  : 		gObj[OrcIndex].StartY = Y;

  00338	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0033e	8a 85 78 ff ff
	ff		 mov	 al, BYTE PTR _Y$[ebp]
  00344	88 84 16 77 01
	00 00		 mov	 BYTE PTR [esi+edx+375], al

; 221  : 		gObj[OrcIndex].MaxRegenTime = 0;

  0034b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00351	c7 84 0e ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+ecx+940], 0

; 222  : 		gObj[OrcIndex].Dir = rand()%8;

  0035c	e8 00 00 00 00	 call	 _rand
  00361	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00366	79 05		 jns	 SHORT $LN20@AddBoss
  00368	48		 dec	 eax
  00369	83 c8 f8	 or	 eax, -8			; fffffff8H
  0036c	40		 inc	 eax
$LN20@AddBoss:
  0036d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00373	88 84 16 48 01
	00 00		 mov	 BYTE PTR [esi+edx+328], al

; 223  : 		gObj[OrcIndex].RegenTime = GetTickCount();

  0037a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00380	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00386	89 84 0e a8 03
	00 00		 mov	 DWORD PTR [esi+ecx+936], eax

; 224  : 		gObj[OrcIndex].m_ActState.Emotion = 1;

  0038d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00392	8b 94 06 18 02
	00 00		 mov	 edx, DWORD PTR [esi+eax+536]

; 225  : 		gObj[OrcIndex].m_ActState.EmotionCount = 15;
; 226  : 
; 227  : 		gObjSetMonster(OrcIndex, OrcClass);

  00399	8b 4d 18	 mov	 ecx, DWORD PTR _OrcClass$[ebp]
  0039c	81 e2 1f ff ff
	ff		 and	 edx, -225		; ffffff1fH
  003a2	83 ca 10	 or	 edx, 16			; 00000010H
  003a5	89 94 06 18 02
	00 00		 mov	 DWORD PTR [esi+eax+536], edx
  003ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003b1	51		 push	 ecx
  003b2	57		 push	 edi
  003b3	c6 84 06 19 02
	00 00 0f	 mov	 BYTE PTR [esi+eax+537], 15 ; 0000000fH
  003bb	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  003c0	83 c4 08	 add	 esp, 8
$LN3@AddBoss:

; 198  : 
; 199  : 	for(int i = 0; i < OrcCount; i++)

  003c3	ff 8d 6c ff ff
	ff		 dec	 DWORD PTR tv274[ebp]
  003c9	0f 85 31 fe ff
	ff		 jne	 $LL14@AddBoss
$LN15@AddBoss:
  003cf	5f		 pop	 edi
  003d0	5e		 pop	 esi
$LN2@AddBoss:

; 228  : 	}
; 229  : }

  003d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003d4	33 cd		 xor	 ecx, ebp
  003d6	5b		 pop	 ebx
  003d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003dc	8b e5		 mov	 esp, ebp
  003de	5d		 pop	 ebp
  003df	c2 18 00	 ret	 24			; 00000018H
?AddBoss@CMapQuest@@QAEXHHHHHH@Z ENDP			; CMapQuest::AddBoss
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCInfo@CMapQuest@@QAEXH_NHH@Z			; CMapQuest::GCInfo
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?GCInfo@CMapQuest@@QAEXH_NHH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Show$ = 12						; size = 1
_Count$ = 16						; size = 4
_MaxCount$ = 20						; size = 4
?GCInfo@CMapQuest@@QAEXH_NHH@Z PROC			; CMapQuest::GCInfo, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 233  : 	PMSG_DUNGEON_SYSTEM pMsg;
; 234  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0x71, sizeof(pMsg));
; 235  : 	pMsg.Show = Show;

  00010	8a 45 0c	 mov	 al, BYTE PTR _Show$[ebp]

; 236  : 	pMsg.Count = Count;

  00013	8b 4d 10	 mov	 ecx, DWORD PTR _Count$[ebp]

; 237  : 	pMsg.MaxCount = MaxCount;

  00016	8b 55 14	 mov	 edx, DWORD PTR _MaxCount$[ebp]
  00019	88 45 f0	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 238  : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0001c	6a 10		 push	 16			; 00000010H
  0001e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00021	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00027	50		 push	 eax
  00028	51		 push	 ecx
  00029	c7 45 ec c1 10
	fb 71		 mov	 DWORD PTR _pMsg$[ebp], 1912279233 ; 71fb10c1H
  00030	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00033	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 239  : }

  00038	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003b	33 cd		 xor	 ecx, ebp
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 10 00	 ret	 16			; 00000010H
?GCInfo@CMapQuest@@QAEXH_NHH@Z ENDP			; CMapQuest::GCInfo
_TEXT	ENDS
PUBLIC	??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ ; `string'
PUBLIC	??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ ; `string'
PUBLIC	??_C@_0N@FCIJKCEA@MapQuest?4cpp?$AA@		; `string'
PUBLIC	?GetMonsterPos@CMapQuest@@QAEHGEEE@Z		; CMapQuest::GetMonsterPos
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?CheckMapCanMove@CMapServerManager@@QAEHH@Z:PROC ; CMapServerManager::CheckMapCanMove
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
;	COMDAT ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
CONST	SEGMENT
??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ DB '[Atta'
	DB	'ckerAdd] No need to load monster for map %d [%d,%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ DB 'Monst'
	DB	'er attribute max over %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FCIJKCEA@MapQuest?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@FCIJKCEA@MapQuest?4cpp?$AA@ DB 'MapQuest.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetMonsterPos@CMapQuest@@QAEHGEEE@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 2
_Map$ = 12						; size = 1
_X$ = 16						; size = 1
_Y$ = 20						; size = 1
?GetMonsterPos@CMapQuest@@QAEHGEEE@Z PROC		; CMapQuest::GetMonsterPos, COMDAT
; _this$ = ecx

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 342  : 	if(gMSetBase.m_Count >= OBJ_MAXMONSTER-1)

  00003	81 3d 84 2c 03
	00 c7 32 00 00	 cmp	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, 12999 ; 000032c7H
  0000d	7c 1e		 jl	 SHORT $LN2@GetMonster

; 343  : 	{
; 344  : 		MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  0000f	68 58 01 00 00	 push	 344			; 00000158H
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FCIJKCEA@MapQuest?4cpp?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  0001e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 345  : 		return -1;

  00026	83 c8 ff	 or	 eax, -1

; 366  : }

  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
$LN2@GetMonster:
  0002d	53		 push	 ebx

; 346  : 	}
; 347  : 
; 348  : 	if(g_MapServerManager.CheckMapCanMove(Map) == FALSE)

  0002e	8a 5d 0c	 mov	 bl, BYTE PTR _Map$[ebp]
  00031	56		 push	 esi
  00032	0f b6 f3	 movzx	 esi, bl
  00035	56		 push	 esi
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0003b	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  00040	85 c0		 test	 eax, eax
  00042	75 29		 jne	 SHORT $LN1@GetMonster

; 349  : 	{
; 350  : 		LogAddC(3,"[AttackerAdd] No need to load monster for map %d [%d,%d,%d]",Map,Type,X,Y);

  00044	0f b6 45 14	 movzx	 eax, BYTE PTR _Y$[ebp]
  00048	0f b6 4d 10	 movzx	 ecx, BYTE PTR _X$[ebp]
  0004c	0f b7 55 08	 movzx	 edx, WORD PTR _Type$[ebp]
  00050	50		 push	 eax
  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	56		 push	 esi
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
  00059	6a 03		 push	 3
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00061	83 c4 18	 add	 esp, 24			; 00000018H
  00064	5e		 pop	 esi

; 351  : 		return -1;

  00065	83 c8 ff	 or	 eax, -1
  00068	5b		 pop	 ebx

; 366  : }

  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
$LN1@GetMonster:

; 352  : 	}
; 353  : 
; 354  : 	gMSetBase.m_Count++;

  0006d	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004

; 355  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dis			= 5;	//0
; 356  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Type		= Type;

  00072	66 8b 4d 08	 mov	 cx, WORD PTR _Type$[ebp]
  00076	40		 inc	 eax
  00077	a3 84 2c 03 00	 mov	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, eax
  0007c	c1 e0 04	 shl	 eax, 4
  0007f	c6 80 09 00 00
	00 05		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+9], 5
  00086	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0008b	c1 e0 04	 shl	 eax, 4
  0008e	66 89 88 06 00
	00 00		 mov	 WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6], cx

; 357  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_MapNumber	= Map;

  00095	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004

; 358  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_W			= X;

  0009b	8a 45 10	 mov	 al, BYTE PTR _X$[ebp]
  0009e	c1 e2 04	 shl	 edx, 4
  000a1	88 9a 08 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+8], bl
  000a7	8b 0d 84 2c 03
	00		 mov	 ecx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000ad	c1 e1 04	 shl	 ecx, 4
  000b0	88 81 0d 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[ecx+13], al

; 359  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_H			= Y;

  000b6	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000bc	8a 4d 14	 mov	 cl, BYTE PTR _Y$[ebp]
  000bf	c1 e2 04	 shl	 edx, 4
  000c2	88 8a 0e 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+14], cl

; 360  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_X			= X;

  000c8	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000ce	c1 e2 04	 shl	 edx, 4
  000d1	88 82 0a 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+10], al

; 361  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Y			= Y;

  000d7	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000dc	c1 e0 04	 shl	 eax, 4
  000df	88 88 0b 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+11], cl

; 362  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_ArrangeType = 2;	//3	1 0	//2<<

  000e5	8b 0d 84 2c 03
	00		 mov	 ecx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000eb	b0 02		 mov	 al, 2
  000ed	c1 e1 04	 shl	 ecx, 4
  000f0	88 81 04 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[ecx+4], al

; 363  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dir			= 2;

  000f6	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000fc	c1 e2 04	 shl	 edx, 4
  000ff	5e		 pop	 esi
  00100	88 82 0c 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+12], al

; 364  : 
; 365  : 	return gMSetBase.m_Count;

  00106	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0010b	5b		 pop	 ebx

; 366  : }

  0010c	5d		 pop	 ebp
  0010d	c2 10 00	 ret	 16			; 00000010H
?GetMonsterPos@CMapQuest@@QAEHGEEE@Z ENDP		; CMapQuest::GetMonsterPos
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddBossEx@CMapQuest@@QAEXHHHHHH@Z		; CMapQuest::AddBossEx
; Function compile flags: /Ogtp
;	COMDAT ?AddBossEx@CMapQuest@@QAEXHHHHHH@Z
_TEXT	SEGMENT
tv506 = -156						; size = 4
_this$GSCopy$ = -152					; size = 4
_i$210510 = -148					; size = 4
_Y$ = -144						; size = 2
_X$ = -140						; size = 2
tv659 = -136						; size = 4
tv450 = -136						; size = 4
_szMsg$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_Map$ = 8						; size = 4
_BossClass$ = 12					; size = 4
_BossX$ = 16						; size = 4
_BossY$ = 20						; size = 4
_OrcClass$ = 24						; size = 4
_OrcCount$ = 28						; size = 4
?AddBossEx@CMapQuest@@QAEXHHHHHH@Z PROC			; CMapQuest::AddBossEx, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _Map$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx

; 370  : 	if(this->m_Boss[Map].sPos == -1)

  0001a	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  0001d	66 83 bc 46 b2
	01 00 00 ff	 cmp	 WORD PTR [esi+eax*2+434], -1
  00026	8d 84 46 b2 01
	00 00		 lea	 eax, DWORD PTR [esi+eax*2+434]

; 422  : 		{
; 423  : 			continue;
; 424  : 		}
; 425  : 
; 426  : 		this->m_Monster[Map][i].sIndex = OrcIndex;

  0002d	89 b5 68 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00033	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv450[ebp], eax
  00039	0f 84 fd 03 00
	00		 je	 $LN3@AddBossEx

; 371  : 	{
; 372  : 		return;
; 373  : 	}
; 374  : 
; 375  : 	short BossIndex = gObjAddMonster(Map);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00045	0f b7 c0	 movzx	 eax, ax
  00048	83 c4 04	 add	 esp, 4

; 376  : 
; 377  : 	if(!OBJMAX_RANGE(BossIndex))

  0004b	66 85 c0	 test	 ax, ax
  0004e	0f 88 e8 03 00
	00		 js	 $LN3@AddBossEx
  00054	33 d2		 xor	 edx, edx
  00056	b9 97 3a 00 00	 mov	 ecx, 14999		; 00003a97H
  0005b	66 3b c1	 cmp	 ax, cx
  0005e	0f 9e c2	 setle	 dl
  00061	8b ca		 mov	 ecx, edx
  00063	85 c9		 test	 ecx, ecx
  00065	0f 84 d1 03 00
	00		 je	 $LN3@AddBossEx

; 378  : 	{
; 379  : 		return;
; 380  : 	}
; 381  : 
; 382  : 	this->m_Boss[Map].sIndex = BossIndex;
; 383  : 
; 384  : 	gObj[BossIndex].m_PosNum = this->m_Boss[Map].sPos;

  0006b	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv450[ebp]
  00071	57		 push	 edi
  00072	0f bf f8	 movsx	 edi, ax
  00075	8d 8c 5b d8 00
	00 00		 lea	 ecx, DWORD PTR [ebx+ebx*2+216]
  0007c	66 89 04 4e	 mov	 WORD PTR [esi+ecx*2], ax
  00080	66 8b 02	 mov	 ax, WORD PTR [edx]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00089	8b f7		 mov	 esi, edi
  0008b	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00091	66 89 84 0e b0
	03 00 00	 mov	 WORD PTR [esi+ecx+944], ax

; 385  : 	gObj[BossIndex].MapNumber = Map;

  00099	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009f	88 9c 16 49 01
	00 00		 mov	 BYTE PTR [esi+edx+329], bl

; 386  : 	gObj[BossIndex].Dir = rand()%8;

  000a6	e8 00 00 00 00	 call	 _rand
  000ab	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000b0	79 05		 jns	 SHORT $LN17@AddBossEx
  000b2	48		 dec	 eax
  000b3	83 c8 f8	 or	 eax, -8			; fffffff8H
  000b6	40		 inc	 eax
$LN17@AddBossEx:
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bd	88 84 0e 48 01
	00 00		 mov	 BYTE PTR [esi+ecx+328], al

; 387  : 	gObj[BossIndex].X = BossX;

  000c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ca	8b 45 10	 mov	 eax, DWORD PTR _BossX$[ebp]

; 388  : 	gObj[BossIndex].Y = BossY;

  000cd	8b 4d 14	 mov	 ecx, DWORD PTR _BossY$[ebp]
  000d0	66 89 84 16 44
	01 00 00	 mov	 WORD PTR [esi+edx+324], ax
  000d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000de	66 89 8c 16 46
	01 00 00	 mov	 WORD PTR [esi+edx+326], cx

; 389  : 	gObj[BossIndex].TX = BossX;

  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ec	66 89 84 16 7c
	01 00 00	 mov	 WORD PTR [esi+edx+380], ax

; 390  : 	gObj[BossIndex].TY = BossY;

  000f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fa	66 89 8c 16 7e
	01 00 00	 mov	 WORD PTR [esi+edx+382], cx

; 391  : 	gObj[BossIndex].m_OldX = BossX;

  00102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00108	66 89 84 16 78
	01 00 00	 mov	 WORD PTR [esi+edx+376], ax

; 392  : 	gObj[BossIndex].m_OldY = BossY;

  00110	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00116	66 89 8c 16 7a
	01 00 00	 mov	 WORD PTR [esi+edx+378], cx

; 393  : 	gObj[BossIndex].StartX = BossX;

  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00124	88 84 16 76 01
	00 00		 mov	 BYTE PTR [esi+edx+374], al

; 394  : 	gObj[BossIndex].StartY = BossY;

  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00130	88 8c 06 77 01
	00 00		 mov	 BYTE PTR [esi+eax+375], cl

; 395  : 	gObj[BossIndex].MaxRegenTime = 0;

  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013d	c7 84 0e ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+ecx+940], 0

; 396  : 	gObj[BossIndex].Dir = rand()%8;

  00148	e8 00 00 00 00	 call	 _rand
  0014d	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00152	79 05		 jns	 SHORT $LN18@AddBossEx
  00154	48		 dec	 eax
  00155	83 c8 f8	 or	 eax, -8			; fffffff8H
  00158	40		 inc	 eax
$LN18@AddBossEx:
  00159	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015f	88 84 16 48 01
	00 00		 mov	 BYTE PTR [esi+edx+328], al

; 397  : 	gObj[BossIndex].RegenTime = GetTickCount();

  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00172	89 84 0e a8 03
	00 00		 mov	 DWORD PTR [esi+ecx+936], eax

; 398  : 	gObj[BossIndex].m_ActState.Emotion = 1;

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017e	8b 94 06 18 02
	00 00		 mov	 edx, DWORD PTR [esi+eax+536]

; 399  : 	gObj[BossIndex].m_ActState.EmotionCount = 15;
; 400  : 
; 401  : 	gObjSetMonster(BossIndex, BossClass);

  00185	8b 4d 0c	 mov	 ecx, DWORD PTR _BossClass$[ebp]
  00188	81 e2 1f ff ff
	ff		 and	 edx, -225		; ffffff1fH
  0018e	83 ca 10	 or	 edx, 16			; 00000010H
  00191	89 94 06 18 02
	00 00		 mov	 DWORD PTR [esi+eax+536], edx
  00198	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019d	51		 push	 ecx
  0019e	57		 push	 edi
  0019f	c6 84 06 19 02
	00 00 0f	 mov	 BYTE PTR [esi+eax+537], 15 ; 0000000fH
  001a7	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 402  : 
; 403  : 	char szMsg[128];
; 404  : 	sprintf(szMsg,"[Map Quest] Boss %s in %s map", gObj[BossIndex].Name, ztMapName(gObj[BossIndex].MapNumber));

  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b2	0f b6 84 16 49
	01 00 00	 movzx	 eax, BYTE PTR [esi+edx+329]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?ztMapName@@YAPADH@Z	; ztMapName
  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c6	50		 push	 eax
  001c7	8d 54 0e 77	 lea	 edx, DWORD PTR [esi+ecx+119]
  001cb	52		 push	 edx
  001cc	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szMsg$[ebp]
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MJJEBMGN@?$FLMap?5Quest?$FN?5Boss?5?$CFs?5in?5?$CFs?5map?$AA@
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _sprintf

; 405  : 	AllSendServerMsg(szMsg);

  001dd	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _szMsg$[ebp]
  001e3	51		 push	 ecx
  001e4	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg

; 406  : 
; 407  : 	this->m_BossStart[Map] = true;
; 408  : 
; 409  : 	short X = BossX;

  001e9	0f b7 55 10	 movzx	 edx, WORD PTR _BossX$[ebp]
  001ed	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]

; 410  : 	short Y = BossY;

  001f3	0f b7 4d 14	 movzx	 ecx, WORD PTR _BossY$[ebp]

; 411  : 
; 412  : 	for(int i = 0; i < 100; i++)

  001f7	8b f3		 mov	 esi, ebx
  001f9	83 c4 20	 add	 esp, 32			; 00000020H
  001fc	6b f6 64	 imul	 esi, 100		; 00000064H
  001ff	89 95 74 ff ff
	ff		 mov	 DWORD PTR _X$[ebp], edx
  00205	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  00208	c6 84 03 5c 01
	00 00 01	 mov	 BYTE PTR [ebx+eax+348], 1
  00210	8d 84 50 a4 03
	00 00		 lea	 eax, DWORD PTR [eax+edx*2+932]
  00217	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _Y$[ebp], ecx
  0021d	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$210510[ebp], 0
  00227	89 b5 64 ff ff
	ff		 mov	 DWORD PTR tv506[ebp], esi
  0022d	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv659[ebp], eax
$LL5@AddBossEx:

; 413  : 	{
; 414  : 		if(this->m_Monster[Map][i].sPos == -1)

  00233	66 83 38 ff	 cmp	 WORD PTR [eax], -1
  00237	0f 84 d9 01 00
	00		 je	 $LN4@AddBossEx

; 415  : 		{
; 416  : 			continue;
; 417  : 		}
; 418  : 
; 419  : 		int OrcIndex = gObjAddMonster(Map);

  0023d	53		 push	 ebx
  0023e	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00243	0f bf f8	 movsx	 edi, ax
  00246	83 c4 04	 add	 esp, 4

; 420  : 
; 421  : 		if(!OBJMAX_RANGE(OrcIndex))

  00249	85 ff		 test	 edi, edi
  0024b	0f 88 c5 01 00
	00		 js	 $LN4@AddBossEx
  00251	33 c0		 xor	 eax, eax
  00253	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00259	0f 9e c0	 setle	 al
  0025c	85 c0		 test	 eax, eax
  0025e	0f 84 b2 01 00
	00		 je	 $LN4@AddBossEx

; 422  : 		{
; 423  : 			continue;
; 424  : 		}
; 425  : 
; 426  : 		this->m_Monster[Map][i].sIndex = OrcIndex;

  00264	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$210510[ebp]
  0026a	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00270	8d 84 06 9b 00
	00 00		 lea	 eax, DWORD PTR [esi+eax+155]
  00277	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0027a	66 89 3c 4a	 mov	 WORD PTR [edx+ecx*2], di

; 427  : 
; 428  : 		gMSetBase.GetBoxPosition(Map, (BossX - 5), (BossY - 5), (BossX + 5), (BossY + 5), X, Y);

  0027e	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _Y$[ebp]
  00284	50		 push	 eax
  00285	8b 45 10	 mov	 eax, DWORD PTR _BossX$[ebp]
  00288	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _X$[ebp]
  0028e	51		 push	 ecx
  0028f	8b 4d 14	 mov	 ecx, DWORD PTR _BossY$[ebp]
  00292	8d 51 05	 lea	 edx, DWORD PTR [ecx+5]
  00295	52		 push	 edx
  00296	8d 50 05	 lea	 edx, DWORD PTR [eax+5]
  00299	52		 push	 edx
  0029a	83 c1 fb	 add	 ecx, -5			; fffffffbH
  0029d	51		 push	 ecx
  0029e	83 c0 fb	 add	 eax, -5			; fffffffbH
  002a1	50		 push	 eax
  002a2	53		 push	 ebx
  002a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  002a8	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition

; 429  : 		
; 430  : 		gObj[OrcIndex].m_PosNum = this->m_Monster[Map][i].sPos;

  002ad	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv659[ebp]
  002b3	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002bc	8b f7		 mov	 esi, edi
  002be	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  002c4	66 89 8c 16 b0
	03 00 00	 mov	 WORD PTR [esi+edx+944], cx

; 431  : 		gObj[OrcIndex].MapNumber = Map;

  002cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002d1	88 9c 06 49 01
	00 00		 mov	 BYTE PTR [esi+eax+329], bl

; 432  : 		gObj[OrcIndex].Dir = rand()%8;

  002d8	e8 00 00 00 00	 call	 _rand
  002dd	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  002e2	79 05		 jns	 SHORT $LN19@AddBossEx
  002e4	48		 dec	 eax
  002e5	83 c8 f8	 or	 eax, -8			; fffffff8H
  002e8	40		 inc	 eax
$LN19@AddBossEx:
  002e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ef	88 84 0e 48 01
	00 00		 mov	 BYTE PTR [esi+ecx+328], al

; 433  : 		gObj[OrcIndex].X = X;

  002f6	0f b7 85 74 ff
	ff ff		 movzx	 eax, WORD PTR _X$[ebp]
  002fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00303	66 89 84 16 44
	01 00 00	 mov	 WORD PTR [esi+edx+324], ax

; 434  : 		gObj[OrcIndex].Y = Y;

  0030b	0f b7 95 70 ff
	ff ff		 movzx	 edx, WORD PTR _Y$[ebp]
  00312	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00318	66 89 94 0e 46
	01 00 00	 mov	 WORD PTR [esi+ecx+326], dx

; 435  : 		gObj[OrcIndex].TX = X;

  00320	0f b7 8d 74 ff
	ff ff		 movzx	 ecx, WORD PTR _X$[ebp]
  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0032c	66 89 8c 06 7c
	01 00 00	 mov	 WORD PTR [esi+eax+380], cx

; 436  : 		gObj[OrcIndex].TY = Y;

  00334	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _Y$[ebp]
  0033b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00341	66 89 84 16 7e
	01 00 00	 mov	 WORD PTR [esi+edx+382], ax

; 437  : 		gObj[OrcIndex].m_OldX = X;

  00349	0f b7 95 74 ff
	ff ff		 movzx	 edx, WORD PTR _X$[ebp]
  00350	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00356	66 89 94 0e 78
	01 00 00	 mov	 WORD PTR [esi+ecx+376], dx

; 438  : 		gObj[OrcIndex].m_OldY = Y;

  0035e	0f b7 8d 70 ff
	ff ff		 movzx	 ecx, WORD PTR _Y$[ebp]
  00365	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0036a	66 89 8c 06 7a
	01 00 00	 mov	 WORD PTR [esi+eax+378], cx

; 439  : 		gObj[OrcIndex].StartX = X;

  00372	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00378	8a 85 74 ff ff
	ff		 mov	 al, BYTE PTR _X$[ebp]
  0037e	88 84 16 76 01
	00 00		 mov	 BYTE PTR [esi+edx+374], al

; 440  : 		gObj[OrcIndex].StartY = Y;

  00385	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0038b	8a 95 70 ff ff
	ff		 mov	 dl, BYTE PTR _Y$[ebp]
  00391	88 94 0e 77 01
	00 00		 mov	 BYTE PTR [esi+ecx+375], dl

; 441  : 		gObj[OrcIndex].MaxRegenTime = 0;

  00398	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0039d	c7 84 06 ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+940], 0

; 442  : 		gObj[OrcIndex].Dir = rand()%8;

  003a8	e8 00 00 00 00	 call	 _rand
  003ad	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  003b2	79 05		 jns	 SHORT $LN20@AddBossEx
  003b4	48		 dec	 eax
  003b5	83 c8 f8	 or	 eax, -8			; fffffff8H
  003b8	40		 inc	 eax
$LN20@AddBossEx:
  003b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003bf	88 84 0e 48 01
	00 00		 mov	 BYTE PTR [esi+ecx+328], al

; 443  : 		gObj[OrcIndex].RegenTime = GetTickCount();

  003c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  003cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003d2	89 84 16 a8 03
	00 00		 mov	 DWORD PTR [esi+edx+936], eax

; 444  : 		gObj[OrcIndex].m_ActState.Emotion = 1;

  003d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003de	8b 8c 06 18 02
	00 00		 mov	 ecx, DWORD PTR [esi+eax+536]
  003e5	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH
  003eb	83 c9 10	 or	 ecx, 16			; 00000010H
  003ee	89 8c 06 18 02
	00 00		 mov	 DWORD PTR [esi+eax+536], ecx

; 445  : 		gObj[OrcIndex].m_ActState.EmotionCount = 15;
; 446  : 
; 447  : 		gObjSetMonster(OrcIndex, OrcClass);

  003f5	8b 45 18	 mov	 eax, DWORD PTR _OrcClass$[ebp]
  003f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003fe	50		 push	 eax
  003ff	57		 push	 edi
  00400	c6 84 16 19 02
	00 00 0f	 mov	 BYTE PTR [esi+edx+537], 15 ; 0000000fH
  00408	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  0040d	8b b5 64 ff ff
	ff		 mov	 esi, DWORD PTR tv506[ebp]
  00413	83 c4 08	 add	 esp, 8
$LN4@AddBossEx:

; 411  : 
; 412  : 	for(int i = 0; i < 100; i++)

  00416	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _i$210510[ebp]
  0041c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv659[ebp]
  00422	41		 inc	 ecx
  00423	83 c0 06	 add	 eax, 6
  00426	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _i$210510[ebp], ecx
  0042c	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv659[ebp], eax
  00432	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00435	0f 8c f8 fd ff
	ff		 jl	 $LL5@AddBossEx
  0043b	5f		 pop	 edi
$LN3@AddBossEx:

; 448  : 	}
; 449  : }

  0043c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0043f	5e		 pop	 esi
  00440	33 cd		 xor	 ecx, ebp
  00442	5b		 pop	 ebx
  00443	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00448	8b e5		 mov	 esp, ebp
  0044a	5d		 pop	 ebp
  0044b	c2 18 00	 ret	 24			; 00000018H
?AddBossEx@CMapQuest@@QAEXHHHHHH@Z ENDP			; CMapQuest::AddBossEx
_TEXT	ENDS
PUBLIC	?DelMonster@CMapQuest@@QAEXHH@Z			; CMapQuest::DelMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Ogtp
;	COMDAT ?DelMonster@CMapQuest@@QAEXHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Map$ = 12						; size = 4
?DelMonster@CMapQuest@@QAEXHH@Z PROC			; CMapQuest::DelMonster, COMDAT
; _this$ = ecx

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 453  : 	if(this->m_Boss[Map].sIndex == aIndex)

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _Map$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0000e	8d 84 7f d8 00
	00 00		 lea	 eax, DWORD PTR [edi+edi*2+216]
  00015	0f bf 14 43	 movsx	 edx, WORD PTR [ebx+eax*2]
  00019	8d 34 43	 lea	 esi, DWORD PTR [ebx+eax*2]
  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 16		 jne	 SHORT $LN5@DelMonster

; 454  : 	{
; 455  : 		gObjDel(aIndex);

  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00026	83 c4 04	 add	 esp, 4

; 456  : 		this->m_Boss[Map].sIndex = -1;

  00029	83 c8 ff	 or	 eax, -1
  0002c	5f		 pop	 edi
  0002d	66 89 06	 mov	 WORD PTR [esi], ax
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 466  : 			return;
; 467  : 		}
; 468  : 	}
; 469  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN5@DelMonster:

; 457  : 		return;
; 458  : 	}
; 459  : 
; 460  : 	for(int i = 0; i < 100; i++)

  00036	8b d7		 mov	 edx, edi
  00038	33 f6		 xor	 esi, esi
  0003a	69 d2 58 02 00
	00		 imul	 edx, 600		; 00000258H
  00040	8d 84 1a a2 03
	00 00		 lea	 eax, DWORD PTR [edx+ebx+930]
$LL4@DelMonster:

; 461  : 	{
; 462  : 		if(this->m_Monster[Map][i].sIndex == aIndex)

  00047	0f bf 10	 movsx	 edx, WORD PTR [eax]
  0004a	3b d1		 cmp	 edx, ecx
  0004c	74 10		 je	 SHORT $LN9@DelMonster

; 457  : 		return;
; 458  : 	}
; 459  : 
; 460  : 	for(int i = 0; i < 100; i++)

  0004e	46		 inc	 esi
  0004f	83 c0 06	 add	 eax, 6
  00052	83 fe 64	 cmp	 esi, 100		; 00000064H
  00055	7c f0		 jl	 SHORT $LL4@DelMonster
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 466  : 			return;
; 467  : 		}
; 468  : 	}
; 469  : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN9@DelMonster:

; 463  : 		{
; 464  : 			gObjDel(aIndex);

  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 465  : 			this->m_Monster[Map][i].sIndex = -1;

  00064	6b ff 64	 imul	 edi, 100		; 00000064H
  00067	83 c4 04	 add	 esp, 4
  0006a	8d 84 37 9b 00
	00 00		 lea	 eax, DWORD PTR [edi+esi+155]
  00071	5f		 pop	 edi
  00072	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00075	83 c9 ff	 or	 ecx, -1
  00078	5e		 pop	 esi
  00079	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  0007d	5b		 pop	 ebx

; 466  : 			return;
; 467  : 		}
; 468  : 	}
; 469  : }

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
?DelMonster@CMapQuest@@QAEXHH@Z ENDP			; CMapQuest::DelMonster
_TEXT	ENDS
PUBLIC	?DelMonsterMap@CMapQuest@@QAEXH@Z		; CMapQuest::DelMonsterMap
; Function compile flags: /Ogtp
;	COMDAT ?DelMonsterMap@CMapQuest@@QAEXH@Z
_TEXT	SEGMENT
_Map$ = 8						; size = 4
?DelMonsterMap@CMapQuest@@QAEXH@Z PROC			; CMapQuest::DelMonsterMap, COMDAT
; _this$ = ecx

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 473  : 	if(OBJMAX_RANGE(this->m_Boss[Map].sIndex))

  00005	8b 75 08	 mov	 esi, DWORD PTR _Map$[ebp]
  00008	8d 84 76 d8 00
	00 00		 lea	 eax, DWORD PTR [esi+esi*2+216]
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	8d 3c 43	 lea	 edi, DWORD PTR [ebx+eax*2]
  00015	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00018	66 85 c0	 test	 ax, ax
  0001b	78 23		 js	 SHORT $LN14@DelMonster@2
  0001d	33 d2		 xor	 edx, edx
  0001f	b9 97 3a 00 00	 mov	 ecx, 14999		; 00003a97H
  00024	66 3b c1	 cmp	 ax, cx
  00027	0f 9e c2	 setle	 dl
  0002a	8b ca		 mov	 ecx, edx
  0002c	85 c9		 test	 ecx, ecx
  0002e	74 10		 je	 SHORT $LN14@DelMonster@2

; 474  : 	{
; 475  : 		gObjDel(this->m_Boss[Map].sIndex);

  00030	98		 cwde
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00037	83 c4 04	 add	 esp, 4

; 476  : 		this->m_Boss[Map].sIndex = -1;

  0003a	83 c9 ff	 or	 ecx, -1
  0003d	66 89 0f	 mov	 WORD PTR [edi], cx
$LN14@DelMonster@2:

; 477  : 	}
; 478  : 	
; 479  : 	for(int i = 0; i < 100; i++)

  00040	69 f6 58 02 00
	00		 imul	 esi, 600		; 00000258H
  00046	8d b4 1e a2 03
	00 00		 lea	 esi, DWORD PTR [esi+ebx+930]
  0004d	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
$LL4@DelMonster@2:

; 480  : 	{
; 481  : 		if(OBJMAX_RANGE(this->m_Monster[Map][i].sIndex))

  00052	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00055	66 85 c0	 test	 ax, ax
  00058	78 21		 js	 SHORT $LN3@DelMonster@2
  0005a	33 c9		 xor	 ecx, ecx
  0005c	ba 97 3a 00 00	 mov	 edx, 14999		; 00003a97H
  00061	66 3b c2	 cmp	 ax, dx
  00064	0f 9e c1	 setle	 cl
  00067	85 c9		 test	 ecx, ecx
  00069	74 10		 je	 SHORT $LN3@DelMonster@2

; 482  : 		{
; 483  : 			gObjDel(this->m_Monster[Map][i].sIndex);

  0006b	98		 cwde
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00072	83 c4 04	 add	 esp, 4

; 484  : 			this->m_Monster[Map][i].sIndex = -1;

  00075	83 c9 ff	 or	 ecx, -1
  00078	66 89 0e	 mov	 WORD PTR [esi], cx
$LN3@DelMonster@2:

; 477  : 	}
; 478  : 	
; 479  : 	for(int i = 0; i < 100; i++)

  0007b	83 c6 06	 add	 esi, 6
  0007e	4f		 dec	 edi
  0007f	75 d1		 jne	 SHORT $LL4@DelMonster@2
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx

; 485  : 		}
; 486  : 	}
; 487  : }

  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?DelMonsterMap@CMapQuest@@QAEXH@Z ENDP			; CMapQuest::DelMonsterMap
_TEXT	ENDS
PUBLIC	?GetMapMonster@CMapQuest@@QAE_NH@Z		; CMapQuest::GetMapMonster
; Function compile flags: /Ogtp
;	COMDAT ?GetMapMonster@CMapQuest@@QAE_NH@Z
_TEXT	SEGMENT
_aPos$ = 8						; size = 4
?GetMapMonster@CMapQuest@@QAE_NH@Z PROC			; CMapQuest::GetMapMonster, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : //	int iPos = gObj[aIndex].m_Pos;
; 492  : 
; 493  : 	//if(OBJMAX_RANGE(aIndex))
; 494  : 	if(aPos != -1)

  00003	83 7d 08 ff	 cmp	 DWORD PTR _aPos$[ebp], -1
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	74 44		 je	 SHORT $LN6@GetMapMons

; 495  : 	{
; 496  : 		for(int m = 0; m < MAX_NUMBER_MAP; m++)

  0000c	33 d2		 xor	 edx, edx
  0000e	8d b1 a4 03 00
	00		 lea	 esi, DWORD PTR [ecx+932]
  00014	8d b9 b2 01 00
	00		 lea	 edi, DWORD PTR [ecx+434]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL18@GetMapMons:

; 497  : 		{
; 498  : 			if(this->m_Boss[m].sPos == aPos)

  00020	0f bf 07	 movsx	 eax, WORD PTR [edi]
  00023	3b 45 08	 cmp	 eax, DWORD PTR _aPos$[ebp]
  00026	74 31		 je	 SHORT $LN15@GetMapMons

; 501  : 			}
; 502  : 
; 503  : 			for(int i = 0; i < 100; i++)

  00028	33 c0		 xor	 eax, eax
  0002a	8b ce		 mov	 ecx, esi
  0002c	8d 64 24 00	 npad	 4
$LL4@GetMapMons:

; 504  : 			{
; 505  : 				if(this->m_Monster[m][i].sPos == aPos)

  00030	0f bf 19	 movsx	 ebx, WORD PTR [ecx]
  00033	3b 5d 08	 cmp	 ebx, DWORD PTR _aPos$[ebp]
  00036	74 21		 je	 SHORT $LN15@GetMapMons

; 501  : 			}
; 502  : 
; 503  : 			for(int i = 0; i < 100; i++)

  00038	40		 inc	 eax
  00039	83 c1 06	 add	 ecx, 6
  0003c	83 f8 64	 cmp	 eax, 100		; 00000064H
  0003f	7c ef		 jl	 SHORT $LL4@GetMapMons

; 495  : 	{
; 496  : 		for(int m = 0; m < MAX_NUMBER_MAP; m++)

  00041	42		 inc	 edx
  00042	83 c7 06	 add	 edi, 6
  00045	81 c6 58 02 00
	00		 add	 esi, 600		; 00000258H
  0004b	83 fa 53	 cmp	 edx, 83			; 00000053H
  0004e	7c d0		 jl	 SHORT $LL18@GetMapMons
$LN6@GetMapMons:
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi

; 506  : 				{
; 507  : 					return true;
; 508  : 				}
; 509  : 			}
; 510  : 		}
; 511  : 	}
; 512  : 
; 513  : 	return false;

  00052	32 c0		 xor	 al, al
  00054	5b		 pop	 ebx

; 514  : }

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN15@GetMapMons:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 499  : 			{
; 500  : 				return true;

  0005b	b0 01		 mov	 al, 1
  0005d	5b		 pop	 ebx

; 514  : }

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?GetMapMonster@CMapQuest@@QAE_NH@Z ENDP			; CMapQuest::GetMapMonster
_TEXT	ENDS
PUBLIC	?size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	56		 push	 esi

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 880  : 		}

  0001a	c3		 ret	 0
?size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEAAUMAPQUEST_DATA@@I@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEAAUMAPQUEST_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEAAUMAPQUEST_DATA@@I@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  0000d	2b d0		 sub	 edx, eax
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 941  : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??A?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEAAUMAPQUEST_DATA@@I@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBE_NPBUMAPQUEST_DATA@@@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBE_NPBUMAPQUEST_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBE_NPBUMAPQUEST_DATA@@@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBE_NPBUMAPQUEST_DATA@@@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXPAUMAPQUEST_DATA@@0@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXPAUMAPQUEST_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXPAUMAPQUEST_DATA@@0@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXPAUMAPQUEST_DATA@@0@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::~_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::~_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::~_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@XZ	; std::allocator<MAPQUEST_DATA>::allocator<MAPQUEST_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@XZ PROC	; std::allocator<MAPQUEST_DATA>::allocator<MAPQUEST_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@XZ ENDP	; std::allocator<MAPQUEST_DATA>::allocator<MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 777  : 		return (this->_Myend - this->_Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 778  : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXXZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<MAPQUEST_DATA>::allocator<MAPQUEST_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<MAPQUEST_DATA>::allocator<MAPQUEST_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UMAPQUEST_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<MAPQUEST_DATA>::allocator<MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@I@Z ; std::allocator<MAPQUEST_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@I@Z PROC ; std::allocator<MAPQUEST_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@I@Z ENDP ; std::allocator<MAPQUEST_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UMAPQUEST_DATA@@@std@@QBEIXZ ; std::allocator<MAPQUEST_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UMAPQUEST_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UMAPQUEST_DATA@@@std@@QBEIXZ PROC	; std::allocator<MAPQUEST_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UMAPQUEST_DATA@@@std@@QBEIXZ ENDP	; std::allocator<MAPQUEST_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUMAPQUEST_DATA@@@std@@YAPBUMAPQUEST_DATA@@ABU1@@Z ; std::addressof<MAPQUEST_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUMAPQUEST_DATA@@@std@@YAPBUMAPQUEST_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUMAPQUEST_DATA@@@std@@YAPBUMAPQUEST_DATA@@ABU1@@Z PROC ; std::addressof<MAPQUEST_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUMAPQUEST_DATA@@@std@@YAPBUMAPQUEST_DATA@@ABU1@@Z ENDP ; std::addressof<MAPQUEST_DATA const >
_TEXT	ENDS
PUBLIC	??$forward@AAUMAPQUEST_DATA@@@std@@YAAAUMAPQUEST_DATA@@AAU1@@Z ; std::forward<MAPQUEST_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUMAPQUEST_DATA@@@std@@YAAAUMAPQUEST_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUMAPQUEST_DATA@@@std@@YAAAUMAPQUEST_DATA@@AAU1@@Z PROC ; std::forward<MAPQUEST_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUMAPQUEST_DATA@@@std@@YAAAUMAPQUEST_DATA@@AAU1@@Z ENDP ; std::forward<MAPQUEST_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUMAPQUEST_DATA@@@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@AAU2@@Z ; std::allocator<MAPQUEST_DATA>::construct<MAPQUEST_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUMAPQUEST_DATA@@@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUMAPQUEST_DATA@@@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@AAU2@@Z PROC ; std::allocator<MAPQUEST_DATA>::construct<MAPQUEST_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 209  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@AAUMAPQUEST_DATA@@@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@AAU2@@Z ENDP ; std::allocator<MAPQUEST_DATA>::construct<MAPQUEST_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUMAPQUEST_DATA@@@std@@YAABUMAPQUEST_DATA@@ABU1@@Z ; std::forward<MAPQUEST_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUMAPQUEST_DATA@@@std@@YAABUMAPQUEST_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUMAPQUEST_DATA@@@std@@YAABUMAPQUEST_DATA@@ABU1@@Z PROC ; std::forward<MAPQUEST_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUMAPQUEST_DATA@@@std@@YAABUMAPQUEST_DATA@@ABU1@@Z ENDP ; std::forward<MAPQUEST_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UMAPQUEST_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAPQUEST_DATA@@0@Z ; std::_Ptr_cat<MAPQUEST_DATA,MAPQUEST_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UMAPQUEST_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAPQUEST_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMAPQUEST_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAPQUEST_DATA@@0@Z PROC ; std::_Ptr_cat<MAPQUEST_DATA,MAPQUEST_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UMAPQUEST_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMAPQUEST_DATA@@0@Z ENDP ; std::_Ptr_cat<MAPQUEST_DATA,MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UMAPQUEST_DATA@@ABU1@@std@@YAXPAUMAPQUEST_DATA@@ABU1@@Z ; std::_Construct<MAPQUEST_DATA,MAPQUEST_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UMAPQUEST_DATA@@ABU1@@std@@YAXPAUMAPQUEST_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UMAPQUEST_DATA@@ABU1@@std@@YAXPAUMAPQUEST_DATA@@ABU1@@Z PROC ; std::_Construct<MAPQUEST_DATA,MAPQUEST_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@Construct:
  00017	5f		 pop	 edi

; 49   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Construct@UMAPQUEST_DATA@@ABU1@@std@@YAXPAUMAPQUEST_DATA@@ABU1@@Z ENDP ; std::_Construct<MAPQUEST_DATA,MAPQUEST_DATA const &>
_TEXT	ENDS
PUBLIC	??$move@AAUMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z ; std::move<MAPQUEST_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z PROC ; std::move<MAPQUEST_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z ENDP ; std::move<MAPQUEST_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@PAU1@@Z ; std::_Val_type<MAPQUEST_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@PAU1@@Z PROC ; std::_Val_type<MAPQUEST_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@PAU1@@Z ENDP ; std::_Val_type<MAPQUEST_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UMAPQUEST_DATA@@@std@@YAXPAUMAPQUEST_DATA@@@Z ; std::_Destroy<MAPQUEST_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UMAPQUEST_DATA@@@std@@YAXPAUMAPQUEST_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UMAPQUEST_DATA@@@std@@YAXPAUMAPQUEST_DATA@@@Z PROC ; std::_Destroy<MAPQUEST_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UMAPQUEST_DATA@@@std@@YAXPAUMAPQUEST_DATA@@@Z ENDP ; std::_Destroy<MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z ; std::forward<MAPQUEST_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z PROC ; std::forward<MAPQUEST_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UMAPQUEST_DATA@@@std@@YA$$QAUMAPQUEST_DATA@@AAU1@@Z ENDP ; std::forward<MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?MonsterKill@CMapQuest@@QAEXHH@Z		; CMapQuest::MonsterKill
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapquest.cpp
;	COMDAT ?MonsterKill@CMapQuest@@QAEXHH@Z
_TEXT	SEGMENT
tv388 = -8						; size = 4
tv340 = -8						; size = 4
_i$210393 = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
?MonsterKill@CMapQuest@@QAEXHH@Z PROC			; CMapQuest::MonsterKill, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 109  : 	if(!g_ZtLicense.user.MapQuest)

  00006	80 3d eb 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+235, 0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	0f 84 b0 01 00
	00		 je	 $LN12@MonsterKil

; 110  : 	{
; 111  : 		return;
; 112  : 	}
; 113  : 
; 114  : 	if ( !OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aTargetIndex) )

  00016	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00019	85 c0		 test	 eax, eax
  0001b	0f 88 a5 01 00
	00		 js	 $LN12@MonsterKil
  00021	33 c9		 xor	 ecx, ecx
  00023	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00028	0f 9e c1	 setle	 cl
  0002b	8b c1		 mov	 eax, ecx
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 91 01 00
	00		 je	 $LN12@MonsterKil
  00035	57		 push	 edi
  00036	8b 7d 0c	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  00039	85 ff		 test	 edi, edi
  0003b	0f 88 84 01 00
	00		 js	 $LN29@MonsterKil
  00041	33 c0		 xor	 eax, eax
  00043	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00049	0f 9e c0	 setle	 al
  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 71 01 00
	00		 je	 $LN29@MonsterKil

; 115  : 	{
; 116  : 		return;
; 117  : 	}
; 118  : 
; 119  : 	LPOBJ lpUser = &gObj[aIndex];
; 120  : 	LPOBJ lpMonster = &gObj[aTargetIndex];

  00054	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0005a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 121  : 
; 122  : 	if ( MAX_MAP_RANGE(lpMonster->MapNumber) == FALSE ) 

  00060	b2 52		 mov	 dl, 82			; 00000052H
  00062	3a 97 49 01 00
	00		 cmp	 dl, BYTE PTR [edi+329]
  00068	1b c0		 sbb	 eax, eax
  0006a	40		 inc	 eax
  0006b	0f 84 54 01 00
	00		 je	 $LN29@MonsterKil

; 123  : 	{
; 124  : 		return;
; 125  : 	}
; 126  : 
; 127  : 	for( int i = 0; i < this->m_Data.size(); i++ )

  00071	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00073	53		 push	 ebx
  00074	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00077	2b d9		 sub	 ebx, ecx
  00079	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0007e	f7 eb		 imul	 ebx
  00080	03 d3		 add	 edx, ebx
  00082	c1 fa 04	 sar	 edx, 4
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
  0008c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$210393[ebp], 0
  00093	0f 84 2b 01 00
	00		 je	 $LN30@MonsterKil
  00099	33 db		 xor	 ebx, ebx
  0009b	eb 03 8d 49 00	 npad	 5
$LL10@MonsterKil:

; 128  : 	{
; 129  : 		MAPQUEST_DATA & quest = this->m_Data[i];
; 130  : 
; 131  : 		if(lpMonster->MapNumber == quest.MapNum)

  000a0	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  000a7	3b 14 0b	 cmp	 edx, DWORD PTR [ebx+ecx]
  000aa	0f 85 e7 00 00
	00		 jne	 $LN9@MonsterKil

; 132  : 		{
; 133  : 			if(this->m_BossStart[lpMonster->MapNumber] == true)

  000b0	80 bc 32 5c 01
	00 00 01	 cmp	 BYTE PTR [edx+esi+348], 1
  000b8	75 71		 jne	 SHORT $LN6@MonsterKil

; 134  : 			{
; 135  : 				if(lpMonster->Class == quest.BossClass)

  000ba	0f b7 87 b8 00
	00 00		 movzx	 eax, WORD PTR [edi+184]
  000c1	3b 44 0b 08	 cmp	 eax, DWORD PTR [ebx+ecx+8]
  000c5	75 50		 jne	 SHORT $LN5@MonsterKil

; 136  : 				{
; 137  : 					this->m_BossStart[lpMonster->MapNumber] = false;

  000c7	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  000ce	c6 84 32 5c 01
	00 00 00	 mov	 BYTE PTR [edx+esi+348], 0

; 138  : 					this->m_MapKillCount[lpMonster->MapNumber] = 0;

  000d6	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  000dd	c7 44 86 10 00
	00 00 00	 mov	 DWORD PTR [esi+eax*4+16], 0

; 139  : 					this->GCInfo(aIndex, true, this->m_MapKillCount[lpMonster->MapNumber], quest.MonsterCount);

  000e5	8b 4c 0b 04	 mov	 ecx, DWORD PTR [ebx+ecx+4]
  000e9	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  000f0	8b 44 96 10	 mov	 eax, DWORD PTR [esi+edx*4+16]
  000f4	51		 push	 ecx
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000f8	50		 push	 eax
  000f9	6a 01		 push	 1
  000fb	51		 push	 ecx
  000fc	8b ce		 mov	 ecx, esi
  000fe	e8 00 00 00 00	 call	 ?GCInfo@CMapQuest@@QAEXH_NHH@Z ; CMapQuest::GCInfo

; 140  : 
; 141  : 					this->DelMonsterMap(lpMonster->MapNumber);

  00103	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  0010a	52		 push	 edx
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?DelMonsterMap@CMapQuest@@QAEXH@Z ; CMapQuest::DelMonsterMap
  00112	e9 80 00 00 00	 jmp	 $LN9@MonsterKil
$LN5@MonsterKil:

; 142  : 				}	
; 143  : 				else if(lpMonster->Class == quest.OrcClass)

  00117	3b 44 0b 14	 cmp	 eax, DWORD PTR [ebx+ecx+20]
  0011b	75 7a		 jne	 SHORT $LN9@MonsterKil

; 144  : 				{
; 145  : 					this->DelMonster(aTargetIndex, lpMonster->MapNumber);

  0011d	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00120	52		 push	 edx
  00121	50		 push	 eax
  00122	8b ce		 mov	 ecx, esi
  00124	e8 00 00 00 00	 call	 ?DelMonster@CMapQuest@@QAEXHH@Z ; CMapQuest::DelMonster

; 146  : 				}					
; 147  : 			}
; 148  : 			else 

  00129	eb 6c		 jmp	 SHORT $LN9@MonsterKil
$LN6@MonsterKil:

; 149  : 			{
; 150  : 				this->m_MapKillCount[lpMonster->MapNumber]++;		

  0012b	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  00132	ff 44 96 10	 inc	 DWORD PTR [esi+edx*4+16]
  00136	8d 44 96 10	 lea	 eax, DWORD PTR [esi+edx*4+16]

; 151  : 				if(this->m_MapKillCount[lpMonster->MapNumber] >= quest.MonsterCount)

  0013a	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  00141	8b 54 96 10	 mov	 edx, DWORD PTR [esi+edx*4+16]
  00145	8d 44 0b 04	 lea	 eax, DWORD PTR [ebx+ecx+4]
  00149	89 45 f8	 mov	 DWORD PTR tv340[ebp], eax
  0014c	3b 10		 cmp	 edx, DWORD PTR [eax]
  0014e	7c 2b		 jl	 SHORT $LN1@MonsterKil

; 152  : 				{
; 153  : 					this->AddBossEx(lpMonster->MapNumber, quest.BossClass, quest.BossX, quest.BossY, quest.OrcClass, quest.OrcCount);	

  00150	8b 44 0b 18	 mov	 eax, DWORD PTR [ebx+ecx+24]
  00154	8b 54 0b 14	 mov	 edx, DWORD PTR [ebx+ecx+20]
  00158	50		 push	 eax
  00159	8b 44 0b 10	 mov	 eax, DWORD PTR [ebx+ecx+16]
  0015d	52		 push	 edx
  0015e	8b 54 0b 0c	 mov	 edx, DWORD PTR [ebx+ecx+12]
  00162	50		 push	 eax
  00163	8b 44 0b 08	 mov	 eax, DWORD PTR [ebx+ecx+8]
  00167	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  0016e	52		 push	 edx
  0016f	50		 push	 eax
  00170	51		 push	 ecx
  00171	8b ce		 mov	 ecx, esi
  00173	e8 00 00 00 00	 call	 ?AddBossEx@CMapQuest@@QAEXHHHHHH@Z ; CMapQuest::AddBossEx
  00178	8b 45 f8	 mov	 eax, DWORD PTR tv340[ebp]
$LN1@MonsterKil:

; 154  : 					//this->m_MapKillCount[lpMonster->MapNumber] = 0;
; 155  : 				}
; 156  : 				this->GCInfo(aIndex, true, this->m_MapKillCount[lpMonster->MapNumber], quest.MonsterCount);

  0017b	8b 10		 mov	 edx, DWORD PTR [eax]
  0017d	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  00184	8b 4c 86 10	 mov	 ecx, DWORD PTR [esi+eax*4+16]
  00188	52		 push	 edx
  00189	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0018c	51		 push	 ecx
  0018d	6a 01		 push	 1
  0018f	52		 push	 edx
  00190	8b ce		 mov	 ecx, esi
  00192	e8 00 00 00 00	 call	 ?GCInfo@CMapQuest@@QAEXH_NHH@Z ; CMapQuest::GCInfo
$LN9@MonsterKil:

; 123  : 	{
; 124  : 		return;
; 125  : 	}
; 126  : 
; 127  : 	for( int i = 0; i < this->m_Data.size(); i++ )

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0019c	ff 45 fc	 inc	 DWORD PTR _i$210393[ebp]
  0019f	2b d1		 sub	 edx, ecx
  001a1	89 55 f8	 mov	 DWORD PTR tv388[ebp], edx
  001a4	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001a9	f7 ea		 imul	 edx
  001ab	03 55 f8	 add	 edx, DWORD PTR tv388[ebp]
  001ae	83 c3 1c	 add	 ebx, 28			; 0000001cH
  001b1	c1 fa 04	 sar	 edx, 4
  001b4	8b c2		 mov	 eax, edx
  001b6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b9	03 c2		 add	 eax, edx
  001bb	39 45 fc	 cmp	 DWORD PTR _i$210393[ebp], eax
  001be	0f 82 dc fe ff
	ff		 jb	 $LL10@MonsterKil
$LN30@MonsterKil:
  001c4	5b		 pop	 ebx
$LN29@MonsterKil:
  001c5	5f		 pop	 edi
$LN12@MonsterKil:
  001c6	5e		 pop	 esi

; 157  : 			}
; 158  : 		}
; 159  : 	}
; 160  : }

  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 08 00	 ret	 8
?MonsterKill@CMapQuest@@QAEXHH@Z ENDP			; CMapQuest::MonsterKill
_TEXT	ENDS
PUBLIC	?ReloadMonster@CMapQuest@@QAEXXZ		; CMapQuest::ReloadMonster
; Function compile flags: /Ogtp
;	COMDAT ?ReloadMonster@CMapQuest@@QAEXXZ
_TEXT	SEGMENT
_i$210442 = -4						; size = 4
?ReloadMonster@CMapQuest@@QAEXXZ PROC			; CMapQuest::ReloadMonster, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 243  : 	if(!g_ZtLicense.user.MapQuest)

  00004	80 3d eb 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+235, 0
  0000b	53		 push	 ebx
  0000c	8b d9		 mov	 ebx, ecx
  0000e	0f 84 92 00 00
	00		 je	 $LN4@ReloadMons

; 244  : 	{
; 245  : 		return;
; 246  : 	}
; 247  : 
; 248  : 	//memset(this->m_BossStart, 0, sizeof(this->m_BossStart));
; 249  : 	//memset(this->m_MapKillCount, 0, sizeof(this->m_MapKillCount));
; 250  : 
; 251  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00014	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00016	56		 push	 esi
  00017	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0001a	2b f1		 sub	 esi, ecx
  0001c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00021	f7 ee		 imul	 esi
  00023	03 d6		 add	 edx, esi
  00025	c1 fa 04	 sar	 edx, 4
  00028	8b c2		 mov	 eax, edx
  0002a	57		 push	 edi
  0002b	33 ff		 xor	 edi, edi
  0002d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00030	03 c2		 add	 eax, edx
  00032	89 7d fc	 mov	 DWORD PTR _i$210442[ebp], edi
  00035	74 6d		 je	 SHORT $LN19@ReloadMons
$LL18@ReloadMons:

; 252  : 	{
; 253  : 		MAPQUEST_DATA & quest = this->m_Data[i];
; 254  : 
; 255  : 		int iMap = quest.MapNum;

  00037	8b 34 0f	 mov	 esi, DWORD PTR [edi+ecx]

; 256  : 
; 257  : 		if(!MAX_MAP_RANGE(iMap))

  0003a	85 f6		 test	 esi, esi
  0003c	78 41		 js	 SHORT $LN5@ReloadMons
  0003e	33 c0		 xor	 eax, eax
  00040	83 fe 52	 cmp	 esi, 82			; 00000052H
  00043	0f 9e c0	 setle	 al
  00046	85 c0		 test	 eax, eax
  00048	74 35		 je	 SHORT $LN5@ReloadMons

; 258  : 		{
; 259  : 			continue;
; 260  : 		}
; 261  : 
; 262  : 		if(this->m_BossStart[iMap] == true)

  0004a	80 bc 1e 5c 01
	00 00 01	 cmp	 BYTE PTR [esi+ebx+348], 1
  00052	75 2b		 jne	 SHORT $LN5@ReloadMons

; 263  : 		{
; 264  : 			if(this->m_MapKillCount[iMap] >= quest.MonsterCount)

  00054	8b 54 b3 10	 mov	 edx, DWORD PTR [ebx+esi*4+16]
  00058	3b 54 0f 04	 cmp	 edx, DWORD PTR [edi+ecx+4]
  0005c	7c 21		 jl	 SHORT $LN5@ReloadMons

; 265  : 			{
; 266  : 				this->AddBossEx(iMap, quest.BossClass, quest.BossX, quest.BossY, quest.OrcClass, quest.OrcCount);	

  0005e	8b 44 0f 18	 mov	 eax, DWORD PTR [edi+ecx+24]
  00062	8b 54 0f 14	 mov	 edx, DWORD PTR [edi+ecx+20]
  00066	50		 push	 eax
  00067	8b 44 0f 10	 mov	 eax, DWORD PTR [edi+ecx+16]
  0006b	52		 push	 edx
  0006c	8b 54 0f 0c	 mov	 edx, DWORD PTR [edi+ecx+12]
  00070	50		 push	 eax
  00071	8b 44 0f 08	 mov	 eax, DWORD PTR [edi+ecx+8]
  00075	52		 push	 edx
  00076	50		 push	 eax
  00077	56		 push	 esi
  00078	8b cb		 mov	 ecx, ebx
  0007a	e8 00 00 00 00	 call	 ?AddBossEx@CMapQuest@@QAEXHHHHHH@Z ; CMapQuest::AddBossEx
$LN5@ReloadMons:

; 244  : 	{
; 245  : 		return;
; 246  : 	}
; 247  : 
; 248  : 	//memset(this->m_BossStart, 0, sizeof(this->m_BossStart));
; 249  : 	//memset(this->m_MapKillCount, 0, sizeof(this->m_MapKillCount));
; 250  : 
; 251  : 	for(int i = 0; i < this->m_Data.size(); i++)

  0007f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00081	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00084	ff 45 fc	 inc	 DWORD PTR _i$210442[ebp]
  00087	2b f1		 sub	 esi, ecx
  00089	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0008e	f7 ee		 imul	 esi
  00090	03 d6		 add	 edx, esi
  00092	c1 fa 04	 sar	 edx, 4
  00095	8b c2		 mov	 eax, edx
  00097	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009a	03 c2		 add	 eax, edx
  0009c	83 c7 1c	 add	 edi, 28			; 0000001cH
  0009f	39 45 fc	 cmp	 DWORD PTR _i$210442[ebp], eax
  000a2	72 93		 jb	 SHORT $LL18@ReloadMons
$LN19@ReloadMons:
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
$LN4@ReloadMons:
  000a6	5b		 pop	 ebx

; 267  : 
; 268  : 			//	this->GCInfo(aIndex, true, this->m_MapKillCount[lpMonster->MapNumber], quest.MonsterCount);
; 269  : 			}
; 270  : 		}
; 271  : 	}
; 272  : 
; 273  : 
; 274  : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?ReloadMonster@CMapQuest@@QAEXXZ ENDP			; CMapQuest::ReloadMonster
_TEXT	ENDS
PUBLIC	?TeleportMap@CMapQuest@@QAEXHH@Z		; CMapQuest::TeleportMap
; Function compile flags: /Ogtp
;	COMDAT ?TeleportMap@CMapQuest@@QAEXHH@Z
_TEXT	SEGMENT
_Result$ = -8						; size = 1
_MaxCount$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_Map$ = 12						; size = 4
?TeleportMap@CMapQuest@@QAEXHH@Z PROC			; CMapQuest::TeleportMap, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 278  : 	if(!g_ZtLicense.user.MapQuest)

  00003	33 d2		 xor	 edx, edx
  00005	83 ec 08	 sub	 esp, 8
  00008	38 15 eb 00 00
	00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+235, dl
  0000e	0f 84 93 00 00
	00		 je	 $LN5@TeleportMa

; 279  : 	{
; 280  : 		return;
; 281  : 	}
; 282  : 
; 283  : 	if(!OBJMAX_RANGE(aIndex) || !MAX_MAP_RANGE(Map))

  00014	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00017	3b c2		 cmp	 eax, edx
  00019	0f 8c 88 00 00
	00		 jl	 $LN5@TeleportMa
  0001f	53		 push	 ebx
  00020	33 db		 xor	 ebx, ebx
  00022	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00027	0f 9e c3	 setle	 bl
  0002a	3b da		 cmp	 ebx, edx
  0002c	74 78		 je	 SHORT $LN22@TeleportMa
  0002e	8b 45 0c	 mov	 eax, DWORD PTR _Map$[ebp]
  00031	3b c2		 cmp	 eax, edx
  00033	7c 71		 jl	 SHORT $LN22@TeleportMa
  00035	33 db		 xor	 ebx, ebx
  00037	83 f8 52	 cmp	 eax, 82			; 00000052H
  0003a	0f 9e c3	 setle	 bl
  0003d	3b da		 cmp	 ebx, edx
  0003f	74 65		 je	 SHORT $LN22@TeleportMa

; 289  : 	int MaxCount = 0;
; 290  : 
; 291  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00041	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00043	56		 push	 esi
  00044	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00047	2b f3		 sub	 esi, ebx
  00049	88 55 f8	 mov	 BYTE PTR _Result$[ebp], dl
  0004c	89 55 fc	 mov	 DWORD PTR _MaxCount$[ebp], edx
  0004f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00054	f7 ee		 imul	 esi
  00056	03 d6		 add	 edx, esi
  00058	c1 fa 04	 sar	 edx, 4
  0005b	8b c2		 mov	 eax, edx
  0005d	57		 push	 edi
  0005e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00061	33 ff		 xor	 edi, edi
  00063	03 c2		 add	 eax, edx
  00065	74 24		 je	 SHORT $LN21@TeleportMa

; 284  : 	{
; 285  : 		return;
; 286  : 	}
; 287  : 
; 288  : 	bool Result = false;

  00067	8b d3		 mov	 edx, ebx
  00069	8d a4 24 00 00
	00 00		 npad	 7
$LL4@TeleportMa:

; 292  : 	{
; 293  : 		MAPQUEST_DATA & quest = this->m_Data[i];
; 294  : 
; 295  : 		if(Map == quest.MapNum)

  00070	8b 75 0c	 mov	 esi, DWORD PTR _Map$[ebp]
  00073	3b 32		 cmp	 esi, DWORD PTR [edx]
  00075	74 0a		 je	 SHORT $LN19@TeleportMa

; 289  : 	int MaxCount = 0;
; 290  : 
; 291  : 	for(int i = 0; i < this->m_Data.size(); i++)

  00077	47		 inc	 edi
  00078	83 c2 1c	 add	 edx, 28			; 0000001cH
  0007b	3b f8		 cmp	 edi, eax
  0007d	72 f1		 jb	 SHORT $LL4@TeleportMa

; 292  : 	{
; 293  : 		MAPQUEST_DATA & quest = this->m_Data[i];
; 294  : 
; 295  : 		if(Map == quest.MapNum)

  0007f	eb 0a		 jmp	 SHORT $LN21@TeleportMa
$LN19@TeleportMa:

; 296  : 		{
; 297  : 			Result = true;
; 298  : 			MaxCount = quest.MonsterCount;

  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	c6 45 f8 01	 mov	 BYTE PTR _Result$[ebp], 1
  00088	89 45 fc	 mov	 DWORD PTR _MaxCount$[ebp], eax
$LN21@TeleportMa:

; 299  : 			break;
; 300  : 		}
; 301  : 	}
; 302  : 
; 303  : 	this->GCInfo(aIndex, Result, this->m_MapKillCount[Map], MaxCount);

  0008b	8b 55 fc	 mov	 edx, DWORD PTR _MaxCount$[ebp]
  0008e	8b 45 0c	 mov	 eax, DWORD PTR _Map$[ebp]
  00091	52		 push	 edx
  00092	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  00096	8b 45 f8	 mov	 eax, DWORD PTR _Result$[ebp]
  00099	52		 push	 edx
  0009a	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0009d	50		 push	 eax
  0009e	52		 push	 edx
  0009f	e8 00 00 00 00	 call	 ?GCInfo@CMapQuest@@QAEXH_NHH@Z ; CMapQuest::GCInfo
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
$LN22@TeleportMa:
  000a6	5b		 pop	 ebx
$LN5@TeleportMa:

; 304  : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 08 00	 ret	 8
?TeleportMap@CMapQuest@@QAEXHH@Z ENDP			; CMapQuest::TeleportMap
_TEXT	ENDS
PUBLIC	?LoadMonsterPos@CMapQuest@@QAEXXZ		; CMapQuest::LoadMonsterPos
; Function compile flags: /Ogtp
;	COMDAT ?LoadMonsterPos@CMapQuest@@QAEXXZ
_TEXT	SEGMENT
_n$210470 = -8						; size = 4
tv278 = -4						; size = 4
?LoadMonsterPos@CMapQuest@@QAEXXZ PROC			; CMapQuest::LoadMonsterPos, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 308  : 	for( int n = 0; n < this->m_Data.size(); n++ )

  0000a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000d	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0000f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00014	f7 e9		 imul	 ecx
  00016	03 d1		 add	 edx, ecx
  00018	c1 fa 04	 sar	 edx, 4
  0001b	8b c2		 mov	 eax, edx
  0001d	33 f6		 xor	 esi, esi
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
  00024	89 75 f8	 mov	 DWORD PTR _n$210470[ebp], esi
  00027	0f 84 dc 00 00
	00		 je	 $LN7@LoadMonste
  0002d	89 75 fc	 mov	 DWORD PTR tv278[ebp], esi
  00030	53		 push	 ebx
$LL23@LoadMonste:

; 309  : 	{
; 310  : 		MAPQUEST_DATA & quest = this->m_Data[n];

  00031	8b 37		 mov	 esi, DWORD PTR [edi]
  00033	03 75 fc	 add	 esi, DWORD PTR tv278[ebp]

; 311  : 
; 312  : 		if ( MAX_MAP_RANGE(quest.MapNum) == FALSE ) 

  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	85 c0		 test	 eax, eax
  0003a	0f 88 9d 00 00
	00		 js	 $LN8@LoadMonste
  00040	33 c9		 xor	 ecx, ecx
  00042	83 f8 52	 cmp	 eax, 82			; 00000052H
  00045	0f 9e c1	 setle	 cl
  00048	8b c1		 mov	 eax, ecx
  0004a	85 c0		 test	 eax, eax
  0004c	0f 84 8b 00 00
	00		 je	 $LN8@LoadMonste

; 313  : 		{
; 314  : 			continue;
; 315  : 		}
; 316  : 
; 317  : 		int iMobPos = this->GetMonsterPos(quest.BossClass, quest.MapNum, 0, 0);

  00052	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  00055	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	52		 push	 edx
  0005e	50		 push	 eax
  0005f	8b cf		 mov	 ecx, edi
  00061	e8 00 00 00 00	 call	 ?GetMonsterPos@CMapQuest@@QAEHGEEE@Z ; CMapQuest::GetMonsterPos

; 318  : 
; 319  : 		this->m_Boss[quest.MapNum].sIndex = -1;

  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	8d 8c 49 d8 00
	00 00		 lea	 ecx, DWORD PTR [ecx+ecx*2+216]
  0006f	83 ca ff	 or	 edx, -1
  00072	66 89 14 4f	 mov	 WORD PTR [edi+ecx*2], dx

; 320  : 		this->m_Boss[quest.MapNum].sPos = iMobPos;

  00076	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00078	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0007b	66 89 84 4f b2
	01 00 00	 mov	 WORD PTR [edi+ecx*2+434], ax

; 321  : 
; 322  : 		if(iMobPos >= 0)

  00083	85 c0		 test	 eax, eax
  00085	78 56		 js	 SHORT $LN8@LoadMonste

; 323  : 		{
; 324  : 			for(int i = 0; i < quest.OrcCount; i++)

  00087	33 db		 xor	 ebx, ebx
  00089	39 5e 18	 cmp	 DWORD PTR [esi+24], ebx
  0008c	7e 48		 jle	 SHORT $LN2@LoadMonste
  0008e	8b ff		 npad	 2
$LL22@LoadMonste:

; 325  : 			{
; 326  : 				iMobPos = this->GetMonsterPos(quest.OrcClass, quest.MapNum, 0, 0);

  00090	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  00093	0f b7 46 14	 movzx	 eax, WORD PTR [esi+20]
  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	52		 push	 edx
  0009c	50		 push	 eax
  0009d	8b cf		 mov	 ecx, edi
  0009f	e8 00 00 00 00	 call	 ?GetMonsterPos@CMapQuest@@QAEHGEEE@Z ; CMapQuest::GetMonsterPos

; 327  : 
; 328  : 				if(iMobPos >= 0)

  000a4	85 c0		 test	 eax, eax
  000a6	78 28		 js	 SHORT $LN3@LoadMonste

; 329  : 				{
; 330  : 					this->m_Monster[quest.MapNum][i].sIndex = -1;

  000a8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000aa	6b c9 64	 imul	 ecx, 100		; 00000064H
  000ad	8d 8c 19 9b 00
	00 00		 lea	 ecx, DWORD PTR [ecx+ebx+155]
  000b4	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  000b7	83 c9 ff	 or	 ecx, -1
  000ba	66 89 0c 57	 mov	 WORD PTR [edi+edx*2], cx

; 331  : 					this->m_Monster[quest.MapNum][i].sPos = iMobPos;

  000be	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c0	6b c9 64	 imul	 ecx, 100		; 00000064H
  000c3	03 cb		 add	 ecx, ebx
  000c5	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  000c8	66 89 84 57 a4
	03 00 00	 mov	 WORD PTR [edi+edx*2+932], ax
$LN3@LoadMonste:

; 323  : 		{
; 324  : 			for(int i = 0; i < quest.OrcCount; i++)

  000d0	43		 inc	 ebx
  000d1	3b 5e 18	 cmp	 ebx, DWORD PTR [esi+24]
  000d4	7c ba		 jl	 SHORT $LL22@LoadMonste
$LN2@LoadMonste:

; 332  : 				}
; 333  : 			}
; 334  : 
; 335  : 			this->m_MonsterPosLoaded = true;

  000d6	c6 87 2a c6 00
	00 01		 mov	 BYTE PTR [edi+50730], 1
$LN8@LoadMonste:

; 308  : 	for( int n = 0; n < this->m_Data.size(); n++ )

  000dd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e0	2b 0f		 sub	 ecx, DWORD PTR [edi]
  000e2	8b 75 f8	 mov	 esi, DWORD PTR _n$210470[ebp]
  000e5	83 45 fc 1c	 add	 DWORD PTR tv278[ebp], 28 ; 0000001cH
  000e9	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000ee	f7 e9		 imul	 ecx
  000f0	03 d1		 add	 edx, ecx
  000f2	c1 fa 04	 sar	 edx, 4
  000f5	8b c2		 mov	 eax, edx
  000f7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000fa	46		 inc	 esi
  000fb	03 c2		 add	 eax, edx
  000fd	89 75 f8	 mov	 DWORD PTR _n$210470[ebp], esi
  00100	3b f0		 cmp	 esi, eax
  00102	0f 82 29 ff ff
	ff		 jb	 $LL23@LoadMonste
  00108	5b		 pop	 ebx
$LN7@LoadMonste:
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi

; 336  : 		}
; 337  : 	}
; 338  : }

  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?LoadMonsterPos@CMapQuest@@QAEXXZ ENDP			; CMapQuest::LoadMonsterPos
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@V?$allocator@UMAPQUEST_DATA@@@1@@Z ; std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@V?$allocator@UMAPQUEST_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@V?$allocator@UMAPQUEST_DATA@@@1@@Z PROC ; std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@V?$allocator@UMAPQUEST_DATA@@@1@@Z ENDP ; std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEII@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1275 : 		size_type _Capacity = capacity();

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]
  00009	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000e	f7 ee		 imul	 esi
  00010	03 d6		 add	 edx, esi
  00012	c1 fa 04	 sar	 edx, 4
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0001c	8b c8		 mov	 ecx, eax
  0001e	d1 e9		 shr	 ecx, 1
  00020	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00025	2b d1		 sub	 edx, ecx
  00027	5e		 pop	 esi
  00028	3b d0		 cmp	 edx, eax
  0002a	73 04		 jae	 SHORT $LN4@Grow_to
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00030	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00035	3b c1		 cmp	 eax, ecx
  00037	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00039	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@IPAU1@@Z ; std::_Allocate<MAPQUEST_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T211858 = -12						; size = 12
$T211863 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@IPAU1@@Z PROC ; std::_Allocate<MAPQUEST_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 4a		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 1a		 ja	 SHORT $LN1@Allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	2b c1		 sub	 eax, ecx
  00020	03 c0		 add	 eax, eax
  00022	03 c0		 add	 eax, eax
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002f	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00031	8d 4d 08	 lea	 ecx, DWORD PTR $T211863[ebp]
  00034	51		 push	 ecx
  00035	8d 4d f4	 lea	 ecx, DWORD PTR $T211858[ebp]
  00038	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T211863[ebp], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 55 f4	 lea	 edx, DWORD PTR $T211858[ebp]
  0004c	52		 push	 edx
  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T211858[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UMAPQUEST_DATA@@@std@@YAPAUMAPQUEST_DATA@@IPAU1@@Z ENDP ; std::_Allocate<MAPQUEST_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@ABU3@@Z ; std::allocator<MAPQUEST_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@ABU3@@Z PROC ; std::allocator<MAPQUEST_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN5@construct@2:
  00017	5f		 pop	 edi

; 198  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@ABU3@@Z ENDP ; std::allocator<MAPQUEST_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<MAPQUEST_DATA *,MAPQUEST_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<MAPQUEST_DATA *,MAPQUEST_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN1@Move
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 1c	 add	 edx, 28			; 0000001cH
  0001a	b9 07 00 00 00	 mov	 ecx, 7
  0001f	83 c0 1c	 add	 eax, 28			; 0000001cH
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL3@Move
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN1@Move:
  0002a	5b		 pop	 ebx

; 2515 : 	return (_Dest);
; 2516 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<MAPQUEST_DATA *,MAPQUEST_DATA *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@@Z ; std::allocator<MAPQUEST_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@@Z PROC ; std::allocator<MAPQUEST_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@@Z ENDP ; std::allocator<MAPQUEST_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@$$QAU3@@Z ; std::allocator<MAPQUEST_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@$$QAU3@@Z PROC ; std::allocator<MAPQUEST_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@3:
  00017	5f		 pop	 edi

; 203  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UMAPQUEST_DATA@@@std@@QAEXPAUMAPQUEST_DATA@@$$QAU3@@Z ENDP ; std::allocator<MAPQUEST_DATA>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Vector_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Vector_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QAE@PAUMAPQUEST_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::_Vector_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEPAUMAPQUEST_DATA@@I@Z ; std::allocator<MAPQUEST_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEPAUMAPQUEST_DATA@@I@Z
_TEXT	SEGMENT
$T211972 = -12						; size = 12
$T211964 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEPAUMAPQUEST_DATA@@I@Z PROC ; std::allocator<MAPQUEST_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 4a		 je	 SHORT $LN1@allocate
  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 1a		 ja	 SHORT $LN3@allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	2b c1		 sub	 eax, ecx
  00020	03 c0		 add	 eax, eax
  00022	03 c0		 add	 eax, eax
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  00031	8d 4d 08	 lea	 ecx, DWORD PTR $T211964[ebp]
  00034	51		 push	 ecx
  00035	8d 4d f4	 lea	 ecx, DWORD PTR $T211972[ebp]
  00038	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T211964[ebp], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 55 f4	 lea	 edx, DWORD PTR $T211972[ebp]
  0004c	52		 push	 edx
  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T211972[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEPAUMAPQUEST_DATA@@I@Z ENDP ; std::allocator<MAPQUEST_DATA>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN9@Cons_val@2:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00@Z ; std::_Move<MAPQUEST_DATA *,MAPQUEST_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00@Z PROC ; std::_Move<MAPQUEST_DATA *,MAPQUEST_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN5@Move@2
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL7@Move@2:
  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 1c	 add	 edx, 28			; 0000001cH
  0001a	b9 07 00 00 00	 mov	 ecx, 7
  0001f	83 c0 1c	 add	 eax, 28			; 0000001cH
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL7@Move@2
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN5@Move@2:
  0002a	5b		 pop	 ebx

; 2536 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUMAPQUEST_DATA@@PAU1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00@Z ENDP ; std::_Move<MAPQUEST_DATA *,MAPQUEST_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@@Z ; std::_Dest_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@@Z PROC ; std::_Dest_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@U3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@U3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@U3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@3:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@U3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<MAPQUEST_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<MAPQUEST_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<MAPQUEST_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@U1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@U1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@U1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@U3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA>
  0001e	83 c6 1c	 add	 esi, 28			; 0000001cH
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 1c	 add	 edi, 28			; 0000001cH
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@U1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<MAPQUEST_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<MAPQUEST_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAXPAUMAPQUEST_DATA@@0AAV?$allocator@UMAPQUEST_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<MAPQUEST_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@@Z ; std::_Uninitialized_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$212159 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@@Z PROC ; std::_Uninitialized_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$212159[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@U1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXPAUMAPQUEST_DATA@@0@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXPAUMAPQUEST_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXPAUMAPQUEST_DATA@@0@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXPAUMAPQUEST_DATA@@0@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUMAPQUEST_DATA@@@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEPAUMAPQUEST_DATA@@PAU2@00@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Umove<MAPQUEST_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUMAPQUEST_DATA@@@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEPAUMAPQUEST_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$212181 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUMAPQUEST_DATA@@@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEPAUMAPQUEST_DATA@@PAU2@00@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Umove<MAPQUEST_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$212181[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@U1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUMAPQUEST_DATA@@@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEPAUMAPQUEST_DATA@@PAU2@00@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Umove<MAPQUEST_DATA *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@0@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	89 1e		 mov	 DWORD PTR [esi], ebx
  00014	3b da		 cmp	 ebx, edx
  00016	74 27		 je	 SHORT $LN39@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 1d		 je	 SHORT $LN30@erase
  0001f	57		 push	 edi
$LL32@erase:
  00020	8b f2		 mov	 esi, edx
  00022	8b fb		 mov	 edi, ebx
  00024	83 c2 1c	 add	 edx, 28			; 0000001cH
  00027	b9 07 00 00 00	 mov	 ecx, 7
  0002c	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0002f	f3 a5		 rep movsd
  00031	3b d0		 cmp	 edx, eax
  00033	75 eb		 jne	 SHORT $LL32@erase
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0003c	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN39@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1214 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXXZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$210794 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$212352 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00036	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0004c	f7 e9		 imul	 ecx
  0004e	03 d1		 add	 edx, ecx
  00050	c1 fa 04	 sar	 edx, 4
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00058	03 c2		 add	 eax, edx
  0005a	3b c3		 cmp	 eax, ebx
  0005c	73 79		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005e	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00061	53		 push	 ebx
  00062	8b cf		 mov	 ecx, edi
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UMAPQUEST_DATA@@@std@@QAEPAUMAPQUEST_DATA@@I@Z ; std::allocator<MAPQUEST_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00069	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$212352[ebp]
  0006c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006f	8b 16		 mov	 edx, DWORD PTR [esi]
  00071	53		 push	 ebx
  00072	6a 00		 push	 0
  00074	57		 push	 edi
  00075	50		 push	 eax
  00076	51		 push	 ecx
  00077	52		 push	 edx
  00078	89 45 ec	 mov	 DWORD PTR __Ptr$210794[ebp], eax
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00082	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMAPQUEST_DATA@@PAU1@V?$allocator@UMAPQUEST_DATA@@@std@@U1@@std@@YAPAUMAPQUEST_DATA@@PAU1@00AAV?$allocator@UMAPQUEST_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MAPQUEST_DATA *,MAPQUEST_DATA *,std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00087	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00089	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008c	2b cb		 sub	 ecx, ebx
  0008e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00093	f7 e9		 imul	 ecx
  00095	03 d1		 add	 edx, ecx
  00097	c1 fa 04	 sar	 edx, 4
  0009a	8b fa		 mov	 edi, edx
  0009c	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0009f	83 c4 18	 add	 esp, 24			; 00000018H
  000a2	03 fa		 add	 edi, edx

; 761  : 			if (this->_Myfirst != 0)

  000a4	85 db		 test	 ebx, ebx
  000a6	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000b1	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000b4	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  000bb	2b c8		 sub	 ecx, eax
  000bd	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$210794[ebp]
  000c0	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000c3	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  000ca	2b cf		 sub	 ecx, edi
  000cc	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000cf	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000d2	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000d5	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e1	59		 pop	 ecx
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000eb	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$210794[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000f4	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000f7	6a 00		 push	 0
  000f9	6a 00		 push	 0
  000fb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  00100	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::reserve
PUBLIC	??1?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::~vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::~vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::~vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXXZ ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	53		 push	 ebx
  00008	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 2c		 je	 SHORT $LN19@clear
  00011	8b c2		 mov	 eax, edx
  00013	3b d2		 cmp	 edx, edx
  00015	74 23		 je	 SHORT $LN48@clear
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL50@clear:
  00020	8b f0		 mov	 esi, eax
  00022	8b fb		 mov	 edi, ebx
  00024	83 c0 1c	 add	 eax, 28			; 0000001cH
  00027	b9 07 00 00 00	 mov	 ecx, 7
  0002c	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0002f	f3 a5		 rep movsd
  00031	3b c2		 cmp	 eax, edx
  00033	75 eb		 jne	 SHORT $LL50@clear
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN48@clear:
  0003a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN19@clear:
  0003d	5b		 pop	 ebx

; 1219 : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?clear@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1291 : 		size_type _Size = size();

  00004	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	2b f3		 sub	 esi, ebx
  0000c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00011	f7 ee		 imul	 esi

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	03 d6		 add	 edx, esi
  00018	c1 fa 04	 sar	 edx, 4
  0001b	8b f2		 mov	 esi, edx
  0001d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00020	03 f2		 add	 esi, edx
  00022	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00027	2b d0		 sub	 edx, eax
  00029	57		 push	 edi
  0002a	3b d6		 cmp	 edx, esi
  0002c	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00033	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00038	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0003b	03 f0		 add	 esi, eax
  0003d	2b fb		 sub	 edi, ebx
  0003f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00044	f7 ef		 imul	 edi
  00046	03 d7		 add	 edx, edi
  00048	c1 fa 04	 sar	 edx, 4
  0004b	8b c2		 mov	 eax, edx
  0004d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00050	03 c2		 add	 eax, edx
  00052	3b f0		 cmp	 esi, eax
  00054	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00056	8b d0		 mov	 edx, eax
  00058	d1 ea		 shr	 edx, 1
  0005a	bf 49 92 24 09	 mov	 edi, 153391689		; 09249249H
  0005f	2b fa		 sub	 edi, edx
  00061	3b f8		 cmp	 edi, eax
  00063	73 04		 jae	 SHORT $LN23@Reserve
  00065	33 c0		 xor	 eax, eax
  00067	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00069	03 c2		 add	 eax, edx
$LN24@Reserve:
  0006b	3b c6		 cmp	 eax, esi
  0006d	73 02		 jae	 SHORT $LN20@Reserve
  0006f	8b c6		 mov	 eax, esi
$LN20@Reserve:
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXI@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::reserve
$LN1@Reserve:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 1298 : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CMapQuest@@QAE@XZ				; CMapQuest::CMapQuest
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapquest.cpp
;	COMDAT ??0CMapQuest@@QAE@XZ
_TEXT	SEGMENT
??0CMapQuest@@QAE@XZ PROC				; CMapQuest::CMapQuest, COMDAT
; _this$ = ecx

; 16   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx
  00005	33 ff		 xor	 edi, edi

; 17   : 	this->m_Data.clear();
; 18   : 	memset(this->m_MapKillCount, 0, sizeof(this->m_MapKillCount));

  00007	68 4c 01 00 00	 push	 332			; 0000014cH
  0000c	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	89 3e		 mov	 DWORD PTR [esi], edi
  00013	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00016	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00019	e8 00 00 00 00	 call	 _memset

; 19   : 	memset(this->m_BossStart, 0, sizeof(this->m_BossStart));

  0001e	6a 53		 push	 83			; 00000053H
  00020	8d 8e 5c 01 00
	00		 lea	 ecx, DWORD PTR [esi+348]
  00026	57		 push	 edi
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _memset
  0002d	83 c4 18	 add	 esp, 24			; 00000018H
  00030	8d 86 a2 03 00
	00		 lea	 eax, DWORD PTR [esi+930]
  00036	8d 96 b0 01 00
	00		 lea	 edx, DWORD PTR [esi+432]
  0003c	bf 53 00 00 00	 mov	 edi, 83			; 00000053H
$LL78@CMapQuest:

; 22   : 	{
; 23   : 		this->m_Boss[m].sPos = -1;

  00041	83 c9 ff	 or	 ecx, -1
  00044	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 24   : 		this->m_Boss[m].sIndex = -1;

  00048	0b c9		 or	 ecx, ecx
  0004a	66 89 0a	 mov	 WORD PTR [edx], cx
  0004d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
$LL3@CMapQuest:

; 25   : 
; 26   : 		for(int i = 0; i < 100; i++)
; 27   : 		{
; 28   : 			this->m_Monster[m][i].sPos = -1;

  00052	83 cb ff	 or	 ebx, -1
  00055	66 89 58 02	 mov	 WORD PTR [eax+2], bx

; 29   : 			this->m_Monster[m][i].sIndex = -1;

  00059	0b db		 or	 ebx, ebx
  0005b	66 89 18	 mov	 WORD PTR [eax], bx
  0005e	83 c0 06	 add	 eax, 6
  00061	49		 dec	 ecx
  00062	75 ee		 jne	 SHORT $LL3@CMapQuest

; 20   : 
; 21   : 	for(int m = 0; m < MAX_NUMBER_MAP; m++)

  00064	83 c2 06	 add	 edx, 6
  00067	4f		 dec	 edi
  00068	75 d7		 jne	 SHORT $LL78@CMapQuest

; 30   : 		}
; 31   : 	}
; 32   : }

  0006a	5f		 pop	 edi
  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	c3		 ret	 0
??0CMapQuest@@QAE@XZ ENDP				; CMapQuest::CMapQuest
_TEXT	ENDS
PUBLIC	??1CMapQuest@@QAE@XZ				; CMapQuest::~CMapQuest
; Function compile flags: /Ogtp
;	COMDAT ??1CMapQuest@@QAE@XZ
_TEXT	SEGMENT
??1CMapQuest@@QAE@XZ PROC				; CMapQuest::~CMapQuest, COMDAT
; _this$ = ecx

; 35   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 36   : }

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN11@CMapQuest@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN11@CMapQuest@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi
  00027	c3		 ret	 0
??1CMapQuest@@QAE@XZ ENDP				; CMapQuest::~CMapQuest
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXABUMAPQUEST_DATA@@@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXABUMAPQUEST_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXABUMAPQUEST_DATA@@@Z PROC ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 52		 jae	 SHORT $LN4@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 4c		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001e	f7 ef		 imul	 edi
  00020	03 d7		 add	 edx, edi
  00022	c1 fa 04	 sar	 edx, 4
  00025	8b fa		 mov	 edi, edx
  00027	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002a	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00031	6a 01		 push	 1
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00043	2b c7		 sub	 eax, edi
  00045	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@AAU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00059	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00063	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00066	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00068	6a 01		 push	 1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00071	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00074	57		 push	 edi
  00075	52		 push	 edx
  00076	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UMAPQUEST_DATA@@@std@@UMAPQUEST_DATA@@ABU3@@std@@YAXAAV?$allocator@UMAPQUEST_DATA@@@0@PAUMAPQUEST_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<MAPQUEST_DATA>,MAPQUEST_DATA,MAPQUEST_DATA const &>
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00082	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?push_back@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXABUMAPQUEST_DATA@@@Z ENDP ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0CH@OECLMHKE@?$FLMapQuest?$FN?5?$FL?$CFd?$FN?5Quest?5loaded?5fro@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CMapQuest@@QAEXPAD@Z			; CMapQuest::Read
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	_fclose:PROC
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CH@OECLMHKE@?$FLMapQuest?$FN?5?$FL?$CFd?$FN?5Quest?5loaded?5fro@
CONST	SEGMENT
??_C@_0CH@OECLMHKE@?$FLMapQuest?$FN?5?$FL?$CFd?$FN?5Quest?5loaded?5fro@ DB '['
	DB	'MapQuest] [%d] Quest loaded from list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapquest.cpp
CONST	ENDS
;	COMDAT ?Read@CMapQuest@@QAEXPAD@Z
_TEXT	SEGMENT
_list$210380 = -32					; size = 28
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Read@CMapQuest@@QAEXPAD@Z PROC				; CMapQuest::Read, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00014	57		 push	 edi

; 53   : 	int Token;
; 54   : 
; 55   : 	SMDFile = fopen(filename, "r");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001a	56		 push	 esi
  0001b	8b f9		 mov	 edi, ecx
  0001d	e8 00 00 00 00	 call	 _fopen
  00022	83 c4 08	 add	 esp, 8
  00025	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 56   : 
; 57   : 	if( SMDFile == NULL )

  0002a	85 c0		 test	 eax, eax
  0002c	75 28		 jne	 SHORT $LN12@Read

; 58   : 	{
; 59   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), filename);

  0002e	56		 push	 esi
  0002f	6a 70		 push	 112			; 00000070H
  00031	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00036	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00041	83 c4 08	 add	 esp, 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 105  : }

  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN12@Read:

; 60   : 		return;
; 61   : 	}
; 62   : 
; 63   : 	while(true) 
; 64   : 	{
; 65   : 		Token = GetToken();

  00056	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 66   : 
; 67   : 		if( Token == END)

  0005b	83 f8 02	 cmp	 eax, 2
  0005e	0f 84 a2 00 00
	00		 je	 $LN13@Read
$LL4@Read:

; 68   : 		{
; 69   : 			break;
; 70   : 		}
; 71   : 
; 72   : 		if( Token != NUMBER )

  00064	83 f8 01	 cmp	 eax, 1
  00067	0f 85 8b 00 00
	00		 jne	 $LN14@Read

; 73   : 		{
; 74   : 			continue;
; 75   : 		}
; 76   : 
; 77   : 		MAPQUEST_DATA list;
; 78   : 		
; 79   : 		list.MapNum = TokenNumber;

  0006d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00073	e8 00 00 00 00	 call	 __ftol2_sse
  00078	89 45 e0	 mov	 DWORD PTR _list$210380[ebp], eax

; 80   : 
; 81   : 		Token = GetToken();

  0007b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 		list.MonsterCount = TokenNumber;

  00080	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00086	e8 00 00 00 00	 call	 __ftol2_sse
  0008b	89 45 e4	 mov	 DWORD PTR _list$210380[ebp+4], eax

; 83   : 
; 84   : 		Token = GetToken();

  0008e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 		list.BossClass = TokenNumber;

  00093	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00099	e8 00 00 00 00	 call	 __ftol2_sse
  0009e	89 45 e8	 mov	 DWORD PTR _list$210380[ebp+8], eax

; 86   : 
; 87   : 		Token = GetToken();

  000a1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 		list.BossX = TokenNumber;

  000a6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ac	e8 00 00 00 00	 call	 __ftol2_sse
  000b1	89 45 ec	 mov	 DWORD PTR _list$210380[ebp+12], eax

; 89   : 
; 90   : 		Token = GetToken();

  000b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 		list.BossY = TokenNumber;

  000b9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000bf	e8 00 00 00 00	 call	 __ftol2_sse
  000c4	89 45 f0	 mov	 DWORD PTR _list$210380[ebp+16], eax

; 92   : 
; 93   : 		Token = GetToken();

  000c7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 94   : 		list.OrcClass = TokenNumber;

  000cc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d2	e8 00 00 00 00	 call	 __ftol2_sse
  000d7	89 45 f4	 mov	 DWORD PTR _list$210380[ebp+20], eax

; 95   : 
; 96   : 		Token = GetToken();

  000da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 		list.OrcCount = TokenNumber;

  000df	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e5	e8 00 00 00 00	 call	 __ftol2_sse
  000ea	89 45 f8	 mov	 DWORD PTR _list$210380[ebp+24], eax

; 98   : 
; 99   : 		this->m_Data.push_back(list);

  000ed	8d 45 e0	 lea	 eax, DWORD PTR _list$210380[ebp]
  000f0	50		 push	 eax
  000f1	8b cf		 mov	 ecx, edi
  000f3	e8 00 00 00 00	 call	 ?push_back@?$vector@UMAPQUEST_DATA@@V?$allocator@UMAPQUEST_DATA@@@std@@@std@@QAEXABUMAPQUEST_DATA@@@Z ; std::vector<MAPQUEST_DATA,std::allocator<MAPQUEST_DATA> >::push_back
$LN14@Read:

; 66   : 
; 67   : 		if( Token == END)

  000f8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000fd	83 f8 02	 cmp	 eax, 2
  00100	0f 85 5e ff ff
	ff		 jne	 $LL4@Read
$LN13@Read:

; 100  : 	}
; 101  : 
; 102  : 	fclose(SMDFile);	

  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _fclose

; 103  : 
; 104  : 	LogAddTD("[MapQuest] [%d] Quest loaded from list", this->m_Data.size());

  00112	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00115	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00117	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0011c	f7 e9		 imul	 ecx
  0011e	03 d1		 add	 edx, ecx
  00120	c1 fa 04	 sar	 edx, 4
  00123	8b c2		 mov	 eax, edx
  00125	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00128	03 c2		 add	 eax, edx
  0012a	50		 push	 eax
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OECLMHKE@?$FLMapQuest?$FN?5?$FL?$CFd?$FN?5Quest?5loaded?5fro@
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 105  : }

  00136	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013c	5f		 pop	 edi
  0013d	33 cd		 xor	 ecx, ebp
  0013f	5e		 pop	 esi
  00140	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 04 00	 ret	 4
?Read@CMapQuest@@QAEXPAD@Z ENDP				; CMapQuest::Read
_TEXT	ENDS
PUBLIC	??_C@_0BE@BLKKLPJO@ZtData?2MapQuest?4ini?$AA@	; `string'
PUBLIC	?Load@CMapQuest@@QAEXXZ				; CMapQuest::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BE@BLKKLPJO@ZtData?2MapQuest?4ini?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
CONST	SEGMENT
??_C@_0BE@BLKKLPJO@ZtData?2MapQuest?4ini?$AA@ DB 'ZtData\MapQuest.ini', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapquest.cpp
CONST	ENDS
;	COMDAT ?Load@CMapQuest@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CMapQuest@@QAEXXZ PROC				; CMapQuest::Load, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 40   : 	if(!g_ZtLicense.user.MapQuest)

  00004	80 3d eb 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+235, 0
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00011	74 45		 je	 SHORT $LN2@Load

; 41   : 	{
; 42   : 		return;
; 43   : 	}
; 44   : 
; 45   : 
; 46   : 
; 47   : 	this->m_Data.clear();

  00013	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00019	3b da		 cmp	 ebx, edx
  0001b	74 23		 je	 SHORT $LN22@Load
  0001d	8b c2		 mov	 eax, edx
  0001f	3b d2		 cmp	 edx, edx
  00021	74 1a		 je	 SHORT $LN51@Load
  00023	57		 push	 edi
$LL53@Load:
  00024	8b f0		 mov	 esi, eax
  00026	8b fb		 mov	 edi, ebx
  00028	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002b	b9 07 00 00 00	 mov	 ecx, 7
  00030	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00033	f3 a5		 rep movsd
  00035	3b c2		 cmp	 eax, edx
  00037	75 eb		 jne	 SHORT $LL53@Load
  00039	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0003c	5f		 pop	 edi
$LN51@Load:
  0003d	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
$LN22@Load:

; 48   : 	this->Read(gDirPath.GetNewPath("ZtData\\MapQuest.ini"));

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLKKLPJO@ZtData?2MapQuest?4ini?$AA@
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0004a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?Read@CMapQuest@@QAEXPAD@Z ; CMapQuest::Read
  00057	5b		 pop	 ebx
$LN2@Load:
  00058	5e		 pop	 esi

; 49   : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?Load@CMapQuest@@QAEXXZ ENDP				; CMapQuest::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MapQuest@@YAXXZ
text$yc	SEGMENT
??__Eg_MapQuest@@YAXXZ PROC				; `dynamic initializer for 'g_MapQuest'', COMDAT

; 13   : CMapQuest g_MapQuest;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapQuest@@3VCMapQuest@@A ; g_MapQuest
  00005	e8 00 00 00 00	 call	 ??0CMapQuest@@QAE@XZ	; CMapQuest::CMapQuest
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MapQuest@@YAXXZ ; `dynamic atexit destructor for 'g_MapQuest''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MapQuest@@YAXXZ ENDP				; `dynamic initializer for 'g_MapQuest''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MapQuest@@YAXXZ
text$yd	SEGMENT
??__Fg_MapQuest@@YAXXZ PROC				; `dynamic atexit destructor for 'g_MapQuest'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapQuest@@3VCMapQuest@@A ; g_MapQuest
  00005	e9 00 00 00 00	 jmp	 ??1CMapQuest@@QAE@XZ	; CMapQuest::~CMapQuest
??__Fg_MapQuest@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_MapQuest''
text$yd	ENDS
PUBLIC	?g_MapQuest@@3VCMapQuest@@A			; g_MapQuest
_BSS	SEGMENT
?g_MapQuest@@3VCMapQuest@@A DB 0c62cH DUP (?)		; g_MapQuest
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MapQuest$initializer$ DD FLAT:??__Eg_MapQuest@@YAXXZ
CRT$XCU	ENDS
END
