; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MapTeleport.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
; Function compile flags: /Ogtp
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 		lpBuf[0] = 0xC2;
; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00009	8b d1		 mov	 edx, ecx
  0000b	c1 ea 08	 shr	 edx, 8
  0000e	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 152  : 		lpBuf[2] = SET_NUMBERL(size);
; 153  : 		lpBuf[3] = head;
; 154  : 		lpBuf[4] = sub;

  00011	8a 55 10	 mov	 dl, BYTE PTR _sub$[ebp]
  00014	88 48 02	 mov	 BYTE PTR [eax+2], cl
  00017	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0001a	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H
  0001d	88 48 03	 mov	 BYTE PTR [eax+3], cl
  00020	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 155  : 	}

  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??0CMapTeleport@@QAE@XZ				; CMapTeleport::CMapTeleport
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapteleport.cpp
;	COMDAT ??0CMapTeleport@@QAE@XZ
_TEXT	SEGMENT
??0CMapTeleport@@QAE@XZ PROC				; CMapTeleport::CMapTeleport, COMDAT
; _this$ = ecx

; 16   : {

  00000	8b c1		 mov	 eax, ecx

; 17   : 	this->m_LoadedCount = 0;

  00002	c7 80 e0 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3040], 0

; 18   : }

  0000c	c3		 ret	 0
??0CMapTeleport@@QAE@XZ ENDP				; CMapTeleport::CMapTeleport
_TEXT	ENDS
PUBLIC	??1CMapTeleport@@QAE@XZ				; CMapTeleport::~CMapTeleport
; Function compile flags: /Ogtp
;	COMDAT ??1CMapTeleport@@QAE@XZ
_TEXT	SEGMENT
??1CMapTeleport@@QAE@XZ PROC				; CMapTeleport::~CMapTeleport, COMDAT
; _this$ = ecx

; 22   : }

  00000	c3		 ret	 0
??1CMapTeleport@@QAE@XZ ENDP				; CMapTeleport::~CMapTeleport
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Read@CMapTeleport@@QAEXPAD@Z			; CMapTeleport::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@CMapTeleport@@QAEXPAD@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
?Read@CMapTeleport@@QAEXPAD@Z PROC			; CMapTeleport::Read, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 38   : 	SMDFile = fopen(File, "r");

  00005	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000d	57		 push	 edi
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8
  00018	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 39   : 
; 40   : 	if(SMDFile == NULL)

  0001d	85 c0		 test	 eax, eax
  0001f	75 20		 jne	 SHORT $LN9@Read

; 41   : 	{
; 42   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), File);

  00021	57		 push	 edi
  00022	68 c6 01 00 00	 push	 454			; 000001c6H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 08	 add	 esp, 8
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 140  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN9@Read:

; 43   : 
; 44   : 		return;
; 45   : 	}
; 46   : 
; 47   : 	int Token;
; 48   : 
; 49   : 	int type = -1;
; 50   : 
; 51   : 	while(true)
; 52   : 	{
; 53   : 	    Token = GetToken();

  00041	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 54   : 
; 55   :         if(Token == END)

  00046	83 f8 02	 cmp	 eax, 2
  00049	0f 84 96 02 00
	00		 je	 $LN18@Read
  0004f	53		 push	 ebx
  00050	bb 01 00 00 00	 mov	 ebx, 1
$LL8@Read:

; 56   : 		{
; 57   :             break;
; 58   : 		}
; 59   : 
; 60   : 		type = (int)TokenNumber;

  00055	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0005b	e8 00 00 00 00	 call	 __ftol2_sse
  00060	8b f8		 mov	 edi, eax
$LL5@Read:

; 61   : 
; 62   : 		while(true)
; 63   : 		{
; 64   : 			if(type == 0)

  00062	85 ff		 test	 edi, edi
  00064	75 fc		 jne	 SHORT $LL5@Read

; 65   : 			{
; 66   : 				Token = GetToken();

  00066	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 67   : 
; 68   : 				if(strcmp("end", TokenString) == 0)

  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00070	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL19@Read:
  00075	8a 10		 mov	 dl, BYTE PTR [eax]
  00077	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00079	75 1a		 jne	 SHORT $LN20@Read
  0007b	84 d2		 test	 dl, dl
  0007d	74 12		 je	 SHORT $LN21@Read
  0007f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00082	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00085	75 0e		 jne	 SHORT $LN20@Read
  00087	83 c0 02	 add	 eax, 2
  0008a	83 c1 02	 add	 ecx, 2
  0008d	84 d2		 test	 dl, dl
  0008f	75 e4		 jne	 SHORT $LL19@Read
$LN21@Read:
  00091	33 c0		 xor	 eax, eax
  00093	eb 05		 jmp	 SHORT $LN22@Read
$LN20@Read:
  00095	1b c0		 sbb	 eax, eax
  00097	83 d8 ff	 sbb	 eax, -1
$LN22@Read:
  0009a	85 c0		 test	 eax, eax
  0009c	0f 84 34 02 00
	00		 je	 $LN16@Read

; 69   : 				{
; 70   : 					break;
; 71   : 				}
; 72   : 
; 73   : 				this->m_Data[this->m_LoadedCount].MapNumber = TokenNumber;

  000a2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a8	e8 00 00 00 00	 call	 __ftol2_sse
  000ad	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  000b3	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  000b6	89 04 31	 mov	 DWORD PTR [ecx+esi], eax

; 74   : 					
; 75   : 				Token = GetToken();

  000b9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 76   : 				this->m_Data[this->m_LoadedCount].MapX1 = TokenNumber;

  000be	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c4	e8 00 00 00 00	 call	 __ftol2_sse
  000c9	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  000cf	6b d2 4c	 imul	 edx, 76			; 0000004cH
  000d2	89 44 32 04	 mov	 DWORD PTR [edx+esi+4], eax

; 77   : 				
; 78   : 				Token = GetToken();

  000d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 				this->m_Data[this->m_LoadedCount].MapY1 = TokenNumber;

  000db	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e1	e8 00 00 00 00	 call	 __ftol2_sse
  000e6	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  000ec	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  000ef	89 44 31 08	 mov	 DWORD PTR [ecx+esi+8], eax

; 80   : 				
; 81   : 				Token = GetToken();

  000f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 				this->m_Data[this->m_LoadedCount].MapX2 = TokenNumber;

  000f8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fe	e8 00 00 00 00	 call	 __ftol2_sse
  00103	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  00109	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0010c	89 44 32 0c	 mov	 DWORD PTR [edx+esi+12], eax

; 83   : 				
; 84   : 				Token = GetToken();

  00110	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 				this->m_Data[this->m_LoadedCount].MapY2 = TokenNumber;

  00115	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0011b	e8 00 00 00 00	 call	 __ftol2_sse
  00120	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  00126	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00129	89 44 31 10	 mov	 DWORD PTR [ecx+esi+16], eax

; 86   : 				
; 87   : 				Token = GetToken();

  0012d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 				this->m_Data[this->m_LoadedCount].MinLevel = TokenNumber;

  00132	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00138	e8 00 00 00 00	 call	 __ftol2_sse
  0013d	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  00143	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00146	89 44 32 14	 mov	 DWORD PTR [edx+esi+20], eax

; 89   : 				
; 90   : 				Token = GetToken();

  0014a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 				this->m_Data[this->m_LoadedCount].MaxLevel = TokenNumber;

  0014f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00155	e8 00 00 00 00	 call	 __ftol2_sse
  0015a	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  00160	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00163	89 44 31 18	 mov	 DWORD PTR [ecx+esi+24], eax

; 92   : 				
; 93   : 				Token = GetToken();

  00167	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 94   : 				this->m_Data[this->m_LoadedCount].MinReset = TokenNumber;

  0016c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00172	e8 00 00 00 00	 call	 __ftol2_sse
  00177	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  0017d	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00180	89 44 32 1c	 mov	 DWORD PTR [edx+esi+28], eax

; 95   : 				
; 96   : 				Token = GetToken();

  00184	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 				this->m_Data[this->m_LoadedCount].MaxReset = TokenNumber;

  00189	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018f	e8 00 00 00 00	 call	 __ftol2_sse
  00194	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  0019a	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0019d	89 44 31 20	 mov	 DWORD PTR [ecx+esi+32], eax

; 98   : 				
; 99   : 				Token = GetToken();

  001a1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 100  : 				this->m_Data[this->m_LoadedCount].MinGrand = TokenNumber;

  001a6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ac	e8 00 00 00 00	 call	 __ftol2_sse
  001b1	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  001b7	6b d2 4c	 imul	 edx, 76			; 0000004cH
  001ba	89 44 32 24	 mov	 DWORD PTR [edx+esi+36], eax

; 101  : 				
; 102  : 				Token = GetToken();

  001be	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 103  : 				this->m_Data[this->m_LoadedCount].MaxGrand = TokenNumber;

  001c3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c9	e8 00 00 00 00	 call	 __ftol2_sse
  001ce	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  001d4	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  001d7	89 44 31 28	 mov	 DWORD PTR [ecx+esi+40], eax

; 104  : 				
; 105  : 				Token = GetToken();

  001db	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 106  : 				this->m_Data[this->m_LoadedCount].PriceZen = TokenNumber;

  001e0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e6	e8 00 00 00 00	 call	 __ftol2_sse
  001eb	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  001f1	6b d2 4c	 imul	 edx, 76			; 0000004cH
  001f4	89 44 32 2c	 mov	 DWORD PTR [edx+esi+44], eax

; 107  : 				
; 108  : 				Token = GetToken();

  001f8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 109  : 				this->m_Data[this->m_LoadedCount].PriceWcoin = TokenNumber;

  001fd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00203	e8 00 00 00 00	 call	 __ftol2_sse
  00208	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  0020e	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00211	89 44 31 30	 mov	 DWORD PTR [ecx+esi+48], eax

; 110  : 				
; 111  : 				Token = GetToken();

  00215	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 112  : 				this->m_Data[this->m_LoadedCount].PriceCredit = TokenNumber;

  0021a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00220	e8 00 00 00 00	 call	 __ftol2_sse
  00225	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  0022b	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0022e	89 44 32 34	 mov	 DWORD PTR [edx+esi+52], eax

; 113  : 				
; 114  : 				Token = GetToken();

  00232	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 115  : 				this->m_Data[this->m_LoadedCount].NeedMaster = TokenNumber;

  00237	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023d	e8 00 00 00 00	 call	 __ftol2_sse
  00242	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  00248	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0024b	89 44 31 38	 mov	 DWORD PTR [ecx+esi+56], eax

; 116  : 				
; 117  : 				Token = GetToken();

  0024f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 118  : 				this->m_Data[this->m_LoadedCount].NeedPK = TokenNumber;

  00254	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0025a	e8 00 00 00 00	 call	 __ftol2_sse
  0025f	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  00265	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00268	89 44 32 3c	 mov	 DWORD PTR [edx+esi+60], eax

; 119  : 				
; 120  : 				Token = GetToken();

  0026c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 				this->m_Data[this->m_LoadedCount].NeedGuild = TokenNumber;

  00271	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00277	e8 00 00 00 00	 call	 __ftol2_sse
  0027c	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  00282	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00285	89 44 31 40	 mov	 DWORD PTR [ecx+esi+64], eax

; 122  : 				
; 123  : 				Token = GetToken();

  00289	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 				this->m_Data[this->m_LoadedCount].EmptyInvintory = TokenNumber;

  0028e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00294	e8 00 00 00 00	 call	 __ftol2_sse
  00299	8b 96 e0 0b 00
	00		 mov	 edx, DWORD PTR [esi+3040]
  0029f	6b d2 4c	 imul	 edx, 76			; 0000004cH
  002a2	89 44 32 44	 mov	 DWORD PTR [edx+esi+68], eax

; 125  : 
; 126  : 				Token = GetToken();

  002a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 				this->m_Data[this->m_LoadedCount].Premium = TokenNumber;

  002ab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b1	e8 00 00 00 00	 call	 __ftol2_sse
  002b6	8b 8e e0 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3040]
  002bc	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  002bf	89 44 31 48	 mov	 DWORD PTR [ecx+esi+72], eax

; 128  : 
; 129  : 				this->m_LoadedCount++;

  002c3	01 9e e0 0b 00
	00		 add	 DWORD PTR [esi+3040], ebx

; 130  : 
; 131  : 				if(this->m_LoadedCount >= MAX_MAPTELEPORT)

  002c9	83 be e0 0b 00
	00 28		 cmp	 DWORD PTR [esi+3040], 40 ; 00000028H

; 132  : 				{
; 133  : 					break;
; 134  : 				}
; 135  : 			}
; 136  : 		}

  002d0	0f 8c 8c fd ff
	ff		 jl	 $LL5@Read
$LN16@Read:

; 43   : 
; 44   : 		return;
; 45   : 	}
; 46   : 
; 47   : 	int Token;
; 48   : 
; 49   : 	int type = -1;
; 50   : 
; 51   : 	while(true)
; 52   : 	{
; 53   : 	    Token = GetToken();

  002d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 54   : 
; 55   :         if(Token == END)

  002db	83 f8 02	 cmp	 eax, 2
  002de	0f 85 71 fd ff
	ff		 jne	 $LL8@Read
  002e4	5b		 pop	 ebx
$LN18@Read:

; 137  :     }
; 138  : 
; 139  : 	fclose(SMDFile);

  002e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  002eb	52		 push	 edx
  002ec	e8 00 00 00 00	 call	 _fclose
  002f1	83 c4 04	 add	 esp, 4
  002f4	5f		 pop	 edi
  002f5	5e		 pop	 esi

; 140  : }

  002f6	5d		 pop	 ebp
  002f7	c2 04 00	 ret	 4
?Read@CMapTeleport@@QAEXPAD@Z ENDP			; CMapTeleport::Read
_TEXT	ENDS
PUBLIC	?GetCheck@CMapTeleport@@QAE_NHH@Z		; CMapTeleport::GetCheck
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?GetCheck@CMapTeleport@@QAE_NHH@Z
_TEXT	SEGMENT
tv314 = -4						; size = 4
tv316 = 8						; size = 4
_aIndex$ = 8						; size = 4
tv308 = 12						; size = 4
tv306 = 12						; size = 4
_SelectNumber$ = 12					; size = 4
?GetCheck@CMapTeleport@@QAE_NHH@Z PROC			; CMapTeleport::GetCheck, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 144  : 	if(!OBJMAX_RANGE(aIndex))

  00004	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00007	85 d2		 test	 edx, edx
  00009	78 0f		 js	 SHORT $LN35@GetCheck
  0000b	33 c0		 xor	 eax, eax
  0000d	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	75 08		 jne	 SHORT $LN27@GetCheck
$LN35@GetCheck:

; 145  : 	{
; 146  : 		return false;

  0001a	32 c0		 xor	 al, al

; 251  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
$LN27@GetCheck:
  00022	57		 push	 edi

; 147  : 	}
; 148  : 
; 149  : 	if(SelectNumber < 0 || SelectNumber >= MAX_MAPTELEPORT)

  00023	8b 7d 0c	 mov	 edi, DWORD PTR _SelectNumber$[ebp]
  00026	83 ff 27	 cmp	 edi, 39			; 00000027H
  00029	0f 87 a1 01 00
	00		 ja	 $LN25@GetCheck

; 152  : 	}
; 153  : 
; 154  : 	LPOBJ lpUser = &gObj[aIndex];
; 155  : 
; 156  : 	MAPTELEPORT_DATA * pSelectData = &this->m_Data[SelectNumber];

  0002f	56		 push	 esi
  00030	6b ff 4c	 imul	 edi, 76			; 0000004cH
  00033	8b f2		 mov	 esi, edx
  00035	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0003b	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	03 f9		 add	 edi, ecx

; 157  : 
; 158  : 	if(pSelectData->MinLevel > lpUser->Level || lpUser->Level > pSelectData->MaxLevel )

  00043	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  0004a	39 47 14	 cmp	 DWORD PTR [edi+20], eax
  0004d	0f 8f 73 01 00
	00		 jg	 $LN23@GetCheck
  00053	3b 47 18	 cmp	 eax, DWORD PTR [edi+24]
  00056	0f 8f 6a 01 00
	00		 jg	 $LN23@GetCheck

; 161  : 	}
; 162  : 
; 163  : 	if(pSelectData->MinReset > lpUser->Reset || lpUser->Reset > pSelectData->MaxReset )

  0005c	8b 86 90 22 00
	00		 mov	 eax, DWORD PTR [esi+8848]
  00062	39 47 1c	 cmp	 DWORD PTR [edi+28], eax
  00065	0f 8f 5b 01 00
	00		 jg	 $LN23@GetCheck
  0006b	3b 47 20	 cmp	 eax, DWORD PTR [edi+32]
  0006e	0f 8f 52 01 00
	00		 jg	 $LN23@GetCheck

; 164  : 	{
; 165  : 		return false;
; 166  : 	}
; 167  : 
; 168  : 	if(pSelectData->MinGrand > lpUser->GReset || lpUser->GReset > pSelectData->MaxGrand )

  00074	8b 86 94 22 00
	00		 mov	 eax, DWORD PTR [esi+8852]
  0007a	39 47 24	 cmp	 DWORD PTR [edi+36], eax
  0007d	0f 8f 43 01 00
	00		 jg	 $LN23@GetCheck
  00083	3b 47 28	 cmp	 eax, DWORD PTR [edi+40]
  00086	0f 8f 3a 01 00
	00		 jg	 $LN23@GetCheck

; 169  : 	{
; 170  : 		return false;
; 171  : 	}
; 172  : 
; 173  : 	if(pSelectData->PriceZen > lpUser->Money)

  0008c	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0008f	3b 86 f0 00 00
	00		 cmp	 eax, DWORD PTR [esi+240]

; 174  : 	{
; 175  : 		return false;

  00095	0f 8f 2b 01 00
	00		 jg	 $LN23@GetCheck

; 176  : 	}
; 177  : 
; 178  : 	if(pSelectData->PriceWcoin > lpUser->GameShop.WCoinC)

  0009b	db 47 30	 fild	 DWORD PTR [edi+48]
  0009e	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  000a1	89 45 0c	 mov	 DWORD PTR tv306[ebp], eax
  000a4	dc 9e 00 23 00
	00		 fcomp	 QWORD PTR [esi+8960]
  000aa	df e0		 fnstsw	 ax
  000ac	f6 c4 41	 test	 ah, 65			; 00000041H

; 179  : 	{
; 180  : 		return false;

  000af	0f 84 11 01 00
	00		 je	 $LN23@GetCheck

; 181  : 	}
; 182  : 
; 183  : 	if(pSelectData->PriceCredit > lpUser->ZtCred)

  000b5	db 47 34	 fild	 DWORD PTR [edi+52]
  000b8	8d 47 34	 lea	 eax, DWORD PTR [edi+52]
  000bb	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  000c1	89 45 fc	 mov	 DWORD PTR tv314[ebp], eax
  000c4	de d9		 fcompp
  000c6	df e0		 fnstsw	 ax
  000c8	f6 c4 05	 test	 ah, 5

; 184  : 	{
; 185  : 		return false;

  000cb	0f 8b f5 00 00
	00		 jnp	 $LN23@GetCheck

; 186  : 	}
; 187  : 
; 188  : 	if(pSelectData->NeedMaster)

  000d1	83 7f 38 00	 cmp	 DWORD PTR [edi+56], 0
  000d5	74 0d		 je	 SHORT $LN14@GetCheck

; 189  : 	{
; 190  : 		if(!lpUser->ChangeUP3rd)

  000d7	80 be bc 00 00
	00 00		 cmp	 BYTE PTR [esi+188], 0

; 191  : 		{
; 192  : 			return false;

  000de	0f 84 e2 00 00
	00		 je	 $LN23@GetCheck
$LN14@GetCheck:

; 193  : 		}
; 194  : 	}
; 195  : 
; 196  : 	if(!pSelectData->NeedPK)

  000e4	83 7f 3c 00	 cmp	 DWORD PTR [edi+60], 0
  000e8	75 0d		 jne	 SHORT $LN12@GetCheck

; 197  : 	{
; 198  : 		if(lpUser->m_PK_Level >= 6)

  000ea	80 be 3d 01 00
	00 06		 cmp	 BYTE PTR [esi+317], 6

; 199  : 		{
; 200  : 			return false;

  000f1	0f 8d cf 00 00
	00		 jge	 $LN23@GetCheck
$LN12@GetCheck:

; 201  : 		}
; 202  : 	}
; 203  : 
; 204  : 	if(pSelectData->NeedGuild)

  000f7	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  000fb	74 0d		 je	 SHORT $LN10@GetCheck

; 205  : 	{
; 206  : 		if(lpUser->GuildNumber < 1)

  000fd	83 be 34 04 00
	00 01		 cmp	 DWORD PTR [esi+1076], 1

; 207  : 		{
; 208  : 			return false;

  00104	0f 8c bc 00 00
	00		 jl	 $LN23@GetCheck
$LN10@GetCheck:

; 209  : 		}
; 210  : 	}
; 211  : 
; 212  : 	if(pSelectData->EmptyInvintory)

  0010a	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
  0010e	53		 push	 ebx
  0010f	74 25		 je	 SHORT $LN6@GetCheck

; 213  : 	{
; 214  : 		for(int n = 0; n < INVENTORY_SIZE; n++)

  00111	33 db		 xor	 ebx, ebx
$LL8@GetCheck:

; 215  : 		{
; 216  : 			if(lpUser->pInventory[n].IsItem() == TRUE)

  00113	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00119	03 cb		 add	 ecx, ebx
  0011b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00120	83 f8 01	 cmp	 eax, 1
  00123	74 20		 je	 SHORT $LN33@GetCheck

; 213  : 	{
; 214  : 		for(int n = 0; n < INVENTORY_SIZE; n++)

  00125	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  0012b	81 fb 70 c3 00
	00		 cmp	 ebx, 50032		; 0000c370H
  00131	7c e0		 jl	 SHORT $LL8@GetCheck

; 215  : 		{
; 216  : 			if(lpUser->pInventory[n].IsItem() == TRUE)

  00133	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
$LN6@GetCheck:

; 217  : 			{
; 218  : 				return false;
; 219  : 			}
; 220  : 		}
; 221  : 	}
; 222  : 
; 223  : 	if(pSelectData->Premium > 0 && lpUser->PremiumTime == 0)

  00136	83 7f 48 00	 cmp	 DWORD PTR [edi+72], 0
  0013a	7e 14		 jle	 SHORT $LN4@GetCheck
  0013c	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  00143	75 0b		 jne	 SHORT $LN4@GetCheck
$LN33@GetCheck:
  00145	5b		 pop	 ebx
  00146	5e		 pop	 esi

; 224  : 	{
; 225  : 		return false;

  00147	32 c0		 xor	 al, al
  00149	5f		 pop	 edi

; 251  : }

  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 08 00	 ret	 8
$LN4@GetCheck:

; 226  : 	}
; 227  : 
; 228  : 	// ----
; 229  : 
; 230  : 	if(pSelectData->PriceZen)

  00150	8b 7f 2c	 mov	 edi, DWORD PTR [edi+44]
  00153	85 ff		 test	 edi, edi
  00155	74 19		 je	 SHORT $LN3@GetCheck

; 231  : 	{
; 232  : 		lpUser->Money -= pSelectData->PriceZen;

  00157	29 be f0 00 00
	00		 sub	 DWORD PTR [esi+240], edi
  0015d	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]

; 233  : 		GCMoneySend(aIndex, lpUser->Money);

  00163	50		 push	 eax
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0016a	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0016d	83 c4 08	 add	 esp, 8
$LN3@GetCheck:

; 234  : 	}
; 235  : 
; 236  : 	if(pSelectData->PriceWcoin)

  00170	8b 4d 0c	 mov	 ecx, DWORD PTR tv306[ebp]
  00173	8b 01		 mov	 eax, DWORD PTR [ecx]
  00175	89 45 0c	 mov	 DWORD PTR tv308[ebp], eax
  00178	85 c0		 test	 eax, eax
  0017a	74 1b		 je	 SHORT $LN2@GetCheck

; 237  : 	{
; 238  : 		lpUser->GameShop.WCoinC -= pSelectData->PriceWcoin;

  0017c	db 45 0c	 fild	 DWORD PTR tv308[ebp]

; 239  : 		ZtUserDataSend(aIndex);

  0017f	52		 push	 edx
  00180	dc ae 00 23 00
	00		 fsubr	 QWORD PTR [esi+8960]
  00186	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]
  0018c	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  00191	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00194	83 c4 04	 add	 esp, 4
$LN2@GetCheck:

; 240  : 	}
; 241  : 
; 242  : 	if(pSelectData->PriceCredit)

  00197	8b 45 fc	 mov	 eax, DWORD PTR tv314[ebp]
  0019a	8b 00		 mov	 eax, DWORD PTR [eax]
  0019c	89 45 08	 mov	 DWORD PTR tv316[ebp], eax
  0019f	85 c0		 test	 eax, eax
  001a1	74 18		 je	 SHORT $LN1@GetCheck

; 243  : 	{
; 244  : 		lpUser->ZtCred -= pSelectData->PriceCredit;

  001a3	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]

; 245  : 		ZtUserDataSend(aIndex);

  001a9	52		 push	 edx
  001aa	da 65 08	 fisub	 DWORD PTR tv316[ebp]
  001ad	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]
  001b3	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  001b8	83 c4 04	 add	 esp, 4
$LN1@GetCheck:

; 246  : 	}
; 247  : 
; 248  : 	// ----
; 249  : 
; 250  : 	return true;

  001bb	5b		 pop	 ebx
  001bc	5e		 pop	 esi
  001bd	b0 01		 mov	 al, 1
  001bf	5f		 pop	 edi

; 251  : }

  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c2 08 00	 ret	 8
$LN23@GetCheck:
  001c6	5e		 pop	 esi

; 159  : 	{
; 160  : 		return false;

  001c7	32 c0		 xor	 al, al
  001c9	5f		 pop	 edi

; 251  : }

  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c2 08 00	 ret	 8
$LN25@GetCheck:

; 150  : 	{
; 151  : 		return false;

  001d0	32 c0		 xor	 al, al
  001d2	5f		 pop	 edi

; 251  : }

  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 08 00	 ret	 8
?GetCheck@CMapTeleport@@QAE_NHH@Z ENDP			; CMapTeleport::GetCheck
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GCAnsData@CMapTeleport@@QAEXH@Z		; CMapTeleport::GCAnsData
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?GCAnsData@CMapTeleport@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$GSCopy$ = -64					; size = 4
_pMsg$ = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GCAnsData@CMapTeleport@@QAEXH@Z PROC			; CMapTeleport::GCAnsData, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 266  : 	LPOBJ lpUser = &gObj[aIndex];

  00014	89 75 c0	 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  00017	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 267  : 
; 268  : 	PMSG_ANS_MAPTELEPORT_DATA pMsg;
; 269  : 
; 270  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0xE1, sizeof(pMsg));

  00023	c7 45 c4 c2 00
	38 fa		 mov	 DWORD PTR _pMsg$[ebp], -96993086 ; fa3800c2H
  0002a	c6 45 c8 e1	 mov	 BYTE PTR _pMsg$[ebp+4], 225 ; 000000e1H

; 271  : 
; 272  : 	pMsg.User.Level = lpUser->Level;

  0002e	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  00035	89 45 d0	 mov	 DWORD PTR _pMsg$[ebp+12], eax

; 273  : 
; 274  : 	pMsg.User.Reset = lpUser->Reset;

  00038	8b 8e 90 22 00
	00		 mov	 ecx, DWORD PTR [esi+8848]
  0003e	89 4d d4	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 275  : 
; 276  : 	pMsg.User.Grand = lpUser->GReset;

  00041	8b 96 94 22 00
	00		 mov	 edx, DWORD PTR [esi+8852]
  00047	89 55 d8	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 277  : 
; 278  : 	pMsg.User.Zen = lpUser->Money;

  0004a	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00050	89 45 dc	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00053	57		 push	 edi

; 279  : 
; 280  : 	pMsg.User.WCoin = lpUser->GameShop.WCoinC;

  00054	dd 86 00 23 00
	00		 fld	 QWORD PTR [esi+8960]
  0005a	e8 00 00 00 00	 call	 __ftol2_sse
  0005f	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp+28], eax

; 281  : 
; 282  : 	pMsg.User.Credit = lpUser->ZtCred;

  00062	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  00068	e8 00 00 00 00	 call	 __ftol2_sse
  0006d	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+32], eax

; 283  : 
; 284  : 	pMsg.User.Master = lpUser->ChangeUP3rd;

  00070	0f b6 8e bc 00
	00 00		 movzx	 ecx, BYTE PTR [esi+188]
  00077	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 285  : 
; 286  : 	pMsg.User.PKLevel = lpUser->m_PK_Level;

  0007a	0f be 96 3d 01
	00 00		 movsx	 edx, BYTE PTR [esi+317]
  00081	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+40], edx

; 287  : 
; 288  : 	pMsg.User.Guild = lpUser->GuildNumber;

  00084	8b 86 34 04 00
	00		 mov	 eax, DWORD PTR [esi+1076]
  0008a	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+44], eax

; 289  : 
; 290  : 	pMsg.User.Invintory = 0;

  0008d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+48], 0

; 293  : 	{
; 294  : 		if(lpUser->pInventory[n].IsItem() == TRUE)

  00094	33 ff		 xor	 edi, edi
  00096	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL4@GCAnsData:
  000a0	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  000a6	03 cf		 add	 ecx, edi
  000a8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	75 03		 jne	 SHORT $LN3@GCAnsData

; 295  : 		{
; 296  : 			pMsg.User.Invintory = 1;

  000b2	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+48], eax
$LN3@GCAnsData:

; 291  : 
; 292  : 	for(int n = 0; n < INVENTORY_SIZE; n++)

  000b5	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000bb	81 ff 70 c3 00
	00		 cmp	 edi, 50032		; 0000c370H
  000c1	7c dd		 jl	 SHORT $LL4@GCAnsData

; 297  : 		}
; 298  : 	}
; 299  : 	
; 300  : 	pMsg.User.Premium = lpUser->PremiumTime;
; 301  : 
; 302  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  000c3	8b 45 c0	 mov	 eax, DWORD PTR _aIndex$GSCopy$[ebp]
  000c6	8b 8e b8 22 00
	00		 mov	 ecx, DWORD PTR [esi+8888]
  000cc	6a 38		 push	 56			; 00000038H
  000ce	8d 55 c4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+52], ecx
  000d6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 303  : }

  000db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e1	5f		 pop	 edi
  000e2	33 cd		 xor	 ecx, ebp
  000e4	5e		 pop	 esi
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 04 00	 ret	 4
?GCAnsData@CMapTeleport@@QAEXH@Z ENDP			; CMapTeleport::GCAnsData
_TEXT	ENDS
PUBLIC	?GCAnsSelect@CMapTeleport@@QAEXHH@Z		; CMapTeleport::GCAnsSelect
; Function compile flags: /Ogtp
;	COMDAT ?GCAnsSelect@CMapTeleport@@QAEXHH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 8
_aIndex$ = 8						; size = 4
_Result$ = 12						; size = 4
?GCAnsSelect@CMapTeleport@@QAEXHH@Z PROC		; CMapTeleport::GCAnsSelect, COMDAT
; _this$ = ecx

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 352  : 	PMSG_ANS_MAPTELEPORT_SELECT pMsg;
; 353  : 
; 354  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xE2, sizeof(pMsg));
; 355  : 
; 356  : 	pMsg.Result = Result;
; 357  : 
; 358  : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00006	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _Result$[ebp]
  0000c	6a 08		 push	 8
  0000e	8d 4d f8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	c7 45 f8 c1 08
	fb e2		 mov	 DWORD PTR _pMsg$[ebp], -486864703 ; e2fb08c1H
  0001a	89 45 fc	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0001d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 359  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?GCAnsSelect@CMapTeleport@@QAEXHH@Z ENDP		; CMapTeleport::GCAnsSelect
_TEXT	ENDS
PUBLIC	??_C@_0BH@MBIHHPPL@ZtData?2MapTeleport?4dat?$AA@ ; `string'
PUBLIC	?Load@CMapTeleport@@QAEXXZ			; CMapTeleport::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0BH@MBIHHPPL@ZtData?2MapTeleport?4dat?$AA@
CONST	SEGMENT
??_C@_0BH@MBIHHPPL@ZtData?2MapTeleport?4dat?$AA@ DB 'ZtData\MapTeleport.d'
	DB	'at', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CMapTeleport@@QAEXXZ
_TEXT	SEGMENT
?Load@CMapTeleport@@QAEXXZ PROC				; CMapTeleport::Load, COMDAT
; _this$ = ecx

; 26   : 	if(!g_ZtLicense.user.CustomMapTeleport)

  00000	80 3d f4 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+244, 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 21		 je	 SHORT $LN2@Load

; 27   : 	{
; 28   : 		return;
; 29   : 	}
; 30   : 
; 31   : 	this->m_LoadedCount = 0;
; 32   : 
; 33   : 	this->Read(gDirPath.GetNewPath("ZtData\\MapTeleport.dat"));

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MBIHHPPL@ZtData?2MapTeleport?4dat?$AA@
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00016	c7 86 e0 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+3040], 0
  00020	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00025	50		 push	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?Read@CMapTeleport@@QAEXPAD@Z ; CMapTeleport::Read
$LN2@Load:
  0002d	5e		 pop	 esi

; 34   : }

  0002e	c3		 ret	 0
?Load@CMapTeleport@@QAEXXZ ENDP				; CMapTeleport::Load
_TEXT	ENDS
PUBLIC	?CGReqData@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_DATA@@H@Z ; CMapTeleport::CGReqData
; Function compile flags: /Ogtp
;	COMDAT ?CGReqData@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_DATA@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqData@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_DATA@@H@Z PROC ; CMapTeleport::CGReqData, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 256  : 	if(!lpMsg->Result)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000a	74 09		 je	 SHORT $LN2@CGReqData

; 257  : 	{
; 258  : 		return;
; 259  : 	}
; 260  : 
; 261  : 	this->GCAnsData(aIndex);

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 ?GCAnsData@CMapTeleport@@QAEXH@Z ; CMapTeleport::GCAnsData
$LN2@CGReqData:

; 262  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?CGReqData@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_DATA@@H@Z ENDP ; CMapTeleport::CGReqData
_TEXT	ENDS
PUBLIC	?CGReqSelect@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_SELECT@@H@Z ; CMapTeleport::CGReqSelect
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z:PROC ; CMonsterSetBase::GetBoxPosition
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
; Function compile flags: /Ogtp
;	COMDAT ?CGReqSelect@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_SELECT@@H@Z
_TEXT	SEGMENT
_sMapY$ = 8						; size = 2
_lpMsg$ = 8						; size = 4
_sMapX$ = 12						; size = 2
_aIndex$ = 12						; size = 4
?CGReqSelect@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_SELECT@@H@Z PROC ; CMapTeleport::CGReqSelect, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 307  : 	if(!lpMsg->Result)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	0f 84 a6 00 00
	00		 je	 $LN5@CGReqSelec

; 308  : 	{
; 309  : 		return;
; 310  : 	}
; 311  : 
; 312  : 	if(gObj[aIndex].Connected < 3)

  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	53		 push	 ebx
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0001d	8b cb		 mov	 ecx, ebx
  0001f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00025	83 7c 11 04 03	 cmp	 DWORD PTR [ecx+edx+4], 3
  0002a	0f 8c 88 00 00
	00		 jl	 $LN7@CGReqSelec

; 313  : 	{
; 314  : 		return;
; 315  : 	}
; 316  : 
; 317  : 	int iSelectNumber = lpMsg->SelectNumber;

  00030	56		 push	 esi
  00031	8b 70 08	 mov	 esi, DWORD PTR [eax+8]

; 318  : 
; 319  : 
; 320  : 
; 321  : 	if(!this->GetCheck(aIndex, iSelectNumber))

  00034	56		 push	 esi
  00035	53		 push	 ebx
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?GetCheck@CMapTeleport@@QAE_NHH@Z ; CMapTeleport::GetCheck
  0003d	84 c0		 test	 al, al
  0003f	75 11		 jne	 SHORT $LN2@CGReqSelec

; 322  : 	{
; 323  : 		this->GCAnsSelect(aIndex, 0);

  00041	6a 00		 push	 0
  00043	53		 push	 ebx
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?GCAnsSelect@CMapTeleport@@QAEXHH@Z ; CMapTeleport::GCAnsSelect
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	5f		 pop	 edi

; 348  : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN2@CGReqSelec:

; 324  : 
; 325  : 		return;
; 326  : 	}
; 327  : 
; 328  : 	short sMapX = 0;
; 329  : 
; 330  : 	short sMapY = 0;
; 331  : 
; 332  : 	MAPTELEPORT_DATA * pData = &this->m_Data[iSelectNumber];

  00052	6b f6 4c	 imul	 esi, 76			; 0000004cH
  00055	33 c0		 xor	 eax, eax
  00057	89 45 0c	 mov	 DWORD PTR _sMapX$[ebp], eax
  0005a	89 45 08	 mov	 DWORD PTR _sMapY$[ebp], eax

; 333  : 
; 334  : 	if(!gMSetBase.GetBoxPosition(pData->MapNumber, pData->MapX1, pData->MapY1, pData->MapX2, pData->MapY2, sMapX, sMapY))

  0005d	8b 54 3e 10	 mov	 edx, DWORD PTR [esi+edi+16]
  00061	03 f7		 add	 esi, edi
  00063	8d 45 08	 lea	 eax, DWORD PTR _sMapY$[ebp]
  00066	50		 push	 eax
  00067	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0006a	8d 4d 0c	 lea	 ecx, DWORD PTR _sMapX$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00071	52		 push	 edx
  00072	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00075	50		 push	 eax
  00076	8b 06		 mov	 eax, DWORD PTR [esi]
  00078	51		 push	 ecx
  00079	52		 push	 edx
  0007a	50		 push	 eax
  0007b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  00080	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition
  00085	85 c0		 test	 eax, eax
  00087	75 0e		 jne	 SHORT $LN1@CGReqSelec

; 335  : 	{
; 336  : 		//this->GCAnsSelect(aIndex, 0);
; 337  : 
; 338  : 		//return;
; 339  : 
; 340  : 		sMapX = pData->MapX1;

  00089	0f b7 4e 04	 movzx	 ecx, WORD PTR [esi+4]
  0008d	89 4d 0c	 mov	 DWORD PTR _sMapX$[ebp], ecx

; 341  : 
; 342  : 		sMapY = pData->MapY1;

  00090	0f b7 56 08	 movzx	 edx, WORD PTR [esi+8]
  00094	89 55 08	 mov	 DWORD PTR _sMapY$[ebp], edx
$LN1@CGReqSelec:

; 343  : 	}
; 344  : 
; 345  : 	this->GCAnsSelect(aIndex, 1);

  00097	6a 01		 push	 1
  00099	53		 push	 ebx
  0009a	8b cf		 mov	 ecx, edi
  0009c	e8 00 00 00 00	 call	 ?GCAnsSelect@CMapTeleport@@QAEXHH@Z ; CMapTeleport::GCAnsSelect

; 346  : 	
; 347  : 	gObjTeleport(aIndex, pData->MapNumber, sMapX, sMapY);

  000a1	0f bf 45 08	 movsx	 eax, WORD PTR _sMapY$[ebp]
  000a5	0f bf 4d 0c	 movsx	 ecx, WORD PTR _sMapX$[ebp]
  000a9	8b 16		 mov	 edx, DWORD PTR [esi]
  000ab	50		 push	 eax
  000ac	51		 push	 ecx
  000ad	52		 push	 edx
  000ae	53		 push	 ebx
  000af	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	5e		 pop	 esi
$LN7@CGReqSelec:
  000b8	5b		 pop	 ebx
$LN5@CGReqSelec:
  000b9	5f		 pop	 edi

; 348  : }

  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?CGReqSelect@CMapTeleport@@QAEXPAUPMSG_REQ_MAPTELEPORT_SELECT@@H@Z ENDP ; CMapTeleport::CGReqSelect
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MapTeleport@@YAXXZ
text$yc	SEGMENT
??__Eg_MapTeleport@@YAXXZ PROC				; `dynamic initializer for 'g_MapTeleport'', COMDAT

; 13   : CMapTeleport g_MapTeleport;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapTeleport@@3VCMapTeleport@@A ; g_MapTeleport
  00005	e8 00 00 00 00	 call	 ??0CMapTeleport@@QAE@XZ	; CMapTeleport::CMapTeleport
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MapTeleport@@YAXXZ ; `dynamic atexit destructor for 'g_MapTeleport''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MapTeleport@@YAXXZ ENDP				; `dynamic initializer for 'g_MapTeleport''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MapTeleport@@YAXXZ
text$yd	SEGMENT
??__Fg_MapTeleport@@YAXXZ PROC				; `dynamic atexit destructor for 'g_MapTeleport'', COMDAT
  00000	c3		 ret	 0
??__Fg_MapTeleport@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_MapTeleport''
text$yd	ENDS
PUBLIC	?g_MapTeleport@@3VCMapTeleport@@A		; g_MapTeleport
_BSS	SEGMENT
?g_MapTeleport@@3VCMapTeleport@@A DB 0be4H DUP (?)	; g_MapTeleport
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MapTeleport$initializer$ DD FLAT:??__Eg_MapTeleport@@YAXXZ
CRT$XCU	ENDS
END
