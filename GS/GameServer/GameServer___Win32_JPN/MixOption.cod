; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MixOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??1MixOption@@QAE@XZ				; MixOption::~MixOption
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mixoption.cpp
;	COMDAT ??1MixOption@@QAE@XZ
_TEXT	SEGMENT
??1MixOption@@QAE@XZ PROC				; MixOption::~MixOption, COMDAT
; _this$ = ecx

; 22   : 	// ----
; 23   : }

  00000	c3		 ret	 0
??1MixOption@@QAE@XZ ENDP				; MixOption::~MixOption
_TEXT	ENDS
PUBLIC	?Init@MixOption@@QAEXXZ				; MixOption::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@MixOption@@QAEXXZ
_TEXT	SEGMENT
?Init@MixOption@@QAEXXZ PROC				; MixOption::Init, COMDAT
; _this$ = ecx

; 27   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 28   : 	ZeroMemory(this->m_Data, sizeof(this->m_Data));

  00003	68 b0 04 00 00	 push	 1200			; 000004b0H
  00008	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 29   : 	this->m_LoadedCount = 0;

  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001c	5e		 pop	 esi

; 30   : }

  0001d	c3		 ret	 0
?Init@MixOption@@QAEXXZ ENDP				; MixOption::Init
_TEXT	ENDS
PUBLIC	??_C@_0CI@EKBMIKOF@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Mixes?5loaded?5fr@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadData@MixOption@@QAEXPAD@Z			; MixOption::ReadData
EXTRN	_fclose:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CI@EKBMIKOF@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Mixes?5loaded?5fr@
CONST	SEGMENT
??_C@_0CI@EKBMIKOF@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Mixes?5loaded?5fr@ DB '['
	DB	'MixOption] [%d] Mixes loaded from list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadData@MixOption@@QAEXPAD@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
?ReadData@MixOption@@QAEXPAD@Z PROC			; MixOption::ReadData, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 35   : 	int Token;
; 36   : 	this->Init();

  00007	e8 00 00 00 00	 call	 ?Init@MixOption@@QAEXXZ	; MixOption::Init

; 37   : 	// ----
; 38   : 	SMDFile = fopen(File, "r");

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 _fopen
  0001a	83 c4 08	 add	 esp, 8
  0001d	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 39   : 	// ----
; 40   : 	if( SMDFile == 0 )

  00022	85 c0		 test	 eax, eax
  00024	75 1c		 jne	 SHORT $LN9@ReadData

; 41   : 	{
; 42   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), File);

  00026	57		 push	 edi
  00027	6a 70		 push	 112			; 00000070H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 68   : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN9@ReadData:

; 43   : 		return;
; 44   : 	}
; 45   : 	// ----
; 46   : 	while(true) 
; 47   : 	{
; 48   : 		Token = GetToken();

  00042	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 49   : 		// ----
; 50   : 		if( Token == END || !strcmp(TokenString, "end") )

  00047	83 f8 02	 cmp	 eax, 2
  0004a	0f 84 8f 00 00
	00		 je	 $LN10@ReadData
$LL5@ReadData:
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00055	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL11@ReadData:
  00060	8a 10		 mov	 dl, BYTE PTR [eax]
  00062	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00064	75 1a		 jne	 SHORT $LN12@ReadData
  00066	84 d2		 test	 dl, dl
  00068	74 12		 je	 SHORT $LN13@ReadData
  0006a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0006d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00070	75 0e		 jne	 SHORT $LN12@ReadData
  00072	83 c0 02	 add	 eax, 2
  00075	83 c1 02	 add	 ecx, 2
  00078	84 d2		 test	 dl, dl
  0007a	75 e4		 jne	 SHORT $LL11@ReadData
$LN13@ReadData:
  0007c	33 c0		 xor	 eax, eax
  0007e	eb 05		 jmp	 SHORT $LN14@ReadData
$LN12@ReadData:
  00080	1b c0		 sbb	 eax, eax
  00082	83 d8 ff	 sbb	 eax, -1
$LN14@ReadData:
  00085	85 c0		 test	 eax, eax
  00087	74 56		 je	 SHORT $LN10@ReadData

; 51   : 		{
; 52   : 			break;
; 53   : 		}
; 54   : 		else
; 55   : 		{
; 56   : 			this->m_Data[this->m_LoadedCount].MixCode		= TokenNumber;

  00089	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0008f	e8 00 00 00 00	 call	 __ftol2_sse
  00094	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00096	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00099	89 44 8e 04	 mov	 DWORD PTR [esi+ecx*4+4], eax

; 57   : 			Token = GetToken();

  0009d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 58   : 			this->m_Data[this->m_LoadedCount].Money			= TokenNumber;

  000a2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a8	e8 00 00 00 00	 call	 __ftol2_sse
  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000af	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  000b2	89 44 96 08	 mov	 DWORD PTR [esi+edx*4+8], eax

; 59   : 			Token = GetToken();

  000b6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 60   : 			this->m_Data[this->m_LoadedCount].SuccessRate	= TokenNumber;

  000bb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c1	e8 00 00 00 00	 call	 __ftol2_sse
  000c6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c8	8d 4c 49 03	 lea	 ecx, DWORD PTR [ecx+ecx*2+3]
  000cc	89 04 8e	 mov	 DWORD PTR [esi+ecx*4], eax

; 61   : 			// ----
; 62   : 			this->m_LoadedCount++;

  000cf	ff 06		 inc	 DWORD PTR [esi]
  000d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000d6	83 f8 02	 cmp	 eax, 2
  000d9	0f 85 71 ff ff
	ff		 jne	 $LL5@ReadData
$LN10@ReadData:

; 63   : 		}
; 64   : 	}
; 65   : 	// ----
; 66   : 	LogAddTD("[MixOption] [%d] Mixes loaded from list", this->m_LoadedCount);

  000df	8b 16		 mov	 edx, DWORD PTR [esi]
  000e1	52		 push	 edx
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EKBMIKOF@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Mixes?5loaded?5fr@
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 67   : 	fclose(SMDFile);

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _fclose
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi

; 68   : }

  000fd	5d		 pop	 ebp
  000fe	c2 04 00	 ret	 4
?ReadData@MixOption@@QAEXPAD@Z ENDP			; MixOption::ReadData
_TEXT	ENDS
PUBLIC	??_C@_0BF@OOILGKHI@ZtData?2MixOption?4txt?$AA@	; `string'
PUBLIC	?Load@MixOption@@QAEXXZ				; MixOption::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BF@OOILGKHI@ZtData?2MixOption?4txt?$AA@
CONST	SEGMENT
??_C@_0BF@OOILGKHI@ZtData?2MixOption?4txt?$AA@ DB 'ZtData\MixOption.txt', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@MixOption@@QAEXXZ
_TEXT	SEGMENT
?Load@MixOption@@QAEXXZ PROC				; MixOption::Load, COMDAT
; _this$ = ecx

; 72   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 73   : 	this->ReadData(gDirPath.GetNewPath("ZtData\\MixOption.txt"));

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOILGKHI@ZtData?2MixOption?4txt?$AA@
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0000d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00012	50		 push	 eax
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?ReadData@MixOption@@QAEXPAD@Z ; MixOption::ReadData
  0001a	5e		 pop	 esi

; 74   : }

  0001b	c3		 ret	 0
?Load@MixOption@@QAEXXZ ENDP				; MixOption::Load
_TEXT	ENDS
PUBLIC	??_C@_0BO@HCHLGNCE@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Money?5?$CL?5?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	?GetMoney@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z	; MixOption::GetMoney
;	COMDAT ??_C@_0BO@HCHLGNCE@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Money?5?$CL?5?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_0BO@HCHLGNCE@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Money?5?$CL?5?$FL?$CFd?$FN?$AA@ DB '['
	DB	'MixOption] [%d] Money + [%d]', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetMoney@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_MixCode$ = 12						; size = 4
?GetMoney@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z PROC	; MixOption::GetMoney, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 31		 mov	 esi, DWORD PTR [ecx]

; 79   : 	for( int i = 0; i < this->m_LoadedCount; i++ )

  00006	33 c0		 xor	 eax, eax
  00008	57		 push	 edi
  00009	85 f6		 test	 esi, esi
  0000b	7e 12		 jle	 SHORT $LN2@GetMoney
  0000d	8b 7d 0c	 mov	 edi, DWORD PTR _MixCode$[ebp]
  00010	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
$LL4@GetMoney:

; 80   : 	{
; 81   : 		if( this->m_Data[i].MixCode == MixCode )

  00013	39 3a		 cmp	 DWORD PTR [edx], edi
  00015	74 10		 je	 SHORT $LN8@GetMoney

; 79   : 	for( int i = 0; i < this->m_LoadedCount; i++ )

  00017	40		 inc	 eax
  00018	83 c2 0c	 add	 edx, 12			; 0000000cH
  0001b	3b c6		 cmp	 eax, esi
  0001d	7c f4		 jl	 SHORT $LL4@GetMoney
$LN2@GetMoney:
  0001f	5f		 pop	 edi

; 86   : 		}
; 87   : 	}
; 88   : 	// ----
; 89   : 	return 0;

  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 90   : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN8@GetMoney:

; 82   : 		{
; 83   : 			LogAddTD("[MixOption] [%d] Money + [%d]", 
; 84   : 				MixCode, this->m_Data[i].Money);

  00027	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002a	8d 74 81 08	 lea	 esi, DWORD PTR [ecx+eax*4+8]
  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	51		 push	 ecx
  00031	57		 push	 edi
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@HCHLGNCE@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5Money?5?$CL?5?$FL?$CFd?$FN?$AA@
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 85   : 			return this->m_Data[i].Money;

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 90   : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?GetMoney@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP	; MixOption::GetMoney
_TEXT	ENDS
PUBLIC	??_C@_0CE@MDCINFJH@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5SuccessRate?5?$CL?5?$FL@ ; `string'
PUBLIC	?GetSuccessRate@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z ; MixOption::GetSuccessRate
;	COMDAT ??_C@_0CE@MDCINFJH@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5SuccessRate?5?$CL?5?$FL@
CONST	SEGMENT
??_C@_0CE@MDCINFJH@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5SuccessRate?5?$CL?5?$FL@ DB '['
	DB	'MixOption] [%d] SuccessRate + [%d]', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetSuccessRate@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_MixCode$ = 12						; size = 4
?GetSuccessRate@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; MixOption::GetSuccessRate, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 31		 mov	 esi, DWORD PTR [ecx]

; 95   : 	for( int i = 0; i < this->m_LoadedCount; i++ )

  00006	33 c0		 xor	 eax, eax
  00008	57		 push	 edi
  00009	85 f6		 test	 esi, esi
  0000b	7e 12		 jle	 SHORT $LN2@GetSuccess
  0000d	8b 7d 0c	 mov	 edi, DWORD PTR _MixCode$[ebp]
  00010	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
$LL4@GetSuccess:

; 96   : 	{
; 97   : 		if( this->m_Data[i].MixCode == MixCode )

  00013	39 3a		 cmp	 DWORD PTR [edx], edi
  00015	74 10		 je	 SHORT $LN8@GetSuccess

; 95   : 	for( int i = 0; i < this->m_LoadedCount; i++ )

  00017	40		 inc	 eax
  00018	83 c2 0c	 add	 edx, 12			; 0000000cH
  0001b	3b c6		 cmp	 eax, esi
  0001d	7c f4		 jl	 SHORT $LL4@GetSuccess
$LN2@GetSuccess:
  0001f	5f		 pop	 edi

; 102  : 		}
; 103  : 	}
; 104  : 	// ----
; 105  : 	return 0;

  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 106  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN8@GetSuccess:

; 98   : 		{
; 99   : 			LogAddTD("[MixOption] [%d] SuccessRate + [%d]", 
; 100  : 				MixCode, this->m_Data[i].SuccessRate);

  00027	8d 44 40 03	 lea	 eax, DWORD PTR [eax+eax*2+3]
  0002b	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	51		 push	 ecx
  00031	57		 push	 edi
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MDCINFJH@?$FLMixOption?$FN?5?$FL?$CFd?$FN?5SuccessRate?5?$CL?5?$FL@
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 101  : 			return this->m_Data[i].SuccessRate;

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 106  : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?GetSuccessRate@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; MixOption::GetSuccessRate
_TEXT	ENDS
PUBLIC	?GetOption@MixOption@@QAEXPAUOBJECTSTRUCT@@H@Z	; MixOption::GetOption
; Function compile flags: /Ogtp
;	COMDAT ?GetOption@MixOption@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_MixCode$ = 12						; size = 4
?GetOption@MixOption@@QAEXPAUOBJECTSTRUCT@@H@Z PROC	; MixOption::GetOption, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 111  : 	lpUser->m_AddMixMoney		= 0;
; 112  : 	lpUser->m_AddMixSuccessRate = 0;
; 113  : 	lpUser->m_AddMixMoney		= this->GetMoney(lpUser, MixCode);

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _MixCode$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  0000b	57		 push	 edi
  0000c	33 c0		 xor	 eax, eax
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b f9		 mov	 edi, ecx
  00012	89 86 20 28 00
	00		 mov	 DWORD PTR [esi+10272], eax
  00018	89 86 24 28 00
	00		 mov	 DWORD PTR [esi+10276], eax
  0001e	e8 00 00 00 00	 call	 ?GetMoney@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z ; MixOption::GetMoney

; 114  : 	lpUser->m_AddMixSuccessRate = this->GetSuccessRate(lpUser, MixCode);

  00023	53		 push	 ebx
  00024	56		 push	 esi
  00025	8b cf		 mov	 ecx, edi
  00027	89 86 20 28 00
	00		 mov	 DWORD PTR [esi+10272], eax
  0002d	e8 00 00 00 00	 call	 ?GetSuccessRate@MixOption@@QAEHPAUOBJECTSTRUCT@@H@Z ; MixOption::GetSuccessRate
  00032	5f		 pop	 edi
  00033	89 86 24 28 00
	00		 mov	 DWORD PTR [esi+10276], eax
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 115  : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?GetOption@MixOption@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP	; MixOption::GetOption
_TEXT	ENDS
PUBLIC	??0MixOption@@QAE@XZ				; MixOption::MixOption
; Function compile flags: /Ogtp
;	COMDAT ??0MixOption@@QAE@XZ
_TEXT	SEGMENT
??0MixOption@@QAE@XZ PROC				; MixOption::MixOption, COMDAT
; _this$ = ecx

; 15   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 16   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@MixOption@@QAEXXZ	; MixOption::Init

; 17   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0MixOption@@QAE@XZ ENDP				; MixOption::MixOption
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MixOption@@YAXXZ
text$yc	SEGMENT
??__Eg_MixOption@@YAXXZ PROC				; `dynamic initializer for 'g_MixOption'', COMDAT

; 11   : MixOption g_MixOption;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MixOption@@3VMixOption@@A ; g_MixOption
  00005	e8 00 00 00 00	 call	 ??0MixOption@@QAE@XZ	; MixOption::MixOption
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MixOption@@YAXXZ ; `dynamic atexit destructor for 'g_MixOption''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MixOption@@YAXXZ ENDP				; `dynamic initializer for 'g_MixOption''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MixOption@@YAXXZ
text$yd	SEGMENT
??__Fg_MixOption@@YAXXZ PROC				; `dynamic atexit destructor for 'g_MixOption'', COMDAT
  00000	c3		 ret	 0
??__Fg_MixOption@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_MixOption''
text$yd	ENDS
PUBLIC	?g_MixOption@@3VMixOption@@A			; g_MixOption
_BSS	SEGMENT
?g_MixOption@@3VMixOption@@A DB 04b4H DUP (?)		; g_MixOption
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MixOption$initializer$ DD FLAT:??__Eg_MixOption@@YAXXZ
CRT$XCU	ENDS
END
