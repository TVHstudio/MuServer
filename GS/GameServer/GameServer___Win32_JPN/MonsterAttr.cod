; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MonsterAttr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CMonsterAttr@@6B@				; CMonsterAttr::`vftable'
PUBLIC	??0CMonsterAttr@@QAE@XZ				; CMonsterAttr::CMonsterAttr
PUBLIC	??_R4CMonsterAttr@@6B@				; CMonsterAttr::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterAttr@@@8			; CMonsterAttr `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterAttr@@8				; CMonsterAttr::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterAttr@@8				; CMonsterAttr::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterAttr@@8			; CMonsterAttr::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMonsterAttr@@UAEPAXI@Z:PROC		; CMonsterAttr::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMonsterAttr@@8
; File e:\work\tranet_version\gs\gameserver\monsterattr.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterAttr@@8 DD FLAT:??_R0?AVCMonsterAttr@@@8 ; CMonsterAttr::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterAttr@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterAttr@@8
rdata$r	SEGMENT
??_R2CMonsterAttr@@8 DD FLAT:??_R1A@?0A@EA@CMonsterAttr@@8 ; CMonsterAttr::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterAttr@@8
rdata$r	SEGMENT
??_R3CMonsterAttr@@8 DD 00H				; CMonsterAttr::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterAttr@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterAttr@@@8
_DATA	SEGMENT
??_R0?AVCMonsterAttr@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterAttr `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterAttr@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMonsterAttr@@6B@
rdata$r	SEGMENT
??_R4CMonsterAttr@@6B@ DD 00H				; CMonsterAttr::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterAttr@@@8
	DD	FLAT:??_R3CMonsterAttr@@8
rdata$r	ENDS
;	COMDAT ??_7CMonsterAttr@@6B@
CONST	SEGMENT
??_7CMonsterAttr@@6B@ DD FLAT:??_R4CMonsterAttr@@6B@	; CMonsterAttr::`vftable'
	DD	FLAT:??_ECMonsterAttr@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMonsterAttr@@QAE@XZ
_TEXT	SEGMENT
??0CMonsterAttr@@QAE@XZ PROC				; CMonsterAttr::CMonsterAttr, COMDAT
; _this$ = ecx

; 20   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterAttr@@6B@

; 21   : 	return;
; 22   : }

  00008	c3		 ret	 0
??0CMonsterAttr@@QAE@XZ ENDP				; CMonsterAttr::CMonsterAttr
_TEXT	ENDS
PUBLIC	??1CMonsterAttr@@UAE@XZ				; CMonsterAttr::~CMonsterAttr
; Function compile flags: /Ogtp
;	COMDAT ??1CMonsterAttr@@UAE@XZ
_TEXT	SEGMENT
??1CMonsterAttr@@UAE@XZ PROC				; CMonsterAttr::~CMonsterAttr, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterAttr@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1CMonsterAttr@@UAE@XZ ENDP				; CMonsterAttr::~CMonsterAttr
_TEXT	ENDS
PUBLIC	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr
; Function compile flags: /Ogtp
;	COMDAT ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z
_TEXT	SEGMENT
_aClass$ = 8						; size = 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z PROC ; CMonsterAttr::GetAttr, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 31   : 	for ( int n = 0; n<MAX_MONSTER_TYPE;n++)

  00004	8b 75 08	 mov	 esi, DWORD PTR _aClass$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	8d 64 24 00	 npad	 4
$LL4@GetAttr:

; 32   : 	{
; 33   : 		if ( this->m_MonsterAttr[n].m_Index == aClass )

  00010	39 32		 cmp	 DWORD PTR [edx], esi
  00012	74 12		 je	 SHORT $LN8@GetAttr

; 31   : 	for ( int n = 0; n<MAX_MONSTER_TYPE;n++)

  00014	40		 inc	 eax
  00015	83 ea 80	 sub	 edx, -128		; ffffff80H
  00018	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0001d	7c f1		 jl	 SHORT $LL4@GetAttr

; 36   : 		}
; 37   : 	}
; 38   : 
; 39   : 	return NULL;

  0001f	33 c0		 xor	 eax, eax
  00021	5e		 pop	 esi

; 40   : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN8@GetAttr:

; 34   : 		{
; 35   : 			return &this->m_MonsterAttr[n];

  00026	c1 e0 07	 shl	 eax, 7
  00029	8d 44 08 04	 lea	 eax, DWORD PTR [eax+ecx+4]
  0002d	5e		 pop	 esi

; 40   : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ENDP ; CMonsterAttr::GetAttr
_TEXT	ENDS
PUBLIC	??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ ; `string'
PUBLIC	??_C@_0BA@FFPJBDC@MonsterAttr?4cpp?$AA@		; `string'
PUBLIC	__real@4059000000000000
PUBLIC	??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadAttr@CMonsterAttr@@QAEXPAD@Z		; CMonsterAttr::LoadAttr
EXTRN	_fclose:PROC
EXTRN	?gMonsterHPAdjust@@3HA:DWORD			; gMonsterHPAdjust
EXTRN	?gMonsterHp@@3HA:DWORD				; gMonsterHp
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ DB 'Monst'
	DB	'er attribute max over %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FFPJBDC@MonsterAttr?4cpp?$AA@
CONST	SEGMENT
??_C@_0BA@FFPJBDC@MonsterAttr?4cpp?$AA@ DB 'MonsterAttr.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@ DB 'load error %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadAttr@CMonsterAttr@@QAEXPAD@Z
_TEXT	SEGMENT
tv1567 = -16						; size = 4
tv1621 = -12						; size = 8
tv1623 = -8						; size = 4
tv1615 = -8						; size = 4
tv1613 = -8						; size = 4
tv1607 = -8						; size = 4
tv1605 = -8						; size = 4
tv1599 = -8						; size = 4
tv1597 = -8						; size = 4
tv1591 = -8						; size = 4
tv1589 = -8						; size = 4
_n$ = -4						; size = 4
tv1690 = 8						; size = 4
tv1671 = 8						; size = 4
_filename$ = 8						; size = 4
tv1626 = 10						; size = 2
tv1618 = 10						; size = 2
tv1610 = 10						; size = 2
tv1602 = 10						; size = 2
tv1594 = 10						; size = 2
?LoadAttr@CMonsterAttr@@QAEXPAD@Z PROC			; CMonsterAttr::LoadAttr, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 44   : 	int Token;
; 45   : 	int n;
; 46   : 
; 47   : 	SMDFile = fopen(filename, "r");

  00008	8b 7d 08	 mov	 edi, DWORD PTR _filename$[ebp]
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00010	57		 push	 edi
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 48   : 
; 49   : 	if ( SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 16		 jne	 SHORT $LN17@LoadAttr

; 50   : 	{
; 51   : 		MsgBox("load error %s", filename);

  00024	57		 push	 edi
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@
  0002a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002f	83 c4 08	 add	 esp, 8
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 171  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN17@LoadAttr:
  0003a	53		 push	 ebx

; 52   : 		return;
; 53   : 	}
; 54   : 
; 55   : 	n= 0;

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 56   : 
; 57   : 	while ( true )
; 58   : 	{
; 59   : 		Token = GetToken();

  00042	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 60   : 
; 61   : 		if ( Token == END )

  00047	83 f8 02	 cmp	 eax, 2
  0004a	0f 84 34 04 00
	00		 je	 $LN24@LoadAttr
  00050	bf 04 00 00 00	 mov	 edi, 4
  00055	83 c6 08	 add	 esi, 8
  00058	81 ef 00 00 00
	00		 sub	 edi, OFFSET _TokenString
  0005e	89 7d f0	 mov	 DWORD PTR tv1567[ebp], edi
$LL16@LoadAttr:

; 62   : 		{
; 63   : 			break;
; 64   : 		}
; 65   : 
; 66   : 			
; 67   : 		if ( Token == NUMBER )

  00061	83 f8 01	 cmp	 eax, 1
  00064	0f 85 0c 04 00
	00		 jne	 $LN1@LoadAttr

; 68   : 		{
; 69   : 			this->m_MonsterAttr[n].m_Index = (int)TokenNumber;					Token = GetToken();

  0006a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00070	e8 00 00 00 00	 call	 __ftol2_sse
  00075	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  00078	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 			this->m_MonsterAttr[n].m_Rate = (int)TokenNumber;					Token = GetToken();

  0007d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00083	e8 00 00 00 00	 call	 __ftol2_sse
  00088	89 06		 mov	 DWORD PTR [esi], eax
  0008a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 71   : 			strcpy(this->m_MonsterAttr[n].m_Name, TokenString);				Token = GetToken();

  0008f	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  00094	8d 14 37	 lea	 edx, DWORD PTR [edi+esi]
$LL20@LoadAttr:
  00097	8a 08		 mov	 cl, BYTE PTR [eax]
  00099	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0009c	40		 inc	 eax
  0009d	84 c9		 test	 cl, cl
  0009f	75 f6		 jne	 SHORT $LL20@LoadAttr
  000a1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 			this->m_MonsterAttr[n].m_Level = (int)TokenNumber;					Token = GetToken();

  000a6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ac	e8 00 00 00 00	 call	 __ftol2_sse
  000b1	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 73   : 			this->m_MonsterAttr[n].m_Hp = (int)TokenNumber;						Token = GetToken();

  000b9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000bf	e8 00 00 00 00	 call	 __ftol2_sse
  000c4	89 46 24	 mov	 DWORD PTR [esi+36], eax
  000c7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 74   : 			this->m_MonsterAttr[n].m_Mp = (int)TokenNumber;						Token = GetToken();

  000cc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d2	e8 00 00 00 00	 call	 __ftol2_sse
  000d7	89 46 28	 mov	 DWORD PTR [esi+40], eax
  000da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 75   : 			this->m_MonsterAttr[n].m_DamageMin = (int)TokenNumber;				Token = GetToken();

  000df	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e5	e8 00 00 00 00	 call	 __ftol2_sse
  000ea	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  000ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 76   : 			this->m_MonsterAttr[n].m_DamageMax = (int)TokenNumber;				Token = GetToken();

  000f2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f8	e8 00 00 00 00	 call	 __ftol2_sse
  000fd	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00100	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 77   : 			this->m_MonsterAttr[n].m_Defense = (int)TokenNumber;					Token = GetToken();

  00105	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0010b	e8 00 00 00 00	 call	 __ftol2_sse
  00110	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00113	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 78   : 			this->m_MonsterAttr[n].m_MagicDefense = (int)TokenNumber;			Token = GetToken();

  00118	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0011e	e8 00 00 00 00	 call	 __ftol2_sse
  00123	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00126	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 			this->m_MonsterAttr[n].m_AttackRating = (int)TokenNumber;			Token = GetToken();

  0012b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00131	e8 00 00 00 00	 call	 __ftol2_sse
  00136	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00139	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 			this->m_MonsterAttr[n].m_Successfulblocking = (int)TokenNumber;		Token = GetToken();

  0013e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00144	e8 00 00 00 00	 call	 __ftol2_sse
  00149	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0014c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 81   : 			this->m_MonsterAttr[n].m_MoveRange = (int)TokenNumber;				Token = GetToken();

  00151	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00157	e8 00 00 00 00	 call	 __ftol2_sse
  0015c	89 46 44	 mov	 DWORD PTR [esi+68], eax
  0015f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 			this->m_MonsterAttr[n].m_AttackType = (int)TokenNumber;				Token = GetToken();

  00164	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016a	e8 00 00 00 00	 call	 __ftol2_sse
  0016f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00172	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 			this->m_MonsterAttr[n].m_AttackRange = (int)TokenNumber;				Token = GetToken();

  00177	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0017d	e8 00 00 00 00	 call	 __ftol2_sse
  00182	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00185	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 84   : 			this->m_MonsterAttr[n].m_ViewRange = (int)TokenNumber;				Token = GetToken();

  0018a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00190	e8 00 00 00 00	 call	 __ftol2_sse
  00195	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00198	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 			this->m_MonsterAttr[n].m_MoveSpeed = (int)TokenNumber;				Token = GetToken();

  0019d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a3	e8 00 00 00 00	 call	 __ftol2_sse
  001a8	89 46 54	 mov	 DWORD PTR [esi+84], eax
  001ab	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 			this->m_MonsterAttr[n].m_AttackSpeed = (int)TokenNumber;				Token = GetToken();

  001b0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b6	e8 00 00 00 00	 call	 __ftol2_sse
  001bb	89 46 58	 mov	 DWORD PTR [esi+88], eax
  001be	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 87   : 			this->m_MonsterAttr[n].m_RegenTime = (int)TokenNumber;				Token = GetToken();

  001c3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c9	e8 00 00 00 00	 call	 __ftol2_sse
  001ce	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 			this->m_MonsterAttr[n].m_Attribute = (int)TokenNumber;				Token = GetToken();

  001d6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001dc	e8 00 00 00 00	 call	 __ftol2_sse
  001e1	89 46 60	 mov	 DWORD PTR [esi+96], eax
  001e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 			this->m_MonsterAttr[n].m_ItemRate = (int)TokenNumber;				Token = GetToken();

  001e9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ef	e8 00 00 00 00	 call	 __ftol2_sse
  001f4	89 46 64	 mov	 DWORD PTR [esi+100], eax
  001f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 			this->m_MonsterAttr[n].m_MoneyRate = (int)TokenNumber;				Token = GetToken();

  001fc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00202	e8 00 00 00 00	 call	 __ftol2_sse
  00207	89 46 68	 mov	 DWORD PTR [esi+104], eax
  0020a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 			this->m_MonsterAttr[n].m_MaxItemLevel = (int)TokenNumber;			Token = GetToken();

  0020f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00215	e8 00 00 00 00	 call	 __ftol2_sse
  0021a	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  0021d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 92   : 			this->m_MonsterAttr[n].m_MonsterSkill = (DWORD)TokenNumber;			Token = GetToken();

  00222	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00228	d9 7d 0a	 fnstcw	 WORD PTR tv1626[ebp]
  0022b	0f b7 45 0a	 movzx	 eax, WORD PTR tv1626[ebp]
  0022f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00234	89 45 f8	 mov	 DWORD PTR tv1623[ebp], eax
  00237	d9 6d f8	 fldcw	 WORD PTR tv1623[ebp]
  0023a	df 7d f4	 fistp	 QWORD PTR tv1621[ebp]
  0023d	8b 45 f4	 mov	 eax, DWORD PTR tv1621[ebp]
  00240	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00243	d9 6d 0a	 fldcw	 WORD PTR tv1626[ebp]
  00246	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 93   : 			this->m_MonsterAttr[n].m_Resistance[R_ICE]  = (BYTE)TokenNumber;		Token = GetToken();

  0024b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00251	d9 7d 0a	 fnstcw	 WORD PTR tv1618[ebp]
  00254	0f b7 45 0a	 movzx	 eax, WORD PTR tv1618[ebp]
  00258	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0025d	89 45 f8	 mov	 DWORD PTR tv1615[ebp], eax
  00260	d9 6d f8	 fldcw	 WORD PTR tv1615[ebp]
  00263	db 5d f8	 fistp	 DWORD PTR tv1613[ebp]
  00266	0f b6 4d f8	 movzx	 ecx, BYTE PTR tv1613[ebp]
  0026a	88 4e 70	 mov	 BYTE PTR [esi+112], cl
  0026d	d9 6d 0a	 fldcw	 WORD PTR tv1618[ebp]
  00270	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 94   : 			this->m_MonsterAttr[n].m_Resistance[R_POISON] = (BYTE)TokenNumber;	Token = GetToken();

  00275	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0027b	d9 7d 0a	 fnstcw	 WORD PTR tv1610[ebp]
  0027e	0f b7 45 0a	 movzx	 eax, WORD PTR tv1610[ebp]
  00282	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00287	89 45 f8	 mov	 DWORD PTR tv1607[ebp], eax
  0028a	d9 6d f8	 fldcw	 WORD PTR tv1607[ebp]
  0028d	db 5d f8	 fistp	 DWORD PTR tv1605[ebp]
  00290	8a 55 f8	 mov	 dl, BYTE PTR tv1605[ebp]
  00293	88 56 71	 mov	 BYTE PTR [esi+113], dl
  00296	d9 6d 0a	 fldcw	 WORD PTR tv1610[ebp]
  00299	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 95   : 			this->m_MonsterAttr[n].m_Resistance[R_LIGHTNING] = (BYTE)TokenNumber;	Token = GetToken();

  0029e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002a4	d9 7d 0a	 fnstcw	 WORD PTR tv1602[ebp]
  002a7	0f b7 45 0a	 movzx	 eax, WORD PTR tv1602[ebp]
  002ab	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002b0	89 45 f8	 mov	 DWORD PTR tv1599[ebp], eax
  002b3	d9 6d f8	 fldcw	 WORD PTR tv1599[ebp]
  002b6	db 5d f8	 fistp	 DWORD PTR tv1597[ebp]
  002b9	8a 45 f8	 mov	 al, BYTE PTR tv1597[ebp]
  002bc	88 46 72	 mov	 BYTE PTR [esi+114], al
  002bf	d9 6d 0a	 fldcw	 WORD PTR tv1602[ebp]
  002c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 96   : 			this->m_MonsterAttr[n].m_Resistance[R_FIRE] = (BYTE)TokenNumber;
; 97   : 			
; 98   : 			this->m_MonsterAttr[n].m_Hp = this->m_MonsterAttr[n].m_Hp - (INT)(this->m_MonsterAttr[n].m_Hp / 100.0f * gMonsterHp);

  002c7	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  002ca	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002d0	d9 7d 0a	 fnstcw	 WORD PTR tv1594[ebp]
  002d3	0f b7 45 0a	 movzx	 eax, WORD PTR tv1594[ebp]
  002d7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002dc	89 45 f8	 mov	 DWORD PTR tv1591[ebp], eax
  002df	d9 6d f8	 fldcw	 WORD PTR tv1591[ebp]
  002e2	db 5d f8	 fistp	 DWORD PTR tv1589[ebp]
  002e5	0f b6 4d f8	 movzx	 ecx, BYTE PTR tv1589[ebp]
  002e9	88 4e 73	 mov	 BYTE PTR [esi+115], cl
  002ec	d9 6d 0a	 fldcw	 WORD PTR tv1594[ebp]
  002ef	89 7d 08	 mov	 DWORD PTR tv1671[ebp], edi
  002f2	db 45 08	 fild	 DWORD PTR tv1671[ebp]
  002f5	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  002fb	da 0d 00 00 00
	00		 fimul	 DWORD PTR ?gMonsterHp@@3HA ; gMonsterHp
  00301	e8 00 00 00 00	 call	 __ftol2_sse

; 99   : 		
; 100  : 			this->m_MonsterAttr[n].m_iScriptHP = this->m_MonsterAttr[n].m_Hp;
; 101  : 
; 102  : 			if ( this->m_MonsterAttr[n].m_Level <= 24 && this->m_MonsterAttr[n].m_Index < 50)

  00306	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00309	8b cf		 mov	 ecx, edi
  0030b	2b c8		 sub	 ecx, eax
  0030d	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  00310	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00313	83 fb 18	 cmp	 ebx, 24			; 00000018H
  00316	0f 8f 7f 00 00
	00		 jg	 $LN30@LoadAttr
  0031c	83 7e fc 32	 cmp	 DWORD PTR [esi-4], 50	; 00000032H
  00320	7d 79		 jge	 SHORT $LN30@LoadAttr

; 103  : 			{
; 104  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 105  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 106  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 107  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 108  : 					 this->m_MonsterAttr[n].m_Level == 19 ||
; 109  : 					 this->m_MonsterAttr[n].m_Level == 24 )

  00322	83 fb 0d	 cmp	 ebx, 13			; 0000000dH
  00325	74 39		 je	 SHORT $LN26@LoadAttr
  00327	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  0032a	74 34		 je	 SHORT $LN26@LoadAttr
  0032c	83 fb 11	 cmp	 ebx, 17			; 00000011H
  0032f	74 2f		 je	 SHORT $LN26@LoadAttr
  00331	83 fb 12	 cmp	 ebx, 18			; 00000012H
  00334	74 2a		 je	 SHORT $LN26@LoadAttr
  00336	83 fb 13	 cmp	 ebx, 19			; 00000013H
  00339	74 25		 je	 SHORT $LN26@LoadAttr
  0033b	83 fb 18	 cmp	 ebx, 24			; 00000018H
  0033e	74 20		 je	 SHORT $LN26@LoadAttr

; 114  : 				}
; 115  : 				else if ( this->m_MonsterAttr[n].m_Level == 20 || this->m_MonsterAttr[n].m_Level == 22 )

  00340	83 fb 14	 cmp	 ebx, 20			; 00000014H
  00343	74 12		 je	 SHORT $LN7@LoadAttr
  00345	83 fb 16	 cmp	 ebx, 22			; 00000016H
  00348	74 0d		 je	 SHORT $LN7@LoadAttr

; 122  : 				{
; 123  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp/2;

  0034a	8b f9		 mov	 edi, ecx
  0034c	8b c1		 mov	 eax, ecx
  0034e	99		 cdq
  0034f	2b c2		 sub	 eax, edx
  00351	8b c8		 mov	 ecx, eax
  00353	d1 f9		 sar	 ecx, 1

; 124  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 125  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;

  00355	eb 23		 jmp	 SHORT $LN34@LoadAttr
$LN7@LoadAttr:

; 116  : 				{
; 117  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*30/100;

  00357	8b f9		 mov	 edi, ecx
  00359	c1 e1 04	 shl	 ecx, 4
  0035c	2b cf		 sub	 ecx, edi

; 118  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 119  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 120  : 				}
; 121  : 				else

  0035e	eb 07		 jmp	 SHORT $LN35@LoadAttr
$LN26@LoadAttr:

; 110  : 				{
; 111  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*20/100;

  00360	8b f9		 mov	 edi, ecx
  00362	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00365	03 c9		 add	 ecx, ecx
$LN35@LoadAttr:
  00367	03 c9		 add	 ecx, ecx
  00369	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0036e	f7 e9		 imul	 ecx
  00370	c1 fa 05	 sar	 edx, 5
  00373	8b ca		 mov	 ecx, edx
  00375	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00378	03 ca		 add	 ecx, edx
$LN34@LoadAttr:

; 112  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;

  0037a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  00380	0f af d1	 imul	 edx, ecx
  00383	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00388	f7 ea		 imul	 edx
  0038a	c1 fa 05	 sar	 edx, 5
  0038d	8b c2		 mov	 eax, edx
  0038f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00392	03 c2		 add	 eax, edx

; 113  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;

  00394	2b c1		 sub	 eax, ecx
  00396	03 c7		 add	 eax, edi
  00398	89 46 24	 mov	 DWORD PTR [esi+36], eax
$LN30@LoadAttr:

; 126  : 				}
; 127  : 			}
; 128  : 
; 129  : 			if ( this->m_MonsterAttr[n].m_Level  <= 19 && this->m_MonsterAttr[n].m_Index  < 50 )

  0039b	83 fb 13	 cmp	 ebx, 19			; 00000013H
  0039e	0f 8f be 00 00
	00		 jg	 $LN2@LoadAttr
  003a4	83 7e fc 32	 cmp	 DWORD PTR [esi-4], 50	; 00000032H
  003a8	0f 8d b4 00 00
	00		 jge	 $LN2@LoadAttr

; 130  : 			{
; 131  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 132  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 133  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 134  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 135  : 					 this->m_MonsterAttr[n].m_Level == 19 )

  003ae	83 fb 0d	 cmp	 ebx, 13			; 0000000dH
  003b1	74 2f		 je	 SHORT $LN3@LoadAttr
  003b3	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  003b6	74 2a		 je	 SHORT $LN3@LoadAttr
  003b8	83 fb 11	 cmp	 ebx, 17			; 00000011H
  003bb	74 25		 je	 SHORT $LN3@LoadAttr
  003bd	83 fb 12	 cmp	 ebx, 18			; 00000012H
  003c0	74 20		 je	 SHORT $LN3@LoadAttr
  003c2	83 fb 13	 cmp	 ebx, 19			; 00000013H
  003c5	74 1b		 je	 SHORT $LN3@LoadAttr

; 145  : 				}
; 146  : 				else
; 147  : 				{
; 148  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin/2;

  003c7	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 149  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax/2;

  003ca	8b 5e 30	 mov	 ebx, DWORD PTR [esi+48]
  003cd	89 45 08	 mov	 DWORD PTR tv1690[ebp], eax
  003d0	99		 cdq
  003d1	2b c2		 sub	 eax, edx
  003d3	8b f8		 mov	 edi, eax
  003d5	8b c3		 mov	 eax, ebx
  003d7	99		 cdq
  003d8	2b c2		 sub	 eax, edx
  003da	8b c8		 mov	 ecx, eax
  003dc	d1 ff		 sar	 edi, 1
  003de	d1 f9		 sar	 ecx, 1

; 150  : 
; 151  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 152  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;
; 153  : 
; 154  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;
; 155  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;

  003e0	eb 3d		 jmp	 SHORT $LN36@LoadAttr
$LN3@LoadAttr:

; 136  : 				 {
; 137  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin*30/100;

  003e2	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 138  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax*30/100;

  003e5	8b 5e 30	 mov	 ebx, DWORD PTR [esi+48]
  003e8	8b c8		 mov	 ecx, eax
  003ea	c1 e1 04	 shl	 ecx, 4
  003ed	2b c8		 sub	 ecx, eax
  003ef	03 c9		 add	 ecx, ecx
  003f1	89 45 08	 mov	 DWORD PTR tv1690[ebp], eax
  003f4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003f9	f7 e9		 imul	 ecx
  003fb	c1 fa 05	 sar	 edx, 5
  003fe	8b cb		 mov	 ecx, ebx
  00400	c1 e1 04	 shl	 ecx, 4
  00403	8b fa		 mov	 edi, edx
  00405	2b cb		 sub	 ecx, ebx
  00407	03 c9		 add	 ecx, ecx
  00409	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0040c	03 fa		 add	 edi, edx
  0040e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00413	f7 e9		 imul	 ecx
  00415	c1 fa 05	 sar	 edx, 5
  00418	8b ca		 mov	 ecx, edx
  0041a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0041d	03 ca		 add	 ecx, edx
$LN36@LoadAttr:

; 139  : 
; 140  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 141  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;

  0041f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  00425	0f af d1	 imul	 edx, ecx
  00428	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  0042d	f7 ea		 imul	 edx
  0042f	c1 fa 05	 sar	 edx, 5
  00432	8b c2		 mov	 eax, edx
  00434	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00437	03 c2		 add	 eax, edx
  00439	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gMonsterHPAdjust@@3HA ; gMonsterHPAdjust
  0043f	0f af d7	 imul	 edx, edi
  00442	03 c8		 add	 ecx, eax
  00444	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00449	f7 ea		 imul	 edx
  0044b	c1 fa 05	 sar	 edx, 5
  0044e	8b c2		 mov	 eax, edx
  00450	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00453	03 c2		 add	 eax, edx

; 142  : 
; 143  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;

  00455	2b c7		 sub	 eax, edi
  00457	03 45 08	 add	 eax, DWORD PTR tv1690[ebp]

; 144  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;

  0045a	2b d9		 sub	 ebx, ecx
  0045c	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0045f	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$LN2@LoadAttr:

; 156  : 				}
; 157  : 			}	 
; 158  : 
; 159  : 			n++;

  00462	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00465	40		 inc	 eax
  00466	83 ee 80	 sub	 esi, -128		; ffffff80H
  00469	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 160  : 
; 161  : 			if ( n> MAX_MONSTER_TYPE-1 )

  0046c	3d ff 03 00 00	 cmp	 eax, 1023		; 000003ffH
  00471	7f 29		 jg	 SHORT $LN25@LoadAttr
  00473	8b 7d f0	 mov	 edi, DWORD PTR tv1567[ebp]
$LN1@LoadAttr:

; 56   : 
; 57   : 	while ( true )
; 58   : 	{
; 59   : 		Token = GetToken();

  00476	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 60   : 
; 61   : 		if ( Token == END )

  0047b	83 f8 02	 cmp	 eax, 2
  0047e	0f 85 dd fb ff
	ff		 jne	 $LL16@LoadAttr
$LN24@LoadAttr:

; 165  : 				return;
; 166  : 			}
; 167  : 		}
; 168  : 	}
; 169  : 
; 170  : 	fclose(SMDFile);

  00484	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  0048a	51		 push	 ecx
  0048b	e8 00 00 00 00	 call	 _fclose
  00490	83 c4 04	 add	 esp, 4
  00493	5b		 pop	 ebx
  00494	5f		 pop	 edi
  00495	5e		 pop	 esi

; 171  : }

  00496	8b e5		 mov	 esp, ebp
  00498	5d		 pop	 ebp
  00499	c2 04 00	 ret	 4
$LN25@LoadAttr:

; 162  : 			{
; 163  : 				MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  0049c	68 a3 00 00 00	 push	 163			; 000000a3H
  004a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FFPJBDC@MonsterAttr?4cpp?$AA@
  004a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  004ab	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 164  : 				fclose(SMDFile);

  004b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  004b6	52		 push	 edx
  004b7	e8 00 00 00 00	 call	 _fclose
  004bc	83 c4 10	 add	 esp, 16			; 00000010H
  004bf	5b		 pop	 ebx
  004c0	5f		 pop	 edi
  004c1	5e		 pop	 esi

; 171  : }

  004c2	8b e5		 mov	 esp, ebp
  004c4	5d		 pop	 ebp
  004c5	c2 04 00	 ret	 4
?LoadAttr@CMonsterAttr@@QAEXPAD@Z ENDP			; CMonsterAttr::LoadAttr
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadAttr@CMonsterAttr@@QAEXPADH@Z		; CMonsterAttr::LoadAttr
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadAttr@CMonsterAttr@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAttr@CMonsterAttr@@QAEXPADH@Z$0
__ehfuncinfo$?LoadAttr@CMonsterAttr@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadAttr@CMonsterAttr@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadAttr@CMonsterAttr@@QAEXPADH@Z
_TEXT	SEGMENT
tv1308 = -152						; size = 4
_WzMemScript$ = -148					; size = 132
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LoadAttr@CMonsterAttr@@QAEXPADH@Z PROC			; CMonsterAttr::LoadAttr, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadAttr@CMonsterAttr@@QAEXPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 7d 08	 mov	 edi, DWORD PTR _Buffer$[ebp]
  00031	8b f1		 mov	 esi, ecx

; 175  : 	CWzMemScript WzMemScript;

  00033	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00039	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 176  : 	
; 177  : 	WzMemScript.SetBuffer(Buffer, iSize);

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00041	50		 push	 eax
  00042	33 db		 xor	 ebx, ebx
  00044	57		 push	 edi
  00045	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0004b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004e	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 178  : 
; 179  : 	int Token;
; 180  : 	int n=0;
; 181  : 
; 182  : 	while ( true )
; 183  : 	{
; 184  : 		Token = WzMemScript.GetToken();

  00053	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00059	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 185  : 
; 186  : 		if ( Token == END )

  0005e	83 f8 02	 cmp	 eax, 2
  00061	0f 84 44 03 00
	00		 je	 $LN13@LoadAttr@2

; 225  : 
; 226  : #if(!FIX_MONSTER_HP)
; 227  : 
; 228  : 			if ( this->m_MonsterAttr[n].m_Level <= 24 && this->m_MonsterAttr[n].m_Index < 50)
; 229  : 			{
; 230  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 231  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 232  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 233  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 234  : 					 this->m_MonsterAttr[n].m_Level == 19 ||
; 235  : 					 this->m_MonsterAttr[n].m_Level == 24 )
; 236  : 				{
; 237  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*20/100;
; 238  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 239  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 240  : 				}
; 241  : 				else if ( this->m_MonsterAttr[n].m_Level == 20 || this->m_MonsterAttr[n].m_Level == 22 )
; 242  : 				{
; 243  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*30/100;
; 244  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 245  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 246  : 				}
; 247  : 				else
; 248  : 				{
; 249  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp/2;
; 250  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 251  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 252  : 				}
; 253  : 			}
; 254  : 
; 255  : 			if ( this->m_MonsterAttr[n].m_Level  <= 19 && this->m_MonsterAttr[n].m_Index  < 50 )
; 256  : 			{
; 257  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 258  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 259  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 260  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 261  : 					 this->m_MonsterAttr[n].m_Level == 19 )
; 262  : 				 {
; 263  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin*30/100;
; 264  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax*30/100;
; 265  : 
; 266  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 267  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;
; 268  : 
; 269  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;
; 270  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;
; 271  : 				}
; 272  : 				else
; 273  : 				{
; 274  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin/2;
; 275  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax/2;
; 276  : 
; 277  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 278  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;
; 279  : 
; 280  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;
; 281  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;
; 282  : 				}
; 283  : 			}
; 284  : 
; 285  : #endif
; 286  : 
; 287  : 			n++;

  00067	83 c6 08	 add	 esi, 8
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL5@LoadAttr@2:

; 187  : 		{
; 188  : 			break;
; 189  : 		}
; 190  : 
; 191  : 		if ( Token == NUMBER )

  00070	83 f8 01	 cmp	 eax, 1
  00073	0f 85 f9 02 00
	00		 jne	 $LN1@LoadAttr@2

; 192  : 		{
; 193  : 			this->m_MonsterAttr[n].m_Index = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  00079	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0007f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00084	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0008a	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  0008d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 194  : 			this->m_MonsterAttr[n].m_Rate = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  00092	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00098	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0009d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000a3	89 06		 mov	 DWORD PTR [esi], eax
  000a5	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 195  : 			strcpy(this->m_MonsterAttr[n].m_Name, WzMemScript.GetString());				Token = WzMemScript.GetToken();

  000aa	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000b0	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  000b5	8b d6		 mov	 edx, esi
  000b7	2b d0		 sub	 edx, eax
  000b9	8d a4 24 00 00
	00 00		 npad	 7
$LL8@LoadAttr@2:
  000c0	8a 08		 mov	 cl, BYTE PTR [eax]
  000c2	88 4c 02 04	 mov	 BYTE PTR [edx+eax+4], cl
  000c6	40		 inc	 eax
  000c7	84 c9		 test	 cl, cl
  000c9	75 f5		 jne	 SHORT $LL8@LoadAttr@2
  000cb	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000d1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 196  : 			this->m_MonsterAttr[n].m_Level = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  000d6	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000dc	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  000e1	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000e7	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000ea	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 197  : 			this->m_MonsterAttr[n].m_Hp = WzMemScript.GetNumber();						Token = WzMemScript.GetToken();

  000ef	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000f5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  000fa	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00100	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00103	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 198  : 			this->m_MonsterAttr[n].m_Mp = WzMemScript.GetNumber();						Token = WzMemScript.GetToken();

  00108	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0010e	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00113	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00119	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0011c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 199  : 			this->m_MonsterAttr[n].m_DamageMin = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00121	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00127	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0012c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00132	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00135	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 200  : 			this->m_MonsterAttr[n].m_DamageMax = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  0013a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00140	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00145	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0014b	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0014e	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 201  : 			this->m_MonsterAttr[n].m_Defense = WzMemScript.GetNumber();					Token = WzMemScript.GetToken();

  00153	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00159	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0015e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00164	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00167	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 202  : 			this->m_MonsterAttr[n].m_MagicDefense = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  0016c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00172	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00177	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0017d	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00180	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 203  : 			this->m_MonsterAttr[n].m_AttackRating = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  00185	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0018b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00190	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00196	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00199	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 204  : 			this->m_MonsterAttr[n].m_Successfulblocking = WzMemScript.GetNumber();		Token = WzMemScript.GetToken();

  0019e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001a4	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  001a9	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001af	89 46 40	 mov	 DWORD PTR [esi+64], eax
  001b2	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 205  : 			this->m_MonsterAttr[n].m_MoveRange = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  001b7	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001bd	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  001c2	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001c8	89 46 44	 mov	 DWORD PTR [esi+68], eax
  001cb	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 206  : 			this->m_MonsterAttr[n].m_AttackType = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  001d0	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001d6	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  001db	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001e1	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  001e4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 207  : 			this->m_MonsterAttr[n].m_AttackRange = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  001e9	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001ef	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  001f4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001fa	89 46 48	 mov	 DWORD PTR [esi+72], eax
  001fd	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 208  : 			this->m_MonsterAttr[n].m_ViewRange = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00202	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00208	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0020d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00213	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00216	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 209  : 			this->m_MonsterAttr[n].m_MoveSpeed = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  0021b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00221	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00226	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0022c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0022f	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 210  : 			this->m_MonsterAttr[n].m_AttackSpeed = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00234	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0023a	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0023f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00245	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00248	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 211  : 			this->m_MonsterAttr[n].m_RegenTime = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  0024d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00253	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00258	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0025b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00261	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 212  : 			this->m_MonsterAttr[n].m_Attribute = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00266	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0026c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00271	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00277	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0027a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 213  : 			this->m_MonsterAttr[n].m_ItemRate = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  0027f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00285	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0028a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00290	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00293	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 214  : 			this->m_MonsterAttr[n].m_MoneyRate = WzMemScript.GetNumber();				Token = WzMemScript.GetToken();

  00298	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0029e	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  002a3	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002a9	89 46 68	 mov	 DWORD PTR [esi+104], eax
  002ac	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 215  : 			this->m_MonsterAttr[n].m_MaxItemLevel = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  002b1	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002b7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  002bc	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002c2	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  002c5	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 216  : 			this->m_MonsterAttr[n].m_MonsterSkill = WzMemScript.GetNumber();			Token = WzMemScript.GetToken();

  002ca	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002d0	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  002d5	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002db	89 46 78	 mov	 DWORD PTR [esi+120], eax
  002de	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 217  : 			this->m_MonsterAttr[n].m_Resistance[R_ICE]  = WzMemScript.GetNumber();		Token = WzMemScript.GetToken();

  002e3	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002e9	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  002ee	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002f4	88 46 70	 mov	 BYTE PTR [esi+112], al
  002f7	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 218  : 			this->m_MonsterAttr[n].m_Resistance[R_POISON] = WzMemScript.GetNumber();	Token = WzMemScript.GetToken();

  002fc	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00302	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00307	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0030d	88 46 71	 mov	 BYTE PTR [esi+113], al
  00310	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 219  : 			this->m_MonsterAttr[n].m_Resistance[R_LIGHTNING] = WzMemScript.GetNumber();	Token = WzMemScript.GetToken();

  00315	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0031b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00320	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00326	88 46 72	 mov	 BYTE PTR [esi+114], al
  00329	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 220  : 			this->m_MonsterAttr[n].m_Resistance[R_FIRE] = WzMemScript.GetNumber();

  0032e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00334	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 221  : 
; 222  : 			this->m_MonsterAttr[n].m_Hp = this->m_MonsterAttr[n].m_Hp - (INT)(this->m_MonsterAttr[n].m_Hp / 100.0f * gMonsterHp);

  00339	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0033c	89 bd 68 ff ff
	ff		 mov	 DWORD PTR tv1308[ebp], edi
  00342	db 85 68 ff ff
	ff		 fild	 DWORD PTR tv1308[ebp]
  00348	88 46 73	 mov	 BYTE PTR [esi+115], al
  0034b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00351	da 0d 00 00 00
	00		 fimul	 DWORD PTR ?gMonsterHp@@3HA ; gMonsterHp
  00357	e8 00 00 00 00	 call	 __ftol2_sse
  0035c	8b cf		 mov	 ecx, edi
  0035e	2b c8		 sub	 ecx, eax
  00360	89 4e 24	 mov	 DWORD PTR [esi+36], ecx

; 223  : 
; 224  : 			this->m_MonsterAttr[n].m_iScriptHP = this->m_MonsterAttr[n].m_Hp;

  00363	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 225  : 
; 226  : #if(!FIX_MONSTER_HP)
; 227  : 
; 228  : 			if ( this->m_MonsterAttr[n].m_Level <= 24 && this->m_MonsterAttr[n].m_Index < 50)
; 229  : 			{
; 230  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 231  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 232  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 233  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 234  : 					 this->m_MonsterAttr[n].m_Level == 19 ||
; 235  : 					 this->m_MonsterAttr[n].m_Level == 24 )
; 236  : 				{
; 237  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*20/100;
; 238  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 239  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 240  : 				}
; 241  : 				else if ( this->m_MonsterAttr[n].m_Level == 20 || this->m_MonsterAttr[n].m_Level == 22 )
; 242  : 				{
; 243  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp*30/100;
; 244  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 245  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 246  : 				}
; 247  : 				else
; 248  : 				{
; 249  : 					int modiryvalue = this->m_MonsterAttr[n].m_Hp/2;
; 250  : 					modiryvalue-= modiryvalue*gMonsterHPAdjust/100;
; 251  : 					this->m_MonsterAttr[n].m_Hp -= modiryvalue;
; 252  : 				}
; 253  : 			}
; 254  : 
; 255  : 			if ( this->m_MonsterAttr[n].m_Level  <= 19 && this->m_MonsterAttr[n].m_Index  < 50 )
; 256  : 			{
; 257  : 				if ( this->m_MonsterAttr[n].m_Level == 13 ||
; 258  : 					 this->m_MonsterAttr[n].m_Level == 14 ||
; 259  : 					 this->m_MonsterAttr[n].m_Level == 17 ||
; 260  : 					 this->m_MonsterAttr[n].m_Level == 18 ||
; 261  : 					 this->m_MonsterAttr[n].m_Level == 19 )
; 262  : 				 {
; 263  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin*30/100;
; 264  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax*30/100;
; 265  : 
; 266  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 267  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;
; 268  : 
; 269  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;
; 270  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;
; 271  : 				}
; 272  : 				else
; 273  : 				{
; 274  : 					int modiryvaluemin = this->m_MonsterAttr[n].m_DamageMin/2;
; 275  : 					int modiryvaluemax = this->m_MonsterAttr[n].m_DamageMax/2;
; 276  : 
; 277  : 					modiryvaluemin -= modiryvaluemin*gMonsterHPAdjust/100;
; 278  : 					modiryvaluemax -= modiryvaluemax*gMonsterHPAdjust/100;
; 279  : 
; 280  : 					this->m_MonsterAttr[n].m_DamageMin -= modiryvaluemin;
; 281  : 					this->m_MonsterAttr[n].m_DamageMax -= modiryvaluemax;
; 282  : 				}
; 283  : 			}
; 284  : 
; 285  : #endif
; 286  : 
; 287  : 			n++;

  00366	43		 inc	 ebx
  00367	83 ee 80	 sub	 esi, -128		; ffffff80H

; 288  : 
; 289  : 			if ( n> MAX_MONSTER_TYPE-1 )

  0036a	81 fb ff 03 00
	00		 cmp	 ebx, 1023		; 000003ffH
  00370	7f 16		 jg	 SHORT $LN14@LoadAttr@2
$LN1@LoadAttr@2:

; 178  : 
; 179  : 	int Token;
; 180  : 	int n=0;
; 181  : 
; 182  : 	while ( true )
; 183  : 	{
; 184  : 		Token = WzMemScript.GetToken();

  00372	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00378	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 185  : 
; 186  : 		if ( Token == END )

  0037d	83 f8 02	 cmp	 eax, 2
  00380	0f 85 ea fc ff
	ff		 jne	 $LL5@LoadAttr@2

; 294  : 			}
; 295  : 		}
; 296  : 	}
; 297  : }

  00386	eb 23		 jmp	 SHORT $LN13@LoadAttr@2
$LN14@LoadAttr@2:

; 290  : 			{
; 291  : 				MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  00388	68 23 01 00 00	 push	 291			; 00000123H
  0038d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FFPJBDC@MonsterAttr?4cpp?$AA@
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  00397	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 292  : 				fclose(SMDFile);

  0039c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  003a2	52		 push	 edx
  003a3	e8 00 00 00 00	 call	 _fclose
  003a8	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@LoadAttr@2:

; 293  : 				return;

  003ab	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003b8	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript

; 294  : 			}
; 295  : 		}
; 296  : 	}
; 297  : }

  003bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003c7	59		 pop	 ecx
  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	5b		 pop	 ebx
  003cb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ce	33 cd		 xor	 ecx, ebp
  003d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d5	8b e5		 mov	 esp, ebp
  003d7	5d		 pop	 ebp
  003d8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadAttr@CMonsterAttr@@QAEXPADH@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LoadAttr@CMonsterAttr@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadAttr@CMonsterAttr@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadAttr@CMonsterAttr@@QAEXPADH@Z ENDP			; CMonsterAttr::LoadAttr
PUBLIC	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@PAD@Z ; CMonsterAttr::GetAttr
; Function compile flags: /Ogtp
;	COMDAT ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_zsName$ = 8						; size = 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@PAD@Z PROC ; CMonsterAttr::GetAttr, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 	for ( int n = 0; n<MAX_MONSTER_TYPE;n++)

  0000a	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _zsName$[ebp]
  00010	33 f6		 xor	 esi, esi
$LL4@GetAttr@2:

; 303  : 	{
; 304  : 		if ( !strcmp(this->m_MonsterAttr[n].m_Name,zsName) )

  00012	8b d1		 mov	 edx, ecx
  00014	8b c7		 mov	 eax, edi
$LL10@GetAttr@2:
  00016	8a 18		 mov	 bl, BYTE PTR [eax]
  00018	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0001a	75 1a		 jne	 SHORT $LN11@GetAttr@2
  0001c	84 db		 test	 bl, bl
  0001e	74 12		 je	 SHORT $LN12@GetAttr@2
  00020	8a 58 01	 mov	 bl, BYTE PTR [eax+1]
  00023	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00026	75 0e		 jne	 SHORT $LN11@GetAttr@2
  00028	83 c0 02	 add	 eax, 2
  0002b	83 c2 02	 add	 edx, 2
  0002e	84 db		 test	 bl, bl
  00030	75 e4		 jne	 SHORT $LL10@GetAttr@2
$LN12@GetAttr@2:
  00032	33 c0		 xor	 eax, eax
  00034	eb 05		 jmp	 SHORT $LN13@GetAttr@2
$LN11@GetAttr@2:
  00036	1b c0		 sbb	 eax, eax
  00038	83 d8 ff	 sbb	 eax, -1
$LN13@GetAttr@2:
  0003b	85 c0		 test	 eax, eax
  0003d	74 17		 je	 SHORT $LN8@GetAttr@2

; 302  : 	for ( int n = 0; n<MAX_MONSTER_TYPE;n++)

  0003f	46		 inc	 esi
  00040	83 ef 80	 sub	 edi, -128		; ffffff80H
  00043	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  00049	7c c7		 jl	 SHORT $LL4@GetAttr@2

; 307  : 		}
; 308  : 	}
; 309  : 
; 310  : 	return NULL;

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	33 c0		 xor	 eax, eax
  0004f	5b		 pop	 ebx

; 311  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN8@GetAttr@2:

; 305  : 		{
; 306  : 			return &this->m_MonsterAttr[n];

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c1 e6 07	 shl	 esi, 7
  0005c	5f		 pop	 edi
  0005d	8d 44 06 04	 lea	 eax, DWORD PTR [esi+eax+4]
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 311  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@PAD@Z ENDP ; CMonsterAttr::GetAttr
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMonsterAttr@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMonsterAttr@@UAEPAXI@Z PROC			; CMonsterAttr::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMonsterAttr@@UAE@XZ	; CMonsterAttr::~CMonsterAttr
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMonsterAttr@@UAEPAXI@Z ENDP			; CMonsterAttr::`scalar deleting destructor'
_TEXT	ENDS
END
