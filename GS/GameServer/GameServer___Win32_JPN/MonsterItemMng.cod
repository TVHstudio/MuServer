; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MonsterItemMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMonsterItemMng@@6B@			; CMonsterItemMng::`vftable'
PUBLIC	??0CMonsterItemMng@@QAE@XZ			; CMonsterItemMng::CMonsterItemMng
PUBLIC	??_R4CMonsterItemMng@@6B@			; CMonsterItemMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterItemMng@@@8			; CMonsterItemMng `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterItemMng@@8		; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMonsterItemMng@@UAEPAXI@Z:PROC		; CMonsterItemMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMonsterItemMng@@8
; File e:\work\tranet_version\gs\gameserver\monsteritemmng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterItemMng@@8 DD FLAT:??_R0?AVCMonsterItemMng@@@8 ; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterItemMng@@8
rdata$r	SEGMENT
??_R2CMonsterItemMng@@8 DD FLAT:??_R1A@?0A@EA@CMonsterItemMng@@8 ; CMonsterItemMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterItemMng@@8
rdata$r	SEGMENT
??_R3CMonsterItemMng@@8 DD 00H				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterItemMng@@@8
_DATA	SEGMENT
??_R0?AVCMonsterItemMng@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterItemMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterItemMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMonsterItemMng@@6B@
rdata$r	SEGMENT
??_R4CMonsterItemMng@@6B@ DD 00H			; CMonsterItemMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterItemMng@@@8
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_7CMonsterItemMng@@6B@
CONST	SEGMENT
??_7CMonsterItemMng@@6B@ DD FLAT:??_R4CMonsterItemMng@@6B@ ; CMonsterItemMng::`vftable'
	DD	FLAT:??_ECMonsterItemMng@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMonsterItemMng@@QAE@XZ
_TEXT	SEGMENT
??0CMonsterItemMng@@QAE@XZ PROC				; CMonsterItemMng::CMonsterItemMng, COMDAT
; _this$ = ecx

; 14   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterItemMng@@6B@

; 15   : 	return;
; 16   : }

  00008	c3		 ret	 0
??0CMonsterItemMng@@QAE@XZ ENDP				; CMonsterItemMng::CMonsterItemMng
_TEXT	ENDS
PUBLIC	?Clear@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Clear
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Clear@CMonsterItemMng@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Clear, COMDAT
; _this$ = ecx

; 61   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 62   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  00004	68 20 03 00 00	 push	 800			; 00000320H
  00009	8d 86 24 03 00
	00		 lea	 eax, DWORD PTR [esi+804]
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 c6 04	 add	 esi, 4
  0001d	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H
$LL4@Clear:

; 65   : 	{
; 66   : #if(FIX_MEMLEAK)
; 67   : 		if( this->m_MonsterInvenItems[i] != NULL ) //Memleak 2

  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	85 c0		 test	 eax, eax
  00026	74 09		 je	 SHORT $LN3@Clear

; 68   : 		{
; 69   : 			delete[] this->m_MonsterInvenItems[i];

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002e	83 c4 04	 add	 esp, 4
$LN3@Clear:

; 63   : 
; 64   : 	for ( int i =0 ; i< MAX_LEVEL_MONSTER ; i++ )

  00031	83 c6 04	 add	 esi, 4
  00034	4f		 dec	 edi
  00035	75 eb		 jne	 SHORT $LL4@Clear

; 70   : 		}
; 71   : #else
; 72   : 		delete this->m_MonsterInvenItems[i];
; 73   : #endif
; 74   : 	}
; 75   : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
?Clear@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Clear
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z	; CMonsterItemMng::InsertItem
EXTRN	_rand:PROC
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z:PROC	; CItem::Convert
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_monsterlevel$ = 8					; size = 4
_type$ = 12						; size = 4
tv188 = 16						; size = 4
_index$ = 16						; size = 4
_itemlevel$ = 20					; size = 4
_op1$ = 24						; size = 4
_op2$ = 28						; size = 4
_op3$ = 32						; size = 4
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z PROC		; CMonsterItemMng::InsertItem, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 79   : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 || monsterlevel < 0 )

  00004	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	3d c7 00 00 00	 cmp	 eax, 199		; 000000c7H
  0000f	0f 87 a4 00 00
	00		 ja	 $LN4@InsertItem

; 82   : 	}
; 83   : 
; 84   : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00015	57		 push	 edi
  00016	8b bc 81 24 03
	00 00		 mov	 edi, DWORD PTR [ecx+eax*4+804]

; 85   : 
; 86   : 	if ( itemcount >= MAX_ITEM_IN_MONSTER )

  0001d	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00023	7c 09		 jl	 SHORT $LN3@InsertItem

; 87   : 	{
; 88   : 		return -1;

  00025	0c ff		 or	 al, 255			; 000000ffH
  00027	5f		 pop	 edi

; 109  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 1c 00	 ret	 28			; 0000001cH
$LN3@InsertItem:
  0002e	53		 push	 ebx

; 89   : 	}
; 90   : 
; 91   : 	CItem * item = &this->m_MonsterInvenItems[monsterlevel][itemcount];
; 92   : 	int item_type = (type * MAX_SUBTYPE_ITEMS) + index;

  0002f	8b 5d 0c	 mov	 ebx, DWORD PTR _type$[ebp]
  00032	56		 push	 esi

; 93   : 	item->m_Level = itemlevel;
; 94   : 	item->Convert(item_type, op1, op2, op3, 0, 0,0, NULL, 0xFF, 0, CURRENT_DB_VERSION);

  00033	8b 55 1c	 mov	 edx, DWORD PTR _op2$[ebp]
  00036	6a 03		 push	 3
  00038	6a 00		 push	 0
  0003a	68 ff 00 00 00	 push	 255			; 000000ffH
  0003f	8b f7		 mov	 esi, edi
  00041	6a 00		 push	 0
  00043	69 f6 d4 00 00
	00		 imul	 esi, 212		; 000000d4H
  00049	03 74 81 04	 add	 esi, DWORD PTR [ecx+eax*4+4]
  0004d	8b 4d 20	 mov	 ecx, DWORD PTR _op3$[ebp]
  00050	66 8b 45 14	 mov	 ax, WORD PTR _itemlevel$[ebp]
  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	51		 push	 ecx
  0005b	8b cb		 mov	 ecx, ebx
  0005d	c1 e1 09	 shl	 ecx, 9
  00060	03 4d 10	 add	 ecx, DWORD PTR _index$[ebp]
  00063	66 89 46 08	 mov	 WORD PTR [esi+8], ax
  00067	8b 45 18	 mov	 eax, DWORD PTR _op1$[ebp]
  0006a	52		 push	 edx
  0006b	50		 push	 eax
  0006c	51		 push	 ecx
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 95   : 
; 96   : 	if ( type == 13 && index == 10 )

  00074	83 fb 0d	 cmp	 ebx, 13			; 0000000dH
  00077	75 21		 jne	 SHORT $LN2@InsertItem
  00079	83 7d 10 0a	 cmp	 DWORD PTR _index$[ebp], 10 ; 0000000aH
  0007d	75 1b		 jne	 SHORT $LN2@InsertItem

; 97   : 	{
; 98   : 		int rd = rand() % 100;

  0007f	e8 00 00 00 00	 call	 _rand
  00084	99		 cdq
  00085	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0008a	f7 f9		 idiv	 ecx

; 99   : 		item->m_Durability = rd + 100.0f;

  0008c	89 55 10	 mov	 DWORD PTR tv188[ebp], edx
  0008f	db 45 10	 fild	 DWORD PTR tv188[ebp]
  00092	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4059000000000000

; 100  : 	}
; 101  : 	else

  00098	eb 03		 jmp	 SHORT $LN9@InsertItem
$LN2@InsertItem:

; 102  : 	{
; 103  : 		item->m_Durability = item->m_BaseDurability;

  0009a	d9 46 2c	 fld	 DWORD PTR [esi+44]
$LN9@InsertItem:

; 104  : 	}
; 105  : 
; 106  : 	itemcount ++;
; 107  : 	this->m_iMonsterInvenItemCount[monsterlevel] = itemcount;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  000a0	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	47		 inc	 edi
  000a7	5e		 pop	 esi
  000a8	89 bc 82 24 03
	00 00		 mov	 DWORD PTR [edx+eax*4+804], edi
  000af	5b		 pop	 ebx

; 108  : 	return 0;

  000b0	32 c0		 xor	 al, al
  000b2	5f		 pop	 edi

; 109  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 1c 00	 ret	 28			; 0000001cH
$LN4@InsertItem:

; 80   : 	{
; 81   : 		return -1;

  000b9	0c ff		 or	 al, 255			; 000000ffH

; 109  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 1c 00	 ret	 28			; 0000001cH
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ENDP		; CMonsterItemMng::InsertItem
_TEXT	ENDS
PUBLIC	?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z	; CMonsterItemMng::GetItem
; Function compile flags: /Ogtp
;	COMDAT ?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z
_TEXT	SEGMENT
_monsterlevel$ = 8					; size = 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z PROC		; CMonsterItemMng::GetItem, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 114  : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 || monsterlevel < 0 )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _monsterlevel$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fb c7 00 00
	00		 cmp	 ebx, 199		; 000000c7H
  00010	77 30		 ja	 SHORT $LN2@GetItem

; 117  : 	}
; 118  : 
; 119  : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00012	56		 push	 esi
  00013	8b b4 9f 24 03
	00 00		 mov	 esi, DWORD PTR [edi+ebx*4+804]

; 120  : 
; 121  : 	if ( itemcount <= 0 )

  0001a	85 f6		 test	 esi, esi
  0001c	7f 09		 jg	 SHORT $LN1@GetItem

; 122  : 	{
; 123  : 		return NULL;

  0001e	5e		 pop	 esi
  0001f	5f		 pop	 edi
  00020	33 c0		 xor	 eax, eax
  00022	5b		 pop	 ebx

; 128  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN1@GetItem:

; 124  : 	}
; 125  : 
; 126  : 	int itemindex = rand() % itemcount;

  00027	e8 00 00 00 00	 call	 _rand
  0002c	99		 cdq
  0002d	f7 fe		 idiv	 esi
  0002f	5e		 pop	 esi
  00030	8b c2		 mov	 eax, edx

; 127  : 	return &this->m_MonsterInvenItems[monsterlevel][itemindex];

  00032	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  00038	03 44 9f 04	 add	 eax, DWORD PTR [edi+ebx*4+4]
  0003c	5f		 pop	 edi
  0003d	5b		 pop	 ebx

; 128  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@GetItem:
  00042	5f		 pop	 edi

; 115  : 	{
; 116  : 		return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	5b		 pop	 ebx

; 128  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z ENDP		; CMonsterItemMng::GetItem
_TEXT	ENDS
PUBLIC	??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ ; `string'
PUBLIC	??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@	; `string'
PUBLIC	_monsterlevel$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z	; CMonsterItemMng::gObjGiveItemSearch
EXTRN	?gKeyOfDevilSquareDropRate@@3HA:DWORD		; gKeyOfDevilSquareDropRate
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
EXTRN	?gEyesOfDevilSquareDropRate@@3HA:DWORD		; gEyesOfDevilSquareDropRate
EXTRN	?GetLevelItem@@YAHHHH@Z:PROC			; GetLevelItem
EXTRN	?zzzItemLevel@@YAHHHH@Z:PROC			; zzzItemLevel
EXTRN	?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemEquipment
EXTRN	?IsLuckyItemTicket@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemTicket
EXTRN	?g_LuckyItemManager@@3ULuckyItemManager@@A:BYTE	; g_LuckyItemManager
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
CONST	SEGMENT
??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ DB 'error-L3 :'
	DB	' Monster Level Overflow~ %s %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@
CONST	SEGMENT
??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@ DB 'MonsterItemMng.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z
_TEXT	SEGMENT
_bCheckDevil$209867 = -108				; size = 4
_this$GSCopy$ = -104					; size = 4
_monsterlevel$GSCopy$ = -100				; size = 4
_incount$ = -96						; size = 4
_BallTable$ = -92					; size = 88
__$ArrayPad$ = -4					; size = 4
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z PROC	; CMonsterItemMng::gObjGiveItemSearch, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00013	89 4d 98	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 430  : 					}
; 431  : 				
; 432  : 
; 433  : 					if ( this->InsertItem(monsterlevel, type, index,result, 0,0,0) != (BYTE)-1 )
; 434  : 					{
; 435  : 						incount++;

  00016	89 45 9c	 mov	 DWORD PTR _monsterlevel$GSCopy$[ebp], eax
  00019	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _incount$[ebp], 0
  00020	3d c7 00 00 00	 cmp	 eax, 199		; 000000c7H
  00025	7e 28		 jle	 SHORT $LN97@gObjGiveIt

; 132  : 	int result;
; 133  : 	int incount = 0;
; 134  : 	int type;
; 135  : 	int index;
; 136  : 
; 137  : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 )
; 138  : 	{
; 139  : 		LogAdd("error-L3 : Monster Level Overflow~ %s %d", __FILE__, __LINE__ );

  00027	68 8b 00 00 00	 push	 139			; 0000008bH
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 452  : }

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	33 cd		 xor	 ecx, ebp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN97@gObjGiveIt:
  0004f	53		 push	 ebx
  00050	56		 push	 esi

; 140  : 		return;
; 141  : 	}
; 142  : 
; 143  : 	int BallTable[22]; //season 4.5 changed
; 144  : 
; 145  : 	BallTable[0] = 7;

  00051	c7 45 a4 07 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp], 7

; 146  : 	BallTable[1] = 8;

  00058	c7 45 a8 08 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+4], 8

; 147  : 	BallTable[2] = 9;

  0005f	c7 45 ac 09 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+8], 9

; 148  : 	BallTable[3] = 10;

  00066	c7 45 b0 0a 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+12], 10 ; 0000000aH

; 149  : 	BallTable[4] = 11;

  0006d	c7 45 b4 0b 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+16], 11 ; 0000000bH

; 150  : 	BallTable[5] = 12;

  00074	c7 45 b8 0c 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+20], 12 ; 0000000cH

; 151  : 	BallTable[6] = 13;

  0007b	c7 45 bc 0d 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+24], 13 ; 0000000dH

; 152  : 	BallTable[7] = 14;

  00082	c7 45 c0 0e 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+28], 14 ; 0000000eH

; 153  : 	BallTable[8] = 16;

  00089	c7 45 c4 10 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+32], 16 ; 00000010H

; 154  : 	BallTable[9] = 17;

  00090	c7 45 c8 11 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+36], 17 ; 00000011H

; 155  : 	BallTable[10] = 18;

  00097	c7 45 cc 12 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+40], 18 ; 00000012H

; 156  : 	BallTable[11] = 19;

  0009e	c7 45 d0 13 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+44], 19 ; 00000013H

; 157  : 	BallTable[12] = 21;

  000a5	c7 45 d4 15 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+48], 21 ; 00000015H

; 158  : 	BallTable[13] = 22;

  000ac	c7 45 d8 16 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+52], 22 ; 00000016H

; 159  : 	BallTable[14] = 23;

  000b3	c7 45 dc 17 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+56], 23 ; 00000017H

; 160  : 	BallTable[15] = 24;

  000ba	c7 45 e0 18 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+60], 24 ; 00000018H

; 161  : 	BallTable[16] = 35;

  000c1	c7 45 e4 23 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+64], 35 ; 00000023H

; 162  : 	BallTable[17] = 44;//Season 4.5 addon

  000c8	c7 45 e8 2c 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+68], 44 ; 0000002cH

; 163  :     BallTable[18] = 45;//Season 4.5 addon

  000cf	c7 45 ec 2d 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+72], 45 ; 0000002dH

; 164  :     BallTable[19] = 46;//Season 4.5 addon

  000d6	c7 45 f0 2e 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+76], 46 ; 0000002eH

; 165  :     BallTable[20] = 47;//Season 4.5 addon

  000dd	c7 45 f4 2f 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+80], 47 ; 0000002fH

; 166  :     BallTable[21] = 48;//Season 4.5 addon

  000e4	c7 45 f8 30 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+84], 48 ; 00000030H
  000eb	57		 push	 edi
  000ec	8d 64 24 00	 npad	 4
$LL96@gObjGiveIt:

; 167  : 
; 168  : 	while ( true )
; 169  : 	{
; 170  : 		if ( (rand() % 20) ==  0 ) 

  000f0	e8 00 00 00 00	 call	 _rand
  000f5	99		 cdq
  000f6	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000fb	f7 f9		 idiv	 ecx
  000fd	85 d2		 test	 edx, edx
  000ff	75 4b		 jne	 SHORT $LN94@gObjGiveIt

; 171  : 		{
; 172  : 			if ( (rand() % 2)	!= 0 )

  00101	e8 00 00 00 00	 call	 _rand
  00106	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0010b	79 05		 jns	 SHORT $LN166@gObjGiveIt
  0010d	48		 dec	 eax
  0010e	83 c8 fe	 or	 eax, -2			; fffffffeH
  00111	40		 inc	 eax
$LN166@gObjGiveIt:
  00112	74 1d		 je	 SHORT $LN93@gObjGiveIt

; 173  : 			{
; 174  : 				type = MAX_TYPE_ITEMS-1;

  00114	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 175  : 				index = rand() % (g_MaxItemIndexOfEachItemType[type]+1);

  00119	e8 00 00 00 00	 call	 _rand
  0011e	8b 0d 3c 00 00
	00		 mov	 ecx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA+60
  00124	99		 cdq
  00125	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00128	f7 f9		 idiv	 ecx
  0012a	8b f2		 mov	 esi, edx

; 176  : 			}
; 177  : 			else

  0012c	e9 d5 00 00 00	 jmp	 $LN80@gObjGiveIt
$LN93@gObjGiveIt:

; 178  : 			{
; 179  : 				type = 12;

  00131	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH

; 180  : 				index = BallTable[rand() % 17];

  00136	e8 00 00 00 00	 call	 _rand
  0013b	99		 cdq
  0013c	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00141	f7 f9		 idiv	 ecx
  00143	8b 74 95 a4	 mov	 esi, DWORD PTR _BallTable$[ebp+edx*4]

; 181  : 			}
; 182  : 		}
; 183  : 		else

  00147	e9 ba 00 00 00	 jmp	 $LN80@gObjGiveIt
$LN94@gObjGiveIt:

; 184  : 		{
; 185  : 			type = rand() % MAX_TYPE_ITEMS;

  0014c	e8 00 00 00 00	 call	 _rand
  00151	8b f8		 mov	 edi, eax
  00153	81 e7 0f 00 00
	80		 and	 edi, -2147483633	; 8000000fH
  00159	79 05		 jns	 SHORT $LN167@gObjGiveIt
  0015b	4f		 dec	 edi
  0015c	83 cf f0	 or	 edi, -16		; fffffff0H
  0015f	47		 inc	 edi
$LN167@gObjGiveIt:

; 186  : 			int iMaxItemIndex = g_MaxItemIndexOfEachItemType[type]+1;

  00160	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[edi*4]
  00167	46		 inc	 esi

; 187  : 			index = rand() % iMaxItemIndex;

  00168	e8 00 00 00 00	 call	 _rand
  0016d	99		 cdq
  0016e	f7 fe		 idiv	 esi
  00170	8b f2		 mov	 esi, edx

; 188  : 
; 189  : 			if ( type == 15 || (type == 12 && index != 15 ) )

  00172	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00175	0f 84 75 ff ff
	ff		 je	 $LL96@gObjGiveIt
  0017b	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  0017e	75 0b		 jne	 SHORT $LN90@gObjGiveIt
  00180	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00183	0f 85 67 ff ff
	ff		 jne	 $LL96@gObjGiveIt

; 190  : 			{
; 191  : 				continue;
; 192  : 			}
; 193  : 		}
; 194  : 
; 195  : 		if ( type == 13 && index == 3 )

  00189	eb 7b		 jmp	 SHORT $LN80@gObjGiveIt
$LN90@gObjGiveIt:
  0018b	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  0018e	75 3b		 jne	 SHORT $LN87@gObjGiveIt
  00190	83 fe 03	 cmp	 esi, 3
  00193	0f 84 57 ff ff
	ff		 je	 $LL96@gObjGiveIt

; 196  : 		{
; 197  : 			continue;
; 198  : 		}
; 199  : 
; 200  : 		if ( (type == 13 && index == 32)
; 201  :           || (type == 13 && index == 33)
; 202  :           || (type == 13 && index == 34)
; 203  :           || (type == 13 && index == 35)
; 204  :           || (type == 13 && index == 36)
; 205  :           || (type == 13 && index == 37) )

  00199	83 fe 20	 cmp	 esi, 32			; 00000020H
  0019c	0f 84 4e ff ff
	ff		 je	 $LL96@gObjGiveIt
  001a2	83 fe 21	 cmp	 esi, 33			; 00000021H
  001a5	0f 84 45 ff ff
	ff		 je	 $LL96@gObjGiveIt
  001ab	83 fe 22	 cmp	 esi, 34			; 00000022H
  001ae	0f 84 3c ff ff
	ff		 je	 $LL96@gObjGiveIt
  001b4	83 fe 23	 cmp	 esi, 35			; 00000023H
  001b7	0f 84 33 ff ff
	ff		 je	 $LL96@gObjGiveIt
  001bd	83 fe 24	 cmp	 esi, 36			; 00000024H
  001c0	0f 84 2a ff ff
	ff		 je	 $LL96@gObjGiveIt
  001c6	83 fe 25	 cmp	 esi, 37			; 00000025H

; 206  : 		{
; 207  : 			continue;

  001c9	eb 35		 jmp	 SHORT $LN168@gObjGiveIt
$LN87@gObjGiveIt:

; 208  : 		}
; 209  : 
; 210  :         if ( (type == 14 && index == 35)
; 211  :           || (type == 14 && index == 36)
; 212  :           || (type == 14 && index == 37)
; 213  :           || (type == 14 && index == 38)
; 214  :           || (type == 14 && index == 39)
; 215  :           || (type == 14 && index == 40) )

  001cb	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  001ce	75 36		 jne	 SHORT $LN80@gObjGiveIt
  001d0	83 fe 23	 cmp	 esi, 35			; 00000023H
  001d3	0f 84 17 ff ff
	ff		 je	 $LL96@gObjGiveIt
  001d9	83 fe 24	 cmp	 esi, 36			; 00000024H
  001dc	0f 84 0e ff ff
	ff		 je	 $LL96@gObjGiveIt
  001e2	83 fe 25	 cmp	 esi, 37			; 00000025H
  001e5	0f 84 05 ff ff
	ff		 je	 $LL96@gObjGiveIt
  001eb	83 fe 26	 cmp	 esi, 38			; 00000026H
  001ee	0f 84 fc fe ff
	ff		 je	 $LL96@gObjGiveIt
  001f4	83 fe 27	 cmp	 esi, 39			; 00000027H
  001f7	0f 84 f3 fe ff
	ff		 je	 $LL96@gObjGiveIt
  001fd	83 fe 28	 cmp	 esi, 40			; 00000028H
$LN168@gObjGiveIt:

; 216  : 		{
; 217  : 			continue;

  00200	0f 84 ea fe ff
	ff		 je	 $LL96@gObjGiveIt
$LN80@gObjGiveIt:

; 218  : 		}
; 219  : #ifdef OLDCASHSHOP
; 220  :         if ( IsCashItem(ITEMGET(type, index)) == TRUE )
; 221  : 		{
; 222  : 			continue;
; 223  : 		}
; 224  : 
; 225  : 		if ( CanItemTouchCash(ITEMGET(type, index)) == TRUE )
; 226  : 		{
; 227  : 			continue;
; 228  : 		}
; 229  : #endif
; 230  : #ifdef LUCKYITEM
; 231  : 		if( g_LuckyItemManager.IsLuckyItemTicket(ITEMGET(type, index)) == true )

  00206	8b df		 mov	 ebx, edi
  00208	c1 e3 09	 shl	 ebx, 9
  0020b	03 de		 add	 ebx, esi
  0020d	53		 push	 ebx
  0020e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  00213	e8 00 00 00 00	 call	 ?IsLuckyItemTicket@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemTicket
  00218	83 f8 01	 cmp	 eax, 1
  0021b	0f 84 cf fe ff
	ff		 je	 $LL96@gObjGiveIt

; 232  : 		{
; 233  : 			continue;
; 234  : 		}
; 235  : 		// ----
; 236  : 		if( g_LuckyItemManager.IsLuckyItemEquipment(ITEMGET(type, index)) == true )

  00221	53		 push	 ebx
  00222	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  00227	e8 00 00 00 00	 call	 ?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemEquipment
  0022c	83 f8 01	 cmp	 eax, 1
  0022f	0f 84 bb fe ff
	ff		 je	 $LL96@gObjGiveIt

; 237  : 		{
; 238  : 			continue;
; 239  : 		}
; 240  : #endif
; 241  : 
; 242  : 		if(		(type == 14 && index == 162)
; 243  : 			||	(type == 14 && index == 163)
; 244  : 			||	(type == 14 && index == 164)
; 245  : 			||	(type == 14 && index == 165)
; 246  : 			||	(type == 14 && index == 166) )

  00235	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00238	0f 85 0e 01 00
	00		 jne	 $LN65@gObjGiveIt
  0023e	81 fe a2 00 00
	00		 cmp	 esi, 162		; 000000a2H
  00244	0f 84 a6 fe ff
	ff		 je	 $LL96@gObjGiveIt
  0024a	81 fe a3 00 00
	00		 cmp	 esi, 163		; 000000a3H
  00250	0f 84 9a fe ff
	ff		 je	 $LL96@gObjGiveIt
  00256	81 fe a4 00 00
	00		 cmp	 esi, 164		; 000000a4H
  0025c	0f 84 8e fe ff
	ff		 je	 $LL96@gObjGiveIt
  00262	81 fe a5 00 00
	00		 cmp	 esi, 165		; 000000a5H
  00268	0f 84 82 fe ff
	ff		 je	 $LL96@gObjGiveIt
  0026e	81 fe a6 00 00
	00		 cmp	 esi, 166		; 000000a6H

; 247  : 		{
; 248  : 			continue;

  00274	0f 84 76 fe ff
	ff		 je	 $LL96@gObjGiveIt

; 249  : 		}
; 250  :         
; 251  : 		//season 3.0 add-on
; 252  : 		if( (type == 14 && index == 45) ||
; 253  : 			(type == 14 && index == 46) ||
; 254  : 			(type == 14 && index == 47) ||
; 255  : 			(type == 14 && index == 48) ||
; 256  : 			(type == 14 && index == 49) ||
; 257  : 			(type == 14 && index == 50) ) 

  0027a	83 fe 2d	 cmp	 esi, 45			; 0000002dH
  0027d	0f 84 6d fe ff
	ff		 je	 $LL96@gObjGiveIt
  00283	83 fe 2e	 cmp	 esi, 46			; 0000002eH
  00286	0f 84 64 fe ff
	ff		 je	 $LL96@gObjGiveIt
  0028c	83 fe 2f	 cmp	 esi, 47			; 0000002fH
  0028f	0f 84 5b fe ff
	ff		 je	 $LL96@gObjGiveIt
  00295	83 fe 30	 cmp	 esi, 48			; 00000030H
  00298	0f 84 52 fe ff
	ff		 je	 $LL96@gObjGiveIt
  0029e	83 fe 31	 cmp	 esi, 49			; 00000031H
  002a1	0f 84 49 fe ff
	ff		 je	 $LL96@gObjGiveIt
  002a7	83 fe 32	 cmp	 esi, 50			; 00000032H
  002aa	0f 84 40 fe ff
	ff		 je	 $LL96@gObjGiveIt

; 264  : 		{
; 265  : 			continue;
; 266  : 		}
; 267  : 
; 268  : 		if ( (type == 13 && index < 8) || 
; 269  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 270  : 			(type == 12 && index == 15) || 
; 271  : 			(type == 13 && index == 14) || 
; 272  : 			(type == 14 && index == 31 ) )

  002b0	83 fe 09	 cmp	 esi, 9
  002b3	74 2b		 je	 SHORT $LN146@gObjGiveIt
  002b5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  002b8	74 26		 je	 SHORT $LN146@gObjGiveIt
  002ba	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  002bd	74 21		 je	 SHORT $LN146@gObjGiveIt
  002bf	3b f7		 cmp	 esi, edi
  002c1	74 1d		 je	 SHORT $LN146@gObjGiveIt
  002c3	83 fe 10	 cmp	 esi, 16			; 00000010H
  002c6	74 18		 je	 SHORT $LN146@gObjGiveIt
  002c8	83 fe 11	 cmp	 esi, 17			; 00000011H
  002cb	74 13		 je	 SHORT $LN146@gObjGiveIt
  002cd	83 fe 12	 cmp	 esi, 18			; 00000012H
  002d0	74 0e		 je	 SHORT $LN146@gObjGiveIt
  002d2	83 fe 16	 cmp	 esi, 22			; 00000016H
  002d5	74 09		 je	 SHORT $LN146@gObjGiveIt
  002d7	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  002da	0f 85 88 00 00
	00		 jne	 $LN157@gObjGiveIt
$LN146@gObjGiveIt:

; 273  : 		{
; 274  : 			int perc = rand() % 11;

  002e0	e8 00 00 00 00	 call	 _rand
  002e5	99		 cdq
  002e6	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  002eb	f7 f9		 idiv	 ecx

; 275  : 			BOOL bCheckDevil = FALSE;

  002ed	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _bCheckDevil$209867[ebp], 0

; 276  : 
; 277  : 			if ( type == 12 && index == 15 )

  002f4	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  002f7	0f 85 d8 00 00
	00		 jne	 $LN48@gObjGiveIt
  002fd	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00300	0f 85 53 01 00
	00		 jne	 $LN156@gObjGiveIt

; 278  : 			{
; 279  : 				if ( monsterlevel >= 13 && monsterlevel <= 66 )

  00306	8b 5d 9c	 mov	 ebx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  00309	8d 53 f3	 lea	 edx, DWORD PTR [ebx-13]
  0030c	83 fa 35	 cmp	 edx, 53			; 00000035H
  0030f	0f 87 fc 00 00
	00		 ja	 $LN162@gObjGiveIt

; 280  : 				{
; 281  : 					perc = rand() % 7 ;

  00315	e8 00 00 00 00	 call	 _rand
  0031a	99		 cdq
  0031b	b9 07 00 00 00	 mov	 ecx, 7
  00320	f7 f9		 idiv	 ecx

; 282  : 					
; 283  : 					if ( perc < 3 )

  00322	83 fa 03	 cmp	 edx, 3
  00325	0f 8d 31 01 00
	00		 jge	 $LN43@gObjGiveIt
$LN41@gObjGiveIt:

; 373  : 				else if ( zzzItemLevel(type, index, monsterlevel ) == TRUE )

  0032b	53		 push	 ebx
  0032c	56		 push	 esi
  0032d	57		 push	 edi
  0032e	e8 00 00 00 00	 call	 ?zzzItemLevel@@YAHHHH@Z	; zzzItemLevel
  00333	83 c4 0c	 add	 esp, 12			; 0000000cH
  00336	83 f8 01	 cmp	 eax, 1
  00339	0f 85 d2 00 00
	00		 jne	 $LN162@gObjGiveIt

; 374  : 				{
; 375  : 					if ( this->InsertItem(monsterlevel, type, index, 0, 0, 0, 0) != (BYTE)-1 )

  0033f	6a 00		 push	 0
  00341	6a 00		 push	 0
  00343	6a 00		 push	 0
  00345	6a 00		 push	 0

; 376  : 					{
; 377  : 						incount++;
; 378  : 
; 379  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 380  : 						{
; 381  : 							return;
; 382  : 						}
; 383  : 					}
; 384  : 				}
; 385  : 			}
; 386  : 		}
; 387  : 		else

  00347	e9 88 01 00 00	 jmp	 $LN170@gObjGiveIt
$LN65@gObjGiveIt:

; 258  : 		{
; 259  : 			continue;
; 260  : 		}
; 261  : 
; 262  : 		//season 2.5 add-on
; 263  : 		if( (type == 13 && index == 41) ) 

  0034c	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  0034f	75 7a		 jne	 SHORT $LN54@gObjGiveIt
  00351	83 fe 29	 cmp	 esi, 41			; 00000029H
  00354	0f 84 96 fd ff
	ff		 je	 $LL96@gObjGiveIt

; 264  : 		{
; 265  : 			continue;
; 266  : 		}
; 267  : 
; 268  : 		if ( (type == 13 && index < 8) || 
; 269  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 270  : 			(type == 12 && index == 15) || 
; 271  : 			(type == 13 && index == 14) || 
; 272  : 			(type == 14 && index == 31 ) )

  0035a	83 fe 08	 cmp	 esi, 8
  0035d	7c 81		 jl	 SHORT $LN146@gObjGiveIt
  0035f	83 fe 0e	 cmp	 esi, 14			; 0000000eH
$LN169@gObjGiveIt:
  00362	0f 84 78 ff ff
	ff		 je	 $LN146@gObjGiveIt
$LN157@gObjGiveIt:

; 388  : 		{
; 389  : 			result = GetLevelItem(type, index, monsterlevel);

  00368	8b 5d 9c	 mov	 ebx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  0036b	53		 push	 ebx
  0036c	56		 push	 esi
  0036d	57		 push	 edi
  0036e	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  00373	83 c4 0c	 add	 esp, 12			; 0000000cH

; 390  : 
; 391  : 			if ( result >= 0 )

  00376	85 c0		 test	 eax, eax
  00378	0f 88 93 00 00
	00		 js	 $LN162@gObjGiveIt

; 392  : 			{
; 393  : 				if ( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  0037e	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00381	0f 85 34 01 00
	00		 jne	 $LN16@gObjGiveIt
  00387	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0038a	0f 84 3d 01 00
	00		 je	 $LN17@gObjGiveIt
$LN159@gObjGiveIt:

; 405  : 				else if ( result <= maxlevel )

  00390	8b 4d 0c	 mov	 ecx, DWORD PTR _maxlevel$[ebp]
  00393	3b c1		 cmp	 eax, ecx
  00395	7f 7a		 jg	 SHORT $LN162@gObjGiveIt

; 406  : 				{
; 407  : 					if ( type == 12 )

  00397	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  0039a	75 0b		 jne	 SHORT $LN144@gObjGiveIt

; 408  : 					{
; 409  : 						if ( index != 11 )

  0039c	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  0039f	0f 84 28 01 00
	00		 je	 $LN17@gObjGiveIt

; 410  : 						{
; 411  : 							result = 0;

  003a5	33 c0		 xor	 eax, eax
$LN144@gObjGiveIt:

; 412  : 						}
; 413  : 					}
; 414  : 
; 415  : 					if ( type == 12 && index == 11 )
; 416  : 					{
; 417  : 
; 418  : 					}
; 419  : 					else
; 420  : 					{
; 421  : 						if ( result > maxlevel )

  003a7	3b c1		 cmp	 eax, ecx
  003a9	7e 02		 jle	 SHORT $LN7@gObjGiveIt

; 422  : 						{
; 423  : 							result = maxlevel;

  003ab	8b c1		 mov	 eax, ecx
$LN7@gObjGiveIt:

; 424  : 						}
; 425  : 					}
; 426  : 
; 427  : 					if ( (type == 4 && index == 7) || (type == 4 && index == 15) )

  003ad	83 ff 04	 cmp	 edi, 4
  003b0	0f 85 17 01 00
	00		 jne	 $LN17@gObjGiveIt
  003b6	83 fe 07	 cmp	 esi, 7
  003b9	74 09		 je	 SHORT $LN5@gObjGiveIt
  003bb	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  003be	0f 85 09 01 00
	00		 jne	 $LN17@gObjGiveIt
$LN5@gObjGiveIt:

; 428  : 					{
; 429  : 						result = 0;

  003c4	33 c0		 xor	 eax, eax

; 436  : 
; 437  : 						if ( incount > MAX_ITEM_IN_MONSTER-1 )

  003c6	e9 02 01 00 00	 jmp	 $LN17@gObjGiveIt
$LN54@gObjGiveIt:

; 264  : 		{
; 265  : 			continue;
; 266  : 		}
; 267  : 
; 268  : 		if ( (type == 13 && index < 8) || 
; 269  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 270  : 			(type == 12 && index == 15) || 
; 271  : 			(type == 13 && index == 14) || 
; 272  : 			(type == 14 && index == 31 ) )

  003cb	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  003ce	75 98		 jne	 SHORT $LN157@gObjGiveIt
  003d0	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  003d3	eb 8d		 jmp	 SHORT $LN169@gObjGiveIt
$LN48@gObjGiveIt:

; 284  : 					{
; 285  : 						perc = 0;
; 286  : 					}
; 287  : 				}
; 288  : 				else
; 289  : 				{
; 290  : 					perc = 1;
; 291  : 				}
; 292  : 			}
; 293  : 
; 294  : 			if ( type == 14 && index == 17 )

  003d5	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  003d8	75 7f		 jne	 SHORT $LN156@gObjGiveIt
  003da	83 fe 11	 cmp	 esi, 17			; 00000011H
  003dd	75 59		 jne	 SHORT $LN142@gObjGiveIt

; 295  : 			{
; 296  : 				if ( gEyesOfDevilSquareDropRate <= 0 )

  003df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, 0 ; gEyesOfDevilSquareDropRate
  003e6	7f 0a		 jg	 SHORT $LN153@gObjGiveIt

; 297  : 				{
; 298  : 					gEyesOfDevilSquareDropRate = 1;

  003e8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, 1 ; gEyesOfDevilSquareDropRate
$LN153@gObjGiveIt:

; 299  : 				}
; 300  : 
; 301  : 				perc = rand() % gEyesOfDevilSquareDropRate;

  003f2	e8 00 00 00 00	 call	 _rand
  003f7	99		 cdq
  003f8	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA ; gEyesOfDevilSquareDropRate

; 302  : 				bCheckDevil = 1;
; 303  : 
; 304  : 				if ( gDevilSquareEvent == 0 )

  003fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00405	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _bCheckDevil$209867[ebp], 1
  0040c	75 4b		 jne	 SHORT $LN156@gObjGiveIt
$LN161@gObjGiveIt:

; 305  : 				{
; 306  : 					perc = 1;
; 307  : 				}
; 308  : 			}
; 309  : 
; 310  : 			if ( type == 14 && index == 18 )

  0040e	8b 5d 9c	 mov	 ebx, DWORD PTR _monsterlevel$GSCopy$[ebp]
$LN162@gObjGiveIt:

; 438  : 						{
; 439  : 							return;
; 440  : 						}
; 441  : 					}
; 442  : 				}
; 443  : 			}
; 444  : 		}
; 445  : 		
; 446  : 		if ( this->m_iMonsterInvenItemCount[monsterlevel] >= MAX_ITEM_IN_MONSTER )

  00411	8b 55 98	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00414	81 bc 9a 24 03
	00 00 e8 03 00
	00		 cmp	 DWORD PTR [edx+ebx*4+804], 1000 ; 000003e8H

; 447  : 		{
; 448  : 			return;
; 449  : 		}
; 450  : 		
; 451  : 	}

  0041f	0f 8c cb fc ff
	ff		 jl	 $LL96@gObjGiveIt
$LN163@gObjGiveIt:

; 452  : }

  00425	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00428	5f		 pop	 edi
  00429	5e		 pop	 esi
  0042a	33 cd		 xor	 ecx, ebp
  0042c	5b		 pop	 ebx
  0042d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00432	8b e5		 mov	 esp, ebp
  00434	5d		 pop	 ebp
  00435	c2 08 00	 ret	 8
$LN142@gObjGiveIt:

; 305  : 				{
; 306  : 					perc = 1;
; 307  : 				}
; 308  : 			}
; 309  : 
; 310  : 			if ( type == 14 && index == 18 )

  00438	83 fe 12	 cmp	 esi, 18			; 00000012H
  0043b	75 1c		 jne	 SHORT $LN156@gObjGiveIt

; 311  : 			{
; 312  : 				perc = rand() % gKeyOfDevilSquareDropRate;

  0043d	e8 00 00 00 00	 call	 _rand
  00442	99		 cdq
  00443	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA ; gKeyOfDevilSquareDropRate

; 313  : 				bCheckDevil = 1;
; 314  : 
; 315  : 				if ( gDevilSquareEvent == 0 )

  00449	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00450	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _bCheckDevil$209867[ebp], 1

; 316  : 				{
; 317  : 					perc = 1;
; 318  : 				}
; 319  : 
; 320  : 			}
; 321  : 
; 322  : 			if ( perc == 0 )

  00457	74 b5		 je	 SHORT $LN161@gObjGiveIt
$LN156@gObjGiveIt:
  00459	8b 5d 9c	 mov	 ebx, DWORD PTR _monsterlevel$GSCopy$[ebp]
$LN43@gObjGiveIt:
  0045c	85 d2		 test	 edx, edx
  0045e	75 b1		 jne	 SHORT $LN162@gObjGiveIt

; 323  : 			{
; 324  : 				if ( bCheckDevil == 1 )

  00460	83 7d 94 01	 cmp	 DWORD PTR _bCheckDevil$209867[ebp], 1
  00464	0f 85 c1 fe ff
	ff		 jne	 $LN41@gObjGiveIt

; 325  : 				{
; 326  : 					int devilitemlevel = 0;
; 327  : 
; 328  : 					if ( (rand() % 5) != 0 )

  0046a	e8 00 00 00 00	 call	 _rand
  0046f	99		 cdq
  00470	b9 05 00 00 00	 mov	 ecx, 5
  00475	f7 f9		 idiv	 ecx
  00477	85 d2		 test	 edx, edx
  00479	74 96		 je	 SHORT $LN162@gObjGiveIt

; 329  : 					{
; 330  : 						if ( monsterlevel < 3 )

  0047b	83 fb 03	 cmp	 ebx, 3

; 331  : 						{
; 332  : 							devilitemlevel = 0;

  0047e	7c 91		 jl	 SHORT $LN162@gObjGiveIt

; 333  : 						}
; 334  : 						else if ( monsterlevel < 36 ) 

  00480	83 fb 24	 cmp	 ebx, 36			; 00000024H
  00483	7d 05		 jge	 SHORT $LN37@gObjGiveIt

; 335  : 						{
; 336  : 							devilitemlevel = 1;

  00485	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00488	eb 43		 jmp	 SHORT $LN17@gObjGiveIt
$LN37@gObjGiveIt:

; 337  : 						}
; 338  : 						else if ( monsterlevel < 47 )

  0048a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0048d	7d 07		 jge	 SHORT $LN35@gObjGiveIt

; 339  : 						{
; 340  : 							devilitemlevel = 2;

  0048f	b8 02 00 00 00	 mov	 eax, 2
  00494	eb 37		 jmp	 SHORT $LN17@gObjGiveIt
$LN35@gObjGiveIt:

; 341  : 						}
; 342  : 						else if ( monsterlevel < 60 )

  00496	83 fb 3c	 cmp	 ebx, 60			; 0000003cH
  00499	7d 07		 jge	 SHORT $LN33@gObjGiveIt

; 343  : 						{
; 344  : 							devilitemlevel = 3;

  0049b	b8 03 00 00 00	 mov	 eax, 3
  004a0	eb 2b		 jmp	 SHORT $LN17@gObjGiveIt
$LN33@gObjGiveIt:

; 345  : 						}
; 346  : 						else if ( monsterlevel < 70 )

  004a2	83 fb 46	 cmp	 ebx, 70			; 00000046H
  004a5	7d 07		 jge	 SHORT $LN31@gObjGiveIt

; 347  : 						{
; 348  : 							devilitemlevel = 4;

  004a7	b8 04 00 00 00	 mov	 eax, 4
  004ac	eb 1f		 jmp	 SHORT $LN17@gObjGiveIt
$LN31@gObjGiveIt:

; 349  : 						}
; 350  : 						else if ( monsterlevel < 80 )

  004ae	33 c0		 xor	 eax, eax
  004b0	83 fb 50	 cmp	 ebx, 80			; 00000050H
  004b3	0f 9d c0	 setge	 al
  004b6	83 c0 05	 add	 eax, 5

; 351  : 						{
; 352  : 							devilitemlevel = 5;
; 353  : 						}
; 354  : 						else 
; 355  : 						{
; 356  : 							devilitemlevel = 6;
; 357  : 						}
; 358  : 
; 359  : 						if ( devilitemlevel != 0 )
; 360  : 						{
; 361  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )
; 362  : 							{
; 363  : 								incount++;
; 364  : 
; 365  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 366  : 								{
; 367  : 									return;
; 368  : 								}
; 369  : 							}
; 370  : 						}
; 371  : 					}
; 372  : 				}

  004b9	eb 12		 jmp	 SHORT $LN17@gObjGiveIt
$LN16@gObjGiveIt:

; 392  : 			{
; 393  : 				if ( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  004bb	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  004be	0f 85 cc fe ff
	ff		 jne	 $LN159@gObjGiveIt
  004c4	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  004c7	0f 85 c3 fe ff
	ff		 jne	 $LN159@gObjGiveIt
$LN17@gObjGiveIt:

; 394  : 				{
; 395  : 					if ( this->InsertItem(monsterlevel, type, index, result, 0,0,0) != 0xFF )

  004cd	6a 00		 push	 0
  004cf	6a 00		 push	 0
  004d1	6a 00		 push	 0
  004d3	50		 push	 eax
$LN170@gObjGiveIt:
  004d4	8b 4d 98	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  004d7	56		 push	 esi
  004d8	57		 push	 edi
  004d9	53		 push	 ebx
  004da	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ; CMonsterItemMng::InsertItem
  004df	3c ff		 cmp	 al, 255			; 000000ffH
  004e1	0f 84 2a ff ff
	ff		 je	 $LN162@gObjGiveIt

; 396  : 					{
; 397  : 						incount++;

  004e7	8b 45 a0	 mov	 eax, DWORD PTR _incount$[ebp]
  004ea	40		 inc	 eax
  004eb	89 45 a0	 mov	 DWORD PTR _incount$[ebp], eax

; 398  : 
; 399  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )

  004ee	3d e7 03 00 00	 cmp	 eax, 999		; 000003e7H
  004f3	0f 8f 2c ff ff
	ff		 jg	 $LN163@gObjGiveIt

; 400  : 						{
; 401  : 							return;
; 402  : 						}
; 403  : 					}
; 404  : 				}

  004f9	e9 13 ff ff ff	 jmp	 $LN162@gObjGiveIt
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ENDP	; CMonsterItemMng::gObjGiveItemSearch
_TEXT	ENDS
PUBLIC	??1CMonsterItemMng@@UAE@XZ			; CMonsterItemMng::~CMonsterItemMng
; Function compile flags: /Ogtp
;	COMDAT ??1CMonsterItemMng@@UAE@XZ
_TEXT	SEGMENT
??1CMonsterItemMng@@UAE@XZ PROC				; CMonsterItemMng::~CMonsterItemMng, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterItemMng@@6B@

; 21   : 	this->Clear();

  00006	e9 00 00 00 00	 jmp	 ?Clear@CMonsterItemMng@@QAEXXZ ; CMonsterItemMng::Clear
??1CMonsterItemMng@@UAE@XZ ENDP				; CMonsterItemMng::~CMonsterItemMng
_TEXT	ENDS
PUBLIC	?Init@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Init
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File e:\work\tranet_version\gs\gameserver\gameshop.h
xdata$x	SEGMENT
__unwindtable$?Init@CMonsterItemMng@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0
__ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CMonsterItemMng@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\monsteritemmng.cpp
xdata$x	ENDS
;	COMDAT ?Init@CMonsterItemMng@@QAEXXZ
_TEXT	SEGMENT
$T210103 = -28						; size = 4
_this$ = -24						; size = 4
tv279 = -20						; size = 4
tv251 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Init@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Init, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CMonsterItemMng@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi

; 27   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  0002d	68 20 03 00 00	 push	 800			; 00000320H
  00032	8d 87 24 03 00
	00		 lea	 eax, DWORD PTR [edi+804]
  00038	6a 00		 push	 0
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset
  00040	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	89 75 f0	 mov	 DWORD PTR tv251[ebp], esi
  00049	c7 45 ec c8 00
	00 00		 mov	 DWORD PTR tv279[ebp], 200 ; 000000c8H
$LN9@Init:

; 28   : 
; 29   : 	for ( int i=0 ; i< MAX_LEVEL_MONSTER ; i++ )
; 30   : 	{
; 31   : #if(FIX_MEMLEAK)
; 32   : 		if( this->m_MonsterInvenItems[i] != NULL )

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	85 c0		 test	 eax, eax
  00054	74 09		 je	 SHORT $LN6@Init

; 33   : 		{
; 34   : 			delete[] this->m_MonsterInvenItems[i];

  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0005c	83 c4 04	 add	 esp, 4
$LN6@Init:

; 35   : 		}
; 36   : #endif
; 37   : 
; 38   : 		this->m_MonsterInvenItems[i] = new CItem[MAX_ITEM_IN_MONSTER];

  0005f	68 20 3c 03 00	 push	 212000			; 00033c20H
  00064	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00069	8b d8		 mov	 ebx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 5d e4	 mov	 DWORD PTR $T210103[ebp], ebx
  00071	33 c0		 xor	 eax, eax
  00073	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00076	3b d8		 cmp	 ebx, eax
  00078	74 1f		 je	 SHORT $LN12@Init
  0007a	8b f3		 mov	 esi, ebx
  0007c	bf e7 03 00 00	 mov	 edi, 999		; 000003e7H
$LL17@Init:
  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00088	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0008e	4f		 dec	 edi
  0008f	79 f0		 jns	 SHORT $LL17@Init
  00091	8b 75 f0	 mov	 esi, DWORD PTR tv251[ebp]
  00094	8b 7d e8	 mov	 edi, DWORD PTR _this$[ebp]
  00097	8b c3		 mov	 eax, ebx
$LN12@Init:
  00099	89 06		 mov	 DWORD PTR [esi], eax
  0009b	83 c6 04	 add	 esi, 4
  0009e	ff 4d ec	 dec	 DWORD PTR tv279[ebp]
  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	89 75 f0	 mov	 DWORD PTR tv251[ebp], esi
  000ab	75 a3		 jne	 SHORT $LN9@Init

; 39   : 	}
; 40   : 
; 41   : 	LPMONSTER_ATTRIBUTE lpm;
; 42   : 
; 43   : 	for (int i = 0; i< MAX_MONSTER_TYPE ; i++ )

  000ad	33 db		 xor	 ebx, ebx
$LN5@Init:

; 44   : 	{
; 45   : 		lpm = gMAttr.GetAttr(i);

  000af	53		 push	 ebx
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  000b5	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 46   : 
; 47   : 		if ( lpm != NULL )

  000ba	85 c0		 test	 eax, eax
  000bc	74 28		 je	 SHORT $LN4@Init

; 48   : 		{
; 49   : 			strcpy( this->MonsterName, lpm->m_Name);

  000be	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  000c1	8b f7		 mov	 esi, edi
  000c3	2b f1		 sub	 esi, ecx
$LL14@Init:
  000c5	8a 11		 mov	 dl, BYTE PTR [ecx]
  000c7	88 94 0e 44 06
	00 00		 mov	 BYTE PTR [esi+ecx+1604], dl
  000ce	41		 inc	 ecx
  000cf	84 d2		 test	 dl, dl
  000d1	75 f2		 jne	 SHORT $LL14@Init

; 50   : 
; 51   : 			if ( lpm->m_Level != 0 )

  000d3	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000d6	85 c9		 test	 ecx, ecx
  000d8	74 0c		 je	 SHORT $LN4@Init

; 52   : 			{
; 53   : 				this->gObjGiveItemSearch(lpm->m_Level, lpm->m_MaxItemLevel);

  000da	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  000dd	50		 push	 eax
  000de	51		 push	 ecx
  000df	8b cf		 mov	 ecx, edi
  000e1	e8 00 00 00 00	 call	 ?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ; CMonsterItemMng::gObjGiveItemSearch
$LN4@Init:

; 39   : 	}
; 40   : 
; 41   : 	LPMONSTER_ATTRIBUTE lpm;
; 42   : 
; 43   : 	for (int i = 0; i< MAX_MONSTER_TYPE ; i++ )

  000e6	43		 inc	 ebx
  000e7	81 fb 00 04 00
	00		 cmp	 ebx, 1024		; 00000400H
  000ed	7c c0		 jl	 SHORT $LN5@Init

; 54   : 			}
; 55   : 		}
; 56   : 	}
; 57   : }

  000ef	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f9	59		 pop	 ecx
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0:
  00000	8b 45 e4	 mov	 eax, DWORD PTR $T210103[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Init@CMonsterItemMng@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Init
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMonsterItemMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMonsterItemMng@@UAEPAXI@Z PROC			; CMonsterItemMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMonsterItemMng@@UAEPAXI@Z ENDP			; CMonsterItemMng::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MonsterItemMng@@YAXXZ
text$yc	SEGMENT
??__Eg_MonsterItemMng@@YAXXZ PROC			; `dynamic initializer for 'g_MonsterItemMng'', COMDAT

; 10   : CMonsterItemMng g_MonsterItemMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  00005	e8 00 00 00 00	 call	 ??0CMonsterItemMng@@QAE@XZ ; CMonsterItemMng::CMonsterItemMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterItemMng@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterItemMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MonsterItemMng@@YAXXZ ENDP			; `dynamic initializer for 'g_MonsterItemMng''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MonsterItemMng@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterItemMng@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MonsterItemMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  00005	e9 00 00 00 00	 jmp	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
??__Fg_MonsterItemMng@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MonsterItemMng''
text$yd	ENDS
PUBLIC	?g_MonsterItemMng@@3VCMonsterItemMng@@A		; g_MonsterItemMng
_BSS	SEGMENT
?g_MonsterItemMng@@3VCMonsterItemMng@@A DB 0744H DUP (?) ; g_MonsterItemMng
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MonsterItemMng$initializer$ DD FLAT:??__Eg_MonsterItemMng@@YAXXZ
CRT$XCU	ENDS
END
