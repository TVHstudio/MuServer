; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MonsterSetBase.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CMonsterSetBase@@6B@			; CMonsterSetBase::`vftable'
PUBLIC	??0CMonsterSetBase@@QAE@XZ			; CMonsterSetBase::CMonsterSetBase
PUBLIC	??_R4CMonsterSetBase@@6B@			; CMonsterSetBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterSetBase@@@8			; CMonsterSetBase `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterSetBase@@8				; CMonsterSetBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterSetBase@@8				; CMonsterSetBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterSetBase@@8		; CMonsterSetBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMonsterSetBase@@UAEPAXI@Z:PROC		; CMonsterSetBase::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMonsterSetBase@@8
; File e:\work\tranet_version\gs\gameserver\monstersetbase.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterSetBase@@8 DD FLAT:??_R0?AVCMonsterSetBase@@@8 ; CMonsterSetBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterSetBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterSetBase@@8
rdata$r	SEGMENT
??_R2CMonsterSetBase@@8 DD FLAT:??_R1A@?0A@EA@CMonsterSetBase@@8 ; CMonsterSetBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterSetBase@@8
rdata$r	SEGMENT
??_R3CMonsterSetBase@@8 DD 00H				; CMonsterSetBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterSetBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterSetBase@@@8
_DATA	SEGMENT
??_R0?AVCMonsterSetBase@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterSetBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterSetBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMonsterSetBase@@6B@
rdata$r	SEGMENT
??_R4CMonsterSetBase@@6B@ DD 00H			; CMonsterSetBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterSetBase@@@8
	DD	FLAT:??_R3CMonsterSetBase@@8
rdata$r	ENDS
;	COMDAT ??_7CMonsterSetBase@@6B@
CONST	SEGMENT
??_7CMonsterSetBase@@6B@ DD FLAT:??_R4CMonsterSetBase@@6B@ ; CMonsterSetBase::`vftable'
	DD	FLAT:??_ECMonsterSetBase@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMonsterSetBase@@QAE@XZ
_TEXT	SEGMENT
??0CMonsterSetBase@@QAE@XZ PROC				; CMonsterSetBase::CMonsterSetBase, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterSetBase@@6B@

; 13   : 	return;
; 14   : }

  00008	c3		 ret	 0
??0CMonsterSetBase@@QAE@XZ ENDP				; CMonsterSetBase::CMonsterSetBase
_TEXT	ENDS
PUBLIC	??1CMonsterSetBase@@UAE@XZ			; CMonsterSetBase::~CMonsterSetBase
; Function compile flags: /Ogtp
;	COMDAT ??1CMonsterSetBase@@UAE@XZ
_TEXT	SEGMENT
??1CMonsterSetBase@@UAE@XZ PROC				; CMonsterSetBase::~CMonsterSetBase, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterSetBase@@6B@

; 18   : 	return;
; 19   : }

  00006	c3		 ret	 0
??1CMonsterSetBase@@UAE@XZ ENDP				; CMonsterSetBase::~CMonsterSetBase
_TEXT	ENDS
PUBLIC	?SetBoxPosition@CMonsterSetBase@@QAEXHHHHHH@Z	; CMonsterSetBase::SetBoxPosition
; Function compile flags: /Ogtp
;	COMDAT ?SetBoxPosition@CMonsterSetBase@@QAEXHHHHHH@Z
_TEXT	SEGMENT
_TableNum$ = 8						; size = 4
_mapnumber$ = 12					; size = 4
_ax$ = 16						; size = 4
_ay$ = 20						; size = 4
_aw$ = 24						; size = 4
_ah$ = 28						; size = 4
?SetBoxPosition@CMonsterSetBase@@QAEXHHHHHH@Z PROC	; CMonsterSetBase::SetBoxPosition, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	this->m_Mp[TableNum].m_MapNumber = mapnumber;

  00003	8b 45 08	 mov	 eax, DWORD PTR _TableNum$[ebp]

; 25   : 	this->m_Mp[TableNum].m_W  = aw;

  00006	8a 55 18	 mov	 dl, BYTE PTR _aw$[ebp]
  00009	c1 e0 04	 shl	 eax, 4
  0000c	03 c1		 add	 eax, ecx
  0000e	8a 4d 0c	 mov	 cl, BYTE PTR _mapnumber$[ebp]
  00011	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 26   : 	this->m_Mp[TableNum].m_H  = ah;

  00014	8a 4d 1c	 mov	 cl, BYTE PTR _ah$[ebp]
  00017	88 50 0d	 mov	 BYTE PTR [eax+13], dl

; 27   : 	this->m_Mp[TableNum].m_X  = ax;

  0001a	8a 55 10	 mov	 dl, BYTE PTR _ax$[ebp]
  0001d	88 48 0e	 mov	 BYTE PTR [eax+14], cl

; 28   : 	this->m_Mp[TableNum].m_Y  = ay;

  00020	8a 4d 14	 mov	 cl, BYTE PTR _ay$[ebp]
  00023	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  00026	88 48 0b	 mov	 BYTE PTR [eax+11], cl

; 29   : }

  00029	5d		 pop	 ebp
  0002a	c2 18 00	 ret	 24			; 00000018H
?SetBoxPosition@CMonsterSetBase@@QAEXHHHHHH@Z ENDP	; CMonsterSetBase::SetBoxPosition
_TEXT	ENDS
PUBLIC	?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	_rand:PROC
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffc4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@GetBoxPosi
	DD	FLAT:$LN9@GetBoxPosi
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z
_TEXT	SEGMENT
_tx$ = -44						; size = 4
_ty$ = -40						; size = 4
_count$ = -36						; size = 4
_h$ = -32						; size = 4
_w$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_mapnumber$ = 8						; size = 4
_ax$ = 12						; size = 4
_ay$ = 16						; size = 4
_aw$ = 20						; size = 4
_ah$ = 24						; size = 4
_mx$ = 28						; size = 4
_my$ = 32						; size = 4
?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z PROC	; CMonsterSetBase::GetBoxPosition, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 33   : 	int count = 100 ; 

  00033	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00038	8b 5d 10	 mov	 ebx, DWORD PTR _ay$[ebp]
  0003b	eb 06		 jmp	 SHORT $LN4@GetBoxPosi
  0003d	8d 49 00	 npad	 3
$LL13@GetBoxPosi:
  00040	8b 45 dc	 mov	 eax, DWORD PTR _count$[ebp]
$LN4@GetBoxPosi:

; 34   : 	int w;
; 35   : 	int h;
; 36   : 	int tx; 
; 37   : 	int ty;
; 38   : 	BYTE attr;
; 39   : 
; 40   : 	while ( count-- != 0)

  00043	8b c8		 mov	 ecx, eax
  00045	48		 dec	 eax
  00046	89 45 dc	 mov	 DWORD PTR _count$[ebp], eax
  00049	85 c9		 test	 ecx, ecx
  0004b	0f 84 a6 00 00
	00		 je	 $LN3@GetBoxPosi

; 41   : 	{
; 42   : 		w = aw - ax;

  00051	8b 55 14	 mov	 edx, DWORD PTR _aw$[ebp]
  00054	8b 75 0c	 mov	 esi, DWORD PTR _ax$[ebp]
  00057	2b d6		 sub	 edx, esi
  00059	89 55 e4	 mov	 DWORD PTR _w$[ebp], edx

; 43   : 		h = ah - ay;

  0005c	8b 45 18	 mov	 eax, DWORD PTR _ah$[ebp]
  0005f	2b c3		 sub	 eax, ebx
  00061	89 45 e0	 mov	 DWORD PTR _h$[ebp], eax

; 44   : 
; 45   : 		__try

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 46   : 		{
; 47   : 			tx = ax + (rand()%w);

  0006b	e8 00 00 00 00	 call	 _rand
  00070	8b 4d e4	 mov	 ecx, DWORD PTR _w$[ebp]
  00073	99		 cdq
  00074	f7 f9		 idiv	 ecx
  00076	03 d6		 add	 edx, esi
  00078	89 55 d4	 mov	 DWORD PTR _tx$[ebp], edx

; 48   : 			ty = ay + (rand()%h);

  0007b	e8 00 00 00 00	 call	 _rand
  00080	8b 4d e0	 mov	 ecx, DWORD PTR _h$[ebp]
  00083	99		 cdq
  00084	f7 f9		 idiv	 ecx
  00086	8d 34 13	 lea	 esi, DWORD PTR [ebx+edx]
  00089	89 75 d8	 mov	 DWORD PTR _ty$[ebp], esi

; 49   : 		}

  0008c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00093	eb 1c		 jmp	 SHORT $LN11@GetBoxPosi
$LN8@GetBoxPosi:
$LN15@GetBoxPosi:

; 50   : 		__except (w=1,h=1,1)

  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	89 45 e4	 mov	 DWORD PTR _w$[ebp], eax
  0009d	89 45 e0	 mov	 DWORD PTR _h$[ebp], eax
$LN14@GetBoxPosi:
$LN10@GetBoxPosi:
  000a0	c3		 ret	 0
$LN9@GetBoxPosi:
  000a1	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 51   : 		{
; 52   : 
; 53   : 		}

  000a4	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000ab	8b 5d 10	 mov	 ebx, DWORD PTR _ay$[ebp]
  000ae	8b 75 d8	 mov	 esi, DWORD PTR _ty$[ebp]
$LN11@GetBoxPosi:

; 54   : 
; 55   : 		attr = MapC[mapnumber].GetAttr(tx, ty);

  000b1	56		 push	 esi
  000b2	8b 7d d4	 mov	 edi, DWORD PTR _tx$[ebp]
  000b5	57		 push	 edi
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _mapnumber$[ebp]
  000b9	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  000bf	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  000c5	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 56   : 
; 57   : 		if ( ((attr&1) != 1) && ((attr &4) != 4) && ((attr&8) != 8) )

  000ca	a8 0d		 test	 al, 13			; 0000000dH
  000cc	0f 85 6e ff ff
	ff		 jne	 $LL13@GetBoxPosi

; 58   : 		{
; 59   : 			mx = tx;

  000d2	8b 55 1c	 mov	 edx, DWORD PTR _mx$[ebp]
  000d5	66 89 3a	 mov	 WORD PTR [edx], di

; 60   : 			my = ty;

  000d8	8b 45 20	 mov	 eax, DWORD PTR _my$[ebp]
  000db	66 89 30	 mov	 WORD PTR [eax], si

; 61   : 			return TRUE;

  000de	b8 01 00 00 00	 mov	 eax, 1

; 66   : }

  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ed	59		 pop	 ecx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 1c 00	 ret	 28			; 0000001cH
$LN3@GetBoxPosi:

; 62   : 		}
; 63   : 	}
; 64   : 
; 65   : 	return false;

  000f7	33 c0		 xor	 eax, eax

; 66   : }

  000f9	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00103	59		 pop	 ecx
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 1c 00	 ret	 28			; 0000001cH
?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ENDP	; CMonsterSetBase::GetBoxPosition
_TEXT	ENDS
PUBLIC	??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@	; `string'
PUBLIC	?GetPosition@CMonsterSetBase@@QAEHHFAAF0@Z	; CMonsterSetBase::GetPosition
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
;	COMDAT ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@ DB 'ERROR : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@
CONST	SEGMENT
??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@ DB 'MonsterSetBase.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetPosition@CMonsterSetBase@@QAEHHFAAF0@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_iRX$209747 = 8						; size = 4
_TableNum$ = 8						; size = 4
tv353 = 12						; size = 4
_MapNumber$ = 12					; size = 2
_x$ = 16						; size = 4
_y$ = 20						; size = 4
?GetPosition@CMonsterSetBase@@QAEHHFAAF0@Z PROC		; CMonsterSetBase::GetPosition, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 70   : 	int count = 100;
; 71   : 	BYTE attr;
; 72   : 	int tx;
; 73   : 	int ty;
; 74   : 	int w;
; 75   : 	int h;
; 76   : 
; 77   : 	if ( TableNum < 0 || TableNum > OBJ_MAXMONSTER-1 )

  00005	8b 75 08	 mov	 esi, DWORD PTR _TableNum$[ebp]
  00008	c7 45 fc 64 00
	00 00		 mov	 DWORD PTR _count$[ebp], 100 ; 00000064H
  0000f	81 fe c7 32 00
	00		 cmp	 esi, 12999		; 000032c7H
  00015	0f 87 8c 01 00
	00		 ja	 $LN19@GetPositio

; 81   : 	}
; 82   : 
; 83   : 	if ( this->m_Mp[TableNum].m_ArrangeType == 1 || this->m_Mp[TableNum].m_ArrangeType == 3 )

  0001b	c1 e6 04	 shl	 esi, 4
  0001e	8a 44 0e 04	 mov	 al, BYTE PTR [esi+ecx+4]
  00022	03 f1		 add	 esi, ecx
  00024	53		 push	 ebx
  00025	57		 push	 edi
  00026	3c 01		 cmp	 al, 1
  00028	0f 84 e0 00 00
	00		 je	 $LN32@GetPositio
  0002e	3c 03		 cmp	 al, 3
  00030	0f 84 d8 00 00
	00		 je	 $LN32@GetPositio

; 111  : 				return TRUE;
; 112  : 			}
; 113  : 		}
; 114  : 	}
; 115  : 	else if ( this->m_Mp[TableNum].m_ArrangeType == 0 )

  00036	84 c0		 test	 al, al
  00038	75 22		 jne	 SHORT $LN10@GetPositio

; 116  : 	{
; 117  : 		x = this->m_Mp[TableNum].m_X;

  0003a	0f b6 46 0a	 movzx	 eax, BYTE PTR [esi+10]
  0003e	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00041	66 89 01	 mov	 WORD PTR [ecx], ax

; 118  : 		y = this->m_Mp[TableNum].m_Y;

  00044	0f b6 56 0b	 movzx	 edx, BYTE PTR [esi+11]
  00048	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  0004b	5f		 pop	 edi
  0004c	5b		 pop	 ebx
  0004d	66 89 10	 mov	 WORD PTR [eax], dx

; 150  : 		return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1
  00055	5e		 pop	 esi

; 161  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 10 00	 ret	 16			; 00000010H
$LN10@GetPositio:

; 119  : 		return true;
; 120  : 	}
; 121  : 	else if ( this->m_Mp[TableNum].m_ArrangeType == 2 )

  0005c	3c 02		 cmp	 al, 2
  0005e	0f 85 84 00 00
	00		 jne	 $LN8@GetPositio

; 122  : 	{
; 123  : 		while ( count-- != 0 )

  00064	0f bf 4d 0c	 movsx	 ecx, WORD PTR _MapNumber$[ebp]
  00068	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0006e	8d 91 00 00 00
	00		 lea	 edx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx]

; 134  : 			{
; 135  : 				x = Orx;

  00074	89 55 0c	 mov	 DWORD PTR tv353[ebp], edx
  00077	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL7@GetPositio:

; 124  : 		{
; 125  : 			int Orx = this->m_Mp[TableNum].m_X -3;
; 126  : 			int Ory = this->m_Mp[TableNum].m_Y -3;

  00080	0f b6 7e 0a	 movzx	 edi, BYTE PTR [esi+10]
  00084	0f b6 5e 0b	 movzx	 ebx, BYTE PTR [esi+11]
  00088	ff 4d fc	 dec	 DWORD PTR _count$[ebp]
  0008b	83 ef 03	 sub	 edi, 3
  0008e	83 eb 03	 sub	 ebx, 3

; 127  : 
; 128  : 			Orx += rand() % 7;

  00091	e8 00 00 00 00	 call	 _rand
  00096	99		 cdq
  00097	b9 07 00 00 00	 mov	 ecx, 7
  0009c	f7 f9		 idiv	 ecx
  0009e	03 fa		 add	 edi, edx

; 129  : 			Ory += rand() % 7;

  000a0	e8 00 00 00 00	 call	 _rand
  000a5	99		 cdq
  000a6	b9 07 00 00 00	 mov	 ecx, 7
  000ab	f7 f9		 idiv	 ecx

; 130  : 
; 131  : 			attr = MapC[MapNumber].GetAttr(Orx, Ory);

  000ad	8b 4d 0c	 mov	 ecx, DWORD PTR tv353[ebp]
  000b0	03 da		 add	 ebx, edx
  000b2	53		 push	 ebx
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 132  : 
; 133  : 			if ( ((attr&1) != 1) && ((attr &4) != 4) && ((attr&8) != 8) )

  000b9	a8 0d		 test	 al, 13			; 0000000dH
  000bb	74 11		 je	 SHORT $LN25@GetPositio

; 122  : 	{
; 123  : 		while ( count-- != 0 )

  000bd	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  000c1	75 bd		 jne	 SHORT $LL7@GetPositio
$LN28@GetPositio:
  000c3	5f		 pop	 edi
  000c4	5b		 pop	 ebx

; 151  : 	}
; 152  : #ifdef IMPERIAL_CONFLICT_NEW
; 153  : 	else if ( this->m_Mp[TableNum].m_ArrangeType == 5 )
; 154  : 	{
; 155  : 		x = this->m_Mp[TableNum].m_X;
; 156  : 		y = this->m_Mp[TableNum].m_Y;
; 157  : 		return TRUE;
; 158  : 	}
; 159  : #endif
; 160  : 	return false;

  000c5	33 c0		 xor	 eax, eax
  000c7	5e		 pop	 esi

; 161  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 10 00	 ret	 16			; 00000010H
$LN25@GetPositio:

; 134  : 			{
; 135  : 				x = Orx;

  000ce	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]

; 136  : 				y = Ory;

  000d1	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  000d4	66 89 3a	 mov	 WORD PTR [edx], di
  000d7	5f		 pop	 edi
  000d8	66 89 18	 mov	 WORD PTR [eax], bx
  000db	5b		 pop	 ebx

; 150  : 		return TRUE;

  000dc	b8 01 00 00 00	 mov	 eax, 1
  000e1	5e		 pop	 esi

; 161  : }

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 10 00	 ret	 16			; 00000010H
$LN8@GetPositio:

; 137  : 				return TRUE;
; 138  : 			}
; 139  : 		}
; 140  : 	}
; 141  : 	else if ( this->m_Mp[TableNum].m_ArrangeType == 3 )
; 142  : 	{
; 143  : 		return TRUE;
; 144  : 	}
; 145  : 
; 146  : 	else if ( this->m_Mp[TableNum].m_ArrangeType == 4 )

  000e8	3c 04		 cmp	 al, 4
  000ea	75 d7		 jne	 SHORT $LN28@GetPositio

; 147  : 	{
; 148  : 		x = this->m_Mp[TableNum].m_X;

  000ec	0f b6 4e 0a	 movzx	 ecx, BYTE PTR [esi+10]
  000f0	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  000f3	66 89 0a	 mov	 WORD PTR [edx], cx

; 149  : 		y = this->m_Mp[TableNum].m_Y;

  000f6	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  000fa	8b 4d 14	 mov	 ecx, DWORD PTR _y$[ebp]
  000fd	5f		 pop	 edi
  000fe	5b		 pop	 ebx
  000ff	66 89 01	 mov	 WORD PTR [ecx], ax

; 150  : 		return TRUE;

  00102	b8 01 00 00 00	 mov	 eax, 1
  00107	5e		 pop	 esi

; 161  : }

  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 10 00	 ret	 16			; 00000010H
$LN32@GetPositio:

; 84   : 	{
; 85   : 		while ( count-- != 0 )

  0010e	0f bf 55 0c	 movsx	 edx, WORD PTR _MapNumber$[ebp]
  00112	69 d2 48 3d 05
	00		 imul	 edx, 343368		; 00053d48H
  00118	8d 82 00 00 00
	00		 lea	 eax, DWORD PTR ?MapC@@3PAVMapClass@@A[edx]

; 108  : 			{
; 109  : 				x = tx;

  0011e	89 45 0c	 mov	 DWORD PTR tv353[ebp], eax
$LL16@GetPositio:

; 86   : 		{
; 87   : 			w = this->m_Mp[TableNum].m_W - this->m_Mp[TableNum].m_X;

  00121	0f b6 7e 0d	 movzx	 edi, BYTE PTR [esi+13]
  00125	0f b6 4e 0a	 movzx	 ecx, BYTE PTR [esi+10]

; 88   : 			h = this->m_Mp[TableNum].m_H - this->m_Mp[TableNum].m_Y;

  00129	0f b6 56 0b	 movzx	 edx, BYTE PTR [esi+11]
  0012d	0f b6 5e 0e	 movzx	 ebx, BYTE PTR [esi+14]
  00131	ff 4d fc	 dec	 DWORD PTR _count$[ebp]
  00134	2b f9		 sub	 edi, ecx
  00136	2b da		 sub	 ebx, edx

; 89   : 
; 90   : 			if ( w < 1 )

  00138	83 ff 01	 cmp	 edi, 1
  0013b	7d 05		 jge	 SHORT $LN14@GetPositio

; 91   : 			{
; 92   : 				w = 1;

  0013d	bf 01 00 00 00	 mov	 edi, 1
$LN14@GetPositio:

; 93   : 			}
; 94   : 
; 95   : 			if ( h < 1 )

  00142	83 fb 01	 cmp	 ebx, 1
  00145	7d 05		 jge	 SHORT $LN13@GetPositio

; 96   : 			{
; 97   : 				h = 1;

  00147	bb 01 00 00 00	 mov	 ebx, 1
$LN13@GetPositio:

; 98   : 			}
; 99   : 
; 100  : 			int iRX = GetLargeRand()%w;

  0014c	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00151	33 d2		 xor	 edx, edx
  00153	f7 f7		 div	 edi
  00155	89 55 08	 mov	 DWORD PTR _iRX$209747[ebp], edx

; 101  : 			int iRY = GetLargeRand()%h;

  00158	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0015d	33 d2		 xor	 edx, edx
  0015f	f7 f3		 div	 ebx

; 102  : 
; 103  : 			tx = this->m_Mp[TableNum].m_X +  iRX;
; 104  : 			ty = this->m_Mp[TableNum].m_Y +  iRY;

  00161	0f b6 5e 0b	 movzx	 ebx, BYTE PTR [esi+11]
  00165	0f b6 7e 0a	 movzx	 edi, BYTE PTR [esi+10]
  00169	03 7d 08	 add	 edi, DWORD PTR _iRX$209747[ebp]

; 105  : 			attr = MapC[MapNumber].GetAttr(tx, ty);

  0016c	8b 4d 0c	 mov	 ecx, DWORD PTR tv353[ebp]
  0016f	03 da		 add	 ebx, edx
  00171	53		 push	 ebx
  00172	57		 push	 edi
  00173	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 106  : 
; 107  : 			if ( ((attr&1) != 1) && ((attr &4) != 4) && ((attr&8) != 8) )

  00178	a8 0d		 test	 al, 13			; 0000000dH
  0017a	74 11		 je	 SHORT $LN26@GetPositio

; 84   : 	{
; 85   : 		while ( count-- != 0 )

  0017c	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00180	75 9f		 jne	 SHORT $LL16@GetPositio

; 151  : 	}
; 152  : #ifdef IMPERIAL_CONFLICT_NEW
; 153  : 	else if ( this->m_Mp[TableNum].m_ArrangeType == 5 )
; 154  : 	{
; 155  : 		x = this->m_Mp[TableNum].m_X;
; 156  : 		y = this->m_Mp[TableNum].m_Y;
; 157  : 		return TRUE;
; 158  : 	}
; 159  : #endif
; 160  : 	return false;

  00182	5f		 pop	 edi
  00183	5b		 pop	 ebx
  00184	33 c0		 xor	 eax, eax
  00186	5e		 pop	 esi

; 161  : }

  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 10 00	 ret	 16			; 00000010H
$LN26@GetPositio:

; 108  : 			{
; 109  : 				x = tx;

  0018d	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]

; 110  : 				y = ty;

  00190	8b 4d 14	 mov	 ecx, DWORD PTR _y$[ebp]
  00193	66 89 38	 mov	 WORD PTR [eax], di
  00196	5f		 pop	 edi
  00197	66 89 19	 mov	 WORD PTR [ecx], bx
  0019a	5b		 pop	 ebx

; 150  : 		return TRUE;

  0019b	b8 01 00 00 00	 mov	 eax, 1
  001a0	5e		 pop	 esi

; 161  : }

  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 10 00	 ret	 16			; 00000010H
$LN19@GetPositio:

; 78   : 	{
; 79   : 		LogAdd("ERROR : %s %d", __FILE__, __LINE__ );

  001a7	6a 4f		 push	 79			; 0000004fH
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : 		return false;

  001bc	33 c0		 xor	 eax, eax
  001be	5e		 pop	 esi

; 161  : }

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 10 00	 ret	 16			; 00000010H
?GetPosition@CMonsterSetBase@@QAEHHFAAF0@Z ENDP		; CMonsterSetBase::GetPosition
_TEXT	ENDS
PUBLIC	??_C@_0CG@CBICGAHP@Monster?5attribute?5max?5over?5?$CFd?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0BD@BPJMFINL@file?5open?5error?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadSetBase@CMonsterSetBase@@QAEXPAD@Z		; CMonsterSetBase::LoadSetBase
EXTRN	_fclose:PROC
EXTRN	?CheckMapCanMove@CMapServerManager@@QAEHH@Z:PROC ; CMapServerManager::CheckMapCanMove
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CG@CBICGAHP@Monster?5attribute?5max?5over?5?$CFd?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CG@CBICGAHP@Monster?5attribute?5max?5over?5?$CFd?5?$CI?$CF@ DB 'Mo'
	DB	'nster attribute max over %d (%s %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ DB 'Monst'
	DB	'er attribute max over %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BPJMFINL@file?5open?5error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@BPJMFINL@file?5open?5error?5?$CFs?$AA@ DB 'file open error %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadSetBase@CMonsterSetBase@@QAEXPAD@Z
_TEXT	SEGMENT
tv548 = -8						; size = 4
tv546 = -8						; size = 4
tv540 = -8						; size = 4
tv538 = -8						; size = 4
tv532 = -8						; size = 4
tv530 = -8						; size = 4
tv524 = -8						; size = 4
tv521 = -8						; size = 4
tv514 = -8						; size = 4
tv484 = -8						; size = 4
tv310 = -8						; size = 4
tv305 = -8						; size = 4
$T210026 = -8						; size = 4
tv270 = -8						; size = 4
tv267 = -8						; size = 4
tv231 = -8						; size = 4
tv155 = -8						; size = 4
_Type$209780 = -4					; size = 4
_h$209799 = 8						; size = 4
_filename$ = 8						; size = 4
tv551 = 10						; size = 2
tv543 = 10						; size = 2
tv535 = 10						; size = 2
tv527 = 10						; size = 2
tv517 = 10						; size = 2
tv371 = 10						; size = 2
tv295 = 10						; size = 2
tv262 = 10						; size = 2
tv558 = 11						; size = 1
?LoadSetBase@CMonsterSetBase@@QAEXPAD@Z PROC		; CMonsterSetBase::LoadSetBase, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 165  : 	int Token;
; 166  : 	int rcount;
; 167  : 	int copycount;
; 168  : 	BYTE Sdir;
; 169  : 
; 170  : 	SMDFile = fopen(filename, "r");

  00008	8b 7d 08	 mov	 edi, DWORD PTR _filename$[ebp]
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00010	57		 push	 edi
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 171  : 
; 172  : 	if ( SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 16		 jne	 SHORT $LN28@LoadSetBas

; 173  : 	{
; 174  : 		MsgBox("file open error %s", filename);

  00024	57		 push	 edi
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BPJMFINL@file?5open?5error?5?$CFs?$AA@
  0002a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002f	83 c4 08	 add	 esp, 8
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 312  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN28@LoadSetBas:
  0003a	53		 push	 ebx

; 175  : 		return;
; 176  : 	}
; 177  : 
; 178  : 	this->m_Count = 0;

  0003b	c7 86 84 2c 03
	00 00 00 00 00	 mov	 DWORD PTR [esi+208004], 0

; 179  : 
; 180  : 	while ( true )
; 181  : 	{
; 182  : 		Token = GetToken();

  00045	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 
; 184  : 		if ( Token == 2 )

  0004a	83 f8 02	 cmp	 eax, 2
  0004d	0f 84 a8 04 00
	00		 je	 $LN40@LoadSetBas
$LL27@LoadSetBas:

; 185  : 			break;
; 186  : 
; 187  : 		if ( Token == 1 )

  00053	83 f8 01	 cmp	 eax, 1
  00056	0f 85 91 04 00
	00		 jne	 $LN38@LoadSetBas

; 188  : 		{
; 189  : 			int Type = (int)TokenNumber;

  0005c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00062	e8 00 00 00 00	 call	 __ftol2_sse
  00067	8b d8		 mov	 ebx, eax
  00069	89 5d fc	 mov	 DWORD PTR _Type$209780[ebp], ebx

; 190  : 
; 191  : 			while ( true )
; 192  : 			{
; 193  : 				Token = GetToken();

  0006c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 194  : 
; 195  : 				if ( strcmp("end", TokenString) == 0 )

  00071	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00076	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0007b	eb 03 8d 49 00	 npad	 5
$LL42@LoadSetBas:
  00080	8a 10		 mov	 dl, BYTE PTR [eax]
  00082	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00084	75 1a		 jne	 SHORT $LN43@LoadSetBas
  00086	84 d2		 test	 dl, dl
  00088	74 12		 je	 SHORT $LN44@LoadSetBas
  0008a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0008d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00090	75 0e		 jne	 SHORT $LN43@LoadSetBas
  00092	83 c0 02	 add	 eax, 2
  00095	83 c1 02	 add	 ecx, 2
  00098	84 d2		 test	 dl, dl
  0009a	75 e4		 jne	 SHORT $LL42@LoadSetBas
$LN44@LoadSetBas:
  0009c	33 c0		 xor	 eax, eax
  0009e	eb 05		 jmp	 SHORT $LN45@LoadSetBas
$LN43@LoadSetBas:
  000a0	1b c0		 sbb	 eax, eax
  000a2	83 d8 ff	 sbb	 eax, -1
$LN45@LoadSetBas:
  000a5	85 c0		 test	 eax, eax
  000a7	0f 84 40 04 00
	00		 je	 $LN38@LoadSetBas
  000ad	8d 49 00	 npad	 3
$LL23@LoadSetBas:

; 196  : 					break;
; 197  : 				
; 198  : 				this->m_Mp[this->m_Count].m_Type = (WORD)TokenNumber;

  000b0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b6	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  000bc	d9 7d 0a	 fnstcw	 WORD PTR tv551[ebp]
  000bf	03 c9		 add	 ecx, ecx
  000c1	0f b7 45 0a	 movzx	 eax, WORD PTR tv551[ebp]
  000c5	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000ca	89 45 f8	 mov	 DWORD PTR tv548[ebp], eax
  000cd	d9 6d f8	 fldcw	 WORD PTR tv548[ebp]
  000d0	db 5d f8	 fistp	 DWORD PTR tv546[ebp]
  000d3	66 8b 45 f8	 mov	 ax, WORD PTR tv546[ebp]
  000d7	66 89 44 ce 06	 mov	 WORD PTR [esi+ecx*8+6], ax
  000dc	d9 6d 0a	 fldcw	 WORD PTR tv551[ebp]

; 199  : 				Token = GetToken();	this->m_Mp[this->m_Count].m_MapNumber = (BYTE)TokenNumber;

  000df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000e4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ea	d9 7d 0a	 fnstcw	 WORD PTR tv543[ebp]
  000ed	0f b7 45 0a	 movzx	 eax, WORD PTR tv543[ebp]
  000f1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000f6	89 45 f8	 mov	 DWORD PTR tv540[ebp], eax
  000f9	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  000ff	03 c0		 add	 eax, eax
  00101	d9 6d f8	 fldcw	 WORD PTR tv540[ebp]
  00104	db 5d f8	 fistp	 DWORD PTR tv538[ebp]
  00107	0f b6 55 f8	 movzx	 edx, BYTE PTR tv538[ebp]
  0010b	88 54 c6 08	 mov	 BYTE PTR [esi+eax*8+8], dl
  0010f	d9 6d 0a	 fldcw	 WORD PTR tv543[ebp]

; 200  : 				Token = GetToken();	this->m_Mp[this->m_Count].m_Dis = (BYTE)TokenNumber;

  00112	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00117	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  0011d	03 d2		 add	 edx, edx
  0011f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00125	d9 7d 0a	 fnstcw	 WORD PTR tv535[ebp]
  00128	0f b7 45 0a	 movzx	 eax, WORD PTR tv535[ebp]
  0012c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00131	89 45 f8	 mov	 DWORD PTR tv532[ebp], eax
  00134	d9 6d f8	 fldcw	 WORD PTR tv532[ebp]
  00137	db 5d f8	 fistp	 DWORD PTR tv530[ebp]
  0013a	8a 4d f8	 mov	 cl, BYTE PTR tv530[ebp]
  0013d	88 4c d6 09	 mov	 BYTE PTR [esi+edx*8+9], cl
  00141	d9 6d 0a	 fldcw	 WORD PTR tv535[ebp]

; 201  : 				Token = GetToken();	this->m_Mp[this->m_Count].m_X = (BYTE)TokenNumber;

  00144	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00149	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  0014f	03 c9		 add	 ecx, ecx
  00151	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00157	d9 7d 0a	 fnstcw	 WORD PTR tv527[ebp]
  0015a	0f b7 45 0a	 movzx	 eax, WORD PTR tv527[ebp]
  0015e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00163	89 45 f8	 mov	 DWORD PTR tv524[ebp], eax
  00166	d9 6d f8	 fldcw	 WORD PTR tv524[ebp]
  00169	db 5d f8	 fistp	 DWORD PTR tv521[ebp]
  0016c	8a 45 f8	 mov	 al, BYTE PTR tv521[ebp]
  0016f	88 44 ce 0a	 mov	 BYTE PTR [esi+ecx*8+10], al
  00173	d9 6d 0a	 fldcw	 WORD PTR tv527[ebp]

; 202  : 				Token = GetToken();	this->m_Mp[this->m_Count].m_Y = (BYTE)TokenNumber;

  00176	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0017b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00181	d9 7d 0a	 fnstcw	 WORD PTR tv517[ebp]
  00184	0f b7 45 0a	 movzx	 eax, WORD PTR tv517[ebp]
  00188	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0018d	89 45 f8	 mov	 DWORD PTR tv514[ebp], eax
  00190	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  00196	03 c0		 add	 eax, eax
  00198	d9 6d f8	 fldcw	 WORD PTR tv514[ebp]
  0019b	db 5d f8	 fistp	 DWORD PTR tv484[ebp]
  0019e	0f b6 55 f8	 movzx	 edx, BYTE PTR tv484[ebp]
  001a2	88 54 c6 0b	 mov	 BYTE PTR [esi+eax*8+11], dl

; 203  : 				this->m_Mp[this->m_Count].m_ArrangeType = Type;

  001a6	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  001ac	d9 6d 0a	 fldcw	 WORD PTR tv517[ebp]
  001af	03 c9		 add	 ecx, ecx
  001b1	88 5c ce 04	 mov	 BYTE PTR [esi+ecx*8+4], bl

; 204  : 
; 205  : 				if ( Type == 1 || Type == 3 )

  001b5	83 fb 01	 cmp	 ebx, 1
  001b8	0f 84 c4 00 00
	00		 je	 $LN50@LoadSetBas
  001be	83 fb 03	 cmp	 ebx, 3
  001c1	0f 84 bb 00 00
	00		 je	 $LN50@LoadSetBas

; 209  : 				}
; 210  : 				else if ( Type == 2 )

  001c7	83 fb 02	 cmp	 ebx, 2
  001ca	75 76		 jne	 SHORT $LN17@LoadSetBas

; 211  : 				{
; 212  : 					this->m_Mp[this->m_Count].m_W = 0;

  001cc	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  001d2	03 d2		 add	 edx, edx
  001d4	c6 44 d6 0d 00	 mov	 BYTE PTR [esi+edx*8+13], 0

; 213  : 					this->m_Mp[this->m_Count].m_H = 0;

  001d9	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  001df	03 c0		 add	 eax, eax
  001e1	c6 44 c6 0e 00	 mov	 BYTE PTR [esi+eax*8+14], 0

; 214  : 
; 215  : 					int w = this->m_Mp[this->m_Count].m_X - 3;

  001e6	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  001ec	03 c0		 add	 eax, eax
  001ee	0f b6 5c c6 0a	 movzx	 ebx, BYTE PTR [esi+eax*8+10]

; 216  : 					int h = this->m_Mp[this->m_Count].m_Y - 3;

  001f3	0f b6 44 c6 0b	 movzx	 eax, BYTE PTR [esi+eax*8+11]
  001f8	83 e8 03	 sub	 eax, 3
  001fb	83 eb 03	 sub	 ebx, 3
  001fe	89 45 08	 mov	 DWORD PTR _h$209799[ebp], eax

; 217  : 
; 218  : 					w += rand() % 7;

  00201	e8 00 00 00 00	 call	 _rand
  00206	99		 cdq
  00207	b9 07 00 00 00	 mov	 ecx, 7
  0020c	f7 f9		 idiv	 ecx
  0020e	03 da		 add	 ebx, edx

; 219  : 					h += rand() % 7;

  00210	e8 00 00 00 00	 call	 _rand
  00215	99		 cdq
  00216	b9 07 00 00 00	 mov	 ecx, 7
  0021b	f7 f9		 idiv	 ecx
  0021d	8b 45 08	 mov	 eax, DWORD PTR _h$209799[ebp]
  00220	03 c2		 add	 eax, edx

; 220  : 
; 221  : 					this->m_Mp[this->m_Count].m_X = w;

  00222	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  00228	03 d2		 add	 edx, edx
  0022a	88 5c d6 0a	 mov	 BYTE PTR [esi+edx*8+10], bl

; 222  : 					this->m_Mp[this->m_Count].m_Y = h;

  0022e	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00234	8b 5d fc	 mov	 ebx, DWORD PTR _Type$209780[ebp]
  00237	03 c9		 add	 ecx, ecx
  00239	88 44 ce 0b	 mov	 BYTE PTR [esi+ecx*8+11], al
  0023d	e9 a4 00 00 00	 jmp	 $LN14@LoadSetBas
$LN17@LoadSetBas:

; 223  : 				}
; 224  : 				else if ( Type == 4 )

  00242	83 fb 04	 cmp	 ebx, 4
  00245	75 1f		 jne	 SHORT $LN15@LoadSetBas

; 225  : 				{
; 226  : 					this->m_Mp[this->m_Count].m_W = 0;

  00247	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  0024d	03 d2		 add	 edx, edx
  0024f	c6 44 d6 0d 00	 mov	 BYTE PTR [esi+edx*8+13], 0

; 227  : 					this->m_Mp[this->m_Count].m_H = 0;

  00254	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  0025a	03 c0		 add	 eax, eax
  0025c	c6 44 c6 0e 00	 mov	 BYTE PTR [esi+eax*8+14], 0

; 228  : 				}
; 229  : 				else

  00261	e9 80 00 00 00	 jmp	 $LN14@LoadSetBas
$LN15@LoadSetBas:

; 230  : 				{
; 231  : 					this->m_Mp[this->m_Count].m_W = 0;

  00266	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  0026c	03 c9		 add	 ecx, ecx
  0026e	c6 44 ce 0d 00	 mov	 BYTE PTR [esi+ecx*8+13], 0

; 232  : 					this->m_Mp[this->m_Count].m_H = 0;

  00273	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  00279	03 d2		 add	 edx, edx
  0027b	c6 44 d6 0e 00	 mov	 BYTE PTR [esi+edx*8+14], 0
  00280	eb 64		 jmp	 SHORT $LN14@LoadSetBas
$LN50@LoadSetBas:

; 206  : 				{
; 207  : 					Token = GetToken();	this->m_Mp[this->m_Count].m_W = (BYTE)TokenNumber;

  00282	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00287	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0028d	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00293	d9 7d 0a	 fnstcw	 WORD PTR tv371[ebp]
  00296	0f b7 45 0a	 movzx	 eax, WORD PTR tv371[ebp]
  0029a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0029f	89 45 f8	 mov	 DWORD PTR tv310[ebp], eax
  002a2	03 c9		 add	 ecx, ecx
  002a4	d9 6d f8	 fldcw	 WORD PTR tv310[ebp]
  002a7	db 5d f8	 fistp	 DWORD PTR tv305[ebp]
  002aa	8a 45 f8	 mov	 al, BYTE PTR tv305[ebp]
  002ad	88 44 ce 0d	 mov	 BYTE PTR [esi+ecx*8+13], al
  002b1	d9 6d 0a	 fldcw	 WORD PTR tv371[ebp]

; 208  : 					Token = GetToken();	this->m_Mp[this->m_Count].m_H = (BYTE)TokenNumber;

  002b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002b9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002bf	d9 7d 0a	 fnstcw	 WORD PTR tv295[ebp]
  002c2	0f b7 45 0a	 movzx	 eax, WORD PTR tv295[ebp]
  002c6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002cb	89 45 f8	 mov	 DWORD PTR tv270[ebp], eax
  002ce	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  002d4	03 c0		 add	 eax, eax
  002d6	d9 6d f8	 fldcw	 WORD PTR tv270[ebp]
  002d9	db 5d f8	 fistp	 DWORD PTR tv267[ebp]
  002dc	8a 55 f8	 mov	 dl, BYTE PTR tv267[ebp]
  002df	88 54 c6 0e	 mov	 BYTE PTR [esi+eax*8+14], dl
  002e3	d9 6d 0a	 fldcw	 WORD PTR tv295[ebp]
$LN14@LoadSetBas:

; 233  : 				}
; 234  : 
; 235  : 				Token = GetToken();	this->m_Mp[this->m_Count].m_Dir = (BYTE)TokenNumber;

  002e6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002eb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f1	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  002f7	d9 7d 0a	 fnstcw	 WORD PTR tv262[ebp]
  002fa	0f b7 45 0a	 movzx	 eax, WORD PTR tv262[ebp]
  002fe	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00303	89 45 f8	 mov	 DWORD PTR tv231[ebp], eax
  00306	03 d2		 add	 edx, edx
  00308	d9 6d f8	 fldcw	 WORD PTR tv231[ebp]
  0030b	db 5d f8	 fistp	 DWORD PTR tv155[ebp]
  0030e	8a 4d f8	 mov	 cl, BYTE PTR tv155[ebp]
  00311	88 4c d6 0c	 mov	 BYTE PTR [esi+edx*8+12], cl

; 236  : 				Sdir = this->m_Mp[this->m_Count].m_Dir;

  00315	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  0031b	d9 6d 0a	 fldcw	 WORD PTR tv262[ebp]
  0031e	03 c0		 add	 eax, eax
  00320	8a 44 c6 0c	 mov	 al, BYTE PTR [esi+eax*8+12]
  00324	88 45 0b	 mov	 BYTE PTR tv558[ebp], al

; 237  : 
; 238  : 				if ( this->m_Mp[this->m_Count].m_Dir == (BYTE)-1 )

  00327	3c ff		 cmp	 al, 255			; 000000ffH
  00329	75 1d		 jne	 SHORT $LN13@LoadSetBas

; 239  : 					this->m_Mp[this->m_Count].m_Dir = rand() % 8;

  0032b	e8 00 00 00 00	 call	 _rand
  00330	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00335	79 05		 jns	 SHORT $LN60@LoadSetBas
  00337	48		 dec	 eax
  00338	83 c8 f8	 or	 eax, -8			; fffffff8H
  0033b	40		 inc	 eax
$LN60@LoadSetBas:
  0033c	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00342	03 c9		 add	 ecx, ecx
  00344	88 44 ce 0c	 mov	 BYTE PTR [esi+ecx*8+12], al
$LN13@LoadSetBas:

; 240  : 
; 241  : 				if ( Type == 1 || Type == 3 )

  00348	83 fb 01	 cmp	 ebx, 1
  0034b	74 09		 je	 SHORT $LN11@LoadSetBas
  0034d	83 fb 03	 cmp	 ebx, 3
  00350	0f 85 24 01 00
	00		 jne	 $LN36@LoadSetBas
$LN11@LoadSetBas:

; 242  : 				{
; 243  : 					BYTE w = this->m_Mp[this->m_Count].m_X;
; 244  : 					BYTE h = this->m_Mp[this->m_Count].m_Y;
; 245  : 
; 246  : 					Token = GetToken();	rcount = (int)TokenNumber;

  00356	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0035b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00361	e8 00 00 00 00	 call	 __ftol2_sse

; 247  : 					copycount = this->m_Count;

  00366	8b be 84 2c 03
	00		 mov	 edi, DWORD PTR [esi+208004]

; 248  : 
; 249  : 					if ( rcount > 1 )

  0036c	83 f8 01	 cmp	 eax, 1
  0036f	0f 8e 05 01 00
	00		 jle	 $LN36@LoadSetBas

; 250  : 					{
; 251  : 						for ( int k = 0; k<rcount-1 ; k++ )

  00375	48		 dec	 eax
  00376	33 db		 xor	 ebx, ebx
  00378	89 45 f8	 mov	 DWORD PTR $T210026[ebp], eax
  0037b	85 c0		 test	 eax, eax
  0037d	0f 8e f4 00 00
	00		 jle	 $LN53@LoadSetBas
  00383	c1 e7 04	 shl	 edi, 4
  00386	03 fe		 add	 edi, esi
  00388	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL9@LoadSetBas:

; 252  : 						{
; 253  : 							if ( g_MapServerManager.CheckMapCanMove(this->m_Mp[copycount].m_MapNumber) == FALSE )

  00390	0f b6 57 08	 movzx	 edx, BYTE PTR [edi+8]
  00394	52		 push	 edx
  00395	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0039a	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  0039f	85 c0		 test	 eax, eax
  003a1	0f 84 d0 00 00
	00		 je	 $LN53@LoadSetBas

; 254  : 								break;
; 255  : 						
; 256  : 							this->m_Count++;

  003a7	ff 86 84 2c 03
	00		 inc	 DWORD PTR [esi+208004]
  003ad	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]

; 257  : 
; 258  : 							if ( this->m_Count > OBJ_MAXMONSTER-1 )

  003b3	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  003b8	0f 8f 54 01 00
	00		 jg	 $LN37@LoadSetBas

; 262  : 								return;
; 263  : 							}
; 264  : 
; 265  : 							this->m_Mp[this->m_Count].m_Dis = this->m_Mp[copycount].m_Dis;

  003be	0f b6 4f 09	 movzx	 ecx, BYTE PTR [edi+9]
  003c2	03 c0		 add	 eax, eax
  003c4	88 4c c6 09	 mov	 BYTE PTR [esi+eax*8+9], cl

; 266  : 							this->m_Mp[this->m_Count].m_Type = this->m_Mp[copycount].m_Type;

  003c8	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  003ce	66 8b 47 06	 mov	 ax, WORD PTR [edi+6]
  003d2	03 d2		 add	 edx, edx
  003d4	66 89 44 d6 06	 mov	 WORD PTR [esi+edx*8+6], ax

; 267  : 							this->m_Mp[this->m_Count].m_MapNumber = this->m_Mp[copycount].m_MapNumber;

  003d9	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  003df	0f b6 57 08	 movzx	 edx, BYTE PTR [edi+8]
  003e3	03 c9		 add	 ecx, ecx
  003e5	88 54 ce 08	 mov	 BYTE PTR [esi+ecx*8+8], dl

; 268  : 							this->m_Mp[this->m_Count].m_W = this->m_Mp[copycount].m_W;

  003e9	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  003ef	0f b6 4f 0d	 movzx	 ecx, BYTE PTR [edi+13]
  003f3	03 c0		 add	 eax, eax
  003f5	88 4c c6 0d	 mov	 BYTE PTR [esi+eax*8+13], cl

; 269  : 							this->m_Mp[this->m_Count].m_H = this->m_Mp[copycount].m_H;

  003f9	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  003ff	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00403	03 d2		 add	 edx, edx
  00405	88 44 d6 0e	 mov	 BYTE PTR [esi+edx*8+14], al

; 270  : 							this->m_Mp[this->m_Count].m_X = this->m_Mp[copycount].m_X;

  00409	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  0040f	0f b6 57 0a	 movzx	 edx, BYTE PTR [edi+10]
  00413	03 c9		 add	 ecx, ecx
  00415	88 54 ce 0a	 mov	 BYTE PTR [esi+ecx*8+10], dl

; 271  : 							this->m_Mp[this->m_Count].m_Y = this->m_Mp[copycount].m_Y;

  00419	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  0041f	0f b6 4f 0b	 movzx	 ecx, BYTE PTR [edi+11]
  00423	03 c0		 add	 eax, eax
  00425	88 4c c6 0b	 mov	 BYTE PTR [esi+eax*8+11], cl

; 272  : 							this->m_Mp[this->m_Count].m_ArrangeType = this->m_Mp[copycount].m_ArrangeType;

  00429	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  0042f	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00433	03 d2		 add	 edx, edx

; 273  : 
; 274  : 							if ( Sdir == (BYTE)-1 )

  00435	80 7d 0b ff	 cmp	 BYTE PTR tv558[ebp], 255 ; 000000ffH
  00439	88 44 d6 04	 mov	 BYTE PTR [esi+edx*8+4], al
  0043d	75 1f		 jne	 SHORT $LN4@LoadSetBas

; 275  : 								this->m_Mp[this->m_Count].m_Dir = rand() % 8;

  0043f	e8 00 00 00 00	 call	 _rand
  00444	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00449	79 05		 jns	 SHORT $LN61@LoadSetBas
  0044b	48		 dec	 eax
  0044c	83 c8 f8	 or	 eax, -8			; fffffff8H
  0044f	40		 inc	 eax
$LN61@LoadSetBas:
  00450	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00456	03 c9		 add	 ecx, ecx
  00458	88 44 ce 0c	 mov	 BYTE PTR [esi+ecx*8+12], al

; 276  : 							else

  0045c	eb 0f		 jmp	 SHORT $LN8@LoadSetBas
$LN4@LoadSetBas:

; 277  : 								this->m_Mp[this->m_Count].m_Dir = this->m_Mp[copycount].m_Dir;

  0045e	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  00464	8a 47 0c	 mov	 al, BYTE PTR [edi+12]
  00467	03 d2		 add	 edx, edx
  00469	88 44 d6 0c	 mov	 BYTE PTR [esi+edx*8+12], al
$LN8@LoadSetBas:

; 250  : 					{
; 251  : 						for ( int k = 0; k<rcount-1 ; k++ )

  0046d	43		 inc	 ebx
  0046e	3b 5d f8	 cmp	 ebx, DWORD PTR $T210026[ebp]
  00471	0f 8c 19 ff ff
	ff		 jl	 $LL9@LoadSetBas
$LN53@LoadSetBas:
  00477	8b 5d fc	 mov	 ebx, DWORD PTR _Type$209780[ebp]
$LN36@LoadSetBas:

; 278  : 						}
; 279  : 					}
; 280  : 				}
; 281  : 
; 282  : 
; 283  : 				
; 284  : #ifdef IMPERIAL_CONFLICT_NEW
; 285  : 
; 286  : 				else if(Type == 5)
; 287  : 				{
; 288  : 					GetToken();
; 289  : 					this->m_Mp[this->m_Count].m_IG_ZoneIndex = TokenNumber;
; 290  : 
; 291  : 					GetToken();
; 292  : 					this->m_Mp[this->m_Count].m_IG_RegenTable = TokenNumber;
; 293  : 				}
; 294  : #endif
; 295  : 
; 296  : 				if ( g_MapServerManager.CheckMapCanMove(this->m_Mp[this->m_Count].m_MapNumber) == FALSE )

  0047a	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00480	03 c9		 add	 ecx, ecx
  00482	0f b6 54 ce 08	 movzx	 edx, BYTE PTR [esi+ecx*8+8]
  00487	52		 push	 edx
  00488	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0048d	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  00492	85 c0		 test	 eax, eax
  00494	74 17		 je	 SHORT $LN56@LoadSetBas

; 297  : 					continue;
; 298  : 
; 299  : 				this->m_Count++;

  00496	ff 86 84 2c 03
	00		 inc	 DWORD PTR [esi+208004]
  0049c	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]

; 300  : 
; 301  : 				if ( this->m_Count > OBJ_MAXMONSTER-1 )

  004a2	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  004a7	0f 8f 91 00 00
	00		 jg	 $LN39@LoadSetBas
$LN56@LoadSetBas:

; 190  : 
; 191  : 			while ( true )
; 192  : 			{
; 193  : 				Token = GetToken();

  004ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 194  : 
; 195  : 				if ( strcmp("end", TokenString) == 0 )

  004b2	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  004b7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  004bc	8d 64 24 00	 npad	 4
$LL46@LoadSetBas:
  004c0	8a 10		 mov	 dl, BYTE PTR [eax]
  004c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  004c4	75 1a		 jne	 SHORT $LN47@LoadSetBas
  004c6	84 d2		 test	 dl, dl
  004c8	74 12		 je	 SHORT $LN58@LoadSetBas
  004ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  004cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  004d0	75 0e		 jne	 SHORT $LN47@LoadSetBas
  004d2	83 c0 02	 add	 eax, 2
  004d5	83 c1 02	 add	 ecx, 2
  004d8	84 d2		 test	 dl, dl
  004da	75 e4		 jne	 SHORT $LL46@LoadSetBas
$LN58@LoadSetBas:
  004dc	33 c0		 xor	 eax, eax
  004de	eb 05		 jmp	 SHORT $LN49@LoadSetBas
$LN47@LoadSetBas:
  004e0	1b c0		 sbb	 eax, eax
  004e2	83 d8 ff	 sbb	 eax, -1
$LN49@LoadSetBas:
  004e5	85 c0		 test	 eax, eax
  004e7	0f 85 c3 fb ff
	ff		 jne	 $LL23@LoadSetBas
$LN38@LoadSetBas:

; 179  : 
; 180  : 	while ( true )
; 181  : 	{
; 182  : 		Token = GetToken();

  004ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 
; 184  : 		if ( Token == 2 )

  004f2	83 f8 02	 cmp	 eax, 2
  004f5	0f 85 58 fb ff
	ff		 jne	 $LL27@LoadSetBas
$LN40@LoadSetBas:

; 305  : 					return;
; 306  : 				}
; 307  : 			}
; 308  : 		}
; 309  : 	}
; 310  : 
; 311  : 	fclose(SMDFile);

  004fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00500	50		 push	 eax
  00501	e8 00 00 00 00	 call	 _fclose
  00506	83 c4 04	 add	 esp, 4
  00509	5b		 pop	 ebx
  0050a	5f		 pop	 edi
  0050b	5e		 pop	 esi

; 312  : }

  0050c	8b e5		 mov	 esp, ebp
  0050e	5d		 pop	 ebp
  0050f	c2 04 00	 ret	 4
$LN37@LoadSetBas:

; 259  : 							{
; 260  : 								MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  00512	68 04 01 00 00	 push	 260			; 00000104H
  00517	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@
  0051c	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  00521	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 261  : 								fclose(SMDFile);

  00526	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  0052c	51		 push	 ecx
  0052d	e8 00 00 00 00	 call	 _fclose
  00532	83 c4 10	 add	 esp, 16			; 00000010H
  00535	5b		 pop	 ebx
  00536	5f		 pop	 edi
  00537	5e		 pop	 esi

; 312  : }

  00538	8b e5		 mov	 esp, ebp
  0053a	5d		 pop	 ebp
  0053b	c2 04 00	 ret	 4
$LN39@LoadSetBas:

; 302  : 				{
; 303  : 					MsgBox("Monster attribute max over %d (%s %d)", this->m_Count, __FILE__, __LINE__);

  0053e	68 2f 01 00 00	 push	 303			; 0000012fH
  00543	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@
  00548	50		 push	 eax
  00549	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CBICGAHP@Monster?5attribute?5max?5over?5?$CFd?5?$CI?$CF@
  0054e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 304  : 					fclose(SMDFile);

  00553	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00559	52		 push	 edx
  0055a	e8 00 00 00 00	 call	 _fclose
  0055f	83 c4 14	 add	 esp, 20			; 00000014H
  00562	5b		 pop	 ebx
  00563	5f		 pop	 edi
  00564	5e		 pop	 esi

; 312  : }

  00565	8b e5		 mov	 esp, ebp
  00567	5d		 pop	 ebp
  00568	c2 04 00	 ret	 4
?LoadSetBase@CMonsterSetBase@@QAEXPAD@Z ENDP		; CMonsterSetBase::LoadSetBase
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z	; CMonsterSetBase::LoadSetBase
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z$0
__ehfuncinfo$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z
_TEXT	SEGMENT
tv558 = -160						; size = 4
_h$209850 = -160					; size = 4
_Type$209840 = -156					; size = 4
tv553 = -149						; size = 1
_WzMemScript$ = -148					; size = 132
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z PROC		; CMonsterSetBase::LoadSetBase, COMDAT
; _this$ = ecx

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 7d 08	 mov	 edi, DWORD PTR _Buffer$[ebp]
  00031	8b f1		 mov	 esi, ecx

; 317  : 	CWzMemScript WzMemScript;

  00033	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00039	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 318  : 	int Token;
; 319  : 	int rcount;
; 320  : 	int copycount;
; 321  : 	BYTE Sdir;
; 322  : 
; 323  : 	WzMemScript.SetBuffer(Buffer, iSize);

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00041	50		 push	 eax
  00042	33 db		 xor	 ebx, ebx
  00044	57		 push	 edi
  00045	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0004b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004e	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 324  : 
; 325  : 	this->m_Count = 0;
; 326  : 
; 327  : 	while ( true )
; 328  : 	{
; 329  : 		Token = WzMemScript.GetToken();

  00053	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00059	89 9e 84 2c 03
	00		 mov	 DWORD PTR [esi+208004], ebx
  0005f	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 330  : 
; 331  : 		if ( Token == 2 )

  00064	83 f8 02	 cmp	 eax, 2
  00067	0f 84 87 04 00
	00		 je	 $LN40@LoadSetBas@2
  0006d	8d 49 00	 npad	 3
$LL27@LoadSetBas@2:

; 332  : 			break;
; 333  : 
; 334  : 		if ( Token == 1 )

  00070	83 f8 01	 cmp	 eax, 1
  00073	0f 85 34 04 00
	00		 jne	 $LN38@LoadSetBas@2

; 335  : 		{
; 336  : 			int Type = WzMemScript.GetNumber();

  00079	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0007f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00084	8b d8		 mov	 ebx, eax

; 337  : 
; 338  : 			while ( true )
; 339  : 			{
; 340  : 				Token = WzMemScript.GetToken();

  00086	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0008c	89 9d 64 ff ff
	ff		 mov	 DWORD PTR _Type$209840[ebp], ebx
  00092	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 341  : 
; 342  : 				if ( strcmp("end", WzMemScript.GetString()) == 0 )

  00097	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0009d	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  000a2	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL42@LoadSetBas@2:
  000a7	8a 11		 mov	 dl, BYTE PTR [ecx]
  000a9	3a 10		 cmp	 dl, BYTE PTR [eax]
  000ab	75 1a		 jne	 SHORT $LN43@LoadSetBas@2
  000ad	84 d2		 test	 dl, dl
  000af	74 12		 je	 SHORT $LN44@LoadSetBas@2
  000b1	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000b4	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  000b7	75 0e		 jne	 SHORT $LN43@LoadSetBas@2
  000b9	83 c1 02	 add	 ecx, 2
  000bc	83 c0 02	 add	 eax, 2
  000bf	84 d2		 test	 dl, dl
  000c1	75 e4		 jne	 SHORT $LL42@LoadSetBas@2
$LN44@LoadSetBas@2:
  000c3	33 c0		 xor	 eax, eax
  000c5	eb 05		 jmp	 SHORT $LN45@LoadSetBas@2
$LN43@LoadSetBas@2:
  000c7	1b c0		 sbb	 eax, eax
  000c9	83 d8 ff	 sbb	 eax, -1
$LN45@LoadSetBas@2:
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 d9 03 00
	00		 je	 $LN38@LoadSetBas@2
$LN23@LoadSetBas@2:

; 343  : 					break;
; 344  : 				
; 345  : 				this->m_Mp[this->m_Count].m_Type = WzMemScript.GetNumber();

  000d4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000da	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  000df	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  000e5	03 c9		 add	 ecx, ecx
  000e7	66 89 44 ce 06	 mov	 WORD PTR [esi+ecx*8+6], ax

; 346  : 
; 347  : 				Token = WzMemScript.GetToken();	this->m_Mp[this->m_Count].m_MapNumber = WzMemScript.GetNumber();

  000ec	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000f2	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  000f7	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000fd	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00102	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  00108	03 d2		 add	 edx, edx

; 348  : 				Token = WzMemScript.GetToken();	this->m_Mp[this->m_Count].m_Dis = WzMemScript.GetNumber();

  0010a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00110	88 44 d6 08	 mov	 BYTE PTR [esi+edx*8+8], al
  00114	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00119	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0011f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00124	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  0012a	03 c9		 add	 ecx, ecx
  0012c	88 44 ce 09	 mov	 BYTE PTR [esi+ecx*8+9], al

; 349  : 				Token = WzMemScript.GetToken();	this->m_Mp[this->m_Count].m_X = WzMemScript.GetNumber();

  00130	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00136	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0013b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00141	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00146	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  0014c	03 d2		 add	 edx, edx

; 350  : 				Token = WzMemScript.GetToken();	this->m_Mp[this->m_Count].m_Y = WzMemScript.GetNumber();

  0014e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00154	88 44 d6 0a	 mov	 BYTE PTR [esi+edx*8+10], al
  00158	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0015d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00163	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00168	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  0016e	03 c9		 add	 ecx, ecx
  00170	88 44 ce 0b	 mov	 BYTE PTR [esi+ecx*8+11], al

; 351  : 
; 352  : 				this->m_Mp[this->m_Count].m_ArrangeType = Type;

  00174	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  0017a	03 d2		 add	 edx, edx
  0017c	88 5c d6 04	 mov	 BYTE PTR [esi+edx*8+4], bl

; 353  : 
; 354  : 
; 355  : 				if ( Type == 1 || Type == 3 )

  00180	83 fb 01	 cmp	 ebx, 1
  00183	0f 84 ce 00 00
	00		 je	 $LN19@LoadSetBas@2
  00189	83 fb 03	 cmp	 ebx, 3
  0018c	0f 84 c5 00 00
	00		 je	 $LN19@LoadSetBas@2

; 359  : 				}
; 360  : 				else if ( Type == 2 )

  00192	83 fb 02	 cmp	 ebx, 2
  00195	0f 85 7f 00 00
	00		 jne	 $LN17@LoadSetBas@2

; 361  : 				{
; 362  : 					this->m_Mp[this->m_Count].m_W = 0;

  0019b	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  001a1	03 c0		 add	 eax, eax
  001a3	c6 44 c6 0d 00	 mov	 BYTE PTR [esi+eax*8+13], 0

; 363  : 					this->m_Mp[this->m_Count].m_H = 0;

  001a8	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  001ae	03 c9		 add	 ecx, ecx
  001b0	c6 44 ce 0e 00	 mov	 BYTE PTR [esi+ecx*8+14], 0

; 364  : 
; 365  : 					int w = this->m_Mp[this->m_Count].m_X - 3;

  001b5	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  001bb	03 c0		 add	 eax, eax
  001bd	0f b6 5c c6 0a	 movzx	 ebx, BYTE PTR [esi+eax*8+10]

; 366  : 					int h = this->m_Mp[this->m_Count].m_Y - 3;

  001c2	0f b6 44 c6 0b	 movzx	 eax, BYTE PTR [esi+eax*8+11]
  001c7	83 e8 03	 sub	 eax, 3
  001ca	83 eb 03	 sub	 ebx, 3
  001cd	89 85 60 ff ff
	ff		 mov	 DWORD PTR _h$209850[ebp], eax

; 367  : 
; 368  : 					w += rand() % 7;

  001d3	e8 00 00 00 00	 call	 _rand
  001d8	99		 cdq
  001d9	b9 07 00 00 00	 mov	 ecx, 7
  001de	f7 f9		 idiv	 ecx
  001e0	03 da		 add	 ebx, edx

; 369  : 					h += rand() % 7;

  001e2	e8 00 00 00 00	 call	 _rand
  001e7	99		 cdq
  001e8	b9 07 00 00 00	 mov	 ecx, 7
  001ed	f7 f9		 idiv	 ecx
  001ef	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _h$209850[ebp]
  001f5	03 c2		 add	 eax, edx

; 370  : 
; 371  : 					this->m_Mp[this->m_Count].m_X = w;

  001f7	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  001fd	03 d2		 add	 edx, edx
  001ff	88 5c d6 0a	 mov	 BYTE PTR [esi+edx*8+10], bl

; 372  : 					this->m_Mp[this->m_Count].m_Y = h;

  00203	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00209	8b 9d 64 ff ff
	ff		 mov	 ebx, DWORD PTR _Type$209840[ebp]
  0020f	03 c9		 add	 ecx, ecx
  00211	88 44 ce 0b	 mov	 BYTE PTR [esi+ecx*8+11], al
  00215	e9 81 00 00 00	 jmp	 $LN14@LoadSetBas@2
$LN17@LoadSetBas@2:

; 373  : 				}
; 374  : 				else if ( Type == 4 )

  0021a	83 fb 04	 cmp	 ebx, 4
  0021d	75 1c		 jne	 SHORT $LN15@LoadSetBas@2

; 375  : 				{
; 376  : 					this->m_Mp[this->m_Count].m_W = 0;

  0021f	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  00225	03 d2		 add	 edx, edx
  00227	c6 44 d6 0d 00	 mov	 BYTE PTR [esi+edx*8+13], 0

; 377  : 					this->m_Mp[this->m_Count].m_H = 0;

  0022c	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  00232	03 c0		 add	 eax, eax
  00234	c6 44 c6 0e 00	 mov	 BYTE PTR [esi+eax*8+14], 0

; 378  : 				}
; 379  : 				else

  00239	eb 60		 jmp	 SHORT $LN14@LoadSetBas@2
$LN15@LoadSetBas@2:

; 380  : 				{
; 381  : 					this->m_Mp[this->m_Count].m_W = 0;

  0023b	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00241	03 c9		 add	 ecx, ecx
  00243	c6 44 ce 0d 00	 mov	 BYTE PTR [esi+ecx*8+13], 0

; 382  : 					this->m_Mp[this->m_Count].m_H = 0;

  00248	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  0024e	03 d2		 add	 edx, edx
  00250	c6 44 d6 0e 00	 mov	 BYTE PTR [esi+edx*8+14], 0
  00255	eb 44		 jmp	 SHORT $LN14@LoadSetBas@2
$LN19@LoadSetBas@2:

; 356  : 				{
; 357  : 					Token = WzMemScript.GetToken();	this->m_Mp[this->m_Count].m_W = WzMemScript.GetNumber();

  00257	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0025d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00262	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00268	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0026d	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00273	03 c9		 add	 ecx, ecx
  00275	88 44 ce 0d	 mov	 BYTE PTR [esi+ecx*8+13], al

; 358  : 					Token = WzMemScript.GetToken();	this->m_Mp[this->m_Count].m_H = WzMemScript.GetNumber();

  00279	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0027f	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00284	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0028a	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0028f	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  00295	03 d2		 add	 edx, edx
  00297	88 44 d6 0e	 mov	 BYTE PTR [esi+edx*8+14], al
$LN14@LoadSetBas@2:

; 383  : 				}
; 384  : 
; 385  : 				Token = WzMemScript.GetToken();	this->m_Mp[this->m_Count].m_Dir = WzMemScript.GetNumber();

  0029b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002a1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  002a6	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002ac	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  002b1	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  002b7	03 c9		 add	 ecx, ecx
  002b9	88 44 ce 0c	 mov	 BYTE PTR [esi+ecx*8+12], al

; 386  : 
; 387  : 				Sdir = this->m_Mp[this->m_Count].m_Dir;

  002bd	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  002c3	03 d2		 add	 edx, edx
  002c5	8a 44 d6 0c	 mov	 al, BYTE PTR [esi+edx*8+12]
  002c9	88 85 6b ff ff
	ff		 mov	 BYTE PTR tv553[ebp], al

; 388  : 
; 389  : 				if ( this->m_Mp[this->m_Count].m_Dir == (BYTE)-1 )

  002cf	3c ff		 cmp	 al, 255			; 000000ffH
  002d1	75 1d		 jne	 SHORT $LN13@LoadSetBas@2

; 390  : 				{
; 391  : 					this->m_Mp[this->m_Count].m_Dir = rand() % 8;

  002d3	e8 00 00 00 00	 call	 _rand
  002d8	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  002dd	79 05		 jns	 SHORT $LN60@LoadSetBas@2
  002df	48		 dec	 eax
  002e0	83 c8 f8	 or	 eax, -8			; fffffff8H
  002e3	40		 inc	 eax
$LN60@LoadSetBas@2:
  002e4	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  002ea	03 c9		 add	 ecx, ecx
  002ec	88 44 ce 0c	 mov	 BYTE PTR [esi+ecx*8+12], al
$LN13@LoadSetBas@2:

; 392  : 				}
; 393  : 
; 394  : 				if ( Type == 1 || Type == 3 )

  002f0	83 fb 01	 cmp	 ebx, 1
  002f3	74 09		 je	 SHORT $LN11@LoadSetBas@2
  002f5	83 fb 03	 cmp	 ebx, 3
  002f8	0f 85 35 01 00
	00		 jne	 $LN36@LoadSetBas@2
$LN11@LoadSetBas@2:

; 395  : 				{
; 396  : 					BYTE w = this->m_Mp[this->m_Count].m_X;
; 397  : 					BYTE h = this->m_Mp[this->m_Count].m_Y;
; 398  : 
; 399  : 					Token = WzMemScript.GetToken();

  002fe	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00304	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 400  : 					rcount = WzMemScript.GetNumber();

  00309	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0030f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 401  : 					copycount = this->m_Count;

  00314	8b be 84 2c 03
	00		 mov	 edi, DWORD PTR [esi+208004]

; 402  : 
; 403  : 					if ( rcount > 1 )

  0031a	83 f8 01	 cmp	 eax, 1
  0031d	0f 8e 10 01 00
	00		 jle	 $LN36@LoadSetBas@2

; 404  : 					{
; 405  : 						for ( int k = 0; k<rcount-1 ; k++ )

  00323	48		 dec	 eax
  00324	33 db		 xor	 ebx, ebx
  00326	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv558[ebp], eax
  0032c	85 c0		 test	 eax, eax
  0032e	0f 8e f9 00 00
	00		 jle	 $LN53@LoadSetBas@2
  00334	c1 e7 04	 shl	 edi, 4
  00337	03 fe		 add	 edi, esi
  00339	8d a4 24 00 00
	00 00		 npad	 7
$LL9@LoadSetBas@2:

; 406  : 						{
; 407  : 							if ( g_MapServerManager.CheckMapCanMove(this->m_Mp[copycount].m_MapNumber) == FALSE )

  00340	0f b6 57 08	 movzx	 edx, BYTE PTR [edi+8]
  00344	52		 push	 edx
  00345	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0034a	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  0034f	85 c0		 test	 eax, eax
  00351	0f 84 d6 00 00
	00		 je	 $LN53@LoadSetBas@2

; 408  : 								break;
; 409  : 						
; 410  : 							this->m_Count++;

  00357	ff 86 84 2c 03
	00		 inc	 DWORD PTR [esi+208004]
  0035d	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]

; 411  : 
; 412  : 							if ( this->m_Count > OBJ_MAXMONSTER-1 )

  00363	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  00368	0f 8f 55 01 00
	00		 jg	 $LN37@LoadSetBas@2

; 416  : 							}
; 417  : 
; 418  : 							this->m_Mp[this->m_Count].m_Dis = this->m_Mp[copycount].m_Dis;

  0036e	0f b6 4f 09	 movzx	 ecx, BYTE PTR [edi+9]
  00372	03 c0		 add	 eax, eax
  00374	88 4c c6 09	 mov	 BYTE PTR [esi+eax*8+9], cl

; 419  : 							this->m_Mp[this->m_Count].m_Type = this->m_Mp[copycount].m_Type;

  00378	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  0037e	66 8b 47 06	 mov	 ax, WORD PTR [edi+6]
  00382	03 d2		 add	 edx, edx
  00384	66 89 44 d6 06	 mov	 WORD PTR [esi+edx*8+6], ax

; 420  : 							this->m_Mp[this->m_Count].m_MapNumber = this->m_Mp[copycount].m_MapNumber;

  00389	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  0038f	0f b6 57 08	 movzx	 edx, BYTE PTR [edi+8]
  00393	03 c9		 add	 ecx, ecx
  00395	88 54 ce 08	 mov	 BYTE PTR [esi+ecx*8+8], dl

; 421  : 							this->m_Mp[this->m_Count].m_W = this->m_Mp[copycount].m_W;

  00399	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  0039f	0f b6 4f 0d	 movzx	 ecx, BYTE PTR [edi+13]
  003a3	03 c0		 add	 eax, eax
  003a5	88 4c c6 0d	 mov	 BYTE PTR [esi+eax*8+13], cl

; 422  : 							this->m_Mp[this->m_Count].m_H = this->m_Mp[copycount].m_H;

  003a9	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  003af	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  003b3	03 d2		 add	 edx, edx
  003b5	88 44 d6 0e	 mov	 BYTE PTR [esi+edx*8+14], al

; 423  : 							this->m_Mp[this->m_Count].m_X = this->m_Mp[copycount].m_X;

  003b9	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  003bf	0f b6 57 0a	 movzx	 edx, BYTE PTR [edi+10]
  003c3	03 c9		 add	 ecx, ecx
  003c5	88 54 ce 0a	 mov	 BYTE PTR [esi+ecx*8+10], dl

; 424  : 							this->m_Mp[this->m_Count].m_Y = this->m_Mp[copycount].m_Y;

  003c9	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]
  003cf	0f b6 4f 0b	 movzx	 ecx, BYTE PTR [edi+11]
  003d3	03 c0		 add	 eax, eax
  003d5	88 4c c6 0b	 mov	 BYTE PTR [esi+eax*8+11], cl

; 425  : 							this->m_Mp[this->m_Count].m_ArrangeType = this->m_Mp[copycount].m_ArrangeType;

  003d9	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  003df	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  003e3	03 d2		 add	 edx, edx

; 426  : 
; 427  : 							if ( Sdir == (BYTE)-1 )

  003e5	80 bd 6b ff ff
	ff ff		 cmp	 BYTE PTR tv553[ebp], 255 ; 000000ffH
  003ec	88 44 d6 04	 mov	 BYTE PTR [esi+edx*8+4], al
  003f0	75 1f		 jne	 SHORT $LN4@LoadSetBas@2

; 428  : 								this->m_Mp[this->m_Count].m_Dir = rand() % 8;

  003f2	e8 00 00 00 00	 call	 _rand
  003f7	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  003fc	79 05		 jns	 SHORT $LN61@LoadSetBas@2
  003fe	48		 dec	 eax
  003ff	83 c8 f8	 or	 eax, -8			; fffffff8H
  00402	40		 inc	 eax
$LN61@LoadSetBas@2:
  00403	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00409	03 c9		 add	 ecx, ecx
  0040b	88 44 ce 0c	 mov	 BYTE PTR [esi+ecx*8+12], al

; 429  : 							else

  0040f	eb 0f		 jmp	 SHORT $LN8@LoadSetBas@2
$LN4@LoadSetBas@2:

; 430  : 								this->m_Mp[this->m_Count].m_Dir = this->m_Mp[copycount].m_Dir;

  00411	8b 96 84 2c 03
	00		 mov	 edx, DWORD PTR [esi+208004]
  00417	8a 47 0c	 mov	 al, BYTE PTR [edi+12]
  0041a	03 d2		 add	 edx, edx
  0041c	88 44 d6 0c	 mov	 BYTE PTR [esi+edx*8+12], al
$LN8@LoadSetBas@2:

; 404  : 					{
; 405  : 						for ( int k = 0; k<rcount-1 ; k++ )

  00420	43		 inc	 ebx
  00421	3b 9d 60 ff ff
	ff		 cmp	 ebx, DWORD PTR tv558[ebp]
  00427	0f 8c 13 ff ff
	ff		 jl	 $LL9@LoadSetBas@2
$LN53@LoadSetBas@2:
  0042d	8b 9d 64 ff ff
	ff		 mov	 ebx, DWORD PTR _Type$209840[ebp]
$LN36@LoadSetBas@2:

; 431  : 						}
; 432  : 					}
; 433  : 				}
; 434  : 
; 435  : #ifdef IMPERIAL_CONFLICT_NEW
; 436  : 
; 437  : 				else if(Type == 5)
; 438  : 				{
; 439  : 					WzMemScript.GetToken();
; 440  : 					this->m_Mp[this->m_Count].m_IG_ZoneIndex = WzMemScript.GetNumber();
; 441  : 
; 442  : 					WzMemScript.GetToken();
; 443  : 					this->m_Mp[this->m_Count].m_IG_RegenTable = WzMemScript.GetNumber();
; 444  : 				}
; 445  : #endif
; 446  : 
; 447  : 				if ( g_MapServerManager.CheckMapCanMove(this->m_Mp[this->m_Count].m_MapNumber) == FALSE )

  00433	8b 8e 84 2c 03
	00		 mov	 ecx, DWORD PTR [esi+208004]
  00439	03 c9		 add	 ecx, ecx
  0043b	0f b6 54 ce 08	 movzx	 edx, BYTE PTR [esi+ecx*8+8]
  00440	52		 push	 edx
  00441	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  00446	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  0044b	85 c0		 test	 eax, eax
  0044d	74 13		 je	 SHORT $LN1@LoadSetBas@2

; 448  : 					continue;
; 449  : 
; 450  : 				this->m_Count++;

  0044f	ff 86 84 2c 03
	00		 inc	 DWORD PTR [esi+208004]
  00455	8b 86 84 2c 03
	00		 mov	 eax, DWORD PTR [esi+208004]

; 451  : 
; 452  : 				if ( this->m_Count > OBJ_MAXMONSTER-1 )

  0045b	3d c7 32 00 00	 cmp	 eax, 12999		; 000032c7H
  00460	7f 7a		 jg	 SHORT $LN39@LoadSetBas@2
$LN1@LoadSetBas@2:

; 337  : 
; 338  : 			while ( true )
; 339  : 			{
; 340  : 				Token = WzMemScript.GetToken();

  00462	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00468	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 341  : 
; 342  : 				if ( strcmp("end", WzMemScript.GetString()) == 0 )

  0046d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00473	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  00478	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0047d	8d 49 00	 npad	 3
$LL46@LoadSetBas@2:
  00480	8a 11		 mov	 dl, BYTE PTR [ecx]
  00482	3a 10		 cmp	 dl, BYTE PTR [eax]
  00484	75 1a		 jne	 SHORT $LN47@LoadSetBas@2
  00486	84 d2		 test	 dl, dl
  00488	74 12		 je	 SHORT $LN48@LoadSetBas@2
  0048a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0048d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00490	75 0e		 jne	 SHORT $LN47@LoadSetBas@2
  00492	83 c1 02	 add	 ecx, 2
  00495	83 c0 02	 add	 eax, 2
  00498	84 d2		 test	 dl, dl
  0049a	75 e4		 jne	 SHORT $LL46@LoadSetBas@2
$LN48@LoadSetBas@2:
  0049c	33 c0		 xor	 eax, eax
  0049e	eb 05		 jmp	 SHORT $LN49@LoadSetBas@2
$LN47@LoadSetBas@2:
  004a0	1b c0		 sbb	 eax, eax
  004a2	83 d8 ff	 sbb	 eax, -1
$LN49@LoadSetBas@2:
  004a5	85 c0		 test	 eax, eax
  004a7	0f 85 27 fc ff
	ff		 jne	 $LN23@LoadSetBas@2
$LN38@LoadSetBas@2:

; 324  : 
; 325  : 	this->m_Count = 0;
; 326  : 
; 327  : 	while ( true )
; 328  : 	{
; 329  : 		Token = WzMemScript.GetToken();

  004ad	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  004b3	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 330  : 
; 331  : 		if ( Token == 2 )

  004b8	83 f8 02	 cmp	 eax, 2
  004bb	0f 85 af fb ff
	ff		 jne	 $LL27@LoadSetBas@2

; 457  : 				}
; 458  : 			}
; 459  : 		}
; 460  : 	}
; 461  : 
; 462  : 	//fclose(SMDFile);
; 463  : }

  004c1	eb 31		 jmp	 SHORT $LN40@LoadSetBas@2
$LN37@LoadSetBas@2:

; 413  : 							{
; 414  : 								MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  004c3	68 9e 01 00 00	 push	 414			; 0000019eH
  004c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@
  004cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  004d2	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  004d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 415  : 								return;

  004da	eb 18		 jmp	 SHORT $LN40@LoadSetBas@2
$LN39@LoadSetBas@2:

; 453  : 				{
; 454  : 					MsgBox("Monster attribute max over %d (%s %d)", this->m_Count, __FILE__, __LINE__);

  004dc	68 c6 01 00 00	 push	 454			; 000001c6H
  004e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EANIJDJ@MonsterSetBase?4cpp?$AA@
  004e6	50		 push	 eax
  004e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CBICGAHP@Monster?5attribute?5max?5over?5?$CFd?5?$CI?$CF@
  004ec	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  004f1	83 c4 10	 add	 esp, 16			; 00000010H
$LN40@LoadSetBas@2:

; 455  : 					//fclose(SMDFile);
; 456  : 					return;

  004f4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  004fa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00501	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript

; 457  : 				}
; 458  : 			}
; 459  : 		}
; 460  : 	}
; 461  : 
; 462  : 	//fclose(SMDFile);
; 463  : }

  00506	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00509	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00510	59		 pop	 ecx
  00511	5f		 pop	 edi
  00512	5e		 pop	 esi
  00513	5b		 pop	 ebx
  00514	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00517	33 cd		 xor	 ecx, ebp
  00519	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051e	8b e5		 mov	 esp, ebp
  00520	5d		 pop	 ebp
  00521	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadSetBase@CMonsterSetBase@@QAEXPADH@Z ENDP		; CMonsterSetBase::LoadSetBase
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMonsterSetBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMonsterSetBase@@UAEPAXI@Z PROC			; CMonsterSetBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMonsterSetBase@@UAE@XZ ; CMonsterSetBase::~CMonsterSetBase
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMonsterSetBase@@UAEPAXI@Z ENDP			; CMonsterSetBase::`scalar deleting destructor'
_TEXT	ENDS
END
