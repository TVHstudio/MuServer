; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MonsterTime.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??1CMonsterTime@@QAE@XZ				; CMonsterTime::~CMonsterTime
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\monstertime.cpp
;	COMDAT ??1CMonsterTime@@QAE@XZ
_TEXT	SEGMENT
??1CMonsterTime@@QAE@XZ PROC				; CMonsterTime::~CMonsterTime, COMDAT
; _this$ = ecx

; 23   : }

  00000	c3		 ret	 0
??1CMonsterTime@@QAE@XZ ENDP				; CMonsterTime::~CMonsterTime
_TEXT	ENDS
PUBLIC	?Init@CMonsterTime@@QAEXXZ			; CMonsterTime::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMonsterTime@@QAEXXZ
_TEXT	SEGMENT
?Init@CMonsterTime@@QAEXXZ PROC				; CMonsterTime::Init, COMDAT
; _this$ = ecx

; 27   : 	this->m_Enable = 0;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx

; 28   : 	this->m_LoadCount = 0;
; 29   : 	this->m_LoadPos = 0;
; 30   : 
; 31   : 	this->m_Loaded = 0;
; 32   : 
; 33   : 	memset(this->m_Info, 0, sizeof(this->m_Info));

  00005	68 f0 0a 00 00	 push	 2800			; 00000af0H
  0000a	50		 push	 eax
  0000b	89 06		 mov	 DWORD PTR [esi], eax
  0000d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00013	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00016	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _memset

; 34   : 	memset(this->m_Data, -1, sizeof(this->m_Data));

  0001f	68 b0 04 00 00	 push	 1200			; 000004b0H
  00024	6a ff		 push	 -1
  00026	81 c6 00 0b 00
	00		 add	 esi, 2816		; 00000b00H
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	5e		 pop	 esi

; 35   : }

  00036	c3		 ret	 0
?Init@CMonsterTime@@QAEXXZ ENDP				; CMonsterTime::Init
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Read@CMonsterTime@@QAEXPAD@Z			; CMonsterTime::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@CMonsterTime@@QAEXPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?Read@CMonsterTime@@QAEXPAD@Z PROC			; CMonsterTime::Read, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 57   : 	SMDFile = fopen(filename, "r");

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _filename$[ebp]
  00007	56		 push	 esi
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000d	53		 push	 ebx
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8
  00018	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 58   : 
; 59   : 	if(SMDFile == NULL)

  0001d	85 c0		 test	 eax, eax
  0001f	75 20		 jne	 SHORT $LN13@Read

; 60   : 	{
; 61   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), filename);

  00021	53		 push	 ebx
  00022	68 c6 01 00 00	 push	 454			; 000001c6H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 08	 add	 esp, 8
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx

; 137  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN13@Read:
  00041	57		 push	 edi

; 62   : 		return;
; 63   : 	}
; 64   : 
; 65   : 	SMDToken Token;
; 66   : 
; 67   : 	int iType = -1;
; 68   : 
; 69   : 	while(true)
; 70   : 	{
; 71   : 		Token = GetToken();

  00042	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 
; 73   :         if(Token == END)

  00047	bf 01 00 00 00	 mov	 edi, 1
  0004c	83 f8 02	 cmp	 eax, 2
  0004f	0f 84 9f 01 00
	00		 je	 $LN21@Read
$LL12@Read:

; 74   : 		{
; 75   :             break;
; 76   : 		}
; 77   : 
; 78   : 		iType = (int)TokenNumber;

  00055	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0005b	e8 00 00 00 00	 call	 __ftol2_sse
  00060	8b d8		 mov	 ebx, eax

; 79   : 
; 80   : 		if(iType < 0 || iType > 1)

  00062	3b df		 cmp	 ebx, edi
  00064	0f 87 87 01 00
	00		 ja	 $LN31@Read
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL7@Read:

; 81   : 		{
; 82   : 			break;
; 83   : 		}
; 84   : 
; 85   : 		while(true)
; 86   : 		{
; 87   : 			if(iType == 0)

  00070	85 db		 test	 ebx, ebx
  00072	75 4b		 jne	 SHORT $LN5@Read

; 88   : 			{
; 89   : 				Token = GetToken();

  00074	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 
; 91   : 				if(!strcmp("end", TokenString))

  00079	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL23@Read:
  00083	8a 10		 mov	 dl, BYTE PTR [eax]
  00085	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00087	75 1a		 jne	 SHORT $LN24@Read
  00089	84 d2		 test	 dl, dl
  0008b	74 12		 je	 SHORT $LN25@Read
  0008d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00090	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00093	75 0e		 jne	 SHORT $LN24@Read
  00095	83 c0 02	 add	 eax, 2
  00098	83 c1 02	 add	 ecx, 2
  0009b	84 d2		 test	 dl, dl
  0009d	75 e4		 jne	 SHORT $LL23@Read
$LN25@Read:
  0009f	33 c0		 xor	 eax, eax
  000a1	eb 05		 jmp	 SHORT $LN26@Read
$LN24@Read:
  000a3	1b c0		 sbb	 eax, eax
  000a5	83 d8 ff	 sbb	 eax, -1
$LN26@Read:
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 33 01 00
	00		 je	 $LN19@Read

; 92   : 				{
; 93   : 					break;
; 94   : 				}
; 95   : 
; 96   : 				this->m_Enable = (int)TokenNumber;

  000b0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b6	e8 00 00 00 00	 call	 __ftol2_sse
  000bb	89 06		 mov	 DWORD PTR [esi], eax
  000bd	eb b1		 jmp	 SHORT $LL7@Read
$LN5@Read:

; 97   : 			}
; 98   : 			else if(iType == 1)

  000bf	3b df		 cmp	 ebx, edi
  000c1	75 ad		 jne	 SHORT $LL7@Read

; 99   : 			{
; 100  : 				Token = GetToken();

  000c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 
; 102  : 				if(!strcmp("end", TokenString))

  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000cd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL27@Read:
  000d2	8a 10		 mov	 dl, BYTE PTR [eax]
  000d4	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000d6	75 1a		 jne	 SHORT $LN28@Read
  000d8	84 d2		 test	 dl, dl
  000da	74 12		 je	 SHORT $LN29@Read
  000dc	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000df	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000e2	75 0e		 jne	 SHORT $LN28@Read
  000e4	83 c0 02	 add	 eax, 2
  000e7	83 c1 02	 add	 ecx, 2
  000ea	84 d2		 test	 dl, dl
  000ec	75 e4		 jne	 SHORT $LL27@Read
$LN29@Read:
  000ee	33 c0		 xor	 eax, eax
  000f0	eb 05		 jmp	 SHORT $LN30@Read
$LN28@Read:
  000f2	1b c0		 sbb	 eax, eax
  000f4	83 d8 ff	 sbb	 eax, -1
$LN30@Read:
  000f7	85 c0		 test	 eax, eax
  000f9	0f 84 e4 00 00
	00		 je	 $LN19@Read

; 103  : 				{
; 104  : 					break;
; 105  : 				}
; 106  : 
; 107  : 				this->m_Info[this->m_LoadCount].Class = TokenNumber;

  000ff	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00105	e8 00 00 00 00	 call	 __ftol2_sse
  0010a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0010d	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  00114	2b d1		 sub	 edx, ecx
  00116	89 44 96 10	 mov	 DWORD PTR [esi+edx*4+16], eax

; 108  : 
; 109  : 				Token = GetToken();

  0011a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 110  : 				this->m_Info[this->m_LoadCount].MapNumber = TokenNumber;

  0011f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00125	e8 00 00 00 00	 call	 __ftol2_sse
  0012a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0012d	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  00134	2b d1		 sub	 edx, ecx
  00136	89 44 96 14	 mov	 DWORD PTR [esi+edx*4+20], eax

; 111  : 
; 112  : 				Token = GetToken();

  0013a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 113  : 				this->m_Info[this->m_LoadCount].MapX = TokenNumber;

  0013f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00145	e8 00 00 00 00	 call	 __ftol2_sse
  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  00154	2b d1		 sub	 edx, ecx
  00156	89 44 96 18	 mov	 DWORD PTR [esi+edx*4+24], eax

; 114  : 
; 115  : 				Token = GetToken();

  0015a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 116  : 				this->m_Info[this->m_LoadCount].MapY = TokenNumber;

  0015f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00165	e8 00 00 00 00	 call	 __ftol2_sse
  0016a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0016d	03 cf		 add	 ecx, edi
  0016f	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  00176	2b d1		 sub	 edx, ecx
  00178	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax

; 117  : 
; 118  : 				Token = GetToken();

  0017b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 				this->m_Info[this->m_LoadCount].Day = TokenNumber;

  00180	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00186	e8 00 00 00 00	 call	 __ftol2_sse
  0018b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0018e	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  00195	2b d1		 sub	 edx, ecx
  00197	89 44 96 20	 mov	 DWORD PTR [esi+edx*4+32], eax

; 120  : 
; 121  : 				Token = GetToken();

  0019b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 				this->m_Info[this->m_LoadCount].Hour = TokenNumber;

  001a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a6	e8 00 00 00 00	 call	 __ftol2_sse
  001ab	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ae	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  001b5	2b d1		 sub	 edx, ecx
  001b7	89 44 96 24	 mov	 DWORD PTR [esi+edx*4+36], eax

; 123  : 
; 124  : 				Token = GetToken();

  001bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 				this->m_Info[this->m_LoadCount].Minute = TokenNumber;

  001c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c6	e8 00 00 00 00	 call	 __ftol2_sse
  001cb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ce	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  001d5	2b d1		 sub	 edx, ecx
  001d7	89 44 96 28	 mov	 DWORD PTR [esi+edx*4+40], eax

; 126  : 
; 127  : 				this->m_LoadCount++;

  001db	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 128  : 			}
; 129  : 		}

  001de	e9 8d fe ff ff	 jmp	 $LL7@Read
$LN19@Read:

; 62   : 		return;
; 63   : 	}
; 64   : 
; 65   : 	SMDToken Token;
; 66   : 
; 67   : 	int iType = -1;
; 68   : 
; 69   : 	while(true)
; 70   : 	{
; 71   : 		Token = GetToken();

  001e3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 
; 73   :         if(Token == END)

  001e8	83 f8 02	 cmp	 eax, 2
  001eb	0f 85 64 fe ff
	ff		 jne	 $LL12@Read
$LN31@Read:
  001f1	8b 5d 08	 mov	 ebx, DWORD PTR _filename$[ebp]
$LN21@Read:

; 130  : 	}
; 131  : 
; 132  : 	fclose(SMDFile);

  001f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 _fclose

; 133  : 
; 134  : 	LogAdd("%s file load!", filename);

  001ff	53		 push	 ebx
  00200	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 135  : 
; 136  : 	this->m_Loaded = 1;

  0020e	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00211	5f		 pop	 edi
  00212	5e		 pop	 esi
  00213	5b		 pop	 ebx

; 137  : }

  00214	5d		 pop	 ebp
  00215	c2 04 00	 ret	 4
?Read@CMonsterTime@@QAEXPAD@Z ENDP			; CMonsterTime::Read
_TEXT	ENDS
PUBLIC	??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ ; `string'
PUBLIC	??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ ; `string'
PUBLIC	??_C@_0BA@OICDFJMI@MonsterTime?4cpp?$AA@	; `string'
PUBLIC	?GetMonsterPos@CMonsterTime@@QAEHGEEE@Z		; CMonsterTime::GetMonsterPos
EXTRN	_rand:PROC
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?CheckMapCanMove@CMapServerManager@@QAEHH@Z:PROC ; CMapServerManager::CheckMapCanMove
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
;	COMDAT ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
CONST	SEGMENT
??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@ DB '[Atta'
	DB	'ckerAdd] No need to load monster for map %d [%d,%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@ DB 'Monst'
	DB	'er attribute max over %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OICDFJMI@MonsterTime?4cpp?$AA@
CONST	SEGMENT
??_C@_0BA@OICDFJMI@MonsterTime?4cpp?$AA@ DB 'MonsterTime.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetMonsterPos@CMonsterTime@@QAEHGEEE@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 2
_Map$ = 12						; size = 1
_X$ = 16						; size = 1
_Y$ = 20						; size = 1
?GetMonsterPos@CMonsterTime@@QAEHGEEE@Z PROC		; CMonsterTime::GetMonsterPos, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 	if(gMSetBase.m_Count >= OBJ_MAXMONSTER-1)

  00003	81 3d 84 2c 03
	00 c7 32 00 00	 cmp	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, 12999 ; 000032c7H
  0000d	7c 1e		 jl	 SHORT $LN2@GetMonster

; 195  : 	{
; 196  : 		MsgBox("Monster attribute max over %s %d", __FILE__, __LINE__);

  0000f	68 c4 00 00 00	 push	 196			; 000000c4H
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OICDFJMI@MonsterTime?4cpp?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MPDJJDKE@Monster?5attribute?5max?5over?5?$CFs?5?$CFd@
  0001e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 197  : 		return -1;

  00026	83 c8 ff	 or	 eax, -1

; 218  : }

  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
$LN2@GetMonster:
  0002d	53		 push	 ebx

; 198  : 	}
; 199  : 
; 200  : 	if(g_MapServerManager.CheckMapCanMove(Map) == FALSE)

  0002e	8a 5d 0c	 mov	 bl, BYTE PTR _Map$[ebp]
  00031	56		 push	 esi
  00032	0f b6 f3	 movzx	 esi, bl
  00035	56		 push	 esi
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0003b	e8 00 00 00 00	 call	 ?CheckMapCanMove@CMapServerManager@@QAEHH@Z ; CMapServerManager::CheckMapCanMove
  00040	85 c0		 test	 eax, eax
  00042	75 29		 jne	 SHORT $LN1@GetMonster

; 201  : 	{
; 202  : 		LogAddC(3,"[AttackerAdd] No need to load monster for map %d [%d,%d,%d]",Map,Type,X,Y);

  00044	0f b6 45 14	 movzx	 eax, BYTE PTR _Y$[ebp]
  00048	0f b6 4d 10	 movzx	 ecx, BYTE PTR _X$[ebp]
  0004c	0f b7 55 08	 movzx	 edx, WORD PTR _Type$[ebp]
  00050	50		 push	 eax
  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	56		 push	 esi
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@OINGDCBK@?$FLAttackerAdd?$FN?5No?5need?5to?5load?5mo@
  00059	6a 03		 push	 3
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00061	83 c4 18	 add	 esp, 24			; 00000018H
  00064	5e		 pop	 esi

; 203  : 		return -1;

  00065	83 c8 ff	 or	 eax, -1
  00068	5b		 pop	 ebx

; 218  : }

  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
$LN1@GetMonster:

; 204  : 	}
; 205  : 
; 206  : 	gMSetBase.m_Count++;

  0006d	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004

; 207  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dis			= 5;
; 208  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Type		= Type;

  00072	66 8b 4d 08	 mov	 cx, WORD PTR _Type$[ebp]
  00076	40		 inc	 eax
  00077	a3 84 2c 03 00	 mov	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004, eax
  0007c	c1 e0 04	 shl	 eax, 4
  0007f	c6 80 09 00 00
	00 05		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+9], 5
  00086	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0008b	c1 e0 04	 shl	 eax, 4
  0008e	66 89 88 06 00
	00 00		 mov	 WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+6], cx

; 209  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_MapNumber	= Map;

  00095	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004

; 210  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_W			= X;

  0009b	8a 45 10	 mov	 al, BYTE PTR _X$[ebp]
  0009e	c1 e2 04	 shl	 edx, 4
  000a1	88 9a 08 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+8], bl
  000a7	8b 0d 84 2c 03
	00		 mov	 ecx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000ad	c1 e1 04	 shl	 ecx, 4
  000b0	88 81 0d 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[ecx+13], al

; 211  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_H			= Y;

  000b6	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000bc	8a 4d 14	 mov	 cl, BYTE PTR _Y$[ebp]
  000bf	c1 e2 04	 shl	 edx, 4
  000c2	88 8a 0e 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+14], cl

; 212  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_X			= X;

  000c8	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000ce	c1 e2 04	 shl	 edx, 4
  000d1	88 82 0a 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+10], al

; 213  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Y			= Y;

  000d7	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000dc	c1 e0 04	 shl	 eax, 4
  000df	88 88 0b 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax+11], cl

; 214  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_ArrangeType = 0;

  000e5	8b 0d 84 2c 03
	00		 mov	 ecx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  000eb	c1 e1 04	 shl	 ecx, 4
  000ee	c6 81 04 00 00
	00 00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[ecx+4], 0

; 215  : 	gMSetBase.m_Mp[gMSetBase.m_Count].m_Dir			= rand() % 8;

  000f5	e8 00 00 00 00	 call	 _rand
  000fa	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000ff	79 05		 jns	 SHORT $LN7@GetMonster
  00101	48		 dec	 eax
  00102	83 c8 f8	 or	 eax, -8			; fffffff8H
  00105	40		 inc	 eax
$LN7@GetMonster:
  00106	8b 15 84 2c 03
	00		 mov	 edx, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0010c	c1 e2 04	 shl	 edx, 4
  0010f	5e		 pop	 esi
  00110	88 82 0c 00 00
	00		 mov	 BYTE PTR ?gMSetBase@@3VCMonsterSetBase@@A[edx+12], al

; 216  : 
; 217  : 	return gMSetBase.m_Count;

  00116	a1 84 2c 03 00	 mov	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+208004
  0011b	5b		 pop	 ebx

; 218  : }

  0011c	5d		 pop	 ebp
  0011d	c2 10 00	 ret	 16			; 00000010H
?GetMonsterPos@CMonsterTime@@QAEHGEEE@Z ENDP		; CMonsterTime::GetMonsterPos
_TEXT	ENDS
PUBLIC	??_C@_0BA@OKOLABGC@Attack?5?$CFs?5in?5?$CFs?$AA@ ; `string'
PUBLIC	_Map$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddMonster@CMonsterTime@@QAEXHH@Z		; CMonsterTime::AddMonster
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	_sprintf:PROC
EXTRN	?ztMapName@@YAPADH@Z:PROC			; ztMapName
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0BA@OKOLABGC@Attack?5?$CFs?5in?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BA@OKOLABGC@Attack?5?$CFs?5in?5?$CFs?$AA@ DB 'Attack %s in %s', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AddMonster@CMonsterTime@@QAEXHH@Z
_TEXT	SEGMENT
_Map$GSCopy$ = -136					; size = 4
_szMsg$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_Num$ = 8						; size = 4
_Map$ = 12						; size = 4
?AddMonster@CMonsterTime@@QAEXHH@Z PROC			; CMonsterTime::AddMonster, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _Map$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _Num$[ebp]

; 222  : 	int iMobIndex = gObjAddMonster(Map);

  0001b	50		 push	 eax
  0001c	8b d9		 mov	 ebx, ecx

; 223  : 
; 224  : 	if(iMobIndex < 0 || iMobIndex > OBJ_MAXMONSTER)
; 225  : 	{
; 226  : 		return;
; 227  : 	}
; 228  : 
; 229  : 	this->m_Data[Num].Index = iMobIndex;

  0001e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _Map$GSCopy$[ebp], eax
  00024	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00029	98		 cwde
  0002a	83 c4 04	 add	 esp, 4
  0002d	3d c8 32 00 00	 cmp	 eax, 13000		; 000032c8H
  00032	77 78		 ja	 SHORT $LN1@AddMonster
  00034	8d 8c 76 c1 02
	00 00		 lea	 ecx, DWORD PTR [esi+esi*2+705]

; 230  : 
; 231  : 	gObjSetPosMonster(this->m_Data[Num].Index, this->m_Data[Num].Pos);

  0003b	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  0003e	57		 push	 edi
  0003f	8d 3c 8b	 lea	 edi, DWORD PTR [ebx+ecx*4]
  00042	8b 8c 93 08 0b
	00 00		 mov	 ecx, DWORD PTR [ebx+edx*4+2824]
  00049	8d 34 93	 lea	 esi, DWORD PTR [ebx+edx*4]
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	89 07		 mov	 DWORD PTR [edi], eax
  00050	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 232  : 	gObjSetMonster(this->m_Data[Num].Index, this->m_Data[Num].Class);

  00055	8b 96 00 0b 00
	00		 mov	 edx, DWORD PTR [esi+2816]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	52		 push	 edx
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 233  : 
; 234  : 	LPMONSTER_ATTRIBUTE lpMonsterAttr = gMAttr.GetAttr(this->m_Data[Num].Class);

  00064	8b 8e 00 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2816]
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	51		 push	 ecx
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  00073	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 235  : 
; 236  : 	char szMsg[128];
; 237  : 	sprintf(szMsg, "Attack %s in %s", lpMonsterAttr->m_Name, ztMapName(Map));

  00078	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _Map$GSCopy$[ebp]
  0007e	52		 push	 edx
  0007f	8b f0		 mov	 esi, eax
  00081	e8 00 00 00 00	 call	 ?ztMapName@@YAPADH@Z	; ztMapName
  00086	50		 push	 eax
  00087	83 c6 08	 add	 esi, 8
  0008a	56		 push	 esi
  0008b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szMsg$[ebp]
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OKOLABGC@Attack?5?$CFs?5in?5?$CFs?$AA@
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _sprintf

; 238  : 	AllSendServerMsg(szMsg);

  0009c	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _szMsg$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  000a8	83 c4 18	 add	 esp, 24			; 00000018H
  000ab	5f		 pop	 edi
$LN1@AddMonster:

; 239  : }

  000ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000af	5e		 pop	 esi
  000b0	33 cd		 xor	 ecx, ebp
  000b2	5b		 pop	 ebx
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?AddMonster@CMonsterTime@@QAEXHH@Z ENDP			; CMonsterTime::AddMonster
_TEXT	ENDS
PUBLIC	??_C@_0BD@PMPJDMDG@?$CFs?5killed?5?$CFs?5in?5?$CFs?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DieMonster@CMonsterTime@@QAEXHH@Z		; CMonsterTime::DieMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?ProccessItemDrop@cBossRewardItem@@QAE_NPAUOBJECTSTRUCT@@@Z:PROC ; cBossRewardItem::ProccessItemDrop
EXTRN	?gBossRewardItem@@3VcBossRewardItem@@A:BYTE	; gBossRewardItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0BD@PMPJDMDG@?$CFs?5killed?5?$CFs?5in?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@PMPJDMDG@?$CFs?5killed?5?$CFs?5in?5?$CFs?$AA@ DB '%s killed %s '
	DB	'in %s', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DieMonster@CMonsterTime@@QAEXHH@Z
_TEXT	SEGMENT
_lpUser$ = -140						; size = 4
_this$GSCopy$ = -136					; size = 4
_szMsg$210160 = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aMonsterIndex$ = 12					; size = 4
?DieMonster@CMonsterTime@@QAEXHH@Z PROC			; CMonsterTime::DieMonster, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00016	8b 55 0c	 mov	 edx, DWORD PTR _aMonsterIndex$[ebp]
  00019	53		 push	 ebx
  0001a	8b d9		 mov	 ebx, ecx

; 243  : 	if(!this->m_Enable)

  0001c	83 3b 00	 cmp	 DWORD PTR [ebx], 0

; 259  : 		{
; 260  : 			LPMONSTER_ATTRIBUTE lpMonsterAttr = gMAttr.GetAttr(lpMonster->Class);

  0001f	89 9d 78 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00025	0f 84 00 01 00
	00		 je	 $LN6@DieMonster

; 244  : 	{
; 245  : 		return;
; 246  : 	}
; 247  : 
; 248  : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aMonsterIndex))

  0002b	85 c0		 test	 eax, eax
  0002d	0f 88 f8 00 00
	00		 js	 $LN6@DieMonster
  00033	33 c9		 xor	 ecx, ecx
  00035	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0003a	0f 9e c1	 setle	 cl
  0003d	85 c9		 test	 ecx, ecx
  0003f	0f 84 e6 00 00
	00		 je	 $LN6@DieMonster
  00045	85 d2		 test	 edx, edx
  00047	0f 88 de 00 00
	00		 js	 $LN6@DieMonster
  0004d	33 c9		 xor	 ecx, ecx
  0004f	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  00055	0f 9e c1	 setle	 cl
  00058	85 c9		 test	 ecx, ecx
  0005a	0f 84 cb 00 00
	00		 je	 $LN6@DieMonster

; 249  : 	{
; 250  : 		return;
; 251  : 	}
; 252  : 
; 253  : 	LPOBJ lpUser = &gObj[aIndex];

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00066	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0006c	56		 push	 esi

; 254  : 	LPOBJ lpMonster = &gObj[aMonsterIndex];

  0006d	8b f2		 mov	 esi, edx
  0006f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00075	03 c1		 add	 eax, ecx
  00077	57		 push	 edi
  00078	89 85 74 ff ff
	ff		 mov	 DWORD PTR _lpUser$[ebp], eax
  0007e	03 f1		 add	 esi, ecx

; 255  : 
; 256  : 	for(int i = 0; i < MAX_MONSTERTIME; i++)

  00080	33 ff		 xor	 edi, edi
  00082	8d 83 04 0b 00
	00		 lea	 eax, DWORD PTR [ebx+2820]
$LL5@DieMonster:

; 257  : 	{
; 258  : 		if(aMonsterIndex == this->m_Data[i].Index)

  00088	3b 10		 cmp	 edx, DWORD PTR [eax]
  0008a	74 1c		 je	 SHORT $LN16@DieMonster

; 255  : 
; 256  : 	for(int i = 0; i < MAX_MONSTERTIME; i++)

  0008c	47		 inc	 edi
  0008d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00090	83 ff 64	 cmp	 edi, 100		; 00000064H
  00093	7c f3		 jl	 SHORT $LL5@DieMonster
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 272  : 			
; 273  : 			return;
; 274  : 		}
; 275  : 	}
; 276  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 08 00	 ret	 8
$LN16@DieMonster:

; 259  : 		{
; 260  : 			LPMONSTER_ATTRIBUTE lpMonsterAttr = gMAttr.GetAttr(lpMonster->Class);

  000a8	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  000af	50		 push	 eax
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  000b5	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 261  : 
; 262  : 			char szMsg[128];
; 263  : 			sprintf(szMsg, "%s killed %s in %s", lpMonsterAttr->m_Name, lpUser->Name, ztMapName(lpMonster->MapNumber));

  000ba	0f b6 8e 49 01
	00 00		 movzx	 ecx, BYTE PTR [esi+329]
  000c1	51		 push	 ecx
  000c2	8b d8		 mov	 ebx, eax
  000c4	e8 00 00 00 00	 call	 ?ztMapName@@YAPADH@Z	; ztMapName
  000c9	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _lpUser$[ebp]
  000cf	50		 push	 eax
  000d0	83 c2 77	 add	 edx, 119		; 00000077H
  000d3	52		 push	 edx
  000d4	83 c3 08	 add	 ebx, 8
  000d7	53		 push	 ebx
  000d8	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szMsg$210160[ebp]
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PMPJDMDG@?$CFs?5killed?5?$CFs?5in?5?$CFs?$AA@
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _sprintf

; 264  : 			AllSendServerMsg(szMsg);

  000e9	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _szMsg$210160[ebp]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  000f5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 265  : 
; 266  : #ifdef BOSS_REWARD_ITEM
; 267  : 			if(gBossRewardItem.ProccessItemDrop(lpMonster))

  000f8	56		 push	 esi
  000f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBossRewardItem@@3VcBossRewardItem@@A ; gBossRewardItem
  000fe	e8 00 00 00 00	 call	 ?ProccessItemDrop@cBossRewardItem@@QAE_NPAUOBJECTSTRUCT@@@Z ; cBossRewardItem::ProccessItemDrop
  00103	84 c0		 test	 al, al
  00105	75 22		 jne	 SHORT $LN18@DieMonster

; 268  : 				return;
; 269  : #endif
; 270  : 			gObjDel(this->m_Data[i].Index);

  00107	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0010d	8d 94 7f c1 02
	00 00		 lea	 edx, DWORD PTR [edi+edi*2+705]
  00114	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00117	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
  0011a	51		 push	 ecx
  0011b	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00120	83 c4 04	 add	 esp, 4

; 271  : 			this->m_Data[i].Index = -1;

  00123	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN18@DieMonster:
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
$LN6@DieMonster:

; 272  : 			
; 273  : 			return;
; 274  : 		}
; 275  : 	}
; 276  : }

  0012b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012e	33 cd		 xor	 ecx, ebp
  00130	5b		 pop	 ebx
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c2 08 00	 ret	 8
?DieMonster@CMonsterTime@@QAEXHH@Z ENDP			; CMonsterTime::DieMonster
_TEXT	ENDS
PUBLIC	?ReloadMonster@CMonsterTime@@QAEXXZ		; CMonsterTime::ReloadMonster
; Function compile flags: /Ogtp
;	COMDAT ?ReloadMonster@CMonsterTime@@QAEXXZ
_TEXT	SEGMENT
?ReloadMonster@CMonsterTime@@QAEXXZ PROC		; CMonsterTime::ReloadMonster, COMDAT
; _this$ = ecx

; 280  : 	//if(!this->m_Enable)
; 281  : 	//{
; 282  : 	//	return;
; 283  : 	//}
; 284  : 
; 285  : 	//for(int i = 0; i < MAX_MONSTERTIME; i++)
; 286  : 	//{
; 287  : 	//	if(this->m_Data[i].Index == -1)
; 288  : 	//	{
; 289  : 	//		continue;
; 290  : 	//	}
; 291  : 
; 292  : 	//	this->AddMonster(i, false);
; 293  : 	//}
; 294  : }

  00000	c3		 ret	 0
?ReloadMonster@CMonsterTime@@QAEXXZ ENDP		; CMonsterTime::ReloadMonster
_TEXT	ENDS
PUBLIC	??0CMonsterTime@@QAE@XZ				; CMonsterTime::CMonsterTime
; Function compile flags: /Ogtp
;	COMDAT ??0CMonsterTime@@QAE@XZ
_TEXT	SEGMENT
??0CMonsterTime@@QAE@XZ PROC				; CMonsterTime::CMonsterTime, COMDAT
; _this$ = ecx

; 17   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 18   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@CMonsterTime@@QAEXXZ ; CMonsterTime::Init

; 19   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0CMonsterTime@@QAE@XZ ENDP				; CMonsterTime::CMonsterTime
_TEXT	ENDS
PUBLIC	??_C@_0BH@CAGGFCIF@ZtData?2MonsterTime?4ini?$AA@ ; `string'
PUBLIC	?Load@CMonsterTime@@QAEXXZ			; CMonsterTime::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BH@CAGGFCIF@ZtData?2MonsterTime?4ini?$AA@
CONST	SEGMENT
??_C@_0BH@CAGGFCIF@ZtData?2MonsterTime?4ini?$AA@ DB 'ZtData\MonsterTime.i'
	DB	'ni', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CMonsterTime@@QAEXXZ
_TEXT	SEGMENT
?Load@CMonsterTime@@QAEXXZ PROC				; CMonsterTime::Load, COMDAT
; _this$ = ecx

; 38   : {

  00000	56		 push	 esi

; 39   : 	#if(!LICENSE_UKRAINE)
; 40   : 	if(this->m_Loaded)
; 41   : 	{
; 42   : 		return;
; 43   : 	}
; 44   : 	#endif
; 45   : 
; 46   : 	this->m_LoadCount = 0;

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 47   : 
; 48   : 	this->m_Loaded = 0;
; 49   : 
; 50   : 	memset(this->m_Info, 0, sizeof(this->m_Info));

  00005	68 f0 0a 00 00	 push	 2800			; 00000af0H
  0000a	50		 push	 eax
  0000b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00011	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   : 	this->Read(gDirPath.GetNewPath("ZtData\\MonsterTime.ini"));

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CAGGFCIF@ZtData?2MonsterTime?4ini?$AA@
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00027	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0002c	50		 push	 eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?Read@CMonsterTime@@QAEXPAD@Z ; CMonsterTime::Read
  00034	5e		 pop	 esi

; 53   : }

  00035	c3		 ret	 0
?Load@CMonsterTime@@QAEXXZ ENDP				; CMonsterTime::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Run@CMonsterTime@@QAEXXZ			; CMonsterTime::Run
EXTRN	?GetSecond@CTimerZt@@QAEHXZ:PROC		; CTimerZt::GetSecond
EXTRN	?g_TimerZt@@3VCTimerZt@@A:DWORD			; g_TimerZt
EXTRN	__imp__GetLocalTime@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Run@CMonsterTime@@QAEXXZ
_TEXT	SEGMENT
tv289 = -24						; size = 4
_systime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?Run@CMonsterTime@@QAEXXZ PROC				; CMonsterTime::Run, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 141  : 	if(!this->m_Enable)

  00013	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00016	74 7a		 je	 SHORT $LN6@Run

; 142  : 	{
; 143  : 		return;
; 144  : 	}
; 145  : 
; 146  : 	SYSTEMTIME systime;
; 147  : 	GetLocalTime(&systime);

  00018	57		 push	 edi
  00019	8d 45 ec	 lea	 eax, DWORD PTR _systime$[ebp]
  0001c	50		 push	 eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 148  : 
; 149  : 	for(int i = 0; i < this->m_LoadCount; i++)

  00023	33 ff		 xor	 edi, edi
  00025	39 7b 08	 cmp	 DWORD PTR [ebx+8], edi
  00028	7e 67		 jle	 SHORT $LN15@Run

; 142  : 	{
; 143  : 		return;
; 144  : 	}
; 145  : 
; 146  : 	SYSTEMTIME systime;
; 147  : 	GetLocalTime(&systime);

  0002a	8d 8b 04 0b 00
	00		 lea	 ecx, DWORD PTR [ebx+2820]
  00030	56		 push	 esi
  00031	89 4d e8	 mov	 DWORD PTR tv289[ebp], ecx
  00034	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
  00037	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL8@Run:

; 150  : 	{
; 151  : 		if(g_TimerZt.GetSecond() == 0)

  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TimerZt@@3VCTimerZt@@A ; g_TimerZt
  00045	e8 00 00 00 00	 call	 ?GetSecond@CTimerZt@@QAEHXZ ; CTimerZt::GetSecond
  0004a	85 c0		 test	 eax, eax
  0004c	75 35		 jne	 SHORT $LN7@Run

; 152  : 		{
; 153  : 			if(this->m_Info[i].Day == -1 || this->m_Info[i].Day == systime.wDay)

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	83 f8 ff	 cmp	 eax, -1
  00053	74 08		 je	 SHORT $LN3@Run
  00055	0f b7 55 f2	 movzx	 edx, WORD PTR _systime$[ebp+6]
  00059	3b c2		 cmp	 eax, edx
  0005b	75 26		 jne	 SHORT $LN7@Run
$LN3@Run:

; 154  : 			{
; 155  : 				if(this->m_Info[i].Hour == systime.wHour && this->m_Info[i].Minute == systime.wMinute)

  0005d	0f b7 45 f4	 movzx	 eax, WORD PTR _systime$[ebp+8]
  00061	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  00064	75 1d		 jne	 SHORT $LN7@Run
  00066	0f b7 4d f6	 movzx	 ecx, WORD PTR _systime$[ebp+10]
  0006a	39 4e 08	 cmp	 DWORD PTR [esi+8], ecx
  0006d	75 14		 jne	 SHORT $LN7@Run

; 156  : 				{
; 157  : 					if(this->m_Data[i].Index == -1)

  0006f	8b 55 e8	 mov	 edx, DWORD PTR tv289[ebp]
  00072	83 3a ff	 cmp	 DWORD PTR [edx], -1
  00075	75 0c		 jne	 SHORT $LN7@Run

; 158  : 					{
; 159  : 						this->AddMonster(i, this->m_Info[i].MapNumber);

  00077	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	8b cb		 mov	 ecx, ebx
  0007e	e8 00 00 00 00	 call	 ?AddMonster@CMonsterTime@@QAEXHH@Z ; CMonsterTime::AddMonster
$LN7@Run:

; 148  : 
; 149  : 	for(int i = 0; i < this->m_LoadCount; i++)

  00083	83 45 e8 0c	 add	 DWORD PTR tv289[ebp], 12 ; 0000000cH
  00087	47		 inc	 edi
  00088	83 c6 1c	 add	 esi, 28			; 0000001cH
  0008b	3b 7b 08	 cmp	 edi, DWORD PTR [ebx+8]
  0008e	7c b0		 jl	 SHORT $LL8@Run
  00090	5e		 pop	 esi
$LN15@Run:
  00091	5f		 pop	 edi
$LN6@Run:

; 160  : 					}
; 161  : 				}		
; 162  : 			}
; 163  : 		}
; 164  : 	}
; 165  : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	5b		 pop	 ebx
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?Run@CMonsterTime@@QAEXXZ ENDP				; CMonsterTime::Run
_TEXT	ENDS
PUBLIC	?LoadMonsterPos@CMonsterTime@@QAEXXZ		; CMonsterTime::LoadMonsterPos
; Function compile flags: /Ogtp
;	COMDAT ?LoadMonsterPos@CMonsterTime@@QAEXXZ
_TEXT	SEGMENT
_i$210114 = -4						; size = 4
?LoadMonsterPos@CMonsterTime@@QAEXXZ PROC		; CMonsterTime::LoadMonsterPos, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 169  : 	if(!this->m_Enable)

  00007	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0000a	74 65		 je	 SHORT $LN7@LoadMonste

; 170  : 	{
; 171  : 		return;
; 172  : 	}
; 173  : 
; 174  : 	for(int i = 0; i < this->m_LoadCount; i++)

  0000c	83 7b 08 00	 cmp	 DWORD PTR [ebx+8], 0
  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$210114[ebp], 0
  00017	7e 51		 jle	 SHORT $LN3@LoadMonste
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bb 04 0b 00
	00		 lea	 edi, DWORD PTR [ebx+2820]
  00021	8d 73 18	 lea	 esi, DWORD PTR [ebx+24]
$LL5@LoadMonste:

; 175  : 	{
; 176  : 		if(this->m_Data[i].Index == -1)

  00024	83 3f ff	 cmp	 DWORD PTR [edi], -1
  00027	75 2d		 jne	 SHORT $LN4@LoadMonste

; 177  : 		{
; 178  : 			int iPos = this->GetMonsterPos(this->m_Info[i].Class, this->m_Info[i].MapNumber, this->m_Info[i].MapX, this->m_Info[i].MapY);

  00029	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  0002d	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  00030	0f b6 56 fc	 movzx	 edx, BYTE PTR [esi-4]
  00034	50		 push	 eax
  00035	0f b7 46 f8	 movzx	 eax, WORD PTR [esi-8]
  00039	51		 push	 ecx
  0003a	52		 push	 edx
  0003b	50		 push	 eax
  0003c	8b cb		 mov	 ecx, ebx
  0003e	e8 00 00 00 00	 call	 ?GetMonsterPos@CMonsterTime@@QAEHGEEE@Z ; CMonsterTime::GetMonsterPos

; 179  : 
; 180  : 			if(iPos >= 0)

  00043	85 c0		 test	 eax, eax
  00045	78 0f		 js	 SHORT $LN4@LoadMonste

; 181  : 			{
; 182  : 				this->m_Data[i].Class = this->m_Info[i].Class;

  00047	8b 4e f8	 mov	 ecx, DWORD PTR [esi-8]
  0004a	89 4f fc	 mov	 DWORD PTR [edi-4], ecx

; 183  : 				this->m_Data[i].Index = -1;

  0004d	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1

; 184  : 				this->m_Data[i].Pos = iPos;

  00053	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN4@LoadMonste:

; 170  : 	{
; 171  : 		return;
; 172  : 	}
; 173  : 
; 174  : 	for(int i = 0; i < this->m_LoadCount; i++)

  00056	8b 45 fc	 mov	 eax, DWORD PTR _i$210114[ebp]
  00059	40		 inc	 eax
  0005a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0005d	83 c7 0c	 add	 edi, 12			; 0000000cH
  00060	89 45 fc	 mov	 DWORD PTR _i$210114[ebp], eax
  00063	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  00066	7c bc		 jl	 SHORT $LL5@LoadMonste
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
$LN3@LoadMonste:

; 185  : 			}
; 186  : 		}
; 187  : 	}
; 188  : 
; 189  : 	this->m_LoadPos = true;

  0006a	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [ebx+4], 1
$LN7@LoadMonste:
  00071	5b		 pop	 ebx

; 190  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?LoadMonsterPos@CMonsterTime@@QAEXXZ ENDP		; CMonsterTime::LoadMonsterPos
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MonsterTime@@YAXXZ
text$yc	SEGMENT
??__Eg_MonsterTime@@YAXXZ PROC				; `dynamic initializer for 'g_MonsterTime'', COMDAT

; 14   : CMonsterTime g_MonsterTime;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterTime@@3VCMonsterTime@@A ; g_MonsterTime
  00005	e8 00 00 00 00	 call	 ??0CMonsterTime@@QAE@XZ	; CMonsterTime::CMonsterTime
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterTime@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterTime''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MonsterTime@@YAXXZ ENDP				; `dynamic initializer for 'g_MonsterTime''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MonsterTime@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterTime@@YAXXZ PROC				; `dynamic atexit destructor for 'g_MonsterTime'', COMDAT
  00000	c3		 ret	 0
??__Fg_MonsterTime@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_MonsterTime''
text$yd	ENDS
PUBLIC	?g_MonsterTime@@3VCMonsterTime@@A		; g_MonsterTime
_BSS	SEGMENT
?g_MonsterTime@@3VCMonsterTime@@A DB 0fb0H DUP (?)	; g_MonsterTime
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MonsterTime$initializer$ DD FLAT:??__Eg_MonsterTime@@YAXXZ
CRT$XCU	ENDS
END
