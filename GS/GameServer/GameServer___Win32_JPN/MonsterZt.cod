; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MonsterZt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??0MonsterZt@@QAE@XZ				; MonsterZt::MonsterZt
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\monsterzt.cpp
;	COMDAT ??0MonsterZt@@QAE@XZ
_TEXT	SEGMENT
??0MonsterZt@@QAE@XZ PROC				; MonsterZt::MonsterZt, COMDAT
; _this$ = ecx

; 16   : {

  00000	8b c1		 mov	 eax, ecx

; 17   : }

  00002	c3		 ret	 0
??0MonsterZt@@QAE@XZ ENDP				; MonsterZt::MonsterZt
_TEXT	ENDS
PUBLIC	??1MonsterZt@@QAE@XZ				; MonsterZt::~MonsterZt
; Function compile flags: /Ogtp
;	COMDAT ??1MonsterZt@@QAE@XZ
_TEXT	SEGMENT
??1MonsterZt@@QAE@XZ PROC				; MonsterZt::~MonsterZt, COMDAT
; _this$ = ecx

; 22   : }

  00000	c3		 ret	 0
??1MonsterZt@@QAE@XZ ENDP				; MonsterZt::~MonsterZt
_TEXT	ENDS
PUBLIC	?Init@MonsterZt@@QAEXXZ				; MonsterZt::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@MonsterZt@@QAEXXZ
_TEXT	SEGMENT
?Init@MonsterZt@@QAEXXZ PROC				; MonsterZt::Init, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi

; 27   : 	ZeroMemory(this->mobdata,sizeof(this->mobdata));

  00001	68 00 30 00 00	 push	 12288			; 00003000H
  00006	8b f1		 mov	 esi, ecx
  00008	6a 00		 push	 0
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _memset
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 28   : 
; 29   : 	this->mobLoaded = 0;

  00013	c7 86 00 30 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+12288], 0
  0001d	5e		 pop	 esi

; 30   : }

  0001e	c3		 ret	 0
?Init@MonsterZt@@QAEXXZ ENDP				; MonsterZt::Init
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Read@MonsterZt@@QAEXPAD@Z			; MonsterZt::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@MonsterZt@@QAEXPAD@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
?Read@MonsterZt@@QAEXPAD@Z PROC				; MonsterZt::Read, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 48   : 	SMDFile = fopen(File, "r");

  00005	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000d	57		 push	 edi
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8
  00018	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 49   : 
; 50   : 	if( SMDFile == NULL )

  0001d	85 c0		 test	 eax, eax
  0001f	75 20		 jne	 SHORT $LN8@Read

; 51   : 	{
; 52   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), File);

  00021	57		 push	 edi
  00022	68 c6 01 00 00	 push	 454			; 000001c6H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 08	 add	 esp, 8
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 95   : 	return;
; 96   : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN8@Read:

; 53   : 		return;
; 54   : 	}
; 55   : 
; 56   : 	int Token;
; 57   : 	int type = -1;
; 58   : 
; 59   : 	while ( true )
; 60   : 	{
; 61   : 	    Token = GetToken();

  00041	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 62   : 
; 63   :         if( Token == END )

  00046	83 f8 02	 cmp	 eax, 2
  00049	0f 84 ba 00 00
	00		 je	 $LN16@Read
  0004f	bf 01 00 00 00	 mov	 edi, 1
  00054	53		 push	 ebx
$LL7@Read:

; 64   : 		{
; 65   :             break;
; 66   : 		}
; 67   : 
; 68   : 		type = (int)TokenNumber;

  00055	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0005b	e8 00 00 00 00	 call	 __ftol2_sse
  00060	8b d8		 mov	 ebx, eax
$LL4@Read:

; 69   : 
; 70   : 		while ( true )
; 71   : 		{
; 72   : 			if ( type == 0 )

  00062	85 db		 test	 ebx, ebx
  00064	75 fc		 jne	 SHORT $LL4@Read

; 73   : 			{
; 74   : 				Token = GetToken();

  00066	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 75   : 
; 76   : 				if ( strcmp("end", TokenString) == 0 )

  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00070	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL17@Read:
  00075	8a 10		 mov	 dl, BYTE PTR [eax]
  00077	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00079	75 1a		 jne	 SHORT $LN18@Read
  0007b	84 d2		 test	 dl, dl
  0007d	74 12		 je	 SHORT $LN19@Read
  0007f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00082	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00085	75 0e		 jne	 SHORT $LN18@Read
  00087	83 c0 02	 add	 eax, 2
  0008a	83 c1 02	 add	 ecx, 2
  0008d	84 d2		 test	 dl, dl
  0008f	75 e4		 jne	 SHORT $LL17@Read
$LN19@Read:
  00091	33 c0		 xor	 eax, eax
  00093	eb 05		 jmp	 SHORT $LN20@Read
$LN18@Read:
  00095	1b c0		 sbb	 eax, eax
  00097	83 d8 ff	 sbb	 eax, -1
$LN20@Read:
  0009a	85 c0		 test	 eax, eax
  0009c	74 5c		 je	 SHORT $LN15@Read

; 77   : 				{
; 78   : 					break;
; 79   : 				}
; 80   : 
; 81   : 				this->mobdata[this->mobLoaded].id = TokenNumber;

  0009e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a4	e8 00 00 00 00	 call	 __ftol2_sse
  000a9	8b 8e 00 30 00
	00		 mov	 ecx, DWORD PTR [esi+12288]
  000af	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  000b2	89 04 8e	 mov	 DWORD PTR [esi+ecx*4], eax

; 82   : 
; 83   : 				Token = GetToken();

  000b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 84   : 				this->mobdata[this->mobLoaded].map = TokenNumber;

  000ba	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c0	e8 00 00 00 00	 call	 __ftol2_sse
  000c5	8b 8e 00 30 00
	00		 mov	 ecx, DWORD PTR [esi+12288]
  000cb	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  000ce	89 44 96 04	 mov	 DWORD PTR [esi+edx*4+4], eax

; 85   : 
; 86   : 				Token = GetToken();

  000d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 87   : 				this->mobdata[this->mobLoaded].AttackDiv = TokenNumber;

  000d7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000dd	e8 00 00 00 00	 call	 __ftol2_sse
  000e2	8b 8e 00 30 00
	00		 mov	 ecx, DWORD PTR [esi+12288]
  000e8	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  000eb	89 44 8e 08	 mov	 DWORD PTR [esi+ecx*4+8], eax

; 88   : 
; 89   : 				this->mobLoaded++;

  000ef	01 be 00 30 00
	00		 add	 DWORD PTR [esi+12288], edi

; 90   : 			}    
; 91   : 		}

  000f5	e9 68 ff ff ff	 jmp	 $LL4@Read
$LN15@Read:

; 53   : 		return;
; 54   : 	}
; 55   : 
; 56   : 	int Token;
; 57   : 	int type = -1;
; 58   : 
; 59   : 	while ( true )
; 60   : 	{
; 61   : 	    Token = GetToken();

  000fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 62   : 
; 63   :         if( Token == END )

  000ff	83 f8 02	 cmp	 eax, 2
  00102	0f 85 4d ff ff
	ff		 jne	 $LL7@Read
  00108	5b		 pop	 ebx
$LN16@Read:

; 92   :     }
; 93   : 
; 94   : 	fclose(SMDFile);

  00109	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 _fclose
  00115	83 c4 04	 add	 esp, 4
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi

; 95   : 	return;
; 96   : }

  0011a	5d		 pop	 ebp
  0011b	c2 04 00	 ret	 4
?Read@MonsterZt@@QAEXPAD@Z ENDP				; MonsterZt::Read
_TEXT	ENDS
PUBLIC	?AttackMonster@MonsterZt@@QAEXHHAAH@Z		; MonsterZt::AttackMonster
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedZt@@YA_NH@Z:PROC		; gObjIsConnectedZt
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
;	COMDAT ?AttackMonster@MonsterZt@@QAEXHHAAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpUser$ = 8						; size = 4
_aUserIndex$ = 8					; size = 4
_aMonsterIndex$ = 12					; size = 4
_AttackDamage$ = 16					; size = 4
?AttackMonster@MonsterZt@@QAEXHHAAH@Z PROC		; MonsterZt::AttackMonster, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 101  : 	if(!g_ZtLicense.user.MonsterAttackLife)

  00004	80 3d e8 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+232, 0
  0000b	53		 push	 ebx
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx
  00011	0f 84 e3 00 00
	00		 je	 $LN10@AttackMons

; 102  : 	{
; 103  : 		return;
; 104  : 	}
; 105  : 
; 106  : 	if(!OBJMAX_RANGE(aUserIndex) || !OBJMAX_RANGE(aMonsterIndex))

  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _aUserIndex$[ebp]
  0001b	85 ff		 test	 edi, edi
  0001d	0f 88 d6 00 00
	00		 js	 $LN23@AttackMons
  00023	33 c0		 xor	 eax, eax
  00025	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  0002b	0f 9e c0	 setle	 al
  0002e	85 c0		 test	 eax, eax
  00030	0f 84 c3 00 00
	00		 je	 $LN23@AttackMons
  00036	56		 push	 esi
  00037	8b 75 0c	 mov	 esi, DWORD PTR _aMonsterIndex$[ebp]
  0003a	85 f6		 test	 esi, esi
  0003c	0f 88 b6 00 00
	00		 js	 $LN24@AttackMons
  00042	33 c0		 xor	 eax, eax
  00044	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  0004a	0f 9e c0	 setle	 al
  0004d	85 c0		 test	 eax, eax
  0004f	0f 84 a3 00 00
	00		 je	 $LN24@AttackMons

; 107  : 	{
; 108  : 		return;
; 109  : 	}
; 110  : 
; 111  : 	if(!gObjIsConnectedZt(aUserIndex))

  00055	57		 push	 edi
  00056	e8 00 00 00 00	 call	 ?gObjIsConnectedZt@@YA_NH@Z ; gObjIsConnectedZt
  0005b	83 c4 04	 add	 esp, 4
  0005e	84 c0		 test	 al, al
  00060	0f 84 92 00 00
	00		 je	 $LN24@AttackMons

; 112  : 	{
; 113  : 		return;
; 114  : 	}
; 115  : 
; 116  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006b	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H

; 117  : 	LPOBJ lpMonster = &gObj[aMonsterIndex];

  00071	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00077	03 f8		 add	 edi, eax
  00079	89 7d 08	 mov	 DWORD PTR _lpUser$[ebp], edi
  0007c	8d 3c 30	 lea	 edi, DWORD PTR [eax+esi]

; 118  : 
; 119  : 	if(lpMonster->Type != OBJ_NPC && lpMonster->Type != OBJ_MONSTER)

  0007f	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  00083	83 f8 03	 cmp	 eax, 3
  00086	74 05		 je	 SHORT $LN8@AttackMons
  00088	83 f8 02	 cmp	 eax, 2
  0008b	75 6b		 jne	 SHORT $LN24@AttackMons
$LN8@AttackMons:
  0008d	8b b3 00 30 00
	00		 mov	 esi, DWORD PTR [ebx+12288]

; 120  : 	{
; 121  : 		return;
; 122  : 	}
; 123  : 
; 124  : 	for(int i = 0; i < this->mobLoaded; i++)

  00093	33 c9		 xor	 ecx, ecx
  00095	85 f6		 test	 esi, esi
  00097	7e 5f		 jle	 SHORT $LN24@AttackMons
  00099	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009c	8d 64 24 00	 npad	 4
$LL7@AttackMons:

; 125  : 	{
; 126  : 		if(this->mobdata[i].map == -1 || this->mobdata[i].map == lpMonster->MapNumber)

  000a0	8b 10		 mov	 edx, DWORD PTR [eax]
  000a2	83 fa ff	 cmp	 edx, -1
  000a5	74 0b		 je	 SHORT $LN3@AttackMons
  000a7	0f b6 9f 49 01
	00 00		 movzx	 ebx, BYTE PTR [edi+329]
  000ae	3b d3		 cmp	 edx, ebx
  000b0	75 12		 jne	 SHORT $LN6@AttackMons
$LN3@AttackMons:

; 127  : 		{
; 128  : 			if(this->mobdata[i].id == lpMonster->Class)

  000b2	0f b7 97 b8 00
	00 00		 movzx	 edx, WORD PTR [edi+184]
  000b9	39 50 fc	 cmp	 DWORD PTR [eax-4], edx
  000bc	75 06		 jne	 SHORT $LN6@AttackMons

; 129  : 			{
; 130  : 				if(this->mobdata[i].AttackDiv > 0)

  000be	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000c2	7f 11		 jg	 SHORT $LN20@AttackMons
$LN6@AttackMons:

; 120  : 	{
; 121  : 		return;
; 122  : 	}
; 123  : 
; 124  : 	for(int i = 0; i < this->mobLoaded; i++)

  000c4	41		 inc	 ecx
  000c5	83 c0 0c	 add	 eax, 12			; 0000000cH
  000c8	3b ce		 cmp	 ecx, esi
  000ca	7c d4		 jl	 SHORT $LL7@AttackMons
  000cc	5e		 pop	 esi
  000cd	5f		 pop	 edi
  000ce	5b		 pop	 ebx

; 133  : 					return;
; 134  : 				}			
; 135  : 			}
; 136  : 		}
; 137  : 	}
; 138  : }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
$LN20@AttackMons:

; 131  : 				{
; 132  : 					AttackDamage = ( lpUser->MaxLife + lpUser->AddLife ) / this->mobdata[i].AttackDiv;

  000d5	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  000d8	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  000de	d8 80 00 01 00
	00		 fadd	 DWORD PTR [eax+256]
  000e4	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	da 74 81 08	 fidiv	 DWORD PTR [ecx+eax*4+8]
  000ee	e8 00 00 00 00	 call	 __ftol2_sse
  000f3	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  000f6	89 02		 mov	 DWORD PTR [edx], eax
$LN24@AttackMons:
  000f8	5e		 pop	 esi
$LN23@AttackMons:
  000f9	5f		 pop	 edi
$LN10@AttackMons:
  000fa	5b		 pop	 ebx

; 133  : 					return;
; 134  : 				}			
; 135  : 			}
; 136  : 		}
; 137  : 	}
; 138  : }

  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 0c 00	 ret	 12			; 0000000cH
?AttackMonster@MonsterZt@@QAEXHHAAH@Z ENDP		; MonsterZt::AttackMonster
_TEXT	ENDS
PUBLIC	??_C@_0BF@BBIGIMD@ZtData?2MonsterZt?4ini?$AA@	; `string'
PUBLIC	?Load@MonsterZt@@QAEXXZ				; MonsterZt::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BF@BBIGIMD@ZtData?2MonsterZt?4ini?$AA@
CONST	SEGMENT
??_C@_0BF@BBIGIMD@ZtData?2MonsterZt?4ini?$AA@ DB 'ZtData\MonsterZt.ini', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@MonsterZt@@QAEXXZ
_TEXT	SEGMENT
?Load@MonsterZt@@QAEXXZ PROC				; MonsterZt::Load, COMDAT
; _this$ = ecx

; 34   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 35   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@MonsterZt@@QAEXXZ	; MonsterZt::Init

; 36   : 
; 37   : 	if(!g_ZtLicense.user.MonsterAttackLife)

  00008	80 3d e8 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+232, 0
  0000f	74 17		 je	 SHORT $LN2@Load

; 38   : 	{
; 39   : 		return;
; 40   : 	}
; 41   : 	
; 42   : 	this->Read(gDirPath.GetNewPath("ZtData\\MonsterZt.ini"));

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BBIGIMD@ZtData?2MonsterZt?4ini?$AA@
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0001b	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00020	50		 push	 eax
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?Read@MonsterZt@@QAEXPAD@Z ; MonsterZt::Read
$LN2@Load:
  00028	5e		 pop	 esi

; 43   : }

  00029	c3		 ret	 0
?Load@MonsterZt@@QAEXXZ ENDP				; MonsterZt::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MonsterZt@@YAXXZ
text$yc	SEGMENT
??__Eg_MonsterZt@@YAXXZ PROC				; `dynamic initializer for 'g_MonsterZt'', COMDAT

; 12   : MonsterZt g_MonsterZt;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterZt@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterZt''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Eg_MonsterZt@@YAXXZ ENDP				; `dynamic initializer for 'g_MonsterZt''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MonsterZt@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterZt@@YAXXZ PROC				; `dynamic atexit destructor for 'g_MonsterZt'', COMDAT
  00000	c3		 ret	 0
??__Fg_MonsterZt@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_MonsterZt''
text$yd	ENDS
PUBLIC	?g_MonsterZt@@3VMonsterZt@@A			; g_MonsterZt
_BSS	SEGMENT
?g_MonsterZt@@3VMonsterZt@@A DB 03004H DUP (?)		; g_MonsterZt
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MonsterZt$initializer$ DD FLAT:??__Eg_MonsterZt@@YAXXZ
CRT$XCU	ENDS
END
