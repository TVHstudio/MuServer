; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MossMerchant.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gMossMerchant@@3VCMossMerchant@@A		; gMossMerchant
_BSS	SEGMENT
?gMossMerchant@@3VCMossMerchant@@A DB 031e4H DUP (?)	; gMossMerchant
_BSS	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0EM@GGHAPH@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@ ; `string'
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	??_C@_0CH@GMOBOBFA@?4?4?2Data?2ZtData?2Events?2MossMercha@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadFile@CMossMerchant@@QAEXXZ			; CMossMerchant::ReadFile
EXTRN	_fclose:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
; File e:\work\tranet_version\gs\gameserver\mossmerchant.cpp
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@GGHAPH@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@
CONST	SEGMENT
??_C@_0EM@GGHAPH@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@ DB '[MossMer'
	DB	'chant] Info file Load Fail [..\Data\ZtData\Events\MossMerchan'
	DB	't.ini]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GMOBOBFA@?4?4?2Data?2ZtData?2Events?2MossMercha@
CONST	SEGMENT
??_C@_0CH@GMOBOBFA@?4?4?2Data?2ZtData?2Events?2MossMercha@ DB '..\Data\Zt'
	DB	'Data\Events\MossMerchant.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadFile@CMossMerchant@@QAEXXZ
_TEXT	SEGMENT
tv219 = -8						; size = 4
tv217 = -8						; size = 4
tv202 = -8						; size = 4
tv196 = -8						; size = 4
tv193 = -8						; size = 4
tv185 = -8						; size = 4
tv181 = -8						; size = 4
tv177 = -8						; size = 4
tv163 = -8						; size = 4
tv147 = -8						; size = 4
tv145 = -8						; size = 4
tv134 = -8						; size = 4
tv133 = -8						; size = 4
tv129 = -8						; size = 4
tv93 = -8						; size = 4
tv87 = -8						; size = 4
tv86 = -8						; size = 4
tv77 = -8						; size = 4
tv214 = -2						; size = 2
tv205 = -2						; size = 2
tv168 = -2						; size = 2
tv143 = -2						; size = 2
tv142 = -2						; size = 2
tv139 = -2						; size = 2
tv132 = -2						; size = 2
tv91 = -2						; size = 2
tv80 = -2						; size = 2
?ReadFile@CMossMerchant@@QAEXXZ PROC			; CMossMerchant::ReadFile, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 35   : 	SMDFile = fopen("..\\Data\\ZtData\\Events\\MossMerchant.ini", "r");

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GMOBOBFA@?4?4?2Data?2ZtData?2Events?2MossMercha@
  00011	8b d9		 mov	 ebx, ecx
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 36   : 
; 37   : 	if ( SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 1a		 jne	 SHORT $LN9@ReadFile

; 38   : 	{
; 39   : 		MessageBoxA(0,"[MossMerchant] Info file Load Fail [..\\Data\\ZtData\\Events\\MossMerchant.ini]","CRITICAL ERROR",0);

  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GGHAPH@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 40   : 		ExitProcess(1);

  00036	6a 01		 push	 1
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN26@ReadFile:
$LN9@ReadFile:

; 41   : 		return;
; 42   : 	}
; 43   : 
; 44   : 	int Token;
; 45   : 	int type = -1;
; 46   : 
; 47   : 	while ( true )
; 48   : 	{
; 49   : 	    Token = GetToken();

  0003e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 50   : 
; 51   :         if( Token == 2)

  00043	83 f8 02	 cmp	 eax, 2
  00046	0f 84 3c 02 00
	00		 je	 $LN17@ReadFile
  0004c	56		 push	 esi
  0004d	57		 push	 edi
  0004e	8b ff		 npad	 2
$LL8@ReadFile:

; 52   : 		{
; 53   :             break;
; 54   : 		}
; 55   : 
; 56   : 		type = (int)TokenNumber;

  00050	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00056	e8 00 00 00 00	 call	 __ftol2_sse
  0005b	8b f8		 mov	 edi, eax

; 57   : 
; 58   : 		while ( true )
; 59   : 		{
; 60   : 			if ( type < 0 || type > 4 )

  0005d	85 ff		 test	 edi, edi
  0005f	0f 88 13 02 00
	00		 js	 $LN23@ReadFile
$LL5@ReadFile:
  00065	83 ff 04	 cmp	 edi, 4
  00068	0f 8f 0a 02 00
	00		 jg	 $LN23@ReadFile

; 61   : 			{
; 62   : 				break;
; 63   : 			}
; 64   : 		    Token = GetToken();

  0006e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 65   : 
; 66   : 			if ( strcmp("end", TokenString ) == 0)

  00073	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00078	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0007d	8d 49 00	 npad	 3
$LL19@ReadFile:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00084	75 1a		 jne	 SHORT $LN20@ReadFile
  00086	84 c9		 test	 cl, cl
  00088	74 12		 je	 SHORT $LN21@ReadFile
  0008a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0008d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00090	75 0e		 jne	 SHORT $LN20@ReadFile
  00092	83 c0 02	 add	 eax, 2
  00095	83 c6 02	 add	 esi, 2
  00098	84 c9		 test	 cl, cl
  0009a	75 e4		 jne	 SHORT $LL19@ReadFile
$LN21@ReadFile:
  0009c	33 c0		 xor	 eax, eax
  0009e	eb 05		 jmp	 SHORT $LN22@ReadFile
$LN20@ReadFile:
  000a0	1b c0		 sbb	 eax, eax
  000a2	83 d8 ff	 sbb	 eax, -1
$LN22@ReadFile:
  000a5	85 c0		 test	 eax, eax
  000a7	0f 84 cb 01 00
	00		 je	 $LN23@ReadFile

; 67   : 			{
; 68   : 				break;
; 69   : 			}
; 70   : 
; 71   : 			gMossMerchant.Type[type][ItemCount[type]] = (unsigned char)TokenNumber;

  000ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b3	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  000b6	d9 7d fe	 fnstcw	 WORD PTR tv168[ebp]
  000b9	8b f7		 mov	 esi, edi
  000bb	0f b7 45 fe	 movzx	 eax, WORD PTR tv168[ebp]
  000bf	69 f6 ff 00 00
	00		 imul	 esi, 255		; 000000ffH
  000c5	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000ca	89 45 f8	 mov	 DWORD PTR tv147[ebp], eax
  000cd	d9 6d f8	 fldcw	 WORD PTR tv147[ebp]
  000d0	db 5d f8	 fistp	 DWORD PTR tv133[ebp]
  000d3	0f b6 45 f8	 movzx	 eax, BYTE PTR tv133[ebp]
  000d7	88 84 31 14 00
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+esi+20], al
  000de	d9 6d fe	 fldcw	 WORD PTR tv168[ebp]

; 72   : 
; 73   : 			Token = GetToken();

  000e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 74   : 			gMossMerchant.Index[type][ItemCount[type]] = (unsigned char)TokenNumber;

  000e6	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  000e9	03 ce		 add	 ecx, esi
  000eb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f1	d9 7d fe	 fnstcw	 WORD PTR tv80[ebp]
  000f4	0f b7 45 fe	 movzx	 eax, WORD PTR tv80[ebp]
  000f8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000fd	89 45 f8	 mov	 DWORD PTR tv185[ebp], eax
  00100	d9 6d f8	 fldcw	 WORD PTR tv185[ebp]
  00103	db 5d f8	 fistp	 DWORD PTR tv181[ebp]
  00106	0f b6 45 f8	 movzx	 eax, BYTE PTR tv181[ebp]
  0010a	66 89 04 4d 10
	05 00 00	 mov	 WORD PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx*2+1296], ax
  00112	d9 6d fe	 fldcw	 WORD PTR tv80[ebp]

; 75   : 
; 76   : 			Token = GetToken();

  00115	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 77   : 			gMossMerchant.Level[type][ItemCount[type]] = (unsigned char)TokenNumber;

  0011a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00120	d9 7d fe	 fnstcw	 WORD PTR tv205[ebp]
  00123	0f b7 45 fe	 movzx	 eax, WORD PTR tv205[ebp]
  00127	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0012c	89 45 f8	 mov	 DWORD PTR tv145[ebp], eax
  0012f	8b 04 bb	 mov	 eax, DWORD PTR [ebx+edi*4]
  00132	d9 6d f8	 fldcw	 WORD PTR tv145[ebp]
  00135	db 5d f8	 fistp	 DWORD PTR tv202[ebp]
  00138	0f b6 55 f8	 movzx	 edx, BYTE PTR tv202[ebp]
  0013c	88 94 30 06 0f
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+esi+3846], dl
  00143	d9 6d fe	 fldcw	 WORD PTR tv205[ebp]

; 78   : 
; 79   : 			Token = GetToken();

  00146	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 			gMossMerchant.Dur[type][ItemCount[type]] = (unsigned char)TokenNumber;

  0014b	8b 14 bb	 mov	 edx, DWORD PTR [ebx+edi*4]
  0014e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00154	d9 7d fe	 fnstcw	 WORD PTR tv143[ebp]
  00157	0f b7 45 fe	 movzx	 eax, WORD PTR tv143[ebp]
  0015b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00160	89 45 f8	 mov	 DWORD PTR tv196[ebp], eax
  00163	d9 6d f8	 fldcw	 WORD PTR tv196[ebp]
  00166	db 5d f8	 fistp	 DWORD PTR tv134[ebp]
  00169	0f b6 4d f8	 movzx	 ecx, BYTE PTR tv134[ebp]
  0016d	88 8c 32 01 14
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[edx+esi+5121], cl
  00174	d9 6d fe	 fldcw	 WORD PTR tv143[ebp]

; 81   : 
; 82   : 			Token = GetToken();

  00177	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 			gMossMerchant.Skill[type][ItemCount[type]] = (unsigned char)TokenNumber;

  0017c	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  0017f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00185	d9 7d fe	 fnstcw	 WORD PTR tv139[ebp]
  00188	0f b7 45 fe	 movzx	 eax, WORD PTR tv139[ebp]
  0018c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00191	89 45 f8	 mov	 DWORD PTR tv129[ebp], eax
  00194	d9 6d f8	 fldcw	 WORD PTR tv129[ebp]
  00197	db 5d f8	 fistp	 DWORD PTR tv93[ebp]
  0019a	0f b6 45 f8	 movzx	 eax, BYTE PTR tv93[ebp]
  0019e	88 84 31 fc 18
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+esi+6396], al
  001a5	d9 6d fe	 fldcw	 WORD PTR tv139[ebp]

; 84   : 
; 85   : 			Token = GetToken();

  001a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 			gMossMerchant.Luck[type][ItemCount[type]] = (unsigned char)TokenNumber;

  001ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b3	d9 7d fe	 fnstcw	 WORD PTR tv132[ebp]
  001b6	0f b7 45 fe	 movzx	 eax, WORD PTR tv132[ebp]
  001ba	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001bf	89 45 f8	 mov	 DWORD PTR tv193[ebp], eax
  001c2	8b 04 bb	 mov	 eax, DWORD PTR [ebx+edi*4]
  001c5	d9 6d f8	 fldcw	 WORD PTR tv193[ebp]
  001c8	db 5d f8	 fistp	 DWORD PTR tv86[ebp]
  001cb	0f b6 55 f8	 movzx	 edx, BYTE PTR tv86[ebp]
  001cf	88 94 30 f7 1d
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+esi+7671], dl
  001d6	d9 6d fe	 fldcw	 WORD PTR tv132[ebp]

; 87   : 
; 88   : 			Token = GetToken();

  001d9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 			gMossMerchant.Opt[type][ItemCount[type]] = (unsigned char)TokenNumber;

  001de	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e4	d9 7d fe	 fnstcw	 WORD PTR tv91[ebp]
  001e7	0f b7 45 fe	 movzx	 eax, WORD PTR tv91[ebp]
  001eb	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001f0	89 45 f8	 mov	 DWORD PTR tv177[ebp], eax
  001f3	d9 6d f8	 fldcw	 WORD PTR tv177[ebp]
  001f6	8b 14 bb	 mov	 edx, DWORD PTR [ebx+edi*4]
  001f9	db 5d f8	 fistp	 DWORD PTR tv163[ebp]
  001fc	0f b6 4d f8	 movzx	 ecx, BYTE PTR tv163[ebp]
  00200	88 8c 32 f2 22
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[edx+esi+8946], cl
  00207	d9 6d fe	 fldcw	 WORD PTR tv91[ebp]

; 90   : 
; 91   : 			Token = GetToken();

  0020a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 92   : 			gMossMerchant.Exe[type][ItemCount[type]] = (unsigned char)TokenNumber;

  0020f	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  00212	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00218	d9 7d fe	 fnstcw	 WORD PTR tv142[ebp]
  0021b	0f b7 45 fe	 movzx	 eax, WORD PTR tv142[ebp]
  0021f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00224	89 45 f8	 mov	 DWORD PTR tv87[ebp], eax
  00227	d9 6d f8	 fldcw	 WORD PTR tv87[ebp]
  0022a	db 5d f8	 fistp	 DWORD PTR tv77[ebp]
  0022d	0f b6 45 f8	 movzx	 eax, BYTE PTR tv77[ebp]
  00231	88 84 31 ed 27
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+esi+10221], al
  00238	d9 6d fe	 fldcw	 WORD PTR tv142[ebp]

; 93   : 
; 94   : 			Token = GetToken();

  0023b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 95   : 			gMossMerchant.Anc[type][ItemCount[type]] = (unsigned char)TokenNumber;

  00240	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00246	d9 7d fe	 fnstcw	 WORD PTR tv214[ebp]
  00249	0f b7 45 fe	 movzx	 eax, WORD PTR tv214[ebp]
  0024d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00252	89 45 f8	 mov	 DWORD PTR tv217[ebp], eax
  00255	8b 04 bb	 mov	 eax, DWORD PTR [ebx+edi*4]
  00258	d9 6d f8	 fldcw	 WORD PTR tv217[ebp]
  0025b	db 5d f8	 fistp	 DWORD PTR tv219[ebp]
  0025e	0f b6 55 f8	 movzx	 edx, BYTE PTR tv219[ebp]
  00262	88 94 30 e8 2c
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+esi+11496], dl

; 96   : 
; 97   : 			gMossMerchant.ItemCount[type]++;

  00269	ff 04 bd 00 00
	00 00		 inc	 DWORD PTR ?gMossMerchant@@3VCMossMerchant@@A[edi*4]
  00270	d9 6d fe	 fldcw	 WORD PTR tv214[ebp]
  00273	e9 ed fd ff ff	 jmp	 $LL5@ReadFile
$LN23@ReadFile:

; 41   : 		return;
; 42   : 	}
; 43   : 
; 44   : 	int Token;
; 45   : 	int type = -1;
; 46   : 
; 47   : 	while ( true )
; 48   : 	{
; 49   : 	    Token = GetToken();

  00278	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 50   : 
; 51   :         if( Token == 2)

  0027d	83 f8 02	 cmp	 eax, 2
  00280	0f 85 ca fd ff
	ff		 jne	 $LL8@ReadFile
  00286	5f		 pop	 edi
  00287	5e		 pop	 esi
$LN17@ReadFile:

; 98   : 		    
; 99   : 		}
; 100  :     }
; 101  : 
; 102  : 	fclose(SMDFile);

  00288	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  0028e	51		 push	 ecx
  0028f	e8 00 00 00 00	 call	 _fclose
  00294	83 c4 04	 add	 esp, 4
  00297	5b		 pop	 ebx

; 103  : 	return;
; 104  : }

  00298	8b e5		 mov	 esp, ebp
  0029a	5d		 pop	 ebp
  0029b	c3		 ret	 0
$LN25@ReadFile:
?ReadFile@CMossMerchant@@QAEXXZ ENDP			; CMossMerchant::ReadFile
_TEXT	ENDS
PUBLIC	??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@ ; `string'
PUBLIC	??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@ ; `string'
PUBLIC	??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@ ; `string'
PUBLIC	??_C@_0BB@FMOJJAG@MossMerchant?4cpp?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ItemBuy@CMossMerchant@@QAEXHH@Z		; CMossMerchant::ItemBuy
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?ItemGetDurability@@YAHHHHH@Z:PROC		; ItemGetDurability
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	_rand:PROC
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z:PROC ; CheckInventoryEmptySpace
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?gObjFixInventoryPointer@@YA_NH@Z:PROC		; gObjFixInventoryPointer
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@
CONST	SEGMENT
??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@ DB '[Mos'
	DB	'sMerchant]: Need 1.000.000 zen to buy here', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@
CONST	SEGMENT
??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@ DB '[Moss'
	DB	'Merchant]: Need to make space in the inventory (4x2)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@
CONST	SEGMENT
??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@ DB '['
	DB	'Fix Inv.Ptr] False Location - %s, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FMOJJAG@MossMerchant?4cpp?$AA@
CONST	SEGMENT
??_C@_0BB@FMOJJAG@MossMerchant?4cpp?$AA@ DB 'MossMerchant.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ItemBuy@CMossMerchant@@QAEXHH@Z
_TEXT	SEGMENT
_NewExe$ = -56						; size = 1
_NewSkill$ = -52					; size = 1
tv289 = -48						; size = 4
_NewLuck$ = -42						; size = 1
_NewDur$ = -38						; size = 1
_NewOpt$ = -34						; size = 1
_NewLevel$ = -30					; size = 1
_NewAnc$ = -26						; size = 1
_IsExe$ = -22						; size = 1
_IsAnc$ = -21						; size = 1
_pResult$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Item$ = 12						; size = 4
?ItemBuy@CMossMerchant@@QAEXHH@Z PROC			; CMossMerchant::ItemBuy, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00014	56		 push	 esi

; 117  : 	LPOBJ lpObj = &gObj[aIndex];

  00015	8b f3		 mov	 esi, ebx
  00017	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 118  : 	PMSG_BUYRESULT pResult;
; 119  : 
; 120  : 	pResult.c = 0xC1;

  00023	c7 45 ec c1 10
	32 ff		 mov	 DWORD PTR _pResult$[ebp], -13496127 ; ff3210c1H

; 121  : 	pResult.size = sizeof(PMSG_BUYRESULT);
; 122  : 	pResult.headcode = 0x32;
; 123  : 	pResult.Result = -1;
; 124  : 
; 125  : 	if ( gObj[aIndex].CloseType != -1 )

  0002a	80 7e 0b ff	 cmp	 BYTE PTR [esi+11], -1
  0002e	89 75 d0	 mov	 DWORD PTR tv289[ebp], esi
  00031	74 21		 je	 SHORT $LN20@ItemBuy

; 126  : 	{
; 127  : 		DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  00033	6a 10		 push	 16			; 00000010H
  00035	8d 55 ec	 lea	 edx, DWORD PTR _pResult$[ebp]
  00038	52		 push	 edx
  00039	53		 push	 ebx
  0003a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx

; 236  : 
; 237  : 	return;
; 238  : }

  00044	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00047	33 cd		 xor	 ecx, ebp
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
$LN20@ItemBuy:

; 128  : 		return;
; 129  : 	}
; 130  : 
; 131  : 	if ( !::gObjFixInventoryPointer(aIndex))

  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 ?gObjFixInventoryPointer@@YA_NH@Z ; gObjFixInventoryPointer
  0005a	83 c4 04	 add	 esp, 4
  0005d	84 c0		 test	 al, al
  0005f	75 18		 jne	 SHORT $LN19@ItemBuy

; 132  : 	{
; 133  : 		LogAdd("[Fix Inv.Ptr] False Location - %s, %d", __FILE__, __LINE__);

  00061	68 85 00 00 00	 push	 133			; 00000085H
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FMOJJAG@MossMerchant?4cpp?$AA@
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@ItemBuy:

; 134  : 	}
; 135  : 
; 136  : 	if ( lpObj->m_IfState.use > 0 )

  00079	8b 86 1c 0e 00
	00		 mov	 eax, DWORD PTR [esi+3612]
  0007f	a8 03		 test	 al, 3
  00081	76 30		 jbe	 SHORT $LN17@ItemBuy

; 137  : 	{
; 138  : 		if ( lpObj->m_IfState.type != 3 )

  00083	25 c0 ff 00 00	 and	 eax, 65472		; 0000ffc0H
  00088	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  0008d	74 24		 je	 SHORT $LN17@ItemBuy

; 139  : 		{
; 140  : 			DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  0008f	0f b6 45 ed	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00093	50		 push	 eax
  00094	8d 4d ec	 lea	 ecx, DWORD PTR _pResult$[ebp]
  00097	51		 push	 ecx
  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 236  : 
; 237  : 	return;
; 238  : }

  000a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a6	33 cd		 xor	 ecx, ebp
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
$LN17@ItemBuy:

; 141  : 			return;
; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	if ( CheckInventoryEmptySpace(lpObj,4,2) == false )

  000b3	6a 02		 push	 2
  000b5	6a 04		 push	 4
  000b7	56		 push	 esi
  000b8	e8 00 00 00 00	 call	 ?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z ; CheckInventoryEmptySpace
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	85 c0		 test	 eax, eax
  000c2	75 31		 jne	 SHORT $LN16@ItemBuy

; 146  : 	{
; 147  : 		GCServerMsgStringSend("[MossMerchant]: Need to make space in the inventory (4x2)",aIndex,1);

  000c4	6a 01		 push	 1
  000c6	53		 push	 ebx
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@
  000cc	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 148  : 		DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  000d1	0f b6 55 ed	 movzx	 edx, BYTE PTR _pResult$[ebp+1]
  000d5	52		 push	 edx
  000d6	8d 45 ec	 lea	 eax, DWORD PTR _pResult$[ebp]
  000d9	50		 push	 eax
  000da	53		 push	 ebx
  000db	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx

; 236  : 
; 237  : 	return;
; 238  : }

  000e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e8	33 cd		 xor	 ecx, ebp
  000ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
$LN16@ItemBuy:

; 149  : 		return;
; 150  : 	}
; 151  : 
; 152  : 	if ( lpObj->Money < 1000000 )

  000f5	81 be f0 00 00
	00 40 42 0f 00	 cmp	 DWORD PTR [esi+240], 1000000 ; 000f4240H
  000ff	7d 31		 jge	 SHORT $LN15@ItemBuy

; 153  : 	{
; 154  : 		GCServerMsgStringSend("[MossMerchant]: Need 1.000.000 zen to buy here",aIndex,1);

  00101	6a 01		 push	 1
  00103	53		 push	 ebx
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@
  00109	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 155  : 		DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  0010e	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pResult$[ebp+1]
  00112	51		 push	 ecx
  00113	8d 55 ec	 lea	 edx, DWORD PTR _pResult$[ebp]
  00116	52		 push	 edx
  00117	53		 push	 ebx
  00118	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0011d	83 c4 18	 add	 esp, 24			; 00000018H
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx

; 236  : 
; 237  : 	return;
; 238  : }

  00122	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00125	33 cd		 xor	 ecx, ebp
  00127	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN15@ItemBuy:

; 156  : 		return;
; 157  : 	}
; 158  : 
; 159  : 	int ItemIndex = -1;
; 160  : 
; 161  : 	switch ( Item )

  00132	8b 45 0c	 mov	 eax, DWORD PTR _Item$[ebp]
  00135	83 f8 18	 cmp	 eax, 24			; 00000018H
  00138	0f 87 42 01 00
	00		 ja	 $LN6@ItemBuy
  0013e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN25@ItemBuy[eax]
  00145	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN27@ItemBuy[eax*4]
$LN12@ItemBuy:

; 162  : 	{
; 163  : 	case 0x00:
; 164  : 		ItemIndex = 0;

  0014c	33 f6		 xor	 esi, esi

; 165  : 		break;

  0014e	eb 1a		 jmp	 SHORT $LN24@ItemBuy
$LN11@ItemBuy:

; 166  : 	case 0x02:
; 167  : 		ItemIndex = 1;

  00150	be 01 00 00 00	 mov	 esi, 1

; 168  : 		break;

  00155	eb 13		 jmp	 SHORT $LN24@ItemBuy
$LN10@ItemBuy:

; 169  : 	case 0x04:
; 170  : 		ItemIndex = 2;

  00157	be 02 00 00 00	 mov	 esi, 2

; 171  : 		break;

  0015c	eb 0c		 jmp	 SHORT $LN24@ItemBuy
$LN9@ItemBuy:

; 172  : 	case 0x06:
; 173  : 		ItemIndex = 3;

  0015e	be 03 00 00 00	 mov	 esi, 3

; 174  : 		break;

  00163	eb 05		 jmp	 SHORT $LN24@ItemBuy
$LN8@ItemBuy:

; 175  : 	case 0x18:
; 176  : 		ItemIndex = 4;

  00165	be 04 00 00 00	 mov	 esi, 4
$LN24@ItemBuy:

; 177  : 		break;
; 178  : 	}
; 179  : 
; 180  : 	if ( ItemIndex < 0 || ItemIndex > 4 )
; 181  : 	{
; 182  : 		return;
; 183  : 	}
; 184  : 
; 185  : 	if ( gMossMerchant.ItemCount[ItemIndex] == 0 )

  0016a	83 3c b5 00 00
	00 00 00	 cmp	 DWORD PTR ?gMossMerchant@@3VCMossMerchant@@A[esi*4], 0
  00172	0f 84 08 01 00
	00		 je	 $LN6@ItemBuy

; 186  : 	{
; 187  : 		return;
; 188  : 	}
; 189  : 
; 190  : 	int Random = rand()%gMossMerchant.ItemCount[ItemIndex];

  00178	e8 00 00 00 00	 call	 _rand
  0017d	99		 cdq
  0017e	f7 3c b5 00 00
	00 00		 idiv	 DWORD PTR ?gMossMerchant@@3VCMossMerchant@@A[esi*4]

; 191  : 
; 192  : 	int NewItem = 0;
; 193  : 	unsigned char NewLevel = 0;
; 194  : 	unsigned char NewDur = 0;
; 195  : 	unsigned char NewSkill = 0;
; 196  : 	unsigned char NewLuck = 0;
; 197  : 	unsigned char NewOpt = 0;
; 198  : 	unsigned char NewExe = 0;
; 199  : 	unsigned char NewAnc = 0;
; 200  : 	unsigned char IsExe = 0;
; 201  : 	unsigned char IsAnc = 0;
; 202  : 
; 203  : 
; 204  : 	NewOpt = gMossMerchant.Opt[ItemIndex][Random];

  00185	69 f6 ff 00 00
	00		 imul	 esi, 255		; 000000ffH
  0018b	0f b6 8c 16 f2
	22 00 00	 movzx	 ecx, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[esi+edx+8946]

; 205  : 
; 206  : 	NewLuck = gMossMerchant.Luck[ItemIndex][Random];
; 207  : 
; 208  : 	NewSkill = gMossMerchant.Skill[ItemIndex][Random];

  00193	0f b6 84 16 fc
	18 00 00	 movzx	 eax, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[esi+edx+6396]
  0019b	88 4d de	 mov	 BYTE PTR _NewOpt$[ebp], cl

; 209  : 	
; 210  : 	NewLevel = gMossMerchant.Level[ItemIndex][Random];

  0019e	0f b6 8c 16 06
	0f 00 00	 movzx	 ecx, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[esi+edx+3846]
  001a6	88 45 cc	 mov	 BYTE PTR _NewSkill$[ebp], al

; 211  : 
; 212  : 	if ( gMossMerchant.Anc[ItemIndex][Random] == 5 || gMossMerchant.Anc[ItemIndex][Random] == 10 )

  001a9	8a 84 16 e8 2c
	00 00		 mov	 al, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[esi+edx+11496]
  001b0	c6 45 e6 00	 mov	 BYTE PTR _NewAnc$[ebp], 0
  001b4	c6 45 ea 00	 mov	 BYTE PTR _IsExe$[ebp], 0
  001b8	03 f2		 add	 esi, edx
  001ba	8a 96 f7 1d 00
	00		 mov	 dl, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[esi+7671]
  001c0	88 55 d6	 mov	 BYTE PTR _NewLuck$[ebp], dl
  001c3	88 4d e2	 mov	 BYTE PTR _NewLevel$[ebp], cl
  001c6	3c 05		 cmp	 al, 5
  001c8	74 0a		 je	 SHORT $LN3@ItemBuy
  001ca	3c 0a		 cmp	 al, 10			; 0000000aH
  001cc	74 06		 je	 SHORT $LN3@ItemBuy

; 216  : 	}
; 217  : 	else
; 218  : 		IsAnc = 0;

  001ce	c6 45 eb 00	 mov	 BYTE PTR _IsAnc$[ebp], 0
  001d2	eb 07		 jmp	 SHORT $LN2@ItemBuy
$LN3@ItemBuy:

; 213  : 	{
; 214  : 		NewAnc = gMossMerchant.Anc[ItemIndex][Random];

  001d4	88 45 e6	 mov	 BYTE PTR _NewAnc$[ebp], al

; 215  : 		IsAnc = 1;

  001d7	c6 45 eb 01	 mov	 BYTE PTR _IsAnc$[ebp], 1
$LN2@ItemBuy:

; 219  : 
; 220  : 	//NewExe = GetRandomExeOption(gMossMerchant.Exe[ItemIndex][Random]);
; 221  : 	NewExe = GenExcOpt(gMossMerchant.Exe[ItemIndex][Random]);

  001db	0f b6 96 ed 27
	00 00		 movzx	 edx, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[esi+10221]
  001e2	52		 push	 edx
  001e3	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  001e8	83 c4 04	 add	 esp, 4
  001eb	88 45 c8	 mov	 BYTE PTR _NewExe$[ebp], al

; 222  : 	
; 223  : 	if(NewExe>0)

  001ee	84 c0		 test	 al, al

; 224  : 		IsExe = 1;

  001f0	b0 01		 mov	 al, 1
  001f2	75 03		 jne	 SHORT $LN1@ItemBuy
  001f4	8a 45 ea	 mov	 al, BYTE PTR _IsExe$[ebp]
$LN1@ItemBuy:

; 225  : 
; 226  : 	NewItem = ITEMGET(gMossMerchant.Type[ItemIndex][Random],gMossMerchant.Index[ItemIndex][Random]);

  001f7	0f b7 0c 75 10
	05 00 00	 movzx	 ecx, WORD PTR ?gMossMerchant@@3VCMossMerchant@@A[esi*2+1296]

; 227  : 
; 228  : 	NewDur = ItemGetDurability(NewItem,NewLevel,IsExe,IsAnc);

  001ff	0f b6 55 eb	 movzx	 edx, BYTE PTR _IsAnc$[ebp]
  00203	57		 push	 edi
  00204	0f b6 be 14 00
	00 00		 movzx	 edi, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[esi+20]
  0020b	c1 e7 09	 shl	 edi, 9
  0020e	03 f9		 add	 edi, ecx
  00210	0f b6 4d e2	 movzx	 ecx, BYTE PTR _NewLevel$[ebp]
  00214	52		 push	 edx
  00215	0f b6 c0	 movzx	 eax, al
  00218	50		 push	 eax
  00219	51		 push	 ecx
  0021a	57		 push	 edi
  0021b	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability

; 229  : 
; 230  : 	ItemSerialCreateSend(aIndex,235,0,0,NewItem,(BYTE)NewLevel,(BYTE)NewDur,(BYTE)NewSkill,(BYTE)NewLuck,(BYTE)NewOpt,aIndex,(BYTE)NewExe,(BYTE)NewAnc);

  00220	8b 55 e6	 mov	 edx, DWORD PTR _NewAnc$[ebp]
  00223	8b 4d de	 mov	 ecx, DWORD PTR _NewOpt$[ebp]
  00226	52		 push	 edx
  00227	8b 55 d6	 mov	 edx, DWORD PTR _NewLuck$[ebp]
  0022a	88 45 da	 mov	 BYTE PTR _NewDur$[ebp], al
  0022d	8b 45 c8	 mov	 eax, DWORD PTR _NewExe$[ebp]
  00230	50		 push	 eax
  00231	8b 45 cc	 mov	 eax, DWORD PTR _NewSkill$[ebp]
  00234	53		 push	 ebx
  00235	51		 push	 ecx
  00236	8b 4d da	 mov	 ecx, DWORD PTR _NewDur$[ebp]
  00239	52		 push	 edx
  0023a	8b 55 e2	 mov	 edx, DWORD PTR _NewLevel$[ebp]
  0023d	50		 push	 eax
  0023e	51		 push	 ecx
  0023f	52		 push	 edx
  00240	57		 push	 edi
  00241	6a 00		 push	 0
  00243	6a 00		 push	 0
  00245	68 eb 00 00 00	 push	 235			; 000000ebH
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 231  : 
; 232  : 	lpObj->Money -= 1000000;

  00250	8b 45 d0	 mov	 eax, DWORD PTR tv289[ebp]
  00253	81 80 f0 00 00
	00 c0 bd f0 ff	 add	 DWORD PTR [eax+240], -1000000 ; fff0bdc0H
  0025d	8b 80 f0 00 00
	00		 mov	 eax, DWORD PTR [eax+240]
  00263	83 c4 44	 add	 esp, 68			; 00000044H

; 233  : 	GCMoneySend(aIndex,lpObj->Money);

  00266	50		 push	 eax
  00267	53		 push	 ebx
  00268	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 234  : 
; 235  : 	DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  0026d	0f b6 45 ed	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00271	50		 push	 eax
  00272	8d 4d ec	 lea	 ecx, DWORD PTR _pResult$[ebp]
  00275	51		 push	 ecx
  00276	53		 push	 ebx
  00277	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0027c	83 c4 14	 add	 esp, 20			; 00000014H
  0027f	5f		 pop	 edi
$LN6@ItemBuy:

; 236  : 
; 237  : 	return;
; 238  : }

  00280	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00283	5e		 pop	 esi
  00284	33 cd		 xor	 ecx, ebp
  00286	5b		 pop	 ebx
  00287	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028c	8b e5		 mov	 esp, ebp
  0028e	5d		 pop	 ebp
  0028f	c2 08 00	 ret	 8
  00292	8b ff		 npad	 2
$LN27@ItemBuy:
  00294	00 00 00 00	 DD	 $LN12@ItemBuy
  00298	00 00 00 00	 DD	 $LN11@ItemBuy
  0029c	00 00 00 00	 DD	 $LN10@ItemBuy
  002a0	00 00 00 00	 DD	 $LN9@ItemBuy
  002a4	00 00 00 00	 DD	 $LN8@ItemBuy
  002a8	00 00 00 00	 DD	 $LN6@ItemBuy
$LN25@ItemBuy:
  002ac	00		 DB	 0
  002ad	05		 DB	 5
  002ae	01		 DB	 1
  002af	05		 DB	 5
  002b0	02		 DB	 2
  002b1	05		 DB	 5
  002b2	03		 DB	 3
  002b3	05		 DB	 5
  002b4	05		 DB	 5
  002b5	05		 DB	 5
  002b6	05		 DB	 5
  002b7	05		 DB	 5
  002b8	05		 DB	 5
  002b9	05		 DB	 5
  002ba	05		 DB	 5
  002bb	05		 DB	 5
  002bc	05		 DB	 5
  002bd	05		 DB	 5
  002be	05		 DB	 5
  002bf	05		 DB	 5
  002c0	05		 DB	 5
  002c1	05		 DB	 5
  002c2	05		 DB	 5
  002c3	05		 DB	 5
  002c4	04		 DB	 4
?ItemBuy@CMossMerchant@@QAEXHH@Z ENDP			; CMossMerchant::ItemBuy
_TEXT	ENDS
PUBLIC	?Init@CMossMerchant@@QAEXXZ			; CMossMerchant::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMossMerchant@@QAEXXZ
_TEXT	SEGMENT
?Init@CMossMerchant@@QAEXXZ PROC			; CMossMerchant::Init, COMDAT
; _this$ = ecx

; 13   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 14   : 	// ----
; 15   : 	for (int j=0;j<5;j++)

  00002	b9 06 0f 00 00	 mov	 ecx, OFFSET ?gMossMerchant@@3VCMossMerchant@@A+3846
  00007	ba 10 05 00 00	 mov	 edx, OFFSET ?gMossMerchant@@3VCMossMerchant@@A+1296
  0000c	33 db		 xor	 ebx, ebx
  0000e	8b ff		 npad	 2
$LL6@Init:

; 16   : 	{
; 17   : 		for (int i=0;i<MAX_ITEM_SECTION;i++)

  00010	33 c0		 xor	 eax, eax
  00012	eb 0c 8d a4 24
	00 00 00 00 eb
	03 8d 49 00	 npad	 14
$LL3@Init:

; 18   : 		{
; 19   : 			gMossMerchant.Type[j][i] = -1;

  00020	c6 84 01 0e f1
	ff ff ff	 mov	 BYTE PTR [ecx+eax-3826], 255 ; 000000ffH

; 20   : 			gMossMerchant.Index[j][i] = -1;

  00028	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  0002d	66 89 32	 mov	 WORD PTR [edx], si

; 21   : 			gMossMerchant.Level[j][i] = 0;

  00030	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl

; 22   : 			gMossMerchant.Dur[j][i] = 0;

  00033	88 9c 01 fb 04
	00 00		 mov	 BYTE PTR [ecx+eax+1275], bl

; 23   : 			gMossMerchant.Skill[j][i] = 0;

  0003a	88 9c 01 f6 09
	00 00		 mov	 BYTE PTR [ecx+eax+2550], bl

; 24   : 			gMossMerchant.Luck[j][i] = 0;

  00041	88 9c 01 f1 0e
	00 00		 mov	 BYTE PTR [ecx+eax+3825], bl

; 25   : 			gMossMerchant.Opt[j][i] = 0;

  00048	88 9c 01 ec 13
	00 00		 mov	 BYTE PTR [ecx+eax+5100], bl

; 26   : 			gMossMerchant.Exe[j][i] = 0;

  0004f	88 9c 01 e7 18
	00 00		 mov	 BYTE PTR [ecx+eax+6375], bl

; 27   : 			gMossMerchant.Anc[j][i] = 0;

  00056	88 9c 01 e2 1d
	00 00		 mov	 BYTE PTR [ecx+eax+7650], bl
  0005d	40		 inc	 eax
  0005e	83 c2 02	 add	 edx, 2
  00061	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00066	7c b8		 jl	 SHORT $LL3@Init

; 14   : 	// ----
; 15   : 	for (int j=0;j<5;j++)

  00068	81 c1 ff 00 00
	00		 add	 ecx, 255		; 000000ffH
  0006e	81 fa 06 0f 00
	00		 cmp	 edx, OFFSET ?gMossMerchant@@3VCMossMerchant@@A+3846
  00074	7c 9a		 jl	 SHORT $LL6@Init

; 28   : 		}
; 29   : 	}
; 30   : 	gMossMerchant.ReadFile();

  00076	5e		 pop	 esi
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMossMerchant@@3VCMossMerchant@@A ; gMossMerchant
  0007c	5b		 pop	 ebx
  0007d	e9 00 00 00 00	 jmp	 ?ReadFile@CMossMerchant@@QAEXXZ ; CMossMerchant::ReadFile
?Init@CMossMerchant@@QAEXXZ ENDP			; CMossMerchant::Init
_TEXT	ENDS
END
