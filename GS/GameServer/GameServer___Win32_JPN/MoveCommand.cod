; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MoveCommand.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	070H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
	DD	010eH
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_iKalimaGateGateIndex DD 058H
	DD	059H
	DD	05aH
	DD	05bH
	DD	05cH
	DD	05dH
	DD	074H
_g_sttKALIMAGATE_LEVEL DD 028H
	DD	082H
	DD	014H
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	015dH
	DD	0137H
	DD	015dH
	DD	015eH
	DD	03e8H
	DD	015eH
	DD	03e8H
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	03e8H
	DD	0118H
	DD	03e8H
	DD	03e8H
	DD	04afH
	DD	03e8H
	DD	04afH
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiegeSync@@QAEHXZ	; CCastleSiegeSync::GetCastleState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlesiegesync.h
;	COMDAT ?GetCastleState@CCastleSiegeSync@@QAEHXZ
_TEXT	SEGMENT
?GetCastleState@CCastleSiegeSync@@QAEHXZ PROC		; CCastleSiegeSync::GetCastleState, COMDAT
; _this$ = ecx

; 34   : 	int  GetCastleState(){return this->m_iCurCastleState;};	// line : 70

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetCastleState@CCastleSiegeSync@@QAEHXZ ENDP		; CCastleSiegeSync::GetCastleState
_TEXT	ENDS
PUBLIC	??_7CMoveCommand@@6B@				; CMoveCommand::`vftable'
PUBLIC	??0CMoveCommand@@QAE@XZ				; CMoveCommand::CMoveCommand
PUBLIC	??_R4CMoveCommand@@6B@				; CMoveCommand::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMoveCommand@@@8			; CMoveCommand `RTTI Type Descriptor'
PUBLIC	??_R3CMoveCommand@@8				; CMoveCommand::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMoveCommand@@8				; CMoveCommand::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMoveCommand@@8			; CMoveCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMoveCommand@@UAEPAXI@Z:PROC		; CMoveCommand::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMoveCommand@@8
; File e:\work\tranet_version\gs\gameserver\movecommand.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMoveCommand@@8 DD FLAT:??_R0?AVCMoveCommand@@@8 ; CMoveCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_R2CMoveCommand@@8
rdata$r	SEGMENT
??_R2CMoveCommand@@8 DD FLAT:??_R1A@?0A@EA@CMoveCommand@@8 ; CMoveCommand::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMoveCommand@@8
rdata$r	SEGMENT
??_R3CMoveCommand@@8 DD 00H				; CMoveCommand::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMoveCommand@@@8
_DATA	SEGMENT
??_R0?AVCMoveCommand@@@8 DD FLAT:??_7type_info@@6B@	; CMoveCommand `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMoveCommand@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMoveCommand@@6B@
rdata$r	SEGMENT
??_R4CMoveCommand@@6B@ DD 00H				; CMoveCommand::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMoveCommand@@@8
	DD	FLAT:??_R3CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_7CMoveCommand@@6B@
CONST	SEGMENT
??_7CMoveCommand@@6B@ DD FLAT:??_R4CMoveCommand@@6B@	; CMoveCommand::`vftable'
	DD	FLAT:??_ECMoveCommand@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMoveCommand@@QAE@XZ
_TEXT	SEGMENT
??0CMoveCommand@@QAE@XZ PROC				; CMoveCommand::CMoveCommand, COMDAT
; _this$ = ecx

; 21   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMoveCommand@@6B@

; 22   : 	return;
; 23   : }

  00008	c3		 ret	 0
??0CMoveCommand@@QAE@XZ ENDP				; CMoveCommand::CMoveCommand
_TEXT	ENDS
PUBLIC	??1CMoveCommand@@UAE@XZ				; CMoveCommand::~CMoveCommand
; Function compile flags: /Ogtp
;	COMDAT ??1CMoveCommand@@UAE@XZ
_TEXT	SEGMENT
??1CMoveCommand@@UAE@XZ PROC				; CMoveCommand::~CMoveCommand, COMDAT
; _this$ = ecx

; 26   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMoveCommand@@6B@

; 27   : 	return;
; 28   : }

  00006	c3		 ret	 0
??1CMoveCommand@@UAE@XZ ENDP				; CMoveCommand::~CMoveCommand
_TEXT	ENDS
PUBLIC	?Init@CMoveCommand@@QAEXXZ			; CMoveCommand::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMoveCommand@@QAEXXZ
_TEXT	SEGMENT
?Init@CMoveCommand@@QAEXXZ PROC				; CMoveCommand::Init, COMDAT
; _this$ = ecx

; 31   : {

  00000	56		 push	 esi

; 32   : 	memset(this->m_MoveCommandData, 0, sizeof(this->m_MoveCommandData));

  00001	68 20 67 00 00	 push	 26400			; 00006720H
  00006	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00009	6a 00		 push	 0
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _memset
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH
  00014	8b c6		 mov	 eax, esi
  00016	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001b	5e		 pop	 esi
  0001c	8d 64 24 00	 npad	 4
$LL3@Init:

; 33   : 
; 34   : 	for (int i =0;i<MAX_MOVE_COMMAND;i++)
; 35   : 	{
; 36   : 		this->m_MoveCommandData[i].Index = -1;

  00020	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00026	05 10 02 00 00	 add	 eax, 528		; 00000210H
  0002b	49		 dec	 ecx
  0002c	75 f2		 jne	 SHORT $LL3@Init

; 37   : 	}
; 38   : }

  0002e	c3		 ret	 0
?Init@CMoveCommand@@QAEXXZ ENDP				; CMoveCommand::Init
_TEXT	ENDS
PUBLIC	??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@ ; `string'
PUBLIC	??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CMoveCommand@@QAEHPAD@Z			; CMoveCommand::Load
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@
CONST	SEGMENT
??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@ DB 'MoveCommand s'
	DB	'cript load fail', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@
CONST	SEGMENT
??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@ DB 'MoveCom'
	DB	'mand %s File Load Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CMoveCommand@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv406 = 8						; size = 4
_filename$ = 8						; size = 4
?Load@CMoveCommand@@QAEHPAD@Z PROC			; CMoveCommand::Load, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx

; 42   : 	int Token;
; 43   : 	int counter;
; 44   : 
; 45   : 	this->Init();

  0000b	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 46   : 
; 47   : 	SMDFile=fopen(filename, "r");

  00010	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _fopen
  0001e	83 c4 08	 add	 esp, 8
  00021	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 48   : 
; 49   : 	if ( SMDFile == 0 )

  00026	85 c0		 test	 eax, eax
  00028	75 18		 jne	 SHORT $LN6@Load

; 50   : 	{
; 51   : 		MsgBox("MoveCommand %s File Load Error", filename);

  0002a	56		 push	 esi
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@
  00030	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00035	83 c4 08	 add	 esp, 8
  00038	5e		 pop	 esi

; 52   : 		return 0;

  00039	33 c0		 xor	 eax, eax
  0003b	5b		 pop	 ebx

; 98   : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@Load:
  00042	57		 push	 edi

; 56   : 
; 57   : 	while ( true )
; 58   : 	{
; 59   : 		Token=GetToken();

  00043	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 60   : 
; 61   : 		if ( Token == 2)

  00048	83 f8 02	 cmp	 eax, 2
  0004b	0f 84 d0 00 00
	00		 je	 $LN14@Load

; 53   : 	}
; 54   : 
; 55   : 	counter=0;

  00051	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00054	81 ee 00 00 00
	00		 sub	 esi, OFFSET _TokenString
  0005a	8d bb 10 02 00
	00		 lea	 edi, DWORD PTR [ebx+528]

; 60   : 
; 61   : 		if ( Token == 2)

  00060	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00065	81 c3 08 02 00
	00		 add	 ebx, 520		; 00000208H
  0006b	81 c6 07 01 00
	00		 add	 esi, 263		; 00000107H
  00071	81 e9 03 01 00
	00		 sub	 ecx, 259		; 00000103H
  00077	89 4d 08	 mov	 DWORD PTR tv406[ebp], ecx
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL5@Load:

; 62   : 		{
; 63   : 			break;
; 64   : 		}
; 65   : 		
; 66   : 		
; 67   : 		if ( Token == 1)

  00080	83 f8 01	 cmp	 eax, 1
  00083	0f 85 b5 00 00
	00		 jne	 $LN2@Load

; 68   : 		{
; 69   : 			this->m_MoveCommandData[counter].Index = (int)TokenNumber;

  00089	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0008f	e8 00 00 00 00	 call	 __ftol2_sse
  00094	8b 4d 08	 mov	 ecx, DWORD PTR tv406[ebp]
  00097	89 04 31	 mov	 DWORD PTR [ecx+esi], eax

; 70   : 
; 71   : 			Token = GetToken();

  0009a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 			strcpy(this->m_MoveCommandData[counter].Name, TokenString);

  0009f	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
$LL9@Load:
  000a4	8a 08		 mov	 cl, BYTE PTR [eax]
  000a6	88 8c 06 01 ff
	ff ff		 mov	 BYTE PTR [esi+eax-255], cl
  000ad	40		 inc	 eax
  000ae	84 c9		 test	 cl, cl
  000b0	75 f2		 jne	 SHORT $LL9@Load

; 73   : 
; 74   : 			Token = GetToken();

  000b2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 75   : 			strcpy(this->m_MoveCommandData[counter].EngName, TokenString);

  000b7	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  000bc	8d 64 24 00	 npad	 4
$LL10@Load:
  000c0	8a 08		 mov	 cl, BYTE PTR [eax]
  000c2	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  000c5	40		 inc	 eax
  000c6	84 c9		 test	 cl, cl
  000c8	75 f6		 jne	 SHORT $LL10@Load

; 76   : 
; 77   : 			Token = GetToken();

  000ca	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 78   : 			this->m_MoveCommandData[counter].NeedZen = (int)TokenNumber;

  000cf	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d5	e8 00 00 00 00	 call	 __ftol2_sse
  000da	89 03		 mov	 DWORD PTR [ebx], eax

; 79   : 
; 80   : 			Token = GetToken();

  000dc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 81   : 			this->m_MoveCommandData[counter].NeedLevel = (int)TokenNumber;

  000e1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e7	e8 00 00 00 00	 call	 __ftol2_sse
  000ec	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 82   : 
; 83   : 			Token = GetToken();

  000ef	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 84   : 			this->m_MoveCommandData[counter].GateNumber = (int)TokenNumber;

  000f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fa	e8 00 00 00 00	 call	 __ftol2_sse
  000ff	89 07		 mov	 DWORD PTR [edi], eax

; 85   : 
; 86   : 			counter++;

  00101	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  00107	81 c3 10 02 00
	00		 add	 ebx, 528		; 00000210H
  0010d	81 c7 10 02 00
	00		 add	 edi, 528		; 00000210H
  00113	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00118	83 f8 02	 cmp	 eax, 2
  0011b	0f 85 5f ff ff
	ff		 jne	 $LL5@Load
$LN14@Load:

; 94   : 		}
; 95   : 	}
; 96   : 	fclose(SMDFile);

  00121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 _fclose
  0012d	83 c4 04	 add	 esp, 4
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi

; 97   : 	return TRUE;

  00132	b8 01 00 00 00	 mov	 eax, 1
  00137	5b		 pop	 ebx

; 98   : }

  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 04 00	 ret	 4
$LN2@Load:

; 87   : 		}
; 88   : 		else
; 89   : 		{
; 90   : 			this->Init();

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 91   : 			fclose(SMDFile);

  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _fclose

; 92   : 			MsgBox("MoveCommand script load fail");

  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@
  00156	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0015b	83 c4 08	 add	 esp, 8
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi

; 93   : 			return FALSE;

  00160	33 c0		 xor	 eax, eax
  00162	5b		 pop	 ebx

; 98   : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 04 00	 ret	 4
?Load@CMoveCommand@@QAEHPAD@Z ENDP			; CMoveCommand::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CMoveCommand@@QAEHPADH@Z			; CMoveCommand::Load
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CMoveCommand@@QAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CMoveCommand@@QAEHPADH@Z$0
__ehfuncinfo$?Load@CMoveCommand@@QAEHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CMoveCommand@@QAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?Load@CMoveCommand@@QAEHPADH@Z
_TEXT	SEGMENT
_WzMemScript$ = -148					; size = 132
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?Load@CMoveCommand@@QAEHPADH@Z PROC			; CMoveCommand::Load, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CMoveCommand@@QAEHPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 75 08	 mov	 esi, DWORD PTR _Buffer$[ebp]
  00030	8b f9		 mov	 edi, ecx

; 102  : 	this->Init();

  00032	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 103  : 	CWzMemScript WzMemScript;

  00037	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0003d	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 104  : 	int Token;
; 105  : 	int counter;
; 106  : 	
; 107  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00042	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00045	50		 push	 eax
  00046	56		 push	 esi
  00047	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 108  : 
; 109  : 	counter=0;
; 110  : 
; 111  : 	while ( true )
; 112  : 	{
; 113  : 		Token=WzMemScript.GetToken();

  00059	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0005f	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 114  : 
; 115  : 		if ( Token == 2)

  00064	83 f8 02	 cmp	 eax, 2
  00067	0f 84 d4 00 00
	00		 je	 $LN14@Load@2

; 139  : 
; 140  : 			counter++;

  0006d	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
$LL5@Load@2:

; 116  : 		{
; 117  : 			break;
; 118  : 		}
; 119  : 		
; 120  : 		
; 121  : 		if ( Token == 1)

  00070	83 f8 01	 cmp	 eax, 1
  00073	0f 85 e1 00 00
	00		 jne	 $LN2@Load@2

; 122  : 		{
; 123  : 			this->m_MoveCommandData[counter].Index = WzMemScript.GetNumber();

  00079	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0007f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 124  : 
; 125  : 			Token = WzMemScript.GetToken();

  00084	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0008a	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  0008d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 126  : 			strcpy(this->m_MoveCommandData[counter].Name, WzMemScript.GetString());

  00092	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00098	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  0009d	8b d6		 mov	 edx, esi
  0009f	2b d0		 sub	 edx, eax
$LL8@Load@2:
  000a1	8a 08		 mov	 cl, BYTE PTR [eax]
  000a3	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000a6	40		 inc	 eax
  000a7	84 c9		 test	 cl, cl
  000a9	75 f6		 jne	 SHORT $LL8@Load@2

; 127  : 
; 128  : 			Token = WzMemScript.GetToken();

  000ab	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000b1	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 129  : 			strcpy(this->m_MoveCommandData[counter].EngName, WzMemScript.GetString());

  000b6	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000bc	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  000c1	8b d6		 mov	 edx, esi
  000c3	2b d0		 sub	 edx, eax
$LL9@Load@2:
  000c5	8a 08		 mov	 cl, BYTE PTR [eax]
  000c7	88 8c 02 ff 00
	00 00		 mov	 BYTE PTR [edx+eax+255], cl
  000ce	40		 inc	 eax
  000cf	84 c9		 test	 cl, cl
  000d1	75 f2		 jne	 SHORT $LL9@Load@2

; 130  : 
; 131  : 			Token = WzMemScript.GetToken();

  000d3	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000d9	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 132  : 			this->m_MoveCommandData[counter].NeedZen = WzMemScript.GetNumber();

  000de	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000e4	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 133  : 
; 134  : 			Token = WzMemScript.GetToken();

  000e9	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000ef	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax
  000f5	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 135  : 			this->m_MoveCommandData[counter].NeedLevel = WzMemScript.GetNumber();

  000fa	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00100	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 136  : 
; 137  : 			Token = WzMemScript.GetToken();

  00105	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0010b	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  00111	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 138  : 			this->m_MoveCommandData[counter].GateNumber = WzMemScript.GetNumber();

  00116	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0011c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00121	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  00127	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]

; 139  : 
; 140  : 			counter++;

  0012d	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  00133	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00138	83 f8 02	 cmp	 eax, 2
  0013b	0f 85 2f ff ff
	ff		 jne	 $LL5@Load@2
$LN14@Load@2:

; 147  : 		}
; 148  : 	}
; 149  : 	return TRUE;

  00141	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00147	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014e	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  00153	b8 01 00 00 00	 mov	 eax, 1
  00158	eb 28		 jmp	 SHORT $LN6@Load@2
$LN2@Load@2:

; 141  : 		}
; 142  : 		else
; 143  : 		{
; 144  : 			this->Init();

  0015a	8b cf		 mov	 ecx, edi
  0015c	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 145  : 			MsgBox("MoveCommand script load fail");

  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@
  00166	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0016b	83 c4 04	 add	 esp, 4

; 146  : 			return FALSE;

  0016e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00174	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0017b	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  00180	33 c0		 xor	 eax, eax
$LN6@Load@2:

; 150  : }

  00182	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00185	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018c	59		 pop	 ecx
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00192	33 cd		 xor	 ecx, ebp
  00194	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CMoveCommand@@QAEHPADH@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?Load@CMoveCommand@@QAEHPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CMoveCommand@@QAEHPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CMoveCommand@@QAEHPADH@Z ENDP			; CMoveCommand::Load
PUBLIC	??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@ ; `string'
PUBLIC	??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@ ; `string'
PUBLIC	?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z		; CMoveCommand::LoadMoveLevel
;	COMDAT ??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@
CONST	SEGMENT
??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@ DB 'MoveLevel scrip'
	DB	't load fail', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@
CONST	SEGMENT
??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@ DB 'MoveLevel'
	DB	' %s File Load Error', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z PROC		; CMoveCommand::LoadMoveLevel, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 154  : 	int Token;
; 155  : 	int counter;
; 156  : 
; 157  : 	memset(this->m_MoveLevel, -1, sizeof(this->m_MoveLevel));

  00007	68 b0 04 00 00	 push	 1200			; 000004b0H
  0000c	8d 87 24 67 00
	00		 lea	 eax, DWORD PTR [edi+26404]
  00012	6a ff		 push	 -1
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _memset

; 158  : 
; 159  : 	SMDFile=fopen(filename, "r");

  0001a	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _fopen
  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 160  : 
; 161  : 	if ( SMDFile == 0 )

  00030	85 c0		 test	 eax, eax
  00032	75 16		 jne	 SHORT $LN6@LoadMoveLe

; 162  : 	{
; 163  : 		MsgBox("MoveLevel %s File Load Error", filename);

  00034	56		 push	 esi
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@

; 204  : 			MsgBox("MoveLevel script load fail");

  0003a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003f	83 c4 08	 add	 esp, 8
  00042	5f		 pop	 edi

; 205  : 			return FALSE;

  00043	33 c0		 xor	 eax, eax
  00045	5e		 pop	 esi

; 210  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN6@LoadMoveLe:

; 168  : 
; 169  : 	while ( true )
; 170  : 	{
; 171  : 		Token=GetToken();

  0004a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 172  : 
; 173  : 		if ( Token == 2)

  0004f	83 f8 02	 cmp	 eax, 2
  00052	0f 84 8e 00 00
	00		 je	 $LN10@LoadMoveLe

; 164  : 		return 0;
; 165  : 	}
; 166  : 
; 167  : 	counter=0;

  00058	8d b7 28 67 00
	00		 lea	 esi, DWORD PTR [edi+26408]
  0005e	8b ff		 npad	 2
$LL5@LoadMoveLe:

; 174  : 		{
; 175  : 			break;
; 176  : 		}
; 177  : 		
; 178  : 		
; 179  : 		if ( Token == 1)

  00060	83 f8 01	 cmp	 eax, 1
  00063	0f 85 97 00 00
	00		 jne	 $LN2@LoadMoveLe

; 180  : 		{
; 181  : 			this->m_MoveLevel[counter].MoveLevel = (int)TokenNumber;

  00069	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0006f	e8 00 00 00 00	 call	 __ftol2_sse
  00074	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 182  : 
; 183  : 			Token = GetToken();

  00077	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 184  : 			this->m_MoveLevel[counter].MapNumber = (int)TokenNumber;

  0007c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00082	e8 00 00 00 00	 call	 __ftol2_sse
  00087	89 06		 mov	 DWORD PTR [esi], eax

; 185  : 
; 186  : 			Token = GetToken();

  00089	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 187  : 			this->m_MoveLevel[counter].X = (int)TokenNumber;

  0008e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00094	e8 00 00 00 00	 call	 __ftol2_sse
  00099	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 188  : 
; 189  : 			Token = GetToken();

  0009c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 190  : 			this->m_MoveLevel[counter].Y = (int)TokenNumber;

  000a1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a7	e8 00 00 00 00	 call	 __ftol2_sse
  000ac	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 191  : 
; 192  : 			Token = GetToken();

  000af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 193  : 			this->m_MoveLevel[counter].TX = (int)TokenNumber;

  000b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ba	e8 00 00 00 00	 call	 __ftol2_sse
  000bf	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 194  : 
; 195  : 			Token = GetToken();

  000c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 196  : 			this->m_MoveLevel[counter].TY = (int)TokenNumber;

  000c7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000cd	e8 00 00 00 00	 call	 __ftol2_sse
  000d2	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 197  : 
; 198  : 			counter++;

  000d5	83 c6 18	 add	 esi, 24			; 00000018H
  000d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000dd	83 f8 02	 cmp	 eax, 2
  000e0	0f 85 7a ff ff
	ff		 jne	 $LL5@LoadMoveLe
$LN10@LoadMoveLe:

; 206  : 		}
; 207  : 	}
; 208  : 	fclose(SMDFile);

  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _fclose
  000f2	83 c4 04	 add	 esp, 4
  000f5	5f		 pop	 edi

; 209  : 	return TRUE;

  000f6	b8 01 00 00 00	 mov	 eax, 1
  000fb	5e		 pop	 esi

; 210  : }

  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
$LN2@LoadMoveLe:

; 199  : 		}
; 200  : 		else
; 201  : 		{
; 202  : 			this->Init();

  00100	8b cf		 mov	 ecx, edi
  00102	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 203  : 			fclose(SMDFile);

  00107	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 _fclose

; 204  : 			MsgBox("MoveLevel script load fail");

  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@
  00118	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0011d	83 c4 08	 add	 esp, 8
  00120	5f		 pop	 edi

; 205  : 			return FALSE;

  00121	33 c0		 xor	 eax, eax
  00123	5e		 pop	 esi

; 210  : }

  00124	5d		 pop	 ebp
  00125	c2 04 00	 ret	 4
?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z ENDP		; CMoveCommand::LoadMoveLevel
_TEXT	ENDS
PUBLIC	?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z		; CMoveCommand::GetMoveLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z
_TEXT	SEGMENT
_mapnumber$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Class$ = 20						; size = 4
?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z PROC		; CMoveCommand::GetMoveLevel, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 214  : 	for( int i=0;i<MAX_MOVE_COMMAND;i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _mapnumber$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _y$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _x$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	8d 81 2c 67 00
	00		 lea	 eax, DWORD PTR [ecx+26412]
$LL9@GetMoveLev:

; 215  : 	{
; 216  : 		if ( this->m_MoveLevel[i].MapNumber == mapnumber )

  00017	39 58 fc	 cmp	 DWORD PTR [eax-4], ebx
  0001a	75 13		 jne	 SHORT $LN8@GetMoveLev

; 217  : 		{
; 218  : 			if ( x >= this->m_MoveLevel[i].X && x <= this->m_MoveLevel[i].TX && y >= this->m_MoveLevel[i].Y && y <= this->m_MoveLevel[i].TY )

  0001c	3b 38		 cmp	 edi, DWORD PTR [eax]
  0001e	7c 0f		 jl	 SHORT $LN8@GetMoveLev
  00020	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  00023	7f 0a		 jg	 SHORT $LN8@GetMoveLev
  00025	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00028	7c 05		 jl	 SHORT $LN8@GetMoveLev
  0002a	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002d	7e 13		 jle	 SHORT $LN13@GetMoveLev
$LN8@GetMoveLev:

; 214  : 	for( int i=0;i<MAX_MOVE_COMMAND;i++)

  0002f	42		 inc	 edx
  00030	83 c0 18	 add	 eax, 24			; 00000018H
  00033	83 fa 32	 cmp	 edx, 50			; 00000032H
  00036	7c df		 jl	 SHORT $LL9@GetMoveLev

; 236  : 				}
; 237  : 			}
; 238  : 		}
; 239  : 	}
; 240  : 
; 241  : 	return -1;

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	83 c8 ff	 or	 eax, -1
  0003d	5b		 pop	 ebx

; 242  : }

  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
$LN13@GetMoveLev:

; 219  : 			{
; 220  : 				if(mapnumber == MAP_INDEX_SWAMPOFCALMNESS)

  00042	83 fb 38	 cmp	 ebx, 56			; 00000038H
  00045	75 11		 jne	 SHORT $LN4@GetMoveLev

; 221  : 				{
; 222  : 					return this->m_MoveLevel[i].MoveLevel;

  00047	5f		 pop	 edi
  00048	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0004b	8b 84 c1 24 67
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+26404]
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 242  : }

  00054	5d		 pop	 ebp
  00055	c2 10 00	 ret	 16			; 00000010H
$LN4@GetMoveLev:

; 223  : 				}
; 224  : 
; 225  : 				if ( Class == CLASS_DARKLORD || Class == CLASS_MAGUMSA 
; 226  : #ifdef MONK
; 227  : 					|| Class == CLASS_MONK
; 228  : #endif
; 229  : 					|| Class == CLASS_SUMMONER )

  00058	8b 45 14	 mov	 eax, DWORD PTR _Class$[ebp]
  0005b	83 f8 04	 cmp	 eax, 4
  0005e	74 20		 je	 SHORT $LN2@GetMoveLev
  00060	83 f8 03	 cmp	 eax, 3
  00063	74 1b		 je	 SHORT $LN2@GetMoveLev
  00065	83 f8 06	 cmp	 eax, 6
  00068	74 16		 je	 SHORT $LN2@GetMoveLev
  0006a	83 f8 05	 cmp	 eax, 5
  0006d	74 11		 je	 SHORT $LN2@GetMoveLev

; 232  : 				}
; 233  : 				else
; 234  : 				{
; 235  : 					return this->m_MoveLevel[i].MoveLevel;

  0006f	5f		 pop	 edi
  00070	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  00073	8b 84 d1 24 67
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+26404]
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx

; 242  : }

  0007c	5d		 pop	 ebp
  0007d	c2 10 00	 ret	 16			; 00000010H
$LN2@GetMoveLev:

; 230  : 				{
; 231  : 					return this->m_MoveLevel[i].MoveLevel * 2 / 3;

  00080	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00083	8b 8c c1 24 67
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*8+26404]
  0008a	03 c9		 add	 ecx, ecx
  0008c	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00091	f7 e9		 imul	 ecx
  00093	5f		 pop	 edi
  00094	8b c2		 mov	 eax, edx
  00096	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00099	5e		 pop	 esi
  0009a	03 c2		 add	 eax, edx
  0009c	5b		 pop	 ebx

; 242  : }

  0009d	5d		 pop	 ebp
  0009e	c2 10 00	 ret	 16			; 00000010H
?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z ENDP		; CMoveCommand::GetMoveLevel
_TEXT	ENDS
PUBLIC	?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::CheckMainToMove
EXTRN	?CheckTeleport@CIllusionTempleEvent@@QAEHH@Z:PROC ; CIllusionTempleEvent::CheckTeleport
EXTRN	?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A:BYTE ; g_IllusionTempleEvent
; Function compile flags: /Ogtp
;	COMDAT ?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::CheckMainToMove, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 246  : 	if ( BC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00006	8a 82 49 01 00
	00		 mov	 al, BYTE PTR [edx+329]
  0000c	3c 34		 cmp	 al, 52			; 00000034H
  0000e	74 10		 je	 SHORT $LN26@CheckMainT
  00010	3c 0b		 cmp	 al, 11			; 0000000bH
  00012	72 12		 jb	 SHORT $LN7@CheckMainT
  00014	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00019	3a c8		 cmp	 cl, al
  0001b	1b c9		 sbb	 ecx, ecx
  0001d	41		 inc	 ecx
  0001e	74 06		 je	 SHORT $LN7@CheckMainT
$LN26@CheckMainT:

; 247  : 	{
; 248  : 		return FALSE;

  00020	33 c0		 xor	 eax, eax

; 282  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN7@CheckMainT:

; 249  : 	}
; 250  : 
; 251  : 	if ( CC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00026	3c 35		 cmp	 al, 53			; 00000035H
  00028	74 f6		 je	 SHORT $LN26@CheckMainT
  0002a	3c 12		 cmp	 al, 18			; 00000012H
  0002c	72 0c		 jb	 SHORT $LN6@CheckMainT
  0002e	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00033	3a c8		 cmp	 cl, al
  00035	1b c9		 sbb	 ecx, ecx
  00037	41		 inc	 ecx

; 252  : 	{
; 253  : 		return FALSE;

  00038	75 e6		 jne	 SHORT $LN26@CheckMainT
$LN6@CheckMainT:

; 254  : 	}
; 255  : 
; 256  : 	if ( KALIMA_MAP_RANGE(lpObj->MapNumber) != FALSE )

  0003a	3c 18		 cmp	 al, 24			; 00000018H
  0003c	72 0f		 jb	 SHORT $LN5@CheckMainT
  0003e	3c 1d		 cmp	 al, 29			; 0000001dH
  00040	76 de		 jbe	 SHORT $LN26@CheckMainT
  00042	33 c9		 xor	 ecx, ecx
  00044	3c 24		 cmp	 al, 36			; 00000024H
  00046	0f 94 c1	 sete	 cl
  00049	85 c9		 test	 ecx, ecx

; 257  : 	{
; 258  : 		return FALSE;

  0004b	75 d3		 jne	 SHORT $LN26@CheckMainT
$LN5@CheckMainT:

; 259  : 	}
; 260  : 
; 261  : 	if ( DS_MAP_RANGE(lpObj->MapNumber) != FALSE )

  0004d	3c 09		 cmp	 al, 9
  0004f	74 cf		 je	 SHORT $LN26@CheckMainT
  00051	33 c9		 xor	 ecx, ecx
  00053	3c 20		 cmp	 al, 32			; 00000020H
  00055	0f 94 c1	 sete	 cl
  00058	85 c9		 test	 ecx, ecx

; 262  : 	{
; 263  : 		return FALSE;

  0005a	75 c4		 jne	 SHORT $LN26@CheckMainT

; 264  : 	}
; 265  : 
; 266  : //#if(GS_CASTLE==0)
; 267  : 	if ( lpObj->MapNumber == MAP_INDEX_KANTURU_BOSS )

  0005c	3c 27		 cmp	 al, 39			; 00000027H

; 268  : 	{
; 269  : 		return FALSE;

  0005e	74 c0		 je	 SHORT $LN26@CheckMainT

; 270  : 	}
; 271  : //#endif
; 272  : 
; 273  : 	if ( IT_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00060	3c 2d		 cmp	 al, 45			; 0000002dH
  00062	72 1a		 jb	 SHORT $LN1@CheckMainT
  00064	b1 32		 mov	 cl, 50			; 00000032H
  00066	3a c8		 cmp	 cl, al
  00068	1b c0		 sbb	 eax, eax
  0006a	40		 inc	 eax
  0006b	74 11		 je	 SHORT $LN1@CheckMainT

; 274  : 	{
; 275  : 		if(g_IllusionTempleEvent.CheckTeleport(lpObj->m_Index) != FALSE)

  0006d	8b 12		 mov	 edx, DWORD PTR [edx]
  0006f	52		 push	 edx
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  00075	e8 00 00 00 00	 call	 ?CheckTeleport@CIllusionTempleEvent@@QAEHH@Z ; CIllusionTempleEvent::CheckTeleport
  0007a	85 c0		 test	 eax, eax

; 276  : 		{
; 277  : 			return FALSE;

  0007c	75 a2		 jne	 SHORT $LN26@CheckMainT
$LN1@CheckMainT:

; 278  : 		}
; 279  : 	}
; 280  : 
; 281  : 	return TRUE;

  0007e	b8 01 00 00 00	 mov	 eax, 1

; 282  : }

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::CheckMainToMove
_TEXT	ENDS
PUBLIC	?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMoveCommand::CheckEquipmentToMove
EXTRN	?gObjMonsterCallKill@@YAXH@Z:PROC		; gObjMonsterCallKill
EXTRN	?GCRecallMonLife@@YAXHHH@Z:PROC			; GCRecallMonLife
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Ogtp
;	COMDAT ?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iTargetMapNumber$ = 12					; size = 4
?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMoveCommand::CheckEquipmentToMove, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 286  : 	if ( iTargetMapNumber == MAP_INDEX_ATHLANSE )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iTargetMapNumber$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	83 f8 07	 cmp	 eax, 7
  0000c	75 4a		 jne	 SHORT $LN6@CheckEquip

; 287  : 	{
; 288  : 		if ( lpObj->pInventory[8].IsItem() != FALSE )

  0000e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00011	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00017	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  0001d	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00022	85 c0		 test	 eax, eax
  00024	0f 84 41 02 00
	00		 je	 $LN1@CheckEquip

; 289  : 		{
; 290  : 			if ( lpObj->pInventory[8].m_Type == ITEMGET(13,2) )

  0002a	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  00030	0f b7 80 a6 06
	00 00		 movzx	 eax, WORD PTR [eax+1702]
  00037	b9 02 1a 00 00	 mov	 ecx, 6658		; 00001a02H
  0003c	66 3b c1	 cmp	 ax, cx

; 291  : 			{
; 292  : 				return FALSE;

  0003f	74 0e		 je	 SHORT $LN24@CheckEquip

; 293  : 			}
; 294  : 
; 295  : 			if ( lpObj->pInventory[8].m_Type == ITEMGET(13,3) )

  00041	ba 03 1a 00 00	 mov	 edx, 6659		; 00001a03H
  00046	66 3b c2	 cmp	 ax, dx
  00049	0f 85 1c 02 00
	00		 jne	 $LN1@CheckEquip
$LN24@CheckEquip:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 296  : 			{
; 297  : 				return FALSE;

  00051	33 c0		 xor	 eax, eax
  00053	5b		 pop	 ebx

; 352  : }

  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN6@CheckEquip:

; 298  : 			}
; 299  : 		}
; 300  : 	}
; 301  : 
; 302  : 	if ( iTargetMapNumber == MAP_INDEX_ICARUS )

  00058	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005b	0f 85 0a 02 00
	00		 jne	 $LN1@CheckEquip

; 303  : 	{
; 304  : 		if ( (lpObj->pInventory[8].m_Type != ITEMGET(13,3) &&
; 305  : 			 lpObj->pInventory[7].m_Type != ITEMGET(13,30) &&
; 306  : 			 lpObj->pInventory[8].m_Type != ITEMGET(13,37) &&
; 307  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,36) &&//Season 4.5 addon
; 308  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,37) &&//Season 4.5 addon
; 309  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,38) &&//Season 4.5 addon
; 310  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,39) &&//Season 4.5 addon
; 311  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,40) &&//Season 4.5 addon
; 312  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,41) &&//Season 4.5 addon
; 313  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,42) &&//Season 4.5 addon
; 314  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,43) &&//Season 4.5 addon
; 315  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 49) &&//Season 6 addon
; 316  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 50) &&//Season 6 addon
; 317  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 130) &&//Season 6 addon
; 318  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 131) &&//Season 6 addon
; 319  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 132) &&//Season 6 addon
; 320  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 133) &&//Season 6 addon
; 321  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 134) &&//Season 6 addon
; 322  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12, 135) &&//Season 6 addon
; 323  : #ifdef NEWWINGS_2_5
; 324  : 			 !IS_NEWWINGS_2_5(lpObj->pInventory[7].m_Type) &&
; 325  : #endif
; 326  : #ifdef NEWWINGS_4
; 327  : 			 !IS_NEWWINGS_4(lpObj->pInventory[7].m_Type) &&
; 328  : #endif
; 329  : #ifdef NEWWINGS_5
; 330  : 			 !IS_NEWWINGS_5(lpObj->pInventory[7].m_Type) &&
; 331  : #endif
; 332  : #ifdef NEWWINGS_6
; 333  : 			 !IS_NEWWINGS_6(lpObj->pInventory[7].m_Type) &&
; 334  : #endif
; 335  : 			 lpObj->pInventory[8].m_Type != ITEMGET(13,4) &&//Season 4.5 addon
; 336  : 			 (lpObj->pInventory[7].m_Type < ITEMGET(12,0) || lpObj->pInventory[7].m_Type > ITEMGET(12,6)) ) ||
; 337  : 			 lpObj->pInventory[8].m_Type == ITEMGET(13,2) ||
; 338  : 			 lpObj->pInventory[11].m_Type == ITEMGET(13,10) ||
; 339  : 			 lpObj->pInventory[10].m_Type == ITEMGET(13,10)  )

  00061	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00064	8b 97 24 0e 00
	00		 mov	 edx, DWORD PTR [edi+3620]
  0006a	0f b7 b2 a6 06
	00 00		 movzx	 esi, WORD PTR [edx+1702]
  00071	b8 03 1a 00 00	 mov	 eax, 6659		; 00001a03H
  00076	66 3b f0	 cmp	 si, ax
  00079	0f 84 9d 01 00
	00		 je	 $LN2@CheckEquip
  0007f	0f b7 82 d2 05
	00 00		 movzx	 eax, WORD PTR [edx+1490]
  00086	b9 1e 1a 00 00	 mov	 ecx, 6686		; 00001a1eH
  0008b	66 3b c1	 cmp	 ax, cx
  0008e	0f 84 88 01 00
	00		 je	 $LN2@CheckEquip
  00094	b9 25 1a 00 00	 mov	 ecx, 6693		; 00001a25H
  00099	66 3b f1	 cmp	 si, cx
  0009c	0f 84 7a 01 00
	00		 je	 $LN2@CheckEquip
  000a2	b9 24 18 00 00	 mov	 ecx, 6180		; 00001824H
  000a7	66 3b c1	 cmp	 ax, cx
  000aa	0f 84 6c 01 00
	00		 je	 $LN2@CheckEquip
  000b0	b9 25 18 00 00	 mov	 ecx, 6181		; 00001825H
  000b5	66 3b c1	 cmp	 ax, cx
  000b8	0f 84 5e 01 00
	00		 je	 $LN2@CheckEquip
  000be	b9 26 18 00 00	 mov	 ecx, 6182		; 00001826H
  000c3	66 3b c1	 cmp	 ax, cx
  000c6	0f 84 50 01 00
	00		 je	 $LN2@CheckEquip
  000cc	b9 27 18 00 00	 mov	 ecx, 6183		; 00001827H
  000d1	66 3b c1	 cmp	 ax, cx
  000d4	0f 84 42 01 00
	00		 je	 $LN2@CheckEquip
  000da	b9 28 18 00 00	 mov	 ecx, 6184		; 00001828H
  000df	66 3b c1	 cmp	 ax, cx
  000e2	0f 84 34 01 00
	00		 je	 $LN2@CheckEquip
  000e8	b9 29 18 00 00	 mov	 ecx, 6185		; 00001829H
  000ed	66 3b c1	 cmp	 ax, cx
  000f0	0f 84 26 01 00
	00		 je	 $LN2@CheckEquip
  000f6	b9 2a 18 00 00	 mov	 ecx, 6186		; 0000182aH
  000fb	66 3b c1	 cmp	 ax, cx
  000fe	0f 84 18 01 00
	00		 je	 $LN2@CheckEquip
  00104	b9 2b 18 00 00	 mov	 ecx, 6187		; 0000182bH
  00109	66 3b c1	 cmp	 ax, cx
  0010c	0f 84 0a 01 00
	00		 je	 $LN2@CheckEquip
  00112	b9 31 18 00 00	 mov	 ecx, 6193		; 00001831H
  00117	66 3b c1	 cmp	 ax, cx
  0011a	0f 84 fc 00 00
	00		 je	 $LN2@CheckEquip
  00120	b9 32 18 00 00	 mov	 ecx, 6194		; 00001832H
  00125	66 3b c1	 cmp	 ax, cx
  00128	0f 84 ee 00 00
	00		 je	 $LN2@CheckEquip
  0012e	b9 82 18 00 00	 mov	 ecx, 6274		; 00001882H
  00133	66 3b c1	 cmp	 ax, cx
  00136	0f 84 e0 00 00
	00		 je	 $LN2@CheckEquip
  0013c	b9 83 18 00 00	 mov	 ecx, 6275		; 00001883H
  00141	66 3b c1	 cmp	 ax, cx
  00144	0f 84 d2 00 00
	00		 je	 $LN2@CheckEquip
  0014a	b9 84 18 00 00	 mov	 ecx, 6276		; 00001884H
  0014f	66 3b c1	 cmp	 ax, cx
  00152	0f 84 c4 00 00
	00		 je	 $LN2@CheckEquip
  00158	b9 85 18 00 00	 mov	 ecx, 6277		; 00001885H
  0015d	66 3b c1	 cmp	 ax, cx
  00160	0f 84 b6 00 00
	00		 je	 $LN2@CheckEquip
  00166	b9 86 18 00 00	 mov	 ecx, 6278		; 00001886H
  0016b	66 3b c1	 cmp	 ax, cx
  0016e	0f 84 a8 00 00
	00		 je	 $LN2@CheckEquip
  00174	b9 87 18 00 00	 mov	 ecx, 6279		; 00001887H
  00179	66 3b c1	 cmp	 ax, cx
  0017c	0f 84 9a 00 00
	00		 je	 $LN2@CheckEquip
  00182	b9 ba 18 00 00	 mov	 ecx, 6330		; 000018baH
  00187	66 3b c1	 cmp	 ax, cx
  0018a	7c 13		 jl	 SHORT $LN20@CheckEquip
  0018c	33 db		 xor	 ebx, ebx
  0018e	b9 bc 18 00 00	 mov	 ecx, 6332		; 000018bcH
  00193	66 3b c1	 cmp	 ax, cx
  00196	0f 9e c3	 setle	 bl
  00199	8b cb		 mov	 ecx, ebx
  0019b	85 c9		 test	 ecx, ecx
  0019d	75 7d		 jne	 SHORT $LN2@CheckEquip
$LN20@CheckEquip:
  0019f	b9 b4 18 00 00	 mov	 ecx, 6324		; 000018b4H
  001a4	66 3b c1	 cmp	 ax, cx
  001a7	7c 13		 jl	 SHORT $LN21@CheckEquip
  001a9	33 db		 xor	 ebx, ebx
  001ab	b9 b9 18 00 00	 mov	 ecx, 6329		; 000018b9H
  001b0	66 3b c1	 cmp	 ax, cx
  001b3	0f 9e c3	 setle	 bl
  001b6	8b cb		 mov	 ecx, ebx
  001b8	85 c9		 test	 ecx, ecx
  001ba	75 60		 jne	 SHORT $LN2@CheckEquip
$LN21@CheckEquip:
  001bc	b9 bd 18 00 00	 mov	 ecx, 6333		; 000018bdH
  001c1	66 3b c1	 cmp	 ax, cx
  001c4	7c 13		 jl	 SHORT $LN22@CheckEquip
  001c6	33 db		 xor	 ebx, ebx
  001c8	b9 c2 18 00 00	 mov	 ecx, 6338		; 000018c2H
  001cd	66 3b c1	 cmp	 ax, cx
  001d0	0f 9e c3	 setle	 bl
  001d3	8b cb		 mov	 ecx, ebx
  001d5	85 c9		 test	 ecx, ecx
  001d7	75 43		 jne	 SHORT $LN2@CheckEquip
$LN22@CheckEquip:
  001d9	b9 c3 18 00 00	 mov	 ecx, 6339		; 000018c3H
  001de	66 3b c1	 cmp	 ax, cx
  001e1	7c 13		 jl	 SHORT $LN23@CheckEquip
  001e3	33 db		 xor	 ebx, ebx
  001e5	b9 dc 18 00 00	 mov	 ecx, 6364		; 000018dcH
  001ea	66 3b c1	 cmp	 ax, cx
  001ed	0f 9e c3	 setle	 bl
  001f0	8b cb		 mov	 ecx, ebx
  001f2	85 c9		 test	 ecx, ecx
  001f4	75 26		 jne	 SHORT $LN2@CheckEquip
$LN23@CheckEquip:
  001f6	b9 04 1a 00 00	 mov	 ecx, 6660		; 00001a04H
  001fb	66 3b f1	 cmp	 si, cx
  001fe	74 1c		 je	 SHORT $LN2@CheckEquip
  00200	b9 00 18 00 00	 mov	 ecx, 6144		; 00001800H
  00205	66 3b c1	 cmp	 ax, cx
  00208	0f 8c 41 fe ff
	ff		 jl	 $LN24@CheckEquip
  0020e	b9 06 18 00 00	 mov	 ecx, 6150		; 00001806H
  00213	66 3b c1	 cmp	 ax, cx
  00216	0f 8f 33 fe ff
	ff		 jg	 $LN24@CheckEquip
$LN2@CheckEquip:
  0021c	b8 02 1a 00 00	 mov	 eax, 6658		; 00001a02H
  00221	66 3b f0	 cmp	 si, ax
  00224	0f 84 25 fe ff
	ff		 je	 $LN24@CheckEquip
  0022a	b9 0a 1a 00 00	 mov	 ecx, 6666		; 00001a0aH
  0022f	66 39 8a 22 09
	00 00		 cmp	 WORD PTR [edx+2338], cx
  00236	0f 84 13 fe ff
	ff		 je	 $LN24@CheckEquip
  0023c	8b c1		 mov	 eax, ecx
  0023e	66 39 82 4e 08
	00 00		 cmp	 WORD PTR [edx+2126], ax
  00245	0f 84 04 fe ff
	ff		 je	 $LN24@CheckEquip

; 340  : 		{
; 341  : 			return FALSE;
; 342  : 		}
; 343  : 
; 344  : 		if ( lpObj->m_RecallMon >= 0 )

  0024b	83 bf 50 04 00
	00 00		 cmp	 DWORD PTR [edi+1104], 0
  00252	7c 17		 jl	 SHORT $LN1@CheckEquip

; 345  : 		{
; 346  : 			GCRecallMonLife(lpObj->m_Index, 60, 0);

  00254	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00256	6a 00		 push	 0
  00258	6a 3c		 push	 60			; 0000003cH
  0025a	51		 push	 ecx
  0025b	e8 00 00 00 00	 call	 ?GCRecallMonLife@@YAXHHH@Z ; GCRecallMonLife

; 347  : 			gObjMonsterCallKill(lpObj->m_Index);

  00260	8b 17		 mov	 edx, DWORD PTR [edi]
  00262	52		 push	 edx
  00263	e8 00 00 00 00	 call	 ?gObjMonsterCallKill@@YAXH@Z ; gObjMonsterCallKill
  00268	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@CheckEquip:

; 348  : 		}
; 349  : 	}
; 350  : 
; 351  : 	return TRUE;

  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi
  0026d	b8 01 00 00 00	 mov	 eax, 1
  00272	5b		 pop	 ebx

; 352  : }

  00273	5d		 pop	 ebp
  00274	c2 08 00	 ret	 8
?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMoveCommand::CheckEquipmentToMove
_TEXT	ENDS
PUBLIC	?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::CheckInterfaceToMove
; Function compile flags: /Ogtp
;	COMDAT ?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::CheckInterfaceToMove, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  : 	if ( lpObj->m_IfState.use == 1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  0000c	80 e1 03	 and	 cl, 3
  0000f	80 f9 01	 cmp	 cl, 1
  00012	75 06		 jne	 SHORT $LN2@CheckInter

; 357  : 	{
; 358  : 		return FALSE;

  00014	33 c0		 xor	 eax, eax

; 362  : 	{
; 363  : 		return FALSE;
; 364  : 	}
; 365  : 
; 366  : 	return TRUE;
; 367  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@CheckInter:

; 359  : 	}
; 360  : 
; 361  : 	if ( lpObj->m_bPShopOpen == true )

  0001a	33 d2		 xor	 edx, edx
  0001c	80 b8 c4 0e 00
	00 01		 cmp	 BYTE PTR [eax+3780], 1
  00023	0f 95 c2	 setne	 dl
  00026	8b c2		 mov	 eax, edx

; 362  : 	{
; 363  : 		return FALSE;
; 364  : 	}
; 365  : 
; 366  : 	return TRUE;
; 367  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::CheckInterfaceToMove
_TEXT	ENDS
PUBLIC	?FindIndex@CMoveCommand@@AAEHPAD@Z		; CMoveCommand::FindIndex
EXTRN	_strcmpi:PROC
; Function compile flags: /Ogtp
;	COMDAT ?FindIndex@CMoveCommand@@AAEHPAD@Z
_TEXT	SEGMENT
_mapname$ = 8						; size = 4
?FindIndex@CMoveCommand@@AAEHPAD@Z PROC			; CMoveCommand::FindIndex, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 371  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _mapname$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  0000e	8b ff		 npad	 2
$LL6@FindIndex:

; 372  : 	{
; 373  : 		if ( this->m_MoveCommandData[i].Index == -1 )

  00010	83 c8 ff	 or	 eax, -1
  00013	39 46 fc	 cmp	 DWORD PTR [esi-4], eax
  00016	74 54		 je	 SHORT $LN7@FindIndex

; 374  : 		{
; 375  : 			return -1;
; 376  : 		}
; 377  : 
; 378  : 		if ( strcmp(mapname, this->m_MoveCommandData[i].Name) == 0 || strcmpi(mapname, this->m_MoveCommandData[i].EngName) == 0  )

  00018	8b ce		 mov	 ecx, esi
  0001a	8b c3		 mov	 eax, ebx
  0001c	8d 64 24 00	 npad	 4
$LL13@FindIndex:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00024	75 1a		 jne	 SHORT $LN14@FindIndex
  00026	84 d2		 test	 dl, dl
  00028	74 12		 je	 SHORT $LN15@FindIndex
  0002a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00030	75 0e		 jne	 SHORT $LN14@FindIndex
  00032	83 c0 02	 add	 eax, 2
  00035	83 c1 02	 add	 ecx, 2
  00038	84 d2		 test	 dl, dl
  0003a	75 e4		 jne	 SHORT $LL13@FindIndex
$LN15@FindIndex:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN16@FindIndex
$LN14@FindIndex:
  00040	1b c0		 sbb	 eax, eax
  00042	83 d8 ff	 sbb	 eax, -1
$LN16@FindIndex:
  00045	85 c0		 test	 eax, eax
  00047	74 2a		 je	 SHORT $LN11@FindIndex
  00049	8d 86 ff 00 00
	00		 lea	 eax, DWORD PTR [esi+255]
  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _strcmpi
  00056	83 c4 08	 add	 esp, 8
  00059	85 c0		 test	 eax, eax
  0005b	74 16		 je	 SHORT $LN11@FindIndex

; 371  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  0005d	47		 inc	 edi
  0005e	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  00064	83 ff 32	 cmp	 edi, 50			; 00000032H
  00067	7c a7		 jl	 SHORT $LL6@FindIndex

; 381  : 		}
; 382  : 	}
; 383  : 
; 384  : 	return -1;

  00069	83 c8 ff	 or	 eax, -1
$LN7@FindIndex:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 385  : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN11@FindIndex:

; 379  : 		{
; 380  : 			return i;

  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 385  : }

  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?FindIndex@CMoveCommand@@AAEHPAD@Z ENDP			; CMoveCommand::FindIndex
_TEXT	ENDS
PUBLIC	?CheckMoveMapBound@CMoveCommand@@QAEHH@Z	; CMoveCommand::CheckMoveMapBound
; Function compile flags: /Ogtp
;	COMDAT ?CheckMoveMapBound@CMoveCommand@@QAEHH@Z
_TEXT	SEGMENT
_iMapIndex$ = 8						; size = 4
?CheckMoveMapBound@CMoveCommand@@QAEHH@Z PROC		; CMoveCommand::CheckMoveMapBound, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 389  : 	switch ( iMapIndex )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapIndex$[ebp]
  00006	48		 dec	 eax
  00007	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0000a	77 17		 ja	 SHORT $LN2@CheckMoveM
  0000c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN6@CheckMoveM[eax]
  00013	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN7@CheckMoveM[eax*4]
$LN1@CheckMoveM:

; 390  : 	{
; 391  : 		case 1:
; 392  : 		case 2:
; 393  : 		case 3:
; 394  : 		case 6:
; 395  : 		case 10:
; 396  : 		case 16:
; 397  : 			return TRUE;

  0001a	b8 01 00 00 00	 mov	 eax, 1

; 401  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN2@CheckMoveM:

; 398  : 	}
; 399  : 	
; 400  : 	return FALSE;

  00023	33 c0		 xor	 eax, eax

; 401  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
  00029	8d 49 00	 npad	 3
$LN7@CheckMoveM:
  0002c	00 00 00 00	 DD	 $LN1@CheckMoveM
  00030	00 00 00 00	 DD	 $LN2@CheckMoveM
$LN6@CheckMoveM:
  00034	00		 DB	 0
  00035	00		 DB	 0
  00036	00		 DB	 0
  00037	01		 DB	 1
  00038	01		 DB	 1
  00039	00		 DB	 0
  0003a	01		 DB	 1
  0003b	01		 DB	 1
  0003c	01		 DB	 1
  0003d	00		 DB	 0
  0003e	01		 DB	 1
  0003f	01		 DB	 1
  00040	01		 DB	 1
  00041	01		 DB	 1
  00042	01		 DB	 1
  00043	00		 DB	 0
?CheckMoveMapBound@CMoveCommand@@QAEHH@Z ENDP		; CMoveCommand::CheckMoveMapBound
_TEXT	ENDS
PUBLIC	??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@ ; `string'
PUBLIC	??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@ ; `string'
PUBLIC	??_C@_0BG@LEABBGFP@BattleZone?5not?5enable?$AA@	; `string'
PUBLIC	_mapname$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z	; CMoveCommand::Move
EXTRN	__imp__wsprintfA:PROC
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?DeleteUserData@CRaklionBattleUserMng@@QAEHH@Z:PROC ; CRaklionBattleUserMng::DeleteUserData
EXTRN	?g_RaklionBattleUserMng@@3VCRaklionBattleUserMng@@A:BYTE ; g_RaklionBattleUserMng
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?PkPenaltyAddNeedZenMapMove@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::PkPenaltyAddNeedZenMapMove
EXTRN	?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z:PROC ; CCastleSiegeSync::CheckCastleOwnerUnionMember
EXTRN	?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z:PROC ; CCastleSiegeSync::CheckCastleOwnerMember
EXTRN	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A:BYTE	; g_CastleSiegeSync
EXTRN	?MoveInBattleZonePartySplit@GensSystem@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::MoveInBattleZonePartySplit
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?IsUserBattleZoneEnable@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::IsUserBattleZoneEnable
EXTRN	?IsMoveMapBattleZone@GensSystem@@QAEHH@Z:PROC	; GensSystem::IsMoveMapBattleZone
EXTRN	?gGensSystem@@3VGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGENS@@3HA:DWORD				; gGENS
;	COMDAT ??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@
; File e:\work\tranet_version\gs\gameserver\castlesiegesync.h
CONST	SEGMENT
??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@ DB '['
	DB	'%s][%s] Use [%s %s] Fail GateNumber = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
CONST	SEGMENT
??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@ DB '['
	DB	'%s][%s] Use [%s %s] Success : reduces money %d - %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LEABBGFP@BattleZone?5not?5enable?$AA@
CONST	SEGMENT
??_C@_0BG@LEABBGFP@BattleZone?5not?5enable?$AA@ DB 'BattleZone not enable'
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\movecommand.cpp
CONST	ENDS
;	COMDAT ?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_mapname$GSCopy$ = -268					; size = 4
_NeedZen$ = -264					; size = 4
_loc6$ = -264						; size = 4
_szTemp$215444 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_mapname$ = 12						; size = 4
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z PROC	; CMoveCommand::Move, COMDAT
; _this$ = ecx

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _mapname$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001b	57		 push	 edi

; 405  : 	int m_number = -1;
; 406  : 	int overlevel = 0;
; 407  : 	int subMoney = 2000;
; 408  : 
; 409  : 	int index = this->FindIndex(mapname);

  0001c	50		 push	 eax
  0001d	8b f9		 mov	 edi, ecx

; 525  : 		{
; 526  : 			char szTemp[256];
; 527  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 93)), NeedLevel);

  0001f	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _mapname$GSCopy$[ebp], eax
  00025	e8 00 00 00 00	 call	 ?FindIndex@CMoveCommand@@AAEHPAD@Z ; CMoveCommand::FindIndex
  0002a	8b d8		 mov	 ebx, eax
  0002c	69 c0 10 02 00
	00		 imul	 eax, 528		; 00000210H
  00032	8b 4c 07 04	 mov	 ecx, DWORD PTR [edi+eax+4]
  00036	03 f8		 add	 edi, eax
  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  0003f	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _loc6$[ebp], ecx
  00045	74 44		 je	 SHORT $LN21@Move

; 410  : 
; 411  : #ifdef OLDCASHSHOP
; 412  : 	if ( g_bUseMoveMapBound == TRUE )
; 413  : 	{
; 414  : 		if ( g_CashItemPeriodSystem.CheckHaveItemPeriodSealEffect(lpObj) == FALSE )
; 415  : 		{
; 416  : 			if ( !this->CheckMoveMapBound(index))
; 417  : 			{
; 418  : 				return FALSE;
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : #endif
; 423  : 
; 424  : 	int loc6 = this->m_MoveCommandData[index].Index; //season 3.0 add-on
; 425  : 
; 426  : 	if(gGENS)
; 427  : 	{
; 428  : 		if( gGensSystem.IsMoveMapBattleZone(loc6) )

  00047	51		 push	 ecx
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  0004d	e8 00 00 00 00	 call	 ?IsMoveMapBattleZone@GensSystem@@QAEHH@Z ; GensSystem::IsMoveMapBattleZone
  00052	85 c0		 test	 eax, eax
  00054	74 2f		 je	 SHORT $LN29@Move

; 429  : 		{
; 430  : 			if( !gGensSystem.IsUserBattleZoneEnable(lpObj) )

  00056	56		 push	 esi
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  0005c	e8 00 00 00 00	 call	 ?IsUserBattleZoneEnable@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::IsUserBattleZoneEnable
  00061	85 c0		 test	 eax, eax
  00063	75 15		 jne	 SHORT $LN20@Move

; 431  : 			{
; 432  : 				LogAddC(2, "BattleZone not enable");

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LEABBGFP@BattleZone?5not?5enable?$AA@
  0006a	6a 02		 push	 2
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00072	83 c4 08	 add	 esp, 8

; 433  : 				//v4 = *(_DWORD *)a2;
; 434  : 				//v5 = CMsg::Get(&unk_8CFC758, 3451);
; 435  : 				//sub_406D7F(v5, v4, 1);
; 436  : 				return false;

  00075	e9 41 02 00 00	 jmp	 $LN34@Move
$LN20@Move:

; 437  : 			}
; 438  : 			// ----
; 439  : 			//v6 = *(_DWORD *)a2;
; 440  : 			//v7 = CMsg::Get(&unk_8CFC758, 3452);
; 441  : 			//sub_406D7F(v7, v6, 1);
; 442  : 			// ----
; 443  : 			gGensSystem.MoveInBattleZonePartySplit(lpObj);

  0007a	56		 push	 esi
  0007b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  00080	e8 00 00 00 00	 call	 ?MoveInBattleZonePartySplit@GensSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; GensSystem::MoveInBattleZonePartySplit
$LN29@Move:
  00085	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _loc6$[ebp]
$LN21@Move:

; 444  : 		}
; 445  : 	}
; 446  : 
; 447  : 	if ( loc6 == 24 ) //season 3.0 changed

  0008b	83 f9 18	 cmp	 ecx, 24			; 00000018H
  0008e	75 39		 jne	 SHORT $LN17@Move

; 448  : 	{
; 449  : 		if ( g_CastleSiegeSync.GetCastleState() == 7 )

  00090	83 3d 04 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A+4, 7

; 450  : 		{
; 451  : 			return FALSE;

  00097	0f 84 1e 02 00
	00		 je	 $LN34@Move

; 452  : 		}
; 453  : 
; 454  : 		if ( g_CastleSiegeSync.CheckCastleOwnerMember(lpObj->m_Index) == FALSE && g_CastleSiegeSync.CheckCastleOwnerUnionMember(lpObj->m_Index) == FALSE)

  0009d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009f	51		 push	 ecx
  000a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000a5	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  000aa	85 c0		 test	 eax, eax
  000ac	75 15		 jne	 SHORT $LN30@Move
  000ae	8b 16		 mov	 edx, DWORD PTR [esi]
  000b0	52		 push	 edx
  000b1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000b6	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  000bb	85 c0		 test	 eax, eax

; 455  : 		{
; 456  : 			return FALSE;

  000bd	0f 84 f8 01 00
	00		 je	 $LN34@Move
$LN30@Move:
  000c3	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _loc6$[ebp]
$LN17@Move:

; 457  : 		}
; 458  : 	}
; 459  : 
; 460  : 	if(IT_MAP_RANGE(lpObj->MapNumber) != FALSE) //season 3.0 add-on

  000c9	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  000d0	3c 2d		 cmp	 al, 45			; 0000002dH
  000d2	72 2d		 jb	 SHORT $LN31@Move
  000d4	b2 32		 mov	 dl, 50			; 00000032H
  000d6	3a d0		 cmp	 dl, al
  000d8	1b c0		 sbb	 eax, eax
  000da	40		 inc	 eax
  000db	74 24		 je	 SHORT $LN31@Move

; 461  : 	{
; 462  : 		if(loc6 == 11 || loc6 == 12 || loc6 == 13 || loc6 == 23)

  000dd	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  000e0	0f 84 d5 01 00
	00		 je	 $LN34@Move
  000e6	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  000e9	0f 84 cc 01 00
	00		 je	 $LN34@Move
  000ef	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000f2	0f 84 c3 01 00
	00		 je	 $LN34@Move
  000f8	83 f9 17	 cmp	 ecx, 23			; 00000017H

; 463  : 		{
; 464  : 			return FALSE;

  000fb	0f 84 ba 01 00
	00		 je	 $LN34@Move
$LN31@Move:

; 465  : 		}
; 466  : 	}
; 467  : 
; 468  : 	if ( index == -1 )

  00101	83 fb ff	 cmp	 ebx, -1

; 469  : 	{
; 470  : 		return FALSE;

  00104	0f 84 b1 01 00
	00		 je	 $LN34@Move

; 471  : 	}
; 472  : 
; 473  : 	int NeedLevel = this->m_MoveCommandData[index].NeedLevel;
; 474  : 	int NeedZen   = this->m_MoveCommandData[index].NeedZen;
; 475  : 	int GateNumber= this->m_MoveCommandData[index].GateNumber;
; 476  : 
; 477  : 	if(gGENS)

  0010a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  00111	8b 87 08 02 00
	00		 mov	 eax, DWORD PTR [edi+520]
  00117	8b 9f 0c 02 00
	00		 mov	 ebx, DWORD PTR [edi+524]
  0011d	8b bf 10 02 00
	00		 mov	 edi, DWORD PTR [edi+528]
  00123	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _NeedZen$[ebp], eax
  00129	74 18		 je	 SHORT $LN12@Move

; 478  : 	{
; 479  : 		NeedZen			*= gGensSystem.PkPenaltyAddNeedZenMapMove(lpObj);

  0012b	56		 push	 esi
  0012c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  00131	e8 00 00 00 00	 call	 ?PkPenaltyAddNeedZenMapMove@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::PkPenaltyAddNeedZenMapMove
  00136	0f af 85 f8 fe
	ff ff		 imul	 eax, DWORD PTR _NeedZen$[ebp]
  0013d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _NeedZen$[ebp], eax
$LN12@Move:

; 480  : 	}
; 481  : 
; 482  : 	if( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA 
; 483  : #ifdef MONK
; 484  : 		|| lpObj->Class == CLASS_MONK
; 485  : #endif
; 486  : 		|| lpObj->Class == CLASS_SUMMONER )

  00143	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  0014a	83 f8 04	 cmp	 eax, 4
  0014d	74 0f		 je	 SHORT $LN10@Move
  0014f	83 f8 03	 cmp	 eax, 3
  00152	74 0a		 je	 SHORT $LN10@Move
  00154	83 f8 06	 cmp	 eax, 6
  00157	74 05		 je	 SHORT $LN10@Move
  00159	83 f8 05	 cmp	 eax, 5
  0015c	75 1c		 jne	 SHORT $LN33@Move
$LN10@Move:

; 487  : 	{
; 488  : 		if ( NeedLevel > 0 )

  0015e	85 db		 test	 ebx, ebx
  00160	7e 18		 jle	 SHORT $LN33@Move

; 489  : 		{
; 490  : 			if (GateNumber != 273) //season 3.0 add-on (Swamp of Calmmness)

  00162	81 ff 11 01 00
	00		 cmp	 edi, 273		; 00000111H
  00168	74 10		 je	 SHORT $LN33@Move

; 491  : 			{
; 492  : 				NeedLevel = NeedLevel *2 / 3;

  0016a	03 db		 add	 ebx, ebx
  0016c	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00171	f7 eb		 imul	 ebx
  00173	8b da		 mov	 ebx, edx
  00175	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00178	03 da		 add	 ebx, edx
$LN33@Move:

; 493  : 			}
; 494  : 		}
; 495  : 	}
; 496  : 
; 497  : 	if ( GateNumber >= 0 )

  0017a	85 ff		 test	 edi, edi
  0017c	0f 88 0b 01 00
	00		 js	 $LN32@Move

; 498  : 	{
; 499  : 		if ( NeedLevel <= lpObj->Level )

  00182	0f bf 96 be 00
	00 00		 movsx	 edx, WORD PTR [esi+190]
  00189	3b da		 cmp	 ebx, edx
  0018b	0f 8f ca 00 00
	00		 jg	 $LN6@Move

; 500  : 		{
; 501  : 			if ( (lpObj->Money - NeedZen ) >= 0 )

  00191	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00197	2b 85 f8 fe ff
	ff		 sub	 eax, DWORD PTR _NeedZen$[ebp]
  0019d	0f 88 99 00 00
	00		 js	 $LN5@Move

; 502  : 			{
; 503  : 				if ( gObjMoveGate(lpObj->m_Index, GateNumber ) != FALSE )

  001a3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001a5	57		 push	 edi
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  001ac	83 c4 08	 add	 esp, 8
  001af	85 c0		 test	 eax, eax
  001b1	0f 84 d6 00 00
	00		 je	 $LN32@Move

; 504  : 				{
; 505  : 					lpObj->m_bPShopRedrawAbs = true;
; 506  : 					lpObj->Money -= NeedZen;

  001b7	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _NeedZen$[ebp]
  001bd	29 96 f0 00 00
	00		 sub	 DWORD PTR [esi+240], edx
  001c3	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]

; 507  : 
; 508  : 					LogAddTD("[%s][%s] Use [%s %s] Success : reduces money %d - %d", lpObj->AccountID, lpObj->Name, lMsg.Get(MSGGET(11, 185)), mapname, lpObj->Money, NeedLevel);

  001c9	53		 push	 ebx
  001ca	50		 push	 eax
  001cb	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _mapname$GSCopy$[ebp]
  001d1	50		 push	 eax
  001d2	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  001d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001dc	c6 86 c7 0e 00
	00 01		 mov	 BYTE PTR [esi+3783], 1
  001e3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001e8	50		 push	 eax
  001e9	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  001ec	51		 push	 ecx
  001ed	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  001f0	52		 push	 edx
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
  001f6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 509  : 
; 510  : 					GCMoneySend(lpObj->m_Index, lpObj->Money );

  001fc	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00202	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00204	50		 push	 eax
  00205	51		 push	 ecx
  00206	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0020b	83 c4 24	 add	 esp, 36			; 00000024H

; 511  : 
; 512  : 					if(lpObj->MapNumber == MAP_INDEX_RAKLION_BOSS)//Season 4.5 addon

  0020e	80 be 49 01 00
	00 3a		 cmp	 BYTE PTR [esi+329], 58	; 0000003aH
  00215	75 0d		 jne	 SHORT $LN3@Move

; 513  : 					{
; 514  : 						g_RaklionBattleUserMng.DeleteUserData(lpObj->m_Index);

  00217	8b 16		 mov	 edx, DWORD PTR [esi]
  00219	52		 push	 edx
  0021a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_RaklionBattleUserMng@@3VCRaklionBattleUserMng@@A ; g_RaklionBattleUserMng
  0021f	e8 00 00 00 00	 call	 ?DeleteUserData@CRaklionBattleUserMng@@QAEHH@Z ; CRaklionBattleUserMng::DeleteUserData
$LN3@Move:

; 515  : 					}
; 516  : 					return TRUE;

  00224	5f		 pop	 edi
  00225	5e		 pop	 esi
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	5b		 pop	 ebx

; 533  : 	return FALSE;
; 534  : 
; 535  : }

  0022c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022f	33 cd		 xor	 ecx, ebp
  00231	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c2 08 00	 ret	 8
$LN5@Move:

; 517  : 				}
; 518  : 			}
; 519  : 			else
; 520  : 			{
; 521  : 				::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 102)), lpObj->m_Index, 1);

  0023c	8b 06		 mov	 eax, DWORD PTR [esi]
  0023e	6a 01		 push	 1
  00240	50		 push	 eax
  00241	68 66 04 00 00	 push	 1126			; 00000466H
  00246	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0024b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00256	83 c4 0c	 add	 esp, 12			; 0000000cH

; 522  : 			}
; 523  : 		}
; 524  : 		else

  00259	eb 32		 jmp	 SHORT $LN32@Move
$LN6@Move:

; 525  : 		{
; 526  : 			char szTemp[256];
; 527  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 93)), NeedLevel);

  0025b	53		 push	 ebx
  0025c	68 5d 04 00 00	 push	 1117			; 0000045dH
  00261	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00266	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0026b	50		 push	 eax
  0026c	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$215444[ebp]
  00272	51		 push	 ecx
  00273	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 528  : 			::GCServerMsgStringSend(szTemp, lpObj->m_Index, 1);

  00279	8b 16		 mov	 edx, DWORD PTR [esi]
  0027b	6a 01		 push	 1
  0027d	52		 push	 edx
  0027e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$215444[ebp]
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0028a	83 c4 18	 add	 esp, 24			; 00000018H
$LN32@Move:

; 529  : 		}
; 530  : 	}
; 531  : 
; 532  : 	LogAddTD("[%s][%s] Use [%s %s] Fail GateNumber = %d", lpObj->AccountID, lpObj->Name, lMsg.Get(MSGGET(11, 185)), mapname, GateNumber);

  0028d	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _mapname$GSCopy$[ebp]
  00293	57		 push	 edi
  00294	51		 push	 ecx
  00295	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  0029a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0029f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  002a4	50		 push	 eax
  002a5	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  002a8	52		 push	 edx
  002a9	83 c6 6c	 add	 esi, 108		; 0000006cH
  002ac	56		 push	 esi
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002b8	83 c4 18	 add	 esp, 24			; 00000018H
$LN34@Move:

; 533  : 	return FALSE;
; 534  : 
; 535  : }

  002bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002be	5f		 pop	 edi
  002bf	5e		 pop	 esi
  002c0	33 cd		 xor	 ecx, ebp
  002c2	33 c0		 xor	 eax, eax
  002c4	5b		 pop	 ebx
  002c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ca	8b e5		 mov	 esp, ebp
  002cc	5d		 pop	 ebp
  002cd	c2 08 00	 ret	 8
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z ENDP	; CMoveCommand::Move
_TEXT	ENDS
PUBLIC	?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z	; GetKalimaGateLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z PROC	; GetKalimaGateLevel, COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 539  : 	if ( lpObj->Class == CLASS_MAGUMSA || lpObj->Class == CLASS_DARKLORD 
; 540  : #ifdef MONK
; 541  : 		|| lpObj->Class == CLASS_MONK
; 542  : #endif
; 543  : 		|| lpObj->Class == CLASS_SUMMONER)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	0f b7 81 b8 00
	00 00		 movzx	 eax, WORD PTR [ecx+184]
  0000d	83 f8 03	 cmp	 eax, 3
  00010	74 38		 je	 SHORT $LN10@GetKalimaG
  00012	83 f8 04	 cmp	 eax, 4
  00015	74 33		 je	 SHORT $LN10@GetKalimaG
  00017	83 f8 06	 cmp	 eax, 6
  0001a	74 2e		 je	 SHORT $LN10@GetKalimaG
  0001c	83 f8 05	 cmp	 eax, 5
  0001f	74 29		 je	 SHORT $LN10@GetKalimaG

; 548  : 			{
; 549  : 				return i;
; 550  : 			}
; 551  : 		}
; 552  : 	}
; 553  : 	else
; 554  : 	{
; 555  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  00021	0f bf 91 be 00
	00 00		 movsx	 edx, WORD PTR [ecx+190]
  00028	33 c0		 xor	 eax, eax
  0002a	b9 04 00 00 00	 mov	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+4
  0002f	90		 npad	 1
$LL4@GetKalimaG:

; 556  : 		{
; 557  : 			if ( lpObj->Level >= g_sttKALIMAGATE_LEVEL[i].iLOWER_BOUND && lpObj->Level <= g_sttKALIMAGATE_LEVEL[i].iUPPER_BOUND )

  00030	3b 51 fc	 cmp	 edx, DWORD PTR [ecx-4]
  00033	7c 04		 jl	 SHORT $LN3@GetKalimaG
  00035	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00037	7e 37		 jle	 SHORT $LN12@GetKalimaG
$LN3@GetKalimaG:

; 548  : 			{
; 549  : 				return i;
; 550  : 			}
; 551  : 		}
; 552  : 	}
; 553  : 	else
; 554  : 	{
; 555  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  00039	83 c1 10	 add	 ecx, 16			; 00000010H
  0003c	40		 inc	 eax
  0003d	81 f9 74 00 00
	00		 cmp	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+116
  00043	7c eb		 jl	 SHORT $LL4@GetKalimaG

; 558  : 			{
; 559  : 				return i;
; 560  : 			}
; 561  : 		}
; 562  : 	}
; 563  : 
; 564  : 	return -1;

  00045	83 c8 ff	 or	 eax, -1

; 565  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN10@GetKalimaG:

; 544  : 	{
; 545  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  0004a	0f bf 91 be 00
	00 00		 movsx	 edx, WORD PTR [ecx+190]
  00051	33 c0		 xor	 eax, eax
  00053	b9 0c 00 00 00	 mov	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+12
$LL9@GetKalimaG:

; 546  : 		{
; 547  : 			if ( lpObj->Level >= g_sttKALIMAGATE_LEVEL[i].iLOWER_BOUND_MAGUMSA && lpObj->Level <= g_sttKALIMAGATE_LEVEL[i].iUPPER_BOUND_MAGUMSA )

  00058	3b 51 fc	 cmp	 edx, DWORD PTR [ecx-4]
  0005b	7c 04		 jl	 SHORT $LN8@GetKalimaG
  0005d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0005f	7e 0f		 jle	 SHORT $LN12@GetKalimaG
$LN8@GetKalimaG:

; 544  : 	{
; 545  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  00061	83 c1 10	 add	 ecx, 16			; 00000010H
  00064	40		 inc	 eax
  00065	81 f9 7c 00 00
	00		 cmp	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+124
  0006b	7c eb		 jl	 SHORT $LL9@GetKalimaG

; 558  : 			{
; 559  : 				return i;
; 560  : 			}
; 561  : 		}
; 562  : 	}
; 563  : 
; 564  : 	return -1;

  0006d	83 c8 ff	 or	 eax, -1
$LN12@GetKalimaG:

; 565  : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z ENDP	; GetKalimaGateLevel
_TEXT	ENDS
PUBLIC	?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::MoveFree2Kalima
; Function compile flags: /Ogtp
;	COMDAT ?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::MoveFree2Kalima, COMDAT
; _this$ = ecx

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 569  : 	int iIdx = GetKalimaGateLevel(lpObj);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z ; GetKalimaGateLevel
  0000d	83 c4 04	 add	 esp, 4

; 570  : 
; 571  : 	if ( iIdx >= 6 )

  00010	83 f8 06	 cmp	 eax, 6
  00013	7c 19		 jl	 SHORT $LN2@MoveFree2K

; 572  : 	{
; 573  : 		iIdx = 5;

  00015	b8 05 00 00 00	 mov	 eax, 5
$LN1@MoveFree2K:

; 579  : 	}
; 580  : 
; 581  : 	int iGateNumber = iIdx + 88;

  0001a	83 c0 58	 add	 eax, 88			; 00000058H

; 582  : 
; 583  : 	return gObjMoveGate(lpObj->m_Index, iGateNumber);

  0001d	50		 push	 eax
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00026	83 c4 08	 add	 esp, 8
  00029	5e		 pop	 esi

; 584  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN2@MoveFree2K:

; 574  : 	}
; 575  : 
; 576  : 	if ( iIdx < 0 )

  0002e	85 c0		 test	 eax, eax
  00030	79 e8		 jns	 SHORT $LN1@MoveFree2K

; 577  : 	{
; 578  : 		return FALSE;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 584  : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::MoveFree2Kalima
_TEXT	ENDS
PUBLIC	?FindIndex@CMoveCommand@@QAEHH@Z		; CMoveCommand::FindIndex
; Function compile flags: /Ogtp
;	COMDAT ?FindIndex@CMoveCommand@@QAEHH@Z
_TEXT	SEGMENT
_MoveNum$ = 8						; size = 4
?FindIndex@CMoveCommand@@QAEHH@Z PROC			; CMoveCommand::FindIndex, COMDAT
; _this$ = ecx

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 699  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  00004	8b 75 08	 mov	 esi, DWORD PTR _MoveNum$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	8d 64 24 00	 npad	 4
$LL5@FindIndex@2:

; 700  : 	{
; 701  : 		if ( this->m_MoveCommandData[i].Index == -1 )

  00010	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00012	83 f9 ff	 cmp	 ecx, -1
  00015	74 10		 je	 SHORT $LN3@FindIndex@2

; 702  : 		{
; 703  : 			return -1;
; 704  : 		}
; 705  : 
; 706  : 		if ( this->m_MoveCommandData[i].Index ==MoveNum )

  00017	3b ce		 cmp	 ecx, esi
  00019	74 0f		 je	 SHORT $LN6@FindIndex@2

; 699  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  0001b	40		 inc	 eax
  0001c	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  00022	83 f8 32	 cmp	 eax, 50			; 00000032H
  00025	7c e9		 jl	 SHORT $LL5@FindIndex@2
$LN3@FindIndex@2:

; 707  : 		{
; 708  : 			return i;
; 709  : 		}
; 710  : 	}
; 711  : 
; 712  : 	return -1;

  00027	83 c8 ff	 or	 eax, -1
$LN6@FindIndex@2:
  0002a	5e		 pop	 esi

; 713  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?FindIndex@CMoveCommand@@QAEHH@Z ENDP			; CMoveCommand::FindIndex
_TEXT	ENDS
PUBLIC	?CheckMoveNum@CMoveCommand@@QAEHH@Z		; CMoveCommand::CheckMoveNum
; Function compile flags: /Ogtp
;	COMDAT ?CheckMoveNum@CMoveCommand@@QAEHH@Z
_TEXT	SEGMENT
_MoveNum$ = 8						; size = 4
?CheckMoveNum@CMoveCommand@@QAEHH@Z PROC		; CMoveCommand::CheckMoveNum, COMDAT
; _this$ = ecx

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 716  : #ifdef DEBUG_CODE
; 717  : 	LogAddC(2,"MoveNum: %d",MoveNum);
; 718  : #endif
; 719  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  00003	8b 55 08	 mov	 edx, DWORD PTR _MoveNum$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	83 c1 04	 add	 ecx, 4
  0000b	eb 03 8d 49 00	 npad	 5
$LL4@CheckMoveN:

; 720  : 	{
; 721  : 		if ( this->m_MoveCommandData[i].Index == MoveNum )

  00010	39 11		 cmp	 DWORD PTR [ecx], edx
  00012	74 12		 je	 SHORT $LN8@CheckMoveN

; 716  : #ifdef DEBUG_CODE
; 717  : 	LogAddC(2,"MoveNum: %d",MoveNum);
; 718  : #endif
; 719  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  00014	40		 inc	 eax
  00015	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  0001b	83 f8 32	 cmp	 eax, 50			; 00000032H
  0001e	7c f0		 jl	 SHORT $LL4@CheckMoveN

; 724  : 		}
; 725  : 
; 726  : 	}
; 727  : 
; 728  : 	return 0;

  00020	33 c0		 xor	 eax, eax

; 729  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN8@CheckMoveN:

; 722  : 		{
; 723  : 			return 1;

  00026	b8 01 00 00 00	 mov	 eax, 1

; 729  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?CheckMoveNum@CMoveCommand@@QAEHH@Z ENDP		; CMoveCommand::CheckMoveNum
_TEXT	ENDS
PUBLIC	?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z ; CMoveCommand::GetMoveCommandData
; Function compile flags: /Ogtp
;	COMDAT ?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z
_TEXT	SEGMENT
_nMapIndex$ = 8						; size = 4
?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z PROC ; CMoveCommand::GetMoveCommandData, COMDAT
; _this$ = ecx

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 733  : 	int nIndex = -1;
; 734  : 	// ----
; 735  : 	for( int i = 0; i < MAX_MOVE_COMMAND; i++ )

  00004	8b 75 08	 mov	 esi, DWORD PTR _nMapIndex$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	8d 64 24 00	 npad	 4
$LL5@GetMoveCom:

; 736  : 	{
; 737  : 		if( this->m_MoveCommandData[i].Index == nMapIndex )

  00010	39 32		 cmp	 DWORD PTR [edx], esi
  00012	74 13		 je	 SHORT $LN9@GetMoveCom

; 733  : 	int nIndex = -1;
; 734  : 	// ----
; 735  : 	for( int i = 0; i < MAX_MOVE_COMMAND; i++ )

  00014	40		 inc	 eax
  00015	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  0001b	83 f8 32	 cmp	 eax, 50			; 00000032H
  0001e	7c f0		 jl	 SHORT $LL5@GetMoveCom
$LN1@GetMoveCom:

; 747  : 	}
; 748  : 	// ----
; 749  : 	return 0;

  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 750  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN9@GetMoveCom:

; 738  : 		{
; 739  : 			nIndex = i;
; 740  : 			break;
; 741  : 		}
; 742  : 	}
; 743  : 	// ----
; 744  : 	if( nIndex >= 0 )

  00027	85 c0		 test	 eax, eax
  00029	78 f5		 js	 SHORT $LN1@GetMoveCom

; 745  : 	{
; 746  : 		return &this->m_MoveCommandData[nIndex];

  0002b	69 c0 10 02 00
	00		 imul	 eax, 528		; 00000210H
  00031	8d 44 08 04	 lea	 eax, DWORD PTR [eax+ecx+4]
  00035	5e		 pop	 esi

; 750  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z ENDP ; CMoveCommand::GetMoveCommandData
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMoveCommand@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMoveCommand@@UAEPAXI@Z PROC			; CMoveCommand::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMoveCommand@@UAE@XZ	; CMoveCommand::~CMoveCommand
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMoveCommand@@UAEPAXI@Z ENDP			; CMoveCommand::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z	; CMoveCommand::Move
; Function compile flags: /Ogtp
;	COMDAT ?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_NeedZen$ = -268					; size = 4
_GateNumber$ = -264					; size = 4
_szTemp$215499 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_MoveNum$ = 12						; size = 4
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z PROC	; CMoveCommand::Move, COMDAT
; _this$ = ecx

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 588  : 	int m_number = -1;
; 589  : 	int overlevel = 0;
; 590  : 	int subMoney = 2000;
; 591  : 
; 592  : 	int index = this->FindIndex(MoveNum);

  00013	8b 45 0c	 mov	 eax, DWORD PTR _MoveNum$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001b	57		 push	 edi
  0001c	50		 push	 eax
  0001d	8b d9		 mov	 ebx, ecx
  0001f	e8 00 00 00 00	 call	 ?FindIndex@CMoveCommand@@QAEHH@Z ; CMoveCommand::FindIndex

; 593  : #ifdef OLDCASHSHOP
; 594  : 	if ( g_bUseMoveMapBound == TRUE )
; 595  : 	{
; 596  : 		if ( g_CashItemPeriodSystem.CheckHaveItemPeriodSealEffect(lpObj) == FALSE )
; 597  : 		{
; 598  : 			if ( !this->CheckMoveMapBound(index))
; 599  : 			{
; 600  : 				return FALSE;
; 601  : 			}
; 602  : 		}
; 603  : 	}
; 604  : #endif
; 605  : 	if(this->CheckMoveNum(MoveNum) == 0)

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _MoveNum$[ebp]
  00027	51		 push	 ecx
  00028	8b cb		 mov	 ecx, ebx
  0002a	8b f8		 mov	 edi, eax
  0002c	e8 00 00 00 00	 call	 ?CheckMoveNum@CMoveCommand@@QAEHH@Z ; CMoveCommand::CheckMoveNum
  00031	85 c0		 test	 eax, eax

; 606  : 	{
; 607  : 		return FALSE;

  00033	0f 84 ea 01 00
	00		 je	 $LN24@Move@2

; 608  : 	}
; 609  : 
; 610  : 	int loc6 =  MoveNum;//season 3.0 add-on
; 611  : 
; 612  : 	/*if ( loc6 == 24 ) //season 3.0 changed
; 613  : 	{
; 614  : 		if ( g_CastleSiegeSync.GetCastleState() == 7 )
; 615  : 		{
; 616  : 			return FALSE;
; 617  : 		}
; 618  : 
; 619  : 		if ( g_CastleSiegeSync.CheckCastleOwnerMember(lpObj->m_Index) == FALSE && g_CastleSiegeSync.CheckCastleOwnerUnionMember(lpObj->m_Index) == FALSE)
; 620  : 		{
; 621  : 			return FALSE;
; 622  : 		}
; 623  : 	}*/
; 624  : 
; 625  : 	if(IT_MAP_RANGE(lpObj->MapNumber) != FALSE) //season 3.0 add-on

  00039	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  00040	3c 2d		 cmp	 al, 45			; 0000002dH
  00042	72 30		 jb	 SHORT $LN23@Move@2
  00044	b2 32		 mov	 dl, 50			; 00000032H
  00046	3a d0		 cmp	 dl, al
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	74 27		 je	 SHORT $LN23@Move@2

; 626  : 	{
; 627  : 		if(loc6 == 11 || loc6 == 12 || loc6 == 13 || loc6 == 23)

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _MoveNum$[ebp]
  00050	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00053	0f 84 ca 01 00
	00		 je	 $LN24@Move@2
  00059	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0005c	0f 84 c1 01 00
	00		 je	 $LN24@Move@2
  00062	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00065	0f 84 b8 01 00
	00		 je	 $LN24@Move@2
  0006b	83 f8 17	 cmp	 eax, 23			; 00000017H

; 628  : 		{
; 629  : 			return FALSE;

  0006e	0f 84 af 01 00
	00		 je	 $LN24@Move@2
$LN23@Move@2:

; 630  : 		}
; 631  : 	}
; 632  : 
; 633  : 	if ( index == -1 )

  00074	83 ff ff	 cmp	 edi, -1

; 634  : 	{
; 635  : 		return FALSE;

  00077	0f 84 a6 01 00
	00		 je	 $LN24@Move@2

; 636  : 	}
; 637  : 
; 638  : 	int NeedLevel = this->m_MoveCommandData[index].NeedLevel;

  0007d	69 ff 10 02 00
	00		 imul	 edi, 528		; 00000210H

; 639  : 	int NeedZen   = this->m_MoveCommandData[index].NeedZen;

  00083	8b 84 1f 08 02
	00 00		 mov	 eax, DWORD PTR [edi+ebx+520]

; 640  : 	int GateNumber= this->m_MoveCommandData[index].GateNumber;

  0008a	8b 8c 1f 10 02
	00 00		 mov	 ecx, DWORD PTR [edi+ebx+528]
  00091	03 fb		 add	 edi, ebx
  00093	8b 9f 0c 02 00
	00		 mov	 ebx, DWORD PTR [edi+524]
  00099	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _NeedZen$[ebp], eax

; 641  : 
; 642  : 	if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA 
; 643  : #ifdef MONK
; 644  : 		|| lpObj->Class == CLASS_MONK
; 645  : #endif
; 646  : 		|| lpObj->Class == CLASS_SUMMONER)

  0009f	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  000a6	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _GateNumber$[ebp], ecx
  000ac	83 f8 04	 cmp	 eax, 4
  000af	74 0f		 je	 SHORT $LN10@Move@2
  000b1	83 f8 03	 cmp	 eax, 3
  000b4	74 0a		 je	 SHORT $LN10@Move@2
  000b6	83 f8 06	 cmp	 eax, 6
  000b9	74 05		 je	 SHORT $LN10@Move@2
  000bb	83 f8 05	 cmp	 eax, 5
  000be	75 1c		 jne	 SHORT $LN8@Move@2
$LN10@Move@2:

; 647  : 	{
; 648  : 		if ( NeedLevel > 0 )

  000c0	85 db		 test	 ebx, ebx
  000c2	7e 18		 jle	 SHORT $LN8@Move@2

; 649  : 		{
; 650  : 			if (GateNumber != 273) //season 3.0 add-on (Swamp of Calmmness)

  000c4	81 f9 11 01 00
	00		 cmp	 ecx, 273		; 00000111H
  000ca	74 10		 je	 SHORT $LN8@Move@2

; 651  : 			{
; 652  : 				NeedLevel = NeedLevel *2 / 3;

  000cc	03 db		 add	 ebx, ebx
  000ce	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  000d3	f7 eb		 imul	 ebx
  000d5	8b da		 mov	 ebx, edx
  000d7	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  000da	03 da		 add	 ebx, edx
$LN8@Move@2:

; 653  : 			}
; 654  : 		}
; 655  : 	}
; 656  : 
; 657  : 	if ( GateNumber >= 0 )

  000dc	85 c9		 test	 ecx, ecx
  000de	0f 88 11 01 00
	00		 js	 $LN1@Move@2

; 658  : 	{
; 659  : 		if ( NeedLevel <= lpObj->Level )

  000e4	0f bf 96 be 00
	00 00		 movsx	 edx, WORD PTR [esi+190]
  000eb	3b da		 cmp	 ebx, edx
  000ed	0f 8f ca 00 00
	00		 jg	 $LN6@Move@2

; 660  : 		{
; 661  : 			if ( (lpObj->Money - NeedZen ) >= 0 )

  000f3	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  000f9	2b 85 f4 fe ff
	ff		 sub	 eax, DWORD PTR _NeedZen$[ebp]
  000ff	0f 88 99 00 00
	00		 js	 $LN5@Move@2

; 662  : 			{
; 663  : 				if ( gObjMoveGate(lpObj->m_Index, GateNumber ) != FALSE )

  00105	51		 push	 ecx
  00106	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00108	51		 push	 ecx
  00109	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  0010e	83 c4 08	 add	 esp, 8
  00111	85 c0		 test	 eax, eax
  00113	0f 84 d6 00 00
	00		 je	 $LN22@Move@2

; 664  : 				{
; 665  : 					lpObj->m_bPShopRedrawAbs = true;
; 666  : 					lpObj->Money -= NeedZen;

  00119	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _NeedZen$[ebp]
  0011f	29 96 f0 00 00
	00		 sub	 DWORD PTR [esi+240], edx
  00125	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]

; 667  : 
; 668  : 					LogAddTD("[%s][%s] Use [%s %s] Success : reduces money %d - %d", lpObj->AccountID, lpObj->Name, lMsg.Get(MSGGET(11, 185)), this->m_MoveCommandData[index].EngName, lpObj->Money, NeedLevel);

  0012b	53		 push	 ebx
  0012c	50		 push	 eax
  0012d	81 c7 07 01 00
	00		 add	 edi, 263		; 00000107H
  00133	57		 push	 edi
  00134	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  00139	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0013e	c6 86 c7 0e 00
	00 01		 mov	 BYTE PTR [esi+3783], 1
  00145	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0014a	50		 push	 eax
  0014b	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  0014e	50		 push	 eax
  0014f	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00152	51		 push	 ecx
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 669  : 
; 670  : 					GCMoneySend(lpObj->m_Index, lpObj->Money );

  0015e	8b 96 f0 00 00
	00		 mov	 edx, DWORD PTR [esi+240]
  00164	8b 06		 mov	 eax, DWORD PTR [esi]
  00166	52		 push	 edx
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0016d	83 c4 24	 add	 esp, 36			; 00000024H

; 671  : 					
; 672  : 					if(lpObj->MapNumber == MAP_INDEX_RAKLION_BOSS)//Season 4.5 addon

  00170	80 be 49 01 00
	00 3a		 cmp	 BYTE PTR [esi+329], 58	; 0000003aH
  00177	75 0d		 jne	 SHORT $LN3@Move@2

; 673  : 					{
; 674  : 						g_RaklionBattleUserMng.DeleteUserData(lpObj->m_Index);

  00179	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0017b	51		 push	 ecx
  0017c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_RaklionBattleUserMng@@3VCRaklionBattleUserMng@@A ; g_RaklionBattleUserMng
  00181	e8 00 00 00 00	 call	 ?DeleteUserData@CRaklionBattleUserMng@@QAEHH@Z ; CRaklionBattleUserMng::DeleteUserData
$LN3@Move@2:

; 675  : 					}
; 676  : 					return TRUE;

  00186	5f		 pop	 edi
  00187	5e		 pop	 esi
  00188	b8 01 00 00 00	 mov	 eax, 1
  0018d	5b		 pop	 ebx

; 693  : 	return FALSE;
; 694  : 
; 695  : }

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00191	33 cd		 xor	 ecx, ebp
  00193	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c2 08 00	 ret	 8
$LN5@Move@2:

; 677  : 				}
; 678  : 			}
; 679  : 			else
; 680  : 			{
; 681  : 				::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 102)), lpObj->m_Index, 1);

  0019e	8b 16		 mov	 edx, DWORD PTR [esi]
  001a0	6a 01		 push	 1
  001a2	52		 push	 edx
  001a3	68 66 04 00 00	 push	 1126			; 00000466H
  001a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001ad	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 682  : 			}
; 683  : 		}
; 684  : 		else

  001bb	eb 32		 jmp	 SHORT $LN22@Move@2
$LN6@Move@2:

; 685  : 		{
; 686  : 			char szTemp[256];
; 687  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 93)), NeedLevel);

  001bd	53		 push	 ebx
  001be	68 5d 04 00 00	 push	 1117			; 0000045dH
  001c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001c8	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001cd	50		 push	 eax
  001ce	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$215499[ebp]
  001d4	50		 push	 eax
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 688  : 			::GCServerMsgStringSend(szTemp, lpObj->m_Index, 1);

  001db	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001dd	6a 01		 push	 1
  001df	51		 push	 ecx
  001e0	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$215499[ebp]
  001e6	52		 push	 edx
  001e7	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  001ec	83 c4 18	 add	 esp, 24			; 00000018H
$LN22@Move@2:

; 682  : 			}
; 683  : 		}
; 684  : 		else

  001ef	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _GateNumber$[ebp]
$LN1@Move@2:

; 689  : 		}
; 690  : 	}
; 691  : 
; 692  : 	LogAddTD("[%s][%s] Use [%s %s] Fail GateNumber = %d", lpObj->AccountID, lpObj->Name, lMsg.Get(MSGGET(11, 185)), this->m_MoveCommandData[index].EngName, GateNumber);

  001f5	51		 push	 ecx
  001f6	81 c7 07 01 00
	00		 add	 edi, 263		; 00000107H
  001fc	57		 push	 edi
  001fd	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  00202	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00207	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0020c	50		 push	 eax
  0020d	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  00210	50		 push	 eax
  00211	83 c6 6c	 add	 esi, 108		; 0000006cH
  00214	56		 push	 esi
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00220	83 c4 18	 add	 esp, 24			; 00000018H
$LN24@Move@2:

; 693  : 	return FALSE;
; 694  : 
; 695  : }

  00223	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00226	5f		 pop	 edi
  00227	5e		 pop	 esi
  00228	33 cd		 xor	 ecx, ebp
  0022a	33 c0		 xor	 eax, eax
  0022c	5b		 pop	 ebx
  0022d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c2 08 00	 ret	 8
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP	; CMoveCommand::Move
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgMoveCommand@@YAXXZ
text$yc	SEGMENT
??__EgMoveCommand@@YAXXZ PROC				; `dynamic initializer for 'gMoveCommand'', COMDAT

; 18   : CMoveCommand gMoveCommand;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00005	e8 00 00 00 00	 call	 ??0CMoveCommand@@QAE@XZ	; CMoveCommand::CMoveCommand
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgMoveCommand@@YAXXZ ; `dynamic atexit destructor for 'gMoveCommand''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgMoveCommand@@YAXXZ ENDP				; `dynamic initializer for 'gMoveCommand''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgMoveCommand@@YAXXZ
text$yd	SEGMENT
??__FgMoveCommand@@YAXXZ PROC				; `dynamic atexit destructor for 'gMoveCommand'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00005	e9 00 00 00 00	 jmp	 ??1CMoveCommand@@UAE@XZ	; CMoveCommand::~CMoveCommand
??__FgMoveCommand@@YAXXZ ENDP				; `dynamic atexit destructor for 'gMoveCommand''
text$yd	ENDS
PUBLIC	?gMoveCommand@@3VCMoveCommand@@A		; gMoveCommand
_BSS	SEGMENT
?gMoveCommand@@3VCMoveCommand@@A DB 06bd4H DUP (?)	; gMoveCommand
_BSS	ENDS
CRT$XCU	SEGMENT
_gMoveCommand$initializer$ DD FLAT:??__EgMoveCommand@@YAXXZ
CRT$XCU	ENDS
END
