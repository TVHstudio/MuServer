; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\MultiCheckSum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMultiCheckSum@@6B@				; CMultiCheckSum::`vftable'
PUBLIC	??1CMultiCheckSum@@UAE@XZ			; CMultiCheckSum::~CMultiCheckSum
PUBLIC	??_R4CMultiCheckSum@@6B@			; CMultiCheckSum::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMultiCheckSum@@@8			; CMultiCheckSum `RTTI Type Descriptor'
PUBLIC	??_R3CMultiCheckSum@@8				; CMultiCheckSum::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMultiCheckSum@@8				; CMultiCheckSum::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMultiCheckSum@@8			; CMultiCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMultiCheckSum@@UAEPAXI@Z:PROC		; CMultiCheckSum::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMultiCheckSum@@8
; File e:\work\tranet_version\gs\gameserver\multichecksum.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMultiCheckSum@@8 DD FLAT:??_R0?AVCMultiCheckSum@@@8 ; CMultiCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMultiCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R2CMultiCheckSum@@8
rdata$r	SEGMENT
??_R2CMultiCheckSum@@8 DD FLAT:??_R1A@?0A@EA@CMultiCheckSum@@8 ; CMultiCheckSum::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMultiCheckSum@@8
rdata$r	SEGMENT
??_R3CMultiCheckSum@@8 DD 00H				; CMultiCheckSum::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMultiCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMultiCheckSum@@@8
_DATA	SEGMENT
??_R0?AVCMultiCheckSum@@@8 DD FLAT:??_7type_info@@6B@	; CMultiCheckSum `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMultiCheckSum@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMultiCheckSum@@6B@
rdata$r	SEGMENT
??_R4CMultiCheckSum@@6B@ DD 00H				; CMultiCheckSum::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMultiCheckSum@@@8
	DD	FLAT:??_R3CMultiCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_7CMultiCheckSum@@6B@
CONST	SEGMENT
??_7CMultiCheckSum@@6B@ DD FLAT:??_R4CMultiCheckSum@@6B@ ; CMultiCheckSum::`vftable'
	DD	FLAT:??_ECMultiCheckSum@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CMultiCheckSum@@UAE@XZ
_TEXT	SEGMENT
??1CMultiCheckSum@@UAE@XZ PROC				; CMultiCheckSum::~CMultiCheckSum, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMultiCheckSum@@6B@

; 18   : 	return;
; 19   : }

  00006	c3		 ret	 0
??1CMultiCheckSum@@UAE@XZ ENDP				; CMultiCheckSum::~CMultiCheckSum
_TEXT	ENDS
PUBLIC	?Init@CMultiCheckSum@@QAEXXZ			; CMultiCheckSum::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMultiCheckSum@@QAEXXZ
_TEXT	SEGMENT
?Init@CMultiCheckSum@@QAEXXZ PROC			; CMultiCheckSum::Init, COMDAT
; _this$ = ecx

; 24   : 	for (int i=0; i < MAX_MULTICHECKSUM; i++)
; 25   : 	{
; 26   : 		this->m_dwLoaded[i]=0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00005	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00008	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00011	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00014	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00017	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0001a	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  0001d	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 27   : 	}
; 28   : 	this->m_sFilePath[0]=0;

  00020	88 81 2c a0 00
	00		 mov	 BYTE PTR [ecx+41004], al

; 29   : }

  00026	c3		 ret	 0
?Init@CMultiCheckSum@@QAEXXZ ENDP			; CMultiCheckSum::Init
_TEXT	ENDS
PUBLIC	?SetFilePath@CMultiCheckSum@@QAEXPAD@Z		; CMultiCheckSum::SetFilePath
; Function compile flags: /Ogtp
;	COMDAT ?SetFilePath@CMultiCheckSum@@QAEXPAD@Z
_TEXT	SEGMENT
_filepath$ = 8						; size = 4
?SetFilePath@CMultiCheckSum@@QAEXPAD@Z PROC		; CMultiCheckSum::SetFilePath, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   : 	strcpy(this->m_sFilePath, filepath);

  00003	8b 45 08	 mov	 eax, DWORD PTR _filepath$[ebp]
  00006	8d 91 2c a0 00
	00		 lea	 edx, DWORD PTR [ecx+41004]
  0000c	2b d0		 sub	 edx, eax
  0000e	8b ff		 npad	 2
$LL3@SetFilePat:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00015	40		 inc	 eax
  00016	84 c9		 test	 cl, cl
  00018	75 f6		 jne	 SHORT $LL3@SetFilePat

; 35   : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetFilePath@CMultiCheckSum@@QAEXPAD@Z ENDP		; CMultiCheckSum::SetFilePath
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	?LoadFile@CMultiCheckSum@@AAEHPADH@Z		; CMultiCheckSum::LoadFile
EXTRN	_fclose:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadFile@CMultiCheckSum@@AAEHPADH@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_index$ = 12						; size = 4
?LoadFile@CMultiCheckSum@@AAEHPADH@Z PROC		; CMultiCheckSum::LoadFile, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : 	FILE* fp;
; 65   : 	
; 66   : 	fp=fopen(filename, "rb");

  00003	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  0000d	50		 push	 eax
  0000e	8b f9		 mov	 edi, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	8b f0		 mov	 esi, eax
  00017	83 c4 08	 add	 esp, 8

; 67   : 
; 68   : 	if (fp == 0)

  0001a	85 f6		 test	 esi, esi
  0001c	75 06		 jne	 SHORT $LN1@LoadFile
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 76   : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN1@LoadFile:

; 69   : 	{
; 70   : 		return 0;
; 71   : 	}
; 72   : 
; 73   : 	fread(this->m_dwgCheckSum[index], sizeof(m_dwgCheckSum[index]), 1, fp);

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _index$[ebp]
  00027	56		 push	 esi
  00028	6a 01		 push	 1
  0002a	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  0002d	8d 54 39 2c	 lea	 edx, DWORD PTR [ecx+edi+44]
  00031	68 00 10 00 00	 push	 4096			; 00001000H
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _fread

; 74   : 	fclose(fp);

  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _fclose
  00042	83 c4 14	 add	 esp, 20			; 00000014H
  00045	5f		 pop	 edi

; 75   : 	return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 76   : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?LoadFile@CMultiCheckSum@@AAEHPADH@Z ENDP		; CMultiCheckSum::LoadFile
_TEXT	ENDS
PUBLIC	??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@ ; `string'
PUBLIC	??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@ ; `string'
PUBLIC	?CompareCheckSum@CMultiCheckSum@@QAEHHKK@Z	; CMultiCheckSum::CompareCheckSum
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@
CONST	SEGMENT
??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@ DB 'CheckSu'
	DB	'm%d-Exe Compare Success [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@
CONST	SEGMENT
??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@ DB 'Ch'
	DB	'eckSum%d-Exe Compare Fail %d %d %d %d [%s]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CompareCheckSum@CMultiCheckSum@@QAEHHKK@Z
_TEXT	SEGMENT
tv240 = -4						; size = 4
_aIndex$ = 8						; size = 4
_TableNum$ = 12						; size = 4
_Key$ = 16						; size = 4
?CompareCheckSum@CMultiCheckSum@@QAEHHKK@Z PROC		; CMultiCheckSum::CompareCheckSum, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 80   : 	int i;
; 81   : 
; 82   : 	for ( i=0;i<MAX_MULTICHECKSUM;i++)

  00004	8b 55 0c	 mov	 edx, DWORD PTR _TableNum$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000c	57		 push	 edi
  0000d	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00010	33 f6		 xor	 esi, esi
  00012	89 45 fc	 mov	 DWORD PTR tv240[ebp], eax
  00015	8d 5c 91 2c	 lea	 ebx, DWORD PTR [ecx+edx*4+44]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL12@CompareChe:

; 83   : 	{
; 84   : 		if(this->m_dwLoaded[i] != 0 )

  00020	8b 45 fc	 mov	 eax, DWORD PTR tv240[ebp]
  00023	83 38 00	 cmp	 DWORD PTR [eax], 0
  00026	74 32		 je	 SHORT $LN5@CompareChe

; 85   : 		{
; 86   : 			if ( ( this->m_dwgCheckSum[i][TableNum] ) == Key)	

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]

; 90   : 			}
; 91   : 			else
; 92   : 			{
; 93   : 				LogAddTD("CheckSum%d-Exe Compare Fail %d %d %d %d [%s]", i, this->m_dwgCheckSum[i][TableNum] ,Key, TableNum, gObj[aIndex].AccountID );

  0002a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	3b 45 10	 cmp	 eax, DWORD PTR _Key$[ebp]
  00033	74 40		 je	 SHORT $LN10@CompareChe
  00035	8b cf		 mov	 ecx, edi
  00037	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0003d	8d 4c 11 6c	 lea	 ecx, DWORD PTR [ecx+edx+108]
  00041	8b 55 0c	 mov	 edx, DWORD PTR _TableNum$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d 10	 mov	 ecx, DWORD PTR _Key$[ebp]
  00048	52		 push	 edx
  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	56		 push	 esi
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LBDBJDCL@CheckSum?$CFd?9Exe?5Compare?5Fail?5?$CFd?5?$CF@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00057	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@CompareChe:

; 80   : 	int i;
; 81   : 
; 82   : 	for ( i=0;i<MAX_MULTICHECKSUM;i++)

  0005a	83 45 fc 04	 add	 DWORD PTR tv240[ebp], 4
  0005e	46		 inc	 esi
  0005f	81 c3 00 10 00
	00		 add	 ebx, 4096		; 00001000H
  00065	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00068	7c b6		 jl	 SHORT $LL12@CompareChe

; 94   : 			}
; 95   : 		}
; 96   : 	}
; 97   : 	return 0;

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	33 c0		 xor	 eax, eax
  0006e	5b		 pop	 ebx

; 98   : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 0c 00	 ret	 12			; 0000000cH
$LN10@CompareChe:

; 87   : 			{
; 88   : 				LogAddTD("CheckSum%d-Exe Compare Success [%s]", i, gObj[aIndex].AccountID );

  00075	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0007b	8d 44 17 6c	 lea	 eax, DWORD PTR [edi+edx+108]
  0007f	50		 push	 eax
  00080	56		 push	 esi
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DHLAACA@CheckSum?$CFd?9Exe?5Compare?5Success?5?$FL@
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi

; 89   : 				return 1;

  00091	b8 01 00 00 00	 mov	 eax, 1
  00096	5b		 pop	 ebx

; 98   : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
?CompareCheckSum@CMultiCheckSum@@QAEHHKK@Z ENDP		; CMultiCheckSum::CompareCheckSum
_TEXT	ENDS
PUBLIC	??0CMultiCheckSum@@QAE@XZ			; CMultiCheckSum::CMultiCheckSum
; Function compile flags: /Ogtp
;	COMDAT ??0CMultiCheckSum@@QAE@XZ
_TEXT	SEGMENT
??0CMultiCheckSum@@QAE@XZ PROC				; CMultiCheckSum::CMultiCheckSum, COMDAT
; _this$ = ecx

; 11   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMultiCheckSum@@6B@

; 12   : 	this->Init();

  00006	e8 00 00 00 00	 call	 ?Init@CMultiCheckSum@@QAEXXZ ; CMultiCheckSum::Init

; 13   : }

  0000b	8b c1		 mov	 eax, ecx
  0000d	c3		 ret	 0
??0CMultiCheckSum@@QAE@XZ ENDP				; CMultiCheckSum::CMultiCheckSum
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMultiCheckSum@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMultiCheckSum@@UAEPAXI@Z PROC			; CMultiCheckSum::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMultiCheckSum@@UAE@XZ ; CMultiCheckSum::~CMultiCheckSum
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMultiCheckSum@@UAEPAXI@Z ENDP			; CMultiCheckSum::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadFile@CMultiCheckSum@@QAEHXZ		; CMultiCheckSum::LoadFile
EXTRN	__imp__wsprintfA:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@ DB 'Load Checksum'
	DB	' file : %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@
CONST	SEGMENT
??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@ DB '%s\CheckSum%d.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@
CONST	SEGMENT
??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@ DB '%s\CheckSum.dat', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadFile@CMultiCheckSum@@QAEHXZ
_TEXT	SEGMENT
_filenames$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?LoadFile@CMultiCheckSum@@QAEHXZ PROC			; CMultiCheckSum::LoadFile, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 39   : 	char filenames[256];
; 40   : 	int i;
; 41   : 
; 42   : 	for (i=0; i<MAX_MULTICHECKSUM; i++)

  00018	33 f6		 xor	 esi, esi
  0001a	8d 9f 2c a0 00
	00		 lea	 ebx, DWORD PTR [edi+41004]
$LL11@LoadFile@2:

; 43   : 	{
; 44   : 		if (i == 0)

  00020	85 f6		 test	 esi, esi
  00022	75 18		 jne	 SHORT $LN3@LoadFile@2

; 45   : 		{
; 46   : 			wsprintf(filenames, "%s\\CheckSum.dat", this->m_sFilePath);

  00024	53		 push	 ebx
  00025	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filenames$[ebp]
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JGOBHOLO@?$CFs?2CheckSum?4dat?$AA@
  00030	50		 push	 eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   : 		}
; 48   : 		else

  0003a	eb 17		 jmp	 SHORT $LN2@LoadFile@2
$LN3@LoadFile@2:

; 49   : 		{
; 50   : 			wsprintf(filenames, "%s\\CheckSum%d.dat", this->m_sFilePath, i);

  0003c	56		 push	 esi
  0003d	53		 push	 ebx
  0003e	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _filenames$[ebp]
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EHAAJIPE@?$CFs?2CheckSum?$CFd?4dat?$AA@
  00049	51		 push	 ecx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00050	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@LoadFile@2:

; 51   : 		}
; 52   : 		if (this->LoadFile(filenames, i)  != 0)

  00053	56		 push	 esi
  00054	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _filenames$[ebp]
  0005a	52		 push	 edx
  0005b	8b cf		 mov	 ecx, edi
  0005d	e8 00 00 00 00	 call	 ?LoadFile@CMultiCheckSum@@AAEHPADH@Z ; CMultiCheckSum::LoadFile
  00062	85 c0		 test	 eax, eax
  00064	74 1d		 je	 SHORT $LN5@LoadFile@2

; 53   : 		{
; 54   : 			this->m_dwLoaded[i]=1;
; 55   : 			LogAddTD("Load Checksum file : %s", filenames);

  00066	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filenames$[ebp]
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JOADKNJG@Load?5Checksum?5file?5?3?5?$CFs?$AA@
  00072	c7 44 b7 04 01
	00 00 00	 mov	 DWORD PTR [edi+esi*4+4], 1
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00080	83 c4 08	 add	 esp, 8
$LN5@LoadFile@2:

; 39   : 	char filenames[256];
; 40   : 	int i;
; 41   : 
; 42   : 	for (i=0; i<MAX_MULTICHECKSUM; i++)

  00083	46		 inc	 esi
  00084	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00087	7c 97		 jl	 SHORT $LL11@LoadFile@2

; 56   : 		}
; 57   : 	}
; 58   : 	return 1;
; 59   : }

  00089	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	33 cd		 xor	 ecx, ebp
  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	5b		 pop	 ebx
  00096	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?LoadFile@CMultiCheckSum@@QAEHXZ ENDP			; CMultiCheckSum::LoadFile
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MultiChecksum@@YAXXZ
text$yc	SEGMENT
??__Eg_MultiChecksum@@YAXXZ PROC			; `dynamic initializer for 'g_MultiChecksum'', COMDAT

; 7    : CMultiCheckSum g_MultiChecksum;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MultiChecksum@@3VCMultiCheckSum@@A ; g_MultiChecksum
  00005	e8 00 00 00 00	 call	 ??0CMultiCheckSum@@QAE@XZ ; CMultiCheckSum::CMultiCheckSum
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MultiChecksum@@YAXXZ ; `dynamic atexit destructor for 'g_MultiChecksum''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MultiChecksum@@YAXXZ ENDP			; `dynamic initializer for 'g_MultiChecksum''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MultiChecksum@@YAXXZ
text$yd	SEGMENT
??__Fg_MultiChecksum@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MultiChecksum'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MultiChecksum@@3VCMultiCheckSum@@A ; g_MultiChecksum
  00005	e9 00 00 00 00	 jmp	 ??1CMultiCheckSum@@UAE@XZ ; CMultiCheckSum::~CMultiCheckSum
??__Fg_MultiChecksum@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MultiChecksum''
text$yd	ENDS
PUBLIC	?g_MultiChecksum@@3VCMultiCheckSum@@A		; g_MultiChecksum
_BSS	SEGMENT
?g_MultiChecksum@@3VCMultiCheckSum@@A DB 0a12cH DUP (?)	; g_MultiChecksum
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MultiChecksum$initializer$ DD FLAT:??__Eg_MultiChecksum@@YAXXZ
CRT$XCU	ENDS
END
