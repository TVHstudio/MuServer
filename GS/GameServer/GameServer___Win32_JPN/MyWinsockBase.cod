; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\common\MyWinsockBase.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1MyWinsockBase@@QAE@XZ			; MyWinsockBase::~MyWinsockBase
EXTRN	__imp__WSACleanup@0:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\common\mywinsockbase.cpp
;	COMDAT ??1MyWinsockBase@@QAE@XZ
_TEXT	SEGMENT
??1MyWinsockBase@@QAE@XZ PROC				; MyWinsockBase::~MyWinsockBase, COMDAT
; _this$ = ecx

; 14   : 	WSACleanup();

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__WSACleanup@0
??1MyWinsockBase@@QAE@XZ ENDP				; MyWinsockBase::~MyWinsockBase
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@ ; `string'
PUBLIC	??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@ ; `string'
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Startup@MyWinsockBase@@AAEHXZ			; MyWinsockBase::Startup
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@
CONST	SEGMENT
??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@ DB 'W'
	DB	'INSOCK ', 0b9H, 0f6H, 0c0H, 0fcH, 0c0H, 0ccH, ' ', 0b3H, 0b7H
	DB	0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@
CONST	SEGMENT
??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@ DB 'W'
	DB	'INSOCK ', 0c3H, 0caH, 0b1H, 0e2H, 0c8H, 0adH, ' ', 0bfH, 0a1H
	DB	0b7H, 0afH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Startup@MyWinsockBase@@AAEHXZ
_TEXT	SEGMENT
_wsaData$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
?Startup@MyWinsockBase@@AAEHXZ PROC			; MyWinsockBase::Startup, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi

; 19   : 	WORD wVersionRequested;
; 20   : 	WSADATA wsaData;
; 21   : 	int err;
; 22   : 
; 23   : 	wVersionRequested = MAKEWORD(2,2);
; 24   : 
; 25   : 	err = WSAStartup( wVersionRequested, &wsaData);

  00014	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _wsaData$[ebp]
  0001a	50		 push	 eax
  0001b	68 02 02 00 00	 push	 514			; 00000202H
  00020	8b f1		 mov	 esi, ecx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8

; 26   : 	if( err != 0)

  00028	85 c0		 test	 eax, eax
  0002a	74 0e		 je	 SHORT $LN3@Startup

; 27   : 	{
; 28   : 		MessageBox(NULL,"WINSOCK 초기화 에러","Error",MB_OK);

  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error?$AA@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DMEOAPJM@WINSOCK?5?C?J?$LB?b?H?$KN?5?$LP?$KB?$LH?$KP?$AA@

; 29   : 		return FALSE;

  00038	eb 44		 jmp	 SHORT $LN6@Startup
$LN3@Startup:

; 30   : 	}
; 31   : 	if ( LOBYTE( wsaData.wVersion ) != 2 ||
; 32   :         HIBYTE( wsaData.wVersion ) != 2 ) {

  0003a	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _wsaData$[ebp]
  00040	3c 02		 cmp	 al, 2
  00042	75 28		 jne	 SHORT $LN1@Startup
  00044	c1 e8 08	 shr	 eax, 8
  00047	3c 02		 cmp	 al, 2
  00049	75 21		 jne	 SHORT $LN1@Startup

; 35   : 		return FALSE;
; 36   : 	}
; 37   : 	m_socket = INVALID_SOCKET;
; 38   : 	m_iMaxSockets = wsaData.iMaxSockets;	

  0004b	0f b7 4d f2	 movzx	 ecx, WORD PTR _wsaData$[ebp+390]
  0004f	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
  00056	89 0e		 mov	 DWORD PTR [esi], ecx

; 39   : 	return TRUE;

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	5e		 pop	 esi

; 40   : }

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00061	33 cd		 xor	 ecx, ebp
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN1@Startup:

; 33   : 		WSACleanup( );

  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0

; 34   : 		MessageBox(NULL,"WINSOCK 버전이 낮습니다.","Error",MB_OK);

  00072	6a 00		 push	 0
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error?$AA@
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GGDDBEFH@WINSOCK?5?$LJ?v?$MA?$PM?$MA?L?5?$LD?$LH?$LN?$MA?$LE?O?$LE?Y?4?$AA@
$LN6@Startup:
  0007e	6a 00		 push	 0
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 40   : }

  00086	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	33 c0		 xor	 eax, eax
  0008d	5e		 pop	 esi
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?Startup@MyWinsockBase@@AAEHXZ ENDP			; MyWinsockBase::Startup
_TEXT	ENDS
PUBLIC	?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z	; MyWinsockBase::CreateSocket
EXTRN	__imp__socket@12:PROC
; Function compile flags: /Ogtp
;	COMDAT ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z PROC	; MyWinsockBase::CreateSocket, COMDAT
; _this$ = ecx

; 43   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 44   : 	int size = sizeof(int);
; 45   : 
; 46   : 	m_socket = socket( PF_INET, SOCK_STREAM, 0);

  00004	6a 00		 push	 0
  00006	6a 01		 push	 1
  00008	6a 02		 push	 2
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  00012	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 47   : 	if( m_socket == INVALID_SOCKET ) 

  00015	83 f8 ff	 cmp	 eax, -1
  00018	75 07		 jne	 SHORT $LN1@CreateSock

; 48   : 	{
; 49   : 		return FALSE;

  0001a	33 c0		 xor	 eax, eax
  0001c	5e		 pop	 esi

; 54   : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN1@CreateSock:

; 50   : 	}
; 51   : 
; 52   : 	m_hWnd = hWnd;

  00021	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00024	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 53   : 	return TRUE;

  00027	b8 01 00 00 00	 mov	 eax, 1
  0002c	5e		 pop	 esi

; 54   : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ENDP	; MyWinsockBase::CreateSocket
_TEXT	ENDS
PUBLIC	?Close@MyWinsockBase@@QAEHXZ			; MyWinsockBase::Close
EXTRN	__imp__closesocket@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Close@MyWinsockBase@@QAEHXZ
_TEXT	SEGMENT
?Close@MyWinsockBase@@QAEHXZ PROC			; MyWinsockBase::Close, COMDAT
; _this$ = ecx

; 57   : {	

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 58   : 	closesocket(m_socket);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 59   : 	m_socket = INVALID_SOCKET;

  0000d	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1

; 60   : 	return TRUE;

  00014	b8 01 00 00 00	 mov	 eax, 1
  00019	5e		 pop	 esi

; 61   : }

  0001a	c3		 ret	 0
?Close@MyWinsockBase@@QAEHXZ ENDP			; MyWinsockBase::Close
_TEXT	ENDS
PUBLIC	?Close@MyWinsockBase@@QAEHI@Z			; MyWinsockBase::Close
EXTRN	__imp__shutdown@8:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Close@MyWinsockBase@@QAEHI@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
?Close@MyWinsockBase@@QAEHI@Z PROC			; MyWinsockBase::Close, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 66   : 	shutdown(socket,0);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _socket$[ebp]
  00008	6a 00		 push	 0
  0000a	57		 push	 edi
  0000b	8b f1		 mov	 esi, ecx
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__shutdown@8

; 67   : 	closesocket(socket);

  00013	57		 push	 edi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  0001a	5f		 pop	 edi

; 68   : 	m_socket = INVALID_SOCKET;

  0001b	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1

; 69   : 	return TRUE;

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	5e		 pop	 esi

; 70   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?Close@MyWinsockBase@@QAEHI@Z ENDP			; MyWinsockBase::Close
_TEXT	ENDS
PUBLIC	?Close2@MyWinsockBase@@QAEHI@Z			; MyWinsockBase::Close2
; Function compile flags: /Ogtp
;	COMDAT ?Close2@MyWinsockBase@@QAEHI@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
?Close2@MyWinsockBase@@QAEHI@Z PROC			; MyWinsockBase::Close2, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 74   : 	shutdown(m_socket,SD_SEND);

  00006	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00009	6a 01		 push	 1
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__shutdown@8

; 75   : 	closesocket(socket);

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _socket$[ebp]
  00015	51		 push	 ecx
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 76   : 	m_socket = INVALID_SOCKET;

  0001c	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1

; 77   : 	return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	5e		 pop	 esi

; 78   : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?Close2@MyWinsockBase@@QAEHI@Z ENDP			; MyWinsockBase::Close2
_TEXT	ENDS
PUBLIC	?GetSocket@MyWinsockBase@@QAEIXZ		; MyWinsockBase::GetSocket
; Function compile flags: /Ogtp
;	COMDAT ?GetSocket@MyWinsockBase@@QAEIXZ
_TEXT	SEGMENT
?GetSocket@MyWinsockBase@@QAEIXZ PROC			; MyWinsockBase::GetSocket, COMDAT
; _this$ = ecx

; 83   : 	return m_socket;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 84   : }

  00003	c3		 ret	 0
?GetSocket@MyWinsockBase@@QAEIXZ ENDP			; MyWinsockBase::GetSocket
_TEXT	ENDS
PUBLIC	?GetRecvBuffSize@MyWinsockBase@@QAEHXZ		; MyWinsockBase::GetRecvBuffSize
; Function compile flags: /Ogtp
;	COMDAT ?GetRecvBuffSize@MyWinsockBase@@QAEHXZ
_TEXT	SEGMENT
?GetRecvBuffSize@MyWinsockBase@@QAEHXZ PROC		; MyWinsockBase::GetRecvBuffSize, COMDAT
; _this$ = ecx

; 88   : 	return m_recvbufsize;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 89   : }

  00003	c3		 ret	 0
?GetRecvBuffSize@MyWinsockBase@@QAEHXZ ENDP		; MyWinsockBase::GetRecvBuffSize
_TEXT	ENDS
PUBLIC	?GetSendBuffSize@MyWinsockBase@@QAEHXZ		; MyWinsockBase::GetSendBuffSize
; Function compile flags: /Ogtp
;	COMDAT ?GetSendBuffSize@MyWinsockBase@@QAEHXZ
_TEXT	SEGMENT
?GetSendBuffSize@MyWinsockBase@@QAEHXZ PROC		; MyWinsockBase::GetSendBuffSize, COMDAT
; _this$ = ecx

; 93   : 	return m_sendbufsize;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 94   : }

  00003	c3		 ret	 0
?GetSendBuffSize@MyWinsockBase@@QAEHXZ ENDP		; MyWinsockBase::GetSendBuffSize
_TEXT	ENDS
PUBLIC	?GetConnect@MyWinsockBase@@QAEHXZ		; MyWinsockBase::GetConnect
; Function compile flags: /Ogtp
;	COMDAT ?GetConnect@MyWinsockBase@@QAEHXZ
_TEXT	SEGMENT
?GetConnect@MyWinsockBase@@QAEHXZ PROC			; MyWinsockBase::GetConnect, COMDAT
; _this$ = ecx

; 98   : 	return this->m_Connect;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 99   : }

  00003	c3		 ret	 0
?GetConnect@MyWinsockBase@@QAEHXZ ENDP			; MyWinsockBase::GetConnect
_TEXT	ENDS
PUBLIC	?SetConnect@MyWinsockBase@@QAEXH@Z		; MyWinsockBase::SetConnect
; Function compile flags: /Ogtp
;	COMDAT ?SetConnect@MyWinsockBase@@QAEXH@Z
_TEXT	SEGMENT
_connected$ = 8						; size = 4
?SetConnect@MyWinsockBase@@QAEXH@Z PROC			; MyWinsockBase::SetConnect, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  : 	this->m_Connect = connected;

  00003	8b 45 08	 mov	 eax, DWORD PTR _connected$[ebp]
  00006	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 104  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetConnect@MyWinsockBase@@QAEXH@Z ENDP			; MyWinsockBase::SetConnect
_TEXT	ENDS
PUBLIC	??0MyWinsockBase@@QAE@XZ			; MyWinsockBase::MyWinsockBase
; Function compile flags: /Ogtp
;	COMDAT ??0MyWinsockBase@@QAE@XZ
_TEXT	SEGMENT
??0MyWinsockBase@@QAE@XZ PROC				; MyWinsockBase::MyWinsockBase, COMDAT
; _this$ = ecx

; 7    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 8    : 	m_socket = INVALID_SOCKET;

  00003	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1

; 9    : 	Startup();

  0000a	e8 00 00 00 00	 call	 ?Startup@MyWinsockBase@@AAEHXZ ; MyWinsockBase::Startup

; 10   : }

  0000f	8b c6		 mov	 eax, esi
  00011	5e		 pop	 esi
  00012	c3		 ret	 0
??0MyWinsockBase@@QAE@XZ ENDP				; MyWinsockBase::MyWinsockBase
_TEXT	ENDS
END
