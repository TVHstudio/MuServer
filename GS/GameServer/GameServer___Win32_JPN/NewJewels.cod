; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\NewJewels.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gNewJewels@@3VcNewJewels@@A			; gNewJewels
_BSS	SEGMENT
?gNewJewels@@3VcNewJewels@@A DB 0d0H DUP (?)		; gNewJewels
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetNewWingExlOpt@@YAEE@Z			; GetNewWingExlOpt
EXTRN	_rand:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newjewels.cpp
;	COMDAT ?GetNewWingExlOpt@@YAEE@Z
_TEXT	SEGMENT
_arrOption$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_NOption$ = 8						; size = 1
?GetNewWingExlOpt@@YAEE@Z PROC				; GetNewWingExlOpt, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 48   : 	int iEmptyCount = 0;
; 49   : 	int iCount = 0;
; 50   : 	int arrOption[4] = { 0, 0, 0, 0 };
; 51   : 	// ----
; 52   : 	if((NOption&1) == 1)

  00010	8a 45 08	 mov	 al, BYTE PTR _NOption$[ebp]
  00013	33 c9		 xor	 ecx, ecx
  00015	56		 push	 esi
  00016	33 f6		 xor	 esi, esi
  00018	89 4d ec	 mov	 DWORD PTR _arrOption$[ebp], ecx
  0001b	89 4d f0	 mov	 DWORD PTR _arrOption$[ebp+4], ecx
  0001e	89 4d f4	 mov	 DWORD PTR _arrOption$[ebp+8], ecx
  00021	89 4d f8	 mov	 DWORD PTR _arrOption$[ebp+12], ecx
  00024	a8 01		 test	 al, 1

; 53   : 	{
; 54   : 		iCount++;
; 55   : 	}
; 56   : 	else

  00026	75 0a		 jne	 SHORT $LN8@GetNewWing

; 57   : 	{
; 58   : 		arrOption[iEmptyCount] = 1;

  00028	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _arrOption$[ebp], 1

; 59   : 		iEmptyCount++;

  0002f	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LN8@GetNewWing:

; 60   : 	}
; 61   : 	// ----
; 62   : 	if((NOption&2) == 2)

  00032	a8 02		 test	 al, 2

; 63   : 	{
; 64   : 		iCount++;
; 65   : 	}
; 66   : 	else

  00034	75 09		 jne	 SHORT $LN6@GetNewWing

; 67   : 	{
; 68   : 		arrOption[iEmptyCount] = 2;

  00036	c7 44 b5 ec 02
	00 00 00	 mov	 DWORD PTR _arrOption$[ebp+esi*4], 2

; 69   : 		iEmptyCount++;

  0003e	46		 inc	 esi
$LN6@GetNewWing:

; 70   : 	}
; 71   : 	// ----
; 72   : 	if((NOption&4) == 4)

  0003f	a8 04		 test	 al, 4

; 73   : 	{
; 74   : 		iCount++;
; 75   : 	}
; 76   : 	else

  00041	75 09		 jne	 SHORT $LN4@GetNewWing

; 77   : 	{
; 78   : 		arrOption[iEmptyCount] = 4;

  00043	c7 44 b5 ec 04
	00 00 00	 mov	 DWORD PTR _arrOption$[ebp+esi*4], 4

; 79   : 		iEmptyCount++;

  0004b	46		 inc	 esi
$LN4@GetNewWing:

; 80   : 	}
; 81   : 	// ----
; 82   : 	if((NOption&8) == 8)

  0004c	a8 08		 test	 al, 8

; 83   : 	{
; 84   : 		iCount++;
; 85   : 	}
; 86   : 	else

  0004e	75 09		 jne	 SHORT $LN2@GetNewWing

; 87   : 	{
; 88   : 		arrOption[iEmptyCount] = 8;

  00050	c7 44 b5 ec 08
	00 00 00	 mov	 DWORD PTR _arrOption$[ebp+esi*4], 8

; 89   : 		iEmptyCount++;

  00058	46		 inc	 esi
$LN2@GetNewWing:

; 90   : 	}
; 91   : 	// ----
; 92   : 	if(iEmptyCount == 0)

  00059	3b f1		 cmp	 esi, ecx
  0005b	75 11		 jne	 SHORT $LN1@GetNewWing

; 93   : 	{
; 94   : 		return 0;

  0005d	32 c0		 xor	 al, al
  0005f	5e		 pop	 esi

; 98   : 	// ----
; 99   : 	return arrOption[iRand];
; 100  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	33 cd		 xor	 ecx, ebp
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN1@GetNewWing:

; 95   : 	}
; 96   : 	// ----
; 97   : 	int iRand = rand()%iEmptyCount;

  0006e	e8 00 00 00 00	 call	 _rand
  00073	99		 cdq
  00074	f7 fe		 idiv	 esi

; 98   : 	// ----
; 99   : 	return arrOption[iRand];
; 100  : }

  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	5e		 pop	 esi
  0007c	8a 44 95 ec	 mov	 al, BYTE PTR _arrOption$[ebp+edx*4]
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?GetNewWingExlOpt@@YAEE@Z ENDP				; GetNewWingExlOpt
_TEXT	ENDS
PUBLIC	?NumOfExcOptions@@YAEH@Z			; NumOfExcOptions
; Function compile flags: /Ogtp
;	COMDAT ?NumOfExcOptions@@YAEH@Z
_TEXT	SEGMENT
_NOption$ = 8						; size = 4
?NumOfExcOptions@@YAEH@Z PROC				; NumOfExcOptions, COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 	if(NOption == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _NOption$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN7@NumOfExcOp

; 106  : 		return 0;

  0000a	32 c0		 xor	 al, al

; 122  : 
; 123  : 	return Cnt;
; 124  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN7@NumOfExcOp:

; 107  : 
; 108  : 	int Cnt = 0;

  0000e	33 c0		 xor	 eax, eax

; 109  : 
; 110  : 	if ( (NOption & 1) == 1 )

  00010	f6 c1 01	 test	 cl, 1
  00013	74 05		 je	 SHORT $LN6@NumOfExcOp

; 111  : 		Cnt++;

  00015	b8 01 00 00 00	 mov	 eax, 1
$LN6@NumOfExcOp:

; 112  : 	if ( (NOption & 2) == 2 )

  0001a	f6 c1 02	 test	 cl, 2
  0001d	74 01		 je	 SHORT $LN5@NumOfExcOp

; 113  : 		Cnt++;

  0001f	40		 inc	 eax
$LN5@NumOfExcOp:

; 114  : 	if ( (NOption & 4) == 4 )

  00020	f6 c1 04	 test	 cl, 4
  00023	74 01		 je	 SHORT $LN4@NumOfExcOp

; 115  : 		Cnt++;

  00025	40		 inc	 eax
$LN4@NumOfExcOp:

; 116  : 	if ( (NOption & 8) == 8 )

  00026	f6 c1 08	 test	 cl, 8
  00029	74 01		 je	 SHORT $LN3@NumOfExcOp

; 117  : 		Cnt++;

  0002b	40		 inc	 eax
$LN3@NumOfExcOp:

; 118  : 	if ( (NOption & 16) == 16 )

  0002c	f6 c1 10	 test	 cl, 16			; 00000010H
  0002f	74 01		 je	 SHORT $LN2@NumOfExcOp

; 119  : 		Cnt++;

  00031	40		 inc	 eax
$LN2@NumOfExcOp:

; 120  : 	if ( (NOption & 32) == 32 )

  00032	f6 c1 20	 test	 cl, 32			; 00000020H
  00035	74 01		 je	 SHORT $LN8@NumOfExcOp

; 121  : 		Cnt++;

  00037	40		 inc	 eax
$LN8@NumOfExcOp:

; 122  : 
; 123  : 	return Cnt;
; 124  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?NumOfExcOptions@@YAEH@Z ENDP				; NumOfExcOptions
_TEXT	ENDS
PUBLIC	?NumOfWingExcOptions@@YAEH@Z			; NumOfWingExcOptions
; Function compile flags: /Ogtp
;	COMDAT ?NumOfWingExcOptions@@YAEH@Z
_TEXT	SEGMENT
_NOption$ = 8						; size = 4
?NumOfWingExcOptions@@YAEH@Z PROC			; NumOfWingExcOptions, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	if(NOption == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _NOption$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN5@NumOfWingE

; 129  : 		return 0;

  0000a	32 c0		 xor	 al, al

; 141  : 
; 142  : 	return Cnt;
; 143  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN5@NumOfWingE:

; 130  : 
; 131  : 	int Cnt = 0;

  0000e	33 c0		 xor	 eax, eax

; 132  : 
; 133  : 	if ( (NOption & 1) == 1 )

  00010	f6 c1 01	 test	 cl, 1
  00013	74 05		 je	 SHORT $LN4@NumOfWingE

; 134  : 		Cnt++;

  00015	b8 01 00 00 00	 mov	 eax, 1
$LN4@NumOfWingE:

; 135  : 	if ( (NOption & 2) == 2 )

  0001a	f6 c1 02	 test	 cl, 2
  0001d	74 01		 je	 SHORT $LN3@NumOfWingE

; 136  : 		Cnt++;

  0001f	40		 inc	 eax
$LN3@NumOfWingE:

; 137  : 	if ( (NOption & 4) == 4 )

  00020	f6 c1 04	 test	 cl, 4
  00023	74 01		 je	 SHORT $LN2@NumOfWingE

; 138  : 		Cnt++;

  00025	40		 inc	 eax
$LN2@NumOfWingE:

; 139  : 	if ( (NOption & 8) == 8 )

  00026	f6 c1 08	 test	 cl, 8
  00029	74 01		 je	 SHORT $LN6@NumOfWingE

; 140  : 		Cnt++;

  0002b	40		 inc	 eax
$LN6@NumOfWingE:

; 141  : 
; 142  : 	return Cnt;
; 143  : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?NumOfWingExcOptions@@YAEH@Z ENDP			; NumOfWingExcOptions
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetExcWingOption@@YAEE@Z			; GetExcWingOption
; Function compile flags: /Ogtp
;	COMDAT ?GetExcWingOption@@YAEE@Z
_TEXT	SEGMENT
_arrayopt$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_ExcellentOption$ = 8					; size = 1
?GetExcWingOption@@YAEE@Z PROC				; GetExcWingOption, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 147  : 	int arrayopt[4]	= { 0, 0, 0, 0 };
; 148  : 	int num			= 8;
; 149  : 	int amountopt	= 0;
; 150  : 	int added		= 0;
; 151  : 	// ----
; 152  : 	for( int i = 3; i >= 0; i-- )
; 153  : 	{
; 154  : 		if( ExcellentOption >= num )

  00010	8a 45 08	 mov	 al, BYTE PTR _ExcellentOption$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	33 c9		 xor	 ecx, ecx
  0001a	89 7d ec	 mov	 DWORD PTR _arrayopt$[ebp], edi
  0001d	89 7d f0	 mov	 DWORD PTR _arrayopt$[ebp+4], edi
  00020	89 7d f4	 mov	 DWORD PTR _arrayopt$[ebp+8], edi
  00023	89 7d f8	 mov	 DWORD PTR _arrayopt$[ebp+12], edi
  00026	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00029	3c 08		 cmp	 al, 8
  0002b	72 07		 jb	 SHORT $LN12@GetExcWing

; 155  : 		{
; 156  : 			arrayopt[i] = 1;

  0002d	89 5d f8	 mov	 DWORD PTR _arrayopt$[ebp+12], ebx

; 157  : 			amountopt++;

  00030	8b cb		 mov	 ecx, ebx

; 158  : 			ExcellentOption -= num;

  00032	04 f8		 add	 al, 248			; 000000f8H
$LN12@GetExcWing:

; 147  : 	int arrayopt[4]	= { 0, 0, 0, 0 };
; 148  : 	int num			= 8;
; 149  : 	int amountopt	= 0;
; 150  : 	int added		= 0;
; 151  : 	// ----
; 152  : 	for( int i = 3; i >= 0; i-- )
; 153  : 	{
; 154  : 		if( ExcellentOption >= num )

  00034	3c 04		 cmp	 al, 4
  00036	72 07		 jb	 SHORT $LN29@GetExcWing

; 157  : 			amountopt++;

  00038	03 cb		 add	 ecx, ebx
  0003a	89 5d f4	 mov	 DWORD PTR _arrayopt$[ebp+8], ebx

; 158  : 			ExcellentOption -= num;

  0003d	04 fc		 add	 al, 252			; 000000fcH
$LN29@GetExcWing:

; 147  : 	int arrayopt[4]	= { 0, 0, 0, 0 };
; 148  : 	int num			= 8;
; 149  : 	int amountopt	= 0;
; 150  : 	int added		= 0;
; 151  : 	// ----
; 152  : 	for( int i = 3; i >= 0; i-- )
; 153  : 	{
; 154  : 		if( ExcellentOption >= num )

  0003f	3c 02		 cmp	 al, 2
  00041	72 07		 jb	 SHORT $LN31@GetExcWing

; 157  : 			amountopt++;

  00043	03 cb		 add	 ecx, ebx
  00045	89 5d f0	 mov	 DWORD PTR _arrayopt$[ebp+4], ebx

; 158  : 			ExcellentOption -= num;

  00048	04 fe		 add	 al, 254			; 000000feH
$LN31@GetExcWing:

; 147  : 	int arrayopt[4]	= { 0, 0, 0, 0 };
; 148  : 	int num			= 8;
; 149  : 	int amountopt	= 0;
; 150  : 	int added		= 0;
; 151  : 	// ----
; 152  : 	for( int i = 3; i >= 0; i-- )
; 153  : 	{
; 154  : 		if( ExcellentOption >= num )

  0004a	3a c3		 cmp	 al, bl
  0004c	72 05		 jb	 SHORT $LN33@GetExcWing

; 155  : 		{
; 156  : 			arrayopt[i] = 1;

  0004e	89 5d ec	 mov	 DWORD PTR _arrayopt$[ebp], ebx

; 157  : 			amountopt++;

  00051	03 cb		 add	 ecx, ebx
$LN33@GetExcWing:

; 159  : 		}
; 160  : 		num = num / 2;
; 161  : 	}
; 162  : 	// ----
; 163  : 
; 164  : 	int iRand = (4-amountopt)+1;

  00053	be 05 00 00 00	 mov	 esi, 5
  00058	2b f1		 sub	 esi, ecx

; 165  : 
; 166  : 	if(iRand == 0)

  0005a	75 13		 jne	 SHORT $LN11@GetExcWing

; 167  : 	{
; 168  : 		return 0;

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	32 c0		 xor	 al, al
  00060	5b		 pop	 ebx

; 200  : 		}
; 201  : 		num = num * 2;
; 202  : 	}
; 203  : 
; 204  : 	return ExcellentOption;
; 205  : }

  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	33 cd		 xor	 ecx, ebp
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN11@GetExcWing:

; 169  : 	}
; 170  : 
; 171  : 	int randomopt = rand()%iRand;

  0006f	e8 00 00 00 00	 call	 _rand
  00074	99		 cdq
  00075	f7 fe		 idiv	 esi

; 172  : 
; 173  : 	amountopt = 0;

  00077	33 c9		 xor	 ecx, ecx

; 174  : 
; 175  : 	for(int i=0; i<4; i++)

  00079	33 c0		 xor	 eax, eax
  0007b	eb 03 8d 49 00	 npad	 5
$LL10@GetExcWing:

; 176  : 	{
; 177  : 		if(!arrayopt[i])

  00080	39 7c 85 ec	 cmp	 DWORD PTR _arrayopt$[ebp+eax*4], edi
  00084	75 06		 jne	 SHORT $LN9@GetExcWing

; 178  : 		{ 
; 179  : 			amountopt++;

  00086	03 cb		 add	 ecx, ebx

; 180  : 			if( amountopt == randomopt )

  00088	3b ca		 cmp	 ecx, edx
  0008a	74 09		 je	 SHORT $LN21@GetExcWing
$LN9@GetExcWing:

; 174  : 
; 175  : 	for(int i=0; i<4; i++)

  0008c	03 c3		 add	 eax, ebx
  0008e	83 f8 04	 cmp	 eax, 4
  00091	7c ed		 jl	 SHORT $LL10@GetExcWing

; 180  : 			if( amountopt == randomopt )

  00093	eb 04		 jmp	 SHORT $LN8@GetExcWing
$LN21@GetExcWing:

; 181  : 			{
; 182  : 				arrayopt[i] = 1;

  00095	89 5c 85 ec	 mov	 DWORD PTR _arrayopt$[ebp+eax*4], ebx
$LN8@GetExcWing:

; 183  : 				break;
; 184  : 			}
; 185  : 		}
; 186  : 		else
; 187  : 		{
; 188  : 			continue;
; 189  : 		}
; 190  : 	}
; 191  : 
; 192  : 	num = 1; 
; 193  : 	ExcellentOption = 0;

  00099	32 c0		 xor	 al, al

; 194  : 
; 195  : 	for (int i=0 ; i<4; i++)
; 196  : 	{
; 197  : 		if (arrayopt[i])

  0009b	39 7d ec	 cmp	 DWORD PTR _arrayopt$[ebp], edi
  0009e	74 02		 je	 SHORT $LN1@GetExcWing

; 198  : 		{
; 199  : 			ExcellentOption += num;

  000a0	8a c3		 mov	 al, bl
$LN1@GetExcWing:

; 194  : 
; 195  : 	for (int i=0 ; i<4; i++)
; 196  : 	{
; 197  : 		if (arrayopt[i])

  000a2	39 7d f0	 cmp	 DWORD PTR _arrayopt$[ebp+4], edi
  000a5	74 02		 je	 SHORT $LN38@GetExcWing

; 198  : 		{
; 199  : 			ExcellentOption += num;

  000a7	04 02		 add	 al, 2
$LN38@GetExcWing:

; 194  : 
; 195  : 	for (int i=0 ; i<4; i++)
; 196  : 	{
; 197  : 		if (arrayopt[i])

  000a9	39 7d f4	 cmp	 DWORD PTR _arrayopt$[ebp+8], edi
  000ac	74 02		 je	 SHORT $LN40@GetExcWing

; 198  : 		{
; 199  : 			ExcellentOption += num;

  000ae	04 04		 add	 al, 4
$LN40@GetExcWing:

; 194  : 
; 195  : 	for (int i=0 ; i<4; i++)
; 196  : 	{
; 197  : 		if (arrayopt[i])

  000b0	39 7d f8	 cmp	 DWORD PTR _arrayopt$[ebp+12], edi
  000b3	74 02		 je	 SHORT $LN16@GetExcWing

; 198  : 		{
; 199  : 			ExcellentOption += num;

  000b5	04 08		 add	 al, 8
$LN16@GetExcWing:

; 200  : 		}
; 201  : 		num = num * 2;
; 202  : 	}
; 203  : 
; 204  : 	return ExcellentOption;
; 205  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	33 cd		 xor	 ecx, ebp
  000be	5b		 pop	 ebx
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
?GetExcWingOption@@YAEE@Z ENDP				; GetExcWingOption
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 134  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@	; `string'
PUBLIC	??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@		; `string'
PUBLIC	??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@	; `string'
PUBLIC	??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@	; `string'
PUBLIC	??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@		; `string'
PUBLIC	??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@	; `string'
PUBLIC	??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@	; `string'
PUBLIC	??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@	; `string'
PUBLIC	??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@		; `string'
PUBLIC	??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@	; `string'
PUBLIC	??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@	; `string'
PUBLIC	??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@	; `string'
PUBLIC	??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@	; `string'
PUBLIC	??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@	; `string'
PUBLIC	??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@	; `string'
PUBLIC	??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@	; `string'
PUBLIC	??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@	; `string'
PUBLIC	??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@	; `string'
PUBLIC	??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@	; `string'
PUBLIC	??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@		; `string'
PUBLIC	??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@		; `string'
PUBLIC	??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@	; `string'
PUBLIC	??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@	; `string'
PUBLIC	??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@	; `string'
PUBLIC	??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@	; `string'
PUBLIC	??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@	; `string'
PUBLIC	??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@	; `string'
PUBLIC	??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@		; `string'
PUBLIC	??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@		; `string'
PUBLIC	??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@	; `string'
PUBLIC	??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@	; `string'
PUBLIC	??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@		; `string'
PUBLIC	??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@	; `string'
PUBLIC	??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@	; `string'
PUBLIC	??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@	; `string'
PUBLIC	??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@	; `string'
PUBLIC	??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@	; `string'
PUBLIC	??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@	; `string'
PUBLIC	??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@	; `string'
PUBLIC	??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@	; `string'
PUBLIC	??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@	; `string'
PUBLIC	??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@	; `string'
PUBLIC	??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@	; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@ ; `string'
PUBLIC	?Load@cNewJewels@@QAEXXZ			; cNewJewels::Load
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@
; File e:\work\tranet_version\gs\gameserver\newjewels.cpp
CONST	SEGMENT
??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@ DB 'JewelOfWingMaxOpt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@
CONST	SEGMENT
??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@ DB 'JewelOfWingRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@
CONST	SEGMENT
??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@ DB 'JewelOfWingEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@
CONST	SEGMENT
??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@ DB 'JewelOfWingIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@
CONST	SEGMENT
??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@ DB 'JewelOfWingType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@
CONST	SEGMENT
??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@ DB 'JewelOfSocketMaxOpt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@
CONST	SEGMENT
??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@ DB 'JewelOfSocketRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@
CONST	SEGMENT
??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@ DB 'JewelOfSocketEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@
CONST	SEGMENT
??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@ DB 'JewelOfSocketIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@
CONST	SEGMENT
??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@ DB 'JewelOfSocketType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@
CONST	SEGMENT
??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@ DB 'JewelOfPVPRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@
CONST	SEGMENT
??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@ DB 'JewelOfPVPEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@
CONST	SEGMENT
??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@ DB 'JewelOfOptionRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@
CONST	SEGMENT
??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@ DB 'JewelOfOptionEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@
CONST	SEGMENT
??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@ DB 'JewelOfOptionIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@
CONST	SEGMENT
??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@ DB 'JewelOfOptionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@
CONST	SEGMENT
??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@ DB 'JewelOfAncentRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@
CONST	SEGMENT
??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@ DB 'JewelOfAncentEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@
CONST	SEGMENT
??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@ DB 'JewelOfAncentIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@
CONST	SEGMENT
??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@ DB 'JewelOfAncentType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@
CONST	SEGMENT
??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@ DB 'JewelOfEvalutionRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@
CONST	SEGMENT
??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@ DB 'JewelOfEvalutionEnable'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@
CONST	SEGMENT
??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@ DB 'JewelOfEvalutionIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@
CONST	SEGMENT
??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@ DB 'JewelOfEvalutionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@
CONST	SEGMENT
??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@ DB 'JewelOfLevelRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@
CONST	SEGMENT
??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@ DB 'JewelOfLevelMin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@
CONST	SEGMENT
??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@ DB 'JewelOfLevelMax', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@
CONST	SEGMENT
??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@ DB 'JewelOfLevelEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@
CONST	SEGMENT
??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@ DB 'JewelOfLevelIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@
CONST	SEGMENT
??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@ DB 'JewelOfLevelType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@
CONST	SEGMENT
??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@ DB 'JewelOfSkillRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@
CONST	SEGMENT
??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@ DB 'JewelOfSkillEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@
CONST	SEGMENT
??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@ DB 'JewelOfSkillIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@
CONST	SEGMENT
??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@ DB 'JewelOfSkillType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@
CONST	SEGMENT
??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@ DB 'JewelOfLuckRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@
CONST	SEGMENT
??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@ DB 'JewelOfLuckEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@
CONST	SEGMENT
??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@ DB 'JewelOfLuckIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@
CONST	SEGMENT
??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@ DB 'JewelOfLuckType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@
CONST	SEGMENT
??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@ DB 'JewelOfMisticRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@
CONST	SEGMENT
??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@ DB 'JewelOfMisticMinLvl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@
CONST	SEGMENT
??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@ DB 'JewelOfMisticMaxLvl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@
CONST	SEGMENT
??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@ DB 'JewelOfMisticEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@
CONST	SEGMENT
??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@ DB 'JewelOfMisticIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@
CONST	SEGMENT
??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@ DB 'JewelOfMisticType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@
CONST	SEGMENT
??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@ DB 'JewelOfExellentMaxOpt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@
CONST	SEGMENT
??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@ DB 'JewelOfExellentRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@
CONST	SEGMENT
??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@ DB 'JewelOfExellentEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@
CONST	SEGMENT
??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@ DB 'JewelOfExellentIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@
CONST	SEGMENT
??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@ DB 'JewelOfExellentType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
CONST	SEGMENT
??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@ DB '..\Data\Zt'
	DB	'Data\NewJewels.ini', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@cNewJewels@@QAEXXZ
_TEXT	SEGMENT
?Load@cNewJewels@@QAEXXZ PROC				; cNewJewels::Load, COMDAT
; _this$ = ecx

; 208  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 209  : 	//CheckFile(NewJewels_DIR);
; 210  : 	this->Enable  = GetPrivateProfileInt("Common","Enable",0,NewJewels_DIR);

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0000d	6a 00		 push	 0
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00019	8b f1		 mov	 esi, ecx
  0001b	ff d7		 call	 edi

; 211  : 
; 212  : 	this->JewelOfExellentType = GetPrivateProfileInt("Common","JewelOfExellentType",0,NewJewels_DIR);

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00022	6a 00		 push	 0
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IKMGKKNL@JewelOfExellentType?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0002e	89 06		 mov	 DWORD PTR [esi], eax
  00030	ff d7		 call	 edi

; 213  : 	this->JewelOfExellentIndex = GetPrivateProfileInt("Common","JewelOfExellentIndex",0,NewJewels_DIR);

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00037	6a 00		 push	 0
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EEJOKEBH@JewelOfExellentIndex?$AA@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00046	ff d7		 call	 edi

; 214  : 	this->JewelOfExellentEnable = GetPrivateProfileInt("Common","JewelOfExellentEnable",0,NewJewels_DIR);

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0004d	6a 00		 push	 0
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BCKFFCJA@JewelOfExellentEnable?$AA@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00059	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0005c	ff d7		 call	 edi

; 215  : 	this->JewelOfExellentRate = GetPrivateProfileInt("Common","JewelOfExellentRate",0,NewJewels_DIR);

  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00063	6a 00		 push	 0
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JHCCIINH@JewelOfExellentRate?$AA@
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0006f	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00072	ff d7		 call	 edi

; 216  : 	this->JewelOfExellentMaxOpt = GetPrivateProfileInt("Common","JewelOfExellentMaxOpt",0,NewJewels_DIR);

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00079	6a 00		 push	 0
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KJFBFFDG@JewelOfExellentMaxOpt?$AA@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00085	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00088	ff d7		 call	 edi

; 217  : 
; 218  : 	this->JewelOfMisticType = GetPrivateProfileInt("Common","JewelOfMisticType",0,NewJewels_DIR);

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0008f	6a 00		 push	 0
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MJLAADOM@JewelOfMisticType?$AA@
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0009b	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0009e	ff d7		 call	 edi

; 219  : 	this->JewelOfMisticIndex = GetPrivateProfileInt("Common","JewelOfMisticIndex",0,NewJewels_DIR);

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  000a5	6a 00		 push	 0
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PMGAHHLB@JewelOfMisticIndex?$AA@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000b1	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000b4	ff d7		 call	 edi

; 220  : 	this->JewelOfMisticEnable = GetPrivateProfileInt("Common","JewelOfMisticEnable",0,NewJewels_DIR);

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  000bb	6a 00		 push	 0
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CNKIKKJO@JewelOfMisticEnable?$AA@
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000c7	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000ca	ff d7		 call	 edi

; 221  : 	this->JewelOfMisticMaxLvl = GetPrivateProfileInt("Common","JewelOfMisticMaxLvl",0,NewJewels_DIR);

  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  000d1	6a 00		 push	 0
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHPOGDN@JewelOfMisticMaxLvl?$AA@
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000dd	89 46 20	 mov	 DWORD PTR [esi+32], eax
  000e0	ff d7		 call	 edi

; 222  : 	this->JewelOfMisticMinLvl = GetPrivateProfileInt("Common","JewelOfMisticMinLvl",0,NewJewels_DIR);

  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  000e7	6a 00		 push	 0
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BIMAGHC@JewelOfMisticMinLvl?$AA@
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000f3	89 46 24	 mov	 DWORD PTR [esi+36], eax
  000f6	ff d7		 call	 edi

; 223  : 	this->JewelOfMisticRate = GetPrivateProfileInt("Common","JewelOfMisticRate",0,NewJewels_DIR);

  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  000fd	6a 00		 push	 0
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NEFECBOA@JewelOfMisticRate?$AA@
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00109	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0010c	ff d7		 call	 edi

; 224  : 
; 225  : 	this->JewelOfLuckType = GetPrivateProfileInt("Common","JewelOfLuckType",0,NewJewels_DIR);

  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00113	6a 00		 push	 0
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DPLHMOC@JewelOfLuckType?$AA@
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0011f	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00122	ff d7		 call	 edi

; 226  : 	this->JewelOfLuckIndex = GetPrivateProfileInt("Common","JewelOfLuckIndex",0,NewJewels_DIR);

  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00129	6a 00		 push	 0
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BLBCBBMJ@JewelOfLuckIndex?$AA@
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00135	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00138	ff d7		 call	 edi

; 227  : 	this->JewelOfLuckEnable = GetPrivateProfileInt("Common","JewelOfLuckEnable",0,NewJewels_DIR);

  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0013f	6a 00		 push	 0
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@
  00146	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0014b	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0014e	ff d7		 call	 edi

; 228  : 	this->JewelOfLuckEnable = GetPrivateProfileInt("Common","JewelOfLuckEnable",0,NewJewels_DIR);

  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00155	6a 00		 push	 0
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HDJBCBPG@JewelOfLuckEnable?$AA@
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00161	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00164	ff d7		 call	 edi

; 229  : 	this->JewelOfLuckRate = GetPrivateProfileInt("Common","JewelOfLuckRate",0,NewJewels_DIR);

  00166	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0016b	6a 00		 push	 0
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BOBPFOOO@JewelOfLuckRate?$AA@
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00177	89 46 38	 mov	 DWORD PTR [esi+56], eax
  0017a	ff d7		 call	 edi

; 230  : 
; 231  : 	this->JewelOfSkillType = GetPrivateProfileInt("Common","JewelOfSkillType",0,NewJewels_DIR);

  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00181	6a 00		 push	 0
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GNAMGGO@JewelOfSkillType?$AA@
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0018d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00190	ff d7		 call	 edi

; 232  : 	this->JewelOfSkillIndex = GetPrivateProfileInt("Common","JewelOfSkillIndex",0,NewJewels_DIR);

  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00197	6a 00		 push	 0
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PPBJPFHI@JewelOfSkillIndex?$AA@
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  001a3	89 46 40	 mov	 DWORD PTR [esi+64], eax
  001a6	ff d7		 call	 edi

; 233  : 	this->JewelOfSkillEnable = GetPrivateProfileInt("Common","JewelOfSkillEnable",0,NewJewels_DIR);

  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  001ad	6a 00		 push	 0
  001af	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MPBDKJAI@JewelOfSkillEnable?$AA@
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  001b9	89 46 44	 mov	 DWORD PTR [esi+68], eax
  001bc	ff d7		 call	 edi

; 234  : 	this->JewelOfSkillRate = GetPrivateProfileInt("Common","JewelOfSkillRate",0,NewJewels_DIR);

  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  001c3	6a 00		 push	 0
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BLDEOEGC@JewelOfSkillRate?$AA@
  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  001cf	89 46 48	 mov	 DWORD PTR [esi+72], eax
  001d2	ff d7		 call	 edi

; 235  : 
; 236  : 	this->JewelOfLevelType = GetPrivateProfileInt("Common","JewelOfLevelType",0,NewJewels_DIR);

  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  001d9	6a 00		 push	 0
  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CILEKBMN@JewelOfLevelType?$AA@
  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  001e5	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  001e8	ff d7		 call	 edi

; 237  : 	this->JewelOfLevelIndex = GetPrivateProfileInt("Common","JewelOfLevelIndex",0,NewJewels_DIR);

  001ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  001ef	6a 00		 push	 0
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LAOIGDEN@JewelOfLevelIndex?$AA@
  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  001fb	89 46 50	 mov	 DWORD PTR [esi+80], eax
  001fe	ff d7		 call	 edi

; 238  : 	this->JewelOfLevelEnable = GetPrivateProfileInt("Common","JewelOfLevelEnable",0,NewJewels_DIR);

  00200	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00205	6a 00		 push	 0
  00207	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JJOPJMLN@JewelOfLevelEnable?$AA@
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00211	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00214	ff d7		 call	 edi

; 239  : 	this->JewelOfLevelMax = GetPrivateProfileInt("Common","JewelOfLevelMax",0,NewJewels_DIR);

  00216	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0021b	6a 00		 push	 0
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HMDMKGDK@JewelOfLevelMax?$AA@
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00227	89 46 58	 mov	 DWORD PTR [esi+88], eax
  0022a	ff d7		 call	 edi

; 240  : 	this->JewelOfLevelMin = GetPrivateProfileInt("Common","JewelOfLevelMin",0,NewJewels_DIR);

  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00231	6a 00		 push	 0
  00233	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GOLHECFF@JewelOfLevelMin?$AA@
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0023d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00240	ff d7		 call	 edi

; 241  : 	this->JewelOfLevelRate = GetPrivateProfileInt("Common","JewelOfLevelRate",0,NewJewels_DIR);

  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00247	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0024a	6a 00		 push	 0
  0024c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DFFAIDMB@JewelOfLevelRate?$AA@
  00251	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00256	ff d7		 call	 edi

; 242  : 
; 243  : 	this->JewelOfEvalutionType = GetPrivateProfileInt("Common","JewelOfEvalutionType",0,NewJewels_DIR); 

  00258	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0025d	6a 00		 push	 0
  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EKILJIJ@JewelOfEvalutionType?$AA@
  00264	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00269	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0026c	ff d7		 call	 edi

; 244  : 	this->JewelOfEvalutionIndex = GetPrivateProfileInt("Common","JewelOfEvalutionIndex",0,NewJewels_DIR); 

  0026e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00273	6a 00		 push	 0
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MBHFPKNM@JewelOfEvalutionIndex?$AA@
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0027f	89 46 68	 mov	 DWORD PTR [esi+104], eax
  00282	ff d7		 call	 edi

; 245  : 	this->JewelOfEvalutionEnable = GetPrivateProfileInt("Common","JewelOfEvalutionEnable",0,NewJewels_DIR); 

  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00289	6a 00		 push	 0
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BOJGKCPG@JewelOfEvalutionEnable?$AA@
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00295	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  00298	ff d7		 call	 edi

; 246  : 	this->JewelOfEvalutionRate = GetPrivateProfileInt("Common","JewelOfEvalutionRate",0,NewJewels_DIR);

  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0029f	6a 00		 push	 0
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BJEMJLIF@JewelOfEvalutionRate?$AA@
  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  002ab	89 46 70	 mov	 DWORD PTR [esi+112], eax
  002ae	ff d7		 call	 edi

; 247  : 
; 248  : 	this->JewelOfAncentType = GetPrivateProfileInt("Common","JewelOfAncentType",0,NewJewels_DIR); 

  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  002b5	6a 00		 push	 0
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OGNDPFDL@JewelOfAncentType?$AA@
  002bc	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  002c1	89 46 74	 mov	 DWORD PTR [esi+116], eax
  002c4	ff d7		 call	 edi

; 249  : 	this->JewelOfAncentIndex = GetPrivateProfileInt("Common","JewelOfAncentIndex",0,NewJewels_DIR); 

  002c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  002cb	6a 00		 push	 0
  002cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OEPIFDDA@JewelOfAncentIndex?$AA@
  002d2	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  002d7	89 46 78	 mov	 DWORD PTR [esi+120], eax
  002da	ff d7		 call	 edi

; 250  : 	this->JewelOfAncentEnable = GetPrivateProfileInt("Common","JewelOfAncentEnable",0,NewJewels_DIR); 

  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  002e1	6a 00		 push	 0
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LHAPIBAM@JewelOfAncentEnable?$AA@
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  002ed	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  002f0	ff d7		 call	 edi

; 251  : 	this->JewelOfAncentRate = GetPrivateProfileInt("Common","JewelOfAncentRate",0,NewJewels_DIR); 

  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  002f7	6a 00		 push	 0
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PLDHNHDH@JewelOfAncentRate?$AA@
  002fe	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00303	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  00309	ff d7		 call	 edi

; 252  : 
; 253  : 	this->JewelOfOptionType = GetPrivateProfileInt("Common","JewelOfOptionType",0,NewJewels_DIR); 

  0030b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00310	6a 00		 push	 0
  00312	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BGPGHPNI@JewelOfOptionType?$AA@
  00317	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0031c	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  00322	ff d7		 call	 edi

; 254  : 	this->JewelOfOptionIndex = GetPrivateProfileInt("Common","JewelOfOptionIndex",0,NewJewels_DIR); 

  00324	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00329	6a 00		 push	 0
  0032b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NNALMFHI@JewelOfOptionIndex?$AA@
  00330	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00335	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  0033b	ff d7		 call	 edi

; 255  : 	this->JewelOfOptionEnable = GetPrivateProfileInt("Common","JewelOfOptionEnable",0,NewJewels_DIR); 

  0033d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00342	6a 00		 push	 0
  00344	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MPDBLLDI@JewelOfOptionEnable?$AA@
  00349	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0034e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax
  00354	ff d7		 call	 edi

; 256  : 	this->JewelOfOptionRate = GetPrivateProfileInt("Common","JewelOfOptionRate",0,NewJewels_DIR); 

  00356	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0035b	6a 00		 push	 0
  0035d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBCFNNE@JewelOfOptionRate?$AA@
  00362	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00367	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
  0036d	ff d7		 call	 edi

; 257  : 
; 258  : 	this->JewelOfPVPEnable = 0; 
; 259  : 	this->JewelOfPVPRate = 0; 
; 260  : 
; 261  : 	if( g_ZtLicense.CheckUser(eZtUB::Local)			|| 
; 262  : 		g_ZtLicense.CheckUser(eZtUB::Gredy)			|| 
; 263  : 		g_ZtLicense.CheckUser(eZtUB::GredyLocal)	|| 
; 264  : 		g_ZtLicense.CheckUser(eZtUB::Gredy2)		|| 
; 265  : 		g_ZtLicense.CheckUser(eZtUB::ulasevich)		|| 
; 266  : 		g_ZtLicense.CheckUser(eZtUB::ulasevich2)	||
; 267  : 		g_ZtLicense.CheckUser(eZtUB::EpicMU)		||
; 268  : 		g_ZtLicense.CheckUser(eZtUB::Artem)			||
; 269  : 		g_ZtLicense.CheckUser(eZtUB::Artem2))

  0036f	6a 00		 push	 0
  00371	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00376	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  0037c	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  00386	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00390	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00395	84 c0		 test	 al, al
  00397	0f 85 80 00 00
	00		 jne	 $LN4@Load
  0039d	6a 20		 push	 32			; 00000020H
  0039f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003a4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003a9	84 c0		 test	 al, al
  003ab	75 70		 jne	 SHORT $LN4@Load
  003ad	6a 21		 push	 33			; 00000021H
  003af	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003b4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003b9	84 c0		 test	 al, al
  003bb	75 60		 jne	 SHORT $LN4@Load
  003bd	6a 22		 push	 34			; 00000022H
  003bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003c4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003c9	84 c0		 test	 al, al
  003cb	75 50		 jne	 SHORT $LN4@Load
  003cd	6a 17		 push	 23			; 00000017H
  003cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003d4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003d9	84 c0		 test	 al, al
  003db	75 40		 jne	 SHORT $LN4@Load
  003dd	6a 24		 push	 36			; 00000024H
  003df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003e4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003e9	84 c0		 test	 al, al
  003eb	75 30		 jne	 SHORT $LN4@Load
  003ed	6a 3b		 push	 59			; 0000003bH
  003ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003f4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  003f9	84 c0		 test	 al, al
  003fb	75 20		 jne	 SHORT $LN4@Load
  003fd	6a 30		 push	 48			; 00000030H
  003ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00404	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00409	84 c0		 test	 al, al
  0040b	75 10		 jne	 SHORT $LN4@Load
  0040d	6a 31		 push	 49			; 00000031H
  0040f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00414	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00419	84 c0		 test	 al, al
  0041b	74 46		 je	 SHORT $LN5@Load
$LN4@Load:

; 270  : 	{
; 271  : 		this->JewelOfPVPType = 14;
; 272  : 		this->JewelOfPVPIndex = 188;
; 273  : 		this->JewelOfPVPEnable = GetPrivateProfileInt("Common","JewelOfPVPEnable",0,NewJewels_DIR); 

  0041d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00422	6a 00		 push	 0
  00424	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EEBDHCIG@JewelOfPVPEnable?$AA@
  00429	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0042e	c7 86 98 00 00
	00 0e 00 00 00	 mov	 DWORD PTR [esi+152], 14	; 0000000eH
  00438	c7 86 9c 00 00
	00 bc 00 00 00	 mov	 DWORD PTR [esi+156], 188 ; 000000bcH
  00442	ff d7		 call	 edi

; 274  : 		this->JewelOfPVPRate = GetPrivateProfileInt("Common","JewelOfPVPRate",0,NewJewels_DIR); 

  00444	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00449	6a 00		 push	 0
  0044b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HDEAKOBA@JewelOfPVPRate?$AA@
  00450	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00455	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
  0045b	ff d7		 call	 edi
  0045d	89 86 a4 00 00
	00		 mov	 DWORD PTR [esi+164], eax
$LN5@Load:

; 275  : 	}
; 276  : 
; 277  : 	this->JewelOfSocketType = GetPrivateProfileInt("Common","JewelOfSocketType",0,NewJewels_DIR);

  00463	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00468	6a 00		 push	 0
  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OIAGKFMH@JewelOfSocketType?$AA@
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00474	ff d7		 call	 edi

; 278  : 	this->JewelOfSocketIndex = GetPrivateProfileInt("Common","JewelOfSocketIndex",0,NewJewels_DIR); 

  00476	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0047b	6a 00		 push	 0
  0047d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FAPNDIFH@JewelOfSocketIndex?$AA@
  00482	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00487	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax
  0048d	ff d7		 call	 edi

; 279  : 	this->JewelOfSocketEnable = GetPrivateProfileInt("Common","JewelOfSocketEnable",0,NewJewels_DIR); 

  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00494	6a 00		 push	 0
  00496	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GEGNHAJM@JewelOfSocketEnable?$AA@
  0049b	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004a0	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax
  004a6	ff d7		 call	 edi

; 280  : 	this->JewelOfSocketRate = GetPrivateProfileInt("Common","JewelOfSocketRate",0,NewJewels_DIR); 

  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  004ad	6a 00		 push	 0
  004af	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PFOCIHML@JewelOfSocketRate?$AA@
  004b4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004b9	89 86 b0 00 00
	00		 mov	 DWORD PTR [esi+176], eax
  004bf	ff d7		 call	 edi

; 281  : 	this->JewelOfSocketMaxOpt = GetPrivateProfileInt("Common","JewelOfSocketMaxOpt",0,NewJewels_DIR); 

  004c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  004c6	6a 00		 push	 0
  004c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NPJJHHDK@JewelOfSocketMaxOpt?$AA@
  004cd	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  004d2	89 86 b4 00 00
	00		 mov	 DWORD PTR [esi+180], eax
  004d8	ff d7		 call	 edi
  004da	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax

; 282  : 	if(this->JewelOfSocketMaxOpt > 5)

  004e0	83 f8 05	 cmp	 eax, 5
  004e3	7e 0a		 jle	 SHORT $LN3@Load

; 283  : 	{
; 284  : 		this->JewelOfSocketMaxOpt = 5;

  004e5	c7 86 b8 00 00
	00 05 00 00 00	 mov	 DWORD PTR [esi+184], 5
$LN3@Load:

; 285  : 	}
; 286  : 
; 287  : 	this->JewelOfWingEnable = false;
; 288  : 
; 289  : 	if(g_ZtLicense.CheckUser(eZtUB::Local) || THINNAKORN_MAC || 
; 290  : 		g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) ||
; 291  : 		g_ZtLicense.CheckUser(eZtUB::EpicMU))

  004ef	6a 00		 push	 0
  004f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  004f6	c7 86 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+196], 0
  00500	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00505	84 c0		 test	 al, al
  00507	75 40		 jne	 SHORT $LN1@Load
  00509	6a 20		 push	 32			; 00000020H
  0050b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00510	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00515	84 c0		 test	 al, al
  00517	75 30		 jne	 SHORT $LN1@Load
  00519	6a 22		 push	 34			; 00000022H
  0051b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00520	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00525	84 c0		 test	 al, al
  00527	75 20		 jne	 SHORT $LN1@Load
  00529	6a 21		 push	 33			; 00000021H
  0052b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00530	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00535	84 c0		 test	 al, al
  00537	75 10		 jne	 SHORT $LN1@Load
  00539	6a 3b		 push	 59			; 0000003bH
  0053b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00540	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00545	84 c0		 test	 al, al
  00547	74 7d		 je	 SHORT $LN2@Load
$LN1@Load:

; 292  : 	{
; 293  : 		this->JewelOfWingType = GetPrivateProfileInt("Common","JewelOfWingType",0,NewJewels_DIR);

  00549	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0054e	6a 00		 push	 0
  00550	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BAGPCFJB@JewelOfWingType?$AA@
  00555	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0055a	ff d7		 call	 edi

; 294  : 		this->JewelOfWingIndex = GetPrivateProfileInt("Common","JewelOfWingIndex",0,NewJewels_DIR);

  0055c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00561	6a 00		 push	 0
  00563	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NCANKFBG@JewelOfWingIndex?$AA@
  00568	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0056d	89 86 bc 00 00
	00		 mov	 DWORD PTR [esi+188], eax
  00573	ff d7		 call	 edi

; 295  : 		this->JewelOfWingEnable = GetPrivateProfileInt("Common","JewelOfWingEnable",0,NewJewels_DIR);

  00575	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  0057a	6a 00		 push	 0
  0057c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GFDEPBAH@JewelOfWingEnable?$AA@
  00581	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00586	89 86 c0 00 00
	00		 mov	 DWORD PTR [esi+192], eax
  0058c	ff d7		 call	 edi

; 296  : 		this->JewelOfWingRate = GetPrivateProfileInt("Common","JewelOfWingRate",0,NewJewels_DIR);

  0058e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  00593	6a 00		 push	 0
  00595	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NILAHJN@JewelOfWingRate?$AA@
  0059a	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0059f	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax
  005a5	ff d7		 call	 edi

; 297  : 		this->JewelOfWingMaxOpt = GetPrivateProfileInt("Common","JewelOfWingMaxOpt",0,NewJewels_DIR);

  005a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJDBBCNM@?4?4?2Data?2ZtData?2NewJewels?4ini?$AA@
  005ac	6a 00		 push	 0
  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NOMAPGKB@JewelOfWingMaxOpt?$AA@
  005b3	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  005b8	89 86 c8 00 00
	00		 mov	 DWORD PTR [esi+200], eax
  005be	ff d7		 call	 edi
  005c0	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
$LN2@Load:

; 298  : 	}
; 299  : }

  005c6	5f		 pop	 edi
  005c7	5e		 pop	 esi
  005c8	c3		 ret	 0
?Load@cNewJewels@@QAEXXZ ENDP				; cNewJewels::Load
_TEXT	ENDS
PUBLIC	?IsAccessory@cNewJewels@@QAE_NH@Z		; cNewJewels::IsAccessory
; Function compile flags: /Ogtp
;	COMDAT ?IsAccessory@cNewJewels@@QAE_NH@Z
_TEXT	SEGMENT
_ItemID$ = 8						; size = 4
?IsAccessory@cNewJewels@@QAE_NH@Z PROC			; cNewJewels::IsAccessory, COMDAT
; _this$ = ecx

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 303  : 	if(		ItemID >= ITEMGET(13, 21) && ItemID <= ITEMGET(13, 29)
; 304  : 		||	ItemID == ITEMGET(13, 8)
; 305  : 		||	ItemID == ITEMGET(13, 9)
; 306  : 		||	ItemID == ITEMGET(13, 12)
; 307  : 		||	ItemID == ITEMGET(13, 13) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _ItemID$[ebp]
  00006	3d 15 1a 00 00	 cmp	 eax, 6677		; 00001a15H
  0000b	7c 07		 jl	 SHORT $LN1@IsAccessor
  0000d	3d 1d 1a 00 00	 cmp	 eax, 6685		; 00001a1dH
  00012	7e 22		 jle	 SHORT $LN2@IsAccessor
$LN1@IsAccessor:
  00014	3d 08 1a 00 00	 cmp	 eax, 6664		; 00001a08H
  00019	74 1b		 je	 SHORT $LN2@IsAccessor
  0001b	3d 09 1a 00 00	 cmp	 eax, 6665		; 00001a09H
  00020	74 14		 je	 SHORT $LN2@IsAccessor
  00022	3d 0c 1a 00 00	 cmp	 eax, 6668		; 00001a0cH
  00027	74 0d		 je	 SHORT $LN2@IsAccessor
  00029	3d 0d 1a 00 00	 cmp	 eax, 6669		; 00001a0dH
  0002e	74 06		 je	 SHORT $LN2@IsAccessor

; 310  : 	}
; 311  : 	// ----
; 312  : 	return false;

  00030	32 c0		 xor	 al, al

; 313  : 
; 314  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN2@IsAccessor:

; 308  : 	{
; 309  : 		return true;

  00036	b0 01		 mov	 al, 1

; 313  : 
; 314  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?IsAccessory@cNewJewels@@QAE_NH@Z ENDP			; cNewJewels::IsAccessory
_TEXT	ENDS
PUBLIC	?IsWings@cNewJewels@@QAE_NH@Z			; cNewJewels::IsWings
; Function compile flags: /Ogtp
;	COMDAT ?IsWings@cNewJewels@@QAE_NH@Z
_TEXT	SEGMENT
_ItemID$ = 8						; size = 4
?IsWings@cNewJewels@@QAE_NH@Z PROC			; cNewJewels::IsWings, COMDAT
; _this$ = ecx

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  : 	if((ItemID < ITEMGET(12,0) || ItemID > ITEMGET(12,6)) &&
; 319  : 		ItemID != ITEMGET(13,30) &&
; 320  : 		ItemID != ITEMGET(12,41) &&
; 321  : 		ItemID != ITEMGET(12,42) &&
; 322  : 		ItemID != ITEMGET(12,43) &&
; 323  : 		ItemID != ITEMGET(12, 49) &&//Season 6 addon
; 324  : 		ItemID != ITEMGET(12, 50) &&//Season 6 addon
; 325  : #ifdef NEWWINGS_2_5
; 326  : 		!IS_NEWWINGS_2_5(ItemID) &&
; 327  : #endif
; 328  : #ifdef NEWWINGS_4
; 329  : 		!IS_NEWWINGS_4(ItemID) &&
; 330  : #endif
; 331  : #ifdef NEWWINGS_5
; 332  : 		!IS_NEWWINGS_5(ItemID) &&
; 333  : #endif
; 334  : #ifdef NEWWINGS_6
; 335  : 		!IS_NEWWINGS_6(ItemID) &&
; 336  : #endif
; 337  : 		//Season 2.5 add-on
; 338  : 		(ItemID < ITEMGET(12,36) || ItemID > ITEMGET(12,40))) 

  00003	8b 45 08	 mov	 eax, DWORD PTR _ItemID$[ebp]
  00006	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  0000b	7c 0b		 jl	 SHORT $LN2@IsWings
  0000d	3d 06 18 00 00	 cmp	 eax, 6150		; 00001806H
  00012	0f 8e 9a 00 00
	00		 jle	 $LN3@IsWings
$LN2@IsWings:
  00018	3d 1e 1a 00 00	 cmp	 eax, 6686		; 00001a1eH
  0001d	0f 84 8f 00 00
	00		 je	 $LN3@IsWings
  00023	3d 29 18 00 00	 cmp	 eax, 6185		; 00001829H
  00028	0f 84 84 00 00
	00		 je	 $LN3@IsWings
  0002e	3d 2a 18 00 00	 cmp	 eax, 6186		; 0000182aH
  00033	74 7d		 je	 SHORT $LN3@IsWings
  00035	3d 2b 18 00 00	 cmp	 eax, 6187		; 0000182bH
  0003a	74 76		 je	 SHORT $LN3@IsWings
  0003c	3d 31 18 00 00	 cmp	 eax, 6193		; 00001831H
  00041	74 6f		 je	 SHORT $LN3@IsWings
  00043	3d 32 18 00 00	 cmp	 eax, 6194		; 00001832H
  00048	74 68		 je	 SHORT $LN3@IsWings
  0004a	3d ba 18 00 00	 cmp	 eax, 6330		; 000018baH
  0004f	7c 0e		 jl	 SHORT $LN14@IsWings
  00051	33 c9		 xor	 ecx, ecx
  00053	3d bc 18 00 00	 cmp	 eax, 6332		; 000018bcH
  00058	0f 9e c1	 setle	 cl
  0005b	85 c9		 test	 ecx, ecx
  0005d	75 53		 jne	 SHORT $LN3@IsWings
$LN14@IsWings:
  0005f	3d b4 18 00 00	 cmp	 eax, 6324		; 000018b4H
  00064	7c 0e		 jl	 SHORT $LN15@IsWings
  00066	33 c9		 xor	 ecx, ecx
  00068	3d b9 18 00 00	 cmp	 eax, 6329		; 000018b9H
  0006d	0f 9e c1	 setle	 cl
  00070	85 c9		 test	 ecx, ecx
  00072	75 3e		 jne	 SHORT $LN3@IsWings
$LN15@IsWings:
  00074	3d bd 18 00 00	 cmp	 eax, 6333		; 000018bdH
  00079	7c 0e		 jl	 SHORT $LN16@IsWings
  0007b	33 c9		 xor	 ecx, ecx
  0007d	3d c2 18 00 00	 cmp	 eax, 6338		; 000018c2H
  00082	0f 9e c1	 setle	 cl
  00085	85 c9		 test	 ecx, ecx
  00087	75 29		 jne	 SHORT $LN3@IsWings
$LN16@IsWings:
  00089	3d c3 18 00 00	 cmp	 eax, 6339		; 000018c3H
  0008e	7c 0e		 jl	 SHORT $LN17@IsWings
  00090	33 c9		 xor	 ecx, ecx
  00092	3d dc 18 00 00	 cmp	 eax, 6364		; 000018dcH
  00097	0f 9e c1	 setle	 cl
  0009a	85 c9		 test	 ecx, ecx
  0009c	75 14		 jne	 SHORT $LN3@IsWings
$LN17@IsWings:
  0009e	3d 24 18 00 00	 cmp	 eax, 6180		; 00001824H
  000a3	7c 07		 jl	 SHORT $LN1@IsWings
  000a5	3d 28 18 00 00	 cmp	 eax, 6184		; 00001828H
  000aa	7e 06		 jle	 SHORT $LN3@IsWings
$LN1@IsWings:

; 339  : 	{
; 340  : 		return false;

  000ac	32 c0		 xor	 al, al

; 344  : }

  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
$LN3@IsWings:

; 341  : 	}
; 342  : 
; 343  : 	return true;

  000b2	b0 01		 mov	 al, 1

; 344  : }

  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
?IsWings@cNewJewels@@QAE_NH@Z ENDP			; cNewJewels::IsWings
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetExcUnusedOption@cNewJewels@@QAEEE@Z		; cNewJewels::GetExcUnusedOption
; Function compile flags: /Ogtp
;	COMDAT ?GetExcUnusedOption@cNewJewels@@QAEEE@Z
_TEXT	SEGMENT
_arrayopt$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_ExcellentOption$ = 8					; size = 1
?GetExcUnusedOption@cNewJewels@@QAEEE@Z PROC		; cNewJewels::GetExcUnusedOption, COMDAT
; _this$ = ecx

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 348  : 	int arrayopt[6]	= { 0, 0, 0, 0, 0, 0};
; 349  : 	int num			= 32;
; 350  : 	int amountopt	= 0;
; 351  : 	int added		= 0;
; 352  : 	// ----
; 353  : 	for( int i = 5; i >= 0; i-- )
; 354  : 	{
; 355  : 		if( ExcellentOption >= num )

  00010	8a 45 08	 mov	 al, BYTE PTR _ExcellentOption$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	33 c9		 xor	 ecx, ecx
  0001a	89 7d e4	 mov	 DWORD PTR _arrayopt$[ebp], edi
  0001d	89 7d e8	 mov	 DWORD PTR _arrayopt$[ebp+4], edi
  00020	89 7d ec	 mov	 DWORD PTR _arrayopt$[ebp+8], edi
  00023	89 7d f0	 mov	 DWORD PTR _arrayopt$[ebp+12], edi
  00026	89 7d f4	 mov	 DWORD PTR _arrayopt$[ebp+16], edi
  00029	89 7d f8	 mov	 DWORD PTR _arrayopt$[ebp+20], edi
  0002c	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  0002f	3c 20		 cmp	 al, 32			; 00000020H
  00031	72 07		 jb	 SHORT $LN12@GetExcUnus

; 356  : 		{
; 357  : 			arrayopt[i] = 1;

  00033	89 5d f8	 mov	 DWORD PTR _arrayopt$[ebp+20], ebx

; 358  : 			amountopt++;

  00036	8b cb		 mov	 ecx, ebx

; 359  : 			ExcellentOption -= num;

  00038	04 e0		 add	 al, 224			; 000000e0H
$LN12@GetExcUnus:

; 348  : 	int arrayopt[6]	= { 0, 0, 0, 0, 0, 0};
; 349  : 	int num			= 32;
; 350  : 	int amountopt	= 0;
; 351  : 	int added		= 0;
; 352  : 	// ----
; 353  : 	for( int i = 5; i >= 0; i-- )
; 354  : 	{
; 355  : 		if( ExcellentOption >= num )

  0003a	3c 10		 cmp	 al, 16			; 00000010H
  0003c	72 07		 jb	 SHORT $LN29@GetExcUnus

; 358  : 			amountopt++;

  0003e	03 cb		 add	 ecx, ebx
  00040	89 5d f4	 mov	 DWORD PTR _arrayopt$[ebp+16], ebx

; 359  : 			ExcellentOption -= num;

  00043	04 f0		 add	 al, 240			; 000000f0H
$LN29@GetExcUnus:

; 348  : 	int arrayopt[6]	= { 0, 0, 0, 0, 0, 0};
; 349  : 	int num			= 32;
; 350  : 	int amountopt	= 0;
; 351  : 	int added		= 0;
; 352  : 	// ----
; 353  : 	for( int i = 5; i >= 0; i-- )
; 354  : 	{
; 355  : 		if( ExcellentOption >= num )

  00045	3c 08		 cmp	 al, 8
  00047	72 07		 jb	 SHORT $LN31@GetExcUnus

; 358  : 			amountopt++;

  00049	03 cb		 add	 ecx, ebx
  0004b	89 5d f0	 mov	 DWORD PTR _arrayopt$[ebp+12], ebx

; 359  : 			ExcellentOption -= num;

  0004e	04 f8		 add	 al, 248			; 000000f8H
$LN31@GetExcUnus:

; 348  : 	int arrayopt[6]	= { 0, 0, 0, 0, 0, 0};
; 349  : 	int num			= 32;
; 350  : 	int amountopt	= 0;
; 351  : 	int added		= 0;
; 352  : 	// ----
; 353  : 	for( int i = 5; i >= 0; i-- )
; 354  : 	{
; 355  : 		if( ExcellentOption >= num )

  00050	3c 04		 cmp	 al, 4
  00052	72 07		 jb	 SHORT $LN33@GetExcUnus

; 358  : 			amountopt++;

  00054	03 cb		 add	 ecx, ebx
  00056	89 5d ec	 mov	 DWORD PTR _arrayopt$[ebp+8], ebx

; 359  : 			ExcellentOption -= num;

  00059	04 fc		 add	 al, 252			; 000000fcH
$LN33@GetExcUnus:

; 348  : 	int arrayopt[6]	= { 0, 0, 0, 0, 0, 0};
; 349  : 	int num			= 32;
; 350  : 	int amountopt	= 0;
; 351  : 	int added		= 0;
; 352  : 	// ----
; 353  : 	for( int i = 5; i >= 0; i-- )
; 354  : 	{
; 355  : 		if( ExcellentOption >= num )

  0005b	3c 02		 cmp	 al, 2
  0005d	72 07		 jb	 SHORT $LN35@GetExcUnus

; 358  : 			amountopt++;

  0005f	03 cb		 add	 ecx, ebx
  00061	89 5d e8	 mov	 DWORD PTR _arrayopt$[ebp+4], ebx

; 359  : 			ExcellentOption -= num;

  00064	04 fe		 add	 al, 254			; 000000feH
$LN35@GetExcUnus:

; 348  : 	int arrayopt[6]	= { 0, 0, 0, 0, 0, 0};
; 349  : 	int num			= 32;
; 350  : 	int amountopt	= 0;
; 351  : 	int added		= 0;
; 352  : 	// ----
; 353  : 	for( int i = 5; i >= 0; i-- )
; 354  : 	{
; 355  : 		if( ExcellentOption >= num )

  00066	3a c3		 cmp	 al, bl
  00068	72 05		 jb	 SHORT $LN37@GetExcUnus

; 356  : 		{
; 357  : 			arrayopt[i] = 1;

  0006a	89 5d e4	 mov	 DWORD PTR _arrayopt$[ebp], ebx

; 358  : 			amountopt++;

  0006d	03 cb		 add	 ecx, ebx
$LN37@GetExcUnus:

; 360  : 		}
; 361  : 		num = num / 2;
; 362  : 	}
; 363  : 	// ----
; 364  : 	int iRate = (6-amountopt)+1;

  0006f	be 07 00 00 00	 mov	 esi, 7
  00074	2b f1		 sub	 esi, ecx

; 365  : 	if(iRate == 0)

  00076	75 15		 jne	 SHORT $LN11@GetExcUnus

; 366  : 	{
; 367  : 		return 0;

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	32 c0		 xor	 al, al
  0007c	5b		 pop	 ebx

; 397  : 		}
; 398  : 		num = num * 2;
; 399  : 	}
; 400  : 
; 401  : 	return ExcellentOption;
; 402  : }

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	33 cd		 xor	 ecx, ebp
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN11@GetExcUnus:

; 368  : 	}
; 369  : 	int randomopt = rand()%iRate;

  0008d	e8 00 00 00 00	 call	 _rand
  00092	99		 cdq
  00093	f7 fe		 idiv	 esi

; 370  : 	amountopt = 0;

  00095	33 c9		 xor	 ecx, ecx

; 371  : 
; 372  : 	for(int i=0; i<6; i++)

  00097	33 c0		 xor	 eax, eax
  00099	8d a4 24 00 00
	00 00		 npad	 7
$LL10@GetExcUnus:

; 373  : 	{
; 374  : 		if(!arrayopt[i])

  000a0	39 7c 85 e4	 cmp	 DWORD PTR _arrayopt$[ebp+eax*4], edi
  000a4	75 06		 jne	 SHORT $LN9@GetExcUnus

; 375  : 		{ 
; 376  : 			amountopt++;

  000a6	03 cb		 add	 ecx, ebx

; 377  : 			if( amountopt == randomopt )

  000a8	3b ca		 cmp	 ecx, edx
  000aa	74 09		 je	 SHORT $LN21@GetExcUnus
$LN9@GetExcUnus:

; 371  : 
; 372  : 	for(int i=0; i<6; i++)

  000ac	03 c3		 add	 eax, ebx
  000ae	83 f8 06	 cmp	 eax, 6
  000b1	7c ed		 jl	 SHORT $LL10@GetExcUnus

; 377  : 			if( amountopt == randomopt )

  000b3	eb 04		 jmp	 SHORT $LN8@GetExcUnus
$LN21@GetExcUnus:

; 378  : 			{
; 379  : 				arrayopt[i] = 1;

  000b5	89 5c 85 e4	 mov	 DWORD PTR _arrayopt$[ebp+eax*4], ebx
$LN8@GetExcUnus:

; 380  : 				break;
; 381  : 			}
; 382  : 		}
; 383  : 		else
; 384  : 		{
; 385  : 			continue;
; 386  : 		}
; 387  : 	}
; 388  : 
; 389  : 	num = 1; 
; 390  : 	ExcellentOption = 0;

  000b9	32 c0		 xor	 al, al

; 391  : 
; 392  : 	for (int i=0 ; i<6; i++)
; 393  : 	{
; 394  : 		if (arrayopt[i])

  000bb	39 7d e4	 cmp	 DWORD PTR _arrayopt$[ebp], edi
  000be	74 02		 je	 SHORT $LN1@GetExcUnus

; 395  : 		{
; 396  : 			ExcellentOption += num;

  000c0	8a c3		 mov	 al, bl
$LN1@GetExcUnus:

; 391  : 
; 392  : 	for (int i=0 ; i<6; i++)
; 393  : 	{
; 394  : 		if (arrayopt[i])

  000c2	39 7d e8	 cmp	 DWORD PTR _arrayopt$[ebp+4], edi
  000c5	74 02		 je	 SHORT $LN42@GetExcUnus

; 395  : 		{
; 396  : 			ExcellentOption += num;

  000c7	04 02		 add	 al, 2
$LN42@GetExcUnus:

; 391  : 
; 392  : 	for (int i=0 ; i<6; i++)
; 393  : 	{
; 394  : 		if (arrayopt[i])

  000c9	39 7d ec	 cmp	 DWORD PTR _arrayopt$[ebp+8], edi
  000cc	74 02		 je	 SHORT $LN44@GetExcUnus

; 395  : 		{
; 396  : 			ExcellentOption += num;

  000ce	04 04		 add	 al, 4
$LN44@GetExcUnus:

; 391  : 
; 392  : 	for (int i=0 ; i<6; i++)
; 393  : 	{
; 394  : 		if (arrayopt[i])

  000d0	39 7d f0	 cmp	 DWORD PTR _arrayopt$[ebp+12], edi
  000d3	74 02		 je	 SHORT $LN46@GetExcUnus

; 395  : 		{
; 396  : 			ExcellentOption += num;

  000d5	04 08		 add	 al, 8
$LN46@GetExcUnus:

; 391  : 
; 392  : 	for (int i=0 ; i<6; i++)
; 393  : 	{
; 394  : 		if (arrayopt[i])

  000d7	39 7d f4	 cmp	 DWORD PTR _arrayopt$[ebp+16], edi
  000da	74 02		 je	 SHORT $LN48@GetExcUnus

; 395  : 		{
; 396  : 			ExcellentOption += num;

  000dc	04 10		 add	 al, 16			; 00000010H
$LN48@GetExcUnus:

; 391  : 
; 392  : 	for (int i=0 ; i<6; i++)
; 393  : 	{
; 394  : 		if (arrayopt[i])

  000de	39 7d f8	 cmp	 DWORD PTR _arrayopt$[ebp+20], edi
  000e1	74 02		 je	 SHORT $LN16@GetExcUnus

; 395  : 		{
; 396  : 			ExcellentOption += num;

  000e3	04 20		 add	 al, 32			; 00000020H
$LN16@GetExcUnus:

; 397  : 		}
; 398  : 		num = num * 2;
; 399  : 	}
; 400  : 
; 401  : 	return ExcellentOption;
; 402  : }

  000e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	33 cd		 xor	 ecx, ebp
  000ec	5b		 pop	 ebx
  000ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 04 00	 ret	 4
?GetExcUnusedOption@cNewJewels@@QAEEE@Z ENDP		; cNewJewels::GetExcUnusedOption
_TEXT	ENDS
PUBLIC	?CheckJewel@cNewJewels@@QAE_NH@Z		; cNewJewels::CheckJewel
; Function compile flags: /Ogtp
;	COMDAT ?CheckJewel@cNewJewels@@QAE_NH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?CheckJewel@cNewJewels@@QAE_NH@Z PROC			; cNewJewels::CheckJewel, COMDAT
; _this$ = ecx

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 406  : 	if(iType == ITEMGET(this->JewelOfExellentType,this->JewelOfExellentIndex) && this->JewelOfExellentEnable) return true;

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	c1 e0 09	 shl	 eax, 9
  0000c	03 46 08	 add	 eax, DWORD PTR [esi+8]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR _iType$[ebp]
  00013	3b f8		 cmp	 edi, eax
  00015	75 0a		 jne	 SHORT $LN23@CheckJewel
  00017	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  0001b	0f 85 f0 01 00
	00		 jne	 $LN5@CheckJewel
$LN23@CheckJewel:

; 407  : 	else if(iType == ITEMGET(this->JewelOfMisticType,this->JewelOfMisticIndex) && this->JewelOfMisticEnable) return true;

  00021	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00024	c1 e1 09	 shl	 ecx, 9
  00027	03 4e 1c	 add	 ecx, DWORD PTR [esi+28]
  0002a	3b f9		 cmp	 edi, ecx
  0002c	75 0a		 jne	 SHORT $LN21@CheckJewel
  0002e	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00032	0f 85 d9 01 00
	00		 jne	 $LN5@CheckJewel
$LN21@CheckJewel:

; 408  : 	else if(iType == ITEMGET(this->JewelOfLuckType,this->JewelOfLuckIndex) && this->JewelOfLuckEnable) return true;

  00038	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0003b	c1 e2 09	 shl	 edx, 9
  0003e	03 56 34	 add	 edx, DWORD PTR [esi+52]
  00041	3b fa		 cmp	 edi, edx
  00043	75 0a		 jne	 SHORT $LN19@CheckJewel
  00045	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00049	0f 85 c2 01 00
	00		 jne	 $LN5@CheckJewel
$LN19@CheckJewel:

; 409  : 	else if(iType == ITEMGET(this->JewelOfSkillType,this->JewelOfSkillIndex) && this->JewelOfSkillEnable) return true;

  0004f	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00052	c1 e0 09	 shl	 eax, 9
  00055	03 46 44	 add	 eax, DWORD PTR [esi+68]
  00058	3b f8		 cmp	 edi, eax
  0005a	75 0a		 jne	 SHORT $LN17@CheckJewel
  0005c	83 7e 48 00	 cmp	 DWORD PTR [esi+72], 0
  00060	0f 85 ab 01 00
	00		 jne	 $LN5@CheckJewel
$LN17@CheckJewel:

; 410  : 	else if(iType == ITEMGET(this->JewelOfLevelType,this->JewelOfLevelIndex) && this->JewelOfLevelEnable) return true;

  00066	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00069	c1 e1 09	 shl	 ecx, 9
  0006c	03 4e 54	 add	 ecx, DWORD PTR [esi+84]
  0006f	3b f9		 cmp	 edi, ecx
  00071	75 0a		 jne	 SHORT $LN15@CheckJewel
  00073	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00077	0f 85 94 01 00
	00		 jne	 $LN5@CheckJewel
$LN15@CheckJewel:

; 411  : 	else if(iType == ITEMGET(this->JewelOfEvalutionType,this->JewelOfEvalutionIndex) && this->JewelOfEvalutionEnable) return true;

  0007d	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  00080	c1 e2 09	 shl	 edx, 9
  00083	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  00086	3b fa		 cmp	 edi, edx
  00088	75 0a		 jne	 SHORT $LN13@CheckJewel
  0008a	83 7e 70 00	 cmp	 DWORD PTR [esi+112], 0
  0008e	0f 85 7d 01 00
	00		 jne	 $LN5@CheckJewel
$LN13@CheckJewel:

; 412  : 	else if(iType == ITEMGET(this->JewelOfAncentType,this->JewelOfAncentIndex) && this->JewelOfAncentEnable) return true;

  00094	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00097	c1 e0 09	 shl	 eax, 9
  0009a	03 46 7c	 add	 eax, DWORD PTR [esi+124]
  0009d	3b f8		 cmp	 edi, eax
  0009f	75 0d		 jne	 SHORT $LN11@CheckJewel
  000a1	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
  000a8	0f 85 63 01 00
	00		 jne	 $LN5@CheckJewel
$LN11@CheckJewel:

; 413  : 	else if(iType == ITEMGET(this->JewelOfOptionType,this->JewelOfOptionIndex) && this->JewelOfOptionEnable) return true;

  000ae	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  000b4	c1 e1 09	 shl	 ecx, 9
  000b7	03 8e 8c 00 00
	00		 add	 ecx, DWORD PTR [esi+140]
  000bd	3b f9		 cmp	 edi, ecx
  000bf	75 0d		 jne	 SHORT $LN9@CheckJewel
  000c1	83 be 90 00 00
	00 00		 cmp	 DWORD PTR [esi+144], 0
  000c8	0f 85 43 01 00
	00		 jne	 $LN5@CheckJewel
$LN9@CheckJewel:

; 414  : 
; 415  : 	if( g_ZtLicense.CheckUser(eZtUB::Local)			|| 
; 416  : 		g_ZtLicense.CheckUser(eZtUB::Gredy)			|| 
; 417  : 		g_ZtLicense.CheckUser(eZtUB::GredyLocal)	|| 
; 418  : 		g_ZtLicense.CheckUser(eZtUB::Gredy2)		|| 
; 419  : 		g_ZtLicense.CheckUser(eZtUB::ulasevich)		|| 
; 420  : 		g_ZtLicense.CheckUser(eZtUB::ulasevich2)	||
; 421  : 		g_ZtLicense.CheckUser(eZtUB::EpicMU)		||
; 422  : 		g_ZtLicense.CheckUser(eZtUB::Artem)			||
; 423  : 		g_ZtLicense.CheckUser(eZtUB::Artem2))

  000ce	6a 00		 push	 0
  000d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000d5	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000da	84 c0		 test	 al, al
  000dc	0f 85 80 00 00
	00		 jne	 $LN7@CheckJewel
  000e2	6a 20		 push	 32			; 00000020H
  000e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000e9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ee	84 c0		 test	 al, al
  000f0	75 70		 jne	 SHORT $LN7@CheckJewel
  000f2	6a 21		 push	 33			; 00000021H
  000f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000f9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000fe	84 c0		 test	 al, al
  00100	75 60		 jne	 SHORT $LN7@CheckJewel
  00102	6a 22		 push	 34			; 00000022H
  00104	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00109	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0010e	84 c0		 test	 al, al
  00110	75 50		 jne	 SHORT $LN7@CheckJewel
  00112	6a 17		 push	 23			; 00000017H
  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00119	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0011e	84 c0		 test	 al, al
  00120	75 40		 jne	 SHORT $LN7@CheckJewel
  00122	6a 24		 push	 36			; 00000024H
  00124	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00129	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0012e	84 c0		 test	 al, al
  00130	75 30		 jne	 SHORT $LN7@CheckJewel
  00132	6a 3b		 push	 59			; 0000003bH
  00134	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00139	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0013e	84 c0		 test	 al, al
  00140	75 20		 jne	 SHORT $LN7@CheckJewel
  00142	6a 30		 push	 48			; 00000030H
  00144	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00149	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0014e	84 c0		 test	 al, al
  00150	75 10		 jne	 SHORT $LN7@CheckJewel
  00152	6a 31		 push	 49			; 00000031H
  00154	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00159	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0015e	84 c0		 test	 al, al
  00160	74 2f		 je	 SHORT $LN6@CheckJewel
$LN7@CheckJewel:

; 424  : 	{
; 425  : 		if(iType == ITEMGET(this->JewelOfPVPType,this->JewelOfPVPIndex) || iType == ITEMGET(this->JewelOfPVPType,189) && this->JewelOfPVPEnable) return true;

  00162	8b 86 98 00 00
	00		 mov	 eax, DWORD PTR [esi+152]
  00168	8b 96 9c 00 00
	00		 mov	 edx, DWORD PTR [esi+156]
  0016e	c1 e0 09	 shl	 eax, 9
  00171	03 d0		 add	 edx, eax
  00173	3b fa		 cmp	 edi, edx
  00175	0f 84 96 00 00
	00		 je	 $LN5@CheckJewel
  0017b	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  00180	3b f8		 cmp	 edi, eax
  00182	75 0d		 jne	 SHORT $LN6@CheckJewel
  00184	83 be a0 00 00
	00 00		 cmp	 DWORD PTR [esi+160], 0
  0018b	0f 85 80 00 00
	00		 jne	 $LN5@CheckJewel
$LN6@CheckJewel:

; 426  : 	}
; 427  : 
; 428  : 	if(iType == ITEMGET(this->JewelOfSocketType,this->JewelOfSocketIndex) && this->JewelOfSocketEnable) return true;

  00191	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  00197	c1 e0 09	 shl	 eax, 9
  0019a	03 86 ac 00 00
	00		 add	 eax, DWORD PTR [esi+172]
  001a0	3b f8		 cmp	 edi, eax
  001a2	75 09		 jne	 SHORT $LN4@CheckJewel
  001a4	83 be b0 00 00
	00 00		 cmp	 DWORD PTR [esi+176], 0
  001ab	75 64		 jne	 SHORT $LN5@CheckJewel
$LN4@CheckJewel:

; 429  : 
; 430  : 	if(g_ZtLicense.CheckUser(eZtUB::Local) || THINNAKORN_MAC ||
; 431  : 	   g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  001ad	6a 00		 push	 0
  001af	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001b4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001b9	84 c0		 test	 al, al
  001bb	75 30		 jne	 SHORT $LN2@CheckJewel
  001bd	6a 20		 push	 32			; 00000020H
  001bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001c4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001c9	84 c0		 test	 al, al
  001cb	75 20		 jne	 SHORT $LN2@CheckJewel
  001cd	6a 22		 push	 34			; 00000022H
  001cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001d4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001d9	84 c0		 test	 al, al
  001db	75 10		 jne	 SHORT $LN2@CheckJewel
  001dd	6a 21		 push	 33			; 00000021H
  001df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001e4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001e9	84 c0		 test	 al, al
  001eb	74 1c		 je	 SHORT $LN1@CheckJewel
$LN2@CheckJewel:

; 432  : 	{
; 433  : 		if(iType == ITEMGET(this->JewelOfWingType,this->JewelOfWingIndex) && this->JewelOfWingEnable) 

  001ed	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
  001f3	c1 e1 09	 shl	 ecx, 9
  001f6	03 8e c0 00 00
	00		 add	 ecx, DWORD PTR [esi+192]
  001fc	3b f9		 cmp	 edi, ecx
  001fe	75 09		 jne	 SHORT $LN1@CheckJewel
  00200	83 be c4 00 00
	00 00		 cmp	 DWORD PTR [esi+196], 0

; 434  : 		{
; 435  : 			return true;

  00207	75 08		 jne	 SHORT $LN5@CheckJewel
$LN1@CheckJewel:
  00209	5f		 pop	 edi

; 436  : 		}
; 437  : 	}
; 438  : 
; 439  : 	return false;

  0020a	32 c0		 xor	 al, al
  0020c	5e		 pop	 esi

; 440  : }

  0020d	5d		 pop	 ebp
  0020e	c2 04 00	 ret	 4
$LN5@CheckJewel:
  00211	5f		 pop	 edi

; 424  : 	{
; 425  : 		if(iType == ITEMGET(this->JewelOfPVPType,this->JewelOfPVPIndex) || iType == ITEMGET(this->JewelOfPVPType,189) && this->JewelOfPVPEnable) return true;

  00212	b0 01		 mov	 al, 1
  00214	5e		 pop	 esi

; 440  : }

  00215	5d		 pop	 ebp
  00216	c2 04 00	 ret	 4
?CheckJewel@cNewJewels@@QAE_NH@Z ENDP			; cNewJewels::CheckJewel
_TEXT	ENDS
PUBLIC	_target$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?JewelMain@cNewJewels@@QAEXPAUOBJECTSTRUCT@@HH@Z ; cNewJewels::JewelMain
EXTRN	?_SetOption@CItemSystemFor380@@QAEHPAVCItem@@H@Z:PROC ; CItemSystemFor380::_SetOption
EXTRN	?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z:PROC ; CItemSystemFor380::Is380Item
EXTRN	?CheckItemType@CSocketOption@@QAEEH@Z:PROC	; CSocketOption::CheckItemType
EXTRN	?g_SocketOption@@3VCSocketOption@@A:BYTE	; g_SocketOption
EXTRN	?ExGenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::ExGenSetOption
EXTRN	?IsSetItem@CSetItemOption@@QAEHH@Z:PROC		; CSetItemOption::IsSetItem
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
EXTRN	_srand:PROC
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?GetText@CZtText@@QAEPADH@Z:PROC		; CZtText::GetText
EXTRN	?g_ZtText@@3VCZtText@@A:BYTE			; g_ZtText
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?GCInventoryItemOneSend@@YAXHH@Z:PROC		; GCInventoryItemOneSend
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?gObjInventoryItemSet@@YAXHHE@Z:PROC		; gObjInventoryItemSet
EXTRN	?GetExcOptionCount@@YAEE@Z:PROC			; GetExcOptionCount
EXTRN	?Is380OptionItem@CItemSystemFor380@@QAEHPBVCItem@@@Z:PROC ; CItemSystemFor380::Is380OptionItem
EXTRN	?g_kItemSystemFor380@@3VCItemSystemFor380@@A:BYTE ; g_kItemSystemFor380
EXTRN	?IsSetItem@CItem@@QAEHXZ:PROC			; CItem::IsSetItem
EXTRN	?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemEquipment
EXTRN	?g_LuckyItemManager@@3ULuckyItemManager@@A:BYTE	; g_LuckyItemManager
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
;	COMDAT ?JewelMain@cNewJewels@@QAEXPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_TargetLevel$ = -60					; size = 4
tv2330 = -53						; size = 1
_JewelIndex$ = -52					; size = 4
tv1995 = -48						; size = 4
_TargetIndex$ = -48					; size = 4
_iRate$ = -44						; size = 4
_target$GSCopy$ = -40					; size = 4
tv1991 = -36						; size = 4
_this$GSCopy$ = -32					; size = 4
_ExcellentOpt$204964 = -28				; size = 24
_ExcellentOpt$205018 = -20				; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_source$ = 12						; size = 4
_target$ = 16						; size = 4
?JewelMain@cNewJewels@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC	; cNewJewels::JewelMain, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _source$[ebp]
  0001b	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 988  : 						{
; 989  : 							//BYTE NewOption = GetExcWingOption(lpObj->pInventory[target].m_NewOption);
; 990  : 							//BYTE NewOption = this->GetExcUnusedOption(lpObj->pInventory[target].m_NewOption);
; 991  : 							//lpObj->pInventory[target].m_NewOption = NewOption;
; 992  : 
; 993  : 							BYTE NewOption = GetNewWingExlOpt(lpObj->pInventory[target].m_NewOption);

  0001e	89 45 d8	 mov	 DWORD PTR _target$GSCopy$[ebp], eax
  00021	81 ff cb 00 00
	00		 cmp	 edi, 203		; 000000cbH
  00027	0f 87 2c 0e 00
	00		 ja	 $LN131@JewelMain

; 447  : 		return;
; 448  : 	}
; 449  : 	// ----
; 450  : 	if( target < 0 || target > MAIN_INVENTORY_SIZE - 1 )

  0002d	3d cb 00 00 00	 cmp	 eax, 203		; 000000cbH
  00032	0f 87 ea 0d 00
	00		 ja	 $LN129@JewelMain

; 453  : 		return;
; 454  : 	}
; 455  : 	// ----
; 456  : 	if( !lpObj->pInventory[source].IsItem() || !lpObj->pInventory[target].IsItem() )

  00038	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  0003e	8b c7		 mov	 eax, edi
  00040	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  00046	53		 push	 ebx
  00047	03 c8		 add	 ecx, eax
  00049	89 45 dc	 mov	 DWORD PTR tv1991[ebp], eax
  0004c	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00051	85 c0		 test	 eax, eax
  00053	0f 84 a7 0d 00
	00		 je	 $LN127@JewelMain
  00059	8b 5d d8	 mov	 ebx, DWORD PTR _target$GSCopy$[ebp]
  0005c	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00062	69 db d4 00 00
	00		 imul	 ebx, 212		; 000000d4H
  00068	03 cb		 add	 ecx, ebx
  0006a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006f	85 c0		 test	 eax, eax
  00071	0f 84 89 0d 00
	00		 je	 $LN127@JewelMain

; 460  : 	}
; 461  : #ifdef LUCKYITEM
; 462  : 	if(g_LuckyItemManager.IsLuckyItemEquipment(lpObj->pInventory[target].m_Type))

  00077	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  0007d	0f bf 4c 03 06	 movsx	 ecx, WORD PTR [ebx+eax+6]
  00082	51		 push	 ecx
  00083	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  00088	e8 00 00 00 00	 call	 ?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemEquipment
  0008d	85 c0		 test	 eax, eax
  0008f	0f 85 4d 0a 00
	00		 jne	 $LN181@JewelMain

; 463  : 	{
; 464  : 		return;
; 465  : 	}
; 466  : #endif
; 467  : 
; 468  : 	int JewelIndex = lpObj->pInventory[source].m_Type;

  00095	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  0009b	8b 55 dc	 mov	 edx, DWORD PTR tv1991[ebp]
  0009e	0f bf 4c 10 06	 movsx	 ecx, WORD PTR [eax+edx+6]

; 469  : 	int TargetIndex = lpObj->pInventory[target].m_Type;

  000a3	0f bf 54 18 06	 movsx	 edx, WORD PTR [eax+ebx+6]

; 470  : 	int TargetLevel = lpObj->pInventory[target].m_Level;

  000a8	0f bf 44 18 08	 movsx	 eax, WORD PTR [eax+ebx+8]
  000ad	89 4d cc	 mov	 DWORD PTR _JewelIndex$[ebp], ecx
  000b0	89 55 d0	 mov	 DWORD PTR _TargetIndex$[ebp], edx
  000b3	89 45 c4	 mov	 DWORD PTR _TargetLevel$[ebp], eax

; 471  : 
; 472  : 	if(TargetLevel > 15)

  000b6	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 473  : 	{
; 474  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 475  : 		return;

  000b9	0f 8f 41 0d 00
	00		 jg	 $LN127@JewelMain

; 476  : 	}
; 477  : 
; 478  : #if(UPDATE_GLOBALMU)
; 479  : 	if(g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  000bf	6a 30		 push	 48			; 00000030H
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000c6	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000cb	84 c0		 test	 al, al
  000cd	75 10		 jne	 SHORT $LN123@JewelMain
  000cf	6a 31		 push	 49			; 00000031H
  000d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000d6	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000db	84 c0		 test	 al, al
  000dd	74 70		 je	 SHORT $LN118@JewelMain
$LN123@JewelMain:

; 480  : 	{
; 481  : 		if(JewelIndex == ITEMGET(this->JewelOfAncentType,this->JewelOfAncentIndex))

  000df	8b 45 e0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  000e2	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  000e5	8b 4d cc	 mov	 ecx, DWORD PTR _JewelIndex$[ebp]
  000e8	c1 e2 09	 shl	 edx, 9
  000eb	03 50 7c	 add	 edx, DWORD PTR [eax+124]
  000ee	3b ca		 cmp	 ecx, edx
  000f0	75 1c		 jne	 SHORT $LN121@JewelMain

; 482  : 		{
; 483  : 			if(lpObj->pInventory[target].IsSetItem() == TRUE)

  000f2	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  000f8	03 cb		 add	 ecx, ebx
  000fa	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  000ff	83 f8 01	 cmp	 eax, 1

; 484  : 			{
; 485  : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 486  : 				return;

  00102	0f 84 f8 0c 00
	00		 je	 $LN127@JewelMain
  00108	8b 4d cc	 mov	 ecx, DWORD PTR _JewelIndex$[ebp]
  0010b	8b 45 e0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
$LN121@JewelMain:

; 487  : 			}
; 488  : 		}
; 489  : 
; 490  : 		if(JewelIndex == ITEMGET(this->JewelOfPVPType,this->JewelOfPVPIndex) || JewelIndex == ITEMGET(this->JewelOfOptionType,189))

  0010e	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00114	c1 e2 09	 shl	 edx, 9
  00117	03 90 9c 00 00
	00		 add	 edx, DWORD PTR [eax+156]
  0011d	3b ca		 cmp	 ecx, edx
  0011f	74 12		 je	 SHORT $LN119@JewelMain
  00121	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [eax+136]
  00127	c1 e0 09	 shl	 eax, 9
  0012a	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  0012f	3b c8		 cmp	 ecx, eax
  00131	75 1c		 jne	 SHORT $LN118@JewelMain
$LN119@JewelMain:

; 491  : 		{
; 492  : 			if(g_kItemSystemFor380.Is380OptionItem(&lpObj->pInventory[target]) == TRUE)

  00133	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00139	03 cb		 add	 ecx, ebx
  0013b	51		 push	 ecx
  0013c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  00141	e8 00 00 00 00	 call	 ?Is380OptionItem@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380OptionItem
  00146	83 f8 01	 cmp	 eax, 1

; 493  : 			{
; 494  : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 495  : 				return;

  00149	0f 84 4f 0c 00
	00		 je	 $LN2@JewelMain
$LN118@JewelMain:

; 496  : 			}
; 497  : 		}
; 498  : 	}
; 499  : #endif
; 500  : 
; 501  : 	int iRate = rand()%100;

  0014f	e8 00 00 00 00	 call	 _rand
  00154	99		 cdq
  00155	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0015a	f7 f9		 idiv	 ecx

; 502  : 
; 503  : 	bool JewelAdded = false;
; 504  : //*************************************
; 505  : //	Jewel Of Exellent
; 506  : //*************************************
; 507  : 	if( JewelIndex == ITEMGET(this->JewelOfExellentType,this->JewelOfExellentIndex) )

  0015c	8b 45 e0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0015f	89 55 d4	 mov	 DWORD PTR _iRate$[ebp], edx
  00162	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00165	c1 e2 09	 shl	 edx, 9
  00168	03 50 08	 add	 edx, DWORD PTR [eax+8]
  0016b	39 55 cc	 cmp	 DWORD PTR _JewelIndex$[ebp], edx
  0016e	0f 85 93 01 00
	00		 jne	 $LN117@JewelMain

; 508  : 	{
; 509  : 		if( this->JewelOfExellentRate > iRate )

  00174	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  00177	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0017a	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0017d	0f 8e 5a 01 00
	00		 jle	 $LN116@JewelMain

; 510  : 		{
; 511  : 			if( lpObj->pInventory[target].m_Type < ITEMGET(12,0) || this->IsAccessory(lpObj->pInventory[target].m_Type) == true )

  00183	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00189	0f b7 44 1a 06	 movzx	 eax, WORD PTR [edx+ebx+6]
  0018e	b9 00 18 00 00	 mov	 ecx, 6144		; 00001800H
  00193	66 3b c1	 cmp	 ax, cx
  00196	7c 12		 jl	 SHORT $LN114@JewelMain
  00198	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0019b	98		 cwde
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?IsAccessory@cNewJewels@@QAE_NH@Z ; cNewJewels::IsAccessory
  001a2	3c 01		 cmp	 al, 1
  001a4	0f 85 09 01 00
	00		 jne	 $LN107@JewelMain
$LN114@JewelMain:

; 512  : 			{
; 513  : 				if( lpObj->pInventory[target].m_NewOption > 0)

  001aa	0f b6 94 1a 97
	00 00 00	 movzx	 edx, BYTE PTR [edx+ebx+151]
  001b2	84 d2		 test	 dl, dl
  001b4	0f 84 e1 00 00
	00		 je	 $LN113@JewelMain

; 514  : 				{
; 515  : 					if( GetExcOptionCount(lpObj->pInventory[target].m_NewOption) < this->JewelOfExellentMaxOpt )

  001ba	52		 push	 edx
  001bb	e8 00 00 00 00	 call	 ?GetExcOptionCount@@YAEE@Z ; GetExcOptionCount
  001c0	8b 55 e0	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  001c3	0f b6 c8	 movzx	 ecx, al
  001c6	83 c4 04	 add	 esp, 4
  001c9	3b 4a 14	 cmp	 ecx, DWORD PTR [edx+20]
  001cc	0f 8d e1 00 00
	00		 jge	 $LN107@JewelMain

; 516  : 					{
; 517  : 						if(5 > GetExcOptionCount(lpObj->pInventory[target].m_NewOption) )

  001d2	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  001d8	0f b6 8c 03 97
	00 00 00	 movzx	 ecx, BYTE PTR [ebx+eax+151]
  001e0	51		 push	 ecx
  001e1	e8 00 00 00 00	 call	 ?GetExcOptionCount@@YAEE@Z ; GetExcOptionCount
  001e6	83 c4 04	 add	 esp, 4
  001e9	3c 05		 cmp	 al, 5
  001eb	73 5f		 jae	 SHORT $LN111@JewelMain

; 518  : 						{
; 519  : 							BYTE NewOption = this->GetExcUnusedOption(lpObj->pInventory[target].m_NewOption);

  001ed	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  001f3	0f b6 84 13 97
	00 00 00	 movzx	 eax, BYTE PTR [ebx+edx+151]
  001fb	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 ?GetExcUnusedOption@cNewJewels@@QAEEE@Z ; cNewJewels::GetExcUnusedOption

; 520  : 						
; 521  : 							lpObj->pInventory[target].m_NewOption = NewOption;

  00204	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]

; 522  : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0020a	68 ff 00 00 00	 push	 255			; 000000ffH
  0020f	88 84 0b 97 00
	00 00		 mov	 BYTE PTR [ebx+ecx+151], al
  00216	8b 16		 mov	 edx, DWORD PTR [esi]
  00218	57		 push	 edi
  00219	52		 push	 edx
  0021a	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 523  : 							lpObj->pInventory[source].Clear();

  0021f	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00225	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00228	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022b	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 524  : 							GCInventoryItemOneSend(lpObj->m_Index, target);

  00230	8b 45 d8	 mov	 eax, DWORD PTR _target$GSCopy$[ebp]
  00233	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00235	50		 push	 eax
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 525  : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0023c	8b 16		 mov	 edx, DWORD PTR [esi]
  0023e	6a 01		 push	 1
  00240	57		 push	 edi
  00241	52		 push	 edx

; 880  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00242	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 881  : 					return;

  00247	e9 93 08 00 00	 jmp	 $LN203@JewelMain
$LN111@JewelMain:

; 526  : 
; 527  : 							return;
; 528  : 						}
; 529  : 						else if(5 == GetExcOptionCount(lpObj->pInventory[target].m_NewOption) )

  0024c	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  00252	0f b6 8c 03 97
	00 00 00	 movzx	 ecx, BYTE PTR [ebx+eax+151]
  0025a	51		 push	 ecx
  0025b	e8 00 00 00 00	 call	 ?GetExcOptionCount@@YAEE@Z ; GetExcOptionCount
  00260	83 c4 04	 add	 esp, 4
  00263	3c 05		 cmp	 al, 5
  00265	75 13		 jne	 SHORT $LN109@JewelMain

; 530  : 						{
; 531  : 							BYTE NewOption = 63;
; 532  : 						
; 533  : 							lpObj->pInventory[target].m_NewOption = NewOption;

  00267	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  0026d	c6 84 13 97 00
	00 00 3f	 mov	 BYTE PTR [ebx+edx+151], 63 ; 0000003fH

; 534  : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 535  : 							lpObj->pInventory[source].Clear();
; 536  : 							GCInventoryItemOneSend(lpObj->m_Index, target);
; 537  : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 538  : 
; 539  : 							return;

  00275	e9 a3 02 00 00	 jmp	 $LN205@JewelMain
$LN109@JewelMain:

; 540  : 						}
; 541  : 						else
; 542  : 						{
; 543  : 							MsgOutput(lpObj->m_Index, g_ZtText.GetText(19), this->JewelOfExellentMaxOpt);

  0027a	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0027d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00280	52		 push	 edx
  00281	6a 13		 push	 19			; 00000013H
$LN200@JewelMain:
  00283	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00288	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0028d	50		 push	 eax
  0028e	8b 06		 mov	 eax, DWORD PTR [esi]
  00290	50		 push	 eax
  00291	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00296	83 c4 0c	 add	 esp, 12			; 0000000cH

; 544  : 						}
; 545  : 					}
; 546  : 				}
; 547  : 				else

  00299	eb 18		 jmp	 SHORT $LN107@JewelMain
$LN113@JewelMain:

; 548  : 				{
; 549  : 					MsgOutput(lpObj->m_Index, g_ZtText.GetText(20));

  0029b	6a 14		 push	 20			; 00000014H
$LN192@JewelMain:
  0029d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002a2	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002a7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a9	50		 push	 eax
  002aa	51		 push	 ecx
$LN189@JewelMain:
  002ab	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  002b0	83 c4 08	 add	 esp, 8
$LN107@JewelMain:

; 550  : 				}
; 551  : 			}
; 552  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  002b3	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  002b9	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  002bf	52		 push	 edx
  002c0	6a 01		 push	 1
  002c2	68 fd 00 00 00	 push	 253			; 000000fdH
  002c7	e8 00 00 00 00	 call	 __ftol2_sse
  002cc	50		 push	 eax
  002cd	8b 06		 mov	 eax, DWORD PTR [esi]
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  002d5	83 c4 14	 add	 esp, 20			; 00000014H

; 553  : 		}
; 554  : 		else

  002d8	e9 52 09 00 00	 jmp	 $LN183@JewelMain
$LN116@JewelMain:

; 555  : 		{
; 556  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  002dd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002df	68 ff 00 00 00	 push	 255			; 000000ffH
  002e4	57		 push	 edi
  002e5	51		 push	 ecx
  002e6	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 557  : 			lpObj->pInventory[source].Clear();

  002eb	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  002f1	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  002f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f7	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 558  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  002fc	8b 16		 mov	 edx, DWORD PTR [esi]
  002fe	6a 01		 push	 1
  00300	57		 push	 edi
  00301	52		 push	 edx

; 559  : 		}

  00302	e9 20 09 00 00	 jmp	 $LN184@JewelMain
$LN117@JewelMain:

; 560  : 	}
; 561  : //*************************************
; 562  : //	Jewel Of Mistic
; 563  : //*************************************
; 564  : 	else if( JewelIndex == ITEMGET(this->JewelOfMisticType,this->JewelOfMisticIndex) ) //

  00307	8b c8		 mov	 ecx, eax
  00309	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0030c	8b 45 cc	 mov	 eax, DWORD PTR _JewelIndex$[ebp]
  0030f	c1 e2 09	 shl	 edx, 9
  00312	03 51 1c	 add	 edx, DWORD PTR [ecx+28]
  00315	3b c2		 cmp	 eax, edx
  00317	75 57		 jne	 SHORT $LN104@JewelMain

; 565  : 	{
; 566  : 		if( this->JewelOfMisticRate > iRate )

  00319	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  0031c	39 41 2c	 cmp	 DWORD PTR [ecx+44], eax
  0031f	7e bc		 jle	 SHORT $LN116@JewelMain

; 567  : 		{
; 568  : 			if(this->IsAccessory(TargetIndex) == true )

  00321	8b 55 d0	 mov	 edx, DWORD PTR _TargetIndex$[ebp]
  00324	52		 push	 edx
  00325	e8 00 00 00 00	 call	 ?IsAccessory@cNewJewels@@QAE_NH@Z ; cNewJewels::IsAccessory
  0032a	3c 01		 cmp	 al, 1
  0032c	75 3b		 jne	 SHORT $LN102@JewelMain

; 569  : 			{
; 570  : 				if(TargetLevel >= this->JewelOfMisticMinLvl ) 

  0032e	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00331	8b 55 c4	 mov	 edx, DWORD PTR _TargetLevel$[ebp]
  00334	3b d0		 cmp	 edx, eax
  00336	7c 29		 jl	 SHORT $LN101@JewelMain

; 571  : 				{
; 572  : 					if(TargetLevel <= this->JewelOfMisticMaxLvl)

  00338	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0033b	3b d1		 cmp	 edx, ecx

; 573  : 					{
; 574  : 						lpObj->pInventory[target].m_Level++;
; 575  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 576  : 						lpObj->pInventory[source].Clear();
; 577  : 						GCInventoryItemOneSend(lpObj->m_Index, target);
; 578  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 579  : 						return;

  0033d	0f 8e 33 03 00
	00		 jle	 $LN204@JewelMain

; 580  : 					}
; 581  : 					else
; 582  : 					{
; 583  : 						MsgOutput(lpObj->m_Index, g_ZtText.GetText(21),this->JewelOfMisticMaxLvl);

  00343	51		 push	 ecx
  00344	6a 15		 push	 21			; 00000015H
  00346	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0034b	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00350	8b 16		 mov	 edx, DWORD PTR [esi]
  00352	50		 push	 eax
  00353	52		 push	 edx
  00354	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00359	83 c4 0c	 add	 esp, 12			; 0000000cH
  0035c	e9 52 ff ff ff	 jmp	 $LN107@JewelMain
$LN101@JewelMain:

; 584  : 					}
; 585  : 				}
; 586  : 				else
; 587  : 				{
; 588  : 					MsgOutput(lpObj->m_Index, g_ZtText.GetText(22),this->JewelOfMisticMinLvl);

  00361	50		 push	 eax
  00362	6a 16		 push	 22			; 00000016H

; 589  : 				}
; 590  : 			}
; 591  : 			else

  00364	e9 1a ff ff ff	 jmp	 $LN200@JewelMain
$LN102@JewelMain:

; 592  : 			{
; 593  : 				MsgOutput(lpObj->m_Index, g_ZtText.GetText(23));

  00369	6a 17		 push	 23			; 00000017H

; 594  : 			}
; 595  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 596  : 		}
; 597  : 		else

  0036b	e9 2d ff ff ff	 jmp	 $LN192@JewelMain
$LN104@JewelMain:

; 598  : 		{
; 599  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 600  : 			lpObj->pInventory[source].Clear();
; 601  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 602  : 		}
; 603  : 	}
; 604  : //*************************************
; 605  : //	Jewel Of Luck
; 606  : //*************************************
; 607  : 	else if( JewelIndex == ITEMGET(this->JewelOfLuckType,this->JewelOfLuckIndex) ) 

  00370	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00373	c1 e2 09	 shl	 edx, 9
  00376	03 51 34	 add	 edx, DWORD PTR [ecx+52]
  00379	3b c2		 cmp	 eax, edx
  0037b	0f 85 59 01 00
	00		 jne	 $LN94@JewelMain

; 608  : 	{
; 609  : 		if( this->JewelOfLuckRate > iRate )

  00381	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  00384	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00387	0f 8e 23 01 00
	00		 jle	 $LN93@JewelMain

; 610  : 		{
; 611  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0)
; 612  : #ifdef NEW_JEWEL_FROM_WINGS
; 613  : 				|| (lpObj->pInventory[target].m_Type >= ITEMGET(12,0) && lpObj->pInventory[target].m_Type <= ITEMGET(12,6)) || lpObj->pInventory[target].m_Type <= ITEMGET(13,30) || 
; 614  : 				 (lpObj->pInventory[target].m_Type >= ITEMGET(12,36) && lpObj->pInventory[target].m_Type <= ITEMGET(12,40)) || //Season 2.5 Third Wing add-on
; 615  : 				 lpObj->pInventory[target].m_Type == ITEMGET(12,41) || lpObj->pInventory[target].m_Type == ITEMGET(12,42) || lpObj->pInventory[target].m_Type == ITEMGET(12,43)
; 616  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 49)
; 617  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 50)
; 618  : 				|| IS_NEWWINGS(lpObj->pInventory[target].m_Type)
; 619  : 				|| IS_NEWWINGS_6(lpObj->pInventory[target].m_Type)
; 620  : #endif // NEW_JEWEL_FROM_WINGS
; 621  : 				)

  0038d	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00393	0f b7 44 19 06	 movzx	 eax, WORD PTR [ecx+ebx+6]
  00398	03 cb		 add	 ecx, ebx
  0039a	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  0039f	89 4d d0	 mov	 DWORD PTR tv1995[ebp], ecx
  003a2	66 3b c2	 cmp	 ax, dx
  003a5	0f 8c a1 00 00
	00		 jl	 $LN91@JewelMain
  003ab	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  003b0	66 3b c2	 cmp	 ax, dx
  003b3	0f 8e 93 00 00
	00		 jle	 $LN91@JewelMain
  003b9	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  003be	66 3b c2	 cmp	 ax, dx
  003c1	0f 8e 85 00 00
	00		 jle	 $LN91@JewelMain
  003c7	ba 24 18 00 00	 mov	 edx, 6180		; 00001824H
  003cc	66 3b c2	 cmp	 ax, dx
  003cf	7c 0a		 jl	 SHORT $LN89@JewelMain
  003d1	ba 28 18 00 00	 mov	 edx, 6184		; 00001828H
  003d6	66 3b c2	 cmp	 ax, dx
  003d9	7e 71		 jle	 SHORT $LN91@JewelMain
$LN89@JewelMain:
  003db	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  003e0	66 3b c2	 cmp	 ax, dx
  003e3	74 67		 je	 SHORT $LN91@JewelMain
  003e5	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  003ea	66 3b c2	 cmp	 ax, dx
  003ed	74 5d		 je	 SHORT $LN91@JewelMain
  003ef	ba 2b 18 00 00	 mov	 edx, 6187		; 0000182bH
  003f4	66 3b c2	 cmp	 ax, dx
  003f7	74 53		 je	 SHORT $LN91@JewelMain
  003f9	ba 31 18 00 00	 mov	 edx, 6193		; 00001831H
  003fe	66 3b c2	 cmp	 ax, dx
  00401	74 49		 je	 SHORT $LN91@JewelMain
  00403	ba 32 18 00 00	 mov	 edx, 6194		; 00001832H
  00408	66 3b c2	 cmp	 ax, dx
  0040b	74 3f		 je	 SHORT $LN91@JewelMain
  0040d	b9 b4 18 00 00	 mov	 ecx, 6324		; 000018b4H
  00412	66 3b c1	 cmp	 ax, cx
  00415	7c 11		 jl	 SHORT $LN167@JewelMain
  00417	33 c9		 xor	 ecx, ecx
  00419	ba c2 18 00 00	 mov	 edx, 6338		; 000018c2H
  0041e	66 3b c2	 cmp	 ax, dx
  00421	0f 9e c1	 setle	 cl
  00424	85 c9		 test	 ecx, ecx
  00426	75 21		 jne	 SHORT $LN174@JewelMain
$LN167@JewelMain:
  00428	b9 c3 18 00 00	 mov	 ecx, 6339		; 000018c3H
  0042d	66 3b c1	 cmp	 ax, cx
  00430	7c 13		 jl	 SHORT $LN168@JewelMain
  00432	33 c9		 xor	 ecx, ecx
  00434	ba dc 18 00 00	 mov	 edx, 6364		; 000018dcH
  00439	66 3b c2	 cmp	 ax, dx
  0043c	0f 9e c1	 setle	 cl
  0043f	8b c1		 mov	 eax, ecx
  00441	85 c0		 test	 eax, eax
  00443	75 04		 jne	 SHORT $LN174@JewelMain
$LN168@JewelMain:

; 635  : 				}
; 636  : 			}
; 637  : 			else
; 638  : 			{
; 639  : 				MsgOutput(lpObj->m_Index, g_ZtText.GetText(25));

  00445	6a 19		 push	 25			; 00000019H
  00447	eb 27		 jmp	 SHORT $LN185@JewelMain
$LN174@JewelMain:
  00449	8b 4d d0	 mov	 ecx, DWORD PTR tv1995[ebp]
$LN91@JewelMain:

; 622  : 			{
; 623  : 				if(lpObj->pInventory[target].m_Option2 == 0)

  0044c	80 b9 95 00 00
	00 00		 cmp	 BYTE PTR [ecx+149], 0
  00453	75 19		 jne	 SHORT $LN88@JewelMain

; 624  : 				{
; 625  : 					lpObj->pInventory[target].m_Option2++;

  00455	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  0045b	fe 84 03 95 00
	00 00		 inc	 BYTE PTR [ebx+eax+149]
  00462	8d 84 03 95 00
	00 00		 lea	 eax, DWORD PTR [ebx+eax+149]

; 626  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 627  : 					lpObj->pInventory[source].Clear();
; 628  : 					GCInventoryItemOneSend(lpObj->m_Index, target);
; 629  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 630  : 					return;

  00469	e9 3d 07 00 00	 jmp	 $LN196@JewelMain
$LN88@JewelMain:

; 631  : 				}
; 632  : 				else
; 633  : 				{
; 634  : 					MsgOutput(lpObj->m_Index, g_ZtText.GetText(24));

  0046e	6a 18		 push	 24			; 00000018H
$LN185@JewelMain:
  00470	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00475	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0047a	8b 16		 mov	 edx, DWORD PTR [esi]
  0047c	50		 push	 eax
  0047d	52		 push	 edx
$LN186@JewelMain:
  0047e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 640  : 			}
; 641  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  00483	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00489	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  0048f	83 c4 08	 add	 esp, 8
  00492	50		 push	 eax
  00493	6a 01		 push	 1
  00495	68 fd 00 00 00	 push	 253			; 000000fdH
  0049a	e8 00 00 00 00	 call	 __ftol2_sse
  0049f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  004a1	50		 push	 eax
  004a2	51		 push	 ecx
  004a3	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  004a8	83 c4 14	 add	 esp, 20			; 00000014H
  004ab	e9 7f 07 00 00	 jmp	 $LN183@JewelMain
$LN93@JewelMain:

; 642  : 		}
; 643  : 		else
; 644  : 		{
; 645  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  004b0	8b 16		 mov	 edx, DWORD PTR [esi]
  004b2	68 ff 00 00 00	 push	 255			; 000000ffH
  004b7	57		 push	 edi
  004b8	52		 push	 edx
  004b9	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 646  : 			lpObj->pInventory[source].Clear();

  004be	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  004c4	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  004c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ca	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 647  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  004cf	8b 06		 mov	 eax, DWORD PTR [esi]
  004d1	6a 01		 push	 1
  004d3	57		 push	 edi
  004d4	50		 push	 eax

; 648  : 		}

  004d5	e9 4d 07 00 00	 jmp	 $LN184@JewelMain
$LN94@JewelMain:

; 649  : 	}
; 650  : //*************************************
; 651  : //	Jewel Of Skill
; 652  : //*************************************
; 653  : 	else if( JewelIndex == ITEMGET(this->JewelOfSkillType,this->JewelOfSkillIndex) )

  004da	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  004dd	c1 e2 09	 shl	 edx, 9
  004e0	03 51 44	 add	 edx, DWORD PTR [ecx+68]
  004e3	3b c2		 cmp	 eax, edx
  004e5	0f 85 89 00 00
	00		 jne	 $LN83@JewelMain

; 654  : 	{
; 655  : 		if( this->JewelOfSkillRate > iRate )

  004eb	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  004ee	39 41 4c	 cmp	 DWORD PTR [ecx+76], eax
  004f1	7e bd		 jle	 SHORT $LN93@JewelMain

; 656  : 		{
; 657  : 			if(ItemAttribute[lpObj->pInventory[target].m_Type].SkillType != 0)

  004f3	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  004f9	0f bf 54 0b 06	 movsx	 edx, WORD PTR [ebx+ecx+6]
  004fe	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  00501	6b d2 70	 imul	 edx, 112		; 00000070H
  00504	83 ba 68 00 00
	00 00		 cmp	 DWORD PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[edx+104], 0
  0050b	74 60		 je	 SHORT $LN81@JewelMain

; 658  : 			{
; 659  : 				if(lpObj->pInventory[target].m_Option1 == 0)

  0050d	80 b8 94 00 00
	00 00		 cmp	 BYTE PTR [eax+148], 0
  00514	75 42		 jne	 SHORT $LN80@JewelMain

; 660  : 				{
; 661  : 					lpObj->pInventory[target].m_Option1 = TRUE;

  00516	c6 80 94 00 00
	00 01		 mov	 BYTE PTR [eax+148], 1
$LN205@JewelMain:

; 662  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0051d	8b 06		 mov	 eax, DWORD PTR [esi]
  0051f	68 ff 00 00 00	 push	 255			; 000000ffH
  00524	57		 push	 edi
  00525	50		 push	 eax
  00526	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 663  : 					lpObj->pInventory[source].Clear();

  0052b	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00531	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00534	83 c4 0c	 add	 esp, 12			; 0000000cH
  00537	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 664  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  0053c	8b 4d d8	 mov	 ecx, DWORD PTR _target$GSCopy$[ebp]
  0053f	8b 16		 mov	 edx, DWORD PTR [esi]
  00541	51		 push	 ecx
  00542	52		 push	 edx
  00543	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 665  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00548	8b 06		 mov	 eax, DWORD PTR [esi]
  0054a	6a 01		 push	 1
  0054c	57		 push	 edi
  0054d	50		 push	 eax

; 880  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  0054e	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 881  : 					return;

  00553	e9 87 05 00 00	 jmp	 $LN203@JewelMain
$LN80@JewelMain:

; 666  : 
; 667  : 					//GCMagicListMultiSend(lpObj, 0);//
; 668  : 	//GCMagicListMultiSend(lpObj, 0);
; 669  : 	//gObjUseSkill.SkillChangeUse(lpObj->m_Index);
; 670  : 
; 671  : 					return;
; 672  : 				}
; 673  : 				else
; 674  : 				{
; 675  : 					MsgOutput(lpObj->m_Index, g_ZtText.GetText(26));

  00558	6a 1a		 push	 26			; 0000001aH
  0055a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0055f	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00564	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00566	50		 push	 eax
  00567	51		 push	 ecx

; 676  : 				}
; 677  : 			}
; 678  : 			else

  00568	e9 11 ff ff ff	 jmp	 $LN186@JewelMain
$LN81@JewelMain:

; 679  : 			{
; 680  : 				MsgOutput(lpObj->m_Index, g_ZtText.GetText(27));

  0056d	6a 1b		 push	 27			; 0000001bH

; 681  : 			}
; 682  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 683  : 		}
; 684  : 		else

  0056f	e9 fc fe ff ff	 jmp	 $LN185@JewelMain
$LN83@JewelMain:

; 685  : 		{
; 686  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 687  : 			lpObj->pInventory[source].Clear();
; 688  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 689  : 		}
; 690  : 	}
; 691  : //*************************************
; 692  : //	Jewel Of Level
; 693  : //*************************************
; 694  : 	else if( JewelIndex == ITEMGET(this->JewelOfLevelType,this->JewelOfLevelIndex) ) 

  00574	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00577	c1 e2 09	 shl	 edx, 9
  0057a	03 51 54	 add	 edx, DWORD PTR [ecx+84]
  0057d	3b c2		 cmp	 eax, edx
  0057f	0f 85 5b 01 00
	00		 jne	 $LN75@JewelMain

; 695  : 	{
; 696  : 		if( this->JewelOfLevelRate > iRate )

  00585	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  00588	39 41 64	 cmp	 DWORD PTR [ecx+100], eax
  0058b	0f 8e 71 06 00
	00		 jle	 $LN32@JewelMain

; 697  : 		{
; 698  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0)
; 699  : #ifdef NEW_JEWEL_FROM_WINGS
; 700  : 				|| (lpObj->pInventory[target].m_Type >= ITEMGET(12,0) && lpObj->pInventory[target].m_Type <= ITEMGET(12,6)) || lpObj->pInventory[target].m_Type <= ITEMGET(13,30) || 
; 701  : 				 (lpObj->pInventory[target].m_Type >= ITEMGET(12,36) && lpObj->pInventory[target].m_Type <= ITEMGET(12,40)) || //Season 2.5 Third Wing add-on
; 702  : 				 lpObj->pInventory[target].m_Type == ITEMGET(12,41) || lpObj->pInventory[target].m_Type == ITEMGET(12,42) || lpObj->pInventory[target].m_Type == ITEMGET(12,43)
; 703  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 49)
; 704  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 50)
; 705  : 				|| IS_NEWWINGS(lpObj->pInventory[target].m_Type)
; 706  : 				|| IS_NEWWINGS_6(lpObj->pInventory[target].m_Type)
; 707  : #endif // NEW_JEWEL_FROM_WINGS
; 708  : 				)

  00591	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00597	0f b7 44 13 06	 movzx	 eax, WORD PTR [ebx+edx+6]
  0059c	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  005a1	66 3b c2	 cmp	 ax, dx
  005a4	0f 8c bb 00 00
	00		 jl	 $LN72@JewelMain
  005aa	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  005af	66 3b c2	 cmp	 ax, dx
  005b2	0f 8e ad 00 00
	00		 jle	 $LN72@JewelMain
  005b8	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  005bd	66 3b c2	 cmp	 ax, dx
  005c0	0f 8e 9f 00 00
	00		 jle	 $LN72@JewelMain
  005c6	ba 24 18 00 00	 mov	 edx, 6180		; 00001824H
  005cb	66 3b c2	 cmp	 ax, dx
  005ce	7c 0e		 jl	 SHORT $LN70@JewelMain
  005d0	ba 28 18 00 00	 mov	 edx, 6184		; 00001828H
  005d5	66 3b c2	 cmp	 ax, dx
  005d8	0f 8e 87 00 00
	00		 jle	 $LN72@JewelMain
$LN70@JewelMain:
  005de	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  005e3	66 3b c2	 cmp	 ax, dx
  005e6	74 7d		 je	 SHORT $LN72@JewelMain
  005e8	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  005ed	66 3b c2	 cmp	 ax, dx
  005f0	74 73		 je	 SHORT $LN72@JewelMain
  005f2	ba 2b 18 00 00	 mov	 edx, 6187		; 0000182bH
  005f7	66 3b c2	 cmp	 ax, dx
  005fa	74 69		 je	 SHORT $LN72@JewelMain
  005fc	ba 31 18 00 00	 mov	 edx, 6193		; 00001831H
  00601	66 3b c2	 cmp	 ax, dx
  00604	74 5f		 je	 SHORT $LN72@JewelMain
  00606	ba 32 18 00 00	 mov	 edx, 6194		; 00001832H
  0060b	66 3b c2	 cmp	 ax, dx
  0060e	74 55		 je	 SHORT $LN72@JewelMain
  00610	b9 b4 18 00 00	 mov	 ecx, 6324		; 000018b4H
  00615	66 3b c1	 cmp	 ax, cx
  00618	7c 11		 jl	 SHORT $LN169@JewelMain
  0061a	33 c9		 xor	 ecx, ecx
  0061c	ba c2 18 00 00	 mov	 edx, 6338		; 000018c2H
  00621	66 3b c2	 cmp	 ax, dx
  00624	0f 9e c1	 setle	 cl
  00627	85 c9		 test	 ecx, ecx
  00629	75 37		 jne	 SHORT $LN175@JewelMain
$LN169@JewelMain:
  0062b	b9 c3 18 00 00	 mov	 ecx, 6339		; 000018c3H
  00630	66 3b c1	 cmp	 ax, cx
  00633	7c 13		 jl	 SHORT $LN170@JewelMain
  00635	33 c9		 xor	 ecx, ecx
  00637	ba dc 18 00 00	 mov	 edx, 6364		; 000018dcH
  0063c	66 3b c2	 cmp	 ax, dx
  0063f	0f 9e c1	 setle	 cl
  00642	8b c1		 mov	 eax, ecx
  00644	85 c0		 test	 eax, eax
  00646	75 1a		 jne	 SHORT $LN175@JewelMain
$LN170@JewelMain:

; 729  : 				}
; 730  : 			}
; 731  : 			else
; 732  : 			{
; 733  : 				MsgOutput(lpObj->m_Index,g_ZtText.GetText(30));

  00648	6a 1e		 push	 30			; 0000001eH
  0064a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0064f	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00654	8b 16		 mov	 edx, DWORD PTR [esi]
  00656	50		 push	 eax
  00657	52		 push	 edx
  00658	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0065d	83 c4 08	 add	 esp, 8
  00660	eb 54		 jmp	 SHORT $LN66@JewelMain
$LN175@JewelMain:
  00662	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
$LN72@JewelMain:

; 709  : 			{
; 710  : 				if(TargetLevel >= this->JewelOfLevelMin)

  00665	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00668	8b 55 c4	 mov	 edx, DWORD PTR _TargetLevel$[ebp]
  0066b	3b d0		 cmp	 edx, eax
  0066d	7c 2e		 jl	 SHORT $LN69@JewelMain

; 711  : 				{
; 712  : 					if(TargetLevel < this->JewelOfLevelMax)

  0066f	8b 49 5c	 mov	 ecx, DWORD PTR [ecx+92]
  00672	3b d1		 cmp	 edx, ecx
  00674	7d 14		 jge	 SHORT $LN68@JewelMain
$LN204@JewelMain:

; 713  : 					{
; 714  : 						lpObj->pInventory[target].m_Level++;

  00676	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  0067c	66 ff 44 03 08	 inc	 WORD PTR [ebx+eax+8]
  00681	8d 44 03 08	 lea	 eax, DWORD PTR [ebx+eax+8]

; 715  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 716  : 						lpObj->pInventory[source].Clear();
; 717  : 						GCInventoryItemOneSend(lpObj->m_Index, target);
; 718  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 719  : 						return;

  00685	e9 21 05 00 00	 jmp	 $LN196@JewelMain
$LN68@JewelMain:

; 720  : 					}
; 721  : 					else
; 722  : 					{
; 723  : 						MsgOutput(lpObj->m_Index,g_ZtText.GetText(28),this->JewelOfLevelMax);

  0068a	51		 push	 ecx
  0068b	6a 1c		 push	 28			; 0000001cH
  0068d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00692	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00697	8b 16		 mov	 edx, DWORD PTR [esi]
  00699	50		 push	 eax
  0069a	52		 push	 edx

; 724  : 					}
; 725  : 				}
; 726  : 				else

  0069b	eb 11		 jmp	 SHORT $LN187@JewelMain
$LN69@JewelMain:

; 727  : 				{
; 728  : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(29),this->JewelOfLevelMin);

  0069d	50		 push	 eax
  0069e	6a 1d		 push	 29			; 0000001dH
  006a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  006a5	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  006aa	50		 push	 eax
  006ab	8b 06		 mov	 eax, DWORD PTR [esi]
  006ad	50		 push	 eax
$LN187@JewelMain:
  006ae	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  006b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN66@JewelMain:

; 734  : 			}
; 735  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  006b6	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  006bc	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  006c2	51		 push	 ecx
  006c3	6a 01		 push	 1
  006c5	68 fd 00 00 00	 push	 253			; 000000fdH
  006ca	e8 00 00 00 00	 call	 __ftol2_sse
  006cf	8b 16		 mov	 edx, DWORD PTR [esi]
  006d1	50		 push	 eax
  006d2	52		 push	 edx
  006d3	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  006d8	83 c4 14	 add	 esp, 20			; 00000014H
  006db	e9 4f 05 00 00	 jmp	 $LN183@JewelMain
$LN75@JewelMain:

; 736  : 		}
; 737  : 		else
; 738  : 		{
; 739  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 740  : 			lpObj->pInventory[source].Clear();
; 741  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 742  : 		}
; 743  : 	}		
; 744  : //*************************************
; 745  : //	Jewel Of Evalution
; 746  : //*************************************
; 747  : 	else if( JewelIndex == ITEMGET(this->JewelOfEvalutionType,this->JewelOfEvalutionIndex) )

  006e0	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  006e3	c1 e2 09	 shl	 edx, 9
  006e6	03 51 6c	 add	 edx, DWORD PTR [ecx+108]
  006e9	3b c2		 cmp	 eax, edx
  006eb	0f 85 28 01 00
	00		 jne	 $LN62@JewelMain

; 748  : 	{
; 749  : 		if( this->JewelOfEvalutionRate > iRate )

  006f1	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  006f4	39 41 74	 cmp	 DWORD PTR [ecx+116], eax
  006f7	0f 8e 05 05 00
	00		 jle	 $LN32@JewelMain

; 750  : 		{
; 751  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0) || this->IsAccessory(lpObj->pInventory[target].m_Type) == true)

  006fd	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00703	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00706	89 45 d0	 mov	 DWORD PTR tv1995[ebp], eax
  00709	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  0070d	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  00712	66 3b c2	 cmp	 ax, dx
  00715	7c 20		 jl	 SHORT $LN59@JewelMain
  00717	98		 cwde
  00718	50		 push	 eax
  00719	e8 00 00 00 00	 call	 ?IsAccessory@cNewJewels@@QAE_NH@Z ; cNewJewels::IsAccessory
  0071e	3c 01		 cmp	 al, 1
  00720	74 15		 je	 SHORT $LN59@JewelMain

; 767  : 				}
; 768  : 			}
; 769  : 			else
; 770  : 			{
; 771  : 				MsgOutput(lpObj->m_Index,g_ZtText.GetText(32));

  00722	6a 20		 push	 32			; 00000020H
  00724	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00729	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0072e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00730	50		 push	 eax
  00731	51		 push	 ecx
  00732	e9 b0 00 00 00	 jmp	 $LN188@JewelMain
$LN59@JewelMain:

; 752  : 			{
; 753  : 				if(lpObj->pInventory[target].m_NewOption == 0)

  00737	8b 55 d0	 mov	 edx, DWORD PTR tv1995[ebp]
  0073a	80 ba 97 00 00
	00 00		 cmp	 BYTE PTR [edx+151], 0
  00741	0f 85 90 00 00
	00		 jne	 $LN58@JewelMain

; 754  : 				{
; 755  : 						int ExcellentOpt[6] = { 1, 2, 4, 8, 16, 32 };
; 756  : 						srand(time(NULL));

  00747	6a 00		 push	 0
  00749	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204964[ebp], 1
  00750	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204964[ebp+4], 2
  00757	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204964[ebp+8], 4
  0075e	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204964[ebp+12], 8
  00765	c7 45 f4 10 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204964[ebp+16], 16 ; 00000010H
  0076c	c7 45 f8 20 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$204964[ebp+20], 32 ; 00000020H
  00773	e8 00 00 00 00	 call	 __time64
  00778	50		 push	 eax
  00779	e8 00 00 00 00	 call	 _srand

; 757  : 						lpObj->pInventory[target].m_NewOption = ExcellentOpt[rand()%6];

  0077e	e8 00 00 00 00	 call	 _rand
  00783	99		 cdq
  00784	b9 06 00 00 00	 mov	 ecx, 6
  00789	f7 f9		 idiv	 ecx
  0078b	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]

; 758  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);

  00791	68 ff 00 00 00	 push	 255			; 000000ffH
  00796	57		 push	 edi
  00797	8a 4c 95 e4	 mov	 cl, BYTE PTR _ExcellentOpt$204964[ebp+edx*4]
  0079b	88 8c 03 97 00
	00 00		 mov	 BYTE PTR [ebx+eax+151], cl
  007a2	8b 16		 mov	 edx, DWORD PTR [esi]
  007a4	52		 push	 edx
  007a5	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 759  : 						lpObj->pInventory[source].Clear();

  007aa	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  007b0	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  007b3	83 c4 14	 add	 esp, 20			; 00000014H
  007b6	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 760  : 						GCInventoryItemOneSend(lpObj->m_Index, target);

  007bb	8b 45 d8	 mov	 eax, DWORD PTR _target$GSCopy$[ebp]
  007be	8b 0e		 mov	 ecx, DWORD PTR [esi]
  007c0	50		 push	 eax
  007c1	51		 push	 ecx
  007c2	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 761  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  007c7	8b 16		 mov	 edx, DWORD PTR [esi]
  007c9	6a 01		 push	 1
  007cb	57		 push	 edi
  007cc	52		 push	 edx

; 941  : 				GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  007cd	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 942  : 				return;

  007d2	e9 08 03 00 00	 jmp	 $LN203@JewelMain
$LN58@JewelMain:

; 762  : 						return;
; 763  : 				}
; 764  : 				else
; 765  : 				{
; 766  : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(31));

  007d7	6a 1f		 push	 31			; 0000001fH
$LN202@JewelMain:
  007d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  007de	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  007e3	50		 push	 eax
  007e4	8b 06		 mov	 eax, DWORD PTR [esi]
  007e6	50		 push	 eax
$LN188@JewelMain:
  007e7	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 772  : 			}
; 773  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  007ec	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  007f2	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  007f8	83 c4 08	 add	 esp, 8
  007fb	51		 push	 ecx
  007fc	6a 01		 push	 1
  007fe	68 fd 00 00 00	 push	 253			; 000000fdH
  00803	e8 00 00 00 00	 call	 __ftol2_sse
  00808	8b 16		 mov	 edx, DWORD PTR [esi]
  0080a	50		 push	 eax
  0080b	52		 push	 edx
  0080c	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00811	83 c4 14	 add	 esp, 20			; 00000014H
  00814	e9 16 04 00 00	 jmp	 $LN183@JewelMain
$LN62@JewelMain:

; 774  : 		}
; 775  : 		else
; 776  : 		{
; 777  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 778  : 			lpObj->pInventory[source].Clear();
; 779  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 780  : 		}
; 781  : 	}
; 782  : //*************************************
; 783  : //	Jewel Of Ancent
; 784  : //*************************************
; 785  : 	else if( JewelIndex == ITEMGET(this->JewelOfAncentType,this->JewelOfAncentIndex) )

  00819	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0081c	c1 e2 09	 shl	 edx, 9
  0081f	03 51 7c	 add	 edx, DWORD PTR [ecx+124]
  00822	3b c2		 cmp	 eax, edx
  00824	0f 85 a3 00 00
	00		 jne	 $LN53@JewelMain

; 786  : 	{
; 787  : 		if( this->JewelOfAncentRate > iRate )

  0082a	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  0082d	39 81 84 00 00
	00		 cmp	 DWORD PTR [ecx+132], eax
  00833	0f 8e a4 fa ff
	ff		 jle	 $LN116@JewelMain

; 788  : 		{
; 789  : 			if(lpObj->pInventory[target].m_SetOption == 0)

  00839	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  0083f	80 bc 0b ae 00
	00 00 00	 cmp	 BYTE PTR [ebx+ecx+174], 0
  00847	75 7d		 jne	 SHORT $LN51@JewelMain

; 790  : 			{
; 791  : 				if(gSetItemOption.IsSetItem(TargetIndex) != FALSE)

  00849	8b 55 d0	 mov	 edx, DWORD PTR _TargetIndex$[ebp]
  0084c	52		 push	 edx
  0084d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00852	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  00857	85 c0		 test	 eax, eax
  00859	74 56		 je	 SHORT $LN50@JewelMain

; 792  : 				{
; 793  : 					lpObj->pInventory[target].m_SetOption = gSetItemOption.ExGenSetOption(TargetIndex);

  0085b	8b 45 d0	 mov	 eax, DWORD PTR _TargetIndex$[ebp]
  0085e	50		 push	 eax
  0085f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00864	e8 00 00 00 00	 call	 ?ExGenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::ExGenSetOption
  00869	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]

; 794  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  0086f	68 ff 00 00 00	 push	 255			; 000000ffH
  00874	88 84 0b ae 00
	00 00		 mov	 BYTE PTR [ebx+ecx+174], al
  0087b	8b 16		 mov	 edx, DWORD PTR [esi]
  0087d	57		 push	 edi
  0087e	52		 push	 edx
  0087f	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 795  : 					lpObj->pInventory[source].Clear();

  00884	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  0088a	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  0088d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00890	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 796  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  00895	8b 45 d8	 mov	 eax, DWORD PTR _target$GSCopy$[ebp]
  00898	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0089a	50		 push	 eax
  0089b	51		 push	 ecx
  0089c	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 797  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  008a1	8b 16		 mov	 edx, DWORD PTR [esi]
  008a3	6a 01		 push	 1
  008a5	57		 push	 edi
  008a6	52		 push	 edx

; 941  : 				GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  008a7	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 942  : 				return;

  008ac	e9 2e 02 00 00	 jmp	 $LN203@JewelMain
$LN50@JewelMain:

; 798  : 					return;
; 799  : 				}
; 800  : 				else
; 801  : 				{
; 802  : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(33));

  008b1	6a 21		 push	 33			; 00000021H
  008b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  008b8	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  008bd	50		 push	 eax
  008be	8b 06		 mov	 eax, DWORD PTR [esi]
  008c0	50		 push	 eax

; 803  : 				}
; 804  : 			}
; 805  : 			else

  008c1	e9 e5 f9 ff ff	 jmp	 $LN189@JewelMain
$LN51@JewelMain:

; 806  : 			{
; 807  : 				MsgOutput(lpObj->m_Index,g_ZtText.GetText(34));

  008c6	6a 22		 push	 34			; 00000022H

; 808  : 			}
; 809  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 810  : 		}
; 811  : 		else

  008c8	e9 d0 f9 ff ff	 jmp	 $LN192@JewelMain
$LN53@JewelMain:

; 812  : 		{
; 813  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 814  : 			lpObj->pInventory[source].Clear();
; 815  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 816  : 		}
; 817  : 	}
; 818  : //*************************************
; 819  : //	Jewel Of Option
; 820  : //*************************************
; 821  : 	else if( JewelIndex == ITEMGET(this->JewelOfOptionType,this->JewelOfOptionIndex) ) //JewelOfOption

  008cd	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  008d3	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  008d9	c1 e0 09	 shl	 eax, 9
  008dc	03 d0		 add	 edx, eax
  008de	39 55 cc	 cmp	 DWORD PTR _JewelIndex$[ebp], edx
  008e1	0f 85 ff 00 00
	00		 jne	 $LN45@JewelMain

; 822  : 	{
; 823  : 		if( this->JewelOfOptionRate > iRate )

  008e7	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  008ea	39 81 94 00 00
	00		 cmp	 DWORD PTR [ecx+148], eax
  008f0	0f 8e e7 f9 ff
	ff		 jle	 $LN116@JewelMain

; 824  : 		{
; 825  : 			if(lpObj->pInventory[target].m_Type < ITEMGET(12,0)
; 826  : #ifdef NEW_JEWEL_FROM_WINGS
; 827  : 				|| (lpObj->pInventory[target].m_Type >= ITEMGET(12,0) && lpObj->pInventory[target].m_Type <= ITEMGET(12,6)) || lpObj->pInventory[target].m_Type <= ITEMGET(13,30) || 
; 828  : 				 (lpObj->pInventory[target].m_Type >= ITEMGET(12,36) && lpObj->pInventory[target].m_Type <= ITEMGET(12,40)) || //Season 2.5 Third Wing add-on
; 829  : 				 lpObj->pInventory[target].m_Type == ITEMGET(12,41) || lpObj->pInventory[target].m_Type == ITEMGET(12,42) || lpObj->pInventory[target].m_Type == ITEMGET(12,43)
; 830  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 49)
; 831  : 				 || lpObj->pInventory[target].m_Type == ITEMGET(12, 50)
; 832  : 				|| IS_NEWWINGS(lpObj->pInventory[target].m_Type)
; 833  : 				|| IS_NEWWINGS_6(lpObj->pInventory[target].m_Type)
; 834  : #endif // NEW_JEWEL_FROM_WINGS
; 835  : 				)

  008f6	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  008fc	0f b7 44 19 06	 movzx	 eax, WORD PTR [ecx+ebx+6]
  00901	03 cb		 add	 ecx, ebx
  00903	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  00908	89 4d d0	 mov	 DWORD PTR tv1995[ebp], ecx
  0090b	66 3b c2	 cmp	 ax, dx
  0090e	0f 8c b6 00 00
	00		 jl	 $LN42@JewelMain
  00914	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  00919	66 3b c2	 cmp	 ax, dx
  0091c	0f 8e a8 00 00
	00		 jle	 $LN42@JewelMain
  00922	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  00927	66 3b c2	 cmp	 ax, dx
  0092a	0f 8e 9a 00 00
	00		 jle	 $LN42@JewelMain
  00930	ba 24 18 00 00	 mov	 edx, 6180		; 00001824H
  00935	66 3b c2	 cmp	 ax, dx
  00938	7c 0e		 jl	 SHORT $LN40@JewelMain
  0093a	ba 28 18 00 00	 mov	 edx, 6184		; 00001828H
  0093f	66 3b c2	 cmp	 ax, dx
  00942	0f 8e 82 00 00
	00		 jle	 $LN42@JewelMain
$LN40@JewelMain:
  00948	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  0094d	66 3b c2	 cmp	 ax, dx
  00950	74 78		 je	 SHORT $LN42@JewelMain
  00952	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  00957	66 3b c2	 cmp	 ax, dx
  0095a	74 6e		 je	 SHORT $LN42@JewelMain
  0095c	ba 2b 18 00 00	 mov	 edx, 6187		; 0000182bH
  00961	66 3b c2	 cmp	 ax, dx
  00964	74 64		 je	 SHORT $LN42@JewelMain
  00966	ba 31 18 00 00	 mov	 edx, 6193		; 00001831H
  0096b	66 3b c2	 cmp	 ax, dx
  0096e	74 5a		 je	 SHORT $LN42@JewelMain
  00970	ba 32 18 00 00	 mov	 edx, 6194		; 00001832H
  00975	66 3b c2	 cmp	 ax, dx
  00978	74 50		 je	 SHORT $LN42@JewelMain
  0097a	b9 b4 18 00 00	 mov	 ecx, 6324		; 000018b4H
  0097f	66 3b c1	 cmp	 ax, cx
  00982	7c 11		 jl	 SHORT $LN171@JewelMain
  00984	33 c9		 xor	 ecx, ecx
  00986	ba c2 18 00 00	 mov	 edx, 6338		; 000018c2H
  0098b	66 3b c2	 cmp	 ax, dx
  0098e	0f 9e c1	 setle	 cl
  00991	85 c9		 test	 ecx, ecx
  00993	75 32		 jne	 SHORT $LN176@JewelMain
$LN171@JewelMain:
  00995	b9 c3 18 00 00	 mov	 ecx, 6339		; 000018c3H
  0099a	66 3b c1	 cmp	 ax, cx
  0099d	7c 13		 jl	 SHORT $LN172@JewelMain
  0099f	33 c9		 xor	 ecx, ecx
  009a1	ba dc 18 00 00	 mov	 edx, 6364		; 000018dcH
  009a6	66 3b c2	 cmp	 ax, dx
  009a9	0f 9e c1	 setle	 cl
  009ac	8b c1		 mov	 eax, ecx
  009ae	85 c0		 test	 eax, eax
  009b0	75 15		 jne	 SHORT $LN176@JewelMain
$LN172@JewelMain:

; 849  : 				}
; 850  : 			}
; 851  : 			else
; 852  : 			{
; 853  : 				MsgOutput(lpObj->m_Index,g_ZtText.GetText(32));

  009b2	6a 20		 push	 32			; 00000020H
  009b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  009b9	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  009be	8b 16		 mov	 edx, DWORD PTR [esi]
  009c0	50		 push	 eax
  009c1	52		 push	 edx
  009c2	e9 e4 f8 ff ff	 jmp	 $LN189@JewelMain
$LN176@JewelMain:
  009c7	8b 4d d0	 mov	 ecx, DWORD PTR tv1995[ebp]
$LN42@JewelMain:

; 836  : 			{
; 837  : 				if(lpObj->pInventory[target].m_Option3 != 7)

  009ca	b0 07		 mov	 al, 7
  009cc	38 81 96 00 00
	00		 cmp	 BYTE PTR [ecx+150], al
  009d2	74 0b		 je	 SHORT $LN39@JewelMain

; 838  : 				{
; 839  : 					lpObj->pInventory[target].m_Option3 = 7;

  009d4	88 81 96 00 00
	00		 mov	 BYTE PTR [ecx+150], al

; 840  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 841  : 					lpObj->pInventory[source].Clear();
; 842  : 					GCInventoryItemOneSend(lpObj->m_Index, target);
; 843  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 844  : 					return;

  009da	e9 2e 01 00 00	 jmp	 $LN15@JewelMain
$LN39@JewelMain:

; 845  : 				}
; 846  : 				else
; 847  : 				{
; 848  : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(35));

  009df	6a 23		 push	 35			; 00000023H

; 854  : 			}
; 855  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 856  : 		}
; 857  : 		else

  009e1	e9 b7 f8 ff ff	 jmp	 $LN192@JewelMain
$LN45@JewelMain:

; 858  : 		{
; 859  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 860  : 			lpObj->pInventory[source].Clear();
; 861  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 862  : 		}
; 863  : 	}	
; 864  : //*************************************
; 865  : //	Jewel Of PVP
; 866  : //*************************************
; 867  : 	else if( JewelIndex == ITEMGET(this->JewelOfPVPType,this->JewelOfPVPIndex) || JewelIndex == ITEMGET(this->JewelOfOptionType,189))

  009e6	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  009ec	c1 e2 09	 shl	 edx, 9
  009ef	03 91 9c 00 00
	00		 add	 edx, DWORD PTR [ecx+156]
  009f5	39 55 cc	 cmp	 DWORD PTR _JewelIndex$[ebp], edx
  009f8	0f 84 4e 01 00
	00		 je	 $LN33@JewelMain
  009fe	8d 90 bd 00 00
	00		 lea	 edx, DWORD PTR [eax+189]
  00a04	8b 45 cc	 mov	 eax, DWORD PTR _JewelIndex$[ebp]
  00a07	3b c2		 cmp	 eax, edx
  00a09	0f 84 3d 01 00
	00		 je	 $LN33@JewelMain

; 899  : 		}
; 900  : 	}
; 901  : //*************************************
; 902  : //	Jewel Of Socket
; 903  : //*************************************
; 904  : 	else if( JewelIndex == ITEMGET(this->JewelOfSocketType,this->JewelOfSocketIndex) )

  00a0f	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  00a15	c1 e2 09	 shl	 edx, 9
  00a18	03 91 ac 00 00
	00		 add	 edx, DWORD PTR [ecx+172]
  00a1e	3b c2		 cmp	 eax, edx
  00a20	0f 85 0c 02 00
	00		 jne	 $LN27@JewelMain

; 905  : 	{
; 906  : 		if( this->JewelOfSocketRate > iRate )

  00a26	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  00a29	39 81 b4 00 00
	00		 cmp	 DWORD PTR [ecx+180], eax
  00a2f	0f 8e a8 f8 ff
	ff		 jle	 $LN116@JewelMain

; 907  : 		{
; 908  : 			if( g_SocketOption.CheckItemType(lpObj->pInventory[target].m_Type) == true)

  00a35	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00a3b	0f bf 54 0b 06	 movsx	 edx, WORD PTR [ebx+ecx+6]
  00a40	52		 push	 edx
  00a41	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  00a46	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType
  00a4b	3c 01		 cmp	 al, 1
  00a4d	0f 85 f2 00 00
	00		 jne	 $LN23@JewelMain

; 909  : 			{
; 910  : 				int iCount = 0;
; 911  : 				for(int i = 0; i < 5; i++)
; 912  : 				{
; 913  : 					//0xFF - no option
; 914  : 					//0xFE - empty option
; 915  : 
; 916  : 					if(lpObj->pInventory[target].m_SocketOption[i] != 0xFF)

  00a53	03 9e 24 0e 00
	00		 add	 ebx, DWORD PTR [esi+3620]
  00a59	33 c0		 xor	 eax, eax
  00a5b	80 bb cc 00 00
	00 ff		 cmp	 BYTE PTR [ebx+204], 255	; 000000ffH
  00a62	8d 8b cc 00 00
	00		 lea	 ecx, DWORD PTR [ebx+204]
  00a68	74 05		 je	 SHORT $LN21@JewelMain

; 917  : 					{
; 918  : 						iCount++;

  00a6a	b8 01 00 00 00	 mov	 eax, 1
$LN21@JewelMain:

; 909  : 			{
; 910  : 				int iCount = 0;
; 911  : 				for(int i = 0; i < 5; i++)
; 912  : 				{
; 913  : 					//0xFF - no option
; 914  : 					//0xFE - empty option
; 915  : 
; 916  : 					if(lpObj->pInventory[target].m_SocketOption[i] != 0xFF)

  00a6f	80 bb cd 00 00
	00 ff		 cmp	 BYTE PTR [ebx+205], 255	; 000000ffH
  00a76	74 01		 je	 SHORT $LN178@JewelMain

; 917  : 					{
; 918  : 						iCount++;

  00a78	40		 inc	 eax
$LN178@JewelMain:

; 909  : 			{
; 910  : 				int iCount = 0;
; 911  : 				for(int i = 0; i < 5; i++)
; 912  : 				{
; 913  : 					//0xFF - no option
; 914  : 					//0xFE - empty option
; 915  : 
; 916  : 					if(lpObj->pInventory[target].m_SocketOption[i] != 0xFF)

  00a79	80 bb ce 00 00
	00 ff		 cmp	 BYTE PTR [ebx+206], 255	; 000000ffH
  00a80	74 01		 je	 SHORT $LN179@JewelMain

; 917  : 					{
; 918  : 						iCount++;

  00a82	40		 inc	 eax
$LN179@JewelMain:

; 909  : 			{
; 910  : 				int iCount = 0;
; 911  : 				for(int i = 0; i < 5; i++)
; 912  : 				{
; 913  : 					//0xFF - no option
; 914  : 					//0xFE - empty option
; 915  : 
; 916  : 					if(lpObj->pInventory[target].m_SocketOption[i] != 0xFF)

  00a83	80 bb cf 00 00
	00 ff		 cmp	 BYTE PTR [ebx+207], 255	; 000000ffH
  00a8a	74 01		 je	 SHORT $LN180@JewelMain

; 917  : 					{
; 918  : 						iCount++;

  00a8c	40		 inc	 eax
$LN180@JewelMain:

; 909  : 			{
; 910  : 				int iCount = 0;
; 911  : 				for(int i = 0; i < 5; i++)
; 912  : 				{
; 913  : 					//0xFF - no option
; 914  : 					//0xFE - empty option
; 915  : 
; 916  : 					if(lpObj->pInventory[target].m_SocketOption[i] != 0xFF)

  00a8d	80 bb d0 00 00
	00 ff		 cmp	 BYTE PTR [ebx+208], 255	; 000000ffH
  00a94	74 01		 je	 SHORT $LN166@JewelMain

; 917  : 					{
; 918  : 						iCount++;

  00a96	40		 inc	 eax
$LN166@JewelMain:

; 919  : 					}
; 920  : 				}
; 921  : 
; 922  : 				if(iCount >= this->JewelOfSocketMaxOpt)

  00a97	8b 55 e0	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00a9a	8b 92 b8 00 00
	00		 mov	 edx, DWORD PTR [edx+184]
  00aa0	3b c2		 cmp	 eax, edx
  00aa2	7c 51		 jl	 SHORT $LN18@JewelMain

; 923  : 				{
; 924  : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(38), this->JewelOfSocketMaxOpt);

  00aa4	52		 push	 edx
  00aa5	6a 26		 push	 38			; 00000026H
  00aa7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00aac	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00ab1	50		 push	 eax
  00ab2	8b 06		 mov	 eax, DWORD PTR [esi]
  00ab4	50		 push	 eax
  00ab5	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 925  : 					GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  00aba	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00ac0	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  00ac6	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ac9	51		 push	 ecx
  00aca	6a 01		 push	 1
  00acc	68 fd 00 00 00	 push	 253			; 000000fdH
  00ad1	e8 00 00 00 00	 call	 __ftol2_sse
  00ad6	8b 16		 mov	 edx, DWORD PTR [esi]
  00ad8	50		 push	 eax
  00ad9	52		 push	 edx
$LN199@JewelMain:

; 1018 : 						}
; 1019 : 					}
; 1020 : 				}
; 1021 : 				else
; 1022 : 				{
; 1023 : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(41));
; 1024 : 				}
; 1025 : 			}
; 1026 : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  00ada	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
$LN203@JewelMain:
  00adf	83 c4 14	 add	 esp, 20			; 00000014H
$LN181@JewelMain:
  00ae2	5b		 pop	 ebx
  00ae3	5f		 pop	 edi
  00ae4	5e		 pop	 esi

; 1033 : 		}
; 1034 : 	}
; 1035 : }

  00ae5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ae8	33 cd		 xor	 ecx, ebp
  00aea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00aef	8b e5		 mov	 esp, ebp
  00af1	5d		 pop	 ebp
  00af2	c2 0c 00	 ret	 12			; 0000000cH
$LN18@JewelMain:

; 926  : 					return;
; 927  : 				}
; 928  : 
; 929  : 				for(int i = 0; i < 5; i++)

  00af5	33 c0		 xor	 eax, eax
$LL17@JewelMain:

; 930  : 				{
; 931  : 					if(lpObj->pInventory[target].m_SocketOption[i] == 0xFF)

  00af7	80 39 ff	 cmp	 BYTE PTR [ecx], 255	; 000000ffH
  00afa	74 09		 je	 SHORT $LN153@JewelMain

; 926  : 					return;
; 927  : 				}
; 928  : 
; 929  : 				for(int i = 0; i < 5; i++)

  00afc	40		 inc	 eax
  00afd	41		 inc	 ecx
  00afe	83 f8 05	 cmp	 eax, 5
  00b01	7c f4		 jl	 SHORT $LL17@JewelMain

; 930  : 				{
; 931  : 					if(lpObj->pInventory[target].m_SocketOption[i] == 0xFF)

  00b03	eb 08		 jmp	 SHORT $LN15@JewelMain
$LN153@JewelMain:

; 932  : 					{
; 933  : 						lpObj->pInventory[target].m_SocketOption[i] = 0xFE;

  00b05	c6 84 03 cc 00
	00 00 fe	 mov	 BYTE PTR [ebx+eax+204], 254 ; 000000feH
$LN15@JewelMain:

; 934  : 						break;
; 935  : 					}
; 936  : 				}		
; 937  : 				
; 938  : 				gObjInventoryItemSet(lpObj->m_Index, source, -1);

  00b0d	8b 06		 mov	 eax, DWORD PTR [esi]
  00b0f	68 ff 00 00 00	 push	 255			; 000000ffH
  00b14	57		 push	 edi
  00b15	50		 push	 eax
  00b16	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 939  : 				lpObj->pInventory[source].Clear();

  00b1b	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00b21	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00b24	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b27	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 940  : 				GCInventoryItemOneSend(lpObj->m_Index, target);

  00b2c	8b 4d d8	 mov	 ecx, DWORD PTR _target$GSCopy$[ebp]
  00b2f	8b 16		 mov	 edx, DWORD PTR [esi]
  00b31	51		 push	 ecx
  00b32	52		 push	 edx
  00b33	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 941  : 				GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00b38	8b 06		 mov	 eax, DWORD PTR [esi]
  00b3a	6a 01		 push	 1
  00b3c	57		 push	 edi
  00b3d	50		 push	 eax
  00b3e	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 942  : 				return;

  00b43	eb 9a		 jmp	 SHORT $LN203@JewelMain
$LN23@JewelMain:

; 943  : 			}
; 944  : 			else
; 945  : 			{
; 946  : 				MsgOutput(lpObj->m_Index,g_ZtText.GetText(39));

  00b45	6a 27		 push	 39			; 00000027H

; 947  : 			}
; 948  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 949  : 		}
; 950  : 		else

  00b47	e9 51 f7 ff ff	 jmp	 $LN192@JewelMain
$LN33@JewelMain:

; 868  : 	{
; 869  : 		if( this->JewelOfPVPRate > iRate )

  00b4c	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  00b4f	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  00b55	0f 8e a7 00 00
	00		 jle	 $LN32@JewelMain

; 870  : 		{
; 871  : 			if( g_kItemSystemFor380.m_bSystemFor380ItemOption == TRUE &&
; 872  : 				g_kItemSystemFor380.Is380OptionItem(&lpObj->pInventory[target]) == FALSE)

  00b5b	83 3d 04 00 02
	00 01		 cmp	 DWORD PTR ?g_kItemSystemFor380@@3VCItemSystemFor380@@A+131076, 1
  00b62	0f 85 93 00 00
	00		 jne	 $LN31@JewelMain
  00b68	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00b6e	03 cb		 add	 ecx, ebx
  00b70	51		 push	 ecx
  00b71	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  00b76	e8 00 00 00 00	 call	 ?Is380OptionItem@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380OptionItem
  00b7b	85 c0		 test	 eax, eax
  00b7d	75 7c		 jne	 SHORT $LN31@JewelMain

; 873  : 			{
; 874  : 				if(g_kItemSystemFor380.Is380Item(&lpObj->pInventory[target]) != FALSE)

  00b7f	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00b85	03 d3		 add	 edx, ebx
  00b87	52		 push	 edx
  00b88	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  00b8d	e8 00 00 00 00	 call	 ?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380Item
  00b92	85 c0		 test	 eax, eax
  00b94	74 50		 je	 SHORT $LN30@JewelMain

; 875  : 				{
; 876  : 					g_kItemSystemFor380._SetOption(&lpObj->pInventory[target], TRUE);

  00b96	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  00b9c	6a 01		 push	 1
  00b9e	03 c3		 add	 eax, ebx
  00ba0	50		 push	 eax
  00ba1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  00ba6	e8 00 00 00 00	 call	 ?_SetOption@CItemSystemFor380@@QAEHPAVCItem@@H@Z ; CItemSystemFor380::_SetOption
$LN196@JewelMain:

; 877  : 					gObjInventoryItemSet(lpObj->m_Index, source, -1);

  00bab	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00bad	68 ff 00 00 00	 push	 255			; 000000ffH
  00bb2	57		 push	 edi
  00bb3	51		 push	 ecx
  00bb4	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 878  : 					lpObj->pInventory[source].Clear();

  00bb9	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00bbf	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00bc2	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bc5	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 879  : 					GCInventoryItemOneSend(lpObj->m_Index, target);

  00bca	8b 55 d8	 mov	 edx, DWORD PTR _target$GSCopy$[ebp]
  00bcd	8b 06		 mov	 eax, DWORD PTR [esi]
  00bcf	52		 push	 edx
  00bd0	50		 push	 eax
  00bd1	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 880  : 					GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00bd6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00bd8	6a 01		 push	 1
  00bda	57		 push	 edi
  00bdb	51		 push	 ecx
  00bdc	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 881  : 					return;

  00be1	e9 f9 fe ff ff	 jmp	 $LN203@JewelMain
$LN30@JewelMain:

; 882  : 				}
; 883  : 				else
; 884  : 				{
; 885  : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(36));

  00be6	6a 24		 push	 36			; 00000024H
  00be8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00bed	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00bf2	8b 16		 mov	 edx, DWORD PTR [esi]
  00bf4	50		 push	 eax
  00bf5	52		 push	 edx

; 886  : 				}
; 887  : 			}
; 888  : 			else

  00bf6	e9 ec fb ff ff	 jmp	 $LN188@JewelMain
$LN31@JewelMain:

; 889  : 			{
; 890  : 				MsgOutput(lpObj->m_Index,g_ZtText.GetText(37));

  00bfb	6a 25		 push	 37			; 00000025H

; 891  : 			}
; 892  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);
; 893  : 		}
; 894  : 		else

  00bfd	e9 d7 fb ff ff	 jmp	 $LN202@JewelMain
$LN32@JewelMain:

; 895  : 		{
; 896  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  00c02	8b 06		 mov	 eax, DWORD PTR [esi]
  00c04	68 ff 00 00 00	 push	 255			; 000000ffH
  00c09	57		 push	 edi
  00c0a	50		 push	 eax
  00c0b	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 897  : 			lpObj->pInventory[source].Clear();

  00c10	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00c16	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00c19	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c1c	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 898  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00c21	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00c23	6a 01		 push	 1
  00c25	57		 push	 edi
  00c26	51		 push	 ecx
$LN184@JewelMain:
  00c27	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  00c2c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN183@JewelMain:
  00c2f	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
$LN27@JewelMain:

; 951  : 		{
; 952  : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 953  : 			lpObj->pInventory[source].Clear();
; 954  : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 955  : 		}
; 956  : 	}
; 957  : //*************************************
; 958  : //	Jewel Of Wings Exellent
; 959  : //*************************************
; 960  : 	if(JewelIndex == ITEMGET(this->JewelOfWingType,this->JewelOfWingIndex))

  00c32	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00c38	c1 e2 09	 shl	 edx, 9
  00c3b	03 91 c0 00 00
	00		 add	 edx, DWORD PTR [ecx+192]
  00c41	39 55 cc	 cmp	 DWORD PTR _JewelIndex$[ebp], edx
  00c44	0f 85 98 fe ff
	ff		 jne	 $LN181@JewelMain

; 961  : 	{
; 962  : 		if(this->JewelOfWingRate > iRate)

  00c4a	8b 45 d4	 mov	 eax, DWORD PTR _iRate$[ebp]
  00c4d	39 81 c8 00 00
	00		 cmp	 DWORD PTR [ecx+200], eax
  00c53	0f 8e 67 01 00
	00		 jle	 $LN10@JewelMain

; 963  : 		{
; 964  : 			if(this->IsWings(lpObj->pInventory[target].m_Type) == true)

  00c59	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00c5f	0f bf 44 1a 06	 movsx	 eax, WORD PTR [edx+ebx+6]
  00c64	03 d3		 add	 edx, ebx
  00c66	50		 push	 eax
  00c67	e8 00 00 00 00	 call	 ?IsWings@cNewJewels@@QAE_NH@Z ; cNewJewels::IsWings
  00c6c	3c 01		 cmp	 al, 1
  00c6e	0f 85 2a 01 00
	00		 jne	 $LN2@JewelMain

; 965  : 			{
; 966  : 				if(lpObj->pInventory[target].m_NewOption == 0)

  00c74	8a 92 97 00 00
	00		 mov	 dl, BYTE PTR [edx+151]
  00c7a	84 d2		 test	 dl, dl
  00c7c	0f 85 88 00 00
	00		 jne	 $LN195@JewelMain

; 967  : 				{
; 968  : 						int ExcellentOpt[4] = { 1, 2, 4, 8 };
; 969  : 						srand(time(NULL));

  00c82	6a 00		 push	 0
  00c84	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$205018[ebp], 1
  00c8b	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$205018[ebp+4], 2
  00c92	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$205018[ebp+8], 4
  00c99	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _ExcellentOpt$205018[ebp+12], 8
  00ca0	e8 00 00 00 00	 call	 __time64
  00ca5	50		 push	 eax
  00ca6	e8 00 00 00 00	 call	 _srand

; 970  : 						
; 971  : 						//lpObj->pInventory[target].m_NewOption |= 32;
; 972  : 						//lpObj->pInventory[target].m_NewOption |= 16;
; 973  : 						lpObj->pInventory[target].m_NewOption |= ExcellentOpt[rand()%4];

  00cab	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00cb1	8d 9c 0b 97 00
	00 00		 lea	 ebx, DWORD PTR [ebx+ecx+151]
  00cb8	e8 00 00 00 00	 call	 _rand
  00cbd	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00cc2	79 05		 jns	 SHORT $LN182@JewelMain
  00cc4	48		 dec	 eax
  00cc5	83 c8 fc	 or	 eax, -4			; fffffffcH
  00cc8	40		 inc	 eax
$LN182@JewelMain:
  00cc9	8a 54 85 ec	 mov	 dl, BYTE PTR _ExcellentOpt$205018[ebp+eax*4]
  00ccd	08 13		 or	 BYTE PTR [ebx], dl

; 974  : 
; 975  : 						
; 976  : 
; 977  : 						gObjInventoryItemSet(lpObj->m_Index, source, -1);

  00ccf	8b 06		 mov	 eax, DWORD PTR [esi]
  00cd1	68 ff 00 00 00	 push	 255			; 000000ffH
  00cd6	57		 push	 edi
  00cd7	50		 push	 eax
  00cd8	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 978  : 						lpObj->pInventory[source].Clear();

  00cdd	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00ce3	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00ce6	83 c4 14	 add	 esp, 20			; 00000014H
  00ce9	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 979  : 						GCInventoryItemOneSend(lpObj->m_Index, target);

  00cee	8b 4d d8	 mov	 ecx, DWORD PTR _target$GSCopy$[ebp]
  00cf1	8b 16		 mov	 edx, DWORD PTR [esi]
  00cf3	51		 push	 ecx
  00cf4	52		 push	 edx
  00cf5	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 980  : 						GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00cfa	8b 06		 mov	 eax, DWORD PTR [esi]
  00cfc	6a 01		 push	 1
  00cfe	57		 push	 edi
  00cff	50		 push	 eax
  00d00	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 981  : 						return;

  00d05	e9 d5 fd ff ff	 jmp	 $LN203@JewelMain
$LN195@JewelMain:

; 982  : 				}
; 983  : 				else if(lpObj->pInventory[target].m_NewOption > 0)
; 984  : 				{
; 985  : 					if(NumOfWingExcOptions(lpObj->pInventory[target].m_NewOption) < this->JewelOfWingMaxOpt)

  00d0a	0f b6 ca	 movzx	 ecx, dl
  00d0d	51		 push	 ecx
  00d0e	e8 00 00 00 00	 call	 ?NumOfWingExcOptions@@YAEH@Z ; NumOfWingExcOptions
  00d13	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00d16	88 45 cb	 mov	 BYTE PTR tv2330[ebp], al
  00d19	0f b6 c0	 movzx	 eax, al
  00d1c	83 c4 04	 add	 esp, 4
  00d1f	3b 81 cc 00 00
	00		 cmp	 eax, DWORD PTR [ecx+204]
  00d25	7d 77		 jge	 SHORT $LN2@JewelMain

; 986  : 					{
; 987  : 						if(5 > NumOfWingExcOptions(lpObj->pInventory[target].m_NewOption))

  00d27	80 7d cb 05	 cmp	 BYTE PTR tv2330[ebp], 5
  00d2b	73 55		 jae	 SHORT $LN4@JewelMain

; 988  : 						{
; 989  : 							//BYTE NewOption = GetExcWingOption(lpObj->pInventory[target].m_NewOption);
; 990  : 							//BYTE NewOption = this->GetExcUnusedOption(lpObj->pInventory[target].m_NewOption);
; 991  : 							//lpObj->pInventory[target].m_NewOption = NewOption;
; 992  : 
; 993  : 							BYTE NewOption = GetNewWingExlOpt(lpObj->pInventory[target].m_NewOption);

  00d2d	52		 push	 edx
  00d2e	e8 00 00 00 00	 call	 ?GetNewWingExlOpt@@YAEE@Z ; GetNewWingExlOpt

; 994  : 							lpObj->pInventory[target].m_NewOption |= NewOption;

  00d33	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00d39	08 84 13 97 00
	00 00		 or	 BYTE PTR [ebx+edx+151], al

; 995  : 
; 996  : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);

  00d40	8b 06		 mov	 eax, DWORD PTR [esi]
  00d42	8d 8c 13 97 00
	00 00		 lea	 ecx, DWORD PTR [ebx+edx+151]
  00d49	68 ff 00 00 00	 push	 255			; 000000ffH
  00d4e	57		 push	 edi
  00d4f	50		 push	 eax
  00d50	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 997  : 							lpObj->pInventory[source].Clear();

  00d55	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00d5b	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00d5e	83 c4 10	 add	 esp, 16			; 00000010H
  00d61	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 998  : 							GCInventoryItemOneSend(lpObj->m_Index, target);

  00d66	8b 4d d8	 mov	 ecx, DWORD PTR _target$GSCopy$[ebp]
  00d69	8b 16		 mov	 edx, DWORD PTR [esi]
  00d6b	51		 push	 ecx
  00d6c	52		 push	 edx
  00d6d	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 999  : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00d72	8b 06		 mov	 eax, DWORD PTR [esi]
  00d74	6a 01		 push	 1
  00d76	57		 push	 edi
  00d77	50		 push	 eax
  00d78	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 1000 : 
; 1001 : 							return;

  00d7d	e9 5d fd ff ff	 jmp	 $LN203@JewelMain
$LN4@JewelMain:

; 1002 : 						}
; 1003 : 						/*else if(5 == NumOfExcOptions(lpObj->pInventory[target].m_NewOption))
; 1004 : 						{
; 1005 : 							BYTE NewOption = 63;
; 1006 : 						
; 1007 : 							lpObj->pInventory[target].m_NewOption = NewOption;
; 1008 : 							gObjInventoryItemSet(lpObj->m_Index, source, -1);
; 1009 : 							lpObj->pInventory[source].Clear();
; 1010 : 							GCInventoryItemOneSend(lpObj->m_Index, target);
; 1011 : 							GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);
; 1012 : 
; 1013 : 							return;
; 1014 : 						}*/
; 1015 : 						else
; 1016 : 						{
; 1017 : 							MsgOutput(lpObj->m_Index,g_ZtText.GetText(40),this->JewelOfExellentMaxOpt);

  00d82	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00d85	52		 push	 edx
  00d86	6a 28		 push	 40			; 00000028H
  00d88	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00d8d	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00d92	50		 push	 eax
  00d93	8b 06		 mov	 eax, DWORD PTR [esi]
  00d95	50		 push	 eax
  00d96	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00d9b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@JewelMain:

; 1018 : 						}
; 1019 : 					}
; 1020 : 				}
; 1021 : 				else
; 1022 : 				{
; 1023 : 					MsgOutput(lpObj->m_Index,g_ZtText.GetText(41));
; 1024 : 				}
; 1025 : 			}
; 1026 : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  00d9e	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  00da4	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00daa	52		 push	 edx
  00dab	6a 01		 push	 1
  00dad	68 fd 00 00 00	 push	 253			; 000000fdH
  00db2	e8 00 00 00 00	 call	 __ftol2_sse
  00db7	50		 push	 eax
  00db8	8b 06		 mov	 eax, DWORD PTR [esi]
  00dba	50		 push	 eax

; 1027 : 		}
; 1028 : 		else

  00dbb	e9 1a fd ff ff	 jmp	 $LN199@JewelMain
$LN10@JewelMain:

; 1029 : 		{
; 1030 : 			gObjInventoryItemSet(lpObj->m_Index, source, -1);

  00dc0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00dc2	68 ff 00 00 00	 push	 255			; 000000ffH
  00dc7	57		 push	 edi
  00dc8	51		 push	 ecx
  00dc9	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 1031 : 			lpObj->pInventory[source].Clear();

  00dce	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00dd4	03 4d dc	 add	 ecx, DWORD PTR tv1991[ebp]
  00dd7	83 c4 0c	 add	 esp, 12			; 0000000cH
  00dda	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 1032 : 			GCInventoryItemDeleteSend(lpObj->m_Index, source, 1);

  00ddf	8b 16		 mov	 edx, DWORD PTR [esi]
  00de1	6a 01		 push	 1
  00de3	57		 push	 edi
  00de4	52		 push	 edx
  00de5	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  00dea	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ded	5b		 pop	 ebx
  00dee	5f		 pop	 edi
  00def	5e		 pop	 esi

; 1033 : 		}
; 1034 : 	}
; 1035 : }

  00df0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00df3	33 cd		 xor	 ecx, ebp
  00df5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00dfa	8b e5		 mov	 esp, ebp
  00dfc	5d		 pop	 ebp
  00dfd	c2 0c 00	 ret	 12			; 0000000cH
$LN127@JewelMain:

; 457  : 	{
; 458  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  00e00	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  00e06	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00e0c	50		 push	 eax
  00e0d	6a 01		 push	 1
  00e0f	68 fd 00 00 00	 push	 253			; 000000fdH
  00e14	e8 00 00 00 00	 call	 __ftol2_sse
  00e19	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00e1b	50		 push	 eax
  00e1c	51		 push	 ecx

; 459  : 		return;

  00e1d	e9 b8 fc ff ff	 jmp	 $LN199@JewelMain
$LN129@JewelMain:

; 451  : 	{
; 452  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  00e22	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  00e28	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00e2e	52		 push	 edx
  00e2f	6a 01		 push	 1
  00e31	68 fd 00 00 00	 push	 253			; 000000fdH
  00e36	e8 00 00 00 00	 call	 __ftol2_sse
  00e3b	50		 push	 eax
  00e3c	8b 06		 mov	 eax, DWORD PTR [esi]
  00e3e	50		 push	 eax
  00e3f	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00e44	83 c4 14	 add	 esp, 20			; 00000014H
  00e47	5f		 pop	 edi
  00e48	5e		 pop	 esi

; 1033 : 		}
; 1034 : 	}
; 1035 : }

  00e49	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e4c	33 cd		 xor	 ecx, ebp
  00e4e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e53	8b e5		 mov	 esp, ebp
  00e55	5d		 pop	 ebp
  00e56	c2 0c 00	 ret	 12			; 0000000cH
$LN131@JewelMain:

; 444  : 	if( source < 0 || source > MAIN_INVENTORY_SIZE - 1 )
; 445  : 	{
; 446  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFD, 1, lpObj->iShield);

  00e59	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  00e5f	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00e65	51		 push	 ecx
  00e66	6a 01		 push	 1
  00e68	68 fd 00 00 00	 push	 253			; 000000fdH
  00e6d	e8 00 00 00 00	 call	 __ftol2_sse
  00e72	8b 16		 mov	 edx, DWORD PTR [esi]
  00e74	50		 push	 eax
  00e75	52		 push	 edx
  00e76	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 1033 : 		}
; 1034 : 	}
; 1035 : }

  00e7b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e7e	83 c4 14	 add	 esp, 20			; 00000014H
  00e81	5f		 pop	 edi
  00e82	33 cd		 xor	 ecx, ebp
  00e84	5e		 pop	 esi
  00e85	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e8a	8b e5		 mov	 esp, ebp
  00e8c	5d		 pop	 ebp
  00e8d	c2 0c 00	 ret	 12			; 0000000cH
?JewelMain@cNewJewels@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP	; cNewJewels::JewelMain
_TEXT	ENDS
END
