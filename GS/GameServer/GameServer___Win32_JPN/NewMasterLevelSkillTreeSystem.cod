; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\NewMasterLevelSkillTreeSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?CHARACTER_TABLE@@3PAU_stCharacterTable@@A	; CHARACTER_TABLE
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	03e8H
	DD	0118H
	DD	03e8H
	DD	03e8H
	DD	04afH
	DD	03e8H
	DD	04afH
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
?CHARACTER_TABLE@@3PAU_stCharacterTable@@A DD 02H	; CHARACTER_TABLE
	DD	00H
	DD	01H
	DD	01H
	DD	04H
	DD	02H
	DD	010H
	DD	03H
	DD	020H
	DD	04H
	DD	08H
	DD	05H
	DD	040H
	DD	06H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCastleState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
;	COMDAT ?GetCastleState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCastleState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCastleState, COMDAT
; _this$ = ecx

; 314  : 	int GetCastleState(){return m_iCastleSiegeState;}

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00003	c3		 ret	 0
?GetCastleState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCastleState
_TEXT	ENDS
PUBLIC	?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ ; CSkillAdditionInfo::GetInfinityArrowSkillTime
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\skilladditioninfo.h
;	COMDAT ?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ PROC ; CSkillAdditionInfo::GetInfinityArrowSkillTime, COMDAT
; _this$ = ecx

; 35   : 	int GetInfinityArrowSkillTime(){return this->m_iInfinityArrowSkillTime;}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ ENDP ; CSkillAdditionInfo::GetInfinityArrowSkillTime
_TEXT	ENDS
PUBLIC	?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ	; CSkillAdditionInfo::GetFireScreamSkill
; Function compile flags: /Ogtp
;	COMDAT ?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ PROC	; CSkillAdditionInfo::GetFireScreamSkill, COMDAT
; _this$ = ecx

; 47   : 	BOOL GetFireScreamSkill(){return this->m_bFireScreamSkill;}

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ ENDP	; CSkillAdditionInfo::GetFireScreamSkill
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CMasterLevelSkillTreeSystem@@6B@		; CMasterLevelSkillTreeSystem::`vftable'
PUBLIC	??0CMasterLevelSkillTreeSystem@@QAE@XZ		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
PUBLIC	??_R4CMasterLevelSkillTreeSystem@@6B@		; CMasterLevelSkillTreeSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMasterLevelSkillTreeSystem@@@8		; CMasterLevelSkillTreeSystem `RTTI Type Descriptor'
PUBLIC	??_R3CMasterLevelSkillTreeSystem@@8		; CMasterLevelSkillTreeSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMasterLevelSkillTreeSystem@@8		; CMasterLevelSkillTreeSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8	; CMasterLevelSkillTreeSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??0MULua@@QAE@XZ:PROC				; MULua::MULua
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMasterLevelSkillTreeSystem@@UAEPAXI@Z:PROC	; CMasterLevelSkillTreeSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8
; File e:\work\tranet_version\gs\gameserver\newmasterlevelskilltreesystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8 DD FLAT:??_R0?AVCMasterLevelSkillTreeSystem@@@8 ; CMasterLevelSkillTreeSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CMasterLevelSkillTreeSystem@@8
rdata$r	SEGMENT
??_R2CMasterLevelSkillTreeSystem@@8 DD FLAT:??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8 ; CMasterLevelSkillTreeSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	SEGMENT
??_R3CMasterLevelSkillTreeSystem@@8 DD 00H		; CMasterLevelSkillTreeSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMasterLevelSkillTreeSystem@@@8
_DATA	SEGMENT
??_R0?AVCMasterLevelSkillTreeSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CMasterLevelSkillTreeSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMasterLevelSkillTreeSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMasterLevelSkillTreeSystem@@6B@
rdata$r	SEGMENT
??_R4CMasterLevelSkillTreeSystem@@6B@ DD 00H		; CMasterLevelSkillTreeSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMasterLevelSkillTreeSystem@@@8
	DD	FLAT:??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CMasterLevelSkillTreeSystem@@6B@
CONST	SEGMENT
??_7CMasterLevelSkillTreeSystem@@6B@ DD FLAT:??_R4CMasterLevelSkillTreeSystem@@6B@ ; CMasterLevelSkillTreeSystem::`vftable'
	DD	FLAT:??_ECMasterLevelSkillTreeSystem@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMasterLevelSkillTreeSystem@@QAE@XZ
_TEXT	SEGMENT
??0CMasterLevelSkillTreeSystem@@QAE@XZ PROC		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem, COMDAT
; _this$ = ecx

; 40   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e c4 55 00
	00		 lea	 ecx, DWORD PTR [esi+21956]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CMasterLevelSkillTreeSystem@@6B@
  0000f	e8 00 00 00 00	 call	 ??0MULua@@QAE@XZ	; MULua::MULua

; 41   : 	this->IsLoaded = false;

  00014	c6 86 c8 55 00
	00 00		 mov	 BYTE PTR [esi+21960], 0

; 42   : }

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c3		 ret	 0
??0CMasterLevelSkillTreeSystem@@QAE@XZ ENDP		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
_TEXT	ENDS
PUBLIC	??1CMasterLevelSkillTreeSystem@@UAE@XZ		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
EXTRN	??1MULua@@QAE@XZ:PROC				; MULua::~MULua
; Function compile flags: /Ogtp
;	COMDAT ??1CMasterLevelSkillTreeSystem@@UAE@XZ
_TEXT	SEGMENT
??1CMasterLevelSkillTreeSystem@@UAE@XZ PROC		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem, COMDAT
; _this$ = ecx

; 46   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMasterLevelSkillTreeSystem@@6B@

; 47   : 
; 48   : }

  00006	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  0000c	e9 00 00 00 00	 jmp	 ??1MULua@@QAE@XZ	; MULua::~MULua
??1CMasterLevelSkillTreeSystem@@UAE@XZ ENDP		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
_TEXT	ENDS
PUBLIC	?ClearPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSkillTreeSystem::ClearPassiveSkill
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ClearPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ClearPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSkillTreeSystem::ClearPassiveSkill, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 460  : 	memset(&lpObj->m_MPSkillOpt,0,sizeof(lpObj->m_MPSkillOpt));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	68 68 01 00 00	 push	 360			; 00000168H
  0000b	05 34 26 00 00	 add	 eax, 9780		; 00002634H
  00010	6a 00		 push	 0
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memset
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 461  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?ClearPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSkillTreeSystem::ClearPassiveSkill
_TEXT	ENDS
PUBLIC	?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
EXTRN	?GetSkillUseType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillUseType
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
; Function compile flags: /Ogtp
;	COMDAT ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z
_TEXT	SEGMENT
_iMLSkill$ = 8						; size = 4
?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z PROC ; CMasterLevelSkillTreeSystem::CheckRequireStatus, COMDAT
; _this$ = ecx

; 957  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 958  : 	int iSkillUseType = MagicDamageC.GetSkillUseType(iMLSkill);

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMLSkill$[ebp]
  00006	50		 push	 eax
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0000c	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType

; 959  : 
; 960  : 	if( iSkillUseType == 3 || iSkillUseType == 4 )

  00011	83 f8 03	 cmp	 eax, 3
  00014	74 0b		 je	 SHORT $LN1@CheckRequi
  00016	83 f8 04	 cmp	 eax, 4
  00019	74 06		 je	 SHORT $LN1@CheckRequi

; 962  : 	return false;

  0001b	33 c0		 xor	 eax, eax

; 963  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN1@CheckRequi:

; 961  : 		return true;

  00021	b8 01 00 00 00	 mov	 eax, 1

; 963  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckRequireStatus
_TEXT	ENDS
PUBLIC	?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckPrimarySkill
EXTRN	?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::GetSkillReqBrandOfSkill
EXTRN	?IsMagic@CMagicInf@@QAEHXZ:PROC			; CMagicInf::IsMagic
; Function compile flags: /Ogtp
;	COMDAT ?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckPrimarySkill, COMDAT
; _this$ = ecx

; 967  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 968  : 	int iBaseMLS = 0;
; 969  : 
; 970  : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _iSkill$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00010	33 f6		 xor	 esi, esi
$LL4@CheckPrima:

; 971  : 	{
; 972  : 		if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 973  : 			this->CheckRequireStatus(lpObj->Magic[iCount].m_Skill) &&
; 974  : 			iSkill == MagicDamageC.GetSkillReqBrandOfSkill(lpObj->Magic[iCount].m_Skill))

  00012	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00018	03 ce		 add	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001f	83 f8 01	 cmp	 eax, 1
  00022	75 30		 jne	 SHORT $LN3@CheckPrima
  00024	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  0002a	8b 4c 30 08	 mov	 ecx, DWORD PTR [eax+esi+8]
  0002e	51		 push	 ecx
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $LN3@CheckPrima
  0003b	8b 97 c8 04 00
	00		 mov	 edx, DWORD PTR [edi+1224]
  00041	8b 44 32 08	 mov	 eax, DWORD PTR [edx+esi+8]
  00045	50		 push	 eax
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0004b	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  00050	3b d8		 cmp	 ebx, eax
  00052	74 16		 je	 SHORT $LN8@CheckPrima
$LN3@CheckPrima:

; 968  : 	int iBaseMLS = 0;
; 969  : 
; 970  : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00054	83 c6 18	 add	 esi, 24			; 00000018H
  00057	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0005d	7c b3		 jl	 SHORT $LL4@CheckPrima

; 977  : 		}
; 978  : 	}
; 979  : 	return false;

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	33 c0		 xor	 eax, eax
  00063	5b		 pop	 ebx

; 980  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN8@CheckPrima:
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 975  : 		{
; 976  : 			return true;

  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	5b		 pop	 ebx

; 980  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckPrimarySkill
_TEXT	ENDS
PUBLIC	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
; Function compile flags: /Ogtp
;	COMDAT ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z
_TEXT	SEGMENT
_iMLSkill$ = 8						; size = 4
?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill, COMDAT
; _this$ = ecx

; 983  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 984  : 	if( !this->CheckRequireStatus(iMLSkill) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iMLSkill$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  0000d	85 c0		 test	 eax, eax
  0000f	75 08		 jne	 SHORT $LN1@GetBaseMas

; 985  : 		return -1;

  00011	83 c8 ff	 or	 eax, -1
  00014	5e		 pop	 esi

; 987  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetBaseMas:

; 986  : 	return iMLSkill;

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi

; 987  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
_TEXT	ENDS
PUBLIC	??_C@_0CC@MLANJOKC@NewMasterLevelSkillTreeSystem?4cp@ ; `string'
PUBLIC	?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
EXTRN	?GCMagicListOneSend@@YAXHDGEGE@Z:PROC		; GCMagicListOneSend
EXTRN	?Set@CMagicInf@@QAEHHE@Z:PROC			; CMagicInf::Set
EXTRN	?UpdateML@CMagicInf@@QAEHKE@Z:PROC		; CMagicInf::UpdateML
EXTRN	?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z:PROC ; CMagicDamage::SkillGetRequireClass
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::SkillGetRequireEnergy
EXTRN	?g_EnergyCheckOff@@3HA:DWORD			; g_EnergyCheckOff
;	COMDAT ??_C@_0CC@MLANJOKC@NewMasterLevelSkillTreeSystem?4cp@
CONST	SEGMENT
??_C@_0CC@MLANJOKC@NewMasterLevelSkillTreeSystem?4cp@ DB 'NewMasterLevelS'
	DB	'killTreeSystem.cpp', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_iBrand$216555 = -4					; size = 2
_n$ = 8							; size = 4
_lpObj$ = 8						; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS, COMDAT
; _this$ = ecx

; 991  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 992  : 	int skill = -1;
; 993  : 	int n;
; 994  : 
; 995  : 	if( g_EnergyCheckOff == 1 )

  00004	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_EnergyCheckOff@@3HA, 1 ; g_EnergyCheckOff
  0000b	53		 push	 ebx

; 996  : 	{
; 997  : 		int reqeng = MagicDamageC.SkillGetRequireEnergy(iMLSkill);

  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _iMLSkill$[ebp]
  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00013	75 66		 jne	 SHORT $LN29@gObjMagicA
  00015	53		 push	 ebx
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0001b	e8 00 00 00 00	 call	 ?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGetRequireEnergy

; 998  : 
; 999  : 		if( reqeng < 0 )

  00020	85 c0		 test	 eax, eax
  00022	79 24		 jns	 SHORT $LN33@gObjMagicA
$LN51@gObjMagicA:

; 1000 : 		{
; 1001 : 			LogAdd(lMsg.Get(MSGGET(2,37)));

  00024	68 25 02 00 00	 push	 549			; 00000225H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003a	83 c4 04	 add	 esp, 4
  0003d	5e		 pop	 esi

; 1002 : 			return -1;

  0003e	83 c8 ff	 or	 eax, -1
  00041	5b		 pop	 ebx

; 1118 : return -1;
; 1119 : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
$LN33@gObjMagicA:

; 1003 : 		}
; 1004 : 
; 1005 : 		if( lpObj->Class == CLASS_KNIGHT )

  00048	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  0004f	83 f9 01	 cmp	 ecx, 1
  00052	75 03		 jne	 SHORT $LN32@gObjMagicA

; 1006 : 		{
; 1007 : 			reqeng -= 10;

  00054	83 e8 0a	 sub	 eax, 10			; 0000000aH
$LN32@gObjMagicA:

; 1008 : 		}
; 1009 : 		
; 1010 : 		if( lpObj->Class == CLASS_ELF )

  00057	83 f9 02	 cmp	 ecx, 2
  0005a	75 03		 jne	 SHORT $LN31@gObjMagicA

; 1011 : 		{
; 1012 : 			reqeng -= 5;

  0005c	83 e8 05	 sub	 eax, 5
$LN31@gObjMagicA:

; 1013 : 		}
; 1014 : 		
; 1015 : 		if( lpObj->Class == CLASS_DARKLORD )

  0005f	83 f9 04	 cmp	 ecx, 4
  00062	75 03		 jne	 SHORT $LN30@gObjMagicA

; 1016 : 		{
; 1017 : 			reqeng -= 5;

  00064	83 e8 05	 sub	 eax, 5
$LN30@gObjMagicA:

; 1018 : 		}
; 1019 : 
; 1020 : 		if( (lpObj->Energy+lpObj->AddEnergy) < reqeng )

  00067	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  0006e	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00075	03 ca		 add	 ecx, edx
  00077	3b c8		 cmp	 ecx, eax

; 1021 : 		{
; 1022 : 			LogAdd(lMsg.Get(MSGGET(2,37)));
; 1023 : 			return -1;

  00079	7c a9		 jl	 SHORT $LN51@gObjMagicA
$LN29@gObjMagicA:

; 1024 : 		}
; 1025 : 	}
; 1026 : 
; 1027 : 	if( MagicDamageC.SkillGetRequireClass(lpObj->Class,lpObj->ChangeUP,lpObj->ChangeUP3rd,iMLSkill) < 1 )

  0007b	0f b6 86 bc 00
	00 00		 movzx	 eax, BYTE PTR [esi+188]
  00082	0f b6 8e bb 00
	00 00		 movzx	 ecx, BYTE PTR [esi+187]
  00089	0f b7 96 b8 00
	00 00		 movzx	 edx, WORD PTR [esi+184]
  00090	53		 push	 ebx
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	52		 push	 edx
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00099	e8 00 00 00 00	 call	 ?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z ; CMagicDamage::SkillGetRequireClass
  0009e	83 f8 01	 cmp	 eax, 1
  000a1	7d 24		 jge	 SHORT $LN28@gObjMagicA

; 1028 : 	{
; 1029 : 		LogAdd(lMsg.Get(MSGGET(2,38)));

  000a3	68 26 02 00 00	 push	 550			; 00000226H
  000a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000ad	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000b2	50		 push	 eax
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000b9	83 c4 04	 add	 esp, 4
  000bc	5e		 pop	 esi

; 1030 : 		return -1;

  000bd	83 c8 ff	 or	 eax, -1
  000c0	5b		 pop	 ebx

; 1118 : return -1;
; 1119 : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
$LN28@gObjMagicA:
  000c7	57		 push	 edi

; 1031 : 	}
; 1032 : 
; 1033 : 	for( n = 0; n < MAX_MAGIC; n++)

  000c8	33 ff		 xor	 edi, edi
  000ca	89 7d 08	 mov	 DWORD PTR _n$[ebp], edi
  000cd	8d 49 00	 npad	 3
$LL27@gObjMagicA:

; 1034 : 	{
; 1035 : 		if( lpObj->Magic[n].IsMagic() == TRUE &&
; 1036 : 			lpObj->Magic[n].m_Skill == iMLSkill &&
; 1037 : 			lpObj->Magic[n].m_Level == iSkillLevel )

  000d0	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  000d6	03 cf		 add	 ecx, edi
  000d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000dd	83 f8 01	 cmp	 eax, 1
  000e0	75 1a		 jne	 SHORT $LN26@gObjMagicA
  000e2	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  000e8	39 5c 38 08	 cmp	 DWORD PTR [eax+edi+8], ebx
  000ec	75 0e		 jne	 SHORT $LN26@gObjMagicA
  000ee	0f b6 4c 38 04	 movzx	 ecx, BYTE PTR [eax+edi+4]
  000f3	3b 4d 10	 cmp	 ecx, DWORD PTR _iSkillLevel$[ebp]
  000f6	0f 84 c4 00 00
	00		 je	 $LN41@gObjMagicA
$LN26@gObjMagicA:

; 1031 : 	}
; 1032 : 
; 1033 : 	for( n = 0; n < MAX_MAGIC; n++)

  000fc	ff 45 08	 inc	 DWORD PTR _n$[ebp]
  000ff	83 c7 18	 add	 edi, 24			; 00000018H
  00102	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00108	7c c6		 jl	 SHORT $LL27@gObjMagicA

; 1041 : 		}
; 1042 : 	}
; 1043 : 
; 1044 : 	if( MagicDamageC.GetSkillUseType(iMLSkill) == 3 )

  0010a	53		 push	 ebx
  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00110	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  00115	83 f8 03	 cmp	 eax, 3
  00118	0f 85 e0 00 00
	00		 jne	 $LN23@gObjMagicA

; 1045 : 	{
; 1046 : 		if( iSkillLevel > 1 )

  0011e	83 7d 10 01	 cmp	 DWORD PTR _iSkillLevel$[ebp], 1
  00122	7e 47		 jle	 SHORT $LN12@gObjMagicA

; 1047 : 		{
; 1048 : 			for( n = 0; n < MAX_MAGIC; n++)

  00124	33 ff		 xor	 edi, edi
  00126	89 7d 08	 mov	 DWORD PTR _n$[ebp], edi
  00129	8d a4 24 00 00
	00 00		 npad	 7
$LL21@gObjMagicA:

; 1049 : 			{
; 1050 : 				if( lpObj->Magic[n].IsMagic() == TRUE &&
; 1051 : 					lpObj->Magic[n].m_Skill == iMLSkill &&
; 1052 : 					lpObj->Magic[n].m_Level == iSkillLevel-1 )

  00130	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00136	03 cf		 add	 ecx, edi
  00138	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0013d	83 f8 01	 cmp	 eax, 1
  00140	75 1b		 jne	 SHORT $LN20@gObjMagicA
  00142	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00148	39 5c 38 08	 cmp	 DWORD PTR [eax+edi+8], ebx
  0014c	75 0f		 jne	 SHORT $LN20@gObjMagicA
  0014e	0f b6 4c 38 04	 movzx	 ecx, BYTE PTR [eax+edi+4]
  00153	8b 45 10	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  00156	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  00159	3b ca		 cmp	 ecx, edx
  0015b	74 7c		 je	 SHORT $LN42@gObjMagicA
$LN20@gObjMagicA:

; 1047 : 		{
; 1048 : 			for( n = 0; n < MAX_MAGIC; n++)

  0015d	ff 45 08	 inc	 DWORD PTR _n$[ebp]
  00160	83 c7 18	 add	 edi, 24			; 00000018H
  00163	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00169	7c c5		 jl	 SHORT $LL21@gObjMagicA
$LN12@gObjMagicA:

; 1092 : 	}
; 1093 : 
; 1094 : 	for( n = 0; n < MAX_MAGIC; n++)

  0016b	33 db		 xor	 ebx, ebx
  0016d	33 ff		 xor	 edi, edi
  0016f	90		 npad	 1
$LL6@gObjMagicA:

; 1095 : 	{
; 1096 : 		if( lpObj->Magic[n].IsMagic() == FALSE )

  00170	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00176	03 cf		 add	 ecx, edi
  00178	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0017d	85 c0		 test	 eax, eax
  0017f	0f 84 17 01 00
	00		 je	 $LN44@gObjMagicA

; 1092 : 	}
; 1093 : 
; 1094 : 	for( n = 0; n < MAX_MAGIC; n++)

  00185	83 c7 18	 add	 edi, 24			; 00000018H
  00188	43		 inc	 ebx
  00189	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  0018f	7c df		 jl	 SHORT $LL6@gObjMagicA

; 1114 : 		}
; 1115 : 	}
; 1116 : 
; 1117 : 	LogAdd(lMsg.Get(MSGGET(2,42)),__FILE__,__LINE__);

  00191	68 5d 04 00 00	 push	 1117			; 0000045dH
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MLANJOKC@NewMasterLevelSkillTreeSystem?4cp@
  0019b	68 2a 02 00 00	 push	 554			; 0000022aH
$LN52@gObjMagicA:
  001a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001a5	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001aa	50		 push	 eax
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@gObjMagicA:

; 1085 : 				}
; 1086 : 			}
; 1087 : 		}
; 1088 : 	}
; 1089 : 	else
; 1090 : 	{
; 1091 : 		return -1;

  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi
  001b6	83 c8 ff	 or	 eax, -1
  001b9	5b		 pop	 ebx

; 1118 : return -1;
; 1119 : }

  001ba	8b e5		 mov	 esp, ebp
  001bc	5d		 pop	 ebp
  001bd	c2 0c 00	 ret	 12			; 0000000cH
$LN41@gObjMagicA:

; 1038 : 		{
; 1039 : 			LogAdd(lMsg.Get(MSGGET(2,43)),lpObj->Magic[n].m_Skill,iMLSkill);

  001c0	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  001c3	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  001c6	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  001cc	8b 4c d0 08	 mov	 ecx, DWORD PTR [eax+edx*8+8]
  001d0	53		 push	 ebx
  001d1	51		 push	 ecx
  001d2	68 2b 02 00 00	 push	 555			; 0000022bH

; 1040 : 			return -1;

  001d7	eb c7		 jmp	 SHORT $LN52@gObjMagicA
$LN42@gObjMagicA:

; 1053 : 				{
; 1054 : 					skill = lpObj->Magic[n].UpdateML(iMLSkill,iSkillLevel);

  001d9	8b 7d 08	 mov	 edi, DWORD PTR _n$[ebp]
  001dc	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  001e2	50		 push	 eax
  001e3	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  001e6	53		 push	 ebx
  001e7	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  001ea	e8 00 00 00 00	 call	 ?UpdateML@CMagicInf@@QAEHKE@Z ; CMagicInf::UpdateML

; 1055 : 
; 1056 : 					if( skill < 0 )

  001ef	85 c0		 test	 eax, eax

; 1057 : 						return -1;

  001f1	78 c1		 js	 SHORT $LN15@gObjMagicA

; 1058 : 
; 1059 : 					return n;

  001f3	8b c7		 mov	 eax, edi
  001f5	5f		 pop	 edi
  001f6	5e		 pop	 esi
  001f7	5b		 pop	 ebx

; 1118 : return -1;
; 1119 : }

  001f8	8b e5		 mov	 esp, ebp
  001fa	5d		 pop	 ebp
  001fb	c2 0c 00	 ret	 12			; 0000000cH
$LN23@gObjMagicA:

; 1060 : 				}
; 1061 : 			}
; 1062 : 		}
; 1063 : 	}
; 1064 : 	else if( MagicDamageC.GetSkillUseType(iMLSkill) == 4 )

  001fe	53		 push	 ebx
  001ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00204	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  00209	83 f8 04	 cmp	 eax, 4
  0020c	75 a6		 jne	 SHORT $LN15@gObjMagicA

; 1065 : 	{
; 1066 : 		WORD iBrand = MagicDamageC.GetSkillReqBrandOfSkill(iMLSkill);

  0020e	53		 push	 ebx
  0020f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00214	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  00219	0f b7 d0	 movzx	 edx, ax

; 1067 : 
; 1068 : 		for( n = 0; n < MAX_MAGIC; n++)

  0021c	33 ff		 xor	 edi, edi
  0021e	89 55 fc	 mov	 DWORD PTR _iBrand$216555[ebp], edx
  00221	89 7d 08	 mov	 DWORD PTR _n$[ebp], edi
  00224	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL14@gObjMagicA:

; 1069 : 		{
; 1070 : 			if( lpObj->Magic[n].IsMagic() == TRUE )

  00230	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00236	03 cf		 add	 ecx, edi
  00238	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0023d	83 f8 01	 cmp	 eax, 1
  00240	75 21		 jne	 SHORT $LN13@gObjMagicA

; 1071 : 			{
; 1072 : 				if( lpObj->Magic[n].m_Skill == iBrand )

  00242	0f b7 4d fc	 movzx	 ecx, WORD PTR _iBrand$216555[ebp]
  00246	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  0024c	39 4c 38 08	 cmp	 DWORD PTR [eax+edi+8], ecx
  00250	75 05		 jne	 SHORT $LN10@gObjMagicA

; 1073 : 				{
; 1074 : 					lpObj->Magic[n].m_bPass = TRUE;

  00252	c6 44 38 14 01	 mov	 BYTE PTR [eax+edi+20], 1
$LN10@gObjMagicA:

; 1075 : 				}
; 1076 : 
; 1077 : 				if( lpObj->Magic[n].m_Skill == iMLSkill )

  00257	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  0025d	39 5c 3a 08	 cmp	 DWORD PTR [edx+edi+8], ebx
  00261	74 13		 je	 SHORT $LN43@gObjMagicA
$LN13@gObjMagicA:

; 1067 : 
; 1068 : 		for( n = 0; n < MAX_MAGIC; n++)

  00263	ff 45 08	 inc	 DWORD PTR _n$[ebp]
  00266	83 c7 18	 add	 edi, 24			; 00000018H
  00269	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  0026f	7c bf		 jl	 SHORT $LL14@gObjMagicA

; 1095 : 	{
; 1096 : 		if( lpObj->Magic[n].IsMagic() == FALSE )

  00271	e9 f5 fe ff ff	 jmp	 $LN12@gObjMagicA
$LN43@gObjMagicA:

; 1078 : 				{
; 1079 : 					skill = lpObj->Magic[n].UpdateML(iMLSkill,iSkillLevel);

  00276	8b 45 10	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  00279	8b 7d 08	 mov	 edi, DWORD PTR _n$[ebp]
  0027c	50		 push	 eax
  0027d	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00280	53		 push	 ebx
  00281	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  00284	e8 00 00 00 00	 call	 ?UpdateML@CMagicInf@@QAEHKE@Z ; CMagicInf::UpdateML

; 1080 : 
; 1081 : 					if( skill < 0 )

  00289	85 c0		 test	 eax, eax

; 1082 : 						return -1;

  0028b	0f 88 23 ff ff
	ff		 js	 $LN15@gObjMagicA

; 1083 : 
; 1084 : 					return n;

  00291	8b c7		 mov	 eax, edi
  00293	5f		 pop	 edi
  00294	5e		 pop	 esi
  00295	5b		 pop	 ebx

; 1118 : return -1;
; 1119 : }

  00296	8b e5		 mov	 esp, ebp
  00298	5d		 pop	 ebp
  00299	c2 0c 00	 ret	 12			; 0000000cH
$LN44@gObjMagicA:

; 1097 : 		{
; 1098 : 			skill = lpObj->Magic[n].Set(iMLSkill,iSkillLevel);

  0029c	8b 45 10	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  0029f	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  002a5	8b 7d 0c	 mov	 edi, DWORD PTR _iMLSkill$[ebp]
  002a8	50		 push	 eax
  002a9	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  002ac	57		 push	 edi
  002ad	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  002b0	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set

; 1099 : 
; 1100 : 			if( skill < 0 )

  002b5	85 c0		 test	 eax, eax
  002b7	79 14		 jns	 SHORT $LN2@gObjMagicA

; 1101 : 			{
; 1102 : 				LogAdd(lMsg.Get(MSGGET(2,41)),__FILE__,__LINE__);

  002b9	68 4e 04 00 00	 push	 1102			; 0000044eH
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MLANJOKC@NewMasterLevelSkillTreeSystem?4cp@
  002c3	68 29 02 00 00	 push	 553			; 00000229H

; 1103 : 				return -1;

  002c8	e9 d3 fe ff ff	 jmp	 $LN52@gObjMagicA
$LN2@gObjMagicA:

; 1104 : 			}
; 1105 : 
; 1106 : 			if( MagicDamageC.GetSkillReqBrandOfSkill(iMLSkill) == 0 &&
; 1107 : 				MagicDamageC.GetSkillUseType(iMLSkill) == 4 )

  002cd	57		 push	 edi
  002ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  002d3	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  002d8	85 c0		 test	 eax, eax
  002da	75 25		 jne	 SHORT $LN1@gObjMagicA
  002dc	57		 push	 edi
  002dd	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  002e2	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  002e7	83 f8 04	 cmp	 eax, 4
  002ea	75 15		 jne	 SHORT $LN1@gObjMagicA

; 1108 : 			{
; 1109 : 				GCMagicListOneSend(lpObj->m_Index,n,iMLSkill,iSkillLevel,0,0);

  002ec	8b 45 10	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  002ef	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002f1	6a 00		 push	 0
  002f3	6a 00		 push	 0
  002f5	50		 push	 eax
  002f6	57		 push	 edi
  002f7	53		 push	 ebx
  002f8	51		 push	 ecx
  002f9	e8 00 00 00 00	 call	 ?GCMagicListOneSend@@YAXHDGEGE@Z ; GCMagicListOneSend
  002fe	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@gObjMagicA:

; 1110 : 			}
; 1111 : 
; 1112 : 			lpObj->MagicCount++;

  00301	fe 86 cc 04 00
	00		 inc	 BYTE PTR [esi+1228]
  00307	5f		 pop	 edi
  00308	5e		 pop	 esi

; 1113 : 			return n;

  00309	8b c3		 mov	 eax, ebx
  0030b	5b		 pop	 ebx

; 1118 : return -1;
; 1119 : }

  0030c	8b e5		 mov	 esp, ebp
  0030e	5d		 pop	 ebp
  0030f	c2 0c 00	 ret	 12			; 0000000cH
?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
_TEXT	ENDS
PUBLIC	?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_Wheel
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z:PROC ; gObjAttack
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?GetSkillDistance@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillDistance
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_DuelIndex$ = -8					; size = 4
tv420 = -4						; size = 4
tv384 = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_Wheel, COMDAT
; _this$ = ecx

; 1694 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1695 : 	int tObjNum;
; 1696 : 	int count = 0;

  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	53		 push	 ebx

; 1697 : 	int HitCount = 0;
; 1698 : 	int bAttack;
; 1699 : 	int DuelIndex = lpObj->m_iDuelUser;

  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00010	8b 83 b8 0e 00
	00		 mov	 eax, DWORD PTR [ebx+3768]
  00016	89 45 f8	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00019	56		 push	 esi
  0001a	8d 83 b0 08 00
	00		 lea	 eax, DWORD PTR [ebx+2224]
  00020	57		 push	 edi
  00021	89 45 08	 mov	 DWORD PTR tv384[ebp], eax
  00024	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv420[ebp], 75 ; 0000004bH
  0002b	eb 03 8d 49 00	 npad	 5
$LL23@MLS_Wheel:

; 1700 : 	int EnableAttack;
; 1701 : 
; 1702 : 	while ( true )
; 1703 : 	{
; 1704 : 		if(lpObj->VpPlayer2[count].state != 0)

  00030	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00034	0f 84 14 01 00
	00		 je	 $LN35@MLS_Wheel

; 1705 : 		{
; 1706 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0003a	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 1707 : 
; 1708 : 			if(tObjNum >= 0)

  0003e	85 f6		 test	 esi, esi
  00040	0f 88 08 01 00
	00		 js	 $LN35@MLS_Wheel

; 1709 : 			{
; 1710 : 				EnableAttack = 0;
; 1711 : 
; 1712 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00046	8a 00		 mov	 al, BYTE PTR [eax]
  00048	3c 02		 cmp	 al, 2
  0004a	75 12		 jne	 SHORT $LN19@MLS_Wheel
  0004c	8b ce		 mov	 ecx, esi
  0004e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00054	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 1713 : 				{
; 1714 : 					EnableAttack = 1;

  0005c	7c 7c		 jl	 SHORT $LN16@MLS_Wheel
$LN19@MLS_Wheel:

; 1715 : 				}
; 1716 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0005e	3b 75 10	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00061	74 77		 je	 SHORT $LN16@MLS_Wheel
  00063	39 75 f8	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  00066	74 72		 je	 SHORT $LN16@MLS_Wheel

; 1717 : 				{
; 1718 : 					EnableAttack = 1;
; 1719 : 				}
; 1720 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00068	3c 03		 cmp	 al, 3
  0006a	74 30		 je	 SHORT $LN14@MLS_Wheel
  0006c	8b c6		 mov	 eax, esi
  0006e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00074	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  0007c	75 1e		 jne	 SHORT $LN14@MLS_Wheel
  0007e	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  00085	75 15		 jne	 SHORT $LN14@MLS_Wheel

; 1721 : 				{
; 1722 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  00087	8a 8b 02 1c 00
	00		 mov	 cl, BYTE PTR [ebx+7170]
  0008d	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  00094	0f 84 b4 00 00
	00		 je	 $LN35@MLS_Wheel

; 1723 : 						EnableAttack = 1;
; 1724 : 				}
; 1725 : 				else

  0009a	eb 3e		 jmp	 SHORT $LN16@MLS_Wheel
$LN14@MLS_Wheel:

; 1726 : 				{
; 1727 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0009c	8b ce		 mov	 ecx, esi
  0009e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 1728 : 
; 1729 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000a4	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  000aa	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000ad	75 14		 jne	 SHORT $LN11@MLS_Wheel
  000af	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  000b6	85 c9		 test	 ecx, ecx
  000b8	78 09		 js	 SHORT $LN11@MLS_Wheel

; 1730 : 					{
; 1731 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000ba	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000c0	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN11@MLS_Wheel:

; 1732 : 					}
; 1733 : 
; 1734 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000c3	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000c9	03 c2		 add	 eax, edx
  000cb	50		 push	 eax
  000cc	53		 push	 ebx
  000cd	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000d2	83 c4 08	 add	 esp, 8
  000d5	83 f8 01	 cmp	 eax, 1
  000d8	75 6e		 jne	 SHORT $LN34@MLS_Wheel
$LN16@MLS_Wheel:

; 1735 : 					{
; 1736 : 						EnableAttack = 1;
; 1737 : 					}
; 1738 : 				}
; 1739 : 
; 1740 : 				if(EnableAttack != 0)
; 1741 : 				{
; 1742 : 					int iSkillDis = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  000da	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000dd	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000e0	52		 push	 edx
  000e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000e6	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 1743 : 
; 1744 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= iSkillDis )

  000eb	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000f1	8b f8		 mov	 edi, eax
  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f8	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  000fb	51		 push	 ecx
  000fc	53		 push	 ebx
  000fd	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00102	83 c4 08	 add	 esp, 8
  00105	3b c7		 cmp	 eax, edi
  00107	7f 3f		 jg	 SHORT $LN34@MLS_Wheel

; 1745 : 					{
; 1746 : 						bAttack = 0;
; 1747 : 
; 1748 : 						if(HitCount > 15)
; 1749 : 						{
; 1750 : 							bAttack = 0;
; 1751 : 						}
; 1752 : 
; 1753 : 						if(HitCount >= 10)
; 1754 : 						{
; 1755 : 							if(rand()%2)
; 1756 : 							{
; 1757 : 								bAttack = 1;
; 1758 : 							}
; 1759 : 						}
; 1760 : 						else
; 1761 : 						{
; 1762 : 							bAttack = 1;
; 1763 : 						}
; 1764 : 
; 1765 : 						if(bAttack != 0)
; 1766 : 						{
; 1767 : 
; 1768 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,isCombo,0,0);

  00109	8b 7d 14	 mov	 edi, DWORD PTR _isCombo$[ebp]
  0010c	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00114	6a 00		 push	 0
  00116	6a 00		 push	 0
  00118	57		 push	 edi
  00119	6a 00		 push	 0
  0011b	6a 01		 push	 1
  0011d	6a 00		 push	 0
  0011f	52		 push	 edx
  00120	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00123	51		 push	 ecx
  00124	53		 push	 ebx
  00125	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0012a	83 c4 24	 add	 esp, 36			; 00000024H

; 1769 : 
; 1770 : 							if(isCombo != 0)

  0012d	85 ff		 test	 edi, edi
  0012f	74 17		 je	 SHORT $LN34@MLS_Wheel

; 1771 : 							{
; 1772 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,gObj[tObjNum].m_Index,1);

  00131	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00137	8b 04 16	 mov	 eax, DWORD PTR [esi+edx]
  0013a	6a 01		 push	 1
  0013c	50		 push	 eax
  0013d	6a 3b		 push	 59			; 0000003bH
  0013f	53		 push	 ebx
  00140	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00145	83 c4 10	 add	 esp, 16			; 00000010H
$LN34@MLS_Wheel:
  00148	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN35@MLS_Wheel:

; 1773 : 							}
; 1774 : 						}
; 1775 : 					}
; 1776 : 				}
; 1777 : 			}
; 1778 : 		}
; 1779 : 
; 1780 : 		count++;

  0014e	8b 45 08	 mov	 eax, DWORD PTR tv384[ebp]
  00151	83 c0 0c	 add	 eax, 12			; 0000000cH

; 1781 : 		if(count > MAX_VIEWPORT -1)

  00154	ff 4d fc	 dec	 DWORD PTR tv420[ebp]
  00157	89 45 08	 mov	 DWORD PTR tv384[ebp], eax
  0015a	0f 85 d0 fe ff
	ff		 jne	 $LL23@MLS_Wheel
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx

; 1782 : 		{
; 1783 : 			break;
; 1784 : 		}
; 1785 : 	}
; 1786 : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 10 00	 ret	 16			; 00000010H
?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_Wheel
_TEXT	ENDS
PUBLIC	?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword4, COMDAT
; _this$ = ecx

; 1789 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1790 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 1791 : 
; 1792 : 	if( !gObjIsConnected(lpObj->m_Index) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	57		 push	 edi
  0000a	8b 7d 10	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  0000d	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00013	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 54		 je	 SHORT $LN1@MLS_SkillS

; 1793 : 		return;
; 1794 : 
; 1795 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 45		 je	 SHORT $LN1@MLS_SkillS

; 1796 : 		return;
; 1797 : 
; 1798 : 	if( lpObj->Type != OBJ_USER )

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0003e	75 3a		 jne	 SHORT $LN1@MLS_SkillS

; 1799 : 		return;
; 1800 : 
; 1801 : 	if( lpObj->Class != CLASS_KNIGHT )

  00040	66 39 86 b8 00
	00 00		 cmp	 WORD PTR [esi+184], ax
  00047	75 31		 jne	 SHORT $LN1@MLS_SkillS

; 1802 : 		return;
; 1803 : 
; 1804 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00049	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0004c	53		 push	 ebx
  0004d	8b 5d 14	 mov	 ebx, DWORD PTR _isCombo$[ebp]
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	53		 push	 ebx
  00055	6a 00		 push	 0
  00057	50		 push	 eax
  00058	6a 00		 push	 0
  0005a	52		 push	 edx
  0005b	57		 push	 edi
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00062	83 c4 24	 add	 esp, 36			; 00000024H

; 1805 : 
; 1806 : 	if(isCombo != 0)

  00065	85 db		 test	 ebx, ebx
  00067	5b		 pop	 ebx
  00068	74 10		 je	 SHORT $LN1@MLS_SkillS

; 1807 : 	{
; 1808 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	6a 01		 push	 1
  0006e	50		 push	 eax
  0006f	6a 3b		 push	 59			; 0000003bH
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00077	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS:
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 1809 : 	}
; 1810 : }

  0007c	5d		 pop	 ebp
  0007d	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
_TEXT	ENDS
PUBLIC	?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa, COMDAT
; _this$ = ecx

; 1813 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1814 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00004	8b 75 10	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  00007	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0000d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00013	57		 push	 edi

; 1815 : 
; 1816 : 	if( !gObjIsConnected(lpObj->m_Index) )

  00014	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00017	8b 07		 mov	 eax, DWORD PTR [edi]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 52		 je	 SHORT $LN1@MLS_SkillS@2

; 1817 : 		return;
; 1818 : 
; 1819 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00026	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 43		 je	 SHORT $LN1@MLS_SkillS@2

; 1820 : 		return;
; 1821 : 
; 1822 : 	if( lpObj->Type != OBJ_USER )

  00035	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0003a	75 3c		 jne	 SHORT $LN1@MLS_SkillS@2

; 1823 : 		return;
; 1824 : 
; 1825 : 	if( lpObj->Class != CLASS_MAGUMSA )

  0003c	66 83 bf b8 00
	00 00 03	 cmp	 WORD PTR [edi+184], 3
  00044	75 32		 jne	 SHORT $LN1@MLS_SkillS@2

; 1826 : 		return;
; 1827 : 
; 1828 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00046	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00049	53		 push	 ebx
  0004a	8b 5d 14	 mov	 ebx, DWORD PTR _isCombo$[ebp]
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	53		 push	 ebx
  00052	6a 00		 push	 0
  00054	6a 01		 push	 1
  00056	6a 00		 push	 0
  00058	52		 push	 edx
  00059	56		 push	 esi
  0005a	57		 push	 edi
  0005b	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00060	83 c4 24	 add	 esp, 36			; 00000024H

; 1829 : 
; 1830 : 	if(isCombo != 0)

  00063	85 db		 test	 ebx, ebx
  00065	5b		 pop	 ebx
  00066	74 10		 je	 SHORT $LN1@MLS_SkillS@2

; 1831 : 	{
; 1832 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  00068	8b 07		 mov	 eax, DWORD PTR [edi]
  0006a	6a 01		 push	 1
  0006c	50		 push	 eax
  0006d	6a 3b		 push	 59			; 0000003bH
  0006f	57		 push	 edi
  00070	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00075	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS@2:
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi

; 1833 : 	}
; 1834 : }

  0007a	5d		 pop	 ebp
  0007b	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
_TEXT	ENDS
PUBLIC	?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword5, COMDAT
; _this$ = ecx

; 1837 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1838 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 1839 : 
; 1840 : 	if( !gObjIsConnected(lpObj->m_Index) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	57		 push	 edi
  0000a	8b 7d 10	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  0000d	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00013	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 54		 je	 SHORT $LN1@MLS_SkillS@3

; 1841 : 		return;
; 1842 : 
; 1843 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 45		 je	 SHORT $LN1@MLS_SkillS@3

; 1844 : 		return;
; 1845 : 
; 1846 : 	if( lpObj->Type != OBJ_USER )

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0003e	75 3a		 jne	 SHORT $LN1@MLS_SkillS@3

; 1847 : 		return;
; 1848 : 
; 1849 : 	if( lpObj->Class != CLASS_KNIGHT )

  00040	66 39 86 b8 00
	00 00		 cmp	 WORD PTR [esi+184], ax
  00047	75 31		 jne	 SHORT $LN1@MLS_SkillS@3

; 1850 : 		return;
; 1851 : 
; 1852 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00049	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0004c	53		 push	 ebx
  0004d	8b 5d 14	 mov	 ebx, DWORD PTR _isCombo$[ebp]
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	53		 push	 ebx
  00055	6a 00		 push	 0
  00057	50		 push	 eax
  00058	6a 00		 push	 0
  0005a	52		 push	 edx
  0005b	57		 push	 edi
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00062	83 c4 24	 add	 esp, 36			; 00000024H

; 1853 : 
; 1854 : 	if(isCombo != 0)

  00065	85 db		 test	 ebx, ebx
  00067	5b		 pop	 ebx
  00068	74 10		 je	 SHORT $LN1@MLS_SkillS@3

; 1855 : 	{
; 1856 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	6a 01		 push	 1
  0006e	50		 push	 eax
  0006f	6a 3b		 push	 59			; 0000003bH
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00077	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS@3:
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 1857 : 	}
; 1858 : }

  0007c	5d		 pop	 ebp
  0007d	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
_TEXT	ENDS
PUBLIC	?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword1, COMDAT
; _this$ = ecx

; 1861 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1862 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 1863 : 
; 1864 : 	if( !gObjIsConnected(lpObj->m_Index) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	57		 push	 edi
  0000a	8b 7d 10	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  0000d	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00013	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 54		 je	 SHORT $LN1@MLS_SkillS@4

; 1865 : 		return;
; 1866 : 
; 1867 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 45		 je	 SHORT $LN1@MLS_SkillS@4

; 1868 : 		return;
; 1869 : 
; 1870 : 	if( lpObj->Type != OBJ_USER )

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0003e	75 3a		 jne	 SHORT $LN1@MLS_SkillS@4

; 1871 : 		return;
; 1872 : 
; 1873 : 	if( lpObj->Class != CLASS_KNIGHT )

  00040	66 39 86 b8 00
	00 00		 cmp	 WORD PTR [esi+184], ax
  00047	75 31		 jne	 SHORT $LN1@MLS_SkillS@4

; 1874 : 		return;
; 1875 : 
; 1876 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00049	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0004c	53		 push	 ebx
  0004d	8b 5d 14	 mov	 ebx, DWORD PTR _isCombo$[ebp]
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	53		 push	 ebx
  00055	6a 00		 push	 0
  00057	50		 push	 eax
  00058	6a 00		 push	 0
  0005a	52		 push	 edx
  0005b	57		 push	 edi
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00062	83 c4 24	 add	 esp, 36			; 00000024H

; 1877 : 
; 1878 : 	if(isCombo != 0)

  00065	85 db		 test	 ebx, ebx
  00067	5b		 pop	 ebx
  00068	74 10		 je	 SHORT $LN1@MLS_SkillS@4

; 1879 : 	{
; 1880 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	6a 01		 push	 1
  0006e	50		 push	 eax
  0006f	6a 3b		 push	 59			; 0000003bH
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00077	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS@4:
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 1881 : 	}
; 1882 : }

  0007c	5d		 pop	 ebp
  0007d	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
_TEXT	ENDS
PUBLIC	?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword2, COMDAT
; _this$ = ecx

; 1885 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1886 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 1887 : 
; 1888 : 	if( !gObjIsConnected(lpObj->m_Index) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	57		 push	 edi
  0000a	8b 7d 10	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  0000d	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00013	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 54		 je	 SHORT $LN1@MLS_SkillS@5

; 1889 : 		return;
; 1890 : 
; 1891 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 45		 je	 SHORT $LN1@MLS_SkillS@5

; 1892 : 		return;
; 1893 : 
; 1894 : 	if( lpObj->Type != OBJ_USER )

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0003e	75 3a		 jne	 SHORT $LN1@MLS_SkillS@5

; 1895 : 		return;
; 1896 : 
; 1897 : 	if( lpObj->Class != CLASS_KNIGHT )

  00040	66 39 86 b8 00
	00 00		 cmp	 WORD PTR [esi+184], ax
  00047	75 31		 jne	 SHORT $LN1@MLS_SkillS@5

; 1898 : 		return;
; 1899 : 
; 1900 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00049	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0004c	53		 push	 ebx
  0004d	8b 5d 14	 mov	 ebx, DWORD PTR _isCombo$[ebp]
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	53		 push	 ebx
  00055	6a 00		 push	 0
  00057	50		 push	 eax
  00058	6a 00		 push	 0
  0005a	52		 push	 edx
  0005b	57		 push	 edi
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00062	83 c4 24	 add	 esp, 36			; 00000024H

; 1901 : 
; 1902 : 	if(isCombo != 0)

  00065	85 db		 test	 ebx, ebx
  00067	5b		 pop	 ebx
  00068	74 10		 je	 SHORT $LN1@MLS_SkillS@5

; 1903 : 	{
; 1904 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	6a 01		 push	 1
  0006e	50		 push	 eax
  0006f	6a 3b		 push	 59			; 0000003bH
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00077	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS@5:
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 1905 : 	}
; 1906 : }

  0007c	5d		 pop	 ebp
  0007d	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
_TEXT	ENDS
PUBLIC	?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife, COMDAT
; _this$ = ecx

; 2269 : 	/*int skillSuccess = TRUE;
; 2270 : 
; 2271 : 	if( lpObj->Type != OBJ_USER &&
; 2272 : 		lpObj->m_RecallMon == -1 )
; 2273 : 		return;
; 2274 : 
; 2275 : 	if( lpObj->Class != CLASS_KNIGHT &&
; 2276 : 		lpObj->Class != CLASS_MAGUMSA )
; 2277 : 		return;
; 2278 : 
; 2279 : 	int number;
; 2280 : 	int partynum = 0;
; 2281 : 	int totallevel = 0;
; 2282 : 	int partycount;
; 2283 : 	int dis;
; 2284 : 	int ApplyPartyIndex[5];
; 2285 : 	int viewplayer = 0;
; 2286 : 	int viewpercent = 0;
; 2287 : 	LPOBJ lpPartyObj;
; 2288 : 
; 2289 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 2290 : 
; 2291 : 	partynum = lpObj->PartyNumber;
; 2292 : 
; 2293 : 	if( partynum != -1 )
; 2294 : 	{
; 2295 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2296 : 
; 2297 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)
; 2298 : 		{
; 2299 : 			number = gParty.m_PartyS[partynum].Number[n];
; 2300 : 
; 2301 : 			if( number >= 0 )
; 2302 : 			{
; 2303 : 				lpPartyObj = &gObj[number];
; 2304 : 
; 2305 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )
; 2306 : 				{
; 2307 : 					dis = gObjCalDistance(lpObj,&gObj[number]);
; 2308 : 
; 2309 : 					if( dis < 10 )
; 2310 : 					{
; 2311 : 						ApplyPartyIndex[n] = number;
; 2312 : 						viewplayer++;
; 2313 : 					}
; 2314 : 				}
; 2315 : 			}
; 2316 : 		}
; 2317 : 	}
; 2318 : 
; 2319 : 	if( viewplayer > 1 )
; 2320 : 	{
; 2321 : 		if( viewplayer == 2 )
; 2322 : 		{
; 2323 : 			viewpercent = 1;
; 2324 : 		}
; 2325 : 		else if( viewplayer == 3 )
; 2326 : 		{
; 2327 : 			viewpercent = 2;
; 2328 : 		}
; 2329 : 		else if( viewplayer == 4 )
; 2330 : 		{
; 2331 : 			viewpercent = 3;
; 2332 : 		}
; 2333 : 		else
; 2334 : 		{
; 2335 : 			viewpercent = 4;
; 2336 : 		}
; 2337 : 	}
; 2338 : 
; 2339 : 	float iaddLifepower = gc_AddLifeStartVal + (lpObj->Vitality+lpObj->AddVitality)/gc_AddLifeVitDiv + (lpObj->Energy+lpObj->AddEnergy)/gc_AddLifeEneDiv + viewpercent;
; 2340 : 
; 2341 : 	if( iaddLifepower > gc_AddLifeMaxValue)
; 2342 : 		iaddLifepower = gc_AddLifeMaxValue;
; 2343 : 
; 2344 : 	float fSkillValue2 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);
; 2345 : 
; 2346 : 	if( fSkillValue2 > 0.0f )
; 2347 : 	{
; 2348 : 		iaddLifepower += fSkillValue2;
; 2349 : 	}
; 2350 : 
; 2351 : 	float iaddManapower;
; 2352 : 	float fSkillValue1 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);
; 2353 : 
; 2354 : 	if( fSkillValue1 > 0.0f )
; 2355 : 	{
; 2356 : 		iaddManapower = fSkillValue1+viewpercent;
; 2357 : 	}
; 2358 : 
; 2359 : 	float iaddBPpower;
; 2360 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);
; 2361 : 
; 2362 : 	if( fSkillValue > 0.0f )
; 2363 : 	{
; 2364 : 		iaddBPpower = fSkillValue+viewpercent;
; 2365 : 	}
; 2366 : 
; 2367 : 	int iLifeTime = gc_AddLifeTimeStartVal + (lpObj->Energy+lpObj->AddEnergy)/gc_AddLifeTimeEneDiv;
; 2368 : 
; 2369 : 	if( iLifeTime > gc_AddLifeTimeMaxVal )
; 2370 : 		iLifeTime = gc_AddLifeTimeMaxVal;
; 2371 : 
; 2372 : 	int iaddlife;
; 2373 : 	int iaddMana;
; 2374 : 	int iaddBP;
; 2375 : 
; 2376 : 	if( partynum == -1 )
; 2377 : 	{
; 2378 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;
; 2379 : 		iaddMana = lpObj->MaxMana*iaddManapower/100;
; 2380 : 		iaddBP = lpObj->MaxBP*iaddBPpower/100;
; 2381 : 
; 2382 : 		lpObj->m_MPSkillOpt.MpsSwellLifeAddBP = iaddBP;
; 2383 : 
; 2384 : 		gObjApplyBuffEffectDuration(lpObj,BUFF_SWELL_LIFE3,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);
; 2385 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);
; 2386 : 		gObjCalCharacter(lpObj->m_Index);
; 2387 : 	}
; 2388 : 	else
; 2389 : 	{
; 2390 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)
; 2391 : 		{
; 2392 : 			if( ApplyPartyIndex[n] != -1 )
; 2393 : 			{
; 2394 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 2395 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;
; 2396 : 				iaddMana = lpPartyObj->MaxMana*iaddManapower/100;
; 2397 : 				iaddBP = lpPartyObj->MaxBP*iaddBPpower/100;
; 2398 : 
; 2399 : 				lpPartyObj->m_MPSkillOpt.MpsSwellLifeAddBP = iaddBP;
; 2400 : 
; 2401 : 				gObjApplyBuffEffectDuration(lpPartyObj,BUFF_SWELL_LIFE3,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);
; 2402 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);
; 2403 : 				gObjCalCharacter(lpPartyObj->m_Index);
; 2404 : 			}
; 2405 : 		}
; 2406 : 	}*/
; 2407 : }

  00000	c2 08 00	 ret	 8
?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame, COMDAT
; _this$ = ecx

; 2465 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 2466 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0000c	75 3d		 jne	 SHORT $LN2@MLS_SkillS@6

; 2467 : 		return;
; 2468 : 
; 2469 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2470 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00014	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  00018	56		 push	 esi
  00019	8b 75 10	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0001c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00022	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	51		 push	 ecx
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2471 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 01		 push	 1
  0003e	53		 push	 ebx
  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00046	83 c4 34	 add	 esp, 52			; 00000034H
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
$LN2@MLS_SkillS@6:
  0004b	5f		 pop	 edi

; 2472 : }

  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder, COMDAT
; _this$ = ecx

; 2475 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 2476 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0000c	75 3d		 jne	 SHORT $LN2@MLS_SkillS@7

; 2477 : 		return;
; 2478 : 
; 2479 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2480 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00014	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  00018	56		 push	 esi
  00019	8b 75 10	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0001c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00022	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	51		 push	 ecx
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2481 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 01		 push	 1
  0003e	53		 push	 ebx
  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00046	83 c4 34	 add	 esp, 52			; 00000034H
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
$LN2@MLS_SkillS@7:
  0004b	5f		 pop	 edi

; 2482 : }

  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison, COMDAT
; _this$ = ecx

; 2485 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 2486 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0000c	75 3d		 jne	 SHORT $LN2@MLS_SkillS@8

; 2487 : 		return;
; 2488 : 
; 2489 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2490 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00014	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  00018	56		 push	 esi
  00019	8b 75 10	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0001c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00022	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	51		 push	 ecx
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2491 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 01		 push	 1
  0003e	53		 push	 ebx
  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00046	83 c4 34	 add	 esp, 52			; 00000034H
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
$LN2@MLS_SkillS@8:
  0004b	5f		 pop	 edi

; 2492 : }

  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
_TEXT	ENDS
PUBLIC	?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit, COMDAT
; _this$ = ecx

; 2495 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2496 : 	if( lpObj->Type != OBJ_USER )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  0000b	75 29		 jne	 SHORT $LN2@MLS_SkillM

; 2497 : 		return;
; 2498 : 
; 2499 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000d	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]

; 2500 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  00010	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00013	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00019	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	6a 00		 push	 0
  00029	6a 01		 push	 1
  0002b	51		 push	 ecx
  0002c	52		 push	 edx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00033	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_SkillM:

; 2501 : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce, COMDAT
; _this$ = ecx

; 2602 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 2603 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0000c	75 3d		 jne	 SHORT $LN2@MLS_SkillS@9

; 2604 : 		return;
; 2605 : 
; 2606 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2607 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00014	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  00018	56		 push	 esi
  00019	8b 75 10	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0001c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00022	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	51		 push	 ecx
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2608 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 01		 push	 1
  0003e	53		 push	 ebx
  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00046	83 c4 34	 add	 esp, 52			; 00000034H
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
$LN2@MLS_SkillS@9:
  0004b	5f		 pop	 edi

; 2609 : }

  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
_TEXT	ENDS
PUBLIC	?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
EXTRN	?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z:PROC ; gObjAddAttackProcMsgSendDelay
; Function compile flags: /Ogtp
;	COMDAT ?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -8					; size = 4
tv352 = -4						; size = 4
tv425 = 8						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack, COMDAT
; _this$ = ecx

; 3206 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3207 : 	int tObjNum;
; 3208 : 	int count = 0;
; 3209 : 	int HitCount = 0;
; 3210 : 	int bAttack;
; 3211 : 	int DuelIndex = lpObj->m_iDuelUser;
; 3212 : 	int EnableAttack;
; 3213 : 
; 3214 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,1);

  00006	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0000d	8b 83 b8 0e 00
	00		 mov	 eax, DWORD PTR [ebx+3768]
  00013	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	89 45 f8	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  0001a	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0001e	6a 01		 push	 1
  00020	51		 push	 ecx
  00021	50		 push	 eax
  00022	53		 push	 ebx
  00023	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	8d 8b b0 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2224]
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	89 4d 08	 mov	 DWORD PTR tv425[ebp], ecx
  00039	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv352[ebp], 75 ; 0000004bH
$LL24@MLS_DarkHo:

; 3215 : 
; 3216 : 	while ( true )
; 3217 : 	{
; 3218 : 		if(lpObj->VpPlayer2[count].state != 0)

  00040	80 79 fc 00	 cmp	 BYTE PTR [ecx-4], 0
  00044	0f 84 ea 00 00
	00		 je	 $LN35@MLS_DarkHo

; 3219 : 		{
; 3220 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0004a	0f bf 79 fe	 movsx	 edi, WORD PTR [ecx-2]

; 3221 : 
; 3222 : 			if(tObjNum >= 0)

  0004e	85 ff		 test	 edi, edi
  00050	0f 88 de 00 00
	00		 js	 $LN35@MLS_DarkHo

; 3223 : 			{
; 3224 : 				EnableAttack = 0;
; 3225 : 				if( (gObj[tObjNum].Class < 100 || gObj[tObjNum].Class > 110) && gObj[tObjNum].Class != 523 )

  00056	8b f7		 mov	 esi, edi
  00058	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0005e	0f b7 8c 06 b8
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+184]
  00066	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00069	72 09		 jb	 SHORT $LN19@MLS_DarkHo
  0006b	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  0006e	0f 86 c0 00 00
	00		 jbe	 $LN35@MLS_DarkHo
$LN19@MLS_DarkHo:
  00074	ba 0b 02 00 00	 mov	 edx, 523		; 0000020bH
  00079	66 3b ca	 cmp	 cx, dx
  0007c	0f 84 b2 00 00
	00		 je	 $LN35@MLS_DarkHo

; 3226 : 				{
; 3227 : 	
; 3228 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00082	8b 4d 08	 mov	 ecx, DWORD PTR tv425[ebp]
  00085	8a 09		 mov	 cl, BYTE PTR [ecx]
  00087	80 f9 02	 cmp	 cl, 2
  0008a	75 0a		 jne	 SHORT $LN18@MLS_DarkHo
  0008c	83 bc 06 50 04
	00 00 00	 cmp	 DWORD PTR [esi+eax+1104], 0

; 3229 : 					{
; 3230 : 						EnableAttack = 1;

  00094	7c 6e		 jl	 SHORT $LN15@MLS_DarkHo
$LN18@MLS_DarkHo:

; 3231 : 					}
; 3232 : 					else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00096	3b 7d 0c	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  00099	74 69		 je	 SHORT $LN15@MLS_DarkHo
  0009b	39 7d f8	 cmp	 DWORD PTR _DuelIndex$[ebp], edi
  0009e	74 64		 je	 SHORT $LN15@MLS_DarkHo

; 3233 : 					{
; 3234 : 						EnableAttack = 1;
; 3235 : 					}
; 3236 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000a0	80 f9 03	 cmp	 cl, 3
  000a3	74 24		 je	 SHORT $LN13@MLS_DarkHo
  000a5	80 bc 06 49 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+329], 30 ; 0000001eH
  000ad	75 1a		 jne	 SHORT $LN13@MLS_DarkHo
  000af	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000b6	75 11		 jne	 SHORT $LN13@MLS_DarkHo

; 3237 : 					{
; 3238 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000b8	8a 93 02 1c 00
	00		 mov	 dl, BYTE PTR [ebx+7170]
  000be	3a 94 06 02 1c
	00 00		 cmp	 dl, BYTE PTR [esi+eax+7170]
  000c5	74 6d		 je	 SHORT $LN35@MLS_DarkHo

; 3239 : 							EnableAttack = 1;
; 3240 : 					}
; 3241 : 					else

  000c7	eb 3b		 jmp	 SHORT $LN15@MLS_DarkHo
$LN13@MLS_DarkHo:

; 3242 : 					{
; 3243 : 						int CallMonIndex = gObj[tObjNum].m_Index;
; 3244 : 	
; 3245 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000c9	66 83 7c 06 68
	02		 cmp	 WORD PTR [esi+eax+104], 2
  000cf	8b 0c 06	 mov	 ecx, DWORD PTR [esi+eax]
  000d2	75 14		 jne	 SHORT $LN10@MLS_DarkHo
  000d4	8b 94 06 50 04
	00 00		 mov	 edx, DWORD PTR [esi+eax+1104]
  000db	85 d2		 test	 edx, edx
  000dd	78 09		 js	 SHORT $LN10@MLS_DarkHo

; 3246 : 						{
; 3247 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000df	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000e5	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
$LN10@MLS_DarkHo:

; 3248 : 						}
; 3249 : 	
; 3250 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000e8	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000ee	03 c8		 add	 ecx, eax
  000f0	51		 push	 ecx
  000f1	53		 push	 ebx
  000f2	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000f7	83 c4 08	 add	 esp, 8
  000fa	83 f8 01	 cmp	 eax, 1
  000fd	75 30		 jne	 SHORT $LN34@MLS_DarkHo
  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN15@MLS_DarkHo:

; 3251 : 						{
; 3252 : 							EnableAttack = 1;
; 3253 : 						}
; 3254 : 					}
; 3255 : 	
; 3256 : 					if(EnableAttack != 0)
; 3257 : 					{
; 3258 : 						if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 5)

  00104	03 f0		 add	 esi, eax
  00106	56		 push	 esi
  00107	53		 push	 ebx
  00108	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0010d	83 c4 08	 add	 esp, 8
  00110	83 f8 05	 cmp	 eax, 5
  00113	7d 1a		 jge	 SHORT $LN34@MLS_DarkHo

; 3259 : 						{
; 3260 : 							bAttack = 0;
; 3261 : 	
; 3262 : 							if(HitCount > 15)
; 3263 : 							{
; 3264 : 								bAttack = 0;
; 3265 : 							}
; 3266 : 	
; 3267 : 							if(HitCount >= 10)
; 3268 : 							{
; 3269 : 								if(rand()%2)
; 3270 : 								{
; 3271 : 									bAttack = 1;
; 3272 : 								}
; 3273 : 							}
; 3274 : 							else
; 3275 : 							{
; 3276 : 								bAttack = 1;
; 3277 : 							}
; 3278 : 	
; 3279 : 							if(bAttack != 0)
; 3280 : 							{
; 3281 : 								gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,0);

  00115	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00118	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0011b	6a 00		 push	 0
  0011d	51		 push	 ecx
  0011e	68 f4 01 00 00	 push	 500			; 000001f4H
  00123	57		 push	 edi
  00124	6a 32		 push	 50			; 00000032H
  00126	53		 push	 ebx
  00127	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0012c	83 c4 18	 add	 esp, 24			; 00000018H
$LN34@MLS_DarkHo:
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN35@MLS_DarkHo:

; 3282 : 							}
; 3283 : 						}
; 3284 : 					}
; 3285 : 				}
; 3286 : 			}
; 3287 : 		}
; 3288 : 	
; 3289 : 		count++;

  00134	8b 4d 08	 mov	 ecx, DWORD PTR tv425[ebp]
  00137	83 c1 0c	 add	 ecx, 12			; 0000000cH

; 3290 : 		if(count > MAX_VIEWPORT -1)

  0013a	ff 4d fc	 dec	 DWORD PTR tv352[ebp]
  0013d	89 4d 08	 mov	 DWORD PTR tv425[ebp], ecx
  00140	0f 85 fa fe ff
	ff		 jne	 $LL24@MLS_DarkHo

; 3291 : 		{
; 3292 : 			break;
; 3293 : 		}
; 3294 : 	}
; 3295 : return true;

  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	b8 01 00 00 00	 mov	 eax, 1
  0014d	5b		 pop	 ebx

; 3296 : }

  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 0c 00	 ret	 12			; 0000000cH
?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
_TEXT	ENDS
PUBLIC	?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireBurst
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -12					; size = 4
_lpTargetObj$ = -8					; size = 4
tv355 = -4						; size = 4
tv426 = 8						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_FireBurst, COMDAT
; _this$ = ecx

; 3299 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3300 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 3301 : 	int StartDis = 1;
; 3302 : 	int tObjNum;
; 3303 : 	int count = 0;
; 3304 : 	int loopcount = 0;
; 3305 : 
; 3306 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,1);

  0000b	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0000e	53		 push	 ebx
  0000f	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  00012	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00018	8b 0c 03	 mov	 ecx, DWORD PTR [ebx+eax]
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00020	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]
  00023	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00027	6a 01		 push	 1
  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	57		 push	 edi
  0002c	89 75 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], esi
  0002f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3307 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,0,0,0);

  00034	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	6a 01		 push	 1
  00041	6a 00		 push	 0
  00043	51		 push	 ecx
  00044	56		 push	 esi
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack

; 3308 : 
; 3309 : 	int attackcheck;
; 3310 : 	int DuelIndex = lpObj->m_iDuelUser;

  0004b	8b 97 b8 0e 00
	00		 mov	 edx, DWORD PTR [edi+3768]
  00051	8d 87 b0 08 00
	00		 lea	 eax, DWORD PTR [edi+2224]
  00057	89 55 f4	 mov	 DWORD PTR _DuelIndex$[ebp], edx
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00060	83 c4 34	 add	 esp, 52			; 00000034H
  00063	89 45 08	 mov	 DWORD PTR tv426[ebp], eax
  00066	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv355[ebp], 75 ; 0000004bH
  0006d	8d 49 00	 npad	 3
$LL21@MLS_FireBu:

; 3311 : 	int EnableAttack;
; 3312 : 	int delaytime;
; 3313 : 
; 3314 : 	while ( true )
; 3315 : 	{
; 3316 : 		if(lpObj->VpPlayer2[count].state != 0)

  00070	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00074	0f 84 06 01 00
	00		 je	 $LN32@MLS_FireBu

; 3317 : 		{
; 3318 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007a	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 3319 : 
; 3320 : 			if(tObjNum >= 0 && aTargetIndex != tObjNum)

  0007e	85 f6		 test	 esi, esi
  00080	0f 88 fa 00 00
	00		 js	 $LN32@MLS_FireBu
  00086	39 75 0c	 cmp	 DWORD PTR _aTargetIndex$[ebp], esi
  00089	0f 84 f1 00 00
	00		 je	 $LN32@MLS_FireBu

; 3321 : 			{
; 3322 : 				EnableAttack = 0;
; 3323 : 
; 3324 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0008f	8a 00		 mov	 al, BYTE PTR [eax]
  00091	3c 02		 cmp	 al, 2
  00093	75 16		 jne	 SHORT $LN17@MLS_FireBu
  00095	8b ce		 mov	 ecx, esi
  00097	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0009d	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 3325 : 				{
; 3326 : 					EnableAttack = 1;

  000a5	0f 8c 84 00 00
	00		 jl	 $LN14@MLS_FireBu
$LN17@MLS_FireBu:

; 3327 : 				}
; 3328 : 				else if(tObjNum == lpTargetObj->m_Index || DuelIndex == tObjNum)

  000ab	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  000ae	3b 31		 cmp	 esi, DWORD PTR [ecx]
  000b0	74 7d		 je	 SHORT $LN14@MLS_FireBu
  000b2	39 75 f4	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  000b5	74 78		 je	 SHORT $LN14@MLS_FireBu

; 3329 : 				{
; 3330 : 					EnableAttack = 1;
; 3331 : 				}
; 3332 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b7	3c 03		 cmp	 al, 3
  000b9	74 30		 je	 SHORT $LN12@MLS_FireBu
  000bb	8b c6		 mov	 eax, esi
  000bd	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000c3	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  000cb	75 1e		 jne	 SHORT $LN12@MLS_FireBu
  000cd	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000d4	75 15		 jne	 SHORT $LN12@MLS_FireBu

; 3333 : 				{
; 3334 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d6	8a 8f 02 1c 00
	00		 mov	 cl, BYTE PTR [edi+7170]
  000dc	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  000e3	0f 84 97 00 00
	00		 je	 $LN32@MLS_FireBu

; 3335 : 						EnableAttack = 1;
; 3336 : 				}
; 3337 : 				else

  000e9	eb 44		 jmp	 SHORT $LN14@MLS_FireBu
$LN12@MLS_FireBu:

; 3338 : 				{
; 3339 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000eb	8b ce		 mov	 ecx, esi
  000ed	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 3340 : 
; 3341 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000f3	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  000f9	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000fc	75 14		 jne	 SHORT $LN9@MLS_FireBu
  000fe	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  00105	85 c9		 test	 ecx, ecx
  00107	78 09		 js	 SHORT $LN9@MLS_FireBu

; 3342 : 					{
; 3343 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00109	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0010f	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN9@MLS_FireBu:

; 3344 : 					}
; 3345 : 
; 3346 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00112	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00118	03 c2		 add	 eax, edx
  0011a	50		 push	 eax
  0011b	57		 push	 edi
  0011c	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00121	83 c4 08	 add	 esp, 8
  00124	83 f8 01	 cmp	 eax, 1
  00127	75 51		 jne	 SHORT $LN31@MLS_FireBu
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN14@MLS_FireBu:

; 3347 : 					{
; 3348 : 						EnableAttack = 1;
; 3349 : 					}
; 3350 : 				}
; 3351 : 
; 3352 : 				if(EnableAttack != 0)
; 3353 : 				{
; 3354 : 					attackcheck = 0;
; 3355 : 
; 3356 : 					if(loopcount == 0)
; 3357 : 					{
; 3358 : 						attackcheck = 1;
; 3359 : 					}
; 3360 : 					else if(rand()%3==0)
; 3361 : 					{
; 3362 : 						attackcheck = 1;
; 3363 : 					}
; 3364 : 
; 3365 : 					if(attackcheck != 0)
; 3366 : 					{
; 3367 : 						if(gObjCalDistance(&gObj[aTargetIndex],&gObj[tObjNum]) < 3)

  0012f	8b ce		 mov	 ecx, esi
  00131	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00137	03 ca		 add	 ecx, edx
  00139	51		 push	 ecx
  0013a	03 d3		 add	 edx, ebx
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00142	83 c4 08	 add	 esp, 8
  00145	83 f8 03	 cmp	 eax, 3
  00148	7d 30		 jge	 SHORT $LN31@MLS_FireBu

; 3368 : 						{
; 3369 : 							delaytime = (rand()*17)%300 + 500;

  0014a	e8 00 00 00 00	 call	 _rand
  0014f	8b c8		 mov	 ecx, eax
  00151	c1 e0 04	 shl	 eax, 4
  00154	03 c1		 add	 eax, ecx
  00156	99		 cdq
  00157	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0015c	f7 f9		 idiv	 ecx

; 3370 : 
; 3371 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delaytime,lpMagic->m_Skill,0);

  0015e	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00161	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00164	6a 00		 push	 0
  00166	51		 push	 ecx
  00167	81 c2 f4 01 00
	00		 add	 edx, 500		; 000001f4H
  0016d	52		 push	 edx
  0016e	56		 push	 esi
  0016f	6a 32		 push	 50			; 00000032H
  00171	57		 push	 edi
  00172	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00177	83 c4 18	 add	 esp, 24			; 00000018H
$LN31@MLS_FireBu:
  0017a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN32@MLS_FireBu:

; 3372 : 						}
; 3373 : 					}
; 3374 : 				}
; 3375 : 			}
; 3376 : 		}
; 3377 : 
; 3378 : 		count++;

  00180	8b 45 08	 mov	 eax, DWORD PTR tv426[ebp]
  00183	83 c0 0c	 add	 eax, 12			; 0000000cH

; 3379 : 		if(count > MAX_VIEWPORT -1)

  00186	ff 4d fc	 dec	 DWORD PTR tv355[ebp]
  00189	89 45 08	 mov	 DWORD PTR tv426[ebp], eax
  0018c	0f 85 de fe ff
	ff		 jne	 $LL21@MLS_FireBu

; 3380 : 		{
; 3381 : 			break;
; 3382 : 		}
; 3383 : 	}
; 3384 : 	return true;

  00192	5f		 pop	 edi
  00193	5e		 pop	 esi
  00194	b8 01 00 00 00	 mov	 eax, 1
  00199	5b		 pop	 ebx

; 3385 : }

  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_FireBurst
_TEXT	ENDS
PUBLIC	__real@4056800000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@4066800000000000
PUBLIC	?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
EXTRN	__ftol2_sse:PROC
EXTRN	__CIatan2:PROC
;	COMDAT __real@4056800000000000
CONST	SEGMENT
__real@4056800000000000 DQ 04056800000000000r	; 90
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
tv138 = 12						; size = 4
tv136 = 12						; size = 4
_y$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_GetAngle, COMDAT
; _this$ = ecx

; 3745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3746 : 	double diffX = x - tx;
; 3747 : 	double diffY = y - ty;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00006	2b 45 14	 sub	 eax, DWORD PTR _ty$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000c	2b 4d 10	 sub	 ecx, DWORD PTR _tx$[ebp]

; 3748 : 
; 3749 : 	double rad = atan2(diffY,diffX);
; 3750 : 
; 3751 : 	int angle  = rad*180/M_PI + 90.0f;

  0000f	89 45 0c	 mov	 DWORD PTR tv138[ebp], eax
  00012	db 45 0c	 fild	 DWORD PTR tv138[ebp]
  00015	89 4d 0c	 mov	 DWORD PTR tv136[ebp], ecx
  00018	db 45 0c	 fild	 DWORD PTR tv136[ebp]
  0001b	e8 00 00 00 00	 call	 __CIatan2
  00020	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4066800000000000
  00026	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@400921fb60000000
  0002c	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4056800000000000
  00032	e8 00 00 00 00	 call	 __ftol2_sse

; 3752 : 
; 3753 : 	if( angle < 0 )

  00037	85 c0		 test	 eax, eax
  00039	79 05		 jns	 SHORT $LN1@MLS_GetAng

; 3754 : 		angle += 360;

  0003b	05 68 01 00 00	 add	 eax, 360		; 00000168H
$LN1@MLS_GetAng:

; 3755 : 
; 3756 : 	return angle;
; 3757 : }

  00040	5d		 pop	 ebp
  00041	c2 10 00	 ret	 16			; 00000010H
?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_GetAngle
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum
EXTRN	_VectorRotate:PROC
EXTRN	_AngleMatrix:PROC
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z
_TEXT	SEGMENT
_lpObj$ = -164						; size = 4
_vFrustrum$ = -160					; size = 48
_Matrix$ = -112						; size = 48
_p$ = -64						; size = 48
_Angle$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_fangle$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum, COMDAT
; _this$ = ecx

; 3760 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3761 : 	LPOBJ lpObj = &gObj[aIndex];
; 3762 : 
; 3763 : 	float p[4][3];
; 3764 : 
; 3765 : 	p[0][0] = -tx;

  00013	d9 45 10	 fld	 DWORD PTR _tx$[ebp]
  00016	53		 push	 ebx
  00017	d9 c0		 fld	 ST(0)
  00019	56		 push	 esi
  0001a	d9 e0		 fchs
  0001c	57		 push	 edi
  0001d	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00020	d9 5d c0	 fstp	 DWORD PTR _p$[ebp]

; 3766 : 	p[0][1] = ty;

  00023	d9 45 14	 fld	 DWORD PTR _ty$[ebp]
  00026	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002c	d9 55 c4	 fst	 DWORD PTR _p$[ebp+4]

; 3767 : 	p[0][2] = 0;

  0002f	d9 ee		 fldz
  00031	d9 55 c8	 fst	 DWORD PTR _p$[ebp+8]

; 3768 : 	p[1][0] = tx;
; 3769 : 	p[1][1] = ty;
; 3770 : 	p[1][2] = 0;

  00034	d9 55 d4	 fst	 DWORD PTR _p$[ebp+20]
  00037	d9 ca		 fxch	 ST(2)
  00039	d9 5d cc	 fstp	 DWORD PTR _p$[ebp+12]
  0003c	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00042	d9 5d d0	 fstp	 DWORD PTR _p$[ebp+16]

; 3771 : 	p[2][0] = 1.0f;
; 3772 : 	p[2][1] = 0;
; 3773 : 	p[2][2] = 0;
; 3774 : 	p[3][0] = -1.0f;
; 3775 : 	p[3][1] = 0;
; 3776 : 	p[3][2] = 0;
; 3777 : 
; 3778 : 	float Angle[3];
; 3779 : 
; 3780 : 	Angle[0] = 0;
; 3781 : 	Angle[1] = 0;
; 3782 : 	Angle[2] = fangle;
; 3783 : 
; 3784 : 	float Matrix[3][4];
; 3785 : 	float vFrustrum[4][3];
; 3786 : 
; 3787 : 	AngleMatrix(Angle,Matrix);

  00045	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  00048	d9 e8		 fld1
  0004a	50		 push	 eax
  0004b	d9 5d d8	 fstp	 DWORD PTR _p$[ebp+24]
  0004e	8d 4d f0	 lea	 ecx, DWORD PTR _Angle$[ebp]
  00051	51		 push	 ecx
  00052	89 bd 5c ff ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], edi
  00058	d9 55 dc	 fst	 DWORD PTR _p$[ebp+28]
  0005b	d9 55 e0	 fst	 DWORD PTR _p$[ebp+32]
  0005e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  00064	d9 5d e4	 fstp	 DWORD PTR _p$[ebp+36]
  00067	d9 55 e8	 fst	 DWORD PTR _p$[ebp+40]
  0006a	d9 55 ec	 fst	 DWORD PTR _p$[ebp+44]
  0006d	d9 55 f0	 fst	 DWORD PTR _Angle$[ebp]
  00070	d9 5d f4	 fstp	 DWORD PTR _Angle$[ebp+4]
  00073	d9 45 0c	 fld	 DWORD PTR _fangle$[ebp]
  00076	d9 5d f8	 fstp	 DWORD PTR _Angle$[ebp+8]
  00079	e8 00 00 00 00	 call	 _AngleMatrix
  0007e	83 c4 08	 add	 esp, 8

; 3792 : 
; 3793 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  00081	81 c7 04 11 00
	00		 add	 edi, 4356		; 00001104H
  00087	33 f6		 xor	 esi, esi
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL3@MLS_SkillF:

; 3788 : 
; 3789 : 	for(int i = 0; i < 4; i++)
; 3790 : 	{
; 3791 : 		VectorRotate((const float *)&p[i],&Matrix[0],(float *)&vFrustrum[i]);

  00090	8d 9c 35 60 ff
	ff ff		 lea	 ebx, DWORD PTR _vFrustrum$[ebp+esi]
  00097	53		 push	 ebx
  00098	8d 55 90	 lea	 edx, DWORD PTR _Matrix$[ebp]
  0009b	52		 push	 edx
  0009c	8d 44 35 c0	 lea	 eax, DWORD PTR _p$[ebp+esi]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _VectorRotate

; 3792 : 
; 3793 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  000a6	d9 03		 fld	 DWORD PTR [ebx]
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ab	e8 00 00 00 00	 call	 __ftol2_sse
  000b0	8b 9d 5c ff ff
	ff		 mov	 ebx, DWORD PTR _lpObj$[ebp]
  000b6	0f bf 8b 44 01
	00 00		 movsx	 ecx, WORD PTR [ebx+324]
  000bd	03 c1		 add	 eax, ecx
  000bf	89 47 f0	 mov	 DWORD PTR [edi-16], eax

; 3794 : 		lpObj->fSkillFrustrumY[i] = (int)vFrustrum[i][1] + lpObj->Y;

  000c2	d9 84 35 64 ff
	ff ff		 fld	 DWORD PTR _vFrustrum$[ebp+esi+4]
  000c9	e8 00 00 00 00	 call	 __ftol2_sse
  000ce	0f bf 93 46 01
	00 00		 movsx	 edx, WORD PTR [ebx+326]
  000d5	03 c2		 add	 eax, edx
  000d7	89 07		 mov	 DWORD PTR [edi], eax
  000d9	83 c6 0c	 add	 esi, 12			; 0000000cH
  000dc	83 c7 04	 add	 edi, 4
  000df	83 fe 30	 cmp	 esi, 48			; 00000030H
  000e2	7c ac		 jl	 SHORT $LL3@MLS_SkillF

; 3795 : 	}
; 3796 : }

  000e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	33 cd		 xor	 ecx, ebp
  000eb	5b		 pop	 ebx
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum
_TEXT	ENDS
PUBLIC	__real@3fc00000
PUBLIC	__real@3ff0000000000000
PUBLIC	?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
EXTRN	?SkillTestFrustrum@@YAHHHH@Z:PROC		; SkillTestFrustrum
;	COMDAT __real@3fc00000
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newmasterlevelskilltreesystem.cpp
CONST	ENDS
;	COMDAT ?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z
_TEXT	SEGMENT
_DuelIndex$ = -8					; size = 4
_fangle$ = -8						; size = 4
tv399 = -4						; size = 4
tv396 = -4						; size = 4
_loopcount$ = -4					; size = 4
_fSkillDist$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_isCombo$ = 20						; size = 4
?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_KnightBlow, COMDAT
; _this$ = ecx

; 3799 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3800 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	53		 push	 ebx
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx

; 3801 : 	int StartDis = 1;
; 3802 : 	int tObjNum;
; 3803 : 
; 3804 : 	float fangle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00016	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0001c	0f bf 94 08 46
	01 00 00	 movsx	 edx, WORD PTR [eax+ecx+326]
  00024	8b f3		 mov	 esi, ebx
  00026	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0002c	03 f0		 add	 esi, eax
  0002e	0f bf 84 08 44
	01 00 00	 movsx	 eax, WORD PTR [eax+ecx+324]
  00036	0f bf 8e 46 01
	00 00		 movsx	 ecx, WORD PTR [esi+326]
  0003d	52		 push	 edx
  0003e	0f bf 96 44 01
	00 00		 movsx	 edx, WORD PTR [esi+324]
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	52		 push	 edx
  00048	8b cf		 mov	 ecx, edi
  0004a	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  0004f	89 45 fc	 mov	 DWORD PTR tv399[ebp], eax

; 3805 : 	float fSkillDist = MagicDamageC.GetSkillDistance(lpMagic->m_Skill)+1.0f;

  00052	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00055	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00058	db 45 fc	 fild	 DWORD PTR tv399[ebp]
  0005b	51		 push	 ecx
  0005c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00061	d9 5d f8	 fstp	 DWORD PTR _fangle$[ebp]
  00064	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance
  00069	89 45 fc	 mov	 DWORD PTR tv396[ebp], eax
  0006c	db 45 fc	 fild	 DWORD PTR tv396[ebp]

; 3806 : 
; 3807 : 	this->MLS_SkillFrustrum(aIndex,fangle,1.5f,fSkillDist);

  0006f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00072	8b cf		 mov	 ecx, edi
  00074	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  0007a	d9 5d fc	 fstp	 DWORD PTR _fSkillDist$[ebp]
  0007d	d9 45 fc	 fld	 DWORD PTR _fSkillDist$[ebp]
  00080	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00084	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  0008a	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0008e	d9 45 f8	 fld	 DWORD PTR _fangle$[ebp]
  00091	d9 1c 24	 fstp	 DWORD PTR [esp]
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum

; 3808 : 
; 3809 : 	int count = 0;
; 3810 : 	int loopcount = 0;
; 3811 : 	int attackcheck;
; 3812 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0009a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0009d	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  000a0	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  000a4	6a 01		 push	 1
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	33 db		 xor	 ebx, ebx
  000aa	56		 push	 esi
  000ab	89 5d fc	 mov	 DWORD PTR _loopcount$[ebp], ebx
  000ae	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3813 : 
; 3814 : 	int DuelIndex = lpObj->m_iDuelUser;

  000b3	8b 96 b8 0e 00
	00		 mov	 edx, DWORD PTR [esi+3768]
  000b9	89 55 f8	 mov	 DWORD PTR _DuelIndex$[ebp], edx
  000bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c2	83 c4 10	 add	 esp, 16			; 00000010H
$LL23@MLS_Knight:

; 3815 : 	int EnableAttack;
; 3816 : 
; 3817 : 	while ( true )
; 3818 : 	{
; 3819 : 		if(lpObj->VpPlayer2[count].state != 0)

  000c5	8d 84 5b 2b 02
	00 00		 lea	 eax, DWORD PTR [ebx+ebx*2+555]
  000cc	80 3c 86 00	 cmp	 BYTE PTR [esi+eax*4], 0
  000d0	0f 84 51 01 00
	00		 je	 $LN34@MLS_Knight

; 3820 : 		{
; 3821 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000d6	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  000d9	0f bf bc 8e ae
	08 00 00	 movsx	 edi, WORD PTR [esi+ecx*4+2222]
  000e1	8d 04 8e	 lea	 eax, DWORD PTR [esi+ecx*4]

; 3822 : 
; 3823 : 			if(tObjNum >= 0)

  000e4	85 ff		 test	 edi, edi
  000e6	0f 88 3b 01 00
	00		 js	 $LN34@MLS_Knight

; 3824 : 			{
; 3825 : 				EnableAttack = 0;
; 3826 : 
; 3827 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000ec	8a 80 b0 08 00
	00		 mov	 al, BYTE PTR [eax+2224]
  000f2	3c 02		 cmp	 al, 2
  000f4	75 16		 jne	 SHORT $LN19@MLS_Knight
  000f6	8b cf		 mov	 ecx, edi
  000f8	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000fe	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 3828 : 				{
; 3829 : 					EnableAttack = 1;

  00106	0f 8c 8e 00 00
	00		 jl	 $LN16@MLS_Knight
$LN19@MLS_Knight:

; 3830 : 				}
; 3831 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0010c	3b 7d 0c	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  0010f	0f 84 85 00 00
	00		 je	 $LN16@MLS_Knight
  00115	39 7d f8	 cmp	 DWORD PTR _DuelIndex$[ebp], edi
  00118	0f 84 7c 00 00
	00		 je	 $LN16@MLS_Knight

; 3832 : 				{
; 3833 : 					EnableAttack = 1;
; 3834 : 				}
; 3835 : 
; 3836 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0011e	3c 03		 cmp	 al, 3
  00120	74 30		 je	 SHORT $LN14@MLS_Knight
  00122	8b c7		 mov	 eax, edi
  00124	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0012a	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  00132	75 1e		 jne	 SHORT $LN14@MLS_Knight
  00134	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  0013b	75 15		 jne	 SHORT $LN14@MLS_Knight

; 3837 : 				{
; 3838 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0013d	8a 8e 02 1c 00
	00		 mov	 cl, BYTE PTR [esi+7170]
  00143	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  0014a	0f 84 d7 00 00
	00		 je	 $LN34@MLS_Knight

; 3839 : 						EnableAttack = 1;
; 3840 : 				}
; 3841 : 
; 3842 : 				else

  00150	eb 48		 jmp	 SHORT $LN16@MLS_Knight
$LN14@MLS_Knight:

; 3843 : 				{
; 3844 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00152	8b cf		 mov	 ecx, edi
  00154	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 3845 : 
; 3846 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0015a	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  00160	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00163	75 14		 jne	 SHORT $LN11@MLS_Knight
  00165	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  0016c	85 c9		 test	 ecx, ecx
  0016e	78 09		 js	 SHORT $LN11@MLS_Knight

; 3847 : 					{
; 3848 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00170	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00176	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN11@MLS_Knight:

; 3849 : 					}
; 3850 : 
; 3851 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00179	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0017f	03 c2		 add	 eax, edx
  00181	50		 push	 eax
  00182	56		 push	 esi
  00183	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00188	83 c4 08	 add	 esp, 8
  0018b	83 f8 01	 cmp	 eax, 1
  0018e	0f 85 8d 00 00
	00		 jne	 $LN33@MLS_Knight
  00194	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN16@MLS_Knight:

; 3852 : 					{
; 3853 : 						EnableAttack = 1;
; 3854 : 					}
; 3855 : 				}
; 3856 : 
; 3857 : 				if(EnableAttack != 0)
; 3858 : 				{
; 3859 : 					attackcheck = 0;
; 3860 : 
; 3861 : 					if(loopcount == 0)

  0019a	83 7d fc 00	 cmp	 DWORD PTR _loopcount$[ebp], 0

; 3862 : 					{
; 3863 : 						attackcheck = 1;

  0019e	74 17		 je	 SHORT $LN32@MLS_Knight

; 3864 : 					}
; 3865 : 					else if(rand()%3==0)

  001a0	e8 00 00 00 00	 call	 _rand
  001a5	99		 cdq
  001a6	b9 03 00 00 00	 mov	 ecx, 3
  001ab	f7 f9		 idiv	 ecx
  001ad	85 d2		 test	 edx, edx
  001af	75 70		 jne	 SHORT $LN33@MLS_Knight
  001b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN32@MLS_Knight:

; 3866 : 					{
; 3867 : 						attackcheck = 1;
; 3868 : 					}
; 3869 : 
; 3870 : 					if(attackcheck != 0)
; 3871 : 					{
; 3872 : 						if(::SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex))

  001b7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001ba	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  001c0	0f bf 8c 17 46
	01 00 00	 movsx	 ecx, WORD PTR [edi+edx+326]
  001c8	0f bf 94 17 44
	01 00 00	 movsx	 edx, WORD PTR [edi+edx+324]
  001d0	50		 push	 eax
  001d1	51		 push	 ecx
  001d2	52		 push	 edx
  001d3	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  001d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001db	85 c0		 test	 eax, eax
  001dd	74 42		 je	 SHORT $LN33@MLS_Knight

; 3873 : 						{
; 3874 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,isCombo,0,0);

  001df	8b 45 14	 mov	 eax, DWORD PTR _isCombo$[ebp]
  001e2	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  001e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001eb	6a 00		 push	 0
  001ed	6a 00		 push	 0
  001ef	50		 push	 eax
  001f0	6a 00		 push	 0
  001f2	6a 01		 push	 1
  001f4	6a 00		 push	 0
  001f6	51		 push	 ecx
  001f7	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  001fa	50		 push	 eax
  001fb	56		 push	 esi
  001fc	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00201	83 c4 24	 add	 esp, 36			; 00000024H

; 3875 : 							if(isCombo != 0)

  00204	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  00208	74 17		 je	 SHORT $LN33@MLS_Knight

; 3876 : 							{
; 3877 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,gObj[tObjNum].m_Index,1);

  0020a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00210	8b 14 0f	 mov	 edx, DWORD PTR [edi+ecx]
  00213	6a 01		 push	 1
  00215	52		 push	 edx
  00216	6a 3b		 push	 59			; 0000003bH
  00218	56		 push	 esi
  00219	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0021e	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@MLS_Knight:
  00221	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN34@MLS_Knight:

; 3878 : 							}
; 3879 : 						}
; 3880 : 					}
; 3881 : 				}
; 3882 : 			}
; 3883 : 		}
; 3884 : 
; 3885 : 		count++;

  00227	43		 inc	 ebx

; 3886 : 		if(count > MAX_VIEWPORT -1)

  00228	83 fb 4a	 cmp	 ebx, 74			; 0000004aH
  0022b	0f 8e 94 fe ff
	ff		 jle	 $LL23@MLS_Knight

; 3887 : 		{
; 3888 : 			loopcount++;

  00231	8b 45 fc	 mov	 eax, DWORD PTR _loopcount$[ebp]
  00234	40		 inc	 eax

; 3889 : 			count = 0;

  00235	33 db		 xor	 ebx, ebx
  00237	89 45 fc	 mov	 DWORD PTR _loopcount$[ebp], eax

; 3890 : 			if(loopcount >= 3)

  0023a	83 f8 03	 cmp	 eax, 3

; 3891 : 			{
; 3892 : 				break;
; 3893 : 			}
; 3894 : 		}
; 3895 : 	}

  0023d	0f 8c 82 fe ff
	ff		 jl	 $LL23@MLS_Knight

; 3896 : 	return true;

  00243	5f		 pop	 edi
  00244	5e		 pop	 esi
  00245	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00248	5b		 pop	 ebx

; 3897 : }

  00249	8b e5		 mov	 esp, ebp
  0024b	5d		 pop	 ebp
  0024c	c2 10 00	 ret	 16			; 00000010H
?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
_TEXT	ENDS
PUBLIC	?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z
_TEXT	SEGMENT
_DuelIndex$ = -12					; size = 4
tv222 = -8						; size = 4
tv386 = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_isCombo$ = 28						; size = 4
?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury, COMDAT
; _this$ = ecx

; 3900 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3901 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	53		 push	 ebx
  0000d	8b 5d 1c	 mov	 ebx, DWORD PTR _isCombo$[ebp]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00015	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H

; 3902 : 	int tObjNum;
; 3903 : 	int count = 0;
; 3904 : 	int DuelIndex = lpObj->m_iDuelUser;

  0001b	8b 84 17 b8 0e
	00 00		 mov	 eax, DWORD PTR [edi+edx+3768]
  00022	03 fa		 add	 edi, edx
  00024	89 45 f4	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00027	8d 87 b0 08 00
	00		 lea	 eax, DWORD PTR [edi+2224]
  0002d	89 45 fc	 mov	 DWORD PTR tv386[ebp], eax
  00030	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR tv222[ebp], 75 ; 0000004bH
  00037	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL23@MLS_SkillB:

; 3905 : 	int HitCount = 0;
; 3906 : 	int bAttack = 0;
; 3907 : 	int EnableAttack;
; 3908 : 
; 3909 : 	while ( true )
; 3910 : 	{
; 3911 : 		if(lpObj->VpPlayer2[count].state != 0)

  00040	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00044	0f 84 f7 00 00
	00		 je	 $LN35@MLS_SkillB

; 3912 : 		{
; 3913 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0004a	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 3914 : 
; 3915 : 			if(tObjNum >= 0)

  0004e	85 f6		 test	 esi, esi
  00050	0f 88 eb 00 00
	00		 js	 $LN35@MLS_SkillB

; 3916 : 			{
; 3917 : 				EnableAttack = 0;
; 3918 : 
; 3919 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00056	8a 00		 mov	 al, BYTE PTR [eax]
  00058	3c 02		 cmp	 al, 2
  0005a	75 16		 jne	 SHORT $LN19@MLS_SkillB
  0005c	8b ce		 mov	 ecx, esi
  0005e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00064	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 3920 : 				{
; 3921 : 					EnableAttack = 1;

  0006c	0f 8c 82 00 00
	00		 jl	 $LN16@MLS_SkillB
$LN19@MLS_SkillB:

; 3922 : 				}
; 3923 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00072	3b 75 18	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00075	74 7d		 je	 SHORT $LN16@MLS_SkillB
  00077	39 75 f4	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  0007a	74 78		 je	 SHORT $LN16@MLS_SkillB

; 3924 : 				{
; 3925 : 					EnableAttack = 1;
; 3926 : 				}
; 3927 : 
; 3928 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0007c	3c 03		 cmp	 al, 3
  0007e	74 30		 je	 SHORT $LN14@MLS_SkillB
  00080	8b c6		 mov	 eax, esi
  00082	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00088	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  00090	75 1e		 jne	 SHORT $LN14@MLS_SkillB
  00092	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  00099	75 15		 jne	 SHORT $LN14@MLS_SkillB

; 3929 : 				{
; 3930 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0009b	8a 8f 02 1c 00
	00		 mov	 cl, BYTE PTR [edi+7170]
  000a1	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  000a8	0f 84 93 00 00
	00		 je	 $LN35@MLS_SkillB

; 3931 : 						EnableAttack = 1;
; 3932 : 				}
; 3933 : 
; 3934 : 				else

  000ae	eb 44		 jmp	 SHORT $LN16@MLS_SkillB
$LN14@MLS_SkillB:

; 3935 : 				{
; 3936 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000b0	8b ce		 mov	 ecx, esi
  000b2	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 3937 : 
; 3938 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000b8	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  000be	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000c1	75 14		 jne	 SHORT $LN11@MLS_SkillB
  000c3	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  000ca	85 c9		 test	 ecx, ecx
  000cc	78 09		 js	 SHORT $LN11@MLS_SkillB

; 3939 : 					{
; 3940 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000ce	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000d4	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN11@MLS_SkillB:

; 3941 : 					}
; 3942 : 
; 3943 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000d7	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000dd	03 c2		 add	 eax, edx
  000df	50		 push	 eax
  000e0	57		 push	 edi
  000e1	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000e6	83 c4 08	 add	 esp, 8
  000e9	83 f8 01	 cmp	 eax, 1
  000ec	75 4d		 jne	 SHORT $LN34@MLS_SkillB
  000ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN16@MLS_SkillB:

; 3944 : 					{
; 3945 : 						EnableAttack = 1;
; 3946 : 					}
; 3947 : 				}
; 3948 : 
; 3949 : 				if(EnableAttack != 0)
; 3950 : 				{
; 3951 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 4)

  000f4	8b ce		 mov	 ecx, esi
  000f6	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000fc	03 ca		 add	 ecx, edx
  000fe	51		 push	 ecx
  000ff	57		 push	 edi
  00100	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00105	83 c4 08	 add	 esp, 8
  00108	83 f8 04	 cmp	 eax, 4
  0010b	7d 2e		 jge	 SHORT $LN34@MLS_SkillB

; 3952 : 					{
; 3953 : 						bAttack = 0;
; 3954 : 
; 3955 : 						if(HitCount > 15)
; 3956 : 						{
; 3957 : 							bAttack = 0;
; 3958 : 						}
; 3959 : 
; 3960 : 						if(HitCount >= 10)
; 3961 : 						{
; 3962 : 							if(rand()%2)
; 3963 : 							{
; 3964 : 								bAttack = 1;
; 3965 : 							}
; 3966 : 						}
; 3967 : 						else
; 3968 : 						{
; 3969 : 							bAttack = 1;
; 3970 : 						}
; 3971 : 
; 3972 : 						if(bAttack != 0)
; 3973 : 						{
; 3974 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,isCombo);

  0010d	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00110	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00113	53		 push	 ebx
  00114	50		 push	 eax
  00115	68 f4 01 00 00	 push	 500			; 000001f4H
  0011a	56		 push	 esi
  0011b	6a 32		 push	 50			; 00000032H
  0011d	57		 push	 edi
  0011e	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00123	83 c4 18	 add	 esp, 24			; 00000018H

; 3975 : 
; 3976 : 							if(isCombo != 0)

  00126	85 db		 test	 ebx, ebx
  00128	74 11		 je	 SHORT $LN34@MLS_SkillB

; 3977 : 							{
; 3978 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,aIndex,1);

  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0012d	6a 01		 push	 1
  0012f	51		 push	 ecx
  00130	6a 3b		 push	 59			; 0000003bH
  00132	57		 push	 edi
  00133	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00138	83 c4 10	 add	 esp, 16			; 00000010H
$LN34@MLS_SkillB:
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN35@MLS_SkillB:

; 3979 : 							}
; 3980 : 						}
; 3981 : 					}
; 3982 : 				}
; 3983 : 			}
; 3984 : 		}
; 3985 : 
; 3986 : 		count++;

  00141	8b 45 fc	 mov	 eax, DWORD PTR tv386[ebp]
  00144	83 c0 0c	 add	 eax, 12			; 0000000cH

; 3987 : 		if(count > MAX_VIEWPORT -1)

  00147	ff 4d f8	 dec	 DWORD PTR tv222[ebp]
  0014a	89 45 fc	 mov	 DWORD PTR tv386[ebp], eax
  0014d	0f 85 ed fe ff
	ff		 jne	 $LL23@MLS_SkillB
  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx

; 3988 : 		{
; 3989 : 			break;
; 3990 : 		}
; 3991 : 	}
; 3992 : }

  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
_TEXT	ENDS
PUBLIC	?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; retCalcSkillResistance
; Function compile flags: /Ogtp
;	COMDAT ?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown, COMDAT
; _this$ = ecx

; 4295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4296 : 	int skillSuccess = 1;
; 4297 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	56		 push	 esi

; 4298 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00009	8b 75 0c	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0000c	57		 push	 edi
  0000d	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00013	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00016	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0001c	03 f8		 add	 edi, eax
  0001e	03 f0		 add	 esi, eax

; 4299 : 
; 4300 : 	if(lpObj->Type == OBJ_USER && lpObj->Class != CLASS_MAGUMSA)

  00020	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00025	75 0a		 jne	 SHORT $LN2@MLS_MaGumS
  00027	66 83 bf b8 00
	00 00 03	 cmp	 WORD PTR [edi+184], 3
  0002f	75 34		 jne	 SHORT $LN1@MLS_MaGumS
$LN2@MLS_MaGumS:

; 4301 : 	{
; 4302 : 		return;
; 4303 : 	}
; 4304 : 
; 4305 : 	if( retCalcSkillResistance(lpTargetObj,R_POISON) )

  00031	6a 01		 push	 1
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retCalcSkillResistance
  00039	83 c4 08	 add	 esp, 8
  0003c	85 c0		 test	 eax, eax
  0003e	74 25		 je	 SHORT $LN1@MLS_MaGumS

; 4306 : 	{
; 4307 : 		gObjApplyBuffEffectDuration(lpTargetObj,58,23,10,0,0,10);

  00040	6a 0a		 push	 10			; 0000000aH
  00042	6a 00		 push	 0
  00044	6a 00		 push	 0
  00046	6a 0a		 push	 10			; 0000000aH
  00048	6a 17		 push	 23			; 00000017H
  0004a	6a 3a		 push	 58			; 0000003aH
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 4308 : 		GCMagicAttackNumberSend(lpObj,490,lpTargetObj->m_Index,skillSuccess);

  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	6a 01		 push	 1
  00056	50		 push	 eax
  00057	68 ea 01 00 00	 push	 490			; 000001eaH
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00062	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN1@MLS_MaGumS:
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 4309 : 	}
; 4310 : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown
_TEXT	ENDS
PUBLIC	?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
; Function compile flags: /Ogtp
;	COMDAT ?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z
_TEXT	SEGMENT
_DuelIndex$ = -8					; size = 4
tv264 = -4						; size = 4
tv64 = -4						; size = 4
_iSkillDis$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
tv463 = 24						; size = 4
_HitCount$ = 24						; size = 4
_Targetangle$ = 24					; size = 1
_aTargetIndex$ = 28					; size = 4
?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_PowerSlash, COMDAT
; _this$ = ecx

; 4338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 4339 : 	LPOBJ lpObj = &gObj[aIndex];
; 4340 : 	int StartDis = 1;
; 4341 : 
; 4342 : 	int iSkillDis = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b fb		 mov	 edi, ebx
  00011	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00017	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	8b f1		 mov	 esi, ecx
  0001f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00022	51		 push	 ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00028	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 4343 : 	float fAngle = Targetangle*360/255;
; 4344 : 	this->MLS_SkillFrustrum(aIndex,fAngle,iSkillDis+1.0f,iSkillDis+1.0f);

  0002d	0f b6 4d 18	 movzx	 ecx, BYTE PTR _Targetangle$[ebp]
  00031	69 c9 68 01 00
	00		 imul	 ecx, 360		; 00000168H
  00037	89 45 fc	 mov	 DWORD PTR _iSkillDis$[ebp], eax
  0003a	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  0003f	f7 e9		 imul	 ecx
  00041	db 45 fc	 fild	 DWORD PTR _iSkillDis$[ebp]
  00044	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  0004a	d9 5d fc	 fstp	 DWORD PTR tv264[ebp]
  0004d	d9 45 fc	 fld	 DWORD PTR tv264[ebp]
  00050	03 d1		 add	 edx, ecx
  00052	c1 fa 07	 sar	 edx, 7
  00055	8b c2		 mov	 eax, edx
  00057	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx
  0005f	d9 54 24 08	 fst	 DWORD PTR [esp+8]
  00063	89 45 18	 mov	 DWORD PTR tv463[ebp], eax
  00066	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0006a	8b ce		 mov	 ecx, esi
  0006c	db 45 18	 fild	 DWORD PTR tv463[ebp]
  0006f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00072	53		 push	 ebx
  00073	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum

; 4345 : 
; 4346 : 	int tObjNum;
; 4347 : 	int count = 0;
; 4348 : 	int HitCount = 0;
; 4349 : 	int bAttack;
; 4350 : 	int DuelIndex = lpObj->m_iDuelUser;

  00078	8b 8f b8 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3768]
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00084	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0
  0008b	89 4d f8	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
  0008e	8d 9f b0 08 00
	00		 lea	 ebx, DWORD PTR [edi+2224]
  00094	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv64[ebp], 75	; 0000004bH
  0009b	eb 03 8d 49 00	 npad	 5
$LL22@MLS_PowerS:

; 4351 : 	int EnableAttack;
; 4352 : 
; 4353 : 	while ( true )
; 4354 : 	{
; 4355 : 		if(lpObj->VpPlayer2[count].state != 0)

  000a0	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  000a4	0f 84 15 01 00
	00		 je	 $LN34@MLS_PowerS

; 4356 : 		{
; 4357 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000aa	0f bf 73 fe	 movsx	 esi, WORD PTR [ebx-2]

; 4358 : 
; 4359 : 			if(tObjNum >= 0)

  000ae	85 f6		 test	 esi, esi
  000b0	0f 88 09 01 00
	00		 js	 $LN34@MLS_PowerS

; 4360 : 			{
; 4361 : 				EnableAttack = 0;
; 4362 : 
; 4363 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000b6	8a 03		 mov	 al, BYTE PTR [ebx]
  000b8	3c 02		 cmp	 al, 2
  000ba	75 16		 jne	 SHORT $LN18@MLS_PowerS
  000bc	8b ce		 mov	 ecx, esi
  000be	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000c4	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 4364 : 				{
; 4365 : 					EnableAttack = 1;

  000cc	0f 8c 82 00 00
	00		 jl	 $LN15@MLS_PowerS
$LN18@MLS_PowerS:

; 4366 : 				}
; 4367 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000d2	3b 75 1c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000d5	74 7d		 je	 SHORT $LN15@MLS_PowerS
  000d7	39 75 f8	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  000da	74 78		 je	 SHORT $LN15@MLS_PowerS

; 4368 : 				{
; 4369 : 					EnableAttack = 1;
; 4370 : 				}
; 4371 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000dc	3c 03		 cmp	 al, 3
  000de	74 30		 je	 SHORT $LN13@MLS_PowerS
  000e0	8b c6		 mov	 eax, esi
  000e2	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000e8	03 c2		 add	 eax, edx
  000ea	80 b8 49 01 00
	00 1e		 cmp	 BYTE PTR [eax+329], 30	; 0000001eH
  000f1	75 1d		 jne	 SHORT $LN13@MLS_PowerS
  000f3	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000fa	75 14		 jne	 SHORT $LN13@MLS_PowerS

; 4372 : 				{
; 4373 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000fc	8a 8f 02 1c 00
	00		 mov	 cl, BYTE PTR [edi+7170]
  00102	3a 88 02 1c 00
	00		 cmp	 cl, BYTE PTR [eax+7170]
  00108	0f 84 b1 00 00
	00		 je	 $LN34@MLS_PowerS

; 4374 : 						EnableAttack = 1;
; 4375 : 				}
; 4376 : 				else

  0010e	eb 44		 jmp	 SHORT $LN15@MLS_PowerS
$LN13@MLS_PowerS:

; 4377 : 				{
; 4378 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00110	8b ce		 mov	 ecx, esi
  00112	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 4379 : 
; 4380 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00118	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  0011e	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00121	75 14		 jne	 SHORT $LN10@MLS_PowerS
  00123	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  0012a	85 c9		 test	 ecx, ecx
  0012c	78 09		 js	 SHORT $LN10@MLS_PowerS

; 4381 : 					{
; 4382 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0012e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00134	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN10@MLS_PowerS:

; 4383 : 					}
; 4384 : 
; 4385 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00137	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0013d	03 c2		 add	 eax, edx
  0013f	50		 push	 eax
  00140	57		 push	 edi
  00141	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00146	83 c4 08	 add	 esp, 8
  00149	83 f8 01	 cmp	 eax, 1
  0014c	75 6b		 jne	 SHORT $LN33@MLS_PowerS
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN15@MLS_PowerS:

; 4386 : 					{
; 4387 : 						EnableAttack = 1;
; 4388 : 					}
; 4389 : 				}
; 4390 : 
; 4391 : 				if(EnableAttack != 0)
; 4392 : 				{
; 4393 : 					if(SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex))

  00154	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00157	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0015d	0f bf 84 16 46
	01 00 00	 movsx	 eax, WORD PTR [esi+edx+326]
  00165	51		 push	 ecx
  00166	0f bf 8c 16 44
	01 00 00	 movsx	 ecx, WORD PTR [esi+edx+324]
  0016e	50		 push	 eax
  0016f	51		 push	 ecx
  00170	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
  00178	85 c0		 test	 eax, eax
  0017a	74 3d		 je	 SHORT $LN33@MLS_PowerS

; 4394 : 					{
; 4395 : 						bAttack = 0;
; 4396 : 
; 4397 : 						if(HitCount > 10)
; 4398 : 						{
; 4399 : 							bAttack = 0;
; 4400 : 						}
; 4401 : 						
; 4402 : 						if(HitCount >= 5)

  0017c	83 7d 18 05	 cmp	 DWORD PTR _HitCount$[ebp], 5
  00180	7c 13		 jl	 SHORT $LN5@MLS_PowerS

; 4403 : 						{
; 4404 : 							if(rand()%2)

  00182	e8 00 00 00 00	 call	 _rand
  00187	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0018c	79 05		 jns	 SHORT $LN37@MLS_PowerS
  0018e	48		 dec	 eax
  0018f	83 c8 fe	 or	 eax, -2			; fffffffeH
  00192	40		 inc	 eax
$LN37@MLS_PowerS:
  00193	74 21		 je	 SHORT $LN2@MLS_PowerS
$LN5@MLS_PowerS:

; 4405 : 							{
; 4406 : 								bAttack = 1;
; 4407 : 							}
; 4408 : 						}
; 4409 : 						else
; 4410 : 						{
; 4411 : 							bAttack = 1;
; 4412 : 						}
; 4413 : 
; 4414 : 						if(bAttack != 0)
; 4415 : 						{
; 4416 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,1,0,0,0,0);

  00195	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00198	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019d	6a 00		 push	 0
  0019f	6a 00		 push	 0
  001a1	6a 00		 push	 0
  001a3	6a 00		 push	 0
  001a5	6a 01		 push	 1
  001a7	6a 01		 push	 1
  001a9	52		 push	 edx
  001aa	03 f0		 add	 esi, eax
  001ac	56		 push	 esi
  001ad	57		 push	 edi
  001ae	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  001b3	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MLS_PowerS:

; 4417 : 						}
; 4418 : 
; 4419 : 						HitCount++;

  001b6	ff 45 18	 inc	 DWORD PTR _HitCount$[ebp]
$LN33@MLS_PowerS:
  001b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN34@MLS_PowerS:

; 4420 : 					}
; 4421 : 				}
; 4422 : 			}
; 4423 : 		}
; 4424 : 
; 4425 : 		count++;

  001bf	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 4426 : 		if(count > MAX_VIEWPORT -1)

  001c2	ff 4d fc	 dec	 DWORD PTR tv64[ebp]
  001c5	0f 85 d5 fe ff
	ff		 jne	 $LL22@MLS_PowerS
  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx

; 4427 : 		{
; 4428 : 			break;
; 4429 : 		}
; 4430 : 	}
; 4431 : }

  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c2 18 00	 ret	 24			; 00000018H
?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
_TEXT	ENDS
PUBLIC	?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireScream
EXTRN	?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A:BYTE ; g_SkillAdditionInfo
; Function compile flags: /Ogtp
;	COMDAT ?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_FireScream, COMDAT
; _this$ = ecx

; 4434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4435 : 	if(g_SkillAdditionInfo.GetFireScreamSkill() == false)

  00003	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+28, 0
  0000a	75 06		 jne	 SHORT $LN4@MLS_FireSc

; 4436 : 	{
; 4437 : 		return false;

  0000c	33 c0		 xor	 eax, eax

; 4460 : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@MLS_FireSc:

; 4438 : 	}
; 4439 : 
; 4440 : 	LPOBJ lpObj = &gObj[aIndex];

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0001b	57		 push	 edi
  0001c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 4441 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00022	8b 7d 0c	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  00025	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002b	03 f0		 add	 esi, eax
  0002d	03 f8		 add	 edi, eax

; 4442 : 
; 4443 : 	if(gObjIsConnected(lpObj->m_Index) == false && gObjIsConnected(lpTargetObj->m_Index) == false)

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	75 0f		 jne	 SHORT $LN3@MLS_FireSc
  0003e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00046	83 c4 04	 add	 esp, 4
  00049	85 c0		 test	 eax, eax

; 4444 : 	{
; 4445 : 		return false;

  0004b	74 11		 je	 SHORT $LN11@MLS_FireSc
$LN3@MLS_FireSc:

; 4446 : 	}
; 4447 : 
; 4448 : 	if(lpObj->Type != OBJ_USER)

  0004d	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 4449 : 	{
; 4450 : 		return false;

  00052	75 0a		 jne	 SHORT $LN11@MLS_FireSc

; 4451 : 	}
; 4452 : 
; 4453 : 	if(lpObj->Class != CLASS_DARKLORD)

  00054	66 83 be b8 00
	00 00 04	 cmp	 WORD PTR [esi+184], 4
  0005c	74 08		 je	 SHORT $LN1@MLS_FireSc
$LN11@MLS_FireSc:
  0005e	5f		 pop	 edi

; 4454 : 	{
; 4455 : 		return false;

  0005f	33 c0		 xor	 eax, eax
  00061	5e		 pop	 esi

; 4460 : }

  00062	5d		 pop	 ebp
  00063	c2 0c 00	 ret	 12			; 0000000cH
$LN1@MLS_FireSc:

; 4456 : 	}
; 4457 : 
; 4458 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,0,0,0,0,0);

  00066	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	6a 00		 push	 0
  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	6a 00		 push	 0
  00075	52		 push	 edx
  00076	57		 push	 edi
  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0007d	83 c4 24	 add	 esp, 36			; 00000024H
  00080	5f		 pop	 edi

; 4459 : 	return true;

  00081	b8 01 00 00 00	 mov	 eax, 1
  00086	5e		 pop	 esi

; 4460 : }

  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_FireScream
_TEXT	ENDS
PUBLIC	?WeaponMagicDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ; CMasterLevelSkillTreeSystem::WeaponMagicDel
EXTRN	?GCMagicListOneDelSend@@YAXHDGEEE@Z:PROC	; GCMagicListOneDelSend
EXTRN	?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z:PROC	; CMagicDamage::IsItemAttachedSkill
; Function compile flags: /Ogtp
;	COMDAT ?WeaponMagicDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aSkill$ = 12						; size = 1
_Level$ = 16						; size = 1
?WeaponMagicDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z PROC ; CMasterLevelSkillTreeSystem::WeaponMagicDel, COMDAT
; _this$ = ecx

; 4464 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 4465 : 	int iBaseMLS = 0;
; 4466 : 
; 4467 : 	for( int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000a	33 db		 xor	 ebx, ebx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	33 f6		 xor	 esi, esi
$LL7@WeaponMagi:

; 4468 : 	{
; 4469 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE && 
; 4470 : 			this->CheckRequireStatus(lpObj->Magic[iCount].m_Skill) )

  00011	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00017	03 ce		 add	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001e	83 f8 01	 cmp	 eax, 1
  00021	75 54		 jne	 SHORT $LN6@WeaponMagi
  00023	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00029	8b 4c 30 08	 mov	 ecx, DWORD PTR [eax+esi+8]
  0002d	51		 push	 ecx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00036	85 c0		 test	 eax, eax
  00038	74 3d		 je	 SHORT $LN6@WeaponMagi

; 4471 : 		{
; 4472 : 			iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[iCount].m_Skill);

  0003a	8b 97 c8 04 00
	00		 mov	 edx, DWORD PTR [edi+1224]
  00040	8b 44 32 08	 mov	 eax, DWORD PTR [edx+esi+8]
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 4473 : 
; 4474 : 			if( iBaseMLS > 0 )

  0004d	85 c0		 test	 eax, eax
  0004f	7e 26		 jle	 SHORT $LN6@WeaponMagi

; 4475 : 			{
; 4476 : 				WORD BrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(iBaseMLS);

  00051	50		 push	 eax
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00057	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill

; 4477 : 
; 4478 : 				if( aSkill ==  BrandSkill )

  0005c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aSkill$[ebp]
  00060	0f b7 c0	 movzx	 eax, ax
  00063	66 3b c8	 cmp	 cx, ax
  00066	75 0f		 jne	 SHORT $LN6@WeaponMagi

; 4479 : 				{
; 4480 : 					BYTE byIsItemSkill = MagicDamageC.IsItemAttachedSkill(BrandSkill);

  00068	50		 push	 eax
  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0006e	e8 00 00 00 00	 call	 ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ; CMagicDamage::IsItemAttachedSkill

; 4481 : 
; 4482 : 					if( byIsItemSkill )

  00073	84 c0		 test	 al, al
  00075	75 17		 jne	 SHORT $LN11@WeaponMagi
$LN6@WeaponMagi:

; 4465 : 	int iBaseMLS = 0;
; 4466 : 
; 4467 : 	for( int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00077	83 c6 18	 add	 esi, 24			; 00000018H
  0007a	43		 inc	 ebx
  0007b	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00081	7c 8e		 jl	 SHORT $LL7@WeaponMagi

; 4486 : 					}
; 4487 : 				}
; 4488 : 			}
; 4489 : 		}
; 4490 : 	}
; 4491 : 	return 0;

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	33 c0		 xor	 eax, eax
  00087	5b		 pop	 ebx

; 4492 : }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
$LN11@WeaponMagi:

; 4483 : 					{
; 4484 : 						GCMagicListOneDelSend(lpObj->m_Index,iCount,lpObj->Magic[iCount].m_Skill,lpObj->Magic[iCount].m_Level,0,0);

  0008e	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00094	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  00097	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  0009c	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0009f	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000a3	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	52		 push	 edx
  000aa	50		 push	 eax
  000ab	53		 push	 ebx
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 ?GCMagicListOneDelSend@@YAXHDGEEE@Z ; GCMagicListOneDelSend
  000b2	83 c4 18	 add	 esp, 24			; 00000018H
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi

; 4485 : 						return true;

  000b7	b8 01 00 00 00	 mov	 eax, 1
  000bc	5b		 pop	 ebx

; 4492 : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 0c 00	 ret	 12			; 0000000cH
?WeaponMagicDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ENDP ; CMasterLevelSkillTreeSystem::WeaponMagicDel
_TEXT	ENDS
PUBLIC	?WeaponMagicAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ; CMasterLevelSkillTreeSystem::WeaponMagicAdd
; Function compile flags: /Ogtp
;	COMDAT ?WeaponMagicAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iCount$217980 = -4					; size = 4
_lpObj$ = 8						; size = 4
_aSkill$ = 12						; size = 1
_Level$ = 16						; size = 1
?WeaponMagicAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z PROC ; CMasterLevelSkillTreeSystem::WeaponMagicAdd, COMDAT
; _this$ = ecx

; 4496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 4497 : 	int iBaseMLS = 0;
; 4498 : 
; 4499 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	33 f6		 xor	 esi, esi
  00010	89 7d f8	 mov	 DWORD PTR _this$[ebp], edi
  00013	89 75 fc	 mov	 DWORD PTR _iCount$217980[ebp], esi
  00016	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL5@WeaponMagi@2:

; 4500 : 	{
; 4501 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE && 
; 4502 : 			this->CheckRequireStatus(lpObj->Magic[iCount].m_Skill) )

  00020	8b 8b c8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1224]
  00026	03 ce		 add	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0002d	83 f8 01	 cmp	 eax, 1
  00030	75 52		 jne	 SHORT $LN4@WeaponMagi@2
  00032	8b 83 c8 04 00
	00		 mov	 eax, DWORD PTR [ebx+1224]
  00038	8b 4c 30 08	 mov	 ecx, DWORD PTR [eax+esi+8]
  0003c	51		 push	 ecx
  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00044	85 c0		 test	 eax, eax
  00046	74 3c		 je	 SHORT $LN4@WeaponMagi@2

; 4503 : 		{
; 4504 : 			iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[iCount].m_Skill);

  00048	8b 93 c8 04 00
	00		 mov	 edx, DWORD PTR [ebx+1224]
  0004e	8b 44 32 08	 mov	 eax, DWORD PTR [edx+esi+8]
  00052	50		 push	 eax
  00053	8b cf		 mov	 ecx, edi
  00055	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  0005a	8b f8		 mov	 edi, eax

; 4505 : 
; 4506 : 			if( iBaseMLS > 0 
; 4507 : 				&& aSkill == MagicDamageC.GetSkillReqBrandOfSkill(iBaseMLS) 
; 4508 : 				&& !this->CheckPrimarySkill(lpObj, iBaseMLS) )	//1.01.03

  0005c	85 ff		 test	 edi, edi
  0005e	7e 21		 jle	 SHORT $LN11@WeaponMagi@2
  00060	57		 push	 edi
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00066	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  0006b	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aSkill$[ebp]
  0006f	3b c8		 cmp	 ecx, eax
  00071	75 0e		 jne	 SHORT $LN11@WeaponMagi@2
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	57		 push	 edi
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 ?CheckPrimarySkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckPrimarySkill
  0007d	85 c0		 test	 eax, eax
  0007f	74 1c		 je	 SHORT $LN9@WeaponMagi@2
$LN11@WeaponMagi@2:
  00081	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
$LN4@WeaponMagi@2:

; 4497 : 	int iBaseMLS = 0;
; 4498 : 
; 4499 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00084	ff 45 fc	 inc	 DWORD PTR _iCount$217980[ebp]
  00087	83 c6 18	 add	 esi, 24			; 00000018H
  0008a	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00090	7c 8e		 jl	 SHORT $LL5@WeaponMagi@2

; 4512 : 			}
; 4513 : 		}
; 4514 : 	}
; 4515 : 	return 0;

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	33 c0		 xor	 eax, eax
  00096	5b		 pop	 ebx

; 4516 : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN9@WeaponMagi@2:

; 4509 : 			{
; 4510 : 				GCMagicListOneSend(lpObj->m_Index,iCount,lpObj->Magic[iCount].m_Skill,lpObj->Magic[iCount].m_Level,0,0);

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _iCount$217980[ebp]
  000a0	8b 83 c8 04 00
	00		 mov	 eax, DWORD PTR [ebx+1224]
  000a6	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  000a9	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  000ac	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  000b0	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	52		 push	 edx
  000b9	50		 push	 eax
  000ba	51		 push	 ecx
  000bb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ?GCMagicListOneSend@@YAXHDGEGE@Z ; GCMagicListOneSend
  000c3	83 c4 18	 add	 esp, 24			; 00000018H
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi

; 4511 : 				return true;

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	5b		 pop	 ebx

; 4516 : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 0c 00	 ret	 12			; 0000000cH
?WeaponMagicAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ENDP ; CMasterLevelSkillTreeSystem::WeaponMagicAdd
_TEXT	ENDS
PUBLIC	?GetWeaponMagicSearch@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetWeaponMagicSearch
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?GetSkillType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillType
; Function compile flags: /Ogtp
;	COMDAT ?GetWeaponMagicSearch@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_nCount$ = 12						; size = 4
?GetWeaponMagicSearch@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetWeaponMagicSearch, COMDAT
; _this$ = ecx

; 4519 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4520 : 	int iBaseMLS = 0;
; 4521 : 
; 4522 : 	if( this->CheckRequireStatus(lpObj->Magic[nCount].m_Skill) )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000f	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00015	03 f6		 add	 esi, esi
  00017	03 f6		 add	 esi, esi
  00019	8b d9		 mov	 ebx, ecx
  0001b	03 f6		 add	 esi, esi
  0001d	8b 4c 06 08	 mov	 ecx, DWORD PTR [esi+eax+8]
  00021	51		 push	 ecx
  00022	8b cb		 mov	 ecx, ebx
  00024	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00029	85 c0		 test	 eax, eax
  0002b	0f 84 a8 00 00
	00		 je	 $LN9@GetWeaponM

; 4523 : 	{
; 4524 : 		iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[nCount].m_Skill);

  00031	8b 97 c8 04 00
	00		 mov	 edx, DWORD PTR [edi+1224]
  00037	8b 44 16 08	 mov	 eax, DWORD PTR [esi+edx+8]
  0003b	50		 push	 eax
  0003c	8b cb		 mov	 ecx, ebx
  0003e	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00043	8b d8		 mov	 ebx, eax

; 4525 : 
; 4526 : 		if( iBaseMLS > 0 && 
; 4527 : 			MagicDamageC.GetSkillType(iBaseMLS) == 4 )

  00045	85 db		 test	 ebx, ebx
  00047	0f 8e 8c 00 00
	00		 jle	 $LN9@GetWeaponM
  0004d	53		 push	 ebx
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00053	e8 00 00 00 00	 call	 ?GetSkillType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillType
  00058	83 f8 04	 cmp	 eax, 4
  0005b	75 7c		 jne	 SHORT $LN9@GetWeaponM

; 4528 : 		{
; 4529 : 			WORD BrandSkill = MagicDamageC.GetSkillReqBrandOfSkill(iBaseMLS);

  0005d	53		 push	 ebx
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00063	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill

; 4530 : 			BYTE byIsItemSkill = MagicDamageC.IsItemAttachedSkill(lpObj->Magic[nCount].m_Skill);

  00068	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  0006e	8b 54 0e 08	 mov	 edx, DWORD PTR [esi+ecx+8]
  00072	52		 push	 edx
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00078	0f b7 d8	 movzx	 ebx, ax
  0007b	e8 00 00 00 00	 call	 ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ; CMagicDamage::IsItemAttachedSkill

; 4531 : 
; 4532 : 			if( byIsItemSkill )

  00080	84 c0		 test	 al, al
  00082	74 55		 je	 SHORT $LN9@GetWeaponM

; 4533 : 			{
; 4534 : 				int bUseSkill = 0;
; 4535 : 
; 4536 : 				if( lpObj->pInventory[1].IsItem() == TRUE &&
; 4537 : 					lpObj->pInventory[1].m_Special[0] == BrandSkill )

  00084	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  0008a	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00090	33 f6		 xor	 esi, esi
  00092	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00097	83 f8 01	 cmp	 eax, 1
  0009a	75 14		 jne	 SHORT $LN3@GetWeaponM
  0009c	8b 87 24 0e 00
	00		 mov	 eax, DWORD PTR [edi+3620]
  000a2	66 39 98 06 01
	00 00		 cmp	 WORD PTR [eax+262], bx
  000a9	75 05		 jne	 SHORT $LN3@GetWeaponM

; 4538 : 					bUseSkill = TRUE;

  000ab	be 01 00 00 00	 mov	 esi, 1
$LN3@GetWeaponM:

; 4539 : 
; 4540 : 				if( lpObj->pInventory[0].IsItem() == TRUE &&
; 4541 : 					lpObj->pInventory[0].m_Special[0] == BrandSkill )

  000b0	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  000b6	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000bb	83 f8 01	 cmp	 eax, 1
  000be	75 0c		 jne	 SHORT $LN2@GetWeaponM
  000c0	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  000c6	66 39 59 32	 cmp	 WORD PTR [ecx+50], bx

; 4542 : 					bUseSkill = TRUE;
; 4543 : 
; 4544 : 				if( bUseSkill == 0 )

  000ca	74 0d		 je	 SHORT $LN9@GetWeaponM
$LN2@GetWeaponM:
  000cc	85 f6		 test	 esi, esi
  000ce	75 09		 jne	 SHORT $LN9@GetWeaponM

; 4545 : 					return false;

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	33 c0		 xor	 eax, eax
  000d4	5b		 pop	 ebx

; 4551 : }

  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
$LN9@GetWeaponM:
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi

; 4546 : 			}
; 4547 : 		}
; 4548 : 	}
; 4549 : 
; 4550 : return true;

  000db	b8 01 00 00 00	 mov	 eax, 1
  000e0	5b		 pop	 ebx

; 4551 : }

  000e1	5d		 pop	 ebp
  000e2	c2 08 00	 ret	 8
?GetWeaponMagicSearch@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetWeaponMagicSearch
_TEXT	ENDS
PUBLIC	?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
EXTRN	?gCheckSkillDistance@@YAHHHH@Z:PROC		; gCheckSkillDistance
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -12					; size = 4
tv467 = -8						; size = 4
_count$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSleep, COMDAT
; _this$ = ecx

; 4554 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 4555 : 	LPOBJ lpObj = &gObj[aIndex];
; 4556 : 	int bRet = FALSE;
; 4557 : 	int tObjNum;
; 4558 : 
; 4559 : 	int Angle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);
; 4560 : 	int count = 0;
; 4561 : 
; 4562 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0000c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00015	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001b	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00021	57		 push	 edi
  00022	6a 01		 push	 1
  00024	50		 push	 eax
  00025	52		 push	 edx
  00026	56		 push	 esi
  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0002e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 4563 : 
; 4564 : 	int DuelIndex = lpObj->m_iDuelUser;

  00033	8b 86 b8 0e 00
	00		 mov	 eax, DWORD PTR [esi+3768]
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003f	89 45 f4	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00042	8d 86 b0 08 00
	00		 lea	 eax, DWORD PTR [esi+2224]
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	89 45 f8	 mov	 DWORD PTR tv467[ebp], eax
  0004e	8b ff		 npad	 2
$LL19@MLS_SkillS@10:

; 4565 : 	int EnableAttack;
; 4566 : 
; 4567 : 	while( TRUE )
; 4568 : 	{
; 4569 : 		if(lpObj->VpPlayer2[count].state != 0)

  00050	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00054	0f 84 0c 01 00
	00		 je	 $LN42@MLS_SkillS@10

; 4570 : 		{
; 4571 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0005a	0f bf 78 fe	 movsx	 edi, WORD PTR [eax-2]

; 4572 : 
; 4573 : 			if( tObjNum >= 0 )

  0005e	85 ff		 test	 edi, edi
  00060	0f 88 00 01 00
	00		 js	 $LN42@MLS_SkillS@10

; 4574 : 			{
; 4575 : 				EnableAttack = 0;
; 4576 : 
; 4577 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00066	8a 18		 mov	 bl, BYTE PTR [eax]
  00068	80 fb 02	 cmp	 bl, 2
  0006b	75 16		 jne	 SHORT $LN15@MLS_SkillS@10
  0006d	8b cf		 mov	 ecx, edi
  0006f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00075	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 4578 : 				{
; 4579 : 					EnableAttack = 1;

  0007d	0f 8c bd 00 00
	00		 jl	 $LN40@MLS_SkillS@10
$LN15@MLS_SkillS@10:

; 4580 : 				}
; 4581 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00083	3b 7d 0c	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  00086	0f 84 b9 00 00
	00		 je	 $LN37@MLS_SkillS@10
  0008c	39 7d f4	 cmp	 DWORD PTR _DuelIndex$[ebp], edi
  0008f	0f 84 ab 00 00
	00		 je	 $LN40@MLS_SkillS@10

; 4582 : 				{
; 4583 : 					EnableAttack = 1;
; 4584 : 				}
; 4585 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||
; 4586 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||
; 4587 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN )

  00095	8a 86 49 01 00
	00		 mov	 al, BYTE PTR [esi+329]
  0009b	3c 35		 cmp	 al, 53			; 00000035H
  0009d	0f 84 9d 00 00
	00		 je	 $LN40@MLS_SkillS@10
  000a3	3c 12		 cmp	 al, 18			; 00000012H
  000a5	72 10		 jb	 SHORT $LN35@MLS_SkillS@10
  000a7	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000ac	3a c8		 cmp	 cl, al
  000ae	1b c9		 sbb	 ecx, ecx
  000b0	41		 inc	 ecx
  000b1	0f 85 89 00 00
	00		 jne	 $LN40@MLS_SkillS@10
$LN35@MLS_SkillS@10:
  000b7	3c 2d		 cmp	 al, 45			; 0000002dH
  000b9	72 0c		 jb	 SHORT $LN36@MLS_SkillS@10
  000bb	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  000c0	3a c8		 cmp	 cl, al
  000c2	1b c9		 sbb	 ecx, ecx
  000c4	41		 inc	 ecx
  000c5	75 79		 jne	 SHORT $LN40@MLS_SkillS@10
$LN36@MLS_SkillS@10:
  000c7	3c 3f		 cmp	 al, 63			; 0000003fH
  000c9	74 75		 je	 SHORT $LN40@MLS_SkillS@10

; 4588 : 				{
; 4589 : 					EnableAttack = 1;
; 4590 : 				}
; 4591 : 
; 4592 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000cb	80 fb 03	 cmp	 bl, 3
  000ce	74 2c		 je	 SHORT $LN7@MLS_SkillS@10
  000d0	8b c7		 mov	 eax, edi
  000d2	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000d8	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  000e0	75 1a		 jne	 SHORT $LN7@MLS_SkillS@10
  000e2	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000e9	75 11		 jne	 SHORT $LN7@MLS_SkillS@10

; 4593 : 				{
; 4594 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000eb	8a 8e 02 1c 00
	00		 mov	 cl, BYTE PTR [esi+7170]
  000f1	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  000f8	74 6c		 je	 SHORT $LN42@MLS_SkillS@10

; 4595 : 						EnableAttack = 1;
; 4596 : 				}
; 4597 : 
; 4598 : 				else

  000fa	eb 44		 jmp	 SHORT $LN40@MLS_SkillS@10
$LN7@MLS_SkillS@10:

; 4599 : 				{
; 4600 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000fc	8b cf		 mov	 ecx, edi
  000fe	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 4601 : 
; 4602 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00104	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  0010a	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  0010d	75 14		 jne	 SHORT $LN4@MLS_SkillS@10
  0010f	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  00116	85 c9		 test	 ecx, ecx
  00118	78 09		 js	 SHORT $LN4@MLS_SkillS@10

; 4603 : 					{
; 4604 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0011a	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00120	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN4@MLS_SkillS@10:

; 4605 : 					}
; 4606 : 
; 4607 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00123	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00129	03 c2		 add	 eax, edx
  0012b	50		 push	 eax
  0012c	56		 push	 esi
  0012d	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00132	83 c4 08	 add	 esp, 8
  00135	83 f8 01	 cmp	 eax, 1
  00138	75 26		 jne	 SHORT $LN39@MLS_SkillS@10
  0013a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN40@MLS_SkillS@10:

; 4608 : 					{
; 4609 : 						EnableAttack = 1;
; 4610 : 					}
; 4611 : 				}
; 4612 : 
; 4613 : 				if( EnableAttack != 0 &&
; 4614 : 					tObjNum == aTargetIndex && 
; 4615 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )

  00140	3b 7d 0c	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  00143	75 21		 jne	 SHORT $LN42@MLS_SkillS@10
$LN37@MLS_SkillS@10:
  00145	8b 7d 10	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00148	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0014b	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0014e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00151	51		 push	 ecx
  00152	52		 push	 edx
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  00159	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015c	85 c0		 test	 eax, eax
  0015e	75 2a		 jne	 SHORT $LN32@MLS_SkillS@10
$LN39@MLS_SkillS@10:
  00160	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN42@MLS_SkillS@10:

; 4619 : 					break;
; 4620 : 				}
; 4621 : 			}
; 4622 : 		}
; 4623 : 
; 4624 : 		count++;

  00166	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00169	8b 45 f8	 mov	 eax, DWORD PTR tv467[ebp]
  0016c	41		 inc	 ecx
  0016d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00170	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  00173	89 45 f8	 mov	 DWORD PTR tv467[ebp], eax

; 4625 : 
; 4626 : 		if( count > MAX_VIEWPORT -1)

  00176	83 f9 4a	 cmp	 ecx, 74			; 0000004aH
  00179	0f 8e d1 fe ff
	ff		 jle	 $LL19@MLS_SkillS@10

; 4627 : 		{
; 4628 : 			break;
; 4629 : 		}
; 4630 : 	}
; 4631 : 
; 4632 : return bRet;

  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	33 c0		 xor	 eax, eax
  00183	5b		 pop	 ebx

; 4633 : }

  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c2 0c 00	 ret	 12			; 0000000cH
$LN32@MLS_SkillS@10:

; 4616 : 				{
; 4617 : 					gObjAttack(lpObj,&gObj[aTargetIndex],lpMagic,1,0,0,0,0,0);

  0018a	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0018d	6a 00		 push	 0
  0018f	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00195	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019b	6a 00		 push	 0
  0019d	6a 00		 push	 0
  0019f	6a 00		 push	 0
  001a1	6a 00		 push	 0
  001a3	6a 01		 push	 1
  001a5	57		 push	 edi
  001a6	50		 push	 eax
  001a7	56		 push	 esi
  001a8	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  001ad	83 c4 24	 add	 esp, 36			; 00000024H
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi

; 4618 : 					bRet = TRUE;

  001b2	b8 01 00 00 00	 mov	 eax, 1
  001b7	5b		 pop	 ebx

; 4633 : }

  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_aTargetIndex$GSCopy$
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -308					; size = 4
tv708 = -304						; size = 4
_count$ = -300						; size = 4
_aIndex$GSCopy$ = -296					; size = 4
_lpMagic$GSCopy$ = -292					; size = 4
_aTargetIndex$GSCopy$ = -288				; size = 4
_pMsg$ = -284						; size = 10
_Target$ = -272						; size = 12
_cBUFF$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning, COMDAT
; _this$ = ecx

; 4650 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4651 : 	LPOBJ lpObj = &gObj[aIndex];

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0001b	53		 push	 ebx
  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0001f	56		 push	 esi
  00020	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00023	57		 push	 edi

; 4652 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 4653 : 
; 4654 : 	int bSuccess = TRUE;
; 4655 : 	int tObjNum;
; 4656 : 	int count = 0;

  00024	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  0002a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00030	8b fb		 mov	 edi, ebx
  00032	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00038	03 f0		 add	 esi, eax
  0003a	03 f8		 add	 edi, eax

; 4657 : 
; 4658 : 	int Target[3];
; 4659 : 
; 4660 : 	Target[0] = -1;

  0003c	83 c8 ff	 or	 eax, -1
  0003f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp], eax

; 4661 : 	Target[1] = -1;

  00045	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+4], eax

; 4662 : 	Target[2] = -1;

  0004b	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], eax

; 4663 : 
; 4664 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00051	0f b7 41 08	 movzx	 eax, WORD PTR [ecx+8]
  00055	6a 01		 push	 1
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	56		 push	 esi
  0005a	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _aTargetIndex$GSCopy$[ebp], ebx

; 4786 : 	{
; 4787 : 		gObjAddAttackProcMsgSendDelay(lpObj,50,Target[i],200 + 200*i,lpMagic->m_Skill,i+1);

  00060	89 8d dc fe ff
	ff		 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], ecx
  00066	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$[ebp], 0
  00070	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00075	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  0007b	8b 8e b8 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3768]
  00081	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00084	50		 push	 eax
  00085	89 8d cc fe ff
	ff		 mov	 DWORD PTR _DuelIndex$[ebp], ecx
  0008b	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
  00091	53		 push	 ebx
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  00098	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009b	85 c0		 test	 eax, eax
  0009d	75 13		 jne	 SHORT $LN28@MLS_SkillC
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 4788 : 	}
; 4789 : return bSuccess;
; 4790 : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
$LN28@MLS_SkillC:

; 4665 : 
; 4666 : 	int DuelIndex = lpObj->m_iDuelUser;
; 4667 : 	int EnableAttack;
; 4668 : 
; 4669 : 	if( gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) == FALSE )
; 4670 : 	{
; 4671 : 		return FALSE;
; 4672 : 	}
; 4673 : 
; 4674 : 	Target[0] = aTargetIndex;

  000b2	8d 86 ae 08 00
	00		 lea	 eax, DWORD PTR [esi+2222]
  000b8	89 9d f0 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp], ebx
  000be	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv708[ebp], eax
$LL27@MLS_SkillC:

; 4675 : 
; 4676 : 	while( TRUE )
; 4677 : 	{
; 4678 : 		if(lpObj->VpPlayer2[count].state != 0)

  000c4	80 78 fe 00	 cmp	 BYTE PTR [eax-2], 0
  000c8	0f 84 41 01 00
	00		 je	 $LN45@MLS_SkillC

; 4679 : 		{
; 4680 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000ce	0f bf 18	 movsx	 ebx, WORD PTR [eax]

; 4681 : 
; 4682 : 			if( tObjNum >= 0 )

  000d1	85 db		 test	 ebx, ebx
  000d3	0f 88 36 01 00
	00		 js	 $LN45@MLS_SkillC

; 4683 : 			{
; 4684 : 				EnableAttack = 0;
; 4685 : 
; 4686 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000d9	80 78 02 02	 cmp	 BYTE PTR [eax+2], 2
  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e3	75 12		 jne	 SHORT $LN23@MLS_SkillC
  000e5	8b c3		 mov	 eax, ebx
  000e7	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000ed	83 bc 10 50 04
	00 00 00	 cmp	 DWORD PTR [eax+edx+1104], 0

; 4687 : 				{
; 4688 : 					EnableAttack = 1;

  000f5	7c 52		 jl	 SHORT $LN20@MLS_SkillC
$LN23@MLS_SkillC:

; 4689 : 				}
; 4690 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000f7	3b 9d e0 fe ff
	ff		 cmp	 ebx, DWORD PTR _aTargetIndex$GSCopy$[ebp]
  000fd	74 4a		 je	 SHORT $LN20@MLS_SkillC
  000ff	39 9d cc fe ff
	ff		 cmp	 DWORD PTR _DuelIndex$[ebp], ebx
  00105	74 42		 je	 SHORT $LN20@MLS_SkillC

; 4691 : 				{
; 4692 : 					EnableAttack = 1;
; 4693 : 				}
; 4694 : 				else
; 4695 : 				{
; 4696 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00107	8b cb		 mov	 ecx, ebx
  00109	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 4697 : 
; 4698 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0010f	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  00115	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00118	75 14		 jne	 SHORT $LN18@MLS_SkillC
  0011a	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  00121	85 c9		 test	 ecx, ecx
  00123	78 09		 js	 SHORT $LN18@MLS_SkillC

; 4699 : 					{
; 4700 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00125	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0012b	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN18@MLS_SkillC:

; 4701 : 					}
; 4702 : 
; 4703 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0012e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00134	03 c2		 add	 eax, edx
  00136	50		 push	 eax
  00137	56		 push	 esi
  00138	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0013d	83 c4 08	 add	 esp, 8
  00140	83 f8 01	 cmp	 eax, 1
  00143	0f 85 c6 00 00
	00		 jne	 $LN45@MLS_SkillC
$LN20@MLS_SkillC:

; 4704 : 					{
; 4705 : 						EnableAttack = 1;
; 4706 : 					}
; 4707 : 				}
; 4708 : 
; 4709 : 				if( EnableAttack != 0 )
; 4710 : 				{
; 4711 : 					if( gObj[tObjNum].X >= (lpTargetObj->X -1) &&
; 4712 : 						gObj[tObjNum].X <= (lpTargetObj->X +1) &&
; 4713 : 						gObj[tObjNum].Y >= (lpTargetObj->Y -1) &&
; 4714 : 						gObj[tObjNum].Y <= (lpTargetObj->Y +1) &&
; 4715 : 						gObj[tObjNum].Type == OBJ_MONSTER )

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014e	8b d3		 mov	 edx, ebx
  00150	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00156	0f bf 8c 10 44
	01 00 00	 movsx	 ecx, WORD PTR [eax+edx+324]
  0015e	03 c2		 add	 eax, edx
  00160	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  00167	4a		 dec	 edx
  00168	3b ca		 cmp	 ecx, edx
  0016a	7c 47		 jl	 SHORT $LN15@MLS_SkillC
  0016c	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  00173	42		 inc	 edx
  00174	3b ca		 cmp	 ecx, edx
  00176	7f 3b		 jg	 SHORT $LN15@MLS_SkillC
  00178	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  0017f	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00186	4a		 dec	 edx
  00187	3b ca		 cmp	 ecx, edx
  00189	7c 28		 jl	 SHORT $LN15@MLS_SkillC
  0018b	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  00192	42		 inc	 edx
  00193	3b ca		 cmp	 ecx, edx
  00195	7f 1c		 jg	 SHORT $LN15@MLS_SkillC
  00197	66 83 78 68 02	 cmp	 WORD PTR [eax+104], 2
  0019c	75 15		 jne	 SHORT $LN15@MLS_SkillC

; 4716 : 					{
; 4717 : 						Target[1] = tObjNum;
; 4718 : 
; 4719 : 						if(Target[2] != -1)

  0019e	83 bd f8 fe ff
	ff ff		 cmp	 DWORD PTR _Target$[ebp+8], -1
  001a5	89 9d f4 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+4], ebx
  001ab	0f 85 98 00 00
	00		 jne	 $LN51@MLS_SkillC

; 4720 : 							break;
; 4721 : 					}
; 4722 : 					else if( gObj[tObjNum].X >= (lpTargetObj->X -2) &&

  001b1	eb 5c		 jmp	 SHORT $LN45@MLS_SkillC
$LN15@MLS_SkillC:

; 4723 : 						gObj[tObjNum].X <= (lpTargetObj->X +2) &&
; 4724 : 						gObj[tObjNum].Y >= (lpTargetObj->Y -2) &&
; 4725 : 						gObj[tObjNum].Y <= (lpTargetObj->Y +2) &&
; 4726 : 						gObj[tObjNum].Type == OBJ_MONSTER )

  001b3	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  001ba	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  001c1	83 c2 fe	 add	 edx, -2			; fffffffeH
  001c4	3b ca		 cmp	 ecx, edx
  001c6	7c 47		 jl	 SHORT $LN45@MLS_SkillC
  001c8	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  001cf	83 c2 02	 add	 edx, 2
  001d2	3b ca		 cmp	 ecx, edx
  001d4	7f 39		 jg	 SHORT $LN45@MLS_SkillC
  001d6	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  001dd	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  001e4	83 c2 fe	 add	 edx, -2			; fffffffeH
  001e7	3b ca		 cmp	 ecx, edx
  001e9	7c 24		 jl	 SHORT $LN45@MLS_SkillC
  001eb	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  001f2	83 c2 02	 add	 edx, 2
  001f5	3b ca		 cmp	 ecx, edx
  001f7	7f 16		 jg	 SHORT $LN45@MLS_SkillC
  001f9	66 83 78 68 02	 cmp	 WORD PTR [eax+104], 2
  001fe	75 0f		 jne	 SHORT $LN45@MLS_SkillC

; 4727 : 					{
; 4728 : 						Target[2] = tObjNum;
; 4729 : 	
; 4730 : 						if(Target[1] != -1)

  00200	83 bd f4 fe ff
	ff ff		 cmp	 DWORD PTR _Target$[ebp+4], -1
  00207	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], ebx
  0020d	75 25		 jne	 SHORT $LN50@MLS_SkillC
$LN45@MLS_SkillC:

; 4731 : 							break;
; 4732 : 					}
; 4733 : 				}
; 4734 : 			}
; 4735 : 		}
; 4736 : 
; 4737 : 		count++;

  0020f	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _count$[ebp]
  00215	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv708[ebp]
  0021b	41		 inc	 ecx
  0021c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0021f	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _count$[ebp], ecx
  00225	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv708[ebp], eax

; 4738 : 
; 4739 : 		if( count > MAX_VIEWPORT -1)

  0022b	83 f9 4a	 cmp	 ecx, 74			; 0000004aH
  0022e	0f 8e 90 fe ff
	ff		 jle	 $LL27@MLS_SkillC
$LN50@MLS_SkillC:

; 4740 : 		{
; 4741 : 			break;
; 4742 : 		}
; 4743 : 	}
; 4744 : 
; 4745 : 	if( Target[2] == -1 )

  00234	83 bd f8 fe ff
	ff ff		 cmp	 DWORD PTR _Target$[ebp+8], -1
  0023b	75 0c		 jne	 SHORT $LN51@MLS_SkillC

; 4746 : 	{
; 4747 : 		Target[2] = Target[1];

  0023d	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _Target$[ebp+4]
  00243	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], eax
$LN51@MLS_SkillC:

; 4748 : 	}
; 4749 : 
; 4750 : 	if( Target[1] == -1 )

  00249	83 bd f4 fe ff
	ff ff		 cmp	 DWORD PTR _Target$[ebp+4], -1

; 4751 : 	{
; 4752 : 		Target[1] = Target[0];

  00250	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _aTargetIndex$GSCopy$[ebp]
  00256	75 0c		 jne	 SHORT $LN8@MLS_SkillC
  00258	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+4], ecx

; 4753 : 		Target[2] = Target[1];

  0025e	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], ecx
$LN8@MLS_SkillC:

; 4754 : 	}
; 4755 : 
; 4756 : 	int lOfs = 0;
; 4757 : 	BYTE cBUFF[256];
; 4758 : 	PMSG_SKILL_TARGET_COUNT pMsg;
; 4759 : 
; 4760 : 	pMsg.MagicNumberH = SET_NUMBERH(lpMagic->m_Skill);

  00264	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  0026a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 4761 : 	pMsg.MagicNumberL = SET_NUMBERL(lpMagic->m_Skill);

  0026d	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  00270	c1 ea 08	 shr	 edx, 8
  00273	88 95 e8 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+4], dl

; 4762 : 	pMsg.Index = aIndex;

  00279	0f b7 95 d8 fe
	ff ff		 movzx	 edx, WORD PTR _aIndex$GSCopy$[ebp]

; 4763 : 	pMsg.Count = 3;
; 4764 : 
; 4765 : 	lOfs += sizeof(pMsg);
; 4766 : 
; 4767 : 	int i;
; 4768 : 	for(i = 0; i < 3; i++)
; 4769 : 	{
; 4770 : 		WORD wIndex = Target[i];
; 4771 : 		memcpy(&cBUFF[lOfs],&wIndex,2);
; 4772 : 		lOfs+= 2;
; 4773 : 	}
; 4774 : 
; 4775 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,10,lOfs);

  00280	6a 10		 push	 16			; 00000010H
  00282	6a 0a		 push	 10			; 0000000aH
  00284	66 89 95 ea fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+6], dx
  0028b	88 85 e9 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], al
  00291	66 8b 85 f4 fe
	ff ff		 mov	 ax, WORD PTR _Target$[ebp+4]
  00298	66 89 8d 06 ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+10], cx
  0029f	66 8b 8d f8 fe
	ff ff		 mov	 cx, WORD PTR _Target$[ebp+8]
  002a6	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp]
  002ac	68 bf 00 00 00	 push	 191			; 000000bfH
  002b1	52		 push	 edx
  002b2	c6 85 ec fe ff
	ff 03		 mov	 BYTE PTR _pMsg$[ebp+8], 3
  002b9	66 89 85 08 ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+12], ax
  002c0	66 89 8d 0a ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+14], cx
  002c7	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 4776 : 	memcpy(&cBUFF[0],&pMsg,sizeof(pMsg));

  002cc	0f b7 95 ec fe
	ff ff		 movzx	 edx, WORD PTR _pMsg$[ebp+8]
  002d3	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pMsg$[ebp]
  002d9	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _pMsg$[ebp+4]
  002df	83 c4 10	 add	 esp, 16			; 00000010H
  002e2	89 85 fc fe ff
	ff		 mov	 DWORD PTR _cBUFF$[ebp], eax
  002e8	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _cBUFF$[ebp+4], ecx
  002ee	66 89 95 04 ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+8], dx

; 4777 : 
; 4778 : 	if( lpObj->Type == OBJ_USER )

  002f5	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  002fa	75 1a		 jne	 SHORT $LN4@MLS_SkillC

; 4779 : 	{
; 4780 : 		DataSend(lpObj->m_Index,(LPBYTE)&cBUFF[0],pMsg.h.size);

  002fc	0f b6 85 e5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00303	8b 16		 mov	 edx, DWORD PTR [esi]
  00305	50		 push	 eax
  00306	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _cBUFF$[ebp]
  0030c	51		 push	 ecx
  0030d	52		 push	 edx
  0030e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00313	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@MLS_SkillC:

; 4781 : 	}
; 4782 : 
; 4783 : 	MsgSendV2(lpObj,(LPBYTE)&cBUFF[0],pMsg.h.size);

  00316	0f b6 85 e5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0031d	50		 push	 eax
  0031e	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _cBUFF$[ebp]
  00324	51		 push	 ecx
  00325	56		 push	 esi
  00326	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4784 : 
; 4785 : 	for(i = 0; i < 3; i++)

  0032e	33 c0		 xor	 eax, eax
  00330	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H
  00335	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL3@MLS_SkillC:

; 4786 : 	{
; 4787 : 		gObjAddAttackProcMsgSendDelay(lpObj,50,Target[i],200 + 200*i,lpMagic->m_Skill,i+1);

  00340	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00346	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00349	8b 94 85 f0 fe
	ff ff		 mov	 edx, DWORD PTR _Target$[ebp+eax*4]
  00350	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  00353	53		 push	 ebx
  00354	51		 push	 ecx
  00355	57		 push	 edi
  00356	52		 push	 edx
  00357	6a 32		 push	 50			; 00000032H
  00359	56		 push	 esi
  0035a	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0035f	81 c7 c8 00 00
	00		 add	 edi, 200		; 000000c8H
  00365	83 c4 18	 add	 esp, 24			; 00000018H
  00368	8b c3		 mov	 eax, ebx
  0036a	81 ff 20 03 00
	00		 cmp	 edi, 800		; 00000320H
  00370	7c ce		 jl	 SHORT $LL3@MLS_SkillC

; 4788 : 	}
; 4789 : return bSuccess;
; 4790 : }

  00372	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00375	5f		 pop	 edi
  00376	5e		 pop	 esi
  00377	33 cd		 xor	 ecx, ebp
  00379	b8 01 00 00 00	 mov	 eax, 1
  0037e	5b		 pop	 ebx
  0037f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00384	8b e5		 mov	 esp, ebp
  00386	5d		 pop	 ebp
  00387	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
_TEXT	ENDS
PUBLIC	?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -20					; size = 4
tv247 = -16						; size = 4
tv481 = -12						; size = 4
_nHitCount$ = -8					; size = 4
_tObjNum$ = -4						; size = 4
_bAttack$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock, COMDAT
; _this$ = ecx

; 4793 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 4794 : 	LPOBJ lpObj = &gObj[aIndex];
; 4795 : 	int bRet = 0;
; 4796 : 	int bAttack = 0;
; 4797 : 	int tObjNum;
; 4798 : 	int count = 0;
; 4799 : 	int HitCount = 0;
; 4800 : 	int iDistance = 7;
; 4801 : 	int nHitCount = 0;
; 4802 : 
; 4803 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00009	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00013	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00019	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001f	33 c0		 xor	 eax, eax
  00021	89 45 08	 mov	 DWORD PTR _bAttack$[ebp], eax
  00024	89 45 f8	 mov	 DWORD PTR _nHitCount$[ebp], eax
  00027	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0002a	6a 01		 push	 1
  0002c	50		 push	 eax
  0002d	52		 push	 edx
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 4804 : 
; 4805 : 	int EnableAttack;
; 4806 : 	int bPVP = TRUE;
; 4807 : 	int DuelIndex = lpObj->m_iDuelUser;

  00034	8b 87 b8 0e 00
	00		 mov	 eax, DWORD PTR [edi+3768]
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	89 45 ec	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00043	8d 87 b0 08 00
	00		 lea	 eax, DWORD PTR [edi+2224]
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	89 45 f4	 mov	 DWORD PTR tv481[ebp], eax
  0004f	c7 45 f0 4b 00
	00 00		 mov	 DWORD PTR tv247[ebp], 75 ; 0000004bH
$LL26@MLS_SkillL:

; 4808 : 
; 4809 : 	while ( true )
; 4810 : 	{
; 4811 : 		if(lpObj->VpPlayer2[count].state != 0)

  00056	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  0005a	0f 84 4e 01 00
	00		 je	 $LN48@MLS_SkillL

; 4812 : 		{
; 4813 : 			tObjNum = lpObj->VpPlayer2[count].number;

  00060	0f bf 50 fe	 movsx	 edx, WORD PTR [eax-2]
  00064	89 55 fc	 mov	 DWORD PTR _tObjNum$[ebp], edx

; 4814 : 
; 4815 : 			if(tObjNum >= 0 && gObj[tObjNum].Live )

  00067	85 d2		 test	 edx, edx
  00069	0f 88 3f 01 00
	00		 js	 $LN48@MLS_SkillL
  0006f	8b f2		 mov	 esi, edx
  00071	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00077	80 7c 0e 6a 00	 cmp	 BYTE PTR [esi+ecx+106], 0
  0007c	0f 84 2c 01 00
	00		 je	 $LN48@MLS_SkillL

; 4816 : 			{
; 4817 : 				EnableAttack = 0;
; 4818 : 
; 4819 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00082	8a 18		 mov	 bl, BYTE PTR [eax]
  00084	80 fb 02	 cmp	 bl, 2
  00087	75 0e		 jne	 SHORT $LN22@MLS_SkillL
  00089	83 bc 0e 50 04
	00 00 00	 cmp	 DWORD PTR [esi+ecx+1104], 0

; 4820 : 				{
; 4821 : 					EnableAttack = 1;

  00091	0f 8c a8 00 00
	00		 jl	 $LN45@MLS_SkillL
$LN22@MLS_SkillL:

; 4822 : 				}
; 4823 : 				else if( CC_MAP_RANGE( lpObj->MapNumber ) || IT_MAP_RANGE( lpObj->MapNumber ) )

  00097	8a 87 49 01 00
	00		 mov	 al, BYTE PTR [edi+329]
  0009d	3c 35		 cmp	 al, 53			; 00000035H
  0009f	0f 84 9a 00 00
	00		 je	 $LN45@MLS_SkillL
  000a5	3c 12		 cmp	 al, 18			; 00000012H
  000a7	72 13		 jb	 SHORT $LN41@MLS_SkillL
  000a9	ba 17 00 00 00	 mov	 edx, 23			; 00000017H
  000ae	3a d0		 cmp	 dl, al
  000b0	1b d2		 sbb	 edx, edx
  000b2	42		 inc	 edx
  000b3	0f 85 86 00 00
	00		 jne	 $LN45@MLS_SkillL
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _tObjNum$[ebp]
$LN41@MLS_SkillL:
  000bc	3c 2d		 cmp	 al, 45			; 0000002dH
  000be	72 0c		 jb	 SHORT $LN42@MLS_SkillL
  000c0	b2 32		 mov	 dl, 50			; 00000032H
  000c2	3a d0		 cmp	 dl, al
  000c4	1b c0		 sbb	 eax, eax
  000c6	40		 inc	 eax
  000c7	75 76		 jne	 SHORT $LN45@MLS_SkillL
  000c9	8b 55 fc	 mov	 edx, DWORD PTR _tObjNum$[ebp]
$LN42@MLS_SkillL:

; 4824 : 				{
; 4825 : 					EnableAttack = 1;
; 4826 : 				}
; 4827 : 				else if( (tObjNum == aTargetIndex && bPVP == TRUE ) || DuelIndex == tObjNum)

  000cc	3b 55 0c	 cmp	 edx, DWORD PTR _aTargetIndex$[ebp]
  000cf	74 6e		 je	 SHORT $LN45@MLS_SkillL
  000d1	39 55 ec	 cmp	 DWORD PTR _DuelIndex$[ebp], edx

; 4828 : 				{
; 4829 : 					EnableAttack = 1;

  000d4	74 69		 je	 SHORT $LN45@MLS_SkillL

; 4830 : 				}
; 4831 : 
; 4832 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000d6	80 fb 03	 cmp	 bl, 3
  000d9	74 28		 je	 SHORT $LN44@MLS_SkillL
  000db	80 bc 0e 49 01
	00 00 1e	 cmp	 BYTE PTR [esi+ecx+329], 30 ; 0000001eH
  000e3	75 1e		 jne	 SHORT $LN44@MLS_SkillL
  000e5	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000ec	75 15		 jne	 SHORT $LN44@MLS_SkillL

; 4833 : 				{
; 4834 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000ee	8a 87 02 1c 00
	00		 mov	 al, BYTE PTR [edi+7170]
  000f4	3a 84 0e 02 1c
	00 00		 cmp	 al, BYTE PTR [esi+ecx+7170]
  000fb	0f 84 ad 00 00
	00		 je	 $LN48@MLS_SkillL

; 4835 : 						EnableAttack = 1;
; 4836 : 				}
; 4837 : 
; 4838 : 				else

  00101	eb 3c		 jmp	 SHORT $LN45@MLS_SkillL
$LN44@MLS_SkillL:

; 4839 : 				{
; 4840 : 					int CallMonIndex = gObj[tObjNum].m_Index;
; 4841 : 
; 4842 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00103	66 83 7c 0e 68
	02		 cmp	 WORD PTR [esi+ecx+104], 2
  00109	8b 04 0e	 mov	 eax, DWORD PTR [esi+ecx]
  0010c	75 14		 jne	 SHORT $LN10@MLS_SkillL
  0010e	8b 94 0e 50 04
	00 00		 mov	 edx, DWORD PTR [esi+ecx+1104]
  00115	85 d2		 test	 edx, edx
  00117	78 09		 js	 SHORT $LN10@MLS_SkillL

; 4843 : 					{
; 4844 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00119	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  0011f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
$LN10@MLS_SkillL:

; 4845 : 					}
; 4846 : 
; 4847 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00122	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00128	03 c1		 add	 eax, ecx
  0012a	50		 push	 eax
  0012b	57		 push	 edi
  0012c	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00131	83 c4 08	 add	 esp, 8
  00134	83 f8 01	 cmp	 eax, 1
  00137	75 6f		 jne	 SHORT $LN47@MLS_SkillL
  00139	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN45@MLS_SkillL:

; 4848 : 					{
; 4849 : 						EnableAttack = 1;
; 4850 : 					}
; 4851 : 				}
; 4852 : 
; 4853 : 				if(EnableAttack != 0)
; 4854 : 				{
; 4855 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 7)

  0013f	03 f1		 add	 esi, ecx
  00141	56		 push	 esi
  00142	57		 push	 edi
  00143	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00148	83 c4 08	 add	 esp, 8
  0014b	83 f8 07	 cmp	 eax, 7
  0014e	7d 58		 jge	 SHORT $LN47@MLS_SkillL

; 4856 : 					{
; 4857 : 						nHitCount++;

  00150	8b 75 f8	 mov	 esi, DWORD PTR _nHitCount$[ebp]
  00153	bb 01 00 00 00	 mov	 ebx, 1
  00158	03 f3		 add	 esi, ebx
  0015a	89 75 f8	 mov	 DWORD PTR _nHitCount$[ebp], esi

; 4858 : 
; 4859 : 						if( nHitCount > 5)

  0015d	83 fe 05	 cmp	 esi, 5
  00160	7e 13		 jle	 SHORT $LN6@MLS_SkillL

; 4860 : 						{
; 4861 : 							if( rand()%2 )

  00162	e8 00 00 00 00	 call	 _rand
  00167	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0016c	79 05		 jns	 SHORT $LN51@MLS_SkillL
  0016e	48		 dec	 eax
  0016f	83 c8 fe	 or	 eax, -2			; fffffffeH
  00172	40		 inc	 eax
$LN51@MLS_SkillL:
  00173	74 03		 je	 SHORT $LN46@MLS_SkillL
$LN6@MLS_SkillL:

; 4862 : 							{
; 4863 : 								bAttack = TRUE;
; 4864 : 							}
; 4865 : 						}
; 4866 : 						else
; 4867 : 						{
; 4868 : 							bAttack = TRUE;

  00175	89 5d 08	 mov	 DWORD PTR _bAttack$[ebp], ebx
$LN46@MLS_SkillL:

; 4869 : 						}
; 4870 : 
; 4871 : 						if( nHitCount > 12)

  00178	83 fe 0c	 cmp	 esi, 12			; 0000000cH
  0017b	7e 09		 jle	 SHORT $LN3@MLS_SkillL

; 4872 : 						{
; 4873 : 							bAttack = FALSE;

  0017d	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 4874 : 						}
; 4875 : 
; 4876 : 						if(bAttack == TRUE)

  00184	eb 22		 jmp	 SHORT $LN47@MLS_SkillL
$LN3@MLS_SkillL:
  00186	39 5d 08	 cmp	 DWORD PTR _bAttack$[ebp], ebx
  00189	75 1d		 jne	 SHORT $LN47@MLS_SkillL

; 4877 : 						{
; 4878 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);

  0018b	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0018e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00191	8b 45 fc	 mov	 eax, DWORD PTR _tObjNum$[ebp]
  00194	6a 00		 push	 0
  00196	52		 push	 edx
  00197	68 fa 00 00 00	 push	 250			; 000000faH
  0019c	50		 push	 eax
  0019d	6a 32		 push	 50			; 00000032H
  0019f	57		 push	 edi
  001a0	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  001a5	83 c4 18	 add	 esp, 24			; 00000018H
$LN47@MLS_SkillL:
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN48@MLS_SkillL:

; 4879 : 						}
; 4880 : 					}
; 4881 : 				}
; 4882 : 			}
; 4883 : 		}
; 4884 : 
; 4885 : 		count++;

  001ae	8b 45 f4	 mov	 eax, DWORD PTR tv481[ebp]
  001b1	83 c0 0c	 add	 eax, 12			; 0000000cH

; 4886 : 		if(count > MAX_VIEWPORT -1)

  001b4	ff 4d f0	 dec	 DWORD PTR tv247[ebp]
  001b7	89 45 f4	 mov	 DWORD PTR tv481[ebp], eax
  001ba	0f 85 96 fe ff
	ff		 jne	 $LL26@MLS_SkillL

; 4887 : 		{
; 4888 : 			break;
; 4889 : 		}
; 4890 : 	}
; 4891 : return TRUE;

  001c0	5f		 pop	 edi
  001c1	5e		 pop	 esi
  001c2	b8 01 00 00 00	 mov	 eax, 1
  001c7	5b		 pop	 ebx

; 4892 : }

  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
_TEXT	ENDS
PUBLIC	?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -12					; size = 4
_bRet$ = -8						; size = 4
_count$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife, COMDAT
; _this$ = ecx

; 4895 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4896 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000b	3b ca		 cmp	 ecx, edx
  0000d	7c 0f		 jl	 SHORT $LN23@MLS_SkillD
  0000f	33 c0		 xor	 eax, eax
  00011	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00017	0f 9e c0	 setle	 al
  0001a	3b c2		 cmp	 eax, edx
  0001c	75 08		 jne	 SHORT $LN14@MLS_SkillD
$LN23@MLS_SkillD:

; 4897 : 		return false;

  0001e	33 c0		 xor	 eax, eax

; 4964 : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN14@MLS_SkillD:

; 4898 : 
; 4899 : 	LPOBJ lpObj = &gObj[aIndex];
; 4900 : 	int bRet = FALSE;
; 4901 : 	int tObjNum;
; 4902 : 
; 4903 : 	int Angle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);
; 4904 : 	int count = 0;
; 4905 : 
; 4906 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00026	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0002e	57		 push	 edi
  0002f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00035	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003b	6a 01		 push	 1
  0003d	51		 push	 ecx
  0003e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00042	51		 push	 ecx
  00043	56		 push	 esi
  00044	89 55 f8	 mov	 DWORD PTR _bRet$[ebp], edx
  00047	89 55 fc	 mov	 DWORD PTR _count$[ebp], edx
  0004a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 4907 : 
; 4908 : 	int DuelIndex = lpObj->m_iDuelUser;

  0004f	8b 96 b8 0e 00
	00		 mov	 edx, DWORD PTR [esi+3768]
  00055	89 55 f4	 mov	 DWORD PTR _DuelIndex$[ebp], edx
  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	8d 9e ae 08 00
	00		 lea	 ebx, DWORD PTR [esi+2222]
  00067	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL13@MLS_SkillD:

; 4909 : 	int EnableAttack;
; 4910 : 
; 4911 : 	while( TRUE )
; 4912 : 	{
; 4913 : 		if(lpObj->VpPlayer2[count].state != 0)

  00070	80 7b fe 00	 cmp	 BYTE PTR [ebx-2], 0
  00074	0f 84 97 00 00
	00		 je	 $LN28@MLS_SkillD

; 4914 : 		{
; 4915 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007a	0f bf 3b	 movsx	 edi, WORD PTR [ebx]

; 4916 : 
; 4917 : 			if( tObjNum >= 0 )

  0007d	85 ff		 test	 edi, edi
  0007f	0f 88 8c 00 00
	00		 js	 $LN28@MLS_SkillD

; 4918 : 			{
; 4919 : 				EnableAttack = 0;
; 4920 : 
; 4921 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00085	80 7b 02 02	 cmp	 BYTE PTR [ebx+2], 2
  00089	75 12		 jne	 SHORT $LN9@MLS_SkillD
  0008b	8b c7		 mov	 eax, edi
  0008d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00093	83 bc 10 50 04
	00 00 00	 cmp	 DWORD PTR [eax+edx+1104], 0

; 4922 : 				{
; 4923 : 					EnableAttack = 1;

  0009b	7c 4e		 jl	 SHORT $LN27@MLS_SkillD
$LN9@MLS_SkillD:

; 4924 : 				}
; 4925 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0009d	3b 7d 0c	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  000a0	74 4e		 je	 SHORT $LN25@MLS_SkillD
  000a2	39 7d f4	 cmp	 DWORD PTR _DuelIndex$[ebp], edi
  000a5	74 44		 je	 SHORT $LN27@MLS_SkillD

; 4926 : 				{
; 4927 : 					EnableAttack = 1;
; 4928 : 				}
; 4929 : 				else
; 4930 : 				{
; 4931 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000a7	8b cf		 mov	 ecx, edi
  000a9	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 4932 : 
; 4933 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000af	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  000b5	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000b8	75 14		 jne	 SHORT $LN4@MLS_SkillD
  000ba	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  000c1	85 c9		 test	 ecx, ecx
  000c3	78 09		 js	 SHORT $LN4@MLS_SkillD

; 4934 : 					{
; 4935 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000c5	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000cb	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN4@MLS_SkillD:

; 4936 : 					}
; 4937 : 
; 4938 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000ce	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000d4	03 c2		 add	 eax, edx
  000d6	50		 push	 eax
  000d7	56		 push	 esi
  000d8	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000dd	83 c4 08	 add	 esp, 8
  000e0	83 f8 01	 cmp	 eax, 1
  000e3	75 26		 jne	 SHORT $LN26@MLS_SkillD
  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN27@MLS_SkillD:

; 4939 : 					{
; 4940 : 						EnableAttack = 1;
; 4941 : 					}
; 4942 : 				}
; 4943 : 
; 4944 : 				if( EnableAttack != 0 &&
; 4945 : 					tObjNum == aTargetIndex && 
; 4946 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )

  000eb	3b 7d 0c	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  000ee	75 21		 jne	 SHORT $LN28@MLS_SkillD
$LN25@MLS_SkillD:
  000f0	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  000f3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f6	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  000f9	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  000fc	50		 push	 eax
  000fd	51		 push	 ecx
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	85 c0		 test	 eax, eax
  00109	75 25		 jne	 SHORT $LN21@MLS_SkillD
$LN26@MLS_SkillD:
  0010b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN28@MLS_SkillD:

; 4950 : 					break;
; 4951 : 				}
; 4952 : 			}
; 4953 : 		}
; 4954 : 
; 4955 : 		count++;

  00111	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00114	40		 inc	 eax
  00115	83 c3 0c	 add	 ebx, 12			; 0000000cH
  00118	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 4956 : 
; 4957 : 		if( count > MAX_VIEWPORT -1)

  0011b	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  0011e	0f 8e 4c ff ff
	ff		 jle	 $LL13@MLS_SkillD

; 4958 : 		{
; 4959 : 			break;
; 4960 : 		}
; 4961 : 	}
; 4962 : 
; 4963 : return bRet;

  00124	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx

; 4964 : }

  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 0c 00	 ret	 12			; 0000000cH
$LN21@MLS_SkillD:

; 4947 : 				{
; 4948 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  00130	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00133	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00136	6a 00		 push	 0
  00138	51		 push	 ecx
  00139	68 bc 02 00 00	 push	 700			; 000002bcH
  0013e	57		 push	 edi
  0013f	6a 32		 push	 50			; 00000032H
  00141	56		 push	 esi
  00142	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00147	83 c4 18	 add	 esp, 24			; 00000018H
  0014a	5f		 pop	 edi

; 4949 : 					bRet = TRUE;

  0014b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1

; 4958 : 		{
; 4959 : 			break;
; 4960 : 		}
; 4961 : 	}
; 4962 : 
; 4963 : return bRet;

  00152	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx

; 4964 : }

  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
_TEXT	ENDS
PUBLIC	??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  '
	DB	': %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code :'
	DB	' %d', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nReturn$ = -4						; size = 4
tv389 = 8						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint, COMDAT
; _this$ = ecx

; 4967 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 4968 : 
; 4969 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_MONK )

  00006	8b 55 08	 mov	 edx, DWORD PTR _iClass$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
  0000e	83 fa 06	 cmp	 edx, 6
  00011	0f 87 99 00 00
	00		 ja	 $LN13@GetSkillRe

; 4973 : 	}
; 4974 : 
; 4975 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0001a	81 f9 bb 02 00
	00		 cmp	 ecx, 699		; 000002bbH
  00020	77 76		 ja	 SHORT $LN11@GetSkillRe

; 4978 : 		return -1;
; 4979 : 	}
; 4980 : 
; 4981 : 	int nReturn = -1;

  00022	8b ca		 mov	 ecx, edx
  00024	69 c9 74 08 00
	00		 imul	 ecx, 2164		; 00000874H
  0002a	53		 push	 ebx
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _nReturn$[ebp], -1
  00034	33 ff		 xor	 edi, edi
  00036	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL24@GetSkillRe:

; 4984 : 	{
; 4985 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00040	8b da		 mov	 ebx, edx
  00042	c7 45 08 09 00
	00 00		 mov	 DWORD PTR tv389[ebp], 9
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL25@GetSkillRe:

; 4986 : 		{
; 4987 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00050	33 d2		 xor	 edx, edx
  00052	8b f3		 mov	 esi, ebx
$LL4@GetSkillRe:

; 4988 : 			{
; 4989 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00054	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00057	39 06		 cmp	 DWORD PTR [esi], eax
  00059	74 0b		 je	 SHORT $LN20@GetSkillRe

; 4986 : 		{
; 4987 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0005b	42		 inc	 edx
  0005c	83 c6 14	 add	 esi, 20			; 00000014H
  0005f	83 fa 04	 cmp	 edx, 4
  00062	7c f0		 jl	 SHORT $LL4@GetSkillRe

; 4988 : 			{
; 4989 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00064	eb 14		 jmp	 SHORT $LN6@GetSkillRe
$LN20@GetSkillRe:

; 4990 : 				{
; 4991 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint;

  00066	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  00069	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0006c	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  0006f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00072	0f b6 44 10 0c	 movzx	 eax, BYTE PTR [eax+edx+12]
  00077	89 45 fc	 mov	 DWORD PTR _nReturn$[ebp], eax
$LN6@GetSkillRe:

; 4984 : 	{
; 4985 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0007a	83 c3 50	 add	 ebx, 80			; 00000050H
  0007d	83 c7 04	 add	 edi, 4
  00080	ff 4d 08	 dec	 DWORD PTR tv389[ebp]
  00083	75 cb		 jne	 SHORT $LL25@GetSkillRe

; 4982 : 
; 4983 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00085	8b d3		 mov	 edx, ebx
  00087	83 ff 6c	 cmp	 edi, 108		; 0000006cH
  0008a	7c b4		 jl	 SHORT $LL24@GetSkillRe

; 4992 : 					break;
; 4993 : 				}
; 4994 : 			}
; 4995 : 		}
; 4996 : 	}
; 4997 : return nReturn;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _nReturn$[ebp]
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 4998 : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
$LN11@GetSkillRe:

; 4976 : 	{
; 4977 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  00098	51		 push	 ecx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a4	83 c4 08	 add	 esp, 8
  000a7	83 c8 ff	 or	 eax, -1

; 4998 : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
$LN13@GetSkillRe:

; 4970 : 	{
; 4971 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  : %d",iClass);

  000b0	52		 push	 edx
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000bc	83 c4 08	 add	 esp, 8

; 4972 : 		return -1;

  000bf	83 c8 ff	 or	 eax, -1

; 4998 : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
_TEXT	ENDS
PUBLIC	?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
; Function compile flags: /Ogtp
;	COMDAT ?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nReturn$ = -4						; size = 4
tv389 = 8						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill, COMDAT
; _this$ = ecx

; 5001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5002 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_MONK )

  00006	8b 55 08	 mov	 edx, DWORD PTR _iClass$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
  0000e	83 fa 06	 cmp	 edx, 6
  00011	0f 87 99 00 00
	00		 ja	 $LN13@GetMaxPoin

; 5006 : 	}
; 5007 : 
; 5008 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0001a	81 f9 bb 02 00
	00		 cmp	 ecx, 699		; 000002bbH
  00020	77 76		 ja	 SHORT $LN11@GetMaxPoin

; 5011 : 		return -1;
; 5012 : 	}
; 5013 : 
; 5014 : 	int nReturn = -1;

  00022	8b ca		 mov	 ecx, edx
  00024	69 c9 74 08 00
	00		 imul	 ecx, 2164		; 00000874H
  0002a	53		 push	 ebx
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _nReturn$[ebp], -1
  00034	33 ff		 xor	 edi, edi
  00036	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL24@GetMaxPoin:

; 5017 : 	{
; 5018 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00040	8b da		 mov	 ebx, edx
  00042	c7 45 08 09 00
	00 00		 mov	 DWORD PTR tv389[ebp], 9
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL25@GetMaxPoin:

; 5019 : 		{
; 5020 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00050	33 d2		 xor	 edx, edx
  00052	8b f3		 mov	 esi, ebx
$LL4@GetMaxPoin:

; 5021 : 			{
; 5022 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00054	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00057	39 06		 cmp	 DWORD PTR [esi], eax
  00059	74 0b		 je	 SHORT $LN20@GetMaxPoin

; 5019 : 		{
; 5020 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0005b	42		 inc	 edx
  0005c	83 c6 14	 add	 esi, 20			; 00000014H
  0005f	83 fa 04	 cmp	 edx, 4
  00062	7c f0		 jl	 SHORT $LL4@GetMaxPoin

; 5021 : 			{
; 5022 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00064	eb 14		 jmp	 SHORT $LN6@GetMaxPoin
$LN20@GetMaxPoin:

; 5023 : 				{
; 5024 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint;

  00066	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  00069	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0006c	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  0006f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00072	0f b6 44 10 0d	 movzx	 eax, BYTE PTR [eax+edx+13]
  00077	89 45 fc	 mov	 DWORD PTR _nReturn$[ebp], eax
$LN6@GetMaxPoin:

; 5017 : 	{
; 5018 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0007a	83 c3 50	 add	 ebx, 80			; 00000050H
  0007d	83 c7 04	 add	 edi, 4
  00080	ff 4d 08	 dec	 DWORD PTR tv389[ebp]
  00083	75 cb		 jne	 SHORT $LL25@GetMaxPoin

; 5015 : 
; 5016 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00085	8b d3		 mov	 edx, ebx
  00087	83 ff 6c	 cmp	 edi, 108		; 0000006cH
  0008a	7c b4		 jl	 SHORT $LL24@GetMaxPoin

; 5025 : 					break;
; 5026 : 				}
; 5027 : 			}
; 5028 : 		}
; 5029 : 	}
; 5030 : 	return nReturn;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _nReturn$[ebp]
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 5031 : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
$LN11@GetMaxPoin:

; 5009 : 	{
; 5010 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  00098	51		 push	 ecx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a4	83 c4 08	 add	 esp, 8
  000a7	83 c8 ff	 or	 eax, -1

; 5031 : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
$LN13@GetMaxPoin:

; 5003 : 	{
; 5004 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  : %d",iClass);

  000b0	52		 push	 edx
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000bc	83 c4 08	 add	 esp, 8

; 5005 : 		return -1;

  000bf	83 c8 ff	 or	 eax, -1

; 5031 : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
_TEXT	ENDS
PUBLIC	??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
;	COMDAT ??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillValue - Invalid Point : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillValue - Invalid Type : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
_iPoint$ = 12						; size = 4
?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue, COMDAT
; _this$ = ecx

; 5034 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5035 : 	if( iPoint < 1 || iPoint > MAX_SKILLTREE_LEVEL )

  00003	8b 55 0c	 mov	 edx, DWORD PTR _iPoint$[ebp]
  00006	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00009	83 f8 13	 cmp	 eax, 19			; 00000013H
  0000c	77 2d		 ja	 SHORT $LN3@GetMasterS

; 5039 : 	}
; 5040 : 
; 5041 : 	if( iType < 0 || iType > 38 )

  0000e	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00011	83 f8 26	 cmp	 eax, 38			; 00000026H
  00014	77 10		 ja	 SHORT $LN1@GetMasterS

; 5044 : 		return 0.0f;
; 5045 : 	}
; 5046 : 
; 5047 : 	return this->m_fValue[iType][iPoint];

  00016	6b c0 15	 imul	 eax, 21			; 00000015H
  00019	03 c2		 add	 eax, edx
  0001b	d9 84 81 30 3b
	00 00		 fld	 DWORD PTR [ecx+eax*4+15152]

; 5048 : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN1@GetMasterS:

; 5042 : 	{
; 5043 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillValue - Invalid Type : %d",iType);

  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00032	d9 ee		 fldz
  00034	83 c4 08	 add	 esp, 8

; 5048 : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN3@GetMasterS:

; 5036 : 	{
; 5037 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillValue - Invalid Point : %d",iPoint);

  0003b	52		 push	 edx
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@GFHJPJHM@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5038 : 		return 0.0f;

  00047	d9 ee		 fldz
  00049	83 c4 08	 add	 esp, 8

; 5048 : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
_TEXT	ENDS
PUBLIC	??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate
;	COMDAT ??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillManaIncRate - Invalid Point'
	DB	' : %d', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z
_TEXT	SEGMENT
_iPoint$ = 8						; size = 4
?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate, COMDAT
; _this$ = ecx

; 5051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5052 : 	if( iPoint < 1 || iPoint > MAX_SKILLTREE_LEVEL )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iPoint$[ebp]
  00006	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  00009	83 fa 13	 cmp	 edx, 19			; 00000013H
  0000c	77 0b		 ja	 SHORT $LN1@GetMasterS@2

; 5056 : 	}
; 5057 : 
; 5058 : 	return this->m_fValue[21][iPoint];

  0000e	d9 84 81 14 42
	00 00		 fld	 DWORD PTR [ecx+eax*4+16916]

; 5059 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetMasterS@2:

; 5053 : 	{
; 5054 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillManaIncRate - Invalid Point : %d",iPoint);

  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5055 : 		return -1.0f;

  00025	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  0002b	83 c4 08	 add	 esp, 8

; 5059 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate
_TEXT	ENDS
PUBLIC	?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
; Function compile flags: /Ogtp
;	COMDAT ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
tv199 = 16						; size = 4
_iStep$ = 16						; size = 4
?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue, COMDAT
; _this$ = ecx

; 5062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5063 : 	int nStep = iStep;

  00004	8b 55 10	 mov	 edx, DWORD PTR _iStep$[ebp]

; 5064 : 	int nSkill = iSkill;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
  00012	8b f2		 mov	 esi, edx
  00014	8b c8		 mov	 ecx, eax

; 5065 : 	int nPrevSkill = nSkill;
; 5066 : 
; 5067 : 	while( nStep != 0 )

  00016	85 d2		 test	 edx, edx
  00018	74 1a		 je	 SHORT $LN13@GetBrandOf
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL8@GetBrandOf:

; 5068 : 	{
; 5069 : 		if( nPrevSkill == 0 )

  00020	85 c0		 test	 eax, eax
  00022	74 10		 je	 SHORT $LN13@GetBrandOf

; 5070 : 			break;
; 5071 : 
; 5072 : 		nPrevSkill = MagicDamageC.GetSkillReqBrandOfSkill(nSkill);

  00024	51		 push	 ecx
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0002a	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill

; 5073 : 		nSkill = nPrevSkill;
; 5074 : 		nStep--;

  0002f	4e		 dec	 esi
  00030	8b c8		 mov	 ecx, eax
  00032	75 ec		 jne	 SHORT $LL8@GetBrandOf
$LN13@GetBrandOf:

; 5075 : 	}
; 5076 : 
; 5077 : 	WORD iBrandOfSkill = nSkill;
; 5078 : 	int iLevel;
; 5079 : 
; 5080 : 	if( this->CheckRequireStatus(iBrandOfSkill) )

  00034	0f b7 c1	 movzx	 eax, cx
  00037	50		 push	 eax
  00038	8b cf		 mov	 ecx, edi
  0003a	89 45 10	 mov	 DWORD PTR tv199[ebp], eax
  0003d	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00042	85 c0		 test	 eax, eax
  00044	74 37		 je	 SHORT $LN2@GetBrandOf

; 5081 : 	{
; 5082 : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00046	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00049	33 ff		 xor	 edi, edi
  0004b	33 f6		 xor	 esi, esi
  0004d	8d 49 00	 npad	 3
$LL4@GetBrandOf:

; 5083 : 		{
; 5084 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE && 
; 5085 : 				lpObj->Magic[iCount].m_Skill == iBrandOfSkill )

  00050	8b 8b c8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1224]
  00056	03 ce		 add	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 0f		 jne	 SHORT $LN3@GetBrandOf
  00062	8b 83 c8 04 00
	00		 mov	 eax, DWORD PTR [ebx+1224]
  00068	8b 4d 10	 mov	 ecx, DWORD PTR tv199[ebp]
  0006b	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  0006f	74 17		 je	 SHORT $LN14@GetBrandOf
$LN3@GetBrandOf:

; 5081 : 	{
; 5082 : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00071	83 c6 18	 add	 esi, 24			; 00000018H
  00074	47		 inc	 edi
  00075	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0007b	7c d3		 jl	 SHORT $LL4@GetBrandOf
$LN2@GetBrandOf:

; 5089 : 			}
; 5090 : 		}
; 5091 : 	}
; 5092 : 
; 5093 : 	return 0.0f;

  0007d	d9 ee		 fldz
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx

; 5094 : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH
$LN14@GetBrandOf:

; 5086 : 			{
; 5087 : 				iLevel = lpObj->Magic[iCount].m_Level;

  00088	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  0008b	0f b6 44 d0 04	 movzx	 eax, BYTE PTR [eax+edx*8+4]

; 5088 : 				return this->GetMasterSkillValue(MagicDamageC.SkillGet(iBrandOfSkill),iLevel);

  00090	50		 push	 eax
  00091	51		 push	 ecx
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00097	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 5094 : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 0c 00	 ret	 12			; 0000000cH
?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
_TEXT	ENDS
PUBLIC	?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
EXTRN	?GetSkillRank@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillRank
; Function compile flags: /Ogtp
;	COMDAT ?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
tv240 = -20						; size = 4
_this$ = -16						; size = 4
_nTreeKind$ = -12					; size = 4
tv451 = -8						; size = 4
_nRank$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_nPoint$ = 12						; size = 4
_iSkill$ = 12						; size = 4
_iLevel$ = 16						; size = 4
?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill, COMDAT
; _this$ = ecx

; 5097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 5098 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00006	8b 45 0c	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 5102 : 	}
; 5103 : 
; 5104 : 	int nTreeKind = -1;
; 5105 : 	int nRank = MagicDamageC.GetSkillRank(iSkill)-1;

  0000f	50		 push	 eax
  00010	3d bb 02 00 00	 cmp	 eax, 699		; 000002bbH
  00015	0f 87 0b 01 00
	00		 ja	 $LN22@CheckPrevi
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00020	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _nTreeKind$[ebp], -1
  00027	e8 00 00 00 00	 call	 ?GetSkillRank@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillRank
  0002c	48		 dec	 eax
  0002d	89 45 fc	 mov	 DWORD PTR _nRank$[ebp], eax

; 5106 : 
; 5107 : 	if( nRank < 1 )

  00030	83 f8 01	 cmp	 eax, 1
  00033	7d 0c		 jge	 SHORT $LN21@CheckPrevi

; 5108 : 		return 1;

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	5e		 pop	 esi

; 5146 : 		nReturn = TRUE;
; 5147 : 	else
; 5148 : 		nReturn = FALSE;
; 5149 : 
; 5150 : 	return nReturn;
; 5151 : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
$LN21@CheckPrevi:
  00041	53		 push	 ebx

; 5109 : 
; 5110 : 	int iClass = lpObj->Class;

  00042	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00045	0f b7 83 b8 00
	00 00		 movzx	 eax, WORD PTR [ebx+184]
  0004c	57		 push	 edi

; 5111 : 	int nReturn = -1;
; 5112 : 
; 5113 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0004d	33 ff		 xor	 edi, edi
  0004f	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  00055	89 45 ec	 mov	 DWORD PTR tv240[ebp], eax
  00058	8d 44 30 18	 lea	 eax, DWORD PTR [eax+esi+24]
  0005c	8d 64 24 00	 npad	 4
$LL40@CheckPrevi:

; 5114 : 	{
; 5115 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00060	8b d0		 mov	 edx, eax
  00062	c7 45 f8 09 00
	00 00		 mov	 DWORD PTR tv451[ebp], 9
  00069	8d a4 24 00 00
	00 00		 npad	 7
$LL41@CheckPrevi:

; 5116 : 		{
; 5117 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00070	33 c0		 xor	 eax, eax
  00072	8b ca		 mov	 ecx, edx
$LL14@CheckPrevi:

; 5118 : 			{
; 5119 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00074	8b 75 0c	 mov	 esi, DWORD PTR _iSkill$[ebp]
  00077	39 31		 cmp	 DWORD PTR [ecx], esi
  00079	74 0b		 je	 SHORT $LN31@CheckPrevi

; 5116 : 		{
; 5117 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  0007b	40		 inc	 eax
  0007c	83 c1 14	 add	 ecx, 20			; 00000014H
  0007f	83 f8 04	 cmp	 eax, 4
  00082	7c f0		 jl	 SHORT $LL14@CheckPrevi

; 5118 : 			{
; 5119 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00084	eb 03		 jmp	 SHORT $LN16@CheckPrevi
$LN31@CheckPrevi:

; 5120 : 				{
; 5121 : 					nTreeKind = iTreeKind;

  00086	89 7d f4	 mov	 DWORD PTR _nTreeKind$[ebp], edi
$LN16@CheckPrevi:

; 5114 : 	{
; 5115 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00089	83 c2 50	 add	 edx, 80			; 00000050H
  0008c	ff 4d f8	 dec	 DWORD PTR tv451[ebp]
  0008f	75 df		 jne	 SHORT $LL41@CheckPrevi

; 5111 : 	int nReturn = -1;
; 5112 : 
; 5113 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00091	47		 inc	 edi
  00092	8b c2		 mov	 eax, edx
  00094	83 ff 03	 cmp	 edi, 3
  00097	7c c7		 jl	 SHORT $LL40@CheckPrevi

; 5122 : 					break;
; 5123 : 				}
; 5124 : 			}
; 5125 : 		}
; 5126 : 	}
; 5127 : 
; 5128 : 	int nPoint = 0;

  00099	33 ff		 xor	 edi, edi

; 5129 : 	nRank -= 1;

  0009b	ff 4d fc	 dec	 DWORD PTR _nRank$[ebp]
  0009e	89 7d 0c	 mov	 DWORD PTR _nPoint$[ebp], edi
$LL38@CheckPrevi:

; 5132 : 	{
; 5133 : 		for(int i = 0; i < MAX_MAGIC; i++)

  000a1	33 f6		 xor	 esi, esi
$LL7@CheckPrevi:

; 5134 : 		{
; 5135 : 			if( lpObj->Magic[i].IsMagic() == TRUE && this->CheckRequireStatus(lpObj->Magic[i].m_Skill) == TRUE  )

  000a3	8b 8b c8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1224]
  000a9	03 ce		 add	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000b0	83 f8 01	 cmp	 eax, 1
  000b3	75 4e		 jne	 SHORT $LN6@CheckPrevi
  000b5	8b 83 c8 04 00
	00		 mov	 eax, DWORD PTR [ebx+1224]
  000bb	8b 4c 06 08	 mov	 ecx, DWORD PTR [esi+eax+8]
  000bf	51		 push	 ecx
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  000c8	83 f8 01	 cmp	 eax, 1
  000cb	75 36		 jne	 SHORT $LN6@CheckPrevi

; 5136 : 			{
; 5137 : 				if( lpObj->Magic[i].m_Skill == this->m_SkillTreeData[iClass].m_SkillInfo[nTreeKind][nRank][iPos2].m_iSkillID )

  000cd	8b 93 c8 04 00
	00		 mov	 edx, DWORD PTR [ebx+1224]
  000d3	8b 45 f4	 mov	 eax, DWORD PTR _nTreeKind$[ebp]
  000d6	8b 5d f0	 mov	 ebx, DWORD PTR _this$[ebp]
  000d9	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  000dc	8b 55 fc	 mov	 edx, DWORD PTR _nRank$[ebp]
  000df	8d 14 c2	 lea	 edx, DWORD PTR [edx+eax*8]
  000e2	03 d0		 add	 edx, eax
  000e4	8d 04 97	 lea	 eax, DWORD PTR [edi+edx*4]
  000e7	8b 55 ec	 mov	 edx, DWORD PTR tv240[ebp]
  000ea	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000ed	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  000f0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000f3	3b 54 18 18	 cmp	 edx, DWORD PTR [eax+ebx+24]

; 5138 : 				{
; 5139 : 					nPoint |= lpObj->Magic[i].m_Level;

  000f7	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  000fa	75 07		 jne	 SHORT $LN6@CheckPrevi
  000fc	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00100	09 45 0c	 or	 DWORD PTR _nPoint$[ebp], eax
$LN6@CheckPrevi:

; 5132 : 	{
; 5133 : 		for(int i = 0; i < MAX_MAGIC; i++)

  00103	83 c6 18	 add	 esi, 24			; 00000018H
  00106	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0010c	7c 95		 jl	 SHORT $LL7@CheckPrevi

; 5130 : 
; 5131 : 	for(int iPos2 = 0; iPos2 < MAX_SKILLTREE_POS; iPos2++ )

  0010e	47		 inc	 edi
  0010f	83 ff 04	 cmp	 edi, 4
  00112	7c 8d		 jl	 SHORT $LL38@CheckPrevi

; 5140 : 				}
; 5141 : 			}
; 5142 : 		}
; 5143 : 	}
; 5144 : 
; 5145 : 	if( nPoint >= 10 )

  00114	33 c0		 xor	 eax, eax
  00116	83 7d 0c 0a	 cmp	 DWORD PTR _nPoint$[ebp], 10 ; 0000000aH
  0011a	5f		 pop	 edi
  0011b	5b		 pop	 ebx
  0011c	0f 9d c0	 setge	 al
  0011f	5e		 pop	 esi

; 5146 : 		nReturn = TRUE;
; 5147 : 	else
; 5148 : 		nReturn = FALSE;
; 5149 : 
; 5150 : 	return nReturn;
; 5151 : }

  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 0c 00	 ret	 12			; 0000000cH
$LN22@CheckPrevi:

; 5099 : 	{
; 5100 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00131	83 c4 08	 add	 esp, 8

; 5101 : 		return -1;

  00134	83 c8 ff	 or	 eax, -1
  00137	5e		 pop	 esi

; 5146 : 		nReturn = TRUE;
; 5147 : 	else
; 5148 : 		nReturn = FALSE;
; 5149 : 
; 5150 : 	return nReturn;
; 5151 : }

  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 0c 00	 ret	 12			; 0000000cH
?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
_TEXT	ENDS
PUBLIC	?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckSkillLevel
; Function compile flags: /Ogtp
;	COMDAT ?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckSkillLevel, COMDAT
; _this$ = ecx

; 5154 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 5155 : 	for(int i = 0; i < MAX_MAGIC; i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	33 f6		 xor	 esi, esi
  0000d	8d 49 00	 npad	 3
$LL4@CheckSkill:

; 5156 : 	{
; 5157 : 		if( lpObj->Magic[i].IsMagic() == TRUE &&
; 5158 : 			lpObj->Magic[i].m_Skill == iSkill )

  00010	8b 8b c8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1224]
  00016	03 ce		 add	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 0f		 jne	 SHORT $LN3@CheckSkill
  00022	8b 83 c8 04 00
	00		 mov	 eax, DWORD PTR [ebx+1224]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0002b	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  0002f	74 15		 je	 SHORT $LN8@CheckSkill
$LN3@CheckSkill:

; 5155 : 	for(int i = 0; i < MAX_MAGIC; i++)

  00031	83 c6 18	 add	 esi, 24			; 00000018H
  00034	47		 inc	 edi
  00035	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0003b	7c d3		 jl	 SHORT $LL4@CheckSkill

; 5161 : 		}
; 5162 : 	}
; 5163 : 
; 5164 : 
; 5165 : return 0;

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	33 c0		 xor	 eax, eax
  00041	5b		 pop	 ebx

; 5166 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN8@CheckSkill:

; 5159 : 		{
; 5160 : 			return lpObj->Magic[i].m_Level;

  00046	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  00049	0f b6 44 d0 04	 movzx	 eax, BYTE PTR [eax+edx*8+4]
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 5166 : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckSkillLevel
_TEXT	ENDS
PUBLIC	?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv401 = 8						; size = 4
_iClass$ = 8						; size = 4
tv172 = 12						; size = 4
_iSkill$ = 12						; size = 4
?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex, COMDAT
; _this$ = ecx

; 5169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5170 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_MONK )

  00004	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00007	8b d1		 mov	 edx, ecx
  00009	89 55 fc	 mov	 DWORD PTR _this$[ebp], edx
  0000c	83 f8 06	 cmp	 eax, 6
  0000f	0f 87 98 00 00
	00		 ja	 $LN13@GetMasterS@3

; 5174 : 	}
; 5175 : 
; 5176 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  00018	81 f9 bb 02 00
	00		 cmp	 ecx, 699		; 000002bbH
  0001e	77 75		 ja	 SHORT $LN11@GetMasterS@3

; 5180 : 	}
; 5181 : 
; 5182 : 	int nReturn = -1;
; 5183 : 
; 5184 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00020	53		 push	 ebx
  00021	33 db		 xor	 ebx, ebx
  00023	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  00029	57		 push	 edi
  0002a	8d 7c 10 18	 lea	 edi, DWORD PTR [eax+edx+24]
  0002e	89 45 0c	 mov	 DWORD PTR tv172[ebp], eax
  00031	89 7d 08	 mov	 DWORD PTR tv401[ebp], edi
  00034	56		 push	 esi
$LL24@GetMasterS@3:

; 5185 : 	{
; 5186 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00035	33 f6		 xor	 esi, esi
$LL25@GetMasterS@3:

; 5187 : 		{
; 5188 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00037	33 c0		 xor	 eax, eax
  00039	8b d7		 mov	 edx, edi
  0003b	eb 03 8d 49 00	 npad	 5
$LL4@GetMasterS@3:

; 5189 : 			{
; 5190 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00040	39 0a		 cmp	 DWORD PTR [edx], ecx
  00042	74 30		 je	 SHORT $LN20@GetMasterS@3

; 5187 : 		{
; 5188 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00044	40		 inc	 eax
  00045	83 c2 14	 add	 edx, 20			; 00000014H
  00048	83 f8 04	 cmp	 eax, 4
  0004b	7c f3		 jl	 SHORT $LL4@GetMasterS@3

; 5185 : 	{
; 5186 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0004d	46		 inc	 esi
  0004e	83 c7 50	 add	 edi, 80			; 00000050H
  00051	83 fe 09	 cmp	 esi, 9
  00054	7c e1		 jl	 SHORT $LL25@GetMasterS@3

; 5180 : 	}
; 5181 : 
; 5182 : 	int nReturn = -1;
; 5183 : 
; 5184 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00056	8b 7d 08	 mov	 edi, DWORD PTR tv401[ebp]
  00059	43		 inc	 ebx
  0005a	81 c7 d0 02 00
	00		 add	 edi, 720		; 000002d0H
  00060	89 7d 08	 mov	 DWORD PTR tv401[ebp], edi
  00063	83 fb 03	 cmp	 ebx, 3
  00066	7c cd		 jl	 SHORT $LL24@GetMasterS@3

; 5194 : 				}
; 5195 : 			}
; 5196 : 		}
; 5197 : 	}
; 5198 : 
; 5199 : return nReturn;

  00068	5e		 pop	 esi
  00069	5f		 pop	 edi
  0006a	83 c8 ff	 or	 eax, -1
  0006d	5b		 pop	 ebx

; 5200 : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
$LN20@GetMasterS@3:

; 5191 : 				{
; 5192 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex;
; 5193 : 					return nReturn;

  00074	8d 0c de	 lea	 ecx, DWORD PTR [esi+ebx*8]
  00077	03 cb		 add	 ecx, ebx
  00079	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0007c	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0007f	8b 45 0c	 mov	 eax, DWORD PTR tv172[ebp]
  00082	5e		 pop	 esi
  00083	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00086	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00089	8b 44 11 08	 mov	 eax, DWORD PTR [ecx+edx+8]
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx

; 5200 : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
$LN11@GetMasterS@3:

; 5177 : 	{
; 5178 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Skill Code : %d",iSkill);

  00095	51		 push	 ecx
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KBNIBHHJ@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a1	83 c4 08	 add	 esp, 8

; 5179 : 		return -1;

  000a4	83 c8 ff	 or	 eax, -1

; 5200 : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 08 00	 ret	 8
$LN13@GetMasterS@3:

; 5171 : 	{
; 5172 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetSkillReqMLPoint - Invalid Class Code  : %d",iClass);

  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@GAACFAMN@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b9	83 c4 08	 add	 esp, 8

; 5173 : 		return -1;

  000bc	83 c8 ff	 or	 eax, -1

; 5200 : }

  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
_TEXT	ENDS
PUBLIC	?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
; Function compile flags: /Ogtp
;	COMDAT ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv168 = -4						; size = 4
tv387 = 8						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetParentSkill1, COMDAT
; _this$ = ecx

; 5203 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5204 : 	int nReturn = 0;
; 5205 : 
; 5206 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00006	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00009	53		 push	 ebx
  0000a	33 db		 xor	 ebx, ebx
  0000c	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	8d 7c 08 18	 lea	 edi, DWORD PTR [eax+ecx+24]
  00018	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0001e	89 45 fc	 mov	 DWORD PTR tv168[ebp], eax
  00021	89 7d 08	 mov	 DWORD PTR tv387[ebp], edi
$LL20@GetParentS:

; 5207 : 	{
; 5208 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00024	33 f6		 xor	 esi, esi
$LL21@GetParentS:

; 5209 : 		{
; 5210 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00026	33 c0		 xor	 eax, eax
  00028	8b d7		 mov	 edx, edi
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL4@GetParentS:

; 5211 : 			{
; 5212 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00030	39 0a		 cmp	 DWORD PTR [edx], ecx
  00032	74 2f		 je	 SHORT $LN16@GetParentS

; 5209 : 		{
; 5210 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00034	40		 inc	 eax
  00035	83 c2 14	 add	 edx, 20			; 00000014H
  00038	83 f8 04	 cmp	 eax, 4
  0003b	7c f3		 jl	 SHORT $LL4@GetParentS

; 5207 : 	{
; 5208 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0003d	46		 inc	 esi
  0003e	83 c7 50	 add	 edi, 80			; 00000050H
  00041	83 fe 09	 cmp	 esi, 9
  00044	7c e0		 jl	 SHORT $LL21@GetParentS

; 5204 : 	int nReturn = 0;
; 5205 : 
; 5206 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00046	8b 7d 08	 mov	 edi, DWORD PTR tv387[ebp]
  00049	43		 inc	 ebx
  0004a	81 c7 d0 02 00
	00		 add	 edi, 720		; 000002d0H
  00050	89 7d 08	 mov	 DWORD PTR tv387[ebp], edi
  00053	83 fb 03	 cmp	 ebx, 3
  00056	7c cc		 jl	 SHORT $LL20@GetParentS

; 5216 : 				}
; 5217 : 			}
; 5218 : 		}
; 5219 : 	}
; 5220 : 
; 5221 : 	return nReturn;

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	33 c0		 xor	 eax, eax
  0005c	5b		 pop	 ebx

; 5222 : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN16@GetParentS:

; 5213 : 				{
; 5214 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1;
; 5215 : 					return nReturn;

  00063	8d 0c de	 lea	 ecx, DWORD PTR [esi+ebx*8]
  00066	03 cb		 add	 ecx, ebx
  00068	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0006b	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0006e	8b 45 fc	 mov	 eax, DWORD PTR tv168[ebp]
  00071	5f		 pop	 edi
  00072	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00075	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00078	8b 44 11 10	 mov	 eax, DWORD PTR [ecx+edx+16]
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx

; 5222 : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetParentSkill1
_TEXT	ENDS
PUBLIC	?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill2
; Function compile flags: /Ogtp
;	COMDAT ?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv168 = -4						; size = 4
tv387 = 8						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetParentSkill2, COMDAT
; _this$ = ecx

; 5225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5226 : 	int nReturn = 0;
; 5227 : 
; 5228 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00006	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00009	53		 push	 ebx
  0000a	33 db		 xor	 ebx, ebx
  0000c	69 c0 74 08 00
	00		 imul	 eax, 2164		; 00000874H
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	8d 7c 08 18	 lea	 edi, DWORD PTR [eax+ecx+24]
  00018	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0001e	89 45 fc	 mov	 DWORD PTR tv168[ebp], eax
  00021	89 7d 08	 mov	 DWORD PTR tv387[ebp], edi
$LL20@GetParentS@2:

; 5229 : 	{
; 5230 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00024	33 f6		 xor	 esi, esi
$LL21@GetParentS@2:

; 5231 : 		{
; 5232 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00026	33 c0		 xor	 eax, eax
  00028	8b d7		 mov	 edx, edi
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL4@GetParentS@2:

; 5233 : 			{
; 5234 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00030	39 0a		 cmp	 DWORD PTR [edx], ecx
  00032	74 2f		 je	 SHORT $LN16@GetParentS@2

; 5231 : 		{
; 5232 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00034	40		 inc	 eax
  00035	83 c2 14	 add	 edx, 20			; 00000014H
  00038	83 f8 04	 cmp	 eax, 4
  0003b	7c f3		 jl	 SHORT $LL4@GetParentS@2

; 5229 : 	{
; 5230 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0003d	46		 inc	 esi
  0003e	83 c7 50	 add	 edi, 80			; 00000050H
  00041	83 fe 09	 cmp	 esi, 9
  00044	7c e0		 jl	 SHORT $LL21@GetParentS@2

; 5226 : 	int nReturn = 0;
; 5227 : 
; 5228 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00046	8b 7d 08	 mov	 edi, DWORD PTR tv387[ebp]
  00049	43		 inc	 ebx
  0004a	81 c7 d0 02 00
	00		 add	 edi, 720		; 000002d0H
  00050	89 7d 08	 mov	 DWORD PTR tv387[ebp], edi
  00053	83 fb 03	 cmp	 ebx, 3
  00056	7c cc		 jl	 SHORT $LL20@GetParentS@2

; 5238 : 				}
; 5239 : 			}
; 5240 : 		}
; 5241 : 	}
; 5242 : 
; 5243 : 	return nReturn;

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	33 c0		 xor	 eax, eax
  0005c	5b		 pop	 ebx

; 5244 : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN16@GetParentS@2:

; 5235 : 				{
; 5236 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2;
; 5237 : 					return nReturn;

  00063	8d 0c de	 lea	 ecx, DWORD PTR [esi+ebx*8]
  00066	03 cb		 add	 ecx, ebx
  00068	8d 44 88 01	 lea	 eax, DWORD PTR [eax+ecx*4+1]
  0006c	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0006f	8b 45 fc	 mov	 eax, DWORD PTR tv168[ebp]
  00072	5f		 pop	 edi
  00073	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00076	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00079	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx

; 5244 : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetParentSkill2
_TEXT	ENDS
PUBLIC	?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill
; Function compile flags: /Ogtp
;	COMDAT ?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iType$ = 12						; size = 4
?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill, COMDAT
; _this$ = ecx

; 5247 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5248 : 	int iCount = 0;
; 5249 : 
; 5250 : 	switch(iType)

  00004	8b 45 0c	 mov	 eax, DWORD PTR _iType$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0000d	0f 87 70 0c 00
	00		 ja	 $LN2@SetItemMLP
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN227@SetItemMLP[eax*4]
$LN131@SetItemMLP:

; 5251 : 	{
; 5252 : 	case 0:
; 5253 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0001d	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00020	33 db		 xor	 ebx, ebx
  00022	33 f6		 xor	 esi, esi
  00024	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL130@SetItemMLP:

; 5254 : 		{
; 5255 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5256 : 				lpObj->Magic[iCount].m_Skill == 348 )

  00030	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00036	03 ce		 add	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0003d	83 f8 01	 cmp	 eax, 1
  00040	75 10		 jne	 SHORT $LN129@SetItemMLP
  00042	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00048	81 7c 30 08 5c
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 348 ; 0000015cH
  00050	74 0e		 je	 SHORT $LN164@SetItemMLP
$LN129@SetItemMLP:

; 5251 : 	{
; 5252 : 	case 0:
; 5253 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00052	83 c6 18	 add	 esi, 24			; 00000018H
  00055	43		 inc	 ebx
  00056	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0005c	7c d2		 jl	 SHORT $LL130@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0005e	eb 29		 jmp	 SHORT $LN128@SetItemMLP
$LN164@SetItemMLP:

; 5257 : 			{
; 5258 : 				lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00060	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00063	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00067	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0006a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0006e	51		 push	 ecx
  0006f	52		 push	 edx
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00075	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00083	d9 9f 70 26 00
	00		 fstp	 DWORD PTR [edi+9840]
$LN128@SetItemMLP:

; 5259 : 				break;
; 5260 : 			}
; 5261 : 		}
; 5262 : 
; 5263 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00089	33 db		 xor	 ebx, ebx
  0008b	33 f6		 xor	 esi, esi
  0008d	8d 49 00	 npad	 3
$LL126@SetItemMLP:

; 5264 : 		{
; 5265 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5266 : 				lpObj->Magic[iCount].m_Skill == 352 )

  00090	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	75 10		 jne	 SHORT $LN125@SetItemMLP
  000a2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  000a8	81 7c 06 08 60
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 352 ; 00000160H
  000b0	74 15		 je	 SHORT $LN165@SetItemMLP
$LN125@SetItemMLP:

; 5259 : 				break;
; 5260 : 			}
; 5261 : 		}
; 5262 : 
; 5263 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  000b2	83 c6 18	 add	 esi, 24			; 00000018H
  000b5	43		 inc	 ebx
  000b6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  000bc	7c d2		 jl	 SHORT $LL126@SetItemMLP
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
$LN165@SetItemMLP:

; 5267 : 			{
; 5268 : 				lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  000c7	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  000ca	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  000ce	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  000d1	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  000d5	51		 push	 ecx
  000d6	52		 push	 edx
  000d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000dc	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000ea	d9 9f 80 26 00
	00		 fstp	 DWORD PTR [edi+9856]
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 08 00	 ret	 8
$LN122@SetItemMLP:

; 5269 : 				break;
; 5270 : 			}
; 5271 : 		}
; 5272 : 		break;
; 5273 : 	case 1:
; 5274 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  000f9	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  000fc	33 db		 xor	 ebx, ebx
  000fe	33 f6		 xor	 esi, esi
$LL121@SetItemMLP:

; 5275 : 		{
; 5276 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5277 : 				lpObj->Magic[iCount].m_Skill == 349 )

  00100	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00106	03 ce		 add	 ecx, esi
  00108	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0010d	83 f8 01	 cmp	 eax, 1
  00110	75 10		 jne	 SHORT $LN120@SetItemMLP
  00112	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00118	81 7c 06 08 5d
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 349 ; 0000015dH
  00120	74 0e		 je	 SHORT $LN166@SetItemMLP
$LN120@SetItemMLP:

; 5269 : 				break;
; 5270 : 			}
; 5271 : 		}
; 5272 : 		break;
; 5273 : 	case 1:
; 5274 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00122	83 c6 18	 add	 esi, 24			; 00000018H
  00125	43		 inc	 ebx
  00126	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0012c	7c d2		 jl	 SHORT $LL121@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0012e	eb 29		 jmp	 SHORT $LN119@SetItemMLP
$LN166@SetItemMLP:

; 5278 : 			{
; 5279 : 				lpObj->m_MPSkillOpt.MpsOneHandSwordStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00130	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00133	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00137	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0013a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0013e	51		 push	 ecx
  0013f	52		 push	 edx
  00140	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00145	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00153	d9 9f 74 26 00
	00		 fstp	 DWORD PTR [edi+9844]
$LN119@SetItemMLP:

; 5280 : 				break;
; 5281 : 			}
; 5282 : 		}
; 5283 : 
; 5284 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00159	33 db		 xor	 ebx, ebx
  0015b	33 f6		 xor	 esi, esi
  0015d	8d 49 00	 npad	 3
$LL117@SetItemMLP:

; 5285 : 		{
; 5286 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5287 : 				lpObj->Magic[iCount].m_Skill == 353 )

  00160	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00166	03 ce		 add	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0016d	83 f8 01	 cmp	 eax, 1
  00170	75 10		 jne	 SHORT $LN116@SetItemMLP
  00172	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00178	81 7c 06 08 61
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 353 ; 00000161H
  00180	74 15		 je	 SHORT $LN167@SetItemMLP
$LN116@SetItemMLP:

; 5280 : 				break;
; 5281 : 			}
; 5282 : 		}
; 5283 : 
; 5284 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00182	83 c6 18	 add	 esi, 24			; 00000018H
  00185	43		 inc	 ebx
  00186	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0018c	7c d2		 jl	 SHORT $LL117@SetItemMLP
  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi
  00190	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c2 08 00	 ret	 8
$LN167@SetItemMLP:

; 5288 : 			{
; 5289 : 				lpObj->m_MPSkillOpt.MpsOneHandSwordMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00197	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0019a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  0019e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  001a1	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  001a5	51		 push	 ecx
  001a6	52		 push	 edx
  001a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001ac	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001ba	d9 9f 84 26 00
	00		 fstp	 DWORD PTR [edi+9860]
  001c0	5f		 pop	 edi
  001c1	5e		 pop	 esi
  001c2	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c2 08 00	 ret	 8
$LN113@SetItemMLP:

; 5290 : 				break;
; 5291 : 			}
; 5292 : 		}
; 5293 : 		break;
; 5294 : 	case 2:
; 5295 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  001c9	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  001cc	33 db		 xor	 ebx, ebx
  001ce	33 f6		 xor	 esi, esi
$LL112@SetItemMLP:

; 5296 : 		{
; 5297 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5298 : 				lpObj->Magic[iCount].m_Skill == 350 )

  001d0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  001d6	03 ce		 add	 ecx, esi
  001d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  001dd	83 f8 01	 cmp	 eax, 1
  001e0	75 10		 jne	 SHORT $LN111@SetItemMLP
  001e2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  001e8	81 7c 06 08 5e
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 350 ; 0000015eH
  001f0	74 0e		 je	 SHORT $LN168@SetItemMLP
$LN111@SetItemMLP:

; 5290 : 				break;
; 5291 : 			}
; 5292 : 		}
; 5293 : 		break;
; 5294 : 	case 2:
; 5295 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  001f2	83 c6 18	 add	 esi, 24			; 00000018H
  001f5	43		 inc	 ebx
  001f6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  001fc	7c d2		 jl	 SHORT $LL112@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  001fe	eb 29		 jmp	 SHORT $LN110@SetItemMLP
$LN168@SetItemMLP:

; 5299 : 			{
; 5300 : 				lpObj->m_MPSkillOpt.MpsMaceStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00200	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00203	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00207	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0020a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0020e	51		 push	 ecx
  0020f	52		 push	 edx
  00210	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00215	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0021a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00223	d9 9f 78 26 00
	00		 fstp	 DWORD PTR [edi+9848]
$LN110@SetItemMLP:

; 5301 : 				break;
; 5302 : 			}
; 5303 : 		}
; 5304 : 
; 5305 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00229	33 db		 xor	 ebx, ebx
  0022b	33 f6		 xor	 esi, esi
  0022d	8d 49 00	 npad	 3
$LL108@SetItemMLP:

; 5306 : 		{
; 5307 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5308 : 				lpObj->Magic[iCount].m_Skill == 354 )

  00230	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00236	03 ce		 add	 ecx, esi
  00238	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0023d	83 f8 01	 cmp	 eax, 1
  00240	75 10		 jne	 SHORT $LN107@SetItemMLP
  00242	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00248	81 7c 06 08 62
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 354 ; 00000162H
  00250	74 15		 je	 SHORT $LN169@SetItemMLP
$LN107@SetItemMLP:

; 5301 : 				break;
; 5302 : 			}
; 5303 : 		}
; 5304 : 
; 5305 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00252	83 c6 18	 add	 esi, 24			; 00000018H
  00255	43		 inc	 ebx
  00256	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0025c	7c d2		 jl	 SHORT $LL108@SetItemMLP
  0025e	5f		 pop	 edi
  0025f	5e		 pop	 esi
  00260	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c2 08 00	 ret	 8
$LN169@SetItemMLP:

; 5309 : 			{
; 5310 : 				lpObj->m_MPSkillOpt.MpsMaceMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00267	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0026a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  0026e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00271	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00275	51		 push	 ecx
  00276	52		 push	 edx
  00277	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0027c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00281	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0028a	d9 9f 8c 26 00
	00		 fstp	 DWORD PTR [edi+9868]
  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00293	8b e5		 mov	 esp, ebp
  00295	5d		 pop	 ebp
  00296	c2 08 00	 ret	 8
$LN104@SetItemMLP:

; 5311 : 				break;
; 5312 : 			}
; 5313 : 		}
; 5314 : 		break;
; 5315 : 	case 3:
; 5316 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00299	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0029c	33 db		 xor	 ebx, ebx
  0029e	33 f6		 xor	 esi, esi
$LL103@SetItemMLP:

; 5317 : 		{
; 5318 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5319 : 				lpObj->Magic[iCount].m_Skill == 351 )

  002a0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  002a6	03 ce		 add	 ecx, esi
  002a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  002ad	83 f8 01	 cmp	 eax, 1
  002b0	75 10		 jne	 SHORT $LN102@SetItemMLP
  002b2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  002b8	81 7c 06 08 5f
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 351 ; 0000015fH
  002c0	74 0e		 je	 SHORT $LN170@SetItemMLP
$LN102@SetItemMLP:

; 5311 : 				break;
; 5312 : 			}
; 5313 : 		}
; 5314 : 		break;
; 5315 : 	case 3:
; 5316 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  002c2	83 c6 18	 add	 esi, 24			; 00000018H
  002c5	43		 inc	 ebx
  002c6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  002cc	7c d2		 jl	 SHORT $LL103@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  002ce	eb 29		 jmp	 SHORT $LN101@SetItemMLP
$LN170@SetItemMLP:

; 5320 : 			{
; 5321 : 				lpObj->m_MPSkillOpt.MpsSpearStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  002d0	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  002d3	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  002d7	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  002da	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  002de	51		 push	 ecx
  002df	52		 push	 edx
  002e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  002e5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  002ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ed	50		 push	 eax
  002ee	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  002f3	d9 9f 7c 26 00
	00		 fstp	 DWORD PTR [edi+9852]
$LN101@SetItemMLP:

; 5322 : 				break;
; 5323 : 			}
; 5324 : 		}
; 5325 : 
; 5326 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  002f9	33 db		 xor	 ebx, ebx
  002fb	33 f6		 xor	 esi, esi
  002fd	8d 49 00	 npad	 3
$LL99@SetItemMLP:

; 5327 : 		{
; 5328 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5329 : 				lpObj->Magic[iCount].m_Skill == 355 )

  00300	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00306	03 ce		 add	 ecx, esi
  00308	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0030d	83 f8 01	 cmp	 eax, 1
  00310	75 10		 jne	 SHORT $LN98@SetItemMLP
  00312	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00318	81 7c 06 08 63
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 355 ; 00000163H
  00320	74 15		 je	 SHORT $LN171@SetItemMLP
$LN98@SetItemMLP:

; 5322 : 				break;
; 5323 : 			}
; 5324 : 		}
; 5325 : 
; 5326 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00322	83 c6 18	 add	 esi, 24			; 00000018H
  00325	43		 inc	 ebx
  00326	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0032c	7c d2		 jl	 SHORT $LL99@SetItemMLP
  0032e	5f		 pop	 edi
  0032f	5e		 pop	 esi
  00330	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c2 08 00	 ret	 8
$LN171@SetItemMLP:

; 5330 : 			{
; 5331 : 				lpObj->m_MPSkillOpt.MpsSpearMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00337	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0033a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  0033e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00341	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00345	51		 push	 ecx
  00346	52		 push	 edx
  00347	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0034c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00351	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0035a	d9 9f 88 26 00
	00		 fstp	 DWORD PTR [edi+9864]
  00360	5f		 pop	 edi
  00361	5e		 pop	 esi
  00362	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00363	8b e5		 mov	 esp, ebp
  00365	5d		 pop	 ebp
  00366	c2 08 00	 ret	 8
$LN95@SetItemMLP:

; 5332 : 				break;
; 5333 : 			}
; 5334 : 		}
; 5335 : 		break;
; 5336 : 	case 4:
; 5337 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00369	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0036c	33 db		 xor	 ebx, ebx
  0036e	33 f6		 xor	 esi, esi
$LL94@SetItemMLP:

; 5338 : 		{
; 5339 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5340 : 				lpObj->Magic[iCount].m_Skill == 397 )

  00370	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00376	03 ce		 add	 ecx, esi
  00378	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0037d	83 f8 01	 cmp	 eax, 1
  00380	75 10		 jne	 SHORT $LN93@SetItemMLP
  00382	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00388	81 7c 06 08 8d
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 397 ; 0000018dH
  00390	74 0e		 je	 SHORT $LN172@SetItemMLP
$LN93@SetItemMLP:

; 5332 : 				break;
; 5333 : 			}
; 5334 : 		}
; 5335 : 		break;
; 5336 : 	case 4:
; 5337 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00392	83 c6 18	 add	 esi, 24			; 00000018H
  00395	43		 inc	 ebx
  00396	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0039c	7c d2		 jl	 SHORT $LL94@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0039e	eb 29		 jmp	 SHORT $LN92@SetItemMLP
$LN172@SetItemMLP:

; 5341 : 			{
; 5342 : 				lpObj->m_MPSkillOpt.MpsOneHandStaffStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  003a0	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  003a3	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  003a7	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  003aa	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  003ae	51		 push	 ecx
  003af	52		 push	 edx
  003b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  003b5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  003ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  003c3	d9 9f 98 26 00
	00		 fstp	 DWORD PTR [edi+9880]
$LN92@SetItemMLP:

; 5343 : 				break;
; 5344 : 			}
; 5345 : 		}
; 5346 : 
; 5347 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  003c9	33 db		 xor	 ebx, ebx
  003cb	33 f6		 xor	 esi, esi
  003cd	8d 49 00	 npad	 3
$LL90@SetItemMLP:

; 5348 : 		{
; 5349 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5350 : 				lpObj->Magic[iCount].m_Skill == 400 )

  003d0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  003d6	03 ce		 add	 ecx, esi
  003d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  003dd	83 f8 01	 cmp	 eax, 1
  003e0	75 10		 jne	 SHORT $LN89@SetItemMLP
  003e2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  003e8	81 7c 06 08 90
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 400 ; 00000190H
  003f0	74 15		 je	 SHORT $LN173@SetItemMLP
$LN89@SetItemMLP:

; 5343 : 				break;
; 5344 : 			}
; 5345 : 		}
; 5346 : 
; 5347 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  003f2	83 c6 18	 add	 esi, 24			; 00000018H
  003f5	43		 inc	 ebx
  003f6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  003fc	7c d2		 jl	 SHORT $LL90@SetItemMLP
  003fe	5f		 pop	 edi
  003ff	5e		 pop	 esi
  00400	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00401	8b e5		 mov	 esp, ebp
  00403	5d		 pop	 ebp
  00404	c2 08 00	 ret	 8
$LN173@SetItemMLP:

; 5351 : 			{
; 5352 : 				lpObj->m_MPSkillOpt.MpsOneHandStaffMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00407	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0040a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  0040e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00411	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00415	51		 push	 ecx
  00416	52		 push	 edx
  00417	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0041c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00421	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0042a	d9 9f a0 26 00
	00		 fstp	 DWORD PTR [edi+9888]
  00430	5f		 pop	 edi
  00431	5e		 pop	 esi
  00432	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c2 08 00	 ret	 8
$LN86@SetItemMLP:

; 5353 : 				break;
; 5354 : 			}
; 5355 : 		}
; 5356 : 		break;
; 5357 : 	case 5:
; 5358 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00439	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0043c	33 db		 xor	 ebx, ebx
  0043e	33 f6		 xor	 esi, esi
$LL85@SetItemMLP:

; 5359 : 		{
; 5360 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5361 : 				lpObj->Magic[iCount].m_Skill == 398 )

  00440	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00446	03 ce		 add	 ecx, esi
  00448	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0044d	83 f8 01	 cmp	 eax, 1
  00450	75 10		 jne	 SHORT $LN84@SetItemMLP
  00452	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00458	81 7c 06 08 8e
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 398 ; 0000018eH
  00460	74 0e		 je	 SHORT $LN174@SetItemMLP
$LN84@SetItemMLP:

; 5353 : 				break;
; 5354 : 			}
; 5355 : 		}
; 5356 : 		break;
; 5357 : 	case 5:
; 5358 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00462	83 c6 18	 add	 esi, 24			; 00000018H
  00465	43		 inc	 ebx
  00466	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0046c	7c d2		 jl	 SHORT $LL85@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0046e	eb 29		 jmp	 SHORT $LN83@SetItemMLP
$LN174@SetItemMLP:

; 5362 : 			{
; 5363 : 				lpObj->m_MPSkillOpt.MpsTwoHandStaffStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00470	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00473	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00477	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0047a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0047e	51		 push	 ecx
  0047f	52		 push	 edx
  00480	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00485	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0048a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0048d	50		 push	 eax
  0048e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00493	d9 9f 94 26 00
	00		 fstp	 DWORD PTR [edi+9876]
$LN83@SetItemMLP:

; 5364 : 				break;
; 5365 : 			}
; 5366 : 		}
; 5367 : 
; 5368 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00499	33 db		 xor	 ebx, ebx
  0049b	33 f6		 xor	 esi, esi
  0049d	8d 49 00	 npad	 3
$LL81@SetItemMLP:

; 5369 : 		{
; 5370 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5371 : 				lpObj->Magic[iCount].m_Skill == 401 )

  004a0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  004a6	03 ce		 add	 ecx, esi
  004a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  004ad	83 f8 01	 cmp	 eax, 1
  004b0	75 10		 jne	 SHORT $LN80@SetItemMLP
  004b2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  004b8	81 7c 06 08 91
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 401 ; 00000191H
  004c0	74 15		 je	 SHORT $LN175@SetItemMLP
$LN80@SetItemMLP:

; 5364 : 				break;
; 5365 : 			}
; 5366 : 		}
; 5367 : 
; 5368 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  004c2	83 c6 18	 add	 esi, 24			; 00000018H
  004c5	43		 inc	 ebx
  004c6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  004cc	7c d2		 jl	 SHORT $LL81@SetItemMLP
  004ce	5f		 pop	 edi
  004cf	5e		 pop	 esi
  004d0	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  004d1	8b e5		 mov	 esp, ebp
  004d3	5d		 pop	 ebp
  004d4	c2 08 00	 ret	 8
$LN175@SetItemMLP:

; 5372 : 			{
; 5373 : 				lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  004d7	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  004da	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  004de	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  004e1	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  004e5	51		 push	 ecx
  004e6	52		 push	 edx
  004e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  004ec	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  004f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f4	50		 push	 eax
  004f5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  004fa	d9 9f a4 26 00
	00		 fstp	 DWORD PTR [edi+9892]
  00500	5f		 pop	 edi
  00501	5e		 pop	 esi
  00502	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00503	8b e5		 mov	 esp, ebp
  00505	5d		 pop	 ebp
  00506	c2 08 00	 ret	 8
$LN77@SetItemMLP:

; 5374 : 				break;
; 5375 : 			}
; 5376 : 		}
; 5377 : 		break;
; 5378 : 	case 6:
; 5379 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00509	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0050c	33 db		 xor	 ebx, ebx
  0050e	33 ff		 xor	 edi, edi
$LL76@SetItemMLP:

; 5380 : 		{
; 5381 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  00510	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00516	03 cf		 add	 ecx, edi
  00518	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0051d	83 f8 01	 cmp	 eax, 1
  00520	75 1f		 jne	 SHORT $LN75@SetItemMLP

; 5382 : 			{
; 5383 : 				if( lpObj->Magic[iCount].m_Skill == 399 )

  00522	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00528	8b 44 07 08	 mov	 eax, DWORD PTR [edi+eax+8]
  0052c	3d 8f 01 00 00	 cmp	 eax, 399		; 0000018fH
  00531	74 1f		 je	 SHORT $LN176@SetItemMLP

; 5387 : 				}
; 5388 : 
; 5389 : 				if( lpObj->Magic[iCount].m_Skill == 437 )

  00533	3d b5 01 00 00	 cmp	 eax, 437		; 000001b5H
  00538	74 48		 je	 SHORT $LN177@SetItemMLP

; 5393 : 				}
; 5394 : 
; 5395 : 				if( lpObj->Magic[iCount].m_Skill == 528 )

  0053a	3d 10 02 00 00	 cmp	 eax, 528		; 00000210H
  0053f	74 72		 je	 SHORT $LN178@SetItemMLP
$LN75@SetItemMLP:

; 5374 : 				break;
; 5375 : 			}
; 5376 : 		}
; 5377 : 		break;
; 5378 : 	case 6:
; 5379 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00541	83 c7 18	 add	 edi, 24			; 00000018H
  00544	43		 inc	 ebx
  00545	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  0054b	7c c3		 jl	 SHORT $LL76@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0054d	e9 8f 00 00 00	 jmp	 $LN74@SetItemMLP
$LN176@SetItemMLP:

; 5384 : 				{
; 5385 : 					lpObj->m_MPSkillOpt.MpsShieldStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00552	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  00558	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0055b	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  0055e	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00562	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00565	51		 push	 ecx
  00566	52		 push	 edx
  00567	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0056c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00571	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00574	50		 push	 eax
  00575	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0057a	d9 9e 9c 26 00
	00		 fstp	 DWORD PTR [esi+9884]

; 5386 : 					break;

  00580	eb 5f		 jmp	 SHORT $LN74@SetItemMLP
$LN177@SetItemMLP:

; 5390 : 				{
; 5391 : 					lpObj->m_MPSkillOpt.MpsShieldStrength2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00582	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00588	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  0058b	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  00590	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00593	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00596	52		 push	 edx
  00597	50		 push	 eax
  00598	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0059d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  005a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005a5	50		 push	 eax
  005a6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  005ab	d9 9e 90 27 00
	00		 fstp	 DWORD PTR [esi+10128]

; 5392 : 					break;

  005b1	eb 2e		 jmp	 SHORT $LN74@SetItemMLP
$LN178@SetItemMLP:

; 5396 : 				{
; 5397 : 					lpObj->m_MPSkillOpt.MpsShieldStrength3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  005b3	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  005b9	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  005bc	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  005bf	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  005c3	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  005c6	51		 push	 ecx
  005c7	52		 push	 edx
  005c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  005cd	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  005d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005d5	50		 push	 eax
  005d6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  005db	d9 9e 18 27 00
	00		 fstp	 DWORD PTR [esi+10008]
$LN74@SetItemMLP:

; 5398 : 					break;
; 5399 : 				}
; 5400 : 			}
; 5401 : 		}
; 5402 : 
; 5403 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  005e1	33 db		 xor	 ebx, ebx
  005e3	33 ff		 xor	 edi, edi
  005e5	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL69@SetItemMLP:

; 5404 : 		{
; 5405 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  005f0	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  005f6	03 cf		 add	 ecx, edi
  005f8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  005fd	83 f8 01	 cmp	 eax, 1
  00600	75 23		 jne	 SHORT $LN68@SetItemMLP

; 5406 : 			{
; 5407 : 				if( lpObj->Magic[iCount].m_Skill == 402 )

  00602	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00608	8b 44 07 08	 mov	 eax, DWORD PTR [edi+eax+8]
  0060c	3d 92 01 00 00	 cmp	 eax, 402		; 00000192H
  00611	74 27		 je	 SHORT $LN179@SetItemMLP

; 5410 : 					break;
; 5411 : 				}
; 5412 : 
; 5413 : 				if( lpObj->Magic[iCount].m_Skill == 440 )

  00613	3d b8 01 00 00	 cmp	 eax, 440		; 000001b8H
  00618	74 57		 je	 SHORT $LN180@SetItemMLP

; 5416 : 					break;
; 5417 : 				}
; 5418 : 
; 5419 : 				if( lpObj->Magic[iCount].m_Skill == 532 )

  0061a	3d 14 02 00 00	 cmp	 eax, 532		; 00000214H
  0061f	0f 84 84 00 00
	00		 je	 $LN181@SetItemMLP
$LN68@SetItemMLP:

; 5398 : 					break;
; 5399 : 				}
; 5400 : 			}
; 5401 : 		}
; 5402 : 
; 5403 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00625	83 c7 18	 add	 edi, 24			; 00000018H
  00628	43		 inc	 ebx
  00629	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  0062f	7c bf		 jl	 SHORT $LL69@SetItemMLP
  00631	5f		 pop	 edi
  00632	5e		 pop	 esi
  00633	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00634	8b e5		 mov	 esp, ebp
  00636	5d		 pop	 ebp
  00637	c2 08 00	 ret	 8
$LN179@SetItemMLP:

; 5408 : 				{
; 5409 : 					lpObj->m_MPSkillOpt.MpsShieldMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0063a	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  00640	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00643	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00646	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0064a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0064d	51		 push	 ecx
  0064e	52		 push	 edx
  0064f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00654	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00659	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0065c	50		 push	 eax
  0065d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00662	5f		 pop	 edi
  00663	d9 9e a8 26 00
	00		 fstp	 DWORD PTR [esi+9896]
  00669	5e		 pop	 esi
  0066a	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  0066b	8b e5		 mov	 esp, ebp
  0066d	5d		 pop	 ebp
  0066e	c2 08 00	 ret	 8
$LN180@SetItemMLP:

; 5414 : 				{
; 5415 : 					lpObj->m_MPSkillOpt.MpsShieldMastery2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00671	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00677	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  0067a	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  0067f	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00682	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00685	52		 push	 edx
  00686	50		 push	 eax
  00687	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0068c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00691	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00694	50		 push	 eax
  00695	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0069a	5f		 pop	 edi
  0069b	d9 9e 8c 27 00
	00		 fstp	 DWORD PTR [esi+10124]
  006a1	5e		 pop	 esi
  006a2	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  006a3	8b e5		 mov	 esp, ebp
  006a5	5d		 pop	 ebp
  006a6	c2 08 00	 ret	 8
$LN181@SetItemMLP:

; 5420 : 				{
; 5421 : 					lpObj->m_MPSkillOpt.MpsShieldMastery3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  006a9	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  006af	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  006b2	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  006b5	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  006b9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  006bc	51		 push	 ecx
  006bd	52		 push	 edx
  006be	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  006c3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  006c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006cb	50		 push	 eax
  006cc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  006d1	5f		 pop	 edi
  006d2	d9 9e 1c 27 00
	00		 fstp	 DWORD PTR [esi+10012]
  006d8	5e		 pop	 esi
  006d9	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  006da	8b e5		 mov	 esp, ebp
  006dc	5d		 pop	 ebp
  006dd	c2 08 00	 ret	 8
$LN62@SetItemMLP:

; 5422 : 					break;
; 5423 : 				}
; 5424 : 			}
; 5425 : 		}
; 5426 : 		break;
; 5427 : 	case 7:
; 5428 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  006e0	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  006e3	33 db		 xor	 ebx, ebx
  006e5	33 f6		 xor	 esi, esi
  006e7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL61@SetItemMLP:

; 5429 : 		{
; 5430 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5431 : 				lpObj->Magic[iCount].m_Skill == 435 )

  006f0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  006f6	03 ce		 add	 ecx, esi
  006f8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  006fd	83 f8 01	 cmp	 eax, 1
  00700	75 10		 jne	 SHORT $LN60@SetItemMLP
  00702	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00708	81 7c 06 08 b3
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 435 ; 000001b3H
  00710	74 0e		 je	 SHORT $LN182@SetItemMLP
$LN60@SetItemMLP:

; 5422 : 					break;
; 5423 : 				}
; 5424 : 			}
; 5425 : 		}
; 5426 : 		break;
; 5427 : 	case 7:
; 5428 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00712	83 c6 18	 add	 esi, 24			; 00000018H
  00715	43		 inc	 ebx
  00716	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0071c	7c d2		 jl	 SHORT $LL61@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0071e	eb 29		 jmp	 SHORT $LN59@SetItemMLP
$LN182@SetItemMLP:

; 5432 : 			{
; 5433 : 				lpObj->m_MPSkillOpt.MpsBowStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00720	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00723	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00727	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0072a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0072e	51		 push	 ecx
  0072f	52		 push	 edx
  00730	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00735	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0073a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0073d	50		 push	 eax
  0073e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00743	d9 9f ac 26 00
	00		 fstp	 DWORD PTR [edi+9900]
$LN59@SetItemMLP:

; 5434 : 				break;
; 5435 : 			}
; 5436 : 		}
; 5437 : 
; 5438 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00749	33 db		 xor	 ebx, ebx
  0074b	33 f6		 xor	 esi, esi
  0074d	8d 49 00	 npad	 3
$LL57@SetItemMLP:

; 5439 : 		{
; 5440 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5441 : 				lpObj->Magic[iCount].m_Skill == 438 )

  00750	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00756	03 ce		 add	 ecx, esi
  00758	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0075d	83 f8 01	 cmp	 eax, 1
  00760	75 10		 jne	 SHORT $LN56@SetItemMLP
  00762	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00768	81 7c 06 08 b6
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 438 ; 000001b6H
  00770	74 15		 je	 SHORT $LN183@SetItemMLP
$LN56@SetItemMLP:

; 5434 : 				break;
; 5435 : 			}
; 5436 : 		}
; 5437 : 
; 5438 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00772	83 c6 18	 add	 esi, 24			; 00000018H
  00775	43		 inc	 ebx
  00776	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0077c	7c d2		 jl	 SHORT $LL57@SetItemMLP
  0077e	5f		 pop	 edi
  0077f	5e		 pop	 esi
  00780	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00781	8b e5		 mov	 esp, ebp
  00783	5d		 pop	 ebp
  00784	c2 08 00	 ret	 8
$LN183@SetItemMLP:

; 5442 : 			{
; 5443 : 				lpObj->m_MPSkillOpt.MpsBowMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00787	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0078a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  0078e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00791	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00795	51		 push	 ecx
  00796	52		 push	 edx
  00797	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0079c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  007a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a4	50		 push	 eax
  007a5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  007aa	d9 9f b0 26 00
	00		 fstp	 DWORD PTR [edi+9904]
  007b0	5f		 pop	 edi
  007b1	5e		 pop	 esi
  007b2	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  007b3	8b e5		 mov	 esp, ebp
  007b5	5d		 pop	 ebp
  007b6	c2 08 00	 ret	 8
$LN53@SetItemMLP:

; 5444 : 				break;
; 5445 : 			}
; 5446 : 		}
; 5447 : 		break;
; 5448 : 	case 8:
; 5449 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  007b9	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  007bc	33 db		 xor	 ebx, ebx
  007be	33 f6		 xor	 esi, esi
$LL52@SetItemMLP:

; 5450 : 		{
; 5451 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5452 : 				lpObj->Magic[iCount].m_Skill == 436 )

  007c0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  007c6	03 ce		 add	 ecx, esi
  007c8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  007cd	83 f8 01	 cmp	 eax, 1
  007d0	75 10		 jne	 SHORT $LN51@SetItemMLP
  007d2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  007d8	81 7c 06 08 b4
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 436 ; 000001b4H
  007e0	74 0e		 je	 SHORT $LN184@SetItemMLP
$LN51@SetItemMLP:

; 5444 : 				break;
; 5445 : 			}
; 5446 : 		}
; 5447 : 		break;
; 5448 : 	case 8:
; 5449 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  007e2	83 c6 18	 add	 esi, 24			; 00000018H
  007e5	43		 inc	 ebx
  007e6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  007ec	7c d2		 jl	 SHORT $LL52@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  007ee	eb 29		 jmp	 SHORT $LN50@SetItemMLP
$LN184@SetItemMLP:

; 5453 : 			{
; 5454 : 				lpObj->m_MPSkillOpt.MpsCrossbowStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  007f0	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  007f3	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  007f7	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  007fa	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  007fe	51		 push	 ecx
  007ff	52		 push	 edx
  00800	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00805	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0080a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0080d	50		 push	 eax
  0080e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00813	d9 9f b4 26 00
	00		 fstp	 DWORD PTR [edi+9908]
$LN50@SetItemMLP:

; 5455 : 				break;
; 5456 : 			}
; 5457 : 		}
; 5458 : 
; 5459 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00819	33 db		 xor	 ebx, ebx
  0081b	33 f6		 xor	 esi, esi
  0081d	8d 49 00	 npad	 3
$LL48@SetItemMLP:

; 5460 : 		{
; 5461 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5462 : 				lpObj->Magic[iCount].m_Skill == 439 )

  00820	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00826	03 ce		 add	 ecx, esi
  00828	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0082d	83 f8 01	 cmp	 eax, 1
  00830	75 10		 jne	 SHORT $LN47@SetItemMLP
  00832	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00838	81 7c 06 08 b7
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 439 ; 000001b7H
  00840	74 15		 je	 SHORT $LN185@SetItemMLP
$LN47@SetItemMLP:

; 5455 : 				break;
; 5456 : 			}
; 5457 : 		}
; 5458 : 
; 5459 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00842	83 c6 18	 add	 esi, 24			; 00000018H
  00845	43		 inc	 ebx
  00846	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0084c	7c d2		 jl	 SHORT $LL48@SetItemMLP
  0084e	5f		 pop	 edi
  0084f	5e		 pop	 esi
  00850	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00851	8b e5		 mov	 esp, ebp
  00853	5d		 pop	 ebp
  00854	c2 08 00	 ret	 8
$LN185@SetItemMLP:

; 5463 : 			{
; 5464 : 				lpObj->m_MPSkillOpt.MpsCrossbowMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00857	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0085a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  0085e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00861	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00865	51		 push	 ecx
  00866	52		 push	 edx
  00867	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0086c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00871	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00874	50		 push	 eax
  00875	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0087a	d9 9f b8 26 00
	00		 fstp	 DWORD PTR [edi+9912]
  00880	5f		 pop	 edi
  00881	5e		 pop	 esi
  00882	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00883	8b e5		 mov	 esp, ebp
  00885	5d		 pop	 ebp
  00886	c2 08 00	 ret	 8
$LN44@SetItemMLP:

; 5465 : 				break;
; 5466 : 			}
; 5467 : 		}
; 5468 : 		break;
; 5469 : 	case 9:
; 5470 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00889	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0088c	33 db		 xor	 ebx, ebx
  0088e	33 f6		 xor	 esi, esi
$LL43@SetItemMLP:

; 5471 : 		{
; 5472 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5473 : 				lpObj->Magic[iCount].m_Skill == 465 )

  00890	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00896	03 ce		 add	 ecx, esi
  00898	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0089d	83 f8 01	 cmp	 eax, 1
  008a0	75 10		 jne	 SHORT $LN42@SetItemMLP
  008a2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  008a8	81 7c 06 08 d1
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 465 ; 000001d1H
  008b0	74 0e		 je	 SHORT $LN186@SetItemMLP
$LN42@SetItemMLP:

; 5465 : 				break;
; 5466 : 			}
; 5467 : 		}
; 5468 : 		break;
; 5469 : 	case 9:
; 5470 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  008b2	83 c6 18	 add	 esi, 24			; 00000018H
  008b5	43		 inc	 ebx
  008b6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  008bc	7c d2		 jl	 SHORT $LL43@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  008be	eb 29		 jmp	 SHORT $LN41@SetItemMLP
$LN186@SetItemMLP:

; 5474 : 			{
; 5475 : 				lpObj->m_MPSkillOpt.MpsStickStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  008c0	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  008c3	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  008c7	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  008ca	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  008ce	51		 push	 ecx
  008cf	52		 push	 edx
  008d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  008d5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  008da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008dd	50		 push	 eax
  008de	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  008e3	d9 9f e8 26 00
	00		 fstp	 DWORD PTR [edi+9960]
$LN41@SetItemMLP:

; 5476 : 				break;
; 5477 : 			}
; 5478 : 		}
; 5479 : 
; 5480 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  008e9	33 db		 xor	 ebx, ebx
  008eb	33 f6		 xor	 esi, esi
  008ed	8d 49 00	 npad	 3
$LL39@SetItemMLP:

; 5481 : 		{
; 5482 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5483 : 				lpObj->Magic[iCount].m_Skill == 467 )

  008f0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  008f6	03 ce		 add	 ecx, esi
  008f8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  008fd	83 f8 01	 cmp	 eax, 1
  00900	75 10		 jne	 SHORT $LN38@SetItemMLP
  00902	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00908	81 7c 06 08 d3
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 467 ; 000001d3H
  00910	74 15		 je	 SHORT $LN187@SetItemMLP
$LN38@SetItemMLP:

; 5476 : 				break;
; 5477 : 			}
; 5478 : 		}
; 5479 : 
; 5480 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00912	83 c6 18	 add	 esi, 24			; 00000018H
  00915	43		 inc	 ebx
  00916	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0091c	7c d2		 jl	 SHORT $LL39@SetItemMLP
  0091e	5f		 pop	 edi
  0091f	5e		 pop	 esi
  00920	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00921	8b e5		 mov	 esp, ebp
  00923	5d		 pop	 ebp
  00924	c2 08 00	 ret	 8
$LN187@SetItemMLP:

; 5484 : 			{
; 5485 : 				lpObj->m_MPSkillOpt.MpsStickMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00927	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0092a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  0092e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00931	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00935	51		 push	 ecx
  00936	52		 push	 edx
  00937	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0093c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00941	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00944	50		 push	 eax
  00945	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0094a	d9 9f f0 26 00
	00		 fstp	 DWORD PTR [edi+9968]
  00950	5f		 pop	 edi
  00951	5e		 pop	 esi
  00952	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00953	8b e5		 mov	 esp, ebp
  00955	5d		 pop	 ebp
  00956	c2 08 00	 ret	 8
$LN35@SetItemMLP:

; 5486 : 				break;
; 5487 : 			}
; 5488 : 		}
; 5489 : 		break;
; 5490 : 	case 10:
; 5491 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00959	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0095c	33 db		 xor	 ebx, ebx
  0095e	33 f6		 xor	 esi, esi
$LL34@SetItemMLP:

; 5492 : 		{
; 5493 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5494 : 				lpObj->Magic[iCount].m_Skill == 466 )

  00960	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00966	03 ce		 add	 ecx, esi
  00968	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0096d	83 f8 01	 cmp	 eax, 1
  00970	75 10		 jne	 SHORT $LN33@SetItemMLP
  00972	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00978	81 7c 06 08 d2
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 466 ; 000001d2H
  00980	74 0e		 je	 SHORT $LN188@SetItemMLP
$LN33@SetItemMLP:

; 5486 : 				break;
; 5487 : 			}
; 5488 : 		}
; 5489 : 		break;
; 5490 : 	case 10:
; 5491 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00982	83 c6 18	 add	 esi, 24			; 00000018H
  00985	43		 inc	 ebx
  00986	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0098c	7c d2		 jl	 SHORT $LL34@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  0098e	eb 29		 jmp	 SHORT $LN32@SetItemMLP
$LN188@SetItemMLP:

; 5495 : 			{
; 5496 : 				lpObj->m_MPSkillOpt.MpsTomeStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00990	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00993	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00997	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0099a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0099e	51		 push	 ecx
  0099f	52		 push	 edx
  009a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  009a5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  009aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009ad	50		 push	 eax
  009ae	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  009b3	d9 9f ec 26 00
	00		 fstp	 DWORD PTR [edi+9964]
$LN32@SetItemMLP:

; 5497 : 				break;
; 5498 : 			}
; 5499 : 		}
; 5500 : 
; 5501 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  009b9	33 db		 xor	 ebx, ebx
  009bb	33 f6		 xor	 esi, esi
  009bd	8d 49 00	 npad	 3
$LL30@SetItemMLP:

; 5502 : 		{
; 5503 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5504 : 				lpObj->Magic[iCount].m_Skill == 468 )

  009c0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  009c6	03 ce		 add	 ecx, esi
  009c8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  009cd	83 f8 01	 cmp	 eax, 1
  009d0	75 10		 jne	 SHORT $LN29@SetItemMLP
  009d2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  009d8	81 7c 06 08 d4
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 468 ; 000001d4H
  009e0	74 15		 je	 SHORT $LN189@SetItemMLP
$LN29@SetItemMLP:

; 5497 : 				break;
; 5498 : 			}
; 5499 : 		}
; 5500 : 
; 5501 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  009e2	83 c6 18	 add	 esi, 24			; 00000018H
  009e5	43		 inc	 ebx
  009e6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  009ec	7c d2		 jl	 SHORT $LL30@SetItemMLP
  009ee	5f		 pop	 edi
  009ef	5e		 pop	 esi
  009f0	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  009f1	8b e5		 mov	 esp, ebp
  009f3	5d		 pop	 ebp
  009f4	c2 08 00	 ret	 8
$LN189@SetItemMLP:

; 5505 : 			{
; 5506 : 				lpObj->m_MPSkillOpt.MpsTomeMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  009f7	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  009fa	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  009fe	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00a01	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00a05	51		 push	 ecx
  00a06	52		 push	 edx
  00a07	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00a0c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00a11	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a14	50		 push	 eax
  00a15	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00a1a	d9 9f f4 26 00
	00		 fstp	 DWORD PTR [edi+9972]
  00a20	5f		 pop	 edi
  00a21	5e		 pop	 esi
  00a22	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00a23	8b e5		 mov	 esp, ebp
  00a25	5d		 pop	 ebp
  00a26	c2 08 00	 ret	 8
$LN26@SetItemMLP:

; 5507 : 				break;
; 5508 : 			}
; 5509 : 		}
; 5510 : 		break;
; 5511 : 	case 11:
; 5512 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00a29	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00a2c	33 db		 xor	 ebx, ebx
  00a2e	33 ff		 xor	 edi, edi
$LL25@SetItemMLP:

; 5513 : 		{
; 5514 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5515 : 				lpObj->Magic[iCount].m_Skill == 527 )

  00a30	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00a36	03 cf		 add	 ecx, edi
  00a38	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00a3d	83 f8 01	 cmp	 eax, 1
  00a40	75 10		 jne	 SHORT $LN24@SetItemMLP
  00a42	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00a48	81 7c 07 08 0f
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 527 ; 0000020fH
  00a50	74 0e		 je	 SHORT $LN190@SetItemMLP
$LN24@SetItemMLP:

; 5507 : 				break;
; 5508 : 			}
; 5509 : 		}
; 5510 : 		break;
; 5511 : 	case 11:
; 5512 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00a52	83 c7 18	 add	 edi, 24			; 00000018H
  00a55	43		 inc	 ebx
  00a56	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00a5c	7c d2		 jl	 SHORT $LL25@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  00a5e	eb 29		 jmp	 SHORT $LN23@SetItemMLP
$LN190@SetItemMLP:

; 5516 : 			{
; 5517 : 				lpObj->m_MPSkillOpt.MpsScepterStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00a60	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00a63	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00a67	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00a6a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00a6e	51		 push	 ecx
  00a6f	52		 push	 edx
  00a70	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00a75	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00a7a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a7d	50		 push	 eax
  00a7e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00a83	d9 9e 10 27 00
	00		 fstp	 DWORD PTR [esi+10000]
$LN23@SetItemMLP:

; 5518 : 				break;
; 5519 : 			}
; 5520 : 		}
; 5521 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00a89	33 db		 xor	 ebx, ebx
  00a8b	33 ff		 xor	 edi, edi
  00a8d	8d 49 00	 npad	 3
$LL21@SetItemMLP:

; 5522 : 		{
; 5523 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5524 : 				lpObj->Magic[iCount].m_Skill == 529 )

  00a90	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00a96	03 cf		 add	 ecx, edi
  00a98	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00a9d	83 f8 01	 cmp	 eax, 1
  00aa0	75 10		 jne	 SHORT $LN20@SetItemMLP
  00aa2	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00aa8	81 7c 07 08 11
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 529 ; 00000211H
  00ab0	74 0e		 je	 SHORT $LN191@SetItemMLP
$LN20@SetItemMLP:

; 5518 : 				break;
; 5519 : 			}
; 5520 : 		}
; 5521 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00ab2	83 c7 18	 add	 edi, 24			; 00000018H
  00ab5	43		 inc	 ebx
  00ab6	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00abc	7c d2		 jl	 SHORT $LL21@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  00abe	eb 29		 jmp	 SHORT $LN19@SetItemMLP
$LN191@SetItemMLP:

; 5525 : 			{
; 5526 : 				lpObj->m_MPSkillOpt.MpsUseScepterPetStr = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00ac0	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00ac3	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00ac7	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00aca	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00ace	51		 push	 ecx
  00acf	52		 push	 edx
  00ad0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00ad5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00ada	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00add	50		 push	 eax
  00ade	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00ae3	d9 9e 20 27 00
	00		 fstp	 DWORD PTR [esi+10016]
$LN19@SetItemMLP:

; 5527 : 				break;
; 5528 : 			}
; 5529 : 		}
; 5530 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00ae9	33 db		 xor	 ebx, ebx
  00aeb	33 ff		 xor	 edi, edi
  00aed	8d 49 00	 npad	 3
$LL17@SetItemMLP:

; 5531 : 		{
; 5532 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5533 : 				lpObj->Magic[iCount].m_Skill == 531 )

  00af0	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00af6	03 cf		 add	 ecx, edi
  00af8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00afd	83 f8 01	 cmp	 eax, 1
  00b00	75 10		 jne	 SHORT $LN16@SetItemMLP
  00b02	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00b08	81 7c 07 08 13
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 531 ; 00000213H
  00b10	74 0e		 je	 SHORT $LN192@SetItemMLP
$LN16@SetItemMLP:

; 5527 : 				break;
; 5528 : 			}
; 5529 : 		}
; 5530 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00b12	83 c7 18	 add	 edi, 24			; 00000018H
  00b15	43		 inc	 ebx
  00b16	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00b1c	7c d2		 jl	 SHORT $LL17@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  00b1e	eb 29		 jmp	 SHORT $LN15@SetItemMLP
$LN192@SetItemMLP:

; 5534 : 			{
; 5535 : 				lpObj->m_MPSkillOpt.MpsScepterMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00b20	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00b23	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00b27	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00b2a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00b2e	51		 push	 ecx
  00b2f	52		 push	 edx
  00b30	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00b35	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00b3a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b3d	50		 push	 eax
  00b3e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00b43	d9 9e 14 27 00
	00		 fstp	 DWORD PTR [esi+10004]
$LN15@SetItemMLP:

; 5536 : 				break;
; 5537 : 			}
; 5538 : 		}
; 5539 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00b49	33 db		 xor	 ebx, ebx
  00b4b	33 ff		 xor	 edi, edi
  00b4d	8d 49 00	 npad	 3
$LL13@SetItemMLP:

; 5540 : 		{
; 5541 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5542 : 				lpObj->Magic[iCount].m_Skill == 533 )

  00b50	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00b56	03 cf		 add	 ecx, edi
  00b58	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00b5d	83 f8 01	 cmp	 eax, 1
  00b60	75 10		 jne	 SHORT $LN12@SetItemMLP
  00b62	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00b68	81 7c 07 08 15
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 533 ; 00000215H
  00b70	74 15		 je	 SHORT $LN193@SetItemMLP
$LN12@SetItemMLP:

; 5536 : 				break;
; 5537 : 			}
; 5538 : 		}
; 5539 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00b72	83 c7 18	 add	 edi, 24			; 00000018H
  00b75	43		 inc	 ebx
  00b76	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00b7c	7c d2		 jl	 SHORT $LL13@SetItemMLP
  00b7e	5f		 pop	 edi
  00b7f	5e		 pop	 esi
  00b80	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00b81	8b e5		 mov	 esp, ebp
  00b83	5d		 pop	 ebp
  00b84	c2 08 00	 ret	 8
$LN193@SetItemMLP:

; 5543 : 			{
; 5544 : 				lpObj->m_MPSkillOpt.MpsCommandAttackInc = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00b87	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00b8a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00b8e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00b91	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00b95	51		 push	 ecx
  00b96	52		 push	 edx
  00b97	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00b9c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00ba1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba4	50		 push	 eax
  00ba5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00baa	5f		 pop	 edi
  00bab	d9 9e 24 27 00
	00		 fstp	 DWORD PTR [esi+10020]
  00bb1	5e		 pop	 esi
  00bb2	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00bb3	8b e5		 mov	 esp, ebp
  00bb5	5d		 pop	 ebp
  00bb6	c2 08 00	 ret	 8
$LN9@SetItemMLP:

; 5545 : 				break;
; 5546 : 			}
; 5547 : 		}
; 5548 : 		break;
; 5549 : 	case 12:
; 5550 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00bb9	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00bbc	33 db		 xor	 ebx, ebx
  00bbe	33 f6		 xor	 esi, esi
$LL8@SetItemMLP:

; 5551 : 		{
; 5552 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5553 : 				lpObj->Magic[iCount].m_Skill == 568 )

  00bc0	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00bc6	03 ce		 add	 ecx, esi
  00bc8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00bcd	83 f8 01	 cmp	 eax, 1
  00bd0	75 10		 jne	 SHORT $LN7@SetItemMLP
  00bd2	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00bd8	81 7c 06 08 38
	02 00 00	 cmp	 DWORD PTR [esi+eax+8], 568 ; 00000238H
  00be0	74 0e		 je	 SHORT $LN194@SetItemMLP
$LN7@SetItemMLP:

; 5545 : 				break;
; 5546 : 			}
; 5547 : 		}
; 5548 : 		break;
; 5549 : 	case 12:
; 5550 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00be2	83 c6 18	 add	 esi, 24			; 00000018H
  00be5	43		 inc	 ebx
  00be6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00bec	7c d2		 jl	 SHORT $LL8@SetItemMLP

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  00bee	eb 29		 jmp	 SHORT $LN6@SetItemMLP
$LN194@SetItemMLP:

; 5554 : 			{
; 5555 : 				lpObj->m_MPSkillOpt.MpsFistStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00bf0	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00bf3	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00bf7	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00bfa	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00bfe	51		 push	 ecx
  00bff	52		 push	 edx
  00c00	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00c05	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00c0a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c0d	50		 push	 eax
  00c0e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00c13	d9 9f 94 27 00
	00		 fstp	 DWORD PTR [edi+10132]
$LN6@SetItemMLP:

; 5556 : 				break;
; 5557 : 			}
; 5558 : 		}
; 5559 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00c19	33 db		 xor	 ebx, ebx
  00c1b	33 f6		 xor	 esi, esi
  00c1d	8d 49 00	 npad	 3
$LL4@SetItemMLP:

; 5560 : 		{
; 5561 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5562 : 				lpObj->Magic[iCount].m_Skill == 571 )

  00c20	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00c26	03 ce		 add	 ecx, esi
  00c28	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00c2d	83 f8 01	 cmp	 eax, 1
  00c30	75 10		 jne	 SHORT $LN3@SetItemMLP
  00c32	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00c38	81 7c 06 08 3b
	02 00 00	 cmp	 DWORD PTR [esi+eax+8], 571 ; 0000023bH
  00c40	74 15		 je	 SHORT $LN195@SetItemMLP
$LN3@SetItemMLP:

; 5556 : 				break;
; 5557 : 			}
; 5558 : 		}
; 5559 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00c42	83 c6 18	 add	 esi, 24			; 00000018H
  00c45	43		 inc	 ebx
  00c46	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00c4c	7c d2		 jl	 SHORT $LL4@SetItemMLP
  00c4e	5f		 pop	 edi
  00c4f	5e		 pop	 esi
  00c50	5b		 pop	 ebx

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00c51	8b e5		 mov	 esp, ebp
  00c53	5d		 pop	 ebp
  00c54	c2 08 00	 ret	 8
$LN195@SetItemMLP:

; 5563 : 			{
; 5564 : 				lpObj->m_MPSkillOpt.MpsFistMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00c57	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  00c5a	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00c5e	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00c61	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00c65	51		 push	 ecx
  00c66	52		 push	 edx
  00c67	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00c6c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00c71	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c74	50		 push	 eax
  00c75	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00c7a	d9 9f 98 27 00
	00		 fstp	 DWORD PTR [edi+10136]
$LN224@SetItemMLP:
  00c80	5f		 pop	 edi
  00c81	5e		 pop	 esi
  00c82	5b		 pop	 ebx
$LN2@SetItemMLP:

; 5565 : 				break;
; 5566 : 			}
; 5567 : 		}
; 5568 : 		break;
; 5569 : 	/*case 20:
; 5570 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5571 : 		{
; 5572 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5573 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5574 : 			{
; 5575 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5576 : 				break;
; 5577 : 			}
; 5578 : 		}
; 5579 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5580 : 		{
; 5581 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5582 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5583 : 			{
; 5584 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5585 : 				break;
; 5586 : 			}
; 5587 : 		}
; 5588 : 		break;
; 5589 : 	case 21:
; 5590 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5591 : 		{
; 5592 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5593 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5594 : 			{
; 5595 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5596 : 				break;
; 5597 : 			}
; 5598 : 		}
; 5599 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5600 : 		{
; 5601 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5602 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5603 : 			{
; 5604 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5605 : 				break;
; 5606 : 			}
; 5607 : 		}
; 5608 : 		break;
; 5609 : 	case 22:
; 5610 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5611 : 		{
; 5612 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5613 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5614 : 			{
; 5615 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5616 : 				break;
; 5617 : 			}
; 5618 : 		}
; 5619 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5620 : 		{
; 5621 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5622 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5623 : 			{
; 5624 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5625 : 				break;
; 5626 : 			}
; 5627 : 		}
; 5628 : 		break;
; 5629 : 	case 23:
; 5630 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5631 : 		{
; 5632 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5633 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5634 : 			{
; 5635 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5636 : 				break;
; 5637 : 			}
; 5638 : 		}
; 5639 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5640 : 		{
; 5641 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5642 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5643 : 			{
; 5644 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5645 : 				break;
; 5646 : 			}
; 5647 : 		}
; 5648 : 		break;
; 5649 : 	case 24:
; 5650 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5651 : 		{
; 5652 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5653 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5654 : 			{
; 5655 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5656 : 				break;
; 5657 : 			}
; 5658 : 		}
; 5659 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5660 : 		{
; 5661 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5662 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5663 : 			{
; 5664 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5665 : 				break;
; 5666 : 			}
; 5667 : 		}
; 5668 : 		break;
; 5669 : 	case 25:
; 5670 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5671 : 		{
; 5672 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5673 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5674 : 			{
; 5675 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5676 : 				break;
; 5677 : 			}
; 5678 : 		}
; 5679 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)
; 5680 : 		{
; 5681 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5682 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5683 : 			{
; 5684 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5685 : 				break;
; 5686 : 			}
; 5687 : 		}
; 5688 : 		break;*/
; 5689 : 	}
; 5690 : }

  00c83	8b e5		 mov	 esp, ebp
  00c85	5d		 pop	 ebp
  00c86	c2 08 00	 ret	 8
  00c89	8d 49 00	 npad	 3
$LN227@SetItemMLP:
  00c8c	00 00 00 00	 DD	 $LN131@SetItemMLP
  00c90	00 00 00 00	 DD	 $LN122@SetItemMLP
  00c94	00 00 00 00	 DD	 $LN113@SetItemMLP
  00c98	00 00 00 00	 DD	 $LN104@SetItemMLP
  00c9c	00 00 00 00	 DD	 $LN95@SetItemMLP
  00ca0	00 00 00 00	 DD	 $LN86@SetItemMLP
  00ca4	00 00 00 00	 DD	 $LN77@SetItemMLP
  00ca8	00 00 00 00	 DD	 $LN62@SetItemMLP
  00cac	00 00 00 00	 DD	 $LN53@SetItemMLP
  00cb0	00 00 00 00	 DD	 $LN44@SetItemMLP
  00cb4	00 00 00 00	 DD	 $LN35@SetItemMLP
  00cb8	00 00 00 00	 DD	 $LN26@SetItemMLP
  00cbc	00 00 00 00	 DD	 $LN9@SetItemMLP
?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill
_TEXT	ENDS
PUBLIC	?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill
; Function compile flags: /Ogtp
;	COMDAT ?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iType$ = 12						; size = 4
?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill, COMDAT
; _this$ = ecx

; 5693 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5694 : 	if( iType != ITEMGET(13,4) )

  00003	81 7d 0c 04 1a
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6660 ; 00001a04H
  0000a	75 36		 jne	 SHORT $LN9@SetPetItem
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5695 : 		return;
; 5696 : 
; 5697 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00011	33 f6		 xor	 esi, esi
$LL4@SetPetItem:

; 5698 : 	{
; 5699 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 5700 : 			lpObj->Magic[iCount].m_Skill == 510 )

  00013	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00019	03 ce		 add	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00020	83 f8 01	 cmp	 eax, 1
  00023	75 10		 jne	 SHORT $LN3@SetPetItem
  00025	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  0002b	81 7c 30 08 fe
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 510 ; 000001feH
  00033	74 0b		 je	 SHORT $LN11@SetPetItem
$LN3@SetPetItem:

; 5695 : 		return;
; 5696 : 
; 5697 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00035	83 c6 18	 add	 esi, 24			; 00000018H
  00038	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0003e	7c d3		 jl	 SHORT $LL4@SetPetItem
$LN11@SetPetItem:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
$LN9@SetPetItem:

; 5701 : 		{
; 5702 : 			//lpObj->m_MPSkillOpt.MpsDarkHorseStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5703 : 			break;
; 5704 : 		}
; 5705 : 	}
; 5706 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill
_TEXT	ENDS
PUBLIC	?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetCurSkillLevel, COMDAT
; _this$ = ecx

; 5709 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 5710 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	33 f6		 xor	 esi, esi
  0000d	8d 49 00	 npad	 3
$LL4@GetCurSkil:

; 5711 : 	{
; 5712 : 		if( lpObj->Magic[iCount].IsMagic() &&
; 5713 : 			lpObj->Magic[iCount].m_Skill == iSkill )

  00010	8b 8b c8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1224]
  00016	03 ce		 add	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001d	85 c0		 test	 eax, eax
  0001f	74 0f		 je	 SHORT $LN3@GetCurSkil
  00021	8b 83 c8 04 00
	00		 mov	 eax, DWORD PTR [ebx+1224]
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0002a	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  0002e	74 16		 je	 SHORT $LN8@GetCurSkil
$LN3@GetCurSkil:

; 5710 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00030	83 c6 18	 add	 esi, 24			; 00000018H
  00033	47		 inc	 edi
  00034	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0003a	7c d4		 jl	 SHORT $LL4@GetCurSkil

; 5715 : 	}
; 5716 : 	return -1;

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	83 c8 ff	 or	 eax, -1
  00041	5b		 pop	 ebx

; 5717 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN8@GetCurSkil:

; 5714 : 			return lpObj->Magic[iCount].m_Level;

  00046	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  00049	0f b6 44 d0 04	 movzx	 eax, BYTE PTR [eax+edx*8+4]
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 5717 : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
_TEXT	ENDS
PUBLIC	??_C@_01INIBCBCB@f?$AA@				; `string'
PUBLIC	??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_01INIBCBCB@f?$AA@
CONST	SEGMENT
??_C@_01INIBCBCB@f?$AA@ DB 'f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@
CONST	SEGMENT
??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@ DB '%%.%d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z
_TEXT	SEGMENT
tv94 = -280						; size = 4
_szTemp$ = -276						; size = 256
_szPos$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_dbValue$ = 8						; size = 8
_iPos$ = 16						; size = 4
?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z PROC	; CMasterLevelSkillTreeSystem::RoundValue, COMDAT
; _this$ = ecx

; 5720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5721 : 	char szTemp[256];
; 5722 : 	char szPos[16];
; 5723 : 
; 5724 : 	sprintf(szPos,"%%.%d",iPos);

  00013	8b 45 10	 mov	 eax, DWORD PTR _iPos$[ebp]
  00016	57		 push	 edi
  00017	50		 push	 eax
  00018	8d 4d ec	 lea	 ecx, DWORD PTR _szPos$[ebp]
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 _sprintf

; 5725 : 	strcat(szPos,"f");

  00026	8d 7d ec	 lea	 edi, DWORD PTR _szPos$[ebp]
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	4f		 dec	 edi
  0002d	8d 49 00	 npad	 3
$LL3@RoundValue:
  00030	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00033	47		 inc	 edi
  00034	84 c0		 test	 al, al
  00036	75 f8		 jne	 SHORT $LL3@RoundValue

; 5726 : 	sprintf(szTemp,szPos,dbValue);

  00038	dd 45 08	 fld	 QWORD PTR _dbValue$[ebp]
  0003b	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ??_C@_01INIBCBCB@f?$AA@
  00042	83 ec 08	 sub	 esp, 8
  00045	8d 45 ec	 lea	 eax, DWORD PTR _szPos$[ebp]
  00048	dd 1c 24	 fstp	 QWORD PTR [esp]
  0004b	50		 push	 eax
  0004c	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  00052	51		 push	 ecx
  00053	66 89 17	 mov	 WORD PTR [edi], dx
  00056	e8 00 00 00 00	 call	 _sprintf

; 5727 : 	return (float)atof(szTemp);

  0005b	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$[ebp]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 _atof
  00067	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR tv94[ebp]

; 5728 : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	d9 85 e8 fe ff
	ff		 fld	 DWORD PTR tv94[ebp]
  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	33 cd		 xor	 ecx, ebp
  0007b	5f		 pop	 edi
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 0c 00	 ret	 12			; 0000000cH
?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ENDP	; CMasterLevelSkillTreeSystem::RoundValue
_TEXT	ENDS
PUBLIC	??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@ ; `string'
PUBLIC	?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
EXTRN	?GetSkillGroup@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillGroup
;	COMDAT ??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@
CONST	SEGMENT
??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@ DB '['
	DB	'GetSkillAttackDamage] fail!!! - %d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_iValuType$ = -16					; size = 4
_nSkillGroup$ = -12					; size = 4
_iBrandOfSkill$ = -8					; size = 2
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage, COMDAT
; _this$ = ecx

; 5731 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 5732 : 	if( lpObj == NULL )

  00006	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	75 08		 jne	 SHORT $LN13@GetSkillAt

; 5733 : 		return 0.0f;

  0000f	d9 ee		 fldz

; 5787 : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN13@GetSkillAt:
  00017	56		 push	 esi

; 5734 : 
; 5735 : 	if( !this->CheckRequireStatus(iSkill) )

  00018	8b 75 0c	 mov	 esi, DWORD PTR _iSkill$[ebp]
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00021	85 c0		 test	 eax, eax
  00023	75 09		 jne	 SHORT $LN12@GetSkillAt

; 5736 : 		return 0.0f;

  00025	d9 ee		 fldz
  00027	5e		 pop	 esi

; 5787 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN12@GetSkillAt:
  0002e	53		 push	 ebx
  0002f	57		 push	 edi

; 5737 : 
; 5738 : 	int nSkillGroup = MagicDamageC.GetSkillGroup(iSkill);

  00030	56		 push	 esi
  00031	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00036	e8 00 00 00 00	 call	 ?GetSkillGroup@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillGroup

; 5739 : 	WORD nBrandOfSkill = iSkill;
; 5740 : 	WORD iBrandOfSkill;
; 5741 : 	int iValuType;
; 5742 : 	int nCnt = 0;
; 5743 : 
; 5744 : 	while( this->CheckRequireStatus(nBrandOfSkill) )

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	0f b7 fe	 movzx	 edi, si
  00041	0f b7 f6	 movzx	 esi, si
  00044	56		 push	 esi
  00045	89 45 f4	 mov	 DWORD PTR _nSkillGroup$[ebp], eax
  00048	33 db		 xor	 ebx, ebx
  0004a	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  0004f	85 c0		 test	 eax, eax
  00051	74 5f		 je	 SHORT $LN23@GetSkillAt
$LL11@GetSkillAt:

; 5745 : 	{
; 5746 : 		iBrandOfSkill = nBrandOfSkill;

  00053	0f b7 c7	 movzx	 eax, di

; 5747 : 
; 5748 : 		if( MagicDamageC.GetSkillGroup(iBrandOfSkill) != nSkillGroup )

  00056	56		 push	 esi
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0005c	89 45 f8	 mov	 DWORD PTR _iBrandOfSkill$[ebp], eax
  0005f	e8 00 00 00 00	 call	 ?GetSkillGroup@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillGroup
  00064	3b 45 f4	 cmp	 eax, DWORD PTR _nSkillGroup$[ebp]
  00067	0f 85 84 00 00
	00		 jne	 $LN2@GetSkillAt

; 5749 : 		{
; 5750 : 			iBrandOfSkill = 0;
; 5751 : 			break;
; 5752 : 		}
; 5753 : 
; 5754 : 		iValuType = MagicDamageC.SkillGet(iBrandOfSkill);

  0006d	56		 push	 esi
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00073	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00078	89 45 f0	 mov	 DWORD PTR _iValuType$[ebp], eax

; 5755 : 
; 5756 : 		if( iValuType == 3 ||
; 5757 : 			iValuType == 4 ||
; 5758 : 			iValuType == 5 ||
; 5759 : 			iValuType == 22 )

  0007b	83 f8 03	 cmp	 eax, 3
  0007e	74 32		 je	 SHORT $LN23@GetSkillAt
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 2d		 je	 SHORT $LN23@GetSkillAt
  00085	83 f8 05	 cmp	 eax, 5
  00088	74 28		 je	 SHORT $LN23@GetSkillAt
  0008a	83 f8 16	 cmp	 eax, 22			; 00000016H
  0008d	74 23		 je	 SHORT $LN23@GetSkillAt

; 5760 : 		{
; 5761 : 			break;
; 5762 : 		}
; 5763 : 		
; 5764 : 		nBrandOfSkill = MagicDamageC.GetSkillReqBrandOfSkill(iBrandOfSkill);

  0008f	56		 push	 esi
  00090	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00095	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill

; 5765 : 		nCnt++;

  0009a	43		 inc	 ebx
  0009b	0f b7 f8	 movzx	 edi, ax

; 5766 : 
; 5767 : 		if( nCnt > 2 )

  0009e	83 fb 02	 cmp	 ebx, 2
  000a1	7f 59		 jg	 SHORT $LN20@GetSkillAt

; 5739 : 	WORD nBrandOfSkill = iSkill;
; 5740 : 	WORD iBrandOfSkill;
; 5741 : 	int iValuType;
; 5742 : 	int nCnt = 0;
; 5743 : 
; 5744 : 	while( this->CheckRequireStatus(nBrandOfSkill) )

  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b f7		 mov	 esi, edi
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  000ae	85 c0		 test	 eax, eax
  000b0	75 a1		 jne	 SHORT $LL11@GetSkillAt
$LN23@GetSkillAt:

; 5770 : 			iBrandOfSkill = 0;
; 5771 : 			break;
; 5772 : 		}
; 5773 : 	}
; 5774 : 
; 5775 : 	if( iBrandOfSkill > 0 )

  000b2	66 83 7d f8 00	 cmp	 WORD PTR _iBrandOfSkill$[ebp], 0
  000b7	76 38		 jbe	 SHORT $LN2@GetSkillAt

; 5776 : 	{
; 5777 : 		for(int n = 0; n < MAX_MAGIC; n++)

  000b9	33 ff		 xor	 edi, edi
  000bb	33 f6		 xor	 esi, esi
  000bd	8d 49 00	 npad	 3
$LL4@GetSkillAt:

; 5778 : 		{
; 5779 : 			if( lpObj->Magic[n].IsMagic() == TRUE &&
; 5780 : 				lpObj->Magic[n].m_Skill == iBrandOfSkill )

  000c0	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  000c3	8b 8b c8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1224]
  000c9	03 ce		 add	 ecx, esi
  000cb	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000d0	83 f8 01	 cmp	 eax, 1
  000d3	75 10		 jne	 SHORT $LN3@GetSkillAt
  000d5	0f b7 45 f8	 movzx	 eax, WORD PTR _iBrandOfSkill$[ebp]
  000d9	8b 93 c8 04 00
	00		 mov	 edx, DWORD PTR [ebx+1224]
  000df	39 44 32 08	 cmp	 DWORD PTR [edx+esi+8], eax
  000e3	74 34		 je	 SHORT $LN21@GetSkillAt
$LN3@GetSkillAt:

; 5776 : 	{
; 5777 : 		for(int n = 0; n < MAX_MAGIC; n++)

  000e5	83 c6 18	 add	 esi, 24			; 00000018H
  000e8	47		 inc	 edi
  000e9	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  000ef	7c cf		 jl	 SHORT $LL4@GetSkillAt
$LN2@GetSkillAt:

; 5783 : 			}
; 5784 : 		}
; 5785 : 	}
; 5786 : 	return 0.0f;

  000f1	d9 ee		 fldz
  000f3	5f		 pop	 edi
  000f4	5b		 pop	 ebx
  000f5	5e		 pop	 esi

; 5787 : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 08 00	 ret	 8
$LN20@GetSkillAt:

; 5768 : 		{
; 5769 : 			LogAddTD("[GetSkillAttackDamage] fail!!! - %d",iSkill);

  000fc	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  000ff	51		 push	 ecx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5783 : 			}
; 5784 : 		}
; 5785 : 	}
; 5786 : 	return 0.0f;

  0010b	d9 ee		 fldz
  0010d	83 c4 08	 add	 esp, 8
  00110	5f		 pop	 edi
  00111	5b		 pop	 ebx
  00112	5e		 pop	 esi

; 5787 : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN21@GetSkillAt:

; 5781 : 			{
; 5782 : 				return this->GetMasterSkillValue(iValuType,lpObj->Magic[n].m_Level);	

  00119	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0011c	0f b6 44 ca 04	 movzx	 eax, BYTE PTR [edx+ecx*8+4]
  00121	8b 4d f0	 mov	 ecx, DWORD PTR _iValuType$[ebp]
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0012e	5f		 pop	 edi
  0012f	5b		 pop	 ebx
  00130	5e		 pop	 esi

; 5787 : }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 08 00	 ret	 8
?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -68					; size = 4
_partynum$ = -64					; size = 4
tv429 = -60						; size = 4
_lpMagic$GSCopy$ = -56					; size = 4
_n$218714 = -56						; size = 4
_nEffectValue$ = -52					; size = 4
tv594 = -48						; size = 4
tv591 = -48						; size = 4
_fSkillValue$ = -48					; size = 4
_n$218692 = -48						; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty, COMDAT
; _this$ = ecx

; 6027 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6067 : 					}
; 6068 : 				}
; 6069 : 			}
; 6070 : 		}
; 6071 : 	}
; 6072 : 
; 6073 : 	int Time = 0;
; 6074 : 
; 6075 : 	if( lpMagic->m_Skill == 573 )

  00010	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00017	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00023	89 4d bc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00026	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0002b	89 45 c8	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], eax
  0002e	74 1c		 je	 SHORT $LN38@MLS_SkillM@2

; 6028 : 	int skillSuccess = TRUE;
; 6029 : 	LPOBJ lpObj = &gObj[aIndex];
; 6030 : 	int number;
; 6031 : 
; 6032 : 	if( lpObj->Type != OBJ_USER && lpObj->m_RecallMon == -1 )

  00030	83 be 50 04 00
	00 ff		 cmp	 DWORD PTR [esi+1104], -1
  00037	75 13		 jne	 SHORT $LN38@MLS_SkillM@2
$LN60@MLS_SkillM@2:

; 6033 : 		return FALSE;

  00039	33 c0		 xor	 eax, eax
  0003b	5e		 pop	 esi

; 6152 : }

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN38@MLS_SkillM@2:

; 6034 : 
; 6035 : 	if( lpObj->Class != CLASS_MONK )

  0004c	66 83 be b8 00
	00 00 06	 cmp	 WORD PTR [esi+184], 6

; 6036 : 		return FALSE;

  00054	75 e3		 jne	 SHORT $LN60@MLS_SkillM@2

; 6037 : 
; 6038 : 	int partynum = 0;
; 6039 : 	int partycount;
; 6040 : 	int dis;
; 6041 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 6042 : 	int nEffectValue;
; 6043 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  00056	83 c8 ff	 or	 eax, -1
  00059	53		 push	 ebx

; 6044 : 	LPOBJ lpPartyObj;
; 6045 : 
; 6046 : 	partynum = lpObj->PartyNumber;

  0005a	8b 9e 2c 04 00
	00		 mov	 ebx, DWORD PTR [esi+1068]
  00060	57		 push	 edi
  00061	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  00064	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  00067	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  0006a	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  0006d	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  00070	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  00073	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  00076	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  00079	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  0007c	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax
  0007f	89 5d c0	 mov	 DWORD PTR _partynum$[ebp], ebx

; 6047 : 
; 6048 : 	if( partynum != -1 )

  00082	3b d8		 cmp	 ebx, eax
  00084	74 5b		 je	 SHORT $LN41@MLS_SkillM@2

; 6049 : 	{
; 6050 : 		partycount = gParty.m_PartyS[partynum].Count;
; 6051 : 
; 6052 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00086	6b db 68	 imul	 ebx, 104		; 00000068H
  00089	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _n$218692[ebp], 0
  00090	81 c3 0c 00 00
	00		 add	 ebx, OFFSET ?gParty@@3VPartyClass@@A+12
$LL44@MLS_SkillM@2:

; 6053 : 		{
; 6054 : 			number = gParty.m_PartyS[partynum].Number[n];

  00096	8b 03		 mov	 eax, DWORD PTR [ebx]

; 6055 : 
; 6056 : 			if( number >= 0 )

  00098	85 c0		 test	 eax, eax
  0009a	78 36		 js	 SHORT $LN25@MLS_SkillM@2

; 6057 : 			{
; 6058 : 				lpPartyObj = &gObj[number];

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a2	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H

; 6059 : 
; 6060 : 
; 6061 : 				if( lpPartyObj->MapNumber == lpObj->MapNumber )

  000a8	8a 94 08 49 01
	00 00		 mov	 dl, BYTE PTR [eax+ecx+329]
  000af	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  000b2	3a 96 49 01 00
	00		 cmp	 dl, BYTE PTR [esi+329]
  000b8	75 18		 jne	 SHORT $LN25@MLS_SkillM@2

; 6062 : 				{
; 6063 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000ba	57		 push	 edi
  000bb	56		 push	 esi
  000bc	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000c1	83 c4 08	 add	 esp, 8

; 6064 : 					if( dis < 4 )

  000c4	83 f8 04	 cmp	 eax, 4
  000c7	7d 09		 jge	 SHORT $LN25@MLS_SkillM@2

; 6065 : 					{
; 6066 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000c9	8b 07		 mov	 eax, DWORD PTR [edi]
  000cb	8b 4d d0	 mov	 ecx, DWORD PTR _n$218692[ebp]
  000ce	89 44 8d d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+ecx*4], eax
$LN25@MLS_SkillM@2:

; 6049 : 	{
; 6050 : 		partycount = gParty.m_PartyS[partynum].Count;
; 6051 : 
; 6052 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000d2	8b 45 d0	 mov	 eax, DWORD PTR _n$218692[ebp]
  000d5	40		 inc	 eax
  000d6	83 c3 04	 add	 ebx, 4
  000d9	89 45 d0	 mov	 DWORD PTR _n$218692[ebp], eax
  000dc	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000df	7c b5		 jl	 SHORT $LL44@MLS_SkillM@2
$LN41@MLS_SkillM@2:

; 6067 : 					}
; 6068 : 				}
; 6069 : 			}
; 6070 : 		}
; 6071 : 	}
; 6072 : 
; 6073 : 	int Time = 0;
; 6074 : 
; 6075 : 	if( lpMagic->m_Skill == 573 )

  000e1	8b 55 c8	 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  000e4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e7	89 45 c4	 mov	 DWORD PTR tv429[ebp], eax
  000ea	3d 3d 02 00 00	 cmp	 eax, 573		; 0000023dH
  000ef	75 69		 jne	 SHORT $LN20@MLS_SkillM@2

; 6076 : 	{
; 6077 : 		nEffectValue = g_SkillAdditionInfo.m_IncreaseHealthEffectStart + (lpObj->Energy+lpObj->AddEnergy-g_SkillAdditionInfo.m_IncreaseHealthEffectSub)/g_SkillAdditionInfo.m_IncreaseHealthEffectDiv;

  000f1	0f b7 0d ea 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3306
  000f8	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  000ff	0f b7 be fa 00
	00 00		 movzx	 edi, WORD PTR [esi+250]
  00106	0f b7 15 e8 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3304
  0010d	2b c1		 sub	 eax, ecx
  0010f	03 c7		 add	 eax, edi
  00111	89 45 d0	 mov	 DWORD PTR tv594[ebp], eax
  00114	db 45 d0	 fild	 DWORD PTR tv594[ebp]
  00117	89 55 d0	 mov	 DWORD PTR tv591[ebp], edx
  0011a	d8 35 ec 0c 00
	00		 fdiv	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3308
  00120	db 45 d0	 fild	 DWORD PTR tv591[ebp]
  00123	de c1		 faddp	 ST(1), ST(0)
  00125	e8 00 00 00 00	 call	 __ftol2_sse

; 6078 : 
; 6079 : 		if( g_SkillAdditionInfo.m_IncreaseHealthEffectMax > 0 && nEffectValue > g_SkillAdditionInfo.m_IncreaseHealthEffectMax )

  0012a	8b 0d f0 0c 00
	00		 mov	 ecx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3312
  00130	89 45 cc	 mov	 DWORD PTR _nEffectValue$[ebp], eax
  00133	85 c9		 test	 ecx, ecx
  00135	74 07		 je	 SHORT $LN19@MLS_SkillM@2
  00137	3b c1		 cmp	 eax, ecx
  00139	76 03		 jbe	 SHORT $LN19@MLS_SkillM@2

; 6080 : 		{
; 6081 : 			nEffectValue = g_SkillAdditionInfo.m_IncreaseHealthEffectMax;

  0013b	89 4d cc	 mov	 DWORD PTR _nEffectValue$[ebp], ecx
$LN19@MLS_SkillM@2:

; 6082 : 		}
; 6083 : 
; 6084 : 		Time = g_SkillAdditionInfo.m_IncreaseHealthTimeStart+lpObj->Energy/g_SkillAdditionInfo.m_IncreaseHealthTimeDiv;

  0013e	0f b7 0d f6 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3318
  00145	8b c7		 mov	 eax, edi
  00147	99		 cdq
  00148	f7 f9		 idiv	 ecx
  0014a	0f b7 3d f4 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3316
  00151	03 f8		 add	 edi, eax

; 6085 : 		
; 6086 : 		if( g_SkillAdditionInfo.m_IncreaseHealthTimeMax > 0 && Time > g_SkillAdditionInfo.m_IncreaseHealthTimeMax )

  00153	a1 f8 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3320

; 6087 : 		{
; 6088 : 			Time = g_SkillAdditionInfo.m_IncreaseHealthTimeMax;
; 6089 : 		}
; 6090 : 	}

  00158	eb 67		 jmp	 SHORT $LN59@MLS_SkillM@2
$LN20@MLS_SkillM@2:

; 6091 : 	else if( lpMagic->m_Skill == 569 )

  0015a	3d 39 02 00 00	 cmp	 eax, 569		; 00000239H
  0015f	0f 85 26 02 00
	00		 jne	 $LN16@MLS_SkillM@2

; 6092 : 	{
; 6093 : 		nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectStart + (lpObj->Energy+lpObj->AddEnergy-g_SkillAdditionInfo.m_IncreaseBlockEffectSub)/g_SkillAdditionInfo.m_IncreaseBlockEffectDiv;

  00165	0f b7 15 fe 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3326
  0016c	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00173	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0017a	0f b7 3d 00 0d
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3328
  00181	2b c2		 sub	 eax, edx
  00183	03 c1		 add	 eax, ecx
  00185	99		 cdq
  00186	f7 ff		 idiv	 edi
  00188	0f b7 15 fc 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3324
  0018f	03 c2		 add	 eax, edx

; 6094 : 
; 6095 : 		if( g_SkillAdditionInfo.m_IncreaseBlockEffectMax > 0 && nEffectValue > g_SkillAdditionInfo.m_IncreaseBlockEffectMax )

  00191	8b 15 04 0d 00
	00		 mov	 edx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332
  00197	89 45 cc	 mov	 DWORD PTR _nEffectValue$[ebp], eax
  0019a	85 d2		 test	 edx, edx
  0019c	74 07		 je	 SHORT $LN15@MLS_SkillM@2
  0019e	3b c2		 cmp	 eax, edx
  001a0	76 03		 jbe	 SHORT $LN15@MLS_SkillM@2

; 6096 : 		{
; 6097 : 			nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectMax;

  001a2	89 55 cc	 mov	 DWORD PTR _nEffectValue$[ebp], edx
$LN15@MLS_SkillM@2:

; 6098 : 		}
; 6099 : 
; 6100 : 		Time = g_SkillAdditionInfo.m_IncreaseBlockTimeStart+lpObj->Energy/g_SkillAdditionInfo.m_IncreaseBlockTimeDiv;

  001a5	0f b7 3d 0a 0d
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3338
  001ac	8b c1		 mov	 eax, ecx
  001ae	99		 cdq
  001af	f7 ff		 idiv	 edi
  001b1	8b f8		 mov	 edi, eax
  001b3	0f b7 05 08 0d
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3336
  001ba	03 f8		 add	 edi, eax

; 6101 : 		
; 6102 : 		if( g_SkillAdditionInfo.m_IncreaseBlockTimeMax > 0 && Time > g_SkillAdditionInfo.m_IncreaseBlockTimeMax )

  001bc	a1 0c 0d 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340
$LN59@MLS_SkillM@2:
  001c1	85 c0		 test	 eax, eax
  001c3	74 06		 je	 SHORT $LN14@MLS_SkillM@2
  001c5	3b f8		 cmp	 edi, eax
  001c7	76 02		 jbe	 SHORT $LN14@MLS_SkillM@2

; 6103 : 		{
; 6104 : 			Time = g_SkillAdditionInfo.m_IncreaseBlockTimeMax;

  001c9	8b f8		 mov	 edi, eax
$LN14@MLS_SkillM@2:

; 6105 : 		}
; 6106 : 	}
; 6107 : 	else
; 6108 : 	{
; 6109 : 		return FALSE;
; 6110 : 	}
; 6111 : 
; 6112 : 	float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  001cb	8b 5d c8	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$[ebp]
  001ce	0f b6 4b 04	 movzx	 ecx, BYTE PTR [ebx+4]
  001d2	8b 55 c4	 mov	 edx, DWORD PTR tv429[ebp]
  001d5	51		 push	 ecx
  001d6	52		 push	 edx
  001d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001dc	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001e1	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 6113 : 
; 6114 : 	if( partynum == -1 )

  001ea	83 7d c0 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  001ee	d9 5d d0	 fstp	 DWORD PTR _fSkillValue$[ebp]
  001f1	0f 85 bb 00 00
	00		 jne	 $LN12@MLS_SkillM@2

; 6115 : 	{
; 6116 : 
; 6117 : 		if( lpMagic->m_Skill == 573 )

  001f7	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001fa	3d 3d 02 00 00	 cmp	 eax, 573		; 0000023dH
  001ff	75 51		 jne	 SHORT $LN11@MLS_SkillM@2

; 6118 : 		{
; 6119 : 			gObjApplyBuffEffectDuration(lpObj,155,ADD_OPTION_VITALITY_MONK,nEffectValue+fSkillValue,0,0,Time);

  00201	db 45 cc	 fild	 DWORD PTR _nEffectValue$[ebp]
  00204	57		 push	 edi
  00205	6a 00		 push	 0
  00207	6a 00		 push	 0
  00209	d8 45 d0	 fadd	 DWORD PTR _fSkillValue$[ebp]
  0020c	e8 00 00 00 00	 call	 __ftol2_sse
  00211	50		 push	 eax
  00212	6a 0b		 push	 11			; 0000000bH
  00214	68 9b 00 00 00	 push	 155			; 0000009bH
  00219	56		 push	 esi
  0021a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 6120 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0021f	8b 06		 mov	 eax, DWORD PTR [esi]
  00221	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  00225	6a 01		 push	 1
  00227	50		 push	 eax
  00228	51		 push	 ecx
  00229	56		 push	 esi
  0022a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6121 : 			gObjCalCharacter(lpObj->m_Index);

  0022f	8b 16		 mov	 edx, DWORD PTR [esi]
  00231	52		 push	 edx
  00232	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00237	83 c4 30	 add	 esp, 48			; 00000030H
  0023a	5f		 pop	 edi
  0023b	5b		 pop	 ebx

; 6147 : 				}
; 6148 : 			}
; 6149 : 		}
; 6150 : 	}
; 6151 : 	return TRUE;

  0023c	b8 01 00 00 00	 mov	 eax, 1
  00241	5e		 pop	 esi

; 6152 : }

  00242	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00245	33 cd		 xor	 ecx, ebp
  00247	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024c	8b e5		 mov	 esp, ebp
  0024e	5d		 pop	 ebp
  0024f	c2 08 00	 ret	 8
$LN11@MLS_SkillM@2:

; 6122 : 		}
; 6123 : 		else if( lpMagic->m_Skill == 569 )

  00252	3d 39 02 00 00	 cmp	 eax, 569		; 00000239H
  00257	0f 85 16 01 00
	00		 jne	 $LN43@MLS_SkillM@2

; 6124 : 		{
; 6125 : 			gObjApplyBuffEffectDuration(lpObj,153,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpObj->m_SuccessfulBlocking*fSkillValue/100.0f,0,0,Time);

  0025d	db 86 9c 04 00
	00		 fild	 DWORD PTR [esi+1180]
  00263	57		 push	 edi
  00264	6a 00		 push	 0
  00266	6a 00		 push	 0
  00268	d8 4d d0	 fmul	 DWORD PTR _fSkillValue$[ebp]
  0026b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00271	da 45 cc	 fiadd	 DWORD PTR _nEffectValue$[ebp]
  00274	e8 00 00 00 00	 call	 __ftol2_sse
  00279	50		 push	 eax
  0027a	6a 4a		 push	 74			; 0000004aH
  0027c	68 99 00 00 00	 push	 153			; 00000099H
  00281	56		 push	 esi
  00282	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 6126 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  00287	8b 06		 mov	 eax, DWORD PTR [esi]
  00289	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  0028d	6a 01		 push	 1
  0028f	50		 push	 eax
  00290	51		 push	 ecx
  00291	56		 push	 esi
  00292	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00297	83 c4 2c	 add	 esp, 44			; 0000002cH
  0029a	5f		 pop	 edi
  0029b	5b		 pop	 ebx

; 6147 : 				}
; 6148 : 			}
; 6149 : 		}
; 6150 : 	}
; 6151 : 	return TRUE;

  0029c	b8 01 00 00 00	 mov	 eax, 1
  002a1	5e		 pop	 esi

; 6152 : }

  002a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a5	33 cd		 xor	 ecx, ebp
  002a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ac	8b e5		 mov	 esp, ebp
  002ae	5d		 pop	 ebp
  002af	c2 08 00	 ret	 8
$LN12@MLS_SkillM@2:

; 6127 : 		}
; 6128 : 	}
; 6129 : 	else
; 6130 : 	{
; 6131 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  002b2	33 c0		 xor	 eax, eax
  002b4	89 45 c8	 mov	 DWORD PTR _n$218714[ebp], eax
  002b7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL37@MLS_SkillM@2:

; 6132 : 		{
; 6133 : 			if( ApplyPartyIndex[n] != -1 )

  002c0	8b 74 85 d4	 mov	 esi, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  002c4	d9 45 d0	 fld	 DWORD PTR _fSkillValue$[ebp]
  002c7	83 fe ff	 cmp	 esi, -1
  002ca	0f 84 91 00 00
	00		 je	 $LN55@MLS_SkillM@2

; 6134 : 			{
; 6135 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 6136 : 
; 6137 : 				if( lpMagic->m_Skill == 573 )

  002d0	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  002d3	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  002d9	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002df	3d 3d 02 00 00	 cmp	 eax, 573		; 0000023dH
  002e4	75 38		 jne	 SHORT $LN3@MLS_SkillM@2

; 6138 : 				{
; 6139 : 					gObjApplyBuffEffectDuration(lpPartyObj,155,ADD_OPTION_VITALITY_MONK,nEffectValue+fSkillValue,0,0,Time);

  002e6	da 45 cc	 fiadd	 DWORD PTR _nEffectValue$[ebp]
  002e9	57		 push	 edi
  002ea	6a 00		 push	 0
  002ec	6a 00		 push	 0
  002ee	e8 00 00 00 00	 call	 __ftol2_sse
  002f3	50		 push	 eax
  002f4	6a 0b		 push	 11			; 0000000bH
  002f6	68 9b 00 00 00	 push	 155			; 0000009bH
  002fb	56		 push	 esi
  002fc	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 6140 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  00301	8b 16		 mov	 edx, DWORD PTR [esi]
  00303	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  00307	6a 01		 push	 1
  00309	52		 push	 edx
  0030a	50		 push	 eax
  0030b	56		 push	 esi
  0030c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6141 : 					gObjCalCharacter(lpPartyObj->m_Index);

  00311	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00313	51		 push	 ecx
  00314	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00319	83 c4 30	 add	 esp, 48			; 00000030H
  0031c	eb 45		 jmp	 SHORT $LN6@MLS_SkillM@2
$LN3@MLS_SkillM@2:

; 6142 : 				}
; 6143 : 				else if( lpMagic->m_Skill == 569 )

  0031e	3d 39 02 00 00	 cmp	 eax, 569		; 00000239H
  00323	75 3c		 jne	 SHORT $LN55@MLS_SkillM@2

; 6144 : 				{
; 6145 : 					gObjApplyBuffEffectDuration(lpPartyObj,153,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpPartyObj->m_SuccessfulBlocking*fSkillValue/100.0f,0,0,Time);

  00325	da 8e 9c 04 00
	00		 fimul	 DWORD PTR [esi+1180]
  0032b	57		 push	 edi
  0032c	6a 00		 push	 0
  0032e	6a 00		 push	 0
  00330	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00336	da 45 cc	 fiadd	 DWORD PTR _nEffectValue$[ebp]
  00339	e8 00 00 00 00	 call	 __ftol2_sse
  0033e	50		 push	 eax
  0033f	6a 4a		 push	 74			; 0000004aH
  00341	68 99 00 00 00	 push	 153			; 00000099H
  00346	56		 push	 esi
  00347	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 6146 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0034c	8b 16		 mov	 edx, DWORD PTR [esi]
  0034e	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  00352	6a 01		 push	 1
  00354	52		 push	 edx
  00355	50		 push	 eax
  00356	56		 push	 esi
  00357	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0035c	83 c4 2c	 add	 esp, 44			; 0000002cH
  0035f	eb 02		 jmp	 SHORT $LN6@MLS_SkillM@2
$LN55@MLS_SkillM@2:

; 6142 : 				}
; 6143 : 				else if( lpMagic->m_Skill == 569 )

  00361	dd d8		 fstp	 ST(0)
$LN6@MLS_SkillM@2:

; 6127 : 		}
; 6128 : 	}
; 6129 : 	else
; 6130 : 	{
; 6131 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00363	8b 45 c8	 mov	 eax, DWORD PTR _n$218714[ebp]
  00366	40		 inc	 eax
  00367	89 45 c8	 mov	 DWORD PTR _n$218714[ebp], eax
  0036a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0036d	0f 8c 4d ff ff
	ff		 jl	 $LL37@MLS_SkillM@2
$LN43@MLS_SkillM@2:
  00373	5f		 pop	 edi
  00374	5b		 pop	 ebx

; 6147 : 				}
; 6148 : 			}
; 6149 : 		}
; 6150 : 	}
; 6151 : 	return TRUE;

  00375	b8 01 00 00 00	 mov	 eax, 1
  0037a	5e		 pop	 esi

; 6152 : }

  0037b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0037e	33 cd		 xor	 ecx, ebp
  00380	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00385	8b e5		 mov	 esp, ebp
  00387	5d		 pop	 ebp
  00388	c2 08 00	 ret	 8
$LN16@MLS_SkillM@2:
  0038b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038e	5f		 pop	 edi
  0038f	5b		 pop	 ebx
  00390	33 cd		 xor	 ecx, ebp
  00392	33 c0		 xor	 eax, eax
  00394	5e		 pop	 esi
  00395	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039a	8b e5		 mov	 esp, ebp
  0039c	5d		 pop	 ebp
  0039d	c2 08 00	 ret	 8
?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_n$218756 = -60						; size = 4
_partynum$ = -60					; size = 4
_this$GSCopy$ = -56					; size = 4
_fSkillValue2$ = -56					; size = 4
_lpMagic$GSCopy$ = -52					; size = 4
_fSkillValue$ = -52					; size = 4
_nEffectValue$ = -48					; size = 4
_n$218739 = -48						; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery, COMDAT
; _this$ = ecx

; 6155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 6156 : 	int skillSuccess = TRUE;
; 6157 : 	LPOBJ lpObj = &gObj[aIndex];

  00014	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001a	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00020	57		 push	 edi

; 6158 : 	int number;
; 6159 : 
; 6160 : 	if( lpObj->Type != OBJ_USER && lpObj->m_RecallMon == -1 )

  00021	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00026	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00029	89 4d c8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 6177 : 	{
; 6178 : 		partycount = gParty.m_PartyS[partynum].Count;
; 6179 : 
; 6180 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0002c	89 7d cc	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], edi
  0002f	74 1d		 je	 SHORT $LN29@MLS_SkillM@3

; 6158 : 	int number;
; 6159 : 
; 6160 : 	if( lpObj->Type != OBJ_USER && lpObj->m_RecallMon == -1 )

  00031	83 be 50 04 00
	00 ff		 cmp	 DWORD PTR [esi+1104], -1
  00038	75 14		 jne	 SHORT $LN29@MLS_SkillM@3
$LN37@MLS_SkillM@3:
  0003a	5f		 pop	 edi

; 6161 : 		return FALSE;

  0003b	33 c0		 xor	 eax, eax
  0003d	5e		 pop	 esi

; 6253 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN29@MLS_SkillM@3:

; 6162 : 
; 6163 : 	if( lpObj->Class != CLASS_MONK )

  0004e	66 83 be b8 00
	00 00 06	 cmp	 WORD PTR [esi+184], 6

; 6164 : 		return FALSE;

  00056	75 e2		 jne	 SHORT $LN37@MLS_SkillM@3

; 6165 : 
; 6166 : 	int partynum = 0;
; 6167 : 	int partycount;
; 6168 : 	int dis;
; 6169 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 6170 : 	int nEffectValue;
; 6171 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  00058	83 c8 ff	 or	 eax, -1
  0005b	53		 push	 ebx

; 6172 : 	LPOBJ lpPartyObj;
; 6173 : 
; 6174 : 	partynum = lpObj->PartyNumber;

  0005c	8b 9e 2c 04 00
	00		 mov	 ebx, DWORD PTR [esi+1068]
  00062	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  00065	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  00068	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  0006b	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  0006e	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  00071	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  00074	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  00077	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  0007a	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  0007d	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax
  00080	89 5d c4	 mov	 DWORD PTR _partynum$[ebp], ebx

; 6175 : 
; 6176 : 	if( partynum != -1 )

  00083	3b d8		 cmp	 ebx, eax
  00085	74 5e		 je	 SHORT $LN32@MLS_SkillM@3

; 6177 : 	{
; 6178 : 		partycount = gParty.m_PartyS[partynum].Count;
; 6179 : 
; 6180 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00087	6b db 68	 imul	 ebx, 104		; 00000068H
  0008a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _n$218739[ebp], 0
  00091	81 c3 0c 00 00
	00		 add	 ebx, OFFSET ?gParty@@3VPartyClass@@A+12
$LL34@MLS_SkillM@3:

; 6181 : 		{
; 6182 : 			number = gParty.m_PartyS[partynum].Number[n];

  00097	8b 03		 mov	 eax, DWORD PTR [ebx]

; 6183 : 
; 6184 : 			if( number >= 0 )

  00099	85 c0		 test	 eax, eax
  0009b	78 39		 js	 SHORT $LN17@MLS_SkillM@3

; 6185 : 			{
; 6186 : 				lpPartyObj = &gObj[number];

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a3	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H

; 6187 : 
; 6188 : 
; 6189 : 				if( lpPartyObj->MapNumber == lpObj->MapNumber )

  000a9	8a 94 08 49 01
	00 00		 mov	 dl, BYTE PTR [eax+ecx+329]
  000b0	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  000b3	3a 96 49 01 00
	00		 cmp	 dl, BYTE PTR [esi+329]
  000b9	75 18		 jne	 SHORT $LN30@MLS_SkillM@3

; 6190 : 				{
; 6191 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000bb	57		 push	 edi
  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000c2	83 c4 08	 add	 esp, 8

; 6192 : 					if( dis < 4 )

  000c5	83 f8 04	 cmp	 eax, 4
  000c8	7d 09		 jge	 SHORT $LN30@MLS_SkillM@3

; 6193 : 					{
; 6194 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000ca	8b 07		 mov	 eax, DWORD PTR [edi]
  000cc	8b 4d d0	 mov	 ecx, DWORD PTR _n$218739[ebp]
  000cf	89 44 8d d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+ecx*4], eax
$LN30@MLS_SkillM@3:
  000d3	8b 7d cc	 mov	 edi, DWORD PTR _lpMagic$GSCopy$[ebp]
$LN17@MLS_SkillM@3:

; 6177 : 	{
; 6178 : 		partycount = gParty.m_PartyS[partynum].Count;
; 6179 : 
; 6180 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000d6	8b 45 d0	 mov	 eax, DWORD PTR _n$218739[ebp]
  000d9	40		 inc	 eax
  000da	83 c3 04	 add	 ebx, 4
  000dd	89 45 d0	 mov	 DWORD PTR _n$218739[ebp], eax
  000e0	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e3	7c b2		 jl	 SHORT $LL34@MLS_SkillM@3
$LN32@MLS_SkillM@3:

; 6195 : 					}
; 6196 : 				}
; 6197 : 			}
; 6198 : 		}
; 6199 : 	}
; 6200 : 
; 6201 : 	int Time = 0;
; 6202 : 
; 6203 : 	if( lpMagic->m_Skill == 572 )

  000e5	81 7f 08 3c 02
	00 00		 cmp	 DWORD PTR [edi+8], 572	; 0000023cH
  000ec	0f 85 94 01 00
	00		 jne	 $LN12@MLS_SkillM@3

; 6204 : 	{
; 6205 : 		nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectStart + (lpObj->Energy+lpObj->AddEnergy-g_SkillAdditionInfo.m_IncreaseBlockEffectSub)/g_SkillAdditionInfo.m_IncreaseBlockEffectDiv;

  000f2	0f b7 15 fe 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3326
  000f9	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00100	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  00107	0f b7 1d 00 0d
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3328
  0010e	2b c2		 sub	 eax, edx
  00110	03 c1		 add	 eax, ecx
  00112	99		 cdq
  00113	f7 fb		 idiv	 ebx
  00115	0f b7 15 fc 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3324
  0011c	03 c2		 add	 eax, edx

; 6206 : 
; 6207 : 		if( g_SkillAdditionInfo.m_IncreaseBlockEffectMax > 0 && nEffectValue > g_SkillAdditionInfo.m_IncreaseBlockEffectMax )

  0011e	8b 15 04 0d 00
	00		 mov	 edx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3332
  00124	89 45 d0	 mov	 DWORD PTR _nEffectValue$[ebp], eax
  00127	85 d2		 test	 edx, edx
  00129	74 07		 je	 SHORT $LN11@MLS_SkillM@3
  0012b	3b c2		 cmp	 eax, edx
  0012d	76 03		 jbe	 SHORT $LN11@MLS_SkillM@3

; 6208 : 		{
; 6209 : 			nEffectValue = g_SkillAdditionInfo.m_IncreaseBlockEffectMax;

  0012f	89 55 d0	 mov	 DWORD PTR _nEffectValue$[ebp], edx
$LN11@MLS_SkillM@3:

; 6210 : 		}
; 6211 : 
; 6212 : 		Time = g_SkillAdditionInfo.m_IncreaseBlockTimeStart+lpObj->Energy/g_SkillAdditionInfo.m_IncreaseBlockTimeDiv;

  00132	0f b7 1d 0a 0d
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3338
  00139	8b c1		 mov	 eax, ecx
  0013b	99		 cdq
  0013c	f7 fb		 idiv	 ebx
  0013e	8b d8		 mov	 ebx, eax
  00140	0f b7 05 08 0d
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3336
  00147	03 d8		 add	 ebx, eax

; 6213 : 		
; 6214 : 		if( g_SkillAdditionInfo.m_IncreaseBlockTimeMax > 0 && Time > g_SkillAdditionInfo.m_IncreaseBlockTimeMax )

  00149	a1 0c 0d 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3340
  0014e	85 c0		 test	 eax, eax
  00150	74 06		 je	 SHORT $LN10@MLS_SkillM@3
  00152	3b d8		 cmp	 ebx, eax
  00154	76 02		 jbe	 SHORT $LN10@MLS_SkillM@3

; 6215 : 		{
; 6216 : 			Time = g_SkillAdditionInfo.m_IncreaseBlockTimeMax;

  00156	8b d8		 mov	 ebx, eax
$LN10@MLS_SkillM@3:

; 6217 : 		}
; 6218 : 	}
; 6219 : 	else
; 6220 : 	{
; 6221 : 		return FALSE;
; 6222 : 	}
; 6223 : 
; 6224 : 	float fSkillValue = GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  00158	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0015b	6a 01		 push	 1
  0015d	68 3c 02 00 00	 push	 572			; 0000023cH
  00162	56		 push	 esi
  00163	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00168	d9 5d cc	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 6225 : 	float fSkillValue2 = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0016b	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0016f	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00172	51		 push	 ecx
  00173	52		 push	 edx
  00174	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00179	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0017e	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 6226 : 	
; 6227 : 
; 6228 : 	if( partynum == -1 )

  00187	83 7d c4 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0018b	d9 5d c8	 fstp	 DWORD PTR _fSkillValue2$[ebp]
  0018e	75 69		 jne	 SHORT $LN8@MLS_SkillM@3

; 6229 : 	{
; 6230 : 		if( lpMagic->m_Skill == 572 )

  00190	81 7f 08 3c 02
	00 00		 cmp	 DWORD PTR [edi+8], 572	; 0000023cH
  00197	0f 85 d1 00 00
	00		 jne	 $LN33@MLS_SkillM@3

; 6231 : 		{
; 6232 : 			gObjApplyBuffEffectDuration(lpObj,154,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpObj->m_SuccessfulBlocking*fSkillValue/100.0f,ADD_OPTION_DEFENSE,fSkillValue2,Time);

  0019d	d9 45 c8	 fld	 DWORD PTR _fSkillValue2$[ebp]
  001a0	53		 push	 ebx
  001a1	e8 00 00 00 00	 call	 __ftol2_sse
  001a6	db 86 9c 04 00
	00		 fild	 DWORD PTR [esi+1180]
  001ac	50		 push	 eax
  001ad	6a 03		 push	 3
  001af	d8 4d cc	 fmul	 DWORD PTR _fSkillValue$[ebp]
  001b2	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  001b8	da 45 d0	 fiadd	 DWORD PTR _nEffectValue$[ebp]
  001bb	e8 00 00 00 00	 call	 __ftol2_sse
  001c0	50		 push	 eax
  001c1	6a 4a		 push	 74			; 0000004aH
  001c3	68 9a 00 00 00	 push	 154			; 0000009aH
  001c8	56		 push	 esi
  001c9	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 6233 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001ce	8b 06		 mov	 eax, DWORD PTR [esi]
  001d0	0f b7 4f 08	 movzx	 ecx, WORD PTR [edi+8]
  001d4	6a 01		 push	 1
  001d6	50		 push	 eax
  001d7	51		 push	 ecx
  001d8	56		 push	 esi
  001d9	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001de	83 c4 2c	 add	 esp, 44			; 0000002cH
  001e1	5b		 pop	 ebx
  001e2	5f		 pop	 edi

; 6248 : 				}
; 6249 : 			}
; 6250 : 		}
; 6251 : 	}
; 6252 : 	return TRUE;

  001e3	b8 01 00 00 00	 mov	 eax, 1
  001e8	5e		 pop	 esi

; 6253 : }

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	33 cd		 xor	 ecx, ebp
  001ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c2 08 00	 ret	 8
$LN8@MLS_SkillM@3:

; 6234 : 		}
; 6235 : 	}
; 6236 : 	else
; 6237 : 	{
; 6238 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  001f9	33 c0		 xor	 eax, eax
  001fb	89 45 c4	 mov	 DWORD PTR _n$218756[ebp], eax
  001fe	8b ff		 npad	 2
$LL35@MLS_SkillM@3:

; 6239 : 		{
; 6240 : 			if( ApplyPartyIndex[n] != -1 )

  00200	8b 74 85 d4	 mov	 esi, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  00204	83 fe ff	 cmp	 esi, -1
  00207	74 5c		 je	 SHORT $LN4@MLS_SkillM@3

; 6241 : 			{
; 6242 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  00209	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0020f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6243 : 
; 6244 : 				if( lpMagic->m_Skill == 572 )

  00215	81 7f 08 3c 02
	00 00		 cmp	 DWORD PTR [edi+8], 572	; 0000023cH
  0021c	75 47		 jne	 SHORT $LN4@MLS_SkillM@3

; 6245 : 				{
; 6246 : 					gObjApplyBuffEffectDuration(lpPartyObj,154,ADD_OPTION_SUCCESSFULBLOCKING,nEffectValue+lpPartyObj->m_SuccessfulBlocking*fSkillValue/100.0f,ADD_OPTION_DEFENSE,fSkillValue2,Time);

  0021e	d9 45 c8	 fld	 DWORD PTR _fSkillValue2$[ebp]
  00221	53		 push	 ebx
  00222	e8 00 00 00 00	 call	 __ftol2_sse
  00227	db 86 9c 04 00
	00		 fild	 DWORD PTR [esi+1180]
  0022d	50		 push	 eax
  0022e	6a 03		 push	 3
  00230	d8 4d cc	 fmul	 DWORD PTR _fSkillValue$[ebp]
  00233	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00239	da 45 d0	 fiadd	 DWORD PTR _nEffectValue$[ebp]
  0023c	e8 00 00 00 00	 call	 __ftol2_sse
  00241	50		 push	 eax
  00242	6a 4a		 push	 74			; 0000004aH
  00244	68 9a 00 00 00	 push	 154			; 0000009aH
  00249	56		 push	 esi
  0024a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 6247 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0024f	8b 16		 mov	 edx, DWORD PTR [esi]
  00251	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  00255	6a 01		 push	 1
  00257	52		 push	 edx
  00258	50		 push	 eax
  00259	56		 push	 esi
  0025a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0025f	8b 45 c4	 mov	 eax, DWORD PTR _n$218756[ebp]
  00262	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN4@MLS_SkillM@3:

; 6234 : 		}
; 6235 : 	}
; 6236 : 	else
; 6237 : 	{
; 6238 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00265	40		 inc	 eax
  00266	89 45 c4	 mov	 DWORD PTR _n$218756[ebp], eax
  00269	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0026c	7c 92		 jl	 SHORT $LL35@MLS_SkillM@3
$LN33@MLS_SkillM@3:
  0026e	5b		 pop	 ebx
  0026f	5f		 pop	 edi

; 6248 : 				}
; 6249 : 			}
; 6250 : 		}
; 6251 : 	}
; 6252 : 	return TRUE;

  00270	b8 01 00 00 00	 mov	 eax, 1
  00275	5e		 pop	 esi

; 6253 : }

  00276	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00279	33 cd		 xor	 ecx, ebp
  0027b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00280	8b e5		 mov	 esp, ebp
  00282	5d		 pop	 ebp
  00283	c2 08 00	 ret	 8
$LN12@MLS_SkillM@3:
  00286	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00289	5b		 pop	 ebx
  0028a	5f		 pop	 edi
  0028b	33 cd		 xor	 ecx, ebp
  0028d	33 c0		 xor	 eax, eax
  0028f	5e		 pop	 esi
  00290	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00295	8b e5		 mov	 esp, ebp
  00297	5d		 pop	 ebp
  00298	c2 08 00	 ret	 8
?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
_TEXT	ENDS
PUBLIC	??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@ ; `string'
PUBLIC	?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@
CONST	SEGMENT
??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@ DB '['
	DB	'%s][%s] SkillHellFire2 error on start', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start, COMDAT
; _this$ = ecx

; 6338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 6339 : 	LPOBJ lpObj = &gObj[aIndex];

  00005	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00008	8b f7		 mov	 esi, edi
  0000a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00010	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6340 : 
; 6341 : 	if(lpObj->SkillHellFire2State != 0)

  00016	80 be 14 11 00
	00 00		 cmp	 BYTE PTR [esi+4372], 0
  0001d	74 1e		 je	 SHORT $LN1@MLS_SkillH

; 6342 : 	{
; 6343 : 		LogAddTD("[%s][%s] SkillHellFire2 error on start",lpObj->AccountID,lpObj->Name);

  0001f	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  00022	50		 push	 eax
  00023	83 c6 6c	 add	 esi, 108		; 0000006cH
  00026	56		 push	 esi
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi

; 6344 : 		return false;

  00036	33 c0		 xor	 eax, eax
  00038	5e		 pop	 esi

; 6353 : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN1@MLS_SkillH:

; 6345 : 	}
; 6346 : 
; 6347 : 	lpObj->SkillHellFire2Time = GetTickCount();

  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 6348 : 	lpObj->SkillHellFire2State = 1;
; 6349 : 	lpObj->SkillHellFire2Count = 0;
; 6350 : 
; 6351 : 	GCMagicAttackNumberSend(lpObj,395,aIndex,1);

  00043	6a 01		 push	 1
  00045	57		 push	 edi
  00046	68 8b 01 00 00	 push	 395			; 0000018bH
  0004b	56		 push	 esi
  0004c	89 86 18 11 00
	00		 mov	 DWORD PTR [esi+4376], eax
  00052	66 c7 86 14 11
	00 00 01 00	 mov	 WORD PTR [esi+4372], 1
  0005b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	5f		 pop	 edi

; 6352 : 	return true;

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	5e		 pop	 esi

; 6353 : }

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
_TEXT	ENDS
PUBLIC	?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -16					; size = 4
tv255 = -12						; size = 4
tv476 = -8						; size = 4
_HitCount$ = -4						; size = 4
_bAttack$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison, COMDAT
; _this$ = ecx

; 6356 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 6357 : 	LPOBJ lpObj = &gObj[aIndex];
; 6358 : 	int tmpvar = 0;
; 6359 : 	int bAttack = 0;
; 6360 : 	int tObjNum;
; 6361 : 	int count = 0;
; 6362 : 	int HitCount = 0;
; 6363 : 
; 6364 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00009	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00012	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00018	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001e	33 c0		 xor	 eax, eax
  00020	57		 push	 edi
  00021	89 45 08	 mov	 DWORD PTR _bAttack$[ebp], eax
  00024	89 45 fc	 mov	 DWORD PTR _HitCount$[ebp], eax
  00027	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0002a	6a 01		 push	 1
  0002c	50		 push	 eax
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6365 : 
; 6366 : 	int EnableAttack;
; 6367 : 	int bForceAttack = TRUE;
; 6368 : 	int DuelIndex = lpObj->m_iDuelUser;

  00034	8b 86 b8 0e 00
	00		 mov	 eax, DWORD PTR [esi+3768]
  0003a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	8d be b0 08 00
	00		 lea	 edi, DWORD PTR [esi+2224]
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	89 45 f0	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  0004c	89 7d f8	 mov	 DWORD PTR tv476[ebp], edi
  0004f	c7 45 f4 4b 00
	00 00		 mov	 DWORD PTR tv255[ebp], 75 ; 0000004bH
$LL26@MLS_SkillE:

; 6369 : 
; 6370 : 	while ( true )
; 6371 : 	{
; 6372 : 		if(lpObj->VpPlayer2[count].state != 0)

  00056	80 7f fc 00	 cmp	 BYTE PTR [edi-4], 0
  0005a	0f 84 78 01 00
	00		 je	 $LN50@MLS_SkillE

; 6373 : 		{
; 6374 : 			tObjNum = lpObj->VpPlayer2[count].number;

  00060	0f bf 5f fe	 movsx	 ebx, WORD PTR [edi-2]

; 6375 : 
; 6376 : 			if(tObjNum >= 0)

  00064	85 db		 test	 ebx, ebx
  00066	0f 88 6c 01 00
	00		 js	 $LN50@MLS_SkillE

; 6377 : 			{
; 6378 : 				EnableAttack = 0;
; 6379 : 
; 6380 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0006c	80 3f 02	 cmp	 BYTE PTR [edi], 2
  0006f	75 16		 jne	 SHORT $LN22@MLS_SkillE
  00071	8b cb		 mov	 ecx, ebx
  00073	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00079	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 6381 : 				{
; 6382 : 					EnableAttack = 1;

  00081	0f 8c be 00 00
	00		 jl	 $LN19@MLS_SkillE
$LN22@MLS_SkillE:

; 6383 : 				}
; 6384 : 				else if( CC_MAP_RANGE( lpObj->MapNumber ) || IT_MAP_RANGE( lpObj->MapNumber ) )

  00087	8a 86 49 01 00
	00		 mov	 al, BYTE PTR [esi+329]
  0008d	3c 35		 cmp	 al, 53			; 00000035H
  0008f	0f 84 b0 00 00
	00		 je	 $LN19@MLS_SkillE
  00095	3c 12		 cmp	 al, 18			; 00000012H
  00097	72 10		 jb	 SHORT $LN41@MLS_SkillE
  00099	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0009e	3a c8		 cmp	 cl, al
  000a0	1b c9		 sbb	 ecx, ecx
  000a2	41		 inc	 ecx
  000a3	0f 85 9c 00 00
	00		 jne	 $LN19@MLS_SkillE
$LN41@MLS_SkillE:
  000a9	3c 2d		 cmp	 al, 45			; 0000002dH
  000ab	72 0d		 jb	 SHORT $LN42@MLS_SkillE
  000ad	b1 32		 mov	 cl, 50			; 00000032H
  000af	3a c8		 cmp	 cl, al
  000b1	1b c0		 sbb	 eax, eax
  000b3	40		 inc	 eax
  000b4	0f 85 8b 00 00
	00		 jne	 $LN19@MLS_SkillE
$LN42@MLS_SkillE:

; 6385 : 				{
; 6386 : 					EnableAttack = 1;
; 6387 : 				}
; 6388 : 				else if( (tObjNum == aTargetIndex && bForceAttack == TRUE ) || DuelIndex == tObjNum)

  000ba	3b 5d 0c	 cmp	 ebx, DWORD PTR _aTargetIndex$[ebp]
  000bd	0f 84 82 00 00
	00		 je	 $LN19@MLS_SkillE
  000c3	39 5d f0	 cmp	 DWORD PTR _DuelIndex$[ebp], ebx

; 6389 : 				{
; 6390 : 					EnableAttack = 1;

  000c6	74 7d		 je	 SHORT $LN19@MLS_SkillE

; 6391 : 				}
; 6392 : 
; 6393 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000c8	80 3f 03	 cmp	 BYTE PTR [edi], 3
  000cb	74 30		 je	 SHORT $LN13@MLS_SkillE
  000cd	8b c3		 mov	 eax, ebx
  000cf	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000d5	03 c2		 add	 eax, edx
  000d7	80 b8 49 01 00
	00 1e		 cmp	 BYTE PTR [eax+329], 30	; 0000001eH
  000de	75 1d		 jne	 SHORT $LN13@MLS_SkillE
  000e0	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000e7	75 14		 jne	 SHORT $LN13@MLS_SkillE

; 6394 : 				{
; 6395 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000e9	8a 8e 02 1c 00
	00		 mov	 cl, BYTE PTR [esi+7170]
  000ef	3a 88 02 1c 00
	00		 cmp	 cl, BYTE PTR [eax+7170]
  000f5	0f 84 dd 00 00
	00		 je	 $LN50@MLS_SkillE

; 6396 : 						EnableAttack = 1;
; 6397 : 				}
; 6398 : 
; 6399 : 				else

  000fb	eb 48		 jmp	 SHORT $LN19@MLS_SkillE
$LN13@MLS_SkillE:

; 6400 : 				{
; 6401 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000fd	8b cb		 mov	 ecx, ebx
  000ff	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 6402 : 
; 6403 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00105	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  0010b	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  0010e	75 14		 jne	 SHORT $LN10@MLS_SkillE
  00110	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  00117	85 c9		 test	 ecx, ecx
  00119	78 09		 js	 SHORT $LN10@MLS_SkillE

; 6404 : 					{
; 6405 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0011b	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00121	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN10@MLS_SkillE:

; 6406 : 					}
; 6407 : 
; 6408 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00124	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0012a	03 c2		 add	 eax, edx
  0012c	50		 push	 eax
  0012d	56		 push	 esi
  0012e	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00133	83 c4 08	 add	 esp, 8
  00136	83 f8 01	 cmp	 eax, 1
  00139	0f 85 93 00 00
	00		 jne	 $LN45@MLS_SkillE
  0013f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN19@MLS_SkillE:

; 6409 : 					{
; 6410 : 						EnableAttack = 1;
; 6411 : 					}
; 6412 : 				}
; 6413 : 
; 6414 : 				if(EnableAttack != 0)
; 6415 : 				{
; 6416 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= 3)

  00145	8b fb		 mov	 edi, ebx
  00147	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0014d	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  00150	51		 push	 ecx
  00151	56		 push	 esi
  00152	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00157	83 c4 08	 add	 esp, 8
  0015a	83 f8 03	 cmp	 eax, 3
  0015d	7f 73		 jg	 SHORT $LN45@MLS_SkillE

; 6417 : 					{
; 6418 : 						HitCount++;

  0015f	8b 45 fc	 mov	 eax, DWORD PTR _HitCount$[ebp]
  00162	40		 inc	 eax
  00163	89 45 fc	 mov	 DWORD PTR _HitCount$[ebp], eax

; 6419 : 
; 6420 : 						if(HitCount > 5)

  00166	83 f8 05	 cmp	 eax, 5
  00169	7e 13		 jle	 SHORT $LN6@MLS_SkillE

; 6421 : 						{
; 6422 : 							if( rand()%2 )

  0016b	e8 00 00 00 00	 call	 _rand
  00170	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00175	79 05		 jns	 SHORT $LN51@MLS_SkillE
  00177	48		 dec	 eax
  00178	83 c8 fe	 or	 eax, -2			; fffffffeH
  0017b	40		 inc	 eax
$LN51@MLS_SkillE:
  0017c	74 07		 je	 SHORT $LN44@MLS_SkillE
$LN6@MLS_SkillE:

; 6423 : 							{
; 6424 : 								bAttack = TRUE;
; 6425 : 							}
; 6426 : 						}
; 6427 : 						else
; 6428 : 						{
; 6429 : 							bAttack = TRUE;

  0017e	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN44@MLS_SkillE:

; 6430 : 						}
; 6431 : 
; 6432 : 						if(HitCount > 12)

  00185	83 7d fc 0c	 cmp	 DWORD PTR _HitCount$[ebp], 12 ; 0000000cH
  00189	7e 09		 jle	 SHORT $LN3@MLS_SkillE

; 6433 : 						{
; 6434 : 							bAttack = FALSE;

  0018b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 6435 : 						}
; 6436 : 
; 6437 : 						if(bAttack == TRUE)

  00192	eb 3e		 jmp	 SHORT $LN45@MLS_SkillE
$LN3@MLS_SkillE:
  00194	83 7d 08 01	 cmp	 DWORD PTR _bAttack$[ebp], 1
  00198	75 38		 jne	 SHORT $LN45@MLS_SkillE

; 6438 : 						{
; 6439 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  0019a	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a2	6a 00		 push	 0
  001a4	6a 00		 push	 0
  001a6	6a 00		 push	 0
  001a8	6a 00		 push	 0
  001aa	6a 00		 push	 0
  001ac	6a 01		 push	 1
  001ae	52		 push	 edx
  001af	03 f8		 add	 edi, eax
  001b1	57		 push	 edi
  001b2	56		 push	 esi
  001b3	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack

; 6440 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,800,lpMagic->m_Skill,0);

  001b8	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  001bb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001be	6a 00		 push	 0
  001c0	52		 push	 edx
  001c1	68 20 03 00 00	 push	 800			; 00000320H
  001c6	53		 push	 ebx
  001c7	6a 32		 push	 50			; 00000032H
  001c9	56		 push	 esi
  001ca	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  001cf	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN45@MLS_SkillE:
  001d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN50@MLS_SkillE:

; 6441 : 						}
; 6442 : 					}
; 6443 : 				}
; 6444 : 			}
; 6445 : 		}
; 6446 : 
; 6447 : 		count++;

  001d8	8b 7d f8	 mov	 edi, DWORD PTR tv476[ebp]
  001db	83 c7 0c	 add	 edi, 12			; 0000000cH

; 6448 : 		if(count > MAX_VIEWPORT -1)

  001de	ff 4d f4	 dec	 DWORD PTR tv255[ebp]
  001e1	89 7d f8	 mov	 DWORD PTR tv476[ebp], edi
  001e4	0f 85 6c fe ff
	ff		 jne	 $LL26@MLS_SkillE
  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi
  001ec	5b		 pop	 ebx

; 6449 : 		{
; 6450 : 			break;
; 6451 : 		}
; 6452 : 	}
; 6453 : }

  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
_TEXT	ENDS
PUBLIC	?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillCure
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillCure, COMDAT
; _this$ = ecx

; 6456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6457 : 	int skillSuccess = true;
; 6458 : 
; 6459 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00012	03 c1		 add	 eax, ecx

; 6461 : 
; 6462 : 	if( lpObj->Type != OBJ_USER )

  00014	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1

; 6463 : 	{
; 6464 : 		return true;

  00019	75 20		 jne	 SHORT $LN4@MLS_SkillC@2

; 6460 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0001e	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H

; 6465 : 	}
; 6466 : 	#pragma message("fix me")
; 6467 : //	gObjClearBuffEffect(lpObj,AT_CURE);
; 6468 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  00024	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00027	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0002a	6a 01		 push	 1
  0002c	51		 push	 ecx
  0002d	0f b7 4a 08	 movzx	 ecx, WORD PTR [edx+8]
  00031	51		 push	 ecx
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00038	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@MLS_SkillC@2:

; 6469 : 	return true;

  0003b	b8 01 00 00 00	 mov	 eax, 1

; 6470 : }

  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillCure
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z
_TEXT	SEGMENT
_lpObj$ = -168						; size = 4
tv311 = -164						; size = 4
tv293 = -164						; size = 4
_Matrix$ = -160						; size = 48
_vFrustrum$ = -112					; size = 48
_p$ = -64						; size = 48
_Angle$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetPos$ = 12					; size = 1
_f1$ = 16						; size = 4
_f2$ = 20						; size = 4
_f3$ = 24						; size = 4
_f4$ = 28						; size = 4
?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3, COMDAT
; _this$ = ecx

; 6629 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6635 : 	p[0][1] = f2;
; 6636 : 	p[0][2] = 0;
; 6637 : 	p[1][0] = f1;
; 6638 : 	p[1][1] = f2;
; 6639 : 	p[1][2] = 0;
; 6640 : 	p[2][0] = f3;
; 6641 : 	p[2][1] = f4;
; 6642 : 	p[2][2] = 0;
; 6643 : 	p[3][0] = -f3;
; 6644 : 	p[3][1] = f4;
; 6645 : 	p[3][2] = 0;
; 6646 : 
; 6647 : 	float Angle[3];
; 6648 : 
; 6649 : 	Angle[0] = 0;
; 6650 : 	Angle[1] = 0;
; 6651 : 	Angle[2] = (float)(aTargetPos * 360 / 255);

  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 6630 : 	LPOBJ lpObj = &gObj[aIndex];
; 6631 : 
; 6632 : 	float p[4][3];
; 6633 : 
; 6634 : 	p[0][0] = -f1;

  00016	d9 45 10	 fld	 DWORD PTR _f1$[ebp]

; 6635 : 	p[0][1] = f2;
; 6636 : 	p[0][2] = 0;
; 6637 : 	p[1][0] = f1;
; 6638 : 	p[1][1] = f2;
; 6639 : 	p[1][2] = 0;
; 6640 : 	p[2][0] = f3;
; 6641 : 	p[2][1] = f4;
; 6642 : 	p[2][2] = 0;
; 6643 : 	p[3][0] = -f3;
; 6644 : 	p[3][1] = f4;
; 6645 : 	p[3][2] = 0;
; 6646 : 
; 6647 : 	float Angle[3];
; 6648 : 
; 6649 : 	Angle[0] = 0;
; 6650 : 	Angle[1] = 0;
; 6651 : 	Angle[2] = (float)(aTargetPos * 360 / 255);

  00019	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aTargetPos$[ebp]
  0001d	d9 c0		 fld	 ST(0)
  0001f	69 c9 68 01 00
	00		 imul	 ecx, 360		; 00000168H
  00025	d9 e0		 fchs
  00027	d9 5d c0	 fstp	 DWORD PTR _p$[ebp]
  0002a	d9 45 14	 fld	 DWORD PTR _f2$[ebp]
  0002d	d9 55 c4	 fst	 DWORD PTR _p$[ebp+4]
  00030	d9 ee		 fldz
  00032	d9 55 c8	 fst	 DWORD PTR _p$[ebp+8]
  00035	d9 55 d4	 fst	 DWORD PTR _p$[ebp+20]
  00038	d9 ca		 fxch	 ST(2)
  0003a	d9 5d cc	 fstp	 DWORD PTR _p$[ebp+12]
  0003d	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  00042	f7 e9		 imul	 ecx
  00044	d9 5d d0	 fstp	 DWORD PTR _p$[ebp+16]
  00047	d9 45 18	 fld	 DWORD PTR _f3$[ebp]
  0004a	d9 55 d8	 fst	 DWORD PTR _p$[ebp+24]
  0004d	d9 45 1c	 fld	 DWORD PTR _f4$[ebp]
  00050	d9 55 dc	 fst	 DWORD PTR _p$[ebp+28]
  00053	d9 ca		 fxch	 ST(2)
  00055	d9 55 e0	 fst	 DWORD PTR _p$[ebp+32]
  00058	d9 c9		 fxch	 ST(1)
  0005a	d9 e0		 fchs
  0005c	d9 5d e4	 fstp	 DWORD PTR _p$[ebp+36]
  0005f	d9 c9		 fxch	 ST(1)
  00061	d9 5d e8	 fstp	 DWORD PTR _p$[ebp+40]
  00064	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00067	03 d1		 add	 edx, ecx
  00069	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0006f	d9 55 ec	 fst	 DWORD PTR _p$[ebp+44]
  00072	d9 55 f0	 fst	 DWORD PTR _Angle$[ebp]
  00075	d9 5d f4	 fstp	 DWORD PTR _Angle$[ebp+4]
  00078	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007e	c1 fa 07	 sar	 edx, 7
  00081	8b c2		 mov	 eax, edx
  00083	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00086	03 c2		 add	 eax, edx
  00088	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv311[ebp], eax

; 6652 : 
; 6653 : 	float Matrix[3][4];
; 6654 : 	float vFrustrum[4][3];
; 6655 : 
; 6656 : 	AngleMatrix(Angle,Matrix);

  0008e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _Matrix$[ebp]
  00094	51		 push	 ecx
  00095	db 85 5c ff ff
	ff		 fild	 DWORD PTR tv311[ebp]
  0009b	8d 55 f0	 lea	 edx, DWORD PTR _Angle$[ebp]
  0009e	52		 push	 edx
  0009f	89 bd 58 ff ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], edi
  000a5	d9 5d f8	 fstp	 DWORD PTR _Angle$[ebp+8]
  000a8	e8 00 00 00 00	 call	 _AngleMatrix
  000ad	83 c4 08	 add	 esp, 8

; 6661 : 
; 6662 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  000b0	81 c7 04 11 00
	00		 add	 edi, 4356		; 00001104H
  000b6	33 f6		 xor	 esi, esi
  000b8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@MLS_SkillF@2:

; 6657 : 
; 6658 : 	for(int i = 0; i < 4; i++)
; 6659 : 	{
; 6660 : 		VectorRotate((const float *)&p[i],&Matrix[0],(float *)&vFrustrum[i]);

  000c0	8d 5c 35 90	 lea	 ebx, DWORD PTR _vFrustrum$[ebp+esi]
  000c4	53		 push	 ebx
  000c5	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _Matrix$[ebp]
  000cb	50		 push	 eax
  000cc	8d 4c 35 c0	 lea	 ecx, DWORD PTR _p$[ebp+esi]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 _VectorRotate

; 6661 : 
; 6662 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  000d6	d9 03		 fld	 DWORD PTR [ebx]
  000d8	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _lpObj$[ebp]
  000de	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e8	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv293[ebp], eax
  000ee	e8 00 00 00 00	 call	 __ftol2_sse
  000f3	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv293[ebp]
  000f9	03 c8		 add	 ecx, eax
  000fb	89 4f f0	 mov	 DWORD PTR [edi-16], ecx

; 6663 : 		lpObj->fSkillFrustrumY[i] = (int)vFrustrum[i][1] + lpObj->Y;

  000fe	d9 44 35 94	 fld	 DWORD PTR _vFrustrum$[ebp+esi+4]
  00102	e8 00 00 00 00	 call	 __ftol2_sse
  00107	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0010d	0f bf 91 46 01
	00 00		 movsx	 edx, WORD PTR [ecx+326]
  00114	03 c2		 add	 eax, edx
  00116	89 07		 mov	 DWORD PTR [edi], eax
  00118	83 c6 0c	 add	 esi, 12			; 0000000cH
  0011b	83 c7 04	 add	 edi, 4
  0011e	83 fe 30	 cmp	 esi, 48			; 00000030H
  00121	7c 9d		 jl	 SHORT $LL3@MLS_SkillF@2

; 6664 : 	}
; 6665 : }

  00123	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	33 cd		 xor	 ecx, ebp
  0012a	5b		 pop	 ebx
  0012b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
_TEXT	ENDS
PUBLIC	?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBless
EXTRN	?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjCheckBuffEffectValue
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBless, COMDAT
; _this$ = ecx

; 6668 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6669 : 	int skillSuccess = true;
; 6670 : 
; 6671 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0000d	57		 push	 edi
  0000e	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 6672 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00014	8b 7d 0c	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  00017	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0001d	03 f0		 add	 esi, eax
  0001f	03 f8		 add	 edi, eax

; 6673 : 
; 6674 : 	if( lpObj->Type != OBJ_USER )

  00021	b8 01 00 00 00	 mov	 eax, 1
  00026	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00029	66 39 46 68	 cmp	 WORD PTR [esi+104], ax

; 6675 : 	{
; 6676 : 		return true;

  0002d	0f 85 9a 00 00
	00		 jne	 $LN6@MLS_SkillB@2

; 6677 : 	}
; 6678 : 
; 6679 : 	int iAddStats = lpObj->Energy/100;

  00033	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0003a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0003f	f7 e9		 imul	 ecx
  00041	c1 fa 05	 sar	 edx, 5
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH

; 6680 : 
; 6681 : 	if( gObjCheckBuffEffectValue(lpTargetObj,161,iAddStats,0) )

  00049	6a 00		 push	 0
  0004b	03 c2		 add	 eax, edx
  0004d	50		 push	 eax
  0004e	68 a1 00 00 00	 push	 161			; 000000a1H
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 ?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckBuffEffectValue
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	84 c0		 test	 al, al
  0005e	74 20		 je	 SHORT $LN4@MLS_SkillB@2

; 6682 : 	{
; 6683 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,0);

  00060	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00063	8b 07		 mov	 eax, DWORD PTR [edi]
  00065	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00069	6a 00		 push	 0
  0006b	50		 push	 eax
  0006c	52		 push	 edx
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00073	83 c4 10	 add	 esp, 16			; 00000010H
  00076	5f		 pop	 edi

; 6684 : 		return false;

  00077	33 c0		 xor	 eax, eax
  00079	5e		 pop	 esi

; 6707 : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
$LN4@MLS_SkillB@2:
  00080	53		 push	 ebx

; 6685 : 	}
; 6686 : 
; 6687 : 	if( lpMagic->m_Skill == 433 )

  00081	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00084	81 7b 08 b1 01
	00 00		 cmp	 DWORD PTR [ebx+8], 433	; 000001b1H
  0008b	75 1f		 jne	 SHORT $LN2@MLS_SkillB@2

; 6688 : 	{
; 6689 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0008d	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00091	50		 push	 eax
  00092	68 b1 01 00 00	 push	 433			; 000001b1H
  00097	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0009c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000aa	dd d8		 fstp	 ST(0)
$LN2@MLS_SkillB@2:

; 6690 : 
; 6691 : 		if( fSkillValue > 0.0f )
; 6692 : 		{
; 6693 : 			iAddStats += fSkillValue;
; 6694 : 		}
; 6695 : #pragma message("fix me")
; 6696 : 		//gObjApplyBuffEffectDuration(lpTargetObj,BUFF_BLESS2,ADD_OPTION_ALLSTATS,iAddStats,0,0,300);
; 6697 : 	}
; 6698 : 	else
; 6699 : 	{
; 6700 : 		//gObjApplyBuffEffectDuration(lpTargetObj,161,ADD_OPTION_ALLSTATS,iAddStats,0,0,300);
; 6701 : 	}
; 6702 : 
; 6703 : 	
; 6704 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  000ac	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000ae	0f b7 53 08	 movzx	 edx, WORD PTR [ebx+8]
  000b2	6a 01		 push	 1
  000b4	51		 push	 ecx
  000b5	52		 push	 edx
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6705 : 	gObjCalCharacter(lpTargetObj->m_Index);

  000bc	8b 07		 mov	 eax, DWORD PTR [edi]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  000c4	83 c4 14	 add	 esp, 20			; 00000014H

; 6706 : 	return true;

  000c7	b8 01 00 00 00	 mov	 eax, 1
  000cc	5b		 pop	 ebx
$LN6@MLS_SkillB@2:
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi

; 6707 : }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBless
_TEXT	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
;	COMDAT __real@40000000
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newmasterlevelskilltreesystem.cpp
CONST	ENDS
;	COMDAT ?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z
_TEXT	SEGMENT
tv480 = -20						; size = 4
_this$ = -16						; size = 4
_DuelIndex$ = -12					; size = 4
tv76 = -8						; size = 4
tv473 = -4						; size = 4
_aIndex$ = 8						; size = 4
_fSkillValue$219009 = 12				; size = 4
_lpMagic$ = 12						; size = 4
_targetangle$ = 16					; size = 1
_HitCount$ = 16						; size = 4
_aTargetIndex$ = 20					; size = 4
?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike, COMDAT
; _this$ = ecx

; 6715 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 6716 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 6717 : 	int bSuccess = TRUE;
; 6718 : 	int tObjNum;
; 6719 : 
; 6720 : 	MLS_SkillFrustrum3(aIndex,targetangle,2.0f,4.0f,5.0f,0);

  00009	d9 ee		 fldz
  0000b	8b 55 10	 mov	 edx, DWORD PTR _targetangle$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00018	8b f8		 mov	 edi, eax
  0001a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40a00000
  00020	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00026	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  0002a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40800000
  00030	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00034	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  0003a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003d	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00043	52		 push	 edx
  00044	50		 push	 eax
  00045	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00048	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3

; 6721 : 
; 6722 : 	int count = 0;
; 6723 : 	int HitCount = 0;
; 6724 : 	int bAttack;
; 6725 : 	int DuelIndex = lpObj->m_iDuelUser;

  0004d	8b 87 b8 0e 00
	00		 mov	 eax, DWORD PTR [edi+3768]
  00053	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00056	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005c	89 45 f4	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  0005f	8d 87 b0 08 00
	00		 lea	 eax, DWORD PTR [edi+2224]
  00065	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0
  0006c	89 45 fc	 mov	 DWORD PTR tv473[ebp], eax
  0006f	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR tv76[ebp], 75	; 0000004bH
$LL24@MLS_SkillF@3:

; 6726 : 	int EnableAttack;
; 6727 : 
; 6728 : 	while ( true )
; 6729 : 	{
; 6730 : 		if(lpObj->VpPlayer2[count].state != 0)

  00076	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  0007a	0f 84 a7 01 00
	00		 je	 $LN36@MLS_SkillF@3

; 6731 : 		{
; 6732 : 			tObjNum = lpObj->VpPlayer2[count].number;

  00080	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 6733 : 
; 6734 : 			if(tObjNum >= 0)

  00084	85 f6		 test	 esi, esi
  00086	0f 88 9b 01 00
	00		 js	 $LN36@MLS_SkillF@3

; 6735 : 			{
; 6736 : 				EnableAttack = 0;
; 6737 : 
; 6738 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0008c	8a 00		 mov	 al, BYTE PTR [eax]
  0008e	3c 02		 cmp	 al, 2
  00090	75 16		 jne	 SHORT $LN20@MLS_SkillF@3
  00092	8b ce		 mov	 ecx, esi
  00094	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0009a	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 6739 : 				{
; 6740 : 					EnableAttack = 1;

  000a2	0f 8c 8a 00 00
	00		 jl	 $LN17@MLS_SkillF@3
$LN20@MLS_SkillF@3:

; 6741 : 				}
; 6742 : 				else if( tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000a8	3b 75 14	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000ab	0f 84 81 00 00
	00		 je	 $LN17@MLS_SkillF@3
  000b1	39 75 f4	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  000b4	74 7c		 je	 SHORT $LN17@MLS_SkillF@3

; 6743 : 				{
; 6744 : 					EnableAttack = 1;
; 6745 : 				}
; 6746 : 
; 6747 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b6	3c 03		 cmp	 al, 3
  000b8	74 30		 je	 SHORT $LN15@MLS_SkillF@3
  000ba	8b c6		 mov	 eax, esi
  000bc	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000c2	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  000ca	75 1e		 jne	 SHORT $LN15@MLS_SkillF@3
  000cc	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000d3	75 15		 jne	 SHORT $LN15@MLS_SkillF@3

; 6748 : 				{
; 6749 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d5	8a 8f 02 1c 00
	00		 mov	 cl, BYTE PTR [edi+7170]
  000db	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  000e2	0f 84 3f 01 00
	00		 je	 $LN36@MLS_SkillF@3

; 6750 : 						EnableAttack = 1;
; 6751 : 				}
; 6752 : 
; 6753 : 				else

  000e8	eb 48		 jmp	 SHORT $LN17@MLS_SkillF@3
$LN15@MLS_SkillF@3:

; 6754 : 				{
; 6755 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000ea	8b ce		 mov	 ecx, esi
  000ec	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 6756 : 
; 6757 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000f2	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  000f8	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000fb	75 14		 jne	 SHORT $LN12@MLS_SkillF@3
  000fd	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  00104	85 c9		 test	 ecx, ecx
  00106	78 09		 js	 SHORT $LN12@MLS_SkillF@3

; 6758 : 					{
; 6759 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00108	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0010e	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN12@MLS_SkillF@3:

; 6760 : 					}
; 6761 : 
; 6762 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00111	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00117	03 c2		 add	 eax, edx
  00119	50		 push	 eax
  0011a	57		 push	 edi
  0011b	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00120	83 c4 08	 add	 esp, 8
  00123	83 f8 01	 cmp	 eax, 1
  00126	0f 85 f5 00 00
	00		 jne	 $LN35@MLS_SkillF@3
  0012c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN17@MLS_SkillF@3:

; 6763 : 					{
; 6764 : 						EnableAttack = 1;
; 6765 : 					}
; 6766 : 				}
; 6767 : 
; 6768 : 				if(EnableAttack != 0)
; 6769 : 				{
; 6770 : 					if( SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  00132	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00135	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0013b	0f bf 84 16 46
	01 00 00	 movsx	 eax, WORD PTR [esi+edx+326]
  00143	51		 push	 ecx
  00144	0f bf 8c 16 44
	01 00 00	 movsx	 ecx, WORD PTR [esi+edx+324]
  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH
  00156	85 c0		 test	 eax, eax
  00158	0f 84 c3 00 00
	00		 je	 $LN35@MLS_SkillF@3

; 6771 : 					{
; 6772 : 						bAttack = FALSE;
; 6773 : 
; 6774 : 						if(HitCount > 8)

  0015e	83 7d 10 08	 cmp	 DWORD PTR _HitCount$[ebp], 8
  00162	7e 17		 jle	 SHORT $LN8@MLS_SkillF@3

; 6775 : 						{
; 6776 : 							if( rand()%2 )

  00164	e8 00 00 00 00	 call	 _rand
  00169	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0016e	79 05		 jns	 SHORT $LN39@MLS_SkillF@3
  00170	48		 dec	 eax
  00171	83 c8 fe	 or	 eax, -2			; fffffffeH
  00174	40		 inc	 eax
$LN39@MLS_SkillF@3:
  00175	0f 84 a3 00 00
	00		 je	 $LN5@MLS_SkillF@3
$LN8@MLS_SkillF@3:

; 6777 : 							{
; 6778 : 								bAttack = TRUE;
; 6779 : 							}
; 6780 : 						}
; 6781 : 						else
; 6782 : 						{
; 6783 : 							bAttack = TRUE;
; 6784 : 						}
; 6785 : 
; 6786 : 						if(bAttack != FALSE)
; 6787 : 						{
; 6788 : 							if( lpMagic->m_Skill == 494 )

  0017b	81 7b 08 ee 01
	00 00		 cmp	 DWORD PTR [ebx+8], 494	; 000001eeH
  00182	75 60		 jne	 SHORT $LN2@MLS_SkillF@3

; 6789 : 							{
; 6790 : 								float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00184	0f b6 53 04	 movzx	 edx, BYTE PTR [ebx+4]
  00188	52		 push	 edx
  00189	68 ee 01 00 00	 push	 494			; 000001eeH
  0018e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00193	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00198	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001a1	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue$219009[ebp]

; 6791 : 
; 6792 : 								if( fSkillValue > 0.0f )

  001a4	d9 ee		 fldz
  001a6	d8 5d 0c	 fcomp	 DWORD PTR _fSkillValue$219009[ebp]
  001a9	df e0		 fnstsw	 ax
  001ab	f6 c4 05	 test	 ah, 5
  001ae	7a 34		 jp	 SHORT $LN2@MLS_SkillF@3

; 6793 : 								{
; 6794 : 									float fpercent = rand()%100;

  001b0	e8 00 00 00 00	 call	 _rand
  001b5	99		 cdq
  001b6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001bb	f7 f9		 idiv	 ecx

; 6795 : 
; 6796 : 									if( fpercent < fSkillValue )

  001bd	89 55 ec	 mov	 DWORD PTR tv480[ebp], edx
  001c0	db 45 ec	 fild	 DWORD PTR tv480[ebp]
  001c3	d9 45 0c	 fld	 DWORD PTR _fSkillValue$219009[ebp]
  001c6	de d9		 fcompp
  001c8	df e0		 fnstsw	 ax
  001ca	f6 c4 41	 test	 ah, 65			; 00000041H
  001cd	75 15		 jne	 SHORT $LN2@MLS_SkillF@3

; 6797 : 									{
; 6798 : 										gObjBackSpring2(&gObj[tObjNum],lpObj,2);

  001cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d5	6a 02		 push	 2
  001d7	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  001da	57		 push	 edi
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@MLS_SkillF@3:

; 6799 : 									}
; 6800 : 								}
; 6801 : 							}
; 6802 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  001e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ea	6a 00		 push	 0
  001ec	6a 00		 push	 0
  001ee	6a 00		 push	 0
  001f0	6a 00		 push	 0
  001f2	6a 00		 push	 0
  001f4	6a 01		 push	 1
  001f6	53		 push	 ebx
  001f7	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  001fa	52		 push	 edx
  001fb	57		 push	 edi
  001fc	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack

; 6803 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  00201	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00207	6a 00		 push	 0
  00209	6a 00		 push	 0
  0020b	6a 00		 push	 0
  0020d	6a 00		 push	 0
  0020f	6a 00		 push	 0
  00211	6a 01		 push	 1
  00213	53		 push	 ebx
  00214	56		 push	 esi
  00215	57		 push	 edi
  00216	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0021b	83 c4 48	 add	 esp, 72			; 00000048H
$LN5@MLS_SkillF@3:

; 6804 : 						}
; 6805 : 
; 6806 : 						HitCount++;

  0021e	ff 45 10	 inc	 DWORD PTR _HitCount$[ebp]
$LN35@MLS_SkillF@3:
  00221	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN36@MLS_SkillF@3:

; 6807 : 					}
; 6808 : 				}
; 6809 : 			}
; 6810 : 		}
; 6811 : 
; 6812 : 		count++;

  00227	8b 45 fc	 mov	 eax, DWORD PTR tv473[ebp]
  0022a	83 c0 0c	 add	 eax, 12			; 0000000cH

; 6813 : 		if(count > MAX_VIEWPORT -1)

  0022d	ff 4d f8	 dec	 DWORD PTR tv76[ebp]
  00230	89 45 fc	 mov	 DWORD PTR tv473[ebp], eax
  00233	0f 85 3d fe ff
	ff		 jne	 $LL24@MLS_SkillF@3
  00239	5f		 pop	 edi
  0023a	5e		 pop	 esi
  0023b	5b		 pop	 ebx

; 6814 : 		{
; 6815 : 			break;
; 6816 : 		}
; 6817 : 	}
; 6818 : 
; 6819 : }

  0023c	8b e5		 mov	 esp, ebp
  0023e	5d		 pop	 ebp
  0023f	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
_TEXT	ENDS
PUBLIC	?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_DuelIndex$ = -8					; size = 4
_count$ = -4						; size = 4
_HitCount$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
tv441 = 24						; size = 4
_aTargetIndex$ = 24					; size = 4
?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness, COMDAT
; _this$ = ecx

; 6824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 6825 : 	LPOBJ lpObj = &gObj[aIndex];
; 6826 : 	int bSuccess = FALSE;
; 6827 : 	int tObjNum;
; 6828 : 	int count = 0;
; 6829 : 	int HitCount = 0;
; 6830 : 	int DuelIndex = lpObj->m_iDuelUser;
; 6831 : 	int EnableAttack;
; 6832 : 
; 6833 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00006	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00009	8b 4d 18	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00011	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00017	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	33 c0		 xor	 eax, eax
  0001f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00022	89 45 08	 mov	 DWORD PTR _HitCount$[ebp], eax
  00025	8b 86 b8 0e 00
	00		 mov	 eax, DWORD PTR [esi+3768]
  0002b	57		 push	 edi
  0002c	89 45 f8	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  0002f	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00033	6a 01		 push	 1
  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0003d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00043	8d 86 b0 08 00
	00		 lea	 eax, DWORD PTR [esi+2224]
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	89 45 18	 mov	 DWORD PTR tv441[ebp], eax
  0004f	90		 npad	 1
$LL20@MLS_SkillW:

; 6834 : 
; 6835 : 	while( TRUE )
; 6836 : 	{
; 6837 : 		if(lpObj->VpPlayer2[count].state != 0)

  00050	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00054	0f 84 52 01 00
	00		 je	 $LN41@MLS_SkillW

; 6838 : 		{
; 6839 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0005a	0f bf 78 fe	 movsx	 edi, WORD PTR [eax-2]

; 6840 : 
; 6841 : 			if( tObjNum >= 0 )

  0005e	85 ff		 test	 edi, edi
  00060	0f 88 46 01 00
	00		 js	 $LN41@MLS_SkillW

; 6842 : 			{
; 6843 : 				EnableAttack = 0;
; 6844 : 
; 6845 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00066	8a 18		 mov	 bl, BYTE PTR [eax]
  00068	80 fb 02	 cmp	 bl, 2
  0006b	75 16		 jne	 SHORT $LN16@MLS_SkillW
  0006d	8b cf		 mov	 ecx, edi
  0006f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00075	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 6846 : 				{
; 6847 : 					EnableAttack = 1;

  0007d	0f 8c e4 00 00
	00		 jl	 $LN40@MLS_SkillW
$LN16@MLS_SkillW:

; 6848 : 				}
; 6849 : 				else if(DuelIndex == tObjNum)

  00083	39 7d f8	 cmp	 DWORD PTR _DuelIndex$[ebp], edi

; 6850 : 				{
; 6851 : 					EnableAttack = 1;
; 6852 : 				}
; 6853 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||

  00086	0f 84 db 00 00
	00		 je	 $LN40@MLS_SkillW

; 6854 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||
; 6855 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN)

  0008c	8a 86 49 01 00
	00		 mov	 al, BYTE PTR [esi+329]
  00092	3c 35		 cmp	 al, 53			; 00000035H
  00094	0f 84 cd 00 00
	00		 je	 $LN40@MLS_SkillW
  0009a	3c 12		 cmp	 al, 18			; 00000012H
  0009c	72 10		 jb	 SHORT $LN36@MLS_SkillW
  0009e	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000a3	3a c8		 cmp	 cl, al
  000a5	1b c9		 sbb	 ecx, ecx
  000a7	41		 inc	 ecx
  000a8	0f 85 b9 00 00
	00		 jne	 $LN40@MLS_SkillW
$LN36@MLS_SkillW:
  000ae	3c 2d		 cmp	 al, 45			; 0000002dH
  000b0	72 10		 jb	 SHORT $LN37@MLS_SkillW
  000b2	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  000b7	3a c8		 cmp	 cl, al
  000b9	1b c9		 sbb	 ecx, ecx
  000bb	41		 inc	 ecx
  000bc	0f 85 a5 00 00
	00		 jne	 $LN40@MLS_SkillW
$LN37@MLS_SkillW:
  000c2	3c 3f		 cmp	 al, 63			; 0000003fH
  000c4	0f 84 9d 00 00
	00		 je	 $LN40@MLS_SkillW

; 6856 : 				{
; 6857 : 					EnableAttack = 1;
; 6858 : 				}
; 6859 : 
; 6860 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000ca	80 fb 03	 cmp	 bl, 3
  000cd	74 54		 je	 SHORT $LN9@MLS_SkillW
  000cf	8b c7		 mov	 eax, edi
  000d1	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000d7	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  000df	75 42		 jne	 SHORT $LN9@MLS_SkillW
  000e1	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000e8	75 39		 jne	 SHORT $LN9@MLS_SkillW

; 6861 : 				{
; 6862 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000ea	8a 8e 02 1c 00
	00		 mov	 cl, BYTE PTR [esi+7170]
  000f0	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  000f7	0f 84 af 00 00
	00		 je	 $LN41@MLS_SkillW

; 6863 : 					{
; 6864 : 						if( gObj[tObjNum].Class != 283 &&
; 6865 : 							gObj[tObjNum].Class != 277 )

  000fd	0f b7 84 10 b8
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+184]
  00105	b9 1b 01 00 00	 mov	 ecx, 283		; 0000011bH
  0010a	66 3b c1	 cmp	 ax, cx
  0010d	0f 84 99 00 00
	00		 je	 $LN41@MLS_SkillW
  00113	b9 15 01 00 00	 mov	 ecx, 277		; 00000115H
  00118	66 3b c1	 cmp	 ax, cx
  0011b	0f 84 8b 00 00
	00		 je	 $LN41@MLS_SkillW

; 6866 : 							EnableAttack = 1;
; 6867 : 					}
; 6868 : 				}
; 6869 : 
; 6870 : 				else

  00121	eb 44		 jmp	 SHORT $LN40@MLS_SkillW
$LN9@MLS_SkillW:

; 6871 : 				{
; 6872 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00123	8b cf		 mov	 ecx, edi
  00125	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 6873 : 
; 6874 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0012b	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  00131	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00134	75 14		 jne	 SHORT $LN5@MLS_SkillW
  00136	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  0013d	85 c9		 test	 ecx, ecx
  0013f	78 09		 js	 SHORT $LN5@MLS_SkillW

; 6875 : 					{
; 6876 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00141	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00147	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN5@MLS_SkillW:

; 6877 : 					}
; 6878 : 
; 6879 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0014a	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00150	03 c2		 add	 eax, edx
  00152	50		 push	 eax
  00153	56		 push	 esi
  00154	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00159	83 c4 08	 add	 esp, 8
  0015c	83 f8 01	 cmp	 eax, 1
  0015f	75 45		 jne	 SHORT $LN39@MLS_SkillW
  00161	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN40@MLS_SkillW:

; 6880 : 					{
; 6881 : 						EnableAttack = 1;
; 6882 : 					}
; 6883 : 				}
; 6884 : 
; 6885 : 				if( EnableAttack != 0 &&
; 6886 : 					gObjCalDistance(lpObj,&gObj[tObjNum]) < 5 )

  00167	8b cf		 mov	 ecx, edi
  00169	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0016f	03 ca		 add	 ecx, edx
  00171	51		 push	 ecx
  00172	56		 push	 esi
  00173	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00178	83 c4 08	 add	 esp, 8
  0017b	83 f8 05	 cmp	 eax, 5
  0017e	7d 26		 jge	 SHORT $LN39@MLS_SkillW

; 6887 : 				{
; 6888 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  00180	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00183	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00186	6a 00		 push	 0
  00188	50		 push	 eax
  00189	68 bc 02 00 00	 push	 700			; 000002bcH
  0018e	57		 push	 edi
  0018f	6a 32		 push	 50			; 00000032H
  00191	56		 push	 esi
  00192	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay

; 6889 : 					HitCount++;

  00197	8b 45 08	 mov	 eax, DWORD PTR _HitCount$[ebp]
  0019a	40		 inc	 eax
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
  0019e	89 45 08	 mov	 DWORD PTR _HitCount$[ebp], eax

; 6890 : 
; 6891 : 					if(HitCount >= 5)

  001a1	83 f8 05	 cmp	 eax, 5
  001a4	7d 1f		 jge	 SHORT $LN38@MLS_SkillW
$LN39@MLS_SkillW:
  001a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN41@MLS_SkillW:

; 6892 : 					{
; 6893 : 						break;
; 6894 : 					}
; 6895 : 				}
; 6896 : 			}
; 6897 : 		}
; 6898 : 
; 6899 : 		count++;

  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  001af	8b 45 18	 mov	 eax, DWORD PTR tv441[ebp]
  001b2	41		 inc	 ecx
  001b3	83 c0 0c	 add	 eax, 12			; 0000000cH
  001b6	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  001b9	89 45 18	 mov	 DWORD PTR tv441[ebp], eax

; 6900 : 
; 6901 : 		if( count > MAX_VIEWPORT -1)

  001bc	83 f9 4a	 cmp	 ecx, 74			; 0000004aH
  001bf	0f 8e 8b fe ff
	ff		 jle	 $LL20@MLS_SkillW
$LN38@MLS_SkillW:
  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi

; 6902 : 		{
; 6903 : 			break;
; 6904 : 		}
; 6905 : 	}
; 6906 : 
; 6907 : return bSuccess;

  001c7	33 c0		 xor	 eax, eax
  001c9	5b		 pop	 ebx

; 6908 : }

  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
_TEXT	ENDS
PUBLIC	?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_DuelIndex$ = -8					; size = 4
_count$ = -4						; size = 4
_HitCount$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
tv441 = 24						; size = 4
_aTargetIndex$ = 24					; size = 4
?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation, COMDAT
; _this$ = ecx

; 6911 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 6912 : 	LPOBJ lpObj = &gObj[aIndex];
; 6913 : 	int bSuccess = FALSE;
; 6914 : 	int tObjNum;
; 6915 : 	int count = 0;
; 6916 : 	int HitCount = 0;
; 6917 : 	int DuelIndex = lpObj->m_iDuelUser;
; 6918 : 	int EnableAttack;
; 6919 : 
; 6920 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00006	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00009	8b 4d 18	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00011	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00017	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	33 c0		 xor	 eax, eax
  0001f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00022	89 45 08	 mov	 DWORD PTR _HitCount$[ebp], eax
  00025	8b 86 b8 0e 00
	00		 mov	 eax, DWORD PTR [esi+3768]
  0002b	57		 push	 edi
  0002c	89 45 f8	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  0002f	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00033	6a 01		 push	 1
  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0003d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00043	8d 86 b0 08 00
	00		 lea	 eax, DWORD PTR [esi+2224]
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	89 45 18	 mov	 DWORD PTR tv441[ebp], eax
  0004f	90		 npad	 1
$LL20@MLS_SkillI:

; 6921 : 
; 6922 : 	while( TRUE )
; 6923 : 	{
; 6924 : 		if(lpObj->VpPlayer2[count].state != 0)

  00050	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00054	0f 84 52 01 00
	00		 je	 $LN41@MLS_SkillI

; 6925 : 		{
; 6926 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0005a	0f bf 78 fe	 movsx	 edi, WORD PTR [eax-2]

; 6927 : 
; 6928 : 			if( tObjNum >= 0 )

  0005e	85 ff		 test	 edi, edi
  00060	0f 88 46 01 00
	00		 js	 $LN41@MLS_SkillI

; 6929 : 			{
; 6930 : 				EnableAttack = 0;
; 6931 : 
; 6932 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00066	8a 18		 mov	 bl, BYTE PTR [eax]
  00068	80 fb 02	 cmp	 bl, 2
  0006b	75 16		 jne	 SHORT $LN16@MLS_SkillI
  0006d	8b cf		 mov	 ecx, edi
  0006f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00075	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 6933 : 				{
; 6934 : 					EnableAttack = 1;

  0007d	0f 8c e4 00 00
	00		 jl	 $LN40@MLS_SkillI
$LN16@MLS_SkillI:

; 6935 : 				}
; 6936 : 				else if(DuelIndex == tObjNum)

  00083	39 7d f8	 cmp	 DWORD PTR _DuelIndex$[ebp], edi

; 6937 : 				{
; 6938 : 					EnableAttack = 1;
; 6939 : 				}
; 6940 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||

  00086	0f 84 db 00 00
	00		 je	 $LN40@MLS_SkillI

; 6941 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||
; 6942 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN)

  0008c	8a 86 49 01 00
	00		 mov	 al, BYTE PTR [esi+329]
  00092	3c 35		 cmp	 al, 53			; 00000035H
  00094	0f 84 cd 00 00
	00		 je	 $LN40@MLS_SkillI
  0009a	3c 12		 cmp	 al, 18			; 00000012H
  0009c	72 10		 jb	 SHORT $LN36@MLS_SkillI
  0009e	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000a3	3a c8		 cmp	 cl, al
  000a5	1b c9		 sbb	 ecx, ecx
  000a7	41		 inc	 ecx
  000a8	0f 85 b9 00 00
	00		 jne	 $LN40@MLS_SkillI
$LN36@MLS_SkillI:
  000ae	3c 2d		 cmp	 al, 45			; 0000002dH
  000b0	72 10		 jb	 SHORT $LN37@MLS_SkillI
  000b2	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  000b7	3a c8		 cmp	 cl, al
  000b9	1b c9		 sbb	 ecx, ecx
  000bb	41		 inc	 ecx
  000bc	0f 85 a5 00 00
	00		 jne	 $LN40@MLS_SkillI
$LN37@MLS_SkillI:
  000c2	3c 3f		 cmp	 al, 63			; 0000003fH
  000c4	0f 84 9d 00 00
	00		 je	 $LN40@MLS_SkillI

; 6943 : 				{
; 6944 : 					EnableAttack = 1;
; 6945 : 				}
; 6946 : 
; 6947 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000ca	80 fb 03	 cmp	 bl, 3
  000cd	74 54		 je	 SHORT $LN9@MLS_SkillI
  000cf	8b c7		 mov	 eax, edi
  000d1	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000d7	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  000df	75 42		 jne	 SHORT $LN9@MLS_SkillI
  000e1	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000e8	75 39		 jne	 SHORT $LN9@MLS_SkillI

; 6948 : 				{
; 6949 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000ea	8a 8e 02 1c 00
	00		 mov	 cl, BYTE PTR [esi+7170]
  000f0	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  000f7	0f 84 af 00 00
	00		 je	 $LN41@MLS_SkillI

; 6950 : 					{
; 6951 : 						if( gObj[tObjNum].Class != 283 &&
; 6952 : 							gObj[tObjNum].Class != 277 )

  000fd	0f b7 84 10 b8
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+184]
  00105	b9 1b 01 00 00	 mov	 ecx, 283		; 0000011bH
  0010a	66 3b c1	 cmp	 ax, cx
  0010d	0f 84 99 00 00
	00		 je	 $LN41@MLS_SkillI
  00113	b9 15 01 00 00	 mov	 ecx, 277		; 00000115H
  00118	66 3b c1	 cmp	 ax, cx
  0011b	0f 84 8b 00 00
	00		 je	 $LN41@MLS_SkillI

; 6953 : 							EnableAttack = 1;
; 6954 : 					}
; 6955 : 				}
; 6956 : 
; 6957 : 				else

  00121	eb 44		 jmp	 SHORT $LN40@MLS_SkillI
$LN9@MLS_SkillI:

; 6958 : 				{
; 6959 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00123	8b cf		 mov	 ecx, edi
  00125	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 6960 : 
; 6961 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0012b	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  00131	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00134	75 14		 jne	 SHORT $LN5@MLS_SkillI
  00136	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  0013d	85 c9		 test	 ecx, ecx
  0013f	78 09		 js	 SHORT $LN5@MLS_SkillI

; 6962 : 					{
; 6963 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00141	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00147	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN5@MLS_SkillI:

; 6964 : 					}
; 6965 : 
; 6966 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0014a	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00150	03 c2		 add	 eax, edx
  00152	50		 push	 eax
  00153	56		 push	 esi
  00154	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00159	83 c4 08	 add	 esp, 8
  0015c	83 f8 01	 cmp	 eax, 1
  0015f	75 45		 jne	 SHORT $LN39@MLS_SkillI
  00161	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN40@MLS_SkillI:

; 6967 : 					{
; 6968 : 						EnableAttack = 1;
; 6969 : 					}
; 6970 : 				}
; 6971 : 
; 6972 : 				if( EnableAttack != 0 &&
; 6973 : 					gObjCalDistance(lpObj,&gObj[tObjNum]) < 5 )

  00167	8b cf		 mov	 ecx, edi
  00169	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0016f	03 ca		 add	 ecx, edx
  00171	51		 push	 ecx
  00172	56		 push	 esi
  00173	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00178	83 c4 08	 add	 esp, 8
  0017b	83 f8 05	 cmp	 eax, 5
  0017e	7d 26		 jge	 SHORT $LN39@MLS_SkillI

; 6974 : 				{
; 6975 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  00180	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00183	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00186	6a 00		 push	 0
  00188	50		 push	 eax
  00189	68 bc 02 00 00	 push	 700			; 000002bcH
  0018e	57		 push	 edi
  0018f	6a 32		 push	 50			; 00000032H
  00191	56		 push	 esi
  00192	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay

; 6976 : 					HitCount++;

  00197	8b 45 08	 mov	 eax, DWORD PTR _HitCount$[ebp]
  0019a	40		 inc	 eax
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
  0019e	89 45 08	 mov	 DWORD PTR _HitCount$[ebp], eax

; 6977 : 
; 6978 : 					if(HitCount >= 5)

  001a1	83 f8 05	 cmp	 eax, 5
  001a4	7d 1f		 jge	 SHORT $LN38@MLS_SkillI
$LN39@MLS_SkillI:
  001a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN41@MLS_SkillI:

; 6979 : 					{
; 6980 : 						break;
; 6981 : 					}
; 6982 : 				}
; 6983 : 			}
; 6984 : 		}
; 6985 : 
; 6986 : 		count++;

  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  001af	8b 45 18	 mov	 eax, DWORD PTR tv441[ebp]
  001b2	41		 inc	 ecx
  001b3	83 c0 0c	 add	 eax, 12			; 0000000cH
  001b6	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  001b9	89 45 18	 mov	 DWORD PTR tv441[ebp], eax

; 6987 : 
; 6988 : 		if( count > MAX_VIEWPORT -1)

  001bc	83 f9 4a	 cmp	 ecx, 74			; 0000004aH
  001bf	0f 8e 8b fe ff
	ff		 jle	 $LL20@MLS_SkillI
$LN38@MLS_SkillI:
  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi

; 6989 : 		{
; 6990 : 			break;
; 6991 : 		}
; 6992 : 	}
; 6993 : 
; 6994 : return bSuccess;

  001c7	33 c0		 xor	 eax, eax
  001c9	5b		 pop	 ebx

; 6995 : }

  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
_TEXT	ENDS
PUBLIC	?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_bSuccess$ = -24					; size = 4
tv583 = -20						; size = 4
_this$ = -20						; size = 4
tv550 = -16						; size = 4
_DuelIndex$ = -16					; size = 4
tv717 = -12						; size = 4
tv526 = -12						; size = 4
_fSkillValue$219133 = -12				; size = 4
_count$ = -8						; size = 4
tv424 = -4						; size = 4
_Value$219126 = 8					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBlind, COMDAT
; _this$ = ecx

; 6998 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx

; 6999 : 	LPOBJ lpObj = &gObj[aIndex];
; 7000 : 	int bSuccess = FALSE;
; 7001 : 	int tObjNum;
; 7002 : 
; 7003 : 	int Angle = MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);
; 7004 : 	int count = 0;
; 7005 : 
; 7006 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0000f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00015	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001b	33 c0		 xor	 eax, eax
  0001d	89 45 e8	 mov	 DWORD PTR _bSuccess$[ebp], eax
  00020	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
  00023	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00026	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00029	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0002d	6a 01		 push	 1
  0002f	53		 push	 ebx
  00030	51		 push	 ecx
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 7007 : 
; 7008 : 	int DuelIndex = lpObj->m_iDuelUser;
; 7009 : 	int Rate = 0;
; 7010 : 
; 7011 : 	if( gObj[aTargetIndex].Type == OBJ_MONSTER )

  00037	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00042	8b 97 b8 0e 00
	00		 mov	 edx, DWORD PTR [edi+3768]
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	66 83 7c 03 68
	02		 cmp	 WORD PTR [ebx+eax+104], 2
  00051	89 55 f0	 mov	 DWORD PTR _DuelIndex$[ebp], edx
  00054	89 5d fc	 mov	 DWORD PTR tv424[ebp], ebx
  00057	75 2a		 jne	 SHORT $LN30@MLS_SkillB@3

; 7012 : 	{
; 7013 : 		Rate = lpObj->m_AttackRating * (20 + lpObj->Energy / 50) / 100;

  00059	0f b7 8f fa 00
	00 00		 movzx	 ecx, WORD PTR [edi+250]
  00060	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00065	f7 e9		 imul	 ecx
  00067	c1 fa 04	 sar	 edx, 4
  0006a	8b ca		 mov	 ecx, edx
  0006c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006f	8d 54 0a 14	 lea	 edx, DWORD PTR [edx+ecx+20]
  00073	0f af 97 88 04
	00 00		 imul	 edx, DWORD PTR [edi+1160]
  0007a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0007f	f7 ea		 imul	 edx

; 7014 : 	}
; 7015 : 	else

  00081	eb 4b		 jmp	 SHORT $LN57@MLS_SkillB@3
$LN30@MLS_SkillB@3:

; 7016 : 	{
; 7017 : 		int Tmp = lpObj->Level * 3 + lpObj->Dexterity * 35 / 10;
; 7018 : 		Rate = Tmp * (20 + lpObj->Energy / 50) / 100;

  00083	0f b7 8f f6 00
	00 00		 movzx	 ecx, WORD PTR [edi+246]
  0008a	6b c9 23	 imul	 ecx, 35			; 00000023H
  0008d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00092	f7 e9		 imul	 ecx
  00094	0f bf 87 be 00
	00 00		 movsx	 eax, WORD PTR [edi+190]
  0009b	c1 fa 02	 sar	 edx, 2
  0009e	8b ca		 mov	 ecx, edx
  000a0	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000a3	03 ca		 add	 ecx, edx
  000a5	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  000a8	03 ca		 add	 ecx, edx
  000aa	0f b7 97 fa 00
	00 00		 movzx	 edx, WORD PTR [edi+250]
  000b1	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000b6	f7 ea		 imul	 edx
  000b8	c1 fa 04	 sar	 edx, 4
  000bb	8b c2		 mov	 eax, edx
  000bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c0	8d 54 02 14	 lea	 edx, DWORD PTR [edx+eax+20]
  000c4	0f af ca	 imul	 ecx, edx
  000c7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000cc	f7 e9		 imul	 ecx
$LN57@MLS_SkillB@3:
  000ce	c1 fa 05	 sar	 edx, 5
  000d1	8b f2		 mov	 esi, edx
  000d3	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000d6	03 f2		 add	 esi, edx

; 7019 : 	}
; 7020 : 
; 7021 : 	if( Rate < rand()%100 )

  000d8	e8 00 00 00 00	 call	 _rand
  000dd	99		 cdq
  000de	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000e3	f7 f9		 idiv	 ecx
  000e5	3b f2		 cmp	 esi, edx

; 7022 : 	{
; 7023 : 		GCDamageSend(lpObj->m_Index,gObj[aTargetIndex].m_Index,0,0,0,0);

  000e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ed	7d 22		 jge	 SHORT $LN48@MLS_SkillB@3
  000ef	8b 04 13	 mov	 eax, DWORD PTR [ebx+edx]
  000f2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f4	6a 00		 push	 0
  000f6	6a 00		 push	 0
  000f8	6a 00		 push	 0
  000fa	6a 00		 push	 0
  000fc	50		 push	 eax
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  00103	83 c4 18	 add	 esp, 24			; 00000018H
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi

; 7024 : 		return false;

  00108	33 c0		 xor	 eax, eax
  0010a	5b		 pop	 ebx

; 7128 : 		{
; 7129 : 			break;
; 7130 : 		}
; 7131 : 	}
; 7132 : 
; 7133 : return bSuccess;
; 7134 : }

  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 0c 00	 ret	 12			; 0000000cH
$LN48@MLS_SkillB@3:

; 7025 : 	}
; 7026 : 
; 7027 : 	int EnableAttack;
; 7028 : 
; 7029 : 	while( TRUE )
; 7030 : 	{
; 7031 : 		if(lpObj->VpPlayer2[count].state != 0)

  00111	8d 8f b0 08 00
	00		 lea	 ecx, DWORD PTR [edi+2224]
  00117	89 4d f4	 mov	 DWORD PTR tv717[ebp], ecx
  0011a	8d 9b 00 00 00
	00		 npad	 6
$LL27@MLS_SkillB@3:
  00120	80 79 fc 00	 cmp	 BYTE PTR [ecx-4], 0
  00124	0f 84 07 01 00
	00		 je	 $LN54@MLS_SkillB@3

; 7032 : 		{
; 7033 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0012a	0f bf 71 fe	 movsx	 esi, WORD PTR [ecx-2]

; 7034 : 
; 7035 : 			if( tObjNum >= 0 )

  0012e	85 f6		 test	 esi, esi
  00130	0f 88 fb 00 00
	00		 js	 $LN54@MLS_SkillB@3

; 7036 : 			{
; 7037 : 				EnableAttack = 0;
; 7038 : 
; 7039 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00136	8a 19		 mov	 bl, BYTE PTR [ecx]
  00138	80 fb 02	 cmp	 bl, 2
  0013b	75 16		 jne	 SHORT $LN23@MLS_SkillB@3
  0013d	8b c6		 mov	 eax, esi
  0013f	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00145	83 bc 10 50 04
	00 00 00	 cmp	 DWORD PTR [eax+edx+1104], 0

; 7040 : 				{
; 7041 : 					EnableAttack = 1;

  0014d	0f 8c b9 00 00
	00		 jl	 $LN56@MLS_SkillB@3
$LN23@MLS_SkillB@3:

; 7042 : 				}
; 7043 : 				else if(tObjNum == aTargetIndex && DuelIndex == tObjNum)

  00153	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00156	75 09		 jne	 SHORT $LN21@MLS_SkillB@3
  00158	39 75 f0	 cmp	 DWORD PTR _DuelIndex$[ebp], esi

; 7044 : 				{
; 7045 : 					EnableAttack = 1;
; 7046 : 				}
; 7047 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||

  0015b	0f 84 ab 00 00
	00		 je	 $LN56@MLS_SkillB@3
$LN21@MLS_SkillB@3:

; 7048 : 						 IT_MAP_RANGE(lpObj->MapNumber) || 
; 7049 : 						 lpObj->MapNumber == MAP_INDEX_VULCAN )

  00161	8a 87 49 01 00
	00		 mov	 al, BYTE PTR [edi+329]
  00167	3c 35		 cmp	 al, 53			; 00000035H
  00169	0f 84 9d 00 00
	00		 je	 $LN56@MLS_SkillB@3
  0016f	3c 12		 cmp	 al, 18			; 00000012H
  00171	72 10		 jb	 SHORT $LN46@MLS_SkillB@3
  00173	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00178	3a c8		 cmp	 cl, al
  0017a	1b c9		 sbb	 ecx, ecx
  0017c	41		 inc	 ecx
  0017d	0f 85 89 00 00
	00		 jne	 $LN56@MLS_SkillB@3
$LN46@MLS_SkillB@3:
  00183	3c 2d		 cmp	 al, 45			; 0000002dH
  00185	72 0c		 jb	 SHORT $LN47@MLS_SkillB@3
  00187	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0018c	3a c8		 cmp	 cl, al
  0018e	1b c9		 sbb	 ecx, ecx
  00190	41		 inc	 ecx
  00191	75 79		 jne	 SHORT $LN56@MLS_SkillB@3
$LN47@MLS_SkillB@3:
  00193	3c 3f		 cmp	 al, 63			; 0000003fH
  00195	74 75		 je	 SHORT $LN56@MLS_SkillB@3

; 7050 : 				{
; 7051 : 					EnableAttack = 1;
; 7052 : 				}
; 7053 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00197	80 fb 03	 cmp	 bl, 3
  0019a	74 2c		 je	 SHORT $LN16@MLS_SkillB@3
  0019c	8b c6		 mov	 eax, esi
  0019e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  001a4	80 bc 10 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edx+329], 30 ; 0000001eH
  001ac	75 1a		 jne	 SHORT $LN16@MLS_SkillB@3
  001ae	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  001b5	75 11		 jne	 SHORT $LN16@MLS_SkillB@3

; 7054 : 				{
; 7055 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  001b7	8a 8f 02 1c 00
	00		 mov	 cl, BYTE PTR [edi+7170]
  001bd	3a 8c 10 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edx+7170]
  001c4	74 6b		 je	 SHORT $LN54@MLS_SkillB@3

; 7056 : 						EnableAttack = 1;
; 7057 : 				}
; 7058 : 				else

  001c6	eb 44		 jmp	 SHORT $LN56@MLS_SkillB@3
$LN16@MLS_SkillB@3:

; 7059 : 				{
; 7060 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  001c8	8b ce		 mov	 ecx, esi
  001ca	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 7061 : 
; 7062 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  001d0	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  001d6	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  001d9	75 14		 jne	 SHORT $LN13@MLS_SkillB@3
  001db	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  001e2	85 c9		 test	 ecx, ecx
  001e4	78 09		 js	 SHORT $LN13@MLS_SkillB@3

; 7063 : 					{
; 7064 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  001e6	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  001ec	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN13@MLS_SkillB@3:

; 7065 : 					}
; 7066 : 
; 7067 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  001ef	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  001f5	03 c2		 add	 eax, edx
  001f7	50		 push	 eax
  001f8	57		 push	 edi
  001f9	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  001fe	83 c4 08	 add	 esp, 8
  00201	83 f8 01	 cmp	 eax, 1
  00204	75 25		 jne	 SHORT $LN49@MLS_SkillB@3
  00206	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN56@MLS_SkillB@3:

; 7068 : 					{
; 7069 : 						EnableAttack = 1;
; 7070 : 					}
; 7071 : 				}
; 7072 : 
; 7073 : 				if( EnableAttack != 0 &&
; 7074 : 					tObjNum == aTargetIndex && 
; 7075 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )

  0020c	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0020f	3b f0		 cmp	 esi, eax
  00211	75 1e		 jne	 SHORT $LN54@MLS_SkillB@3
  00213	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  00216	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00219	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0021c	51		 push	 ecx
  0021d	50		 push	 eax
  0021e	52		 push	 edx
  0021f	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  00224	83 c4 0c	 add	 esp, 12			; 0000000cH
  00227	85 c0		 test	 eax, eax
  00229	75 2b		 jne	 SHORT $LN43@MLS_SkillB@3
$LN49@MLS_SkillB@3:
  0022b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN54@MLS_SkillB@3:

; 7120 : 					break;
; 7121 : 				}
; 7122 : 			}
; 7123 : 		}
; 7124 : 
; 7125 : 		count++;

  00231	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00234	8b 4d f4	 mov	 ecx, DWORD PTR tv717[ebp]
  00237	40		 inc	 eax
  00238	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0023b	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
  0023e	89 4d f4	 mov	 DWORD PTR tv717[ebp], ecx

; 7126 : 
; 7127 : 		if( count > MAX_VIEWPORT -1)

  00241	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00244	0f 8e d6 fe ff
	ff		 jle	 $LL27@MLS_SkillB@3

; 7119 : 					bSuccess = TRUE;

  0024a	8b 45 e8	 mov	 eax, DWORD PTR _bSuccess$[ebp]
  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	5b		 pop	 ebx

; 7128 : 		{
; 7129 : 			break;
; 7130 : 		}
; 7131 : 	}
; 7132 : 
; 7133 : return bSuccess;
; 7134 : }

  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c2 0c 00	 ret	 12			; 0000000cH
$LN43@MLS_SkillB@3:

; 7076 : 				{
; 7077 : 					int BuffNumber = (lpMagic->m_Skill==463) ? 144 : 73;

  00256	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 7078 : 					int Value = 20 + lpObj->Energy / 50;

  00259	0f b7 8f fa 00
	00 00		 movzx	 ecx, WORD PTR [edi+250]
  00260	89 75 f4	 mov	 DWORD PTR tv526[ebp], esi
  00263	81 ee cf 01 00
	00		 sub	 esi, 463		; 000001cfH
  00269	f7 de		 neg	 esi
  0026b	1b f6		 sbb	 esi, esi
  0026d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00272	f7 e9		 imul	 ecx
  00274	c1 fa 04	 sar	 edx, 4
  00277	8b c2		 mov	 eax, edx
  00279	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0027c	83 e6 b9	 and	 esi, -71		; ffffffb9H
  0027f	8d 54 02 14	 lea	 edx, DWORD PTR [edx+eax+20]
  00283	81 c6 90 00 00
	00		 add	 esi, 144		; 00000090H
  00289	89 55 08	 mov	 DWORD PTR _Value$219126[ebp], edx

; 7079 : 
; 7080 : 					if( Value > 100 )

  0028c	83 fa 64	 cmp	 edx, 100		; 00000064H
  0028f	7e 07		 jle	 SHORT $LN10@MLS_SkillB@3

; 7081 : 						Value = 100;

  00291	c7 45 08 64 00
	00 00		 mov	 DWORD PTR _Value$219126[ebp], 100 ; 00000064H
$LN10@MLS_SkillB@3:

; 7082 : 
; 7083 : 					int Time = 0;
; 7084 : 
; 7085 : 					if( gObj[aTargetIndex].Type == OBJ_MONSTER )

  00298	8b 45 fc	 mov	 eax, DWORD PTR tv424[ebp]
  0029b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002a1	0f b7 44 10 68	 movzx	 eax, WORD PTR [eax+edx+104]
  002a6	33 db		 xor	 ebx, ebx
  002a8	83 f8 02	 cmp	 eax, 2
  002ab	75 3c		 jne	 SHORT $LN9@MLS_SkillB@3

; 7086 : 					{
; 7087 : 						Time = (9 + lpObj->Energy/46) - (gObj[aTargetIndex].Level / 15);

  002ad	8b 45 fc	 mov	 eax, DWORD PTR tv424[ebp]
  002b0	0f bf 9c 10 be
	00 00 00	 movsx	 ebx, WORD PTR [eax+edx+190]
  002b8	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  002bd	f7 eb		 imul	 ebx
  002bf	03 d3		 add	 edx, ebx
  002c1	c1 fa 03	 sar	 edx, 3
  002c4	8b c2		 mov	 eax, edx
  002c6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002c9	03 c2		 add	 eax, edx
  002cb	89 45 f0	 mov	 DWORD PTR tv550[ebp], eax
  002ce	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  002d3	f7 e9		 imul	 ecx
  002d5	03 d1		 add	 edx, ecx
  002d7	c1 fa 05	 sar	 edx, 5
  002da	8b da		 mov	 ebx, edx
  002dc	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  002df	03 da		 add	 ebx, edx
  002e1	2b 5d f0	 sub	 ebx, DWORD PTR tv550[ebp]
  002e4	83 c3 09	 add	 ebx, 9
  002e7	eb 1a		 jmp	 SHORT $LN7@MLS_SkillB@3
$LN9@MLS_SkillB@3:

; 7088 : 					}
; 7089 : 					else if( gObj[aTargetIndex].Type == OBJ_USER )

  002e9	83 f8 01	 cmp	 eax, 1
  002ec	75 15		 jne	 SHORT $LN7@MLS_SkillB@3

; 7090 : 					{
; 7091 : 						Time = 3 + (lpObj->Energy/210) + (gObj[aTargetIndex].Level-gObj[aTargetIndex].Level) / 100;

  002ee	b8 9d c0 09 9c	 mov	 eax, -1677082467	; 9c09c09dH
  002f3	f7 e9		 imul	 ecx
  002f5	03 d1		 add	 edx, ecx
  002f7	c1 fa 07	 sar	 edx, 7
  002fa	8b c2		 mov	 eax, edx
  002fc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ff	8d 5c 02 03	 lea	 ebx, DWORD PTR [edx+eax+3]
$LN7@MLS_SkillB@3:

; 7092 : 					}
; 7093 : 					if( BuffNumber == 144 )

  00303	81 fe 90 00 00
	00		 cmp	 esi, 144		; 00000090H
  00309	0f 85 a1 00 00
	00		 jne	 $LN50@MLS_SkillB@3

; 7094 : 					{
; 7095 : 						float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0030f	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00312	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  00316	8b 45 f4	 mov	 eax, DWORD PTR tv526[ebp]
  00319	52		 push	 edx
  0031a	50		 push	 eax
  0031b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00320	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00325	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00328	50		 push	 eax
  00329	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0032e	d9 5d f4	 fstp	 DWORD PTR _fSkillValue$219133[ebp]

; 7096 : 
; 7097 : 						if( fSkillValue > 0.0f )

  00331	d9 ee		 fldz
  00333	d8 5d f4	 fcomp	 DWORD PTR _fSkillValue$219133[ebp]
  00336	df e0		 fnstsw	 ax
  00338	f6 c4 05	 test	 ah, 5
  0033b	7a 73		 jp	 SHORT $LN50@MLS_SkillB@3

; 7098 : 						{
; 7099 : 							float fpercent = rand()%100;

  0033d	e8 00 00 00 00	 call	 _rand
  00342	99		 cdq
  00343	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00348	f7 f9		 idiv	 ecx

; 7100 : 
; 7101 : 							if( fpercent < fSkillValue )

  0034a	89 55 ec	 mov	 DWORD PTR tv583[ebp], edx
  0034d	db 45 ec	 fild	 DWORD PTR tv583[ebp]
  00350	d9 45 f4	 fld	 DWORD PTR _fSkillValue$219133[ebp]
  00353	de d9		 fcompp
  00355	df e0		 fnstsw	 ax
  00357	f6 c4 41	 test	 ah, 65			; 00000041H
  0035a	75 54		 jne	 SHORT $LN50@MLS_SkillB@3

; 7102 : 							{
; 7103 : 								if(!g_ZtLicense.CheckUser(eZtUB::Stone))

  0035c	6a 37		 push	 55			; 00000037H
  0035e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00363	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00368	84 c0		 test	 al, al
  0036a	75 1e		 jne	 SHORT $LN3@MLS_SkillB@3

; 7104 : 								{
; 7105 : 									gObjApplyBuffEffectDuration(&gObj[aTargetIndex],AT_STUN,0,0,0,0,1);

  0036c	8b 45 fc	 mov	 eax, DWORD PTR tv424[ebp]
  0036f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00375	6a 01		 push	 1
  00377	6a 00		 push	 0
  00379	6a 00		 push	 0
  0037b	6a 00		 push	 0
  0037d	6a 00		 push	 0
  0037f	6a 3d		 push	 61			; 0000003dH
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00387	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@MLS_SkillB@3:

; 7106 : 								}
; 7107 : 								gObjSetPosition(aTargetIndex,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  0038a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0038f	8b 4d fc	 mov	 ecx, DWORD PTR tv424[ebp]
  00392	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  0039a	0f bf 84 01 44
	01 00 00	 movsx	 eax, WORD PTR [ecx+eax+324]
  003a2	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  003a5	52		 push	 edx
  003a6	50		 push	 eax
  003a7	51		 push	 ecx
  003a8	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  003ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN50@MLS_SkillB@3:

; 7108 : 							}
; 7109 : 						}
; 7110 : 					}
; 7111 : 
; 7112 : 					if( gObjCheckBuffEffectValue(&gObj[aTargetIndex],BuffNumber,Value,0) == TRUE )

  003b0	8b 55 08	 mov	 edx, DWORD PTR _Value$219126[ebp]
  003b3	8b 45 fc	 mov	 eax, DWORD PTR tv424[ebp]
  003b6	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003bc	6a 00		 push	 0
  003be	52		 push	 edx
  003bf	56		 push	 esi
  003c0	50		 push	 eax
  003c1	e8 00 00 00 00	 call	 ?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckBuffEffectValue
  003c6	83 c4 10	 add	 esp, 16			; 00000010H
  003c9	3c 01		 cmp	 al, 1
  003cb	75 22		 jne	 SHORT $LN2@MLS_SkillB@3

; 7113 : 					{
; 7114 : 						GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,0);

  003cd	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  003d0	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  003d3	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  003d7	6a 00		 push	 0
  003d9	52		 push	 edx
  003da	51		 push	 ecx
  003db	57		 push	 edi
  003dc	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  003e1	83 c4 10	 add	 esp, 16			; 00000010H
  003e4	5f		 pop	 edi
  003e5	5e		 pop	 esi

; 7115 : 						return FALSE;

  003e6	33 c0		 xor	 eax, eax
  003e8	5b		 pop	 ebx

; 7128 : 		{
; 7129 : 			break;
; 7130 : 		}
; 7131 : 	}
; 7132 : 
; 7133 : return bSuccess;
; 7134 : }

  003e9	8b e5		 mov	 esp, ebp
  003eb	5d		 pop	 ebp
  003ec	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MLS_SkillB@3:

; 7116 : 					}
; 7117 : 
; 7118 : 					gObjApplyBuffEffectDuration(&gObj[aTargetIndex],BuffNumber,26,Value,0,0,Time);

  003ef	8b 55 08	 mov	 edx, DWORD PTR _Value$219126[ebp]
  003f2	8b 4d fc	 mov	 ecx, DWORD PTR tv424[ebp]
  003f5	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003fb	53		 push	 ebx
  003fc	6a 00		 push	 0
  003fe	6a 00		 push	 0
  00400	52		 push	 edx
  00401	6a 1a		 push	 26			; 0000001aH
  00403	56		 push	 esi
  00404	51		 push	 ecx
  00405	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0040a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0040d	5f		 pop	 edi
  0040e	5e		 pop	 esi

; 7119 : 					bSuccess = TRUE;

  0040f	b8 01 00 00 00	 mov	 eax, 1
  00414	5b		 pop	 ebx

; 7128 : 		{
; 7129 : 			break;
; 7130 : 		}
; 7131 : 	}
; 7132 : 
; 7133 : return bSuccess;
; 7134 : }

  00415	8b e5		 mov	 esp, ebp
  00417	5d		 pop	 ebp
  00418	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
_TEXT	ENDS
PUBLIC	?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
EXTRN	?DecPartyMemberHPandMP@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; DecPartyMemberHPandMP
EXTRN	?HitCheck@CSkillHitBox@@QAEHHHHHH@Z:PROC	; CSkillHitBox::HitCheck
EXTRN	?SkillElectricSparkHitBox@@3VCSkillHitBox@@A:BYTE ; SkillElectricSparkHitBox
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z
_TEXT	SEGMENT
_iangle$ = -16						; size = 4
tv288 = -12						; size = 4
_DuelIndex$ = -8					; size = 4
_Hit$ = -4						; size = 4
_this$ = -4						; size = 4
tv84 = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_dir$ = 24						; size = 1
tv475 = 28						; size = 4
_TargetPos$ = 28					; size = 1
_aTargetIndex$ = 32					; size = 4
?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark, COMDAT
; _this$ = ecx

; 7137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 7138 : 	LPOBJ lpObj = &gObj[aIndex];

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000a	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00010	56		 push	 esi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 7139 : 
; 7140 : 	int TargePosx = lpObj->X - (8 - (TargetPos & 15));
; 7141 : 	int TargePosy = lpObj->Y - (8 - ((TargetPos & 240) >> 4));
; 7142 : 
; 7143 : 	int tObjNum;
; 7144 : 	int count = 0;
; 7145 : 	int DuelIndex = lpObj->m_iDuelUser;

  00017	8b 84 33 b8 0e
	00 00		 mov	 eax, DWORD PTR [ebx+esi+3768]
  0001e	0f bf 94 33 46
	01 00 00	 movsx	 edx, WORD PTR [ebx+esi+326]
  00026	89 5d f4	 mov	 DWORD PTR tv288[ebp], ebx
  00029	03 de		 add	 ebx, esi
  0002b	89 45 f8	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  0002e	0f b6 45 1c	 movzx	 eax, BYTE PTR _TargetPos$[ebp]
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00035	57		 push	 edi
  00036	0f bf bb 44 01
	00 00		 movsx	 edi, WORD PTR [ebx+324]
  0003d	8b c8		 mov	 ecx, eax
  0003f	c1 e9 04	 shr	 ecx, 4

; 7146 : 	int iangle = MLS_GetAngle(lpObj->X,lpObj->Y,TargePosx,TargePosy);

  00042	8d 4c 11 f8	 lea	 ecx, DWORD PTR [ecx+edx-8]
  00046	51		 push	 ecx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 e0 0f	 and	 eax, 15			; 0000000fH
  0004d	8d 44 38 f8	 lea	 eax, DWORD PTR [eax+edi-8]
  00051	50		 push	 eax
  00052	52		 push	 edx
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  00059	89 45 f0	 mov	 DWORD PTR _iangle$[ebp], eax
  0005c	8d 83 b0 08 00
	00		 lea	 eax, DWORD PTR [ebx+2224]

; 7147 : 	int delaytime;
; 7148 : 	int Hit = 0;

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Hit$[ebp], 0
  00069	89 45 1c	 mov	 DWORD PTR tv475[ebp], eax
  0006c	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv84[ebp], 75	; 0000004bH
$LL18@MLS_SkillE@2:

; 7149 : 	int EnableAttack;
; 7150 : 
; 7151 : 	while ( true )
; 7152 : 	{
; 7153 : 		if(lpObj->VpPlayer2[count].state != 0)

  00073	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00077	0f 84 17 01 00
	00		 je	 $LN30@MLS_SkillE@2

; 7154 : 		{
; 7155 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007d	0f bf 78 fe	 movsx	 edi, WORD PTR [eax-2]

; 7156 : 
; 7157 : 			if(tObjNum >= 0)

  00081	85 ff		 test	 edi, edi
  00083	0f 88 0b 01 00
	00		 js	 $LN30@MLS_SkillE@2

; 7158 : 			{
; 7159 : 				EnableAttack = 0;
; 7160 : 
; 7161 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00089	8a 08		 mov	 cl, BYTE PTR [eax]
  0008b	80 f9 02	 cmp	 cl, 2
  0008e	75 16		 jne	 SHORT $LN14@MLS_SkillE@2
  00090	8b d7		 mov	 edx, edi
  00092	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00098	83 bc 32 50 04
	00 00 00	 cmp	 DWORD PTR [edx+esi+1104], 0

; 7162 : 				{
; 7163 : 					EnableAttack = 1;

  000a0	0f 8c 83 00 00
	00		 jl	 $LN31@MLS_SkillE@2
$LN14@MLS_SkillE@2:

; 7164 : 				}
; 7165 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000a6	3b 7d 20	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  000a9	74 7e		 je	 SHORT $LN31@MLS_SkillE@2
  000ab	39 7d f8	 cmp	 DWORD PTR _DuelIndex$[ebp], edi
  000ae	74 79		 je	 SHORT $LN31@MLS_SkillE@2

; 7166 : 				{
; 7167 : 					EnableAttack = 1;
; 7168 : 				}
; 7169 : 
; 7170 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b0	80 f9 03	 cmp	 cl, 3
  000b3	74 30		 je	 SHORT $LN9@MLS_SkillE@2
  000b5	8b cf		 mov	 ecx, edi
  000b7	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000bd	03 ce		 add	 ecx, esi
  000bf	80 b9 49 01 00
	00 1e		 cmp	 BYTE PTR [ecx+329], 30	; 0000001eH
  000c6	75 1d		 jne	 SHORT $LN9@MLS_SkillE@2
  000c8	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000cf	75 14		 jne	 SHORT $LN9@MLS_SkillE@2

; 7171 : 				{
; 7172 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d1	8a 93 02 1c 00
	00		 mov	 dl, BYTE PTR [ebx+7170]
  000d7	3a 91 02 1c 00
	00		 cmp	 dl, BYTE PTR [ecx+7170]
  000dd	0f 84 b1 00 00
	00		 je	 $LN30@MLS_SkillE@2

; 7173 : 						EnableAttack = 1;
; 7174 : 				}
; 7175 : 
; 7176 : 				else

  000e3	eb 44		 jmp	 SHORT $LN31@MLS_SkillE@2
$LN9@MLS_SkillE@2:

; 7177 : 				{
; 7178 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000e5	8b cf		 mov	 ecx, edi
  000e7	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000ed	8b 04 31	 mov	 eax, DWORD PTR [ecx+esi]
  000f0	03 ce		 add	 ecx, esi

; 7179 : 
; 7180 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000f2	66 83 79 68 02	 cmp	 WORD PTR [ecx+104], 2
  000f7	75 13		 jne	 SHORT $LN6@MLS_SkillE@2
  000f9	8b 89 50 04 00
	00		 mov	 ecx, DWORD PTR [ecx+1104]
  000ff	85 c9		 test	 ecx, ecx
  00101	78 09		 js	 SHORT $LN6@MLS_SkillE@2

; 7181 : 					{
; 7182 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00103	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00109	8b 04 31	 mov	 eax, DWORD PTR [ecx+esi]
$LN6@MLS_SkillE@2:

; 7183 : 					}
; 7184 : 
; 7185 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0010c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00112	03 c6		 add	 eax, esi
  00114	50		 push	 eax
  00115	53		 push	 ebx
  00116	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0011b	83 c4 08	 add	 esp, 8
  0011e	83 f8 01	 cmp	 eax, 1
  00121	75 68		 jne	 SHORT $LN28@MLS_SkillE@2
  00123	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN31@MLS_SkillE@2:

; 7186 : 					{
; 7187 : 						EnableAttack = 1;
; 7188 : 					}
; 7189 : 				}
; 7190 : 
; 7191 : 				if(EnableAttack != 0)
; 7192 : 				{
; 7193 : 					if(SkillElectricSparkHitBox.HitCheck(iangle,gObj[aIndex].X,gObj[aIndex].Y,gObj[tObjNum].X,gObj[tObjNum].Y))

  00129	8b c7		 mov	 eax, edi
  0012b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00131	0f bf 94 30 46
	01 00 00	 movsx	 edx, WORD PTR [eax+esi+326]
  00139	0f bf 84 30 44
	01 00 00	 movsx	 eax, WORD PTR [eax+esi+324]
  00141	52		 push	 edx
  00142	50		 push	 eax
  00143	8b 45 f4	 mov	 eax, DWORD PTR tv288[ebp]
  00146	0f bf 8c 30 46
	01 00 00	 movsx	 ecx, WORD PTR [eax+esi+326]
  0014e	0f bf 94 30 44
	01 00 00	 movsx	 edx, WORD PTR [eax+esi+324]
  00156	8b 45 f0	 mov	 eax, DWORD PTR _iangle$[ebp]
  00159	51		 push	 ecx
  0015a	52		 push	 edx
  0015b	50		 push	 eax
  0015c	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  00161	e8 00 00 00 00	 call	 ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ; CSkillHitBox::HitCheck
  00166	85 c0		 test	 eax, eax
  00168	74 21		 je	 SHORT $LN28@MLS_SkillE@2

; 7194 : 					{
; 7195 : 						delaytime = 500;
; 7196 : 						Hit = 1;
; 7197 : 
; 7198 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delaytime,lpMagic->m_Skill,0);

  0016a	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0016d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00170	6a 00		 push	 0
  00172	52		 push	 edx
  00173	68 f4 01 00 00	 push	 500			; 000001f4H
  00178	57		 push	 edi
  00179	6a 32		 push	 50			; 00000032H
  0017b	53		 push	 ebx
  0017c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _Hit$[ebp], 1
  00183	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00188	83 c4 18	 add	 esp, 24			; 00000018H
$LN28@MLS_SkillE@2:
  0018b	8b 45 1c	 mov	 eax, DWORD PTR tv475[ebp]
  0018e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN30@MLS_SkillE@2:

; 7199 : 					}
; 7200 : 				}
; 7201 : 			}
; 7202 : 		}
; 7203 : 
; 7204 : 		count++;

  00194	83 c0 0c	 add	 eax, 12			; 0000000cH

; 7205 : 		if(count > MAX_VIEWPORT -1)

  00197	ff 4d 08	 dec	 DWORD PTR tv84[ebp]
  0019a	89 45 1c	 mov	 DWORD PTR tv475[ebp], eax
  0019d	0f 85 d0 fe ff
	ff		 jne	 $LL18@MLS_SkillE@2

; 7206 : 		{
; 7207 : 			break;
; 7208 : 		}
; 7209 : 	}
; 7210 : 
; 7211 : 	if(Hit != 0)

  001a3	83 7d fc 00	 cmp	 DWORD PTR _Hit$[ebp], 0
  001a7	74 09		 je	 SHORT $LN1@MLS_SkillE@2

; 7212 : 	{
; 7213 : 		DecPartyMemberHPandMP(lpObj);

  001a9	53		 push	 ebx
  001aa	e8 00 00 00 00	 call	 ?DecPartyMemberHPandMP@@YAHPAUOBJECTSTRUCT@@@Z ; DecPartyMemberHPandMP
  001af	83 c4 04	 add	 esp, 4
$LN1@MLS_SkillE@2:
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx

; 7214 : 	}
; 7215 : }

  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 1c 00	 ret	 28			; 0000001cH
?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
_TEXT	ENDS
PUBLIC	__real@40c00000
PUBLIC	?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
;	COMDAT __real@40c00000
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newmasterlevelskilltreesystem.cpp
CONST	ENDS
;	COMDAT ?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z
_TEXT	SEGMENT
_DuelIndex$ = -12					; size = 4
tv75 = -8						; size = 4
tv508 = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_TargetPos$ = 16					; size = 1
_HitCount$ = 16						; size = 4
_aTargetIndex$ = 20					; size = 4
?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier, COMDAT
; _this$ = ecx

; 7218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7219 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 7220 : 	int bSuccess = TRUE;
; 7221 : 
; 7222 : 	MLS_SkillFrustrum3(aIndex,TargetPos,1.5f,6.0f,1.5f,0);

  00009	d9 ee		 fldz
  0000b	8b 55 10	 mov	 edx, DWORD PTR _TargetPos$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00018	8b f8		 mov	 edi, eax
  0001a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  00020	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00026	d9 54 24 08	 fst	 DWORD PTR [esp+8]
  0002a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  00030	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00034	d9 1c 24	 fstp	 DWORD PTR [esp]
  00037	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3

; 7223 : 
; 7224 : 	int tObjNum;
; 7225 : 	int count = 0;
; 7226 : 	int HitCount = 0;
; 7227 : 	int bAttack;
; 7228 : 	int DuelIndex = lpObj->m_iDuelUser;

  00044	8b 87 b8 0e 00
	00		 mov	 eax, DWORD PTR [edi+3768]
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00050	89 45 f4	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00053	8d 87 b0 08 00
	00		 lea	 eax, DWORD PTR [edi+2224]
  00059	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _HitCount$[ebp], 0
  00060	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  00063	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR tv75[ebp], 75	; 0000004bH
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL27@MLS_SkillC@3:

; 7229 : 	int EnableAttack;
; 7230 : 
; 7231 : 	while ( true )
; 7232 : 	{
; 7233 : 		if(lpObj->VpPlayer2[count].state != 0)

  00070	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00074	0f 84 70 02 00
	00		 je	 $LN43@MLS_SkillC@3

; 7234 : 		{
; 7235 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007a	0f bf 58 fe	 movsx	 ebx, WORD PTR [eax-2]

; 7236 : 
; 7237 : 			if(tObjNum >= 0)

  0007e	85 db		 test	 ebx, ebx
  00080	0f 88 64 02 00
	00		 js	 $LN43@MLS_SkillC@3

; 7238 : 			{
; 7239 : 				EnableAttack = 0;
; 7240 : 
; 7241 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00086	8a 08		 mov	 cl, BYTE PTR [eax]
  00088	80 f9 02	 cmp	 cl, 2
  0008b	75 16		 jne	 SHORT $LN23@MLS_SkillC@3
  0008d	8b f3		 mov	 esi, ebx
  0008f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00095	83 bc 16 50 04
	00 00 00	 cmp	 DWORD PTR [esi+edx+1104], 0

; 7242 : 				{
; 7243 : 					EnableAttack = 1;

  0009d	0f 8c 8d 00 00
	00		 jl	 $LN20@MLS_SkillC@3
$LN23@MLS_SkillC@3:

; 7244 : 				}
; 7245 : 				else if( tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000a3	3b 5d 14	 cmp	 ebx, DWORD PTR _aTargetIndex$[ebp]
  000a6	0f 84 84 00 00
	00		 je	 $LN20@MLS_SkillC@3
  000ac	39 5d f4	 cmp	 DWORD PTR _DuelIndex$[ebp], ebx
  000af	74 7f		 je	 SHORT $LN20@MLS_SkillC@3

; 7246 : 				{
; 7247 : 					EnableAttack = 1;
; 7248 : 				}
; 7249 : 
; 7250 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b1	80 f9 03	 cmp	 cl, 3
  000b4	74 32		 je	 SHORT $LN18@MLS_SkillC@3
  000b6	8b cb		 mov	 ecx, ebx
  000b8	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000be	80 bc 11 49 01
	00 00 1e	 cmp	 BYTE PTR [ecx+edx+329], 30 ; 0000001eH
  000c6	8d 34 11	 lea	 esi, DWORD PTR [ecx+edx]
  000c9	75 1d		 jne	 SHORT $LN18@MLS_SkillC@3
  000cb	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000d2	75 14		 jne	 SHORT $LN18@MLS_SkillC@3

; 7251 : 				{
; 7252 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d4	8a 8f 02 1c 00
	00		 mov	 cl, BYTE PTR [edi+7170]
  000da	3a 8e 02 1c 00
	00		 cmp	 cl, BYTE PTR [esi+7170]
  000e0	0f 84 04 02 00
	00		 je	 $LN43@MLS_SkillC@3

; 7253 : 						EnableAttack = 1;
; 7254 : 				}
; 7255 : 
; 7256 : 				else

  000e6	eb 48		 jmp	 SHORT $LN20@MLS_SkillC@3
$LN18@MLS_SkillC@3:

; 7257 : 				{
; 7258 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000e8	8b cb		 mov	 ecx, ebx
  000ea	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000f0	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000f3	03 ca		 add	 ecx, edx

; 7259 : 
; 7260 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000f5	66 83 79 68 02	 cmp	 WORD PTR [ecx+104], 2
  000fa	75 13		 jne	 SHORT $LN15@MLS_SkillC@3
  000fc	8b 89 50 04 00
	00		 mov	 ecx, DWORD PTR [ecx+1104]
  00102	85 c9		 test	 ecx, ecx
  00104	78 09		 js	 SHORT $LN15@MLS_SkillC@3

; 7261 : 					{
; 7262 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00106	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0010c	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN15@MLS_SkillC@3:

; 7263 : 					}
; 7264 : 
; 7265 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0010f	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00115	03 c2		 add	 eax, edx
  00117	50		 push	 eax
  00118	57		 push	 edi
  00119	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0011e	83 c4 08	 add	 esp, 8
  00121	83 f8 01	 cmp	 eax, 1
  00124	0f 85 b7 01 00
	00		 jne	 $LN41@MLS_SkillC@3
  0012a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN20@MLS_SkillC@3:

; 7266 : 					{
; 7267 : 						EnableAttack = 1;
; 7268 : 					}
; 7269 : 				}
; 7270 : 
; 7271 : 				if( EnableAttack != FALSE && SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  00130	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00133	8b f3		 mov	 esi, ebx
  00135	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0013b	0f bf 84 16 46
	01 00 00	 movsx	 eax, WORD PTR [esi+edx+326]
  00143	51		 push	 ecx
  00144	0f bf 8c 16 44
	01 00 00	 movsx	 ecx, WORD PTR [esi+edx+324]
  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH
  00156	85 c0		 test	 eax, eax
  00158	0f 84 83 01 00
	00		 je	 $LN41@MLS_SkillC@3

; 7272 : 				{
; 7273 : 					bAttack = FALSE;
; 7274 : 
; 7275 : 					if( HitCount > 8 )

  0015e	83 7d 10 08	 cmp	 DWORD PTR _HitCount$[ebp], 8
  00162	7e 17		 jle	 SHORT $LN12@MLS_SkillC@3

; 7276 : 					{
; 7277 : 						if(rand()%2)

  00164	e8 00 00 00 00	 call	 _rand
  00169	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0016e	79 05		 jns	 SHORT $LN45@MLS_SkillC@3
  00170	48		 dec	 eax
  00171	83 c8 fe	 or	 eax, -2			; fffffffeH
  00174	40		 inc	 eax
$LN45@MLS_SkillC@3:
  00175	0f 84 9f 00 00
	00		 je	 $LN6@MLS_SkillC@3
$LN12@MLS_SkillC@3:

; 7278 : 						{
; 7279 : 							bAttack = TRUE;
; 7280 : 						}
; 7281 : 					}
; 7282 : 					else
; 7283 : 					{
; 7284 : 						bAttack = TRUE;
; 7285 : 					}
; 7286 : 
; 7287 : 					if( bAttack != FALSE )
; 7288 : 					{
; 7289 : #if(EVOMU_DLSKILLCHANGE==TRUE)
; 7290 : 						if(	g_ZtLicense.CheckUser(eZtUB::Gredy)			|| 
; 7291 : 							g_ZtLicense.CheckUser(eZtUB::GredyLocal)	|| 
; 7292 : 							g_ZtLicense.CheckUser(eZtUB::Gredy2)		||
; 7293 : 							g_ZtLicense.CheckUser(eZtUB::SILVER1)		||
; 7294 : 							g_ZtLicense.CheckUser(eZtUB::SILVER2)		||
; 7295 : 							g_ZtLicense.CheckUser(eZtUB::SILVER_Local)	)

  0017b	6a 20		 push	 32			; 00000020H
  0017d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00182	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00187	84 c0		 test	 al, al
  00189	75 6c		 jne	 SHORT $LN7@MLS_SkillC@3
  0018b	6a 21		 push	 33			; 00000021H
  0018d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00192	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00197	84 c0		 test	 al, al
  00199	75 5c		 jne	 SHORT $LN7@MLS_SkillC@3
  0019b	6a 22		 push	 34			; 00000022H
  0019d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001a2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001a7	84 c0		 test	 al, al
  001a9	75 4c		 jne	 SHORT $LN7@MLS_SkillC@3
  001ab	6a 07		 push	 7
  001ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001b2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001b7	84 c0		 test	 al, al
  001b9	75 3c		 jne	 SHORT $LN7@MLS_SkillC@3
  001bb	6a 08		 push	 8
  001bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001c2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001c7	84 c0		 test	 al, al
  001c9	75 2c		 jne	 SHORT $LN7@MLS_SkillC@3
  001cb	6a 2b		 push	 43			; 0000002bH
  001cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001d2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001d7	84 c0		 test	 al, al
  001d9	75 1c		 jne	 SHORT $LN7@MLS_SkillC@3

; 7298 : 						}
; 7299 : 						else
; 7300 : 						{
; 7301 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);

  001db	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  001de	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e1	6a 00		 push	 0
  001e3	50		 push	 eax
  001e4	68 fa 00 00 00	 push	 250			; 000000faH
  001e9	53		 push	 ebx
  001ea	6a 32		 push	 50			; 00000032H
  001ec	57		 push	 edi
  001ed	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  001f2	83 c4 18	 add	 esp, 24			; 00000018H
  001f5	eb 23		 jmp	 SHORT $LN6@MLS_SkillC@3
$LN7@MLS_SkillC@3:

; 7296 : 						{
; 7297 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,0,0,0,0,0);

  001f7	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  001fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00200	6a 00		 push	 0
  00202	6a 00		 push	 0
  00204	6a 00		 push	 0
  00206	6a 00		 push	 0
  00208	6a 00		 push	 0
  0020a	6a 01		 push	 1
  0020c	51		 push	 ecx
  0020d	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00210	50		 push	 eax
  00211	57		 push	 edi
  00212	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00217	83 c4 24	 add	 esp, 36			; 00000024H
$LN6@MLS_SkillC@3:

; 7302 : 						}
; 7303 : #else
; 7304 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);
; 7305 : #endif
; 7306 : 					}
; 7307 : 
; 7308 : 					if( OBJMAX_RANGE(aTargetIndex) && aTargetIndex == tObjNum)

  0021a	8b 4d 14	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0021d	85 c9		 test	 ecx, ecx
  0021f	0f 88 b9 00 00
	00		 js	 $LN40@MLS_SkillC@3
  00225	33 c0		 xor	 eax, eax
  00227	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  0022d	0f 9e c0	 setle	 al
  00230	85 c0		 test	 eax, eax
  00232	0f 84 a6 00 00
	00		 je	 $LN40@MLS_SkillC@3
  00238	3b cb		 cmp	 ecx, ebx
  0023a	0f 85 9e 00 00
	00		 jne	 $LN40@MLS_SkillC@3

; 7309 : 					{
; 7310 : #if(EVOMU_DLSKILLCHANGE==TRUE)
; 7311 : 						if(	g_ZtLicense.CheckUser(eZtUB::Gredy)			|| 
; 7312 : 							g_ZtLicense.CheckUser(eZtUB::GredyLocal)	|| 
; 7313 : 							g_ZtLicense.CheckUser(eZtUB::Gredy2)		||
; 7314 : 							g_ZtLicense.CheckUser(eZtUB::SILVER1)		||
; 7315 : 							g_ZtLicense.CheckUser(eZtUB::SILVER2)		||
; 7316 : 							g_ZtLicense.CheckUser(eZtUB::SILVER_Local)	)

  00240	6a 20		 push	 32			; 00000020H
  00242	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00247	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0024c	84 c0		 test	 al, al
  0024e	75 6c		 jne	 SHORT $LN3@MLS_SkillC@3
  00250	6a 21		 push	 33			; 00000021H
  00252	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00257	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0025c	84 c0		 test	 al, al
  0025e	75 5c		 jne	 SHORT $LN3@MLS_SkillC@3
  00260	6a 22		 push	 34			; 00000022H
  00262	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00267	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0026c	84 c0		 test	 al, al
  0026e	75 4c		 jne	 SHORT $LN3@MLS_SkillC@3
  00270	6a 07		 push	 7
  00272	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00277	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0027c	84 c0		 test	 al, al
  0027e	75 3c		 jne	 SHORT $LN3@MLS_SkillC@3
  00280	6a 08		 push	 8
  00282	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00287	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0028c	84 c0		 test	 al, al
  0028e	75 2c		 jne	 SHORT $LN3@MLS_SkillC@3
  00290	6a 2b		 push	 43			; 0000002bH
  00292	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00297	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0029c	84 c0		 test	 al, al
  0029e	75 1c		 jne	 SHORT $LN3@MLS_SkillC@3

; 7319 : 						}
; 7320 : 						else
; 7321 : 						{
; 7322 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,300,lpMagic->m_Skill,0);

  002a0	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  002a3	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002a6	6a 00		 push	 0
  002a8	52		 push	 edx
  002a9	68 2c 01 00 00	 push	 300			; 0000012cH
  002ae	53		 push	 ebx
  002af	6a 32		 push	 50			; 00000032H
  002b1	57		 push	 edi
  002b2	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  002b7	83 c4 18	 add	 esp, 24			; 00000018H
  002ba	eb 22		 jmp	 SHORT $LN40@MLS_SkillC@3
$LN3@MLS_SkillC@3:

; 7317 : 						{
; 7318 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,0,0,0,0,0);

  002bc	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  002bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002c5	6a 00		 push	 0
  002c7	6a 00		 push	 0
  002c9	6a 00		 push	 0
  002cb	6a 00		 push	 0
  002cd	6a 00		 push	 0
  002cf	6a 01		 push	 1
  002d1	50		 push	 eax
  002d2	03 f1		 add	 esi, ecx
  002d4	56		 push	 esi
  002d5	57		 push	 edi
  002d6	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  002db	83 c4 24	 add	 esp, 36			; 00000024H
$LN40@MLS_SkillC@3:

; 7323 : 						}
; 7324 : #else
; 7325 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,300,lpMagic->m_Skill,0);
; 7326 : #endif
; 7327 : 					}
; 7328 : 
; 7329 : 					HitCount++;

  002de	ff 45 10	 inc	 DWORD PTR _HitCount$[ebp]
$LN41@MLS_SkillC@3:
  002e1	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  002e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN43@MLS_SkillC@3:

; 7330 : 				}
; 7331 : 			}
; 7332 : 		}
; 7333 : 
; 7334 : 		count++;

  002ea	83 c0 0c	 add	 eax, 12			; 0000000cH

; 7335 : 		if(count > MAX_VIEWPORT -1)

  002ed	ff 4d f8	 dec	 DWORD PTR tv75[ebp]
  002f0	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  002f3	0f 85 77 fd ff
	ff		 jne	 $LL27@MLS_SkillC@3
  002f9	5f		 pop	 edi
  002fa	5e		 pop	 esi
  002fb	5b		 pop	 ebx

; 7336 : 		{
; 7337 : 			break;
; 7338 : 		}
; 7339 : 	}
; 7340 : }

  002fc	8b e5		 mov	 esp, ebp
  002fe	5d		 pop	 ebp
  002ff	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
_TEXT	ENDS
PUBLIC	__real@44480000
PUBLIC	?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fSkillValue$219239 = 8					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense, COMDAT
; _this$ = ecx

; 7343 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7344 : 	int skillSuccess = true;
; 7345 : 
; 7346 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	56		 push	 esi

; 7347 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000a	8b 75 0c	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0000d	57		 push	 edi
  0000e	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00014	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00017	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0001d	03 f8		 add	 edi, eax
  0001f	03 f0		 add	 esi, eax

; 7348 : 
; 7349 : 	if( lpObj->Type != OBJ_USER || lpObj->Class != CLASS_DARKLORD)

  00021	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00026	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00029	0f 85 8f 00 00
	00		 jne	 $LN2@MLS_SkillI@2
  0002f	66 83 bf b8 00
	00 00 04	 cmp	 WORD PTR [edi+184], 4
  00037	0f 85 81 00 00
	00		 jne	 $LN2@MLS_SkillI@2

; 7350 : 	{
; 7351 : 		return;
; 7352 : 	}
; 7353 : 
; 7354 : 	int AddDefense = 800;
; 7355 : 	int AddLife = 800;
; 7356 : 
; 7357 : 	int BuffNumber = 165;
; 7358 : 
; 7359 : 	if( lpMagic->m_Skill == 524 )

  0003d	53		 push	 ebx
  0003e	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00041	81 7b 08 0c 02
	00 00		 cmp	 DWORD PTR [ebx+8], 524	; 0000020cH
  00048	b8 20 03 00 00	 mov	 eax, 800		; 00000320H
  0004d	8b c8		 mov	 ecx, eax
  0004f	75 30		 jne	 SHORT $LN1@MLS_SkillI@2

; 7360 : 	{
; 7361 : 		BuffNumber = 165;
; 7362 : 
; 7363 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00051	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00055	50		 push	 eax
  00056	68 0c 02 00 00	 push	 524			; 0000020cH
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00060	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0006e	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$219239[ebp]

; 7364 : 
; 7365 : 		AddDefense += fSkillValue;

  00071	d9 45 08	 fld	 DWORD PTR _fSkillValue$219239[ebp]
  00074	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@44480000
  0007a	e8 00 00 00 00	 call	 __ftol2_sse

; 7366 : 		AddLife += fSkillValue;

  0007f	8b c8		 mov	 ecx, eax
$LN1@MLS_SkillI@2:

; 7367 : 	}
; 7368 : 
; 7369 : 	AddDefense = (AddDefense*10)/20;
; 7370 : 
; 7371 : 	gObjApplyBuffEffectDuration(lpTargetObj,BuffNumber,ADD_OPTION_DEFENSE,AddDefense,ADD_OPTION_LIFE,AddLife,10);

  00081	6a 0a		 push	 10			; 0000000aH
  00083	51		 push	 ecx
  00084	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00087	03 c9		 add	 ecx, ecx
  00089	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0008e	f7 e9		 imul	 ecx
  00090	c1 fa 03	 sar	 edx, 3
  00093	8b ca		 mov	 ecx, edx
  00095	6a 04		 push	 4
  00097	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0009a	03 ca		 add	 ecx, edx
  0009c	51		 push	 ecx
  0009d	6a 03		 push	 3
  0009f	68 a5 00 00 00	 push	 165			; 000000a5H
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 7372 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  000aa	8b 16		 mov	 edx, DWORD PTR [esi]
  000ac	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  000b0	6a 01		 push	 1
  000b2	52		 push	 edx
  000b3	50		 push	 eax
  000b4	57		 push	 edi
  000b5	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000ba	83 c4 2c	 add	 esp, 44			; 0000002cH
  000bd	5b		 pop	 ebx
$LN2@MLS_SkillI@2:
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi

; 7373 : }

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_iApplyHealDistance$ = -100				; size = 40
_lpObj$ = -60						; size = 4
_lpMagic$GSCopy$ = -56					; size = 4
_addlife$ = -52						; size = 4
tv374 = -48						; size = 4
tv170 = -48						; size = 4
_fSkillValue$219256 = -48				; size = 4
_this$ = -48						; size = 4
_iApplyHealIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal, COMDAT
; _this$ = ecx

; 7376 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]

; 7377 : 	int skillSuccess = TRUE;
; 7378 : 	LPOBJ lpObj = &gObj[aIndex];

  00013	8b c2		 mov	 eax, edx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00021	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 7379 : 
; 7380 : 	if(lpObj->Class != CLASS_ELF)

  00024	66 83 b8 b8 00
	00 00 02	 cmp	 WORD PTR [eax+184], 2
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0002f	53		 push	 ebx
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  00033	89 4d c8	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], ecx
  00036	89 45 c4	 mov	 DWORD PTR _lpObj$[ebp], eax
  00039	0f 85 39 02 00
	00		 jne	 $LN3@MLS_SkillP

; 7381 : 	{
; 7382 : 		return;
; 7383 : 	}
; 7384 : 
; 7385 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0003f	85 db		 test	 ebx, ebx
  00041	78 12		 js	 SHORT $LN34@MLS_SkillP
  00043	33 c9		 xor	 ecx, ecx
  00045	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0004b	0f 9e c1	 setle	 cl
  0004e	85 c9		 test	 ecx, ecx
  00050	8b 4d c8	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00053	75 02		 jne	 SHORT $LN24@MLS_SkillP
$LN34@MLS_SkillP:

; 7386 : 	{
; 7387 : 		aTargetIndex = aIndex;

  00055	8b da		 mov	 ebx, edx
$LN24@MLS_SkillP:
  00057	56		 push	 esi

; 7388 : 	}
; 7389 : 	
; 7390 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 7391 : 
; 7392 : 	if( lpObj->PartyNumber == -1 || lpObj->PartyNumber != lpTargetObj->PartyNumber )

  00058	8b b0 2c 04 00
	00		 mov	 esi, DWORD PTR [eax+1068]
  0005e	57		 push	 edi
  0005f	8b fb		 mov	 edi, ebx
  00061	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00067	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006d	83 fe ff	 cmp	 esi, -1
  00070	0f 84 ef 01 00
	00		 je	 $LN22@MLS_SkillP
  00076	3b b7 2c 04 00
	00		 cmp	 esi, DWORD PTR [edi+1068]
  0007c	0f 85 e3 01 00
	00		 jne	 $LN22@MLS_SkillP

; 7395 : 		return;
; 7396 : 	}	
; 7397 : 
; 7398 : 	int partynumber = lpObj->PartyNumber;
; 7399 : 	int addlife = (5 + (lpObj->Energy + lpObj->AddEnergy) / 5);

  00082	0f bf 90 26 01
	00 00		 movsx	 edx, WORD PTR [eax+294]
  00089	0f b7 80 fa 00
	00 00		 movzx	 eax, WORD PTR [eax+250]
  00090	03 d0		 add	 edx, eax
  00092	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00097	f7 ea		 imul	 edx
  00099	d1 fa		 sar	 edx, 1
  0009b	8b c2		 mov	 eax, edx
  0009d	c1 e8 1f	 shr	 eax, 31			; 0000001fH

; 7400 : 
; 7401 : 	if( lpMagic->m_Skill == 429 )

  000a0	81 79 08 ad 01
	00 00		 cmp	 DWORD PTR [ecx+8], 429	; 000001adH
  000a7	8d 54 02 05	 lea	 edx, DWORD PTR [edx+eax+5]
  000ab	89 55 cc	 mov	 DWORD PTR _addlife$[ebp], edx
  000ae	75 48		 jne	 SHORT $LN35@MLS_SkillP

; 7402 : 	{
; 7403 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000b0	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000b4	50		 push	 eax
  000b5	68 ad 01 00 00	 push	 429			; 000001adH
  000ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000bf	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000c4	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000cd	d9 5d d0	 fstp	 DWORD PTR _fSkillValue$219256[ebp]

; 7404 : 
; 7405 : 		if( fSkillValue > 0.0f )

  000d0	d9 ee		 fldz
  000d2	d9 45 d0	 fld	 DWORD PTR _fSkillValue$219256[ebp]
  000d5	d8 d1		 fcom	 ST(1)
  000d7	df e0		 fnstsw	 ax
  000d9	dd d9		 fstp	 ST(1)
  000db	f6 c4 41	 test	 ah, 65			; 00000041H
  000de	75 16		 jne	 SHORT $LN42@MLS_SkillP

; 7406 : 		{
; 7407 : 			addlife += addlife*fSkillValue/100.0f;

  000e0	da 4d cc	 fimul	 DWORD PTR _addlife$[ebp]
  000e3	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000e9	da 45 cc	 fiadd	 DWORD PTR _addlife$[ebp]
  000ec	e8 00 00 00 00	 call	 __ftol2_sse
  000f1	89 45 cc	 mov	 DWORD PTR _addlife$[ebp], eax
  000f4	eb 02		 jmp	 SHORT $LN35@MLS_SkillP
$LN42@MLS_SkillP:
  000f6	dd d8		 fstp	 ST(0)
$LN35@MLS_SkillP:

; 7408 : 		}
; 7409 : 	}
; 7410 : 
; 7411 : 	int iApplyHealIndex[MAX_USER_IN_PARTY];	//4
; 7412 : 	int iApplyHealDistance[MAX_USER_IN_PARTY];	//4
; 7413 : 	memset(iApplyHealIndex,-1,sizeof(iApplyHealIndex));

  000f8	83 c8 ff	 or	 eax, -1
  000fb	6b f6 68	 imul	 esi, 104		; 00000068H
  000fe	89 45 d4	 mov	 DWORD PTR _iApplyHealIndex$[ebp], eax
  00101	89 45 d8	 mov	 DWORD PTR _iApplyHealIndex$[ebp+4], eax
  00104	89 45 dc	 mov	 DWORD PTR _iApplyHealIndex$[ebp+8], eax
  00107	89 45 e0	 mov	 DWORD PTR _iApplyHealIndex$[ebp+12], eax
  0010a	89 45 e4	 mov	 DWORD PTR _iApplyHealIndex$[ebp+16], eax
  0010d	89 45 e8	 mov	 DWORD PTR _iApplyHealIndex$[ebp+20], eax
  00110	89 45 ec	 mov	 DWORD PTR _iApplyHealIndex$[ebp+24], eax
  00113	89 45 f0	 mov	 DWORD PTR _iApplyHealIndex$[ebp+28], eax
  00116	89 45 f4	 mov	 DWORD PTR _iApplyHealIndex$[ebp+32], eax
  00119	89 45 f8	 mov	 DWORD PTR _iApplyHealIndex$[ebp+36], eax

; 7414 : 	memset(iApplyHealDistance,-1,sizeof(iApplyHealDistance));

  0011c	0b c0		 or	 eax, eax
  0011e	81 c6 0c 00 00
	00		 add	 esi, OFFSET ?gParty@@3VPartyClass@@A+12

; 7415 : 
; 7416 : 	iApplyHealIndex[0] = aTargetIndex;

  00124	89 5d d4	 mov	 DWORD PTR _iApplyHealIndex$[ebp], ebx
  00127	89 45 9c	 mov	 DWORD PTR _iApplyHealDistance$[ebp], eax
  0012a	89 45 a0	 mov	 DWORD PTR _iApplyHealDistance$[ebp+4], eax
  0012d	89 45 a4	 mov	 DWORD PTR _iApplyHealDistance$[ebp+8], eax
  00130	89 45 a8	 mov	 DWORD PTR _iApplyHealDistance$[ebp+12], eax
  00133	89 45 ac	 mov	 DWORD PTR _iApplyHealDistance$[ebp+16], eax
  00136	89 45 b0	 mov	 DWORD PTR _iApplyHealDistance$[ebp+20], eax
  00139	89 45 b4	 mov	 DWORD PTR _iApplyHealDistance$[ebp+24], eax
  0013c	89 45 b8	 mov	 DWORD PTR _iApplyHealDistance$[ebp+28], eax
  0013f	89 45 bc	 mov	 DWORD PTR _iApplyHealDistance$[ebp+32], eax
  00142	89 45 c0	 mov	 DWORD PTR _iApplyHealDistance$[ebp+36], eax
  00145	8b de		 mov	 ebx, esi
  00147	c7 45 d0 0a 00
	00 00		 mov	 DWORD PTR tv170[ebp], 10 ; 0000000aH
  0014e	8b ff		 npad	 2
$LL19@MLS_SkillP:

; 7422 : 	{
; 7423 : 		int number = gParty.m_PartyS[partynumber].Number[i];

  00150	8b 33		 mov	 esi, DWORD PTR [ebx]

; 7424 : 
; 7425 : 		if( number >= 0 )

  00152	85 f6		 test	 esi, esi
  00154	78 62		 js	 SHORT $LN18@MLS_SkillP

; 7426 : 		{
; 7427 : 			if( lpTargetObj->MapNumber != gObj[number].MapNumber )

  00156	8a 8f 49 01 00
	00		 mov	 cl, BYTE PTR [edi+329]
  0015c	8b c6		 mov	 eax, esi
  0015e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00164	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016a	3a 88 49 01 00
	00		 cmp	 cl, BYTE PTR [eax+329]
  00170	75 46		 jne	 SHORT $LN18@MLS_SkillP

; 7428 : 				continue;
; 7429 : 
; 7430 : 			int dis = gObjCalDistance(lpTargetObj,&gObj[number]);

  00172	50		 push	 eax
  00173	57		 push	 edi
  00174	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00179	83 c4 08	 add	 esp, 8

; 7431 : 
; 7432 : 			if( dis >= 10 )

  0017c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017f	7d 37		 jge	 SHORT $LN18@MLS_SkillP

; 7433 : 				continue;
; 7434 : 
; 7435 : 			if( iApplyHealIndex[1] == -1 || iApplyHealDistance[1] > dis )

  00181	83 c9 ff	 or	 ecx, -1
  00184	39 4d d8	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+4], ecx
  00187	74 29		 je	 SHORT $LN12@MLS_SkillP
  00189	39 45 a0	 cmp	 DWORD PTR _iApplyHealDistance$[ebp+4], eax
  0018c	7f 24		 jg	 SHORT $LN12@MLS_SkillP

; 7439 : 			}
; 7440 : 			else if( iApplyHealIndex[2] == -1 || iApplyHealDistance[2] > dis )

  0018e	39 4d dc	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+8], ecx
  00191	74 17		 je	 SHORT $LN9@MLS_SkillP
  00193	39 45 a4	 cmp	 DWORD PTR _iApplyHealDistance$[ebp+8], eax
  00196	7f 12		 jg	 SHORT $LN9@MLS_SkillP

; 7444 : 			}
; 7445 : 			else if( iApplyHealIndex[3] == -1 || iApplyHealDistance[3] > dis )

  00198	39 4d e0	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+12], ecx
  0019b	74 05		 je	 SHORT $LN6@MLS_SkillP
  0019d	39 45 a8	 cmp	 DWORD PTR _iApplyHealDistance$[ebp+12], eax
  001a0	7e 16		 jle	 SHORT $LN18@MLS_SkillP
$LN6@MLS_SkillP:

; 7446 : 			{
; 7447 : 				iApplyHealIndex[3] = number;

  001a2	89 75 e0	 mov	 DWORD PTR _iApplyHealIndex$[ebp+12], esi

; 7448 : 				iApplyHealDistance[3] = dis;

  001a5	89 45 a8	 mov	 DWORD PTR _iApplyHealDistance$[ebp+12], eax
  001a8	eb 0e		 jmp	 SHORT $LN18@MLS_SkillP
$LN9@MLS_SkillP:

; 7441 : 			{
; 7442 : 				iApplyHealIndex[2] = number;

  001aa	89 75 dc	 mov	 DWORD PTR _iApplyHealIndex$[ebp+8], esi

; 7443 : 				iApplyHealDistance[2] = dis;

  001ad	89 45 a4	 mov	 DWORD PTR _iApplyHealDistance$[ebp+8], eax
  001b0	eb 06		 jmp	 SHORT $LN18@MLS_SkillP
$LN12@MLS_SkillP:

; 7436 : 			{
; 7437 : 				iApplyHealIndex[1] = number;

  001b2	89 75 d8	 mov	 DWORD PTR _iApplyHealIndex$[ebp+4], esi

; 7438 : 				iApplyHealDistance[1] = dis;

  001b5	89 45 a0	 mov	 DWORD PTR _iApplyHealDistance$[ebp+4], eax
$LN18@MLS_SkillP:

; 7417 : 	iApplyHealDistance[0] = 0;
; 7418 : 
; 7419 : 	int i;
; 7420 : 
; 7421 : 	for( i = 0; i < MAX_USER_IN_PARTY; i++)

  001b8	83 c3 04	 add	 ebx, 4
  001bb	ff 4d d0	 dec	 DWORD PTR tv170[ebp]
  001be	75 90		 jne	 SHORT $LL19@MLS_SkillP

; 7449 : 			}
; 7450 : 		}
; 7451 : 	}
; 7452 : 
; 7453 : 	for( i = 0; i < 4; i++)

  001c0	33 db		 xor	 ebx, ebx
$LL38@MLS_SkillP:

; 7454 : 	{
; 7455 : 		if( iApplyHealIndex[i] != -1 )

  001c2	8b 74 9d d4	 mov	 esi, DWORD PTR _iApplyHealIndex$[ebp+ebx*4]
  001c6	83 fe ff	 cmp	 esi, -1
  001c9	74 7d		 je	 SHORT $LN4@MLS_SkillP

; 7456 : 		{
; 7457 : 			LPOBJ lpHealObj = &gObj[iApplyHealIndex[i]];
; 7458 : 			lpHealObj->Life += addlife;

  001cb	db 45 cc	 fild	 DWORD PTR _addlife$[ebp]
  001ce	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  001d4	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001da	d8 86 fc 00 00
	00		 fadd	 DWORD PTR [esi+252]
  001e0	d9 5d d0	 fstp	 DWORD PTR tv374[ebp]
  001e3	d9 45 d0	 fld	 DWORD PTR tv374[ebp]
  001e6	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]

; 7459 : 
; 7460 : 			if( lpHealObj->Life > lpHealObj->MaxLife+lpHealObj->AddLife )

  001ec	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  001f2	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  001f8	d8 d1		 fcom	 ST(1)
  001fa	df e0		 fnstsw	 ax
  001fc	dd d9		 fstp	 ST(1)
  001fe	f6 c4 05	 test	 ah, 5
  00201	7a 08		 jp	 SHORT $LN45@MLS_SkillP

; 7461 : 				lpHealObj->Life = lpHealObj->MaxLife+lpHealObj->AddLife;

  00203	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  00209	eb 02		 jmp	 SHORT $LN1@MLS_SkillP
$LN45@MLS_SkillP:
  0020b	dd d8		 fstp	 ST(0)
$LN1@MLS_SkillP:

; 7462 : 
; 7463 : 			GCReFillSend(lpTargetObj->m_Index,(int)lpTargetObj->Life,0xFF,0,lpTargetObj->iShield);

  0020d	8b 97 54 01 00
	00		 mov	 edx, DWORD PTR [edi+340]
  00213	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  00219	52		 push	 edx
  0021a	6a 00		 push	 0
  0021c	68 ff 00 00 00	 push	 255			; 000000ffH
  00221	e8 00 00 00 00	 call	 __ftol2_sse
  00226	50		 push	 eax
  00227	8b 07		 mov	 eax, DWORD PTR [edi]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 7464 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpHealObj->m_Index,skillSuccess);

  0022f	8b 55 c8	 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00232	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00234	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00238	6a 01		 push	 1
  0023a	51		 push	 ecx
  0023b	8b 4d c4	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0023e	50		 push	 eax
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00245	83 c4 24	 add	 esp, 36			; 00000024H
$LN4@MLS_SkillP:

; 7449 : 			}
; 7450 : 		}
; 7451 : 	}
; 7452 : 
; 7453 : 	for( i = 0; i < 4; i++)

  00248	43		 inc	 ebx
  00249	83 fb 04	 cmp	 ebx, 4
  0024c	0f 8c 70 ff ff
	ff		 jl	 $LL38@MLS_SkillP
  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	5b		 pop	 ebx

; 7465 : 		}
; 7466 : 	}
; 7467 : }

  00255	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00258	33 cd		 xor	 ecx, ebp
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c2 0c 00	 ret	 12			; 0000000cH
$LN22@MLS_SkillP:

; 7393 : 	{
; 7394 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aIndex,FALSE);

  00265	6a 00		 push	 0
  00267	52		 push	 edx
  00268	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0026c	52		 push	 edx
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00273	83 c4 10	 add	 esp, 16			; 00000010H
  00276	5f		 pop	 edi
  00277	5e		 pop	 esi
$LN3@MLS_SkillP:

; 7465 : 		}
; 7466 : 	}
; 7467 : }

  00278	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027b	33 cd		 xor	 ecx, ebp
  0027d	5b		 pop	 ebx
  0027e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
_TEXT	ENDS
PUBLIC	_sqrtf
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsqrt
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Ogtp
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsqrt
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z PROC		; CMasterLevelSkillTreeSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMasterLevelSkillTreeSystem@@UAE@XZ ; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z ENDP		; CMasterLevelSkillTreeSystem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@		; `string'
PUBLIC	??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@	; `string'
PUBLIC	??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@	; `string'
PUBLIC	??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@	; `string'
PUBLIC	??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@	; `string'
PUBLIC	??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@	; `string'
PUBLIC	??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@	; `string'
PUBLIC	??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@	; `string'
PUBLIC	??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@	; `string'
PUBLIC	??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@	; `string'
PUBLIC	??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@	; `string'
PUBLIC	??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@	; `string'
PUBLIC	??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@	; `string'
PUBLIC	??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@	; `string'
PUBLIC	??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@	; `string'
PUBLIC	??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@ ; `string'
PUBLIC	??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@	; `string'
PUBLIC	??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@	; `string'
PUBLIC	??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@	; `string'
PUBLIC	??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@	; `string'
PUBLIC	??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@	; `string'
PUBLIC	??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@ ; `string'
PUBLIC	??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@	; `string'
PUBLIC	??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@	; `string'
PUBLIC	??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@ ; `string'
PUBLIC	??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@	; `string'
PUBLIC	??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@	; `string'
PUBLIC	??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@		; `string'
PUBLIC	??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@	; `string'
PUBLIC	??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@		; `string'
PUBLIC	??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@	; `string'
PUBLIC	??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@	; `string'
PUBLIC	??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@	; `string'
PUBLIC	??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@ ; `string'
PUBLIC	??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@	; `string'
PUBLIC	??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@	; `string'
PUBLIC	??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@	; `string'
PUBLIC	??_C@_03LHPBPOFD@i?$DOd?$AA@			; `string'
PUBLIC	??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@	; `string'
PUBLIC	??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@ ; `string'
PUBLIC	?Init@CMasterLevelSkillTreeSystem@@QAEXXZ	; CMasterLevelSkillTreeSystem::Init
EXTRN	?Release@MULua@@QAEXXZ:PROC			; MULua::Release
EXTRN	?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ:PROC	; g_Generic_Call
EXTRN	?DoFile@MULua@@QAE_NPBD@Z:PROC			; MULua::DoFile
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?GetLua@MULua@@QAEPAUlua_State@@XZ:PROC		; MULua::GetLua
;	COMDAT ??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@
; File e:\work\tranet_version\gs\gameserver\newmasterlevelskilltreesystem.cpp
CONST	SEGMENT
??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@ DB 'FN_LuaGetRate_6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@
CONST	SEGMENT
??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@ DB 'FN_LuaGetMaxAG_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@
CONST	SEGMENT
??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@ DB 'FN_LuaGetIncStat_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@
CONST	SEGMENT
??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@ DB 'FN_LuaGetIncBlocking_2'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@
CONST	SEGMENT
??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@ DB 'FN_LuaGetMaxLifeMana_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@
CONST	SEGMENT
??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@ DB 'FN_LuaGetMaxSD_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@
CONST	SEGMENT
??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@ DB 'FN_LuaGetManAttack_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@
CONST	SEGMENT
??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@ DB 'FN_LuaGetAttackRate_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@
CONST	SEGMENT
??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@ DB 'FN_LuaGetBlockingRate'
	DB	'_2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@
CONST	SEGMENT
??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@ DB 'FN_LuaGetIronDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@
CONST	SEGMENT
??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@ DB 'FN_LuaGetPoisonArrow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@
CONST	SEGMENT
??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@ DB 'FN_LuaGetEarthPrison', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@
CONST	SEGMENT
??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@ DB 'FN_LuaGetBloodStorm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@
CONST	SEGMENT
??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@ DB 'FN_LuaGetPercent5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@
CONST	SEGMENT
??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@ DB 'FN_LuaGetAttackSpeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@ DB 'FN_LuaGetSkillDamage'
	DB	'Min2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@
CONST	SEGMENT
??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@ DB 'FN_LuaGetManaIncRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@
CONST	SEGMENT
??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@ DB 'FN_LuaGetControlAttack'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@
CONST	SEGMENT
??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@ DB 'FN_LuaGetChangeBlocki'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@
CONST	SEGMENT
??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@ DB 'FN_LuaGetDecreaseMana', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@
CONST	SEGMENT
??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@ DB 'FN_LuaGetIncreaseStat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@
CONST	SEGMENT
??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@ DB 'FN_LuaGetIncreaseBl'
	DB	'ocking', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@
CONST	SEGMENT
??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@ DB 'FN_LuaGetPercent4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@
CONST	SEGMENT
??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@ DB 'FN_LuaGetManAttackRate'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@
CONST	SEGMENT
??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@ DB 'FN_LuaGetAttackSuc'
	DB	'cessRate', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@
CONST	SEGMENT
??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@ DB 'FN_LuaGetBlockingRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@
CONST	SEGMENT
??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@ DB 'FN_LuaGetSDMonsterKill'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@
CONST	SEGMENT
??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@ DB 'FN_LuaGetAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@
CONST	SEGMENT
??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@ DB 'FN_LuaGetMaxLifeMana', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@
CONST	SEGMENT
??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@ DB 'FN_LuaGetMaxAG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@
CONST	SEGMENT
??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@ DB 'FN_LuaGetPercent3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@
CONST	SEGMENT
??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@ DB 'FN_LuaGetMonsterKill', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@
CONST	SEGMENT
??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@ DB 'FN_LuaGetSkillDamageM'
	DB	'ax', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@
CONST	SEGMENT
??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@ DB 'FN_LuaGetSkillDama'
	DB	'geMiddle', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@
CONST	SEGMENT
??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@ DB 'FN_LuaGetSkillDamageM'
	DB	'in', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@
CONST	SEGMENT
??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@ DB 'FN_LuaGetPercent2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@
CONST	SEGMENT
??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@ DB 'FN_LuaGetPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHPBPOFD@i?$DOd?$AA@
CONST	SEGMENT
??_C@_03LHPBPOFD@i?$DOd?$AA@ DB 'i>d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@
CONST	SEGMENT
??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@ DB 'Lua\MasterSkill.lua', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@
CONST	SEGMENT
??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Error - [%s] [%d]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@CMasterLevelSkillTreeSystem@@QAEXXZ
_TEXT	SEGMENT
_fValue$ = -16						; size = 8
tv706 = -8						; size = 4
_L$ = -4						; size = 4
?Init@CMasterLevelSkillTreeSystem@@QAEXXZ PROC		; CMasterLevelSkillTreeSystem::Init, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 52   : 	memset(this->m_SkillTreeData, 0, sizeof(this->m_SkillTreeData));

  0000a	68 2c 3b 00 00	 push	 15148			; 00003b2cH
  0000f	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00012	6a 00		 push	 0
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _memset

; 53   : 	memset(this->m_fValue, 0, sizeof(this->m_fValue));

  0001a	68 94 1a 00 00	 push	 6804			; 00001a94H
  0001f	8d 8b 30 3b 00
	00		 lea	 ecx, DWORD PTR [ebx+15152]
  00025	6a 00		 push	 0
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _memset

; 54   : 
; 55   : #ifdef _LUA_
; 56   : 
; 57   : 	lua_State* pLuaState = this->m_Lua.GetLua();

  0002d	8d b3 c4 55 00
	00		 lea	 esi, DWORD PTR [ebx+21956]
  00033	83 c4 18	 add	 esp, 24			; 00000018H
  00036	8b ce		 mov	 ecx, esi
  00038	89 75 f8	 mov	 DWORD PTR tv706[ebp], esi
  0003b	e8 00 00 00 00	 call	 ?GetLua@MULua@@QAEPAUlua_State@@XZ ; MULua::GetLua

; 58   : 
; 59   : 	if( pLuaState == NULL )

  00040	85 c0		 test	 eax, eax
  00042	75 1b		 jne	 SHORT $LN4@Init

; 60   : 	{
; 61   : 		LogAddTD("[MasterLevelSkillTreeSystem] - Error - [%s] [%d]",__FILE__,__LINE__);

  00044	6a 3d		 push	 61			; 0000003dH
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MLANJOKC@NewMasterLevelSkillTreeSystem?4cp@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx

; 185  : 
; 186  : #else 
; 187  : 
; 188  : 	//	lua_State* pLuaState = this->m_Lua.GetLua();
; 189  : 
; 190  : 	//if( pLuaState == NULL )
; 191  : 	//{
; 192  : 	//	LogAddTD("[MasterLevelSkillTreeSystem] - Error - [%s] [%d]",__FILE__,__LINE__);
; 193  : 	//	return;
; 194  : 	//}
; 195  : 
; 196  : //	this->m_Lua.DoFile(gDirPath.GetNewPath("Lua\\MasterSkill.lua"));
; 197  : //	lua_State* L = this->m_Lua.GetLua();
; 198  : 
; 199  : 	double fValue;
; 200  : 
; 201  : 	for(int i = 1; i <= MAX_SKILLTREE_LEVEL; i++)
; 202  : 	{
; 203  : 		//g_Generic_Call(L, "FN_LuaGetPercent", "i>d", i, &fValue);
; 204  : 		fValue = 1 + ((((((((i) - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12);
; 205  : 		this->m_fValue[1][i] = this->RoundValue(fValue,2);
; 206  : 		
; 207  : 		//g_Generic_Call(L,"FN_LuaGetPercent2","i>d",i,&fValue);
; 208  : 		fValue = 0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)));
; 209  : 		this->m_fValue[2][i] = this->RoundValue(fValue,2);
; 210  : 
; 211  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMin","i>d",i,&fValue);
; 212  : 		fValue = (0.85 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 6;
; 213  : 		this->m_fValue[3][i] = this->RoundValue(fValue,2);
; 214  : 
; 215  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMiddle","i>d",i,&fValue);
; 216  : 		fValue = (0.9 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 8;
; 217  : 		this->m_fValue[4][i] = this->RoundValue(fValue,2);
; 218  : 
; 219  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMax","i>d",i,&fValue);
; 220  : 		fValue = (0.95 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 10;
; 221  : 		this->m_fValue[5][i] = this->RoundValue(fValue,2);
; 222  : 
; 223  : 		//g_Generic_Call(L,"FN_LuaGetMonsterKill","i>d",i,&fValue);
; 224  : 		fValue =  52 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6))));
; 225  : 		this->m_fValue[6][i] = this->RoundValue(fValue,2);
; 226  : 
; 227  : 		//g_Generic_Call(L,"FN_LuaGetPercent3","i>d",i,&fValue);
; 228  : 		fValue =  (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 1.5;
; 229  : 		this->m_fValue[7][i] = this->RoundValue(fValue,2);
; 230  : 
; 231  : 		//g_Generic_Call(L,"FN_LuaGetMaxAG","i>d",i,&fValue);
; 232  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 23;
; 233  : 		this->m_fValue[8][i] = this->RoundValue(fValue,2);
; 234  : 
; 235  : 		//g_Generic_Call(L,"FN_LuaGetMaxLifeMana","i>d",i,&fValue);
; 236  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85;
; 237  : 		this->m_fValue[9][i] = this->RoundValue(fValue,2);
; 238  : 
; 239  : 		//g_Generic_Call(L,"FN_LuaGetAttack","i>d",i,&fValue);
; 240  : 		fValue = (0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 8;
; 241  : 		this->m_fValue[10][i] = this->RoundValue(fValue,2);
; 242  : 
; 243  : 		//g_Generic_Call(L,"FN_LuaGetSDMonsterKill","i>d",i,&fValue);
; 244  : 		fValue = 11 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12));
; 245  : 		this->m_fValue[11][i] = this->RoundValue(fValue,2);
; 246  : 
; 247  : 		//g_Generic_Call(L,"FN_LuaGetBlockingRate","i>d",i,&fValue);
; 248  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 6;
; 249  : 		this->m_fValue[12][i] = this->RoundValue(fValue,2);
; 250  : 
; 251  : 		//g_Generic_Call(L,"FN_LuaGetAttackSuccessRate","i>d",i,&fValue);
; 252  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 5;
; 253  : 		this->m_fValue[13][i] = this->RoundValue(fValue,2);
; 254  : 
; 255  : 		//g_Generic_Call(L,"FN_LuaGetManAttackRate","i>d",i,&fValue);
; 256  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 8;
; 257  : 		this->m_fValue[14][i] = this->RoundValue(fValue,2);
; 258  : 
; 259  : 		//g_Generic_Call(L,"FN_LuaGetPercent4","i>d",i,&fValue);
; 260  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 15;
; 261  : 		this->m_fValue[15][i] = this->RoundValue(fValue,2);
; 262  : 
; 263  : 		//g_Generic_Call(L,"FN_LuaGetIncreaseBlocking","i>d",i,&fValue);
; 264  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 50;
; 265  : 		this->m_fValue[16][i] = this->RoundValue(fValue,2);
; 266  : 
; 267  : 		//g_Generic_Call(L,"FN_LuaGetIncreaseStat","i>d",i,&fValue);
; 268  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 10;
; 269  : 		this->m_fValue[17][i] = this->RoundValue(fValue,2);
; 270  : 
; 271  : 		//g_Generic_Call(L,"FN_LuaGetDecreaseMana","i>d",i,&fValue);
; 272  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 6;
; 273  : 		this->m_fValue[18][i] = this->RoundValue(fValue,2);
; 274  : 
; 275  : 		//g_Generic_Call(L,"FN_LuaGetChangeBlocking","i>d",i,&fValue);
; 276  : 		fValue = 50 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) + 20;
; 277  : 		this->m_fValue[19][i] = this->RoundValue(fValue,2);
; 278  : 
; 279  : 		//g_Generic_Call(L,"FN_LuaGetControlAttack","i>d",i,&fValue);
; 280  : 		fValue = 40 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) + 5;
; 281  : 		this->m_fValue[20][i] = this->RoundValue(fValue,2);
; 282  : 
; 283  : 		//g_Generic_Call(L,"FN_LuaGetManaIncRate","i>d",i,&fValue);
; 284  : 		fValue = (2 + (((((((i - 30 ) ^ 3) + 25000) / 499 ) / 6)))) * 1.5;
; 285  : 		this->m_fValue[21][i] = this->RoundValue(fValue,2);
; 286  : 
; 287  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMin2","i>d",i,&fValue);
; 288  : 		fValue = (0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 5;
; 289  : 		this->m_fValue[22][i] = this->RoundValue(fValue,2);
; 290  : 
; 291  : 		//g_Generic_Call(L,"FN_LuaGetAttackSpeed","i>d",i,&fValue);
; 292  : 		fValue = i * 1.0;
; 293  : 		this->m_fValue[23][i] = this->RoundValue(fValue,2);
; 294  : 
; 295  : 		//g_Generic_Call(L,"FN_LuaGetPercent5","i>d",i,&fValue);
; 296  : 		fValue = (0.95 + ( ( ( ( (((i - 30) ^ 3) + 25000) / 499) / 6)))) * 7.8;
; 297  : 		this->m_fValue[24][i] = this->RoundValue(fValue,2);
; 298  : 
; 299  : 		//g_Generic_Call(L,"FN_LuaGetBloodStorm","i>d",i,&fValue);
; 300  : 		fValue = 170;
; 301  : 		this->m_fValue[25][i] = this->RoundValue(fValue,2);
; 302  : 
; 303  : 		//g_Generic_Call(L,"FN_LuaGetEarthPrison","i>d",i,&fValue);
; 304  : 		fValue = 150;
; 305  : 		this->m_fValue[26][i] = this->RoundValue(fValue,2);
; 306  : 
; 307  : 		//g_Generic_Call(L,"FN_LuaGetPoisonArrow","i>d",i,&fValue);
; 308  : 		fValue = 130;
; 309  : 		this->m_fValue[27][i] = this->RoundValue(fValue,2);
; 310  : 
; 311  : 		//g_Generic_Call(L,"FN_LuaGetIronDefense","i>d",i,&fValue);
; 312  : 		fValue = 800;
; 313  : 		this->m_fValue[28][i] = this->RoundValue(fValue,2);
; 314  : 
; 315  : 		//g_Generic_Call(L,"FN_LuaGetBlockingRate_2","i>d",i,&fValue);
; 316  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 2.5;
; 317  : 		this->m_fValue[29][i] = this->RoundValue(fValue,2);
; 318  : 
; 319  : 		//g_Generic_Call(L,"FN_LuaGetAttackRate_2","i>d",i,&fValue);
; 320  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12) ) * 85 * 2;
; 321  : 		this->m_fValue[30][i] = this->RoundValue(fValue,2);
; 322  : 
; 323  : 		//g_Generic_Call(L,"FN_LuaGetManAttack_2","i>d",i,&fValue);
; 324  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 3.2;
; 325  : 		this->m_fValue[31][i] = this->RoundValue(fValue,2);
; 326  : 
; 327  : 		//g_Generic_Call(L,"FN_LuaGetMaxSD_2","i>d",i,&fValue);
; 328  : 		fValue = (1 + ( ( ( ( ( ((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 3;
; 329  : 		this->m_fValue[33][i] = this->RoundValue(fValue,2);
; 330  : 
; 331  : 		//g_Generic_Call(L,"FN_LuaGetMaxLifeMana_2","i>d",i,&fValue);
; 332  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 45;
; 333  : 		this->m_fValue[34][i] = this->RoundValue(fValue,2);
; 334  : 
; 335  : 		//g_Generic_Call(L,"FN_LuaGetIncBlocking_2","i>d",i,&fValue);
; 336  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 6) ) ) ) * 28;
; 337  : 		this->m_fValue[35][i] = this->RoundValue(fValue,2);
; 338  : 
; 339  : 		//g_Generic_Call(L,"FN_LuaGetIncStat_2","i>d",i,&fValue);
; 340  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 6) ) ) ) * 8;
; 341  : 		this->m_fValue[36][i] = this->RoundValue(fValue,2);
; 342  : 
; 343  : 		//g_Generic_Call(L,"FN_LuaGetMaxAG_2","i>d",i,&fValue);
; 344  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12) ) * 15;
; 345  : 		this->m_fValue[37][i] = this->RoundValue(fValue,2);
; 346  : 
; 347  : 		//g_Generic_Call(L,"FN_LuaGetRate_6","i>d",i,&fValue);
; 348  : 		fValue = (float) 0.94 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 20) ) );
; 349  : 		this->m_fValue[38][i] = this->RoundValue(fValue,2);
; 350  : 	}
; 351  : 
; 352  : 	//	this->m_Lua.Release();
; 353  : 
; 354  : #endif
; 355  : 
; 356  : 
; 357  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN4@Init:
  0005f	57		 push	 edi

; 62   : 		return;
; 63   : 	}
; 64   : 
; 65   : 	this->m_Lua.DoFile(gDirPath.GetNewPath("Lua\\MasterSkill.lua"));

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PAHHDMPF@Lua?2MasterSkill?4lua?$AA@
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0006a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0006f	50		 push	 eax
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?DoFile@MULua@@QAE_NPBD@Z ; MULua::DoFile

; 66   : 	lua_State* L = this->m_Lua.GetLua();

  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 ?GetLua@MULua@@QAEPAUlua_State@@XZ ; MULua::GetLua
  0007e	89 45 fc	 mov	 DWORD PTR _L$[ebp], eax

; 67   : 
; 68   : 	double fValue;
; 69   : 
; 70   : 	for(int i = 1; i <= MAX_SKILLTREE_LEVEL; i++)

  00081	be 01 00 00 00	 mov	 esi, 1
  00086	8d bb dc 3b 00
	00		 lea	 edi, DWORD PTR [ebx+15324]
  0008c	8d 64 24 00	 npad	 4
$LL9@Init:

; 71   : 	{
; 72   : 		g_Generic_Call(L, "FN_LuaGetPercent", "i>d", i, &fValue);

  00090	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  00093	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  00096	52		 push	 edx
  00097	56		 push	 esi
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 73   : 		this->m_fValue[1][i] = this->RoundValue(fValue,2);

  000a8	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  000ab	83 c4 14	 add	 esp, 20			; 00000014H
  000ae	6a 02		 push	 2
  000b0	83 ec 08	 sub	 esp, 8
  000b3	8b cb		 mov	 ecx, ebx
  000b5	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b8	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  000bd	d9 5f ac	 fstp	 DWORD PTR [edi-84]

; 74   : 		
; 75   : 		g_Generic_Call(L,"FN_LuaGetPercent2","i>d",i,&fValue);

  000c0	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  000c3	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  000c6	51		 push	 ecx
  000c7	56		 push	 esi
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 76   : 		this->m_fValue[2][i] = this->RoundValue(fValue,2);

  000d8	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  000db	83 c4 14	 add	 esp, 20			; 00000014H
  000de	6a 02		 push	 2
  000e0	83 ec 08	 sub	 esp, 8
  000e3	8b cb		 mov	 ecx, ebx
  000e5	dd 1c 24	 fstp	 QWORD PTR [esp]
  000e8	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  000ed	d9 1f		 fstp	 DWORD PTR [edi]

; 77   : 
; 78   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMin","i>d",i,&fValue);

  000ef	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  000f2	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  000f5	50		 push	 eax
  000f6	56		 push	 esi
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 79   : 		this->m_fValue[3][i] = this->RoundValue(fValue,2);

  00107	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0010a	83 c4 14	 add	 esp, 20			; 00000014H
  0010d	6a 02		 push	 2
  0010f	83 ec 08	 sub	 esp, 8
  00112	8b cb		 mov	 ecx, ebx
  00114	dd 1c 24	 fstp	 QWORD PTR [esp]
  00117	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0011c	d9 5f 54	 fstp	 DWORD PTR [edi+84]

; 80   : 
; 81   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMiddle","i>d",i,&fValue);

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  00122	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  00125	52		 push	 edx
  00126	56		 push	 esi
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 82   : 		this->m_fValue[4][i] = this->RoundValue(fValue,2);

  00137	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0013a	83 c4 14	 add	 esp, 20			; 00000014H
  0013d	6a 02		 push	 2
  0013f	83 ec 08	 sub	 esp, 8
  00142	8b cb		 mov	 ecx, ebx
  00144	dd 1c 24	 fstp	 QWORD PTR [esp]
  00147	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0014c	d9 9f a8 00 00
	00		 fstp	 DWORD PTR [edi+168]

; 83   : 
; 84   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMax","i>d",i,&fValue);

  00152	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  00155	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00158	51		 push	 ecx
  00159	56		 push	 esi
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 85   : 		this->m_fValue[5][i] = this->RoundValue(fValue,2);

  0016a	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0016d	83 c4 14	 add	 esp, 20			; 00000014H
  00170	6a 02		 push	 2
  00172	83 ec 08	 sub	 esp, 8
  00175	8b cb		 mov	 ecx, ebx
  00177	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017a	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0017f	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]

; 86   : 
; 87   : 		g_Generic_Call(L,"FN_LuaGetMonsterKill","i>d",i,&fValue);

  00185	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  00188	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  0018b	50		 push	 eax
  0018c	56		 push	 esi
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@
  00197	51		 push	 ecx
  00198	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 88   : 		this->m_fValue[6][i] = this->RoundValue(fValue,2);

  0019d	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  001a0	83 c4 14	 add	 esp, 20			; 00000014H
  001a3	6a 02		 push	 2
  001a5	83 ec 08	 sub	 esp, 8
  001a8	8b cb		 mov	 ecx, ebx
  001aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  001ad	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  001b2	d9 9f 50 01 00
	00		 fstp	 DWORD PTR [edi+336]

; 89   : 
; 90   : 		g_Generic_Call(L,"FN_LuaGetPercent3","i>d",i,&fValue);

  001b8	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  001bb	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  001be	52		 push	 edx
  001bf	56		 push	 esi
  001c0	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 91   : 		this->m_fValue[7][i] = this->RoundValue(fValue,2);

  001d0	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  001d3	83 c4 14	 add	 esp, 20			; 00000014H
  001d6	6a 02		 push	 2
  001d8	83 ec 08	 sub	 esp, 8
  001db	8b cb		 mov	 ecx, ebx
  001dd	dd 1c 24	 fstp	 QWORD PTR [esp]
  001e0	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  001e5	d9 9f a4 01 00
	00		 fstp	 DWORD PTR [edi+420]

; 92   : 
; 93   : 		g_Generic_Call(L,"FN_LuaGetMaxAG","i>d",i,&fValue);

  001eb	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  001ee	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  001f1	51		 push	 ecx
  001f2	56		 push	 esi
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  001f8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@
  001fd	52		 push	 edx
  001fe	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 94   : 		this->m_fValue[8][i] = this->RoundValue(fValue,2);

  00203	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00206	83 c4 14	 add	 esp, 20			; 00000014H
  00209	6a 02		 push	 2
  0020b	83 ec 08	 sub	 esp, 8
  0020e	8b cb		 mov	 ecx, ebx
  00210	dd 1c 24	 fstp	 QWORD PTR [esp]
  00213	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00218	d9 9f f8 01 00
	00		 fstp	 DWORD PTR [edi+504]

; 95   : 
; 96   : 		g_Generic_Call(L,"FN_LuaGetMaxLifeMana","i>d",i,&fValue);

  0021e	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  00221	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  00224	50		 push	 eax
  00225	56		 push	 esi
  00226	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@
  00230	51		 push	 ecx
  00231	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 97   : 		this->m_fValue[9][i] = this->RoundValue(fValue,2);

  00236	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00239	83 c4 14	 add	 esp, 20			; 00000014H
  0023c	6a 02		 push	 2
  0023e	83 ec 08	 sub	 esp, 8
  00241	8b cb		 mov	 ecx, ebx
  00243	dd 1c 24	 fstp	 QWORD PTR [esp]
  00246	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0024b	d9 9f 4c 02 00
	00		 fstp	 DWORD PTR [edi+588]

; 98   : 
; 99   : 		g_Generic_Call(L,"FN_LuaGetAttack","i>d",i,&fValue);

  00251	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  00254	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  00257	52		 push	 edx
  00258	56		 push	 esi
  00259	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@
  00263	50		 push	 eax
  00264	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 100  : 		this->m_fValue[10][i] = this->RoundValue(fValue,2);

  00269	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0026c	83 c4 14	 add	 esp, 20			; 00000014H
  0026f	6a 02		 push	 2
  00271	83 ec 08	 sub	 esp, 8
  00274	8b cb		 mov	 ecx, ebx
  00276	dd 1c 24	 fstp	 QWORD PTR [esp]
  00279	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0027e	d9 9f a0 02 00
	00		 fstp	 DWORD PTR [edi+672]

; 101  : 
; 102  : 		g_Generic_Call(L,"FN_LuaGetSDMonsterKill","i>d",i,&fValue);

  00284	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00287	51		 push	 ecx
  00288	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  0028b	56		 push	 esi
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@
  00296	52		 push	 edx
  00297	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 103  : 		this->m_fValue[11][i] = this->RoundValue(fValue,2);

  0029c	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0029f	83 c4 14	 add	 esp, 20			; 00000014H
  002a2	6a 02		 push	 2
  002a4	83 ec 08	 sub	 esp, 8
  002a7	8b cb		 mov	 ecx, ebx
  002a9	dd 1c 24	 fstp	 QWORD PTR [esp]
  002ac	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  002b1	d9 9f f4 02 00
	00		 fstp	 DWORD PTR [edi+756]

; 104  : 
; 105  : 		g_Generic_Call(L,"FN_LuaGetBlockingRate","i>d",i,&fValue);

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  002ba	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  002bd	50		 push	 eax
  002be	56		 push	 esi
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  002c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@
  002c9	51		 push	 ecx
  002ca	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 106  : 		this->m_fValue[12][i] = this->RoundValue(fValue,2);

  002cf	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  002d2	83 c4 14	 add	 esp, 20			; 00000014H
  002d5	6a 02		 push	 2
  002d7	83 ec 08	 sub	 esp, 8
  002da	8b cb		 mov	 ecx, ebx
  002dc	dd 1c 24	 fstp	 QWORD PTR [esp]
  002df	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  002e4	d9 9f 48 03 00
	00		 fstp	 DWORD PTR [edi+840]

; 107  : 
; 108  : 		g_Generic_Call(L,"FN_LuaGetAttackSuccessRate","i>d",i,&fValue);

  002ea	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  002ed	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  002f0	52		 push	 edx
  002f1	56		 push	 esi
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  002f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@
  002fc	50		 push	 eax
  002fd	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 109  : 		this->m_fValue[13][i] = this->RoundValue(fValue,2);

  00302	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00305	83 c4 14	 add	 esp, 20			; 00000014H
  00308	6a 02		 push	 2
  0030a	83 ec 08	 sub	 esp, 8
  0030d	8b cb		 mov	 ecx, ebx
  0030f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00312	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00317	d9 9f 9c 03 00
	00		 fstp	 DWORD PTR [edi+924]

; 110  : 
; 111  : 		g_Generic_Call(L,"FN_LuaGetManAttackRate","i>d",i,&fValue);

  0031d	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  00320	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00323	51		 push	 ecx
  00324	56		 push	 esi
  00325	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@
  0032f	52		 push	 edx
  00330	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 112  : 		this->m_fValue[14][i] = this->RoundValue(fValue,2);

  00335	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00338	83 c4 14	 add	 esp, 20			; 00000014H
  0033b	6a 02		 push	 2
  0033d	83 ec 08	 sub	 esp, 8
  00340	8b cb		 mov	 ecx, ebx
  00342	dd 1c 24	 fstp	 QWORD PTR [esp]
  00345	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0034a	d9 9f f0 03 00
	00		 fstp	 DWORD PTR [edi+1008]

; 113  : 
; 114  : 		g_Generic_Call(L,"FN_LuaGetPercent4","i>d",i,&fValue);

  00350	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  00353	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  00356	50		 push	 eax
  00357	56		 push	 esi
  00358	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0035d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@
  00362	51		 push	 ecx
  00363	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 115  : 		this->m_fValue[15][i] = this->RoundValue(fValue,2);

  00368	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0036b	83 c4 14	 add	 esp, 20			; 00000014H
  0036e	6a 02		 push	 2
  00370	83 ec 08	 sub	 esp, 8
  00373	8b cb		 mov	 ecx, ebx
  00375	dd 1c 24	 fstp	 QWORD PTR [esp]
  00378	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0037d	d9 9f 44 04 00
	00		 fstp	 DWORD PTR [edi+1092]

; 116  : 
; 117  : 		g_Generic_Call(L,"FN_LuaGetIncreaseBlocking","i>d",i,&fValue);

  00383	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  00386	52		 push	 edx
  00387	56		 push	 esi
  00388	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  0038b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00390	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@
  00395	50		 push	 eax
  00396	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 118  : 		this->m_fValue[16][i] = this->RoundValue(fValue,2);

  0039b	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0039e	83 c4 14	 add	 esp, 20			; 00000014H
  003a1	6a 02		 push	 2
  003a3	83 ec 08	 sub	 esp, 8
  003a6	8b cb		 mov	 ecx, ebx
  003a8	dd 1c 24	 fstp	 QWORD PTR [esp]
  003ab	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  003b0	d9 9f 98 04 00
	00		 fstp	 DWORD PTR [edi+1176]

; 119  : 
; 120  : 		g_Generic_Call(L,"FN_LuaGetIncreaseStat","i>d",i,&fValue);

  003b6	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  003b9	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  003bc	51		 push	 ecx
  003bd	56		 push	 esi
  003be	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  003c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@
  003c8	52		 push	 edx
  003c9	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 121  : 		this->m_fValue[17][i] = this->RoundValue(fValue,2);

  003ce	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  003d1	83 c4 14	 add	 esp, 20			; 00000014H
  003d4	6a 02		 push	 2
  003d6	83 ec 08	 sub	 esp, 8
  003d9	8b cb		 mov	 ecx, ebx
  003db	dd 1c 24	 fstp	 QWORD PTR [esp]
  003de	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  003e3	d9 9f ec 04 00
	00		 fstp	 DWORD PTR [edi+1260]

; 122  : 
; 123  : 		g_Generic_Call(L,"FN_LuaGetDecreaseMana","i>d",i,&fValue);

  003e9	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  003ec	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  003ef	50		 push	 eax
  003f0	56		 push	 esi
  003f1	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  003f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@
  003fb	51		 push	 ecx
  003fc	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 124  : 		this->m_fValue[18][i] = this->RoundValue(fValue,2);

  00401	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00404	83 c4 14	 add	 esp, 20			; 00000014H
  00407	6a 02		 push	 2
  00409	83 ec 08	 sub	 esp, 8
  0040c	8b cb		 mov	 ecx, ebx
  0040e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00411	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00416	d9 9f 40 05 00
	00		 fstp	 DWORD PTR [edi+1344]

; 125  : 
; 126  : 		g_Generic_Call(L,"FN_LuaGetChangeBlocking","i>d",i,&fValue);

  0041c	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  0041f	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  00422	52		 push	 edx
  00423	56		 push	 esi
  00424	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00429	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 127  : 		this->m_fValue[19][i] = this->RoundValue(fValue,2);

  00434	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00437	83 c4 14	 add	 esp, 20			; 00000014H
  0043a	6a 02		 push	 2
  0043c	83 ec 08	 sub	 esp, 8
  0043f	8b cb		 mov	 ecx, ebx
  00441	dd 1c 24	 fstp	 QWORD PTR [esp]
  00444	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00449	d9 9f 94 05 00
	00		 fstp	 DWORD PTR [edi+1428]

; 128  : 
; 129  : 		g_Generic_Call(L,"FN_LuaGetControlAttack","i>d",i,&fValue);

  0044f	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  00452	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00455	51		 push	 ecx
  00456	56		 push	 esi
  00457	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0045c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@
  00461	52		 push	 edx
  00462	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 130  : 		this->m_fValue[20][i] = this->RoundValue(fValue,2);

  00467	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0046a	83 c4 14	 add	 esp, 20			; 00000014H
  0046d	6a 02		 push	 2
  0046f	83 ec 08	 sub	 esp, 8
  00472	8b cb		 mov	 ecx, ebx
  00474	dd 1c 24	 fstp	 QWORD PTR [esp]
  00477	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0047c	d9 9f e8 05 00
	00		 fstp	 DWORD PTR [edi+1512]

; 131  : 
; 132  : 		g_Generic_Call(L,"FN_LuaGetManaIncRate","i>d",i,&fValue);

  00482	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  00485	50		 push	 eax
  00486	56		 push	 esi
  00487	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0048c	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 133  : 		this->m_fValue[21][i] = this->RoundValue(fValue,2);

  0049a	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0049d	83 c4 14	 add	 esp, 20			; 00000014H
  004a0	6a 02		 push	 2
  004a2	83 ec 08	 sub	 esp, 8
  004a5	8b cb		 mov	 ecx, ebx
  004a7	dd 1c 24	 fstp	 QWORD PTR [esp]
  004aa	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  004af	d9 9f 3c 06 00
	00		 fstp	 DWORD PTR [edi+1596]

; 134  : 
; 135  : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMin2","i>d",i,&fValue);

  004b5	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  004b8	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  004bb	52		 push	 edx
  004bc	56		 push	 esi
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  004c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@
  004c7	50		 push	 eax
  004c8	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 136  : 		this->m_fValue[22][i] = this->RoundValue(fValue,2);

  004cd	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  004d0	83 c4 14	 add	 esp, 20			; 00000014H
  004d3	6a 02		 push	 2
  004d5	83 ec 08	 sub	 esp, 8
  004d8	8b cb		 mov	 ecx, ebx
  004da	dd 1c 24	 fstp	 QWORD PTR [esp]
  004dd	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  004e2	d9 9f 90 06 00
	00		 fstp	 DWORD PTR [edi+1680]

; 137  : 
; 138  : 		g_Generic_Call(L,"FN_LuaGetAttackSpeed","i>d",i,&fValue);

  004e8	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  004eb	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  004ee	51		 push	 ecx
  004ef	56		 push	 esi
  004f0	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  004f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@
  004fa	52		 push	 edx
  004fb	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 139  : 		this->m_fValue[23][i] = this->RoundValue(fValue,2);

  00500	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00503	83 c4 14	 add	 esp, 20			; 00000014H
  00506	6a 02		 push	 2
  00508	83 ec 08	 sub	 esp, 8
  0050b	8b cb		 mov	 ecx, ebx
  0050d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00510	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00515	d9 9f e4 06 00
	00		 fstp	 DWORD PTR [edi+1764]

; 140  : 
; 141  : 		g_Generic_Call(L,"FN_LuaGetPercent5","i>d",i,&fValue);

  0051b	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  0051e	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  00521	50		 push	 eax
  00522	56		 push	 esi
  00523	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00528	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@
  0052d	51		 push	 ecx
  0052e	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 142  : 		this->m_fValue[24][i] = this->RoundValue(fValue,2);

  00533	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00536	83 c4 14	 add	 esp, 20			; 00000014H
  00539	6a 02		 push	 2
  0053b	83 ec 08	 sub	 esp, 8
  0053e	8b cb		 mov	 ecx, ebx
  00540	dd 1c 24	 fstp	 QWORD PTR [esp]
  00543	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00548	d9 9f 38 07 00
	00		 fstp	 DWORD PTR [edi+1848]

; 143  : 
; 144  : 		g_Generic_Call(L,"FN_LuaGetBloodStorm","i>d",i,&fValue);

  0054e	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  00551	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  00554	52		 push	 edx
  00555	56		 push	 esi
  00556	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0055b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KOKJPKNK@FN_LuaGetBloodStorm?$AA@
  00560	50		 push	 eax
  00561	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 145  : 		this->m_fValue[25][i] = this->RoundValue(fValue,2);

  00566	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00569	83 c4 14	 add	 esp, 20			; 00000014H
  0056c	6a 02		 push	 2
  0056e	83 ec 08	 sub	 esp, 8
  00571	8b cb		 mov	 ecx, ebx
  00573	dd 1c 24	 fstp	 QWORD PTR [esp]
  00576	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0057b	d9 9f 8c 07 00
	00		 fstp	 DWORD PTR [edi+1932]

; 146  : 
; 147  : 		g_Generic_Call(L,"FN_LuaGetEarthPrison","i>d",i,&fValue);

  00581	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00584	51		 push	 ecx
  00585	56		 push	 esi
  00586	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0058b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FKHJAMAB@FN_LuaGetEarthPrison?$AA@
  00590	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  00593	52		 push	 edx
  00594	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 148  : 		this->m_fValue[26][i] = this->RoundValue(fValue,2);

  00599	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0059c	83 c4 14	 add	 esp, 20			; 00000014H
  0059f	6a 02		 push	 2
  005a1	83 ec 08	 sub	 esp, 8
  005a4	8b cb		 mov	 ecx, ebx
  005a6	dd 1c 24	 fstp	 QWORD PTR [esp]
  005a9	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  005ae	d9 9f e0 07 00
	00		 fstp	 DWORD PTR [edi+2016]

; 149  : 
; 150  : 		g_Generic_Call(L,"FN_LuaGetPoisonArrow","i>d",i,&fValue);

  005b4	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  005b7	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  005ba	50		 push	 eax
  005bb	56		 push	 esi
  005bc	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  005c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GDGAGAMG@FN_LuaGetPoisonArrow?$AA@
  005c6	51		 push	 ecx
  005c7	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 151  : 		this->m_fValue[27][i] = this->RoundValue(fValue,2);

  005cc	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  005cf	83 c4 14	 add	 esp, 20			; 00000014H
  005d2	6a 02		 push	 2
  005d4	83 ec 08	 sub	 esp, 8
  005d7	8b cb		 mov	 ecx, ebx
  005d9	dd 1c 24	 fstp	 QWORD PTR [esp]
  005dc	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  005e1	d9 9f 34 08 00
	00		 fstp	 DWORD PTR [edi+2100]

; 152  : 
; 153  : 		g_Generic_Call(L,"FN_LuaGetIronDefense","i>d",i,&fValue);

  005e7	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  005ea	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  005ed	52		 push	 edx
  005ee	56		 push	 esi
  005ef	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  005f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NOFHHNAA@FN_LuaGetIronDefense?$AA@
  005f9	50		 push	 eax
  005fa	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 154  : 		this->m_fValue[28][i] = this->RoundValue(fValue,2);

  005ff	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00602	83 c4 14	 add	 esp, 20			; 00000014H
  00605	6a 02		 push	 2
  00607	83 ec 08	 sub	 esp, 8
  0060a	8b cb		 mov	 ecx, ebx
  0060c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0060f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00614	d9 9f 88 08 00
	00		 fstp	 DWORD PTR [edi+2184]

; 155  : 
; 156  : 		g_Generic_Call(L,"FN_LuaGetBlockingRate_2","i>d",i,&fValue);

  0061a	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  0061d	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00620	51		 push	 ecx
  00621	56		 push	 esi
  00622	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00627	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IOHMNLHN@FN_LuaGetBlockingRate_2?$AA@
  0062c	52		 push	 edx
  0062d	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 157  : 		this->m_fValue[29][i] = this->RoundValue(fValue,2);

  00632	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00635	83 c4 14	 add	 esp, 20			; 00000014H
  00638	6a 02		 push	 2
  0063a	83 ec 08	 sub	 esp, 8
  0063d	8b cb		 mov	 ecx, ebx
  0063f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00642	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00647	d9 9f dc 08 00
	00		 fstp	 DWORD PTR [edi+2268]

; 158  : 
; 159  : 		g_Generic_Call(L,"FN_LuaGetAttackRate_2","i>d",i,&fValue);

  0064d	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  00650	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  00653	50		 push	 eax
  00654	56		 push	 esi
  00655	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0065a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GGDFLEKK@FN_LuaGetAttackRate_2?$AA@
  0065f	51		 push	 ecx
  00660	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 160  : 		this->m_fValue[30][i] = this->RoundValue(fValue,2);

  00665	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00668	83 c4 14	 add	 esp, 20			; 00000014H
  0066b	6a 02		 push	 2
  0066d	83 ec 08	 sub	 esp, 8
  00670	8b cb		 mov	 ecx, ebx
  00672	dd 1c 24	 fstp	 QWORD PTR [esp]
  00675	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  0067a	d9 9f 30 09 00
	00		 fstp	 DWORD PTR [edi+2352]

; 161  : 
; 162  : 		g_Generic_Call(L,"FN_LuaGetManAttack_2","i>d",i,&fValue);

  00680	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  00683	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  00686	52		 push	 edx
  00687	56		 push	 esi
  00688	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0068d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HNJNEHMD@FN_LuaGetManAttack_2?$AA@
  00692	50		 push	 eax
  00693	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 163  : 		this->m_fValue[31][i] = this->RoundValue(fValue,2);

  00698	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0069b	83 c4 14	 add	 esp, 20			; 00000014H
  0069e	6a 02		 push	 2
  006a0	83 ec 08	 sub	 esp, 8
  006a3	8b cb		 mov	 ecx, ebx
  006a5	dd 1c 24	 fstp	 QWORD PTR [esp]
  006a8	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  006ad	d9 9f 84 09 00
	00		 fstp	 DWORD PTR [edi+2436]

; 164  : 
; 165  : 		g_Generic_Call(L,"FN_LuaGetMaxSD_2","i>d",i,&fValue);

  006b3	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  006b6	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  006b9	51		 push	 ecx
  006ba	56		 push	 esi
  006bb	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  006c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JLGAHLKB@FN_LuaGetMaxSD_2?$AA@
  006c5	52		 push	 edx
  006c6	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 166  : 		this->m_fValue[33][i] = this->RoundValue(fValue,2);

  006cb	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  006ce	83 c4 14	 add	 esp, 20			; 00000014H
  006d1	6a 02		 push	 2
  006d3	83 ec 08	 sub	 esp, 8
  006d6	8b cb		 mov	 ecx, ebx
  006d8	dd 1c 24	 fstp	 QWORD PTR [esp]
  006db	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  006e0	d9 9f 2c 0a 00
	00		 fstp	 DWORD PTR [edi+2604]

; 167  : 
; 168  : 		g_Generic_Call(L,"FN_LuaGetMaxLifeMana_2","i>d",i,&fValue);

  006e6	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  006e9	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  006ec	50		 push	 eax
  006ed	56		 push	 esi
  006ee	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  006f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FICCLEM@FN_LuaGetMaxLifeMana_2?$AA@
  006f8	51		 push	 ecx
  006f9	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 169  : 		this->m_fValue[34][i] = this->RoundValue(fValue,2);

  006fe	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00701	83 c4 14	 add	 esp, 20			; 00000014H
  00704	6a 02		 push	 2
  00706	83 ec 08	 sub	 esp, 8
  00709	8b cb		 mov	 ecx, ebx
  0070b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0070e	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00713	d9 9f 80 0a 00
	00		 fstp	 DWORD PTR [edi+2688]

; 170  : 
; 171  : 		g_Generic_Call(L,"FN_LuaGetIncBlocking_2","i>d",i,&fValue);

  00719	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  0071c	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  0071f	52		 push	 edx
  00720	56		 push	 esi
  00721	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00726	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PNBCLGBJ@FN_LuaGetIncBlocking_2?$AA@
  0072b	50		 push	 eax
  0072c	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 172  : 		this->m_fValue[35][i] = this->RoundValue(fValue,2);

  00731	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00734	83 c4 14	 add	 esp, 20			; 00000014H
  00737	6a 02		 push	 2
  00739	83 ec 08	 sub	 esp, 8
  0073c	8b cb		 mov	 ecx, ebx
  0073e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00741	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00746	d9 9f d4 0a 00
	00		 fstp	 DWORD PTR [edi+2772]

; 173  : 
; 174  : 		g_Generic_Call(L,"FN_LuaGetIncStat_2","i>d",i,&fValue);

  0074c	8b 55 fc	 mov	 edx, DWORD PTR _L$[ebp]
  0074f	8d 4d f0	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00752	51		 push	 ecx
  00753	56		 push	 esi
  00754	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00759	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KJMMMHPN@FN_LuaGetIncStat_2?$AA@
  0075e	52		 push	 edx
  0075f	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 175  : 		this->m_fValue[36][i] = this->RoundValue(fValue,2);

  00764	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  00767	83 c4 14	 add	 esp, 20			; 00000014H
  0076a	6a 02		 push	 2
  0076c	83 ec 08	 sub	 esp, 8
  0076f	8b cb		 mov	 ecx, ebx
  00771	dd 1c 24	 fstp	 QWORD PTR [esp]
  00774	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00779	d9 9f 28 0b 00
	00		 fstp	 DWORD PTR [edi+2856]

; 176  : 
; 177  : 		g_Generic_Call(L,"FN_LuaGetMaxAG_2","i>d",i,&fValue);

  0077f	8b 4d fc	 mov	 ecx, DWORD PTR _L$[ebp]
  00782	8d 45 f0	 lea	 eax, DWORD PTR _fValue$[ebp]
  00785	50		 push	 eax
  00786	56		 push	 esi
  00787	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0078c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JDPFBAKN@FN_LuaGetMaxAG_2?$AA@
  00791	51		 push	 ecx
  00792	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 178  : 		this->m_fValue[37][i] = this->RoundValue(fValue,2);

  00797	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  0079a	83 c4 14	 add	 esp, 20			; 00000014H
  0079d	6a 02		 push	 2
  0079f	83 ec 08	 sub	 esp, 8
  007a2	8b cb		 mov	 ecx, ebx
  007a4	dd 1c 24	 fstp	 QWORD PTR [esp]
  007a7	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  007ac	d9 9f 7c 0b 00
	00		 fstp	 DWORD PTR [edi+2940]

; 179  : 
; 180  : 		g_Generic_Call(L,"FN_LuaGetRate_6","i>d",i,&fValue);

  007b2	8b 45 fc	 mov	 eax, DWORD PTR _L$[ebp]
  007b5	8d 55 f0	 lea	 edx, DWORD PTR _fValue$[ebp]
  007b8	52		 push	 edx
  007b9	56		 push	 esi
  007ba	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  007bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OJAEHKGE@FN_LuaGetRate_6?$AA@
  007c4	50		 push	 eax
  007c5	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 181  : 		this->m_fValue[38][i] = this->RoundValue(fValue,2);

  007ca	dd 45 f0	 fld	 QWORD PTR _fValue$[ebp]
  007cd	83 c4 14	 add	 esp, 20			; 00000014H
  007d0	6a 02		 push	 2
  007d2	83 ec 08	 sub	 esp, 8
  007d5	8b cb		 mov	 ecx, ebx
  007d7	dd 1c 24	 fstp	 QWORD PTR [esp]
  007da	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  007df	d9 9f d0 0b 00
	00		 fstp	 DWORD PTR [edi+3024]
  007e5	46		 inc	 esi
  007e6	83 c7 04	 add	 edi, 4
  007e9	83 fe 14	 cmp	 esi, 20			; 00000014H
  007ec	0f 8e 9e f8 ff
	ff		 jle	 $LL9@Init

; 182  : 	}
; 183  : 
; 184  : 	this->m_Lua.Release();

  007f2	8b 4d f8	 mov	 ecx, DWORD PTR tv706[ebp]
  007f5	e8 00 00 00 00	 call	 ?Release@MULua@@QAEXXZ	; MULua::Release
  007fa	5f		 pop	 edi
  007fb	5e		 pop	 esi
  007fc	5b		 pop	 ebx

; 185  : 
; 186  : #else 
; 187  : 
; 188  : 	//	lua_State* pLuaState = this->m_Lua.GetLua();
; 189  : 
; 190  : 	//if( pLuaState == NULL )
; 191  : 	//{
; 192  : 	//	LogAddTD("[MasterLevelSkillTreeSystem] - Error - [%s] [%d]",__FILE__,__LINE__);
; 193  : 	//	return;
; 194  : 	//}
; 195  : 
; 196  : //	this->m_Lua.DoFile(gDirPath.GetNewPath("Lua\\MasterSkill.lua"));
; 197  : //	lua_State* L = this->m_Lua.GetLua();
; 198  : 
; 199  : 	double fValue;
; 200  : 
; 201  : 	for(int i = 1; i <= MAX_SKILLTREE_LEVEL; i++)
; 202  : 	{
; 203  : 		//g_Generic_Call(L, "FN_LuaGetPercent", "i>d", i, &fValue);
; 204  : 		fValue = 1 + ((((((((i) - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12);
; 205  : 		this->m_fValue[1][i] = this->RoundValue(fValue,2);
; 206  : 		
; 207  : 		//g_Generic_Call(L,"FN_LuaGetPercent2","i>d",i,&fValue);
; 208  : 		fValue = 0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)));
; 209  : 		this->m_fValue[2][i] = this->RoundValue(fValue,2);
; 210  : 
; 211  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMin","i>d",i,&fValue);
; 212  : 		fValue = (0.85 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 6;
; 213  : 		this->m_fValue[3][i] = this->RoundValue(fValue,2);
; 214  : 
; 215  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMiddle","i>d",i,&fValue);
; 216  : 		fValue = (0.9 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 8;
; 217  : 		this->m_fValue[4][i] = this->RoundValue(fValue,2);
; 218  : 
; 219  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMax","i>d",i,&fValue);
; 220  : 		fValue = (0.95 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 10;
; 221  : 		this->m_fValue[5][i] = this->RoundValue(fValue,2);
; 222  : 
; 223  : 		//g_Generic_Call(L,"FN_LuaGetMonsterKill","i>d",i,&fValue);
; 224  : 		fValue =  52 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6))));
; 225  : 		this->m_fValue[6][i] = this->RoundValue(fValue,2);
; 226  : 
; 227  : 		//g_Generic_Call(L,"FN_LuaGetPercent3","i>d",i,&fValue);
; 228  : 		fValue =  (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 1.5;
; 229  : 		this->m_fValue[7][i] = this->RoundValue(fValue,2);
; 230  : 
; 231  : 		//g_Generic_Call(L,"FN_LuaGetMaxAG","i>d",i,&fValue);
; 232  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 23;
; 233  : 		this->m_fValue[8][i] = this->RoundValue(fValue,2);
; 234  : 
; 235  : 		//g_Generic_Call(L,"FN_LuaGetMaxLifeMana","i>d",i,&fValue);
; 236  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85;
; 237  : 		this->m_fValue[9][i] = this->RoundValue(fValue,2);
; 238  : 
; 239  : 		//g_Generic_Call(L,"FN_LuaGetAttack","i>d",i,&fValue);
; 240  : 		fValue = (0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 8;
; 241  : 		this->m_fValue[10][i] = this->RoundValue(fValue,2);
; 242  : 
; 243  : 		//g_Generic_Call(L,"FN_LuaGetSDMonsterKill","i>d",i,&fValue);
; 244  : 		fValue = 11 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12));
; 245  : 		this->m_fValue[11][i] = this->RoundValue(fValue,2);
; 246  : 
; 247  : 		//g_Generic_Call(L,"FN_LuaGetBlockingRate","i>d",i,&fValue);
; 248  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 6;
; 249  : 		this->m_fValue[12][i] = this->RoundValue(fValue,2);
; 250  : 
; 251  : 		//g_Generic_Call(L,"FN_LuaGetAttackSuccessRate","i>d",i,&fValue);
; 252  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 5;
; 253  : 		this->m_fValue[13][i] = this->RoundValue(fValue,2);
; 254  : 
; 255  : 		//g_Generic_Call(L,"FN_LuaGetManAttackRate","i>d",i,&fValue);
; 256  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 8;
; 257  : 		this->m_fValue[14][i] = this->RoundValue(fValue,2);
; 258  : 
; 259  : 		//g_Generic_Call(L,"FN_LuaGetPercent4","i>d",i,&fValue);
; 260  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 15;
; 261  : 		this->m_fValue[15][i] = this->RoundValue(fValue,2);
; 262  : 
; 263  : 		//g_Generic_Call(L,"FN_LuaGetIncreaseBlocking","i>d",i,&fValue);
; 264  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 50;
; 265  : 		this->m_fValue[16][i] = this->RoundValue(fValue,2);
; 266  : 
; 267  : 		//g_Generic_Call(L,"FN_LuaGetIncreaseStat","i>d",i,&fValue);
; 268  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 10;
; 269  : 		this->m_fValue[17][i] = this->RoundValue(fValue,2);
; 270  : 
; 271  : 		//g_Generic_Call(L,"FN_LuaGetDecreaseMana","i>d",i,&fValue);
; 272  : 		fValue = (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 6;
; 273  : 		this->m_fValue[18][i] = this->RoundValue(fValue,2);
; 274  : 
; 275  : 		//g_Generic_Call(L,"FN_LuaGetChangeBlocking","i>d",i,&fValue);
; 276  : 		fValue = 50 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) + 20;
; 277  : 		this->m_fValue[19][i] = this->RoundValue(fValue,2);
; 278  : 
; 279  : 		//g_Generic_Call(L,"FN_LuaGetControlAttack","i>d",i,&fValue);
; 280  : 		fValue = 40 / (1 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) + 5;
; 281  : 		this->m_fValue[20][i] = this->RoundValue(fValue,2);
; 282  : 
; 283  : 		//g_Generic_Call(L,"FN_LuaGetManaIncRate","i>d",i,&fValue);
; 284  : 		fValue = (2 + (((((((i - 30 ) ^ 3) + 25000) / 499 ) / 6)))) * 1.5;
; 285  : 		this->m_fValue[21][i] = this->RoundValue(fValue,2);
; 286  : 
; 287  : 		//g_Generic_Call(L,"FN_LuaGetSkillDamageMin2","i>d",i,&fValue);
; 288  : 		fValue = (0.8 + (((((((i - 30) ^ 3) + 25000) / 499) / 6)))) * 5;
; 289  : 		this->m_fValue[22][i] = this->RoundValue(fValue,2);
; 290  : 
; 291  : 		//g_Generic_Call(L,"FN_LuaGetAttackSpeed","i>d",i,&fValue);
; 292  : 		fValue = i * 1.0;
; 293  : 		this->m_fValue[23][i] = this->RoundValue(fValue,2);
; 294  : 
; 295  : 		//g_Generic_Call(L,"FN_LuaGetPercent5","i>d",i,&fValue);
; 296  : 		fValue = (0.95 + ( ( ( ( (((i - 30) ^ 3) + 25000) / 499) / 6)))) * 7.8;
; 297  : 		this->m_fValue[24][i] = this->RoundValue(fValue,2);
; 298  : 
; 299  : 		//g_Generic_Call(L,"FN_LuaGetBloodStorm","i>d",i,&fValue);
; 300  : 		fValue = 170;
; 301  : 		this->m_fValue[25][i] = this->RoundValue(fValue,2);
; 302  : 
; 303  : 		//g_Generic_Call(L,"FN_LuaGetEarthPrison","i>d",i,&fValue);
; 304  : 		fValue = 150;
; 305  : 		this->m_fValue[26][i] = this->RoundValue(fValue,2);
; 306  : 
; 307  : 		//g_Generic_Call(L,"FN_LuaGetPoisonArrow","i>d",i,&fValue);
; 308  : 		fValue = 130;
; 309  : 		this->m_fValue[27][i] = this->RoundValue(fValue,2);
; 310  : 
; 311  : 		//g_Generic_Call(L,"FN_LuaGetIronDefense","i>d",i,&fValue);
; 312  : 		fValue = 800;
; 313  : 		this->m_fValue[28][i] = this->RoundValue(fValue,2);
; 314  : 
; 315  : 		//g_Generic_Call(L,"FN_LuaGetBlockingRate_2","i>d",i,&fValue);
; 316  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 2.5;
; 317  : 		this->m_fValue[29][i] = this->RoundValue(fValue,2);
; 318  : 
; 319  : 		//g_Generic_Call(L,"FN_LuaGetAttackRate_2","i>d",i,&fValue);
; 320  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12) ) * 85 * 2;
; 321  : 		this->m_fValue[30][i] = this->RoundValue(fValue,2);
; 322  : 
; 323  : 		//g_Generic_Call(L,"FN_LuaGetManAttack_2","i>d",i,&fValue);
; 324  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 3.2;
; 325  : 		this->m_fValue[31][i] = this->RoundValue(fValue,2);
; 326  : 
; 327  : 		//g_Generic_Call(L,"FN_LuaGetMaxSD_2","i>d",i,&fValue);
; 328  : 		fValue = (1 + ( ( ( ( ( ((i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 85 * 3;
; 329  : 		this->m_fValue[33][i] = this->RoundValue(fValue,2);
; 330  : 
; 331  : 		//g_Generic_Call(L,"FN_LuaGetMaxLifeMana_2","i>d",i,&fValue);
; 332  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12)) * 45;
; 333  : 		this->m_fValue[34][i] = this->RoundValue(fValue,2);
; 334  : 
; 335  : 		//g_Generic_Call(L,"FN_LuaGetIncBlocking_2","i>d",i,&fValue);
; 336  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 6) ) ) ) * 28;
; 337  : 		this->m_fValue[35][i] = this->RoundValue(fValue,2);
; 338  : 
; 339  : 		//g_Generic_Call(L,"FN_LuaGetIncStat_2","i>d",i,&fValue);
; 340  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 6) ) ) ) * 8;
; 341  : 		this->m_fValue[36][i] = this->RoundValue(fValue,2);
; 342  : 
; 343  : 		//g_Generic_Call(L,"FN_LuaGetMaxAG_2","i>d",i,&fValue);
; 344  : 		fValue = (1 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 50) * 100) / 12) ) * 15;
; 345  : 		this->m_fValue[37][i] = this->RoundValue(fValue,2);
; 346  : 
; 347  : 		//g_Generic_Call(L,"FN_LuaGetRate_6","i>d",i,&fValue);
; 348  : 		fValue = (float) 0.94 + ( ( ( ( ( ( (i - 30) ^ 3) + 25000) / 499) / 20) ) );
; 349  : 		this->m_fValue[38][i] = this->RoundValue(fValue,2);
; 350  : 	}
; 351  : 
; 352  : 	//	this->m_Lua.Release();
; 353  : 
; 354  : #endif
; 355  : 
; 356  : 
; 357  : }

  007fd	8b e5		 mov	 esp, ebp
  007ff	5d		 pop	 ebp
  00800	c3		 ret	 0
?Init@CMasterLevelSkillTreeSystem@@QAEXXZ ENDP		; CMasterLevelSkillTreeSystem::Init
_TEXT	ENDS
PUBLIC	??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@ ; `string'
PUBLIC	??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@ ; `string'
PUBLIC	??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z	; CMasterLevelSkillTreeSystem::Load
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_R0H@8
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT ??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@
CONST	SEGMENT
??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@ DB '[Master'
	DB	'LevelSkillTreeSystem] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@
CONST	SEGMENT
??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@
CONST	SEGMENT
??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@ DB '[Mas'
	DB	'terLevelSkillTreeSystem] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@
CONST	SEGMENT
??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Can''t Open %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$2 DD 00H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	FLAT:__catch$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$0
__unwindtable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$2
__ehfuncinfo$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
_TEXT	SEGMENT
_iSkillID$216318 = -52					; size = 4
_iParentSkill2$216317 = -48				; size = 4
_iParentSkill1$216316 = -44				; size = 4
_iMaxPoint$216315 = -40					; size = 4
_iPoint$216314 = -36					; size = 4
_iPos$216310 = -32					; size = 4
_iTreeKind$216313 = -28					; size = 4
tv257 = -24						; size = 4
tv157 = -24						; size = 4
_iClassType$216311 = -24				; size = 4
_i$216319 = -20						; size = 4
tv245 = -18						; size = 2
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z PROC	; CMasterLevelSkillTreeSystem::Load, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 362  : 	if( this->IsLoaded )

  0002d	80 be c8 55 00
	00 00		 cmp	 BYTE PTR [esi+21960], 0
  00034	0f 85 2f 03 00
	00		 jne	 $LN20@Load

; 363  : 	{
; 364  : 		return;
; 365  : 	}
; 366  : 
; 367  : 	if( lpszFileName == NULL || !strcmp(lpszFileName,"") )

  0003a	8b 7d 08	 mov	 edi, DWORD PTR _lpszFileName$[ebp]
  0003d	85 ff		 test	 edi, edi
  0003f	0f 84 17 03 00
	00		 je	 $LN13@Load
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004a	8b c7		 mov	 eax, edi
  0004c	8d 64 24 00	 npad	 4
$LL29@Load:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN30@Load
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN31@Load
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN30@Load
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL29@Load
$LN31@Load:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN32@Load
$LN30@Load:
  00070	1b c0		 sbb	 eax, eax
  00072	83 d8 ff	 sbb	 eax, -1
$LN32@Load:
  00075	85 c0		 test	 eax, eax
  00077	0f 84 df 02 00
	00		 je	 $LN13@Load

; 370  : 		return;
; 371  : 	}
; 372  : 
; 373  : 	try
; 374  : 	{
; 375  : 		SMDFile = fopen(lpszFileName,"r");	//ok

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00082	57		 push	 edi
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008a	e8 00 00 00 00	 call	 _fopen
  0008f	83 c4 08	 add	 esp, 8
  00092	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 376  : 
; 377  : 		if( SMDFile == NULL )

  00097	85 c0		 test	 eax, eax
  00099	75 22		 jne	 SHORT $LN11@Load

; 378  : 		{
; 379  : 			MsgBox("[MasterLevelSkillTreeSystem] - Can't Open %s ",lpszFileName);

  0009b	57		 push	 edi
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@
  000a1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a6	83 c4 08	 add	 esp, 8

; 455  : }

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 04 00	 ret	 4
$LN11@Load:

; 380  : 			return;
; 381  : 		}
; 382  : 
; 383  : 		this->Init();

  000bd	8b ce		 mov	 ecx, esi
  000bf	e8 00 00 00 00	 call	 ?Init@CMasterLevelSkillTreeSystem@@QAEXXZ ; CMasterLevelSkillTreeSystem::Init
$LL10@Load:

; 384  : 		SMDToken Token;
; 385  : 		int iIndex = -1;
; 386  : 
; 387  : 		while( TRUE )
; 388  : 		{
; 389  : 			if( !strcmp("end",TokenString) )

  000c4	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000c9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000ce	8b ff		 npad	 2
$LL33@Load:
  000d0	8a 10		 mov	 dl, BYTE PTR [eax]
  000d2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000d4	75 1a		 jne	 SHORT $LN34@Load
  000d6	84 d2		 test	 dl, dl
  000d8	74 12		 je	 SHORT $LN35@Load
  000da	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000dd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000e0	75 0e		 jne	 SHORT $LN34@Load
  000e2	83 c0 02	 add	 eax, 2
  000e5	83 c1 02	 add	 ecx, 2
  000e8	84 d2		 test	 dl, dl
  000ea	75 e4		 jne	 SHORT $LL33@Load
$LN35@Load:
  000ec	33 c0		 xor	 eax, eax
  000ee	eb 05		 jmp	 SHORT $LN36@Load
$LN34@Load:
  000f0	1b c0		 sbb	 eax, eax
  000f2	83 d8 ff	 sbb	 eax, -1
$LN36@Load:
  000f5	85 c0		 test	 eax, eax
  000f7	75 37		 jne	 SHORT $LL7@Load

; 441  : 					}
; 442  : 				}
; 443  : 			}
; 444  : 		}
; 445  : 
; 446  : 		fclose(SMDFile);

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 _fclose

; 447  : 		LogAddTD("[MasterLevelSkillTreeSystem] - %s file is Loaded",lpszFileName);

  00104	57		 push	 edi
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH

; 448  : 		this->IsLoaded = true;

  00113	c6 86 c8 55 00
	00 01		 mov	 BYTE PTR [esi+21960], 1

; 455  : }

  0011a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0011d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00124	59		 pop	 ecx
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 04 00	 ret	 4
  0012e	8b ff		 npad	 2
$LL7@Load:

; 390  : 				break;
; 391  : 
; 392  : 			while( TRUE )
; 393  : 			{
; 394  : 				Token = GetToken();

  00130	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 395  : 
; 396  : 				if( !strcmp("end",TokenString) )

  00135	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0013a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0013f	90		 npad	 1
$LL37@Load:
  00140	8a 10		 mov	 dl, BYTE PTR [eax]
  00142	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00144	75 1a		 jne	 SHORT $LN38@Load
  00146	84 d2		 test	 dl, dl
  00148	74 12		 je	 SHORT $LN39@Load
  0014a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0014d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00150	75 0e		 jne	 SHORT $LN38@Load
  00152	83 c0 02	 add	 eax, 2
  00155	83 c1 02	 add	 ecx, 2
  00158	84 d2		 test	 dl, dl
  0015a	75 e4		 jne	 SHORT $LL37@Load
$LN39@Load:
  0015c	33 c0		 xor	 eax, eax
  0015e	eb 05		 jmp	 SHORT $LN40@Load
$LN38@Load:
  00160	1b c0		 sbb	 eax, eax
  00162	83 d8 ff	 sbb	 eax, -1
$LN40@Load:
  00165	85 c0		 test	 eax, eax
  00167	0f 84 b6 01 00
	00		 je	 $LN45@Load

; 397  : 					break;
; 398  : 
; 399  : 				//Token = GetToken();	//SkillID
; 400  : 
; 401  : 				iIndex = (int)TokenNumber;

  0016d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00173	e8 00 00 00 00	 call	 __ftol2_sse
  00178	8b f8		 mov	 edi, eax

; 402  : 				int iTempIndex = iIndex%36-1;

  0017a	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0017f	f7 ef		 imul	 edi
  00181	c1 fa 03	 sar	 edx, 3
  00184	8b c2		 mov	 eax, edx
  00186	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00189	03 c2		 add	 eax, edx
  0018b	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0018e	03 c9		 add	 ecx, ecx
  00190	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00193	8b cf		 mov	 ecx, edi
  00195	2b ca		 sub	 ecx, edx
  00197	49		 dec	 ecx

; 403  : 				int iRank = iTempIndex/4;

  00198	8b c1		 mov	 eax, ecx
  0019a	99		 cdq
  0019b	83 e2 03	 and	 edx, 3
  0019e	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  001a1	c1 fb 02	 sar	 ebx, 2

; 404  : 				int iPos = iTempIndex%4;

  001a4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001aa	79 05		 jns	 SHORT $LN47@Load
  001ac	49		 dec	 ecx
  001ad	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001b0	41		 inc	 ecx
$LN47@Load:
  001b1	89 4d e0	 mov	 DWORD PTR _iPos$216310[ebp], ecx

; 405  : 
; 406  : 				Token = GetToken();

  001b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 407  : 				int iClassType = (WORD)TokenNumber;

  001b9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001bf	d9 7d ee	 fnstcw	 WORD PTR tv245[ebp]
  001c2	0f b7 45 ee	 movzx	 eax, WORD PTR tv245[ebp]
  001c6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001cb	89 45 e8	 mov	 DWORD PTR tv157[ebp], eax
  001ce	d9 6d e8	 fldcw	 WORD PTR tv157[ebp]
  001d1	db 5d e8	 fistp	 DWORD PTR tv257[ebp]
  001d4	66 8b 45 e8	 mov	 ax, WORD PTR tv257[ebp]
  001d8	0f b7 c8	 movzx	 ecx, ax
  001db	89 4d e8	 mov	 DWORD PTR _iClassType$216311[ebp], ecx
  001de	d9 6d ee	 fldcw	 WORD PTR tv245[ebp]

; 408  : 
; 409  : 				Token = GetToken();

  001e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 410  : 				int iTreeKind = TokenNumber;

  001e6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ec	e8 00 00 00 00	 call	 __ftol2_sse
  001f1	89 45 e4	 mov	 DWORD PTR _iTreeKind$216313[ebp], eax

; 411  : 
; 412  : 				Token = GetToken();

  001f4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 413  : 				int iPoint = TokenNumber;

  001f9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ff	e8 00 00 00 00	 call	 __ftol2_sse
  00204	89 45 dc	 mov	 DWORD PTR _iPoint$216314[ebp], eax

; 414  : 
; 415  : 				Token = GetToken();

  00207	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 416  : 				int iMaxPoint = TokenNumber;

  0020c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00212	e8 00 00 00 00	 call	 __ftol2_sse
  00217	89 45 d8	 mov	 DWORD PTR _iMaxPoint$216315[ebp], eax

; 417  : 
; 418  : 				Token = GetToken();

  0021a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 419  : 
; 420  : 				Token = GetToken();

  0021f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 421  : 				int iParentSkill1 = TokenNumber;

  00224	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022a	e8 00 00 00 00	 call	 __ftol2_sse
  0022f	89 45 d4	 mov	 DWORD PTR _iParentSkill1$216316[ebp], eax

; 422  : 
; 423  : 				Token = GetToken();

  00232	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 424  : 				int iParentSkill2 = TokenNumber;

  00237	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023d	e8 00 00 00 00	 call	 __ftol2_sse
  00242	89 45 d0	 mov	 DWORD PTR _iParentSkill2$216317[ebp], eax

; 425  : 
; 426  : 				Token = GetToken();

  00245	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 427  : 				int iSkillID = TokenNumber;

  0024a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00250	e8 00 00 00 00	 call	 __ftol2_sse
  00255	89 45 cc	 mov	 DWORD PTR _iSkillID$216318[ebp], eax

; 428  : 
; 429  : 				Token = GetToken();

  00258	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 430  : 
; 431  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)

  0025d	33 c9		 xor	 ecx, ecx
$LN48@Load:
  0025f	89 4d ec	 mov	 DWORD PTR _i$216319[ebp], ecx
  00262	83 f9 07	 cmp	 ecx, 7
  00265	0f 8d c5 fe ff
	ff		 jge	 $LL7@Load

; 432  : 				{
; 433  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  0026b	8b 55 e8	 mov	 edx, DWORD PTR _iClassType$216311[ebp]
  0026e	85 14 cd 00 00
	00 00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[ecx*8], edx
  00275	0f 84 a2 00 00
	00		 je	 $LN3@Load

; 434  : 					{
; 435  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  0027b	8b 45 e4	 mov	 eax, DWORD PTR _iTreeKind$216313[ebp]
  0027e	8d 14 c3	 lea	 edx, DWORD PTR [ebx+eax*8]
  00281	03 d0		 add	 edx, eax
  00283	8b 45 e0	 mov	 eax, DWORD PTR _iPos$216310[ebp]
  00286	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00289	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[ecx*8+4]
  00290	69 d2 74 08 00
	00		 imul	 edx, 2164		; 00000874H
  00296	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00299	03 c0		 add	 eax, eax
  0029b	03 c0		 add	 eax, eax
  0029d	03 d0		 add	 edx, eax
  0029f	89 7c 32 08	 mov	 DWORD PTR [edx+esi+8], edi

; 436  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  002a3	8b 0c cd 04 00
	00 00		 mov	 ecx, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[ecx*8+4]
  002aa	8a 55 dc	 mov	 dl, BYTE PTR _iPoint$216314[ebp]
  002ad	69 c9 74 08 00
	00		 imul	 ecx, 2164		; 00000874H
  002b3	03 c8		 add	 ecx, eax
  002b5	88 54 31 0c	 mov	 BYTE PTR [ecx+esi+12], dl

; 437  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  002b9	8b 4d ec	 mov	 ecx, DWORD PTR _i$216319[ebp]
  002bc	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[ecx*8+4]
  002c3	8a 4d d8	 mov	 cl, BYTE PTR _iMaxPoint$216315[ebp]
  002c6	69 d2 74 08 00
	00		 imul	 edx, 2164		; 00000874H
  002cc	03 d0		 add	 edx, eax
  002ce	88 4c 32 0d	 mov	 BYTE PTR [edx+esi+13], cl

; 438  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  002d2	8b 55 ec	 mov	 edx, DWORD PTR _i$216319[ebp]
  002d5	8b 0c d5 04 00
	00 00		 mov	 ecx, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[edx*8+4]
  002dc	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill1$216316[ebp]
  002df	69 c9 74 08 00
	00		 imul	 ecx, 2164		; 00000874H
  002e5	03 c8		 add	 ecx, eax
  002e7	89 54 31 10	 mov	 DWORD PTR [ecx+esi+16], edx

; 439  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  002eb	8b 4d ec	 mov	 ecx, DWORD PTR _i$216319[ebp]
  002ee	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[ecx*8+4]
  002f5	8b 4d d0	 mov	 ecx, DWORD PTR _iParentSkill2$216317[ebp]
  002f8	69 d2 74 08 00
	00		 imul	 edx, 2164		; 00000874H
  002fe	03 d0		 add	 edx, eax
  00300	89 4c 32 14	 mov	 DWORD PTR [edx+esi+20], ecx

; 440  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  00304	8b 4d ec	 mov	 ecx, DWORD PTR _i$216319[ebp]
  00307	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A[ecx*8+4]
  0030e	69 d2 74 08 00
	00		 imul	 edx, 2164		; 00000874H
  00314	03 d0		 add	 edx, eax
  00316	8b 45 cc	 mov	 eax, DWORD PTR _iSkillID$216318[ebp]
  00319	89 44 32 18	 mov	 DWORD PTR [edx+esi+24], eax
$LN3@Load:

; 430  : 
; 431  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)

  0031d	41		 inc	 ecx
  0031e	e9 3c ff ff ff	 jmp	 $LN48@Load
$LN45@Load:
  00323	8b 7d 08	 mov	 edi, DWORD PTR _lpszFileName$[ebp]
  00326	e9 99 fd ff ff	 jmp	 $LL10@Load
__catch$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$0:

; 449  : 	}
; 450  : 	catch(int)
; 451  : 	{
; 452  : 		DWORD dwError = GetLastError();

  0032b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 453  : 		MsgBox("[MasterLevelSkillTreeSystem] - Loading Exception Error (%s) File. ",lpszFileName);

  00331	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00334	51		 push	 ecx
  00335	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@
  0033a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0033f	83 c4 08	 add	 esp, 8

; 454  : 	}

  00342	b8 00 00 00 00	 mov	 eax, $LN21@Load
  00347	c3		 ret	 0
$LN21@Load:

; 455  : }

  00348	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0034b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00352	59		 pop	 ecx
  00353	5f		 pop	 edi
  00354	5e		 pop	 esi
  00355	5b		 pop	 ebx
  00356	8b e5		 mov	 esp, ebp
  00358	5d		 pop	 ebp
  00359	c2 04 00	 ret	 4
$LN13@Load:

; 368  : 	{
; 369  : 		MsgBox("[MasterLevelSkillTreeSystem] - File load error : File Name Error");

  0035c	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@
  00361	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00366	83 c4 04	 add	 esp, 4
$LN20@Load:

; 455  : }

  00369	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0036c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00373	59		 pop	 ecx
  00374	5f		 pop	 edi
  00375	5e		 pop	 esi
  00376	5b		 pop	 ebx
  00377	8b e5		 mov	 esp, ebp
  00379	5d		 pop	 ebp
  0037a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z ENDP	; CMasterLevelSkillTreeSystem::Load
PUBLIC	?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::AddPassiveSkill
EXTRN	?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::GetSkillReqDexterity
EXTRN	?GetSkillReqStrength@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillReqStrength
; Function compile flags: /Ogtp
;	COMDAT ?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iSkillValue$ = 12					; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::AddPassiveSkill, COMDAT
; _this$ = ecx

; 465  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 466  : 	int iReqStr = MagicDamageC.GetSkillReqStrength(iMLSkill);

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _iMLSkill$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00011	e8 00 00 00 00	 call	 ?GetSkillReqStrength@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqStrength

; 467  : 
; 468  : 	if( lpObj->Strength < iReqStr )

  00016	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00019	0f b7 8e f4 00
	00 00		 movzx	 ecx, WORD PTR [esi+244]
  00020	3b c8		 cmp	 ecx, eax
  00022	0f 8c 0c 05 00
	00		 jl	 $LN1@AddPassive

; 469  : 		return;
; 470  : 
; 471  : 	int iReqDex = MagicDamageC.GetSkillReqDexterity(iMLSkill);

  00028	57		 push	 edi
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0002e	e8 00 00 00 00	 call	 ?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqDexterity

; 472  : 
; 473  : 	if( lpObj->Dexterity < iReqDex )

  00033	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  0003a	3b d0		 cmp	 edx, eax
  0003c	0f 8c f2 04 00
	00		 jl	 $LN1@AddPassive

; 474  : 		return;
; 475  : 
; 476  : 	float iSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iMLSkill),iSkillLevel);

  00042	8b 45 10	 mov	 eax, DWORD PTR _iSkillLevel$[ebp]
  00045	50		 push	 eax
  00046	57		 push	 edi
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0004c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00051	50		 push	 eax
  00052	8b cb		 mov	 ecx, ebx
  00054	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00059	d9 5d 0c	 fstp	 DWORD PTR _iSkillValue$[ebp]

; 477  : 
; 478  : 	int iBaseMLS = this->GetBaseMasterLevelSkill(iMLSkill);

  0005c	57		 push	 edi
  0005d	8b cb		 mov	 ecx, ebx
  0005f	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 479  : 
; 480  : 
; 481  : #ifdef DEBUG_CODE
; 482  : 	LogAddC(2,"iBaseMLS: %d",iBaseMLS);
; 483  : #endif
; 484  : 
; 485  : 	switch( iBaseMLS )

  00064	05 d4 fe ff ff	 add	 eax, -300		; fffffed4H
  00069	3d 34 01 00 00	 cmp	 eax, 308		; 00000134H
  0006e	0f 87 c0 04 00
	00		 ja	 $LN1@AddPassive
  00074	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN83@AddPassive[eax]
  0007b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN84@AddPassive[ecx*4]
$LN76@AddPassive:

; 486  : 	{
; 487  : 	case 325:
; 488  : 	case 599:	//OK
; 489  : 		lpObj->m_MPSkillOpt.MpsAttackSuccessRate = iSkillValue;

  00082	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  00085	5f		 pop	 edi
  00086	d9 9e 34 26 00
	00		 fstp	 DWORD PTR [esi+9780]
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  0008e	5d		 pop	 ebp
  0008f	c2 0c 00	 ret	 12			; 0000000cH
$LN75@AddPassive:

; 490  : 		break;
; 491  : 	case 347:
; 492  : 	case 603:	//OK
; 493  : 		lpObj->m_MPSkillOpt.MpsPVPAttackDmgRate = iSkillValue;

  00092	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  00095	5f		 pop	 edi
  00096	d9 9e 3c 26 00
	00		 fstp	 DWORD PTR [esi+9788]
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  0009e	5d		 pop	 ebp
  0009f	c2 0c 00	 ret	 12			; 0000000cH
$LN74@AddPassive:

; 494  : 		break;
; 495  : 	case 301:
; 496  : 	case 579:	//OK
; 497  : 		lpObj->m_MPSkillOpt.MpsPVPBlockingRate = iSkillValue;

  000a2	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  000a5	5f		 pop	 edi
  000a6	d9 9e 40 26 00
	00		 fstp	 DWORD PTR [esi+9792]
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
$LN73@AddPassive:

; 498  : 		break;
; 499  : 	case 300:
; 500  : 	case 578:	//OK
; 501  : 		lpObj->m_MPSkillOpt.MpsDownDur1	= iSkillValue;

  000b2	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]

; 502  : 		lpObj->m_MPSkillOpt.btMpsDownDur1Level = iSkillLevel;

  000b5	8a 55 10	 mov	 dl, BYTE PTR _iSkillLevel$[ebp]
  000b8	5f		 pop	 edi
  000b9	d9 9e 44 26 00
	00		 fstp	 DWORD PTR [esi+9796]
  000bf	88 96 48 26 00
	00		 mov	 BYTE PTR [esi+9800], dl
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
$LN72@AddPassive:

; 503  : 		break;
; 504  : 	case 305:
; 505  : 	case 583:	//OK
; 506  : 		lpObj->m_MPSkillOpt.MpsDownDur2 = iSkillValue;

  000cb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  000ce	5f		 pop	 edi
  000cf	d9 9e 4c 26 00
	00		 fstp	 DWORD PTR [esi+9804]
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  000d7	5d		 pop	 ebp
  000d8	c2 0c 00	 ret	 12			; 0000000cH
$LN71@AddPassive:

; 507  : 		break;
; 508  : 	case 312:
; 509  : 	case 590:	//Pet dur...
; 510  : 		lpObj->m_MPSkillOpt.MpsDownDur3 = iSkillValue;

  000db	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  000de	5f		 pop	 edi
  000df	d9 9e 50 26 00
	00		 fstp	 DWORD PTR [esi+9808]
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH
$LN70@AddPassive:

; 511  : 		break;
; 512  : 	case 304:
; 513  : 	case 582:	//OK
; 514  : 		lpObj->m_MPSkillOpt.MpsResistancePoison = iSkillValue;

  000eb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  000ee	5f		 pop	 edi
  000ef	d9 9e 54 26 00
	00		 fstp	 DWORD PTR [esi+9812]
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  000f7	5d		 pop	 ebp
  000f8	c2 0c 00	 ret	 12			; 0000000cH
$LN69@AddPassive:

; 515  : 		break;
; 516  : 	case 308:
; 517  : 	case 586:	//OK
; 518  : 		lpObj->m_MPSkillOpt.MpsResistanceThunder = iSkillValue;

  000fb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  000fe	5f		 pop	 edi
  000ff	d9 9e 58 26 00
	00		 fstp	 DWORD PTR [esi+9816]
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00107	5d		 pop	 ebp
  00108	c2 0c 00	 ret	 12			; 0000000cH
$LN68@AddPassive:

; 519  : 		break;
; 520  : 	case 311:
; 521  : 	case 589:	//OK
; 522  : 		lpObj->m_MPSkillOpt.MpsResistanceIce = iSkillValue;

  0010b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0010e	5f		 pop	 edi
  0010f	d9 9e 5c 26 00
	00		 fstp	 DWORD PTR [esi+9820]
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00117	5d		 pop	 ebp
  00118	c2 0c 00	 ret	 12			; 0000000cH
$LN67@AddPassive:

; 523  : 		break;
; 524  : 	case 307:
; 525  : 	case 585:	//OK
; 526  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverLife = iSkillValue;

  0011b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0011e	5f		 pop	 edi
  0011f	d9 9e 60 26 00
	00		 fstp	 DWORD PTR [esi+9824]
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00127	5d		 pop	 ebp
  00128	c2 0c 00	 ret	 12			; 0000000cH
$LN66@AddPassive:

; 527  : 		break;
; 528  : 	case 313:
; 529  : 	case 591:	//OK
; 530  : 		lpObj->m_MPSkillOpt.MpsBlockingRate = iSkillValue;

  0012b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0012e	5f		 pop	 edi
  0012f	d9 9e 38 26 00
	00		 fstp	 DWORD PTR [esi+9784]
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00137	5d		 pop	 ebp
  00138	c2 0c 00	 ret	 12			; 0000000cH
$LN65@AddPassive:

; 531  : 		break;
; 532  : 	case 309:
; 533  : 	case 587:	//OK
; 534  : 		lpObj->m_MPSkillOpt.MpsDefence = iSkillValue;

  0013b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0013e	5f		 pop	 edi
  0013f	d9 9e 34 27 00
	00		 fstp	 DWORD PTR [esi+10036]
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00147	5d		 pop	 ebp
  00148	c2 0c 00	 ret	 12			; 0000000cH
$LN64@AddPassive:

; 535  : 		break;
; 536  : 	case 334:
; 537  : 	case 600:	//OK
; 538  : 		lpObj->m_MPSkillOpt.MpsMaxHP = iSkillValue;

  0014b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0014e	5f		 pop	 edi
  0014f	d9 9e 38 27 00
	00		 fstp	 DWORD PTR [esi+10040]
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00157	5d		 pop	 ebp
  00158	c2 0c 00	 ret	 12			; 0000000cH
$LN63@AddPassive:

; 539  : 		break;
; 540  : 	case 338:
; 541  : 	case 601:	//OK
; 542  : 		lpObj->m_MPSkillOpt.MpsMaxMP = iSkillValue;

  0015b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0015e	5f		 pop	 edi
  0015f	d9 9e 40 27 00
	00		 fstp	 DWORD PTR [esi+10048]
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00167	5d		 pop	 ebp
  00168	c2 0c 00	 ret	 12			; 0000000cH
$LN62@AddPassive:

; 543  : 		break;
; 544  : 	case 341:	//OK
; 545  : 		lpObj->m_MPSkillOpt.MpsMaxBP = iSkillValue;

  0016b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0016e	5f		 pop	 edi
  0016f	d9 9e 3c 27 00
	00		 fstp	 DWORD PTR [esi+10044]
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00177	5d		 pop	 ebp
  00178	c2 0c 00	 ret	 12			; 0000000cH
$LN61@AddPassive:

; 546  : 		break;
; 547  : 	case 362:
; 548  : 	case 608:	//OK
; 549  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetMana = iSkillValue;

  0017b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0017e	5f		 pop	 edi
  0017f	d9 9e 44 27 00
	00		 fstp	 DWORD PTR [esi+10052]
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00187	5d		 pop	 ebp
  00188	c2 0c 00	 ret	 12			; 0000000cH
$LN60@AddPassive:

; 550  : 		break;
; 551  : 	case 359:
; 552  : 	case 606:	//OK
; 553  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetLife = iSkillValue;

  0018b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0018e	5f		 pop	 edi
  0018f	d9 9e 48 27 00
	00		 fstp	 DWORD PTR [esi+10056]
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00197	5d		 pop	 ebp
  00198	c2 0c 00	 ret	 12			; 0000000cH
$LN59@AddPassive:

; 554  : 		break;
; 555  : 	case 358:
; 556  : 	case 605:	//OK
; 557  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetSD = iSkillValue;

  0019b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0019e	5f		 pop	 edi
  0019f	d9 9e 4c 27 00
	00		 fstp	 DWORD PTR [esi+10060]
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  001a7	5d		 pop	 ebp
  001a8	c2 0c 00	 ret	 12			; 0000000cH
$LN58@AddPassive:

; 558  : 		break;
; 559  : 	case 303:
; 560  : 	case 581:	//OK
; 561  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverMana = iSkillValue;

  001ab	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  001ae	5f		 pop	 edi
  001af	d9 9e 64 26 00
	00		 fstp	 DWORD PTR [esi+9828]
  001b5	5e		 pop	 esi
  001b6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN57@AddPassive:

; 562  : 		break;
; 563  : 	case 310:
; 564  : 	case 588:	//OK
; 565  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverAG = iSkillValue;

  001bb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  001be	5f		 pop	 edi
  001bf	d9 9e 68 26 00
	00		 fstp	 DWORD PTR [esi+9832]
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  001c7	5d		 pop	 ebp
  001c8	c2 0c 00	 ret	 12			; 0000000cH
$LN56@AddPassive:

; 566  : 		break;
; 567  : 	case 302:
; 568  : 	case 580:	//OK
; 569  : 		lpObj->m_MPSkillOpt.MpsMaxSD = iSkillValue;

  001cb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  001ce	5f		 pop	 edi
  001cf	d9 9e 50 27 00
	00		 fstp	 DWORD PTR [esi+10064]
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  001d7	5d		 pop	 ebp
  001d8	c2 0c 00	 ret	 12			; 0000000cH
$LN55@AddPassive:

; 570  : 		break;
; 571  : 	case 306:
; 572  : 	case 584:	//OK
; 573  : 		lpObj->m_MPSkillOpt.MpsSDSpeed = iSkillValue;

  001db	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  001de	5f		 pop	 edi
  001df	d9 9e 54 27 00
	00		 fstp	 DWORD PTR [esi+10068]
  001e5	5e		 pop	 esi
  001e6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  001e7	5d		 pop	 ebp
  001e8	c2 0c 00	 ret	 12			; 0000000cH
$LN54@AddPassive:

; 574  : 		break;
; 575  : 	/*case 364:
; 576  : 		lpObj->m_MPSkillOpt.MpsMaxAttackDamage = iSkillValue;
; 577  : 		break;
; 578  : 	case 361:
; 579  : 		lpObj->m_MPSkillOpt.MpsMinAttackDamage = iSkillValue;
; 580  : 		break;*/
; 581  : 	case 357:
; 582  : 	case 604:	//OK
; 583  : 		lpObj->m_MPSkillOpt.MpsDecreaseMana = iSkillValue;

  001eb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  001ee	5f		 pop	 edi
  001ef	d9 9e 60 27 00
	00		 fstp	 DWORD PTR [esi+10080]
  001f5	5e		 pop	 esi
  001f6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  001f7	5d		 pop	 ebp
  001f8	c2 0c 00	 ret	 12			; 0000000cH
$LN53@AddPassive:

; 584  : 		break;
; 585  : 	case 407:	//OK
; 586  : 		lpObj->m_MPSkillOpt.MpsMaxMagicDamage = iSkillValue;

  001fb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  001fe	5f		 pop	 edi
  001ff	d9 9e 64 27 00
	00		 fstp	 DWORD PTR [esi+10084]
  00205	5e		 pop	 esi
  00206	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00207	5d		 pop	 ebp
  00208	c2 0c 00	 ret	 12			; 0000000cH
$LN52@AddPassive:

; 587  : 		break;
; 588  : 	case 405:	//OK
; 589  : 		lpObj->m_MPSkillOpt.MpsMinMagicDamage = iSkillValue;

  0020b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0020e	5f		 pop	 edi
  0020f	d9 9e 68 27 00
	00		 fstp	 DWORD PTR [esi+10088]
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00217	5d		 pop	 ebp
  00218	c2 0c 00	 ret	 12			; 0000000cH
$LN51@AddPassive:

; 590  : 		break;
; 591  : 	case 535:	//OK
; 592  : 		lpObj->m_MPSkillOpt.MpsPetDurDownSpeed = iSkillValue;

  0021b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0021e	5f		 pop	 edi
  0021f	d9 9e 6c 27 00
	00		 fstp	 DWORD PTR [esi+10092]
  00225	5e		 pop	 esi
  00226	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00227	5d		 pop	 ebp
  00228	c2 0c 00	 ret	 12			; 0000000cH
$LN50@AddPassive:

; 593  : 		break;
; 594  : 	case 335:
; 595  : 	case 485:
; 596  : 	case 513:
; 597  : 	case 557:	//OK
; 598  : 		lpObj->m_MPSkillOpt.MpsWeaponMastery = iSkillValue;

  0022b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0022e	5f		 pop	 edi
  0022f	d9 9e 6c 26 00
	00		 fstp	 DWORD PTR [esi+9836]
  00235	5e		 pop	 esi
  00236	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00237	5d		 pop	 ebp
  00238	c2 0c 00	 ret	 12			; 0000000cH
$LN49@AddPassive:

; 599  : 		break;
; 600  : 	case 348:	//OK
; 601  : 		lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength = iSkillValue;

  0023b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0023e	5f		 pop	 edi
  0023f	d9 9e 70 26 00
	00		 fstp	 DWORD PTR [esi+9840]
  00245	5e		 pop	 esi
  00246	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00247	5d		 pop	 ebp
  00248	c2 0c 00	 ret	 12			; 0000000cH
$LN48@AddPassive:

; 602  : 		break;
; 603  : 	case 349:	//OK
; 604  : 		lpObj->m_MPSkillOpt.MpsOneHandSwordStrength = iSkillValue;

  0024b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0024e	5f		 pop	 edi
  0024f	d9 9e 74 26 00
	00		 fstp	 DWORD PTR [esi+9844]
  00255	5e		 pop	 esi
  00256	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00257	5d		 pop	 ebp
  00258	c2 0c 00	 ret	 12			; 0000000cH
$LN47@AddPassive:

; 605  : 		break;
; 606  : 	case 350:	//OK
; 607  : 		lpObj->m_MPSkillOpt.MpsMaceStrength = iSkillValue;

  0025b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0025e	5f		 pop	 edi
  0025f	d9 9e 78 26 00
	00		 fstp	 DWORD PTR [esi+9848]
  00265	5e		 pop	 esi
  00266	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00267	5d		 pop	 ebp
  00268	c2 0c 00	 ret	 12			; 0000000cH
$LN46@AddPassive:

; 608  : 		break;
; 609  : 	case 351:	//OK
; 610  : 		lpObj->m_MPSkillOpt.MpsSpearStrength = iSkillValue;

  0026b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0026e	5f		 pop	 edi
  0026f	d9 9e 7c 26 00
	00		 fstp	 DWORD PTR [esi+9852]
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00277	5d		 pop	 ebp
  00278	c2 0c 00	 ret	 12			; 0000000cH
$LN45@AddPassive:

; 611  : 		break;
; 612  : 	case 352:	//OK
; 613  : 		lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery = iSkillValue;

  0027b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0027e	5f		 pop	 edi
  0027f	d9 9e 80 26 00
	00		 fstp	 DWORD PTR [esi+9856]
  00285	5e		 pop	 esi
  00286	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00287	5d		 pop	 ebp
  00288	c2 0c 00	 ret	 12			; 0000000cH
$LN44@AddPassive:

; 614  : 		break;
; 615  : 	case 353:	//OK
; 616  : 		lpObj->m_MPSkillOpt.MpsOneHandSwordMastery = iSkillValue;

  0028b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0028e	5f		 pop	 edi
  0028f	d9 9e 84 26 00
	00		 fstp	 DWORD PTR [esi+9860]
  00295	5e		 pop	 esi
  00296	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00297	5d		 pop	 ebp
  00298	c2 0c 00	 ret	 12			; 0000000cH
$LN43@AddPassive:

; 617  : 		break;
; 618  : 	case 354:	//OK
; 619  : 		lpObj->m_MPSkillOpt.MpsMaceMastery = iSkillValue;

  0029b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0029e	5f		 pop	 edi
  0029f	d9 9e 8c 26 00
	00		 fstp	 DWORD PTR [esi+9868]
  002a5	5e		 pop	 esi
  002a6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  002a7	5d		 pop	 ebp
  002a8	c2 0c 00	 ret	 12			; 0000000cH
$LN42@AddPassive:

; 620  : 		break;
; 621  : 	case 355:	//OK
; 622  : 		lpObj->m_MPSkillOpt.MpsSpearMastery = iSkillValue;

  002ab	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  002ae	5f		 pop	 edi
  002af	d9 9e 88 26 00
	00		 fstp	 DWORD PTR [esi+9864]
  002b5	5e		 pop	 esi
  002b6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  002b7	5d		 pop	 ebp
  002b8	c2 0c 00	 ret	 12			; 0000000cH
$LN41@AddPassive:

; 623  : 		break;
; 624  : 	case 386:
; 625  : 	case 488:	//OK
; 626  : 		lpObj->m_MPSkillOpt.MpsMagicMastery = iSkillValue;

  002bb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  002be	5f		 pop	 edi
  002bf	d9 9e 90 26 00
	00		 fstp	 DWORD PTR [esi+9872]
  002c5	5e		 pop	 esi
  002c6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  002c7	5d		 pop	 ebp
  002c8	c2 0c 00	 ret	 12			; 0000000cH
$LN40@AddPassive:

; 627  : 		break;
; 628  : 	case 397:	//OK
; 629  : 		lpObj->m_MPSkillOpt.MpsOneHandStaffStrength = iSkillValue;

  002cb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  002ce	5f		 pop	 edi
  002cf	d9 9e 98 26 00
	00		 fstp	 DWORD PTR [esi+9880]
  002d5	5e		 pop	 esi
  002d6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  002d7	5d		 pop	 ebp
  002d8	c2 0c 00	 ret	 12			; 0000000cH
$LN39@AddPassive:

; 630  : 		break;
; 631  : 	case 398:	//OK
; 632  : 		lpObj->m_MPSkillOpt.MpsTwoHandStaffStrength = iSkillValue;

  002db	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  002de	5f		 pop	 edi
  002df	d9 9e 94 26 00
	00		 fstp	 DWORD PTR [esi+9876]
  002e5	5e		 pop	 esi
  002e6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  002e7	5d		 pop	 ebp
  002e8	c2 0c 00	 ret	 12			; 0000000cH
$LN38@AddPassive:

; 633  : 		break;
; 634  : 	case 399:	//OK
; 635  : 		lpObj->m_MPSkillOpt.MpsShieldStrength = iSkillValue;

  002eb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  002ee	5f		 pop	 edi
  002ef	d9 9e 9c 26 00
	00		 fstp	 DWORD PTR [esi+9884]
  002f5	5e		 pop	 esi
  002f6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  002f7	5d		 pop	 ebp
  002f8	c2 0c 00	 ret	 12			; 0000000cH
$LN37@AddPassive:

; 636  : 		break;
; 637  : 	case 400:	//OK
; 638  : 		lpObj->m_MPSkillOpt.MpsOneHandStaffMastery = iSkillValue;

  002fb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  002fe	5f		 pop	 edi
  002ff	d9 9e a0 26 00
	00		 fstp	 DWORD PTR [esi+9888]
  00305	5e		 pop	 esi
  00306	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00307	5d		 pop	 ebp
  00308	c2 0c 00	 ret	 12			; 0000000cH
$LN36@AddPassive:

; 639  : 		break;
; 640  : 	case 401:	//OK
; 641  : 		lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery = iSkillValue;

  0030b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0030e	5f		 pop	 edi
  0030f	d9 9e a4 26 00
	00		 fstp	 DWORD PTR [esi+9892]
  00315	5e		 pop	 esi
  00316	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00317	5d		 pop	 ebp
  00318	c2 0c 00	 ret	 12			; 0000000cH
$LN35@AddPassive:

; 642  : 		break;
; 643  : 	case 402:	//OK
; 644  : 		lpObj->m_MPSkillOpt.MpsShieldMastery = iSkillValue;

  0031b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0031e	5f		 pop	 edi
  0031f	d9 9e a8 26 00
	00		 fstp	 DWORD PTR [esi+9896]
  00325	5e		 pop	 esi
  00326	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00327	5d		 pop	 ebp
  00328	c2 0c 00	 ret	 12			; 0000000cH
$LN34@AddPassive:

; 645  : 		break;
; 646  : 	case 435:	//OK
; 647  : 		lpObj->m_MPSkillOpt.MpsBowStrength = iSkillValue;

  0032b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0032e	5f		 pop	 edi
  0032f	d9 9e ac 26 00
	00		 fstp	 DWORD PTR [esi+9900]
  00335	5e		 pop	 esi
  00336	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00337	5d		 pop	 ebp
  00338	c2 0c 00	 ret	 12			; 0000000cH
$LN33@AddPassive:

; 648  : 		break;
; 649  : 	case 438:	//OK
; 650  : 		lpObj->m_MPSkillOpt.MpsBowMastery = iSkillValue;

  0033b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0033e	5f		 pop	 edi
  0033f	d9 9e b0 26 00
	00		 fstp	 DWORD PTR [esi+9904]
  00345	5e		 pop	 esi
  00346	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00347	5d		 pop	 ebp
  00348	c2 0c 00	 ret	 12			; 0000000cH
$LN32@AddPassive:

; 651  : 		break;
; 652  : 	case 436:	//OK
; 653  : 		lpObj->m_MPSkillOpt.MpsCrossbowStrength = iSkillValue;

  0034b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0034e	5f		 pop	 edi
  0034f	d9 9e b4 26 00
	00		 fstp	 DWORD PTR [esi+9908]
  00355	5e		 pop	 esi
  00356	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00357	5d		 pop	 ebp
  00358	c2 0c 00	 ret	 12			; 0000000cH
$LN31@AddPassive:

; 654  : 		break;
; 655  : 	case 439:	//OK
; 656  : 		lpObj->m_MPSkillOpt.MpsCrossbowMastery = iSkillValue;

  0035b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0035e	5f		 pop	 edi
  0035f	d9 9e b8 26 00
	00		 fstp	 DWORD PTR [esi+9912]
  00365	5e		 pop	 esi
  00366	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00367	5d		 pop	 ebp
  00368	c2 0c 00	 ret	 12			; 0000000cH
$LN30@AddPassive:

; 657  : 		break;
; 658  : 	case 421:	//OK
; 659  : 		lpObj->m_MPSkillOpt.MpsWeaponMastery2 = iSkillValue;

  0036b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0036e	5f		 pop	 edi
  0036f	d9 9e bc 26 00
	00		 fstp	 DWORD PTR [esi+9916]
  00375	5e		 pop	 esi
  00376	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00377	5d		 pop	 ebp
  00378	c2 0c 00	 ret	 12			; 0000000cH
$LN29@AddPassive:

; 660  : 		break;
; 661  : 	case 415:	//OK
; 662  : 		lpObj->m_MPSkillOpt.MpsSummonMonster1 = iSkillValue;

  0037b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0037e	5f		 pop	 edi
  0037f	d9 9e c0 26 00
	00		 fstp	 DWORD PTR [esi+9920]
  00385	5e		 pop	 esi
  00386	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00387	5d		 pop	 ebp
  00388	c2 0c 00	 ret	 12			; 0000000cH
$LN28@AddPassive:

; 663  : 		break;
; 664  : 	case 419:	//OK
; 665  : 		lpObj->m_MPSkillOpt.MpsSummonMonster2 = iSkillValue;

  0038b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0038e	5f		 pop	 edi
  0038f	d9 9e c4 26 00
	00		 fstp	 DWORD PTR [esi+9924]
  00395	5e		 pop	 esi
  00396	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00397	5d		 pop	 ebp
  00398	c2 0c 00	 ret	 12			; 0000000cH
$LN27@AddPassive:

; 666  : 		break;
; 667  : 	case 428:	//OK
; 668  : 		lpObj->m_MPSkillOpt.MpsSummonMonster3 = iSkillValue;

  0039b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0039e	5f		 pop	 edi
  0039f	d9 9e c8 26 00
	00		 fstp	 DWORD PTR [esi+9928]
  003a5	5e		 pop	 esi
  003a6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  003a7	5d		 pop	 ebp
  003a8	c2 0c 00	 ret	 12			; 0000000cH
$LN26@AddPassive:

; 669  : 		break;
; 670  : 	case 361:
; 671  : 	case 442:
; 672  : 	case 607:	//OK
; 673  : 		lpObj->m_MPSkillOpt.MpsMinAttackInc = iSkillValue;

  003ab	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  003ae	5f		 pop	 edi
  003af	d9 9e 28 27 00
	00		 fstp	 DWORD PTR [esi+10024]
  003b5	5e		 pop	 esi
  003b6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  003b7	5d		 pop	 ebp
  003b8	c2 0c 00	 ret	 12			; 0000000cH
$LN25@AddPassive:

; 674  : 		break;
; 675  : 	case 364:
; 676  : 	case 443:	//OK
; 677  : 		lpObj->m_MPSkillOpt.MpsMaxAttackInc = iSkillValue;

  003bb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  003be	5f		 pop	 edi
  003bf	d9 9e 2c 27 00
	00		 fstp	 DWORD PTR [esi+10028]
  003c5	5e		 pop	 esi
  003c6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  003c7	5d		 pop	 ebp
  003c8	c2 0c 00	 ret	 12			; 0000000cH
$LN24@AddPassive:

; 678  : 		break;
; 679  : 	case 448:	//OK
; 680  : 		lpObj->m_MPSkillOpt.MpsFireTomeStrength = iSkillValue;

  003cb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  003ce	5f		 pop	 edi
  003cf	d9 9e d0 26 00
	00		 fstp	 DWORD PTR [esi+9936]
  003d5	5e		 pop	 esi
  003d6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  003d7	5d		 pop	 ebp
  003d8	c2 0c 00	 ret	 12			; 0000000cH
$LN23@AddPassive:

; 681  : 		break;
; 682  : 	case 449:	//OK
; 683  : 		lpObj->m_MPSkillOpt.MpsWindTomeStrength = iSkillValue;

  003db	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  003de	5f		 pop	 edi
  003df	d9 9e d4 26 00
	00		 fstp	 DWORD PTR [esi+9940]
  003e5	5e		 pop	 esi
  003e6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  003e7	5d		 pop	 ebp
  003e8	c2 0c 00	 ret	 12			; 0000000cH
$LN22@AddPassive:

; 684  : 		break;
; 685  : 	case 450:	//OK
; 686  : 		lpObj->m_MPSkillOpt.MpsLightTomeStrength = iSkillValue;

  003eb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  003ee	5f		 pop	 edi
  003ef	d9 9e d8 26 00
	00		 fstp	 DWORD PTR [esi+9944]
  003f5	5e		 pop	 esi
  003f6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  003f7	5d		 pop	 ebp
  003f8	c2 0c 00	 ret	 12			; 0000000cH
$LN21@AddPassive:

; 687  : 		break;
; 688  : 	case 451:	//OK
; 689  : 		lpObj->m_MPSkillOpt.MpsFireTomeMastery = iSkillValue;

  003fb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  003fe	5f		 pop	 edi
  003ff	d9 9e dc 26 00
	00		 fstp	 DWORD PTR [esi+9948]
  00405	5e		 pop	 esi
  00406	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00407	5d		 pop	 ebp
  00408	c2 0c 00	 ret	 12			; 0000000cH
$LN20@AddPassive:

; 690  : 		break;
; 691  : 	case 452:	//OK
; 692  : 		lpObj->m_MPSkillOpt.MpsWindTomeMastery = iSkillValue;

  0040b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0040e	5f		 pop	 edi
  0040f	d9 9e e0 26 00
	00		 fstp	 DWORD PTR [esi+9952]
  00415	5e		 pop	 esi
  00416	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00417	5d		 pop	 ebp
  00418	c2 0c 00	 ret	 12			; 0000000cH
$LN19@AddPassive:

; 693  : 		break;
; 694  : 	case 453:	//OK
; 695  : 		lpObj->m_MPSkillOpt.MpsLightTomeMastery = iSkillValue;

  0041b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0041e	5f		 pop	 edi
  0041f	d9 9e e4 26 00
	00		 fstp	 DWORD PTR [esi+9956]
  00425	5e		 pop	 esi
  00426	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00427	5d		 pop	 ebp
  00428	c2 0c 00	 ret	 12			; 0000000cH
$LN18@AddPassive:

; 696  : 		break;
; 697  : 	case 457:	//OK
; 698  : 		lpObj->m_MPSkillOpt.MpsMagicMastery2 = iSkillValue;

  0042b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0042e	5f		 pop	 edi
  0042f	d9 9e cc 26 00
	00		 fstp	 DWORD PTR [esi+9932]
  00435	5e		 pop	 esi
  00436	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00437	5d		 pop	 ebp
  00438	c2 0c 00	 ret	 12			; 0000000cH
$LN17@AddPassive:

; 699  : 		break;
; 700  : 	case 465:	//OK
; 701  : 		lpObj->m_MPSkillOpt.MpsStickStrength = iSkillValue;

  0043b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0043e	5f		 pop	 edi
  0043f	d9 9e e8 26 00
	00		 fstp	 DWORD PTR [esi+9960]
  00445	5e		 pop	 esi
  00446	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00447	5d		 pop	 ebp
  00448	c2 0c 00	 ret	 12			; 0000000cH
$LN16@AddPassive:

; 702  : 		break;
; 703  : 	case 466:	//OK
; 704  : 		lpObj->m_MPSkillOpt.MpsTomeStrength = iSkillValue;

  0044b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0044e	5f		 pop	 edi
  0044f	d9 9e ec 26 00
	00		 fstp	 DWORD PTR [esi+9964]
  00455	5e		 pop	 esi
  00456	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00457	5d		 pop	 ebp
  00458	c2 0c 00	 ret	 12			; 0000000cH
$LN15@AddPassive:

; 705  : 		break;
; 706  : 	case 467:	//OK
; 707  : 		lpObj->m_MPSkillOpt.MpsStickMastery = iSkillValue;

  0045b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0045e	5f		 pop	 edi
  0045f	d9 9e f0 26 00
	00		 fstp	 DWORD PTR [esi+9968]
  00465	5e		 pop	 esi
  00466	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00467	5d		 pop	 ebp
  00468	c2 0c 00	 ret	 12			; 0000000cH
$LN14@AddPassive:

; 708  : 		break;
; 709  : 	case 468:	//OK
; 710  : 		lpObj->m_MPSkillOpt.MpsTomeMastery = iSkillValue;

  0046b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0046e	5f		 pop	 edi
  0046f	d9 9e f4 26 00
	00		 fstp	 DWORD PTR [esi+9972]
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00477	5d		 pop	 ebp
  00478	c2 0c 00	 ret	 12			; 0000000cH
$LN13@AddPassive:

; 711  : 		break;
; 712  : 	case 471:	//OK
; 713  : 		lpObj->m_MPSkillOpt.MpsMinWizCurseInc = iSkillValue;

  0047b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0047e	5f		 pop	 edi
  0047f	d9 9e 00 27 00
	00		 fstp	 DWORD PTR [esi+9984]
  00485	5e		 pop	 esi
  00486	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00487	5d		 pop	 ebp
  00488	c2 0c 00	 ret	 12			; 0000000cH
$LN12@AddPassive:

; 714  : 		break;
; 715  : 	case 526:	//OK
; 716  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr1 = iSkillValue;

  0048b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0048e	5f		 pop	 edi
  0048f	d9 9e 04 27 00
	00		 fstp	 DWORD PTR [esi+9988]
  00495	5e		 pop	 esi
  00496	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00497	5d		 pop	 ebp
  00498	c2 0c 00	 ret	 12			; 0000000cH
$LN11@AddPassive:

; 717  : 		break;
; 718  : 	case 530:	//OK
; 719  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr2 = iSkillValue;

  0049b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0049e	5f		 pop	 edi
  0049f	d9 9e 08 27 00
	00		 fstp	 DWORD PTR [esi+9992]
  004a5	5e		 pop	 esi
  004a6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  004a7	5d		 pop	 ebp
  004a8	c2 0c 00	 ret	 12			; 0000000cH
$LN10@AddPassive:

; 720  : 		break;
; 721  : 	case 534:	//OK
; 722  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr3 = iSkillValue;

  004ab	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  004ae	5f		 pop	 edi
  004af	d9 9e 0c 27 00
	00		 fstp	 DWORD PTR [esi+9996]
  004b5	5e		 pop	 esi
  004b6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  004b7	5d		 pop	 ebp
  004b8	c2 0c 00	 ret	 12			; 0000000cH
$LN9@AddPassive:

; 723  : 		break;
; 724  : 	case 527:	//OK
; 725  : 		lpObj->m_MPSkillOpt.MpsScepterStrength = iSkillValue;

  004bb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  004be	5f		 pop	 edi
  004bf	d9 9e 10 27 00
	00		 fstp	 DWORD PTR [esi+10000]
  004c5	5e		 pop	 esi
  004c6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  004c7	5d		 pop	 ebp
  004c8	c2 0c 00	 ret	 12			; 0000000cH
$LN8@AddPassive:

; 726  : 		break;
; 727  : 	case 531:	//OK
; 728  : 		lpObj->m_MPSkillOpt.MpsScepterMastery = iSkillValue;

  004cb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  004ce	5f		 pop	 edi
  004cf	d9 9e 14 27 00
	00		 fstp	 DWORD PTR [esi+10004]
  004d5	5e		 pop	 esi
  004d6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  004d7	5d		 pop	 ebp
  004d8	c2 0c 00	 ret	 12			; 0000000cH
$LN7@AddPassive:

; 729  : 		break;
; 730  : 	case 528:	//OK
; 731  : 		lpObj->m_MPSkillOpt.MpsShieldStrength3 = iSkillValue;

  004db	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  004de	5f		 pop	 edi
  004df	d9 9e 18 27 00
	00		 fstp	 DWORD PTR [esi+10008]
  004e5	5e		 pop	 esi
  004e6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  004e7	5d		 pop	 ebp
  004e8	c2 0c 00	 ret	 12			; 0000000cH
$LN6@AddPassive:

; 732  : 		break;
; 733  : 	case 532:	//OK
; 734  : 		lpObj->m_MPSkillOpt.MpsShieldMastery3 = iSkillValue;

  004eb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  004ee	5f		 pop	 edi
  004ef	d9 9e 1c 27 00
	00		 fstp	 DWORD PTR [esi+10012]
  004f5	5e		 pop	 esi
  004f6	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  004f7	5d		 pop	 ebp
  004f8	c2 0c 00	 ret	 12			; 0000000cH
$LN5@AddPassive:

; 735  : 		break;
; 736  : 	case 529:	//OK
; 737  : 		lpObj->m_MPSkillOpt.MpsUseScepterPetStr = iSkillValue;

  004fb	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  004fe	5f		 pop	 edi
  004ff	d9 9e 20 27 00
	00		 fstp	 DWORD PTR [esi+10016]
  00505	5e		 pop	 esi
  00506	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00507	5d		 pop	 ebp
  00508	c2 0c 00	 ret	 12			; 0000000cH
$LN4@AddPassive:

; 738  : 		break;
; 739  : 	case 533:	//OK
; 740  : 		lpObj->m_MPSkillOpt.MpsCommandAttackInc = iSkillValue;

  0050b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0050e	5f		 pop	 edi
  0050f	d9 9e 24 27 00
	00		 fstp	 DWORD PTR [esi+10020]
  00515	5e		 pop	 esi
  00516	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00517	5d		 pop	 ebp
  00518	c2 0c 00	 ret	 12			; 0000000cH
$LN3@AddPassive:

; 741  : 		break;
; 742  : 	case 568:	//OK
; 743  : 		lpObj->m_MPSkillOpt.MpsFistStrength = iSkillValue;

  0051b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0051e	5f		 pop	 edi
  0051f	d9 9e 94 27 00
	00		 fstp	 DWORD PTR [esi+10132]
  00525	5e		 pop	 esi
  00526	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00527	5d		 pop	 ebp
  00528	c2 0c 00	 ret	 12			; 0000000cH
$LN2@AddPassive:

; 744  : 		break;
; 745  : 	case 571:	//OK
; 746  : 		lpObj->m_MPSkillOpt.MpsFistMastery = iSkillValue;

  0052b	d9 45 0c	 fld	 DWORD PTR _iSkillValue$[ebp]
  0052e	d9 9e 98 27 00
	00		 fstp	 DWORD PTR [esi+10136]
$LN1@AddPassive:
  00534	5f		 pop	 edi
  00535	5e		 pop	 esi
  00536	5b		 pop	 ebx

; 747  : 		break;
; 748  : 	/*case 315:
; 749  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;
; 750  : 		break;
; 751  : 	case 316:
; 752  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;
; 753  : 		break;
; 754  : 	case 317:
; 755  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;
; 756  : 		break;
; 757  : 	case 318:
; 758  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;
; 759  : 		break;
; 760  : 	case 319:
; 761  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;
; 762  : 		break;
; 763  : 	case 320:
; 764  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;
; 765  : 		break;
; 766  : 	case 506:
; 767  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;
; 768  : 		break;
; 769  : 	case 322:
; 770  : 	case 375:
; 771  : 	case 410:
; 772  : 	case 446:
; 773  : 	case 476:
; 774  : 	case 505:
; 775  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;
; 776  : 		break;
; 777  : 	case 324:
; 778  : 	case 377:
; 779  : 	case 412:
; 780  : 	case 447:
; 781  : 	case 478:
; 782  : 	case 507:
; 783  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;
; 784  : 		break;
; 785  : 	case 366:
; 786  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;
; 787  : 		break;
; 788  : 	case 367:
; 789  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;
; 790  : 		break;
; 791  : 	case 368:
; 792  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;
; 793  : 		break;
; 794  : 	case 369:
; 795  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;
; 796  : 		break;
; 797  : 	case 372:
; 798  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;
; 799  : 		break;
; 800  : 	case 370:
; 801  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;
; 802  : 		break;
; 803  : 	case 371:
; 804  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;
; 805  : 		break;
; 806  : 	case 536:
; 807  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;
; 808  : 		break;
; 809  : 	case 538:
; 810  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 811  : 		break;
; 812  : 	case 539:
; 813  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 814  : 		break;*/
; 815  : 	default:
; 816  : 		break;
; 817  : 	}
; 818  : }

  00537	5d		 pop	 ebp
  00538	c2 0c 00	 ret	 12			; 0000000cH
  0053b	90		 npad	 1
$LN84@AddPassive:
  0053c	00 00 00 00	 DD	 $LN73@AddPassive
  00540	00 00 00 00	 DD	 $LN74@AddPassive
  00544	00 00 00 00	 DD	 $LN56@AddPassive
  00548	00 00 00 00	 DD	 $LN58@AddPassive
  0054c	00 00 00 00	 DD	 $LN70@AddPassive
  00550	00 00 00 00	 DD	 $LN72@AddPassive
  00554	00 00 00 00	 DD	 $LN55@AddPassive
  00558	00 00 00 00	 DD	 $LN67@AddPassive
  0055c	00 00 00 00	 DD	 $LN69@AddPassive
  00560	00 00 00 00	 DD	 $LN65@AddPassive
  00564	00 00 00 00	 DD	 $LN57@AddPassive
  00568	00 00 00 00	 DD	 $LN68@AddPassive
  0056c	00 00 00 00	 DD	 $LN71@AddPassive
  00570	00 00 00 00	 DD	 $LN66@AddPassive
  00574	00 00 00 00	 DD	 $LN76@AddPassive
  00578	00 00 00 00	 DD	 $LN64@AddPassive
  0057c	00 00 00 00	 DD	 $LN50@AddPassive
  00580	00 00 00 00	 DD	 $LN63@AddPassive
  00584	00 00 00 00	 DD	 $LN62@AddPassive
  00588	00 00 00 00	 DD	 $LN75@AddPassive
  0058c	00 00 00 00	 DD	 $LN49@AddPassive
  00590	00 00 00 00	 DD	 $LN48@AddPassive
  00594	00 00 00 00	 DD	 $LN47@AddPassive
  00598	00 00 00 00	 DD	 $LN46@AddPassive
  0059c	00 00 00 00	 DD	 $LN45@AddPassive
  005a0	00 00 00 00	 DD	 $LN44@AddPassive
  005a4	00 00 00 00	 DD	 $LN43@AddPassive
  005a8	00 00 00 00	 DD	 $LN42@AddPassive
  005ac	00 00 00 00	 DD	 $LN54@AddPassive
  005b0	00 00 00 00	 DD	 $LN59@AddPassive
  005b4	00 00 00 00	 DD	 $LN60@AddPassive
  005b8	00 00 00 00	 DD	 $LN26@AddPassive
  005bc	00 00 00 00	 DD	 $LN61@AddPassive
  005c0	00 00 00 00	 DD	 $LN25@AddPassive
  005c4	00 00 00 00	 DD	 $LN41@AddPassive
  005c8	00 00 00 00	 DD	 $LN40@AddPassive
  005cc	00 00 00 00	 DD	 $LN39@AddPassive
  005d0	00 00 00 00	 DD	 $LN38@AddPassive
  005d4	00 00 00 00	 DD	 $LN37@AddPassive
  005d8	00 00 00 00	 DD	 $LN36@AddPassive
  005dc	00 00 00 00	 DD	 $LN35@AddPassive
  005e0	00 00 00 00	 DD	 $LN52@AddPassive
  005e4	00 00 00 00	 DD	 $LN53@AddPassive
  005e8	00 00 00 00	 DD	 $LN29@AddPassive
  005ec	00 00 00 00	 DD	 $LN28@AddPassive
  005f0	00 00 00 00	 DD	 $LN30@AddPassive
  005f4	00 00 00 00	 DD	 $LN27@AddPassive
  005f8	00 00 00 00	 DD	 $LN34@AddPassive
  005fc	00 00 00 00	 DD	 $LN32@AddPassive
  00600	00 00 00 00	 DD	 $LN33@AddPassive
  00604	00 00 00 00	 DD	 $LN31@AddPassive
  00608	00 00 00 00	 DD	 $LN24@AddPassive
  0060c	00 00 00 00	 DD	 $LN23@AddPassive
  00610	00 00 00 00	 DD	 $LN22@AddPassive
  00614	00 00 00 00	 DD	 $LN21@AddPassive
  00618	00 00 00 00	 DD	 $LN20@AddPassive
  0061c	00 00 00 00	 DD	 $LN19@AddPassive
  00620	00 00 00 00	 DD	 $LN18@AddPassive
  00624	00 00 00 00	 DD	 $LN17@AddPassive
  00628	00 00 00 00	 DD	 $LN16@AddPassive
  0062c	00 00 00 00	 DD	 $LN15@AddPassive
  00630	00 00 00 00	 DD	 $LN14@AddPassive
  00634	00 00 00 00	 DD	 $LN13@AddPassive
  00638	00 00 00 00	 DD	 $LN12@AddPassive
  0063c	00 00 00 00	 DD	 $LN9@AddPassive
  00640	00 00 00 00	 DD	 $LN7@AddPassive
  00644	00 00 00 00	 DD	 $LN5@AddPassive
  00648	00 00 00 00	 DD	 $LN11@AddPassive
  0064c	00 00 00 00	 DD	 $LN8@AddPassive
  00650	00 00 00 00	 DD	 $LN6@AddPassive
  00654	00 00 00 00	 DD	 $LN4@AddPassive
  00658	00 00 00 00	 DD	 $LN10@AddPassive
  0065c	00 00 00 00	 DD	 $LN51@AddPassive
  00660	00 00 00 00	 DD	 $LN3@AddPassive
  00664	00 00 00 00	 DD	 $LN2@AddPassive
  00668	00 00 00 00	 DD	 $LN1@AddPassive
$LN83@AddPassive:
  0066c	00		 DB	 0
  0066d	01		 DB	 1
  0066e	02		 DB	 2
  0066f	03		 DB	 3
  00670	04		 DB	 4
  00671	05		 DB	 5
  00672	06		 DB	 6
  00673	07		 DB	 7
  00674	08		 DB	 8
  00675	09		 DB	 9
  00676	0a		 DB	 10			; 0000000aH
  00677	0b		 DB	 11			; 0000000bH
  00678	0c		 DB	 12			; 0000000cH
  00679	0d		 DB	 13			; 0000000dH
  0067a	4b		 DB	 75			; 0000004bH
  0067b	4b		 DB	 75			; 0000004bH
  0067c	4b		 DB	 75			; 0000004bH
  0067d	4b		 DB	 75			; 0000004bH
  0067e	4b		 DB	 75			; 0000004bH
  0067f	4b		 DB	 75			; 0000004bH
  00680	4b		 DB	 75			; 0000004bH
  00681	4b		 DB	 75			; 0000004bH
  00682	4b		 DB	 75			; 0000004bH
  00683	4b		 DB	 75			; 0000004bH
  00684	4b		 DB	 75			; 0000004bH
  00685	0e		 DB	 14			; 0000000eH
  00686	4b		 DB	 75			; 0000004bH
  00687	4b		 DB	 75			; 0000004bH
  00688	4b		 DB	 75			; 0000004bH
  00689	4b		 DB	 75			; 0000004bH
  0068a	4b		 DB	 75			; 0000004bH
  0068b	4b		 DB	 75			; 0000004bH
  0068c	4b		 DB	 75			; 0000004bH
  0068d	4b		 DB	 75			; 0000004bH
  0068e	0f		 DB	 15			; 0000000fH
  0068f	10		 DB	 16			; 00000010H
  00690	4b		 DB	 75			; 0000004bH
  00691	4b		 DB	 75			; 0000004bH
  00692	11		 DB	 17			; 00000011H
  00693	4b		 DB	 75			; 0000004bH
  00694	4b		 DB	 75			; 0000004bH
  00695	12		 DB	 18			; 00000012H
  00696	4b		 DB	 75			; 0000004bH
  00697	4b		 DB	 75			; 0000004bH
  00698	4b		 DB	 75			; 0000004bH
  00699	4b		 DB	 75			; 0000004bH
  0069a	4b		 DB	 75			; 0000004bH
  0069b	13		 DB	 19			; 00000013H
  0069c	14		 DB	 20			; 00000014H
  0069d	15		 DB	 21			; 00000015H
  0069e	16		 DB	 22			; 00000016H
  0069f	17		 DB	 23			; 00000017H
  006a0	18		 DB	 24			; 00000018H
  006a1	19		 DB	 25			; 00000019H
  006a2	1a		 DB	 26			; 0000001aH
  006a3	1b		 DB	 27			; 0000001bH
  006a4	4b		 DB	 75			; 0000004bH
  006a5	1c		 DB	 28			; 0000001cH
  006a6	1d		 DB	 29			; 0000001dH
  006a7	1e		 DB	 30			; 0000001eH
  006a8	4b		 DB	 75			; 0000004bH
  006a9	1f		 DB	 31			; 0000001fH
  006aa	20		 DB	 32			; 00000020H
  006ab	4b		 DB	 75			; 0000004bH
  006ac	21		 DB	 33			; 00000021H
  006ad	4b		 DB	 75			; 0000004bH
  006ae	4b		 DB	 75			; 0000004bH
  006af	4b		 DB	 75			; 0000004bH
  006b0	4b		 DB	 75			; 0000004bH
  006b1	4b		 DB	 75			; 0000004bH
  006b2	4b		 DB	 75			; 0000004bH
  006b3	4b		 DB	 75			; 0000004bH
  006b4	4b		 DB	 75			; 0000004bH
  006b5	4b		 DB	 75			; 0000004bH
  006b6	4b		 DB	 75			; 0000004bH
  006b7	4b		 DB	 75			; 0000004bH
  006b8	4b		 DB	 75			; 0000004bH
  006b9	4b		 DB	 75			; 0000004bH
  006ba	4b		 DB	 75			; 0000004bH
  006bb	4b		 DB	 75			; 0000004bH
  006bc	4b		 DB	 75			; 0000004bH
  006bd	4b		 DB	 75			; 0000004bH
  006be	4b		 DB	 75			; 0000004bH
  006bf	4b		 DB	 75			; 0000004bH
  006c0	4b		 DB	 75			; 0000004bH
  006c1	4b		 DB	 75			; 0000004bH
  006c2	22		 DB	 34			; 00000022H
  006c3	4b		 DB	 75			; 0000004bH
  006c4	4b		 DB	 75			; 0000004bH
  006c5	4b		 DB	 75			; 0000004bH
  006c6	4b		 DB	 75			; 0000004bH
  006c7	4b		 DB	 75			; 0000004bH
  006c8	4b		 DB	 75			; 0000004bH
  006c9	4b		 DB	 75			; 0000004bH
  006ca	4b		 DB	 75			; 0000004bH
  006cb	4b		 DB	 75			; 0000004bH
  006cc	4b		 DB	 75			; 0000004bH
  006cd	23		 DB	 35			; 00000023H
  006ce	24		 DB	 36			; 00000024H
  006cf	25		 DB	 37			; 00000025H
  006d0	26		 DB	 38			; 00000026H
  006d1	27		 DB	 39			; 00000027H
  006d2	28		 DB	 40			; 00000028H
  006d3	4b		 DB	 75			; 0000004bH
  006d4	4b		 DB	 75			; 0000004bH
  006d5	29		 DB	 41			; 00000029H
  006d6	4b		 DB	 75			; 0000004bH
  006d7	2a		 DB	 42			; 0000002aH
  006d8	4b		 DB	 75			; 0000004bH
  006d9	4b		 DB	 75			; 0000004bH
  006da	4b		 DB	 75			; 0000004bH
  006db	4b		 DB	 75			; 0000004bH
  006dc	4b		 DB	 75			; 0000004bH
  006dd	4b		 DB	 75			; 0000004bH
  006de	4b		 DB	 75			; 0000004bH
  006df	2b		 DB	 43			; 0000002bH
  006e0	4b		 DB	 75			; 0000004bH
  006e1	4b		 DB	 75			; 0000004bH
  006e2	4b		 DB	 75			; 0000004bH
  006e3	2c		 DB	 44			; 0000002cH
  006e4	4b		 DB	 75			; 0000004bH
  006e5	2d		 DB	 45			; 0000002dH
  006e6	4b		 DB	 75			; 0000004bH
  006e7	4b		 DB	 75			; 0000004bH
  006e8	4b		 DB	 75			; 0000004bH
  006e9	4b		 DB	 75			; 0000004bH
  006ea	4b		 DB	 75			; 0000004bH
  006eb	4b		 DB	 75			; 0000004bH
  006ec	2e		 DB	 46			; 0000002eH
  006ed	4b		 DB	 75			; 0000004bH
  006ee	4b		 DB	 75			; 0000004bH
  006ef	4b		 DB	 75			; 0000004bH
  006f0	4b		 DB	 75			; 0000004bH
  006f1	4b		 DB	 75			; 0000004bH
  006f2	4b		 DB	 75			; 0000004bH
  006f3	2f		 DB	 47			; 0000002fH
  006f4	30		 DB	 48			; 00000030H
  006f5	4b		 DB	 75			; 0000004bH
  006f6	31		 DB	 49			; 00000031H
  006f7	32		 DB	 50			; 00000032H
  006f8	4b		 DB	 75			; 0000004bH
  006f9	4b		 DB	 75			; 0000004bH
  006fa	1f		 DB	 31			; 0000001fH
  006fb	21		 DB	 33			; 00000021H
  006fc	4b		 DB	 75			; 0000004bH
  006fd	4b		 DB	 75			; 0000004bH
  006fe	4b		 DB	 75			; 0000004bH
  006ff	4b		 DB	 75			; 0000004bH
  00700	33		 DB	 51			; 00000033H
  00701	34		 DB	 52			; 00000034H
  00702	35		 DB	 53			; 00000035H
  00703	36		 DB	 54			; 00000036H
  00704	37		 DB	 55			; 00000037H
  00705	38		 DB	 56			; 00000038H
  00706	4b		 DB	 75			; 0000004bH
  00707	4b		 DB	 75			; 0000004bH
  00708	4b		 DB	 75			; 0000004bH
  00709	39		 DB	 57			; 00000039H
  0070a	4b		 DB	 75			; 0000004bH
  0070b	4b		 DB	 75			; 0000004bH
  0070c	4b		 DB	 75			; 0000004bH
  0070d	4b		 DB	 75			; 0000004bH
  0070e	4b		 DB	 75			; 0000004bH
  0070f	4b		 DB	 75			; 0000004bH
  00710	4b		 DB	 75			; 0000004bH
  00711	3a		 DB	 58			; 0000003aH
  00712	3b		 DB	 59			; 0000003bH
  00713	3c		 DB	 60			; 0000003cH
  00714	3d		 DB	 61			; 0000003dH
  00715	4b		 DB	 75			; 0000004bH
  00716	4b		 DB	 75			; 0000004bH
  00717	3e		 DB	 62			; 0000003eH
  00718	4b		 DB	 75			; 0000004bH
  00719	4b		 DB	 75			; 0000004bH
  0071a	4b		 DB	 75			; 0000004bH
  0071b	4b		 DB	 75			; 0000004bH
  0071c	4b		 DB	 75			; 0000004bH
  0071d	4b		 DB	 75			; 0000004bH
  0071e	4b		 DB	 75			; 0000004bH
  0071f	4b		 DB	 75			; 0000004bH
  00720	4b		 DB	 75			; 0000004bH
  00721	4b		 DB	 75			; 0000004bH
  00722	4b		 DB	 75			; 0000004bH
  00723	4b		 DB	 75			; 0000004bH
  00724	4b		 DB	 75			; 0000004bH
  00725	10		 DB	 16			; 00000010H
  00726	4b		 DB	 75			; 0000004bH
  00727	4b		 DB	 75			; 0000004bH
  00728	22		 DB	 34			; 00000022H
  00729	4b		 DB	 75			; 0000004bH
  0072a	4b		 DB	 75			; 0000004bH
  0072b	4b		 DB	 75			; 0000004bH
  0072c	4b		 DB	 75			; 0000004bH
  0072d	4b		 DB	 75			; 0000004bH
  0072e	4b		 DB	 75			; 0000004bH
  0072f	4b		 DB	 75			; 0000004bH
  00730	4b		 DB	 75			; 0000004bH
  00731	4b		 DB	 75			; 0000004bH
  00732	4b		 DB	 75			; 0000004bH
  00733	4b		 DB	 75			; 0000004bH
  00734	4b		 DB	 75			; 0000004bH
  00735	4b		 DB	 75			; 0000004bH
  00736	4b		 DB	 75			; 0000004bH
  00737	4b		 DB	 75			; 0000004bH
  00738	4b		 DB	 75			; 0000004bH
  00739	4b		 DB	 75			; 0000004bH
  0073a	4b		 DB	 75			; 0000004bH
  0073b	4b		 DB	 75			; 0000004bH
  0073c	4b		 DB	 75			; 0000004bH
  0073d	4b		 DB	 75			; 0000004bH
  0073e	4b		 DB	 75			; 0000004bH
  0073f	4b		 DB	 75			; 0000004bH
  00740	4b		 DB	 75			; 0000004bH
  00741	10		 DB	 16			; 00000010H
  00742	4b		 DB	 75			; 0000004bH
  00743	4b		 DB	 75			; 0000004bH
  00744	4b		 DB	 75			; 0000004bH
  00745	4b		 DB	 75			; 0000004bH
  00746	4b		 DB	 75			; 0000004bH
  00747	4b		 DB	 75			; 0000004bH
  00748	4b		 DB	 75			; 0000004bH
  00749	4b		 DB	 75			; 0000004bH
  0074a	4b		 DB	 75			; 0000004bH
  0074b	4b		 DB	 75			; 0000004bH
  0074c	4b		 DB	 75			; 0000004bH
  0074d	4b		 DB	 75			; 0000004bH
  0074e	3f		 DB	 63			; 0000003fH
  0074f	40		 DB	 64			; 00000040H
  00750	41		 DB	 65			; 00000041H
  00751	42		 DB	 66			; 00000042H
  00752	43		 DB	 67			; 00000043H
  00753	44		 DB	 68			; 00000044H
  00754	45		 DB	 69			; 00000045H
  00755	46		 DB	 70			; 00000046H
  00756	47		 DB	 71			; 00000047H
  00757	48		 DB	 72			; 00000048H
  00758	4b		 DB	 75			; 0000004bH
  00759	4b		 DB	 75			; 0000004bH
  0075a	4b		 DB	 75			; 0000004bH
  0075b	4b		 DB	 75			; 0000004bH
  0075c	4b		 DB	 75			; 0000004bH
  0075d	4b		 DB	 75			; 0000004bH
  0075e	4b		 DB	 75			; 0000004bH
  0075f	4b		 DB	 75			; 0000004bH
  00760	4b		 DB	 75			; 0000004bH
  00761	4b		 DB	 75			; 0000004bH
  00762	4b		 DB	 75			; 0000004bH
  00763	4b		 DB	 75			; 0000004bH
  00764	4b		 DB	 75			; 0000004bH
  00765	4b		 DB	 75			; 0000004bH
  00766	4b		 DB	 75			; 0000004bH
  00767	4b		 DB	 75			; 0000004bH
  00768	4b		 DB	 75			; 0000004bH
  00769	4b		 DB	 75			; 0000004bH
  0076a	4b		 DB	 75			; 0000004bH
  0076b	4b		 DB	 75			; 0000004bH
  0076c	4b		 DB	 75			; 0000004bH
  0076d	10		 DB	 16			; 00000010H
  0076e	4b		 DB	 75			; 0000004bH
  0076f	4b		 DB	 75			; 0000004bH
  00770	4b		 DB	 75			; 0000004bH
  00771	4b		 DB	 75			; 0000004bH
  00772	4b		 DB	 75			; 0000004bH
  00773	4b		 DB	 75			; 0000004bH
  00774	4b		 DB	 75			; 0000004bH
  00775	4b		 DB	 75			; 0000004bH
  00776	4b		 DB	 75			; 0000004bH
  00777	4b		 DB	 75			; 0000004bH
  00778	49		 DB	 73			; 00000049H
  00779	4b		 DB	 75			; 0000004bH
  0077a	4b		 DB	 75			; 0000004bH
  0077b	4a		 DB	 74			; 0000004aH
  0077c	4b		 DB	 75			; 0000004bH
  0077d	4b		 DB	 75			; 0000004bH
  0077e	4b		 DB	 75			; 0000004bH
  0077f	4b		 DB	 75			; 0000004bH
  00780	4b		 DB	 75			; 0000004bH
  00781	4b		 DB	 75			; 0000004bH
  00782	00		 DB	 0
  00783	01		 DB	 1
  00784	02		 DB	 2
  00785	03		 DB	 3
  00786	04		 DB	 4
  00787	05		 DB	 5
  00788	06		 DB	 6
  00789	07		 DB	 7
  0078a	08		 DB	 8
  0078b	09		 DB	 9
  0078c	0a		 DB	 10			; 0000000aH
  0078d	0b		 DB	 11			; 0000000bH
  0078e	0c		 DB	 12			; 0000000cH
  0078f	0d		 DB	 13			; 0000000dH
  00790	4b		 DB	 75			; 0000004bH
  00791	4b		 DB	 75			; 0000004bH
  00792	4b		 DB	 75			; 0000004bH
  00793	4b		 DB	 75			; 0000004bH
  00794	4b		 DB	 75			; 0000004bH
  00795	4b		 DB	 75			; 0000004bH
  00796	4b		 DB	 75			; 0000004bH
  00797	0e		 DB	 14			; 0000000eH
  00798	0f		 DB	 15			; 0000000fH
  00799	11		 DB	 17			; 00000011H
  0079a	4b		 DB	 75			; 0000004bH
  0079b	13		 DB	 19			; 00000013H
  0079c	1c		 DB	 28			; 0000001cH
  0079d	1d		 DB	 29			; 0000001dH
  0079e	1e		 DB	 30			; 0000001eH
  0079f	1f		 DB	 31			; 0000001fH
  007a0	20		 DB	 32			; 00000020H
?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::AddPassiveSkill
_TEXT	ENDS
PUBLIC	?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
; Function compile flags: /Ogtp
;	COMDAT ?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_iCompleteSkill2$ = -4					; size = 4
_this$ = -4						; size = 4
_iCompleteSkill1$ = 8					; size = 4
_iBrandOfSkill1$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_iBrandOfSkill$216450 = 12				; size = 2
_iBrandOfSkill2$ = 12					; size = 4
_iMLSkill$ = 12						; size = 4
?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill, COMDAT
; _this$ = ecx

; 866  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 867  : 	int iSkillUseType = MagicDamageC.GetSkillUseType(iMLSkill);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _iMLSkill$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	53		 push	 ebx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00013	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType

; 868  : 
; 869  : 	if( iSkillUseType == 4 )

  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001b	83 f8 04	 cmp	 eax, 4
  0001e	75 58		 jne	 SHORT $LN21@CheckCompl

; 870  : 	{
; 871  : 		WORD iBrandOfSkill = MagicDamageC.GetSkillReqBrandOfSkill(iMLSkill);

  00020	53		 push	 ebx
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00026	e8 00 00 00 00	 call	 ?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillReqBrandOfSkill
  0002b	0f b7 c0	 movzx	 eax, ax
  0002e	89 45 0c	 mov	 DWORD PTR _iBrandOfSkill$216450[ebp], eax

; 872  : 		int iCompleteSkill = 0;
; 873  : 
; 874  : 		if( iBrandOfSkill > 0 )

  00031	66 85 c0	 test	 ax, ax
  00034	0f 84 3e 01 00
	00		 je	 $LN1@CheckCompl

; 875  : 		{
; 876  : 			for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0003a	33 f6		 xor	 esi, esi
  0003c	8d 64 24 00	 npad	 4
$LL26@CheckCompl:

; 877  : 			{
; 878  : 				if( lpObj->Magic[iCount].IsMagic() == TRUE )

  00040	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00046	03 ce		 add	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 10		 jne	 SHORT $LN25@CheckCompl

; 879  : 				{
; 880  : 					if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill )

  00052	0f b7 4d 0c	 movzx	 ecx, WORD PTR _iBrandOfSkill$216450[ebp]
  00056	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  0005c	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  00060	74 16		 je	 SHORT $LN21@CheckCompl
$LN25@CheckCompl:

; 875  : 		{
; 876  : 			for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00062	83 c6 18	 add	 esi, 24			; 00000018H
  00065	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0006b	7c d3		 jl	 SHORT $LL26@CheckCompl

; 950  : 	}
; 951  : 
; 952  : 	return 0;

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	33 c0		 xor	 eax, eax
  00071	5b		 pop	 ebx

; 953  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
$LN21@CheckCompl:

; 881  : 					{
; 882  : 						iCompleteSkill = TRUE;
; 883  : 						break;
; 884  : 					}
; 885  : 				}
; 886  : 			}
; 887  : 		}
; 888  : 
; 889  : 		if( iCompleteSkill == 0 )
; 890  : 			return 0;
; 891  : 	}
; 892  : 
; 893  : 	int iBrandOfSkill1 = this->GetParentSkill1(lpObj->Class,iMLSkill);

  00078	0f b7 b7 b8 00
	00 00		 movzx	 esi, WORD PTR [edi+184]
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	53		 push	 ebx
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1

; 894  : 	int iBrandOfSkill2 = this->GetParentSkill2(lpObj->Class,iMLSkill);

  00089	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	53		 push	 ebx
  0008d	56		 push	 esi
  0008e	89 45 08	 mov	 DWORD PTR _iBrandOfSkill1$[ebp], eax
  00091	e8 00 00 00 00	 call	 ?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill2

; 895  : 
; 896  : 	if( iBrandOfSkill1 <= 0 && iBrandOfSkill2 <= 0 )

  00096	8b 5d 08	 mov	 ebx, DWORD PTR _iBrandOfSkill1$[ebp]
  00099	33 f6		 xor	 esi, esi
  0009b	89 45 0c	 mov	 DWORD PTR _iBrandOfSkill2$[ebp], eax
  0009e	3b de		 cmp	 ebx, esi
  000a0	7f 08		 jg	 SHORT $LN20@CheckCompl
  000a2	3b c6		 cmp	 eax, esi

; 897  : 		return true;

  000a4	0f 8e a2 00 00
	00		 jle	 $LN42@CheckCompl
$LN20@CheckCompl:

; 898  : 
; 899  : 	int iCompleteSkill1 = 0;

  000aa	89 75 08	 mov	 DWORD PTR _iCompleteSkill1$[ebp], esi

; 900  : 
; 901  : 	if( iBrandOfSkill1 > 0 )

  000ad	3b de		 cmp	 ebx, esi
  000af	7e 39		 jle	 SHORT $LN41@CheckCompl
$LL18@CheckCompl:

; 904  : 		{
; 905  : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  000b1	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  000b7	03 ce		 add	 ecx, esi
  000b9	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000be	83 f8 01	 cmp	 eax, 1
  000c1	75 13		 jne	 SHORT $LN17@CheckCompl

; 906  : 			{
; 907  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill1 &&
; 908  : 					lpObj->Magic[iCount].m_Level >= 10 )

  000c3	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  000c9	39 5c 30 08	 cmp	 DWORD PTR [eax+esi+8], ebx
  000cd	75 07		 jne	 SHORT $LN17@CheckCompl
  000cf	80 7c 30 04 0a	 cmp	 BYTE PTR [eax+esi+4], 10 ; 0000000aH
  000d4	73 0d		 jae	 SHORT $LN35@CheckCompl
$LN17@CheckCompl:

; 902  : 	{
; 903  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  000d6	83 c6 18	 add	 esi, 24			; 00000018H
  000d9	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  000df	7c d0		 jl	 SHORT $LL18@CheckCompl

; 924  : 			{
; 925  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill2 &&
; 926  : 					lpObj->Magic[iCount].m_Level >= 10 )

  000e1	eb 07		 jmp	 SHORT $LN41@CheckCompl
$LN35@CheckCompl:

; 909  : 				{
; 910  : 					iCompleteSkill1 = TRUE;

  000e3	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _iCompleteSkill1$[ebp], 1
$LN41@CheckCompl:

; 911  : 					break;
; 912  : 				}
; 913  : 			}
; 914  : 		}
; 915  : 	}
; 916  : 
; 917  : 	int iCompleteSkill2 = 0;

  000ea	33 f6		 xor	 esi, esi
  000ec	89 75 fc	 mov	 DWORD PTR _iCompleteSkill2$[ebp], esi

; 918  : 
; 919  : 	if( iBrandOfSkill2 > 0 )

  000ef	39 75 0c	 cmp	 DWORD PTR _iBrandOfSkill2$[ebp], esi
  000f2	7e 48		 jle	 SHORT $LN10@CheckCompl
  000f4	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL12@CheckCompl:

; 922  : 		{
; 923  : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  00100	8b 8f c8 04 00
	00		 mov	 ecx, DWORD PTR [edi+1224]
  00106	03 ce		 add	 ecx, esi
  00108	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0010d	83 f8 01	 cmp	 eax, 1
  00110	75 16		 jne	 SHORT $LN11@CheckCompl

; 924  : 			{
; 925  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill2 &&
; 926  : 					lpObj->Magic[iCount].m_Level >= 10 )

  00112	8b 87 c8 04 00
	00		 mov	 eax, DWORD PTR [edi+1224]
  00118	8b 4d 0c	 mov	 ecx, DWORD PTR _iBrandOfSkill2$[ebp]
  0011b	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  0011f	75 07		 jne	 SHORT $LN11@CheckCompl
  00121	80 7c 30 04 0a	 cmp	 BYTE PTR [eax+esi+4], 10 ; 0000000aH
  00126	73 0d		 jae	 SHORT $LN36@CheckCompl
$LN11@CheckCompl:

; 920  : 	{
; 921  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00128	83 c6 18	 add	 esi, 24			; 00000018H
  0012b	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00131	7c cd		 jl	 SHORT $LL12@CheckCompl

; 924  : 			{
; 925  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill2 &&
; 926  : 					lpObj->Magic[iCount].m_Level >= 10 )

  00133	eb 07		 jmp	 SHORT $LN10@CheckCompl
$LN36@CheckCompl:

; 927  : 				{
; 928  : 					iCompleteSkill2 = TRUE;

  00135	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _iCompleteSkill2$[ebp], 1
$LN10@CheckCompl:

; 929  : 					break;
; 930  : 				}
; 931  : 			}
; 932  : 		}
; 933  : 	}
; 934  : 
; 935  : 	int iSum = iBrandOfSkill1+iBrandOfSkill2;

  0013c	8b 4d 0c	 mov	 ecx, DWORD PTR _iBrandOfSkill2$[ebp]
  0013f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 936  : 
; 937  : 	if( iSum == iBrandOfSkill1 )

  00142	3b c3		 cmp	 eax, ebx
  00144	75 14		 jne	 SHORT $LN7@CheckCompl

; 938  : 	{
; 939  : 		if( iCompleteSkill1 != 0 )

  00146	83 7d 08 00	 cmp	 DWORD PTR _iCompleteSkill1$[ebp], 0
  0014a	74 2c		 je	 SHORT $LN1@CheckCompl
$LN42@CheckCompl:
  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi

; 940  : 			return true;

  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	5b		 pop	 ebx

; 953  : }

  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
$LN7@CheckCompl:

; 941  : 	}
; 942  : 	else if( iSum == iBrandOfSkill2 )

  0015a	3b c1		 cmp	 eax, ecx
  0015c	75 14		 jne	 SHORT $LN4@CheckCompl
$LN43@CheckCompl:

; 943  : 	{
; 944  : 		if( iCompleteSkill2 != 0 )

  0015e	83 7d fc 00	 cmp	 DWORD PTR _iCompleteSkill2$[ebp], 0
  00162	74 14		 je	 SHORT $LN1@CheckCompl

; 945  : 			return true;

  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	b8 01 00 00 00	 mov	 eax, 1
  0016b	5b		 pop	 ebx

; 953  : }

  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 08 00	 ret	 8
$LN4@CheckCompl:

; 946  : 	}
; 947  : 	else if( iCompleteSkill1 != 0 && iCompleteSkill2 != 0 )

  00172	83 7d 08 00	 cmp	 DWORD PTR _iCompleteSkill1$[ebp], 0

; 948  : 	{
; 949  : 		return true;

  00176	75 e6		 jne	 SHORT $LN43@CheckCompl
$LN1@CheckCompl:
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi

; 950  : 	}
; 951  : 
; 952  : 	return 0;

  0017a	33 c0		 xor	 eax, eax
  0017c	5b		 pop	 ebx

; 953  : }

  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 08 00	 ret	 8
?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
EXTRN	?PHeadSubSetW@@YAXPAEEEH@Z:PROC			; PHeadSubSetW
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
; Function compile flags: /Ogtp
;	COMDAT ?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$GSCopy$ = -1068					; size = 4
_pElementMsg$ = -1064					; size = 12
tv383 = -1052						; size = 4
_nCount$ = -1048					; size = 4
_lOfs$ = -1044						; size = 4
_pCountMsg$ = -1040					; size = 12
_sendbuf$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree, COMDAT
; _this$ = ecx

; 1153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 04 00
	00		 sub	 esp, 1068		; 0000042cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 1154 : 	if( !gObjIsConnected(aIndex) )

  00018	56		 push	 esi
  00019	8b d9		 mov	 ebx, ecx

; 1170 : 
; 1171 : 	MASTERSKILL_STRUCT pElementMsg;
; 1172 : 
; 1173 : 	for(int i = 0; i < MAX_MAGIC; i++)

  0001b	89 b5 d4 fb ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  00021	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	75 1b		 jne	 SHORT $LN9@CGReqGetMa

; 1155 : 	{
; 1156 : 		CloseClient(aIndex);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00033	83 c4 04	 add	 esp, 4
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 1212 : }

  00038	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003b	33 cd		 xor	 ecx, ebp
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN9@CGReqGetMa:
  00048	57		 push	 edi

; 1157 : 		return;
; 1158 : 	}
; 1159 : 
; 1160 : 	LPOBJ lpObj = &gObj[aIndex];

  00049	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0004f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1161 : 
; 1162 : 	PMSG_MASTERSKILL_COUNT pCountMsg;
; 1163 : 	PHeadSubSetW((LPBYTE)&pCountMsg,0xF3,0x53,sizeof(pCountMsg));

  00055	6a 0c		 push	 12			; 0000000cH
  00057	6a 53		 push	 83			; 00000053H
  00059	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _pCountMsg$[ebp]
  0005f	68 f3 00 00 00	 push	 243			; 000000f3H
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW

; 1164 : 	int nCount = 0;

  0006a	33 ff		 xor	 edi, edi

; 1165 : 
; 1166 : 	BYTE sendbuf[1024];
; 1167 : 	memset(&sendbuf[0],0,sizeof(sendbuf));

  0006c	68 00 04 00 00	 push	 1024			; 00000400H
  00071	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _sendbuf$[ebp]
  00077	57		 push	 edi
  00078	51		 push	 ecx
  00079	89 bd e8 fb ff
	ff		 mov	 DWORD PTR _nCount$[ebp], edi
  0007f	e8 00 00 00 00	 call	 _memset
  00084	8d 95 08 fc ff
	ff		 lea	 edx, DWORD PTR _sendbuf$[ebp+12]
  0008a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1168 : 
; 1169 : 	int lOfs = sizeof(pCountMsg);

  0008d	c7 85 ec fb ff
	ff 0c 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 12 ; 0000000cH
  00097	89 95 e4 fb ff
	ff		 mov	 DWORD PTR tv383[ebp], edx
  0009d	8d 49 00	 npad	 3
$LL8@CGReqGetMa:

; 1174 : 	{
; 1175 : 		if( lpObj->Magic[i].IsMagic() == TRUE &&
; 1176 : 			this->CheckRequireStatus(lpObj->Magic[i].m_Skill) == TRUE )

  000a0	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  000a6	03 cf		 add	 ecx, edi
  000a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	0f 85 46 01 00
	00		 jne	 $LN7@CGReqGetMa
  000b6	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  000bc	8b 4c 07 08	 mov	 ecx, DWORD PTR [edi+eax+8]
  000c0	51		 push	 ecx
  000c1	8b cb		 mov	 ecx, ebx
  000c3	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  000c8	83 f8 01	 cmp	 eax, 1
  000cb	0f 85 2b 01 00
	00		 jne	 $LN7@CGReqGetMa

; 1177 : 		{
; 1178 : 			pElementMsg.btMasterSkillId = this->GetMasterSkillUIIndex(lpObj->Class,lpObj->Magic[i].m_Skill);

  000d1	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  000d7	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  000de	8b 44 17 08	 mov	 eax, DWORD PTR [edi+edx+8]
  000e2	50		 push	 eax
  000e3	51		 push	 ecx
  000e4	8b cb		 mov	 ecx, ebx
  000e6	e8 00 00 00 00	 call	 ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex

; 1179 : 			pElementMsg.btLevel = lpObj->Magic[i].m_Level;

  000eb	8b 96 c8 04 00
	00		 mov	 edx, DWORD PTR [esi+1224]
  000f1	8a 4c 17 04	 mov	 cl, BYTE PTR [edi+edx+4]
  000f5	88 85 d8 fb ff
	ff		 mov	 BYTE PTR _pElementMsg$[ebp], al
  000fb	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]

; 1180 : 
; 1181 : 			if( this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level) > 0.0f )

  000fe	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00101	88 8d d9 fb ff
	ff		 mov	 BYTE PTR _pElementMsg$[ebp+1], cl
  00107	0f b6 c9	 movzx	 ecx, cl
  0010a	51		 push	 ecx
  0010b	52		 push	 edx
  0010c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00111	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00116	50		 push	 eax
  00117	8b cb		 mov	 ecx, ebx
  00119	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0011e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00124	df e0		 fnstsw	 ax
  00126	f6 c4 41	 test	 ah, 65			; 00000041H
  00129	75 25		 jne	 SHORT $LN4@CGReqGetMa

; 1182 : 			{
; 1183 : 				pElementMsg.value = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level);

  0012b	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  00131	0f b6 4c 38 04	 movzx	 ecx, BYTE PTR [eax+edi+4]
  00136	8b 54 38 08	 mov	 edx, DWORD PTR [eax+edi+8]
  0013a	51		 push	 ecx
  0013b	52		 push	 edx
  0013c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00141	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00146	50		 push	 eax
  00147	8b cb		 mov	 ecx, ebx
  00149	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1184 : 			}
; 1185 : 			else

  0014e	eb 06		 jmp	 SHORT $LN15@CGReqGetMa
$LN4@CGReqGetMa:

; 1186 : 			{
; 1187 : 				pElementMsg.value = -1.0f;

  00150	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
$LN15@CGReqGetMa:

; 1188 : 			}
; 1189 : 
; 1190 : 			if( lpObj->Magic[i].m_Level < MAX_SKILLTREE_LEVEL && this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level+1) != 0.0f )

  00156	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  0015c	d9 9d dc fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+4]
  00162	80 7c 07 04 14	 cmp	 BYTE PTR [edi+eax+4], 20 ; 00000014H
  00167	73 51		 jae	 SHORT $LN14@CGReqGetMa
  00169	0f b6 54 38 04	 movzx	 edx, BYTE PTR [eax+edi+4]
  0016e	8b 44 38 08	 mov	 eax, DWORD PTR [eax+edi+8]
  00172	42		 inc	 edx
  00173	52		 push	 edx
  00174	50		 push	 eax
  00175	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0017a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0017f	50		 push	 eax
  00180	8b cb		 mov	 ecx, ebx
  00182	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00187	d9 ee		 fldz
  00189	da e9		 fucompp
  0018b	df e0		 fnstsw	 ax
  0018d	f6 c4 44	 test	 ah, 68			; 00000044H
  00190	7b 28		 jnp	 SHORT $LN14@CGReqGetMa

; 1191 : 			{
; 1192 : 				pElementMsg.nextvalue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level+1);

  00192	8b 8e c8 04 00
	00		 mov	 ecx, DWORD PTR [esi+1224]
  00198	0f b6 54 0f 04	 movzx	 edx, BYTE PTR [edi+ecx+4]
  0019d	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  001a0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001a3	42		 inc	 edx
  001a4	52		 push	 edx
  001a5	50		 push	 eax
  001a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001ab	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001b0	50		 push	 eax
  001b1	8b cb		 mov	 ecx, ebx
  001b3	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1193 : 			}
; 1194 : 			else

  001b8	eb 06		 jmp	 SHORT $LN16@CGReqGetMa
$LN14@CGReqGetMa:

; 1195 : 			{
; 1196 : 				pElementMsg.nextvalue = -1.0f;

  001ba	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
$LN16@CGReqGetMa:

; 1197 : 			}
; 1198 : 
; 1199 : 			nCount++;
; 1200 : 			memcpy(&sendbuf[lOfs],&pElementMsg,sizeof(pElementMsg));

  001c0	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR tv383[ebp]
  001c6	d9 9d e0 fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+8]
  001cc	8b 8d d8 fb ff
	ff		 mov	 ecx, DWORD PTR _pElementMsg$[ebp]
  001d2	8b 95 dc fb ff
	ff		 mov	 edx, DWORD PTR _pElementMsg$[ebp+4]
  001d8	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _nCount$[ebp]

; 1201 : 			lOfs += sizeof(pElementMsg);

  001de	83 85 ec fb ff
	ff 0c		 add	 DWORD PTR _lOfs$[ebp], 12 ; 0000000cH
  001e5	89 08		 mov	 DWORD PTR [eax], ecx
  001e7	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _pElementMsg$[ebp+8]
  001ed	89 50 04	 mov	 DWORD PTR [eax+4], edx
  001f0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001f3	83 c0 0c	 add	 eax, 12			; 0000000cH
  001f6	89 85 e4 fb ff
	ff		 mov	 DWORD PTR tv383[ebp], eax
$LN7@CGReqGetMa:

; 1170 : 
; 1171 : 	MASTERSKILL_STRUCT pElementMsg;
; 1172 : 
; 1173 : 	for(int i = 0; i < MAX_MAGIC; i++)

  001fc	83 c7 18	 add	 edi, 24			; 00000018H
  001ff	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00205	0f 8c 95 fe ff
	ff		 jl	 $LL8@CGReqGetMa

; 1202 : 		}
; 1203 : 	}
; 1204 : 
; 1205 : 	pCountMsg.count = nCount;
; 1206 : 	pCountMsg.h.sizeH = SET_NUMBERH(lOfs);

  0020b	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _lOfs$[ebp]
  00211	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _nCount$[ebp]
  00217	8b d1		 mov	 edx, ecx
  00219	c1 ea 08	 shr	 edx, 8
  0021c	88 95 f1 fb ff
	ff		 mov	 BYTE PTR _pCountMsg$[ebp+1], dl

; 1207 : 	pCountMsg.h.sizeL = SET_NUMBERL(lOfs);

  00222	88 8d f2 fb ff
	ff		 mov	 BYTE PTR _pCountMsg$[ebp+2], cl

; 1208 : 
; 1209 : 	memcpy(&sendbuf[0],&pCountMsg,sizeof(pCountMsg));

  00228	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _pCountMsg$[ebp]

; 1210 : 
; 1211 : 	DataSend(aIndex,(LPBYTE)sendbuf,lOfs);

  0022e	51		 push	 ecx
  0022f	8b 8d d4 fb ff
	ff		 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
  00235	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _pCountMsg$[ebp+8], eax
  0023b	89 85 04 fc ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp+8], eax
  00241	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _sendbuf$[ebp]
  00247	89 95 fc fb ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp], edx
  0024d	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _pCountMsg$[ebp+4]
  00253	50		 push	 eax
  00254	51		 push	 ecx
  00255	89 95 00 fc ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp+4], edx
  0025b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1212 : }

  00260	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00263	83 c4 0c	 add	 esp, 12			; 0000000cH
  00266	5f		 pop	 edi
  00267	5e		 pop	 esi
  00268	33 cd		 xor	 ecx, ebp
  0026a	5b		 pop	 ebx
  0026b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00270	8b e5		 mov	 esp, ebp
  00272	5d		 pop	 ebp
  00273	c2 04 00	 ret	 4
?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ENDP ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
EXTRN	?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z:PROC ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv285 = 8						; size = 4
tv280 = 8						; size = 4
_iManaRate$ = 8						; size = 4
_lpObj$ = 8						; size = 4
tv290 = 12						; size = 4
_iDefenseValue$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense, COMDAT
; _this$ = ecx

; 1591 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1592 : 	LPOBJ lpTargetObj	= &gObj[aTargetIndex];

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  00008	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  0000e	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1593 : 	int skillSuccess	= TRUE;
; 1594 : 	// ----
; 1595 : 	if( lpTargetObj->Type != OBJ_USER &&
; 1596 : 		lpTargetObj->m_RecallMon == -1 )

  00017	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  0001c	74 0d		 je	 SHORT $LN5@MLS_Wizard
  0001e	83 bb 50 04 00
	00 ff		 cmp	 DWORD PTR [ebx+1104], -1
  00025	0f 84 44 01 00
	00		 je	 $LN6@MLS_Wizard
$LN5@MLS_Wizard:
  0002b	56		 push	 esi

; 1597 : 	{
; 1598 : 		return;
; 1599 : 	}
; 1600 : 	// ----
; 1601 : 	if( lpObj->Class != CLASS_WIZARD &&
; 1602 : 		lpObj->Class != CLASS_MAGUMSA )

  0002c	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0002f	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00036	66 85 c0	 test	 ax, ax
  00039	74 09		 je	 SHORT $LN4@MLS_Wizard
  0003b	83 f8 03	 cmp	 eax, 3
  0003e	0f 85 2a 01 00
	00		 jne	 $LN9@MLS_Wizard
$LN4@MLS_Wizard:

; 1603 : 	{
; 1604 : 		return;
; 1605 : 	}
; 1606 : 	// ----
; 1607 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  00044	8b 86 2c 04 00
	00		 mov	 eax, DWORD PTR [esi+1068]
  0004a	3b 83 2c 04 00
	00		 cmp	 eax, DWORD PTR [ebx+1068]
  00050	0f 85 18 01 00
	00		 jne	 $LN9@MLS_Wizard

; 1608 : 	{
; 1609 : 		return;
; 1610 : 	}
; 1611 : 	// ----
; 1612 : 	float iDefenseValue	= g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  00056	0f b7 8e f6 00
	00 00		 movzx	 ecx, WORD PTR [esi+246]
  0005d	0f bf 86 22 01
	00 00		 movsx	 eax, WORD PTR [esi+290]
  00064	03 c1		 add	 eax, ecx
  00066	0f b7 0d 56 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  0006d	99		 cdq
  0006e	f7 f9		 idiv	 ecx
  00070	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00077	57		 push	 edi
  00078	0f b7 3d 58 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160
  0007f	8b c8		 mov	 ecx, eax
  00081	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00088	03 c2		 add	 eax, edx
  0008a	99		 cdq
  0008b	f7 ff		 idiv	 edi

; 1613 : 	float fSkillValue	= this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level);

  0008d	8b 7d 10	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00090	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00093	03 c8		 add	 ecx, eax
  00095	0f b7 05 54 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  0009c	03 c8		 add	 ecx, eax
  0009e	89 4d 0c	 mov	 DWORD PTR tv290[ebp], ecx

; 1614 : 	iDefenseValue		+= fSkillValue;

  000a1	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  000a5	db 45 0c	 fild	 DWORD PTR tv290[ebp]
  000a8	51		 push	 ecx
  000a9	52		 push	 edx
  000aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000af	d9 5d 0c	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  000b2	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000c0	d8 45 0c	 fadd	 DWORD PTR _iDefenseValue$[ebp]

; 1615 : 	// ----
; 1616 : 	if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  000c3	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  000c8	d9 5d 0c	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  000cb	85 c0		 test	 eax, eax
  000cd	74 29		 je	 SHORT $LN8@MLS_Wizard
  000cf	89 45 08	 mov	 DWORD PTR tv280[ebp], eax
  000d2	db 45 08	 fild	 DWORD PTR tv280[ebp]
  000d5	79 06		 jns	 SHORT $LN13@MLS_Wizard
  000d7	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN13@MLS_Wizard:
  000dd	d9 5d 08	 fstp	 DWORD PTR tv285[ebp]
  000e0	d9 45 0c	 fld	 DWORD PTR _iDefenseValue$[ebp]
  000e3	d9 45 08	 fld	 DWORD PTR tv285[ebp]
  000e6	d8 d1		 fcom	 ST(1)
  000e8	df e0		 fnstsw	 ax
  000ea	dd d9		 fstp	 ST(1)
  000ec	f6 c4 05	 test	 ah, 5
  000ef	7a 05		 jp	 SHORT $LN11@MLS_Wizard

; 1617 : 	{
; 1618 : 		iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  000f1	d9 5d 0c	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  000f4	eb 02		 jmp	 SHORT $LN8@MLS_Wizard
$LN11@MLS_Wizard:
  000f6	dd d8		 fstp	 ST(0)
$LN8@MLS_Wizard:

; 1619 : 	}
; 1620 : 	// ----
; 1621 : 	int iManaRate		= g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level);

  000f8	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  000fc	50		 push	 eax
  000fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  00102	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel

; 1622 : 	int iSkillValidTime	= g_SkillAdditionInfo.m_SoulBarrierTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierTimeDiv;

  00107	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  0010e	0f bf c8	 movsx	 ecx, ax
  00111	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00118	03 c2		 add	 eax, edx
  0011a	89 4d 08	 mov	 DWORD PTR _iManaRate$[ebp], ecx
  0011d	0f b7 0d 62 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3170
  00124	99		 cdq
  00125	f7 f9		 idiv	 ecx
  00127	0f b7 15 60 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3168

; 1623 : 	// ----
; 1624 : 	if( g_SkillAdditionInfo.m_SoulBarrierTimeMax > 0 && iSkillValidTime > g_SkillAdditionInfo.m_SoulBarrierTimeMax )

  0012e	8b 0d 64 0c 00
	00		 mov	 ecx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  00134	03 c2		 add	 eax, edx
  00136	85 c9		 test	 ecx, ecx
  00138	74 06		 je	 SHORT $LN1@MLS_Wizard
  0013a	3b c1		 cmp	 eax, ecx
  0013c	76 02		 jbe	 SHORT $LN1@MLS_Wizard

; 1625 : 	{
; 1626 : 		iSkillValidTime = g_SkillAdditionInfo.m_SoulBarrierTimeMax;

  0013e	8b c1		 mov	 eax, ecx
$LN1@MLS_Wizard:

; 1627 : 	}
; 1628 : 
; 1629 : 	// ----
; 1630 : 	gObjApplyBuffEffectDuration(lpTargetObj, 4, 21, iDefenseValue, 28, iManaRate, iSkillValidTime);

  00140	d9 45 0c	 fld	 DWORD PTR _iDefenseValue$[ebp]
  00143	50		 push	 eax
  00144	8b 45 08	 mov	 eax, DWORD PTR _iManaRate$[ebp]
  00147	50		 push	 eax
  00148	6a 1c		 push	 28			; 0000001cH
  0014a	e8 00 00 00 00	 call	 __ftol2_sse
  0014f	50		 push	 eax
  00150	6a 15		 push	 21			; 00000015H
  00152	6a 04		 push	 4
  00154	53		 push	 ebx
  00155	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 1631 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  0015a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0015c	0f b7 57 08	 movzx	 edx, WORD PTR [edi+8]
  00160	6a 01		 push	 1
  00162	51		 push	 ecx
  00163	52		 push	 edx
  00164	56		 push	 esi
  00165	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0016a	83 c4 2c	 add	 esp, 44			; 0000002cH
  0016d	5f		 pop	 edi
$LN9@MLS_Wizard:
  0016e	5e		 pop	 esi
$LN6@MLS_Wizard:
  0016f	5b		 pop	 ebx

; 1632 : }

  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 0c 00	 ret	 12			; 0000000cH
?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
_TEXT	ENDS
PUBLIC	?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_Healing
EXTRN	?GCRecallMonLife@@YAXHHH@Z:PROC			; GCRecallMonLife
EXTRN	?IncAgro@TMonsterAIAgro@@QAEHHH@Z:PROC		; TMonsterAIAgro::IncAgro
; Function compile flags: /Ogtp
;	COMDAT ?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_lpTargetObj$ = -4					; size = 4
_fSkillValue$ = 8					; size = 4
_lpObj$ = 8						; size = 4
tv472 = 12						; size = 4
tv313 = 12						; size = 4
tv155 = 12						; size = 4
_fAddLife$ = 12						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_Healing, COMDAT
; _this$ = ecx

; 1635 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 1636 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00007	8b 75 0c	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0000a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00010	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1637 : 	int skillSuccess = TRUE;
; 1638 : 
; 1639 : 	if( lpTargetObj->Type != OBJ_USER &&
; 1640 : 		lpTargetObj->m_RecallMon == -1 )

  00019	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0001e	89 75 fc	 mov	 DWORD PTR _lpTargetObj$[ebp], esi
  00021	74 0d		 je	 SHORT $LN14@MLS_Healin
  00023	83 be 50 04 00
	00 ff		 cmp	 DWORD PTR [esi+1104], -1
  0002a	0f 84 d0 01 00
	00		 je	 $LN15@MLS_Healin
$LN14@MLS_Healin:
  00030	57		 push	 edi

; 1641 : 		return;
; 1642 : 
; 1643 : 	if( lpObj->Class != CLASS_ELF )

  00031	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00034	66 83 bf b8 00
	00 00 02	 cmp	 WORD PTR [edi+184], 2
  0003c	0f 85 bd 01 00
	00		 jne	 $LN27@MLS_Healin

; 1644 : 		return;
; 1645 : 
; 1646 : 	if( CC_MAP_RANGE(lpObj->MapNumber) )

  00042	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  00049	3c 35		 cmp	 al, 53			; 00000035H
  0004b	74 0d		 je	 SHORT $LN24@MLS_Healin
  0004d	3c 12		 cmp	 al, 18			; 00000012H
  0004f	72 13		 jb	 SHORT $LN25@MLS_Healin
  00051	b1 17		 mov	 cl, 23			; 00000017H
  00053	3a c8		 cmp	 cl, al
  00055	1b c0		 sbb	 eax, eax
  00057	40		 inc	 eax
  00058	74 0a		 je	 SHORT $LN25@MLS_Healin
$LN24@MLS_Healin:

; 1647 : 	{
; 1648 : 		if( lpObj->m_Index != lpTargetObj->m_Index )

  0005a	8b 17		 mov	 edx, DWORD PTR [edi]
  0005c	3b 16		 cmp	 edx, DWORD PTR [esi]
  0005e	0f 85 9b 01 00
	00		 jne	 $LN27@MLS_Healin
$LN25@MLS_Healin:

; 1649 : 			return;
; 1650 : 	}
; 1651 : 
; 1652 : 	float fAddLife = 5+(lpObj->Energy+lpObj->AddEnergy)/5;

  00064	0f b7 87 fa 00
	00 00		 movzx	 eax, WORD PTR [edi+250]
  0006b	0f bf 8f 26 01
	00 00		 movsx	 ecx, WORD PTR [edi+294]
  00072	03 c8		 add	 ecx, eax
  00074	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00079	f7 e9		 imul	 ecx
  0007b	d1 fa		 sar	 edx, 1
  0007d	53		 push	 ebx

; 1653 : 
; 1654 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0007e	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00081	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00085	8b ca		 mov	 ecx, edx
  00087	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008a	8d 54 0a 05	 lea	 edx, DWORD PTR [edx+ecx+5]
  0008e	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00091	89 55 0c	 mov	 DWORD PTR tv472[ebp], edx
  00094	50		 push	 eax
  00095	51		 push	 ecx
  00096	db 45 0c	 fild	 DWORD PTR tv472[ebp]
  00099	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0009e	d9 5d 0c	 fstp	 DWORD PTR _fAddLife$[ebp]
  000a1	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000af	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 1655 : 	//LogAddTD("MLS_Healing %f + %f",fAddLife,fSkillValue);
; 1656 : 
; 1657 : 	if( fSkillValue != 0.0f )

  000b2	d9 45 08	 fld	 DWORD PTR _fSkillValue$[ebp]
  000b5	d9 c0		 fld	 ST(0)
  000b7	d9 ee		 fldz
  000b9	da e9		 fucompp
  000bb	df e0		 fnstsw	 ax
  000bd	f6 c4 44	 test	 ah, 68			; 00000044H
  000c0	7b 16		 jnp	 SHORT $LN29@MLS_Healin

; 1658 : 	{
; 1659 : 		fAddLife += fAddLife*fSkillValue/100.0f;

  000c2	d9 45 0c	 fld	 DWORD PTR _fAddLife$[ebp]
  000c5	d9 c0		 fld	 ST(0)
  000c7	de ca		 fmulp	 ST(2), ST(0)
  000c9	d9 c9		 fxch	 ST(1)
  000cb	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000d1	de c1		 faddp	 ST(1), ST(0)
  000d3	d9 5d 0c	 fstp	 DWORD PTR _fAddLife$[ebp]
  000d6	eb 02		 jmp	 SHORT $LN10@MLS_Healin
$LN29@MLS_Healin:
  000d8	dd d8		 fstp	 ST(0)
$LN10@MLS_Healin:

; 1660 : 	}
; 1661 : 
; 1662 : 	//LogAddTD("MLS_Healing %f + %f",lpTargetObj->Life,fAddLife);
; 1663 : 
; 1664 : 	lpTargetObj->Life += fAddLife;

  000da	d9 45 0c	 fld	 DWORD PTR _fAddLife$[ebp]
  000dd	d8 86 fc 00 00
	00		 fadd	 DWORD PTR [esi+252]
  000e3	d9 5d 0c	 fstp	 DWORD PTR tv313[ebp]
  000e6	d9 45 0c	 fld	 DWORD PTR tv313[ebp]
  000e9	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]

; 1665 : 
; 1666 : 	if( (lpTargetObj->MaxLife+lpTargetObj->AddLife) < lpTargetObj->Life )

  000ef	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  000f5	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  000fb	d8 d1		 fcom	 ST(1)
  000fd	df e0		 fnstsw	 ax
  000ff	dd d9		 fstp	 ST(1)
  00101	f6 c4 05	 test	 ah, 5
  00104	7a 08		 jp	 SHORT $LN32@MLS_Healin

; 1667 : 		lpTargetObj->Life = lpTargetObj->MaxLife+lpTargetObj->AddLife;

  00106	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  0010c	eb 02		 jmp	 SHORT $LN9@MLS_Healin
$LN32@MLS_Healin:
  0010e	dd d8		 fstp	 ST(0)
$LN9@MLS_Healin:

; 1668 : 
; 1669 : 	if(lpTargetObj->Type == OBJ_USER)

  00110	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00115	0f 85 a0 00 00
	00		 jne	 $LN8@MLS_Healin

; 1670 : 	{
; 1671 : 		GCReFillSend(lpTargetObj->m_Index,(int)lpTargetObj->Life,0xFF,0,lpTargetObj->iShield);

  0011b	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  00121	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00127	52		 push	 edx
  00128	6a 00		 push	 0
  0012a	68 ff 00 00 00	 push	 255			; 000000ffH
  0012f	e8 00 00 00 00	 call	 __ftol2_sse
  00134	50		 push	 eax
  00135	8b 06		 mov	 eax, DWORD PTR [esi]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0013d	83 c4 14	 add	 esp, 20			; 00000014H
  00140	8d 9f ac 08 00
	00		 lea	 ebx, DWORD PTR [edi+2220]
  00146	c7 45 0c 4b 00
	00 00		 mov	 DWORD PTR tv155[ebp], 75 ; 0000004bH
  0014d	8d 49 00	 npad	 3
$LL7@MLS_Healin:

; 1674 : 		{
; 1675 : 			if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00150	80 7b 04 02	 cmp	 BYTE PTR [ebx+4], 2
  00154	75 58		 jne	 SHORT $LN6@MLS_Healin
  00156	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  00159	74 53		 je	 SHORT $LN6@MLS_Healin

; 1676 : 			{
; 1677 : 				LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0015b	0f bf 73 02	 movsx	 esi, WORD PTR [ebx+2]
  0015f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00165	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1678 : 				if(lpMonster->m_iCurrentAI != 0)

  0016b	83 be 78 1c 00
	00 00		 cmp	 DWORD PTR [esi+7288], 0
  00172	74 37		 je	 SHORT $LN26@MLS_Healin

; 1679 : 				{
; 1680 : 					lpMonster->m_Agro.IncAgro(lpObj->m_Index,(lpObj->Energy / 5)/40);

  00174	0f b7 8f fa 00
	00 00		 movzx	 ecx, WORD PTR [edi+250]
  0017b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00180	f7 e9		 imul	 ecx
  00182	d1 fa		 sar	 edx, 1
  00184	8b ca		 mov	 ecx, edx
  00186	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00189	03 ca		 add	 ecx, edx
  0018b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00190	f7 e9		 imul	 ecx
  00192	c1 fa 04	 sar	 edx, 4
  00195	8b ca		 mov	 ecx, edx
  00197	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0019a	03 ca		 add	 ecx, edx
  0019c	8b 17		 mov	 edx, DWORD PTR [edi]
  0019e	51		 push	 ecx
  0019f	52		 push	 edx
  001a0	8d 8e 94 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7316]
  001a6	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN26@MLS_Healin:
  001ab	8b 75 fc	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
$LN6@MLS_Healin:

; 1672 : 
; 1673 : 		for(int n = 0; n < MAX_VIEWPORT; n++)

  001ae	83 c3 0c	 add	 ebx, 12			; 0000000cH
  001b1	ff 4d 0c	 dec	 DWORD PTR tv155[ebp]
  001b4	75 9a		 jne	 SHORT $LL7@MLS_Healin

; 1681 : 				}
; 1682 : 			}
; 1683 : 		}
; 1684 : 	}
; 1685 : 	else if(lpTargetObj->m_RecallMon >= 0)

  001b6	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  001b9	eb 30		 jmp	 SHORT $LN1@MLS_Healin
$LN8@MLS_Healin:
  001bb	83 be 50 04 00
	00 00		 cmp	 DWORD PTR [esi+1104], 0
  001c2	7c 27		 jl	 SHORT $LN1@MLS_Healin

; 1686 : 	{
; 1687 : 		GCRecallMonLife(lpTargetObj->m_RecallMon,(int)lpTargetObj->MaxLife,(int)lpTargetObj->Life);

  001c4	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  001ca	e8 00 00 00 00	 call	 __ftol2_sse
  001cf	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 __ftol2_sse
  001db	50		 push	 eax
  001dc	8b 86 50 04 00
	00		 mov	 eax, DWORD PTR [esi+1104]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ?GCRecallMonLife@@YAXHHH@Z ; GCRecallMonLife
  001e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@MLS_Healin:

; 1688 : 	}
; 1689 : 
; 1690 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  001eb	8b 06		 mov	 eax, DWORD PTR [esi]
  001ed	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  001f1	6a 01		 push	 1
  001f3	50		 push	 eax
  001f4	51		 push	 ecx
  001f5	57		 push	 edi
  001f6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001fb	83 c4 10	 add	 esp, 16			; 00000010H
  001fe	5b		 pop	 ebx
$LN27@MLS_Healin:
  001ff	5f		 pop	 edi
$LN15@MLS_Healin:
  00200	5e		 pop	 esi

; 1691 : }

  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 0c 00	 ret	 12			; 0000000cH
?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_Healing
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
; Function compile flags: /Ogtp
;	COMDAT ?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$ = -68					; size = 4
tv524 = -64						; size = 4
_lpMagic$GSCopy$ = -60					; size = 4
tv516 = -56						; size = 4
tv514 = -56						; size = 4
tv509 = -56						; size = 4
tv409 = -56						; size = 4
_this$GSCopy$ = -56					; size = 4
_n$217016 = -52						; size = 4
_fSkillValue$ = -52					; size = 4
_viewplayer$ = -52					; size = 4
_iaddLifepower$ = -48					; size = 4
_viewpercent$ = -48					; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife, COMDAT
; _this$ = ecx

; 2017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2026 : 		return;
; 2027 : 
; 2028 : 	int number;
; 2029 : 	int partynum = 0;
; 2030 : 	int totallevel = 0;
; 2031 : 	int partycount;
; 2032 : 	int dis;
; 2033 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2034 : 	int viewplayer = 0;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00017	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0001c	89 4d c8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001f	89 45 c4	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], eax
  00022	74 0d		 je	 SHORT $LN33@MLS_Knight@2

; 2018 : 	int skillSuccess = TRUE;
; 2019 : 
; 2020 : 	if( lpObj->Type != OBJ_USER &&
; 2021 : 		lpObj->m_RecallMon == -1 )

  00024	83 be 50 04 00
	00 ff		 cmp	 DWORD PTR [esi+1104], -1
  0002b	0f 84 6e 02 00
	00		 je	 $LN2@MLS_Knight@2
$LN33@MLS_Knight@2:

; 2022 : 		return;
; 2023 : 
; 2024 : 	if( lpObj->Class != CLASS_KNIGHT &&
; 2025 : 		lpObj->Class != CLASS_MAGUMSA )

  00031	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	74 09		 je	 SHORT $LN36@MLS_Knight@2
  0003d	83 f8 03	 cmp	 eax, 3
  00040	0f 85 59 02 00
	00		 jne	 $LN2@MLS_Knight@2
$LN36@MLS_Knight@2:

; 2035 : 	int viewpercent = 0;
; 2036 : 	LPOBJ lpPartyObj;
; 2037 : 
; 2038 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  00046	83 c8 ff	 or	 eax, -1
  00049	53		 push	 ebx
  0004a	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  0004d	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  00050	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  00053	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  00056	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  00059	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  0005c	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  0005f	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  00062	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  00065	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax

; 2039 : 
; 2040 : 	partynum = lpObj->PartyNumber;

  00068	8b 86 2c 04 00
	00		 mov	 eax, DWORD PTR [esi+1068]
  0006e	57		 push	 edi
  0006f	33 ff		 xor	 edi, edi
  00071	89 7d cc	 mov	 DWORD PTR _viewplayer$[ebp], edi
  00074	89 7d d0	 mov	 DWORD PTR _viewpercent$[ebp], edi
  00077	89 45 bc	 mov	 DWORD PTR _partynum$[ebp], eax

; 2041 : 
; 2042 : 	if( partynum != -1 )

  0007a	83 f8 ff	 cmp	 eax, -1
  0007d	0f 84 86 00 00
	00		 je	 $LN37@MLS_Knight@2

; 2043 : 	{
; 2044 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2045 : 
; 2046 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00083	6b c0 68	 imul	 eax, 104		; 00000068H
  00086	05 0c 00 00 00	 add	 eax, OFFSET ?gParty@@3VPartyClass@@A+12
  0008b	89 45 c0	 mov	 DWORD PTR tv524[ebp], eax
  0008e	8b ff		 npad	 2
$LL21@MLS_Knight@2:

; 2047 : 		{
; 2048 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2049 : 
; 2050 : 			if( number >= 0 )

  00092	85 db		 test	 ebx, ebx
  00094	78 35		 js	 SHORT $LN20@MLS_Knight@2

; 2051 : 			{
; 2052 : 				lpPartyObj = &gObj[number];
; 2053 : 
; 2054 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  00096	8a 96 49 01 00
	00		 mov	 dl, BYTE PTR [esi+329]
  0009c	8b cb		 mov	 ecx, ebx
  0009e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000a4	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000aa	3a 91 49 01 00
	00		 cmp	 dl, BYTE PTR [ecx+329]
  000b0	75 19		 jne	 SHORT $LN20@MLS_Knight@2

; 2055 : 				{
; 2056 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000b2	51		 push	 ecx
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b9	83 c4 08	 add	 esp, 8

; 2057 : 
; 2058 : 					if( dis < 10 )

  000bc	83 f8 0a	 cmp	 eax, 10			; 0000000aH

; 2059 : 					{
; 2060 : 						ApplyPartyIndex[n] = number;
; 2061 : 						viewplayer++;

  000bf	8b 45 c0	 mov	 eax, DWORD PTR tv524[ebp]
  000c2	7d 07		 jge	 SHORT $LN20@MLS_Knight@2
  000c4	ff 45 cc	 inc	 DWORD PTR _viewplayer$[ebp]
  000c7	89 5c bd d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+edi*4], ebx
$LN20@MLS_Knight@2:

; 2043 : 	{
; 2044 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2045 : 
; 2046 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000cb	47		 inc	 edi
  000cc	83 c0 04	 add	 eax, 4
  000cf	89 45 c0	 mov	 DWORD PTR tv524[ebp], eax
  000d2	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  000d5	7c b9		 jl	 SHORT $LL21@MLS_Knight@2

; 2062 : 					}
; 2063 : 				}
; 2064 : 			}
; 2065 : 		}
; 2066 : 	}
; 2067 : 
; 2068 : 	if( viewplayer > 1 )

  000d7	8b 45 cc	 mov	 eax, DWORD PTR _viewplayer$[ebp]
  000da	83 f8 01	 cmp	 eax, 1
  000dd	7e 2a		 jle	 SHORT $LN37@MLS_Knight@2

; 2069 : 	{
; 2070 : 		if( viewplayer == 2 )

  000df	83 f8 02	 cmp	 eax, 2
  000e2	75 09		 jne	 SHORT $LN14@MLS_Knight@2

; 2071 : 		{
; 2072 : 			viewpercent = 1;

  000e4	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 1
  000eb	eb 1c		 jmp	 SHORT $LN37@MLS_Knight@2
$LN14@MLS_Knight@2:

; 2073 : 		}
; 2074 : 		else if( viewplayer == 3 )

  000ed	83 f8 03	 cmp	 eax, 3
  000f0	75 09		 jne	 SHORT $LN12@MLS_Knight@2

; 2075 : 		{
; 2076 : 			viewpercent = 2;

  000f2	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 2
  000f9	eb 0e		 jmp	 SHORT $LN37@MLS_Knight@2
$LN12@MLS_Knight@2:

; 2077 : 		}
; 2078 : 		else if( viewplayer == 4 )

  000fb	33 c9		 xor	 ecx, ecx
  000fd	83 f8 04	 cmp	 eax, 4
  00100	0f 95 c1	 setne	 cl
  00103	83 c1 03	 add	 ecx, 3
  00106	89 4d d0	 mov	 DWORD PTR _viewpercent$[ebp], ecx
$LN37@MLS_Knight@2:

; 2079 : 		{
; 2080 : 			viewpercent = 3;
; 2081 : 		}
; 2082 : 		else
; 2083 : 		{
; 2084 : 			viewpercent = 4;
; 2085 : 		}
; 2086 : 	}
; 2087 : 
; 2088 : 	float iaddLifepower;
; 2089 : 	int iLifeTime;
; 2090 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00109	8b 45 c4	 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  0010c	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  00110	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00113	52		 push	 edx
  00114	50		 push	 eax
  00115	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0011a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0011f	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2091 : 	int iaddlife;
; 2092 : 	// ----
; 2093 : 	iaddLifepower = (g_SkillAdditionInfo.m_SwellLifeEffectStart + (lpObj->Vitality + lpObj->AddVitality) / g_SkillAdditionInfo.m_SwellLifeEffectDiv1 + (lpObj->Energy + lpObj->AddEnergy)/ g_SkillAdditionInfo.m_SwellLifeEffectDiv2 + viewpercent) + fSkillValue;

  00128	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  0012f	d9 5d cc	 fstp	 DWORD PTR _fSkillValue$[ebp]
  00132	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]

; 2094 : 	iaddLifepower += fSkillValue;

  00139	0f bf 86 24 01
	00 00		 movsx	 eax, WORD PTR [esi+292]
  00140	0f b7 3d 7a 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3194
  00147	03 ca		 add	 ecx, edx
  00149	0f b7 96 f8 00
	00 00		 movzx	 edx, WORD PTR [esi+248]
  00150	03 c2		 add	 eax, edx
  00152	99		 cdq
  00153	f7 ff		 idiv	 edi
  00155	0f b7 1d 7c 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3196
  0015c	8b f8		 mov	 edi, eax
  0015e	8b c1		 mov	 eax, ecx
  00160	99		 cdq
  00161	f7 fb		 idiv	 ebx
  00163	0f b7 15 78 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3192
  0016a	03 45 d0	 add	 eax, DWORD PTR _viewpercent$[ebp]
  0016d	03 c7		 add	 eax, edi
  0016f	03 d0		 add	 edx, eax

; 2095 : 	// ----
; 2096 : 	if( g_SkillAdditionInfo.m_SwellLifeEffectMax > 0 && iaddLifepower > g_SkillAdditionInfo.m_SwellLifeEffectMax )

  00171	a1 80 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200
  00176	89 55 c8	 mov	 DWORD PTR tv516[ebp], edx
  00179	db 45 c8	 fild	 DWORD PTR tv516[ebp]
  0017c	d9 45 cc	 fld	 DWORD PTR _fSkillValue$[ebp]
  0017f	d9 c0		 fld	 ST(0)
  00181	de c2		 faddp	 ST(2), ST(0)
  00183	d9 c9		 fxch	 ST(1)
  00185	d9 5d c8	 fstp	 DWORD PTR tv514[ebp]
  00188	d8 45 c8	 fadd	 DWORD PTR tv514[ebp]
  0018b	d9 5d d0	 fstp	 DWORD PTR _iaddLifepower$[ebp]
  0018e	85 c0		 test	 eax, eax
  00190	74 29		 je	 SHORT $LN32@MLS_Knight@2
  00192	89 45 c8	 mov	 DWORD PTR tv509[ebp], eax
  00195	db 45 c8	 fild	 DWORD PTR tv509[ebp]
  00198	79 06		 jns	 SHORT $LN45@MLS_Knight@2
  0019a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN45@MLS_Knight@2:
  001a0	d9 5d c8	 fstp	 DWORD PTR tv409[ebp]
  001a3	d9 45 d0	 fld	 DWORD PTR _iaddLifepower$[ebp]
  001a6	d9 45 c8	 fld	 DWORD PTR tv409[ebp]
  001a9	d8 d1		 fcom	 ST(1)
  001ab	df e0		 fnstsw	 ax
  001ad	dd d9		 fstp	 ST(1)
  001af	f6 c4 05	 test	 ah, 5
  001b2	7a 05		 jp	 SHORT $LN43@MLS_Knight@2

; 2097 : 	{
; 2098 : 		iaddLifepower = g_SkillAdditionInfo.m_SwellLifeEffectMax;

  001b4	d9 5d d0	 fstp	 DWORD PTR _iaddLifepower$[ebp]
  001b7	eb 02		 jmp	 SHORT $LN32@MLS_Knight@2
$LN43@MLS_Knight@2:
  001b9	dd d8		 fstp	 ST(0)
$LN32@MLS_Knight@2:

; 2099 : 	}
; 2100 : 	// ----
; 2101 : 	iLifeTime = g_SkillAdditionInfo.m_SwellLifeTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SwellLifeTimeDiv;

  001bb	0f b7 3d 86 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3206
  001c2	8b c1		 mov	 eax, ecx
  001c4	99		 cdq
  001c5	f7 ff		 idiv	 edi
  001c7	8b d8		 mov	 ebx, eax
  001c9	0f b7 05 84 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3204
  001d0	03 d8		 add	 ebx, eax

; 2102 : 	// ----
; 2103 : 	if( g_SkillAdditionInfo.m_SwellLifeTimeMax > 0 && iLifeTime > g_SkillAdditionInfo.m_SwellLifeTimeMax )

  001d2	a1 88 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208
  001d7	85 c0		 test	 eax, eax
  001d9	74 06		 je	 SHORT $LN7@MLS_Knight@2
  001db	3b d8		 cmp	 ebx, eax
  001dd	76 02		 jbe	 SHORT $LN7@MLS_Knight@2

; 2104 : 	{
; 2105 : 		iLifeTime = g_SkillAdditionInfo.m_SwellLifeTimeMax;

  001df	8b d8		 mov	 ebx, eax
$LN7@MLS_Knight@2:

; 2106 : 	}
; 2107 : 	// ----
; 2108 : 	if( partynum == -1 )

  001e1	83 7d bc ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  001e5	75 4d		 jne	 SHORT $LN6@MLS_Knight@2

; 2109 : 	{
; 2110 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;
; 2111 : 		gObjApplyBuffEffectDuration(lpObj,8,ADD_OPTION_LIFE,iaddlife,0,0,iLifeTime);

  001e7	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  001ed	53		 push	 ebx
  001ee	d8 4d d0	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  001f1	6a 00		 push	 0
  001f3	6a 00		 push	 0
  001f5	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  001fb	e8 00 00 00 00	 call	 __ftol2_sse
  00200	50		 push	 eax
  00201	6a 04		 push	 4
  00203	6a 08		 push	 8
  00205	56		 push	 esi
  00206	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2112 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  0020b	8b 55 c4	 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  0020e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00210	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00214	6a 01		 push	 1
  00216	51		 push	 ecx
  00217	50		 push	 eax
  00218	56		 push	 esi
  00219	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0021e	83 c4 2c	 add	 esp, 44			; 0000002cH
  00221	5f		 pop	 edi
  00222	5b		 pop	 ebx
  00223	5e		 pop	 esi

; 2124 : 			}
; 2125 : 		}
; 2126 : 	}
; 2127 : }

  00224	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00227	33 cd		 xor	 ecx, ebp
  00229	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 08 00	 ret	 8
$LN6@MLS_Knight@2:

; 2113 : 	}
; 2114 : 	else
; 2115 : 	{
; 2116 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  00234	33 c9		 xor	 ecx, ecx
  00236	89 4d cc	 mov	 DWORD PTR _n$217016[ebp], ecx
  00239	8d a4 24 00 00
	00 00		 npad	 7
$LL39@MLS_Knight@2:

; 2117 : 		{
; 2118 : 			if( ApplyPartyIndex[n] != -1 )

  00240	8b 44 8d d4	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ecx*4]
  00244	83 f8 ff	 cmp	 eax, -1
  00247	74 4b		 je	 SHORT $LN3@MLS_Knight@2

; 2119 : 			{
; 2120 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  00249	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0024f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2121 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;
; 2122 : 				gObjApplyBuffEffectDuration(lpPartyObj,8,ADD_OPTION_LIFE,iaddlife,0,0,iLifeTime);

  00255	53		 push	 ebx
  00256	8b f8		 mov	 edi, eax
  00258	6a 00		 push	 0
  0025a	6a 00		 push	 0
  0025c	d9 87 00 01 00
	00		 fld	 DWORD PTR [edi+256]
  00262	d8 4d d0	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  00265	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0026b	e8 00 00 00 00	 call	 __ftol2_sse
  00270	50		 push	 eax
  00271	6a 04		 push	 4
  00273	6a 08		 push	 8
  00275	57		 push	 edi
  00276	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2123 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);

  0027b	8b 55 c4	 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  0027e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00280	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00284	6a 01		 push	 1
  00286	51		 push	 ecx
  00287	50		 push	 eax
  00288	56		 push	 esi
  00289	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0028e	8b 4d cc	 mov	 ecx, DWORD PTR _n$217016[ebp]
  00291	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN3@MLS_Knight@2:

; 2113 : 	}
; 2114 : 	else
; 2115 : 	{
; 2116 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  00294	41		 inc	 ecx
  00295	89 4d cc	 mov	 DWORD PTR _n$217016[ebp], ecx
  00298	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0029b	7c a3		 jl	 SHORT $LL39@MLS_Knight@2
  0029d	5f		 pop	 edi
  0029e	5b		 pop	 ebx
$LN2@MLS_Knight@2:

; 2124 : 			}
; 2125 : 		}
; 2126 : 	}
; 2127 : }

  0029f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a2	33 cd		 xor	 ecx, ebp
  002a4	5e		 pop	 esi
  002a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	c2 08 00	 ret	 8
?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$ = -68					; size = 4
_lpMagic$GSCopy$ = -64					; size = 4
_viewpercent$ = -60					; size = 4
_this$GSCopy$ = -56					; size = 4
_n$217070 = -56						; size = 4
tv653 = -52						; size = 4
_iaddLifepower$ = -52					; size = 4
_fSkillValue$217060 = -52				; size = 4
tv586 = -48						; size = 4
tv584 = -48						; size = 4
tv572 = -48						; size = 4
tv570 = -48						; size = 4
tv478 = -48						; size = 4
tv437 = -48						; size = 4
_iaddManapower$ = -48					; size = 4
_viewplayer$ = -48					; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife, COMDAT
; _this$ = ecx

; 2130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2209 : 
; 2210 : 	if( iPreSkill > 0 )

  00010	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00017	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0001c	89 4d c8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001f	89 45 c0	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], eax
  00022	74 0d		 je	 SHORT $LN39@MLS_SkillF@4

; 2131 : 	int skillSuccess = TRUE;
; 2132 : 
; 2133 : 	if( lpObj->Type != OBJ_USER &&
; 2134 : 		lpObj->m_RecallMon == -1 )

  00024	83 bf 50 04 00
	00 ff		 cmp	 DWORD PTR [edi+1104], -1
  0002b	0f 84 38 03 00
	00		 je	 $LN2@MLS_SkillF@4
$LN39@MLS_SkillF@4:

; 2135 : 		return;
; 2136 : 
; 2137 : 	if( lpObj->Class != CLASS_KNIGHT &&
; 2138 : 		lpObj->Class != CLASS_MAGUMSA )

  00031	0f b7 87 b8 00
	00 00		 movzx	 eax, WORD PTR [edi+184]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	74 09		 je	 SHORT $LN40@MLS_SkillF@4
  0003d	83 f8 03	 cmp	 eax, 3
  00040	0f 85 23 03 00
	00		 jne	 $LN2@MLS_SkillF@4
$LN40@MLS_SkillF@4:

; 2139 : 		return;
; 2140 : 
; 2141 : 	int number;
; 2142 : 	int partynum = 0;
; 2143 : 	int totallevel = 0;
; 2144 : 	int partycount;
; 2145 : 	int dis;
; 2146 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2147 : 	int viewplayer = 0;
; 2148 : 	int viewpercent = 0;
; 2149 : 	LPOBJ lpPartyObj;
; 2150 : 
; 2151 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  00046	83 c8 ff	 or	 eax, -1
  00049	53		 push	 ebx
  0004a	33 db		 xor	 ebx, ebx
  0004c	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  0004f	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  00052	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  00055	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  00058	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  0005b	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  0005e	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  00061	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  00064	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  00067	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax

; 2152 : 
; 2153 : 	partynum = lpObj->PartyNumber;

  0006a	8b 87 2c 04 00
	00		 mov	 eax, DWORD PTR [edi+1068]
  00070	56		 push	 esi
  00071	89 5d d0	 mov	 DWORD PTR _viewplayer$[ebp], ebx
  00074	89 5d c4	 mov	 DWORD PTR _viewpercent$[ebp], ebx
  00077	89 45 bc	 mov	 DWORD PTR _partynum$[ebp], eax

; 2154 : 
; 2155 : 	if( partynum != -1 )

  0007a	83 f8 ff	 cmp	 eax, -1
  0007d	0f 84 86 00 00
	00		 je	 $LN36@MLS_SkillF@4

; 2156 : 	{
; 2157 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2158 : 
; 2159 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00083	6b c0 68	 imul	 eax, 104		; 00000068H
  00086	05 0c 00 00 00	 add	 eax, OFFSET ?gParty@@3VPartyClass@@A+12
  0008b	89 45 cc	 mov	 DWORD PTR tv653[ebp], eax
  0008e	8b ff		 npad	 2
$LL45@MLS_SkillF@4:

; 2160 : 		{
; 2161 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 30		 mov	 esi, DWORD PTR [eax]

; 2162 : 
; 2163 : 			if( number >= 0 )

  00092	85 f6		 test	 esi, esi
  00094	78 35		 js	 SHORT $LN24@MLS_SkillF@4

; 2164 : 			{
; 2165 : 				lpPartyObj = &gObj[number];
; 2166 : 
; 2167 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  00096	8a 97 49 01 00
	00		 mov	 dl, BYTE PTR [edi+329]
  0009c	8b ce		 mov	 ecx, esi
  0009e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000a4	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000aa	3a 91 49 01 00
	00		 cmp	 dl, BYTE PTR [ecx+329]
  000b0	75 19		 jne	 SHORT $LN24@MLS_SkillF@4

; 2168 : 				{
; 2169 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000b2	51		 push	 ecx
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b9	83 c4 08	 add	 esp, 8

; 2170 : 
; 2171 : 					if( dis < 10 )

  000bc	83 f8 0a	 cmp	 eax, 10			; 0000000aH

; 2172 : 					{
; 2173 : 						ApplyPartyIndex[n] = number;
; 2174 : 						viewplayer++;

  000bf	8b 45 cc	 mov	 eax, DWORD PTR tv653[ebp]
  000c2	7d 07		 jge	 SHORT $LN24@MLS_SkillF@4
  000c4	ff 45 d0	 inc	 DWORD PTR _viewplayer$[ebp]
  000c7	89 74 9d d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+ebx*4], esi
$LN24@MLS_SkillF@4:

; 2156 : 	{
; 2157 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2158 : 
; 2159 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000cb	43		 inc	 ebx
  000cc	83 c0 04	 add	 eax, 4
  000cf	89 45 cc	 mov	 DWORD PTR tv653[ebp], eax
  000d2	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000d5	7c b9		 jl	 SHORT $LL45@MLS_SkillF@4

; 2175 : 					}
; 2176 : 				}
; 2177 : 			}
; 2178 : 		}
; 2179 : 	}
; 2180 : 
; 2181 : 	if( viewplayer > 1 )

  000d7	8b 45 d0	 mov	 eax, DWORD PTR _viewplayer$[ebp]
  000da	83 f8 01	 cmp	 eax, 1
  000dd	7e 2a		 jle	 SHORT $LN36@MLS_SkillF@4

; 2182 : 	{
; 2183 : 		if( viewplayer == 2 )

  000df	83 f8 02	 cmp	 eax, 2
  000e2	75 09		 jne	 SHORT $LN18@MLS_SkillF@4

; 2184 : 		{
; 2185 : 			viewpercent = 1;

  000e4	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 1
  000eb	eb 1c		 jmp	 SHORT $LN36@MLS_SkillF@4
$LN18@MLS_SkillF@4:

; 2186 : 		}
; 2187 : 		else if( viewplayer == 3 )

  000ed	83 f8 03	 cmp	 eax, 3
  000f0	75 09		 jne	 SHORT $LN16@MLS_SkillF@4

; 2188 : 		{
; 2189 : 			viewpercent = 2;

  000f2	c7 45 c4 02 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 2
  000f9	eb 0e		 jmp	 SHORT $LN36@MLS_SkillF@4
$LN16@MLS_SkillF@4:

; 2190 : 		}
; 2191 : 		else if( viewplayer == 4 )

  000fb	33 c9		 xor	 ecx, ecx
  000fd	83 f8 04	 cmp	 eax, 4
  00100	0f 95 c1	 setne	 cl
  00103	83 c1 03	 add	 ecx, 3
  00106	89 4d c4	 mov	 DWORD PTR _viewpercent$[ebp], ecx
$LN36@MLS_SkillF@4:

; 2192 : 		{
; 2193 : 			viewpercent = 3;
; 2194 : 		}
; 2195 : 		else
; 2196 : 		{
; 2197 : 			viewpercent = 4;
; 2198 : 		}
; 2199 : 	}
; 2200 : 	float iaddLifepower;
; 2201 : 	int iLifeTime		= g_SkillAdditionInfo.m_SwellLifeTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SwellLifeTimeDiv;

  00109	0f bf 97 26 01
	00 00		 movsx	 edx, WORD PTR [edi+294]
  00110	0f b7 87 fa 00
	00 00		 movzx	 eax, WORD PTR [edi+250]
  00117	0f b7 0d 86 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3206
  0011e	03 c2		 add	 eax, edx
  00120	89 45 d0	 mov	 DWORD PTR tv437[ebp], eax
  00123	99		 cdq
  00124	f7 f9		 idiv	 ecx
  00126	0f b7 1d 84 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3204
  0012d	03 d8		 add	 ebx, eax

; 2202 : 	
; 2203 : 	if( g_SkillAdditionInfo.m_SwellLifeTimeMax > 0 && iLifeTime > g_SkillAdditionInfo.m_SwellLifeTimeMax )

  0012f	a1 88 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3208
  00134	85 c0		 test	 eax, eax
  00136	74 06		 je	 SHORT $LN12@MLS_SkillF@4
  00138	3b d8		 cmp	 ebx, eax
  0013a	76 02		 jbe	 SHORT $LN12@MLS_SkillF@4

; 2204 : 	{
; 2205 : 		iLifeTime = g_SkillAdditionInfo.m_SwellLifeTimeMax;

  0013c	8b d8		 mov	 ebx, eax
$LN12@MLS_SkillF@4:

; 2206 : 	}
; 2207 : 
; 2208 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  0013e	8b 45 c0	 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  00141	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00144	0f b7 97 b8 00
	00 00		 movzx	 edx, WORD PTR [edi+184]
  0014b	51		 push	 ecx
  0014c	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0014f	52		 push	 edx
  00150	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  00155	8b f0		 mov	 esi, eax

; 2209 : 
; 2210 : 	if( iPreSkill > 0 )

  00157	85 f6		 test	 esi, esi
  00159	0f 8e 85 00 00
	00		 jle	 $LN11@MLS_SkillF@4

; 2211 : 	{
; 2212 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  0015f	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00162	56		 push	 esi
  00163	57		 push	 edi
  00164	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel

; 2213 : 
; 2214 : 		if( iPreLevel > 0 )

  00169	85 c0		 test	 eax, eax
  0016b	0f 8e b3 00 00
	00		 jle	 $LN37@MLS_SkillF@4

; 2215 : 		{
; 2216 : 			float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  00171	50		 push	 eax
  00172	56		 push	 esi
  00173	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00178	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0017d	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00186	d9 5d cc	 fstp	 DWORD PTR _fSkillValue$217060[ebp]

; 2217 : 			iaddLifepower = (g_SkillAdditionInfo.m_SwellLifeEffectStart + (lpObj->Vitality + lpObj->AddVitality) / g_SkillAdditionInfo.m_SwellLifeEffectDiv1 + (lpObj->Energy + lpObj->AddEnergy)/ g_SkillAdditionInfo.m_SwellLifeEffectDiv2 + viewpercent) + fSkillValue;
; 2218 : 			iaddLifepower += fSkillValue;

  00189	0f b7 8f f8 00
	00 00		 movzx	 ecx, WORD PTR [edi+248]
  00190	0f bf 87 24 01
	00 00		 movsx	 eax, WORD PTR [edi+292]
  00197	03 c1		 add	 eax, ecx
  00199	0f b7 0d 7a 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3194
  001a0	99		 cdq
  001a1	f7 f9		 idiv	 ecx
  001a3	0f b7 97 fa 00
	00 00		 movzx	 edx, WORD PTR [edi+250]
  001aa	0f b7 35 7c 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3196
  001b1	8b c8		 mov	 ecx, eax
  001b3	0f bf 87 26 01
	00 00		 movsx	 eax, WORD PTR [edi+294]
  001ba	03 c2		 add	 eax, edx
  001bc	99		 cdq
  001bd	f7 fe		 idiv	 esi
  001bf	0f b7 15 78 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3192
  001c6	03 45 c4	 add	 eax, DWORD PTR _viewpercent$[ebp]
  001c9	03 c1		 add	 eax, ecx
  001cb	03 d0		 add	 edx, eax
  001cd	89 55 d0	 mov	 DWORD PTR tv586[ebp], edx
  001d0	db 45 d0	 fild	 DWORD PTR tv586[ebp]
  001d3	d9 45 cc	 fld	 DWORD PTR _fSkillValue$217060[ebp]
  001d6	d9 c0		 fld	 ST(0)
  001d8	de c2		 faddp	 ST(2), ST(0)
  001da	d9 c9		 fxch	 ST(1)
  001dc	d9 5d d0	 fstp	 DWORD PTR tv584[ebp]
  001df	d8 45 d0	 fadd	 DWORD PTR tv584[ebp]

; 2219 : 		}
; 2220 : 	}
; 2221 : 	else

  001e2	eb 3d		 jmp	 SHORT $LN59@MLS_SkillF@4
$LN11@MLS_SkillF@4:

; 2222 : 	{
; 2223 : 		iaddLifepower = g_SkillAdditionInfo.m_SwellLifeEffectStart + (lpObj->Vitality + lpObj->AddVitality) / g_SkillAdditionInfo.m_SwellLifeEffectDiv1 + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SwellLifeEffectDiv2 + viewpercent;

  001e4	0f b7 8f f8 00
	00 00		 movzx	 ecx, WORD PTR [edi+248]
  001eb	0f bf 87 24 01
	00 00		 movsx	 eax, WORD PTR [edi+292]
  001f2	03 c1		 add	 eax, ecx
  001f4	0f b7 0d 7a 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3194
  001fb	99		 cdq
  001fc	f7 f9		 idiv	 ecx
  001fe	0f b7 35 7c 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3196
  00205	8b c8		 mov	 ecx, eax
  00207	8b 45 d0	 mov	 eax, DWORD PTR tv437[ebp]
  0020a	99		 cdq
  0020b	f7 fe		 idiv	 esi
  0020d	0f b7 15 78 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3192
  00214	03 45 c4	 add	 eax, DWORD PTR _viewpercent$[ebp]
  00217	03 c1		 add	 eax, ecx
  00219	03 d0		 add	 edx, eax
  0021b	89 55 d0	 mov	 DWORD PTR tv572[ebp], edx
  0021e	db 45 d0	 fild	 DWORD PTR tv572[ebp]
$LN59@MLS_SkillF@4:
  00221	d9 5d cc	 fstp	 DWORD PTR _iaddLifepower$[ebp]
$LN37@MLS_SkillF@4:

; 2224 : 	}
; 2225 : 
; 2226 : 	if( g_SkillAdditionInfo.m_SwellLifeEffectMax > 0 && iaddLifepower > g_SkillAdditionInfo.m_SwellLifeEffectMax )

  00224	a1 80 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3200
  00229	85 c0		 test	 eax, eax
  0022b	74 29		 je	 SHORT $LN38@MLS_SkillF@4
  0022d	89 45 d0	 mov	 DWORD PTR tv570[ebp], eax
  00230	db 45 d0	 fild	 DWORD PTR tv570[ebp]
  00233	79 06		 jns	 SHORT $LN58@MLS_SkillF@4
  00235	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN58@MLS_SkillF@4:
  0023b	d9 5d d0	 fstp	 DWORD PTR tv478[ebp]
  0023e	d9 45 cc	 fld	 DWORD PTR _iaddLifepower$[ebp]
  00241	d9 45 d0	 fld	 DWORD PTR tv478[ebp]
  00244	d8 d1		 fcom	 ST(1)
  00246	df e0		 fnstsw	 ax
  00248	dd d9		 fstp	 ST(1)
  0024a	f6 c4 05	 test	 ah, 5
  0024d	7a 05		 jp	 SHORT $LN50@MLS_SkillF@4

; 2227 : 	{
; 2228 : 		iaddLifepower = g_SkillAdditionInfo.m_SwellLifeEffectMax;

  0024f	d9 5d cc	 fstp	 DWORD PTR _iaddLifepower$[ebp]
  00252	eb 02		 jmp	 SHORT $LN38@MLS_SkillF@4
$LN50@MLS_SkillF@4:
  00254	dd d8		 fstp	 ST(0)
$LN38@MLS_SkillF@4:

; 2229 : 	}
; 2230 : 
; 2231 : 	float iaddManapower;
; 2232 : 	
; 2233 : 	if( lpMagic->m_Skill == 360 )

  00256	8b 75 c0	 mov	 esi, DWORD PTR _lpMagic$GSCopy$[ebp]
  00259	81 7e 08 68 01
	00 00		 cmp	 DWORD PTR [esi+8], 360	; 00000168H
  00260	75 23		 jne	 SHORT $LN7@MLS_SkillF@4

; 2234 : 	{
; 2235 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);
; 2236 : 		iaddManapower = fSkillValue+viewpercent;

  00262	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00266	50		 push	 eax
  00267	68 68 01 00 00	 push	 360			; 00000168H
  0026c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00271	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00276	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0027f	da 45 c4	 fiadd	 DWORD PTR _viewpercent$[ebp]
  00282	d9 5d d0	 fstp	 DWORD PTR _iaddManapower$[ebp]
$LN7@MLS_SkillF@4:

; 2237 : 	}
; 2238 : 
; 2239 : 	int iaddlife;
; 2240 : 	int iaddMana;
; 2241 : 
; 2242 : 	if( partynum == -1 )

  00285	83 7d bc ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  00289	75 60		 jne	 SHORT $LN6@MLS_SkillF@4

; 2243 : 	{
; 2244 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;
; 2245 : 		iaddMana = lpObj->MaxMana*iaddManapower/100;
; 2246 : 
; 2247 : 		gObjApplyBuffEffectDuration(lpObj,135,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  0028b	d9 87 14 01 00
	00		 fld	 DWORD PTR [edi+276]
  00291	53		 push	 ebx
  00292	d8 4d d0	 fmul	 DWORD PTR _iaddManapower$[ebp]
  00295	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  0029b	dc f9		 fdiv	 ST(1), ST(0)
  0029d	d9 c9		 fxch	 ST(1)
  0029f	e8 00 00 00 00	 call	 __ftol2_sse
  002a4	d9 87 00 01 00
	00		 fld	 DWORD PTR [edi+256]
  002aa	d8 4d cc	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  002ad	50		 push	 eax
  002ae	6a 05		 push	 5
  002b0	de f1		 fdivrp	 ST(1), ST(0)
  002b2	e8 00 00 00 00	 call	 __ftol2_sse
  002b7	50		 push	 eax
  002b8	6a 04		 push	 4
  002ba	68 87 00 00 00	 push	 135			; 00000087H
  002bf	57		 push	 edi
  002c0	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2248 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  002c5	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002c7	0f b7 56 08	 movzx	 edx, WORD PTR [esi+8]
  002cb	6a 01		 push	 1
  002cd	51		 push	 ecx
  002ce	52		 push	 edx
  002cf	57		 push	 edi
  002d0	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  002d5	83 c4 2c	 add	 esp, 44			; 0000002cH
  002d8	5e		 pop	 esi
  002d9	5b		 pop	 ebx
  002da	5f		 pop	 edi

; 2262 : 			}
; 2263 : 		}
; 2264 : 	}
; 2265 : }

  002db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002de	33 cd		 xor	 ecx, ebp
  002e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e5	8b e5		 mov	 esp, ebp
  002e7	5d		 pop	 ebp
  002e8	c2 08 00	 ret	 8
$LN6@MLS_SkillF@4:

; 2249 : 	}
; 2250 : 	else
; 2251 : 	{
; 2252 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  002eb	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  002f1	33 c0		 xor	 eax, eax
  002f3	89 45 c8	 mov	 DWORD PTR _n$217070[ebp], eax
$LN46@MLS_SkillF@4:

; 2253 : 		{
; 2254 : 			if( ApplyPartyIndex[n] != -1 )

  002f6	8b 74 85 d4	 mov	 esi, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  002fa	83 fe ff	 cmp	 esi, -1
  002fd	74 5d		 je	 SHORT $LN3@MLS_SkillF@4

; 2255 : 			{
; 2256 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  002ff	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00305	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2257 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;
; 2258 : 				iaddMana = lpPartyObj->MaxMana*iaddManapower/100;
; 2259 : 
; 2260 : 				gObjApplyBuffEffectDuration(lpPartyObj,135,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  0030b	53		 push	 ebx
  0030c	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  00312	d8 4d d0	 fmul	 DWORD PTR _iaddManapower$[ebp]
  00315	d8 f1		 fdiv	 ST(0), ST(1)
  00317	e8 00 00 00 00	 call	 __ftol2_sse
  0031c	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00322	d8 4d cc	 fmul	 DWORD PTR _iaddLifepower$[ebp]
  00325	50		 push	 eax
  00326	6a 05		 push	 5
  00328	de f1		 fdivrp	 ST(1), ST(0)
  0032a	e8 00 00 00 00	 call	 __ftol2_sse
  0032f	50		 push	 eax
  00330	6a 04		 push	 4
  00332	68 87 00 00 00	 push	 135			; 00000087H
  00337	56		 push	 esi
  00338	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2261 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);

  0033d	8b 4d c0	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00340	8b 06		 mov	 eax, DWORD PTR [esi]
  00342	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00346	6a 01		 push	 1
  00348	50		 push	 eax
  00349	52		 push	 edx
  0034a	57		 push	 edi
  0034b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00350	8b 45 c8	 mov	 eax, DWORD PTR _n$217070[ebp]
  00353	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  00359	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN3@MLS_SkillF@4:

; 2249 : 	}
; 2250 : 	else
; 2251 : 	{
; 2252 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  0035c	40		 inc	 eax
  0035d	89 45 c8	 mov	 DWORD PTR _n$217070[ebp], eax
  00360	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00363	7c 91		 jl	 SHORT $LN46@MLS_SkillF@4
  00365	5e		 pop	 esi
  00366	dd d8		 fstp	 ST(0)
  00368	5b		 pop	 ebx
$LN2@MLS_SkillF@4:

; 2262 : 			}
; 2263 : 		}
; 2264 : 	}
; 2265 : }

  00369	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036c	33 cd		 xor	 ecx, ebp
  0036e	5f		 pop	 edi
  0036f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00374	8b e5		 mov	 esp, ebp
  00376	5d		 pop	 ebp
  00377	c2 08 00	 ret	 8
?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
tv227 = 8						; size = 4
tv220 = 8						; size = 4
_lpObj$ = 8						; size = 4
_fSkillValue$ = 12					; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower, COMDAT
; _this$ = ecx

; 2410 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2411 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	74 08		 je	 SHORT $LN4@MLS_SkillS@11
$LN7@MLS_SkillS@11:
  00011	5f		 pop	 edi

; 2412 : 		return false;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 2433 : }

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
$LN4@MLS_SkillS@11:

; 2413 : 
; 2414 : 	if( lpObj->Class != CLASS_WIZARD )

  00019	66 83 be b8 00
	00 00 00	 cmp	 WORD PTR [esi+184], 0

; 2415 : 		return false;

  00021	75 ee		 jne	 SHORT $LN7@MLS_SkillS@11

; 2416 : 
; 2417 : 	if( gObjSearchActiveEffect(lpObj,138) == TRUE )

  00023	68 8a 00 00 00	 push	 138			; 0000008aH
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0002e	83 c4 08	 add	 esp, 8
  00031	3c 01		 cmp	 al, 1

; 2418 : 		return false;

  00033	74 dc		 je	 SHORT $LN7@MLS_SkillS@11

; 2419 : 
; 2420 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00035	53		 push	 ebx
  00036	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00039	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  0003d	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00040	50		 push	 eax
  00041	51		 push	 ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00047	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0004c	50		 push	 eax
  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2421 : 	int nEffectValue = (float)(lpObj->Energy / g_SkillAdditionInfo.m_WizardryEnchantDamageDiv) * (float)g_SkillAdditionInfo.m_WizardryEnchantDamageFact;

  00054	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  0005b	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue$[ebp]
  0005e	0f b7 0d 68 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3176
  00065	99		 cdq
  00066	f7 f9		 idiv	 ecx
  00068	89 45 08	 mov	 DWORD PTR tv227[ebp], eax
  0006b	db 45 08	 fild	 DWORD PTR tv227[ebp]
  0006e	d8 0d 6c 0c 00
	00		 fmul	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3180
  00074	e8 00 00 00 00	 call	 __ftol2_sse
  00079	8b f8		 mov	 edi, eax

; 2422 : 	
; 2423 : 	if( g_SkillAdditionInfo.m_WizardryEnchantDamageMax > 0 && nEffectValue > g_SkillAdditionInfo.m_WizardryEnchantDamageMax )

  0007b	a1 70 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184
  00080	85 c0		 test	 eax, eax
  00082	74 06		 je	 SHORT $LN1@MLS_SkillS@11
  00084	3b f8		 cmp	 edi, eax
  00086	76 02		 jbe	 SHORT $LN1@MLS_SkillS@11

; 2424 : 	{
; 2425 : 		nEffectValue = g_SkillAdditionInfo.m_WizardryEnchantDamageMax;

  00088	8b f8		 mov	 edi, eax
$LN1@MLS_SkillS@11:

; 2426 : 	}
; 2427 : 	
; 2428 : 	float fMagicDamage = (lpObj->m_MagicDamageMax/100.0f)*fSkillValue;
; 2429 : 
; 2430 : 	gObjApplyBuffEffectDuration(lpObj,138,ADD_OPTION_MAGICDAMAGEMIN,nEffectValue,ADD_OPTION_MAGICDAMAGEMAX,fMagicDamage,g_SkillAdditionInfo.m_WizardryEnchantTime);

  0008a	db 86 6c 04 00
	00		 fild	 DWORD PTR [esi+1132]
  00090	8b 15 74 0c 00
	00		 mov	 edx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3188
  00096	52		 push	 edx
  00097	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0009d	d8 4d 0c	 fmul	 DWORD PTR _fSkillValue$[ebp]
  000a0	d9 5d 08	 fstp	 DWORD PTR tv220[ebp]
  000a3	d9 45 08	 fld	 DWORD PTR tv220[ebp]
  000a6	e8 00 00 00 00	 call	 __ftol2_sse
  000ab	50		 push	 eax
  000ac	6a 22		 push	 34			; 00000022H
  000ae	57		 push	 edi
  000af	6a 21		 push	 33			; 00000021H
  000b1	68 8a 00 00 00	 push	 138			; 0000008aH
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2431 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000bc	8b 06		 mov	 eax, DWORD PTR [esi]
  000be	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  000c2	6a 01		 push	 1
  000c4	50		 push	 eax
  000c5	51		 push	 ecx
  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000cc	83 c4 2c	 add	 esp, 44			; 0000002cH
  000cf	5b		 pop	 ebx
  000d0	5f		 pop	 edi

; 2432 : 	return true;

  000d1	b8 01 00 00 00	 mov	 eax, 1
  000d6	5e		 pop	 esi

; 2433 : }

  000d7	5d		 pop	 ebp
  000d8	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
_TEXT	ENDS
PUBLIC	?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv232 = 8						; size = 4
_fMagicDamage$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_fSkillValue$ = 12					; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower, COMDAT
; _this$ = ecx

; 2436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 2437 : 	if( lpObj->Type != OBJ_USER )

  00006	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00009	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0000e	8b d9		 mov	 ebx, ecx
  00010	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx
  00013	74 0a		 je	 SHORT $LN4@MLS_SkillS@12
$LN7@MLS_SkillS@12:
  00015	5e		 pop	 esi

; 2438 : 		return false;

  00016	33 c0		 xor	 eax, eax
  00018	5b		 pop	 ebx

; 2462 : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@MLS_SkillS@12:

; 2439 : 
; 2440 : 	if( lpObj->Class != CLASS_WIZARD )

  0001f	66 83 be b8 00
	00 00 00	 cmp	 WORD PTR [esi+184], 0

; 2441 : 		return false;

  00027	75 ec		 jne	 SHORT $LN7@MLS_SkillS@12

; 2442 : 
; 2443 : 	if( gObjSearchActiveEffect(lpObj,139) == TRUE )

  00029	68 8b 00 00 00	 push	 139			; 0000008bH
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00034	83 c4 08	 add	 esp, 8
  00037	3c 01		 cmp	 al, 1

; 2444 : 		return false;

  00039	74 da		 je	 SHORT $LN7@MLS_SkillS@12

; 2445 : 
; 2446 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  0003b	57		 push	 edi
  0003c	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  0003f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00042	6a 01		 push	 1
  00044	50		 push	 eax
  00045	56		 push	 esi
  00046	8b cb		 mov	 ecx, ebx
  00048	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  0004d	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2447 : 
; 2448 : 	int nEffectValue = (float)(lpObj->Energy / g_SkillAdditionInfo.m_WizardryEnchantDamageDiv) * (float)g_SkillAdditionInfo.m_WizardryEnchantDamageFact;

  00050	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  00057	0f b7 0d 68 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3176
  0005e	99		 cdq
  0005f	f7 f9		 idiv	 ecx
  00061	89 45 08	 mov	 DWORD PTR tv232[ebp], eax
  00064	db 45 08	 fild	 DWORD PTR tv232[ebp]
  00067	d8 0d 6c 0c 00
	00		 fmul	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3180
  0006d	e8 00 00 00 00	 call	 __ftol2_sse
  00072	8b d8		 mov	 ebx, eax

; 2449 : 	
; 2450 : 	if( g_SkillAdditionInfo.m_WizardryEnchantDamageMax > 0 && nEffectValue > g_SkillAdditionInfo.m_WizardryEnchantDamageMax )

  00074	a1 70 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3184
  00079	85 c0		 test	 eax, eax
  0007b	74 06		 je	 SHORT $LN1@MLS_SkillS@12
  0007d	3b d8		 cmp	 ebx, eax
  0007f	76 02		 jbe	 SHORT $LN1@MLS_SkillS@12

; 2451 : 	{
; 2452 : 		nEffectValue = g_SkillAdditionInfo.m_WizardryEnchantDamageMax;

  00081	8b d8		 mov	 ebx, eax
$LN1@MLS_SkillS@12:

; 2453 : 	}
; 2454 : 	
; 2455 : 	float fMagicDamage = (lpObj->m_MagicDamageMax/100.0f)*fSkillValue;

  00083	db 86 6c 04 00
	00		 fild	 DWORD PTR [esi+1132]

; 2456 : 	fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);
; 2457 : 	lpObj->m_MPSkillOpt.MpsExpWizardryCrit = fSkillValue;

  00089	0f b6 57 04	 movzx	 edx, BYTE PTR [edi+4]
  0008d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00090	52		 push	 edx
  00091	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00097	50		 push	 eax
  00098	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0009d	d8 4d 0c	 fmul	 DWORD PTR _fSkillValue$[ebp]
  000a0	d9 5d 08	 fstp	 DWORD PTR _fMagicDamage$[ebp]
  000a3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000b1	d9 9e 74 27 00
	00		 fstp	 DWORD PTR [esi+10100]

; 2458 : 
; 2459 : 	gObjApplyBuffEffectDuration(lpObj,139,ADD_OPTION_MAGICDAMAGEMIN,nEffectValue,ADD_OPTION_MAGICDAMAGEMAX,fMagicDamage,g_SkillAdditionInfo.m_WizardryEnchantTime);

  000b7	8b 0d 74 0c 00
	00		 mov	 ecx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3188
  000bd	d9 45 08	 fld	 DWORD PTR _fMagicDamage$[ebp]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 __ftol2_sse
  000c6	50		 push	 eax
  000c7	6a 22		 push	 34			; 00000022H
  000c9	53		 push	 ebx
  000ca	6a 21		 push	 33			; 00000021H
  000cc	68 8b 00 00 00	 push	 139			; 0000008bH
  000d1	56		 push	 esi
  000d2	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2460 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000d7	8b 16		 mov	 edx, DWORD PTR [esi]
  000d9	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  000dd	6a 01		 push	 1
  000df	52		 push	 edx
  000e0	50		 push	 eax
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000e7	83 c4 2c	 add	 esp, 44			; 0000002cH
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi

; 2461 : 	return true;

  000ec	b8 01 00 00 00	 mov	 eax, 1
  000f1	5b		 pop	 ebx

; 2462 : }

  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
_TEXT	ENDS
PUBLIC	?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpTargetObj$ = -8					; size = 4
_this$ = -4						; size = 4
tv384 = 8						; size = 4
tv365 = 8						; size = 4
tv348 = 8						; size = 4
tv334 = 8						; size = 4
tv328 = 8						; size = 4
_iSkillValidTime$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
tv375 = 16						; size = 4
tv350 = 16						; size = 4
_iDefenseValue$ = 16					; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense, COMDAT
; _this$ = ecx

; 2612 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2613 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00006	8b 45 10	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00009	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0000f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	53		 push	 ebx

; 2614 : 	int skillSuccess = TRUE;
; 2615 : 	// ----
; 2616 : 	if( lpTargetObj->Type != OBJ_USER &&
; 2617 : 		lpTargetObj->m_RecallMon == -1 )

  00016	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  0001b	8b d9		 mov	 ebx, ecx
  0001d	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx
  00020	89 45 f8	 mov	 DWORD PTR _lpTargetObj$[ebp], eax
  00023	74 0d		 je	 SHORT $LN9@MLS_SkillW@2
  00025	83 b8 50 04 00
	00 ff		 cmp	 DWORD PTR [eax+1104], -1
  0002c	0f 84 5c 02 00
	00		 je	 $LN10@MLS_SkillW@2
$LN9@MLS_SkillW@2:
  00032	56		 push	 esi

; 2618 : 		return;
; 2619 : 	// ----
; 2620 : 	if( lpObj->Class != CLASS_WIZARD &&
; 2621 : 		lpObj->Class != CLASS_MAGUMSA )

  00033	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00036	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  0003d	66 85 c9	 test	 cx, cx
  00040	74 09		 je	 SHORT $LN8@MLS_SkillW@2
  00042	83 f9 03	 cmp	 ecx, 3
  00045	0f 85 42 02 00
	00		 jne	 $LN17@MLS_SkillW@2
$LN8@MLS_SkillW@2:

; 2622 : 		return;
; 2623 : 	// ----
; 2624 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  0004b	8b 96 2c 04 00
	00		 mov	 edx, DWORD PTR [esi+1068]
  00051	3b 90 2c 04 00
	00		 cmp	 edx, DWORD PTR [eax+1068]
  00057	0f 85 30 02 00
	00		 jne	 $LN17@MLS_SkillW@2

; 2625 : 		return;
; 2626 : 	// ----
; 2627 : 	float iDefenseValue = 0;

  0005d	d9 ee		 fldz
  0005f	57		 push	 edi

; 2628 : 	int iSkillValidTime = 0;
; 2629 : 	// ----
; 2630 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  00060	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00063	d9 5d 10	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  00066	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	8b cb		 mov	 ecx, ebx
  0006d	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1

; 2631 : 	// ----
; 2632 : 	if( iPreSkill > 0 )

  00072	85 c0		 test	 eax, eax
  00074	0f 8e ba 00 00
	00		 jle	 $LN6@MLS_SkillW@2

; 2633 : 	{
; 2634 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  0007a	50		 push	 eax
  0007b	56		 push	 esi
  0007c	8b cb		 mov	 ecx, ebx
  0007e	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel

; 2635 : 
; 2636 : 		if( iPreLevel > 0 )

  00083	85 c0		 test	 eax, eax
  00085	0f 8e 2d 01 00
	00		 jle	 $LN16@MLS_SkillW@2

; 2637 : 		{
; 2638 : 			iDefenseValue		= g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  0008b	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00092	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00099	0f b7 0d 58 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160
  000a0	03 c2		 add	 eax, edx
  000a2	99		 cdq
  000a3	f7 f9		 idiv	 ecx
  000a5	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  000ac	0f b7 1d 56 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  000b3	8b c8		 mov	 ecx, eax
  000b5	0f bf 86 22 01
	00 00		 movsx	 eax, WORD PTR [esi+290]
  000bc	03 c2		 add	 eax, edx
  000be	99		 cdq
  000bf	f7 fb		 idiv	 ebx

; 2639 : 			float fSkillValue	= this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level);

  000c1	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000c4	03 c8		 add	 ecx, eax
  000c6	0f b7 05 54 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  000cd	03 c8		 add	 ecx, eax
  000cf	89 4d 10	 mov	 DWORD PTR tv375[ebp], ecx

; 2640 : 			iDefenseValue		+= fSkillValue;

  000d2	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  000d6	db 45 10	 fild	 DWORD PTR tv375[ebp]
  000d9	51		 push	 ecx
  000da	52		 push	 edx
  000db	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000e0	d9 5d 10	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  000e3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000e8	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  000eb	50		 push	 eax
  000ec	8b cb		 mov	 ecx, ebx
  000ee	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000f3	d8 45 10	 fadd	 DWORD PTR _iDefenseValue$[ebp]

; 2641 : 			// ----
; 2642 : 			if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  000f6	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  000fb	d9 5d 10	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  000fe	85 c0		 test	 eax, eax
  00100	0f 84 b2 00 00
	00		 je	 $LN16@MLS_SkillW@2
  00106	89 45 08	 mov	 DWORD PTR tv365[ebp], eax
  00109	db 45 08	 fild	 DWORD PTR tv365[ebp]
  0010c	79 06		 jns	 SHORT $LN24@MLS_SkillW@2
  0010e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN24@MLS_SkillW@2:
  00114	d9 5d 08	 fstp	 DWORD PTR tv384[ebp]
  00117	d9 45 10	 fld	 DWORD PTR _iDefenseValue$[ebp]
  0011a	d9 45 08	 fld	 DWORD PTR tv384[ebp]
  0011d	d8 d1		 fcom	 ST(1)
  0011f	df e0		 fnstsw	 ax
  00121	dd d9		 fstp	 ST(1)
  00123	f6 c4 05	 test	 ah, 5
  00126	0f 8a 8a 00 00
	00		 jp	 $LN19@MLS_SkillW@2

; 2643 : 			{
; 2644 : 				iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  0012c	d9 5d 10	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 2645 : 			}
; 2646 : 		}
; 2647 : 	}
; 2648 : 	else

  0012f	e9 84 00 00 00	 jmp	 $LN16@MLS_SkillW@2
$LN6@MLS_SkillW@2:

; 2649 : 	{
; 2650 : 		iDefenseValue		= g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  00134	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0013b	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00142	03 c1		 add	 eax, ecx
  00144	0f b7 0d 58 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160
  0014b	99		 cdq
  0014c	f7 f9		 idiv	 ecx
  0014e	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  00155	0f b7 1d 56 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  0015c	8b c8		 mov	 ecx, eax
  0015e	0f bf 86 22 01
	00 00		 movsx	 eax, WORD PTR [esi+290]
  00165	03 c2		 add	 eax, edx
  00167	99		 cdq
  00168	f7 fb		 idiv	 ebx
  0016a	03 c8		 add	 ecx, eax
  0016c	0f b7 05 54 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  00173	03 c8		 add	 ecx, eax

; 2651 : 		// ----
; 2652 : 		if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  00175	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  0017a	89 4d 10	 mov	 DWORD PTR tv350[ebp], ecx
  0017d	db 45 10	 fild	 DWORD PTR tv350[ebp]
  00180	d9 5d 10	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  00183	85 c0		 test	 eax, eax
  00185	74 2a		 je	 SHORT $LN14@MLS_SkillW@2
  00187	89 45 08	 mov	 DWORD PTR tv348[ebp], eax
  0018a	db 45 08	 fild	 DWORD PTR tv348[ebp]
  0018d	79 06		 jns	 SHORT $LN25@MLS_SkillW@2
  0018f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN25@MLS_SkillW@2:

; 2653 : 		{
; 2654 : 			iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  00195	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  00198	d9 5d 08	 fstp	 DWORD PTR tv384[ebp]
  0019b	d9 45 10	 fld	 DWORD PTR _iDefenseValue$[ebp]
  0019e	d9 45 08	 fld	 DWORD PTR tv384[ebp]
  001a1	d8 d1		 fcom	 ST(1)
  001a3	df e0		 fnstsw	 ax
  001a5	dd d9		 fstp	 ST(1)
  001a7	f6 c4 05	 test	 ah, 5
  001aa	7a 0a		 jp	 SHORT $LN19@MLS_SkillW@2
  001ac	d9 5d 10	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  001af	eb 07		 jmp	 SHORT $LN16@MLS_SkillW@2
$LN14@MLS_SkillW@2:
  001b1	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  001b4	eb 02		 jmp	 SHORT $LN16@MLS_SkillW@2
$LN19@MLS_SkillW@2:
  001b6	dd d8		 fstp	 ST(0)
$LN16@MLS_SkillW@2:

; 2655 : 		}
; 2656 : 	}
; 2657 : 	// ----
; 2658 : 	int iManaRate = g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level);

  001b8	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  001bc	51		 push	 ecx
  001bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  001c2	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel

; 2659 : 	// ----
; 2660 : 	iSkillValidTime = (this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level)) + g_SkillAdditionInfo.m_SoulBarrierTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierTimeDiv;

  001c7	0f b6 57 04	 movzx	 edx, BYTE PTR [edi+4]
  001cb	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  001ce	52		 push	 edx
  001cf	50		 push	 eax
  001d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001d5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001da	50		 push	 eax
  001db	8b cb		 mov	 ecx, ebx
  001dd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001e2	0f b7 0d 60 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3168
  001e9	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  001f0	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  001f7	89 4d 08	 mov	 DWORD PTR tv334[ebp], ecx
  001fa	0f b7 0d 62 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3170
  00201	db 45 08	 fild	 DWORD PTR tv334[ebp]
  00204	03 c2		 add	 eax, edx
  00206	99		 cdq
  00207	de c1		 faddp	 ST(1), ST(0)
  00209	f7 f9		 idiv	 ecx
  0020b	89 45 08	 mov	 DWORD PTR tv328[ebp], eax
  0020e	da 45 08	 fiadd	 DWORD PTR tv328[ebp]
  00211	e8 00 00 00 00	 call	 __ftol2_sse

; 2661 : 	// ----
; 2662 : 	if( g_SkillAdditionInfo.m_SoulBarrierTimeMax > 0 && iSkillValidTime > g_SkillAdditionInfo.m_SoulBarrierTimeMax )

  00216	8b 0d 64 0c 00
	00		 mov	 ecx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  0021c	89 45 08	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
  0021f	85 c9		 test	 ecx, ecx
  00221	74 07		 je	 SHORT $LN1@MLS_SkillW@2
  00223	3b c1		 cmp	 eax, ecx
  00225	76 03		 jbe	 SHORT $LN1@MLS_SkillW@2

; 2663 : 	{
; 2664 : 		iSkillValidTime = g_SkillAdditionInfo.m_SoulBarrierTimeMax;

  00227	89 4d 08	 mov	 DWORD PTR _iSkillValidTime$[ebp], ecx
$LN1@MLS_SkillW@2:

; 2665 : 	}
; 2666 : 	// ----
; 2667 : 	iSkillValidTime += this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0022a	0f b6 57 04	 movzx	 edx, BYTE PTR [edi+4]
  0022e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00231	52		 push	 edx
  00232	50		 push	 eax
  00233	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00238	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0023d	50		 push	 eax
  0023e	8b cb		 mov	 ecx, ebx
  00240	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00245	da 45 08	 fiadd	 DWORD PTR _iSkillValidTime$[ebp]
  00248	e8 00 00 00 00	 call	 __ftol2_sse

; 2668 : 	// ----
; 2669 : 	gObjApplyBuffEffectDuration(lpTargetObj, 4, 21, (int)iDefenseValue, 28, g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level), iSkillValidTime);

  0024d	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  00251	50		 push	 eax
  00252	51		 push	 ecx
  00253	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  00258	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel
  0025d	0f bf d0	 movsx	 edx, ax
  00260	d9 45 10	 fld	 DWORD PTR _iDefenseValue$[ebp]
  00263	52		 push	 edx
  00264	6a 1c		 push	 28			; 0000001cH
  00266	e8 00 00 00 00	 call	 __ftol2_sse
  0026b	50		 push	 eax
  0026c	8b 45 f8	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0026f	6a 15		 push	 21			; 00000015H
  00271	6a 04		 push	 4
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2670 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  00279	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0027b	0f b7 57 08	 movzx	 edx, WORD PTR [edi+8]
  0027f	6a 01		 push	 1
  00281	51		 push	 ecx
  00282	52		 push	 edx
  00283	56		 push	 esi
  00284	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00289	83 c4 2c	 add	 esp, 44			; 0000002cH
  0028c	5f		 pop	 edi
$LN17@MLS_SkillW@2:
  0028d	5e		 pop	 esi
$LN10@MLS_SkillW@2:
  0028e	5b		 pop	 ebx

; 2671 : }

  0028f	8b e5		 mov	 esp, ebp
  00291	5d		 pop	 ebp
  00292	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
_TEXT	ENDS
PUBLIC	?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_iManaRate$ = -8					; size = 4
_this$ = -4						; size = 4
_iDefenseValue$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_fSkillValue$ = 12					; size = 4
_fSkillValue1$ = 12					; size = 4
_lpMagic$ = 12						; size = 4
tv376 = 16						; size = 4
tv366 = 16						; size = 4
tv352 = 16						; size = 4
tv346 = 16						; size = 4
tv345 = 16						; size = 4
_fSkillValue2$ = 16					; size = 4
_iSkillValidTime$ = 16					; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery, COMDAT
; _this$ = ecx

; 2674 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2675 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00007	8b 5d 10	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000a	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00010	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2676 : 	int skillSuccess = TRUE;
; 2677 : 
; 2678 : 	if( lpTargetObj->Type != OBJ_USER &&
; 2679 : 		lpTargetObj->m_RecallMon == -1 )

  00019	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  0001e	74 0d		 je	 SHORT $LN8@MLS_SkillW@3
  00020	83 bb 50 04 00
	00 ff		 cmp	 DWORD PTR [ebx+1104], -1
  00027	0f 84 01 02 00
	00		 je	 $LN9@MLS_SkillW@3
$LN8@MLS_SkillW@3:
  0002d	56		 push	 esi

; 2680 : 		return;
; 2681 : 
; 2682 : 	if( lpObj->Class != CLASS_WIZARD &&
; 2683 : 		lpObj->Class != CLASS_MAGUMSA )

  0002e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00031	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00038	66 85 c0	 test	 ax, ax
  0003b	74 09		 je	 SHORT $LN7@MLS_SkillW@3
  0003d	83 f8 03	 cmp	 eax, 3
  00040	0f 85 e7 01 00
	00		 jne	 $LN13@MLS_SkillW@3
$LN7@MLS_SkillW@3:

; 2684 : 		return;
; 2685 : 
; 2686 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  00046	8b 86 2c 04 00
	00		 mov	 eax, DWORD PTR [esi+1068]
  0004c	3b 83 2c 04 00
	00		 cmp	 eax, DWORD PTR [ebx+1068]
  00052	0f 85 d5 01 00
	00		 jne	 $LN13@MLS_SkillW@3

; 2687 : 		return;
; 2688 : 	// ----
; 2689 : 	float iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseStart + ((lpObj->Dexterity + lpObj->AddDexterity) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv1) + ((lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierDefenseDiv2);

  00058	0f b7 8e f6 00
	00 00		 movzx	 ecx, WORD PTR [esi+246]
  0005f	0f bf 86 22 01
	00 00		 movsx	 eax, WORD PTR [esi+290]
  00066	03 c1		 add	 eax, ecx
  00068	0f b7 0d 56 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3158
  0006f	99		 cdq
  00070	f7 f9		 idiv	 ecx
  00072	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00079	57		 push	 edi
  0007a	0f b7 3d 58 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3160

; 2690 : 	int iSkillValidTime = 0;
; 2691 : 	float fSkillValue2	= this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  00081	6a 02		 push	 2
  00083	8b c8		 mov	 ecx, eax
  00085	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  0008c	03 c2		 add	 eax, edx
  0008e	99		 cdq
  0008f	f7 ff		 idiv	 edi
  00091	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00094	03 c8		 add	 ecx, eax
  00096	0f b7 05 54 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3156
  0009d	03 c8		 add	 ecx, eax
  0009f	89 4d 10	 mov	 DWORD PTR tv376[ebp], ecx
  000a2	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a5	51		 push	 ecx
  000a6	db 45 10	 fild	 DWORD PTR tv376[ebp]
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	56		 push	 esi
  000ad	d9 5d 08	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  000b0	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  000b5	d9 5d 10	 fstp	 DWORD PTR _fSkillValue2$[ebp]

; 2692 : 	// ----
; 2693 : 	if( fSkillValue2 > 0.0f )

  000b8	d9 ee		 fldz
  000ba	d9 45 10	 fld	 DWORD PTR _fSkillValue2$[ebp]
  000bd	d8 d1		 fcom	 ST(1)
  000bf	df e0		 fnstsw	 ax
  000c1	dd d9		 fstp	 ST(1)
  000c3	f6 c4 41	 test	 ah, 65			; 00000041H
  000c6	75 08		 jne	 SHORT $LN15@MLS_SkillW@3

; 2694 : 	{
; 2695 : 		iDefenseValue += fSkillValue2;

  000c8	d8 45 08	 fadd	 DWORD PTR _iDefenseValue$[ebp]
  000cb	d9 5d 08	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  000ce	eb 02		 jmp	 SHORT $LN5@MLS_SkillW@3
$LN15@MLS_SkillW@3:
  000d0	dd d8		 fstp	 ST(0)
$LN5@MLS_SkillW@3:

; 2696 : 	}
; 2697 : 	// ----
; 2698 : 	if( g_SkillAdditionInfo.m_SoulBarrierDefenseMax > 0 && iDefenseValue > g_SkillAdditionInfo.m_SoulBarrierDefenseMax )

  000d2	a1 5c 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3164
  000d7	85 c0		 test	 eax, eax
  000d9	74 29		 je	 SHORT $LN11@MLS_SkillW@3
  000db	89 45 10	 mov	 DWORD PTR tv366[ebp], eax
  000de	db 45 10	 fild	 DWORD PTR tv366[ebp]
  000e1	79 06		 jns	 SHORT $LN26@MLS_SkillW@3
  000e3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN26@MLS_SkillW@3:
  000e9	d9 5d 10	 fstp	 DWORD PTR tv345[ebp]
  000ec	d9 45 08	 fld	 DWORD PTR _iDefenseValue$[ebp]
  000ef	d9 45 10	 fld	 DWORD PTR tv345[ebp]
  000f2	d8 d1		 fcom	 ST(1)
  000f4	df e0		 fnstsw	 ax
  000f6	dd d9		 fstp	 ST(1)
  000f8	f6 c4 05	 test	 ah, 5
  000fb	7a 05		 jp	 SHORT $LN18@MLS_SkillW@3

; 2699 : 	{
; 2700 : 		iDefenseValue = g_SkillAdditionInfo.m_SoulBarrierDefenseMax;

  000fd	d9 5d 08	 fstp	 DWORD PTR _iDefenseValue$[ebp]
  00100	eb 02		 jmp	 SHORT $LN11@MLS_SkillW@3
$LN18@MLS_SkillW@3:
  00102	dd d8		 fstp	 ST(0)
$LN11@MLS_SkillW@3:

; 2701 : 	}
; 2702 : 	// ----
; 2703 : 	int iManaRate = g_SkillAdditionInfo.GetSoulBarrierManaRateLevel(lpMagic->m_Level);

  00104	0f b6 57 04	 movzx	 edx, BYTE PTR [edi+4]
  00108	52		 push	 edx
  00109	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A ; g_SkillAdditionInfo
  0010e	e8 00 00 00 00	 call	 ?GetSoulBarrierManaRateLevel@CSkillAdditionInfo@@QAEFH@Z ; CSkillAdditionInfo::GetSoulBarrierManaRateLevel

; 2704 : 	iSkillValidTime = (this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level)) + g_SkillAdditionInfo.m_SoulBarrierTimeStart + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_SoulBarrierTimeDiv;

  00113	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  00117	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0011a	98		 cwde
  0011b	51		 push	 ecx
  0011c	52		 push	 edx
  0011d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00122	89 45 f8	 mov	 DWORD PTR _iManaRate$[ebp], eax
  00125	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00133	0f b7 05 60 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3168
  0013a	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  00141	89 45 10	 mov	 DWORD PTR tv352[ebp], eax
  00144	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  0014b	db 45 10	 fild	 DWORD PTR tv352[ebp]
  0014e	03 c1		 add	 eax, ecx
  00150	0f b7 0d 62 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3170
  00157	de c1		 faddp	 ST(1), ST(0)
  00159	99		 cdq
  0015a	f7 f9		 idiv	 ecx
  0015c	89 45 10	 mov	 DWORD PTR tv346[ebp], eax
  0015f	da 45 10	 fiadd	 DWORD PTR tv346[ebp]
  00162	e8 00 00 00 00	 call	 __ftol2_sse

; 2705 : 
; 2706 : 	float fSkillValue1 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  00167	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0016a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016d	6a 01		 push	 1
  0016f	52		 push	 edx
  00170	56		 push	 esi
  00171	89 45 10	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
  00174	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00179	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue1$[ebp]

; 2707 : 
; 2708 : 	if( fSkillValue1 > 0.0f )

  0017c	d9 ee		 fldz
  0017e	d9 45 0c	 fld	 DWORD PTR _fSkillValue1$[ebp]
  00181	d8 d1		 fcom	 ST(1)
  00183	df e0		 fnstsw	 ax
  00185	dd d9		 fstp	 ST(1)
  00187	f6 c4 41	 test	 ah, 65			; 00000041H
  0018a	75 0d		 jne	 SHORT $LN21@MLS_SkillW@3

; 2709 : 	{
; 2710 : 		iSkillValidTime += fSkillValue1;

  0018c	da 45 10	 fiadd	 DWORD PTR _iSkillValidTime$[ebp]
  0018f	e8 00 00 00 00	 call	 __ftol2_sse
  00194	89 45 10	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
  00197	eb 02		 jmp	 SHORT $LN12@MLS_SkillW@3
$LN21@MLS_SkillW@3:
  00199	dd d8		 fstp	 ST(0)
$LN12@MLS_SkillW@3:

; 2711 : 	}
; 2712 : 
; 2713 : 	if( g_SkillAdditionInfo.m_SoulBarrierTimeMax > 0 && iSkillValidTime > g_SkillAdditionInfo.m_SoulBarrierTimeMax )

  0019b	a1 64 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3172
  001a0	85 c0		 test	 eax, eax
  001a2	74 08		 je	 SHORT $LN2@MLS_SkillW@3
  001a4	39 45 10	 cmp	 DWORD PTR _iSkillValidTime$[ebp], eax
  001a7	76 03		 jbe	 SHORT $LN2@MLS_SkillW@3

; 2714 : 	{
; 2715 : 		iSkillValidTime = g_SkillAdditionInfo.m_SoulBarrierTimeMax;

  001a9	89 45 10	 mov	 DWORD PTR _iSkillValidTime$[ebp], eax
$LN2@MLS_SkillW@3:

; 2716 : 	}
; 2717 : 
; 2718 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  001ac	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  001b0	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001b3	50		 push	 eax
  001b4	51		 push	 ecx
  001b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001ba	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001c8	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2719 : 
; 2720 : 	if( fSkillValue > 0.0f )

  001cb	d9 ee		 fldz
  001cd	d9 45 0c	 fld	 DWORD PTR _fSkillValue$[ebp]
  001d0	d8 d1		 fcom	 ST(1)
  001d2	df e0		 fnstsw	 ax
  001d4	dd d9		 fstp	 ST(1)
  001d6	f6 c4 41	 test	 ah, 65			; 00000041H
  001d9	75 14		 jne	 SHORT $LN24@MLS_SkillW@3

; 2721 : 	{
; 2722 : 		lpTargetObj->m_MPSkillOpt.MpsManaShieldAddMana = lpTargetObj->MaxMana*fSkillValue/100.0f;

  001db	d8 8b 14 01 00
	00		 fmul	 DWORD PTR [ebx+276]
  001e1	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  001e7	d9 9b 78 27 00
	00		 fstp	 DWORD PTR [ebx+10104]
  001ed	eb 02		 jmp	 SHORT $LN1@MLS_SkillW@3
$LN24@MLS_SkillW@3:
  001ef	dd d8		 fstp	 ST(0)
$LN1@MLS_SkillW@3:

; 2723 : 	}
; 2724 : 
; 2725 : 	gObjApplyBuffEffectDuration(lpTargetObj,140,21,(int)iDefenseValue,28,iManaRate,iSkillValidTime);

  001f1	8b 55 10	 mov	 edx, DWORD PTR _iSkillValidTime$[ebp]
  001f4	d9 45 08	 fld	 DWORD PTR _iDefenseValue$[ebp]
  001f7	8b 45 f8	 mov	 eax, DWORD PTR _iManaRate$[ebp]
  001fa	52		 push	 edx
  001fb	50		 push	 eax
  001fc	6a 1c		 push	 28			; 0000001cH
  001fe	e8 00 00 00 00	 call	 __ftol2_sse
  00203	50		 push	 eax
  00204	6a 15		 push	 21			; 00000015H
  00206	68 8c 00 00 00	 push	 140			; 0000008cH
  0020b	53		 push	 ebx
  0020c	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2726 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  00211	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00213	0f b7 57 08	 movzx	 edx, WORD PTR [edi+8]
  00217	6a 01		 push	 1
  00219	51		 push	 ecx
  0021a	52		 push	 edx
  0021b	56		 push	 esi
  0021c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2727 : 	gObjCalCharacter(lpTargetObj->m_Index);

  00221	8b 03		 mov	 eax, DWORD PTR [ebx]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00229	83 c4 30	 add	 esp, 48			; 00000030H
  0022c	5f		 pop	 edi
$LN13@MLS_SkillW@3:
  0022d	5e		 pop	 esi
$LN9@MLS_SkillW@3:
  0022e	5b		 pop	 ebx

; 2728 : }

  0022f	8b e5		 mov	 esp, ebp
  00231	5d		 pop	 ebp
  00232	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
_TEXT	ENDS
PUBLIC	??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@ ; `string'
PUBLIC	?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
;	COMDAT ??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@
; File e:\work\tranet_version\gs\gameserver\skilladditioninfo.h
CONST	SEGMENT
??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@ DB '['
	DB	'%s][%s] Use Infinity Arrow Skill (Time:%d)(Character Level : '
	DB	'%d)(ChangeUp: %d)', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newmasterlevelskilltreesystem.cpp
CONST	ENDS
;	COMDAT ?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow, COMDAT
; _this$ = ecx

; 2731 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2732 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00007	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0000d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00013	57		 push	 edi

; 2733 : 
; 2734 : 	if( lpObj->Type != OBJ_USER )

  00014	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00019	8b f9		 mov	 edi, ecx
  0001b	74 08		 je	 SHORT $LN5@MLS_SkillI@3
$LN12@MLS_SkillI@3:
  0001d	5f		 pop	 edi

; 2735 : 		return false;

  0001e	33 c0		 xor	 eax, eax
  00020	5e		 pop	 esi

; 2757 : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
$LN5@MLS_SkillI@3:

; 2736 : 
; 2737 : 	if( lpObj->Class != CLASS_ELF )

  00025	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2

; 2738 : 		return false;

  0002d	75 ee		 jne	 SHORT $LN12@MLS_SkillI@3

; 2739 : 
; 2740 : 	if( lpObj->ChangeUP == FALSE )

  0002f	80 be bb 00 00
	00 00		 cmp	 BYTE PTR [esi+187], 0

; 2741 : 		return false;

  00036	74 e5		 je	 SHORT $LN12@MLS_SkillI@3

; 2742 : 
; 2743 : 	if( lpObj->m_Index != aTargetIndex )

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]

; 2744 : 		return false;

  0003d	75 de		 jne	 SHORT $LN12@MLS_SkillI@3

; 2745 : 
; 2746 : 	if( gObjSearchActiveEffect(lpObj,143) == TRUE )

  0003f	68 8f 00 00 00	 push	 143			; 0000008fH
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0004a	83 c4 08	 add	 esp, 8
  0004d	3c 01		 cmp	 al, 1

; 2747 : 		return false;

  0004f	74 cc		 je	 SHORT $LN12@MLS_SkillI@3

; 2748 : 
; 2749 : 	lpObj->m_InfinityArrowDmgMul = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00051	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00054	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00058	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	52		 push	 edx
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00062	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00067	50		 push	 eax
  00068	8b cf		 mov	 ecx, edi
  0006a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0006f	e8 00 00 00 00	 call	 __ftol2_sse
  00074	89 86 9c 27 00
	00		 mov	 DWORD PTR [esi+10140], eax

; 2750 : 	gObjApplyBuffEffectDuration(lpObj,143,0,0,0,0,g_SkillAdditionInfo.GetInfinityArrowSkillTime());

  0007a	a1 04 00 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+4
  0007f	50		 push	 eax
  00080	6a 00		 push	 0
  00082	6a 00		 push	 0
  00084	6a 00		 push	 0
  00086	6a 00		 push	 0
  00088	68 8f 00 00 00	 push	 143			; 0000008fH
  0008d	56		 push	 esi
  0008e	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2751 : 	GCMagicAttackNumberSend(lpObj,441,lpObj->m_Index,TRUE);

  00093	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00095	6a 01		 push	 1
  00097	51		 push	 ecx
  00098	68 b9 01 00 00	 push	 441			; 000001b9H
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2752 : 
; 2753 : 	LogAddTD("[%s][%s] Use Infinity Arrow Skill (Time:%d)(Character Level : %d)(ChangeUp: %d)",
; 2754 : 		lpObj->AccountID,lpObj->Name,g_SkillAdditionInfo.GetInfinityArrowSkillTime(),lpObj->Level,lpObj->ChangeUP);

  000a3	0f b6 96 bb 00
	00 00		 movzx	 edx, BYTE PTR [esi+187]
  000aa	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  000b1	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+4
  000b7	52		 push	 edx
  000b8	50		 push	 eax
  000b9	51		 push	 ecx
  000ba	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  000bd	52		 push	 edx
  000be	83 c6 6c	 add	 esi, 108		; 0000006cH
  000c1	56		 push	 esi
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000cd	83 c4 44	 add	 esp, 68			; 00000044H
  000d0	5f		 pop	 edi

; 2755 : 
; 2756 : 	return true;

  000d1	b8 01 00 00 00	 mov	 eax, 1
  000d6	5e		 pop	 esi

; 2757 : }

  000d7	5d		 pop	 ebp
  000d8	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_EffectUPValue$ = -8					; size = 4
_this$ = -4						; size = 4
_EffectDownValue$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker, COMDAT
; _this$ = ecx

; 2760 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 2761 : 	if( !OBJMAX_RANGE(aIndex) )

  00007	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	85 f6		 test	 esi, esi
  0000f	78 0f		 js	 SHORT $LN8@MLS_SkillS@13
  00011	33 c0		 xor	 eax, eax
  00013	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	75 09		 jne	 SHORT $LN3@MLS_SkillS@13
$LN8@MLS_SkillS@13:

; 2762 : 		return false;

  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 2785 : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
$LN3@MLS_SkillS@13:

; 2763 : 
; 2764 : 	LPOBJ lpObj = &gObj[aIndex];

  00029	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0002f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00035	53		 push	 ebx

; 2765 : 
; 2766 : 	int iDuration = g_SkillAdditionInfo.m_BerserkerTimeStart + lpObj->Energy/g_SkillAdditionInfo.m_BerserkerTimeDiv;

  00036	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0003d	57		 push	 edi
  0003e	0f b7 3d ba 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3258
  00045	8b c1		 mov	 eax, ecx
  00047	99		 cdq
  00048	f7 ff		 idiv	 edi
  0004a	8b f8		 mov	 edi, eax
  0004c	0f b7 05 b8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3256
  00053	03 f8		 add	 edi, eax

; 2767 : 	
; 2768 : 	if( g_SkillAdditionInfo.m_BerserkerTimeMax > 0 && iDuration > g_SkillAdditionInfo.m_BerserkerTimeMax )

  00055	a1 bc 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  0005a	85 c0		 test	 eax, eax
  0005c	74 06		 je	 SHORT $LN2@MLS_SkillS@13
  0005e	3b f8		 cmp	 edi, eax
  00060	76 02		 jbe	 SHORT $LN2@MLS_SkillS@13

; 2769 : 	{
; 2770 : 		iDuration = g_SkillAdditionInfo.m_BerserkerTimeMax;

  00062	8b f8		 mov	 edi, eax
$LN2@MLS_SkillS@13:

; 2771 : 	}
; 2772 : 
; 2773 : 	int EffectUPValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerManaIncDiv;

  00064	0f b7 1d b4 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3252
  0006b	8b c1		 mov	 eax, ecx
  0006d	99		 cdq
  0006e	f7 fb		 idiv	 ebx

; 2774 : 	int EffectDownValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerLifeDecDiv;

  00070	0f b7 1d b6 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3254
  00077	89 45 f8	 mov	 DWORD PTR _EffectUPValue$[ebp], eax
  0007a	8b c1		 mov	 eax, ecx
  0007c	99		 cdq
  0007d	f7 fb		 idiv	 ebx

; 2775 : 
; 2776 : 	if( lpObj->Type == OBJ_MONSTER )

  0007f	66 83 7e 68 02	 cmp	 WORD PTR [esi+104], 2
  00084	89 45 08	 mov	 DWORD PTR _EffectDownValue$[ebp], eax
  00087	75 05		 jne	 SHORT $LN1@MLS_SkillS@13

; 2777 : 		iDuration = 600000;

  00089	bf c0 27 09 00	 mov	 edi, 600000		; 000927c0H
$LN1@MLS_SkillS@13:

; 2778 : 
; 2779 : 	lpObj->m_MPSkillOpt.MpsBerserkInc1 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0008e	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00091	0f b6 4b 04	 movzx	 ecx, BYTE PTR [ebx+4]
  00095	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00098	51		 push	 ecx
  00099	52		 push	 edx
  0009a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0009f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2780 : 
; 2781 : 	gObjApplyBuffEffectDuration(lpObj,150,31,EffectUPValue,32,EffectDownValue,iDuration);

  000ad	8b 45 08	 mov	 eax, DWORD PTR _EffectDownValue$[ebp]
  000b0	d9 9e 7c 27 00
	00		 fstp	 DWORD PTR [esi+10108]
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _EffectUPValue$[ebp]
  000b9	57		 push	 edi
  000ba	50		 push	 eax
  000bb	6a 20		 push	 32			; 00000020H
  000bd	51		 push	 ecx
  000be	6a 1f		 push	 31			; 0000001fH
  000c0	68 96 00 00 00	 push	 150			; 00000096H
  000c5	56		 push	 esi
  000c6	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2782 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000cb	8b 16		 mov	 edx, DWORD PTR [esi]
  000cd	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  000d1	6a 01		 push	 1
  000d3	52		 push	 edx
  000d4	50		 push	 eax
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000db	83 c4 2c	 add	 esp, 44			; 0000002cH
  000de	5f		 pop	 edi
  000df	5b		 pop	 ebx

; 2783 : 
; 2784 : 	return true;

  000e0	b8 01 00 00 00	 mov	 eax, 1
  000e5	5e		 pop	 esi

; 2785 : }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
_TEXT	ENDS
PUBLIC	?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_EffectDownValue$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker, COMDAT
; _this$ = ecx

; 2788 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2789 : 	if( !OBJMAX_RANGE(aIndex) )

  00005	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000b	85 f6		 test	 esi, esi
  0000d	78 0f		 js	 SHORT $LN8@MLS_SkillS@14
  0000f	33 c0		 xor	 eax, eax
  00011	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	75 09		 jne	 SHORT $LN3@MLS_SkillS@14
$LN8@MLS_SkillS@14:

; 2790 : 		return false;

  0001e	33 c0		 xor	 eax, eax
  00020	5e		 pop	 esi

; 2817 : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN3@MLS_SkillS@14:

; 2791 : 
; 2792 : 	LPOBJ lpObj = &gObj[aIndex];

  00027	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0002d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	53		 push	 ebx

; 2793 : 
; 2794 : 	int iDuration = g_SkillAdditionInfo.m_BerserkerTimeStart + lpObj->Energy/g_SkillAdditionInfo.m_BerserkerTimeDiv;

  00034	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0003b	57		 push	 edi
  0003c	0f b7 3d ba 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3258
  00043	8b c1		 mov	 eax, ecx
  00045	99		 cdq
  00046	f7 ff		 idiv	 edi
  00048	8b f8		 mov	 edi, eax
  0004a	0f b7 05 b8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3256
  00051	03 f8		 add	 edi, eax

; 2795 : 	
; 2796 : 	if( g_SkillAdditionInfo.m_BerserkerTimeMax > 0 && iDuration > g_SkillAdditionInfo.m_BerserkerTimeMax )

  00053	a1 bc 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  00058	85 c0		 test	 eax, eax
  0005a	74 06		 je	 SHORT $LN2@MLS_SkillS@14
  0005c	3b f8		 cmp	 edi, eax
  0005e	76 02		 jbe	 SHORT $LN2@MLS_SkillS@14

; 2797 : 	{
; 2798 : 		iDuration = g_SkillAdditionInfo.m_BerserkerTimeMax;

  00060	8b f8		 mov	 edi, eax
$LN2@MLS_SkillS@14:

; 2799 : 	}
; 2800 : 
; 2801 : 	#ifdef FIX_BERSERK_SUM
; 2802 : 	int EffectUPValue = 0;
; 2803 : 	#else
; 2804 : 	int EffectUPValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerManaIncDiv;
; 2805 : 	#endif
; 2806 : 	int EffectDownValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerLifeDecDiv;

  00062	0f b7 1d b6 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3254
  00069	8b c1		 mov	 eax, ecx
  0006b	99		 cdq
  0006c	f7 fb		 idiv	 ebx

; 2807 : 
; 2808 : 	if( lpObj->Type == OBJ_MONSTER )

  0006e	66 83 7e 68 02	 cmp	 WORD PTR [esi+104], 2
  00073	89 45 08	 mov	 DWORD PTR _EffectDownValue$[ebp], eax
  00076	75 05		 jne	 SHORT $LN1@MLS_SkillS@14

; 2809 : 		iDuration = 600000;

  00078	bf c0 27 09 00	 mov	 edi, 600000		; 000927c0H
$LN1@MLS_SkillS@14:

; 2810 : 
; 2811 : 	lpObj->m_MPSkillOpt.MpsBerserkInc2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0007d	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00080	0f b6 4b 04	 movzx	 ecx, BYTE PTR [ebx+4]
  00084	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00087	51		 push	 ecx
  00088	52		 push	 edx
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0008e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2812 : 
; 2813 : 	gObjApplyBuffEffectDuration(lpObj,151,31,EffectUPValue,32,EffectDownValue,iDuration);

  0009c	8b 45 08	 mov	 eax, DWORD PTR _EffectDownValue$[ebp]
  0009f	d9 9e 80 27 00
	00		 fstp	 DWORD PTR [esi+10112]
  000a5	57		 push	 edi
  000a6	50		 push	 eax
  000a7	6a 20		 push	 32			; 00000020H
  000a9	6a 00		 push	 0
  000ab	6a 1f		 push	 31			; 0000001fH
  000ad	68 97 00 00 00	 push	 151			; 00000097H
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2814 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000b8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ba	0f b7 53 08	 movzx	 edx, WORD PTR [ebx+8]
  000be	6a 01		 push	 1
  000c0	51		 push	 ecx
  000c1	52		 push	 edx
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000c8	83 c4 2c	 add	 esp, 44			; 0000002cH
  000cb	5f		 pop	 edi
  000cc	5b		 pop	 ebx

; 2815 : 
; 2816 : 	return true;

  000cd	b8 01 00 00 00	 mov	 eax, 1
  000d2	5e		 pop	 esi

; 2817 : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
_TEXT	ENDS
PUBLIC	?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_EffectDownValue$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker, COMDAT
; _this$ = ecx

; 2820 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2821 : 	if( !OBJMAX_RANGE(aIndex) )

  00005	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000b	85 f6		 test	 esi, esi
  0000d	78 0f		 js	 SHORT $LN8@MLS_SkillM@4
  0000f	33 c0		 xor	 eax, eax
  00011	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	75 09		 jne	 SHORT $LN3@MLS_SkillM@4
$LN8@MLS_SkillM@4:

; 2822 : 		return false;

  0001e	33 c0		 xor	 eax, eax
  00020	5e		 pop	 esi

; 2848 : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN3@MLS_SkillM@4:

; 2823 : 
; 2824 : 	LPOBJ lpObj = &gObj[aIndex];

  00027	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0002d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	53		 push	 ebx

; 2825 : 
; 2826 : 	int iDuration = g_SkillAdditionInfo.m_BerserkerTimeStart + lpObj->Energy/g_SkillAdditionInfo.m_BerserkerTimeDiv;

  00034	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0003b	57		 push	 edi
  0003c	0f b7 3d ba 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3258
  00043	8b c1		 mov	 eax, ecx
  00045	99		 cdq
  00046	f7 ff		 idiv	 edi
  00048	8b f8		 mov	 edi, eax
  0004a	0f b7 05 b8 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3256
  00051	03 f8		 add	 edi, eax

; 2827 : 	
; 2828 : 	if( g_SkillAdditionInfo.m_BerserkerTimeMax > 0 && iDuration > g_SkillAdditionInfo.m_BerserkerTimeMax )

  00053	a1 bc 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3260
  00058	85 c0		 test	 eax, eax
  0005a	74 06		 je	 SHORT $LN2@MLS_SkillM@4
  0005c	3b f8		 cmp	 edi, eax
  0005e	76 02		 jbe	 SHORT $LN2@MLS_SkillM@4

; 2829 : 	{
; 2830 : 		iDuration = g_SkillAdditionInfo.m_BerserkerTimeMax;

  00060	8b f8		 mov	 edi, eax
$LN2@MLS_SkillM@4:

; 2831 : 	}
; 2832 : 	#ifdef FIX_BERSERK_SUM
; 2833 : 	int EffectUPValue = 0;
; 2834 : 	#else
; 2835 : 	int EffectUPValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerManaIncDiv;
; 2836 : 	#endif
; 2837 : 	int EffectDownValue = lpObj->Energy/g_SkillAdditionInfo.m_BerserkerLifeDecDiv;

  00062	0f b7 1d b6 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3254
  00069	8b c1		 mov	 eax, ecx
  0006b	99		 cdq
  0006c	f7 fb		 idiv	 ebx

; 2838 : 
; 2839 : 	if( lpObj->Type == OBJ_MONSTER )

  0006e	66 83 7e 68 02	 cmp	 WORD PTR [esi+104], 2
  00073	89 45 08	 mov	 DWORD PTR _EffectDownValue$[ebp], eax
  00076	75 05		 jne	 SHORT $LN1@MLS_SkillM@4

; 2840 : 		iDuration = 600000;

  00078	bf c0 27 09 00	 mov	 edi, 600000		; 000927c0H
$LN1@MLS_SkillM@4:

; 2841 : 
; 2842 : 	lpObj->m_MPSkillOpt.MpsBerserkInc3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0007d	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00080	0f b6 4b 04	 movzx	 ecx, BYTE PTR [ebx+4]
  00084	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00087	51		 push	 ecx
  00088	52		 push	 edx
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0008e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2843 : 
; 2844 : 	gObjApplyBuffEffectDuration(lpObj,152,31,EffectUPValue,32,EffectDownValue,iDuration);

  0009c	8b 45 08	 mov	 eax, DWORD PTR _EffectDownValue$[ebp]
  0009f	d9 9e 84 27 00
	00		 fstp	 DWORD PTR [esi+10116]
  000a5	57		 push	 edi
  000a6	50		 push	 eax
  000a7	6a 20		 push	 32			; 00000020H
  000a9	6a 00		 push	 0
  000ab	6a 1f		 push	 31			; 0000001fH
  000ad	68 98 00 00 00	 push	 152			; 00000098H
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 2845 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000b8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ba	0f b7 53 08	 movzx	 edx, WORD PTR [ebx+8]
  000be	6a 01		 push	 1
  000c0	51		 push	 ecx
  000c1	52		 push	 edx
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000c8	83 c4 2c	 add	 esp, 44			; 0000002cH
  000cb	5f		 pop	 edi
  000cc	5b		 pop	 ebx

; 2846 : 
; 2847 : 	return true;

  000cd	b8 01 00 00 00	 mov	 eax, 1
  000d2	5e		 pop	 esi

; 2848 : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$ = -64					; size = 4
_aIndex$GSCopy$ = -60					; size = 4
_lpMagic$GSCopy$ = -56					; size = 4
_this$GSCopy$ = -52					; size = 4
_n$217319 = -52						; size = 4
_addcriticaldamagevalue$ = -48				; size = 4
_n$217306 = -48						; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage, COMDAT
; _this$ = ecx

; 2851 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 2875 : 	{
; 2876 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2877 : 
; 2878 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00014	89 75 c4	 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  00017	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00023	89 4d cc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00026	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]

; 2919 : 	}
; 2920 : 	else
; 2921 : 	{
; 2922 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0002e	89 4d c8	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], ecx
  00031	74 0d		 je	 SHORT $LN25@MLS_SkillS@15

; 2852 : 	int skillSuccess = TRUE;
; 2853 : 	LPOBJ lpObj = &gObj[aIndex];
; 2854 : 
; 2855 : 	if( lpObj->Type != OBJ_USER &&
; 2856 : 		lpObj->m_RecallMon == -1 )

  00033	83 be 50 04 00
	00 ff		 cmp	 DWORD PTR [esi+1104], -1
  0003a	0f 84 1a 02 00
	00		 je	 $LN2@MLS_SkillS@15
$LN25@MLS_SkillS@15:

; 2857 : 		return;
; 2858 : 
; 2859 : 	if( lpObj->Class != CLASS_DARKLORD )

  00040	66 83 be b8 00
	00 00 04	 cmp	 WORD PTR [esi+184], 4
  00048	0f 85 0c 02 00
	00		 jne	 $LN2@MLS_SkillS@15

; 2860 : 		return;
; 2861 : 
; 2862 : 	int number;
; 2863 : 	int partynum = 0;
; 2864 : 	int totallevel = 0;
; 2865 : 	int partycount;
; 2866 : 	int dis;
; 2867 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2868 : 	LPOBJ lpPartyObj;
; 2869 : 
; 2870 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  0004e	83 c8 ff	 or	 eax, -1
  00051	53		 push	 ebx
  00052	57		 push	 edi

; 2871 : 
; 2872 : 	partynum = lpObj->PartyNumber;

  00053	8b be 2c 04 00
	00		 mov	 edi, DWORD PTR [esi+1068]
  00059	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  0005c	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  0005f	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  00062	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  00065	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  00068	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  0006b	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  0006e	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  00071	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  00074	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax
  00077	89 7d c0	 mov	 DWORD PTR _partynum$[ebp], edi

; 2873 : 
; 2874 : 	if( partynum != -1 )

  0007a	3b f8		 cmp	 edi, eax
  0007c	74 5e		 je	 SHORT $LN27@MLS_SkillS@15

; 2875 : 	{
; 2876 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2877 : 
; 2878 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0007e	6b ff 68	 imul	 edi, 104		; 00000068H
  00081	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _n$217306[ebp], 0
  00088	81 c7 0c 00 00
	00		 add	 edi, OFFSET ?gParty@@3VPartyClass@@A+12
  0008e	8b ff		 npad	 2
$LL29@MLS_SkillS@15:

; 2879 : 		{
; 2880 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 07		 mov	 eax, DWORD PTR [edi]

; 2881 : 
; 2882 : 			if( number >= 0 )

  00092	85 c0		 test	 eax, eax
  00094	78 34		 js	 SHORT $LN13@MLS_SkillS@15

; 2883 : 			{
; 2884 : 				lpPartyObj = &gObj[number];

  00096	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0009c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a2	8b d8		 mov	 ebx, eax

; 2885 : 
; 2886 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  000a4	8a 86 49 01 00
	00		 mov	 al, BYTE PTR [esi+329]
  000aa	3a 83 49 01 00
	00		 cmp	 al, BYTE PTR [ebx+329]
  000b0	75 18		 jne	 SHORT $LN13@MLS_SkillS@15

; 2887 : 				{
; 2888 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000b2	53		 push	 ebx
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b9	83 c4 08	 add	 esp, 8

; 2889 : 
; 2890 : 					if( dis < 10 )

  000bc	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000bf	7d 09		 jge	 SHORT $LN13@MLS_SkillS@15

; 2891 : 					{
; 2892 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000c1	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c3	8b 55 d0	 mov	 edx, DWORD PTR _n$217306[ebp]
  000c6	89 4c 95 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+edx*4], ecx
$LN13@MLS_SkillS@15:

; 2875 : 	{
; 2876 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2877 : 
; 2878 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ca	8b 45 d0	 mov	 eax, DWORD PTR _n$217306[ebp]
  000cd	40		 inc	 eax
  000ce	83 c7 04	 add	 edi, 4
  000d1	89 45 d0	 mov	 DWORD PTR _n$217306[ebp], eax
  000d4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000d7	7c b7		 jl	 SHORT $LL29@MLS_SkillS@15
  000d9	8b 4d c8	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
$LN27@MLS_SkillS@15:

; 2893 : 					}
; 2894 : 				}
; 2895 : 			}
; 2896 : 		}
; 2897 : 	}
; 2898 : 
; 2899 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  000dc	0f b7 96 18 01
	00 00		 movzx	 edx, WORD PTR [esi+280]
  000e3	0f b7 86 1a 01
	00 00		 movzx	 eax, WORD PTR [esi+282]
  000ea	0f b7 3d a4 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  000f1	03 c2		 add	 eax, edx
  000f3	99		 cdq
  000f4	f7 ff		 idiv	 edi
  000f6	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  000fd	0f b7 1d a6 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238
  00104	8b f8		 mov	 edi, eax
  00106	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  0010d	03 c2		 add	 eax, edx
  0010f	99		 cdq
  00110	f7 fb		 idiv	 ebx
  00112	03 f8		 add	 edi, eax

; 2900 : 	addcriticaldamagevalue += this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00114	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00118	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0011b	50		 push	 eax
  0011c	51		 push	 ecx
  0011d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00122	89 7d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], edi
  00125	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0012a	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00133	da 45 d0	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  00136	e8 00 00 00 00	 call	 __ftol2_sse
  0013b	8b c8		 mov	 ecx, eax

; 2901 : 	
; 2902 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  0013d	66 a1 a8 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  00143	89 4d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx
  00146	66 85 c0	 test	 ax, ax
  00149	74 0c		 je	 SHORT $LN8@MLS_SkillS@15
  0014b	0f b7 c0	 movzx	 eax, ax
  0014e	3b c8		 cmp	 ecx, eax
  00150	7e 05		 jle	 SHORT $LN8@MLS_SkillS@15

; 2903 : 	{
; 2904 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  00152	89 45 d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
  00155	8b c8		 mov	 ecx, eax
$LN8@MLS_SkillS@15:

; 2905 : 	}
; 2906 : 	
; 2907 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv;

  00157	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  0015e	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00165	0f b7 3d ac 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  0016c	03 c2		 add	 eax, edx
  0016e	99		 cdq
  0016f	f7 ff		 idiv	 edi
  00171	8b d8		 mov	 ebx, eax
  00173	0f b7 05 aa 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  0017a	03 d8		 add	 ebx, eax

; 2908 : 
; 2909 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  0017c	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  00181	85 c0		 test	 eax, eax
  00183	74 06		 je	 SHORT $LN7@MLS_SkillS@15
  00185	3b d8		 cmp	 ebx, eax
  00187	76 02		 jbe	 SHORT $LN7@MLS_SkillS@15

; 2910 : 	{
; 2911 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  00189	8b d8		 mov	 ebx, eax
$LN7@MLS_SkillS@15:

; 2912 : 	}
; 2913 : 
; 2914 : 	if( partynum == -1 )

  0018b	83 7d c0 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  0018f	75 56		 jne	 SHORT $LN6@MLS_SkillS@15

; 2915 : 	{
; 2916 : 		gObjApplyBuffEffectDuration(lpObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  00191	53		 push	 ebx
  00192	6a 00		 push	 0
  00194	6a 00		 push	 0
  00196	51		 push	 ecx
  00197	6a 11		 push	 17			; 00000011H
  00199	6a 05		 push	 5
  0019b	56		 push	 esi
  0019c	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  001a1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2917 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  001a4	53		 push	 ebx
  001a5	68 d8 04 00 00	 push	 1240			; 000004d8H
  001aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001af	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001b4	8b 4d c4	 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
  001b7	50		 push	 eax
  001b8	51		 push	 ecx
  001b9	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2918 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001be	8b 45 c8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  001c1	8b 16		 mov	 edx, DWORD PTR [esi]
  001c3	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  001c7	6a 01		 push	 1
  001c9	52		 push	 edx
  001ca	51		 push	 ecx
  001cb	56		 push	 esi
  001cc	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001d1	83 c4 1c	 add	 esp, 28			; 0000001cH
  001d4	5f		 pop	 edi
  001d5	5b		 pop	 ebx
  001d6	5e		 pop	 esi

; 2931 : 			}
; 2932 : 		}
; 2933 : 	}
; 2934 : }

  001d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001da	33 cd		 xor	 ecx, ebp
  001dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c2 0c 00	 ret	 12			; 0000000cH
$LN6@MLS_SkillS@15:

; 2919 : 	}
; 2920 : 	else
; 2921 : 	{
; 2922 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  001e7	33 c9		 xor	 ecx, ecx
  001e9	89 4d cc	 mov	 DWORD PTR _n$217319[ebp], ecx
  001ec	8d 64 24 00	 npad	 4
$LL30@MLS_SkillS@15:

; 2923 : 		{
; 2924 : 			if( ApplyPartyIndex[n] != -1 )

  001f0	8b 44 8d d4	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ecx*4]
  001f4	83 f8 ff	 cmp	 eax, -1
  001f7	74 56		 je	 SHORT $LN3@MLS_SkillS@15

; 2925 : 			{
; 2926 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 2927 : 
; 2928 : 				gObjApplyBuffEffectDuration(lpPartyObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  001f9	8b 55 d0	 mov	 edx, DWORD PTR _addcriticaldamagevalue$[ebp]
  001fc	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00202	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00208	53		 push	 ebx
  00209	6a 00		 push	 0
  0020b	6a 00		 push	 0
  0020d	52		 push	 edx
  0020e	6a 11		 push	 17			; 00000011H
  00210	8b f8		 mov	 edi, eax
  00212	6a 05		 push	 5
  00214	57		 push	 edi
  00215	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0021a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2929 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  0021d	53		 push	 ebx
  0021e	68 d8 04 00 00	 push	 1240			; 000004d8H
  00223	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00228	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0022d	50		 push	 eax
  0022e	8b 07		 mov	 eax, DWORD PTR [edi]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2930 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  00236	8b 55 c8	 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00239	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0023b	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0023f	6a 01		 push	 1
  00241	51		 push	 ecx
  00242	50		 push	 eax
  00243	56		 push	 esi
  00244	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00249	8b 4d cc	 mov	 ecx, DWORD PTR _n$217319[ebp]
  0024c	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@MLS_SkillS@15:

; 2919 : 	}
; 2920 : 	else
; 2921 : 	{
; 2922 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0024f	41		 inc	 ecx
  00250	89 4d cc	 mov	 DWORD PTR _n$217319[ebp], ecx
  00253	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00256	7c 98		 jl	 SHORT $LL30@MLS_SkillS@15
  00258	5f		 pop	 edi
  00259	5b		 pop	 ebx
$LN2@MLS_SkillS@15:

; 2931 : 			}
; 2932 : 		}
; 2933 : 	}
; 2934 : }

  0025a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025d	33 cd		 xor	 ecx, ebp
  0025f	5e		 pop	 esi
  00260	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00265	8b e5		 mov	 esp, ebp
  00267	5d		 pop	 ebp
  00268	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$ = -64					; size = 4
_aIndex$GSCopy$ = -60					; size = 4
_lpMagic$GSCopy$ = -56					; size = 4
tv453 = -52						; size = 4
_this$GSCopy$ = -52					; size = 4
_n$217355 = -52						; size = 4
_addcriticaldamagevalue$ = -48				; size = 4
_n$217342 = -48						; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage, COMDAT
; _this$ = ecx

; 2937 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 2961 : 	{
; 2962 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2963 : 
; 2964 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00018	89 75 c4	 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  0001b	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00021	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	89 4d cc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002a	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 3005 : 	}
; 3006 : 	else
; 3007 : 	{
; 3008 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0002f	89 5d c8	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], ebx
  00032	74 0d		 je	 SHORT $LN25@MLS_SkillS@16

; 2938 : 	int skillSuccess = TRUE;
; 2939 : 	LPOBJ lpObj = &gObj[aIndex];
; 2940 : 
; 2941 : 	if( lpObj->Type != OBJ_USER &&
; 2942 : 		lpObj->m_RecallMon == -1 )

  00034	83 be 50 04 00
	00 ff		 cmp	 DWORD PTR [esi+1104], -1
  0003b	0f 84 2e 02 00
	00		 je	 $LN2@MLS_SkillS@16
$LN25@MLS_SkillS@16:

; 2943 : 		return;
; 2944 : 
; 2945 : 	if( lpObj->Class != CLASS_DARKLORD )

  00041	66 83 be b8 00
	00 00 04	 cmp	 WORD PTR [esi+184], 4
  00049	0f 85 20 02 00
	00		 jne	 $LN2@MLS_SkillS@16

; 2946 : 		return;
; 2947 : 
; 2948 : 	int number;
; 2949 : 	int partynum = 0;
; 2950 : 	int totallevel = 0;
; 2951 : 	int partycount;
; 2952 : 	int dis;
; 2953 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2954 : 	LPOBJ lpPartyObj;
; 2955 : 
; 2956 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  0004f	83 c8 ff	 or	 eax, -1
  00052	57		 push	 edi

; 2957 : 
; 2958 : 	partynum = lpObj->PartyNumber;

  00053	8b be 2c 04 00
	00		 mov	 edi, DWORD PTR [esi+1068]
  00059	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  0005c	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  0005f	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  00062	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  00065	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  00068	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  0006b	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  0006e	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  00071	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  00074	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax
  00077	89 7d c0	 mov	 DWORD PTR _partynum$[ebp], edi

; 2959 : 
; 2960 : 	if( partynum != -1 )

  0007a	3b f8		 cmp	 edi, eax
  0007c	74 5e		 je	 SHORT $LN27@MLS_SkillS@16

; 2961 : 	{
; 2962 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2963 : 
; 2964 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0007e	6b ff 68	 imul	 edi, 104		; 00000068H
  00081	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _n$217342[ebp], 0
  00088	81 c7 0c 00 00
	00		 add	 edi, OFFSET ?gParty@@3VPartyClass@@A+12
  0008e	8b ff		 npad	 2
$LL29@MLS_SkillS@16:

; 2965 : 		{
; 2966 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 07		 mov	 eax, DWORD PTR [edi]

; 2967 : 
; 2968 : 			if( number >= 0 )

  00092	85 c0		 test	 eax, eax
  00094	78 34		 js	 SHORT $LN13@MLS_SkillS@16

; 2969 : 			{
; 2970 : 				lpPartyObj = &gObj[number];

  00096	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0009c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a2	8b d8		 mov	 ebx, eax

; 2971 : 
; 2972 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  000a4	8a 86 49 01 00
	00		 mov	 al, BYTE PTR [esi+329]
  000aa	3a 83 49 01 00
	00		 cmp	 al, BYTE PTR [ebx+329]
  000b0	75 18		 jne	 SHORT $LN13@MLS_SkillS@16

; 2973 : 				{
; 2974 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000b2	53		 push	 ebx
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b9	83 c4 08	 add	 esp, 8

; 2975 : 
; 2976 : 					if( dis < 10 )

  000bc	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000bf	7d 09		 jge	 SHORT $LN13@MLS_SkillS@16

; 2977 : 					{
; 2978 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000c1	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c3	8b 55 d0	 mov	 edx, DWORD PTR _n$217342[ebp]
  000c6	89 4c 95 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+edx*4], ecx
$LN13@MLS_SkillS@16:

; 2961 : 	{
; 2962 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2963 : 
; 2964 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ca	8b 45 d0	 mov	 eax, DWORD PTR _n$217342[ebp]
  000cd	40		 inc	 eax
  000ce	83 c7 04	 add	 edi, 4
  000d1	89 45 d0	 mov	 DWORD PTR _n$217342[ebp], eax
  000d4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000d7	7c b7		 jl	 SHORT $LL29@MLS_SkillS@16
  000d9	8b 5d c8	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$[ebp]
$LN27@MLS_SkillS@16:

; 2979 : 					}
; 2980 : 				}
; 2981 : 			}
; 2982 : 		}
; 2983 : 	}
; 2984 : 
; 2985 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  000dc	0f b7 8e 18 01
	00 00		 movzx	 ecx, WORD PTR [esi+280]
  000e3	0f b7 86 1a 01
	00 00		 movzx	 eax, WORD PTR [esi+282]
  000ea	03 c1		 add	 eax, ecx
  000ec	0f b7 0d a4 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  000f3	99		 cdq
  000f4	f7 f9		 idiv	 ecx
  000f6	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  000fd	0f b7 3d a6 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238

; 2986 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  00104	6a 01		 push	 1
  00106	8b c8		 mov	 ecx, eax
  00108	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  0010f	03 c2		 add	 eax, edx
  00111	99		 cdq
  00112	f7 ff		 idiv	 edi
  00114	03 c8		 add	 ecx, eax
  00116	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00119	50		 push	 eax
  0011a	89 4d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx
  0011d	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00120	56		 push	 esi
  00121	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00126	da 45 d0	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  00129	e8 00 00 00 00	 call	 __ftol2_sse
  0012e	8b f8		 mov	 edi, eax

; 2987 : 	
; 2988 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  00130	66 a1 a8 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  00136	89 7d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], edi
  00139	66 85 c0	 test	 ax, ax
  0013c	74 0c		 je	 SHORT $LN8@MLS_SkillS@16
  0013e	0f b7 c0	 movzx	 eax, ax
  00141	3b f8		 cmp	 edi, eax
  00143	7e 05		 jle	 SHORT $LN8@MLS_SkillS@16

; 2989 : 	{
; 2990 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  00145	89 45 d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
  00148	8b f8		 mov	 edi, eax
$LN8@MLS_SkillS@16:

; 2991 : 	}
; 2992 : 	
; 2993 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv + this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0014a	0f b6 4b 04	 movzx	 ecx, BYTE PTR [ebx+4]
  0014e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00151	51		 push	 ecx
  00152	52		 push	 edx
  00153	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00158	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0015d	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00166	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0016d	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00174	03 c1		 add	 eax, ecx
  00176	0f b7 0d ac 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  0017d	99		 cdq
  0017e	f7 f9		 idiv	 ecx
  00180	0f b7 15 aa 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  00187	03 c2		 add	 eax, edx
  00189	89 45 cc	 mov	 DWORD PTR tv453[ebp], eax
  0018c	da 45 cc	 fiadd	 DWORD PTR tv453[ebp]
  0018f	e8 00 00 00 00	 call	 __ftol2_sse
  00194	8b d8		 mov	 ebx, eax

; 2994 : 
; 2995 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  00196	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  0019b	85 c0		 test	 eax, eax
  0019d	74 06		 je	 SHORT $LN7@MLS_SkillS@16
  0019f	3b d8		 cmp	 ebx, eax
  001a1	76 02		 jbe	 SHORT $LN7@MLS_SkillS@16

; 2996 : 	{
; 2997 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  001a3	8b d8		 mov	 ebx, eax
$LN7@MLS_SkillS@16:

; 2998 : 	}
; 2999 : 
; 3000 : 	if( partynum == -1 )

  001a5	83 7d c0 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  001a9	75 56		 jne	 SHORT $LN6@MLS_SkillS@16

; 3001 : 	{
; 3002 : 		gObjApplyBuffEffectDuration(lpObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  001ab	53		 push	 ebx
  001ac	6a 00		 push	 0
  001ae	6a 00		 push	 0
  001b0	57		 push	 edi
  001b1	6a 11		 push	 17			; 00000011H
  001b3	6a 05		 push	 5
  001b5	56		 push	 esi
  001b6	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  001bb	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3003 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  001be	53		 push	 ebx
  001bf	68 d8 04 00 00	 push	 1240			; 000004d8H
  001c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001c9	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001ce	50		 push	 eax
  001cf	8b 45 c4	 mov	 eax, DWORD PTR _aIndex$GSCopy$[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3004 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001d8	8b 55 c8	 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  001db	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001dd	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  001e1	6a 01		 push	 1
  001e3	51		 push	 ecx
  001e4	50		 push	 eax
  001e5	56		 push	 esi
  001e6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001eb	83 c4 1c	 add	 esp, 28			; 0000001cH
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	5b		 pop	 ebx

; 3017 : 			}
; 3018 : 		}
; 3019 : 	}
; 3020 : }

  001f1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f4	33 cd		 xor	 ecx, ebp
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c2 0c 00	 ret	 12			; 0000000cH
$LN6@MLS_SkillS@16:

; 3005 : 	}
; 3006 : 	else
; 3007 : 	{
; 3008 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00201	33 c9		 xor	 ecx, ecx
  00203	89 4d cc	 mov	 DWORD PTR _n$217355[ebp], ecx
$LL30@MLS_SkillS@16:

; 3009 : 		{
; 3010 : 			if( ApplyPartyIndex[n] != -1 )

  00206	8b 44 8d d4	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ecx*4]
  0020a	83 f8 ff	 cmp	 eax, -1
  0020d	74 56		 je	 SHORT $LN3@MLS_SkillS@16

; 3011 : 			{
; 3012 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 3013 : 
; 3014 : 				gObjApplyBuffEffectDuration(lpPartyObj,AT_INCREASE_CRITICAL_DMG,17,addcriticaldamagevalue,0,0,SkillTime);

  0020f	8b 4d d0	 mov	 ecx, DWORD PTR _addcriticaldamagevalue$[ebp]
  00212	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00218	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0021e	53		 push	 ebx
  0021f	6a 00		 push	 0
  00221	6a 00		 push	 0
  00223	51		 push	 ecx
  00224	6a 11		 push	 17			; 00000011H
  00226	8b f8		 mov	 edi, eax
  00228	6a 05		 push	 5
  0022a	57		 push	 edi
  0022b	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00230	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3015 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  00233	53		 push	 ebx
  00234	68 d8 04 00 00	 push	 1240			; 000004d8H
  00239	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0023e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00243	8b 17		 mov	 edx, DWORD PTR [edi]
  00245	50		 push	 eax
  00246	52		 push	 edx
  00247	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3016 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0024c	8b 4d c8	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  0024f	8b 07		 mov	 eax, DWORD PTR [edi]
  00251	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00255	6a 01		 push	 1
  00257	50		 push	 eax
  00258	52		 push	 edx
  00259	56		 push	 esi
  0025a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0025f	8b 4d cc	 mov	 ecx, DWORD PTR _n$217355[ebp]
  00262	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@MLS_SkillS@16:

; 3005 : 	}
; 3006 : 	else
; 3007 : 	{
; 3008 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00265	41		 inc	 ecx
  00266	89 4d cc	 mov	 DWORD PTR _n$217355[ebp], ecx
  00269	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0026c	7c 98		 jl	 SHORT $LL30@MLS_SkillS@16
  0026e	5f		 pop	 edi
$LN2@MLS_SkillS@16:

; 3017 : 			}
; 3018 : 		}
; 3019 : 	}
; 3020 : }

  0026f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00272	5e		 pop	 esi
  00273	33 cd		 xor	 ecx, ebp
  00275	5b		 pop	 ebx
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_fSkillValue$ = -72					; size = 4
_aIndex$GSCopy$ = -68					; size = 4
_partynum$ = -64					; size = 4
_lpMagic$GSCopy$ = -60					; size = 4
tv456 = -56						; size = 4
_n$217393 = -56						; size = 4
_this$GSCopy$ = -52					; size = 4
_fRate$ = -52						; size = 4
_addcriticaldamagevalue$ = -48				; size = 4
_n$217378 = -48						; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage, COMDAT
; _this$ = ecx

; 3023 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3081 : 
; 3082 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  00010	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00018	89 75 bc	 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  0001b	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00021	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	8b d9		 mov	 ebx, ecx
  00029	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0002e	89 5d cc	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00031	89 45 c4	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], eax
  00034	74 0d		 je	 SHORT $LN25@MLS_SkillM@5

; 3024 : 		int skillSuccess = TRUE;
; 3025 : 	LPOBJ lpObj = &gObj[aIndex];
; 3026 : 
; 3027 : 	if( lpObj->Type != OBJ_USER &&
; 3028 : 		lpObj->m_RecallMon == -1 )

  00036	83 be 50 04 00
	00 ff		 cmp	 DWORD PTR [esi+1104], -1
  0003d	0f 84 57 02 00
	00		 je	 $LN2@MLS_SkillM@5
$LN25@MLS_SkillM@5:

; 3029 : 		return;
; 3030 : 
; 3031 : 	if( lpObj->Class != CLASS_DARKLORD )

  00043	66 83 be b8 00
	00 00 04	 cmp	 WORD PTR [esi+184], 4
  0004b	0f 85 49 02 00
	00		 jne	 $LN2@MLS_SkillM@5

; 3032 : 		return;
; 3033 : 
; 3034 : 	int number;
; 3035 : 	int partynum = 0;
; 3036 : 	int totallevel = 0;
; 3037 : 	int partycount;
; 3038 : 	int dis;
; 3039 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 3040 : 	LPOBJ lpPartyObj;
; 3041 : 
; 3042 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  00051	83 c8 ff	 or	 eax, -1
  00054	57		 push	 edi

; 3043 : 
; 3044 : 	partynum = lpObj->PartyNumber;

  00055	8b be 2c 04 00
	00		 mov	 edi, DWORD PTR [esi+1068]
  0005b	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  0005e	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  00061	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  00064	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  00067	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  0006a	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  0006d	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  00070	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  00073	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  00076	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax
  00079	89 7d c0	 mov	 DWORD PTR _partynum$[ebp], edi

; 3045 : 
; 3046 : 	if( partynum != -1 )

  0007c	3b f8		 cmp	 edi, eax
  0007e	74 5c		 je	 SHORT $LN12@MLS_SkillM@5

; 3047 : 	{
; 3048 : 		partycount = gParty.m_PartyS[partynum].Count;
; 3049 : 
; 3050 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00080	6b ff 68	 imul	 edi, 104		; 00000068H
  00083	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _n$217378[ebp], 0
  0008a	81 c7 0c 00 00
	00		 add	 edi, OFFSET ?gParty@@3VPartyClass@@A+12
$LL28@MLS_SkillM@5:

; 3051 : 		{
; 3052 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 07		 mov	 eax, DWORD PTR [edi]

; 3053 : 
; 3054 : 			if( number >= 0 )

  00092	85 c0		 test	 eax, eax
  00094	78 34		 js	 SHORT $LN13@MLS_SkillM@5

; 3055 : 			{
; 3056 : 				lpPartyObj = &gObj[number];
; 3057 : 
; 3058 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  00096	8a 8e 49 01 00
	00		 mov	 cl, BYTE PTR [esi+329]
  0009c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000a2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	8b d8		 mov	 ebx, eax
  000aa	3a 8b 49 01 00
	00		 cmp	 cl, BYTE PTR [ebx+329]
  000b0	75 18		 jne	 SHORT $LN13@MLS_SkillM@5

; 3059 : 				{
; 3060 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000b2	53		 push	 ebx
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b9	83 c4 08	 add	 esp, 8

; 3061 : 
; 3062 : 					if( dis < 10 )

  000bc	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000bf	7d 09		 jge	 SHORT $LN13@MLS_SkillM@5

; 3063 : 					{
; 3064 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000c1	8b 13		 mov	 edx, DWORD PTR [ebx]
  000c3	8b 45 d0	 mov	 eax, DWORD PTR _n$217378[ebp]
  000c6	89 54 85 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN13@MLS_SkillM@5:

; 3047 : 	{
; 3048 : 		partycount = gParty.m_PartyS[partynum].Count;
; 3049 : 
; 3050 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ca	8b 45 d0	 mov	 eax, DWORD PTR _n$217378[ebp]
  000cd	40		 inc	 eax
  000ce	83 c7 04	 add	 edi, 4
  000d1	89 45 d0	 mov	 DWORD PTR _n$217378[ebp], eax
  000d4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000d7	7c b7		 jl	 SHORT $LL28@MLS_SkillM@5
  000d9	8b 5d cc	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
$LN12@MLS_SkillM@5:

; 3065 : 					}
; 3066 : 				}
; 3067 : 			}
; 3068 : 		}
; 3069 : 	}
; 3070 : 
; 3071 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  000dc	0f b7 8e 18 01
	00 00		 movzx	 ecx, WORD PTR [esi+280]
  000e3	0f b7 86 1a 01
	00 00		 movzx	 eax, WORD PTR [esi+282]
  000ea	03 c1		 add	 eax, ecx
  000ec	0f b7 0d a4 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  000f3	99		 cdq
  000f4	f7 f9		 idiv	 ecx
  000f6	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  000fd	0f b7 3d a6 0c
	00 00		 movzx	 edi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238

; 3072 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  00104	6a 02		 push	 2
  00106	8b c8		 mov	 ecx, eax
  00108	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  0010f	03 c2		 add	 eax, edx
  00111	99		 cdq
  00112	f7 ff		 idiv	 edi
  00114	8b 7d c4	 mov	 edi, DWORD PTR _lpMagic$GSCopy$[ebp]
  00117	03 c8		 add	 ecx, eax
  00119	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0011c	50		 push	 eax
  0011d	89 4d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx
  00120	56		 push	 esi
  00121	8b cb		 mov	 ecx, ebx
  00123	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00128	da 45 d0	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  0012b	e8 00 00 00 00	 call	 __ftol2_sse
  00130	8b c8		 mov	 ecx, eax

; 3073 : 	
; 3074 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  00132	66 a1 a8 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  00138	89 4d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx
  0013b	66 85 c0	 test	 ax, ax
  0013e	74 0a		 je	 SHORT $LN8@MLS_SkillM@5
  00140	0f b7 c0	 movzx	 eax, ax
  00143	3b c8		 cmp	 ecx, eax
  00145	7e 03		 jle	 SHORT $LN8@MLS_SkillM@5

; 3075 : 	{
; 3076 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  00147	89 45 d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
$LN8@MLS_SkillM@5:

; 3077 : 	}
; 3078 : 	
; 3079 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  0014a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0014d	6a 01		 push	 1
  0014f	51		 push	 ecx
  00150	56		 push	 esi
  00151	8b cb		 mov	 ecx, ebx
  00153	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00158	d9 5d b8	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 3080 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv + fSkillValue;

  0015b	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00162	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00169	0f b7 0d ac 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  00170	03 c2		 add	 eax, edx
  00172	99		 cdq
  00173	f7 f9		 idiv	 ecx
  00175	0f b7 15 aa 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  0017c	03 c2		 add	 eax, edx
  0017e	89 45 c8	 mov	 DWORD PTR tv456[ebp], eax
  00181	db 45 c8	 fild	 DWORD PTR tv456[ebp]
  00184	d8 45 b8	 fadd	 DWORD PTR _fSkillValue$[ebp]
  00187	e8 00 00 00 00	 call	 __ftol2_sse
  0018c	8b d8		 mov	 ebx, eax

; 3081 : 
; 3082 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  0018e	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  00193	85 c0		 test	 eax, eax
  00195	74 06		 je	 SHORT $LN7@MLS_SkillM@5
  00197	3b d8		 cmp	 ebx, eax
  00199	76 02		 jbe	 SHORT $LN7@MLS_SkillM@5

; 3083 : 	{
; 3084 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  0019b	8b d8		 mov	 ebx, eax
$LN7@MLS_SkillM@5:

; 3085 : 	}
; 3086 : 
; 3087 : 	float fRate = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0019d	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  001a1	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001a4	50		 push	 eax
  001a5	51		 push	 ecx
  001a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001ab	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001b0	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 3088 : 
; 3089 : 	if( partynum == -1 )

  001b9	83 7d c0 ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  001bd	d9 5d cc	 fstp	 DWORD PTR _fRate$[ebp]
  001c0	75 60		 jne	 SHORT $LN6@MLS_SkillM@5

; 3090 : 	{
; 3091 : 		gObjApplyBuffEffectDuration(lpObj,148,17,addcriticaldamagevalue,55,fRate,SkillTime);

  001c2	d9 45 cc	 fld	 DWORD PTR _fRate$[ebp]
  001c5	53		 push	 ebx
  001c6	e8 00 00 00 00	 call	 __ftol2_sse
  001cb	8b 55 d0	 mov	 edx, DWORD PTR _addcriticaldamagevalue$[ebp]
  001ce	50		 push	 eax
  001cf	6a 37		 push	 55			; 00000037H
  001d1	52		 push	 edx
  001d2	6a 11		 push	 17			; 00000011H
  001d4	68 94 00 00 00	 push	 148			; 00000094H
  001d9	56		 push	 esi
  001da	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  001df	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3092 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  001e2	53		 push	 ebx
  001e3	68 d8 04 00 00	 push	 1240			; 000004d8H
  001e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001ed	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001f2	50		 push	 eax
  001f3	8b 45 bc	 mov	 eax, DWORD PTR _aIndex$GSCopy$[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3093 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001fc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001fe	0f b7 57 08	 movzx	 edx, WORD PTR [edi+8]
  00202	6a 01		 push	 1
  00204	51		 push	 ecx
  00205	52		 push	 edx
  00206	56		 push	 esi
  00207	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0020c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0020f	5f		 pop	 edi
  00210	5e		 pop	 esi
  00211	5b		 pop	 ebx

; 3106 : 			}
; 3107 : 		}
; 3108 : 	}
; 3109 : }

  00212	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00215	33 cd		 xor	 ecx, ebp
  00217	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c2 0c 00	 ret	 12			; 0000000cH
$LN6@MLS_SkillM@5:

; 3094 : 	}
; 3095 : 	else
; 3096 : 	{
; 3097 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00222	33 c9		 xor	 ecx, ecx
  00224	89 4d c8	 mov	 DWORD PTR _n$217393[ebp], ecx
$LL29@MLS_SkillM@5:

; 3098 : 		{
; 3099 : 			if( ApplyPartyIndex[n] != -1 )

  00227	8b 44 8d d4	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ecx*4]
  0022b	83 f8 ff	 cmp	 eax, -1
  0022e	74 60		 je	 SHORT $LN3@MLS_SkillM@5

; 3100 : 			{
; 3101 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 3102 : 
; 3103 : 				gObjApplyBuffEffectDuration(lpPartyObj,148,17,addcriticaldamagevalue,55,fRate,SkillTime);

  00230	d9 45 cc	 fld	 DWORD PTR _fRate$[ebp]
  00233	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00239	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023f	53		 push	 ebx
  00240	8b f8		 mov	 edi, eax
  00242	e8 00 00 00 00	 call	 __ftol2_sse
  00247	50		 push	 eax
  00248	8b 45 d0	 mov	 eax, DWORD PTR _addcriticaldamagevalue$[ebp]
  0024b	6a 37		 push	 55			; 00000037H
  0024d	50		 push	 eax
  0024e	6a 11		 push	 17			; 00000011H
  00250	68 94 00 00 00	 push	 148			; 00000094H
  00255	57		 push	 edi
  00256	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0025b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3104 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  0025e	53		 push	 ebx
  0025f	68 d8 04 00 00	 push	 1240			; 000004d8H
  00264	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00269	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0026e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00270	50		 push	 eax
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3105 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  00277	8b 45 c4	 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  0027a	8b 17		 mov	 edx, DWORD PTR [edi]
  0027c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00280	6a 01		 push	 1
  00282	52		 push	 edx
  00283	51		 push	 ecx
  00284	56		 push	 esi
  00285	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0028a	8b 4d c8	 mov	 ecx, DWORD PTR _n$217393[ebp]
  0028d	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@MLS_SkillM@5:

; 3094 : 	}
; 3095 : 	else
; 3096 : 	{
; 3097 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00290	41		 inc	 ecx
  00291	89 4d c8	 mov	 DWORD PTR _n$217393[ebp], ecx
  00294	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00297	7c 8e		 jl	 SHORT $LL29@MLS_SkillM@5
  00299	5f		 pop	 edi
$LN2@MLS_SkillM@5:

; 3106 : 			}
; 3107 : 		}
; 3108 : 	}
; 3109 : }

  0029a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029d	5e		 pop	 esi
  0029e	33 cd		 xor	 ecx, ebp
  002a0	5b		 pop	 ebx
  002a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
_TEXT	ENDS
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$GSCopy$ = -72					; size = 4
_partynum$ = -68					; size = 4
_lpMagic$GSCopy$ = -64					; size = 4
tv500 = -60						; size = 4
_n$217432 = -60						; size = 4
_fRate$ = -56						; size = 4
_fSkillValue$ = -56					; size = 4
_this$GSCopy$ = -52					; size = 4
_fExcRate$ = -52					; size = 4
_addcriticaldamagevalue$ = -48				; size = 4
_n$217416 = -48						; size = 4
_ApplyPartyIndex$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage, COMDAT
; _this$ = ecx

; 3112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3170 : 
; 3171 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  00010	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00018	89 7d b8	 mov	 DWORD PTR _aIndex$GSCopy$[ebp], edi
  0001b	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00021	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	8b d9		 mov	 ebx, ecx
  00029	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0002e	89 5d cc	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00031	89 45 c0	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], eax
  00034	74 0d		 je	 SHORT $LN25@MLS_SkillF@5

; 3113 : 	int skillSuccess = TRUE;
; 3114 : 	LPOBJ lpObj = &gObj[aIndex];
; 3115 : 
; 3116 : 	if( lpObj->Type != OBJ_USER &&
; 3117 : 		lpObj->m_RecallMon == -1 )

  00036	83 bf 50 04 00
	00 ff		 cmp	 DWORD PTR [edi+1104], -1
  0003d	0f 84 99 02 00
	00		 je	 $LN2@MLS_SkillF@5
$LN25@MLS_SkillF@5:

; 3118 : 		return;
; 3119 : 
; 3120 : 	if( lpObj->Class != CLASS_DARKLORD )

  00043	66 83 bf b8 00
	00 00 04	 cmp	 WORD PTR [edi+184], 4
  0004b	0f 85 8b 02 00
	00		 jne	 $LN2@MLS_SkillF@5

; 3121 : 		return;
; 3122 : 
; 3123 : 	int number;
; 3124 : 	int partynum = 0;
; 3125 : 	int totallevel = 0;
; 3126 : 	int partycount;
; 3127 : 	int dis;
; 3128 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 3129 : 	LPOBJ lpPartyObj;
; 3130 : 
; 3131 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));

  00051	83 c8 ff	 or	 eax, -1
  00054	56		 push	 esi

; 3132 : 
; 3133 : 	partynum = lpObj->PartyNumber;

  00055	8b b7 2c 04 00
	00		 mov	 esi, DWORD PTR [edi+1068]
  0005b	89 45 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp], eax
  0005e	89 45 d8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+4], eax
  00061	89 45 dc	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+8], eax
  00064	89 45 e0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+12], eax
  00067	89 45 e4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], eax
  0006a	89 45 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+20], eax
  0006d	89 45 ec	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+24], eax
  00070	89 45 f0	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+28], eax
  00073	89 45 f4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+32], eax
  00076	89 45 f8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+36], eax
  00079	89 75 bc	 mov	 DWORD PTR _partynum$[ebp], esi

; 3134 : 
; 3135 : 	if( partynum != -1 )

  0007c	3b f0		 cmp	 esi, eax
  0007e	74 5c		 je	 SHORT $LN12@MLS_SkillF@5

; 3136 : 	{
; 3137 : 		partycount = gParty.m_PartyS[partynum].Count;
; 3138 : 
; 3139 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00080	6b f6 68	 imul	 esi, 104		; 00000068H
  00083	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _n$217416[ebp], 0
  0008a	81 c6 0c 00 00
	00		 add	 esi, OFFSET ?gParty@@3VPartyClass@@A+12
$LL28@MLS_SkillF@5:

; 3140 : 		{
; 3141 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 06		 mov	 eax, DWORD PTR [esi]

; 3142 : 
; 3143 : 			if( number >= 0 )

  00092	85 c0		 test	 eax, eax
  00094	78 34		 js	 SHORT $LN13@MLS_SkillF@5

; 3144 : 			{
; 3145 : 				lpPartyObj = &gObj[number];
; 3146 : 
; 3147 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  00096	8a 8f 49 01 00
	00		 mov	 cl, BYTE PTR [edi+329]
  0009c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000a2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	8b d8		 mov	 ebx, eax
  000aa	3a 8b 49 01 00
	00		 cmp	 cl, BYTE PTR [ebx+329]
  000b0	75 18		 jne	 SHORT $LN13@MLS_SkillF@5

; 3148 : 				{
; 3149 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000b2	53		 push	 ebx
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b9	83 c4 08	 add	 esp, 8

; 3150 : 
; 3151 : 					if( dis < 10 )

  000bc	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000bf	7d 09		 jge	 SHORT $LN13@MLS_SkillF@5

; 3152 : 					{
; 3153 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000c1	8b 13		 mov	 edx, DWORD PTR [ebx]
  000c3	8b 45 d0	 mov	 eax, DWORD PTR _n$217416[ebp]
  000c6	89 54 85 d4	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+eax*4], edx
$LN13@MLS_SkillF@5:

; 3136 : 	{
; 3137 : 		partycount = gParty.m_PartyS[partynum].Count;
; 3138 : 
; 3139 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ca	8b 45 d0	 mov	 eax, DWORD PTR _n$217416[ebp]
  000cd	40		 inc	 eax
  000ce	83 c6 04	 add	 esi, 4
  000d1	89 45 d0	 mov	 DWORD PTR _n$217416[ebp], eax
  000d4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000d7	7c b7		 jl	 SHORT $LL28@MLS_SkillF@5
  000d9	8b 5d cc	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
$LN12@MLS_SkillF@5:

; 3154 : 					}
; 3155 : 				}
; 3156 : 			}
; 3157 : 		}
; 3158 : 	}
; 3159 : 
; 3160 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv2 + (lpObj->Leadership+lpObj->AddLeadership)/g_SkillAdditionInfo.m_CriticalDamageEffectDiv1;

  000dc	0f b7 8f 18 01
	00 00		 movzx	 ecx, WORD PTR [edi+280]
  000e3	0f b7 87 1a 01
	00 00		 movzx	 eax, WORD PTR [edi+282]
  000ea	03 c1		 add	 eax, ecx
  000ec	0f b7 0d a4 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3236
  000f3	99		 cdq
  000f4	f7 f9		 idiv	 ecx
  000f6	0f b7 97 fa 00
	00 00		 movzx	 edx, WORD PTR [edi+250]
  000fd	0f b7 35 a6 0c
	00 00		 movzx	 esi, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3238

; 3161 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,3);

  00104	6a 03		 push	 3
  00106	8b c8		 mov	 ecx, eax
  00108	0f bf 87 26 01
	00 00		 movsx	 eax, WORD PTR [edi+294]
  0010f	03 c2		 add	 eax, edx
  00111	99		 cdq
  00112	f7 fe		 idiv	 esi
  00114	8b 75 c0	 mov	 esi, DWORD PTR _lpMagic$GSCopy$[ebp]
  00117	03 c8		 add	 ecx, eax
  00119	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0011c	50		 push	 eax
  0011d	89 4d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx
  00120	57		 push	 edi
  00121	8b cb		 mov	 ecx, ebx
  00123	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00128	da 45 d0	 fiadd	 DWORD PTR _addcriticaldamagevalue$[ebp]
  0012b	e8 00 00 00 00	 call	 __ftol2_sse

; 3162 : 	
; 3163 : 	if( g_SkillAdditionInfo.m_CriticalDamageEffectMax > 0 && addcriticaldamagevalue > g_SkillAdditionInfo.m_CriticalDamageEffectMax )

  00130	66 8b 0d a8 0c
	00 00		 mov	 cx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3240
  00137	89 45 d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], eax
  0013a	66 85 c9	 test	 cx, cx
  0013d	74 0a		 je	 SHORT $LN8@MLS_SkillF@5
  0013f	0f b7 c9	 movzx	 ecx, cx
  00142	3b c1		 cmp	 eax, ecx
  00144	7e 03		 jle	 SHORT $LN8@MLS_SkillF@5

; 3164 : 	{
; 3165 : 		addcriticaldamagevalue = g_SkillAdditionInfo.m_CriticalDamageEffectMax;

  00146	89 4d d0	 mov	 DWORD PTR _addcriticaldamagevalue$[ebp], ecx
$LN8@MLS_SkillF@5:

; 3166 : 	}
; 3167 : 	
; 3168 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  00149	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014c	6a 02		 push	 2
  0014e	51		 push	 ecx
  0014f	57		 push	 edi
  00150	8b cb		 mov	 ecx, ebx
  00152	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00157	d9 5d c8	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 3169 : 	int SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeStart + (lpObj->Energy+lpObj->AddEnergy)/g_SkillAdditionInfo.m_CriticalDamageTimeDiv + fSkillValue;

  0015a	0f b7 97 fa 00
	00 00		 movzx	 edx, WORD PTR [edi+250]
  00161	0f bf 87 26 01
	00 00		 movsx	 eax, WORD PTR [edi+294]
  00168	0f b7 0d ac 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3244
  0016f	03 c2		 add	 eax, edx
  00171	99		 cdq
  00172	f7 f9		 idiv	 ecx
  00174	0f b7 15 aa 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3242
  0017b	03 c2		 add	 eax, edx
  0017d	89 45 c4	 mov	 DWORD PTR tv500[ebp], eax
  00180	db 45 c4	 fild	 DWORD PTR tv500[ebp]
  00183	d8 45 c8	 fadd	 DWORD PTR _fSkillValue$[ebp]
  00186	e8 00 00 00 00	 call	 __ftol2_sse
  0018b	8b d8		 mov	 ebx, eax

; 3170 : 
; 3171 : 	if( g_SkillAdditionInfo.m_CriticalDamageTimeMax > 0 && SkillTime > g_SkillAdditionInfo.m_CriticalDamageTimeMax )

  0018d	a1 b0 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3248
  00192	85 c0		 test	 eax, eax
  00194	74 06		 je	 SHORT $LN7@MLS_SkillF@5
  00196	3b d8		 cmp	 ebx, eax
  00198	76 02		 jbe	 SHORT $LN7@MLS_SkillF@5

; 3172 : 	{
; 3173 : 		SkillTime = g_SkillAdditionInfo.m_CriticalDamageTimeMax;

  0019a	8b d8		 mov	 ebx, eax
$LN7@MLS_SkillF@5:

; 3174 : 	}
; 3175 : 
; 3176 : 	float fRate = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  0019c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0019f	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001a2	6a 01		 push	 1
  001a4	50		 push	 eax
  001a5	57		 push	 edi
  001a6	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  001ab	d9 5d c8	 fstp	 DWORD PTR _fRate$[ebp]

; 3177 : 	float fExcRate = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  001ae	0f b6 4e 04	 movzx	 ecx, BYTE PTR [esi+4]
  001b2	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  001b5	51		 push	 ecx
  001b6	52		 push	 edx
  001b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001bc	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001c1	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 3178 : 
; 3179 : 	if( partynum == -1 )

  001ca	83 7d bc ff	 cmp	 DWORD PTR _partynum$[ebp], -1
  001ce	d9 5d cc	 fstp	 DWORD PTR _fExcRate$[ebp]
  001d1	75 77		 jne	 SHORT $LN6@MLS_SkillF@5

; 3180 : 	{
; 3181 : 		gObjApplyBuffEffectDuration(lpObj,149,17,addcriticaldamagevalue,55,fRate,SkillTime);

  001d3	d9 45 c8	 fld	 DWORD PTR _fRate$[ebp]
  001d6	53		 push	 ebx
  001d7	e8 00 00 00 00	 call	 __ftol2_sse
  001dc	50		 push	 eax
  001dd	8b 45 d0	 mov	 eax, DWORD PTR _addcriticaldamagevalue$[ebp]
  001e0	6a 37		 push	 55			; 00000037H
  001e2	50		 push	 eax
  001e3	6a 11		 push	 17			; 00000011H
  001e5	68 95 00 00 00	 push	 149			; 00000095H
  001ea	57		 push	 edi
  001eb	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  001f0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3182 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  001f3	53		 push	 ebx
  001f4	68 d8 04 00 00	 push	 1240			; 000004d8H
  001f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001fe	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00203	8b 4d b8	 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
  00206	50		 push	 eax
  00207	51		 push	 ecx
  00208	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3183 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0020d	8b 17		 mov	 edx, DWORD PTR [edi]
  0020f	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00213	6a 01		 push	 1
  00215	52		 push	 edx
  00216	50		 push	 eax
  00217	57		 push	 edi
  00218	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3184 : 		lpObj->m_MPSkillOpt.MpsCritBuffExcDamage += fExcRate;
; 3185 : 		gObjCalCharacter(lpObj->m_Index);

  0021d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0021f	d9 45 cc	 fld	 DWORD PTR _fExcRate$[ebp]
  00222	51		 push	 ecx
  00223	d8 87 88 27 00
	00		 fadd	 DWORD PTR [edi+10120]
  00229	d9 9f 88 27 00
	00		 fstp	 DWORD PTR [edi+10120]
  0022f	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00234	83 c4 20	 add	 esp, 32			; 00000020H
  00237	5e		 pop	 esi
  00238	5f		 pop	 edi
  00239	5b		 pop	 ebx

; 3200 : 			}
; 3201 : 		}
; 3202 : 	}
; 3203 : }

  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023d	33 cd		 xor	 ecx, ebp
  0023f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00244	8b e5		 mov	 esp, ebp
  00246	5d		 pop	 ebp
  00247	c2 0c 00	 ret	 12			; 0000000cH
$LN6@MLS_SkillF@5:

; 3186 : 	}
; 3187 : 	else
; 3188 : 	{
; 3189 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0024a	33 c0		 xor	 eax, eax
  0024c	89 45 c4	 mov	 DWORD PTR _n$217432[ebp], eax
  0024f	90		 npad	 1
$LL4@MLS_SkillF@5:

; 3190 : 		{
; 3191 : 			if( ApplyPartyIndex[n] != -1 )

  00250	8b 74 85 d4	 mov	 esi, DWORD PTR _ApplyPartyIndex$[ebp+eax*4]
  00254	83 fe ff	 cmp	 esi, -1
  00257	74 75		 je	 SHORT $LN3@MLS_SkillF@5

; 3192 : 			{
; 3193 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 3194 : 
; 3195 : 				gObjApplyBuffEffectDuration(lpPartyObj,149,17,addcriticaldamagevalue,55,fRate,SkillTime);

  00259	d9 45 c8	 fld	 DWORD PTR _fRate$[ebp]
  0025c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00262	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00268	53		 push	 ebx
  00269	e8 00 00 00 00	 call	 __ftol2_sse
  0026e	8b 55 d0	 mov	 edx, DWORD PTR _addcriticaldamagevalue$[ebp]
  00271	50		 push	 eax
  00272	6a 37		 push	 55			; 00000037H
  00274	52		 push	 edx
  00275	6a 11		 push	 17			; 00000011H
  00277	68 95 00 00 00	 push	 149			; 00000095H
  0027c	56		 push	 esi
  0027d	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00282	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3196 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  00285	53		 push	 ebx
  00286	68 d8 04 00 00	 push	 1240			; 000004d8H
  0028b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00290	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00295	50		 push	 eax
  00296	8b 06		 mov	 eax, DWORD PTR [esi]
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3197 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0029e	8b 55 c0	 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  002a1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a3	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  002a7	6a 01		 push	 1
  002a9	51		 push	 ecx
  002aa	50		 push	 eax
  002ab	57		 push	 edi
  002ac	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3198 : 				lpPartyObj->m_MPSkillOpt.MpsCritBuffExcDamage += fExcRate;
; 3199 : 				gObjCalCharacter(lpPartyObj->m_Index);

  002b1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002b3	d9 86 88 27 00
	00		 fld	 DWORD PTR [esi+10120]
  002b9	51		 push	 ecx
  002ba	d8 45 cc	 fadd	 DWORD PTR _fExcRate$[ebp]
  002bd	d9 9e 88 27 00
	00		 fstp	 DWORD PTR [esi+10120]
  002c3	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  002c8	8b 45 c4	 mov	 eax, DWORD PTR _n$217432[ebp]
  002cb	83 c4 20	 add	 esp, 32			; 00000020H
$LN3@MLS_SkillF@5:

; 3186 : 	}
; 3187 : 	else
; 3188 : 	{
; 3189 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  002ce	40		 inc	 eax
  002cf	89 45 c4	 mov	 DWORD PTR _n$217432[ebp], eax
  002d2	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002d5	0f 8c 75 ff ff
	ff		 jl	 $LL4@MLS_SkillF@5
  002db	5e		 pop	 esi
$LN2@MLS_SkillF@5:

; 3200 : 			}
; 3201 : 		}
; 3202 : 	}
; 3203 : }

  002dc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002df	5f		 pop	 edi
  002e0	33 cd		 xor	 ecx, ebp
  002e2	5b		 pop	 ebx
  002e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
EXTRN	?SkillSpearHitBox@@3VCSkillHitBox@@A:BYTE	; SkillSpearHitBox
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_iangle$ = -8						; size = 4
_DuelIndex$ = -4					; size = 4
tv67 = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear, COMDAT
; _this$ = ecx

; 3388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3389 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	53		 push	 ebx

; 3390 : 	int StartDis = 1;
; 3391 : 	int tObjNum;
; 3392 : 
; 3393 : 	int iangle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00013	57		 push	 edi
  00014	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001a	8b fb		 mov	 edi, ebx
  0001c	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00022	0f bf 94 07 46
	01 00 00	 movsx	 edx, WORD PTR [edi+eax+326]
  0002a	03 f0		 add	 esi, eax
  0002c	0f bf 84 07 44
	01 00 00	 movsx	 eax, WORD PTR [edi+eax+324]
  00034	52		 push	 edx
  00035	0f bf 96 46 01
	00 00		 movsx	 edx, WORD PTR [esi+326]
  0003c	50		 push	 eax
  0003d	0f bf 86 44 01
	00 00		 movsx	 eax, WORD PTR [esi+324]
  00044	52		 push	 edx
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle

; 3394 : 	int count = 0;
; 3395 : 	int loopcount = 0;
; 3396 : 	int attackcheck;
; 3397 : 
; 3398 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0004b	6a 01		 push	 1
  0004d	53		 push	 ebx
  0004e	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00051	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  00055	51		 push	 ecx
  00056	56		 push	 esi
  00057	89 45 f8	 mov	 DWORD PTR _iangle$[ebp], eax
  0005a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 3399 : 
; 3400 : 	if(lpObj->SkillLongSpearChange == 0)

  00062	80 be 7a 12 00
	00 00		 cmp	 BYTE PTR [esi+4730], 0
  00069	75 2b		 jne	 SHORT $LN22@MLS_SkillS@17

; 3401 : 	{
; 3402 : 		gObjAttack(lpObj,&gObj[aTargetIndex],lpMagic,0,1,0,0,0,0);

  0006b	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00071	6a 00		 push	 0
  00073	6a 00		 push	 0
  00075	6a 00		 push	 0
  00077	6a 00		 push	 0
  00079	6a 01		 push	 1
  0007b	6a 00		 push	 0
  0007d	53		 push	 ebx
  0007e	57		 push	 edi
  0007f	56		 push	 esi
  00080	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00085	83 c4 24	 add	 esp, 36			; 00000024H
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi

; 3473 : 		{
; 3474 : 			break;
; 3475 : 		}
; 3476 : 	}
; 3477 : 	return true;

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	5b		 pop	 ebx

; 3478 : }

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
$LN22@MLS_SkillS@17:

; 3403 : 		return true;
; 3404 : 	}
; 3405 : 
; 3406 : 	int DuelIndex = lpObj->m_iDuelUser;

  00096	8b 86 b8 0e 00
	00		 mov	 eax, DWORD PTR [esi+3768]
  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a2	89 45 fc	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  000a5	8d 9e b0 08 00
	00		 lea	 ebx, DWORD PTR [esi+2224]
  000ab	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv67[ebp], 75	; 0000004bH
$LL21@MLS_SkillS@17:

; 3407 : 	int EnableAttack;
; 3408 : 
; 3409 : 	while ( true )
; 3410 : 	{
; 3411 : 		if(lpObj->VpPlayer2[count].state != 0)

  000b2	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  000b6	0f 84 0a 01 00
	00		 je	 $LN34@MLS_SkillS@17

; 3412 : 		{
; 3413 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000bc	0f bf 7b fe	 movsx	 edi, WORD PTR [ebx-2]

; 3414 : 
; 3415 : 			if(tObjNum >= 0)

  000c0	85 ff		 test	 edi, edi
  000c2	0f 88 fe 00 00
	00		 js	 $LN34@MLS_SkillS@17

; 3416 : 			{
; 3417 : 				EnableAttack = 0;
; 3418 : 
; 3419 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000c8	8a 03		 mov	 al, BYTE PTR [ebx]
  000ca	3c 02		 cmp	 al, 2
  000cc	75 16		 jne	 SHORT $LN17@MLS_SkillS@17
  000ce	8b d7		 mov	 edx, edi
  000d0	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000d6	83 bc 0a 50 04
	00 00 00	 cmp	 DWORD PTR [edx+ecx+1104], 0

; 3420 : 				{
; 3421 : 					EnableAttack = 1;

  000de	0f 8c 82 00 00
	00		 jl	 $LN14@MLS_SkillS@17
$LN17@MLS_SkillS@17:

; 3422 : 				}
; 3423 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000e4	3b 7d 0c	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  000e7	74 7d		 je	 SHORT $LN14@MLS_SkillS@17
  000e9	39 7d fc	 cmp	 DWORD PTR _DuelIndex$[ebp], edi
  000ec	74 78		 je	 SHORT $LN14@MLS_SkillS@17

; 3424 : 				{
; 3425 : 					EnableAttack = 1;
; 3426 : 				}
; 3427 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000ee	3c 03		 cmp	 al, 3
  000f0	74 30		 je	 SHORT $LN12@MLS_SkillS@17
  000f2	8b c7		 mov	 eax, edi
  000f4	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000fa	03 c1		 add	 eax, ecx
  000fc	80 b8 49 01 00
	00 1e		 cmp	 BYTE PTR [eax+329], 30	; 0000001eH
  00103	75 1d		 jne	 SHORT $LN12@MLS_SkillS@17
  00105	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  0010c	75 14		 jne	 SHORT $LN12@MLS_SkillS@17

; 3428 : 				{
; 3429 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0010e	8a 96 02 1c 00
	00		 mov	 dl, BYTE PTR [esi+7170]
  00114	3a 90 02 1c 00
	00		 cmp	 dl, BYTE PTR [eax+7170]
  0011a	0f 84 a6 00 00
	00		 je	 $LN34@MLS_SkillS@17

; 3430 : 						EnableAttack = 1;
; 3431 : 				}
; 3432 : 				else

  00120	eb 44		 jmp	 SHORT $LN14@MLS_SkillS@17
$LN12@MLS_SkillS@17:

; 3433 : 				{
; 3434 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00122	8b d7		 mov	 edx, edi
  00124	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H

; 3435 : 
; 3436 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0012a	66 83 7c 0a 68
	02		 cmp	 WORD PTR [edx+ecx+104], 2
  00130	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00133	75 14		 jne	 SHORT $LN9@MLS_SkillS@17
  00135	8b 94 0a 50 04
	00 00		 mov	 edx, DWORD PTR [edx+ecx+1104]
  0013c	85 d2		 test	 edx, edx
  0013e	78 09		 js	 SHORT $LN9@MLS_SkillS@17

; 3437 : 					{
; 3438 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00140	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00146	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
$LN9@MLS_SkillS@17:

; 3439 : 					}
; 3440 : 
; 3441 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00149	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0014f	03 c1		 add	 eax, ecx
  00151	50		 push	 eax
  00152	56		 push	 esi
  00153	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00158	83 c4 08	 add	 esp, 8
  0015b	83 f8 01	 cmp	 eax, 1
  0015e	75 60		 jne	 SHORT $LN33@MLS_SkillS@17
  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN14@MLS_SkillS@17:

; 3442 : 					{
; 3443 : 						EnableAttack = 1;
; 3444 : 					}
; 3445 : 				}
; 3446 : 
; 3447 : 				if(EnableAttack != 0)
; 3448 : 				{
; 3449 : 					attackcheck = 0;
; 3450 : 
; 3451 : 					if(loopcount == 0)
; 3452 : 					{
; 3453 : 						attackcheck = 1;
; 3454 : 					}
; 3455 : 					else if(rand()%3==0)
; 3456 : 					{
; 3457 : 						attackcheck = 1;
; 3458 : 					}
; 3459 : 
; 3460 : 					if(attackcheck != 0)
; 3461 : 					{
; 3462 : 						if(SkillSpearHitBox.HitCheck(iangle,lpObj->X,lpObj->Y,gObj[tObjNum].X,gObj[tObjNum].Y))

  00166	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0016c	0f bf 94 0f 46
	01 00 00	 movsx	 edx, WORD PTR [edi+ecx+326]
  00174	0f bf 84 0f 44
	01 00 00	 movsx	 eax, WORD PTR [edi+ecx+324]
  0017c	0f bf 8e 46 01
	00 00		 movsx	 ecx, WORD PTR [esi+326]
  00183	52		 push	 edx
  00184	0f bf 96 44 01
	00 00		 movsx	 edx, WORD PTR [esi+324]
  0018b	50		 push	 eax
  0018c	8b 45 f8	 mov	 eax, DWORD PTR _iangle$[ebp]
  0018f	51		 push	 ecx
  00190	52		 push	 edx
  00191	50		 push	 eax
  00192	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  00197	e8 00 00 00 00	 call	 ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ; CSkillHitBox::HitCheck
  0019c	85 c0		 test	 eax, eax
  0019e	74 20		 je	 SHORT $LN33@MLS_SkillS@17

; 3463 : 						{
; 3464 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,0,0,0);

  001a0	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  001a3	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a9	6a 00		 push	 0
  001ab	6a 00		 push	 0
  001ad	6a 00		 push	 0
  001af	6a 00		 push	 0
  001b1	6a 01		 push	 1
  001b3	6a 00		 push	 0
  001b5	51		 push	 ecx
  001b6	57		 push	 edi
  001b7	56		 push	 esi
  001b8	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  001bd	83 c4 24	 add	 esp, 36			; 00000024H
$LN33@MLS_SkillS@17:
  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN34@MLS_SkillS@17:

; 3465 : 						}
; 3466 : 					}
; 3467 : 				}
; 3468 : 			}
; 3469 : 		}
; 3470 : 
; 3471 : 		count++;

  001c6	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 3472 : 		if(count > MAX_VIEWPORT -1)

  001c9	ff 4d 08	 dec	 DWORD PTR tv67[ebp]
  001cc	0f 85 e0 fe ff
	ff		 jne	 $LL21@MLS_SkillS@17

; 3473 : 		{
; 3474 : 			break;
; 3475 : 		}
; 3476 : 	}
; 3477 : 	return true;

  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	b8 01 00 00 00	 mov	 eax, 1
  001d9	5b		 pop	 ebx

; 3478 : }

  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
_TEXT	ENDS
PUBLIC	?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
; Function compile flags: /Ogtp
;	COMDAT ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z
_TEXT	SEGMENT
tv170 = 8						; size = 4
tv167 = 8						; size = 4
tv138 = 8						; size = 4
tv136 = 8						; size = 4
_ty$ = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_tx$ = 16						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_CalDistance, COMDAT
; _this$ = ecx

; 3729 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3730 : 	if( x == x1 &&
; 3731 : 		y == y1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR _x1$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0000c	56		 push	 esi
  0000d	8b 75 14	 mov	 esi, DWORD PTR _y1$[ebp]
  00010	3b c2		 cmp	 eax, edx
  00012	75 0b		 jne	 SHORT $LN1@MLS_CalDis
  00014	3b ce		 cmp	 ecx, esi
  00016	75 07		 jne	 SHORT $LN1@MLS_CalDis

; 3732 : 		return 0;

  00018	33 c0		 xor	 eax, eax
  0001a	5e		 pop	 esi

; 3738 : }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
$LN1@MLS_CalDis:

; 3733 : 
; 3734 : 	float tx = x - x1;

  0001f	2b c2		 sub	 eax, edx
  00021	89 45 08	 mov	 DWORD PTR tv170[ebp], eax
  00024	db 45 08	 fild	 DWORD PTR tv170[ebp]

; 3735 : 	float ty = y - y1;

  00027	2b ce		 sub	 ecx, esi
  00029	89 4d 08	 mov	 DWORD PTR tv167[ebp], ecx
  0002c	d9 5d 10	 fstp	 DWORD PTR _tx$[ebp]
  0002f	db 45 08	 fild	 DWORD PTR tv167[ebp]
  00032	d9 5d 08	 fstp	 DWORD PTR _ty$[ebp]

; 3736 : 
; 3737 : 	return sqrt((tx*tx)+(ty*ty));

  00035	d9 45 08	 fld	 DWORD PTR _ty$[ebp]
  00038	d9 45 10	 fld	 DWORD PTR _tx$[ebp]
  0003b	dc c8		 fmul	 ST(0), ST(0)
  0003d	d9 c1		 fld	 ST(1)
  0003f	de ca		 fmulp	 ST(2), ST(0)
  00041	de c1		 faddp	 ST(1), ST(0)
  00043	d9 5d 08	 fstp	 DWORD PTR tv138[ebp]
  00046	d9 45 08	 fld	 DWORD PTR tv138[ebp]
  00049	e8 00 00 00 00	 call	 __CIsqrt
  0004e	d9 5d 08	 fstp	 DWORD PTR tv136[ebp]
  00051	d9 45 08	 fld	 DWORD PTR tv136[ebp]
  00054	e8 00 00 00 00	 call	 __ftol2_sse
  00059	5e		 pop	 esi

; 3738 : }

  0005a	5d		 pop	 ebp
  0005b	c2 10 00	 ret	 16			; 00000010H
?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_CalDistance
_TEXT	ENDS
PUBLIC	?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv417 = 8						; size = 4
tv64 = 8						; size = 4
_skill_defense$ = 8					; size = 4
_aIndex$ = 8						; size = 4
tv277 = 12						; size = 4
_aMLSkillValue$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillDefense, COMDAT
; _this$ = ecx

; 3995 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3996 : 	int skillSuccess = true;
; 3997 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx

; 3998 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00009	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000c	56		 push	 esi
  0000d	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00013	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00016	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001c	03 d8		 add	 ebx, eax
  0001e	03 f0		 add	 esi, eax

; 3999 : 
; 4000 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00020	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  00025	57		 push	 edi
  00026	8b f9		 mov	 edi, ecx
  00028	74 0d		 je	 SHORT $LN8@MLS_SkillD@2
  0002a	83 bb 50 04 00
	00 ff		 cmp	 DWORD PTR [ebx+1104], -1
  00031	0f 84 1c 01 00
	00		 je	 $LN9@MLS_SkillD@2
$LN8@MLS_SkillD@2:

; 4001 : 	{
; 4002 : 		return;
; 4003 : 	}
; 4004 : 
; 4005 : 	if(lpObj->Class != CLASS_ELF)

  00037	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2
  0003f	0f 85 0e 01 00
	00		 jne	 $LN9@MLS_SkillD@2

; 4006 : 	{
; 4007 : 		return;
; 4008 : 	}
; 4009 : 
; 4010 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  00045	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  0004c	3c 35		 cmp	 al, 53			; 00000035H
  0004e	74 0d		 je	 SHORT $LN18@MLS_SkillD@2
  00050	3c 12		 cmp	 al, 18			; 00000012H
  00052	72 13		 jb	 SHORT $LN19@MLS_SkillD@2
  00054	b1 17		 mov	 cl, 23			; 00000017H
  00056	3a c8		 cmp	 cl, al
  00058	1b c0		 sbb	 eax, eax
  0005a	40		 inc	 eax
  0005b	74 0a		 je	 SHORT $LN19@MLS_SkillD@2
$LN18@MLS_SkillD@2:
  0005d	8b 16		 mov	 edx, DWORD PTR [esi]
  0005f	3b 13		 cmp	 edx, DWORD PTR [ebx]
  00061	0f 85 ec 00 00
	00		 jne	 $LN9@MLS_SkillD@2
$LN19@MLS_SkillD@2:

; 4011 : 	{
; 4012 : 		return;
; 4013 : 	}
; 4014 : 
; 4015 : 	float skill_defense;
; 4016 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00067	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0006a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0006e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00078	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0007d	50		 push	 eax
  0007e	8b cf		 mov	 ecx, edi
  00080	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 4017 : 
; 4018 : 	skill_defense = 1+ (lpObj->Energy + lpObj->AddEnergy) / 8;

  00085	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0008c	d9 5d 0c	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
  0008f	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  00096	03 c1		 add	 eax, ecx
  00098	99		 cdq
  00099	83 e2 07	 and	 edx, 7
  0009c	03 c2		 add	 eax, edx
  0009e	c1 f8 03	 sar	 eax, 3
  000a1	40		 inc	 eax
  000a2	89 45 08	 mov	 DWORD PTR tv417[ebp], eax
  000a5	db 45 08	 fild	 DWORD PTR tv417[ebp]
  000a8	d9 5d 08	 fstp	 DWORD PTR _skill_defense$[ebp]

; 4019 : 	skill_defense += skill_defense*aMLSkillValue/100.0f;

  000ab	d9 45 08	 fld	 DWORD PTR _skill_defense$[ebp]
  000ae	d9 c0		 fld	 ST(0)
  000b0	d8 4d 0c	 fmul	 DWORD PTR _aMLSkillValue$[ebp]
  000b3	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000b9	de c1		 faddp	 ST(1), ST(0)
  000bb	d9 5d 08	 fstp	 DWORD PTR _skill_defense$[ebp]

; 4020 : 
; 4021 : 	/*if( gObjCheckEffect(lpTargetObj,2,skill_defense,0) == TRUE )
; 4022 : 	{
; 4023 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,0);
; 4024 : 		return;
; 4025 : 	}*/
; 4026 : 
; 4027 : 	gObjApplyBuffEffectDuration(lpTargetObj,2,ADD_OPTION_DEFENSE,skill_defense,0,0,60);

  000be	d9 45 08	 fld	 DWORD PTR _skill_defense$[ebp]
  000c1	e8 00 00 00 00	 call	 __ftol2_sse
  000c6	6a 3c		 push	 60			; 0000003cH
  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	50		 push	 eax
  000cd	6a 03		 push	 3
  000cf	6a 02		 push	 2
  000d1	53		 push	 ebx
  000d2	89 45 0c	 mov	 DWORD PTR tv277[ebp], eax
  000d5	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  000da	83 c4 1c	 add	 esp, 28			; 0000001cH
  000dd	8d be ac 08 00
	00		 lea	 edi, DWORD PTR [esi+2220]
  000e3	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv64[ebp], 75	; 0000004bH
  000ea	8d 9b 00 00 00
	00		 npad	 6
$LL5@MLS_SkillD@2:

; 4031 : 	{
; 4032 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  000f0	80 7f 04 02	 cmp	 BYTE PTR [edi+4], 2
  000f4	75 3f		 jne	 SHORT $LN4@MLS_SkillD@2
  000f6	80 3f 00	 cmp	 BYTE PTR [edi], 0
  000f9	74 3a		 je	 SHORT $LN4@MLS_SkillD@2

; 4033 : 		{
; 4034 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  000fb	0f bf 4f 02	 movsx	 ecx, WORD PTR [edi+2]
  000ff	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00105	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4035 : 			if(lpMonster->m_iCurrentAI != 0)

  0010b	83 b9 78 1c 00
	00 00		 cmp	 DWORD PTR [ecx+7288], 0
  00112	74 21		 je	 SHORT $LN4@MLS_SkillD@2

; 4036 : 			{
; 4037 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_defense)/10);

  00114	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00119	f7 6d 0c	 imul	 DWORD PTR tv277[ebp]
  0011c	c1 fa 02	 sar	 edx, 2
  0011f	8b c2		 mov	 eax, edx
  00121	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00124	03 c2		 add	 eax, edx
  00126	8b 16		 mov	 edx, DWORD PTR [esi]
  00128	50		 push	 eax
  00129	52		 push	 edx
  0012a	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  00130	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN4@MLS_SkillD@2:

; 4028 : 
; 4029 : 
; 4030 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  00135	83 c7 0c	 add	 edi, 12			; 0000000cH
  00138	ff 4d 08	 dec	 DWORD PTR tv64[ebp]
  0013b	75 b3		 jne	 SHORT $LL5@MLS_SkillD@2

; 4038 : 			}
; 4039 : 		}
; 4040 : 	}
; 4041 : 
; 4042 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  0013d	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00140	8b 03		 mov	 eax, DWORD PTR [ebx]
  00142	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00146	6a 01		 push	 1
  00148	50		 push	 eax
  00149	52		 push	 edx
  0014a	56		 push	 esi
  0014b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00150	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@MLS_SkillD@2:
  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx

; 4043 : }

  00156	5d		 pop	 ebp
  00157	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
_TEXT	ENDS
PUBLIC	?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv414 = 8						; size = 4
tv64 = 8						; size = 4
_skill_attack$ = 8					; size = 4
_aIndex$ = 8						; size = 4
tv277 = 12						; size = 4
_aMLSkillValue$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillAttack, COMDAT
; _this$ = ecx

; 4046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4047 : 	int skillSuccess = true;
; 4048 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx

; 4049 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00009	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000c	56		 push	 esi
  0000d	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00013	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00016	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001c	03 d8		 add	 ebx, eax
  0001e	03 f0		 add	 esi, eax

; 4050 : 
; 4051 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00020	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  00025	57		 push	 edi
  00026	8b f9		 mov	 edi, ecx
  00028	74 0d		 je	 SHORT $LN8@MLS_SkillA
  0002a	83 bb 50 04 00
	00 ff		 cmp	 DWORD PTR [ebx+1104], -1
  00031	0f 84 21 01 00
	00		 je	 $LN9@MLS_SkillA
$LN8@MLS_SkillA:

; 4052 : 	{
; 4053 : 		return;
; 4054 : 	}
; 4055 : 
; 4056 : 	if(lpObj->Class != CLASS_ELF)

  00037	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2
  0003f	0f 85 13 01 00
	00		 jne	 $LN9@MLS_SkillA

; 4057 : 	{
; 4058 : 		return;
; 4059 : 	}
; 4060 : 
; 4061 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  00045	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  0004c	3c 35		 cmp	 al, 53			; 00000035H
  0004e	74 0d		 je	 SHORT $LN18@MLS_SkillA
  00050	3c 12		 cmp	 al, 18			; 00000012H
  00052	72 13		 jb	 SHORT $LN19@MLS_SkillA
  00054	b1 17		 mov	 cl, 23			; 00000017H
  00056	3a c8		 cmp	 cl, al
  00058	1b c0		 sbb	 eax, eax
  0005a	40		 inc	 eax
  0005b	74 0a		 je	 SHORT $LN19@MLS_SkillA
$LN18@MLS_SkillA:
  0005d	8b 16		 mov	 edx, DWORD PTR [esi]
  0005f	3b 13		 cmp	 edx, DWORD PTR [ebx]
  00061	0f 85 f1 00 00
	00		 jne	 $LN9@MLS_SkillA
$LN19@MLS_SkillA:

; 4062 : 	{
; 4063 : 		return;
; 4064 : 	}
; 4065 : 
; 4066 : 	float skill_attack;
; 4067 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00067	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0006a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0006e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00078	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0007d	50		 push	 eax
  0007e	8b cf		 mov	 ecx, edi
  00080	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 4068 : 
; 4069 : 	skill_attack = 3 + (lpObj->Energy + lpObj->AddEnergy) / 7;

  00085	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  0008c	d9 5d 0c	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
  0008f	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  00096	03 c8		 add	 ecx, eax
  00098	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0009d	f7 e9		 imul	 ecx
  0009f	03 d1		 add	 edx, ecx
  000a1	c1 fa 02	 sar	 edx, 2
  000a4	8b ca		 mov	 ecx, edx
  000a6	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000a9	8d 54 0a 03	 lea	 edx, DWORD PTR [edx+ecx+3]
  000ad	89 55 08	 mov	 DWORD PTR tv414[ebp], edx
  000b0	db 45 08	 fild	 DWORD PTR tv414[ebp]
  000b3	d9 5d 08	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4070 : 	skill_attack += skill_attack*aMLSkillValue/100.0f;

  000b6	d9 45 08	 fld	 DWORD PTR _skill_attack$[ebp]
  000b9	d9 c0		 fld	 ST(0)
  000bb	d8 4d 0c	 fmul	 DWORD PTR _aMLSkillValue$[ebp]
  000be	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000c4	de c1		 faddp	 ST(1), ST(0)
  000c6	d9 5d 08	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4071 : 
; 4072 : 	/*if( gObjCheckEffect(lpTargetObj,1,skill_attack,0,0) == TRUE )
; 4073 : 	{
; 4074 : 		GCMagicAttackNumberSend(lpObj,420,lpTargetObj->m_Index,0);
; 4075 : 		return;
; 4076 : 	}*/
; 4077 : 
; 4078 : 	gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,60);

  000c9	d9 45 08	 fld	 DWORD PTR _skill_attack$[ebp]
  000cc	e8 00 00 00 00	 call	 __ftol2_sse
  000d1	6a 3c		 push	 60			; 0000003cH
  000d3	6a 00		 push	 0
  000d5	6a 00		 push	 0
  000d7	50		 push	 eax
  000d8	6a 02		 push	 2
  000da	6a 01		 push	 1
  000dc	53		 push	 ebx
  000dd	89 45 0c	 mov	 DWORD PTR tv277[ebp], eax
  000e0	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  000e5	83 c4 1c	 add	 esp, 28			; 0000001cH
  000e8	8d be ac 08 00
	00		 lea	 edi, DWORD PTR [esi+2220]
  000ee	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv64[ebp], 75	; 0000004bH
$LL5@MLS_SkillA:

; 4082 : 	{
; 4083 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  000f5	80 7f 04 02	 cmp	 BYTE PTR [edi+4], 2
  000f9	75 3f		 jne	 SHORT $LN4@MLS_SkillA
  000fb	80 3f 00	 cmp	 BYTE PTR [edi], 0
  000fe	74 3a		 je	 SHORT $LN4@MLS_SkillA

; 4084 : 		{
; 4085 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  00100	0f bf 4f 02	 movsx	 ecx, WORD PTR [edi+2]
  00104	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0010a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4086 : 			if(lpMonster->m_iCurrentAI != 0)

  00110	83 b9 78 1c 00
	00 00		 cmp	 DWORD PTR [ecx+7288], 0
  00117	74 21		 je	 SHORT $LN4@MLS_SkillA

; 4087 : 			{
; 4088 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);

  00119	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0011e	f7 6d 0c	 imul	 DWORD PTR tv277[ebp]
  00121	c1 fa 02	 sar	 edx, 2
  00124	8b c2		 mov	 eax, edx
  00126	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00129	03 c2		 add	 eax, edx
  0012b	8b 16		 mov	 edx, DWORD PTR [esi]
  0012d	50		 push	 eax
  0012e	52		 push	 edx
  0012f	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  00135	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN4@MLS_SkillA:

; 4079 : 
; 4080 : 
; 4081 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  0013a	83 c7 0c	 add	 edi, 12			; 0000000cH
  0013d	ff 4d 08	 dec	 DWORD PTR tv64[ebp]
  00140	75 b3		 jne	 SHORT $LL5@MLS_SkillA

; 4089 : 			}
; 4090 : 		}
; 4091 : 	}
; 4092 : 
; 4093 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  00142	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00145	8b 03		 mov	 eax, DWORD PTR [ebx]
  00147	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0014b	6a 01		 push	 1
  0014d	50		 push	 eax
  0014e	52		 push	 edx
  0014f	56		 push	 esi
  00150	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00155	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@MLS_SkillA:
  00158	5f		 pop	 edi
  00159	5e		 pop	 esi
  0015a	5b		 pop	 ebx

; 4094 : }

  0015b	5d		 pop	 ebp
  0015c	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv414 = 8						; size = 4
tv64 = 8						; size = 4
_skill_attack$ = 8					; size = 4
_aIndex$ = 8						; size = 4
tv277 = 12						; size = 4
_aMLSkillValue$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack, COMDAT
; _this$ = ecx

; 4097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4098 : 	//int skillSuccess = true;
; 4099 : 	//LPOBJ lpObj = &gObj[aIndex];
; 4100 : 	//LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 4101 : 
; 4102 : 	//if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)
; 4103 : 	//{
; 4104 : 	//	return;
; 4105 : 	//}
; 4106 : 
; 4107 : 	//if(lpObj->Class != CLASS_ELF)
; 4108 : 	//{
; 4109 : 	//	return;
; 4110 : 	//}
; 4111 : 
; 4112 : 	//if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)
; 4113 : 	//{
; 4114 : 	//	return;
; 4115 : 	//}
; 4116 : 
; 4117 : 	//float skill_attack;
; 4118 : 	//float fValue;
; 4119 : 	//float aMLSkillValue = 0;
; 4120 : 	//
; 4121 : 	//int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);
; 4122 : 
; 4123 : 	//if( iPreSkill > 0 )
; 4124 : 	//{
; 4125 : 	//	int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);
; 4126 : 
; 4127 : 	//	if( iPreLevel > 0 )
; 4128 : 	//	{
; 4129 : 	//		aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);
; 4130 : 	//	}
; 4131 : 	//}
; 4132 : 
; 4133 : 	//fValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);
; 4134 : 
; 4135 : 	//skill_attack = 3 + (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_ElfAttackEffectDiv;
; 4136 : 	//skill_attack += skill_attack*(aMLSkillValue+fValue)/100.0f;
; 4137 : 
; 4138 : 	//if( g_SkillAdditionInfo.m_ElfAttackEffectMax > 0 && skill_attack > g_SkillAdditionInfo.m_ElfAttackEffectMax )
; 4139 : 	//{
; 4140 : 	//	skill_attack = g_SkillAdditionInfo.m_ElfAttackEffectMax;
; 4141 : 	//}
; 4142 : 
; 4143 : 	///*if( gObjCheckEffect(lpTargetObj,1,skill_attack,0,0) == TRUE )
; 4144 : 	//{
; 4145 : 	//	GCMagicAttackNumberSend(lpObj,420,lpTargetObj->m_Index,0);
; 4146 : 	//	return;
; 4147 : 	//}*/
; 4148 : 
; 4149 : 	//int nTime = g_SkillAdditionInfo.m_ElfAttackTime + fValue;
; 4150 : 
; 4151 : 	//gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,nTime);
; 4152 : 
; 4153 : 
; 4154 : 	//for(int n = 0; n < MAX_VIEWPORT; n++)
; 4155 : 	//{
; 4156 : 	//	if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)
; 4157 : 	//	{
; 4158 : 	//		LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];
; 4159 : 	//		if(lpMonster->m_iCurrentAI != 0)
; 4160 : 	//		{
; 4161 : 	//			lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);
; 4162 : 	//		}
; 4163 : 	//	}
; 4164 : 	//}
; 4165 : 
; 4166 : 	//GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);
; 4167 : 
; 4168 : 	int skillSuccess = true;
; 4169 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx

; 4170 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00009	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000c	56		 push	 esi
  0000d	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00013	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00016	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001c	03 d8		 add	 ebx, eax
  0001e	03 f0		 add	 esi, eax

; 4171 : 
; 4172 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00020	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  00025	57		 push	 edi
  00026	8b f9		 mov	 edi, ecx
  00028	74 0d		 je	 SHORT $LN8@MLS_SkillS@18
  0002a	83 bb 50 04 00
	00 ff		 cmp	 DWORD PTR [ebx+1104], -1
  00031	0f 84 2c 01 00
	00		 je	 $LN9@MLS_SkillS@18
$LN8@MLS_SkillS@18:

; 4173 : 	{
; 4174 : 		return;
; 4175 : 	}
; 4176 : 
; 4177 : 	if(lpObj->Class != CLASS_ELF)

  00037	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2
  0003f	0f 85 1e 01 00
	00		 jne	 $LN9@MLS_SkillS@18

; 4178 : 	{
; 4179 : 		return;
; 4180 : 	}
; 4181 : 
; 4182 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  00045	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  0004c	3c 35		 cmp	 al, 53			; 00000035H
  0004e	74 0d		 je	 SHORT $LN18@MLS_SkillS@18
  00050	3c 12		 cmp	 al, 18			; 00000012H
  00052	72 13		 jb	 SHORT $LN19@MLS_SkillS@18
  00054	b1 17		 mov	 cl, 23			; 00000017H
  00056	3a c8		 cmp	 cl, al
  00058	1b c0		 sbb	 eax, eax
  0005a	40		 inc	 eax
  0005b	74 0a		 je	 SHORT $LN19@MLS_SkillS@18
$LN18@MLS_SkillS@18:
  0005d	8b 16		 mov	 edx, DWORD PTR [esi]
  0005f	3b 13		 cmp	 edx, DWORD PTR [ebx]
  00061	0f 85 fc 00 00
	00		 jne	 $LN9@MLS_SkillS@18
$LN19@MLS_SkillS@18:

; 4183 : 	{
; 4184 : 		return;
; 4185 : 	}
; 4186 : 
; 4187 : 	float skill_attack;
; 4188 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00067	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0006a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0006e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00078	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0007d	50		 push	 eax
  0007e	8b cf		 mov	 ecx, edi
  00080	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 4189 : 
; 4190 : 	skill_attack = 3 + (lpObj->Energy + lpObj->AddEnergy) / 7;

  00085	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  0008c	d9 5d 0c	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
  0008f	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  00096	03 c8		 add	 ecx, eax
  00098	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0009d	f7 e9		 imul	 ecx
  0009f	03 d1		 add	 edx, ecx
  000a1	c1 fa 02	 sar	 edx, 2
  000a4	8b ca		 mov	 ecx, edx
  000a6	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000a9	8d 54 0a 03	 lea	 edx, DWORD PTR [edx+ecx+3]
  000ad	89 55 08	 mov	 DWORD PTR tv414[ebp], edx
  000b0	db 45 08	 fild	 DWORD PTR tv414[ebp]
  000b3	d9 5d 08	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4191 : 	skill_attack += skill_attack*aMLSkillValue/100.0f;

  000b6	d9 45 08	 fld	 DWORD PTR _skill_attack$[ebp]
  000b9	d9 c0		 fld	 ST(0)
  000bb	d8 4d 0c	 fmul	 DWORD PTR _aMLSkillValue$[ebp]
  000be	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000c4	de c1		 faddp	 ST(1), ST(0)
  000c6	d9 5d 08	 fstp	 DWORD PTR _skill_attack$[ebp]

; 4192 : 
; 4193 : 	/*if( gObjCheckEffect(lpTargetObj,1,skill_attack,0,0) == TRUE )
; 4194 : 	{
; 4195 : 		GCMagicAttackNumberSend(lpObj,420,lpTargetObj->m_Index,0);
; 4196 : 		return;
; 4197 : 	}*/
; 4198 : 
; 4199 : #ifdef SKILL_ELF_ADD_DAMAGE
; 4200 : 	int nTime = g_SkillAdditionInfo.m_ElfAttackTime;
; 4201 : 	gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,nTime);

  000c9	d9 45 08	 fld	 DWORD PTR _skill_attack$[ebp]
  000cc	e8 00 00 00 00	 call	 __ftol2_sse
  000d1	8b 0d a0 0c 00
	00		 mov	 ecx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3232
  000d7	51		 push	 ecx
  000d8	6a 00		 push	 0
  000da	6a 00		 push	 0
  000dc	50		 push	 eax
  000dd	6a 02		 push	 2
  000df	6a 01		 push	 1
  000e1	53		 push	 ebx
  000e2	89 45 0c	 mov	 DWORD PTR tv277[ebp], eax
  000e5	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  000ea	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ed	8d be ac 08 00
	00		 lea	 edi, DWORD PTR [esi+2220]
  000f3	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv64[ebp], 75	; 0000004bH
  000fa	8d 9b 00 00 00
	00		 npad	 6
$LL5@MLS_SkillS@18:

; 4207 : 	{
; 4208 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00100	80 7f 04 02	 cmp	 BYTE PTR [edi+4], 2
  00104	75 3f		 jne	 SHORT $LN4@MLS_SkillS@18
  00106	80 3f 00	 cmp	 BYTE PTR [edi], 0
  00109	74 3a		 je	 SHORT $LN4@MLS_SkillS@18

; 4209 : 		{
; 4210 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0010b	0f bf 4f 02	 movsx	 ecx, WORD PTR [edi+2]
  0010f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00115	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4211 : 			if(lpMonster->m_iCurrentAI != 0)

  0011b	83 b9 78 1c 00
	00 00		 cmp	 DWORD PTR [ecx+7288], 0
  00122	74 21		 je	 SHORT $LN4@MLS_SkillS@18

; 4212 : 			{
; 4213 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);

  00124	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00129	f7 6d 0c	 imul	 DWORD PTR tv277[ebp]
  0012c	c1 fa 02	 sar	 edx, 2
  0012f	8b c2		 mov	 eax, edx
  00131	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00134	03 c2		 add	 eax, edx
  00136	8b 16		 mov	 edx, DWORD PTR [esi]
  00138	50		 push	 eax
  00139	52		 push	 edx
  0013a	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  00140	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN4@MLS_SkillS@18:

; 4202 : #else
; 4203 : 	gObjApplyBuffEffectDuration(lpTargetObj,1,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,60);
; 4204 : #endif
; 4205 : 
; 4206 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  00145	83 c7 0c	 add	 edi, 12			; 0000000cH
  00148	ff 4d 08	 dec	 DWORD PTR tv64[ebp]
  0014b	75 b3		 jne	 SHORT $LL5@MLS_SkillS@18

; 4214 : 			}
; 4215 : 		}
; 4216 : 	}
; 4217 : 
; 4218 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  0014d	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00150	8b 03		 mov	 eax, DWORD PTR [ebx]
  00152	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00156	6a 01		 push	 1
  00158	50		 push	 eax
  00159	52		 push	 edx
  0015a	56		 push	 esi
  0015b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00160	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@MLS_SkillS@18:
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx

; 4219 : 
; 4220 : }

  00166	5d		 pop	 ebp
  00167	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv457 = -8						; size = 4
tv317 = -8						; size = 4
_aMLSkillValue$ = -8					; size = 4
_fValue$ = -4						; size = 4
tv461 = 8						; size = 4
tv442 = 8						; size = 4
tv238 = 8						; size = 4
_skill_defense$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense, COMDAT
; _this$ = ecx

; 4223 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 4224 : 	int skillSuccess = true;
; 4225 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00010	57		 push	 edi
  00011	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 4226 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00017	8b 7d 0c	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  0001a	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00020	03 f8		 add	 edi, eax
  00022	03 f0		 add	 esi, eax

; 4227 : 
; 4228 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00024	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00029	8b d9		 mov	 ebx, ecx
  0002b	89 7d 0c	 mov	 DWORD PTR _lpTargetObj$[ebp], edi
  0002e	74 0d		 je	 SHORT $LN11@MLS_SkillS@19
  00030	83 bf 50 04 00
	00 ff		 cmp	 DWORD PTR [edi+1104], -1
  00037	0f 84 ac 01 00
	00		 je	 $LN12@MLS_SkillS@19
$LN11@MLS_SkillS@19:

; 4229 : 	{
; 4230 : 		return;
; 4231 : 	}
; 4232 : 
; 4233 : 	if(lpObj->Class != CLASS_ELF)

  0003d	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2
  00045	0f 85 9e 01 00
	00		 jne	 $LN12@MLS_SkillS@19

; 4234 : 	{
; 4235 : 		return;
; 4236 : 	}
; 4237 : 
; 4238 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  0004b	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  00052	3c 35		 cmp	 al, 53			; 00000035H
  00054	74 0d		 je	 SHORT $LN20@MLS_SkillS@19
  00056	3c 12		 cmp	 al, 18			; 00000012H
  00058	72 13		 jb	 SHORT $LN9@MLS_SkillS@19
  0005a	b1 17		 mov	 cl, 23			; 00000017H
  0005c	3a c8		 cmp	 cl, al
  0005e	1b c0		 sbb	 eax, eax
  00060	40		 inc	 eax
  00061	74 0a		 je	 SHORT $LN9@MLS_SkillS@19
$LN20@MLS_SkillS@19:
  00063	8b 16		 mov	 edx, DWORD PTR [esi]
  00065	3b 17		 cmp	 edx, DWORD PTR [edi]
  00067	0f 85 7c 01 00
	00		 jne	 $LN12@MLS_SkillS@19
$LN9@MLS_SkillS@19:

; 4239 : 	{
; 4240 : 		return;
; 4241 : 	}
; 4242 : 
; 4243 : 	float skill_defense;
; 4244 : 	float fValue;
; 4245 : 	float aMLSkillValue;
; 4246 : 	
; 4247 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  0006d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00070	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00073	51		 push	 ecx
  00074	6a 02		 push	 2
  00076	8b cb		 mov	 ecx, ebx
  00078	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  0007d	8b f8		 mov	 edi, eax

; 4248 : 
; 4249 : 	if( iPreSkill > 0 )

  0007f	85 ff		 test	 edi, edi
  00081	7e 24		 jle	 SHORT $LN22@MLS_SkillS@19

; 4250 : 	{
; 4251 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  00083	57		 push	 edi
  00084	56		 push	 esi
  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel

; 4252 : 
; 4253 : 		if( iPreLevel > 0 )

  0008c	85 c0		 test	 eax, eax
  0008e	7e 17		 jle	 SHORT $LN22@MLS_SkillS@19

; 4254 : 		{
; 4255 : 			aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  00090	50		 push	 eax
  00091	57		 push	 edi
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00097	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0009c	50		 push	 eax
  0009d	8b cb		 mov	 ecx, ebx
  0009f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000a4	d9 5d f8	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
$LN22@MLS_SkillS@19:

; 4256 : 		}
; 4257 : 	}
; 4258 : 	
; 4259 : 	fValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000a7	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000aa	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  000ae	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b1	52		 push	 edx
  000b2	50		 push	 eax
  000b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000b8	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000bd	50		 push	 eax
  000be	8b cb		 mov	 ecx, ebx
  000c0	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 4260 : 
; 4261 : 	skill_defense = 1+ (lpObj->Energy + lpObj->AddEnergy) / g_SkillAdditionInfo.m_ElfDefenseEffectDiv;

  000c5	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  000cc	d9 5d fc	 fstp	 DWORD PTR _fValue$[ebp]
  000cf	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  000d6	03 c1		 add	 eax, ecx
  000d8	0f b7 0d 8e 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3214
  000df	99		 cdq
  000e0	f7 f9		 idiv	 ecx
  000e2	40		 inc	 eax
  000e3	89 45 08	 mov	 DWORD PTR tv461[ebp], eax
  000e6	db 45 08	 fild	 DWORD PTR tv461[ebp]

; 4262 : 	skill_defense += skill_defense*(fValue+aMLSkillValue)/100.0f;
; 4263 : 
; 4264 : 	if( g_SkillAdditionInfo.m_ElfDefenseEffectMax > 0 && skill_defense > g_SkillAdditionInfo.m_ElfDefenseEffectMax )

  000e9	a1 90 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3216
  000ee	d9 5d 08	 fstp	 DWORD PTR _skill_defense$[ebp]
  000f1	d9 45 fc	 fld	 DWORD PTR _fValue$[ebp]
  000f4	d9 c0		 fld	 ST(0)
  000f6	d8 45 f8	 fadd	 DWORD PTR _aMLSkillValue$[ebp]
  000f9	d9 45 08	 fld	 DWORD PTR _skill_defense$[ebp]
  000fc	d9 c0		 fld	 ST(0)
  000fe	de ca		 fmulp	 ST(2), ST(0)
  00100	d9 c9		 fxch	 ST(1)
  00102	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00108	de c1		 faddp	 ST(1), ST(0)
  0010a	d9 5d 08	 fstp	 DWORD PTR _skill_defense$[ebp]
  0010d	85 c0		 test	 eax, eax
  0010f	74 29		 je	 SHORT $LN21@MLS_SkillS@19
  00111	89 45 f8	 mov	 DWORD PTR tv457[ebp], eax
  00114	db 45 f8	 fild	 DWORD PTR tv457[ebp]
  00117	79 06		 jns	 SHORT $LN29@MLS_SkillS@19
  00119	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@MLS_SkillS@19:
  0011f	d9 5d f8	 fstp	 DWORD PTR tv317[ebp]
  00122	d9 45 08	 fld	 DWORD PTR _skill_defense$[ebp]
  00125	d9 45 f8	 fld	 DWORD PTR tv317[ebp]
  00128	d8 d1		 fcom	 ST(1)
  0012a	df e0		 fnstsw	 ax
  0012c	dd d9		 fstp	 ST(1)
  0012e	f6 c4 05	 test	 ah, 5
  00131	7a 05		 jp	 SHORT $LN27@MLS_SkillS@19

; 4265 : 	{
; 4266 : 		skill_defense = g_SkillAdditionInfo.m_ElfDefenseEffectMax;

  00133	d9 5d 08	 fstp	 DWORD PTR _skill_defense$[ebp]
  00136	eb 02		 jmp	 SHORT $LN21@MLS_SkillS@19
$LN27@MLS_SkillS@19:

; 4262 : 	skill_defense += skill_defense*(fValue+aMLSkillValue)/100.0f;
; 4263 : 
; 4264 : 	if( g_SkillAdditionInfo.m_ElfDefenseEffectMax > 0 && skill_defense > g_SkillAdditionInfo.m_ElfDefenseEffectMax )

  00138	dd d8		 fstp	 ST(0)
$LN21@MLS_SkillS@19:

; 4276 : 	gObjApplyBuffEffectDuration(lpTargetObj,2,ADD_OPTION_DEFENSE,skill_defense,0,0,nTime);

  0013a	d9 45 08	 fld	 DWORD PTR _skill_defense$[ebp]
  0013d	e8 00 00 00 00	 call	 __ftol2_sse
  00142	db 05 94 0c 00
	00		 fild	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3220
  00148	8b 15 94 0c 00
	00		 mov	 edx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3220
  0014e	8b d8		 mov	 ebx, eax
  00150	85 d2		 test	 edx, edx
  00152	79 06		 jns	 SHORT $LN30@MLS_SkillS@19
  00154	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN30@MLS_SkillS@19:

; 4267 : 	}
; 4268 : 
; 4269 : 	/*if( gObjCheckEffect(lpTargetObj,2,skill_defense,0) == TRUE )
; 4270 : 	{
; 4271 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,0);
; 4272 : 		return;
; 4273 : 	}*/
; 4274 : 
; 4275 : 	int nTime = g_SkillAdditionInfo.m_ElfDefenseTime + fValue;

  0015a	de c1		 faddp	 ST(1), ST(0)

; 4276 : 	gObjApplyBuffEffectDuration(lpTargetObj,2,ADD_OPTION_DEFENSE,skill_defense,0,0,nTime);

  0015c	e8 00 00 00 00	 call	 __ftol2_sse
  00161	50		 push	 eax
  00162	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00165	6a 00		 push	 0
  00167	6a 00		 push	 0
  00169	53		 push	 ebx
  0016a	6a 03		 push	 3
  0016c	6a 02		 push	 2
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00174	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4277 : 
; 4278 : 
; 4279 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  00177	8d be ac 08 00
	00		 lea	 edi, DWORD PTR [esi+2220]
  0017d	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv238[ebp], 75 ; 0000004bH
$LL5@MLS_SkillS@19:

; 4280 : 	{
; 4281 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00184	80 7f 04 02	 cmp	 BYTE PTR [edi+4], 2
  00188	75 3e		 jne	 SHORT $LN4@MLS_SkillS@19
  0018a	80 3f 00	 cmp	 BYTE PTR [edi], 0
  0018d	74 39		 je	 SHORT $LN4@MLS_SkillS@19

; 4282 : 		{
; 4283 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0018f	0f bf 4f 02	 movsx	 ecx, WORD PTR [edi+2]
  00193	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00199	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4284 : 			if(lpMonster->m_iCurrentAI != 0)

  0019f	83 b9 78 1c 00
	00 00		 cmp	 DWORD PTR [ecx+7288], 0
  001a6	74 20		 je	 SHORT $LN4@MLS_SkillS@19

; 4285 : 			{
; 4286 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_defense)/10);

  001a8	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001ad	f7 eb		 imul	 ebx
  001af	c1 fa 02	 sar	 edx, 2
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b7	03 c2		 add	 eax, edx
  001b9	8b 16		 mov	 edx, DWORD PTR [esi]
  001bb	50		 push	 eax
  001bc	52		 push	 edx
  001bd	81 c1 94 1c 00
	00		 add	 ecx, 7316		; 00001c94H
  001c3	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN4@MLS_SkillS@19:

; 4277 : 
; 4278 : 
; 4279 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  001c8	83 c7 0c	 add	 edi, 12			; 0000000cH
  001cb	ff 4d 08	 dec	 DWORD PTR tv238[ebp]
  001ce	75 b4		 jne	 SHORT $LL5@MLS_SkillS@19

; 4287 : 			}
; 4288 : 		}
; 4289 : 	}
; 4290 : 
; 4291 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  001d0	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  001d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d5	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  001d8	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  001dc	6a 01		 push	 1
  001de	51		 push	 ecx
  001df	50		 push	 eax
  001e0	56		 push	 esi
  001e1	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001e6	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@MLS_SkillS@19:
  001e9	5f		 pop	 edi
  001ea	5e		 pop	 esi
  001eb	5b		 pop	 ebx

; 4292 : }

  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
_TEXT	ENDS
PUBLIC	__real@41200000
PUBLIC	?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fSkillValue$217899 = 8					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery, COMDAT
; _this$ = ecx

; 4313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4314 : 	int skillSuccess = 1;
; 4315 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	56		 push	 esi

; 4316 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000a	8b 75 0c	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  0000d	57		 push	 edi
  0000e	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00014	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00017	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0001d	03 f8		 add	 edi, eax
  0001f	03 f0		 add	 esi, eax

; 4317 : 
; 4318 : 	if(lpObj->Type == OBJ_USER && lpObj->Class != CLASS_MAGUMSA)

  00021	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00026	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00029	75 0a		 jne	 SHORT $LN3@MLS_MaGumS@2
  0002b	66 83 bf b8 00
	00 00 03	 cmp	 WORD PTR [edi+184], 3
  00033	75 7d		 jne	 SHORT $LN2@MLS_MaGumS@2
$LN3@MLS_MaGumS@2:

; 4319 : 	{
; 4320 : 		return;
; 4321 : 	}
; 4322 : 
; 4323 : 	if( retCalcSkillResistance(lpTargetObj,R_POISON) )

  00035	6a 01		 push	 1
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 ?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retCalcSkillResistance
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	74 6e		 je	 SHORT $LN2@MLS_MaGumS@2

; 4324 : 	{
; 4325 : 		int nEffectValue = 10;
; 4326 : 		float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00044	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00047	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0004b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0004e	53		 push	 ebx
  0004f	51		 push	 ecx
  00050	52		 push	 edx
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00056	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  0005b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00069	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$217899[ebp]

; 4327 : 
; 4328 : 		if( fSkillValue > 0.0f )

  0006c	d9 ee		 fldz
  0006e	d9 45 08	 fld	 DWORD PTR _fSkillValue$217899[ebp]
  00071	d8 d1		 fcom	 ST(1)
  00073	df e0		 fnstsw	 ax
  00075	dd d9		 fstp	 ST(1)
  00077	f6 c4 41	 test	 ah, 65			; 00000041H
  0007a	75 0f		 jne	 SHORT $LN7@MLS_MaGumS@2

; 4329 : 		{
; 4330 : 			nEffectValue += fSkillValue;

  0007c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41200000
  00082	e8 00 00 00 00	 call	 __ftol2_sse
  00087	8b d8		 mov	 ebx, eax
  00089	eb 02		 jmp	 SHORT $LN1@MLS_MaGumS@2
$LN7@MLS_MaGumS@2:
  0008b	dd d8		 fstp	 ST(0)
$LN1@MLS_MaGumS@2:

; 4331 : 		}
; 4332 : 		gObjApplyBuffEffectDuration(lpTargetObj,58,23,nEffectValue,0,0,10);

  0008d	6a 0a		 push	 10			; 0000000aH
  0008f	6a 00		 push	 0
  00091	6a 00		 push	 0
  00093	53		 push	 ebx
  00094	6a 17		 push	 23			; 00000017H
  00096	6a 3a		 push	 58			; 0000003aH
  00098	56		 push	 esi
  00099	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 4333 : 		GCMagicAttackNumberSend(lpObj,493,lpTargetObj->m_Index,skillSuccess);

  0009e	8b 06		 mov	 eax, DWORD PTR [esi]
  000a0	6a 01		 push	 1
  000a2	50		 push	 eax
  000a3	68 ed 01 00 00	 push	 493			; 000001edH
  000a8	57		 push	 edi
  000a9	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000ae	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b1	5b		 pop	 ebx
$LN2@MLS_MaGumS@2:
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi

; 4334 : 	}
; 4335 : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH
?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery
_TEXT	ENDS
PUBLIC	??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@ ; `string'
PUBLIC	?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
;	COMDAT ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
CONST	SEGMENT
??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@ DB '[Invali'
	DB	'dTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , '
	DB	'AccountID : %s ', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv289 = 8						; size = 4
_aIndex$ = 8						; size = 4
_nMaxBarrageCount$218610 = 12				; size = 4
_lpMagic$ = 12						; size = 4
_lpTargetObj$ = 16					; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget, COMDAT
; _this$ = ecx

; 5790 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5791 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0000e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00011	8b ce		 mov	 ecx, esi
  00013	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00019	57		 push	 edi

; 5792 : 	int nTargetObjNum = 0;
; 5793 : 	int nViewPortObjectCount = 0;
; 5794 : 	int DuelIndex = lpObj->m_iDuelUser;
; 5795 : 
; 5796 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0001a	8b 7d 10	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  0001d	03 c8		 add	 ecx, eax
  0001f	33 d2		 xor	 edx, edx
  00021	89 4d 08	 mov	 DWORD PTR tv289[ebp], ecx
  00024	85 ff		 test	 edi, edi
  00026	78 0f		 js	 SHORT $LN44@MLS_SkillM@6
  00028	33 db		 xor	 ebx, ebx
  0002a	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00030	0f 9e c3	 setle	 bl
  00033	85 db		 test	 ebx, ebx
  00035	75 1c		 jne	 SHORT $LN33@MLS_SkillM@6
$LN44@MLS_SkillM@6:

; 5797 : 	{
; 5798 : 		LogAddTD("[InvalidTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , AccountID : %s ",
; 5799 : 			aIndex,gObj[aIndex].AccountID);

  00037	83 c1 6c	 add	 ecx, 108		; 0000006cH
  0003a	51		 push	 ecx
  0003b	56		 push	 esi
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx

; 5909 : 		{
; 5910 : 			break;
; 5911 : 		}
; 5912 : 	}
; 5913 : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
$LN33@MLS_SkillM@6:

; 5800 : 		return;
; 5801 : 	}
; 5802 : 
; 5803 : 	int EnableAttack;
; 5804 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00053	8b df		 mov	 ebx, edi
  00055	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  0005b	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  0005e	89 4d 10	 mov	 DWORD PTR _lpTargetObj$[ebp], ecx
  00061	8b 4d 08	 mov	 ecx, DWORD PTR tv289[ebp]
  00064	81 c1 ae 08 00
	00		 add	 ecx, 2222		; 000008aeH
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL32@MLS_SkillM@6:

; 5805 : 
; 5806 : 	while( TRUE )
; 5807 : 	{
; 5808 : 		if( lpObj->VpPlayer2[nViewPortObjectCount].state != 0 )

  00070	80 79 fe 00	 cmp	 BYTE PTR [ecx-2], 0
  00074	74 0b		 je	 SHORT $LN29@MLS_SkillM@6

; 5809 : 		{
; 5810 : 			nTargetObjNum = lpObj->VpPlayer2[nViewPortObjectCount].number;

  00076	0f bf 31	 movsx	 esi, WORD PTR [ecx]

; 5811 : 
; 5812 : 			if( nTargetObjNum >= 0 && 
; 5813 : 				nTargetObjNum == aTargetIndex )

  00079	85 f6		 test	 esi, esi
  0007b	78 04		 js	 SHORT $LN29@MLS_SkillM@6
  0007d	3b f7		 cmp	 esi, edi
  0007f	74 12		 je	 SHORT $LN41@MLS_SkillM@6
$LN29@MLS_SkillM@6:

; 5899 : 						}
; 5900 : 					}
; 5901 : 				}
; 5902 : 				break;
; 5903 : 			}
; 5904 : 		}
; 5905 : 
; 5906 : 		nViewPortObjectCount++;

  00081	42		 inc	 edx
  00082	83 c1 0c	 add	 ecx, 12			; 0000000cH

; 5907 : 
; 5908 : 		if(nViewPortObjectCount > MAX_VIEWPORT -1)

  00085	83 fa 4a	 cmp	 edx, 74			; 0000004aH
  00088	7e e6		 jle	 SHORT $LL32@MLS_SkillM@6
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 5909 : 		{
; 5910 : 			break;
; 5911 : 		}
; 5912 : 	}
; 5913 : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
$LN41@MLS_SkillM@6:

; 5814 : 			{
; 5815 : 				EnableAttack = FALSE;
; 5816 : 
; 5817 : 				if(lpObj->VpPlayer2[nViewPortObjectCount].type == OBJ_USER )

  00093	8b 4d 08	 mov	 ecx, DWORD PTR tv289[ebp]
  00096	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  00099	80 bc 91 b0 08
	00 00 01	 cmp	 BYTE PTR [ecx+edx*4+2224], 1

; 5818 : 				{
; 5819 : 					EnableAttack = TRUE;

  000a1	74 71		 je	 SHORT $LN45@MLS_SkillM@6

; 5820 : 				}
; 5821 : 				else if( lpTargetObj->Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon < 0 )

  000a3	8b 55 10	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  000a6	bf 02 00 00 00	 mov	 edi, 2
  000ab	66 39 7a 68	 cmp	 WORD PTR [edx+104], di
  000af	75 12		 jne	 SHORT $LN46@MLS_SkillM@6
  000b1	8b d6		 mov	 edx, esi
  000b3	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000b9	83 bc 02 50 04
	00 00 00	 cmp	 DWORD PTR [edx+eax+1104], 0

; 5822 : 				{
; 5823 : 					EnableAttack = TRUE;

  000c1	7c 51		 jl	 SHORT $LN45@MLS_SkillM@6
$LN46@MLS_SkillM@6:

; 5824 : 				}
; 5825 : 				else if( nTargetObjNum == DuelIndex )

  000c3	3b b1 b8 0e 00
	00		 cmp	 esi, DWORD PTR [ecx+3768]

; 5826 : 				{
; 5827 : 					EnableAttack = TRUE;
; 5828 : 				}
; 5829 : 				else

  000c9	74 49		 je	 SHORT $LN45@MLS_SkillM@6

; 5830 : 				{
; 5831 : 					int CallMonIndex = gObj[nTargetObjNum].m_Index;

  000cb	8b d6		 mov	 edx, esi
  000cd	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000d3	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]

; 5832 : 
; 5833 : 					if(gObj[nTargetObjNum].Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon >= 0)

  000d6	66 39 7c 02 68	 cmp	 WORD PTR [edx+eax+104], di
  000db	75 14		 jne	 SHORT $LN22@MLS_SkillM@6
  000dd	8b 94 02 50 04
	00 00		 mov	 edx, DWORD PTR [edx+eax+1104]
  000e4	85 d2		 test	 edx, edx
  000e6	78 09		 js	 SHORT $LN22@MLS_SkillM@6

; 5834 : 					{
; 5835 : 						CallMonIndex = gObj[gObj[nTargetObjNum].m_RecallMon].m_Index;

  000e8	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000ee	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
$LN22@MLS_SkillM@6:

; 5836 : 					}
; 5837 : 
; 5838 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000f1	8b 55 08	 mov	 edx, DWORD PTR tv289[ebp]
  000f4	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000fa	03 c8		 add	 ecx, eax
  000fc	51		 push	 ecx
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00103	83 c4 08	 add	 esp, 8
  00106	83 f8 01	 cmp	 eax, 1
  00109	0f 85 82 01 00
	00		 jne	 $LN4@MLS_SkillM@6
  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN45@MLS_SkillM@6:

; 5839 : 					{
; 5840 : 						EnableAttack = TRUE;
; 5841 : 					}
; 5842 : 				}
; 5843 : 
; 5844 : 				if( EnableAttack != FALSE && 
; 5845 : 					MLS_CalDistance(gObj[aTargetIndex].X,gObj[aTargetIndex].Y,gObj[nTargetObjNum].X,gObj[nTargetObjNum].Y) < 4 )

  00114	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0011a	0f bf 94 06 46
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+326]
  00122	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00125	0f bf 89 44 01
	00 00		 movsx	 ecx, WORD PTR [ecx+324]
  0012c	52		 push	 edx
  0012d	0f bf 94 03 46
	01 00 00	 movsx	 edx, WORD PTR [ebx+eax+326]
  00135	0f bf 84 03 44
	01 00 00	 movsx	 eax, WORD PTR [ebx+eax+324]
  0013d	51		 push	 ecx
  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	52		 push	 edx
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  00148	83 f8 04	 cmp	 eax, 4
  0014b	0f 8d 40 01 00
	00		 jge	 $LN4@MLS_SkillM@6

; 5846 : 				{
; 5847 : 					int nMaxBarrageCount = 0;
; 5848 : 
; 5849 : 					if( lpMagic->m_Skill == 551 )

  00151	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00154	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00157	be 05 00 00 00	 mov	 esi, 5
  0015c	3d 27 02 00 00	 cmp	 eax, 551		; 00000227H
  00161	75 05		 jne	 SHORT $LN19@MLS_SkillM@6

; 5850 : 					{
; 5851 : 						nMaxBarrageCount = 5;

  00163	89 75 0c	 mov	 DWORD PTR _nMaxBarrageCount$218610[ebp], esi
  00166	eb 2d		 jmp	 SHORT $LN13@MLS_SkillM@6
$LN19@MLS_SkillM@6:

; 5852 : 					}
; 5853 : 					else if( lpMagic->m_Skill == 552 )

  00168	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  0016d	75 09		 jne	 SHORT $LN17@MLS_SkillM@6

; 5854 : 					{
; 5855 : 						nMaxBarrageCount = 3;

  0016f	c7 45 0c 03 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$218610[ebp], 3
  00176	eb 1d		 jmp	 SHORT $LN13@MLS_SkillM@6
$LN17@MLS_SkillM@6:

; 5856 : 					}
; 5857 : 					else if( lpMagic->m_Skill == 558 )

  00178	3d 2e 02 00 00	 cmp	 eax, 558		; 0000022eH
  0017d	75 05		 jne	 SHORT $LN15@MLS_SkillM@6

; 5858 : 					{
; 5859 : 						nMaxBarrageCount = 5;

  0017f	89 75 0c	 mov	 DWORD PTR _nMaxBarrageCount$218610[ebp], esi
  00182	eb 11		 jmp	 SHORT $LN13@MLS_SkillM@6
$LN15@MLS_SkillM@6:

; 5860 : 					}
; 5861 : 					else if( lpMagic->m_Skill == 559 )

  00184	33 c9		 xor	 ecx, ecx
  00186	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  0018b	0f 95 c1	 setne	 cl
  0018e	49		 dec	 ecx
  0018f	83 e1 03	 and	 ecx, 3
  00192	89 4d 0c	 mov	 DWORD PTR _nMaxBarrageCount$218610[ebp], ecx
$LN13@MLS_SkillM@6:

; 5862 : 					{
; 5863 : 						nMaxBarrageCount = 3;
; 5864 : 					}
; 5865 : 					else
; 5866 : 					{
; 5867 : 						nMaxBarrageCount = 0;
; 5868 : 					}
; 5869 : 
; 5870 : 					if( lpMagic->m_Skill == 551 && 
; 5871 : 						rand()%100 < 10 )

  00195	3d 27 02 00 00	 cmp	 eax, 551		; 00000227H
  0019a	75 60		 jne	 SHORT $LN49@MLS_SkillM@6
  0019c	e8 00 00 00 00	 call	 _rand
  001a1	99		 cdq
  001a2	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a7	f7 f9		 idiv	 ecx
  001a9	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  001ac	7d 4e		 jge	 SHORT $LN49@MLS_SkillM@6

; 5872 : 					{
; 5873 : 						gObjApplyBuffEffectDuration(lpTargetObj,76,29,5,0,0,10);

  001ae	6a 0a		 push	 10			; 0000000aH
  001b0	6a 00		 push	 0
  001b2	6a 00		 push	 0
  001b4	56		 push	 esi
  001b5	6a 1d		 push	 29			; 0000001dH
  001b7	6a 4c		 push	 76			; 0000004cH
$LN50@MLS_SkillM@6:

; 5877 : 					{
; 5878 : 						gObjApplyBuffEffectDuration(lpTargetObj,58,23,10,0,0,10);

  001b9	8b 55 10	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  001bc	52		 push	 edx
  001bd	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  001c2	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN47@MLS_SkillM@6:

; 5884 : 						lpTargetObj->DelayActionTime = 1000;
; 5885 : 						lpTargetObj->DelayLevel = 1;
; 5886 : 
; 5887 : 						gObjApplyBuffEffectDuration(lpTargetObj,86,20,0,0,0,10);

  001c5	8b 5d 08	 mov	 ebx, DWORD PTR tv289[ebp]
$LN7@MLS_SkillM@6:

; 5888 : 					}
; 5889 : 
; 5890 : 					for(int i = 1; i < nMaxBarrageCount; i++)

  001c8	be 01 00 00 00	 mov	 esi, 1
  001cd	39 75 0c	 cmp	 DWORD PTR _nMaxBarrageCount$218610[ebp], esi
  001d0	0f 8e bb 00 00
	00		 jle	 $LN4@MLS_SkillM@6
$LL48@MLS_SkillM@6:

; 5891 : 					{
; 5892 : 						if( (i%(nMaxBarrageCount-1)) == TRUE  )

  001d6	8b 4d 0c	 mov	 ecx, DWORD PTR _nMaxBarrageCount$218610[ebp]
  001d9	8b c6		 mov	 eax, esi
  001db	99		 cdq
  001dc	49		 dec	 ecx
  001dd	f7 f9		 idiv	 ecx

; 5893 : 						{
; 5894 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,TRUE,0,0,i,0);

  001df	6a 00		 push	 0
  001e1	56		 push	 esi
  001e2	6a 00		 push	 0
  001e4	6a 00		 push	 0
  001e6	6a 01		 push	 1
  001e8	83 fa 01	 cmp	 edx, 1
  001eb	0f 85 86 00 00
	00		 jne	 $LN3@MLS_SkillM@6
  001f1	52		 push	 edx
  001f2	8b 55 10	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  001f5	57		 push	 edi
  001f6	52		 push	 edx

; 5895 : 						}
; 5896 : 						else

  001f7	e9 82 00 00 00	 jmp	 $LN51@MLS_SkillM@6
$LN49@MLS_SkillM@6:

; 5874 : 					}
; 5875 : 					else if( lpMagic->m_Skill == 552 &&
; 5876 : 						rand()%100 < 10 )

  001fc	81 7f 08 28 02
	00 00		 cmp	 DWORD PTR [edi+8], 552	; 00000228H
  00203	75 20		 jne	 SHORT $LN9@MLS_SkillM@6
  00205	e8 00 00 00 00	 call	 _rand
  0020a	99		 cdq
  0020b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00210	f7 f9		 idiv	 ecx
  00212	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00215	7d 0e		 jge	 SHORT $LN9@MLS_SkillM@6

; 5877 : 					{
; 5878 : 						gObjApplyBuffEffectDuration(lpTargetObj,58,23,10,0,0,10);

  00217	6a 0a		 push	 10			; 0000000aH
  00219	6a 00		 push	 0
  0021b	6a 00		 push	 0
  0021d	6a 0a		 push	 10			; 0000000aH
  0021f	6a 17		 push	 23			; 00000017H
  00221	6a 3a		 push	 58			; 0000003aH

; 5879 : 					}
; 5880 : 					else if( lpMagic->m_Skill == 558 &&

  00223	eb 94		 jmp	 SHORT $LN50@MLS_SkillM@6
$LN9@MLS_SkillM@6:

; 5881 : 						rand()%100 < 40 )

  00225	81 7f 08 2e 02
	00 00		 cmp	 DWORD PTR [edi+8], 558	; 0000022eH
  0022c	75 97		 jne	 SHORT $LN47@MLS_SkillM@6
  0022e	e8 00 00 00 00	 call	 _rand
  00233	99		 cdq
  00234	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00239	f7 f9		 idiv	 ecx
  0023b	83 fa 28	 cmp	 edx, 40			; 00000028H
  0023e	7d 85		 jge	 SHORT $LN47@MLS_SkillM@6

; 5882 : 					{
; 5883 : 						lpTargetObj->lpAttackObj = lpObj;

  00240	8b 45 10	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00243	8b 5d 08	 mov	 ebx, DWORD PTR tv289[ebp]

; 5884 : 						lpTargetObj->DelayActionTime = 1000;
; 5885 : 						lpTargetObj->DelayLevel = 1;
; 5886 : 
; 5887 : 						gObjApplyBuffEffectDuration(lpTargetObj,86,20,0,0,0,10);

  00246	6a 0a		 push	 10			; 0000000aH
  00248	6a 00		 push	 0
  0024a	6a 00		 push	 0
  0024c	6a 00		 push	 0
  0024e	6a 14		 push	 20			; 00000014H
  00250	6a 56		 push	 86			; 00000056H
  00252	50		 push	 eax
  00253	89 98 d4 03 00
	00		 mov	 DWORD PTR [eax+980], ebx
  00259	c7 80 c0 03 00
	00 e8 03 00 00	 mov	 DWORD PTR [eax+960], 1000 ; 000003e8H
  00263	c6 80 c4 03 00
	00 01		 mov	 BYTE PTR [eax+964], 1
  0026a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0026f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00272	e9 51 ff ff ff	 jmp	 $LN7@MLS_SkillM@6
$LN3@MLS_SkillM@6:

; 5897 : 						{
; 5898 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,FALSE,TRUE,0,0,i,0);

  00277	8b 45 10	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0027a	6a 00		 push	 0
  0027c	57		 push	 edi
  0027d	50		 push	 eax
$LN51@MLS_SkillM@6:
  0027e	53		 push	 ebx
  0027f	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00284	46		 inc	 esi
  00285	83 c4 24	 add	 esp, 36			; 00000024H
  00288	3b 75 0c	 cmp	 esi, DWORD PTR _nMaxBarrageCount$218610[ebp]
  0028b	0f 8c 45 ff ff
	ff		 jl	 $LL48@MLS_SkillM@6
$LN4@MLS_SkillM@6:
  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	5b		 pop	 ebx

; 5909 : 		{
; 5910 : 			break;
; 5911 : 		}
; 5912 : 	}
; 5913 : }

  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	__real@4014000000000000
PUBLIC	?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z
_TEXT	SEGMENT
_DuelIndex$ = -16					; size = 4
_fSkillValue$ = -12					; size = 4
_this$ = -8						; size = 4
_lpTargetObj$ = -4					; size = 4
tv289 = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_nMaxBarrageCount$218660 = 16				; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery, COMDAT
; _this$ = ecx

; 5916 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 5917 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	53		 push	 ebx

; 5918 : 	int nTargetObjNum = 0;
; 5919 : 	int nViewPortObjectCount = 0;
; 5920 : 	int DuelIndex = lpObj->m_iDuelUser;
; 5921 : 
; 5922 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0000c	8b 5d 10	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000f	56		 push	 esi
  00010	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00016	8b f1		 mov	 esi, ecx
  00018	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001e	8b 94 06 b8 0e
	00 00		 mov	 edx, DWORD PTR [esi+eax+3768]
  00025	03 f0		 add	 esi, eax
  00027	57		 push	 edi
  00028	33 ff		 xor	 edi, edi
  0002a	89 75 08	 mov	 DWORD PTR tv289[ebp], esi
  0002d	89 55 f0	 mov	 DWORD PTR _DuelIndex$[ebp], edx
  00030	85 db		 test	 ebx, ebx
  00032	78 0f		 js	 SHORT $LN38@MLS_SkillM@7
  00034	33 d2		 xor	 edx, edx
  00036	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0003c	0f 9e c2	 setle	 dl
  0003f	85 d2		 test	 edx, edx
  00041	75 1c		 jne	 SHORT $LN27@MLS_SkillM@7
$LN38@MLS_SkillM@7:

; 5923 : 	{
; 5924 : 		LogAddTD("[InvalidTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , AccountID : %s ",
; 5925 : 			aIndex,gObj[aIndex].AccountID);

  00043	83 c6 6c	 add	 esi, 108		; 0000006cH
  00046	56		 push	 esi
  00047	51		 push	 ecx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 6020 : 		{
; 6021 : 			break;
; 6022 : 		}
; 6023 : 	}
; 6024 : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN27@MLS_SkillM@7:

; 5926 : 		return;
; 5927 : 	}
; 5928 : 
; 5929 : 	int EnableAttack;
; 5930 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0005f	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00065	03 c3		 add	 eax, ebx
  00067	89 45 fc	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 5931 : 
; 5932 : 	float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0006d	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00071	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0007b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00089	d9 5d f4	 fstp	 DWORD PTR _fSkillValue$[ebp]
  0008c	8d 86 ae 08 00
	00		 lea	 eax, DWORD PTR [esi+2222]
$LL26@MLS_SkillM@7:

; 5933 : 
; 5934 : 	while( TRUE )
; 5935 : 	{
; 5936 : 		if( lpObj->VpPlayer2[nViewPortObjectCount].state != 0 )

  00092	80 78 fe 00	 cmp	 BYTE PTR [eax-2], 0
  00096	74 0c		 je	 SHORT $LN23@MLS_SkillM@7

; 5937 : 		{
; 5938 : 			nTargetObjNum = lpObj->VpPlayer2[nViewPortObjectCount].number;

  00098	0f bf 30	 movsx	 esi, WORD PTR [eax]

; 5939 : 
; 5940 : 			if( nTargetObjNum >= 0 && 
; 5941 : 				nTargetObjNum == aTargetIndex )

  0009b	85 f6		 test	 esi, esi
  0009d	78 05		 js	 SHORT $LN23@MLS_SkillM@7
  0009f	3b 75 10	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000a2	74 12		 je	 SHORT $LN35@MLS_SkillM@7
$LN23@MLS_SkillM@7:

; 6010 : 						}
; 6011 : 					}
; 6012 : 				}
; 6013 : 				break;
; 6014 : 			}
; 6015 : 		}
; 6016 : 
; 6017 : 		nViewPortObjectCount++;

  000a4	47		 inc	 edi
  000a5	83 c0 0c	 add	 eax, 12			; 0000000cH

; 6018 : 
; 6019 : 		if(nViewPortObjectCount > MAX_VIEWPORT -1)

  000a8	83 ff 4a	 cmp	 edi, 74			; 0000004aH
  000ab	7e e5		 jle	 SHORT $LL26@MLS_SkillM@7
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx

; 6020 : 		{
; 6021 : 			break;
; 6022 : 		}
; 6023 : 	}
; 6024 : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 0c 00	 ret	 12			; 0000000cH
$LN35@MLS_SkillM@7:

; 5942 : 			{
; 5943 : 				EnableAttack = FALSE;
; 5944 : 
; 5945 : 				if(lpObj->VpPlayer2[nViewPortObjectCount].type == OBJ_USER )

  000b6	8b 4d 08	 mov	 ecx, DWORD PTR tv289[ebp]
  000b9	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000bc	80 bc 81 b0 08
	00 00 01	 cmp	 BYTE PTR [ecx+eax*4+2224], 1

; 5946 : 				{
; 5947 : 					EnableAttack = TRUE;
; 5948 : 				}
; 5949 : 				else if( lpTargetObj->Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon < 0 )

  000c4	8b 7d fc	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  000c7	74 68		 je	 SHORT $LN40@MLS_SkillM@7
  000c9	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d3	75 12		 jne	 SHORT $LN41@MLS_SkillM@7
  000d5	8b d6		 mov	 edx, esi
  000d7	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000dd	83 bc 02 50 04
	00 00 00	 cmp	 DWORD PTR [edx+eax+1104], 0

; 5950 : 				{
; 5951 : 					EnableAttack = TRUE;

  000e5	7c 4f		 jl	 SHORT $LN43@MLS_SkillM@7
$LN41@MLS_SkillM@7:

; 5952 : 				}
; 5953 : 				else if( nTargetObjNum == DuelIndex )

  000e7	3b 75 f0	 cmp	 esi, DWORD PTR _DuelIndex$[ebp]

; 5954 : 				{
; 5955 : 					EnableAttack = TRUE;
; 5956 : 				}
; 5957 : 				else

  000ea	74 4a		 je	 SHORT $LN43@MLS_SkillM@7

; 5958 : 				{
; 5959 : 					int CallMonIndex = gObj[nTargetObjNum].m_Index;

  000ec	8b d6		 mov	 edx, esi
  000ee	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H

; 5960 : 
; 5961 : 					if(gObj[nTargetObjNum].Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon >= 0)

  000f4	66 83 7c 02 68
	02		 cmp	 WORD PTR [edx+eax+104], 2
  000fa	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  000fd	75 14		 jne	 SHORT $LN16@MLS_SkillM@7
  000ff	8b 94 02 50 04
	00 00		 mov	 edx, DWORD PTR [edx+eax+1104]
  00106	85 d2		 test	 edx, edx
  00108	78 09		 js	 SHORT $LN16@MLS_SkillM@7

; 5962 : 					{
; 5963 : 						CallMonIndex = gObj[gObj[nTargetObjNum].m_RecallMon].m_Index;

  0010a	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00110	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
$LN16@MLS_SkillM@7:

; 5964 : 					}
; 5965 : 
; 5966 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00113	8b 55 08	 mov	 edx, DWORD PTR tv289[ebp]
  00116	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0011c	03 c8		 add	 ecx, eax
  0011e	51		 push	 ecx
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00125	83 c4 08	 add	 esp, 8
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 85 1a 01 00
	00		 jne	 $LN4@MLS_SkillM@7
$LN40@MLS_SkillM@7:
  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN43@MLS_SkillM@7:

; 5967 : 					{
; 5968 : 						EnableAttack = TRUE;
; 5969 : 					}
; 5970 : 				}
; 5971 : 
; 5972 : 				if( EnableAttack != FALSE && 
; 5973 : 					MLS_CalDistance(gObj[aTargetIndex].X,gObj[aTargetIndex].Y,gObj[nTargetObjNum].X,gObj[nTargetObjNum].Y) < 4 )

  00136	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0013c	0f bf 94 06 46
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+326]
  00144	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00147	0f bf 89 44 01
	00 00		 movsx	 ecx, WORD PTR [ecx+324]
  0014e	52		 push	 edx
  0014f	0f bf 94 03 46
	01 00 00	 movsx	 edx, WORD PTR [ebx+eax+326]
  00157	0f bf 84 03 44
	01 00 00	 movsx	 eax, WORD PTR [ebx+eax+324]
  0015f	51		 push	 ecx
  00160	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00163	52		 push	 edx
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  0016a	83 f8 04	 cmp	 eax, 4
  0016d	0f 8d d8 00 00
	00		 jge	 $LN4@MLS_SkillM@7

; 5974 : 				{
; 5975 : 					int nMaxBarrageCount = 0;
; 5976 : 
; 5977 : 					if( lpMagic->m_Skill == 554 )

  00173	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00176	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00179	3d 2a 02 00 00	 cmp	 eax, 554		; 0000022aH
  0017e	75 09		 jne	 SHORT $LN13@MLS_SkillM@7

; 5978 : 					{
; 5979 : 						nMaxBarrageCount = 5;

  00180	c7 45 10 05 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$218660[ebp], 5
  00187	eb 11		 jmp	 SHORT $LN11@MLS_SkillM@7
$LN13@MLS_SkillM@7:

; 5980 : 					}
; 5981 : 					else if( lpMagic->m_Skill == 555 )

  00189	33 c9		 xor	 ecx, ecx
  0018b	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  00190	0f 95 c1	 setne	 cl
  00193	49		 dec	 ecx
  00194	83 e1 03	 and	 ecx, 3
  00197	89 4d 10	 mov	 DWORD PTR _nMaxBarrageCount$218660[ebp], ecx
$LN11@MLS_SkillM@7:

; 5982 : 					{
; 5983 : 						nMaxBarrageCount = 3;
; 5984 : 					}
; 5985 : 					else
; 5986 : 					{
; 5987 : 						nMaxBarrageCount = 0;
; 5988 : 					}
; 5989 : 
; 5990 : 					if( lpMagic->m_Skill == 554 && 
; 5991 : 						rand()%100 < 10 )

  0019a	3d 2a 02 00 00	 cmp	 eax, 554		; 0000022aH
  0019f	75 2d		 jne	 SHORT $LN9@MLS_SkillM@7
  001a1	e8 00 00 00 00	 call	 _rand
  001a6	99		 cdq
  001a7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ac	f7 f9		 idiv	 ecx
  001ae	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  001b1	7d 1b		 jge	 SHORT $LN9@MLS_SkillM@7

; 5992 : 					{
; 5993 : 						gObjApplyBuffEffectDuration(lpTargetObj,76,29,5+fSkillValue,0,0,10);

  001b3	d9 45 f4	 fld	 DWORD PTR _fSkillValue$[ebp]
  001b6	6a 0a		 push	 10			; 0000000aH
  001b8	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4014000000000000
  001be	6a 00		 push	 0
  001c0	6a 00		 push	 0
  001c2	e8 00 00 00 00	 call	 __ftol2_sse
  001c7	50		 push	 eax
  001c8	6a 1d		 push	 29			; 0000001dH
  001ca	6a 4c		 push	 76			; 0000004cH

; 5994 : 					}
; 5995 : 					else if( lpMagic->m_Skill == 555 &&

  001cc	eb 34		 jmp	 SHORT $LN45@MLS_SkillM@7
$LN9@MLS_SkillM@7:

; 5996 : 						rand()%100 < 10 )

  001ce	81 7b 08 2b 02
	00 00		 cmp	 DWORD PTR [ebx+8], 555	; 0000022bH
  001d5	75 34		 jne	 SHORT $LN7@MLS_SkillM@7
  001d7	e8 00 00 00 00	 call	 _rand
  001dc	99		 cdq
  001dd	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001e2	f7 f9		 idiv	 ecx
  001e4	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  001e7	7d 22		 jge	 SHORT $LN7@MLS_SkillM@7

; 5997 : 					{
; 5998 : 						gObjApplyBuffEffectDuration(lpTargetObj,58,23,10+fSkillValue,0,0,10);

  001e9	d9 45 f4	 fld	 DWORD PTR _fSkillValue$[ebp]
  001ec	6a 0a		 push	 10			; 0000000aH
  001ee	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4024000000000000
  001f4	6a 00		 push	 0
  001f6	6a 00		 push	 0
  001f8	e8 00 00 00 00	 call	 __ftol2_sse
  001fd	50		 push	 eax
  001fe	6a 17		 push	 23			; 00000017H
  00200	6a 3a		 push	 58			; 0000003aH
$LN45@MLS_SkillM@7:
  00202	57		 push	 edi
  00203	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00208	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN7@MLS_SkillM@7:

; 5999 : 					}
; 6000 : 
; 6001 : 					for(int i = 1; i < nMaxBarrageCount; i++)

  0020b	be 01 00 00 00	 mov	 esi, 1
  00210	39 75 10	 cmp	 DWORD PTR _nMaxBarrageCount$218660[ebp], esi
  00213	7e 36		 jle	 SHORT $LN4@MLS_SkillM@7
$LL44@MLS_SkillM@7:

; 6002 : 					{
; 6003 : 						if( (i%(nMaxBarrageCount-1)) == TRUE  )

  00215	8b 4d 10	 mov	 ecx, DWORD PTR _nMaxBarrageCount$218660[ebp]
  00218	8b c6		 mov	 eax, esi
  0021a	99		 cdq
  0021b	49		 dec	 ecx
  0021c	f7 f9		 idiv	 ecx

; 6004 : 						{
; 6005 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,TRUE,0,0,i,0);

  0021e	6a 00		 push	 0
  00220	56		 push	 esi
  00221	6a 00		 push	 0
  00223	6a 00		 push	 0
  00225	6a 01		 push	 1
  00227	83 fa 01	 cmp	 edx, 1
  0022a	75 09		 jne	 SHORT $LN3@MLS_SkillM@7
  0022c	52		 push	 edx
  0022d	8b 55 08	 mov	 edx, DWORD PTR tv289[ebp]
  00230	53		 push	 ebx
  00231	57		 push	 edi
  00232	52		 push	 edx

; 6006 : 						}
; 6007 : 						else

  00233	eb 08		 jmp	 SHORT $LN46@MLS_SkillM@7
$LN3@MLS_SkillM@7:

; 6008 : 						{
; 6009 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,FALSE,TRUE,0,0,i,0);

  00235	8b 45 08	 mov	 eax, DWORD PTR tv289[ebp]
  00238	6a 00		 push	 0
  0023a	53		 push	 ebx
  0023b	57		 push	 edi
  0023c	50		 push	 eax
$LN46@MLS_SkillM@7:
  0023d	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00242	46		 inc	 esi
  00243	83 c4 24	 add	 esp, 36			; 00000024H
  00246	3b 75 10	 cmp	 esi, DWORD PTR _nMaxBarrageCount$218660[ebp]
  00249	7c ca		 jl	 SHORT $LL44@MLS_SkillM@7
$LN4@MLS_SkillM@7:
  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	5b		 pop	 ebx

; 6020 : 		{
; 6021 : 			break;
; 6022 : 		}
; 6023 : 	}
; 6024 : }

  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
_TEXT	ENDS
PUBLIC	?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$ = -4					; size = 4
tv219 = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2, COMDAT
; _this$ = ecx

; 6256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6257 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f8		 mov	 edi, eax
  0000a	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00010	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6258 : 	int tObjNum;
; 6259 : 
; 6260 : 	if(lpObj->SkillHellFire2State == 0)

  00016	80 bf 14 11 00
	00 00		 cmp	 BYTE PTR [edi+4372], 0
  0001d	75 11		 jne	 SHORT $LN18@MLS_SkillH@2

; 6261 : 	{
; 6262 : 		return MLS_SkillHellFire2Start(aIndex,lpMagic);

  0001f	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
  00029	5f		 pop	 edi

; 6332 : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN18@MLS_SkillH@2:

; 6263 : 	}
; 6264 : 
; 6265 : 	lpObj->SkillHellFire2State = 0;
; 6266 : 	int count = 0;
; 6267 : 	lpObj->SkillHellFire2Time = 0;
; 6268 : 
; 6269 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 6270 : 	int DuelIndex = lpObj->m_iDuelUser;

  00030	8b 87 b8 0e 00
	00		 mov	 eax, DWORD PTR [edi+3768]
  00036	53		 push	 ebx
  00037	c6 87 14 11 00
	00 00		 mov	 BYTE PTR [edi+4372], 0
  0003e	c7 87 18 11 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4376], 0
  00048	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004e	56		 push	 esi
  0004f	89 45 fc	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00052	8d 9f b0 08 00
	00		 lea	 ebx, DWORD PTR [edi+2224]
  00058	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv219[ebp], 75 ; 0000004bH
  0005f	90		 npad	 1
$LL17@MLS_SkillH@2:

; 6271 : 	int EnableAttack;
; 6272 : 
; 6273 : 	while ( true )
; 6274 : 	{
; 6275 : 		if(lpObj->VpPlayer2[count].state != 0)

  00060	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00064	0f 84 db 00 00
	00		 je	 $LN29@MLS_SkillH@2

; 6276 : 		{
; 6277 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0006a	0f bf 73 fe	 movsx	 esi, WORD PTR [ebx-2]

; 6278 : 
; 6279 : 			if(tObjNum >= 0)

  0006e	85 f6		 test	 esi, esi
  00070	0f 88 cf 00 00
	00		 js	 $LN29@MLS_SkillH@2

; 6280 : 			{
; 6281 : 				EnableAttack = 0;
; 6282 : 
; 6283 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00076	8a 03		 mov	 al, BYTE PTR [ebx]
  00078	3c 02		 cmp	 al, 2
  0007a	75 12		 jne	 SHORT $LN13@MLS_SkillH@2
  0007c	8b ce		 mov	 ecx, esi
  0007e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00084	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 6284 : 				{
; 6285 : 					EnableAttack = 1;

  0008c	7c 7e		 jl	 SHORT $LN10@MLS_SkillH@2
$LN13@MLS_SkillH@2:

; 6286 : 				}
; 6287 : 				else if(aTargetIndex == tObjNum || DuelIndex == tObjNum)

  0008e	39 75 0c	 cmp	 DWORD PTR _aTargetIndex$[ebp], esi
  00091	74 79		 je	 SHORT $LN10@MLS_SkillH@2
  00093	39 75 fc	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  00096	74 74		 je	 SHORT $LN10@MLS_SkillH@2

; 6288 : 				{
; 6289 : 					EnableAttack = 1;
; 6290 : 				}
; 6291 : 
; 6292 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00098	3c 03		 cmp	 al, 3
  0009a	74 2c		 je	 SHORT $LN8@MLS_SkillH@2
  0009c	8b c6		 mov	 eax, esi
  0009e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000a4	03 c2		 add	 eax, edx
  000a6	80 b8 49 01 00
	00 1e		 cmp	 BYTE PTR [eax+329], 30	; 0000001eH
  000ad	75 19		 jne	 SHORT $LN8@MLS_SkillH@2
  000af	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000b6	75 10		 jne	 SHORT $LN8@MLS_SkillH@2

; 6293 : 				{
; 6294 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000b8	8a 8f 02 1c 00
	00		 mov	 cl, BYTE PTR [edi+7170]
  000be	3a 88 02 1c 00
	00		 cmp	 cl, BYTE PTR [eax+7170]
  000c4	74 7f		 je	 SHORT $LN29@MLS_SkillH@2

; 6295 : 						EnableAttack = 1;
; 6296 : 				}
; 6297 : 
; 6298 : 				else

  000c6	eb 44		 jmp	 SHORT $LN10@MLS_SkillH@2
$LN8@MLS_SkillH@2:

; 6299 : 				{
; 6300 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000c8	8b ce		 mov	 ecx, esi
  000ca	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 6301 : 
; 6302 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000d0	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  000d6	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000d9	75 14		 jne	 SHORT $LN5@MLS_SkillH@2
  000db	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  000e2	85 c9		 test	 ecx, ecx
  000e4	78 09		 js	 SHORT $LN5@MLS_SkillH@2

; 6303 : 					{
; 6304 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000e6	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000ec	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN5@MLS_SkillH@2:

; 6305 : 					}
; 6306 : 
; 6307 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000ef	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000f5	03 c2		 add	 eax, edx
  000f7	50		 push	 eax
  000f8	57		 push	 edi
  000f9	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000fe	83 c4 08	 add	 esp, 8
  00101	83 f8 01	 cmp	 eax, 1
  00104	75 39		 jne	 SHORT $LN28@MLS_SkillH@2
  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@MLS_SkillH@2:

; 6308 : 					{
; 6309 : 						EnableAttack = 1;
; 6310 : 					}
; 6311 : 				}
; 6312 : 
; 6313 : 				if(EnableAttack != 0)
; 6314 : 				{
; 6315 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= 6)

  0010c	8b ce		 mov	 ecx, esi
  0010e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00114	03 ca		 add	 ecx, edx
  00116	51		 push	 ecx
  00117	57		 push	 edi
  00118	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0011d	83 c4 08	 add	 esp, 8
  00120	83 f8 06	 cmp	 eax, 6
  00123	7f 1a		 jg	 SHORT $LN28@MLS_SkillH@2

; 6316 : 					{
; 6317 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,600,lpMagic->m_Skill,0);

  00125	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00128	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0012b	6a 00		 push	 0
  0012d	50		 push	 eax
  0012e	68 58 02 00 00	 push	 600			; 00000258H
  00133	56		 push	 esi
  00134	6a 32		 push	 50			; 00000032H
  00136	57		 push	 edi
  00137	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0013c	83 c4 18	 add	 esp, 24			; 00000018H
$LN28@MLS_SkillH@2:
  0013f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN29@MLS_SkillH@2:

; 6318 : 					}
; 6319 : 				}
; 6320 : 			}
; 6321 : 		}
; 6322 : 
; 6323 : 		count++;

  00145	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 6324 : 		if(count > MAX_VIEWPORT -1)

  00148	ff 4d 08	 dec	 DWORD PTR tv219[ebp]
  0014b	0f 85 0f ff ff
	ff		 jne	 $LL17@MLS_SkillH@2

; 6325 : 		{
; 6326 : 			break;
; 6327 : 		}
; 6328 : 	}
; 6329 : 
; 6330 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,1);

  00151	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00154	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00156	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0015a	6a 01		 push	 1
  0015c	51		 push	 ecx
  0015d	50		 push	 eax
  0015e	57		 push	 edi
  0015f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00164	83 c4 10	 add	 esp, 16			; 00000010H
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx

; 6331 : 	return true;

  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	5f		 pop	 edi

; 6332 : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
_TEXT	ENDS
PUBLIC	__real@c0a00000
PUBLIC	__real@43a00000
PUBLIC	__real@43aa0000
PUBLIC	__real@41a00000
PUBLIC	__real@42200000
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_aIndex$GSCopy$
PUBLIC	__real@40e00000
PUBLIC	__$ArrayPad$
PUBLIC	?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
;	COMDAT __real@c0a00000
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43aa0000
CONST	SEGMENT
__real@43aa0000 DD 043aa0000r			; 340
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newmasterlevelskilltreesystem.cpp
CONST	ENDS
;	COMDAT ?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z
_TEXT	SEGMENT
_tObjNum$ = -312					; size = 4
_DuelIndex$ = -308					; size = 4
_aIndex$GSCopy$ = -304					; size = 4
_this$ = -300						; size = 4
tv870 = -296						; size = 4
_lpObj$ = -292						; size = 4
_lpMagic$GSCopy$ = -288					; size = 4
tv837 = -284						; size = 4
tv180 = -284						; size = 4
tv803 = -280						; size = 4
tv793 = -280						; size = 4
_Dis$218919 = -280					; size = 4
tv748 = -276						; size = 4
_fSkillValue$218910 = -276				; size = 4
_vFrustrum2$ = -272					; size = 60
_fSkillFrustrumY$ = -212				; size = 20
_fSkillFrustrumX$ = -192				; size = 20
_vFrustrum$ = -172					; size = 60
_Matrix$ = -112						; size = 48
_p$ = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_targetpos$ = 16					; size = 1
_aTargetIndex$ = 20					; size = 4
?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot, COMDAT
; _this$ = ecx

; 6473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 6474 : 	LPOBJ lpObj = &gObj[aIndex];
; 6475 : 
; 6476 : 	this->MLS_SkillFrustrum3(aIndex,targetpos,6.0f,7.0f,1.0f,0);

  00016	d9 ee		 fldz

; 6620 : 
; 6621 : 		if( count > (MAX_VIEWPORT-1) )

  00018	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0001b	53		 push	 ebx
  0001c	8b 5d 10	 mov	 ebx, DWORD PTR _targetpos$[ebp]
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	83 ec 10	 sub	 esp, 16			; 00000010H
  00024	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00028	8b f8		 mov	 edi, eax
  0002a	d9 e8		 fld1
  0002c	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00032	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00036	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40e00000
  0003c	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00040	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  00046	d9 1c 24	 fstp	 DWORD PTR [esp]
  00049	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  00057	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], eax
  0005d	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], edx
  00063	89 bd dc fe ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], edi
  00069	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
  0006e	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  00071	d9 ee		 fldz
  00073	50		 push	 eax
  00074	d9 55 f0	 fst	 DWORD PTR _p$[ebp+48]
  00077	8d 4d c0	 lea	 ecx, DWORD PTR _p$[ebp]
  0007a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  00080	51		 push	 ecx
  00081	d9 5d f4	 fstp	 DWORD PTR _p$[ebp+52]
  00084	d9 55 f8	 fst	 DWORD PTR _p$[ebp+56]
  00087	d9 55 c0	 fst	 DWORD PTR _p$[ebp]
  0008a	d9 55 c4	 fst	 DWORD PTR _p$[ebp+4]
  0008d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42200000
  00093	d9 5d c8	 fstp	 DWORD PTR _p$[ebp+8]
  00096	d9 55 cc	 fst	 DWORD PTR _p$[ebp+12]
  00099	d9 55 d0	 fst	 DWORD PTR _p$[ebp+16]
  0009c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41a00000
  000a2	d9 5d d4	 fstp	 DWORD PTR _p$[ebp+20]
  000a5	d9 55 d8	 fst	 DWORD PTR _p$[ebp+24]
  000a8	d9 55 dc	 fst	 DWORD PTR _p$[ebp+28]
  000ab	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43aa0000
  000b1	d9 5d e0	 fstp	 DWORD PTR _p$[ebp+32]
  000b4	d9 55 e4	 fst	 DWORD PTR _p$[ebp+36]
  000b7	d9 5d e8	 fstp	 DWORD PTR _p$[ebp+40]
  000ba	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43a00000
  000c0	d9 5d ec	 fstp	 DWORD PTR _p$[ebp+44]
  000c3	e8 00 00 00 00	 call	 _AngleMatrix
  000c8	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _vFrustrum$[ebp]
  000ce	52		 push	 edx
  000cf	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000d2	50		 push	 eax
  000d3	8d 4d f0	 lea	 ecx, DWORD PTR _p$[ebp+48]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 _VectorRotate
  000dc	8d 55 90	 lea	 edx, DWORD PTR _Matrix$[ebp]
  000df	52		 push	 edx
  000e0	8d 45 cc	 lea	 eax, DWORD PTR _p$[ebp+12]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _AngleMatrix
  000e9	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _vFrustrum$[ebp+12]
  000ef	51		 push	 ecx
  000f0	8d 55 90	 lea	 edx, DWORD PTR _Matrix$[ebp]
  000f3	52		 push	 edx
  000f4	8d 45 f0	 lea	 eax, DWORD PTR _p$[ebp+48]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _VectorRotate
  000fd	d9 ee		 fldz
  000ff	d9 95 6c ff ff
	ff		 fst	 DWORD PTR _vFrustrum$[ebp+24]
  00105	8d 4d 90	 lea	 ecx, DWORD PTR _Matrix$[ebp]
  00108	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40c00000
  0010e	51		 push	 ecx
  0010f	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR _vFrustrum$[ebp+28]
  00115	8d 55 d8	 lea	 edx, DWORD PTR _p$[ebp+24]
  00118	52		 push	 edx
  00119	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR _vFrustrum$[ebp+32]
  0011f	e8 00 00 00 00	 call	 _AngleMatrix
  00124	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp+36]

; 6477 : 
; 6478 : 	float p[5][3];
; 6479 : 	float Matrix[3][4];
; 6480 : 	float vFrustrum[5][3];
; 6481 : 
; 6482 : 	p[4][0] = 0;
; 6483 : 	p[4][1] = 6.0f;
; 6484 : 	p[4][2] = 0;
; 6485 : 
; 6486 : 	p[0][0] = 0;
; 6487 : 	p[0][1] = 0;
; 6488 : 	p[0][2] = 40.0f;
; 6489 : 
; 6490 : 	p[1][0] = 0;
; 6491 : 	p[1][1] = 0;
; 6492 : 	p[1][2] = 20.0f;
; 6493 : 
; 6494 : 	p[2][0] = 0;
; 6495 : 	p[2][1] = 0;
; 6496 : 	p[2][2] = 340.0f;
; 6497 : 
; 6498 : 	p[3][0] = 0;
; 6499 : 	p[3][1] = 0;
; 6500 : 	p[3][2] = 320.0f;
; 6501 : 
; 6502 : 	AngleMatrix((const float *)&p[0],Matrix);
; 6503 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[0]);
; 6504 : 
; 6505 : 	AngleMatrix((const float *)&p[1],Matrix);
; 6506 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[1]);
; 6507 : 
; 6508 : 	vFrustrum[2][0] = 0;
; 6509 : 	vFrustrum[2][1] = 6.0f;
; 6510 : 	vFrustrum[2][2] = 0;
; 6511 : 
; 6512 : 	AngleMatrix((const float *)&p[2],Matrix);
; 6513 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[3]);

  0012a	50		 push	 eax
  0012b	8d 4d 90	 lea	 ecx, DWORD PTR _Matrix$[ebp]
  0012e	51		 push	 ecx
  0012f	8d 55 f0	 lea	 edx, DWORD PTR _p$[ebp+48]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 _VectorRotate

; 6514 : 
; 6515 : 	AngleMatrix((const float *)&p[3],Matrix);

  00138	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0013b	50		 push	 eax
  0013c	8d 4d e4	 lea	 ecx, DWORD PTR _p$[ebp+36]
  0013f	51		 push	 ecx
  00140	e8 00 00 00 00	 call	 _AngleMatrix
  00145	83 c4 44	 add	 esp, 68			; 00000044H

; 6516 : 	VectorRotate((const float *)&p[4],&Matrix[0],(float *)&vFrustrum[4]);

  00148	8d 55 84	 lea	 edx, DWORD PTR _vFrustrum$[ebp+48]
  0014b	52		 push	 edx
  0014c	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0014f	50		 push	 eax
  00150	8d 4d f0	 lea	 ecx, DWORD PTR _p$[ebp+48]
  00153	51		 push	 ecx
  00154	e8 00 00 00 00	 call	 _VectorRotate

; 6517 : 
; 6518 : 	p[0][0] = 0;

  00159	d9 ee		 fldz

; 6519 : 	p[0][1] = 0;
; 6520 : 	p[0][2] = targetpos*360/255;

  0015b	0f b6 cb	 movzx	 ecx, bl
  0015e	d9 55 c0	 fst	 DWORD PTR _p$[ebp]
  00161	69 c9 68 01 00
	00		 imul	 ecx, 360		; 00000168H
  00167	d9 5d c4	 fstp	 DWORD PTR _p$[ebp+4]
  0016a	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  0016f	f7 e9		 imul	 ecx
  00171	03 d1		 add	 edx, ecx
  00173	c1 fa 07	 sar	 edx, 7
  00176	8b c2		 mov	 eax, edx
  00178	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0017b	03 c2		 add	 eax, edx
  0017d	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv837[ebp], eax

; 6521 : 
; 6522 : 	AngleMatrix((const float *)&p[0],Matrix);

  00183	8d 4d 90	 lea	 ecx, DWORD PTR _Matrix$[ebp]
  00186	51		 push	 ecx
  00187	db 85 e4 fe ff
	ff		 fild	 DWORD PTR tv837[ebp]
  0018d	8d 55 c0	 lea	 edx, DWORD PTR _p$[ebp]
  00190	52		 push	 edx
  00191	d9 5d c8	 fstp	 DWORD PTR _p$[ebp+8]
  00194	e8 00 00 00 00	 call	 _AngleMatrix
  00199	83 c4 14	 add	 esp, 20			; 00000014H

; 6523 : 
; 6524 : 	int fSkillFrustrumX[5];
; 6525 : 	int fSkillFrustrumY[5];
; 6526 : 
; 6527 : 	float vFrustrum2[5][3];
; 6528 : 
; 6529 : 	for(int i = 0; i < 5; i++)

  0019c	33 f6		 xor	 esi, esi
  0019e	33 db		 xor	 ebx, ebx
$LL30@MLS_SkillM@8:

; 6530 : 	{
; 6531 : 		VectorRotate(vFrustrum[i],&Matrix[0],vFrustrum2[i]);

  001a0	8d 84 35 f0 fe
	ff ff		 lea	 eax, DWORD PTR _vFrustrum2$[ebp+esi]
  001a7	50		 push	 eax
  001a8	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  001ab	50		 push	 eax
  001ac	8d 8c 35 54 ff
	ff ff		 lea	 ecx, DWORD PTR _vFrustrum$[ebp+esi]
  001b3	51		 push	 ecx
  001b4	e8 00 00 00 00	 call	 _VectorRotate

; 6532 : 
; 6533 : 		fSkillFrustrumX[i] = int(vFrustrum2[i][0]) + lpObj->X;

  001b9	d9 84 35 f0 fe
	ff ff		 fld	 DWORD PTR _vFrustrum2$[ebp+esi]
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c3	e8 00 00 00 00	 call	 __ftol2_sse

; 6534 : 		fSkillFrustrumY[i] = int(vFrustrum2[i][1]) + lpObj->Y;

  001c8	d9 84 35 f4 fe
	ff ff		 fld	 DWORD PTR _vFrustrum2$[ebp+esi+4]
  001cf	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  001d6	03 c2		 add	 eax, edx
  001d8	89 84 1d 40 ff
	ff ff		 mov	 DWORD PTR _fSkillFrustrumX$[ebp+ebx], eax
  001df	e8 00 00 00 00	 call	 __ftol2_sse
  001e4	0f bf 8f 46 01
	00 00		 movsx	 ecx, WORD PTR [edi+326]
  001eb	03 c1		 add	 eax, ecx
  001ed	89 84 1d 2c ff
	ff ff		 mov	 DWORD PTR _fSkillFrustrumY$[ebp+ebx], eax
  001f4	83 c6 0c	 add	 esi, 12			; 0000000cH
  001f7	83 c3 04	 add	 ebx, 4
  001fa	83 fe 3c	 cmp	 esi, 60			; 0000003cH
  001fd	7c a1		 jl	 SHORT $LL30@MLS_SkillM@8

; 6535 : 	}
; 6536 : 
; 6537 : 	int tObjNum;
; 6538 : 	int count = 0;
; 6539 : 	int tmpvar = 0;
; 6540 : 	int DuelIndex = lpObj->m_iDuelUser;

  001ff	8b 97 b8 0e 00
	00		 mov	 edx, DWORD PTR [edi+3768]
  00205	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020b	8d 9f b0 08 00
	00		 lea	 ebx, DWORD PTR [edi+2224]
  00211	89 95 cc fe ff
	ff		 mov	 DWORD PTR _DuelIndex$[ebp], edx
  00217	89 9d d8 fe ff
	ff		 mov	 DWORD PTR tv870[ebp], ebx
  0021d	c7 85 e4 fe ff
	ff 4b 00 00 00	 mov	 DWORD PTR tv180[ebp], 75 ; 0000004bH
  00227	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL27@MLS_SkillM@8:

; 6541 : 	int EnableAttack;
; 6542 : 
; 6543 : 	while ( true )
; 6544 : 	{
; 6545 : 		if(lpObj->VpPlayer2[count].state != 0)

  00230	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00234	0f 84 89 02 00
	00		 je	 $LN51@MLS_SkillM@8

; 6546 : 		{
; 6547 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0023a	0f bf 43 fe	 movsx	 eax, WORD PTR [ebx-2]
  0023e	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _tObjNum$[ebp], eax

; 6548 : 
; 6549 : 			if(tObjNum >= 0 && gObj[tObjNum].Live)

  00244	85 c0		 test	 eax, eax
  00246	0f 88 77 02 00
	00		 js	 $LN51@MLS_SkillM@8
  0024c	8b f0		 mov	 esi, eax
  0024e	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00254	80 7c 0e 6a 00	 cmp	 BYTE PTR [esi+ecx+106], 0
  00259	0f 84 64 02 00
	00		 je	 $LN51@MLS_SkillM@8

; 6550 : 			{
; 6551 : 				EnableAttack = 0;
; 6552 : 
; 6553 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0025f	8a 13		 mov	 dl, BYTE PTR [ebx]
  00261	80 fa 02	 cmp	 dl, 2
  00264	75 0a		 jne	 SHORT $LN23@MLS_SkillM@8
  00266	83 bc 0e 50 04
	00 00 00	 cmp	 DWORD PTR [esi+ecx+1104], 0

; 6554 : 				{
; 6555 : 					EnableAttack = 1;

  0026e	7c 7a		 jl	 SHORT $LN49@MLS_SkillM@8
$LN23@MLS_SkillM@8:

; 6556 : 				}
; 6557 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00270	3b 45 14	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  00273	74 75		 je	 SHORT $LN49@MLS_SkillM@8
  00275	39 85 cc fe ff
	ff		 cmp	 DWORD PTR _DuelIndex$[ebp], eax
  0027b	74 6d		 je	 SHORT $LN49@MLS_SkillM@8

; 6558 : 				{
; 6559 : 					EnableAttack = 1;
; 6560 : 				}
; 6561 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0027d	80 fa 03	 cmp	 dl, 3
  00280	74 28		 je	 SHORT $LN18@MLS_SkillM@8
  00282	80 bc 0e 49 01
	00 00 1e	 cmp	 BYTE PTR [esi+ecx+329], 30 ; 0000001eH
  0028a	75 1e		 jne	 SHORT $LN18@MLS_SkillM@8
  0028c	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  00293	75 15		 jne	 SHORT $LN18@MLS_SkillM@8

; 6562 : 				{
; 6563 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  00295	8a 87 02 1c 00
	00		 mov	 al, BYTE PTR [edi+7170]
  0029b	3a 84 0e 02 1c
	00 00		 cmp	 al, BYTE PTR [esi+ecx+7170]
  002a2	0f 84 1b 02 00
	00		 je	 $LN51@MLS_SkillM@8

; 6564 : 						EnableAttack = 1;
; 6565 : 				}
; 6566 : 				else

  002a8	eb 40		 jmp	 SHORT $LN49@MLS_SkillM@8
$LN18@MLS_SkillM@8:

; 6567 : 				{
; 6568 : 					int CallMonIndex = gObj[tObjNum].m_Index;
; 6569 : 
; 6570 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  002aa	66 83 7c 0e 68
	02		 cmp	 WORD PTR [esi+ecx+104], 2
  002b0	8b 04 0e	 mov	 eax, DWORD PTR [esi+ecx]
  002b3	75 14		 jne	 SHORT $LN48@MLS_SkillM@8
  002b5	8b 94 0e 50 04
	00 00		 mov	 edx, DWORD PTR [esi+ecx+1104]
  002bc	85 d2		 test	 edx, edx
  002be	78 09		 js	 SHORT $LN48@MLS_SkillM@8

; 6571 : 					{
; 6572 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  002c0	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  002c6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
$LN48@MLS_SkillM@8:

; 6573 : 					}
; 6574 : 
; 6575 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  002c9	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  002cf	03 c1		 add	 eax, ecx
  002d1	50		 push	 eax
  002d2	57		 push	 edi
  002d3	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  002d8	83 c4 08	 add	 esp, 8
  002db	83 f8 01	 cmp	 eax, 1
  002de	0f 85 d9 01 00
	00		 jne	 $LN50@MLS_SkillM@8
  002e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN49@MLS_SkillM@8:

; 6576 : 					{
; 6577 : 						EnableAttack = 1;
; 6578 : 					}
; 6579 : 				}
; 6580 : 
; 6581 : 				if( EnableAttack != FALSE )
; 6582 : 				{
; 6583 : 					if( SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  002ea	0f bf 84 0e 46
	01 00 00	 movsx	 eax, WORD PTR [esi+ecx+326]
  002f2	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _aIndex$GSCopy$[ebp]
  002f8	0f bf 8c 0e 44
	01 00 00	 movsx	 ecx, WORD PTR [esi+ecx+324]
  00300	52		 push	 edx
  00301	50		 push	 eax
  00302	51		 push	 ecx
  00303	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  00308	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030b	85 c0		 test	 eax, eax
  0030d	0f 84 aa 01 00
	00		 je	 $LN50@MLS_SkillM@8

; 6584 : 					{
; 6585 : 
; 6586 : 						if( lpMagic->m_Skill == 431 )

  00313	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  00319	81 78 08 af 01
	00 00		 cmp	 DWORD PTR [eax+8], 431	; 000001afH
  00320	0f 85 ae 00 00
	00		 jne	 $LN53@MLS_SkillM@8

; 6587 : 						{
; 6588 : 							float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00326	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  0032a	52		 push	 edx
  0032b	68 af 01 00 00	 push	 431			; 000001afH
  00330	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00335	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0033a	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00340	50		 push	 eax
  00341	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00346	d9 9d ec fe ff
	ff		 fstp	 DWORD PTR _fSkillValue$218910[ebp]

; 6589 : 
; 6590 : 							if( fSkillValue > 0.0f )

  0034c	d9 ee		 fldz
  0034e	d8 9d ec fe ff
	ff		 fcomp	 DWORD PTR _fSkillValue$218910[ebp]
  00354	df e0		 fnstsw	 ax
  00356	f6 c4 05	 test	 ah, 5
  00359	7a 79		 jp	 SHORT $LN53@MLS_SkillM@8

; 6591 : 							{
; 6592 : 								float fpercent = rand()%100;

  0035b	e8 00 00 00 00	 call	 _rand
  00360	99		 cdq
  00361	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00366	f7 f9		 idiv	 ecx

; 6593 : 
; 6594 : 								if( fpercent < fSkillValue )

  00368	89 95 e8 fe ff
	ff		 mov	 DWORD PTR tv803[ebp], edx
  0036e	db 85 e8 fe ff
	ff		 fild	 DWORD PTR tv803[ebp]
  00374	d9 85 ec fe ff
	ff		 fld	 DWORD PTR _fSkillValue$218910[ebp]
  0037a	de d9		 fcompp
  0037c	df e0		 fnstsw	 ax
  0037e	f6 c4 41	 test	 ah, 65			; 00000041H
  00381	75 51		 jne	 SHORT $LN53@MLS_SkillM@8

; 6595 : 								{
; 6596 : 									if(!g_ZtLicense.CheckUser(eZtUB::Stone))

  00383	6a 37		 push	 55			; 00000037H
  00385	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0038a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0038f	84 c0		 test	 al, al
  00391	75 1e		 jne	 SHORT $LN52@MLS_SkillM@8

; 6597 : 									{
; 6598 : 										gObjApplyBuffEffectDuration(&gObj[tObjNum],AT_STUN,0,0,0,0,1);

  00393	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00399	6a 01		 push	 1
  0039b	6a 00		 push	 0
  0039d	6a 00		 push	 0
  0039f	6a 00		 push	 0
  003a1	6a 00		 push	 0
  003a3	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  003a6	6a 3d		 push	 61			; 0000003dH
  003a8	50		 push	 eax
  003a9	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  003ae	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN52@MLS_SkillM@8:

; 6599 : 									}
; 6600 : 									gObjSetPosition(gObj[tObjNum].m_Index,gObj[tObjNum].X,gObj[tObjNum].Y);

  003b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003b6	0f bf 8c 06 46
	01 00 00	 movsx	 ecx, WORD PTR [esi+eax+326]
  003be	0f bf 94 06 44
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+324]
  003c6	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  003c9	51		 push	 ecx
  003ca	52		 push	 edx
  003cb	50		 push	 eax
  003cc	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  003d1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN53@MLS_SkillM@8:

; 6601 : 								}
; 6602 : 							}
; 6603 : 						}
; 6604 : 
; 6605 : 						for(int i = 0; i < 5; i++)

  003d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003da	33 db		 xor	 ebx, ebx
  003dc	89 9d ec fe ff
	ff		 mov	 DWORD PTR tv748[ebp], ebx
$LL7@MLS_SkillM@8:

; 6606 : 						{
; 6607 : 							float Dis = (fSkillFrustrumY[i] - lpObj->Y)*(gObj[tObjNum].Y - lpObj->Y) - (fSkillFrustrumX[i] - lpObj->X)*(gObj[tObjNum].X - lpObj->X);

  003e2	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  003e9	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  003f0	8b 9c 1d 40 ff
	ff ff		 mov	 ebx, DWORD PTR _fSkillFrustrumX$[ebp+ebx]
  003f7	0f bf bc 0e 44
	01 00 00	 movsx	 edi, WORD PTR [esi+ecx+324]
  003ff	2b da		 sub	 ebx, edx
  00401	2b fa		 sub	 edi, edx
  00403	0f bf 94 0e 46
	01 00 00	 movsx	 edx, WORD PTR [esi+ecx+326]
  0040b	0f af fb	 imul	 edi, ebx
  0040e	8b 9d ec fe ff
	ff		 mov	 ebx, DWORD PTR tv748[ebp]
  00414	8b 9c 1d 2c ff
	ff ff		 mov	 ebx, DWORD PTR _fSkillFrustrumY$[ebp+ebx]
  0041b	2b d0		 sub	 edx, eax
  0041d	2b d8		 sub	 ebx, eax
  0041f	0f af d3	 imul	 edx, ebx
  00422	2b d7		 sub	 edx, edi
  00424	89 95 e8 fe ff
	ff		 mov	 DWORD PTR tv793[ebp], edx
  0042a	db 85 e8 fe ff
	ff		 fild	 DWORD PTR tv793[ebp]
  00430	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR _Dis$218919[ebp]

; 6608 : 						
; 6609 : 							if( (Dis >= -5 && Dis <= 5) || tObjNum == aTargetIndex )

  00436	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@c0a00000
  0043c	d9 85 e8 fe ff
	ff		 fld	 DWORD PTR _Dis$218919[ebp]
  00442	d8 d1		 fcom	 ST(1)
  00444	df e0		 fnstsw	 ax
  00446	dd d9		 fstp	 ST(1)
  00448	f6 c4 01	 test	 ah, 1
  0044b	75 0f		 jne	 SHORT $LN56@MLS_SkillM@8
  0044d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@40a00000
  00453	df e0		 fnstsw	 ax
  00455	f6 c4 41	 test	 ah, 65			; 00000041H
  00458	7b 0f		 jnp	 SHORT $LN44@MLS_SkillM@8
  0045a	eb 02		 jmp	 SHORT $LN2@MLS_SkillM@8
$LN56@MLS_SkillM@8:
  0045c	dd d8		 fstp	 ST(0)
$LN2@MLS_SkillM@8:
  0045e	8b 45 14	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00461	39 85 c8 fe ff
	ff		 cmp	 DWORD PTR _tObjNum$[ebp], eax
  00467	75 2e		 jne	 SHORT $LN45@MLS_SkillM@8
$LN44@MLS_SkillM@8:

; 6610 : 							{
; 6611 : 								gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  00469	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  0046f	8b bd dc fe ff
	ff		 mov	 edi, DWORD PTR _lpObj$[ebp]
  00475	6a 00		 push	 0
  00477	6a 00		 push	 0
  00479	6a 00		 push	 0
  0047b	6a 00		 push	 0
  0047d	6a 00		 push	 0
  0047f	6a 01		 push	 1
  00481	52		 push	 edx
  00482	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00485	50		 push	 eax
  00486	57		 push	 edi
  00487	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0048c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00492	83 c4 24	 add	 esp, 36			; 00000024H
  00495	eb 06		 jmp	 SHORT $LN6@MLS_SkillM@8
$LN45@MLS_SkillM@8:
  00497	8b bd dc fe ff
	ff		 mov	 edi, DWORD PTR _lpObj$[ebp]
$LN6@MLS_SkillM@8:

; 6601 : 								}
; 6602 : 							}
; 6603 : 						}
; 6604 : 
; 6605 : 						for(int i = 0; i < 5; i++)

  0049d	8b 9d ec fe ff
	ff		 mov	 ebx, DWORD PTR tv748[ebp]
  004a3	83 c3 04	 add	 ebx, 4
  004a6	89 9d ec fe ff
	ff		 mov	 DWORD PTR tv748[ebp], ebx
  004ac	83 fb 14	 cmp	 ebx, 20			; 00000014H
  004af	0f 8c 2d ff ff
	ff		 jl	 $LL7@MLS_SkillM@8
  004b5	8b 9d d8 fe ff
	ff		 mov	 ebx, DWORD PTR tv870[ebp]
  004bb	eb 06		 jmp	 SHORT $LN51@MLS_SkillM@8
$LN50@MLS_SkillM@8:
  004bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN51@MLS_SkillM@8:

; 6612 : 							}
; 6613 : 						}
; 6614 : 					}
; 6615 : 				}
; 6616 : 			}
; 6617 : 		}
; 6618 : 
; 6619 : 		count++;

  004c3	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 6620 : 
; 6621 : 		if( count > (MAX_VIEWPORT-1) )

  004c6	ff 8d e4 fe ff
	ff		 dec	 DWORD PTR tv180[ebp]
  004cc	89 9d d8 fe ff
	ff		 mov	 DWORD PTR tv870[ebp], ebx
  004d2	0f 85 58 fd ff
	ff		 jne	 $LL27@MLS_SkillM@8

; 6622 : 		{
; 6623 : 			break;
; 6624 : 		}
; 6625 : 	}
; 6626 : }

  004d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004db	5f		 pop	 edi
  004dc	5e		 pop	 esi
  004dd	33 cd		 xor	 ecx, ebp
  004df	5b		 pop	 ebx
  004e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e5	8b e5		 mov	 esp, ebp
  004e7	5d		 pop	 ebp
  004e8	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
_TEXT	ENDS
PUBLIC	?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckSkillCondition
EXTRN	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter
EXTRN	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A:BYTE ; g_MasterLevelSystem
EXTRN	?GCResultSend@@YAXHEE@Z:PROC			; GCResultSend
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::CheckSkillCondition, COMDAT
; _this$ = ecx

; 822  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 823  : 	if( !gObjIsConnected(lpObj) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 1a		 jne	 SHORT $LN11@CheckSkill@2

; 824  : 	{
; 825  : 		GCResultSend(lpObj->m_Index,0x51,3);

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
  00019	6a 03		 push	 3
  0001b	6a 51		 push	 81			; 00000051H
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?GCResultSend@@YAXHEE@Z	; GCResultSend
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	5f		 pop	 edi

; 826  : 		return 2;

  00027	b8 02 00 00 00	 mov	 eax, 2
  0002c	5e		 pop	 esi

; 862  : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN11@CheckSkill@2:
  00031	53		 push	 ebx

; 827  : 	}
; 828  : 
; 829  : 	if ( iMLSkill <0 || iMLSkill > MAX_SKILL -1 )

  00032	8b 5d 0c	 mov	 ebx, DWORD PTR _iMLSkill$[ebp]
  00035	81 fb bb 02 00
	00		 cmp	 ebx, 699		; 000002bbH
  0003b	0f 87 92 00 00
	00		 ja	 $LN9@CheckSkill@2

; 833  : 	}
; 834  : 
; 835  : 	if( !g_MasterLevelSystem.CheckIsMasterLevelCharacter(lpObj) )

  00041	56		 push	 esi
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  00047	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  0004c	85 c0		 test	 eax, eax
  0004e	75 0c		 jne	 SHORT $LN8@CheckSkill@2

; 836  : 		return 2;

  00050	5b		 pop	 ebx
  00051	5f		 pop	 edi
  00052	b8 02 00 00 00	 mov	 eax, 2
  00057	5e		 pop	 esi

; 862  : }

  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
$LN8@CheckSkill@2:

; 837  : 
; 838  : 	if( !this->CheckRequireStatus(iMLSkill) )

  0005c	53		 push	 ebx
  0005d	8b cf		 mov	 ecx, edi
  0005f	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  00064	85 c0		 test	 eax, eax

; 839  : 		return 4;

  00066	74 53		 je	 SHORT $LN16@CheckSkill@2

; 840  : 
; 841  : 	if( this->GetMaxPointOfMasterSkill(lpObj->Class,iMLSkill) < iSkillLevel )

  00068	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  0006f	53		 push	 ebx
  00070	51		 push	 ecx
  00071	8b cf		 mov	 ecx, edi
  00073	e8 00 00 00 00	 call	 ?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
  00078	3b 45 10	 cmp	 eax, DWORD PTR _iSkillLevel$[ebp]

; 842  : 		return 4;

  0007b	7c 3e		 jl	 SHORT $LN16@CheckSkill@2

; 843  : 
; 844  : 	int iReqMLPoint = this->GetSkillReqMLPoint(lpObj->Class,iMLSkill);

  0007d	0f b7 96 b8 00
	00 00		 movzx	 edx, WORD PTR [esi+184]
  00084	53		 push	 ebx
  00085	52		 push	 edx
  00086	8b cf		 mov	 ecx, edi
  00088	e8 00 00 00 00	 call	 ?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint

; 845  : 
; 846  : 	if( iReqMLPoint < 0 )

  0008d	85 c0		 test	 eax, eax

; 847  : 		return 4;

  0008f	78 2a		 js	 SHORT $LN16@CheckSkill@2

; 848  : 
; 849  : 	if( lpObj->MLPoint < iReqMLPoint )

  00091	39 86 e8 00 00
	00		 cmp	 DWORD PTR [esi+232], eax

; 850  : 		return 4;

  00097	7c 22		 jl	 SHORT $LN16@CheckSkill@2

; 851  : 
; 852  : 	if( iSkillLevel == 1 )

  00099	83 7d 10 01	 cmp	 DWORD PTR _iSkillLevel$[ebp], 1
  0009d	75 28		 jne	 SHORT $LN14@CheckSkill@2

; 853  : 	{
; 854  : 		if( !this->CheckCompleteBrandOfSkill(lpObj,iMLSkill) )

  0009f	53		 push	 ebx
  000a0	56		 push	 esi
  000a1	8b cf		 mov	 ecx, edi
  000a3	e8 00 00 00 00	 call	 ?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
  000a8	85 c0		 test	 eax, eax

; 855  : 			return 4;

  000aa	74 0f		 je	 SHORT $LN16@CheckSkill@2

; 856  : 
; 857  : 		if( !this->CheckPreviousRankSkill(lpObj,iMLSkill,iSkillLevel) )

  000ac	6a 01		 push	 1
  000ae	53		 push	 ebx
  000af	56		 push	 esi
  000b0	8b cf		 mov	 ecx, edi
  000b2	e8 00 00 00 00	 call	 ?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
  000b7	85 c0		 test	 eax, eax
  000b9	75 0c		 jne	 SHORT $LN14@CheckSkill@2
$LN16@CheckSkill@2:
  000bb	5b		 pop	 ebx
  000bc	5f		 pop	 edi

; 858  : 			return 4;

  000bd	b8 04 00 00 00	 mov	 eax, 4
  000c2	5e		 pop	 esi

; 862  : }

  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
$LN14@CheckSkill@2:
  000c7	5b		 pop	 ebx
  000c8	5f		 pop	 edi

; 859  : 	}
; 860  : 
; 861  : return 1;

  000c9	b8 01 00 00 00	 mov	 eax, 1
  000ce	5e		 pop	 esi

; 862  : }

  000cf	5d		 pop	 ebp
  000d0	c2 0c 00	 ret	 12			; 0000000cH
$LN9@CheckSkill@2:

; 830  : 	{
; 831  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  000d3	68 3f 03 00 00	 push	 831			; 0000033fH
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MLANJOKC@NewMasterLevelSkillTreeSystem?4cp@
  000dd	68 c9 01 00 00	 push	 457			; 000001c9H
  000e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000e7	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	5b		 pop	 ebx
  000f6	5f		 pop	 edi

; 832  : 		return 3;

  000f7	b8 03 00 00 00	 mov	 eax, 3
  000fc	5e		 pop	 esi

; 862  : }

  000fd	5d		 pop	 ebp
  000fe	c2 0c 00	 ret	 12			; 0000000cH
?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckSkillCondition
_TEXT	ENDS
PUBLIC	??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@ ; `string'
PUBLIC	??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@ ; `string'
PUBLIC	??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill
EXTRN	?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjCalcMLSkillItemOption
;	COMDAT ??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@
CONST	SEGMENT
??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@ DB '['
	DB	'MasterSkill] [%s][%s] Success - Add Magic List, Skill:%d Leve'
	DB	'l:%d MLPoint:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@
CONST	SEGMENT
??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@ DB '['
	DB	'MasterSkill] [%s][%s] Fail - Add Magic List, Skill:%d Level:%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@
CONST	SEGMENT
??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@ DB '['
	DB	'MasterSkill] [%s][%s] Fail(Use Trade Interface) - Add Magic L'
	DB	'ist', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill, COMDAT
; _this$ = ecx

; 1215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]
  00019	8b d9		 mov	 ebx, ecx

; 1216 : 	if( !gObjIsConnected(aIndex) )

  0001b	56		 push	 esi

; 1296 : 			}
; 1297 : 
; 1298 : 			this->AddPassiveSkill(lpObj,lpMsg->AddSkill,iSkillLevel);

  0001c	89 5d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  0001f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 1c		 jne	 SHORT $LN11@CGReqGetMa@2

; 1217 : 	{
; 1218 : 		CloseClient(aIndex);

  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00031	83 c4 04	 add	 esp, 4
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 1312 : }

  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN11@CGReqGetMa@2:

; 1219 : 		return;
; 1220 : 	}
; 1221 : 
; 1222 : #ifdef DEBUG_CODE
; 1223 : 	LogAddC(2,"addskill:%d",lpMsg->AddSkill);
; 1224 : #endif
; 1225 : 
; 1226 : 	LPOBJ lpObj = &gObj[aIndex];

  00047	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0004d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1227 : 	int iResult;
; 1228 : 
; 1229 : 	PMSG_ANS_MASTERLEVEL_SKILL pMsg;
; 1230 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF3,0x52,sizeof(pMsg));

  00053	6a 1c		 push	 28			; 0000001cH
  00055	6a 52		 push	 82			; 00000052H
  00057	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0005a	68 f3 00 00 00	 push	 243			; 000000f3H
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1231 : 	pMsg.btResult = 0;

  00065	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 1232 : 	pMsg.wLevelPoint = lpObj->MLPoint;

  00069	66 8b 8e e8 00
	00 00		 mov	 cx, WORD PTR [esi+232]
  00070	66 89 4d e6	 mov	 WORD PTR _pMsg$[ebp+6], cx

; 1233 : 	pMsg.dwSkillId = -1;

  00074	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+12], -1

; 1234 : 	pMsg.iLevel = 0;

  0007b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+16], 0

; 1235 : 	
; 1236 : 	if( lpObj->m_IfState.use == TRUE &&
; 1237 : 		lpObj->m_IfState.type == 1 )

  00082	8b 86 1c 0e 00
	00		 mov	 eax, DWORD PTR [esi+3612]
  00088	8b d0		 mov	 edx, eax
  0008a	80 e2 03	 and	 dl, 3
  0008d	83 c4 10	 add	 esp, 16			; 00000010H
  00090	80 fa 01	 cmp	 dl, 1
  00093	75 48		 jne	 SHORT $LN10@CGReqGetMa@2
  00095	25 c0 ff 00 00	 and	 eax, 65472		; 0000ffc0H
  0009a	83 f8 40	 cmp	 eax, 64			; 00000040H
  0009d	75 3e		 jne	 SHORT $LN10@CGReqGetMa@2

; 1238 : 	{
; 1239 : 		iResult = 6;
; 1240 : 		LogAddTD("[MasterSkill] [%s][%s] Fail(Use Trade Interface) - Add Magic List",lpObj->AccountID,lpObj->Name);

  0009f	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  000a2	50		 push	 eax
  000a3	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  000a6	51		 push	 ecx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1241 : 		pMsg.btResult = iResult;
; 1242 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  000b2	0f b6 55 e1	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  000b6	52		 push	 edx
  000b7	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000ba	c6 45 e4 06	 mov	 BYTE PTR _pMsg$[ebp+4], 6
  000be	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000c7	83 c4 18	 add	 esp, 24			; 00000018H
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 1312 : }

  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN10@CGReqGetMa@2:

; 1243 : 		return;
; 1244 : 	}
; 1245 : 	
; 1246 : 	int iSkillLevel = this->CheckSkillLevel(lpObj,lpMsg->AddSkill) + this->GetSkillReqMLPoint(lpObj->Class,lpMsg->AddSkill);

  000dd	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000e0	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  000e7	52		 push	 edx
  000e8	50		 push	 eax
  000e9	8b cb		 mov	 ecx, ebx
  000eb	e8 00 00 00 00	 call	 ?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint
  000f0	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000f3	51		 push	 ecx
  000f4	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000f7	56		 push	 esi
  000f8	8b d8		 mov	 ebx, eax
  000fa	e8 00 00 00 00	 call	 ?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckSkillLevel

; 1247 : 
; 1248 : 	/*if( lpObj->MLPointSpent+lpObj->MLPoint != lpObj->MasterLevel )
; 1249 : 	{
; 1250 : 		LogAddTD("[MasterSkill] [%s][%s] Fail(levelpoint mismatch) - Add Magic List, Skill:%d Level:%d",
; 1251 : 			lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel);
; 1252 : 	}*/
; 1253 : 
; 1254 : 	iResult = this->CheckSkillCondition(lpObj,lpMsg->AddSkill,iSkillLevel);

  000ff	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00102	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00105	03 d8		 add	 ebx, eax
  00107	53		 push	 ebx
  00108	52		 push	 edx
  00109	56		 push	 esi
  0010a	e8 00 00 00 00	 call	 ?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckSkillCondition

; 1255 : 
; 1256 : 	if( iResult == 1 )

  0010f	83 f8 01	 cmp	 eax, 1
  00112	0f 85 5e 01 00
	00		 jne	 $LN9@CGReqGetMa@2

; 1257 : 	{
; 1258 : 		if( this->gObjMagicAdd_MLS(lpObj,lpMsg->AddSkill,iSkillLevel) < 0 )

  00118	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0011b	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0011e	53		 push	 ebx
  0011f	50		 push	 eax
  00120	56		 push	 esi
  00121	e8 00 00 00 00	 call	 ?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS

; 1259 : 		{
; 1260 : 			iResult = 5;
; 1261 : 			LogAddTD("[MasterSkill] [%s][%s] Fail - Add Magic List, Skill:%d Level:%d",
; 1262 : 				lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel);

  00126	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00129	85 c0		 test	 eax, eax
  0012b	79 1d		 jns	 SHORT $LN8@CGReqGetMa@2
  0012d	53		 push	 ebx
  0012e	51		 push	 ecx
  0012f	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  00132	52		 push	 edx
  00133	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00136	50		 push	 eax
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00142	83 c4 14	 add	 esp, 20			; 00000014H

; 1263 : 		}
; 1264 : 		else

  00145	e9 2f 01 00 00	 jmp	 $LN1@CGReqGetMa@2
$LN8@CGReqGetMa@2:

; 1265 : 		{
; 1266 : 			int iReqMLPoint = this->GetSkillReqMLPoint(lpObj->Class,lpMsg->AddSkill);

  0014a	0f b7 96 b8 00
	00 00		 movzx	 edx, WORD PTR [esi+184]
  00151	51		 push	 ecx
  00152	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00155	52		 push	 edx
  00156	e8 00 00 00 00	 call	 ?GetSkillReqMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetSkillReqMLPoint

; 1267 : 
; 1268 : 			if( iReqMLPoint < 0 )

  0015b	85 c0		 test	 eax, eax
  0015d	0f 88 2a 01 00
	00		 js	 $LN12@CGReqGetMa@2

; 1269 : 				return;
; 1270 : 
; 1271 : 			lpObj->MLPoint -= iReqMLPoint;

  00163	29 86 e8 00 00
	00		 sub	 DWORD PTR [esi+232], eax

; 1272 : 			lpObj->MLInfoLoad += iReqMLPoint;

  00169	01 86 ec 00 00
	00		 add	 DWORD PTR [esi+236], eax

; 1273 : 
; 1274 : 			pMsg.btResult = iResult;
; 1275 : 			pMsg.wLevelPoint = lpObj->MLPoint;
; 1276 : 			pMsg.btMasterSkillId = this->GetMasterSkillUIIndex(lpObj->Class,lpMsg->AddSkill);

  0016f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00172	c6 45 e4 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1
  00176	66 8b 86 e8 00
	00 00		 mov	 ax, WORD PTR [esi+232]
  0017d	66 89 45 e6	 mov	 WORD PTR _pMsg$[ebp+6], ax
  00181	0f b7 96 b8 00
	00 00		 movzx	 edx, WORD PTR [esi+184]
  00188	51		 push	 ecx
  00189	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0018c	52		 push	 edx
  0018d	e8 00 00 00 00	 call	 ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
  00192	88 45 e8	 mov	 BYTE PTR _pMsg$[ebp+8], al

; 1277 : 			pMsg.dwSkillId = lpMsg->AddSkill;

  00195	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 1278 : 			pMsg.iLevel = iSkillLevel;
; 1279 : 
; 1280 : 			if( this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel) > 0.0f )

  00198	53		 push	 ebx
  00199	50		 push	 eax
  0019a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0019f	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  001a2	89 5d f0	 mov	 DWORD PTR _pMsg$[ebp+16], ebx
  001a5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001aa	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001b3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  001b9	df e0		 fnstsw	 ax
  001bb	f6 c4 41	 test	 ah, 65			; 00000041H
  001be	75 1a		 jne	 SHORT $LN5@CGReqGetMa@2

; 1281 : 			{
; 1282 : 				pMsg.value = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel);

  001c0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  001c3	53		 push	 ebx
  001c4	50		 push	 eax
  001c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001ca	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001cf	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1283 : 			}
; 1284 : 			else

  001d8	eb 06		 jmp	 SHORT $LN15@CGReqGetMa@2
$LN5@CGReqGetMa@2:

; 1285 : 			{
; 1286 : 				pMsg.value = -1.0f;

  001da	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
$LN15@CGReqGetMa@2:
  001e0	d9 5d f4	 fstp	 DWORD PTR _pMsg$[ebp+20]

; 1287 : 			}
; 1288 : 
; 1289 : 			if( iSkillLevel < MAX_SKILLTREE_LEVEL && this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel+1) > 0.0f )

  001e3	83 fb 14	 cmp	 ebx, 20			; 00000014H
  001e6	7d 45		 jge	 SHORT $LN14@CGReqGetMa@2
  001e8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  001eb	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  001ee	50		 push	 eax
  001ef	51		 push	 ecx
  001f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001f5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001fa	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00203	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00209	df e0		 fnstsw	 ax
  0020b	f6 c4 41	 test	 ah, 65			; 00000041H
  0020e	75 1d		 jne	 SHORT $LN14@CGReqGetMa@2

; 1290 : 			{
; 1291 : 				pMsg.nextvalue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel+1);

  00210	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00213	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00216	50		 push	 eax
  00217	52		 push	 edx
  00218	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0021d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00222	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1292 : 			}
; 1293 : 			else

  0022b	eb 06		 jmp	 SHORT $LN16@CGReqGetMa@2
$LN14@CGReqGetMa@2:

; 1294 : 			{
; 1295 : 				pMsg.nextvalue = -1.0f;

  0022d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
$LN16@CGReqGetMa@2:

; 1296 : 			}
; 1297 : 
; 1298 : 			this->AddPassiveSkill(lpObj,lpMsg->AddSkill,iSkillLevel);

  00233	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00236	d9 5d f8	 fstp	 DWORD PTR _pMsg$[ebp+24]
  00239	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0023c	53		 push	 ebx
  0023d	50		 push	 eax
  0023e	56		 push	 esi
  0023f	e8 00 00 00 00	 call	 ?AddPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::AddPassiveSkill

; 1299 : 			gObjCalCharacter(lpObj->m_Index);	//not original

  00244	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00246	51		 push	 ecx
  00247	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 1300 : 			gObjCalcMLSkillItemOption(lpObj);

  0024c	56		 push	 esi
  0024d	e8 00 00 00 00	 call	 ?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcMLSkillItemOption

; 1301 : 
; 1302 : 			LogAddTD("[MasterSkill] [%s][%s] Success - Add Magic List, Skill:%d Level:%d MLPoint:%d",
; 1303 : 				lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel,lpObj->MLPoint);

  00252	8b 96 e8 00 00
	00		 mov	 edx, DWORD PTR [esi+232]
  00258	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0025b	52		 push	 edx
  0025c	53		 push	 ebx
  0025d	50		 push	 eax
  0025e	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  00261	51		 push	 ecx
  00262	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00265	52		 push	 edx
  00266	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@
  0026b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00271	83 c4 20	 add	 esp, 32			; 00000020H

; 1304 : 		}
; 1305 : 	}
; 1306 : 	else

  00274	eb 03		 jmp	 SHORT $LN1@CGReqGetMa@2
$LN9@CGReqGetMa@2:

; 1307 : 	{
; 1308 : 		pMsg.btResult = iResult;

  00276	88 45 e4	 mov	 BYTE PTR _pMsg$[ebp+4], al
$LN1@CGReqGetMa@2:

; 1309 : 	}
; 1310 : 	
; 1311 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00279	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0027d	8b 16		 mov	 edx, DWORD PTR [esi]
  0027f	50		 push	 eax
  00280	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00283	51		 push	 ecx
  00284	52		 push	 edx
  00285	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0028a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@CGReqGetMa@2:

; 1312 : }

  0028d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	33 cd		 xor	 ecx, ebp
  00294	5b		 pop	 ebx
  00295	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029a	8b e5		 mov	 esp, ebp
  0029c	5d		 pop	 ebp
  0029d	c2 08 00	 ret	 8
?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z
_TEXT	SEGMENT
_DuelIndex$ = -20					; size = 4
tv75 = -16						; size = 4
_nHitCount$ = -12					; size = 4
_bRet$ = -8						; size = 4
tv521 = -4						; size = 4
_bAttack$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_isCombo$ = 28						; size = 4
?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction, COMDAT
; _this$ = ecx

; 1909 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 1911 : 	int count = 0;
; 1912 : 	int tObjNum;
; 1913 : 	int DuelIndex = lpObj->m_iDuelUser;
; 1914 : 	int nHitCount = 0;
; 1915 : 	int bAttack = 0;
; 1916 : 	int nMinCount = 4;
; 1917 : 	int nMaxCount = 8;
; 1918 : 	int aDistance = 3;
; 1919 : 
; 1920 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	33 c0		 xor	 eax, eax
  00012	57		 push	 edi
  00013	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax
  00016	89 45 f4	 mov	 DWORD PTR _nHitCount$[ebp], eax
  00019	89 45 08	 mov	 DWORD PTR _bAttack$[ebp], eax
  0001c	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  00020	6a 01		 push	 1
  00022	52		 push	 edx
  00023	8b f9		 mov	 edi, ecx
  00025	8b 8e b8 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3768]
  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	89 4d ec	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
  00030	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 1921 : 
; 1922 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  00035	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	51		 push	 ecx
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00041	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 1923 : 
; 1924 : 
; 1925 : 	if( this->MLS_CalDistance(lpObj->X,lpObj->Y,x,y) <= iSkillDistance )

  00046	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  0004a	0f bf 96 46 01
	00 00		 movsx	 edx, WORD PTR [esi+326]
  00051	8b d8		 mov	 ebx, eax
  00053	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  00057	50		 push	 eax
  00058	0f bf 86 44 01
	00 00		 movsx	 eax, WORD PTR [esi+324]
  0005f	51		 push	 ecx
  00060	52		 push	 edx
  00061	50		 push	 eax
  00062	8b cf		 mov	 ecx, edi
  00064	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  00069	3b c3		 cmp	 eax, ebx
  0006b	0f 8f af 01 00
	00		 jg	 $LN32@MLS_SkillS@20

; 1910 : 	int bRet = FALSE;

  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00077	8d 9e b0 08 00
	00		 lea	 ebx, DWORD PTR [esi+2224]
  0007d	89 5d fc	 mov	 DWORD PTR tv521[ebp], ebx
  00080	c7 45 f0 4b 00
	00 00		 mov	 DWORD PTR tv75[ebp], 75	; 0000004bH
  00087	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL23@MLS_SkillS@20:

; 1926 : 	{
; 1927 : 		while ( true )
; 1928 : 		{
; 1929 : 			if(lpObj->VpPlayer2[count].state != 0)

  00090	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00094	0f 84 77 01 00
	00		 je	 $LN8@MLS_SkillS@20

; 1930 : 			{
; 1931 : 				tObjNum = lpObj->VpPlayer2[count].number;	

  0009a	0f bf 7b fe	 movsx	 edi, WORD PTR [ebx-2]

; 1932 : 				if(tObjNum >= 0)

  0009e	85 ff		 test	 edi, edi
  000a0	0f 88 6b 01 00
	00		 js	 $LN8@MLS_SkillS@20

; 1933 : 				{
; 1934 : 					int EnableAttack = 0;
; 1935 : 
; 1936 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000a6	8a 03		 mov	 al, BYTE PTR [ebx]
  000a8	3c 02		 cmp	 al, 2
  000aa	75 16		 jne	 SHORT $LN19@MLS_SkillS@20
  000ac	8b cf		 mov	 ecx, edi
  000ae	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000b4	83 bc 11 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1104], 0

; 1937 : 					{
; 1938 : 						EnableAttack = 1;

  000bc	0f 8c 8a 00 00
	00		 jl	 $LN34@MLS_SkillS@20
$LN19@MLS_SkillS@20:

; 1939 : 					}
; 1940 : 					else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000c2	3b 7d 18	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  000c5	0f 84 81 00 00
	00		 je	 $LN34@MLS_SkillS@20
  000cb	39 7d ec	 cmp	 DWORD PTR _DuelIndex$[ebp], edi
  000ce	74 7c		 je	 SHORT $LN34@MLS_SkillS@20

; 1941 : 					{
; 1942 : 						EnableAttack = 1;
; 1943 : 					}
; 1944 : 
; 1945 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000d0	3c 03		 cmp	 al, 3
  000d2	74 30		 je	 SHORT $LN14@MLS_SkillS@20
  000d4	8b c7		 mov	 eax, edi
  000d6	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000dc	03 c2		 add	 eax, edx
  000de	80 b8 49 01 00
	00 1e		 cmp	 BYTE PTR [eax+329], 30	; 0000001eH
  000e5	75 1d		 jne	 SHORT $LN14@MLS_SkillS@20
  000e7	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  000ee	75 14		 jne	 SHORT $LN14@MLS_SkillS@20

; 1946 : 					{
; 1947 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000f0	8a 8e 02 1c 00
	00		 mov	 cl, BYTE PTR [esi+7170]
  000f6	3a 88 02 1c 00
	00		 cmp	 cl, BYTE PTR [eax+7170]
  000fc	0f 84 0f 01 00
	00		 je	 $LN8@MLS_SkillS@20

; 1948 : 							EnableAttack = 1;
; 1949 : 					}
; 1950 : 
; 1951 : 					else

  00102	eb 48		 jmp	 SHORT $LN34@MLS_SkillS@20
$LN14@MLS_SkillS@20:

; 1952 : 					{
; 1953 : 						int CallMonIndex = gObj[tObjNum].m_Index;

  00104	8b cf		 mov	 ecx, edi
  00106	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 1954 : 	
; 1955 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0010c	66 83 7c 11 68
	02		 cmp	 WORD PTR [ecx+edx+104], 2
  00112	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00115	75 14		 jne	 SHORT $LN11@MLS_SkillS@20
  00117	8b 8c 11 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+1104]
  0011e	85 c9		 test	 ecx, ecx
  00120	78 09		 js	 SHORT $LN11@MLS_SkillS@20

; 1956 : 						{
; 1957 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00122	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00128	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
$LN11@MLS_SkillS@20:

; 1958 : 						}
; 1959 : 	
; 1960 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0012b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00131	03 c2		 add	 eax, edx
  00133	50		 push	 eax
  00134	56		 push	 esi
  00135	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0013a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00140	83 c4 08	 add	 esp, 8
  00143	83 f8 01	 cmp	 eax, 1
  00146	0f 85 c5 00 00
	00		 jne	 $LN8@MLS_SkillS@20
$LN34@MLS_SkillS@20:

; 1961 : 						{
; 1962 : 							EnableAttack = 1;
; 1963 : 						}
; 1964 : 					}
; 1965 : 
; 1966 : 					if( EnableAttack != 0 )
; 1967 : 					{
; 1968 : 						if( gObj[tObjNum].X >= (x -aDistance) &&
; 1969 : 						gObj[tObjNum].X <= (x +aDistance) &&
; 1970 : 						gObj[tObjNum].Y >= (y -aDistance) &&
; 1971 : 						gObj[tObjNum].Y <= (y +aDistance) )

  0014c	8b c7		 mov	 eax, edi
  0014e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00154	0f bf 8c 10 44
	01 00 00	 movsx	 ecx, WORD PTR [eax+edx+324]
  0015c	03 c2		 add	 eax, edx
  0015e	0f b6 55 10	 movzx	 edx, BYTE PTR _x$[ebp]
  00162	8d 5a fd	 lea	 ebx, DWORD PTR [edx-3]
  00165	3b cb		 cmp	 ecx, ebx
  00167	0f 8c 9b 00 00
	00		 jl	 $LN37@MLS_SkillS@20
  0016d	83 c2 03	 add	 edx, 3
  00170	3b ca		 cmp	 ecx, edx
  00172	0f 8f 90 00 00
	00		 jg	 $LN37@MLS_SkillS@20
  00178	0f b6 55 14	 movzx	 edx, BYTE PTR _y$[ebp]
  0017c	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  00183	8d 5a fd	 lea	 ebx, DWORD PTR [edx-3]
  00186	3b cb		 cmp	 ecx, ebx
  00188	7c 7e		 jl	 SHORT $LN37@MLS_SkillS@20
  0018a	83 c2 03	 add	 edx, 3
  0018d	3b ca		 cmp	 ecx, edx
  0018f	7f 77		 jg	 SHORT $LN37@MLS_SkillS@20

; 1972 : 						{
; 1973 : 							gObj[tObjNum].lpAttackObj = lpObj;
; 1974 : 							nHitCount++;

  00191	8b 5d f4	 mov	 ebx, DWORD PTR _nHitCount$[ebp]
  00194	43		 inc	 ebx
  00195	89 b0 d4 03 00
	00		 mov	 DWORD PTR [eax+980], esi
  0019b	89 5d f4	 mov	 DWORD PTR _nHitCount$[ebp], ebx

; 1975 : 
; 1976 : 							if( nHitCount > nMinCount )

  0019e	83 fb 04	 cmp	 ebx, 4
  001a1	7e 13		 jle	 SHORT $LN7@MLS_SkillS@20

; 1977 : 							{
; 1978 : 								if( rand()%2 )

  001a3	e8 00 00 00 00	 call	 _rand
  001a8	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001ad	79 05		 jns	 SHORT $LN40@MLS_SkillS@20
  001af	48		 dec	 eax
  001b0	83 c8 fe	 or	 eax, -2			; fffffffeH
  001b3	40		 inc	 eax
$LN40@MLS_SkillS@20:
  001b4	74 07		 je	 SHORT $LN35@MLS_SkillS@20
$LN7@MLS_SkillS@20:

; 1979 : 									bAttack = TRUE;
; 1980 : 							}
; 1981 : 							else
; 1982 : 							{
; 1983 : 								bAttack = TRUE;

  001b6	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN35@MLS_SkillS@20:

; 1984 : 							}
; 1985 : 
; 1986 : 							if( nHitCount > nMaxCount )

  001bd	83 fb 08	 cmp	 ebx, 8
  001c0	7e 09		 jle	 SHORT $LN4@MLS_SkillS@20

; 1987 : 								bAttack = FALSE;

  001c2	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 1988 : 
; 1989 : 							if( bAttack == TRUE )

  001c9	eb 36		 jmp	 SHORT $LN38@MLS_SkillS@20
$LN4@MLS_SkillS@20:
  001cb	83 7d 08 01	 cmp	 DWORD PTR _bAttack$[ebp], 1
  001cf	75 30		 jne	 SHORT $LN38@MLS_SkillS@20

; 1990 : 							{
; 1991 : 								gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,0);

  001d1	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  001d4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001d7	6a 00		 push	 0
  001d9	50		 push	 eax
  001da	68 f4 01 00 00	 push	 500			; 000001f4H
  001df	57		 push	 edi
  001e0	6a 32		 push	 50			; 00000032H
  001e2	56		 push	 esi
  001e3	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  001e8	83 c4 18	 add	 esp, 24			; 00000018H

; 1992 : 
; 1993 : 								if( isCombo != 0 )

  001eb	83 7d 1c 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  001ef	74 10		 je	 SHORT $LN38@MLS_SkillS@20

; 1994 : 								{
; 1995 : 									GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  001f1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001f3	6a 01		 push	 1
  001f5	51		 push	 ecx
  001f6	6a 3b		 push	 59			; 0000003bH
  001f8	56		 push	 esi
  001f9	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001fe	83 c4 10	 add	 esp, 16			; 00000010H
$LN38@MLS_SkillS@20:

; 1996 : 								}
; 1997 : 							}
; 1998 : 
; 1999 : 							bRet = TRUE;

  00201	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN37@MLS_SkillS@20:
  00208	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020e	8b 5d fc	 mov	 ebx, DWORD PTR tv521[ebp]
$LN8@MLS_SkillS@20:

; 2000 : 						}
; 2001 : 					}
; 2002 : 				}
; 2003 : 			}
; 2004 : 
; 2005 : 			count++;

  00211	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 2006 : 			if(count > MAX_VIEWPORT -1)

  00214	ff 4d f0	 dec	 DWORD PTR tv75[ebp]
  00217	89 5d fc	 mov	 DWORD PTR tv521[ebp], ebx
  0021a	0f 85 70 fe ff
	ff		 jne	 $LL23@MLS_SkillS@20
$LN32@MLS_SkillS@20:

; 2007 : 			{
; 2008 : 				break;
; 2009 : 			}
; 2010 : 		}
; 2011 : 	}
; 2012 : 
; 2013 : 	return bRet;

  00220	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]
  00223	5f		 pop	 edi
  00224	5e		 pop	 esi
  00225	5b		 pop	 ebx

; 2014 : }

  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
_TEXT	ENDS
PUBLIC	?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_DuelIndex$ = -8					; size = 4
tv214 = -4						; size = 4
tv436 = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison, COMDAT
; _this$ = ecx

; 2504 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 2505 : 	LPOBJ lpObj = &gObj[aIndex];

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000a	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00010	57		 push	 edi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00017	03 df		 add	 ebx, edi

; 2506 : 
; 2507 : 	if( lpObj->Type != OBJ_USER )

  00019	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  0001e	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00021	0f 85 3b 01 00
	00		 jne	 $LN30@MLS_SkillS@21

; 2508 : 		return;
; 2509 : 
; 2510 : 	int tObjNum;
; 2511 : 	int count = 0;
; 2512 : 
; 2513 : 	int FirstHit = 0;
; 2514 : 	int HitCount = 0;
; 2515 : 	int bAttack;
; 2516 : 	int DuelIndex = lpObj->m_iDuelUser;

  00027	8b 83 b8 0e 00
	00		 mov	 eax, DWORD PTR [ebx+3768]
  0002d	89 45 f8	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00030	8d 83 b0 08 00
	00		 lea	 eax, DWORD PTR [ebx+2224]
  00036	89 45 08	 mov	 DWORD PTR tv436[ebp], eax
  00039	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv214[ebp], 75 ; 0000004bH
  00040	56		 push	 esi
$LL22@MLS_SkillS@21:

; 2517 : 	int EnableAttack;
; 2518 : 
; 2519 : 	while ( true )
; 2520 : 	{
; 2521 : 		if(lpObj->VpPlayer2[count].state != 0)

  00041	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00045	0f 84 04 01 00
	00		 je	 $LN34@MLS_SkillS@21

; 2522 : 		{
; 2523 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0004b	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 2524 : 
; 2525 : 			if(tObjNum >= 0)

  0004f	85 f6		 test	 esi, esi
  00051	0f 88 f8 00 00
	00		 js	 $LN34@MLS_SkillS@21

; 2526 : 			{
; 2527 : 				EnableAttack = 0;
; 2528 : 
; 2529 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00057	8a 00		 mov	 al, BYTE PTR [eax]
  00059	3c 02		 cmp	 al, 2
  0005b	75 16		 jne	 SHORT $LN18@MLS_SkillS@21
  0005d	8b ce		 mov	 ecx, esi
  0005f	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00065	83 bc 39 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edi+1104], 0

; 2530 : 				{
; 2531 : 					EnableAttack = 1;

  0006d	0f 8c 82 00 00
	00		 jl	 $LN15@MLS_SkillS@21
$LN18@MLS_SkillS@21:

; 2532 : 				}
; 2533 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00073	3b 75 18	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00076	74 7d		 je	 SHORT $LN15@MLS_SkillS@21
  00078	39 75 f8	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  0007b	74 78		 je	 SHORT $LN15@MLS_SkillS@21

; 2534 : 				{
; 2535 : 					EnableAttack = 1;
; 2536 : 				}
; 2537 : 
; 2538 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0007d	3c 03		 cmp	 al, 3
  0007f	74 30		 je	 SHORT $LN13@MLS_SkillS@21
  00081	8b c6		 mov	 eax, esi
  00083	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00089	80 bc 38 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edi+329], 30 ; 0000001eH
  00091	75 1e		 jne	 SHORT $LN13@MLS_SkillS@21
  00093	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  0009a	75 15		 jne	 SHORT $LN13@MLS_SkillS@21

; 2539 : 				{
; 2540 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0009c	8a 8b 02 1c 00
	00		 mov	 cl, BYTE PTR [ebx+7170]
  000a2	3a 8c 38 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edi+7170]
  000a9	0f 84 a0 00 00
	00		 je	 $LN34@MLS_SkillS@21

; 2541 : 						EnableAttack = 1;
; 2542 : 				}
; 2543 : 
; 2544 : 				else

  000af	eb 44		 jmp	 SHORT $LN15@MLS_SkillS@21
$LN13@MLS_SkillS@21:

; 2545 : 				{
; 2546 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000b1	8b ce		 mov	 ecx, esi
  000b3	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 2547 : 
; 2548 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000b9	66 83 7c 39 68
	02		 cmp	 WORD PTR [ecx+edi+104], 2
  000bf	8b 04 39	 mov	 eax, DWORD PTR [ecx+edi]
  000c2	75 14		 jne	 SHORT $LN10@MLS_SkillS@21
  000c4	8b 8c 39 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edi+1104]
  000cb	85 c9		 test	 ecx, ecx
  000cd	78 09		 js	 SHORT $LN10@MLS_SkillS@21

; 2549 : 					{
; 2550 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000cf	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000d5	8b 04 39	 mov	 eax, DWORD PTR [ecx+edi]
$LN10@MLS_SkillS@21:

; 2551 : 					}
; 2552 : 
; 2553 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000d8	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000de	03 c7		 add	 eax, edi
  000e0	50		 push	 eax
  000e1	53		 push	 ebx
  000e2	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000e7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ed	83 c4 08	 add	 esp, 8
  000f0	83 f8 01	 cmp	 eax, 1
  000f3	75 5a		 jne	 SHORT $LN34@MLS_SkillS@21
$LN15@MLS_SkillS@21:

; 2554 : 					{
; 2555 : 						EnableAttack = 1;
; 2556 : 					}
; 2557 : 				}
; 2558 : 
; 2559 : 				if(EnableAttack != 0)
; 2560 : 				{
; 2561 : 					if(this->MLS_CalDistance(x,y,gObj[tObjNum].X,gObj[tObjNum].Y) < 4)

  000f5	8b c6		 mov	 eax, esi
  000f7	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000fd	0f bf 8c 38 46
	01 00 00	 movsx	 ecx, WORD PTR [eax+edi+326]
  00105	0f bf 94 38 44
	01 00 00	 movsx	 edx, WORD PTR [eax+edi+324]
  0010d	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  00111	51		 push	 ecx
  00112	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  00116	52		 push	 edx
  00117	50		 push	 eax
  00118	51		 push	 ecx
  00119	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  00121	83 f8 04	 cmp	 eax, 4
  00124	7d 29		 jge	 SHORT $LN34@MLS_SkillS@21

; 2562 : 					{
; 2563 : 						bAttack = 0;
; 2564 : 
; 2565 : 						if(HitCount > 10)
; 2566 : 						{
; 2567 : 							bAttack = 0;
; 2568 : 						}
; 2569 : 						
; 2570 : 						if(HitCount >= 5)
; 2571 : 						{
; 2572 : 							if(rand()%2)
; 2573 : 							{
; 2574 : 								bAttack = 1;
; 2575 : 							}
; 2576 : 						}
; 2577 : 						else
; 2578 : 						{
; 2579 : 							bAttack = 1;
; 2580 : 						}
; 2581 : 
; 2582 : 						if(bAttack != 0)
; 2583 : 						{
; 2584 : 							int delay = rand()%500;

  00126	e8 00 00 00 00	 call	 _rand
  0012b	99		 cdq
  0012c	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00131	f7 f9		 idiv	 ecx

; 2585 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delay,lpMagic->m_Skill,0);

  00133	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00136	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00139	6a 00		 push	 0
  0013b	51		 push	 ecx
  0013c	52		 push	 edx
  0013d	56		 push	 esi
  0013e	6a 32		 push	 50			; 00000032H
  00140	53		 push	 ebx
  00141	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00146	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014c	83 c4 18	 add	 esp, 24			; 00000018H
$LN34@MLS_SkillS@21:

; 2586 : 						}
; 2587 : 					}
; 2588 : 				}
; 2589 : 			}
; 2590 : 		}
; 2591 : 
; 2592 : 		count++;

  0014f	8b 45 08	 mov	 eax, DWORD PTR tv436[ebp]
  00152	83 c0 0c	 add	 eax, 12			; 0000000cH

; 2593 : 		if(count > MAX_VIEWPORT -1)

  00155	ff 4d fc	 dec	 DWORD PTR tv214[ebp]
  00158	89 45 08	 mov	 DWORD PTR tv436[ebp], eax
  0015b	0f 85 e0 fe ff
	ff		 jne	 $LL22@MLS_SkillS@21
  00161	5e		 pop	 esi
$LN30@MLS_SkillS@21:
  00162	5f		 pop	 edi
  00163	5b		 pop	 ebx

; 2594 : 		{
; 2595 : 			break;
; 2596 : 		}
; 2597 : 	}
; 2598 : 	return;
; 2599 : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
_TEXT	ENDS
PUBLIC	?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z
_TEXT	SEGMENT
_tObjNum$ = -32						; size = 4
_DuelIndex$ = -28					; size = 4
tv88 = -24						; size = 4
_nMaxCount$ = -20					; size = 4
_nMinCount$ = -16					; size = 4
_nHitCount$ = -12					; size = 4
tv337 = -8						; size = 4
_bRet$ = -4						; size = 4
_bAttack$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
tv592 = 16						; size = 4
_x$ = 16						; size = 1
tv338 = 20						; size = 4
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_aDistance$ = 28					; size = 4
_bPVP$ = 32						; size = 4
_nSuccessRate$ = 36					; size = 4
_nDelay$ = 40						; size = 4
?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack, COMDAT
; _this$ = ecx

; 3481 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 3482 : 	LPOBJ lpObj = &gObj[aIndex];
; 3483 : 	int bRet = FALSE;
; 3484 : 	int count = 0;
; 3485 : 	int tObjNum;
; 3486 : 	int attackcheck;
; 3487 : 	int DuelIndex = lpObj->m_iDuelUser;
; 3488 : 	int nHitCount = 0;
; 3489 : 	int bAttack = FALSE;
; 3490 : 
; 3491 : 	int nMinCount = 4;
; 3492 : 	int nMaxCount = 8;
; 3493 : 
; 3494 : 	if( lpMagic->m_Skill == 496 )

  00006	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0000f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00015	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001b	33 c0		 xor	 eax, eax
  0001d	8b d9		 mov	 ebx, ecx
  0001f	8b 8f b8 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3768]
  00025	89 45 fc	 mov	 DWORD PTR _bRet$[ebp], eax
  00028	89 45 f4	 mov	 DWORD PTR _nHitCount$[ebp], eax
  0002b	89 45 08	 mov	 DWORD PTR _bAttack$[ebp], eax
  0002e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00031	89 4d e4	 mov	 DWORD PTR _DuelIndex$[ebp], ecx
  00034	b9 08 00 00 00	 mov	 ecx, 8
  00039	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _nMinCount$[ebp], 4
  00040	89 4d ec	 mov	 DWORD PTR _nMaxCount$[ebp], ecx
  00043	3d f0 01 00 00	 cmp	 eax, 496		; 000001f0H
  00048	75 0a		 jne	 SHORT $LN52@MLS_SkillA@2

; 3495 : 	{
; 3496 : 		nMinCount = 8;

  0004a	89 4d f0	 mov	 DWORD PTR _nMinCount$[ebp], ecx

; 3497 : 		nMaxCount = 12;

  0004d	c7 45 ec 0c 00
	00 00		 mov	 DWORD PTR _nMaxCount$[ebp], 12 ; 0000000cH
$LN52@MLS_SkillA@2:

; 3498 : 	}
; 3499 : 
; 3500 : 	if( x == FALSE &&
; 3501 : 		y == FALSE )

  00054	80 7d 10 00	 cmp	 BYTE PTR _x$[ebp], 0
  00058	75 18		 jne	 SHORT $LN50@MLS_SkillA@2
  0005a	80 7d 14 00	 cmp	 BYTE PTR _y$[ebp], 0
  0005e	75 12		 jne	 SHORT $LN50@MLS_SkillA@2

; 3502 : 	{
; 3503 : 		x = lpObj->X;

  00060	8a 8f 44 01 00
	00		 mov	 cl, BYTE PTR [edi+324]

; 3504 : 		y = lpObj->Y;

  00066	8a 97 46 01 00
	00		 mov	 dl, BYTE PTR [edi+326]
  0006c	88 4d 10	 mov	 BYTE PTR _x$[ebp], cl
  0006f	88 55 14	 mov	 BYTE PTR _y$[ebp], dl
$LN50@MLS_SkillA@2:

; 3505 : 	}
; 3506 : 
; 3507 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  00072	50		 push	 eax
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00078	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 3508 : 
; 3509 : 	if( this->MLS_CalDistance(lpObj->X,lpObj->Y,x,y) <= iSkillDistance )

  0007d	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  00081	8b f0		 mov	 esi, eax
  00083	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  00087	50		 push	 eax
  00088	51		 push	 ecx
  00089	89 45 f8	 mov	 DWORD PTR tv337[ebp], eax
  0008c	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  00093	89 4d 14	 mov	 DWORD PTR tv338[ebp], ecx
  00096	0f bf 8f 44 01
	00 00		 movsx	 ecx, WORD PTR [edi+324]
  0009d	50		 push	 eax
  0009e	51		 push	 ecx
  0009f	8b cb		 mov	 ecx, ebx
  000a1	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  000a6	3b c6		 cmp	 eax, esi
  000a8	0f 8f 32 02 00
	00		 jg	 $LN49@MLS_SkillA@2

; 3505 : 	}
; 3506 : 
; 3507 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b4	8d 87 b0 08 00
	00		 lea	 eax, DWORD PTR [edi+2224]
  000ba	89 45 10	 mov	 DWORD PTR tv592[ebp], eax
  000bd	c7 45 e8 4b 00
	00 00		 mov	 DWORD PTR tv88[ebp], 75	; 0000004bH
$LL35@MLS_SkillA@2:

; 3510 : 	{
; 3511 : 		while( TRUE )
; 3512 : 		{
; 3513 : 			if(lpObj->VpPlayer2[count].state != 0)

  000c4	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  000c8	0f 84 00 02 00
	00		 je	 $LN55@MLS_SkillA@2

; 3514 : 			{
; 3515 : 				tObjNum = lpObj->VpPlayer2[count].number;

  000ce	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]
  000d2	89 75 e0	 mov	 DWORD PTR _tObjNum$[ebp], esi

; 3516 : 
; 3517 : 				if( tObjNum >= 0 )

  000d5	85 f6		 test	 esi, esi
  000d7	0f 88 f1 01 00
	00		 js	 $LN55@MLS_SkillA@2

; 3518 : 				{
; 3519 : 					int EnableAttack = 0;
; 3520 : 
; 3521 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000dd	8a 00		 mov	 al, BYTE PTR [eax]
  000df	3c 02		 cmp	 al, 2
  000e1	75 16		 jne	 SHORT $LN31@MLS_SkillA@2
  000e3	8b d6		 mov	 edx, esi
  000e5	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000eb	83 bc 0a 50 04
	00 00 00	 cmp	 DWORD PTR [edx+ecx+1104], 0

; 3522 : 					{
; 3523 : 						EnableAttack = 1;

  000f3	0f 8c 90 00 00
	00		 jl	 $LN54@MLS_SkillA@2
$LN31@MLS_SkillA@2:

; 3524 : 					}
; 3525 : 					else if( (tObjNum == aTargetIndex && bPVP == 1) || DuelIndex ==tObjNum )

  000f9	3b 75 18	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000fc	75 0a		 jne	 SHORT $LN53@MLS_SkillA@2
  000fe	83 7d 20 01	 cmp	 DWORD PTR _bPVP$[ebp], 1
  00102	0f 84 81 00 00
	00		 je	 $LN54@MLS_SkillA@2
$LN53@MLS_SkillA@2:
  00108	39 75 e4	 cmp	 DWORD PTR _DuelIndex$[ebp], esi

; 3526 : 					{
; 3527 : 						EnableAttack = 1;

  0010b	74 7c		 je	 SHORT $LN54@MLS_SkillA@2

; 3528 : 					}
; 3529 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0010d	3c 03		 cmp	 al, 3
  0010f	74 30		 je	 SHORT $LN25@MLS_SkillA@2
  00111	8b c6		 mov	 eax, esi
  00113	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00119	80 bc 08 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+ecx+329], 30 ; 0000001eH
  00121	75 1e		 jne	 SHORT $LN25@MLS_SkillA@2
  00123	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  0012a	75 15		 jne	 SHORT $LN25@MLS_SkillA@2

; 3530 : 					{
; 3531 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0012c	8a 97 02 1c 00
	00		 mov	 dl, BYTE PTR [edi+7170]
  00132	3a 94 08 02 1c
	00 00		 cmp	 dl, BYTE PTR [eax+ecx+7170]
  00139	0f 84 8f 01 00
	00		 je	 $LN55@MLS_SkillA@2

; 3532 : 							EnableAttack = 1;
; 3533 : 					}	
; 3534 : 					else

  0013f	eb 48		 jmp	 SHORT $LN54@MLS_SkillA@2
$LN25@MLS_SkillA@2:

; 3535 : 					{
; 3536 : 						int CallMonIndex = gObj[tObjNum].m_Index;

  00141	8b d6		 mov	 edx, esi
  00143	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H

; 3537 : 	
; 3538 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00149	66 83 7c 0a 68
	02		 cmp	 WORD PTR [edx+ecx+104], 2
  0014f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00152	75 14		 jne	 SHORT $LN22@MLS_SkillA@2
  00154	8b 94 0a 50 04
	00 00		 mov	 edx, DWORD PTR [edx+ecx+1104]
  0015b	85 d2		 test	 edx, edx
  0015d	78 09		 js	 SHORT $LN22@MLS_SkillA@2

; 3539 : 						{
; 3540 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0015f	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00165	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
$LN22@MLS_SkillA@2:

; 3541 : 						}
; 3542 : 	
; 3543 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00168	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0016e	03 c1		 add	 eax, ecx
  00170	50		 push	 eax
  00171	57		 push	 edi
  00172	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00177	83 c4 08	 add	 esp, 8
  0017a	83 f8 01	 cmp	 eax, 1
  0017d	0f 85 45 01 00
	00		 jne	 $LN51@MLS_SkillA@2
  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN54@MLS_SkillA@2:

; 3544 : 						{
; 3545 : 							EnableAttack = 1;
; 3546 : 						}
; 3547 : 					}
; 3548 : 
; 3549 : 					if( EnableAttack != 0 )
; 3550 : 					{
; 3551 : 						attackcheck = 0;
; 3552 : 
; 3553 : 						if( nSuccessRate == 0 )

  00189	8b 5d 24	 mov	 ebx, DWORD PTR _nSuccessRate$[ebp]
  0018c	85 db		 test	 ebx, ebx

; 3554 : 						{
; 3555 : 							attackcheck = 1;
; 3556 : 						}
; 3557 : 						else

  0018e	74 16		 je	 SHORT $LN48@MLS_SkillA@2

; 3558 : 						{
; 3559 : 							attackcheck = rand()%nSuccessRate;

  00190	e8 00 00 00 00	 call	 _rand
  00195	99		 cdq
  00196	f7 fb		 idiv	 ebx

; 3560 : 						}
; 3561 : 						
; 3562 : 						if( attackcheck != 0 )

  00198	85 d2		 test	 edx, edx
  0019a	0f 84 28 01 00
	00		 je	 $LN51@MLS_SkillA@2
  001a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN48@MLS_SkillA@2:

; 3563 : 						{
; 3564 : 							if( gObj[tObjNum].X >= (x -aDistance) &&
; 3565 : 								gObj[tObjNum].X <= (x +aDistance) &&
; 3566 : 								gObj[tObjNum].Y >= (y -aDistance) &&
; 3567 : 								gObj[tObjNum].Y <= (y +aDistance) )

  001a6	8b 5d 14	 mov	 ebx, DWORD PTR tv338[ebp]
  001a9	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  001af	0f bf 94 0e 44
	01 00 00	 movsx	 edx, WORD PTR [esi+ecx+324]
  001b7	8b 45 1c	 mov	 eax, DWORD PTR _aDistance$[ebp]
  001ba	2b d8		 sub	 ebx, eax
  001bc	3b d3		 cmp	 edx, ebx
  001be	0f 8c 0a 01 00
	00		 jl	 $LN55@MLS_SkillA@2
  001c4	8b 5d 14	 mov	 ebx, DWORD PTR tv338[ebp]
  001c7	03 d8		 add	 ebx, eax
  001c9	3b d3		 cmp	 edx, ebx
  001cb	0f 8f fd 00 00
	00		 jg	 $LN55@MLS_SkillA@2
  001d1	0f bf 94 0e 46
	01 00 00	 movsx	 edx, WORD PTR [esi+ecx+326]
  001d9	8b 5d f8	 mov	 ebx, DWORD PTR tv337[ebp]
  001dc	2b d8		 sub	 ebx, eax
  001de	3b d3		 cmp	 edx, ebx
  001e0	0f 8c e8 00 00
	00		 jl	 $LN55@MLS_SkillA@2
  001e6	8b 5d f8	 mov	 ebx, DWORD PTR tv337[ebp]
  001e9	03 d8		 add	 ebx, eax
  001eb	3b d3		 cmp	 edx, ebx
  001ed	0f 8f db 00 00
	00		 jg	 $LN55@MLS_SkillA@2

; 3568 : 							{
; 3569 : 								gObj[tObjNum].lpAttackObj = lpObj;
; 3570 : 								nHitCount++;

  001f3	8b 5d f4	 mov	 ebx, DWORD PTR _nHitCount$[ebp]
  001f6	43		 inc	 ebx
  001f7	89 bc 0e d4 03
	00 00		 mov	 DWORD PTR [esi+ecx+980], edi
  001fe	89 5d f4	 mov	 DWORD PTR _nHitCount$[ebp], ebx

; 3571 : 	
; 3572 : 								if( nHitCount > nMinCount )

  00201	3b 5d f0	 cmp	 ebx, DWORD PTR _nMinCount$[ebp]
  00204	7e 13		 jle	 SHORT $LN15@MLS_SkillA@2

; 3573 : 								{
; 3574 : 									if(rand()%2)

  00206	e8 00 00 00 00	 call	 _rand
  0020b	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00210	79 05		 jns	 SHORT $LN59@MLS_SkillA@2
  00212	48		 dec	 eax
  00213	83 c8 fe	 or	 eax, -2			; fffffffeH
  00216	40		 inc	 eax
$LN59@MLS_SkillA@2:
  00217	74 07		 je	 SHORT $LN56@MLS_SkillA@2
$LN15@MLS_SkillA@2:

; 3575 : 									{
; 3576 : 										bAttack = TRUE;
; 3577 : 									}
; 3578 : 								}
; 3579 : 								else
; 3580 : 								{
; 3581 : 									bAttack = TRUE;

  00219	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 1
$LN56@MLS_SkillA@2:

; 3582 : 								}
; 3583 : 	
; 3584 : 								if( nHitCount > nMaxCount )

  00220	3b 5d ec	 cmp	 ebx, DWORD PTR _nMaxCount$[ebp]
  00223	7e 0c		 jle	 SHORT $LN12@MLS_SkillA@2

; 3585 : 								{
; 3586 : 									bAttack = FALSE;

  00225	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _bAttack$[ebp], 0

; 3587 : 								}
; 3588 : 
; 3589 : 								if( bAttack == TRUE )

  0022c	e9 90 00 00 00	 jmp	 $LN57@MLS_SkillA@2
$LN12@MLS_SkillA@2:
  00231	bb 01 00 00 00	 mov	 ebx, 1
  00236	39 5d 08	 cmp	 DWORD PTR _bAttack$[ebp], ebx
  00239	0f 85 82 00 00
	00		 jne	 $LN57@MLS_SkillA@2

; 3590 : 								{
; 3591 : 									if( nDelay == 0 )

  0023f	8b 45 28	 mov	 eax, DWORD PTR _nDelay$[ebp]
  00242	85 c0		 test	 eax, eax
  00244	75 62		 jne	 SHORT $LN10@MLS_SkillA@2

; 3592 : 									{
; 3593 : 										if( lpMagic->m_Skill == 560 )

  00246	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00249	81 78 08 30 02
	00 00		 cmp	 DWORD PTR [eax+8], 560	; 00000230H
  00250	75 38		 jne	 SHORT $LN9@MLS_SkillA@2
$LL8@MLS_SkillA@2:

; 3594 : 										{
; 3595 : 											for(int i = 1; i <= 4; i++)
; 3596 : 											{
; 3597 : 												if( i == 1 )
; 3598 : 												{
; 3599 : 													gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,TRUE,0,0,i,0);

  00252	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00258	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0025b	6a 00		 push	 0
  0025d	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00260	83 fb 01	 cmp	 ebx, 1
  00263	75 09		 jne	 SHORT $LN5@MLS_SkillA@2
  00265	53		 push	 ebx
  00266	6a 00		 push	 0
  00268	6a 00		 push	 0
  0026a	53		 push	 ebx
  0026b	53		 push	 ebx

; 3600 : 												}
; 3601 : 												else

  0026c	eb 09		 jmp	 SHORT $LN60@MLS_SkillA@2
$LN5@MLS_SkillA@2:

; 3602 : 												{
; 3603 : 													gObjAttack(lpObj,&gObj[tObjNum],lpMagic,FALSE,TRUE,0,0,i,0);

  0026e	53		 push	 ebx
  0026f	6a 00		 push	 0
  00271	6a 00		 push	 0
  00273	6a 01		 push	 1
  00275	6a 00		 push	 0
$LN60@MLS_SkillA@2:
  00277	51		 push	 ecx
  00278	50		 push	 eax
  00279	57		 push	 edi
  0027a	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0027f	43		 inc	 ebx
  00280	83 c4 24	 add	 esp, 36			; 00000024H
  00283	83 fb 04	 cmp	 ebx, 4
  00286	7e ca		 jle	 SHORT $LL8@MLS_SkillA@2

; 3604 : 												}
; 3605 : 											}
; 3606 : 										}
; 3607 : 										else

  00288	eb 37		 jmp	 SHORT $LN57@MLS_SkillA@2
$LN9@MLS_SkillA@2:

; 3608 : 										{
; 3609 : 											gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,FALSE,0,0,0,0);

  0028a	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00290	6a 00		 push	 0
  00292	6a 00		 push	 0
  00294	6a 00		 push	 0
  00296	6a 00		 push	 0
  00298	6a 00		 push	 0
  0029a	53		 push	 ebx
  0029b	50		 push	 eax
  0029c	56		 push	 esi
  0029d	57		 push	 edi
  0029e	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  002a3	83 c4 24	 add	 esp, 36			; 00000024H

; 3610 : 										}
; 3611 : 									}
; 3612 : 									else

  002a6	eb 19		 jmp	 SHORT $LN57@MLS_SkillA@2
$LN10@MLS_SkillA@2:

; 3613 : 									{
; 3614 : 										gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,nDelay,lpMagic->m_Skill,0);

  002a8	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  002ab	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  002ae	8b 55 e0	 mov	 edx, DWORD PTR _tObjNum$[ebp]
  002b1	6a 00		 push	 0
  002b3	51		 push	 ecx
  002b4	50		 push	 eax
  002b5	52		 push	 edx
  002b6	6a 32		 push	 50			; 00000032H
  002b8	57		 push	 edi
  002b9	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  002be	83 c4 18	 add	 esp, 24			; 00000018H
$LN57@MLS_SkillA@2:

; 3615 : 									}
; 3616 : 								}
; 3617 : 
; 3618 : 								bRet = TRUE;

  002c1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN51@MLS_SkillA@2:
  002c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN55@MLS_SkillA@2:

; 3619 : 							}
; 3620 : 						}
; 3621 : 					}
; 3622 : 				}
; 3623 : 			}
; 3624 : 
; 3625 : 			count++;

  002ce	8b 45 10	 mov	 eax, DWORD PTR tv592[ebp]
  002d1	83 c0 0c	 add	 eax, 12			; 0000000cH

; 3626 : 
; 3627 : 			if( count > (MAX_VIEWPORT-1) )

  002d4	ff 4d e8	 dec	 DWORD PTR tv88[ebp]
  002d7	89 45 10	 mov	 DWORD PTR tv592[ebp], eax
  002da	0f 85 e4 fd ff
	ff		 jne	 $LL35@MLS_SkillA@2
$LN49@MLS_SkillA@2:

; 3628 : 			{
; 3629 : 				break;
; 3630 : 			}
; 3631 : 		}
; 3632 : 	}
; 3633 : 	return bRet;

  002e0	8b 45 fc	 mov	 eax, DWORD PTR _bRet$[ebp]
  002e3	5f		 pop	 edi
  002e4	5e		 pop	 esi
  002e5	5b		 pop	 ebx

; 3634 : }

  002e6	8b e5		 mov	 esp, ebp
  002e8	5d		 pop	 ebp
  002e9	c2 24 00	 ret	 36			; 00000024H
?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
_TEXT	ENDS
PUBLIC	?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_DuelIndex$ = -8					; size = 4
tv226 = -4						; size = 4
tv424 = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SuddenIce, COMDAT
; _this$ = ecx

; 3637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3638 : 	LPOBJ lpObj = &gObj[aIndex];

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000a	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 3639 : 	int tObjNum;
; 3640 : 	int count = 0;
; 3641 : 	int FirstHit = 0;
; 3642 : 	int HitCount = 0;
; 3643 : 	int bAttack;
; 3644 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 3645 : 	int DuelIndex = lpObj->m_iDuelUser;

  00018	8b 84 3b b8 0e
	00 00		 mov	 eax, DWORD PTR [ebx+edi+3768]
  0001f	03 df		 add	 ebx, edi
  00021	89 45 f8	 mov	 DWORD PTR _DuelIndex$[ebp], eax
  00024	8d 83 b0 08 00
	00		 lea	 eax, DWORD PTR [ebx+2224]
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	89 45 08	 mov	 DWORD PTR tv424[ebp], eax
  00030	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv226[ebp], 75 ; 0000004bH
  00037	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL22@MLS_Sudden:

; 3646 : 	int EnableAttack;
; 3647 : 
; 3648 : 	while ( true )
; 3649 : 	{
; 3650 : 		if(lpObj->VpPlayer2[count].state != 0)

  00040	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00044	0f 84 04 01 00
	00		 je	 $LN33@MLS_Sudden

; 3651 : 		{
; 3652 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0004a	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 3653 : 
; 3654 : 			if(tObjNum >= 0)

  0004e	85 f6		 test	 esi, esi
  00050	0f 88 f8 00 00
	00		 js	 $LN33@MLS_Sudden

; 3655 : 			{
; 3656 : 				EnableAttack = 0;
; 3657 : 
; 3658 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00056	8a 00		 mov	 al, BYTE PTR [eax]
  00058	3c 02		 cmp	 al, 2
  0005a	75 16		 jne	 SHORT $LN18@MLS_Sudden
  0005c	8b ce		 mov	 ecx, esi
  0005e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00064	83 bc 39 50 04
	00 00 00	 cmp	 DWORD PTR [ecx+edi+1104], 0

; 3659 : 				{
; 3660 : 					EnableAttack = 1;

  0006c	0f 8c 82 00 00
	00		 jl	 $LN15@MLS_Sudden
$LN18@MLS_Sudden:

; 3661 : 				}
; 3662 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00072	3b 75 18	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00075	74 7d		 je	 SHORT $LN15@MLS_Sudden
  00077	39 75 f8	 cmp	 DWORD PTR _DuelIndex$[ebp], esi
  0007a	74 78		 je	 SHORT $LN15@MLS_Sudden

; 3663 : 				{
; 3664 : 					EnableAttack = 1;
; 3665 : 				}
; 3666 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0007c	3c 03		 cmp	 al, 3
  0007e	74 30		 je	 SHORT $LN13@MLS_Sudden
  00080	8b c6		 mov	 eax, esi
  00082	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00088	80 bc 38 49 01
	00 00 1e	 cmp	 BYTE PTR [eax+edi+329], 30 ; 0000001eH
  00090	75 1e		 jne	 SHORT $LN13@MLS_Sudden
  00092	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  00099	75 15		 jne	 SHORT $LN13@MLS_Sudden

; 3667 : 				{
; 3668 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0009b	8a 8b 02 1c 00
	00		 mov	 cl, BYTE PTR [ebx+7170]
  000a1	3a 8c 38 02 1c
	00 00		 cmp	 cl, BYTE PTR [eax+edi+7170]
  000a8	0f 84 a0 00 00
	00		 je	 $LN33@MLS_Sudden

; 3669 : 						EnableAttack = 1;
; 3670 : 				}
; 3671 : 				else

  000ae	eb 44		 jmp	 SHORT $LN15@MLS_Sudden
$LN13@MLS_Sudden:

; 3672 : 				{
; 3673 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000b0	8b ce		 mov	 ecx, esi
  000b2	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 3674 : 
; 3675 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000b8	66 83 7c 39 68
	02		 cmp	 WORD PTR [ecx+edi+104], 2
  000be	8b 04 39	 mov	 eax, DWORD PTR [ecx+edi]
  000c1	75 14		 jne	 SHORT $LN10@MLS_Sudden
  000c3	8b 8c 39 50 04
	00 00		 mov	 ecx, DWORD PTR [ecx+edi+1104]
  000ca	85 c9		 test	 ecx, ecx
  000cc	78 09		 js	 SHORT $LN10@MLS_Sudden

; 3676 : 					{
; 3677 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000ce	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  000d4	8b 04 39	 mov	 eax, DWORD PTR [ecx+edi]
$LN10@MLS_Sudden:

; 3678 : 					}
; 3679 : 
; 3680 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000d7	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000dd	03 c7		 add	 eax, edi
  000df	50		 push	 eax
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ec	83 c4 08	 add	 esp, 8
  000ef	83 f8 01	 cmp	 eax, 1
  000f2	75 5a		 jne	 SHORT $LN33@MLS_Sudden
$LN15@MLS_Sudden:

; 3681 : 					{
; 3682 : 						EnableAttack = 1;
; 3683 : 					}
; 3684 : 				}
; 3685 : 
; 3686 : 				if(EnableAttack != 0)
; 3687 : 				{
; 3688 : 					if( this->MLS_CalDistance(x,y,gObj[tObjNum].X,gObj[tObjNum].Y) < 4)

  000f4	0f b6 55 14	 movzx	 edx, BYTE PTR _y$[ebp]
  000f8	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000fe	0f bf 84 3e 46
	01 00 00	 movsx	 eax, WORD PTR [esi+edi+326]
  00106	0f bf 8c 3e 44
	01 00 00	 movsx	 ecx, WORD PTR [esi+edi+324]
  0010e	50		 push	 eax
  0010f	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  00113	51		 push	 ecx
  00114	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	52		 push	 edx
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  0011e	83 f8 04	 cmp	 eax, 4
  00121	7d 2b		 jge	 SHORT $LN33@MLS_Sudden

; 3689 : 					{
; 3690 : 						bAttack = 0;
; 3691 : 						
; 3692 : 						if(HitCount >= 5)
; 3693 : 						{
; 3694 : 							if(rand()%2)
; 3695 : 							{
; 3696 : 								bAttack = 1;
; 3697 : 							}
; 3698 : 						}
; 3699 : 						else
; 3700 : 						{
; 3701 : 							bAttack = 1;
; 3702 : 						}
; 3703 : 
; 3704 : 						if(HitCount > 10)
; 3705 : 						{
; 3706 : 							bAttack = 0;
; 3707 : 						}
; 3708 : 
; 3709 : 						if(bAttack != 0)
; 3710 : 						{
; 3711 : 							int delay = rand()%500;

  00123	e8 00 00 00 00	 call	 _rand

; 3712 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,1,0,0,0,0);

  00128	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0012b	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00131	6a 00		 push	 0
  00133	6a 00		 push	 0
  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	6a 01		 push	 1
  0013b	6a 01		 push	 1
  0013d	51		 push	 ecx
  0013e	56		 push	 esi
  0013f	53		 push	 ebx
  00140	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00145	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014b	83 c4 24	 add	 esp, 36			; 00000024H
$LN33@MLS_Sudden:

; 3713 : 						}
; 3714 : 					}
; 3715 : 				}
; 3716 : 			}
; 3717 : 		}
; 3718 : 
; 3719 : 		count++;

  0014e	8b 45 08	 mov	 eax, DWORD PTR tv424[ebp]
  00151	83 c0 0c	 add	 eax, 12			; 0000000cH

; 3720 : 		if(count > MAX_VIEWPORT -1)

  00154	ff 4d fc	 dec	 DWORD PTR tv226[ebp]
  00157	89 45 08	 mov	 DWORD PTR tv424[ebp], eax
  0015a	0f 85 e0 fe ff
	ff		 jne	 $LL22@MLS_Sudden

; 3721 : 		{
; 3722 : 			break;
; 3723 : 		}
; 3724 : 	}
; 3725 : 	return true;

  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	b8 01 00 00 00	 mov	 eax, 1
  00167	5b		 pop	 ebx

; 3726 : }

  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 14 00	 ret	 20			; 00000014H
?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
_TEXT	ENDS
PUBLIC	?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
; Function compile flags: /Ogtp
;	COMDAT ?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm, COMDAT
; _this$ = ecx

; 6710 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6711 : 	MLS_SkillAreaMonsterAttack(aIndex,lpMagic,x,y,aTargetIndex,6,1,0,400);

  00003	8b 45 18	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  00009	68 90 01 00 00	 push	 400			; 00000190H
  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	6a 06		 push	 6
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00018	52		 push	 edx
  00019	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  0001c	50		 push	 eax
  0001d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00020	52		 push	 edx
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack

; 6712 : }

  00027	5d		 pop	 ebp
  00028	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
_TEXT	ENDS
PUBLIC	??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@ ; `string'
PUBLIC	?RunningSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z ; CMasterLevelSkillTreeSystem::RunningSkill
EXTRN	?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z:PROC	; CObjUseSkill::SkillMonsterCall
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
;	COMDAT ??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@
CONST	SEGMENT
??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@ DB '[Invalid'
	DB	'TargetIndex][CMasterLevelSkillTreeSystem::RunningSkill_MLS][5'
	DB	'60] Index :%d , AccountID : %s ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RunningSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z
_TEXT	SEGMENT
_lpTargetObj$ = 8					; size = 4
_lpObj$ = 8						; size = 4
tv734 = 12						; size = 4
_aTargetIndex$ = 12					; size = 4
tv546 = 16						; size = 4
_lpMagic$ = 16						; size = 4
_bCombo$ = 20						; size = 4
_x$ = 24						; size = 1
tv337 = 28						; size = 4
_y$ = 28						; size = 1
_dir$ = 32						; size = 1
_aTargetPos$ = 36					; size = 1
?RunningSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z PROC ; CMasterLevelSkillTreeSystem::RunningSkill, COMDAT
; _this$ = ecx

; 1315 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1316 : 	if( lpObj == NULL || lpMagic == NULL )

  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	85 ff		 test	 edi, edi
  0000d	0f 84 28 08 00
	00		 je	 $LN76@RunningSki
  00013	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  00016	85 f6		 test	 esi, esi
  00018	0f 84 1d 08 00
	00		 je	 $LN76@RunningSki

; 1318 : 
; 1319 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]

; 1320 : 
; 1321 : 	int iBaseMLS = this->GetBaseMasterLevelSkill(lpMagic->m_Skill);

  00021	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00024	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002a	89 45 10	 mov	 DWORD PTR tv546[ebp], eax
  0002d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	52		 push	 edx
  00034	89 45 08	 mov	 DWORD PTR _lpTargetObj$[ebp], eax
  00037	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 1322 : 
; 1323 : 	switch( iBaseMLS )

  0003c	05 ba fe ff ff	 add	 eax, -326		; fffffebaH
  00041	3d f7 00 00 00	 cmp	 eax, 247		; 000000f7H
  00046	0f 87 e3 07 00
	00		 ja	 $LN86@RunningSki
  0004c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN85@RunningSki[eax]
  00053	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN87@RunningSki[eax*4]
$LN73@RunningSki:

; 1324 : 	{
; 1325 : 	case 403:
; 1326 : 		this->MLS_WizardMagicDefense(lpObj,aTargetIndex,lpMagic);

  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0005d	56		 push	 esi
  0005e	51		 push	 ecx
  0005f	57		 push	 edi
  00060	8b cb		 mov	 ecx, ebx
  00062	e8 00 00 00 00	 call	 ?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	5b		 pop	 ebx

; 1588 : }

  0006f	5d		 pop	 ebp
  00070	c2 20 00	 ret	 32			; 00000020H
$LN72@RunningSki:

; 1327 : 		break;
; 1328 : 	case 413:
; 1329 : 		this->MLS_Healing(lpObj,aTargetIndex,lpMagic);

  00073	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00076	56		 push	 esi
  00077	52		 push	 edx
  00078	57		 push	 edi
  00079	8b cb		 mov	 ecx, ebx
  0007b	e8 00 00 00 00	 call	 ?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_Healing
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	5b		 pop	 ebx

; 1588 : }

  00088	5d		 pop	 ebp
  00089	c2 20 00	 ret	 32			; 00000020H
$LN71@RunningSki:

; 1330 : 		break;
; 1331 : 	case 330:
; 1332 : 	case 332:
; 1333 : 	case 481:
; 1334 : 		this->MLS_Wheel(lpObj,lpMagic,aTargetIndex,bCombo);

  0008c	8b 45 14	 mov	 eax, DWORD PTR _bCombo$[ebp]
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00092	50		 push	 eax
  00093	51		 push	 ecx
  00094	56		 push	 esi
  00095	57		 push	 edi
  00096	8b cb		 mov	 ecx, ebx
  00098	e8 00 00 00 00	 call	 ?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_Wheel
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5b		 pop	 ebx

; 1588 : }

  000a5	5d		 pop	 ebp
  000a6	c2 20 00	 ret	 32			; 00000020H
$LN70@RunningSki:

; 1335 : 		break;
; 1336 : 	case 360:
; 1337 : 		this->MLS_SkillFulKnightSkillAddLife(lpObj,lpMagic);

  000a9	56		 push	 esi
  000aa	57		 push	 edi
  000ab	8b cb		 mov	 ecx, ebx
  000ad	e8 00 00 00 00	 call	 ?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  000b4	b8 01 00 00 00	 mov	 eax, 1
  000b9	5b		 pop	 ebx

; 1588 : }

  000ba	5d		 pop	 ebp
  000bb	c2 20 00	 ret	 32			; 00000020H
$LN69@RunningSki:

; 1338 : 		break;
; 1339 : 	case 356:
; 1340 : 		this->MLS_KnightSkillAddLife(lpObj,lpMagic);

  000be	56		 push	 esi
  000bf	57		 push	 edi
  000c0	8b cb		 mov	 ecx, ebx
  000c2	e8 00 00 00 00	 call	 ?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  000c9	b8 01 00 00 00	 mov	 eax, 1
  000ce	5b		 pop	 ebx

; 1588 : }

  000cf	5d		 pop	 ebp
  000d0	c2 20 00	 ret	 32			; 00000020H
$LN67@RunningSki:

; 1341 : 		break;
; 1342 : 	case 363:
; 1343 : 		this->MLS_SkillMasteryKnightSkillAddLife(lpObj,lpMagic);
; 1344 : 		break;
; 1345 : 	case 512:
; 1346 : 	case 516:
; 1347 : 		this->MLS_DarkHorseAttack(lpObj,aTargetIndex,lpMagic);

  000d3	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  000d6	56		 push	 esi
  000d7	52		 push	 edx
  000d8	57		 push	 edi
  000d9	8b cb		 mov	 ecx, ebx
  000db	e8 00 00 00 00	 call	 ?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  000e2	b8 01 00 00 00	 mov	 eax, 1
  000e7	5b		 pop	 ebx

; 1588 : }

  000e8	5d		 pop	 ebp
  000e9	c2 20 00	 ret	 32			; 00000020H
$LN66@RunningSki:

; 1348 : 		break;
; 1349 : 	case 508:
; 1350 : 	case 514:
; 1351 : 		this->MLS_FireBurst(lpObj,aTargetIndex,lpMagic);

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  000ef	56		 push	 esi
  000f0	50		 push	 eax
  000f1	57		 push	 edi
  000f2	8b cb		 mov	 ecx, ebx
  000f4	e8 00 00 00 00	 call	 ?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireBurst
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	5b		 pop	 ebx

; 1588 : }

  00101	5d		 pop	 ebp
  00102	c2 20 00	 ret	 32			; 00000020H
$LN65@RunningSki:

; 1352 : 		break;
; 1353 : 	case 391:
; 1354 : 	case 393:
; 1355 : 		this->MLS_SuddenIce(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  00105	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00108	8b 55 1c	 mov	 edx, DWORD PTR _y$[ebp]
  0010b	8b 45 18	 mov	 eax, DWORD PTR _x$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00111	52		 push	 edx
  00112	50		 push	 eax
  00113	56		 push	 esi
  00114	51		 push	 ecx
  00115	8b cb		 mov	 ecx, ebx
  00117	e8 00 00 00 00	 call	 ?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0011e	b8 01 00 00 00	 mov	 eax, 1
  00123	5b		 pop	 ebx

; 1588 : }

  00124	5d		 pop	 ebp
  00125	c2 20 00	 ret	 32			; 00000020H
$LN64@RunningSki:

; 1356 : 		break;
; 1357 : 	case 336:
; 1358 : 	case 339:
; 1359 : 	case 342:
; 1360 : 		this->MLS_KnightBlow(lpObj->m_Index,aTargetIndex,lpMagic,bCombo);

  00128	8b 55 14	 mov	 edx, DWORD PTR _bCombo$[ebp]
  0012b	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0012e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00130	52		 push	 edx
  00131	56		 push	 esi
  00132	50		 push	 eax
  00133	51		 push	 ecx
  00134	8b cb		 mov	 ecx, ebx
  00136	e8 00 00 00 00	 call	 ?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0013d	b8 01 00 00 00	 mov	 eax, 1
  00142	5b		 pop	 ebx

; 1588 : }

  00143	5d		 pop	 ebp
  00144	c2 20 00	 ret	 32			; 00000020H
$LN63@RunningSki:

; 1361 : 		break;
; 1362 : 	case 331:
; 1363 : 	case 333:
; 1364 : 		this->MLS_SkillBlowOfFury(lpObj->m_Index,lpMagic,x,y,aTargetIndex,bCombo);

  00147	8b 55 14	 mov	 edx, DWORD PTR _bCombo$[ebp]
  0014a	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0014d	8b 4d 1c	 mov	 ecx, DWORD PTR _y$[ebp]
  00150	52		 push	 edx
  00151	8b 55 18	 mov	 edx, DWORD PTR _x$[ebp]
  00154	50		 push	 eax
  00155	8b 07		 mov	 eax, DWORD PTR [edi]
  00157	51		 push	 ecx
  00158	52		 push	 edx
  00159	56		 push	 esi
  0015a	50		 push	 eax
  0015b	8b cb		 mov	 ecx, ebx
  0015d	e8 00 00 00 00	 call	 ?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00164	b8 01 00 00 00	 mov	 eax, 1
  00169	5b		 pop	 ebx

; 1588 : }

  0016a	5d		 pop	 ebp
  0016b	c2 20 00	 ret	 32			; 00000020H
$LN62@RunningSki:

; 1365 : 		break;
; 1366 : 	case 417:
; 1367 : 		this->MLS_SkillDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  0016e	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00171	8b 17		 mov	 edx, DWORD PTR [edi]
  00173	56		 push	 esi
  00174	51		 push	 ecx
  00175	52		 push	 edx
  00176	8b cb		 mov	 ecx, ebx
  00178	e8 00 00 00 00	 call	 ?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
  0017d	5f		 pop	 edi
  0017e	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0017f	b8 01 00 00 00	 mov	 eax, 1
  00184	5b		 pop	 ebx

; 1588 : }

  00185	5d		 pop	 ebp
  00186	c2 20 00	 ret	 32			; 00000020H
$LN61@RunningSki:

; 1368 : 		break;
; 1369 : 	case 420:
; 1370 : 		this->MLS_SkillAttack(lpObj->m_Index,aTargetIndex,lpMagic);

  00189	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0018c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0018e	56		 push	 esi
  0018f	50		 push	 eax
  00190	51		 push	 ecx
  00191	8b cb		 mov	 ecx, ebx
  00193	e8 00 00 00 00	 call	 ?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
  00198	5f		 pop	 edi
  00199	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0019a	b8 01 00 00 00	 mov	 eax, 1
  0019f	5b		 pop	 ebx

; 1588 : }

  001a0	5d		 pop	 ebp
  001a1	c2 20 00	 ret	 32			; 00000020H
$LN60@RunningSki:

; 1371 : 		break;
; 1372 : 	case 482:
; 1373 : 		this->MLS_PowerSlash(lpObj->m_Index,lpMagic,x,y,aTargetPos,aTargetIndex);

  001a4	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  001a7	8b 45 24	 mov	 eax, DWORD PTR _aTargetPos$[ebp]
  001aa	8b 4d 1c	 mov	 ecx, DWORD PTR _y$[ebp]
  001ad	52		 push	 edx
  001ae	8b 55 18	 mov	 edx, DWORD PTR _x$[ebp]
  001b1	50		 push	 eax
  001b2	8b 07		 mov	 eax, DWORD PTR [edi]
  001b4	51		 push	 ecx
  001b5	52		 push	 edx
  001b6	56		 push	 esi
  001b7	50		 push	 eax
  001b8	8b cb		 mov	 ecx, ebx
  001ba	e8 00 00 00 00	 call	 ?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  001c1	b8 01 00 00 00	 mov	 eax, 1
  001c6	5b		 pop	 ebx

; 1588 : }

  001c7	5d		 pop	 ebp
  001c8	c2 20 00	 ret	 32			; 00000020H
$LN59@RunningSki:

; 1374 : 		break;
; 1375 : 	case 454:
; 1376 : 		this->MLS_SkillSleep(lpObj->m_Index,aTargetIndex,lpMagic);

  001cb	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  001ce	8b 17		 mov	 edx, DWORD PTR [edi]
  001d0	56		 push	 esi
  001d1	51		 push	 ecx
  001d2	52		 push	 edx
  001d3	8b cb		 mov	 ecx, ebx
  001d5	e8 00 00 00 00	 call	 ?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  001dc	b8 01 00 00 00	 mov	 eax, 1
  001e1	5b		 pop	 ebx

; 1588 : }

  001e2	5d		 pop	 ebp
  001e3	c2 20 00	 ret	 32			; 00000020H
$LN58@RunningSki:

; 1377 : 		break;
; 1378 : 	case 455:
; 1379 : 		this->MLS_SkillChainLightning(lpObj->m_Index,aTargetIndex,lpMagic);

  001e6	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  001e9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001eb	56		 push	 esi
  001ec	50		 push	 eax
  001ed	51		 push	 ecx
  001ee	8b cb		 mov	 ecx, ebx
  001f0	e8 00 00 00 00	 call	 ?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
  001f5	5f		 pop	 edi
  001f6	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  001f7	b8 01 00 00 00	 mov	 eax, 1
  001fc	5b		 pop	 ebx

; 1588 : }

  001fd	5d		 pop	 ebp
  001fe	c2 20 00	 ret	 32			; 00000020H
$LN57@RunningSki:

; 1380 : 		break;
; 1381 : 	case 456:
; 1382 : 		this->MLS_SkillLightningShock(lpObj->m_Index,aTargetIndex,lpMagic);

  00201	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00204	8b 07		 mov	 eax, DWORD PTR [edi]
  00206	56		 push	 esi
  00207	52		 push	 edx
  00208	50		 push	 eax
  00209	8b cb		 mov	 ecx, ebx
  0020b	e8 00 00 00 00	 call	 ?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
  00210	5f		 pop	 edi
  00211	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00212	b8 01 00 00 00	 mov	 eax, 1
  00217	5b		 pop	 ebx

; 1588 : }

  00218	5d		 pop	 ebp
  00219	c2 20 00	 ret	 32			; 00000020H
$LN56@RunningSki:

; 1383 : 		break;
; 1384 : 	case 458:
; 1385 : 	case 462:
; 1386 : 		this->MLS_SkillDrainLife(lpObj->m_Index,aTargetIndex,lpMagic);

  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0021f	8b 17		 mov	 edx, DWORD PTR [edi]
  00221	56		 push	 esi
  00222	51		 push	 ecx
  00223	52		 push	 edx
  00224	8b cb		 mov	 ecx, ebx
  00226	e8 00 00 00 00	 call	 ?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
  0022b	5f		 pop	 edi
  0022c	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0022d	b8 01 00 00 00	 mov	 eax, 1
  00232	5b		 pop	 ebx

; 1588 : }

  00233	5d		 pop	 ebp
  00234	c2 20 00	 ret	 32			; 00000020H
$LN55@RunningSki:

; 1387 : 		break;
; 1388 : 	case 326:
; 1389 : 		this->MLS_SkillSword4(lpObj,lpMagic,aTargetIndex,0);

  00237	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0023a	6a 00		 push	 0
  0023c	50		 push	 eax
  0023d	56		 push	 esi
  0023e	57		 push	 edi
  0023f	8b cb		 mov	 ecx, ebx
  00241	e8 00 00 00 00	 call	 ?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
  00246	5f		 pop	 edi
  00247	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00248	b8 01 00 00 00	 mov	 eax, 1
  0024d	5b		 pop	 ebx

; 1588 : }

  0024e	5d		 pop	 ebp
  0024f	c2 20 00	 ret	 32			; 00000020H
$LN54@RunningSki:

; 1390 : 		break;
; 1391 : 	case 479:
; 1392 : 		this->MLS_SkillSword4_Magumsa(lpObj,lpMagic,aTargetIndex,0);

  00252	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00255	6a 00		 push	 0
  00257	51		 push	 ecx
  00258	56		 push	 esi
  00259	57		 push	 edi
  0025a	8b cb		 mov	 ecx, ebx
  0025c	e8 00 00 00 00	 call	 ?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
  00261	5f		 pop	 edi
  00262	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00263	b8 01 00 00 00	 mov	 eax, 1
  00268	5b		 pop	 ebx

; 1588 : }

  00269	5d		 pop	 ebp
  0026a	c2 20 00	 ret	 32			; 00000020H
$LN53@RunningSki:

; 1393 : 		break;
; 1394 : 	case 327:
; 1395 : 		this->MLS_SkillSword5(lpObj,lpMagic,aTargetIndex,0);

  0026d	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00270	6a 00		 push	 0
  00272	52		 push	 edx
  00273	56		 push	 esi
  00274	57		 push	 edi
  00275	8b cb		 mov	 ecx, ebx
  00277	e8 00 00 00 00	 call	 ?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
  0027c	5f		 pop	 edi
  0027d	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0027e	b8 01 00 00 00	 mov	 eax, 1
  00283	5b		 pop	 ebx

; 1588 : }

  00284	5d		 pop	 ebp
  00285	c2 20 00	 ret	 32			; 00000020H
$LN52@RunningSki:

; 1396 : 		break;
; 1397 : 	case 328:
; 1398 : 		this->MLS_SkillSword1(lpObj,lpMagic,aTargetIndex,0);

  00288	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0028b	6a 00		 push	 0
  0028d	50		 push	 eax
  0028e	56		 push	 esi
  0028f	57		 push	 edi
  00290	8b cb		 mov	 ecx, ebx
  00292	e8 00 00 00 00	 call	 ?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
  00297	5f		 pop	 edi
  00298	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00299	b8 01 00 00 00	 mov	 eax, 1
  0029e	5b		 pop	 ebx

; 1588 : }

  0029f	5d		 pop	 ebp
  002a0	c2 20 00	 ret	 32			; 00000020H
$LN51@RunningSki:

; 1399 : 		break;
; 1400 : 	case 329:
; 1401 : 		this->MLS_SkillSword2(lpObj,lpMagic,aTargetIndex,0);

  002a3	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  002a6	6a 00		 push	 0
  002a8	51		 push	 ecx
  002a9	56		 push	 esi
  002aa	57		 push	 edi
  002ab	8b cb		 mov	 ecx, ebx
  002ad	e8 00 00 00 00	 call	 ?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
  002b2	5f		 pop	 edi
  002b3	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  002b4	b8 01 00 00 00	 mov	 eax, 1
  002b9	5b		 pop	 ebx

; 1588 : }

  002ba	5d		 pop	 ebp
  002bb	c2 20 00	 ret	 32			; 00000020H
$LN50@RunningSki:

; 1402 : 		break;
; 1403 : 	case 337:
; 1404 : 	case 340:
; 1405 : 	case 343:
; 1406 : 		this->MLS_SkillStrengthenDesruction(lpObj,lpMagic,x,y,aTargetIndex,0);

  002be	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  002c1	8b 45 1c	 mov	 eax, DWORD PTR _y$[ebp]
  002c4	8b 4d 18	 mov	 ecx, DWORD PTR _x$[ebp]
  002c7	6a 00		 push	 0
  002c9	52		 push	 edx
  002ca	50		 push	 eax
  002cb	51		 push	 ecx
  002cc	56		 push	 esi
  002cd	57		 push	 edi
  002ce	8b cb		 mov	 ecx, ebx
  002d0	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  002d7	b8 01 00 00 00	 mov	 eax, 1
  002dc	5b		 pop	 ebx

; 1588 : }

  002dd	5d		 pop	 ebp
  002de	c2 20 00	 ret	 32			; 00000020H
$LN49@RunningSki:

; 1407 : 		break;
; 1408 : 	case 380:
; 1409 : 		this->MLS_SkillStrengthenMagicPower(lpObj,lpMagic,aTargetIndex);

  002e1	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  002e4	52		 push	 edx
  002e5	56		 push	 esi
  002e6	57		 push	 edi
  002e7	8b cb		 mov	 ecx, ebx
  002e9	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
  002ee	5f		 pop	 edi
  002ef	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  002f0	b8 01 00 00 00	 mov	 eax, 1
  002f5	5b		 pop	 ebx

; 1588 : }

  002f6	5d		 pop	 ebp
  002f7	c2 20 00	 ret	 32			; 00000020H
$LN48@RunningSki:

; 1410 : 		break;
; 1411 : 	case 383:
; 1412 : 		this->MLS_SkillSkillfulMagicPower(lpObj,lpMagic,aTargetIndex);

  002fa	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  002fd	50		 push	 eax
  002fe	56		 push	 esi
  002ff	57		 push	 edi
  00300	8b cb		 mov	 ecx, ebx
  00302	e8 00 00 00 00	 call	 ?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
  00307	5f		 pop	 edi
  00308	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00309	b8 01 00 00 00	 mov	 eax, 1
  0030e	5b		 pop	 ebx

; 1588 : }

  0030f	5d		 pop	 ebp
  00310	c2 20 00	 ret	 32			; 00000020H
$LN47@RunningSki:

; 1413 : 		break;
; 1414 : 	case 379:
; 1415 : 	case 480:
; 1416 : 		this->MLS_SkillStrengthenThunder(lpObj,lpMagic,aTargetIndex);

  00313	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00316	51		 push	 ecx
  00317	56		 push	 esi
  00318	57		 push	 edi
  00319	8b cb		 mov	 ecx, ebx
  0031b	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
  00320	5f		 pop	 edi
  00321	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	5b		 pop	 ebx

; 1588 : }

  00328	5d		 pop	 ebp
  00329	c2 20 00	 ret	 32			; 00000020H
$LN46@RunningSki:

; 1417 : 		break;
; 1418 : 	case 384:
; 1419 : 		this->MLS_SkillStrengthenPoison(lpObj,lpMagic,aTargetIndex);

  0032c	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  0032f	52		 push	 edx
  00330	56		 push	 esi
  00331	57		 push	 edi
  00332	8b cb		 mov	 ecx, ebx
  00334	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
  00339	5f		 pop	 edi
  0033a	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0033b	b8 01 00 00 00	 mov	 eax, 1
  00340	5b		 pop	 ebx

; 1588 : }

  00341	5d		 pop	 ebp
  00342	c2 20 00	 ret	 32			; 00000020H
$LN45@RunningSki:

; 1420 : 		break;
; 1421 : 	case 387:
; 1422 : 		this->MLS_SkillStrengthenExPoison(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  00345	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00348	8b 4d 1c	 mov	 ecx, DWORD PTR _y$[ebp]
  0034b	8b 55 18	 mov	 edx, DWORD PTR _x$[ebp]
  0034e	50		 push	 eax
  0034f	8b 07		 mov	 eax, DWORD PTR [edi]
  00351	51		 push	 ecx
  00352	52		 push	 edx
  00353	56		 push	 esi
  00354	50		 push	 eax
  00355	8b cb		 mov	 ecx, ebx
  00357	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
  0035c	5f		 pop	 edi
  0035d	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0035e	b8 01 00 00 00	 mov	 eax, 1
  00363	5b		 pop	 ebx

; 1588 : }

  00364	5d		 pop	 ebp
  00365	c2 20 00	 ret	 32			; 00000020H
$LN44@RunningSki:

; 1423 : 		break;
; 1424 : 	case 389:
; 1425 : 	case 489:
; 1426 : 	case 491:
; 1427 : 		this->MLS_SkillStrengthenIce(lpObj,lpMagic,aTargetIndex);

  00368	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0036b	51		 push	 ecx
  0036c	56		 push	 esi
  0036d	57		 push	 edi
  0036e	8b cb		 mov	 ecx, ebx
  00370	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
  00375	5f		 pop	 edi
  00376	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00377	b8 01 00 00 00	 mov	 eax, 1
  0037c	5b		 pop	 ebx

; 1588 : }

  0037d	5d		 pop	 ebp
  0037e	c2 20 00	 ret	 32			; 00000020H
$LN43@RunningSki:

; 1428 : 		break;
; 1429 : 	case 404:
; 1430 : 		this->MLS_SkillWizardMagicDefense(lpObj,lpMagic,aTargetIndex);

  00381	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00384	52		 push	 edx
  00385	56		 push	 esi
  00386	57		 push	 edi
  00387	8b cb		 mov	 ecx, ebx
  00389	e8 00 00 00 00	 call	 ?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
  0038e	5f		 pop	 edi
  0038f	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00390	b8 01 00 00 00	 mov	 eax, 1
  00395	5b		 pop	 ebx

; 1588 : }

  00396	5d		 pop	 ebp
  00397	c2 20 00	 ret	 32			; 00000020H
$LN42@RunningSki:

; 1431 : 		break;
; 1432 : 	case 422:
; 1433 : 		this->MLS_SkillStrengthenAttack(lpObj->m_Index,aTargetIndex,lpMagic);

  0039a	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0039d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0039f	56		 push	 esi
  003a0	50		 push	 eax
  003a1	51		 push	 ecx
  003a2	8b cb		 mov	 ecx, ebx
  003a4	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
  003a9	5f		 pop	 edi
  003aa	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  003ab	b8 01 00 00 00	 mov	 eax, 1
  003b0	5b		 pop	 ebx

; 1588 : }

  003b1	5d		 pop	 ebp
  003b2	c2 20 00	 ret	 32			; 00000020H
$LN41@RunningSki:

; 1434 : 		break;
; 1435 : 	case 423:
; 1436 : 		this->MLS_SkillStrengthenDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  003b5	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  003b8	8b 07		 mov	 eax, DWORD PTR [edi]
  003ba	56		 push	 esi
  003bb	52		 push	 edx
  003bc	50		 push	 eax
  003bd	8b cb		 mov	 ecx, ebx
  003bf	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
  003c4	5f		 pop	 edi
  003c5	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  003c6	b8 01 00 00 00	 mov	 eax, 1
  003cb	5b		 pop	 ebx

; 1588 : }

  003cc	5d		 pop	 ebp
  003cd	c2 20 00	 ret	 32			; 00000020H
$LN40@RunningSki:

; 1437 : 		break;
; 1438 : 	case 441:
; 1439 : 		this->MLS_SkillInfinityArrow(lpObj->m_Index,aTargetIndex,lpMagic);

  003d0	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  003d3	8b 17		 mov	 edx, DWORD PTR [edi]
  003d5	56		 push	 esi
  003d6	51		 push	 ecx
  003d7	52		 push	 edx
  003d8	8b cb		 mov	 ecx, ebx
  003da	e8 00 00 00 00	 call	 ?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
  003df	5f		 pop	 edi
  003e0	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  003e1	b8 01 00 00 00	 mov	 eax, 1
  003e6	5b		 pop	 ebx

; 1588 : }

  003e7	5d		 pop	 ebp
  003e8	c2 20 00	 ret	 32			; 00000020H
$LN39@RunningSki:

; 1440 : 		break;
; 1441 : 	case 469:
; 1442 : 		this->MLS_SkillStrengthenBerserker(lpObj->m_Index,lpMagic);

  003eb	8b 07		 mov	 eax, DWORD PTR [edi]
  003ed	56		 push	 esi
  003ee	50		 push	 eax
  003ef	8b cb		 mov	 ecx, ebx
  003f1	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
  003f6	5f		 pop	 edi
  003f7	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  003f8	b8 01 00 00 00	 mov	 eax, 1
  003fd	5b		 pop	 ebx

; 1588 : }

  003fe	5d		 pop	 ebp
  003ff	c2 20 00	 ret	 32			; 00000020H
$LN38@RunningSki:

; 1443 : 		break;
; 1444 : 	case 470:
; 1445 : 		this->MLS_SkillSkillfulBerserker(lpObj->m_Index,lpMagic);

  00402	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00404	56		 push	 esi
  00405	51		 push	 ecx
  00406	8b cb		 mov	 ecx, ebx
  00408	e8 00 00 00 00	 call	 ?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
  0040d	5f		 pop	 edi
  0040e	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0040f	b8 01 00 00 00	 mov	 eax, 1
  00414	5b		 pop	 ebx

; 1588 : }

  00415	5d		 pop	 ebp
  00416	c2 20 00	 ret	 32			; 00000020H
$LN37@RunningSki:

; 1446 : 		break;
; 1447 : 	case 472:
; 1448 : 		this->MLS_SkillMasteryBerserker(lpObj->m_Index,lpMagic);

  00419	8b 17		 mov	 edx, DWORD PTR [edi]
  0041b	56		 push	 esi
  0041c	52		 push	 edx
  0041d	8b cb		 mov	 ecx, ebx
  0041f	e8 00 00 00 00	 call	 ?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
  00424	5f		 pop	 edi
  00425	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00426	b8 01 00 00 00	 mov	 eax, 1
  0042b	5b		 pop	 ebx

; 1588 : }

  0042c	5d		 pop	 ebp
  0042d	c2 20 00	 ret	 32			; 00000020H
$LN36@RunningSki:

; 1449 : 		break;
; 1450 : 	case 511:
; 1451 : 		this->MLS_SkillStrendthenAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  00430	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00434	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00436	56		 push	 esi
  00437	50		 push	 eax
  00438	51		 push	 ecx
  00439	8b cb		 mov	 ecx, ebx
  0043b	e8 00 00 00 00	 call	 ?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
  00440	5f		 pop	 edi
  00441	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00442	b8 01 00 00 00	 mov	 eax, 1
  00447	5b		 pop	 ebx

; 1588 : }

  00448	5d		 pop	 ebp
  00449	c2 20 00	 ret	 32			; 00000020H
$LN35@RunningSki:

; 1452 : 		break;
; 1453 : 	case 515:
; 1454 : 		this->MLS_SkillSkillFulAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  0044c	0f b6 56 04	 movzx	 edx, BYTE PTR [esi+4]
  00450	8b 07		 mov	 eax, DWORD PTR [edi]
  00452	56		 push	 esi
  00453	52		 push	 edx
  00454	50		 push	 eax
  00455	8b cb		 mov	 ecx, ebx
  00457	e8 00 00 00 00	 call	 ?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
  0045c	5f		 pop	 edi
  0045d	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0045e	b8 01 00 00 00	 mov	 eax, 1
  00463	5b		 pop	 ebx

; 1588 : }

  00464	5d		 pop	 ebp
  00465	c2 20 00	 ret	 32			; 00000020H
$LN34@RunningSki:

; 1455 : 		break;
; 1456 : 	case 517:
; 1457 : 		this->MLS_SkillMasteryAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  00468	0f b6 4e 04	 movzx	 ecx, BYTE PTR [esi+4]
  0046c	8b 17		 mov	 edx, DWORD PTR [edi]
  0046e	56		 push	 esi
  0046f	51		 push	 ecx
  00470	52		 push	 edx
  00471	8b cb		 mov	 ecx, ebx
  00473	e8 00 00 00 00	 call	 ?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
  00478	5f		 pop	 edi
  00479	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0047a	b8 01 00 00 00	 mov	 eax, 1
  0047f	5b		 pop	 ebx

; 1588 : }

  00480	5d		 pop	 ebp
  00481	c2 20 00	 ret	 32			; 00000020H
$LN33@RunningSki:

; 1458 : 		break;
; 1459 : 	case 522:
; 1460 : 		this->MLS_SkillFulMasteryAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  00484	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00488	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0048a	56		 push	 esi
  0048b	50		 push	 eax
  0048c	51		 push	 ecx
  0048d	8b cb		 mov	 ecx, ebx
  0048f	e8 00 00 00 00	 call	 ?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
  00494	5f		 pop	 edi
  00495	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00496	b8 01 00 00 00	 mov	 eax, 1
  0049b	5b		 pop	 ebx

; 1588 : }

  0049c	5d		 pop	 ebp
  0049d	c2 20 00	 ret	 32			; 00000020H
$LN32@RunningSki:

; 1461 : 		break;
; 1462 : 	case 509:
; 1463 : 		this->MLS_SkillStrengthenSpear(lpObj->m_Index,aTargetIndex,lpMagic);

  004a0	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  004a3	8b 07		 mov	 eax, DWORD PTR [edi]
  004a5	56		 push	 esi
  004a6	52		 push	 edx
  004a7	50		 push	 eax
  004a8	8b cb		 mov	 ecx, ebx
  004aa	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
  004af	5f		 pop	 edi
  004b0	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  004b1	b8 01 00 00 00	 mov	 eax, 1
  004b6	5b		 pop	 ebx

; 1588 : }

  004b7	5d		 pop	 ebp
  004b8	c2 20 00	 ret	 32			; 00000020H
$LN31@RunningSki:

; 1464 : 		break;
; 1465 : 	case 424:
; 1466 : 		gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  004bb	8b 4d 08	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  004be	6a 00		 push	 0
  004c0	6a 00		 push	 0
  004c2	6a 00		 push	 0
  004c4	6a 00		 push	 0
  004c6	6a 00		 push	 0
  004c8	6a 01		 push	 1
  004ca	56		 push	 esi
  004cb	51		 push	 ecx
  004cc	57		 push	 edi
  004cd	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  004d2	83 c4 24	 add	 esp, 36			; 00000024H
  004d5	5f		 pop	 edi
  004d6	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  004d7	b8 01 00 00 00	 mov	 eax, 1
  004dc	5b		 pop	 ebx

; 1588 : }

  004dd	5d		 pop	 ebp
  004de	c2 20 00	 ret	 32			; 00000020H
$LN30@RunningSki:

; 1467 : 		break;
; 1468 : 	case 551:
; 1469 : 	case 552:
; 1470 : 	case 558:
; 1471 : 		this->MLS_SkillMonkBarrageJustOneTarget(lpObj->m_Index,lpMagic,aTargetIndex);

  004e1	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  004e4	8b 07		 mov	 eax, DWORD PTR [edi]
  004e6	52		 push	 edx
  004e7	56		 push	 esi
  004e8	50		 push	 eax
  004e9	8b cb		 mov	 ecx, ebx
  004eb	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
  004f0	5f		 pop	 edi
  004f1	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  004f2	b8 01 00 00 00	 mov	 eax, 1
  004f7	5b		 pop	 ebx

; 1588 : }

  004f8	5d		 pop	 ebp
  004f9	c2 20 00	 ret	 32			; 00000020H
$LN29@RunningSki:

; 1472 : 		break;
; 1473 : 	case 554:
; 1474 : 	case 555:
; 1475 : 		this->MLS_SkillMonkBarrageJustOneTargetMastery(lpObj->m_Index,lpMagic,aTargetIndex);

  004fc	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  004ff	8b 17		 mov	 edx, DWORD PTR [edi]
  00501	51		 push	 ecx
  00502	56		 push	 esi
  00503	52		 push	 edx
  00504	8b cb		 mov	 ecx, ebx
  00506	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
  0050b	5f		 pop	 edi
  0050c	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0050d	b8 01 00 00 00	 mov	 eax, 1
  00512	5b		 pop	 ebx

; 1588 : }

  00513	5d		 pop	 ebp
  00514	c2 20 00	 ret	 32			; 00000020H
$LN28@RunningSki:

; 1476 : 		break;
; 1477 : 	case 559:
; 1478 : 		{
; 1479 : 			PMSG_MONK_DARKSIDE_RECV pMsg = {0};
; 1480 : 			pMsg.TargetNumberH = SET_NUMBERH(aTargetIndex);
; 1481 : 			pMsg.TargetNumberL = SET_NUMBERL(aTargetIndex);
; 1482 : 
; 1483 : 			pMsg.MagicNumberH = SET_NUMBERH(lpMagic->m_Skill);
; 1484 : 			pMsg.MagicNumberL = SET_NUMBERL(lpMagic->m_Skill);
; 1485 : 
; 1486 : 			//GCMonkDarkSideTargetSelect(&pMsg,lpObj->m_Index);
; 1487 : 
; 1488 : 			if( lpObj->m_btDarkSideTargetNum )

  00517	80 bf 26 26 00
	00 00		 cmp	 BYTE PTR [edi+9766], 0
  0051e	0f 84 0b 03 00
	00		 je	 $LN86@RunningSki

; 1489 : 			{
; 1490 : 				for(int i = 0; i < 5; i++)

  00524	8d 87 28 26 00
	00		 lea	 eax, DWORD PTR [edi+9768]
  0052a	89 45 0c	 mov	 DWORD PTR tv734[ebp], eax
  0052d	c7 45 1c 05 00
	00 00		 mov	 DWORD PTR tv337[ebp], 5
$LL26@RunningSki:

; 1491 : 				{
; 1492 : 					if( lpObj->m_wDarkSideTargetList[i] != 10000 )

  00534	8b 4d 0c	 mov	 ecx, DWORD PTR tv734[ebp]
  00537	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0053a	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  0053f	66 3b c2	 cmp	 ax, dx
  00542	74 0d		 je	 SHORT $LN25@RunningSki

; 1493 : 						MLS_SkillMonkBarrageJustOneTarget(lpObj->m_Index,lpMagic,lpObj->m_wDarkSideTargetList[i]);

  00544	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00546	98		 cwde
  00547	50		 push	 eax
  00548	56		 push	 esi
  00549	51		 push	 ecx
  0054a	8b cb		 mov	 ecx, ebx
  0054c	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
$LN25@RunningSki:

; 1489 : 			{
; 1490 : 				for(int i = 0; i < 5; i++)

  00551	83 45 0c 02	 add	 DWORD PTR tv734[ebp], 2
  00555	ff 4d 1c	 dec	 DWORD PTR tv337[ebp]
  00558	75 da		 jne	 SHORT $LL26@RunningSki

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0055a	5f		 pop	 edi
  0055b	5e		 pop	 esi
  0055c	b8 01 00 00 00	 mov	 eax, 1
  00561	5b		 pop	 ebx

; 1588 : }

  00562	5d		 pop	 ebp
  00563	c2 20 00	 ret	 32			; 00000020H
$LN22@RunningSki:

; 1494 : 				}
; 1495 : 			}
; 1496 : 		}
; 1497 : 		break;
; 1498 : 	case 560:
; 1499 : 		{
; 1500 : 			if( !OBJMAX_RANGE(aTargetIndex) )

  00566	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00569	85 c9		 test	 ecx, ecx
  0056b	78 0f		 js	 SHORT $LN84@RunningSki
  0056d	33 c0		 xor	 eax, eax
  0056f	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00575	0f 9e c0	 setle	 al
  00578	85 c0		 test	 eax, eax
  0057a	75 21		 jne	 SHORT $LN21@RunningSki
$LN84@RunningSki:

; 1501 : 			{
; 1502 : 				LogAddTD("[InvalidTargetIndex][CMasterLevelSkillTreeSystem::RunningSkill_MLS][560] Index :%d , AccountID : %s ",
; 1503 : 					lpObj->m_Index,lpObj->AccountID);

  0057c	8b 07		 mov	 eax, DWORD PTR [edi]
  0057e	8d 57 6c	 lea	 edx, DWORD PTR [edi+108]
  00581	52		 push	 edx
  00582	50		 push	 eax
  00583	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@MJOPFOM@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@
  00588	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0058e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00591	5f		 pop	 edi
  00592	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00593	b8 01 00 00 00	 mov	 eax, 1
  00598	5b		 pop	 ebx

; 1588 : }

  00599	5d		 pop	 ebp
  0059a	c2 20 00	 ret	 32			; 00000020H
$LN21@RunningSki:

; 1504 : 				break;
; 1505 : 			}
; 1506 : 
; 1507 : 			this->MLS_SkillAreaMonsterAttack(lpObj->m_Index,lpMagic,gObj[aTargetIndex].X,gObj[aTargetIndex].Y,aTargetIndex,3,1,0,0);

  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005a2	6a 00		 push	 0
  005a4	6a 00		 push	 0
  005a6	6a 01		 push	 1
  005a8	6a 03		 push	 3
  005aa	51		 push	 ecx
  005ab	8b 4d 10	 mov	 ecx, DWORD PTR tv546[ebp]
  005ae	0f b6 94 01 46
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+326]
  005b6	0f b6 84 01 44
	01 00 00	 movzx	 eax, BYTE PTR [ecx+eax+324]
  005be	8b 0f		 mov	 ecx, DWORD PTR [edi]
  005c0	52		 push	 edx
  005c1	50		 push	 eax
  005c2	56		 push	 esi
  005c3	51		 push	 ecx
  005c4	8b cb		 mov	 ecx, ebx
  005c6	e8 00 00 00 00	 call	 ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
  005cb	5f		 pop	 edi
  005cc	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  005cd	b8 01 00 00 00	 mov	 eax, 1
  005d2	5b		 pop	 ebx

; 1588 : }

  005d3	5d		 pop	 ebp
  005d4	c2 20 00	 ret	 32			; 00000020H
$LN20@RunningSki:

; 1508 : 		}
; 1509 : 		break;
; 1510 : #pragma message("##### FIX ME #####")
; 1511 : 	case 569:
; 1512 : 	case 573:
; 1513 : 		MLS_SkillMonkBuffApplyParty(lpObj->m_Index,lpMagic);

  005d7	8b 17		 mov	 edx, DWORD PTR [edi]
  005d9	56		 push	 esi
  005da	52		 push	 edx
  005db	8b cb		 mov	 ecx, ebx
  005dd	e8 00 00 00 00	 call	 ?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
  005e2	5f		 pop	 edi
  005e3	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  005e4	b8 01 00 00 00	 mov	 eax, 1
  005e9	5b		 pop	 ebx

; 1588 : }

  005ea	5d		 pop	 ebp
  005eb	c2 20 00	 ret	 32			; 00000020H
$LN19@RunningSki:

; 1514 : 		break;
; 1515 : 	case 572:
; 1516 : 		MLS_SkillMonkBuffApplyPartyMastery(lpObj->m_Index,lpMagic);

  005ee	8b 07		 mov	 eax, DWORD PTR [edi]
  005f0	56		 push	 esi
  005f1	50		 push	 eax
  005f2	8b cb		 mov	 ecx, ebx
  005f4	e8 00 00 00 00	 call	 ?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
  005f9	5f		 pop	 edi
  005fa	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  005fb	b8 01 00 00 00	 mov	 eax, 1
  00600	5b		 pop	 ebx

; 1588 : }

  00601	5d		 pop	 ebp
  00602	c2 20 00	 ret	 32			; 00000020H
$LN18@RunningSki:

; 1517 : 		break;
; 1518 : 	//case 344:
; 1519 : 	//case 346:
; 1520 : 	//	gObjUseSkill.SkillBloodStorm(lpObj->m_Index,aTargetIndex,lpMagic,bCombo);
; 1521 : 	//	break;
; 1522 : 	case 390:
; 1523 : 	case 394:
; 1524 : 		this->MLS_SkillMeteorit(lpObj,aTargetIndex,lpMagic);

  00605	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00608	56		 push	 esi
  00609	51		 push	 ecx
  0060a	57		 push	 edi
  0060b	8b cb		 mov	 ecx, ebx
  0060d	e8 00 00 00 00	 call	 ?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
  00612	5f		 pop	 edi
  00613	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00614	b8 01 00 00 00	 mov	 eax, 1
  00619	5b		 pop	 ebx

; 1588 : }

  0061a	5d		 pop	 ebp
  0061b	c2 20 00	 ret	 32			; 00000020H
$LN17@RunningSki:

; 1525 : 		break;
; 1526 : 	case 395:
; 1527 : 		this->MLS_SkillHellFire2(lpObj->m_Index,aTargetIndex,lpMagic);

  0061e	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00621	8b 07		 mov	 eax, DWORD PTR [edi]
  00623	56		 push	 esi
  00624	52		 push	 edx
  00625	50		 push	 eax
  00626	8b cb		 mov	 ecx, ebx
  00628	e8 00 00 00 00	 call	 ?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
  0062d	5f		 pop	 edi
  0062e	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0062f	b8 01 00 00 00	 mov	 eax, 1
  00634	5b		 pop	 ebx

; 1588 : }

  00635	5d		 pop	 ebp
  00636	c2 20 00	 ret	 32			; 00000020H
$LN16@RunningSki:

; 1528 : 		break;
; 1529 : 	case 495:
; 1530 : 	case 497:
; 1531 : 		this->MLS_SkillEarthPrison(lpObj->m_Index,aTargetIndex,lpMagic);

  00639	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0063c	8b 17		 mov	 edx, DWORD PTR [edi]
  0063e	56		 push	 esi
  0063f	51		 push	 ecx
  00640	52		 push	 edx
  00641	8b cb		 mov	 ecx, ebx
  00643	e8 00 00 00 00	 call	 ?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
  00648	5f		 pop	 edi
  00649	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0064a	b8 01 00 00 00	 mov	 eax, 1
  0064f	5b		 pop	 ebx

; 1588 : }

  00650	5d		 pop	 ebp
  00651	c2 20 00	 ret	 32			; 00000020H
$LN15@RunningSki:

; 1532 : 		break;
; 1533 : 	case 406:
; 1534 : 		this->MLS_SkillWizardMagicDefenseMastery(lpObj,lpMagic,aTargetIndex);

  00654	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00657	50		 push	 eax
  00658	56		 push	 esi
  00659	57		 push	 edi
  0065a	8b cb		 mov	 ecx, ebx
  0065c	e8 00 00 00 00	 call	 ?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
  00661	5f		 pop	 edi
  00662	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00663	b8 01 00 00 00	 mov	 eax, 1
  00668	5b		 pop	 ebx

; 1588 : }

  00669	5d		 pop	 ebp
  0066a	c2 20 00	 ret	 32			; 00000020H
$LN14@RunningSki:

; 1535 : 		break;
; 1536 : 	case 425:
; 1537 : 		this->MLS_SkillCure(lpObj->m_Index,aTargetIndex,lpMagic);

  0066d	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00670	8b 17		 mov	 edx, DWORD PTR [edi]
  00672	56		 push	 esi
  00673	51		 push	 ecx
  00674	52		 push	 edx
  00675	8b cb		 mov	 ecx, ebx
  00677	e8 00 00 00 00	 call	 ?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillCure
  0067c	5f		 pop	 edi
  0067d	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0067e	b8 01 00 00 00	 mov	 eax, 1
  00683	5b		 pop	 ebx

; 1588 : }

  00684	5d		 pop	 ebp
  00685	c2 20 00	 ret	 32			; 00000020H
$LN13@RunningSki:

; 1538 : 		break;
; 1539 : 	case 411:
; 1540 : 	case 431:
; 1541 : 		this->MLS_SkillMultiShot(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  00688	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0068b	8b 4d 24	 mov	 ecx, DWORD PTR _aTargetPos$[ebp]
  0068e	8b 17		 mov	 edx, DWORD PTR [edi]
  00690	50		 push	 eax
  00691	51		 push	 ecx
  00692	56		 push	 esi
  00693	52		 push	 edx
  00694	8b cb		 mov	 ecx, ebx
  00696	e8 00 00 00 00	 call	 ?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
  0069b	5f		 pop	 edi
  0069c	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0069d	b8 01 00 00 00	 mov	 eax, 1
  006a2	5b		 pop	 ebx

; 1588 : }

  006a3	5d		 pop	 ebp
  006a4	c2 20 00	 ret	 32			; 00000020H
$LN12@RunningSki:

; 1542 : 		break;
; 1543 : 	case 432:
; 1544 : 		gObjUseSkill.SkillMonsterCall(lpObj->m_Index,597,lpObj->X-1,lpObj->Y+1);

  006a7	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  006ae	0f bf 8f 44 01
	00 00		 movsx	 ecx, WORD PTR [edi+324]
  006b5	8b 17		 mov	 edx, DWORD PTR [edi]
  006b7	40		 inc	 eax
  006b8	50		 push	 eax
  006b9	49		 dec	 ecx
  006ba	51		 push	 ecx
  006bb	68 55 02 00 00	 push	 597			; 00000255H
  006c0	52		 push	 edx
  006c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  006c6	e8 00 00 00 00	 call	 ?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z ; CObjUseSkill::SkillMonsterCall
  006cb	5f		 pop	 edi
  006cc	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  006cd	b8 01 00 00 00	 mov	 eax, 1
  006d2	5b		 pop	 ebx

; 1588 : }

  006d3	5d		 pop	 ebp
  006d4	c2 20 00	 ret	 32			; 00000020H
$LN11@RunningSki:

; 1545 : 		break;
; 1546 : 	case 427:
; 1547 : 	case 434:
; 1548 : 		gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  006d7	8b 45 08	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  006da	6a 00		 push	 0
  006dc	6a 00		 push	 0
  006de	6a 00		 push	 0
  006e0	6a 00		 push	 0
  006e2	6a 00		 push	 0
  006e4	6a 01		 push	 1
  006e6	56		 push	 esi
  006e7	50		 push	 eax
  006e8	57		 push	 edi
  006e9	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  006ee	83 c4 24	 add	 esp, 36			; 00000024H
  006f1	5f		 pop	 edi
  006f2	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  006f3	b8 01 00 00 00	 mov	 eax, 1
  006f8	5b		 pop	 ebx

; 1588 : }

  006f9	5d		 pop	 ebp
  006fa	c2 20 00	 ret	 32			; 00000020H
$LN10@RunningSki:

; 1549 : 		break;
; 1550 : 	case 430:
; 1551 : 	case 433:
; 1552 : 		this->MLS_SkillBless(lpObj->m_Index,aTargetIndex,lpMagic);

  006fd	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00700	8b 17		 mov	 edx, DWORD PTR [edi]
  00702	56		 push	 esi
  00703	51		 push	 ecx
  00704	52		 push	 edx
  00705	8b cb		 mov	 ecx, ebx
  00707	e8 00 00 00 00	 call	 ?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBless
  0070c	5f		 pop	 edi
  0070d	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0070e	b8 01 00 00 00	 mov	 eax, 1
  00713	5b		 pop	 ebx

; 1588 : }

  00714	5d		 pop	 ebp
  00715	c2 20 00	 ret	 32			; 00000020H
$LN9@RunningSki:

; 1553 : 		break;
; 1554 : 	case 496:
; 1555 : 		this->MLS_SkillGiganticStorm(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  00718	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  0071b	8b 4d 1c	 mov	 ecx, DWORD PTR _y$[ebp]
  0071e	8b 55 18	 mov	 edx, DWORD PTR _x$[ebp]
  00721	50		 push	 eax
  00722	8b 07		 mov	 eax, DWORD PTR [edi]
  00724	51		 push	 ecx
  00725	52		 push	 edx
  00726	56		 push	 esi
  00727	50		 push	 eax
  00728	8b cb		 mov	 ecx, ebx
  0072a	e8 00 00 00 00	 call	 ?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
  0072f	5f		 pop	 edi
  00730	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00731	b8 01 00 00 00	 mov	 eax, 1
  00736	5b		 pop	 ebx

; 1588 : }

  00737	5d		 pop	 ebp
  00738	c2 20 00	 ret	 32			; 00000020H
$LN8@RunningSki:

; 1556 : 		break;
; 1557 : 	case 492:
; 1558 : 	case 494:
; 1559 : 		this->MLS_SkillFlameStrike(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  0073b	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0073e	8b 55 24	 mov	 edx, DWORD PTR _aTargetPos$[ebp]
  00741	8b 07		 mov	 eax, DWORD PTR [edi]
  00743	51		 push	 ecx
  00744	52		 push	 edx
  00745	56		 push	 esi
  00746	50		 push	 eax
  00747	8b cb		 mov	 ecx, ebx
  00749	e8 00 00 00 00	 call	 ?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
  0074e	5f		 pop	 edi
  0074f	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00750	b8 01 00 00 00	 mov	 eax, 1
  00755	5b		 pop	 ebx

; 1588 : }

  00756	5d		 pop	 ebp
  00757	c2 20 00	 ret	 32			; 00000020H
$LN7@RunningSki:

; 1560 : 		break;
; 1561 : 	case 460:
; 1562 : 		this->MLS_SkillInnovation(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  0075a	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0075d	8b 55 1c	 mov	 edx, DWORD PTR _y$[ebp]
  00760	8b 45 18	 mov	 eax, DWORD PTR _x$[ebp]
  00763	51		 push	 ecx
  00764	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00766	52		 push	 edx
  00767	50		 push	 eax
  00768	56		 push	 esi
  00769	51		 push	 ecx
  0076a	8b cb		 mov	 ecx, ebx
  0076c	e8 00 00 00 00	 call	 ?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
  00771	5f		 pop	 edi
  00772	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00773	b8 01 00 00 00	 mov	 eax, 1
  00778	5b		 pop	 ebx

; 1588 : }

  00779	5d		 pop	 ebp
  0077a	c2 20 00	 ret	 32			; 00000020H
$LN6@RunningSki:

; 1563 : 		break;
; 1564 : 	case 459:
; 1565 : 		this->MLS_SkillWeakness(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  0077d	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00780	8b 45 1c	 mov	 eax, DWORD PTR _y$[ebp]
  00783	8b 4d 18	 mov	 ecx, DWORD PTR _x$[ebp]
  00786	52		 push	 edx
  00787	8b 17		 mov	 edx, DWORD PTR [edi]
  00789	50		 push	 eax
  0078a	51		 push	 ecx
  0078b	56		 push	 esi
  0078c	52		 push	 edx
  0078d	8b cb		 mov	 ecx, ebx
  0078f	e8 00 00 00 00	 call	 ?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
  00794	5f		 pop	 edi
  00795	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00796	b8 01 00 00 00	 mov	 eax, 1
  0079b	5b		 pop	 ebx

; 1588 : }

  0079c	5d		 pop	 ebp
  0079d	c2 20 00	 ret	 32			; 00000020H
$LN5@RunningSki:

; 1566 : 		break;
; 1567 : 	case 461:
; 1568 : 	case 463:
; 1569 : 		this->MLS_SkillBlind(lpObj->m_Index,aTargetIndex,lpMagic);

  007a0	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  007a3	8b 0f		 mov	 ecx, DWORD PTR [edi]
  007a5	56		 push	 esi
  007a6	50		 push	 eax
  007a7	51		 push	 ecx
  007a8	8b cb		 mov	 ecx, ebx
  007aa	e8 00 00 00 00	 call	 ?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
  007af	5f		 pop	 edi
  007b0	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  007b1	b8 01 00 00 00	 mov	 eax, 1
  007b6	5b		 pop	 ebx

; 1588 : }

  007b7	5d		 pop	 ebp
  007b8	c2 20 00	 ret	 32			; 00000020H
$LN4@RunningSki:

; 1570 : 		break;
; 1571 : 	case 519:
; 1572 : 		this->MLS_SkillElectricSpark(lpObj->m_Index,lpMagic,x,y,dir,aTargetPos,aTargetIndex);

  007bb	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  007be	8b 45 24	 mov	 eax, DWORD PTR _aTargetPos$[ebp]
  007c1	8b 4d 20	 mov	 ecx, DWORD PTR _dir$[ebp]
  007c4	52		 push	 edx
  007c5	8b 55 1c	 mov	 edx, DWORD PTR _y$[ebp]
  007c8	50		 push	 eax
  007c9	8b 45 18	 mov	 eax, DWORD PTR _x$[ebp]
  007cc	51		 push	 ecx
  007cd	8b 0f		 mov	 ecx, DWORD PTR [edi]
  007cf	52		 push	 edx
  007d0	50		 push	 eax
  007d1	56		 push	 esi
  007d2	51		 push	 ecx
  007d3	8b cb		 mov	 ecx, ebx
  007d5	e8 00 00 00 00	 call	 ?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
  007da	5f		 pop	 edi
  007db	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  007dc	b8 01 00 00 00	 mov	 eax, 1
  007e1	5b		 pop	 ebx

; 1588 : }

  007e2	5d		 pop	 ebp
  007e3	c2 20 00	 ret	 32			; 00000020H
$LN3@RunningSki:

; 1573 : 		break;
; 1574 : 	case 523:
; 1575 : 		this->MLS_SkillChaoticDesier(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  007e6	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  007e9	8b 45 24	 mov	 eax, DWORD PTR _aTargetPos$[ebp]
  007ec	8b 0f		 mov	 ecx, DWORD PTR [edi]
  007ee	52		 push	 edx
  007ef	50		 push	 eax
  007f0	56		 push	 esi
  007f1	51		 push	 ecx
  007f2	8b cb		 mov	 ecx, ebx
  007f4	e8 00 00 00 00	 call	 ?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
  007f9	5f		 pop	 edi
  007fa	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  007fb	b8 01 00 00 00	 mov	 eax, 1
  00800	5b		 pop	 ebx

; 1588 : }

  00801	5d		 pop	 ebp
  00802	c2 20 00	 ret	 32			; 00000020H
$LN2@RunningSki:

; 1576 : 		break;
; 1577 : 	case 521:
; 1578 : 	case 524:
; 1579 : 		this->MLS_SkillIronDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  00805	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00808	8b 07		 mov	 eax, DWORD PTR [edi]
  0080a	56		 push	 esi
  0080b	52		 push	 edx
  0080c	50		 push	 eax
  0080d	8b cb		 mov	 ecx, ebx
  0080f	e8 00 00 00 00	 call	 ?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
  00814	5f		 pop	 edi
  00815	5e		 pop	 esi

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  00816	b8 01 00 00 00	 mov	 eax, 1
  0081b	5b		 pop	 ebx

; 1588 : }

  0081c	5d		 pop	 ebp
  0081d	c2 20 00	 ret	 32			; 00000020H
$LN1@RunningSki:

; 1580 : 		break;
; 1581 : 	case 426:
; 1582 : 	case 429:
; 1583 : 		MLS_SkillPartyHeal(lpObj->m_Index,aTargetIndex,lpMagic);

  00820	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00823	8b 17		 mov	 edx, DWORD PTR [edi]
  00825	56		 push	 esi
  00826	51		 push	 ecx
  00827	52		 push	 edx
  00828	8b cb		 mov	 ecx, ebx
  0082a	e8 00 00 00 00	 call	 ?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
$LN86@RunningSki:

; 1584 : 		break;
; 1585 : 	}
; 1586 : 
; 1587 : return true;

  0082f	5f		 pop	 edi
  00830	5e		 pop	 esi
  00831	b8 01 00 00 00	 mov	 eax, 1
  00836	5b		 pop	 ebx

; 1588 : }

  00837	5d		 pop	 ebp
  00838	c2 20 00	 ret	 32			; 00000020H
$LN76@RunningSki:
  0083b	5f		 pop	 edi
  0083c	5e		 pop	 esi

; 1317 : 		return false;

  0083d	33 c0		 xor	 eax, eax
  0083f	5b		 pop	 ebx

; 1588 : }

  00840	5d		 pop	 ebp
  00841	c2 20 00	 ret	 32			; 00000020H
$LN87@RunningSki:
  00844	00 00 00 00	 DD	 $LN55@RunningSki
  00848	00 00 00 00	 DD	 $LN53@RunningSki
  0084c	00 00 00 00	 DD	 $LN52@RunningSki
  00850	00 00 00 00	 DD	 $LN51@RunningSki
  00854	00 00 00 00	 DD	 $LN71@RunningSki
  00858	00 00 00 00	 DD	 $LN63@RunningSki
  0085c	00 00 00 00	 DD	 $LN64@RunningSki
  00860	00 00 00 00	 DD	 $LN50@RunningSki
  00864	00 00 00 00	 DD	 $LN69@RunningSki
  00868	00 00 00 00	 DD	 $LN70@RunningSki
  0086c	00 00 00 00	 DD	 $LN86@RunningSki
  00870	00 00 00 00	 DD	 $LN47@RunningSki
  00874	00 00 00 00	 DD	 $LN49@RunningSki
  00878	00 00 00 00	 DD	 $LN48@RunningSki
  0087c	00 00 00 00	 DD	 $LN46@RunningSki
  00880	00 00 00 00	 DD	 $LN45@RunningSki
  00884	00 00 00 00	 DD	 $LN44@RunningSki
  00888	00 00 00 00	 DD	 $LN18@RunningSki
  0088c	00 00 00 00	 DD	 $LN65@RunningSki
  00890	00 00 00 00	 DD	 $LN17@RunningSki
  00894	00 00 00 00	 DD	 $LN73@RunningSki
  00898	00 00 00 00	 DD	 $LN43@RunningSki
  0089c	00 00 00 00	 DD	 $LN15@RunningSki
  008a0	00 00 00 00	 DD	 $LN13@RunningSki
  008a4	00 00 00 00	 DD	 $LN72@RunningSki
  008a8	00 00 00 00	 DD	 $LN62@RunningSki
  008ac	00 00 00 00	 DD	 $LN61@RunningSki
  008b0	00 00 00 00	 DD	 $LN42@RunningSki
  008b4	00 00 00 00	 DD	 $LN41@RunningSki
  008b8	00 00 00 00	 DD	 $LN31@RunningSki
  008bc	00 00 00 00	 DD	 $LN14@RunningSki
  008c0	00 00 00 00	 DD	 $LN1@RunningSki
  008c4	00 00 00 00	 DD	 $LN11@RunningSki
  008c8	00 00 00 00	 DD	 $LN10@RunningSki
  008cc	00 00 00 00	 DD	 $LN12@RunningSki
  008d0	00 00 00 00	 DD	 $LN40@RunningSki
  008d4	00 00 00 00	 DD	 $LN59@RunningSki
  008d8	00 00 00 00	 DD	 $LN58@RunningSki
  008dc	00 00 00 00	 DD	 $LN57@RunningSki
  008e0	00 00 00 00	 DD	 $LN56@RunningSki
  008e4	00 00 00 00	 DD	 $LN6@RunningSki
  008e8	00 00 00 00	 DD	 $LN7@RunningSki
  008ec	00 00 00 00	 DD	 $LN5@RunningSki
  008f0	00 00 00 00	 DD	 $LN39@RunningSki
  008f4	00 00 00 00	 DD	 $LN38@RunningSki
  008f8	00 00 00 00	 DD	 $LN37@RunningSki
  008fc	00 00 00 00	 DD	 $LN54@RunningSki
  00900	00 00 00 00	 DD	 $LN60@RunningSki
  00904	00 00 00 00	 DD	 $LN8@RunningSki
  00908	00 00 00 00	 DD	 $LN16@RunningSki
  0090c	00 00 00 00	 DD	 $LN9@RunningSki
  00910	00 00 00 00	 DD	 $LN66@RunningSki
  00914	00 00 00 00	 DD	 $LN32@RunningSki
  00918	00 00 00 00	 DD	 $LN36@RunningSki
  0091c	00 00 00 00	 DD	 $LN67@RunningSki
  00920	00 00 00 00	 DD	 $LN35@RunningSki
  00924	00 00 00 00	 DD	 $LN34@RunningSki
  00928	00 00 00 00	 DD	 $LN4@RunningSki
  0092c	00 00 00 00	 DD	 $LN2@RunningSki
  00930	00 00 00 00	 DD	 $LN33@RunningSki
  00934	00 00 00 00	 DD	 $LN3@RunningSki
  00938	00 00 00 00	 DD	 $LN30@RunningSki
  0093c	00 00 00 00	 DD	 $LN29@RunningSki
  00940	00 00 00 00	 DD	 $LN28@RunningSki
  00944	00 00 00 00	 DD	 $LN22@RunningSki
  00948	00 00 00 00	 DD	 $LN20@RunningSki
  0094c	00 00 00 00	 DD	 $LN19@RunningSki
  00950	00 00 00 00	 DD	 $LN86@RunningSki
$LN85@RunningSki:
  00954	00		 DB	 0
  00955	01		 DB	 1
  00956	02		 DB	 2
  00957	03		 DB	 3
  00958	04		 DB	 4
  00959	05		 DB	 5
  0095a	04		 DB	 4
  0095b	05		 DB	 5
  0095c	43		 DB	 67			; 00000043H
  0095d	43		 DB	 67			; 00000043H
  0095e	06		 DB	 6
  0095f	07		 DB	 7
  00960	43		 DB	 67			; 00000043H
  00961	06		 DB	 6
  00962	07		 DB	 7
  00963	43		 DB	 67			; 00000043H
  00964	06		 DB	 6
  00965	07		 DB	 7
  00966	43		 DB	 67			; 00000043H
  00967	43		 DB	 67			; 00000043H
  00968	43		 DB	 67			; 00000043H
  00969	43		 DB	 67			; 00000043H
  0096a	43		 DB	 67			; 00000043H
  0096b	43		 DB	 67			; 00000043H
  0096c	43		 DB	 67			; 00000043H
  0096d	43		 DB	 67			; 00000043H
  0096e	43		 DB	 67			; 00000043H
  0096f	43		 DB	 67			; 00000043H
  00970	43		 DB	 67			; 00000043H
  00971	43		 DB	 67			; 00000043H
  00972	08		 DB	 8
  00973	43		 DB	 67			; 00000043H
  00974	43		 DB	 67			; 00000043H
  00975	43		 DB	 67			; 00000043H
  00976	09		 DB	 9
  00977	43		 DB	 67			; 00000043H
  00978	43		 DB	 67			; 00000043H
  00979	0a		 DB	 10			; 0000000aH
  0097a	43		 DB	 67			; 00000043H
  0097b	43		 DB	 67			; 00000043H
  0097c	43		 DB	 67			; 00000043H
  0097d	43		 DB	 67			; 00000043H
  0097e	43		 DB	 67			; 00000043H
  0097f	43		 DB	 67			; 00000043H
  00980	43		 DB	 67			; 00000043H
  00981	43		 DB	 67			; 00000043H
  00982	43		 DB	 67			; 00000043H
  00983	43		 DB	 67			; 00000043H
  00984	43		 DB	 67			; 00000043H
  00985	43		 DB	 67			; 00000043H
  00986	43		 DB	 67			; 00000043H
  00987	43		 DB	 67			; 00000043H
  00988	43		 DB	 67			; 00000043H
  00989	0b		 DB	 11			; 0000000bH
  0098a	0c		 DB	 12			; 0000000cH
  0098b	43		 DB	 67			; 00000043H
  0098c	43		 DB	 67			; 00000043H
  0098d	0d		 DB	 13			; 0000000dH
  0098e	0e		 DB	 14			; 0000000eH
  0098f	43		 DB	 67			; 00000043H
  00990	43		 DB	 67			; 00000043H
  00991	0f		 DB	 15			; 0000000fH
  00992	43		 DB	 67			; 00000043H
  00993	10		 DB	 16			; 00000010H
  00994	11		 DB	 17			; 00000011H
  00995	12		 DB	 18			; 00000012H
  00996	43		 DB	 67			; 00000043H
  00997	12		 DB	 18			; 00000012H
  00998	11		 DB	 17			; 00000011H
  00999	13		 DB	 19			; 00000013H
  0099a	43		 DB	 67			; 00000043H
  0099b	43		 DB	 67			; 00000043H
  0099c	43		 DB	 67			; 00000043H
  0099d	43		 DB	 67			; 00000043H
  0099e	43		 DB	 67			; 00000043H
  0099f	43		 DB	 67			; 00000043H
  009a0	43		 DB	 67			; 00000043H
  009a1	14		 DB	 20			; 00000014H
  009a2	15		 DB	 21			; 00000015H
  009a3	43		 DB	 67			; 00000043H
  009a4	16		 DB	 22			; 00000016H
  009a5	43		 DB	 67			; 00000043H
  009a6	43		 DB	 67			; 00000043H
  009a7	43		 DB	 67			; 00000043H
  009a8	43		 DB	 67			; 00000043H
  009a9	17		 DB	 23			; 00000017H
  009aa	43		 DB	 67			; 00000043H
  009ab	18		 DB	 24			; 00000018H
  009ac	43		 DB	 67			; 00000043H
  009ad	43		 DB	 67			; 00000043H
  009ae	43		 DB	 67			; 00000043H
  009af	19		 DB	 25			; 00000019H
  009b0	43		 DB	 67			; 00000043H
  009b1	43		 DB	 67			; 00000043H
  009b2	1a		 DB	 26			; 0000001aH
  009b3	43		 DB	 67			; 00000043H
  009b4	1b		 DB	 27			; 0000001bH
  009b5	1c		 DB	 28			; 0000001cH
  009b6	1d		 DB	 29			; 0000001dH
  009b7	1e		 DB	 30			; 0000001eH
  009b8	1f		 DB	 31			; 0000001fH
  009b9	20		 DB	 32			; 00000020H
  009ba	43		 DB	 67			; 00000043H
  009bb	1f		 DB	 31			; 0000001fH
  009bc	21		 DB	 33			; 00000021H
  009bd	17		 DB	 23			; 00000017H
  009be	22		 DB	 34			; 00000022H
  009bf	21		 DB	 33			; 00000021H
  009c0	20		 DB	 32			; 00000020H
  009c1	43		 DB	 67			; 00000043H
  009c2	43		 DB	 67			; 00000043H
  009c3	43		 DB	 67			; 00000043H
  009c4	43		 DB	 67			; 00000043H
  009c5	43		 DB	 67			; 00000043H
  009c6	43		 DB	 67			; 00000043H
  009c7	23		 DB	 35			; 00000023H
  009c8	43		 DB	 67			; 00000043H
  009c9	43		 DB	 67			; 00000043H
  009ca	43		 DB	 67			; 00000043H
  009cb	43		 DB	 67			; 00000043H
  009cc	43		 DB	 67			; 00000043H
  009cd	43		 DB	 67			; 00000043H
  009ce	43		 DB	 67			; 00000043H
  009cf	43		 DB	 67			; 00000043H
  009d0	43		 DB	 67			; 00000043H
  009d1	43		 DB	 67			; 00000043H
  009d2	43		 DB	 67			; 00000043H
  009d3	43		 DB	 67			; 00000043H
  009d4	24		 DB	 36			; 00000024H
  009d5	25		 DB	 37			; 00000025H
  009d6	26		 DB	 38			; 00000026H
  009d7	43		 DB	 67			; 00000043H
  009d8	27		 DB	 39			; 00000027H
  009d9	28		 DB	 40			; 00000028H
  009da	29		 DB	 41			; 00000029H
  009db	2a		 DB	 42			; 0000002aH
  009dc	27		 DB	 39			; 00000027H
  009dd	2a		 DB	 42			; 0000002aH
  009de	43		 DB	 67			; 00000043H
  009df	43		 DB	 67			; 00000043H
  009e0	43		 DB	 67			; 00000043H
  009e1	43		 DB	 67			; 00000043H
  009e2	43		 DB	 67			; 00000043H
  009e3	2b		 DB	 43			; 0000002bH
  009e4	2c		 DB	 44			; 0000002cH
  009e5	43		 DB	 67			; 00000043H
  009e6	2d		 DB	 45			; 0000002dH
  009e7	43		 DB	 67			; 00000043H
  009e8	43		 DB	 67			; 00000043H
  009e9	43		 DB	 67			; 00000043H
  009ea	43		 DB	 67			; 00000043H
  009eb	43		 DB	 67			; 00000043H
  009ec	43		 DB	 67			; 00000043H
  009ed	2e		 DB	 46			; 0000002eH
  009ee	0b		 DB	 11			; 0000000bH
  009ef	04		 DB	 4
  009f0	2f		 DB	 47			; 0000002fH
  009f1	43		 DB	 67			; 00000043H
  009f2	43		 DB	 67			; 00000043H
  009f3	43		 DB	 67			; 00000043H
  009f4	43		 DB	 67			; 00000043H
  009f5	43		 DB	 67			; 00000043H
  009f6	43		 DB	 67			; 00000043H
  009f7	10		 DB	 16			; 00000010H
  009f8	43		 DB	 67			; 00000043H
  009f9	10		 DB	 16			; 00000010H
  009fa	30		 DB	 48			; 00000030H
  009fb	43		 DB	 67			; 00000043H
  009fc	30		 DB	 48			; 00000030H
  009fd	31		 DB	 49			; 00000031H
  009fe	32		 DB	 50			; 00000032H
  009ff	31		 DB	 49			; 00000031H
  00a00	43		 DB	 67			; 00000043H
  00a01	43		 DB	 67			; 00000043H
  00a02	43		 DB	 67			; 00000043H
  00a03	43		 DB	 67			; 00000043H
  00a04	43		 DB	 67			; 00000043H
  00a05	43		 DB	 67			; 00000043H
  00a06	43		 DB	 67			; 00000043H
  00a07	43		 DB	 67			; 00000043H
  00a08	43		 DB	 67			; 00000043H
  00a09	43		 DB	 67			; 00000043H
  00a0a	33		 DB	 51			; 00000033H
  00a0b	34		 DB	 52			; 00000034H
  00a0c	43		 DB	 67			; 00000043H
  00a0d	35		 DB	 53			; 00000035H
  00a0e	36		 DB	 54			; 00000036H
  00a0f	43		 DB	 67			; 00000043H
  00a10	33		 DB	 51			; 00000033H
  00a11	37		 DB	 55			; 00000037H
  00a12	36		 DB	 54			; 00000036H
  00a13	38		 DB	 56			; 00000038H
  00a14	43		 DB	 67			; 00000043H
  00a15	39		 DB	 57			; 00000039H
  00a16	43		 DB	 67			; 00000043H
  00a17	3a		 DB	 58			; 0000003aH
  00a18	3b		 DB	 59			; 0000003bH
  00a19	3c		 DB	 60			; 0000003cH
  00a1a	3a		 DB	 58			; 0000003aH
  00a1b	43		 DB	 67			; 00000043H
  00a1c	43		 DB	 67			; 00000043H
  00a1d	43		 DB	 67			; 00000043H
  00a1e	43		 DB	 67			; 00000043H
  00a1f	43		 DB	 67			; 00000043H
  00a20	43		 DB	 67			; 00000043H
  00a21	43		 DB	 67			; 00000043H
  00a22	43		 DB	 67			; 00000043H
  00a23	43		 DB	 67			; 00000043H
  00a24	43		 DB	 67			; 00000043H
  00a25	43		 DB	 67			; 00000043H
  00a26	43		 DB	 67			; 00000043H
  00a27	43		 DB	 67			; 00000043H
  00a28	43		 DB	 67			; 00000043H
  00a29	43		 DB	 67			; 00000043H
  00a2a	43		 DB	 67			; 00000043H
  00a2b	43		 DB	 67			; 00000043H
  00a2c	43		 DB	 67			; 00000043H
  00a2d	43		 DB	 67			; 00000043H
  00a2e	43		 DB	 67			; 00000043H
  00a2f	43		 DB	 67			; 00000043H
  00a30	43		 DB	 67			; 00000043H
  00a31	43		 DB	 67			; 00000043H
  00a32	43		 DB	 67			; 00000043H
  00a33	43		 DB	 67			; 00000043H
  00a34	43		 DB	 67			; 00000043H
  00a35	3d		 DB	 61			; 0000003dH
  00a36	3d		 DB	 61			; 0000003dH
  00a37	43		 DB	 67			; 00000043H
  00a38	3e		 DB	 62			; 0000003eH
  00a39	3e		 DB	 62			; 0000003eH
  00a3a	43		 DB	 67			; 00000043H
  00a3b	43		 DB	 67			; 00000043H
  00a3c	3d		 DB	 61			; 0000003dH
  00a3d	3f		 DB	 63			; 0000003fH
  00a3e	40		 DB	 64			; 00000040H
  00a3f	43		 DB	 67			; 00000043H
  00a40	43		 DB	 67			; 00000043H
  00a41	43		 DB	 67			; 00000043H
  00a42	43		 DB	 67			; 00000043H
  00a43	43		 DB	 67			; 00000043H
  00a44	43		 DB	 67			; 00000043H
  00a45	43		 DB	 67			; 00000043H
  00a46	43		 DB	 67			; 00000043H
  00a47	41		 DB	 65			; 00000041H
  00a48	43		 DB	 67			; 00000043H
  00a49	43		 DB	 67			; 00000043H
  00a4a	42		 DB	 66			; 00000042H
  00a4b	41		 DB	 65			; 00000041H
?RunningSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z ENDP ; CMasterLevelSkillTreeSystem::RunningSkill
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MasterSkillSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_MasterSkillSystem@@YAXXZ PROC			; `dynamic initializer for 'g_MasterSkillSystem'', COMDAT

; 37   : CMasterLevelSkillTreeSystem g_MasterSkillSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00005	e8 00 00 00 00	 call	 ??0CMasterLevelSkillTreeSystem@@QAE@XZ ; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MasterSkillSystem@@YAXXZ ; `dynamic atexit destructor for 'g_MasterSkillSystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MasterSkillSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_MasterSkillSystem''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MasterSkillSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_MasterSkillSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MasterSkillSystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00005	e9 00 00 00 00	 jmp	 ??1CMasterLevelSkillTreeSystem@@UAE@XZ ; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
??__Fg_MasterSkillSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MasterSkillSystem''
text$yd	ENDS
PUBLIC	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
_BSS	SEGMENT
?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A DB 055ccH DUP (?) ; g_MasterSkillSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MasterSkillSystem$initializer$ DD FLAT:??__Eg_MasterSkillSystem@@YAXXZ
CRT$XCU	ENDS
END
