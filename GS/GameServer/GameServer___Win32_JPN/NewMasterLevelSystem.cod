; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\NewMasterLevelSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bIsSpeedServer@@3HA				; g_bIsSpeedServer
PUBLIC	?g_MLBattleZoneAddExp@@3HA			; g_MLBattleZoneAddExp
_BSS	SEGMENT
?g_bIsSpeedServer@@3HA DD 01H DUP (?)			; g_bIsSpeedServer
?g_MLBattleZoneAddExp@@3HA DD 01H DUP (?)		; g_MLBattleZoneAddExp
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD@@QAEXPAEEE@Z			; PBMSG_HEAD::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD@@QAEXPAEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 1
?set@PBMSG_HEAD@@QAEXPAEEE@Z PROC			; PBMSG_HEAD::set, COMDAT
; _this$ = ecx

; 80   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 82   : 		lpBuf[1] = size;

  00006	8a 4d 10	 mov	 cl, BYTE PTR _size$[ebp]

; 83   : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  0000f	88 48 01	 mov	 BYTE PTR [eax+1], cl
  00012	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 84   : 	};	// line : 22

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?set@PBMSG_HEAD@@QAEXPAEEE@Z ENDP			; PBMSG_HEAD::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CMasterLevelSystem@@6B@			; CMasterLevelSystem::`vftable'
PUBLIC	??0CMasterLevelSystem@@QAE@XZ			; CMasterLevelSystem::CMasterLevelSystem
PUBLIC	??_R4CMasterLevelSystem@@6B@			; CMasterLevelSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMasterLevelSystem@@@8			; CMasterLevelSystem `RTTI Type Descriptor'
PUBLIC	??_R3CMasterLevelSystem@@8			; CMasterLevelSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMasterLevelSystem@@8			; CMasterLevelSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMasterLevelSystem@@8		; CMasterLevelSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMasterLevelSystem@@UAEPAXI@Z:PROC		; CMasterLevelSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMasterLevelSystem@@8
; File e:\work\tranet_version\gs\gameserver\newmasterlevelsystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMasterLevelSystem@@8 DD FLAT:??_R0?AVCMasterLevelSystem@@@8 ; CMasterLevelSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMasterLevelSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CMasterLevelSystem@@8
rdata$r	SEGMENT
??_R2CMasterLevelSystem@@8 DD FLAT:??_R1A@?0A@EA@CMasterLevelSystem@@8 ; CMasterLevelSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMasterLevelSystem@@8
rdata$r	SEGMENT
??_R3CMasterLevelSystem@@8 DD 00H			; CMasterLevelSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMasterLevelSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMasterLevelSystem@@@8
_DATA	SEGMENT
??_R0?AVCMasterLevelSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CMasterLevelSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMasterLevelSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMasterLevelSystem@@6B@
rdata$r	SEGMENT
??_R4CMasterLevelSystem@@6B@ DD 00H			; CMasterLevelSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMasterLevelSystem@@@8
	DD	FLAT:??_R3CMasterLevelSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CMasterLevelSystem@@6B@
CONST	SEGMENT
??_7CMasterLevelSystem@@6B@ DD FLAT:??_R4CMasterLevelSystem@@6B@ ; CMasterLevelSystem::`vftable'
	DD	FLAT:??_ECMasterLevelSystem@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMasterLevelSystem@@QAE@XZ
_TEXT	SEGMENT
??0CMasterLevelSystem@@QAE@XZ PROC			; CMasterLevelSystem::CMasterLevelSystem, COMDAT
; _this$ = ecx

; 28   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMasterLevelSystem@@6B@

; 29   : 	// ----
; 30   : }

  00008	c3		 ret	 0
??0CMasterLevelSystem@@QAE@XZ ENDP			; CMasterLevelSystem::CMasterLevelSystem
_TEXT	ENDS
PUBLIC	??1CMasterLevelSystem@@UAE@XZ			; CMasterLevelSystem::~CMasterLevelSystem
; Function compile flags: /Ogtp
;	COMDAT ??1CMasterLevelSystem@@UAE@XZ
_TEXT	SEGMENT
??1CMasterLevelSystem@@UAE@XZ PROC			; CMasterLevelSystem::~CMasterLevelSystem, COMDAT
; _this$ = ecx

; 35   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMasterLevelSystem@@6B@

; 36   : 	// ----
; 37   : }

  00006	c3		 ret	 0
??1CMasterLevelSystem@@UAE@XZ ENDP			; CMasterLevelSystem::~CMasterLevelSystem
_TEXT	ENDS
PUBLIC	??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z	; CMasterLevelSystem::ReadMonsterList
EXTRN	_fclose:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@
CONST	SEGMENT
??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@ DB '['
	DB	'MasterSystem] [%d] Monsters loaded from list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z PROC	; CMasterLevelSystem::ReadMonsterList, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 75   : 	ZeroMemory(this->m_MonsterList, sizeof(this->m_MonsterList));

  00006	68 20 03 00 00	 push	 800			; 00000320H
  0000b	8d b1 6c 06 00
	00		 lea	 esi, DWORD PTR [ecx+1644]
  00011	6a 00		 push	 0
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _memset

; 76   : 	int Token;
; 77   : 	int	LoadedCount = 0;
; 78   : 	// ----
; 79   : 	SMDFile = fopen(File, "r");

  00019	8b 5d 08	 mov	 ebx, DWORD PTR _File$[ebp]
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00021	53		 push	 ebx
  00022	33 ff		 xor	 edi, edi
  00024	e8 00 00 00 00	 call	 _fopen
  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 80   : 	// ----
; 81   : 	if( SMDFile == 0 )

  00031	85 c0		 test	 eax, eax
  00033	75 1d		 jne	 SHORT $LN9@ReadMonste

; 82   : 	{
; 83   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), File);

  00035	53		 push	 ebx
  00036	6a 70		 push	 112			; 00000070H
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00048	83 c4 08	 add	 esp, 8
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 104  : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
$LN9@ReadMonste:

; 84   : 		return;
; 85   : 	}
; 86   : 	// ----
; 87   : 	while(true) 
; 88   : 	{
; 89   : 		Token = GetToken();

  00052	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 		// ----
; 91   : 		if( Token == END )

  00057	83 f8 02	 cmp	 eax, 2
  0005a	74 1f		 je	 SHORT $LN10@ReadMonste
  0005c	8d 64 24 00	 npad	 4
$LL4@ReadMonste:

; 92   : 		{
; 93   : 			break;
; 94   : 		}
; 95   : 		else
; 96   : 		{
; 97   : 			this->m_MonsterList[LoadedCount] = TokenNumber;

  00060	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00066	e8 00 00 00 00	 call	 __ftol2_sse
  0006b	89 06		 mov	 DWORD PTR [esi], eax

; 98   : 			LoadedCount++;

  0006d	47		 inc	 edi
  0006e	83 c6 04	 add	 esi, 4
  00071	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00076	83 f8 02	 cmp	 eax, 2
  00079	75 e5		 jne	 SHORT $LL4@ReadMonste
$LN10@ReadMonste:

; 99   : 		}
; 100  : 	}
; 101  : 	// ----
; 102  : 	LogAddTD("[MasterSystem] [%d] Monsters loaded from list", LoadedCount);

  0007b	57		 push	 edi
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 103  : 	fclose(SMDFile);

  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _fclose
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 104  : }

  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z ENDP	; CMasterLevelSystem::ReadMonsterList
_TEXT	ENDS
PUBLIC	??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@ ; `string'
PUBLIC	?SetExperienceTable@CMasterLevelSystem@@QAEXXZ	; CMasterLevelSystem::SetExperienceTable
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@
CONST	SEGMENT
??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@ DB 'Master leve'
	DB	'l system exp table setting is complete', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetExperienceTable@CMasterLevelSystem@@QAEXXZ
_TEXT	SEGMENT
_nTotalLevel$ = -16					; size = 8
tv208 = -8						; size = 4
_iLevel$212854 = -4					; size = 4
?SetExperienceTable@CMasterLevelSystem@@QAEXXZ PROC	; CMasterLevelSystem::SetExperienceTable, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 110  : 	this->MLExpTlb[0] = 0;

  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0000c	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0000f	83 c1 20	 add	 ecx, 32			; 00000020H
  00012	56		 push	 esi

; 111  : 	__int64 nTotalLevel				= 0;
; 112  : 	__int64 nTotalLevel_Over		= 0;
; 113  : 	__int64 i64Exp					= 0;
; 114  : 	// ----
; 115  : 	for( int iLevel = 1; iLevel < MAX_MASTER_LEVEL + 1; iLevel++ )

  00013	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _iLevel$212854[ebp], 1
  0001a	89 4d f8	 mov	 DWORD PTR tv208[ebp], ecx
  0001d	57		 push	 edi
  0001e	8b ff		 npad	 2
$LL8@SetExperie:

; 116  : 	{
; 117  : 		#if(ENABLE_CHARLVL1000)
; 118  : 
; 119  : 		nTotalLevel			= iLevel + ZtConfig.ZtCustom.MaxLevel;

  00020	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+36
  00025	03 45 fc	 add	 eax, DWORD PTR _iLevel$212854[ebp]
  00028	99		 cdq
  00029	8b d8		 mov	 ebx, eax

; 120  : 
; 121  : 		#else
; 122  : 
; 123  : 		nTotalLevel			= iLevel + MAX_CHAR_LEVEL;
; 124  : 
; 125  : 		#endif
; 126  : 		
; 127  : 		i64Exp				= (nTotalLevel + 9) * nTotalLevel * nTotalLevel * 10;
; 128  : 		nTotalLevel_Over	= nTotalLevel - 255;

  0002b	8b fa		 mov	 edi, edx
  0002d	8b f3		 mov	 esi, ebx
  0002f	81 ee ff 00 00
	00		 sub	 esi, 255		; 000000ffH
  00035	83 df 00	 sbb	 edi, 0
  00038	89 55 f4	 mov	 DWORD PTR _nTotalLevel$[ebp+4], edx

; 129  : 		i64Exp				+= (nTotalLevel_Over + 9) * nTotalLevel_Over * nTotalLevel_Over * 1000;
; 130  : 		i64Exp				= (i64Exp - 3892250000) / 2;
; 131  : 		// ----
; 132  : 		this->MLExpTlb[iLevel] = i64Exp;

  0003b	57		 push	 edi
  0003c	8b d6		 mov	 edx, esi
  0003e	83 c2 09	 add	 edx, 9
  00041	8b c7		 mov	 eax, edi
  00043	56		 push	 esi
  00044	83 d0 00	 adc	 eax, 0
  00047	50		 push	 eax
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 __allmul
  0004e	57		 push	 edi
  0004f	56		 push	 esi
  00050	52		 push	 edx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 __allmul
  00057	6a 00		 push	 0
  00059	2d 1a 64 3b 00	 sub	 eax, 3892250		; 003b641aH
  0005e	6a 64		 push	 100			; 00000064H
  00060	83 da 00	 sbb	 edx, 0
  00063	52		 push	 edx
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 __allmul
  0006a	8b f0		 mov	 esi, eax
  0006c	8b 45 f4	 mov	 eax, DWORD PTR _nTotalLevel$[ebp+4]
  0006f	8b fa		 mov	 edi, edx
  00071	50		 push	 eax
  00072	8b cb		 mov	 ecx, ebx
  00074	83 c1 09	 add	 ecx, 9
  00077	8b d0		 mov	 edx, eax
  00079	53		 push	 ebx
  0007a	83 d2 00	 adc	 edx, 0
  0007d	52		 push	 edx
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 __allmul
  00084	8b 4d f4	 mov	 ecx, DWORD PTR _nTotalLevel$[ebp+4]
  00087	51		 push	 ecx
  00088	53		 push	 ebx
  00089	52		 push	 edx
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 __allmul
  00090	03 f0		 add	 esi, eax
  00092	13 fa		 adc	 edi, edx
  00094	8b d6		 mov	 edx, esi
  00096	8b c7		 mov	 eax, edi
  00098	0f a4 f7 02	 shld	 edi, esi, 2
  0009c	03 f6		 add	 esi, esi
  0009e	03 f6		 add	 esi, esi
  000a0	03 d6		 add	 edx, esi
  000a2	13 c7		 adc	 eax, edi
  000a4	0f a4 d0 01	 shld	 eax, edx, 1
  000a8	6a 00		 push	 0
  000aa	6a 02		 push	 2
  000ac	03 d2		 add	 edx, edx
  000ae	50		 push	 eax
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 __alldiv
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR tv208[ebp]
  000b8	89 01		 mov	 DWORD PTR [ecx], eax
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _iLevel$212854[ebp]
  000bd	40		 inc	 eax
  000be	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000c1	83 c1 08	 add	 ecx, 8
  000c4	89 45 fc	 mov	 DWORD PTR _iLevel$212854[ebp], eax
  000c7	89 4d f8	 mov	 DWORD PTR tv208[ebp], ecx
  000ca	3d c9 00 00 00	 cmp	 eax, 201		; 000000c9H
  000cf	0f 8c 4b ff ff
	ff		 jl	 $LL8@SetExperie

; 133  : 	}
; 134  : 	// ----
; 135  : 	LogAddTD("Master level system exp table setting is complete");

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e0	83 c4 04	 add	 esp, 4
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx

; 136  : }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?SetExperienceTable@CMasterLevelSystem@@QAEXXZ ENDP	; CMasterLevelSystem::SetExperienceTable
_TEXT	ENDS
PUBLIC	?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::gObjNextMLExpCal
; Function compile flags: /Ogtp
;	COMDAT ?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::gObjNextMLExpCal, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  : 	int nNextML						= lpObj->MLevel + 1;
; 143  : 	lpObj->MLNextExp	= this->MLExpTlb[nNextML];

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	0f bf 90 d0 00
	00 00		 movsx	 edx, WORD PTR [eax+208]
  0000d	56		 push	 esi
  0000e	8b 74 d1 20	 mov	 esi, DWORD PTR [ecx+edx*8+32]
  00012	89 b0 e0 00 00
	00		 mov	 DWORD PTR [eax+224], esi
  00018	8b 4c d1 24	 mov	 ecx, DWORD PTR [ecx+edx*8+36]
  0001c	89 88 e4 00 00
	00		 mov	 DWORD PTR [eax+228], ecx
  00022	5e		 pop	 esi

; 144  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::gObjNextMLExpCal
_TEXT	ENDS
PUBLIC	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
; Function compile flags: /Ogtp
;	COMDAT ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 	if( lpObj == NULL )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	85 c0		 test	 eax, eax

; 284  : 	{
; 285  : 		return false;

  00008	74 2a		 je	 SHORT $LN1@CheckIsMas

; 286  : 	}
; 287  : 	// ----
; 288  : 	if( !lpObj->MLInfoLoad )

  0000a	83 b8 ec 00 00
	00 00		 cmp	 DWORD PTR [eax+236], 0

; 289  : 	{
; 290  : 		return false;

  00011	74 21		 je	 SHORT $LN1@CheckIsMas

; 291  : 	}
; 292  : 	// ----
; 293  : 
; 294  : #if(ENABLE_CHARLVL1000)
; 295  : 
; 296  : 	if( lpObj->Level >= ZtConfig.ZtCustom.MaxLevel && lpObj->ChangeUP3rd == 1 )

  00013	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0001a	3b 0d 24 00 00
	00		 cmp	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+36
  00020	7c 12		 jl	 SHORT $LN1@CheckIsMas
  00022	80 b8 bc 00 00
	00 01		 cmp	 BYTE PTR [eax+188], 1
  00029	75 09		 jne	 SHORT $LN1@CheckIsMas

; 297  : 	{
; 298  : 		return true;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 312  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN1@CheckIsMas:

; 299  : 	}
; 300  : 
; 301  : #else
; 302  : 
; 303  : 	if( lpObj->Level >= MAX_CHAR_LEVEL && lpObj->ChangeUP3rd == 1 )
; 304  : 	{
; 305  : 		return true;
; 306  : 	}
; 307  : 
; 308  : #endif
; 309  : 
; 310  : 	// ----
; 311  : 	return false;

  00034	33 c0		 xor	 eax, eax

; 312  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::CheckIsMasterLevelCharacter
_TEXT	ENDS
PUBLIC	?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z ; CMasterLevelSystem::CheckMinMonsterLevel
; Function compile flags: /Ogtp
;	COMDAT ?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z PROC ; CMasterLevelSystem::CheckMinMonsterLevel, COMDAT
; _this$ = ecx

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 318  : 
; 319  : 	//if(this->CheckIsMasterLevelCharacter(lpObj) != FALSE)
; 320  : 	//{
; 321  : 	//	if(lpTargetObj->Level < this->m_iMinMonsterKillLevel)
; 322  : 	//	{
; 323  : 	//		return 0;
; 324  : 	//	}
; 325  : 	//}
; 326  : 	//return 1;
; 327  : 
; 328  : 	if(this->CheckIsMasterLevelCharacter(lpObj) != FALSE)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	8b d1		 mov	 edx, ecx
  0000a	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  0000f	85 c0		 test	 eax, eax
  00011	74 65		 je	 SHORT $LN1@CheckMinMo

; 329  : 	{
; 330  : 		if(this->m_CharacterLevel > lpObj->Level)

  00013	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  0001a	39 42 08	 cmp	 DWORD PTR [edx+8], eax

; 331  : 		{
; 332  : 			return false;

  0001d	7f 40		 jg	 SHORT $LN17@CheckMinMo

; 333  : 		}
; 334  : 
; 335  : 		if(this->m_CharacterReset > lpObj->Reset)

  0001f	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00022	3b 8e 90 22 00
	00		 cmp	 ecx, DWORD PTR [esi+8848]

; 336  : 		{
; 337  : 			return false;

  00028	7f 35		 jg	 SHORT $LN17@CheckMinMo

; 338  : 		}
; 339  : 
; 340  : 		if(this->m_CharacterGrand > lpObj->GReset)

  0002a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0002d	3b 86 94 22 00
	00		 cmp	 eax, DWORD PTR [esi+8852]

; 341  : 		{
; 342  : 			return false;

  00033	7f 2a		 jg	 SHORT $LN17@CheckMinMo

; 343  : 		}
; 344  : 
; 345  : 		if(this->m_UseMonsterList)

  00035	80 ba 68 06 00
	00 00		 cmp	 BYTE PTR [edx+1640], 0
  0003c	74 28		 je	 SHORT $LN7@CheckMinMo

; 346  : 		{
; 347  : 			for(int i = 0; i < MASTER_MAX_LIST; i++)

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00041	0f b7 b1 b8 00
	00 00		 movzx	 esi, WORD PTR [ecx+184]
  00048	33 c0		 xor	 eax, eax
  0004a	8d 8a 6c 06 00
	00		 lea	 ecx, DWORD PTR [edx+1644]
$LL6@CheckMinMo:

; 348  : 			{
; 349  : 				if(this->m_MonsterList[i] == lpTargetObj->Class)

  00050	39 31		 cmp	 DWORD PTR [ecx], esi
  00052	74 24		 je	 SHORT $LN1@CheckMinMo

; 346  : 		{
; 347  : 			for(int i = 0; i < MASTER_MAX_LIST; i++)

  00054	40		 inc	 eax
  00055	83 c1 04	 add	 ecx, 4
  00058	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  0005d	7c f1		 jl	 SHORT $LL6@CheckMinMo
$LN17@CheckMinMo:

; 350  : 				{
; 351  : 					return true;
; 352  : 				}
; 353  : 			}
; 354  : 
; 355  : 			return false;

  0005f	33 c0		 xor	 eax, eax
  00061	5e		 pop	 esi

; 368  : }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN7@CheckMinMo:

; 356  : 		}
; 357  : 		else
; 358  : 		{
; 359  : 			if(lpTargetObj->Level < this->m_iMinMonsterKillLevel)

  00066	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00069	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00070	3b 8a 60 06 00
	00		 cmp	 ecx, DWORD PTR [edx+1632]

; 360  : 			{
; 361  : 				return false;

  00076	7c e7		 jl	 SHORT $LN17@CheckMinMo
$LN1@CheckMinMo:

; 362  : 			}
; 363  : 		}
; 364  : 
; 365  : 	}
; 366  : 
; 367  : 	return true;

  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	5e		 pop	 esi

; 368  : }

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP ; CMasterLevelSystem::CheckMinMonsterLevel
_TEXT	ENDS
PUBLIC	?GetLevelExperienceTable@CMasterLevelSystem@@QAE_JH@Z ; CMasterLevelSystem::GetLevelExperienceTable
; Function compile flags: /Ogtp
;	COMDAT ?GetLevelExperienceTable@CMasterLevelSystem@@QAE_JH@Z
_TEXT	SEGMENT
_iMasterLevel$ = 8					; size = 4
?GetLevelExperienceTable@CMasterLevelSystem@@QAE_JH@Z PROC ; CMasterLevelSystem::GetLevelExperienceTable, COMDAT
; _this$ = ecx

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 374  : 	return MLExpTlb[iMasterLevel];

  00003	8b 55 08	 mov	 edx, DWORD PTR _iMasterLevel$[ebp]
  00006	8b 44 d1 18	 mov	 eax, DWORD PTR [ecx+edx*8+24]
  0000a	8b 54 d1 1c	 mov	 edx, DWORD PTR [ecx+edx*8+28]

; 375  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetLevelExperienceTable@CMasterLevelSystem@@QAE_JH@Z ENDP ; CMasterLevelSystem::GetLevelExperienceTable
_TEXT	ENDS
PUBLIC	?CheckMasterLevelCharacterPkLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckMasterLevelCharacterPkLevel
; Function compile flags: /Ogtp
;	COMDAT ?CheckMasterLevelCharacterPkLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckMasterLevelCharacterPkLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::CheckMasterLevelCharacterPkLevel, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 	if( !this->CheckIsMasterLevelCharacter(lpObj) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00006	52		 push	 edx
  00007	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  0000c	85 c0		 test	 eax, eax
  0000e	75 07		 jne	 SHORT $LN8@CheckMaste

; 382  : 	{
; 383  : 		return -1;

  00010	83 c8 ff	 or	 eax, -1

; 403  : 	}
; 404  : 	// ----
; 405  : 	return iRetValue;
; 406  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN8@CheckMaste:

; 384  : 	}
; 385  : 	// ----
; 386  : 	int iRetValue = 0;
; 387  : 	// ----
; 388  : 	if( lpObj->m_PK_Level <= 3 )

  00017	8a 8a 3d 01 00
	00		 mov	 cl, BYTE PTR [edx+317]
  0001d	33 c0		 xor	 eax, eax
  0001f	80 f9 03	 cmp	 cl, 3
  00022	7f 09		 jg	 SHORT $LN7@CheckMaste

; 389  : 	{
; 390  : 		iRetValue = 7;

  00024	b8 07 00 00 00	 mov	 eax, 7

; 403  : 	}
; 404  : 	// ----
; 405  : 	return iRetValue;
; 406  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN7@CheckMaste:

; 391  : 	}
; 392  : 	else if( lpObj->m_PK_Level == 4 )

  0002d	80 f9 04	 cmp	 cl, 4
  00030	75 09		 jne	 SHORT $LN5@CheckMaste

; 393  : 	{
; 394  : 		iRetValue = 20;

  00032	b8 14 00 00 00	 mov	 eax, 20			; 00000014H

; 403  : 	}
; 404  : 	// ----
; 405  : 	return iRetValue;
; 406  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN5@CheckMaste:

; 395  : 	}
; 396  : 	else if( lpObj->m_PK_Level == 5 )

  0003b	80 f9 05	 cmp	 cl, 5
  0003e	75 09		 jne	 SHORT $LN3@CheckMaste

; 397  : 	{
; 398  : 		iRetValue = 30;

  00040	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH

; 403  : 	}
; 404  : 	// ----
; 405  : 	return iRetValue;
; 406  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN3@CheckMaste:

; 399  : 	}
; 400  : 	else if( lpObj->m_PK_Level >= 6 )

  00049	80 f9 06	 cmp	 cl, 6
  0004c	7c 05		 jl	 SHORT $LN9@CheckMaste

; 401  : 	{
; 402  : 		iRetValue = 40;

  0004e	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
$LN9@CheckMaste:

; 403  : 	}
; 404  : 	// ----
; 405  : 	return iRetValue;
; 406  : }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?CheckMasterLevelCharacterPkLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::CheckMasterLevelCharacterPkLevel
_TEXT	ENDS
PUBLIC	?CheckMasterLevelCharacterMoneyLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckMasterLevelCharacterMoneyLevel
; Function compile flags: /Ogtp
;	COMDAT ?CheckMasterLevelCharacterMoneyLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckMasterLevelCharacterMoneyLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::CheckMasterLevelCharacterMoneyLevel, COMDAT
; _this$ = ecx

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 	if( !this->CheckIsMasterLevelCharacter(lpObj) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	83 e0 05	 and	 eax, 5
  00013	48		 dec	 eax

; 413  : 	{
; 414  : 		return -1;
; 415  : 	}
; 416  : 	// ----
; 417  : 	return MASTER_ZEN_DEC;
; 418  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?CheckMasterLevelCharacterMoneyLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::CheckMasterLevelCharacterMoneyLevel
_TEXT	ENDS
PUBLIC	??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDReqMasterLevelInfo
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
;	COMDAT ??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@
; File e:\work\tranet_version\gs\include\prodef.h
CONST	SEGMENT
??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@ DB '['
	DB	'%s][%s] Request master level info to DB', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newmasterlevelsystem.cpp
CONST	ENDS
;	COMDAT ?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GDReqMasterLevelInfo, COMDAT
; _this$ = ecx

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 424  : 	if( lpObj->MLInfoLoad )

  00014	83 bf ec 00 00
	00 00		 cmp	 DWORD PTR [edi+236], 0
  0001b	75 4f		 jne	 SHORT $LN2@GDReqMaste

; 425  : 	{
; 426  : 		return;
; 427  : 	}
; 428  : 	// ----
; 429  : 	MLP_REQ_MASTERLEVEL_INFO pMsg;
; 430  : 	pMsg.h.set((LPBYTE)&pMsg, 0x30, sizeof(MLP_REQ_MASTERLEVEL_INFO));
; 431  : 	// ----
; 432  : 	pMsg.iUserIndex = lpObj->m_Index;
; 433  :     memcpy(pMsg.szCharName, lpObj->Name, MAX_IDSTRING);

  0001d	8b 4f 77	 mov	 ecx, DWORD PTR [edi+119]
  00020	8b 07		 mov	 eax, DWORD PTR [edi]
  00022	8b 57 7b	 mov	 edx, DWORD PTR [edi+123]
  00025	56		 push	 esi
  00026	8d 77 77	 lea	 esi, DWORD PTR [edi+119]
  00029	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 434  :     pMsg.szCharName[MAX_IDSTRING] = 0;
; 435  : 	// ----
; 436  :     cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0002c	6a 14		 push	 20			; 00000014H
  0002e	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00031	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  00034	66 8b 46 08	 mov	 ax, WORD PTR [esi+8]
  00038	51		 push	 ecx
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0003e	66 c7 45 e8 c1
	14		 mov	 WORD PTR _pMsg$[ebp], 5313 ; 000014c1H
  00044	c6 45 ea 30	 mov	 BYTE PTR _pMsg$[ebp+2], 48 ; 00000030H
  00048	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  0004b	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0004f	c6 45 fa 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0
  00053	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 437  : 	// ----
; 438  :     LogAddTD("[%s][%s] Request master level info to DB", lpObj->AccountID, lpObj->Name);

  00058	56		 push	 esi
  00059	83 c7 6c	 add	 edi, 108		; 0000006cH
  0005c	57		 push	 edi
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	5e		 pop	 esi
$LN2@GDReqMaste:

; 439  : }

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	33 cd		 xor	 ecx, ebp
  00071	5f		 pop	 edi
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GDReqMasterLevelInfo
_TEXT	ENDS
PUBLIC	??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDRequestMasterLevelInfoSave
EXTRN	__allshr:PROC
;	COMDAT ??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@
; File e:\work\tranet_version\gs\include\prodef.h
CONST	SEGMENT
??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@ DB '['
	DB	'%s][%s] MasterLevel Info Save [MLevel:%d][MLExp:%I64d][MLNext'
	DB	'Exp:%I64d][MLPoint:%d]', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\newmasterlevelsystem.cpp
CONST	ENDS
;	COMDAT ?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GDRequestMasterLevelInfoSave, COMDAT
; _this$ = ecx

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 548  : 	if( !lpObj->MLInfoLoad )

  00014	83 be ec 00 00
	00 00		 cmp	 DWORD PTR [esi+236], 0
  0001b	0f 84 c9 00 00
	00		 je	 $LN2@GDRequestM

; 549  : 	{
; 550  : 		return;
; 551  : 	}
; 552  : 	// ----
; 553  : 	MLP_REQ_MASTERLEVEL_INFOSAVE pMsg;
; 554  : 	pMsg.h.set((LPBYTE)&pMsg, 0x31, sizeof(MLP_REQ_MASTERLEVEL_INFOSAVE));
; 555  : 	// ----
; 556  : 	memcpy(pMsg.szCharName, lpObj->Name, MAX_IDSTRING);

  00021	8b 46 77	 mov	 eax, DWORD PTR [esi+119]
  00024	0f b7 56 7f	 movzx	 edx, WORD PTR [esi+127]
  00028	8b 4e 7b	 mov	 ecx, DWORD PTR [esi+123]
  0002b	57		 push	 edi
  0002c	8d 7e 77	 lea	 edi, DWORD PTR [esi+119]
  0002f	89 45 d7	 mov	 DWORD PTR _pMsg$[ebp+3], eax

; 557  : 	pMsg.szCharName[MAX_IDSTRING] = 0;
; 558  : 	pMsg.nMLevel		= lpObj->MLevel;

  00032	66 8b 86 d0 00
	00 00		 mov	 ax, WORD PTR [esi+208]
  00039	89 4d db	 mov	 DWORD PTR _pMsg$[ebp+7], ecx

; 559  : 	pMsg.i64MLExp		= lpObj->MLExp;

  0003c	8b 8e d8 00 00
	00		 mov	 ecx, DWORD PTR [esi+216]
  00042	66 89 55 df	 mov	 WORD PTR _pMsg$[ebp+11], dx
  00046	8b 96 dc 00 00
	00		 mov	 edx, DWORD PTR [esi+220]
  0004c	66 89 45 e2	 mov	 WORD PTR _pMsg$[ebp+14], ax

; 560  : 	pMsg.i64NextMLExp	= lpObj->MLNextExp;

  00050	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  00056	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+16], ecx
  00059	8b 8e e4 00 00
	00		 mov	 ecx, DWORD PTR [esi+228]
  0005f	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 561  : 	pMsg.nMLPoint		= LOWORD(lpObj->MLPoint);

  00062	0f b7 96 e8 00
	00 00		 movzx	 edx, WORD PTR [esi+232]
  00069	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+24], eax

; 562  : 	// ----
; 563  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0006c	6a 28		 push	 40			; 00000028H
  0006e	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00071	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+28], ecx
  00074	50		 push	 eax
  00075	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0007a	66 c7 45 d4 c1
	28		 mov	 WORD PTR _pMsg$[ebp], 10433 ; 000028c1H
  00080	c6 45 d6 31	 mov	 BYTE PTR _pMsg$[ebp+2], 49 ; 00000031H
  00084	c6 45 e1 00	 mov	 BYTE PTR _pMsg$[ebp+13], 0
  00088	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+32], dx
  0008c	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 564  : 	// ----
; 565  : 	LogAddTD("[%s][%s] MasterLevel Info Save [MLevel:%d][MLExp:%I64d][MLNextExp:%I64d][MLPoint:%d]",
; 566  : 		lpObj->AccountID, lpObj->Name, lpObj->MLevel, 
; 567  : 		LODWORD(lpObj->MLExp), HIDWORD(lpObj->MLExp), 
; 568  : 		LODWORD(lpObj->MLNextExp), HIDWORD(lpObj->MLNextExp),
; 569  : 		lpObj->MLPoint);

  00091	8b 8e e8 00 00
	00		 mov	 ecx, DWORD PTR [esi+232]
  00097	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0009d	8b 96 e4 00 00
	00		 mov	 edx, DWORD PTR [esi+228]
  000a3	51		 push	 ecx
  000a4	b1 20		 mov	 cl, 32			; 00000020H
  000a6	e8 00 00 00 00	 call	 __allshr
  000ab	8b 96 e0 00 00
	00		 mov	 edx, DWORD PTR [esi+224]
  000b1	50		 push	 eax
  000b2	8b 86 d8 00 00
	00		 mov	 eax, DWORD PTR [esi+216]
  000b8	52		 push	 edx
  000b9	8b 96 dc 00 00
	00		 mov	 edx, DWORD PTR [esi+220]
  000bf	b1 20		 mov	 cl, 32			; 00000020H
  000c1	e8 00 00 00 00	 call	 __allshr
  000c6	0f bf 8e d0 00
	00 00		 movsx	 ecx, WORD PTR [esi+208]
  000cd	50		 push	 eax
  000ce	8b 86 d8 00 00
	00		 mov	 eax, DWORD PTR [esi+216]
  000d4	50		 push	 eax
  000d5	51		 push	 ecx
  000d6	57		 push	 edi
  000d7	83 c6 6c	 add	 esi, 108		; 0000006cH
  000da	56		 push	 esi
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e6	83 c4 24	 add	 esp, 36			; 00000024H
  000e9	5f		 pop	 edi
$LN2@GDRequestM:

; 570  : }

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	5e		 pop	 esi
  000f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GDRequestMasterLevelInfoSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCSendMasterLevelWindowStatus
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
; Function compile flags: /Ogtp
;	COMDAT ?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv465 = -44						; size = 4
tv463 = -44						; size = 4
tv457 = -44						; size = 4
tv373 = -44						; size = 4
tv468 = -38						; size = 2
tv461 = -38						; size = 2
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GCSendMasterLevelWindowStatus, COMDAT
; _this$ = ecx

; 575  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 576  : 	if( !lpObj->MLInfoLoad )

  00014	83 be ec 00 00
	00 00		 cmp	 DWORD PTR [esi+236], 0
  0001b	75 17		 jne	 SHORT $LN1@GCSendMast

; 577  : 	{
; 578  : 		this->GDReqMasterLevelInfo(lpObj);

  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDReqMasterLevelInfo
  00023	5e		 pop	 esi

; 612  : }

  00024	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00027	33 cd		 xor	 ecx, ebp
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN1@GCSendMast:

; 579  : 		return;
; 580  : 	}
; 581  : 	// ----
; 582  : 	PMSG_MASTERLEVEL_INFO pMsg;
; 583  : 	PHeadSubSetB(&pMsg.h.c, 0xF3, 0x50, sizeof(PMSG_MASTERLEVEL_INFO));

  00034	6a 20		 push	 32			; 00000020H
  00036	6a 50		 push	 80			; 00000050H
  00038	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003b	68 f3 00 00 00	 push	 243			; 000000f3H
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 584  : 	// ----
; 585  : 	pMsg.nMLevel		= lpObj->MLevel;// lpObj->MLevel;

  00046	0f b7 8e d0 00
	00 00		 movzx	 ecx, WORD PTR [esi+208]

; 586  : 	// ----
; 587  : 	pMsg.btMLExp1		= SET_NUMBERH(SET_NUMBERHW(HIDWORD(lpObj->MLExp)));

  0004d	8b 86 d8 00 00
	00		 mov	 eax, DWORD PTR [esi+216]
  00053	8b 96 dc 00 00
	00		 mov	 edx, DWORD PTR [esi+220]
  00059	66 89 4d e0	 mov	 WORD PTR _pMsg$[ebp+4], cx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	b1 20		 mov	 cl, 32			; 00000020H
  00062	e8 00 00 00 00	 call	 __allshr
  00067	8b c8		 mov	 ecx, eax
  00069	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0006c	8b d1		 mov	 edx, ecx
  0006e	c1 ea 08	 shr	 edx, 8

; 588  : 	pMsg.btMLExp2		= SET_NUMBERL(SET_NUMBERHW(HIDWORD(lpObj->MLExp)));

  00071	88 4d e3	 mov	 BYTE PTR _pMsg$[ebp+7], cl
  00074	88 55 e2	 mov	 BYTE PTR _pMsg$[ebp+6], dl

; 589  : 	pMsg.btMLExp3		= SET_NUMBERH(SET_NUMBERLW(HIDWORD(lpObj->MLExp)));
; 590  : 	pMsg.btMLExp4		= SET_NUMBERL(SET_NUMBERLW(HIDWORD(lpObj->MLExp)));
; 591  : 	pMsg.btMLExp5		= SET_NUMBERH(SET_NUMBERHW(LODWORD(lpObj->MLExp)));

  00077	0f b6 96 db 00
	00 00		 movzx	 edx, BYTE PTR [esi+219]
  0007e	8b c8		 mov	 ecx, eax
  00080	c1 e9 08	 shr	 ecx, 8
  00083	88 4d e4	 mov	 BYTE PTR _pMsg$[ebp+8], cl

; 592  : 	pMsg.btMLExp6		= SET_NUMBERL(SET_NUMBERHW(LODWORD(lpObj->MLExp)));
; 593  : 	pMsg.btMLExp7		= SET_NUMBERH(SET_NUMBERLW(LODWORD(lpObj->MLExp)));

  00086	0f b6 8e d9 00
	00 00		 movzx	 ecx, BYTE PTR [esi+217]
  0008d	88 45 e5	 mov	 BYTE PTR _pMsg$[ebp+9], al
  00090	0f b6 86 da 00
	00 00		 movzx	 eax, BYTE PTR [esi+218]
  00097	88 55 e6	 mov	 BYTE PTR _pMsg$[ebp+10], dl

; 594  : 	pMsg.btMLExp8		= SET_NUMBERL(SET_NUMBERLW(LODWORD(lpObj->MLExp)));

  0009a	0f b6 96 d8 00
	00 00		 movzx	 edx, BYTE PTR [esi+216]
  000a1	88 45 e7	 mov	 BYTE PTR _pMsg$[ebp+11], al

; 595  : 	// ----
; 596  : 	pMsg.btMLNextExp1	= SET_NUMBERH(SET_NUMBERHW(HIDWORD(lpObj->MLNextExp)));

  000a4	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  000aa	88 4d e8	 mov	 BYTE PTR _pMsg$[ebp+12], cl
  000ad	88 55 e9	 mov	 BYTE PTR _pMsg$[ebp+13], dl
  000b0	8b 96 e4 00 00
	00		 mov	 edx, DWORD PTR [esi+228]
  000b6	b1 20		 mov	 cl, 32			; 00000020H
  000b8	e8 00 00 00 00	 call	 __allshr
  000bd	8b c8		 mov	 ecx, eax

; 597  : 	pMsg.btMLNextExp2	= SET_NUMBERL(SET_NUMBERHW(HIDWORD(lpObj->MLNextExp)));
; 598  : 	pMsg.btMLNextExp3	= SET_NUMBERH(SET_NUMBERLW(HIDWORD(lpObj->MLNextExp)));
; 599  : 	pMsg.btMLNextExp4	= SET_NUMBERL(SET_NUMBERLW(HIDWORD(lpObj->MLNextExp)));
; 600  : 	pMsg.btMLNextExp5	= SET_NUMBERH(SET_NUMBERHW(LODWORD(lpObj->MLNextExp)));
; 601  : 	pMsg.btMLNextExp6	= SET_NUMBERL(SET_NUMBERHW(LODWORD(lpObj->MLNextExp)));
; 602  : 	pMsg.btMLNextExp7	= SET_NUMBERH(SET_NUMBERLW(LODWORD(lpObj->MLNextExp)));
; 603  : 	pMsg.btMLNextExp8	= SET_NUMBERL(SET_NUMBERLW(LODWORD(lpObj->MLNextExp)));
; 604  : 	// ----
; 605  : 	pMsg.nMLPoint		= LOWORD(lpObj->MLPoint);
; 606  : 	pMsg.wMaxLife		= (double)lpObj->AddLife + lpObj->MaxLife;

  000bf	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  000c5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000c8	88 45 ed	 mov	 BYTE PTR _pMsg$[ebp+17], al
  000cb	d9 7d da	 fnstcw	 WORD PTR tv468[ebp]
  000ce	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  000d4	8b d1		 mov	 edx, ecx
  000d6	88 4d eb	 mov	 BYTE PTR _pMsg$[ebp+15], cl
  000d9	8b c8		 mov	 ecx, eax
  000db	0f b6 86 e2 00
	00 00		 movzx	 eax, BYTE PTR [esi+226]
  000e2	88 45 ef	 mov	 BYTE PTR _pMsg$[ebp+19], al
  000e5	0f b7 86 e8 00
	00 00		 movzx	 eax, WORD PTR [esi+232]
  000ec	66 89 45 f2	 mov	 WORD PTR _pMsg$[ebp+22], ax
  000f0	0f b7 45 da	 movzx	 eax, WORD PTR tv468[ebp]
  000f4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000f9	89 45 d4	 mov	 DWORD PTR tv465[ebp], eax
  000fc	c1 e9 08	 shr	 ecx, 8
  000ff	88 4d ec	 mov	 BYTE PTR _pMsg$[ebp+16], cl
  00102	d9 6d d4	 fldcw	 WORD PTR tv465[ebp]
  00105	0f b6 8e e1 00
	00 00		 movzx	 ecx, BYTE PTR [esi+225]
  0010c	88 4d f0	 mov	 BYTE PTR _pMsg$[ebp+20], cl
  0010f	c1 ea 08	 shr	 edx, 8
  00112	db 5d d4	 fistp	 DWORD PTR tv463[ebp]
  00115	88 55 ea	 mov	 BYTE PTR _pMsg$[ebp+14], dl
  00118	0f b7 4d d4	 movzx	 ecx, WORD PTR tv463[ebp]
  0011c	0f b6 96 e3 00
	00 00		 movzx	 edx, BYTE PTR [esi+227]
  00123	d9 6d da	 fldcw	 WORD PTR tv468[ebp]
  00126	88 55 ee	 mov	 BYTE PTR _pMsg$[ebp+18], dl
  00129	0f b6 96 e0 00
	00 00		 movzx	 edx, BYTE PTR [esi+224]
  00130	88 55 f1	 mov	 BYTE PTR _pMsg$[ebp+21], dl
  00133	66 89 4d f4	 mov	 WORD PTR _pMsg$[ebp+24], cx

; 607  : 	pMsg.wMaxMana		= (double)lpObj->AddMana + lpObj->MaxMana;

  00137	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]

; 608  : 	pMsg.wMaxShield		= LOWORD(lpObj->iAddShield) + LOWORD(lpObj->iMaxShield);
; 609  : 	pMsg.wMaxBP			= LOWORD(lpObj->AddBP) + LOWORD(lpObj->MaxBP);

  0013d	0f b7 8e 30 01
	00 00		 movzx	 ecx, WORD PTR [esi+304]
  00144	d9 7d da	 fnstcw	 WORD PTR tv461[ebp]
  00147	0f b7 45 da	 movzx	 eax, WORD PTR tv461[ebp]
  0014b	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00151	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00156	89 45 d4	 mov	 DWORD PTR tv373[ebp], eax
  00159	0f b7 86 5c 01
	00 00		 movzx	 eax, WORD PTR [esi+348]
  00160	d9 6d d4	 fldcw	 WORD PTR tv373[ebp]
  00163	66 03 86 58 01
	00 00		 add	 ax, WORD PTR [esi+344]
  0016a	db 5d d4	 fistp	 DWORD PTR tv457[ebp]
  0016d	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+28], ax
  00171	66 8b 55 d4	 mov	 dx, WORD PTR tv457[ebp]
  00175	66 89 55 f6	 mov	 WORD PTR _pMsg$[ebp+26], dx
  00179	d9 6d da	 fldcw	 WORD PTR tv461[ebp]

; 610  : 	// ----
; 611  : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  0017c	0f b6 55 dd	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00180	66 03 8e 2c 01
	00 00		 add	 cx, WORD PTR [esi+300]
  00187	52		 push	 edx
  00188	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0018b	66 89 4d fa	 mov	 WORD PTR _pMsg$[ebp+30], cx
  0018f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00191	50		 push	 eax
  00192	51		 push	 ecx
  00193	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 612  : }

  00198	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019e	33 cd		 xor	 ecx, ebp
  001a0	5e		 pop	 esi
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c2 04 00	 ret	 4
?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GCSendMasterLevelWindowStatus
_TEXT	ENDS
PUBLIC	??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCMasterLevelUpInfo
EXTRN	?GCSendEffectInfo@@YAXHE@Z:PROC			; GCSendEffectInfo
;	COMDAT ??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@
CONST	SEGMENT
??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@ DB '['
	DB	'%s][%s] Master Level Up :%d, MLPoint:%d/%d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv233 = -32						; size = 4
tv231 = -32						; size = 4
tv226 = -32						; size = 4
tv224 = -32						; size = 4
tv236 = -26						; size = 2
tv229 = -26						; size = 2
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GCMasterLevelUpInfo, COMDAT
; _this$ = ecx

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 618  : 	PMSG_MASTERLEVEL_UP pMsg;
; 619  : 	PHeadSubSetB(&pMsg.h.c, 0xF3, 0x51, 0x20);

  00014	6a 20		 push	 32			; 00000020H
  00016	6a 51		 push	 81			; 00000051H
  00018	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 f3 00 00 00	 push	 243			; 000000f3H
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 620  : 	// ----
; 621  : 	pMsg.nMLevel		= lpObj->MLevel;
; 622  : 	pMsg.nAddMLPoint	= 1;
; 623  : 	pMsg.nMLPoint		= lpObj->MLPoint;
; 624  : 	pMsg.nMaxMLPoint	= MASTER_MAX_POINT;
; 625  : 	pMsg.wMaxLife		= (double)lpObj->AddLife + lpObj->MaxLife;

  00026	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  0002c	0f b7 86 e8 00
	00 00		 movzx	 eax, WORD PTR [esi+232]
  00033	d9 7d e6	 fnstcw	 WORD PTR tv236[ebp]
  00036	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  0003c	66 89 45 f0	 mov	 WORD PTR _pMsg$[ebp+8], ax
  00040	0f b7 45 e6	 movzx	 eax, WORD PTR tv236[ebp]
  00044	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00049	89 45 e0	 mov	 DWORD PTR tv233[ebp], eax
  0004c	0f b7 8e d0 00
	00 00		 movzx	 ecx, WORD PTR [esi+208]
  00053	d9 6d e0	 fldcw	 WORD PTR tv233[ebp]
  00056	ba 01 00 00 00	 mov	 edx, 1
  0005b	66 89 55 ee	 mov	 WORD PTR _pMsg$[ebp+6], dx
  0005f	66 89 4d ec	 mov	 WORD PTR _pMsg$[ebp+4], cx
  00063	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00068	db 5d e0	 fistp	 DWORD PTR tv231[ebp]
  0006b	66 89 4d f2	 mov	 WORD PTR _pMsg$[ebp+10], cx
  0006f	0f b7 55 e0	 movzx	 edx, WORD PTR tv231[ebp]

; 626  : 	pMsg.wMaxMana		= (double)lpObj->AddMana + lpObj->MaxMana;
; 627  : 	pMsg.wMaxShield		= LOWORD(lpObj->iAddShield) + LOWORD(lpObj->iMaxShield);

  00073	0f b7 8e 5c 01
	00 00		 movzx	 ecx, WORD PTR [esi+348]
  0007a	d9 6d e6	 fldcw	 WORD PTR tv236[ebp]
  0007d	66 03 8e 58 01
	00 00		 add	 cx, WORD PTR [esi+344]
  00084	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+12], dx

; 628  : 	pMsg.wMaxBP			= LOWORD(lpObj->AddBP) + LOWORD(lpObj->MaxBP);

  00088	0f b7 96 30 01
	00 00		 movzx	 edx, WORD PTR [esi+304]
  0008f	66 03 96 2c 01
	00 00		 add	 dx, WORD PTR [esi+300]
  00096	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  0009c	66 89 4d f8	 mov	 WORD PTR _pMsg$[ebp+16], cx
  000a0	d9 7d e6	 fnstcw	 WORD PTR tv229[ebp]

; 629  : 	// ----
; 630  : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000a3	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000a6	0f b7 45 e6	 movzx	 eax, WORD PTR tv229[ebp]
  000aa	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  000b0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000b5	89 45 e0	 mov	 DWORD PTR tv226[ebp], eax
  000b8	66 89 55 fa	 mov	 WORD PTR _pMsg$[ebp+18], dx
  000bc	8b 16		 mov	 edx, DWORD PTR [esi]
  000be	d9 6d e0	 fldcw	 WORD PTR tv226[ebp]
  000c1	db 5d e0	 fistp	 DWORD PTR tv224[ebp]
  000c4	0f b7 45 e0	 movzx	 eax, WORD PTR tv224[ebp]
  000c8	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+14], ax
  000cc	0f b6 45 e9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000d0	d9 6d e6	 fldcw	 WORD PTR tv229[ebp]
  000d3	50		 push	 eax
  000d4	51		 push	 ecx
  000d5	52		 push	 edx
  000d6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 631  : 	GCSendEffectInfo(lpObj->m_Index, 16);

  000db	8b 06		 mov	 eax, DWORD PTR [esi]
  000dd	6a 10		 push	 16			; 00000010H
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?GCSendEffectInfo@@YAXHE@Z ; GCSendEffectInfo

; 632  : 	// ----
; 633  : 	LogAddTD("[%s][%s] Master Level Up :%d, MLPoint:%d/%d", lpObj->AccountID, lpObj->Name, lpObj->MLevel, lpObj->MLPoint, MASTER_MAX_POINT);

  000e5	8b 8e e8 00 00
	00		 mov	 ecx, DWORD PTR [esi+232]
  000eb	0f bf 96 d0 00
	00 00		 movsx	 edx, WORD PTR [esi+208]
  000f2	68 c8 00 00 00	 push	 200			; 000000c8H
  000f7	51		 push	 ecx
  000f8	52		 push	 edx
  000f9	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  000fc	50		 push	 eax
  000fd	83 c6 6c	 add	 esi, 108		; 0000006cH
  00100	56		 push	 esi
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 634  : }

  0010c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010f	83 c4 3c	 add	 esp, 60			; 0000003cH
  00112	33 cd		 xor	 ecx, ebp
  00114	5e		 pop	 esi
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GCMasterLevelUpInfo
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMasterLevelSystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMasterLevelSystem@@UAEPAXI@Z PROC			; CMasterLevelSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMasterLevelSystem@@UAE@XZ ; CMasterLevelSystem::~CMasterLevelSystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMasterLevelSystem@@UAEPAXI@Z ENDP			; CMasterLevelSystem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@ ; `string'
PUBLIC	??_C@_0P@ODAODKKI@CharacterGrand?$AA@		; `string'
PUBLIC	??_C@_0P@NOFCIALG@CharacterReset?$AA@		; `string'
PUBLIC	??_C@_0P@FCELILDG@CharacterLevel?$AA@		; `string'
PUBLIC	??_C@_0O@LBPJGHMN@AddExperience?$AA@		; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@		; `string'
PUBLIC	??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@ ; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_0P@KLHHBJJ@UseMonsterList?$AA@		; `string'
PUBLIC	??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ReadCommonServerInfo@CMasterLevelSystem@@QAEXXZ ; CMasterLevelSystem::ReadCommonServerInfo
EXTRN	__imp__GetPrivateProfileStringA@24:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@
CONST	SEGMENT
??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@ DB 'MasterLevel I'
	DB	'nfo Set MinMonsterKillLevel:%d, AddExpRate:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ODAODKKI@CharacterGrand?$AA@
CONST	SEGMENT
??_C@_0P@ODAODKKI@CharacterGrand?$AA@ DB 'CharacterGrand', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NOFCIALG@CharacterReset?$AA@
CONST	SEGMENT
??_C@_0P@NOFCIALG@CharacterReset?$AA@ DB 'CharacterReset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FCELILDG@CharacterLevel?$AA@
CONST	SEGMENT
??_C@_0P@FCELILDG@CharacterLevel?$AA@ DB 'CharacterLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LBPJGHMN@AddExperience?$AA@
CONST	SEGMENT
??_C@_0O@LBPJGHMN@AddExperience?$AA@ DB 'AddExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@
CONST	SEGMENT
??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@ DB 'MonsterMinLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@
CONST	SEGMENT
??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@ DB 'MasterSystemMonster.'
	DB	'txt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KLHHBJJ@UseMonsterList?$AA@
CONST	SEGMENT
??_C@_0P@KLHHBJJ@UseMonsterList?$AA@ DB 'UseMonsterList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
CONST	SEGMENT
??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@ DB 'MasterSystem.cfg', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadCommonServerInfo@CMasterLevelSystem@@QAEXXZ
_TEXT	SEGMENT
_szTemp$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
?ReadCommonServerInfo@CMasterLevelSystem@@QAEXXZ PROC	; CMasterLevelSystem::ReadCommonServerInfo, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f1		 mov	 esi, ecx

; 43   : 	this->m_UseMonsterList = GetPrivateProfileInt("Common", "UseMonsterList", true, gDirPath.GetNewPath("MasterSystem.cfg"));

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0001e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00023	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00029	50		 push	 eax
  0002a	6a 01		 push	 1
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KLHHBJJ@UseMonsterList?$AA@
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00036	ff d7		 call	 edi
  00038	85 c0		 test	 eax, eax
  0003a	0f 95 c0	 setne	 al
  0003d	88 86 68 06 00
	00		 mov	 BYTE PTR [esi+1640], al

; 44   : 	// ----
; 45   : 	if( this->m_UseMonsterList )

  00043	84 c0		 test	 al, al
  00045	74 17		 je	 SHORT $LN1@ReadCommon

; 46   : 	{
; 47   : 		this->ReadMonsterList(gDirPath.GetNewPath("MasterSystemMonster.txt"));

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@
  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00051	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00056	50		 push	 eax
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z ; CMasterLevelSystem::ReadMonsterList
$LN1@ReadCommon:

; 48   : 	}
; 49   : 	// ----
; 50   : 	this->m_iMinMonsterKillLevel = GetPrivateProfileInt("Common", "MonsterMinLevel", 110, gDirPath.GetNewPath("MasterSystem.cfg"));

  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00068	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0006d	50		 push	 eax
  0006e	6a 6e		 push	 110			; 0000006eH
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0007a	ff d7		 call	 edi
  0007c	89 86 60 06 00
	00		 mov	 DWORD PTR [esi+1632], eax

; 51   : 	char szTemp[10] = { 0 };

  00082	33 c0		 xor	 eax, eax

; 52   : 	GetPrivateProfileString("Common", "AddExperience", "1", szTemp, 5, gDirPath.GetNewPath("MasterSystem.cfg"));

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0008e	c6 45 f0 00	 mov	 BYTE PTR _szTemp$[ebp], 0
  00092	89 45 f1	 mov	 DWORD PTR _szTemp$[ebp+1], eax
  00095	89 45 f5	 mov	 DWORD PTR _szTemp$[ebp+5], eax
  00098	88 45 f9	 mov	 BYTE PTR _szTemp$[ebp+9], al
  0009b	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000a0	50		 push	 eax
  000a1	6a 05		 push	 5
  000a3	8d 45 f0	 lea	 eax, DWORD PTR _szTemp$[ebp]
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1?$AA@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LBPJGHMN@AddExperience?$AA@
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 53   : 	this->m_fAddExpRate = atof(szTemp);

  000bc	8d 4d f0	 lea	 ecx, DWORD PTR _szTemp$[ebp]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _atof
  000c5	d9 9e 64 06 00
	00		 fstp	 DWORD PTR [esi+1636]
  000cb	83 c4 04	 add	 esp, 4

; 54   : 	// ----
; 55   : /*	if( g_bIsSpeedServer )	//-> New
; 56   : 	{
; 57   : 		char defaultExp[10] = "";
; 58   : 		_gcvt(3.0, 4, defaultExp);
; 59   : 		GetPrivateProfileString("GameServerInfo", "SpeedS_ML_AddExperience", defaultExp, szTemp, 5, gDirPath.GetNewPath("commonserver.cfg"));
; 60   : 		this->m_fAddExpRate  = atof(szTemp);
; 61   : 	}*/
; 62   : 
; 63   : 	this->m_CharacterLevel = GetPrivateProfileInt("Common", "CharacterLevel", 0, gDirPath.GetNewPath("MasterSystem.cfg"));

  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  000d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000d8	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000dd	50		 push	 eax
  000de	6a 00		 push	 0
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FCELILDG@CharacterLevel?$AA@
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000ea	ff d7		 call	 edi

; 64   : 	this->m_CharacterReset = GetPrivateProfileInt("Common", "CharacterReset", 0, gDirPath.GetNewPath("MasterSystem.cfg"));

  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  000f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000f6	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000f9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000fe	50		 push	 eax
  000ff	6a 00		 push	 0
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NOFCIALG@CharacterReset?$AA@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0010b	ff d7		 call	 edi

; 65   : 	this->m_CharacterGrand = GetPrivateProfileInt("Common", "CharacterGrand", 0, gDirPath.GetNewPath("MasterSystem.cfg"));

  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  00112	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00117	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0011a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0011f	50		 push	 eax
  00120	6a 00		 push	 0
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ODAODKKI@CharacterGrand?$AA@
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0012c	ff d7		 call	 edi

; 66   : 
; 67   : 	// ----
; 68   : 	LogAddTD("MasterLevel Info Set MinMonsterKillLevel:%d, AddExpRate:%d", this->m_iMinMonsterKillLevel,this->m_fAddExpRate);

  0012e	d9 86 64 06 00
	00		 fld	 DWORD PTR [esi+1636]
  00134	8b 96 60 06 00
	00		 mov	 edx, DWORD PTR [esi+1632]
  0013a	83 ec 08	 sub	 esp, 8
  0013d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00140	52		 push	 edx
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@
  00146	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 69   : }

  0014f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00152	83 c4 10	 add	 esp, 16			; 00000010H
  00155	5f		 pop	 edi
  00156	33 cd		 xor	 ecx, ebp
  00158	5e		 pop	 esi
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
?ReadCommonServerInfo@CMasterLevelSystem@@QAEXXZ ENDP	; CMasterLevelSystem::ReadCommonServerInfo
_TEXT	ENDS
PUBLIC	??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@ ; `string'
PUBLIC	__real@4059000000000000
PUBLIC	__real@00000000
PUBLIC	?MasterLevelUp@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@AA_J_NH@Z ; CMasterLevelSystem::MasterLevelUp
EXTRN	?GCSendExp_INT64@@YAXHH_JHH@Z:PROC		; GCSendExp_INT64
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	?gObjSetBP@@YAXH@Z:PROC				; gObjSetBP
EXTRN	?gObjCalcMaxLifePower@@YAXH@Z:PROC		; gObjCalcMaxLifePower
EXTRN	?gObjCalcShieldPoint@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjCalcShieldPoint
EXTRN	?DCInfo@@3Vclassdef@@A:BYTE			; DCInfo
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?gObjSetExpPetItem@@YAXHH@Z:PROC		; gObjSetExpPetItem
EXTRN	?IsMapBattleZone@GensSystem@@QAEHH@Z:PROC	; GensSystem::IsMapBattleZone
EXTRN	?gGensSystem@@3VGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGENS@@3HA:DWORD				; gGENS
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	__ftol2:PROC
;	COMDAT ??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@ DB 'M'
	DB	'L Experience : Map[%d]-(%d,%d) [%s][%s](%d) %I64d %I64d Monst'
	DB	'erIndex : %d', 00H				; `string'
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MasterLevelUp@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@AA_J_NH@Z
_TEXT	SEGMENT
tv409 = -8						; size = 8
_lpObj$ = 8						; size = 4
_iAddExp$ = 12						; size = 4
_bEventMapReward$ = 16					; size = 1
_iMonsterType$ = 20					; size = 4
?MasterLevelUp@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@AA_J_NH@Z PROC ; CMasterLevelSystem::MasterLevelUp, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 150  : 	if( !this->CheckIsMasterLevelCharacter(lpObj) )

  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	56		 push	 esi
  0000c	8b d9		 mov	 ebx, ecx
  0000e	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  00013	85 c0		 test	 eax, eax
  00015	75 08		 jne	 SHORT $LN26@MasterLeve
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx

; 277  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
$LN26@MasterLeve:
  0001f	57		 push	 edi

; 151  : 	{
; 152  : 		return false;
; 153  : 	}
; 154  : 	// ----
; 155  : 
; 156  : 	int iTotalMasterLevel = MAX_MASTER_LEVEL;
; 157  : 
; 158  : 	if(g_ZtLicense.CheckUser(eZtUB::NSGames))

  00020	6a 51		 push	 81			; 00000051H
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00027	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H
  0002c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00031	84 c0		 test	 al, al
  00033	74 05		 je	 SHORT $LN31@MasterLeve

; 159  : 	{
; 160  : 		iTotalMasterLevel = 1;

  00035	bf 01 00 00 00	 mov	 edi, 1
$LN31@MasterLeve:

; 161  : 	}
; 162  : 
; 163  : 	if( lpObj->MLevel >= iTotalMasterLevel )

  0003a	0f bf 86 d0 00
	00 00		 movsx	 eax, WORD PTR [esi+208]
  00041	3b c7		 cmp	 eax, edi
  00043	7c 28		 jl	 SHORT $LN24@MasterLeve

; 164  : 	{
; 165  : 		GCServerMsgStringSend(lMsg.Get(1136), lpObj->m_Index, 1);

  00045	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00047	6a 01		 push	 1
  00049	51		 push	 ecx
  0004a	68 70 04 00 00	 push	 1136			; 00000470H
  0004f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00054	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 166  : 		return false;

  00064	33 c0		 xor	 eax, eax
  00066	5b		 pop	 ebx

; 277  : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
$LN24@MasterLeve:

; 167  : 	}
; 168  : 	// ----
; 169  : 	if( bEventMapReward )	//-> New

  0006d	80 7d 10 00	 cmp	 BYTE PTR _bEventMapReward$[ebp], 0

; 170  : 	{
; 171  : 		iAddExp = iAddExp;	//???
; 172  : 	}
; 173  : 	else

  00071	8b 7d 0c	 mov	 edi, DWORD PTR _iAddExp$[ebp]
  00074	75 41		 jne	 SHORT $LN18@MasterLeve

; 174  : 	{
; 175  : 		if(gGENS)

  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  0007d	74 24		 je	 SHORT $LN21@MasterLeve

; 176  : 		{
; 177  : 				if( gGensSystem.IsMapBattleZone(lpObj->MapNumber) )	//-> Original g_GensSystem maybe

  0007f	0f b6 96 49 01
	00 00		 movzx	 edx, BYTE PTR [esi+329]
  00086	52		 push	 edx
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  0008c	e8 00 00 00 00	 call	 ?IsMapBattleZone@GensSystem@@QAEHH@Z ; GensSystem::IsMapBattleZone

; 178  : 				{
; 179  : 					iAddExp = iAddExp * (this->m_fAddExpRate + g_MLBattleZoneAddExp);

  00091	d9 83 64 06 00
	00		 fld	 DWORD PTR [ebx+1636]
  00097	85 c0		 test	 eax, eax
  00099	74 0e		 je	 SHORT $LN33@MasterLeve
  0009b	da 05 00 00 00
	00		 fiadd	 DWORD PTR ?g_MLBattleZoneAddExp@@3HA ; g_MLBattleZoneAddExp

; 180  : 				}
; 181  : 				else

  000a1	eb 06		 jmp	 SHORT $LN33@MasterLeve
$LN21@MasterLeve:

; 182  : 				{
; 183  : 					iAddExp = iAddExp * this->m_fAddExpRate;
; 184  : 				}
; 185  : 		}
; 186  : 		else
; 187  : 		{
; 188  : 				iAddExp = iAddExp * this->m_fAddExpRate;

  000a3	d9 83 64 06 00
	00		 fld	 DWORD PTR [ebx+1636]
$LN33@MasterLeve:
  000a9	df 2f		 fild	 QWORD PTR [edi]
  000ab	de c9		 fmulp	 ST(1), ST(0)
  000ad	e8 00 00 00 00	 call	 __ftol2
  000b2	89 07		 mov	 DWORD PTR [edi], eax
  000b4	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN18@MasterLeve:

; 189  : 		}
; 190  : 	}
; 191  : 	// ----
; 192  : 	if( lpObj->m_MPSkillOpt.MpsPlusExp > 0 )

  000b7	d9 ee		 fldz
  000b9	d8 9e 70 27 00
	00		 fcomp	 DWORD PTR [esi+10096]
  000bf	df e0		 fnstsw	 ax
  000c1	f6 c4 05	 test	 ah, 5
  000c4	7a 29		 jp	 SHORT $LN17@MasterLeve

; 193  : 	{
; 194  : 		iAddExp += iAddExp * lpObj->m_MPSkillOpt.MpsPlusExp / 100;

  000c6	8b 07		 mov	 eax, DWORD PTR [edi]
  000c8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000cb	89 45 f8	 mov	 DWORD PTR tv409[ebp], eax
  000ce	89 4d fc	 mov	 DWORD PTR tv409[ebp+4], ecx
  000d1	df 6d f8	 fild	 QWORD PTR tv409[ebp]
  000d4	d8 8e 70 27 00
	00		 fmul	 DWORD PTR [esi+10096]
  000da	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000e0	df 6d f8	 fild	 QWORD PTR tv409[ebp]
  000e3	de c1		 faddp	 ST(1), ST(0)
  000e5	e8 00 00 00 00	 call	 __ftol2
  000ea	89 07		 mov	 DWORD PTR [edi], eax
  000ec	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN17@MasterLeve:

; 195  : 	}
; 196  : 	// ----
; 197  : 	if( iAddExp > 0 )

  000ef	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000f3	0f 8c 46 02 00
	00		 jl	 $LN16@MasterLeve
  000f9	7f 09		 jg	 SHORT $LN29@MasterLeve
  000fb	83 3f 00	 cmp	 DWORD PTR [edi], 0
  000fe	0f 86 3b 02 00
	00		 jbe	 $LN16@MasterLeve
$LN29@MasterLeve:

; 198  : 	{
; 199  : 		gObjSetExpPetItem(lpObj->m_Index, iAddExp);

  00104	8b 17		 mov	 edx, DWORD PTR [edi]
  00106	8b 06		 mov	 eax, DWORD PTR [esi]
  00108	52		 push	 edx
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ?gObjSetExpPetItem@@YAXHH@Z ; gObjSetExpPetItem

; 200  : 		// ----
; 201  : 		LogAddTD("ML Experience : Map[%d]-(%d,%d) [%s][%s](%d) %I64d %I64d MonsterIndex : %d",	//-> Updated
; 202  :           lpObj->MapNumber, lpObj->X, lpObj->Y, lpObj->AccountID,lpObj->Name,
; 203  :           lpObj->MLevel, lpObj->MLExp, iAddExp, iMonsterType);

  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _iMonsterType$[ebp]
  00112	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00115	8b 07		 mov	 eax, DWORD PTR [edi]
  00117	51		 push	 ecx
  00118	8b 8e dc 00 00
	00		 mov	 ecx, DWORD PTR [esi+220]
  0011e	52		 push	 edx
  0011f	8b 96 d8 00 00
	00		 mov	 edx, DWORD PTR [esi+216]
  00125	50		 push	 eax
  00126	0f bf 86 d0 00
	00 00		 movsx	 eax, WORD PTR [esi+208]
  0012d	51		 push	 ecx
  0012e	52		 push	 edx
  0012f	50		 push	 eax
  00130	0f bf 86 46 01
	00 00		 movsx	 eax, WORD PTR [esi+326]
  00137	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  0013a	51		 push	 ecx
  0013b	0f bf 8e 44 01
	00 00		 movsx	 ecx, WORD PTR [esi+324]
  00142	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00145	52		 push	 edx
  00146	0f b6 96 49 01
	00 00		 movzx	 edx, BYTE PTR [esi+329]
  0014d	50		 push	 eax
  0014e	51		 push	 ecx
  0014f	52		 push	 edx
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 204  : 		// ----
; 205  : 		if( iAddExp + lpObj->MLExp >= lpObj->MLNextExp )

  0015b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0015d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00160	83 c4 38	 add	 esp, 56			; 00000038H
  00163	03 8e d8 00 00
	00		 add	 ecx, DWORD PTR [esi+216]
  00169	13 86 dc 00 00
	00		 adc	 eax, DWORD PTR [esi+220]
  0016f	3b 86 e4 00 00
	00		 cmp	 eax, DWORD PTR [esi+228]
  00175	0f 8c 9d 01 00
	00		 jl	 $LN15@MasterLeve
  0017b	7f 0c		 jg	 SHORT $LN30@MasterLeve
  0017d	3b 8e e0 00 00
	00		 cmp	 ecx, DWORD PTR [esi+224]
  00183	0f 82 8f 01 00
	00		 jb	 $LN15@MasterLeve
$LN30@MasterLeve:

; 206  : 		{
; 207  : 			iAddExp = 0;

  00189	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0018f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 208  : 			// -----
; 209  : 			lpObj->MLExp	= lpObj->MLNextExp;

  00196	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0019c	8b 8e e4 00 00
	00		 mov	 ecx, DWORD PTR [esi+228]

; 210  : 			lpObj->MLevel++;

  001a2	66 ff 86 d0 00
	00 00		 inc	 WORD PTR [esi+208]
  001a9	89 86 d8 00 00
	00		 mov	 DWORD PTR [esi+216], eax

; 211  : #ifdef LVL_UP_POINTS
; 212  : 			if(lpObj->Class == CLASS_WIZARD)

  001af	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  001b6	89 8e dc 00 00
	00		 mov	 DWORD PTR [esi+220], ecx
  001bc	66 85 c0	 test	 ax, ax
  001bf	75 08		 jne	 SHORT $LN14@MasterLeve

; 213  : 			{
; 214  : 				lpObj->MLPoint += ZtConfig.AddMasterLvlPoint.DwLevelPoints;

  001c1	8b 15 b0 0c 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3248
  001c7	eb 62		 jmp	 SHORT $LN34@MasterLeve
$LN14@MasterLeve:

; 215  : 			}
; 216  : 			else if(lpObj->Class == CLASS_KNIGHT)

  001c9	83 f8 01	 cmp	 eax, 1
  001cc	75 0d		 jne	 SHORT $LN12@MasterLeve

; 217  : 			{
; 218  : 				lpObj->MLPoint += ZtConfig.AddMasterLvlPoint.DkLevelPoints;

  001ce	a1 ac 0c 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3244
  001d3	01 86 e8 00 00
	00		 add	 DWORD PTR [esi+232], eax
  001d9	eb 56		 jmp	 SHORT $LN2@MasterLeve
$LN12@MasterLeve:

; 219  : 			}
; 220  : 			else if(lpObj->Class == CLASS_ELF)

  001db	83 f8 02	 cmp	 eax, 2
  001de	75 0e		 jne	 SHORT $LN10@MasterLeve

; 221  : 			{
; 222  : 				lpObj->MLPoint += ZtConfig.AddMasterLvlPoint.ElfLevelPoints;

  001e0	8b 0d b4 0c 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3252
  001e6	01 8e e8 00 00
	00		 add	 DWORD PTR [esi+232], ecx
  001ec	eb 43		 jmp	 SHORT $LN2@MasterLeve
$LN10@MasterLeve:

; 223  : 			}
; 224  : 			else if ( lpObj->Class == CLASS_MAGUMSA )

  001ee	83 f8 03	 cmp	 eax, 3
  001f1	75 08		 jne	 SHORT $LN8@MasterLeve

; 225  : 			{
; 226  : 				lpObj->MLPoint += ZtConfig.AddMasterLvlPoint.MgLevelPoints;

  001f3	8b 15 bc 0c 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3260
  001f9	eb 30		 jmp	 SHORT $LN34@MasterLeve
$LN8@MasterLeve:

; 227  : 			}
; 228  : 			else if ( lpObj->Class == CLASS_DARKLORD )

  001fb	83 f8 04	 cmp	 eax, 4
  001fe	75 0d		 jne	 SHORT $LN6@MasterLeve

; 229  : 			{
; 230  : 				lpObj->MLPoint += ZtConfig.AddMasterLvlPoint.DlLevelPoints;

  00200	a1 c0 0c 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3264
  00205	01 86 e8 00 00
	00		 add	 DWORD PTR [esi+232], eax
  0020b	eb 24		 jmp	 SHORT $LN2@MasterLeve
$LN6@MasterLeve:

; 231  : 			}
; 232  : 			else if(lpObj->Class == CLASS_SUMMONER)

  0020d	83 f8 05	 cmp	 eax, 5
  00210	75 0e		 jne	 SHORT $LN4@MasterLeve

; 233  : 			{
; 234  : 				lpObj->MLPoint += ZtConfig.AddMasterLvlPoint.SumLevelPoints;

  00212	8b 0d b8 0c 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3256
  00218	01 8e e8 00 00
	00		 add	 DWORD PTR [esi+232], ecx
  0021e	eb 11		 jmp	 SHORT $LN2@MasterLeve
$LN4@MasterLeve:

; 235  : 			}
; 236  : #ifdef MONK
; 237  : 			else if ( lpObj->Class == CLASS_MONK )

  00220	83 f8 06	 cmp	 eax, 6
  00223	75 0c		 jne	 SHORT $LN2@MasterLeve

; 238  : 			{
; 239  : 				lpObj->MLPoint += ZtConfig.AddMasterLvlPoint.RfLevelPoints;

  00225	8b 15 c4 0c 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3268
$LN34@MasterLeve:
  0022b	01 96 e8 00 00
	00		 add	 DWORD PTR [esi+232], edx
$LN2@MasterLeve:

; 240  : 			}
; 241  : #endif
; 242  : #else
; 243  : 			lpObj->MLPoint++;	//-> In future can use it for change ml point per level)
; 244  : #endif
; 245  : 			// -----
; 246  : 			gObjCalCharacter(lpObj->m_Index);

  00231	8b 06		 mov	 eax, DWORD PTR [esi]
  00233	50		 push	 eax
  00234	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 247  : 			// -----
; 248  : 			lpObj->MaxLife				+= DCInfo.DefClass[ lpObj->Class ].LevelLife;

  00239	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00240	69 c0 c8 0b 00
	00		 imul	 eax, 3016		; 00000bc8H

; 249  : 			lpObj->MaxMana				+= DCInfo.DefClass[ lpObj->Class ].LevelMana;
; 250  : 			lpObj->Life					= lpObj->AddLife + lpObj->MaxLife;
; 251  : 			lpObj->Mana					= lpObj->AddMana + lpObj->MaxMana;
; 252  : 			// -----
; 253  : 			gObjCalcShieldPoint(lpObj);

  00246	56		 push	 esi
  00247	d9 80 10 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  0024d	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00253	d9 9e 00 01 00
	00		 fstp	 DWORD PTR [esi+256]
  00259	d9 80 1c 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  0025f	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00265	d9 9e 14 01 00
	00		 fstp	 DWORD PTR [esi+276]
  0026b	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00271	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00277	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  0027d	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  00283	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00289	d9 9e 10 01 00
	00		 fstp	 DWORD PTR [esi+272]
  0028f	e8 00 00 00 00	 call	 ?gObjCalcShieldPoint@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcShieldPoint

; 254  : 			lpObj->iShield				= lpObj->iAddShield + lpObj->iMaxShield;

  00294	8b 8e 5c 01 00
	00		 mov	 ecx, DWORD PTR [esi+348]
  0029a	03 8e 58 01 00
	00		 add	 ecx, DWORD PTR [esi+344]
  002a0	83 c4 08	 add	 esp, 8
  002a3	89 8e 54 01 00
	00		 mov	 DWORD PTR [esi+340], ecx

; 255  : 			// -----
; 256  : 			this->gObjNextMLExpCal(lpObj);

  002a9	56		 push	 esi
  002aa	8b cb		 mov	 ecx, ebx
  002ac	e8 00 00 00 00	 call	 ?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::gObjNextMLExpCal

; 257  : 			// ----
; 258  : 			gObjCalcMaxLifePower(lpObj->m_Index);

  002b1	8b 16		 mov	 edx, DWORD PTR [esi]
  002b3	52		 push	 edx
  002b4	e8 00 00 00 00	 call	 ?gObjCalcMaxLifePower@@YAXH@Z ; gObjCalcMaxLifePower

; 259  : 			gObjSetBP(lpObj->m_Index);

  002b9	8b 06		 mov	 eax, DWORD PTR [esi]
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP
  002c1	83 c4 08	 add	 esp, 8

; 260  : 			//GJSetCharacterInfo(lpObj, lpObj->m_Index, 0, 0);
; 261  : #ifndef FIX_DS_CRASH
; 262  : 			GJSetCharacterInfo(lpObj, lpObj->m_Index, 0);
; 263  : #endif
; 264  : 			this->GCMasterLevelUpInfo(lpObj);

  002c4	56		 push	 esi
  002c5	8b cb		 mov	 ecx, ebx
  002c7	e8 00 00 00 00	 call	 ?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCMasterLevelUpInfo

; 265  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  002cc	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  002d2	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  002d8	51		 push	 ecx
  002d9	6a 00		 push	 0
  002db	68 ff 00 00 00	 push	 255			; 000000ffH
  002e0	e8 00 00 00 00	 call	 __ftol2_sse
  002e5	8b 16		 mov	 edx, DWORD PTR [esi]
  002e7	50		 push	 eax
  002e8	52		 push	 edx
  002e9	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 266  : 			GCManaSend(lpObj->m_Index, lpObj->Mana, 0xFF, 0, lpObj->BP);	//-> Original name ->_BP

  002ee	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  002f4	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  002fa	83 c4 14	 add	 esp, 20			; 00000014H
  002fd	50		 push	 eax
  002fe	6a 00		 push	 0
  00300	68 ff 00 00 00	 push	 255			; 000000ffH
  00305	e8 00 00 00 00	 call	 __ftol2_sse
  0030a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0030c	50		 push	 eax
  0030d	51		 push	 ecx
  0030e	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00313	83 c4 14	 add	 esp, 20			; 00000014H

; 267  : 		}
; 268  : 		else

  00316	eb 0c		 jmp	 SHORT $LN1@MasterLeve
$LN15@MasterLeve:

; 269  : 		{
; 270  : 			lpObj->MLExp += iAddExp;

  00318	89 8e d8 00 00
	00		 mov	 DWORD PTR [esi+216], ecx
  0031e	89 86 dc 00 00
	00		 mov	 DWORD PTR [esi+220], eax
$LN1@MasterLeve:

; 271  : 		}
; 272  : 		// ----
; 273  : 		GCSendExp_INT64(lpObj->m_Index, 65535, iAddExp, 0, 0);		

  00324	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00327	8b 07		 mov	 eax, DWORD PTR [edi]
  00329	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0032b	6a 00		 push	 0
  0032d	6a 00		 push	 0
  0032f	52		 push	 edx
  00330	50		 push	 eax
  00331	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00336	51		 push	 ecx
  00337	e8 00 00 00 00	 call	 ?GCSendExp_INT64@@YAXHH_JHH@Z ; GCSendExp_INT64
  0033c	83 c4 18	 add	 esp, 24			; 00000018H
$LN16@MasterLeve:

; 274  : 	}
; 275  : 	// ----
; 276  : 	return true;

  0033f	5f		 pop	 edi
  00340	5e		 pop	 esi
  00341	b8 01 00 00 00	 mov	 eax, 1
  00346	5b		 pop	 ebx

; 277  : }

  00347	8b e5		 mov	 esp, ebp
  00349	5d		 pop	 ebp
  0034a	c2 10 00	 ret	 16			; 00000010H
?MasterLevelUp@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@AA_J_NH@Z ENDP ; CMasterLevelSystem::MasterLevelUp
_TEXT	ENDS
PUBLIC	??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@ ; `string'
PUBLIC	??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@ ; `string'
PUBLIC	??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@ ; `string'
PUBLIC	??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@ ; `string'
PUBLIC	?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad
EXTRN	?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z:PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjCalcMLSkillItemOption
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedGP@@YAHH@Z:PROC			; gObjIsConnectedGP
;	COMDAT ??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@
CONST	SEGMENT
??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@ DB '['
	DB	'%s][%s] Reset Max Value For MasterLevel [MaxLife:%d][MaxMana:'
	DB	'%d][MaxSD:%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@
CONST	SEGMENT
??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@ DB '['
	DB	'%s][%s] Recv MasterLevel Info [MLevel:%d][MLExp:%I64d][MLNext'
	DB	'Exp:%I64d][MLPoint:%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@
CONST	SEGMENT
??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@ DB '['
	DB	'%s][%s] MasterLevel Info First Set [MLevel:%d][MLExp:%I64d][M'
	DB	'LNextExp:%I64d][MLPoint:%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@
CONST	SEGMENT
??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@ DB '['
	DB	'%s][%s] MasterLevel Info Load Fail', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z
_TEXT	SEGMENT
tv441 = -8						; size = 4
_this$ = -4						; size = 4
tv584 = 8						; size = 4
tv580 = 8						; size = 4
tv570 = 8						; size = 4
tv520 = 8						; size = 4
tv476 = 8						; size = 4
_aRecv$ = 8						; size = 4
?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z PROC ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad, COMDAT
; _this$ = ecx

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 445  : 	if( !aRecv )

  00008	8b 7d 08	 mov	 edi, DWORD PTR _aRecv$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx
  00010	85 ff		 test	 edi, edi
  00012	0f 84 a5 02 00
	00		 je	 $LN10@DGRequestM

; 446  : 	{
; 447  : 		return;
; 448  : 	}
; 449  : 	// ----
; 450  : 	MLP_ANS_MASTERLEVEL_INFO * lpRecvMsg = (MLP_ANS_MASTERLEVEL_INFO*)aRecv;
; 451  : 	// ----
; 452  : 	if( !gObjIsConnectedGP(lpRecvMsg->iUserIndex) )

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  00021	83 c4 04	 add	 esp, 4
  00024	85 c0		 test	 eax, eax
  00026	0f 84 91 02 00
	00		 je	 $LN10@DGRequestM

; 453  : 	{
; 454  : 		return;
; 455  : 	}
; 456  : 	// ----
; 457  : 	int iIndex	= lpRecvMsg->iUserIndex;
; 458  : 	LPOBJ lpObj	= &gObj[lpRecvMsg->iUserIndex];

  0002c	56		 push	 esi
  0002d	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00030	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00036	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 459  : 	// ---
; 460  : 	if( lpObj->MLInfoLoad )

  0003c	83 be ec 00 00
	00 00		 cmp	 DWORD PTR [esi+236], 0
  00043	0f 85 73 02 00
	00		 jne	 $LN12@DGRequestM

; 461  : 	{
; 462  : 		return;
; 463  : 	}
; 464  : 	// ----
; 465  : 	if( !lpRecvMsg->btResult )

  00049	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  0004c	84 c0		 test	 al, al
  0004e	75 1f		 jne	 SHORT $LN6@DGRequestM

; 466  : 	{
; 467  : 		LogAddTD("[%s][%s] MasterLevel Info Load Fail", lpObj->AccountID, lpObj->Name);	//-> New

  00050	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  00053	51		 push	 ecx
  00054	83 c6 6c	 add	 esi, 108		; 0000006cH
  00057	56		 push	 esi
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	5e		 pop	 esi
  00067	5f		 pop	 edi
  00068	5b		 pop	 ebx

; 542  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN6@DGRequestM:

; 468  : 		return;
; 469  : 	}
; 470  : 	// ----
; 471  : 	if( lpRecvMsg->btResult == 1 )

  0006f	3c 01		 cmp	 al, 1
  00071	0f 85 27 02 00
	00		 jne	 $LN5@DGRequestM

; 472  : 	{
; 473  : 		/*if( lpObj->MLPoint + lpRecvMsg->nMLPoint != lpRecvMsg->nMLevel )	//-> New (be good use MASTER_MAX_POINT for check)
; 474  : 		{
; 475  : 			LogAddTD("[%s][%s] MasterLevel Info Mismatch!! - Point(%d), Use Point(%d), Level(%d)",
; 476  : 				lpObj->AccountID, lpObj->Name,
; 477  : 				lpRecvMsg->nMLPoint, lpObj->MLInfoLoad, lpRecvMsg->nMLevel);
; 478  : 		}*/
; 479  : 		// ----
; 480  : 		lpObj->MLInfoLoad = 1;

  00077	c7 86 ec 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+236], 1

; 481  : 		// ----
; 482  : 		if( lpRecvMsg->nMLevel == 0 && lpRecvMsg->i64NextMLExp == 0 )

  00081	0f b7 47 14	 movzx	 eax, WORD PTR [edi+20]
  00085	66 85 c0	 test	 ax, ax
  00088	75 61		 jne	 SHORT $LN4@DGRequestM
  0008a	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  0008d	0b 57 24	 or	 edx, DWORD PTR [edi+36]
  00090	75 59		 jne	 SHORT $LN4@DGRequestM

; 483  : 		{
; 484  : 			lpObj->MLevel			= lpRecvMsg->nMLevel;

  00092	33 c0		 xor	 eax, eax
  00094	66 89 86 d0 00
	00 00		 mov	 WORD PTR [esi+208], ax

; 485  : 			lpObj->MLExp		= lpRecvMsg->i64MLExp;

  0009b	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0009e	89 8e d8 00 00
	00		 mov	 DWORD PTR [esi+216], ecx
  000a4	8b 57 1c	 mov	 edx, DWORD PTR [edi+28]
  000a7	89 96 dc 00 00
	00		 mov	 DWORD PTR [esi+220], edx

; 486  : 			lpObj->MLNextExp	= MLExpTlb[1];

  000ad	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000b0	89 86 e0 00 00
	00		 mov	 DWORD PTR [esi+224], eax
  000b6	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  000b9	89 8e e4 00 00
	00		 mov	 DWORD PTR [esi+228], ecx

; 487  : 			lpObj->MLPoint		= lpRecvMsg->nMLPoint;

  000bf	0f bf 47 28	 movsx	 eax, WORD PTR [edi+40]

; 488  : 			// ----
; 489  : 			LogAddTD("[%s][%s] MasterLevel Info First Set [MLevel:%d][MLExp:%I64d][MLNextExp:%I64d][MLPoint:%d]",
; 490  : 				lpObj->AccountID, lpObj->Name, lpObj->MLevel, 
; 491  : 				lpObj->MLExp, lpObj->MLNextExp, lpObj->MLPoint);

  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	89 86 e8 00 00
	00		 mov	 DWORD PTR [esi+232], eax
  000cb	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  000d1	50		 push	 eax
  000d2	52		 push	 edx
  000d3	8b 96 d8 00 00
	00		 mov	 edx, DWORD PTR [esi+216]
  000d9	52		 push	 edx
  000da	6a 00		 push	 0
  000dc	8d 7e 77	 lea	 edi, DWORD PTR [esi+119]
  000df	57		 push	 edi
  000e0	8d 5e 6c	 lea	 ebx, DWORD PTR [esi+108]
  000e3	53		 push	 ebx
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@

; 492  : 			// ----
; 493  : 			this->GDRequestMasterLevelInfoSave(lpObj);
; 494  : 		}
; 495  : 		else

  000e9	eb 61		 jmp	 SHORT $LN19@DGRequestM
$LN4@DGRequestM:

; 496  : 		{
; 497  : 			lpObj->MLevel			= lpRecvMsg->nMLevel;

  000eb	66 89 86 d0 00
	00 00		 mov	 WORD PTR [esi+208], ax

; 498  : 			lpObj->MLExp		= lpRecvMsg->i64MLExp;

  000f2	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000f5	89 86 d8 00 00
	00		 mov	 DWORD PTR [esi+216], eax
  000fb	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000fe	89 8e dc 00 00
	00		 mov	 DWORD PTR [esi+220], ecx

; 499  : 			lpObj->MLNextExp	= lpRecvMsg->i64NextMLExp;

  00104	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  00107	89 96 e0 00 00
	00		 mov	 DWORD PTR [esi+224], edx
  0010d	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00110	89 86 e4 00 00
	00		 mov	 DWORD PTR [esi+228], eax

; 500  : 			lpObj->MLPoint		= lpRecvMsg->nMLPoint;

  00116	0f bf 47 28	 movsx	 eax, WORD PTR [edi+40]

; 501  : 			// ----
; 502  : 			LogAddTD("[%s][%s] Recv MasterLevel Info [MLevel:%d][MLExp:%I64d][MLNextExp:%I64d][MLPoint:%d]", 
; 503  : 				lpObj->AccountID, lpObj->Name, lpObj->MLevel, 
; 504  : 				lpObj->MLExp, lpObj->MLNextExp, lpObj->MLPoint);

  0011a	8b 8e e4 00 00
	00		 mov	 ecx, DWORD PTR [esi+228]
  00120	50		 push	 eax
  00121	51		 push	 ecx
  00122	8b 8e d8 00 00
	00		 mov	 ecx, DWORD PTR [esi+216]
  00128	52		 push	 edx
  00129	0f bf 96 d0 00
	00 00		 movsx	 edx, WORD PTR [esi+208]
  00130	89 86 e8 00 00
	00		 mov	 DWORD PTR [esi+232], eax
  00136	8b 86 dc 00 00
	00		 mov	 eax, DWORD PTR [esi+220]
  0013c	50		 push	 eax
  0013d	51		 push	 ecx
  0013e	52		 push	 edx
  0013f	8d 7e 77	 lea	 edi, DWORD PTR [esi+119]
  00142	57		 push	 edi
  00143	8d 5e 6c	 lea	 ebx, DWORD PTR [esi+108]
  00146	53		 push	 ebx
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@
$LN19@DGRequestM:
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 505  : 			// ----
; 506  : 			this->GDRequestMasterLevelInfoSave(lpObj);

  00152	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	83 c4 24	 add	 esp, 36			; 00000024H
  00158	56		 push	 esi
  00159	e8 00 00 00 00	 call	 ?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDRequestMasterLevelInfoSave

; 507  : 		}
; 508  : 		// ----
; 509  : 		lpObj->MaxLife = DCInfo.DefClass[lpObj->Class].Life + (lpObj->Level + lpObj->MLevel - 1) * DCInfo.DefClass[lpObj->Class].LevelLife  + ((lpObj->Vitality - DCInfo.DefClass[lpObj->Class].Vitality ) * DCInfo.DefClass[lpObj->Class].VitalityToLife);

  0015e	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  00165	0f bf 8e d0 00
	00 00		 movsx	 ecx, WORD PTR [esi+208]
  0016c	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  00170	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  00177	69 c9 c8 0b 00
	00		 imul	 ecx, 3016		; 00000bc8H
  0017d	0f b7 81 0c 00
	00 00		 movzx	 eax, WORD PTR ?DCInfo@@3Vclassdef@@A[ecx+12]
  00184	89 55 08	 mov	 DWORD PTR tv584[ebp], edx
  00187	0f b7 96 f8 00
	00 00		 movzx	 edx, WORD PTR [esi+248]
  0018e	db 45 08	 fild	 DWORD PTR tv584[ebp]
  00191	2b d0		 sub	 edx, eax
  00193	89 55 08	 mov	 DWORD PTR tv580[ebp], edx
  00196	d9 5d f8	 fstp	 DWORD PTR tv441[ebp]
  00199	db 45 08	 fild	 DWORD PTR tv580[ebp]
  0019c	d8 89 28 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+40]
  001a2	d9 81 10 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+16]
  001a8	d9 45 f8	 fld	 DWORD PTR tv441[ebp]
  001ab	d9 c0		 fld	 ST(0)
  001ad	de ca		 fmulp	 ST(2), ST(0)
  001af	d9 81 14 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+20]
  001b5	de c2		 faddp	 ST(2), ST(0)
  001b7	d9 ca		 fxch	 ST(2)
  001b9	de c1		 faddp	 ST(1), ST(0)
  001bb	d9 5d 08	 fstp	 DWORD PTR tv476[ebp]
  001be	d9 45 08	 fld	 DWORD PTR tv476[ebp]
  001c1	d9 96 00 01 00
	00		 fst	 DWORD PTR [esi+256]

; 510  : 		// ----
; 511  : 		if( lpObj->Life > lpObj->MaxLife + lpObj->AddLife )

  001c7	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  001cd	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  001d3	d8 c2		 fadd	 ST(0), ST(2)
  001d5	de d9		 fcompp
  001d7	df e0		 fnstsw	 ax
  001d9	f6 c4 05	 test	 ah, 5
  001dc	7a 08		 jp	 SHORT $LN14@DGRequestM

; 512  : 		{
; 513  : 			lpObj->Life = lpObj->MaxLife;

  001de	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  001e4	eb 02		 jmp	 SHORT $LN2@DGRequestM
$LN14@DGRequestM:
  001e6	dd d8		 fstp	 ST(0)
$LN2@DGRequestM:

; 514  : 		}
; 515  : 		// ----
; 516  : 		lpObj->MaxMana = DCInfo.DefClass[lpObj->Class].Mana + (lpObj->Level + lpObj->MLevel - 1) * DCInfo.DefClass[lpObj->Class].LevelMana  + ((lpObj->Energy - DCInfo.DefClass[lpObj->Class].Energy ) * DCInfo.DefClass[lpObj->Class].EnergyToMana);

  001e8	0f b7 81 0e 00
	00 00		 movzx	 eax, WORD PTR ?DCInfo@@3Vclassdef@@A[ecx+14]
  001ef	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  001f6	2b d0		 sub	 edx, eax
  001f8	89 55 08	 mov	 DWORD PTR tv570[ebp], edx
  001fb	db 45 08	 fild	 DWORD PTR tv570[ebp]
  001fe	d8 89 2c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+44]
  00204	d9 81 1c 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+28]
  0020a	de ca		 fmulp	 ST(2), ST(0)
  0020c	d9 81 20 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+32]
  00212	de c2		 faddp	 ST(2), ST(0)
  00214	de c1		 faddp	 ST(1), ST(0)
  00216	d9 5d 08	 fstp	 DWORD PTR tv520[ebp]
  00219	d9 45 08	 fld	 DWORD PTR tv520[ebp]
  0021c	d9 96 14 01 00
	00		 fst	 DWORD PTR [esi+276]

; 517  : 		// ----
; 518  : 		if( lpObj->Mana > lpObj->MaxMana + lpObj->AddMana )

  00222	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  00228	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  0022e	d8 c2		 fadd	 ST(0), ST(2)
  00230	de d9		 fcompp
  00232	df e0		 fnstsw	 ax
  00234	f6 c4 05	 test	 ah, 5
  00237	7a 08		 jp	 SHORT $LN17@DGRequestM

; 519  : 		{
; 520  : 			lpObj->Mana = lpObj->MaxMana;

  00239	d9 9e 10 01 00
	00		 fstp	 DWORD PTR [esi+272]
  0023f	eb 02		 jmp	 SHORT $LN1@DGRequestM
$LN17@DGRequestM:
  00241	dd d8		 fstp	 ST(0)
$LN1@DGRequestM:

; 521  : 		}
; 522  : 		// ----
; 523  : 		gObjCalcMaxLifePower(lpObj->m_Index);

  00243	8b 06		 mov	 eax, DWORD PTR [esi]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?gObjCalcMaxLifePower@@YAXH@Z ; gObjCalcMaxLifePower

; 524  : 		gObjSetBP(lpObj->m_Index);

  0024b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP

; 525  : 		gObjCalcShieldPoint(lpObj);

  00253	56		 push	 esi
  00254	e8 00 00 00 00	 call	 ?gObjCalcShieldPoint@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcShieldPoint

; 526  : 		// ----
; 527  : 		lpObj->iShield = lpObj->iMaxShield + lpObj->iAddShield;
; 528  : 		// ----
; 529  : 		LogAddTD("[%s][%s] Reset Max Value For MasterLevel [MaxLife:%d][MaxMana:%d][MaxSD:%d]", lpObj->AccountID, lpObj->Name, lpObj->MaxLife, lpObj->MaxMana, lpObj->iShield);

  00259	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  0025f	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00265	03 86 5c 01 00
	00		 add	 eax, DWORD PTR [esi+348]
  0026b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026e	50		 push	 eax
  0026f	83 ec 10	 sub	 esp, 16			; 00000010H
  00272	dd 5c 24 08	 fstp	 QWORD PTR [esp+8]
  00276	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  0027c	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00282	dd 1c 24	 fstp	 QWORD PTR [esp]
  00285	57		 push	 edi
  00286	53		 push	 ebx
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 530  : 		// ----
; 531  : 		this->GCSendMasterLevelWindowStatus(lpObj);

  00292	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00295	83 c4 20	 add	 esp, 32			; 00000020H
  00298	56		 push	 esi
  00299	e8 00 00 00 00	 call	 ?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCSendMasterLevelWindowStatus
$LN5@DGRequestM:

; 532  : 		// ----
; 533  : 		//	GCSendMasterLevelWindowStatus
; 534  : 		//GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield);
; 535  : 		//GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 536  : 	}
; 537  : 	// ----
; 538  : 	gObjCalCharacter(lpObj->m_Index);

  0029e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 539  : 	// -----
; 540  : 	gObjCalcMLSkillItemOption(lpObj);

  002a6	56		 push	 esi
  002a7	e8 00 00 00 00	 call	 ?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcMLSkillItemOption

; 541  : 	g_MasterSkillSystem.CGReqGetMasterLevelSkillTree(lpObj->m_Index);

  002ac	8b 16		 mov	 edx, DWORD PTR [esi]
  002ae	83 c4 08	 add	 esp, 8
  002b1	52		 push	 edx
  002b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  002b7	e8 00 00 00 00	 call	 ?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
$LN12@DGRequestM:
  002bc	5e		 pop	 esi
$LN10@DGRequestM:
  002bd	5f		 pop	 edi
  002be	5b		 pop	 ebx

; 542  : }

  002bf	8b e5		 mov	 esp, ebp
  002c1	5d		 pop	 ebp
  002c2	c2 04 00	 ret	 4
?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z ENDP ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MasterLevelSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_MasterLevelSystem@@YAXXZ PROC			; `dynamic initializer for 'g_MasterLevelSystem'', COMDAT

; 23   : CMasterLevelSystem g_MasterLevelSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  00005	e8 00 00 00 00	 call	 ??0CMasterLevelSystem@@QAE@XZ ; CMasterLevelSystem::CMasterLevelSystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MasterLevelSystem@@YAXXZ ; `dynamic atexit destructor for 'g_MasterLevelSystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MasterLevelSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_MasterLevelSystem''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MasterLevelSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_MasterLevelSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MasterLevelSystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  00005	e9 00 00 00 00	 jmp	 ??1CMasterLevelSystem@@UAE@XZ ; CMasterLevelSystem::~CMasterLevelSystem
??__Fg_MasterLevelSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MasterLevelSystem''
text$yd	ENDS
PUBLIC	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A	; g_MasterLevelSystem
_BSS	SEGMENT
?g_MasterLevelSystem@@3VCMasterLevelSystem@@A DB 0990H DUP (?) ; g_MasterLevelSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MasterLevelSystem$initializer$ DD FLAT:??__Eg_MasterLevelSystem@@YAXXZ
CRT$XCU	ENDS
END
