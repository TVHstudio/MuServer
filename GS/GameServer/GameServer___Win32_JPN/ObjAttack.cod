; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ObjAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	03e8H
	DD	0118H
	DD	03e8H
	DD	03e8H
	DD	04afH
	DD	03e8H
	DD	04afH
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCastleState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
;	COMDAT ?GetCastleState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCastleState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCastleState, COMDAT
; _this$ = ecx

; 314  : 	int GetCastleState(){return m_iCastleSiegeState;}

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00003	c3		 ret	 0
?GetCastleState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCastleState
_TEXT	ENDS
PUBLIC	?GetCrywolfState@CCrywolf@@QAEHXZ		; CCrywolf::GetCrywolfState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\crywolf.h
;	COMDAT ?GetCrywolfState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?GetCrywolfState@CCrywolf@@QAEHXZ PROC			; CCrywolf::GetCrywolfState, COMDAT
; _this$ = ecx

; 91   : 	int GetCrywolfState(){return this->m_iCrywolfState;}

  00000	8b 81 ec b7 0f
	00		 mov	 eax, DWORD PTR [ecx+1030124]
  00006	c3		 ret	 0
?GetCrywolfState@CCrywolf@@QAEHXZ ENDP			; CCrywolf::GetCrywolfState
_TEXT	ENDS
PUBLIC	??_7CObjAttack@@6B@				; CObjAttack::`vftable'
PUBLIC	??0CObjAttack@@QAE@XZ				; CObjAttack::CObjAttack
PUBLIC	??_R4CObjAttack@@6B@				; CObjAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCObjAttack@@@8				; CObjAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjAttack@@8				; CObjAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjAttack@@8				; CObjAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObjAttack@@8			; CObjAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CObjBaseAttack@@8			; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObjBaseAttack@@@8			; CObjBaseAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Base Class Array'
EXTRN	??0CObjBaseAttack@@QAE@XZ:PROC			; CObjBaseAttack::CObjBaseAttack
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECObjAttack@@UAEPAXI@Z:PROC			; CObjAttack::`vector deleting destructor'
EXTRN	?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z:PROC ; CObjBaseAttack::MissCheck
;	COMDAT ??_R2CObjBaseAttack@@8
; File e:\work\tranet_version\gs\gameserver\objattack.cpp
rdata$r	SEGMENT
??_R2CObjBaseAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8 ; CObjBaseAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObjBaseAttack@@8
rdata$r	SEGMENT
??_R3CObjBaseAttack@@8 DD 00H				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjBaseAttack@@@8
_DATA	SEGMENT
??_R0?AVCObjBaseAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjBaseAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjBaseAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjBaseAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjBaseAttack@@8 DD FLAT:??_R0?AVCObjBaseAttack@@@8 ; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjAttack@@8 DD FLAT:??_R0?AVCObjAttack@@@8 ; CObjAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CObjAttack@@8
rdata$r	SEGMENT
??_R2CObjAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjAttack@@8	; CObjAttack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R3CObjAttack@@8
rdata$r	SEGMENT
??_R3CObjAttack@@8 DD 00H				; CObjAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjAttack@@@8
_DATA	SEGMENT
??_R0?AVCObjAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CObjAttack@@6B@
rdata$r	SEGMENT
??_R4CObjAttack@@6B@ DD 00H				; CObjAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObjAttack@@@8
	DD	FLAT:??_R3CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CObjAttack@@6B@
CONST	SEGMENT
??_7CObjAttack@@6B@ DD FLAT:??_R4CObjAttack@@6B@	; CObjAttack::`vftable'
	DD	FLAT:??_ECObjAttack@@UAEPAXI@Z
	DD	FLAT:?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CObjAttack@@QAE@XZ
_TEXT	SEGMENT
??0CObjAttack@@QAE@XZ PROC				; CObjAttack::CObjAttack, COMDAT
; _this$ = ecx

; 47   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0CObjBaseAttack@@QAE@XZ ; CObjBaseAttack::CObjBaseAttack
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CObjAttack@@6B@

; 48   : 
; 49   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CObjAttack@@QAE@XZ ENDP				; CObjAttack::CObjAttack
_TEXT	ENDS
PUBLIC	??1CObjAttack@@UAE@XZ				; CObjAttack::~CObjAttack
EXTRN	??1CObjBaseAttack@@UAE@XZ:PROC			; CObjBaseAttack::~CObjBaseAttack
; Function compile flags: /Ogtp
;	COMDAT ??1CObjAttack@@UAE@XZ
_TEXT	SEGMENT
??1CObjAttack@@UAE@XZ PROC				; CObjAttack::~CObjAttack, COMDAT
; _this$ = ecx

; 52   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CObjAttack@@6B@

; 53   : 
; 54   : }

  00006	e9 00 00 00 00	 jmp	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
??1CObjAttack@@UAE@XZ ENDP				; CObjAttack::~CObjAttack
_TEXT	ENDS
PUBLIC	_effect$GSCopy$
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_lpObj$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ; CObjAttack::GetAttackDamageWizard
EXTRN	?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetActiveEffect
EXTRN	?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z:PROC	; cSystemOfRage::ExlCritDamage
EXTRN	?gSystemOfRage@@3VcSystemOfRage@@A:BYTE		; gSystemOfRage
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjUpdateAppliedBuffEffect
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
EXTRN	_rand:PROC
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?GetSkillAttr@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillAttr
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?GetDamage@CMagicInf@@QAEHXZ:PROC		; CMagicInf::GetDamage
EXTRN	?g_ShieldSystemOn@@3HA:DWORD			; g_ShieldSystemOn
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__except_handler4:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z DD 0ffffffe4H
	DD	00H
	DD	0ffffff84H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN37@GetAttackD
	DD	FLAT:$LN38@GetAttackD
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z
_TEXT	SEGMENT
_fValue$223436 = -108					; size = 4
_lpObj$GSCopy$ = -104					; size = 4
_effect$GSCopy$ = -100					; size = 4
_subd$ = -96						; size = 4
tv549 = -92						; size = 4
tv547 = -92						; size = 4
_nCritical$223434 = -92					; size = 4
_lpMagic$GSCopy$ = -88					; size = 4
_SkillAddCriticalDamage$223441 = -88			; size = 4
_damage$223428 = -88					; size = 4
_Right$ = -88						; size = 4
tv552 = -86						; size = 2
_ad$ = -84						; size = 4
_SkillHellFire2CountDamageTable$223405 = -80		; size = 52
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_targetDefense$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_effect$ = 20						; size = 4
_bIsOnDuel$ = 24					; size = 4
?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z PROC ; CObjAttack::GetAttackDamageWizard, COMDAT
; _this$ = ecx

; 3996 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00036	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 3997 : 	if ( g_ShieldSystemOn == TRUE )

  00039	89 7d 98	 mov	 DWORD PTR _lpObj$GSCopy$[ebp], edi
  0003c	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]

; 4123 : 		{
; 4124 : 			ad = ( damagemin + (rand()%(subd+1)) ) - targetDefense;

  0003f	89 75 a8	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], esi
  00042	8b 45 14	 mov	 eax, DWORD PTR _effect$[ebp]
  00045	89 45 9c	 mov	 DWORD PTR _effect$GSCopy$[ebp], eax

; 3997 : 	if ( g_ShieldSystemOn == TRUE )

  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, eax ; g_ShieldSystemOn
  00053	75 0c		 jne	 SHORT $LN32@GetAttackD

; 3998 : 	{
; 3999 : 		if ( bIsOnDuel == TRUE )

  00055	39 45 18	 cmp	 DWORD PTR _bIsOnDuel$[ebp], eax
  00058	75 07		 jne	 SHORT $LN32@GetAttackD

; 4000 : 		{
; 4001 : 			bIsOnDuel = FALSE;

  0005a	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _bIsOnDuel$[ebp], 0
$LN32@GetAttackD:

; 4002 : 		}
; 4003 : 	}
; 4004 : 
; 4005 : 	int damagemin;
; 4006 : 	int damagemax;
; 4007 : 	int ad;
; 4008 : 
; 4009 : 	if ( lpMagic->m_Skill == 40 )

  00061	83 7e 08 28	 cmp	 DWORD PTR [esi+8], 40	; 00000028H
  00065	0f 85 a3 00 00
	00		 jne	 $LN31@GetAttackD

; 4010 : 	{
; 4011 : 		if ( lpObj->SkillHellFire2Count >= 0 )
; 4012 : 		{
; 4013 : 			int SkillHellFire2CountDamageTable[13] =
; 4014 : 			{
; 4015 : 				0,	20,	50,	99,	160,

  0006b	33 c9		 xor	 ecx, ecx
  0006d	89 4d b0	 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp], ecx
  00070	c7 45 b4 14 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+4], 20 ; 00000014H
  00077	c7 45 b8 32 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+8], 50 ; 00000032H
  0007e	c7 45 bc 63 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+12], 99 ; 00000063H
  00085	c7 45 c0 a0 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+16], 160 ; 000000a0H

; 4016 : 				225,	325,	425,	550,	700,

  0008c	c7 45 c4 e1 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+20], 225 ; 000000e1H
  00093	c7 45 c8 45 01
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+24], 325 ; 00000145H
  0009a	c7 45 cc a9 01
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+28], 425 ; 000001a9H
  000a1	c7 45 d0 26 02
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+32], 550 ; 00000226H
  000a8	c7 45 d4 bc 02
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+36], 700 ; 000002bcH

; 4017 : 				880,	1090,	1320

  000af	c7 45 d8 70 03
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+40], 880 ; 00000370H
  000b6	c7 45 dc 42 04
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+44], 1090 ; 00000442H

; 4018 : 			};

  000bd	c7 45 e0 28 05
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+48], 1320 ; 00000528H

; 4019 : 			int CountDamage;
; 4020 : 
; 4021 : 			if ( lpObj->SkillHellFire2Count > 12 )

  000c4	8a 87 15 11 00
	00		 mov	 al, BYTE PTR [edi+4373]
  000ca	3c 0c		 cmp	 al, 12			; 0000000cH

; 4022 : 			{
; 4023 : 				CountDamage = 0;
; 4024 : 			}
; 4025 : 			else

  000cc	77 07		 ja	 SHORT $LN28@GetAttackD

; 4026 : 			{
; 4027 : 				CountDamage = SkillHellFire2CountDamageTable[lpObj->SkillHellFire2Count];

  000ce	0f b6 c8	 movzx	 ecx, al
  000d1	8b 4c 8d b0	 mov	 ecx, DWORD PTR _SkillHellFire2CountDamageTable$223405[ebp+ecx*4]
$LN28@GetAttackD:

; 4028 : 			}
; 4029 : 
; 4030 : 			ad = ( lpObj->Strength + lpObj->AddStrength ) / 2 + CountDamage;

  000d5	0f bf 87 20 01
	00 00		 movsx	 eax, WORD PTR [edi+288]
  000dc	0f b7 97 f4 00
	00 00		 movzx	 edx, WORD PTR [edi+244]
  000e3	03 c2		 add	 eax, edx
  000e5	99		 cdq
  000e6	2b c2		 sub	 eax, edx
  000e8	d1 f8		 sar	 eax, 1
  000ea	03 c1		 add	 eax, ecx
  000ec	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 4031 : 			damagemin = ad + lpObj->m_MagicDamageMin;
; 4032 : 			damagemax = ad + lpObj->m_MagicDamageMax;
; 4033 : 
; 4034 : 			damagemin += lpObj->SetOpAddSkillAttack;

  000ef	0f bf 8f 24 11
	00 00		 movsx	 ecx, WORD PTR [edi+4388]
  000f6	8b 9f 68 04 00
	00		 mov	 ebx, DWORD PTR [edi+1128]
  000fc	03 d9		 add	 ebx, ecx
  000fe	03 d8		 add	 ebx, eax

; 4035 : 			damagemax += lpObj->SetOpAddSkillAttack;

  00100	8b b7 6c 04 00
	00		 mov	 esi, DWORD PTR [edi+1132]
  00106	03 f1		 add	 esi, ecx
  00108	03 f0		 add	 esi, eax

; 4036 : 
; 4037 : 			int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  0010a	6a 28		 push	 40			; 00000028H

; 4038 : 
; 4039 : 			if ( SkillAttr != -1 )
; 4040 : 			{
; 4041 : 				if((lpObj->Authority&32) == 32 && (lpObj->pInventory[10].m_Type == ITEMGET(13,42) || lpObj->pInventory[11].m_Type == ITEMGET(13,42))) //season 2.5 add-on
; 4042 : 				{
; 4043 : 					damagemin += (BYTE)255;
; 4044 : 					damagemax += (BYTE)255;
; 4045 : 				}
; 4046 : 			}
; 4047 : 
; 4048 : 			damagemin += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;
; 4049 : 			damagemax += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;
; 4050 : 		}
; 4051 : 	}
; 4052 : 	else

  0010c	eb 2e		 jmp	 SHORT $LN58@GetAttackD
$LN31@GetAttackD:

; 4053 : 	{
; 4054 : 		ad = lpMagic->GetDamage();

  0010e	8b ce		 mov	 ecx, esi
  00110	e8 00 00 00 00	 call	 ?GetDamage@CMagicInf@@QAEHXZ ; CMagicInf::GetDamage
  00115	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 4055 : 
; 4056 : 		damagemin = lpMagic->m_DamageMin + lpObj->m_MagicDamageMin;
; 4057 : 		damagemax = lpMagic->m_DamageMax + lpObj->m_MagicDamageMax;
; 4058 : 
; 4059 : 		damagemin += lpObj->SetOpAddSkillAttack;

  00118	0f bf 87 24 11
	00 00		 movsx	 eax, WORD PTR [edi+4388]
  0011f	8b 9f 68 04 00
	00		 mov	 ebx, DWORD PTR [edi+1128]
  00125	03 5e 0c	 add	 ebx, DWORD PTR [esi+12]
  00128	03 d8		 add	 ebx, eax

; 4060 : 		damagemax += lpObj->SetOpAddSkillAttack;

  0012a	8b b7 6c 04 00
	00		 mov	 esi, DWORD PTR [edi+1132]
  00130	8b 4d a8	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00133	03 71 10	 add	 esi, DWORD PTR [ecx+16]
  00136	03 f0		 add	 esi, eax

; 4061 : 
; 4062 : 		int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  00138	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0013b	50		 push	 eax
$LN58@GetAttackD:
  0013c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00141	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 4063 : 
; 4064 : 		if ( SkillAttr != -1 )

  00146	83 f8 ff	 cmp	 eax, -1
  00149	74 34		 je	 SHORT $LN22@GetAttackD

; 4065 : 		{
; 4066 : 			if((lpObj->Authority&32) == 32 && (lpObj->pInventory[10].m_Type == ITEMGET(13,42) || lpObj->pInventory[11].m_Type == ITEMGET(13,42))) //season 2.5 add-on

  0014b	f6 87 0c 02 00
	00 20		 test	 BYTE PTR [edi+524], 32	; 00000020H
  00152	74 2b		 je	 SHORT $LN22@GetAttackD
  00154	8b 87 24 0e 00
	00		 mov	 eax, DWORD PTR [edi+3620]
  0015a	b9 2a 1a 00 00	 mov	 ecx, 6698		; 00001a2aH
  0015f	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  00166	74 0b		 je	 SHORT $LN21@GetAttackD
  00168	8b d1		 mov	 edx, ecx
  0016a	66 39 90 22 09
	00 00		 cmp	 WORD PTR [eax+2338], dx
  00171	75 0c		 jne	 SHORT $LN22@GetAttackD
$LN21@GetAttackD:

; 4067 : 			{
; 4068 : 				damagemin += (BYTE)255;

  00173	81 c3 ff 00 00
	00		 add	 ebx, 255		; 000000ffH

; 4069 : 				damagemax += (BYTE)255;

  00179	81 c6 ff 00 00
	00		 add	 esi, 255		; 000000ffH
$LN22@GetAttackD:

; 4070 : 			}
; 4071 : 		}
; 4072 : 
; 4073 : 		damagemin += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  0017f	0f bf 87 e4 1f
	00 00		 movsx	 eax, WORD PTR [edi+8164]
  00186	03 d8		 add	 ebx, eax

; 4074 : 		damagemax += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00188	03 f0		 add	 esi, eax

; 4075 : 	}
; 4076 : 
; 4077 : 	CItem * Right = &lpObj->pInventory[0];

  0018a	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  00190	89 4d a8	 mov	 DWORD PTR _Right$[ebp], ecx

; 4078 : 
; 4079 : 	if ( Right->IsItem() )

  00193	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00198	85 c0		 test	 eax, eax
  0019a	0f 84 9b 00 00
	00		 je	 $LN16@GetAttackD

; 4080 : 	{
; 4081 : 		#if(FIX_MG_WIZDMG)
; 4082 : 		if ((Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) ) ||
; 4083 : 			 Right->m_Type >= ITEMGET(0,0) && Right->m_Type < ITEMGET(1,0)) //season4 add-on

  001a0	8b 45 a8	 mov	 eax, DWORD PTR _Right$[ebp]
  001a3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001a7	ba 00 0a 00 00	 mov	 edx, 2560		; 00000a00H
  001ac	66 3b ca	 cmp	 cx, dx
  001af	7c 0a		 jl	 SHORT $LN17@GetAttackD
  001b1	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  001b6	66 3b ca	 cmp	 cx, dx
  001b9	7c 0f		 jl	 SHORT $LN18@GetAttackD
$LN17@GetAttackD:
  001bb	66 85 c9	 test	 cx, cx
  001be	78 7b		 js	 SHORT $LN16@GetAttackD
  001c0	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  001c5	66 3b ca	 cmp	 cx, dx
  001c8	7d 71		 jge	 SHORT $LN16@GetAttackD
$LN18@GetAttackD:

; 4084 : 		{
; 4085 : 			if ( Right->m_IsValidItem  )

  001ca	80 b8 b0 00 00
	00 00		 cmp	 BYTE PTR [eax+176], 0
  001d1	74 68		 je	 SHORT $LN16@GetAttackD

; 4086 : 			{
; 4087 : 				int damage = Right->m_Magic / 2 + Right->m_Level * 2;

  001d3	0f b7 48 20	 movzx	 ecx, WORD PTR [eax+32]
  001d7	d1 e9		 shr	 ecx, 1
  001d9	0f bf 50 08	 movsx	 edx, WORD PTR [eax+8]
  001dd	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  001e0	89 4d a8	 mov	 DWORD PTR _damage$223428[ebp], ecx

; 4088 : 				damage -= (WORD)(Right->m_CurrentDurabilityState * damage);

  001e3	d9 80 a8 00 00
	00		 fld	 DWORD PTR [eax+168]
  001e9	da 4d a8	 fimul	 DWORD PTR _damage$223428[ebp]
  001ec	d9 7d aa	 fnstcw	 WORD PTR tv552[ebp]
  001ef	0f b7 45 aa	 movzx	 eax, WORD PTR tv552[ebp]
  001f3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001f8	89 45 a4	 mov	 DWORD PTR tv549[ebp], eax
  001fb	d9 6d a4	 fldcw	 WORD PTR tv549[ebp]
  001fe	db 5d a4	 fistp	 DWORD PTR tv547[ebp]
  00201	d9 6d aa	 fldcw	 WORD PTR tv552[ebp]
  00204	66 8b 45 a4	 mov	 ax, WORD PTR tv547[ebp]
  00208	0f b7 d0	 movzx	 edx, ax
  0020b	2b ca		 sub	 ecx, edx

; 4089 : 
; 4090 : 				damagemin += damagemin * damage / 100;

  0020d	8b d1		 mov	 edx, ecx
  0020f	0f af d3	 imul	 edx, ebx
  00212	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00217	f7 ea		 imul	 edx
  00219	c1 fa 05	 sar	 edx, 5
  0021c	8b c2		 mov	 eax, edx
  0021e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00221	03 c2		 add	 eax, edx
  00223	03 d8		 add	 ebx, eax

; 4091 : 				damagemax += damagemax * damage / 100;

  00225	0f af ce	 imul	 ecx, esi
  00228	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0022d	f7 e9		 imul	 ecx
  0022f	c1 fa 05	 sar	 edx, 5
  00232	8b ca		 mov	 ecx, edx
  00234	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00237	03 ca		 add	 ecx, edx
  00239	03 f1		 add	 esi, ecx
$LN16@GetAttackD:

; 4092 : 			}
; 4093 : 		}
; 4094 : 		#else
; 4095 : 		if ((Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) ) ||
; 4096 : 			 Right->m_Type == ITEMGET(0,31) ||
; 4097 : 			 Right->m_Type == ITEMGET(0,21) ||
; 4098 : 			 Right->m_Type == ITEMGET(0,23) ||
; 4099 : 			 Right->m_Type == ITEMGET(0,25) ||
; 4100 : 			 Right->m_Type == ITEMGET(0,28)) //season4 add-on
; 4101 : 		{
; 4102 : 			if ( Right->m_IsValidItem  )
; 4103 : 			{
; 4104 : 				int damage = Right->m_Magic / 2 + Right->m_Level * 2;
; 4105 : 				damage -= (WORD)(Right->m_CurrentDurabilityState * damage);
; 4106 : 
; 4107 : 				damagemin += damagemin * damage / 100;
; 4108 : 				damagemax += damagemax * damage / 100;
; 4109 : 			}
; 4110 : 		}
; 4111 : 		#endif
; 4112 : 	}
; 4113 : 
; 4114 : 	int subd = damagemax - damagemin;

  0023b	8b d6		 mov	 edx, esi
  0023d	2b d3		 sub	 edx, ebx
  0023f	89 55 a0	 mov	 DWORD PTR _subd$[ebp], edx

; 4115 : 
; 4116 : 	__try

  00242	9b		 fwait
  00243	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 4119 : 		{
; 4120 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;

  0024a	e8 00 00 00 00	 call	 _rand
  0024f	8b 4d a0	 mov	 ecx, DWORD PTR _subd$[ebp]
  00252	99		 cdq
  00253	41		 inc	 ecx
  00254	f7 f9		 idiv	 ecx

; 4117 : 	{
; 4118 : 		if ( bIsOnDuel )

  00256	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0025a	74 26		 je	 SHORT $LN14@GetAttackD

; 4119 : 		{
; 4120 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;

  0025c	03 d3		 add	 edx, ebx
  0025e	8b ca		 mov	 ecx, edx
  00260	c1 e1 04	 shl	 ecx, 4
  00263	2b ca		 sub	 ecx, edx
  00265	03 c9		 add	 ecx, ecx
  00267	03 c9		 add	 ecx, ecx
  00269	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0026e	f7 e9		 imul	 ecx
  00270	c1 fa 05	 sar	 edx, 5
  00273	8b c2		 mov	 eax, edx
  00275	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00278	03 c2		 add	 eax, edx
  0027a	2b 45 0c	 sub	 eax, DWORD PTR _targetDefense$[ebp]
  0027d	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 4121 : 		}
; 4122 : 		else

  00280	eb 08		 jmp	 SHORT $LN13@GetAttackD
$LN14@GetAttackD:

; 4123 : 		{
; 4124 : 			ad = ( damagemin + (rand()%(subd+1)) ) - targetDefense;

  00282	2b 55 0c	 sub	 edx, DWORD PTR _targetDefense$[ebp]
  00285	03 d3		 add	 edx, ebx
  00287	89 55 ac	 mov	 DWORD PTR _ad$[ebp], edx
$LN13@GetAttackD:

; 4125 : 		}
; 4126 : 
; 4127 : 		int nCritical = lpObj->m_CriticalDamage;

  0028a	8b 9f bc 04 00
	00		 mov	 ebx, DWORD PTR [edi+1212]
  00290	89 5d a4	 mov	 DWORD PTR _nCritical$223434[ebp], ebx

; 4128 : 		// ----
; 4129 : 
; 4130 : 		if( gObjSearchActiveEffect(lpObj, 139) )

  00293	68 8b 00 00 00	 push	 139			; 0000008bH
  00298	57		 push	 edi
  00299	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0029e	83 c4 08	 add	 esp, 8
  002a1	84 c0		 test	 al, al
  002a3	74 16		 je	 SHORT $LN12@GetAttackD

; 4131 : 		{
; 4132 : 			float fValue = lpObj->m_MPSkillOpt.ukn_11C;

  002a5	d9 87 30 27 00
	00		 fld	 DWORD PTR [edi+10032]
  002ab	d9 5d 94	 fstp	 DWORD PTR _fValue$223436[ebp]

; 4133 : 			nCritical += fValue;

  002ae	db 45 a4	 fild	 DWORD PTR _nCritical$223434[ebp]
  002b1	d8 45 94	 fadd	 DWORD PTR _fValue$223436[ebp]
  002b4	e8 00 00 00 00	 call	 __ftol2_sse
  002b9	8b d8		 mov	 ebx, eax
$LN12@GetAttackD:

; 4134 : 		}
; 4135 : 
; 4136 : 		// ----
; 4137 : 		if( nCritical > 0 )

  002bb	85 db		 test	 ebx, ebx
  002bd	0f 8e 99 00 00
	00		 jle	 $LN7@GetAttackD

; 4138 : 
; 4139 : 		//if ( lpObj->m_CriticalDamage > 0 )
; 4140 : 		{
; 4141 : 			if ( (rand()%100) < nCritical )

  002c3	e8 00 00 00 00	 call	 _rand
  002c8	99		 cdq
  002c9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002ce	f7 f9		 idiv	 ecx
  002d0	3b d3		 cmp	 edx, ebx
  002d2	0f 8d 84 00 00
	00		 jge	 $LN7@GetAttackD

; 4142 : 			{
; 4143 : 				if ( bIsOnDuel )

  002d8	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  002dc	74 1e		 je	 SHORT $LN9@GetAttackD

; 4144 : 				{
; 4145 : 					ad = damagemax * 60 / 100 - targetDefense;

  002de	8b ce		 mov	 ecx, esi
  002e0	c1 e1 04	 shl	 ecx, 4
  002e3	2b ce		 sub	 ecx, esi
  002e5	03 c9		 add	 ecx, ecx
  002e7	03 c9		 add	 ecx, ecx
  002e9	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002ee	f7 e9		 imul	 ecx
  002f0	c1 fa 05	 sar	 edx, 5
  002f3	8b c2		 mov	 eax, edx
  002f5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002f8	03 c2		 add	 eax, edx

; 4146 : 				}
; 4147 : 				else

  002fa	eb 02		 jmp	 SHORT $LN59@GetAttackD
$LN9@GetAttackD:

; 4148 : 				{
; 4149 : 					ad = damagemax - targetDefense;

  002fc	8b c6		 mov	 eax, esi
$LN59@GetAttackD:
  002fe	2b 45 0c	 sub	 eax, DWORD PTR _targetDefense$[ebp]
  00301	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 4150 : 				}
; 4151 : 
; 4152 : 				ad += lpObj->SetOpAddCriticalDamage;

  00304	0f bf 8f 2a 11
	00 00		 movsx	 ecx, WORD PTR [edi+4394]
  0030b	03 c1		 add	 eax, ecx
  0030d	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 4153 : 				ad += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  00310	0f bf 97 e2 1f
	00 00		 movsx	 edx, WORD PTR [edi+8162]
  00317	03 c2		 add	 eax, edx
  00319	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 4154 : 
; 4155 : 				int SkillAddCriticalDamage = 0;

  0031c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _SkillAddCriticalDamage$223441[ebp], 0

; 4156 : 				gObjUpdateAppliedBuffEffect(lpObj, AT_INCREASE_CRITICAL_DMG, &SkillAddCriticalDamage, 0);

  00323	6a 00		 push	 0
  00325	8d 45 a8	 lea	 eax, DWORD PTR _SkillAddCriticalDamage$223441[ebp]
  00328	50		 push	 eax
  00329	6a 05		 push	 5
  0032b	57		 push	 edi
  0032c	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  00331	83 c4 10	 add	 esp, 16			; 00000010H

; 4157 : 				ad += SkillAddCriticalDamage;

  00334	8b 4d a8	 mov	 ecx, DWORD PTR _SkillAddCriticalDamage$223441[ebp]
  00337	01 4d ac	 add	 DWORD PTR _ad$[ebp], ecx

; 4158 : 
; 4159 : 				effect = 3;

  0033a	8b 55 9c	 mov	 edx, DWORD PTR _effect$GSCopy$[ebp]
  0033d	c6 02 03	 mov	 BYTE PTR [edx], 3

; 4160 : 
; 4161 : 				if(g_ZtLicense.user.Rage)

  00340	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  00347	74 13		 je	 SHORT $LN7@GetAttackD

; 4162 : 				{
; 4163 : 					gSystemOfRage.ExlCritDamage(lpObj->m_Index, effect, ad);

  00349	8d 45 ac	 lea	 eax, DWORD PTR _ad$[ebp]
  0034c	50		 push	 eax
  0034d	6a 03		 push	 3
  0034f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00351	51		 push	 ecx
  00352	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  00357	e8 00 00 00 00	 call	 ?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z ; cSystemOfRage::ExlCritDamage
$LN7@GetAttackD:

; 4164 : 				}
; 4165 : 			}
; 4166 : 		}
; 4167 : 
; 4168 : 		if ( lpObj->m_ExcelentDamage > 0 )

  0035c	83 bf c0 04 00
	00 00		 cmp	 DWORD PTR [edi+1216], 0
  00363	0f 8e 88 00 00
	00		 jle	 $LN2@GetAttackD

; 4169 : 		{
; 4170 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  00369	e8 00 00 00 00	 call	 _rand
  0036e	99		 cdq
  0036f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00374	f7 f9		 idiv	 ecx
  00376	3b 97 c0 04 00
	00		 cmp	 edx, DWORD PTR [edi+1216]
  0037c	7d 73		 jge	 SHORT $LN2@GetAttackD

; 4173 : 				{
; 4174 : 					ad = damagemax * 60 / 100 - targetDefense;

  0037e	8b ce		 mov	 ecx, esi

; 4171 : 			{
; 4172 : 				if ( bIsOnDuel )

  00380	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00384	74 1a		 je	 SHORT $LN4@GetAttackD

; 4173 : 				{
; 4174 : 					ad = damagemax * 60 / 100 - targetDefense;

  00386	c1 e1 04	 shl	 ecx, 4
  00389	2b ce		 sub	 ecx, esi
  0038b	03 c9		 add	 ecx, ecx
  0038d	03 c9		 add	 ecx, ecx
  0038f	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00394	f7 e9		 imul	 ecx
  00396	c1 fa 05	 sar	 edx, 5
  00399	8b ca		 mov	 ecx, edx
  0039b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0039e	03 ca		 add	 ecx, edx
$LN4@GetAttackD:

; 4175 : 				}
; 4176 : 				else
; 4177 : 				{
; 4178 : 					ad = damagemax - targetDefense;

  003a0	2b 4d 0c	 sub	 ecx, DWORD PTR _targetDefense$[ebp]
  003a3	89 4d ac	 mov	 DWORD PTR _ad$[ebp], ecx

; 4179 : 				}
; 4180 : 
; 4181 : 				ad += damagemax * 20 / 100;

  003a6	8d 34 b6	 lea	 esi, DWORD PTR [esi+esi*4]
  003a9	03 f6		 add	 esi, esi
  003ab	03 f6		 add	 esi, esi
  003ad	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003b2	f7 ee		 imul	 esi
  003b4	c1 fa 05	 sar	 edx, 5
  003b7	8b c2		 mov	 eax, edx
  003b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003bc	03 c2		 add	 eax, edx
  003be	03 c8		 add	 ecx, eax
  003c0	89 4d ac	 mov	 DWORD PTR _ad$[ebp], ecx

; 4182 : 				ad += lpObj->SetOpAddExDamage;

  003c3	0f bf 97 26 11
	00 00		 movsx	 edx, WORD PTR [edi+4390]
  003ca	03 ca		 add	 ecx, edx
  003cc	89 4d ac	 mov	 DWORD PTR _ad$[ebp], ecx

; 4183 : 
; 4184 : 				effect = 2;

  003cf	8b 45 9c	 mov	 eax, DWORD PTR _effect$GSCopy$[ebp]
  003d2	c6 00 02	 mov	 BYTE PTR [eax], 2

; 4185 : 
; 4186 : 				if(g_ZtLicense.user.Rage)

  003d5	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  003dc	74 13		 je	 SHORT $LN2@GetAttackD

; 4187 : 				{
; 4188 : 					gSystemOfRage.ExlCritDamage(lpObj->m_Index, effect, ad);

  003de	8d 4d ac	 lea	 ecx, DWORD PTR _ad$[ebp]
  003e1	51		 push	 ecx
  003e2	6a 02		 push	 2
  003e4	8b 17		 mov	 edx, DWORD PTR [edi]
  003e6	52		 push	 edx
  003e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  003ec	e8 00 00 00 00	 call	 ?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z ; cSystemOfRage::ExlCritDamage
$LN2@GetAttackD:

; 4189 : 				}
; 4190 : 
; 4191 : 			}
; 4192 : 		}
; 4193 : 	}

  003f1	9b		 fwait
  003f2	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  003f9	eb 16		 jmp	 SHORT $LN40@GetAttackD
$LN37@GetAttackD:
$LN60@GetAttackD:

; 4194 : 	__except ( subd=1, 1 )

  003fb	b8 01 00 00 00	 mov	 eax, 1
  00400	89 45 a0	 mov	 DWORD PTR _subd$[ebp], eax
$LN53@GetAttackD:
$LN39@GetAttackD:
  00403	c3		 ret	 0
$LN38@GetAttackD:
  00404	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 4195 : 	{
; 4196 : 
; 4197 : 	}

  00407	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0040e	8b 7d 98	 mov	 edi, DWORD PTR _lpObj$GSCopy$[ebp]
$LN40@GetAttackD:

; 4198 : 
; 4199 : 	int SkillAttack = 0;
; 4200 : 
; 4201 : 	SkillAttack = gObjGetActiveEffect(lpObj, ADD_OPTION_ATTACK_DAMAGE);

  00411	6a 02		 push	 2
  00413	57		 push	 edi
  00414	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  00419	8b f0		 mov	 esi, eax

; 4202 : 	SkillAttack += gObjGetActiveEffect(lpObj, ADD_OPTION_WIZARDRY); //season4 fix

  0041b	6a 0f		 push	 15			; 0000000fH
  0041d	57		 push	 edi
  0041e	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  00423	83 c4 10	 add	 esp, 16			; 00000010H
  00426	03 f0		 add	 esi, eax

; 4203 : 
; 4204 : 	ad += SkillAttack;

  00428	8b 45 ac	 mov	 eax, DWORD PTR _ad$[ebp]
  0042b	03 c6		 add	 eax, esi

; 4205 : 
; 4206 : 	if ( lpObj->m_SkillAttack )

  0042d	83 bf 24 04 00
	00 00		 cmp	 DWORD PTR [edi+1060], 0
  00434	74 03		 je	 SHORT $LN34@GetAttackD

; 4207 : 	{
; 4208 : 		ad += 10;

  00436	83 c0 0a	 add	 eax, 10			; 0000000aH
$LN34@GetAttackD:

; 4209 : 	}
; 4210 : 
; 4211 : 	return ad;
; 4212 : }

  00439	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0043c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00443	59		 pop	 ecx
  00444	5f		 pop	 edi
  00445	5e		 pop	 esi
  00446	5b		 pop	 ebx
  00447	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044a	33 cd		 xor	 ecx, ebp
  0044c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00451	8b e5		 mov	 esp, ebp
  00453	5d		 pop	 ebp
  00454	c2 14 00	 ret	 20			; 00000014H
?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ENDP ; CObjAttack::GetAttackDamageWizard
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z	; gObjDenorantSprite
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z PROC	; gObjDenorantSprite, COMDAT

; 4215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4216 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 4217 : 	{
; 4218 : 		return FALSE;

  0000c	75 40		 jne	 SHORT $LN1@gObjDenora

; 4219 : 	}
; 4220 : 
; 4221 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000e	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00014	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  0001a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001f	85 c0		 test	 eax, eax

; 4222 : 	{
; 4223 : 		return FALSE;

  00021	74 2b		 je	 SHORT $LN1@gObjDenora

; 4224 : 	}
; 4225 : 
; 4226 : 	CItem * Denorant = & lpObj->pInventory[8];

  00023	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]

; 4227 : 
; 4228 : 	if ( Denorant->m_Type == ITEMGET(13,3) )

  00029	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  0002e	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  00035	75 17		 jne	 SHORT $LN1@gObjDenora

; 4229 : 	{
; 4230 : 		if ( Denorant->m_Durability > 0.0f )

  00037	d9 ee		 fldz
  00039	d8 98 c4 06 00
	00		 fcomp	 DWORD PTR [eax+1732]
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 08		 jp	 SHORT $LN1@gObjDenora

; 4231 : 		{
; 4232 : 			return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 4237 : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN1@gObjDenora:

; 4233 : 		}
; 4234 : 	}
; 4235 : 
; 4236 : 	return FALSE;

  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 4237 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ENDP	; gObjDenorantSprite
_TEXT	ENDS
PUBLIC	?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z		; gObjDarkHorse
; Function compile flags: /Ogtp
;	COMDAT ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z PROC		; gObjDarkHorse, COMDAT

; 4240 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4241 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 4242 : 	{
; 4243 : 		return FALSE;

  0000c	75 40		 jne	 SHORT $LN1@gObjDarkHo

; 4244 : 	}
; 4245 : 
; 4246 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000e	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00014	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  0001a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001f	85 c0		 test	 eax, eax

; 4247 : 	{
; 4248 : 		return FALSE;

  00021	74 2b		 je	 SHORT $LN1@gObjDarkHo

; 4249 : 	}
; 4250 : 
; 4251 : 	CItem * Denorant = & lpObj->pInventory[8];

  00023	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]

; 4252 : 
; 4253 : 	if ( Denorant->m_Type == ITEMGET(13,4) )

  00029	b9 04 1a 00 00	 mov	 ecx, 6660		; 00001a04H
  0002e	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  00035	75 17		 jne	 SHORT $LN1@gObjDarkHo

; 4254 : 	{
; 4255 : 		if ( Denorant->m_Durability > 0.0f )

  00037	d9 ee		 fldz
  00039	d8 98 c4 06 00
	00		 fcomp	 DWORD PTR [eax+1732]
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 08		 jp	 SHORT $LN1@gObjDarkHo

; 4256 : 		{
; 4257 : 			return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 4262 : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN1@gObjDarkHo:

; 4258 : 		}
; 4259 : 	}
; 4260 : 
; 4261 : 	return FALSE;

  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 4262 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ENDP		; gObjDarkHorse
_TEXT	ENDS
PUBLIC	?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z		; gObjFenrir
; Function compile flags: /Ogtp
;	COMDAT ?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z PROC		; gObjFenrir, COMDAT

; 4265 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4266 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 4267 : 	{
; 4268 : 		return FALSE;

  0000c	75 40		 jne	 SHORT $LN1@gObjFenrir

; 4269 : 	}
; 4270 : 
; 4271 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000e	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00014	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  0001a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001f	85 c0		 test	 eax, eax

; 4272 : 	{
; 4273 : 		return FALSE;

  00021	74 2b		 je	 SHORT $LN1@gObjFenrir

; 4274 : 	}
; 4275 : 
; 4276 : 	CItem * lpFenrir = & lpObj->pInventory[8];

  00023	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]

; 4277 : 
; 4278 : 	if ( lpFenrir->m_Type == ITEMGET(13,37) )

  00029	b9 25 1a 00 00	 mov	 ecx, 6693		; 00001a25H
  0002e	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  00035	75 17		 jne	 SHORT $LN1@gObjFenrir

; 4279 : 	{
; 4280 : 		if ( lpFenrir->m_Durability > 0.0f )

  00037	d9 ee		 fldz
  00039	d8 98 c4 06 00
	00		 fcomp	 DWORD PTR [eax+1732]
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 08		 jp	 SHORT $LN1@gObjFenrir

; 4281 : 		{
; 4282 : 			return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 4287 : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN1@gObjFenrir:

; 4283 : 		}
; 4284 : 	}
; 4285 : 
; 4286 : 	return FALSE;

  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 4287 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z ENDP		; gObjFenrir
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	__real@4034000000000000
PUBLIC	??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@ ; `string'
PUBLIC	?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage
EXTRN	?GCSendEffectInfo@@YAXHE@Z:PROC			; GCSendEffectInfo
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?g_iDamageDevideToSDRate@@3HA:DWORD		; g_iDamageDevideToSDRate
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT ??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@
CONST	SEGMENT
??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@ DB '[J'
	DB	'ewelOfHarmony][PvP System] Attacker:[%s][%s]-SD Decrease[%d] '
	DB	'SD Ignore[%d] Defender:[%s][%s] SD Increase Option[%d] - SD R'
	DB	'ate[%d]', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_iAttackDamage$ = 16					; size = 4
?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z PROC ; CObjAttack::GetShieldDamage, COMDAT
; _this$ = ecx

; 4290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4291 : 	int iShieldDamage = 0;
; 4292 : 
; 4293 : 	if ( g_ShieldSystemOn == FALSE )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 0 ; g_ShieldSystemOn
  0000a	75 06		 jne	 SHORT $LN12@GetShieldD
$LN22@GetShieldD:

; 4294 : 		return 0;

  0000c	33 c0		 xor	 eax, eax

; 4361 : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN12@GetShieldD:

; 4295 : 
; 4296 : 	if ( iAttackDamage <= 0 )

  00012	8b 4d 10	 mov	 ecx, DWORD PTR _iAttackDamage$[ebp]
  00015	85 c9		 test	 ecx, ecx

; 4297 : 		return 0;

  00017	7e f3		 jle	 SHORT $LN22@GetShieldD

; 4298 : 
; 4299 : 	int iReduceLife = 0;
; 4300 : 	int iReduceShield = 0;
; 4301 : 	int iReduceLifeForEffect = 0; 
; 4302 : 	bool bReduceShieldGage = 0;
; 4303 : 	int iDamageDevideToSDRate = g_iDamageDevideToSDRate;
; 4304 : 	iDamageDevideToSDRate -= lpObj->m_JewelOfHarmonyEffect.HJOpDecreaseSDRate;

  00019	53		 push	 ebx
  0001a	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 4305 : 	iDamageDevideToSDRate += lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddSDRate;

  0001d	0f bf 83 e8 1f
	00 00		 movsx	 eax, WORD PTR [ebx+8168]
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00029	0f bf b7 fc 1f
	00 00		 movsx	 esi, WORD PTR [edi+8188]
  00030	2b f0		 sub	 esi, eax
  00032	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?g_iDamageDevideToSDRate@@3HA ; g_iDamageDevideToSDRate

; 4306 : 
; 4307 : 	if ( iDamageDevideToSDRate < 0 )

  00038	79 04		 jns	 SHORT $LN10@GetShieldD

; 4308 : 		iDamageDevideToSDRate = 0;

  0003a	33 f6		 xor	 esi, esi

; 4309 : 
; 4310 : 	if ( iDamageDevideToSDRate > 100 )

  0003c	eb 0a		 jmp	 SHORT $LN9@GetShieldD
$LN10@GetShieldD:
  0003e	83 fe 64	 cmp	 esi, 100		; 00000064H
  00041	7e 05		 jle	 SHORT $LN9@GetShieldD

; 4311 : 		iDamageDevideToSDRate = 100;

  00043	be 64 00 00 00	 mov	 esi, 100		; 00000064H
$LN9@GetShieldD:

; 4312 : 
; 4313 : 	if ( lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate > 0 )

  00048	0f b7 83 ea 1f
	00 00		 movzx	 eax, WORD PTR [ebx+8170]
  0004f	66 85 c0	 test	 ax, ax
  00052	7e 20		 jle	 SHORT $LN7@GetShieldD

; 4314 : 	{
; 4315 : 		int iRand = rand()%100;

  00054	e8 00 00 00 00	 call	 _rand
  00059	99		 cdq
  0005a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0005f	f7 f9		 idiv	 ecx

; 4316 : 
; 4317 : 		if ( iRand < lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate )

  00061	0f b7 83 ea 1f
	00 00		 movzx	 eax, WORD PTR [ebx+8170]
  00068	0f bf c8	 movsx	 ecx, ax
  0006b	3b d1		 cmp	 edx, ecx

; 4318 : 		{
; 4319 : 			iDamageDevideToSDRate = 0;

  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _iAttackDamage$[ebp]
  00070	7d 02		 jge	 SHORT $LN7@GetShieldD
  00072	33 f6		 xor	 esi, esi
$LN7@GetShieldD:

; 4320 : 		}
; 4321 : 	}
; 4322 : 
; 4323 : 	if ( lpObj->m_JewelOfHarmonyEffect.HJOpDecreaseSDRate ||
; 4324 : 		 lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddSDRate ||
; 4325 : 		 lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate )

  00074	0f b7 93 e8 1f
	00 00		 movzx	 edx, WORD PTR [ebx+8168]
  0007b	66 85 d2	 test	 dx, dx
  0007e	75 0e		 jne	 SHORT $LN5@GetShieldD
  00080	66 39 97 fc 1f
	00 00		 cmp	 WORD PTR [edi+8188], dx
  00087	75 05		 jne	 SHORT $LN5@GetShieldD
  00089	66 85 c0	 test	 ax, ax
  0008c	74 30		 je	 SHORT $LN6@GetShieldD
$LN5@GetShieldD:

; 4326 : 	{
; 4327 : 		LogAddTD("[JewelOfHarmony][PvP System] Attacker:[%s][%s]-SD Decrease[%d] SD Ignore[%d] Defender:[%s][%s] SD Increase Option[%d] - SD Rate[%d]",
; 4328 : 			lpObj->AccountID, lpObj->Name,
; 4329 : 			lpObj->m_JewelOfHarmonyEffect.HJOpDecreaseSDRate,
; 4330 : 			lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate,
; 4331 : 			lpTargetObj->AccountID, lpTargetObj->Name,
; 4332 : 			lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddSDRate,
; 4333 : 			iDamageDevideToSDRate);

  0008e	0f bf 8f fc 1f
	00 00		 movsx	 ecx, WORD PTR [edi+8188]
  00095	56		 push	 esi
  00096	51		 push	 ecx
  00097	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  0009a	51		 push	 ecx
  0009b	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  0009e	51		 push	 ecx
  0009f	98		 cwde
  000a0	50		 push	 eax
  000a1	0f bf ca	 movsx	 ecx, dx
  000a4	51		 push	 ecx
  000a5	8d 53 77	 lea	 edx, DWORD PTR [ebx+119]
  000a8	52		 push	 edx
  000a9	83 c3 6c	 add	 ebx, 108		; 0000006cH
  000ac	53		 push	 ebx
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b8	8b 4d 10	 mov	 ecx, DWORD PTR _iAttackDamage$[ebp]
  000bb	83 c4 24	 add	 esp, 36			; 00000024H
$LN6@GetShieldD:

; 4334 : 	}
; 4335 : 
; 4336 : 	iReduceShield = iAttackDamage * iDamageDevideToSDRate / 100;

  000be	0f af f1	 imul	 esi, ecx
  000c1	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000c6	f7 ee		 imul	 esi

; 4337 : 	iReduceLife = iAttackDamage - iReduceShield;
; 4338 : 
; 4339 : 	if ( (lpTargetObj->iShield-iReduceShield) <0 )

  000c8	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  000ce	c1 fa 05	 sar	 edx, 5
  000d1	8b f2		 mov	 esi, edx
  000d3	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000d6	03 f2		 add	 esi, edx
  000d8	2b ce		 sub	 ecx, esi
  000da	2b c6		 sub	 eax, esi
  000dc	8b d9		 mov	 ebx, ecx
  000de	79 56		 jns	 SHORT $LN1@GetShieldD

; 4340 : 	{
; 4341 : 		iReduceLife += iReduceShield  - lpTargetObj->iShield;

  000e0	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  000e6	2b f0		 sub	 esi, eax
  000e8	03 de		 add	 ebx, esi

; 4342 : 		iReduceShield = lpTargetObj->iShield;

  000ea	8b f0		 mov	 esi, eax

; 4343 : 
; 4344 : 		if ( lpTargetObj->iShield > 0 )

  000ec	85 c0		 test	 eax, eax
  000ee	7e 46		 jle	 SHORT $LN1@GetShieldD

; 4345 : 		{
; 4346 : 			bReduceShieldGage = true;
; 4347 : 		}
; 4348 : 	}
; 4349 : 
; 4350 : 	iReduceLifeForEffect = (int)(( lpTargetObj->MaxLife + lpTargetObj->AddLife ) * 20.0f / 100.0f);
; 4351 : 
; 4352 : 	if ( bReduceShieldGage == true && iReduceLife > iReduceLifeForEffect )

  000f0	db 87 4c 01 00
	00		 fild	 DWORD PTR [edi+332]
  000f6	d8 87 00 01 00
	00		 fadd	 DWORD PTR [edi+256]
  000fc	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4034000000000000
  00102	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00108	e8 00 00 00 00	 call	 __ftol2_sse
  0010d	3b d8		 cmp	 ebx, eax
  0010f	7e 25		 jle	 SHORT $LN1@GetShieldD

; 4353 : 	{
; 4354 : 		if ( !CC_MAP_RANGE(lpTargetObj->MapNumber) )

  00111	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  00118	3c 35		 cmp	 al, 53			; 00000035H
  0011a	74 1a		 je	 SHORT $LN1@GetShieldD
  0011c	3c 12		 cmp	 al, 18			; 00000012H
  0011e	72 09		 jb	 SHORT $LN20@GetShieldD
  00120	b1 17		 mov	 cl, 23			; 00000017H
  00122	3a c8		 cmp	 cl, al
  00124	1b c0		 sbb	 eax, eax
  00126	40		 inc	 eax
  00127	75 0d		 jne	 SHORT $LN1@GetShieldD
$LN20@GetShieldD:

; 4355 : 		{
; 4356 : 			GCSendEffectInfo(lpTargetObj->m_Index, 17);

  00129	8b 17		 mov	 edx, DWORD PTR [edi]
  0012b	6a 11		 push	 17			; 00000011H
  0012d	52		 push	 edx
  0012e	e8 00 00 00 00	 call	 ?GCSendEffectInfo@@YAXHE@Z ; GCSendEffectInfo
  00133	83 c4 08	 add	 esp, 8
$LN1@GetShieldD:

; 4357 : 		}
; 4358 : 	}
; 4359 : 
; 4360 : 	return iReduceShield;

  00136	5f		 pop	 edi
  00137	8b c6		 mov	 eax, esi
  00139	5e		 pop	 esi
  0013a	5b		 pop	 ebx

; 4361 : }

  0013b	5d		 pop	 ebp
  0013c	c2 0c 00	 ret	 12			; 0000000cH
?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ENDP ; CObjAttack::GetShieldDamage
_TEXT	ENDS
PUBLIC	?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ; CObjAttack::GetAttackDamageSummoner
EXTRN	?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z:PROC ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
EXTRN	?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckRequireStatus
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A:BYTE ; g_SkillAdditionInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN46@GetAttackD@2
	DD	FLAT:$LN47@GetAttackD@2
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z
_TEXT	SEGMENT
_subd$ = -48						; size = 4
tv830 = -44						; size = 4
tv823 = -44						; size = 4
tv810 = -44						; size = 4
tv803 = -44						; size = 4
tv802 = -44						; size = 4
tv796 = -44						; size = 4
tv762 = -44						; size = 4
tv760 = -44						; size = 4
tv742 = -44						; size = 4
tv730 = -44						; size = 4
tv718 = -44						; size = 4
tv708 = -44						; size = 4
tv608 = -44						; size = 4
tv446 = -44						; size = 4
_damage$223569 = -44					; size = 4
_fDamage$223562 = -44					; size = 4
_damage$223544 = -44					; size = 4
_Left$223540 = -44					; size = 4
_SkillAttack$ = -44					; size = 4
_ebp2C$ = -44						; size = 4
tv632 = -40						; size = 4
_ebp28$ = -40						; size = 4
_ad$ = -36						; size = 4
tv707 = -32						; size = 4
_damagemin$ = -32					; size = 4
_ebp20$ = -32						; size = 4
_damagemax$ = -28					; size = 4
_ebp24$ = -28						; size = 4
tv765 = -26						; size = 2
tv467 = -26						; size = 2
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_targetDefense$ = 12					; size = 4
_SkillAddCriticalDamage$223588 = 16			; size = 4
_lpMagic$ = 16						; size = 4
_effect$ = 20						; size = 4
_bIsOnDuel$ = 24					; size = 4
?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z PROC ; CObjAttack::GetAttackDamageSummoner, COMDAT
; _this$ = ecx

; 4364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 4365 : 	if ( g_ShieldSystemOn == TRUE )

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	39 05 00 00 00
	00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, eax ; g_ShieldSystemOn
  0003e	75 0c		 jne	 SHORT $LN41@GetAttackD@2

; 4366 : 	{
; 4367 : 		if ( bIsOnDuel == TRUE )

  00040	39 45 18	 cmp	 DWORD PTR _bIsOnDuel$[ebp], eax
  00043	75 07		 jne	 SHORT $LN41@GetAttackD@2

; 4368 : 		{
; 4369 : 			bIsOnDuel = FALSE;

  00045	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _bIsOnDuel$[ebp], 0
$LN41@GetAttackD@2:

; 4370 : 		}
; 4371 : 	}
; 4372 : 
; 4373 : 	float ebp20 = 0;

  0004c	d9 ee		 fldz
  0004e	d9 55 e0	 fst	 DWORD PTR _ebp20$[ebp]

; 4374 : 	float ebp24 = 0;

  00051	d9 55 e4	 fst	 DWORD PTR _ebp24$[ebp]

; 4375 : 	float ebp28 = 0;

  00054	d9 55 d8	 fst	 DWORD PTR _ebp28$[ebp]

; 4376 : 	float ebp2C = 0;

  00057	d9 5d d4	 fstp	 DWORD PTR _ebp2C$[ebp]

; 4377 : 
; 4378 : 	int damagemin; //ebp30
; 4379 : 	int damagemax; //ebp34
; 4380 : 
; 4381 : 	int ad; //ebp38
; 4382 : 
; 4383 : 	int SkillAttack = 0; //ebp3C
; 4384 : 
; 4385 : 	ad = lpMagic->GetDamage();

  0005a	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?GetDamage@CMagicInf@@QAEHXZ ; CMagicInf::GetDamage
  00064	89 45 dc	 mov	 DWORD PTR _ad$[ebp], eax

; 4386 : 
; 4387 : 	switch(lpMagic->m_Skill)

  00067	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006a	05 25 ff ff ff	 add	 eax, -219		; ffffff25H

; 4388 : 	{
; 4389 : 	case 219:
; 4390 : 	case 220:
; 4391 : 	case 221:
; 4392 : 	case 222:
; 4393 : 	case 223:
; 4394 : 	case 224:
; 4395 : 	case 225: //season4 add-on
; 4396 : 		{
; 4397 : 			if(gObjSearchActiveEffect(lpObj, AT_BERSERKER) == 1)

  0006f	6a 51		 push	 81			; 00000051H
  00071	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00074	56		 push	 esi

; 4386 : 
; 4387 : 	switch(lpMagic->m_Skill)

  00075	83 f8 06	 cmp	 eax, 6
  00078	0f 87 78 02 00
	00		 ja	 $LN28@GetAttackD@2

; 4388 : 	{
; 4389 : 	case 219:
; 4390 : 	case 220:
; 4391 : 	case 221:
; 4392 : 	case 222:
; 4393 : 	case 223:
; 4394 : 	case 224:
; 4395 : 	case 225: //season4 add-on
; 4396 : 		{
; 4397 : 			if(gObjSearchActiveEffect(lpObj, AT_BERSERKER) == 1)

  0007e	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00083	83 c4 08	 add	 esp, 8
  00086	3c 01		 cmp	 al, 1
  00088	75 78		 jne	 SHORT $LN37@GetAttackD@2

; 4398 : 			{
; 4399 : 				int BerserkerEffect = gObjGetActiveEffect(lpObj, 31);

  0008a	6a 1f		 push	 31			; 0000001fH
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  00092	83 c4 08	 add	 esp, 8

; 4400 : 				//int Ex_BerserkerPower = GetPrivateProfileInt("Summoner","BerserkerPower",50,"..\\Data\\ZtData\\Skills.ini");
; 4401 : 				//ebp24 = ((float)((lpObj->Energy + lpObj->AddEnergy) / 4) + 0.015) * BerserkerEffect / 100.0; //??
; 4402 : 				//ebp20 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 9) * BerserkerEffect / 100);
; 4403 : 				ebp24 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 4) * g_SkillAdditionInfo.BerserkerProcentDamageMax / 100); //??

  00095	0f bf be 26 01
	00 00		 movsx	 edi, WORD PTR [esi+294]
  0009c	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  000a3	03 f9		 add	 edi, ecx
  000a5	0f b7 1d b8 0b
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3000
  000ac	8b c7		 mov	 eax, edi
  000ae	99		 cdq
  000af	83 e2 03	 and	 edx, 3
  000b2	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  000b5	c1 f9 02	 sar	 ecx, 2
  000b8	0f af cb	 imul	 ecx, ebx
  000bb	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000c0	f7 e9		 imul	 ecx
  000c2	c1 fa 05	 sar	 edx, 5
  000c5	8b c2		 mov	 eax, edx
  000c7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ca	03 c2		 add	 eax, edx
  000cc	89 45 d4	 mov	 DWORD PTR tv830[ebp], eax
  000cf	db 45 d4	 fild	 DWORD PTR tv830[ebp]
  000d2	d9 5d e4	 fstp	 DWORD PTR _ebp24$[ebp]

; 4404 : 				ebp20 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 9) * g_SkillAdditionInfo.BerserkerProcentDamageMax / 100);

  000d5	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  000da	f7 ef		 imul	 edi
  000dc	d1 fa		 sar	 edx, 1
  000de	8b ca		 mov	 ecx, edx
  000e0	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000e3	03 ca		 add	 ecx, edx
  000e5	0f af cb	 imul	 ecx, ebx
  000e8	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000ed	f7 e9		 imul	 ecx
  000ef	c1 fa 05	 sar	 edx, 5
  000f2	8b c2		 mov	 eax, edx
  000f4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f7	03 c2		 add	 eax, edx
  000f9	89 45 d4	 mov	 DWORD PTR tv823[ebp], eax
  000fc	db 45 d4	 fild	 DWORD PTR tv823[ebp]
  000ff	d9 5d e0	 fstp	 DWORD PTR _ebp20$[ebp]
$LN37@GetAttackD@2:

; 4405 : 			}
; 4406 : 
; 4407 : 			if( gObjSearchActiveEffect(lpObj, 150) == true
; 4408 : 				|| gObjSearchActiveEffect(lpObj, 151) == true
; 4409 : 				|| gObjSearchActiveEffect(lpObj, 152) == true )

  00102	68 96 00 00 00	 push	 150			; 00000096H
  00107	56		 push	 esi
  00108	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0010d	83 c4 08	 add	 esp, 8
  00110	3c 01		 cmp	 al, 1
  00112	74 24		 je	 SHORT $LN35@GetAttackD@2
  00114	68 97 00 00 00	 push	 151			; 00000097H
  00119	56		 push	 esi
  0011a	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0011f	83 c4 08	 add	 esp, 8
  00122	3c 01		 cmp	 al, 1
  00124	74 12		 je	 SHORT $LN35@GetAttackD@2
  00126	68 98 00 00 00	 push	 152			; 00000098H
  0012b	56		 push	 esi
  0012c	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00131	83 c4 08	 add	 esp, 8
  00134	3c 01		 cmp	 al, 1
  00136	75 78		 jne	 SHORT $LN36@GetAttackD@2
$LN35@GetAttackD@2:

; 4410 : 			{
; 4411 : 				float iValue = gObjGetActiveEffect(lpObj, 31);	//gObjGetActiveEffect

  00138	6a 1f		 push	 31			; 0000001fH
  0013a	56		 push	 esi
  0013b	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  00140	83 c4 08	 add	 esp, 8

; 4412 : 				// ----
; 4413 : 				if( lpObj->m_MPSkillOpt.ukn_D8 > 0.0f )
; 4414 : 				{
; 4415 : 					iValue += lpObj->m_MPSkillOpt.ukn_D8;
; 4416 : 				}
; 4417 : 				// ----
; 4418 : 				//ebp24 = ((float)((lpObj->Energy + lpObj->AddEnergy) / 4) + 0.015) * iValue / 100.0;
; 4419 : 				//ebp20 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 9) * iValue / 100);
; 4420 : 
; 4421 : 				ebp24 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 4) * g_SkillAdditionInfo.m_BerserkerProcentDamageMax / 100); //??

  00143	0f bf be 26 01
	00 00		 movsx	 edi, WORD PTR [esi+294]
  0014a	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00151	03 fa		 add	 edi, edx
  00153	0f b7 1d c0 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3264
  0015a	8b c7		 mov	 eax, edi
  0015c	99		 cdq
  0015d	83 e2 03	 and	 edx, 3
  00160	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  00163	c1 f9 02	 sar	 ecx, 2
  00166	0f af cb	 imul	 ecx, ebx
  00169	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0016e	f7 e9		 imul	 ecx
  00170	c1 fa 05	 sar	 edx, 5
  00173	8b c2		 mov	 eax, edx
  00175	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00178	03 c2		 add	 eax, edx
  0017a	89 45 d4	 mov	 DWORD PTR tv810[ebp], eax
  0017d	db 45 d4	 fild	 DWORD PTR tv810[ebp]
  00180	d9 5d e4	 fstp	 DWORD PTR _ebp24$[ebp]

; 4422 : 				ebp20 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 9) * g_SkillAdditionInfo.m_BerserkerProcentDamageMax / 100);

  00183	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00188	f7 ef		 imul	 edi
  0018a	d1 fa		 sar	 edx, 1
  0018c	8b ca		 mov	 ecx, edx
  0018e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00191	03 ca		 add	 ecx, edx
  00193	0f af cb	 imul	 ecx, ebx
  00196	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0019b	f7 e9		 imul	 ecx
  0019d	c1 fa 05	 sar	 edx, 5
  001a0	8b c2		 mov	 eax, edx
  001a2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001a5	03 c2		 add	 eax, edx
  001a7	89 45 d4	 mov	 DWORD PTR tv803[ebp], eax
  001aa	db 45 d4	 fild	 DWORD PTR tv803[ebp]
  001ad	d9 5d e0	 fstp	 DWORD PTR _ebp20$[ebp]
$LN36@GetAttackD@2:

; 4423 : 			}
; 4424 : 
; 4425 : 			//damagemin = (int)((float)(lpMagic->m_DamageMin + lpObj->m_iSummonerBookSpellDamageMin) + ebp20);
; 4426 : 			//damagemax = (int)((float)(lpMagic->m_DamageMax + lpObj->m_iSummonerBookSpellDamageMax) + ebp24);
; 4427 : 
; 4428 : 			damagemin = (int)((float)(lpMagic->m_DamageMin + lpObj->m_MagicDamageMin) + ebp20);

  001b0	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  001b6	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  001b9	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  001bc	89 4d d4	 mov	 DWORD PTR tv802[ebp], ecx
  001bf	db 45 d4	 fild	 DWORD PTR tv802[ebp]
  001c2	d8 45 e0	 fadd	 DWORD PTR _ebp20$[ebp]
  001c5	e8 00 00 00 00	 call	 __ftol2_sse
  001ca	8b f8		 mov	 edi, eax
  001cc	89 7d e0	 mov	 DWORD PTR _damagemin$[ebp], edi

; 4429 : 			damagemax = (int)((float)(lpMagic->m_DamageMax + lpObj->m_MagicDamageMax) + ebp24);

  001cf	8b 86 6c 04 00
	00		 mov	 eax, DWORD PTR [esi+1132]
  001d5	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  001d8	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  001db	89 45 d4	 mov	 DWORD PTR tv796[ebp], eax
  001de	db 45 d4	 fild	 DWORD PTR tv796[ebp]
  001e1	d8 45 e4	 fadd	 DWORD PTR _ebp24$[ebp]
  001e4	e8 00 00 00 00	 call	 __ftol2_sse
  001e9	8b d8		 mov	 ebx, eax
  001eb	89 5d e4	 mov	 DWORD PTR _damagemax$[ebp], ebx

; 4430 : 
; 4431 : 
; 4432 : 			if( lpObj->m_MPSkillOpt.MpsMagicMastery2 > 0.0f )

  001ee	d9 ee		 fldz
  001f0	d8 96 cc 26 00
	00		 fcom	 DWORD PTR [esi+9932]
  001f6	df e0		 fnstsw	 ax
  001f8	f6 c4 05	 test	 ah, 5
  001fb	7a 24		 jp	 SHORT $LN33@GetAttackD@2

; 4433 : 			{
; 4434 : 				damagemin += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  001fd	db 45 e0	 fild	 DWORD PTR _damagemin$[ebp]
  00200	d8 86 cc 26 00
	00		 fadd	 DWORD PTR [esi+9932]
  00206	e8 00 00 00 00	 call	 __ftol2_sse
  0020b	89 45 e0	 mov	 DWORD PTR _damagemin$[ebp], eax

; 4435 : 				damagemax += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  0020e	db 45 e4	 fild	 DWORD PTR _damagemax$[ebp]
  00211	d8 86 cc 26 00
	00		 fadd	 DWORD PTR [esi+9932]
  00217	e8 00 00 00 00	 call	 __ftol2_sse
  0021c	8b d8		 mov	 ebx, eax
  0021e	8b 7d e0	 mov	 edi, DWORD PTR _damagemin$[ebp]
$LN33@GetAttackD@2:

; 4436 : 			}
; 4437 : 			// ----
; 4438 : 			if( lpObj->m_MPSkillOpt.MpsMinWizCurseInc > 0.0f )

  00221	d8 9e 00 27 00
	00		 fcomp	 DWORD PTR [esi+9984]
  00227	df e0		 fnstsw	 ax
  00229	f6 c4 05	 test	 ah, 5
  0022c	7a 13		 jp	 SHORT $LN32@GetAttackD@2

; 4439 : 			{
; 4440 : 				damagemin += lpObj->m_MPSkillOpt.MpsMinWizCurseInc;

  0022e	db 45 e0	 fild	 DWORD PTR _damagemin$[ebp]
  00231	d8 86 00 27 00
	00		 fadd	 DWORD PTR [esi+9984]
  00237	e8 00 00 00 00	 call	 __ftol2_sse
  0023c	89 45 e0	 mov	 DWORD PTR _damagemin$[ebp], eax
  0023f	8b f8		 mov	 edi, eax
$LN32@GetAttackD@2:

; 4441 : 			}
; 4442 : 
; 4443 : 
; 4444 : 			CItem * Left = &lpObj->pInventory[1];

  00241	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00247	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  0024d	89 4d d4	 mov	 DWORD PTR _Left$223540[ebp], ecx

; 4445 : 
; 4446 : 			if( Left->IsItem() )

  00250	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00255	85 c0		 test	 eax, eax
  00257	0f 84 8c 00 00
	00		 je	 $LN29@GetAttackD@2

; 4447 : 			{
; 4448 : 				if ( Left->m_Type >= ITEMGET(5,0) && Left->m_Type < ITEMGET(6,0) )

  0025d	8b 45 d4	 mov	 eax, DWORD PTR _Left$223540[ebp]
  00260	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00264	ba 00 0a 00 00	 mov	 edx, 2560		; 00000a00H
  00269	66 3b ca	 cmp	 cx, dx
  0026c	7c 7b		 jl	 SHORT $LN29@GetAttackD@2
  0026e	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  00273	66 3b ca	 cmp	 cx, dx
  00276	7d 71		 jge	 SHORT $LN29@GetAttackD@2

; 4449 : 				{
; 4450 : 					if ( Left->m_IsValidItem )

  00278	80 b8 b0 00 00
	00 00		 cmp	 BYTE PTR [eax+176], 0
  0027f	74 68		 je	 SHORT $LN29@GetAttackD@2

; 4451 : 					{
; 4452 : 						int damage = Left->m_BookSpell / 2 + Left->m_Level * 2;

  00281	0f b7 48 22	 movzx	 ecx, WORD PTR [eax+34]
  00285	d1 e9		 shr	 ecx, 1
  00287	0f bf 50 08	 movsx	 edx, WORD PTR [eax+8]
  0028b	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  0028e	89 4d d4	 mov	 DWORD PTR _damage$223544[ebp], ecx

; 4453 : 						damage -= (WORD)(Left->m_CurrentDurabilityState * damage);

  00291	d9 80 a8 00 00
	00		 fld	 DWORD PTR [eax+168]
  00297	da 4d d4	 fimul	 DWORD PTR _damage$223544[ebp]
  0029a	d9 7d e6	 fnstcw	 WORD PTR tv765[ebp]
  0029d	0f b7 45 e6	 movzx	 eax, WORD PTR tv765[ebp]
  002a1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002a6	89 45 d4	 mov	 DWORD PTR tv762[ebp], eax
  002a9	d9 6d d4	 fldcw	 WORD PTR tv762[ebp]
  002ac	db 5d d4	 fistp	 DWORD PTR tv760[ebp]
  002af	d9 6d e6	 fldcw	 WORD PTR tv765[ebp]
  002b2	66 8b 45 d4	 mov	 ax, WORD PTR tv760[ebp]
  002b6	0f b7 d0	 movzx	 edx, ax
  002b9	2b ca		 sub	 ecx, edx

; 4454 : 
; 4455 : 						damagemin += damagemin * damage / 100;

  002bb	8b d1		 mov	 edx, ecx
  002bd	0f af d7	 imul	 edx, edi
  002c0	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002c5	f7 ea		 imul	 edx
  002c7	c1 fa 05	 sar	 edx, 5
  002ca	8b c2		 mov	 eax, edx
  002cc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002cf	03 c2		 add	 eax, edx
  002d1	03 f8		 add	 edi, eax

; 4456 : 						damagemax += damagemax * damage / 100;

  002d3	0f af cb	 imul	 ecx, ebx
  002d6	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002db	f7 e9		 imul	 ecx
  002dd	c1 fa 05	 sar	 edx, 5
  002e0	8b ca		 mov	 ecx, edx
  002e2	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  002e5	03 ca		 add	 ecx, edx
  002e7	03 d9		 add	 ebx, ecx
$LN29@GetAttackD@2:

; 4457 : 					}
; 4458 : 				}
; 4459 : 			}
; 4460 : 
; 4461 : 			SkillAttack += gObjGetActiveEffect(lpObj, 27);

  002e9	6a 1b		 push	 27			; 0000001bH
  002eb	56		 push	 esi
  002ec	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect

; 4462 : 		}
; 4463 : 		break;

  002f1	e9 a8 02 00 00	 jmp	 $LN64@GetAttackD@2
$LN28@GetAttackD@2:

; 4464 : 	default:
; 4465 : 		{
; 4466 : 			if(gObjSearchActiveEffect(lpObj, AT_BERSERKER) == 1)

  002f6	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  002fb	83 c4 08	 add	 esp, 8
  002fe	3c 01		 cmp	 al, 1
  00300	75 78		 jne	 SHORT $LN27@GetAttackD@2

; 4467 : 			{
; 4468 : 				int BerserkerEffect = gObjGetActiveEffect(lpObj, 31);

  00302	6a 1f		 push	 31			; 0000001fH
  00304	56		 push	 esi
  00305	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  0030a	83 c4 08	 add	 esp, 8

; 4469 : 				//int Ex_BerserkerPower = GetPrivateProfileInt("Summoner","BerserkerPower",50,"..\\Data\\ZtData\\Skills.ini");
; 4470 : 				//ebp28 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 9) * BerserkerEffect / 100);
; 4471 : 				//ebp2C = (float)(((lpObj->Energy + lpObj->AddEnergy) / 4) * BerserkerEffect / 100);
; 4472 : 
; 4473 : 				ebp28 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 9) * g_SkillAdditionInfo.BerserkerProcentDamageMax / 100);

  0030d	0f bf be 26 01
	00 00		 movsx	 edi, WORD PTR [esi+294]
  00314	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  0031b	03 f8		 add	 edi, eax
  0031d	0f b7 1d b8 0b
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3000
  00324	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00329	f7 ef		 imul	 edi
  0032b	d1 fa		 sar	 edx, 1
  0032d	8b ca		 mov	 ecx, edx
  0032f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00332	03 ca		 add	 ecx, edx
  00334	0f af cb	 imul	 ecx, ebx
  00337	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0033c	f7 e9		 imul	 ecx
  0033e	c1 fa 05	 sar	 edx, 5
  00341	8b c2		 mov	 eax, edx
  00343	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00346	03 c2		 add	 eax, edx
  00348	89 45 d4	 mov	 DWORD PTR tv742[ebp], eax
  0034b	db 45 d4	 fild	 DWORD PTR tv742[ebp]
  0034e	d9 5d d8	 fstp	 DWORD PTR _ebp28$[ebp]

; 4474 : 				ebp2C = (float)(((lpObj->Energy + lpObj->AddEnergy) / 4) * g_SkillAdditionInfo.BerserkerProcentDamageMax / 100);

  00351	8b c7		 mov	 eax, edi
  00353	99		 cdq
  00354	83 e2 03	 and	 edx, 3
  00357	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  0035a	c1 f9 02	 sar	 ecx, 2
  0035d	0f af cb	 imul	 ecx, ebx
  00360	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00365	f7 e9		 imul	 ecx
  00367	c1 fa 05	 sar	 edx, 5
  0036a	8b ca		 mov	 ecx, edx
  0036c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0036f	03 ca		 add	 ecx, edx
  00371	89 4d d4	 mov	 DWORD PTR tv730[ebp], ecx
  00374	db 45 d4	 fild	 DWORD PTR tv730[ebp]
  00377	d9 5d d4	 fstp	 DWORD PTR _ebp2C$[ebp]
$LN27@GetAttackD@2:

; 4475 : 			}
; 4476 : 
; 4477 : 			if( gObjSearchActiveEffect(lpObj, 150) == true
; 4478 : 				|| gObjSearchActiveEffect(lpObj, 151) == true
; 4479 : 				|| gObjSearchActiveEffect(lpObj, 152) == true )

  0037a	68 96 00 00 00	 push	 150			; 00000096H
  0037f	56		 push	 esi
  00380	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00385	83 c4 08	 add	 esp, 8
  00388	3c 01		 cmp	 al, 1
  0038a	74 24		 je	 SHORT $LN25@GetAttackD@2
  0038c	68 97 00 00 00	 push	 151			; 00000097H
  00391	56		 push	 esi
  00392	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00397	83 c4 08	 add	 esp, 8
  0039a	3c 01		 cmp	 al, 1
  0039c	74 12		 je	 SHORT $LN25@GetAttackD@2
  0039e	68 98 00 00 00	 push	 152			; 00000098H
  003a3	56		 push	 esi
  003a4	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  003a9	83 c4 08	 add	 esp, 8
  003ac	3c 01		 cmp	 al, 1
  003ae	75 78		 jne	 SHORT $LN26@GetAttackD@2
$LN25@GetAttackD@2:

; 4480 : 			{
; 4481 : 				float iValue = gObjGetActiveEffect(lpObj, 31);

  003b0	6a 1f		 push	 31			; 0000001fH
  003b2	56		 push	 esi
  003b3	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  003b8	83 c4 08	 add	 esp, 8

; 4482 : 				// ----
; 4483 : 				if( lpObj->m_MPSkillOpt.ukn_DC > 0.0f )
; 4484 : 				{
; 4485 : 					iValue += lpObj->m_MPSkillOpt.ukn_DC;
; 4486 : 				}
; 4487 : 				// ----
; 4488 : 
; 4489 : 				//LogAddC(2,"m_BerserkerProcentDamageMax:%d", g_SkillAdditionInfo.m_BerserkerProcentDamageMax);
; 4490 : 
; 4491 : 				ebp28 = (float)(((lpObj->Energy + lpObj->AddEnergy) / 9) * g_SkillAdditionInfo.m_BerserkerProcentDamageMax / 100);

  003bb	0f bf be 26 01
	00 00		 movsx	 edi, WORD PTR [esi+294]
  003c2	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  003c9	03 f8		 add	 edi, eax
  003cb	0f b7 1d c0 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3264
  003d2	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  003d7	f7 ef		 imul	 edi
  003d9	d1 fa		 sar	 edx, 1
  003db	8b ca		 mov	 ecx, edx
  003dd	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  003e0	03 ca		 add	 ecx, edx
  003e2	0f af cb	 imul	 ecx, ebx
  003e5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003ea	f7 e9		 imul	 ecx
  003ec	c1 fa 05	 sar	 edx, 5
  003ef	8b c2		 mov	 eax, edx
  003f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003f4	03 c2		 add	 eax, edx
  003f6	89 45 d4	 mov	 DWORD PTR tv718[ebp], eax
  003f9	db 45 d4	 fild	 DWORD PTR tv718[ebp]
  003fc	d9 5d d8	 fstp	 DWORD PTR _ebp28$[ebp]

; 4492 : 				ebp2C = (float)(((lpObj->Energy + lpObj->AddEnergy) / 4) * g_SkillAdditionInfo.m_BerserkerProcentDamageMax / 100);

  003ff	8b c7		 mov	 eax, edi
  00401	99		 cdq
  00402	83 e2 03	 and	 edx, 3
  00405	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  00408	c1 f9 02	 sar	 ecx, 2
  0040b	0f af cb	 imul	 ecx, ebx
  0040e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00413	f7 e9		 imul	 ecx
  00415	c1 fa 05	 sar	 edx, 5
  00418	8b ca		 mov	 ecx, edx
  0041a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0041d	03 ca		 add	 ecx, edx
  0041f	89 4d d4	 mov	 DWORD PTR tv708[ebp], ecx
  00422	db 45 d4	 fild	 DWORD PTR tv708[ebp]
  00425	d9 5d d4	 fstp	 DWORD PTR _ebp2C$[ebp]
$LN26@GetAttackD@2:

; 4493 : 			}
; 4494 : 
; 4495 : 			damagemin = (int)((float)(lpMagic->m_DamageMin + lpObj->m_MagicDamageMin) + ebp28);

  00428	8b 96 68 04 00
	00		 mov	 edx, DWORD PTR [esi+1128]
  0042e	8b 7d 10	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00431	03 57 0c	 add	 edx, DWORD PTR [edi+12]
  00434	89 55 e0	 mov	 DWORD PTR tv707[ebp], edx
  00437	db 45 e0	 fild	 DWORD PTR tv707[ebp]
  0043a	d8 45 d8	 fadd	 DWORD PTR _ebp28$[ebp]
  0043d	e8 00 00 00 00	 call	 __ftol2_sse
  00442	89 45 e0	 mov	 DWORD PTR _damagemin$[ebp], eax

; 4496 : 			damagemax = (int)((float)(lpMagic->m_DamageMax + lpObj->m_MagicDamageMax) + ebp2C);

  00445	8b 86 6c 04 00
	00		 mov	 eax, DWORD PTR [esi+1132]
  0044b	03 47 10	 add	 eax, DWORD PTR [edi+16]
  0044e	89 45 d8	 mov	 DWORD PTR tv632[ebp], eax
  00451	db 45 d8	 fild	 DWORD PTR tv632[ebp]
  00454	d8 45 d4	 fadd	 DWORD PTR _ebp2C$[ebp]
  00457	e8 00 00 00 00	 call	 __ftol2_sse
  0045c	8b d8		 mov	 ebx, eax
  0045e	89 5d e4	 mov	 DWORD PTR _damagemax$[ebp], ebx

; 4497 : 
; 4498 : 
; 4499 : 			if( g_MasterSkillSystem.CheckRequireStatus(lpMagic->m_Skill) )

  00461	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00464	51		 push	 ecx
  00465	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0046a	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  0046f	85 c0		 test	 eax, eax
  00471	74 31		 je	 SHORT $LN23@GetAttackD@2

; 4500 : 			{
; 4501 : 				float fDamage = g_MasterSkillSystem.GetSkillAttackDamage(lpObj, lpMagic->m_Skill);

  00473	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00476	52		 push	 edx
  00477	56		 push	 esi
  00478	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0047d	e8 00 00 00 00	 call	 ?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
  00482	d9 5d d4	 fstp	 DWORD PTR _fDamage$223562[ebp]

; 4502 : 				damagemin += fDamage;

  00485	db 45 e0	 fild	 DWORD PTR _damagemin$[ebp]
  00488	d9 45 d4	 fld	 DWORD PTR _fDamage$223562[ebp]
  0048b	dc c1		 fadd	 ST(1), ST(0)
  0048d	d9 c9		 fxch	 ST(1)
  0048f	e8 00 00 00 00	 call	 __ftol2_sse
  00494	89 45 e0	 mov	 DWORD PTR _damagemin$[ebp], eax

; 4503 : 				damagemax += fDamage;

  00497	da 45 e4	 fiadd	 DWORD PTR _damagemax$[ebp]
  0049a	e8 00 00 00 00	 call	 __ftol2_sse
  0049f	8b d8		 mov	 ebx, eax
  004a1	89 45 e4	 mov	 DWORD PTR _damagemax$[ebp], eax
$LN23@GetAttackD@2:

; 4504 : 			}
; 4505 : 			// ----
; 4506 : 			if( lpObj->m_MPSkillOpt.MpsMagicMastery2 > 0.0f )

  004a4	d9 ee		 fldz
  004a6	d8 96 cc 26 00
	00		 fcom	 DWORD PTR [esi+9932]
  004ac	df e0		 fnstsw	 ax
  004ae	f6 c4 05	 test	 ah, 5
  004b1	7a 21		 jp	 SHORT $LN22@GetAttackD@2

; 4507 : 			{
; 4508 : 				damagemin += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  004b3	db 45 e0	 fild	 DWORD PTR _damagemin$[ebp]
  004b6	d8 86 cc 26 00
	00		 fadd	 DWORD PTR [esi+9932]
  004bc	e8 00 00 00 00	 call	 __ftol2_sse
  004c1	89 45 e0	 mov	 DWORD PTR _damagemin$[ebp], eax

; 4509 : 				damagemax += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  004c4	db 45 e4	 fild	 DWORD PTR _damagemax$[ebp]
  004c7	d8 86 cc 26 00
	00		 fadd	 DWORD PTR [esi+9932]
  004cd	e8 00 00 00 00	 call	 __ftol2_sse
  004d2	8b d8		 mov	 ebx, eax
$LN22@GetAttackD@2:

; 4510 : 			}
; 4511 : 			// ----
; 4512 : 			if( lpObj->m_MPSkillOpt.MpsMinWizCurseInc > 0.0f )

  004d4	d8 9e 00 27 00
	00		 fcomp	 DWORD PTR [esi+9984]
  004da	df e0		 fnstsw	 ax
  004dc	f6 c4 05	 test	 ah, 5
  004df	7a 11		 jp	 SHORT $LN21@GetAttackD@2

; 4513 : 			{
; 4514 : 				damagemin += lpObj->m_MPSkillOpt.MpsMinWizCurseInc;

  004e1	db 45 e0	 fild	 DWORD PTR _damagemin$[ebp]
  004e4	d8 86 00 27 00
	00		 fadd	 DWORD PTR [esi+9984]
  004ea	e8 00 00 00 00	 call	 __ftol2_sse
  004ef	89 45 e0	 mov	 DWORD PTR _damagemin$[ebp], eax
$LN21@GetAttackD@2:

; 4515 : 			}
; 4516 : 
; 4517 : 
; 4518 : 			CItem * Right = &lpObj->pInventory[0];

  004f2	8b be 24 0e 00
	00		 mov	 edi, DWORD PTR [esi+3620]

; 4519 : 
; 4520 : 			if( Right->IsItem() )

  004f8	8b cf		 mov	 ecx, edi
  004fa	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  004ff	85 c0		 test	 eax, eax
  00501	0f 84 8c 00 00
	00		 je	 $LN18@GetAttackD@2

; 4521 : 			{
; 4522 : 				if ( Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) )

  00507	0f b7 47 06	 movzx	 eax, WORD PTR [edi+6]
  0050b	b9 00 0a 00 00	 mov	 ecx, 2560		; 00000a00H
  00510	66 3b c1	 cmp	 ax, cx
  00513	7c 7e		 jl	 SHORT $LN18@GetAttackD@2
  00515	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  0051a	66 3b c2	 cmp	 ax, dx
  0051d	7d 74		 jge	 SHORT $LN18@GetAttackD@2

; 4523 : 				{
; 4524 : 					if ( Right->m_IsValidItem  )

  0051f	80 bf b0 00 00
	00 00		 cmp	 BYTE PTR [edi+176], 0
  00526	74 6b		 je	 SHORT $LN18@GetAttackD@2

; 4525 : 					{
; 4526 : 						int damage = Right->m_Magic / 2 + Right->m_Level * 2;

  00528	0f b7 47 20	 movzx	 eax, WORD PTR [edi+32]
  0052c	d1 e8		 shr	 eax, 1
  0052e	0f bf 4f 08	 movsx	 ecx, WORD PTR [edi+8]
  00532	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00535	89 4d d4	 mov	 DWORD PTR _damage$223569[ebp], ecx

; 4527 : 						damage -= (WORD)(Right->m_CurrentDurabilityState * damage);

  00538	d9 87 a8 00 00
	00		 fld	 DWORD PTR [edi+168]
  0053e	da 4d d4	 fimul	 DWORD PTR _damage$223569[ebp]
  00541	d9 7d e6	 fnstcw	 WORD PTR tv467[ebp]
  00544	0f b7 45 e6	 movzx	 eax, WORD PTR tv467[ebp]
  00548	0b c2		 or	 eax, edx
  0054a	89 45 d4	 mov	 DWORD PTR tv446[ebp], eax
  0054d	d9 6d d4	 fldcw	 WORD PTR tv446[ebp]
  00550	db 5d d4	 fistp	 DWORD PTR tv608[ebp]
  00553	d9 6d e6	 fldcw	 WORD PTR tv467[ebp]
  00556	66 8b 55 d4	 mov	 dx, WORD PTR tv608[ebp]
  0055a	0f b7 c2	 movzx	 eax, dx
  0055d	2b c8		 sub	 ecx, eax

; 4528 : 
; 4529 : 						damagemin += damagemin * damage / 100;

  0055f	8b d1		 mov	 edx, ecx
  00561	8b 7d e0	 mov	 edi, DWORD PTR _damagemin$[ebp]
  00564	0f af d7	 imul	 edx, edi
  00567	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0056c	f7 ea		 imul	 edx
  0056e	c1 fa 05	 sar	 edx, 5
  00571	8b c2		 mov	 eax, edx
  00573	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00576	03 c2		 add	 eax, edx
  00578	03 f8		 add	 edi, eax
  0057a	89 7d e0	 mov	 DWORD PTR _damagemin$[ebp], edi

; 4530 : 						damagemax += damagemax * damage / 100;

  0057d	0f af cb	 imul	 ecx, ebx
  00580	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00585	f7 e9		 imul	 ecx
  00587	c1 fa 05	 sar	 edx, 5
  0058a	8b ca		 mov	 ecx, edx
  0058c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0058f	03 ca		 add	 ecx, edx
  00591	03 d9		 add	 ebx, ecx
$LN18@GetAttackD@2:

; 4531 : 					}
; 4532 : 				}
; 4533 : 			}
; 4534 : 			
; 4535 : 			SkillAttack += gObjGetActiveEffect(lpObj, ADD_OPTION_WIZARDRY);

  00593	6a 0f		 push	 15			; 0000000fH
  00595	56		 push	 esi
  00596	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  0059b	8b 7d e0	 mov	 edi, DWORD PTR _damagemin$[ebp]
$LN64@GetAttackD@2:
  0059e	89 45 d4	 mov	 DWORD PTR _SkillAttack$[ebp], eax
  005a1	83 c4 08	 add	 esp, 8

; 4536 : 		}
; 4537 : 		break;
; 4538 : 	}
; 4539 : 
; 4540 : 	damagemin += lpObj->SetOpAddSkillAttack;

  005a4	0f bf 86 24 11
	00 00		 movsx	 eax, WORD PTR [esi+4388]
  005ab	03 f8		 add	 edi, eax

; 4541 : 	damagemax += lpObj->SetOpAddSkillAttack;

  005ad	03 d8		 add	 ebx, eax

; 4542 : 
; 4543 : 	int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  005af	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  005b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  005b5	50		 push	 eax
  005b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  005bb	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 4544 : 
; 4545 : 	if ( SkillAttr != -1 )

  005c0	83 f8 ff	 cmp	 eax, -1
  005c3	74 40		 je	 SHORT $LN14@GetAttackD@2

; 4546 : 	{
; 4547 : 		if((lpObj->Authority&32) == 32 && (lpObj->pInventory[10].m_Type == ITEMGET(13,42) || lpObj->pInventory[11].m_Type == ITEMGET(13,42))) //season 2.5 add-on

  005c5	f6 86 0c 02 00
	00 20		 test	 BYTE PTR [esi+524], 32	; 00000020H
  005cc	74 2b		 je	 SHORT $LN16@GetAttackD@2
  005ce	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  005d4	ba 2a 1a 00 00	 mov	 edx, 6698		; 00001a2aH
  005d9	66 39 91 4e 08
	00 00		 cmp	 WORD PTR [ecx+2126], dx
  005e0	74 09		 je	 SHORT $LN15@GetAttackD@2
  005e2	66 39 91 22 09
	00 00		 cmp	 WORD PTR [ecx+2338], dx
  005e9	75 0e		 jne	 SHORT $LN16@GetAttackD@2
$LN15@GetAttackD@2:

; 4548 : 		{
; 4549 : 			damagemin += (BYTE)255;

  005eb	81 c7 ff 00 00
	00		 add	 edi, 255		; 000000ffH

; 4550 : 			damagemax += (BYTE)255;

  005f1	81 c3 ff 00 00
	00		 add	 ebx, 255		; 000000ffH

; 4551 : 		}
; 4552 : 		else

  005f7	eb 0c		 jmp	 SHORT $LN14@GetAttackD@2
$LN16@GetAttackD@2:

; 4553 : 		{
; 4554 : 			damagemin += (BYTE)lpObj->m_AddResistance[SkillAttr];

  005f9	0f b6 84 30 ff
	04 00 00	 movzx	 eax, BYTE PTR [eax+esi+1279]
  00601	03 f8		 add	 edi, eax

; 4555 : 			damagemax += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00603	03 d8		 add	 ebx, eax
$LN14@GetAttackD@2:

; 4556 : 		}
; 4557 : 	}
; 4558 : 
; 4559 : 	damagemin += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00605	0f bf 86 e4 1f
	00 00		 movsx	 eax, WORD PTR [esi+8164]
  0060c	03 f8		 add	 edi, eax
  0060e	89 7d e0	 mov	 DWORD PTR _damagemin$[ebp], edi

; 4560 : 	damagemax += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00611	03 d8		 add	 ebx, eax

; 4561 : 
; 4562 : 	int subd = damagemax - damagemin;

  00613	8b c3		 mov	 eax, ebx
  00615	2b c7		 sub	 eax, edi
  00617	89 45 d0	 mov	 DWORD PTR _subd$[ebp], eax

; 4563 : 
; 4564 : 	__try

  0061a	9b		 fwait
  0061b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 4567 : 		{
; 4568 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  00622	e8 00 00 00 00	 call	 _rand
  00627	8b 4d d0	 mov	 ecx, DWORD PTR _subd$[ebp]
  0062a	99		 cdq
  0062b	41		 inc	 ecx
  0062c	f7 f9		 idiv	 ecx

; 4565 : 	{
; 4566 : 		if ( bIsOnDuel )

  0062e	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00632	74 23		 je	 SHORT $LN12@GetAttackD@2

; 4567 : 		{
; 4568 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  00634	03 d7		 add	 edx, edi
  00636	8b ca		 mov	 ecx, edx
  00638	c1 e1 04	 shl	 ecx, 4
  0063b	2b ca		 sub	 ecx, edx
  0063d	03 c9		 add	 ecx, ecx
  0063f	03 c9		 add	 ecx, ecx
  00641	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00646	f7 e9		 imul	 ecx
  00648	c1 fa 05	 sar	 edx, 5
  0064b	8b fa		 mov	 edi, edx
  0064d	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00650	03 fa		 add	 edi, edx
  00652	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]

; 4569 : 		}
; 4570 : 		else

  00655	eb 08		 jmp	 SHORT $LN65@GetAttackD@2
$LN12@GetAttackD@2:

; 4571 : 		{
; 4572 : 			ad = ( damagemin + (rand()%(subd+1)) ) - targetDefense;

  00657	8b fa		 mov	 edi, edx
  00659	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  0065c	03 7d e0	 add	 edi, DWORD PTR _damagemin$[ebp]
$LN65@GetAttackD@2:
  0065f	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4573 : 		}
; 4574 : 
; 4575 : 		if ( lpObj->m_CriticalDamage > 0 )

  00662	83 be bc 04 00
	00 00		 cmp	 DWORD PTR [esi+1212], 0
  00669	7e 7d		 jle	 SHORT $LN9@GetAttackD@2

; 4576 : 		{
; 4577 : 			if ( (rand()%100) < lpObj->m_CriticalDamage )

  0066b	e8 00 00 00 00	 call	 _rand
  00670	99		 cdq
  00671	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00676	f7 f9		 idiv	 ecx
  00678	3b 96 bc 04 00
	00		 cmp	 edx, DWORD PTR [esi+1212]
  0067e	7d 68		 jge	 SHORT $LN9@GetAttackD@2

; 4578 : 			{
; 4579 : 				if ( bIsOnDuel )

  00680	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00684	74 1e		 je	 SHORT $LN8@GetAttackD@2

; 4580 : 				{
; 4581 : 					ad = damagemax * 60 / 100 - targetDefense;

  00686	8b cb		 mov	 ecx, ebx
  00688	c1 e1 04	 shl	 ecx, 4
  0068b	2b cb		 sub	 ecx, ebx
  0068d	03 c9		 add	 ecx, ecx
  0068f	03 c9		 add	 ecx, ecx
  00691	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00696	f7 e9		 imul	 ecx
  00698	c1 fa 05	 sar	 edx, 5
  0069b	8b fa		 mov	 edi, edx
  0069d	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  006a0	03 fa		 add	 edi, edx

; 4582 : 				}
; 4583 : 				else

  006a2	eb 02		 jmp	 SHORT $LN66@GetAttackD@2
$LN8@GetAttackD@2:

; 4584 : 				{
; 4585 : 					ad = damagemax - targetDefense;

  006a4	8b fb		 mov	 edi, ebx
$LN66@GetAttackD@2:
  006a6	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  006a9	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4586 : 				}
; 4587 : 
; 4588 : 				ad += lpObj->SetOpAddCriticalDamage;

  006ac	0f bf 8e 2a 11
	00 00		 movsx	 ecx, WORD PTR [esi+4394]
  006b3	03 f9		 add	 edi, ecx
  006b5	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4589 : 				ad += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  006b8	0f bf 96 e2 1f
	00 00		 movsx	 edx, WORD PTR [esi+8162]
  006bf	03 fa		 add	 edi, edx
  006c1	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4590 : 
; 4591 : 				int SkillAddCriticalDamage = 0;

  006c4	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _SkillAddCriticalDamage$223588[ebp], 0

; 4592 : 				gObjUpdateAppliedBuffEffect(lpObj, AT_INCREASE_CRITICAL_DMG, &SkillAddCriticalDamage, 0);

  006cb	6a 00		 push	 0
  006cd	8d 45 10	 lea	 eax, DWORD PTR _SkillAddCriticalDamage$223588[ebp]
  006d0	50		 push	 eax
  006d1	6a 05		 push	 5
  006d3	56		 push	 esi
  006d4	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  006d9	83 c4 10	 add	 esp, 16			; 00000010H

; 4593 : 				ad += SkillAddCriticalDamage;

  006dc	03 7d 10	 add	 edi, DWORD PTR _SkillAddCriticalDamage$223588[ebp]
  006df	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4594 : 
; 4595 : 				effect = 3;

  006e2	8b 4d 14	 mov	 ecx, DWORD PTR _effect$[ebp]
  006e5	c6 01 03	 mov	 BYTE PTR [ecx], 3
$LN9@GetAttackD@2:

; 4596 : 			}
; 4597 : 		}
; 4598 : 
; 4599 : 		if ( lpObj->m_ExcelentDamage > 0 )

  006e8	83 be c0 04 00
	00 00		 cmp	 DWORD PTR [esi+1216], 0
  006ef	7e 70		 jle	 SHORT $LN5@GetAttackD@2

; 4600 : 		{
; 4601 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  006f1	e8 00 00 00 00	 call	 _rand
  006f6	99		 cdq
  006f7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  006fc	f7 f9		 idiv	 ecx
  006fe	3b 96 c0 04 00
	00		 cmp	 edx, DWORD PTR [esi+1216]
  00704	7d 5b		 jge	 SHORT $LN5@GetAttackD@2

; 4602 : 			{
; 4603 : 				if ( bIsOnDuel )

  00706	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0070a	74 1e		 je	 SHORT $LN4@GetAttackD@2

; 4604 : 				{
; 4605 : 					ad = damagemax * 60 / 100 - targetDefense;

  0070c	8b cb		 mov	 ecx, ebx
  0070e	c1 e1 04	 shl	 ecx, 4
  00711	2b cb		 sub	 ecx, ebx
  00713	03 c9		 add	 ecx, ecx
  00715	03 c9		 add	 ecx, ecx
  00717	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0071c	f7 e9		 imul	 ecx
  0071e	c1 fa 05	 sar	 edx, 5
  00721	8b fa		 mov	 edi, edx
  00723	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00726	03 fa		 add	 edi, edx

; 4606 : 				}
; 4607 : 				else

  00728	eb 02		 jmp	 SHORT $LN67@GetAttackD@2
$LN4@GetAttackD@2:

; 4608 : 				{
; 4609 : 					ad = damagemax - targetDefense;

  0072a	8b fb		 mov	 edi, ebx
$LN67@GetAttackD@2:
  0072c	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  0072f	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4610 : 				}
; 4611 : 
; 4612 : 				ad += damagemax * 20 / 100;

  00732	8d 1c 9b	 lea	 ebx, DWORD PTR [ebx+ebx*4]
  00735	03 db		 add	 ebx, ebx
  00737	03 db		 add	 ebx, ebx
  00739	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0073e	f7 eb		 imul	 ebx
  00740	c1 fa 05	 sar	 edx, 5
  00743	8b ca		 mov	 ecx, edx
  00745	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00748	03 ca		 add	 ecx, edx
  0074a	03 f9		 add	 edi, ecx
  0074c	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4613 : 				ad += lpObj->SetOpAddExDamage;

  0074f	0f bf 96 26 11
	00 00		 movsx	 edx, WORD PTR [esi+4390]
  00756	03 fa		 add	 edi, edx
  00758	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4614 : 				effect = 2;

  0075b	8b 45 14	 mov	 eax, DWORD PTR _effect$[ebp]
  0075e	c6 00 02	 mov	 BYTE PTR [eax], 2
$LN5@GetAttackD@2:

; 4615 : 			}
; 4616 : 		}
; 4617 : 	}

  00761	9b		 fwait
  00762	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00769	eb 19		 jmp	 SHORT $LN49@GetAttackD@2
$LN46@GetAttackD@2:
$LN68@GetAttackD@2:

; 4618 : 	__except ( subd=1, 1 )

  0076b	b8 01 00 00 00	 mov	 eax, 1
  00770	89 45 d0	 mov	 DWORD PTR _subd$[ebp], eax
$LN63@GetAttackD@2:
$LN48@GetAttackD@2:
  00773	c3		 ret	 0
$LN47@GetAttackD@2:
  00774	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 4619 : 	{
; 4620 : 
; 4621 : 	}

  00777	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0077e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00781	8b 7d dc	 mov	 edi, DWORD PTR _ad$[ebp]
$LN49@GetAttackD@2:

; 4622 : 
; 4623 : 	SkillAttack += gObjGetActiveEffect(lpObj, ADD_OPTION_ATTACK_DAMAGE);

  00784	6a 02		 push	 2
  00786	56		 push	 esi
  00787	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  0078c	83 c4 08	 add	 esp, 8

; 4624 : 
; 4625 : 	ad += SkillAttack;

  0078f	03 45 d4	 add	 eax, DWORD PTR _SkillAttack$[ebp]
  00792	03 f8		 add	 edi, eax
  00794	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi

; 4626 : 
; 4627 : 	if ( lpObj->m_SkillAttack )

  00797	83 be 24 04 00
	00 00		 cmp	 DWORD PTR [esi+1060], 0
  0079e	74 06		 je	 SHORT $LN2@GetAttackD@2

; 4628 : 	{
; 4629 : 		ad += 10;

  007a0	83 c7 0a	 add	 edi, 10			; 0000000aH
  007a3	89 7d dc	 mov	 DWORD PTR _ad$[ebp], edi
$LN2@GetAttackD@2:

; 4630 : 	}
; 4631 : 
; 4632 : 	if( lpObj->m_MPSkillOpt.ukn_DC > 0.0f )

  007a6	d9 ee		 fldz
  007a8	d8 9e fc 26 00
	00		 fcomp	 DWORD PTR [esi+9980]
  007ae	df e0		 fnstsw	 ax
  007b0	f6 c4 05	 test	 ah, 5
  007b3	7a 1a		 jp	 SHORT $LN1@GetAttackD@2

; 4633 : 	{
; 4634 : 		ad += (double)ad * lpObj->m_MPSkillOpt.ukn_DC / 100.0f;

  007b5	db 45 dc	 fild	 DWORD PTR _ad$[ebp]
  007b8	d9 86 fc 26 00
	00		 fld	 DWORD PTR [esi+9980]
  007be	d8 c9		 fmul	 ST(0), ST(1)
  007c0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  007c6	de c1		 faddp	 ST(1), ST(0)
  007c8	e8 00 00 00 00	 call	 __ftol2_sse
  007cd	8b f8		 mov	 edi, eax
$LN1@GetAttackD@2:

; 4635 : 	}
; 4636 : 
; 4637 : 	return ad;

  007cf	8b c7		 mov	 eax, edi

; 4638 : }

  007d1	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  007d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  007db	59		 pop	 ecx
  007dc	5f		 pop	 edi
  007dd	5e		 pop	 esi
  007de	5b		 pop	 ebx
  007df	8b e5		 mov	 esp, ebp
  007e1	5d		 pop	 ebp
  007e2	c2 14 00	 ret	 20			; 00000014H
?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ENDP ; CObjAttack::GetAttackDamageSummoner
_TEXT	ENDS
PUBLIC	?GetBerserkerSkillAttackDamage@CObjAttack@@QAEEPAUOBJECTSTRUCT@@AAH1@Z ; CObjAttack::GetBerserkerSkillAttackDamage
; Function compile flags: /Ogtp
;	COMDAT ?GetBerserkerSkillAttackDamage@CObjAttack@@QAEEPAUOBJECTSTRUCT@@AAH1@Z
_TEXT	SEGMENT
_iBerserkerValue$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_Value1$ = 12						; size = 4
_Value2$ = 16						; size = 4
?GetBerserkerSkillAttackDamage@CObjAttack@@QAEEPAUOBJECTSTRUCT@@AAH1@Z PROC ; CObjAttack::GetBerserkerSkillAttackDamage, COMDAT
; _this$ = ecx

; 4642 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4643 : 	Value1 = (lpObj->Strength + lpObj->AddStrength + lpObj->Dexterity + lpObj->AddDexterity) / 7;

  00003	53		 push	 ebx
  00004	56		 push	 esi

; 4644 : 	Value2 = (lpObj->Strength + lpObj->AddStrength + lpObj->Dexterity + lpObj->AddDexterity) / 4;

  00005	57		 push	 edi

; 4643 : 	Value1 = (lpObj->Strength + lpObj->AddStrength + lpObj->Dexterity + lpObj->AddDexterity) / 7;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00009	0f b7 81 f6 00
	00 00		 movzx	 eax, WORD PTR [ecx+246]
  00010	0f bf 91 22 01
	00 00		 movsx	 edx, WORD PTR [ecx+290]
  00017	0f b7 b1 f4 00
	00 00		 movzx	 esi, WORD PTR [ecx+244]
  0001e	03 f0		 add	 esi, eax
  00020	0f bf 81 20 01
	00 00		 movsx	 eax, WORD PTR [ecx+288]
  00027	03 f2		 add	 esi, edx
  00029	03 f0		 add	 esi, eax
  0002b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00030	f7 ee		 imul	 esi
  00032	03 d6		 add	 edx, esi
  00034	8b 75 0c	 mov	 esi, DWORD PTR _Value1$[ebp]
  00037	c1 fa 02	 sar	 edx, 2
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx
  00041	89 06		 mov	 DWORD PTR [esi], eax

; 4644 : 	Value2 = (lpObj->Strength + lpObj->AddStrength + lpObj->Dexterity + lpObj->AddDexterity) / 4;

  00043	0f b7 91 f6 00
	00 00		 movzx	 edx, WORD PTR [ecx+246]
  0004a	0f b7 81 f4 00
	00 00		 movzx	 eax, WORD PTR [ecx+244]
  00051	03 c2		 add	 eax, edx
  00053	0f bf 91 22 01
	00 00		 movsx	 edx, WORD PTR [ecx+290]
  0005a	03 c2		 add	 eax, edx
  0005c	0f bf 91 20 01
	00 00		 movsx	 edx, WORD PTR [ecx+288]
  00063	03 c2		 add	 eax, edx
  00065	99		 cdq
  00066	8b 7d 10	 mov	 edi, DWORD PTR _Value2$[ebp]
  00069	83 e2 03	 and	 edx, 3
  0006c	03 c2		 add	 eax, edx
  0006e	c1 f8 02	 sar	 eax, 2
  00071	89 07		 mov	 DWORD PTR [edi], eax

; 4645 : 
; 4646 : 	int iBerserkerValue = 0;
; 4647 : 
; 4648 : 	gObjUpdateAppliedBuffEffect(lpObj, AT_BERSERKER, &iBerserkerValue, 0);

  00073	6a 00		 push	 0
  00075	8d 45 08	 lea	 eax, DWORD PTR _iBerserkerValue$[ebp]
  00078	50		 push	 eax
  00079	6a 51		 push	 81			; 00000051H
  0007b	51		 push	 ecx
  0007c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iBerserkerValue$[ebp], 0
  00083	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect

; 4649 : 
; 4650 : 	Value1 = Value1 * iBerserkerValue / 100;

  00088	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008a	8b 5d 08	 mov	 ebx, DWORD PTR _iBerserkerValue$[ebp]
  0008d	0f af cb	 imul	 ecx, ebx
  00090	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00095	f7 e9		 imul	 ecx
  00097	c1 fa 05	 sar	 edx, 5
  0009a	8b ca		 mov	 ecx, edx
  0009c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0009f	03 ca		 add	 ecx, edx
  000a1	89 0e		 mov	 DWORD PTR [esi], ecx

; 4651 : 	Value2 = Value2 * iBerserkerValue / 100;

  000a3	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a5	0f af cb	 imul	 ecx, ebx
  000a8	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000ad	f7 e9		 imul	 ecx
  000af	c1 fa 05	 sar	 edx, 5
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	8b c2		 mov	 eax, edx
  000b7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ba	03 c2		 add	 eax, edx
  000bc	89 07		 mov	 DWORD PTR [edi], eax
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi

; 4652 : 
; 4653 : 	return 1;

  000c0	b0 01		 mov	 al, 1
  000c2	5b		 pop	 ebx

; 4654 : }

  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
?GetBerserkerSkillAttackDamage@CObjAttack@@QAEEPAUOBJECTSTRUCT@@AAH1@Z ENDP ; CObjAttack::GetBerserkerSkillAttackDamage
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCObjAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCObjAttack@@UAEPAXI@Z PROC				; CObjAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CObjAttack@@UAE@XZ	; CObjAttack::~CObjAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCObjAttack@@UAEPAXI@Z ENDP				; CObjAttack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z ; CObjAttack::GetAttackDamage
EXTRN	?GetDetailItemType@CItem@@QAEHXZ:PROC		; CItem::GetDetailItemType
EXTRN	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
EXTRN	?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CObjBaseAttack::GetPartyMemberCount
EXTRN	?DefMagicInf@@3PAVCMagicInf@@A:BYTE		; DefMagicInf
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffa8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN109@GetAttackD@3
	DD	FLAT:$LN110@GetAttackD@3
	DD	0fffffffeH
	DD	FLAT:$LN113@GetAttackD@3
	DD	FLAT:$LN114@GetAttackD@3
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_Right$ = -72						; size = 4
_SkillWeakness$ = -68					; size = 4
_SkillAddCriticalDamage$223310 = -64			; size = 4
_this$ = -64						; size = 4
_cDamage$223263 = -60					; size = 4
_bTwoHandWeapon$ = -56					; size = 4
_Left$ = -52						; size = 4
tv1506 = -48						; size = 4
tv1055 = -48						; size = 4
tv1053 = -48						; size = 4
_iValue2$223305 = -48					; size = 4
_sub$ = -44						; size = 4
tv1057 = -40						; size = 4
_SkillRightMaxDamage$ = -40				; size = 4
_SkillLeftMaxDamage$ = -36				; size = 4
_SkillRightMinDamage$ = -32				; size = 4
_SkillLeftMinDamage$ = -28				; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
tv1075 = 12						; size = 4
_ad$ = 12						; size = 4
_targetDefense$ = 12					; size = 4
_effect$ = 16						; size = 4
_nAddAttackDamageRight$ = 20				; size = 4
_bIsOnDuel$ = 20					; size = 4
_nAddAttackDamageLeft$ = 24				; size = 4
_iValue1$223304 = 24					; size = 4
_lpMagic$ = 24						; size = 4
?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z PROC ; CObjAttack::GetAttackDamage, COMDAT
; _this$ = ecx

; 3514 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 38	 sub	 esp, 56			; 00000038H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 3515 : 	if ( g_ShieldSystemOn == TRUE )

  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	39 15 00 00 00
	00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, edx ; g_ShieldSystemOn
  00041	75 0c		 jne	 SHORT $LN104@GetAttackD@3

; 3516 : 	{
; 3517 : 		if ( bIsOnDuel == TRUE )

  00043	39 55 14	 cmp	 DWORD PTR _bIsOnDuel$[ebp], edx
  00046	75 07		 jne	 SHORT $LN104@GetAttackD@3

; 3518 : 		{
; 3519 : 			bIsOnDuel = FALSE;

  00048	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _bIsOnDuel$[ebp], 0
$LN104@GetAttackD@3:

; 3520 : 		}
; 3521 : 	}
; 3522 : 
; 3523 : 	int ad;
; 3524 : 	int sub;
; 3525 : 	int SkillRightMaxDamage =0;

  0004f	33 ff		 xor	 edi, edi
  00051	33 db		 xor	 ebx, ebx
  00053	89 5d d8	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], ebx

; 3526 : 	int SkillRightMinDamage =0;

  00056	89 7d e0	 mov	 DWORD PTR _SkillRightMinDamage$[ebp], edi

; 3527 : 	int SkillLeftMaxDamage =0;

  00059	89 7d dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], edi

; 3528 : 	int SkillLeftMinDamage =0;

  0005c	89 7d e4	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], edi

; 3529 : 	CItem * Right = &lpObj->pInventory[0];

  0005f	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00062	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  00068	8b c8		 mov	 ecx, eax
  0006a	89 4d b8	 mov	 DWORD PTR _Right$[ebp], ecx

; 3530 : 	CItem * Left = &lpObj->pInventory[1];

  0006d	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  00072	89 45 cc	 mov	 DWORD PTR _Left$[ebp], eax

; 3531 : 	BOOL bTwoHandWeapon = FALSE;

  00075	89 5d c8	 mov	 DWORD PTR _bTwoHandWeapon$[ebp], ebx

; 3532 : 
; 3533 : 	if ( lpObj->Type == OBJ_MONSTER || lpObj->Type == OBJ_NPC )

  00078	0f b7 46 68	 movzx	 eax, WORD PTR [esi+104]
  0007c	83 f8 02	 cmp	 eax, 2
  0007f	0f 84 2f 05 00
	00		 je	 $LN102@GetAttackD@3
  00085	83 f8 03	 cmp	 eax, 3
  00088	0f 84 26 05 00
	00		 je	 $LN102@GetAttackD@3

; 3540 : 	}
; 3541 : 	else
; 3542 : 	{
; 3543 : 		int cDamage=0;

  0008e	89 5d c4	 mov	 DWORD PTR _cDamage$223263[ebp], ebx

; 3544 : 
; 3545 : 		if ( lpObj->Class == CLASS_DARKLORD ||
; 3546 : 			 lpObj->Class == CLASS_KNIGHT   ||
; 3547 : #ifdef MONK
; 3548 : 			 lpObj->Class == CLASS_MONK ||
; 3549 : #endif
; 3550 : 			 lpObj->Class == CLASS_MAGUMSA )

  00091	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00098	83 f8 04	 cmp	 eax, 4
  0009b	74 0f		 je	 SHORT $LN99@GetAttackD@3
  0009d	66 3b c2	 cmp	 ax, dx
  000a0	74 0a		 je	 SHORT $LN99@GetAttackD@3
  000a2	83 f8 06	 cmp	 eax, 6
  000a5	74 05		 je	 SHORT $LN99@GetAttackD@3
  000a7	83 f8 03	 cmp	 eax, 3
  000aa	75 3e		 jne	 SHORT $LN97@GetAttackD@3
$LN99@GetAttackD@3:

; 3551 : 		{
; 3552 : 			if ( Right->m_Type >= ITEMGET(0,0) && Right->m_Type < ITEMGET(4,0) &&
; 3553 : 				 Left->m_Type >= ITEMGET(0,0) && Left->m_Type < ITEMGET(4,0) )

  000ac	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  000b0	66 85 c0	 test	 ax, ax
  000b3	78 35		 js	 SHORT $LN97@GetAttackD@3
  000b5	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  000ba	66 3b c2	 cmp	 ax, dx
  000bd	7d 2b		 jge	 SHORT $LN97@GetAttackD@3
  000bf	8b 45 cc	 mov	 eax, DWORD PTR _Left$[ebp]
  000c2	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  000c6	66 85 c0	 test	 ax, ax
  000c9	78 1f		 js	 SHORT $LN97@GetAttackD@3
  000cb	66 3b c2	 cmp	 ax, dx
  000ce	7d 1a		 jge	 SHORT $LN97@GetAttackD@3

; 3554 : 			{
; 3555 : 				if ( Right->m_IsValidItem && Left->m_IsValidItem )

  000d0	38 99 b0 00 00
	00		 cmp	 BYTE PTR [ecx+176], bl
  000d6	74 12		 je	 SHORT $LN97@GetAttackD@3
  000d8	8b 45 cc	 mov	 eax, DWORD PTR _Left$[ebp]
  000db	38 98 b0 00 00
	00		 cmp	 BYTE PTR [eax+176], bl
  000e1	74 07		 je	 SHORT $LN97@GetAttackD@3

; 3556 : 				{
; 3557 : 					bTwoHandWeapon = TRUE;

  000e3	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _bTwoHandWeapon$[ebp], 1
$LN97@GetAttackD@3:

; 3558 : 				}
; 3559 : 			}
; 3560 : 		}
; 3561 : 
; 3562 : 		if ( lpMagic )

  000ea	8b 45 18	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000ed	85 c0		 test	 eax, eax
  000ef	0f 84 94 02 00
	00		 je	 $LN79@GetAttackD@3

; 3563 : 		{
; 3564 : 			if ( lpMagic ->m_Skill == 60 && lpObj->SkillLongSpearChange )

  000f5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f8	83 f9 3c	 cmp	 ecx, 60			; 0000003cH
  000fb	75 15		 jne	 SHORT $LN95@GetAttackD@3
  000fd	38 9e 7a 12 00
	00		 cmp	 BYTE PTR [esi+4730], bl
  00103	74 0d		 je	 SHORT $LN95@GetAttackD@3

; 3565 : 			{
; 3566 : 				SkillRightMaxDamage = DefMagicInf[66].m_DamageMax;

  00105	8b 1d 40 06 00
	00		 mov	 ebx, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A+1600

; 3567 : 				SkillRightMinDamage = DefMagicInf[66].m_DamageMin;

  0010b	a1 3c 06 00 00	 mov	 eax, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A+1596

; 3568 : 			}
; 3569 : 			else

  00110	eb 06		 jmp	 SHORT $LN168@GetAttackD@3
$LN95@GetAttackD@3:

; 3570 : 			{
; 3571 : 				SkillRightMaxDamage = lpMagic->m_DamageMax;

  00112	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 3572 : 				SkillRightMinDamage = lpMagic->m_DamageMin;

  00115	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$LN168@GetAttackD@3:
  00118	89 45 e0	 mov	 DWORD PTR _SkillRightMinDamage$[ebp], eax

; 3573 : 			}
; 3574 : 
; 3575 : 			if ( bTwoHandWeapon == FALSE )

  0011b	39 7d c8	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], edi
  0011e	75 05		 jne	 SHORT $LN93@GetAttackD@3

; 3576 : 			{
; 3577 : 				SkillLeftMaxDamage = SkillRightMaxDamage;

  00120	8b fb		 mov	 edi, ebx

; 3578 : 				SkillLeftMinDamage = SkillRightMinDamage;

  00122	89 45 e4	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], eax
$LN93@GetAttackD@3:

; 3579 : 			}
; 3580 : 
; 3581 : 			SkillRightMaxDamage += lpObj->SetOpAddSkillAttack;

  00125	0f bf 86 24 11
	00 00		 movsx	 eax, WORD PTR [esi+4388]
  0012c	03 d8		 add	 ebx, eax

; 3582 : 			SkillRightMinDamage += lpObj->SetOpAddSkillAttack;

  0012e	01 45 e0	 add	 DWORD PTR _SkillRightMinDamage$[ebp], eax

; 3583 : 			SkillLeftMaxDamage += lpObj->SetOpAddSkillAttack;

  00131	03 f8		 add	 edi, eax

; 3584 : 			SkillLeftMinDamage += lpObj->SetOpAddSkillAttack;

  00133	01 45 e4	 add	 DWORD PTR _SkillLeftMinDamage$[ebp], eax

; 3585 : 
; 3586 : 			int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  00136	51		 push	 ecx
  00137	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0013c	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 3587 : 
; 3588 : 			if ( SkillAttr != -1 )

  00141	83 f8 ff	 cmp	 eax, -1
  00144	74 3f		 je	 SHORT $LN89@GetAttackD@3

; 3589 : 			{
; 3590 : 				if((lpObj->Authority&32) == 32 && (lpObj->pInventory[10].m_Type == ITEMGET(13,42) || lpObj->pInventory[11].m_Type == ITEMGET(13,42))) //season 2.5 add-on

  00146	f6 86 0c 02 00
	00 20		 test	 BYTE PTR [esi+524], 32	; 00000020H
  0014d	74 24		 je	 SHORT $LN91@GetAttackD@3
  0014f	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00155	ba 2a 1a 00 00	 mov	 edx, 6698		; 00001a2aH
  0015a	66 39 91 4e 08
	00 00		 cmp	 WORD PTR [ecx+2126], dx
  00161	74 09		 je	 SHORT $LN90@GetAttackD@3
  00163	66 39 91 22 09
	00 00		 cmp	 WORD PTR [ecx+2338], dx
  0016a	75 07		 jne	 SHORT $LN91@GetAttackD@3
$LN90@GetAttackD@3:

; 3591 : 				{
; 3592 : 					SkillRightMaxDamage += (BYTE)255;

  0016c	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH

; 3593 : 					SkillRightMinDamage += (BYTE)255;
; 3594 : 					SkillLeftMaxDamage  += (BYTE)255;
; 3595 : 					SkillLeftMinDamage  += (BYTE)255;
; 3596 : 				}
; 3597 : 				else

  00171	eb 08		 jmp	 SHORT $LN169@GetAttackD@3
$LN91@GetAttackD@3:

; 3598 : 				{
; 3599 : 					SkillRightMaxDamage += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00173	0f b6 84 30 ff
	04 00 00	 movzx	 eax, BYTE PTR [eax+esi+1279]
$LN169@GetAttackD@3:
  0017b	03 d8		 add	 ebx, eax

; 3600 : 					SkillRightMinDamage += (BYTE)lpObj->m_AddResistance[SkillAttr];

  0017d	01 45 e0	 add	 DWORD PTR _SkillRightMinDamage$[ebp], eax

; 3601 : 					SkillLeftMaxDamage  += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00180	03 f8		 add	 edi, eax

; 3602 : 					SkillLeftMinDamage  += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00182	01 45 e4	 add	 DWORD PTR _SkillLeftMinDamage$[ebp], eax
$LN89@GetAttackD@3:

; 3603 : 				}
; 3604 : 			}
; 3605 : 
; 3606 : 			SkillRightMaxDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00185	0f bf 86 e4 1f
	00 00		 movsx	 eax, WORD PTR [esi+8164]
  0018c	03 d8		 add	 ebx, eax
  0018e	89 5d d8	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], ebx

; 3607 : 			SkillRightMinDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00191	01 45 e0	 add	 DWORD PTR _SkillRightMinDamage$[ebp], eax

; 3608 : 			SkillLeftMaxDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00194	03 f8		 add	 edi, eax
  00196	89 7d dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], edi

; 3609 : 			SkillLeftMinDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00199	01 45 e4	 add	 DWORD PTR _SkillLeftMinDamage$[ebp], eax

; 3610 : 
; 3611 : 			if ( lpMagic->m_Skill == 65 )

  0019c	8b 45 18	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0019f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001a2	83 f8 41	 cmp	 eax, 65			; 00000041H
  001a5	75 36		 jne	 SHORT $LN88@GetAttackD@3

; 3612 : 			{
; 3613 : 				int iPartyCount = this->GetPartyMemberCount(lpObj);

  001a7	56		 push	 esi
  001a8	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ab	e8 00 00 00 00	 call	 ?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::GetPartyMemberCount
  001b0	8b c8		 mov	 ecx, eax

; 3614 : 				int addskilldamage = ( lpObj->Leadership + lpObj->AddLeadership ) / 10 + ( iPartyCount * 50 );

  001b2	0f b7 96 1a 01
	00 00		 movzx	 edx, WORD PTR [esi+282]
  001b9	0f b7 86 18 01
	00 00		 movzx	 eax, WORD PTR [esi+280]
  001c0	03 d0		 add	 edx, eax
  001c2	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001c7	f7 ea		 imul	 edx
  001c9	c1 fa 02	 sar	 edx, 2
  001cc	8b c2		 mov	 eax, edx
  001ce	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d1	03 c2		 add	 eax, edx
  001d3	6b c9 32	 imul	 ecx, 50			; 00000032H
  001d6	03 c1		 add	 eax, ecx

; 3615 : 
; 3616 : 				SkillRightMaxDamage += addskilldamage;
; 3617 : 				SkillRightMinDamage += addskilldamage;
; 3618 : 				SkillLeftMaxDamage += addskilldamage;
; 3619 : 				SkillLeftMinDamage += addskilldamage;

  001d8	e9 4f 01 00 00	 jmp	 $LN170@GetAttackD@3
$LN88@GetAttackD@3:

; 3620 : 			}
; 3621 : 			else if( lpMagic->m_Skill == 62 || g_MasterSkillSystem.GetBaseMasterLevelSkill(lpMagic->m_Skill) == 515) //season3 add-on

  001dd	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  001e0	0f 84 d7 00 00
	00		 je	 $LN85@GetAttackD@3
  001e6	50		 push	 eax
  001e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  001ec	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  001f1	3d 03 02 00 00	 cmp	 eax, 515		; 00000203H
  001f6	0f 84 c1 00 00
	00		 je	 $LN85@GetAttackD@3

; 3631 : 				}
; 3632 : 			}
; 3633 : 			else if ( lpObj->Class == CLASS_DARKLORD && lpMagic->m_Skill == 238) //season4 add-on

  001fc	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00203	83 f8 04	 cmp	 eax, 4
  00206	0f 85 30 01 00
	00		 jne	 $LN84@GetAttackD@3
  0020c	8b 4d 18	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0020f	81 79 08 ee 00
	00 00		 cmp	 DWORD PTR [ecx+8], 238	; 000000eeH
  00216	75 50		 jne	 SHORT $LN82@GetAttackD@3

; 3634 : 			{
; 3635 : 				int iadddamage = ( lpObj->Strength + lpObj->AddStrength ) / 30 + ( lpObj->Energy + lpObj->AddEnergy ) / 55;	// #formula

  00218	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  0021f	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00226	03 ca		 add	 ecx, edx
  00228	b8 95 20 4f 09	 mov	 eax, 156180629		; 094f2095H
  0022d	f7 e9		 imul	 ecx
  0022f	d1 fa		 sar	 edx, 1
  00231	8b c2		 mov	 eax, edx
  00233	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00236	03 c2		 add	 eax, edx
  00238	0f bf 8e 20 01
	00 00		 movsx	 ecx, WORD PTR [esi+288]
  0023f	0f b7 96 f4 00
	00 00		 movzx	 edx, WORD PTR [esi+244]
  00246	03 ca		 add	 ecx, edx
  00248	89 45 d8	 mov	 DWORD PTR tv1057[ebp], eax
  0024b	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00250	f7 e9		 imul	 ecx
  00252	03 d1		 add	 edx, ecx
  00254	c1 fa 04	 sar	 edx, 4
  00257	8b c2		 mov	 eax, edx
  00259	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0025c	8b 4d d8	 mov	 ecx, DWORD PTR tv1057[ebp]
  0025f	03 ca		 add	 ecx, edx
  00261	03 c1		 add	 eax, ecx

; 3636 : 
; 3637 : 				SkillRightMaxDamage += iadddamage;
; 3638 : 				SkillRightMinDamage += iadddamage;
; 3639 : 				SkillLeftMaxDamage += iadddamage;
; 3640 : 				SkillLeftMinDamage += iadddamage;

  00263	e9 c4 00 00 00	 jmp	 $LN170@GetAttackD@3
$LN82@GetAttackD@3:

; 3641 : 			}
; 3642 : 			else if ( lpObj->Class == CLASS_DARKLORD )

  00268	83 f8 04	 cmp	 eax, 4
  0026b	0f 85 cb 00 00
	00		 jne	 $LN84@GetAttackD@3

; 3643 : 			{
; 3644 : 				int iadddamage = ( lpObj->Strength + lpObj->AddStrength ) / 25 + ( lpObj->Energy + lpObj->AddEnergy ) / 50;	// #formula

  00271	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  00278	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  0027f	03 c8		 add	 ecx, eax
  00281	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00286	f7 e9		 imul	 ecx
  00288	c1 fa 04	 sar	 edx, 4
  0028b	8b c2		 mov	 eax, edx
  0028d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00290	03 c2		 add	 eax, edx
  00292	0f bf 8e 20 01
	00 00		 movsx	 ecx, WORD PTR [esi+288]
  00299	0f b7 96 f4 00
	00 00		 movzx	 edx, WORD PTR [esi+244]
  002a0	03 ca		 add	 ecx, edx
  002a2	89 45 d0	 mov	 DWORD PTR tv1055[ebp], eax
  002a5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002aa	f7 e9		 imul	 ecx
  002ac	c1 fa 03	 sar	 edx, 3
  002af	8b c2		 mov	 eax, edx
  002b1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002b4	8b 4d d0	 mov	 ecx, DWORD PTR tv1055[ebp]
  002b7	03 ca		 add	 ecx, edx
  002b9	03 c1		 add	 eax, ecx

; 3645 : 
; 3646 : 				SkillRightMaxDamage += iadddamage;
; 3647 : 				SkillRightMinDamage += iadddamage;
; 3648 : 				SkillLeftMaxDamage += iadddamage;
; 3649 : 				SkillLeftMinDamage += iadddamage;

  002bb	eb 6f		 jmp	 SHORT $LN170@GetAttackD@3
$LN85@GetAttackD@3:

; 3622 : 			{
; 3623 : 				if ( lpObj->pInventory[8].m_Type == ITEMGET(13,4) )

  002bd	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  002c3	b9 04 1a 00 00	 mov	 ecx, 6660		; 00001a04H
  002c8	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  002cf	75 6b		 jne	 SHORT $LN84@GetAttackD@3

; 3624 : 				{
; 3625 : 					int addskilldamage = ( lpObj->Strength + lpObj->AddStrength ) / 10 + ( lpObj->Leadership + lpObj->AddLeadership ) / 5 + lpObj->pInventory[8].m_PetItem_Level * 10;

  002d1	0f b7 8e 1a 01
	00 00		 movzx	 ecx, WORD PTR [esi+282]
  002d8	0f b7 96 18 01
	00 00		 movzx	 edx, WORD PTR [esi+280]
  002df	03 ca		 add	 ecx, edx
  002e1	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  002e6	f7 e9		 imul	 ecx
  002e8	d1 fa		 sar	 edx, 1
  002ea	8b c2		 mov	 eax, edx
  002ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ef	03 c2		 add	 eax, edx
  002f1	0f bf 8e 20 01
	00 00		 movsx	 ecx, WORD PTR [esi+288]
  002f8	0f b7 96 f4 00
	00 00		 movzx	 edx, WORD PTR [esi+244]
  002ff	03 ca		 add	 ecx, edx
  00301	89 45 d0	 mov	 DWORD PTR tv1053[ebp], eax
  00304	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00309	f7 e9		 imul	 ecx
  0030b	c1 fa 02	 sar	 edx, 2
  0030e	8b ca		 mov	 ecx, edx
  00310	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00313	8b 45 d0	 mov	 eax, DWORD PTR tv1053[ebp]
  00316	03 c2		 add	 eax, edx
  00318	03 c8		 add	 ecx, eax
  0031a	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  00320	8b 80 5c 07 00
	00		 mov	 eax, DWORD PTR [eax+1884]
  00326	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00329	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]
$LN170@GetAttackD@3:

; 3626 : 
; 3627 : 					SkillRightMaxDamage += addskilldamage;

  0032c	03 d8		 add	 ebx, eax

; 3629 : 					SkillLeftMaxDamage += addskilldamage;

  0032e	03 f8		 add	 edi, eax

; 3628 : 					SkillRightMinDamage += addskilldamage;

  00330	01 45 e0	 add	 DWORD PTR _SkillRightMinDamage$[ebp], eax

; 3630 : 					SkillLeftMinDamage += addskilldamage;

  00333	01 45 e4	 add	 DWORD PTR _SkillLeftMinDamage$[ebp], eax

; 3629 : 					SkillLeftMaxDamage += addskilldamage;

  00336	89 7d dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], edi

; 3626 : 
; 3627 : 					SkillRightMaxDamage += addskilldamage;

  00339	89 5d d8	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], ebx
$LN84@GetAttackD@3:

; 3650 : 			}
; 3651 : 			
; 3652 : 			if ( lpObj->Class == CLASS_ELF && lpMagic->m_Skill == 235 ) //season4 add-on

  0033c	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2
  00344	75 43		 jne	 SHORT $LN79@GetAttackD@3
  00346	8b 45 18	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00349	81 78 08 eb 00
	00 00		 cmp	 DWORD PTR [eax+8], 235	; 000000ebH
  00350	75 37		 jne	 SHORT $LN79@GetAttackD@3

; 3653 : 			{
; 3654 : 				SkillLeftMaxDamage = SkillLeftMaxDamage * 80 / 100;

  00352	8d 3c bf	 lea	 edi, DWORD PTR [edi+edi*4]
  00355	c1 e7 04	 shl	 edi, 4
  00358	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0035d	f7 ef		 imul	 edi
  0035f	c1 fa 05	 sar	 edx, 5
  00362	8b fa		 mov	 edi, edx
  00364	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00367	03 fa		 add	 edi, edx
  00369	89 7d dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], edi

; 3655 : 				SkillLeftMinDamage = SkillLeftMinDamage * 80 / 100;

  0036c	8b 45 e4	 mov	 eax, DWORD PTR _SkillLeftMinDamage$[ebp]
  0036f	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00372	c1 e1 04	 shl	 ecx, 4
  00375	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0037a	f7 e9		 imul	 ecx
  0037c	c1 fa 05	 sar	 edx, 5
  0037f	8b c2		 mov	 eax, edx
  00381	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00384	03 c2		 add	 eax, edx
  00386	89 45 e4	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], eax
$LN79@GetAttackD@3:

; 3656 : 			}
; 3657 : 		}
; 3658 : 
; 3659 : 		if ( lpObj->m_CriticalDamage > 0 )

  00389	83 be bc 04 00
	00 00		 cmp	 DWORD PTR [esi+1212], 0
  00390	7e 22		 jle	 SHORT $LN77@GetAttackD@3

; 3660 : 		{
; 3661 : 			if ( (rand()%100) < lpObj->m_CriticalDamage )

  00392	e8 00 00 00 00	 call	 _rand
  00397	99		 cdq
  00398	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0039d	f7 f9		 idiv	 ecx
  0039f	3b 96 bc 04 00
	00		 cmp	 edx, DWORD PTR [esi+1212]
  003a5	7d 0d		 jge	 SHORT $LN77@GetAttackD@3

; 3662 : 			{
; 3663 : 				cDamage = TRUE;

  003a7	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _cDamage$223263[ebp], 1

; 3664 : 				effect = 3;

  003ae	8b 55 10	 mov	 edx, DWORD PTR _effect$[ebp]
  003b1	c6 02 03	 mov	 BYTE PTR [edx], 3
$LN77@GetAttackD@3:

; 3665 : 			}
; 3666 : 		}
; 3667 : 
; 3668 : 		if ( lpObj->m_ExcelentDamage > 0 )

  003b4	83 be c0 04 00
	00 00		 cmp	 DWORD PTR [esi+1216], 0
  003bb	7e 22		 jle	 SHORT $LN75@GetAttackD@3

; 3669 : 		{
; 3670 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  003bd	e8 00 00 00 00	 call	 _rand
  003c2	99		 cdq
  003c3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003c8	f7 f9		 idiv	 ecx
  003ca	3b 96 c0 04 00
	00		 cmp	 edx, DWORD PTR [esi+1216]
  003d0	7d 0d		 jge	 SHORT $LN75@GetAttackD@3

; 3671 : 			{
; 3672 : 				cDamage = TRUE;

  003d2	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _cDamage$223263[ebp], 1

; 3673 : 				effect = 2;

  003d9	8b 55 10	 mov	 edx, DWORD PTR _effect$[ebp]
  003dc	c6 02 02	 mov	 BYTE PTR [edx], 2
$LN75@GetAttackD@3:

; 3674 : 			}
; 3675 : 		}
; 3676 : 
; 3677 : 		int iValue1 = 0; //season4 add-on

  003df	33 c0		 xor	 eax, eax
  003e1	89 45 18	 mov	 DWORD PTR _iValue1$223304[ebp], eax

; 3678 : 		int iValue2 = 0; //season4 add-on

  003e4	89 45 d0	 mov	 DWORD PTR _iValue2$223305[ebp], eax

; 3679 : 
; 3680 : 		if(gObjSearchActiveEffect(lpObj, AT_BERSERKER) == 1) //season4 add-on

  003e7	6a 51		 push	 81			; 00000051H
  003e9	56		 push	 esi
  003ea	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  003ef	83 c4 08	 add	 esp, 8
  003f2	3c 01		 cmp	 al, 1
  003f4	75 11		 jne	 SHORT $LN74@GetAttackD@3

; 3681 : 		{
; 3682 : 			this->GetBerserkerSkillAttackDamage(lpObj, iValue1, iValue2); 

  003f6	8d 45 d0	 lea	 eax, DWORD PTR _iValue2$223305[ebp]
  003f9	50		 push	 eax
  003fa	8d 4d 18	 lea	 ecx, DWORD PTR _iValue1$223304[ebp]
  003fd	51		 push	 ecx
  003fe	56		 push	 esi
  003ff	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00402	e8 00 00 00 00	 call	 ?GetBerserkerSkillAttackDamage@CObjAttack@@QAEEPAUOBJECTSTRUCT@@AAH1@Z ; CObjAttack::GetBerserkerSkillAttackDamage
$LN74@GetAttackD@3:

; 3683 : 		}
; 3684 : 
; 3685 : 		__try

  00407	9b		 fwait
  00408	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 3686 : 		{
; 3687 : 			sub = ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage + iValue2) - ( lpObj->m_AttackDamageMinRight + SkillRightMinDamage + iValue1); //season4 changed

  0040f	8b 96 80 04 00
	00		 mov	 edx, DWORD PTR [esi+1152]
  00415	2b 55 18	 sub	 edx, DWORD PTR _iValue1$223304[ebp]
  00418	2b 55 e0	 sub	 edx, DWORD PTR _SkillRightMinDamage$[ebp]
  0041b	2b 96 84 04 00
	00		 sub	 edx, DWORD PTR [esi+1156]
  00421	03 55 d0	 add	 edx, DWORD PTR _iValue2$223305[ebp]
  00424	03 d3		 add	 edx, ebx
  00426	89 55 d4	 mov	 DWORD PTR _sub$[ebp], edx

; 3688 : 			lpObj->m_AttackDamageRight = ( lpObj->m_AttackDamageMinRight + SkillRightMinDamage + iValue1) + (rand()%(sub+1)); //season4 changed

  00429	e8 00 00 00 00	 call	 _rand
  0042e	8b 4d d4	 mov	 ecx, DWORD PTR _sub$[ebp]
  00431	41		 inc	 ecx
  00432	99		 cdq
  00433	f7 f9		 idiv	 ecx
  00435	03 55 18	 add	 edx, DWORD PTR _iValue1$223304[ebp]
  00438	03 55 e0	 add	 edx, DWORD PTR _SkillRightMinDamage$[ebp]
  0043b	03 96 84 04 00
	00		 add	 edx, DWORD PTR [esi+1156]
  00441	89 96 74 04 00
	00		 mov	 DWORD PTR [esi+1140], edx

; 3689 : 		}

  00447	9b		 fwait
  00448	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0044f	eb 1c		 jmp	 SHORT $LN112@GetAttackD@3
$LN109@GetAttackD@3:
$LN180@GetAttackD@3:

; 3690 : 		__except ( sub=1, 1 )

  00451	b8 01 00 00 00	 mov	 eax, 1
  00456	89 45 d4	 mov	 DWORD PTR _sub$[ebp], eax
$LN166@GetAttackD@3:
$LN111@GetAttackD@3:
  00459	c3		 ret	 0
$LN110@GetAttackD@3:
  0045a	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 3691 : 		{
; 3692 : 
; 3693 : 		}

  0045d	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00464	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00467	8b 5d d8	 mov	 ebx, DWORD PTR _SkillRightMaxDamage$[ebp]
  0046a	8b 7d dc	 mov	 edi, DWORD PTR _SkillLeftMaxDamage$[ebp]
$LN112@GetAttackD@3:

; 3694 : 
; 3695 : 		__try

  0046d	9b		 fwait
  0046e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 1

; 3696 : 		{
; 3697 : 			sub = ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage + iValue2) - ( lpObj->m_AttackDamageMinLeft + SkillLeftMinDamage + iValue1); //season4 changed

  00475	8b 96 78 04 00
	00		 mov	 edx, DWORD PTR [esi+1144]
  0047b	2b 96 7c 04 00
	00		 sub	 edx, DWORD PTR [esi+1148]
  00481	2b 55 18	 sub	 edx, DWORD PTR _iValue1$223304[ebp]
  00484	2b 55 e4	 sub	 edx, DWORD PTR _SkillLeftMinDamage$[ebp]
  00487	03 55 d0	 add	 edx, DWORD PTR _iValue2$223305[ebp]
  0048a	03 d7		 add	 edx, edi
  0048c	89 55 d4	 mov	 DWORD PTR _sub$[ebp], edx

; 3698 : 			lpObj->m_AttackDamageLeft = ( lpObj->m_AttackDamageMinLeft + SkillLeftMinDamage + iValue1) + (rand()%(sub+1)); //season4 changed

  0048f	e8 00 00 00 00	 call	 _rand
  00494	8b 4d d4	 mov	 ecx, DWORD PTR _sub$[ebp]
  00497	41		 inc	 ecx
  00498	99		 cdq
  00499	f7 f9		 idiv	 ecx
  0049b	03 96 7c 04 00
	00		 add	 edx, DWORD PTR [esi+1148]
  004a1	03 55 18	 add	 edx, DWORD PTR _iValue1$223304[ebp]
  004a4	03 55 e4	 add	 edx, DWORD PTR _SkillLeftMinDamage$[ebp]
  004a7	89 96 70 04 00
	00		 mov	 DWORD PTR [esi+1136], edx

; 3699 : 		}

  004ad	9b		 fwait
  004ae	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  004b5	eb 1c		 jmp	 SHORT $LN116@GetAttackD@3
$LN113@GetAttackD@3:
$LN181@GetAttackD@3:

; 3700 : 		__except ( sub=1, 1 )

  004b7	b8 01 00 00 00	 mov	 eax, 1
  004bc	89 45 d4	 mov	 DWORD PTR _sub$[ebp], eax
$LN167@GetAttackD@3:
$LN115@GetAttackD@3:
  004bf	c3		 ret	 0
$LN114@GetAttackD@3:
  004c0	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 3701 : 		{
; 3702 : 
; 3703 : 		}

  004c3	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  004ca	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  004cd	8b 5d d8	 mov	 ebx, DWORD PTR _SkillRightMaxDamage$[ebp]
  004d0	8b 7d dc	 mov	 edi, DWORD PTR _SkillLeftMaxDamage$[ebp]
$LN116@GetAttackD@3:

; 3704 : 
; 3705 : 		if ( cDamage )

  004d3	83 7d c4 00	 cmp	 DWORD PTR _cDamage$223263[ebp], 0
  004d7	0f 84 fe 00 00
	00		 je	 $LN70@GetAttackD@3

; 3706 : 		{
; 3707 : 			lpObj->m_AttackDamageRight = lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage + iValue2; //season4 changed
; 3708 : 			lpObj->m_AttackDamageLeft = lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage + iValue2; //season4 changed
; 3709 : 
; 3710 : 			lpObj->m_AttackDamageRight += lpObj->SetOpAddCriticalDamage;

  004dd	0f bf 86 2a 11
	00 00		 movsx	 eax, WORD PTR [esi+4394]

; 3711 : 			lpObj->m_AttackDamageLeft += lpObj->SetOpAddCriticalDamage;
; 3712 : 
; 3713 : 			lpObj->m_AttackDamageRight += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  004e4	0f bf 8e e2 1f
	00 00		 movsx	 ecx, WORD PTR [esi+8162]
  004eb	8b 96 80 04 00
	00		 mov	 edx, DWORD PTR [esi+1152]
  004f1	03 d1		 add	 edx, ecx
  004f3	03 d0		 add	 edx, eax
  004f5	03 55 d0	 add	 edx, DWORD PTR _iValue2$223305[ebp]
  004f8	03 d3		 add	 edx, ebx
  004fa	89 96 74 04 00
	00		 mov	 DWORD PTR [esi+1140], edx

; 3714 : 			lpObj->m_AttackDamageLeft += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  00500	8b 96 78 04 00
	00		 mov	 edx, DWORD PTR [esi+1144]
  00506	0f bf 8e e2 1f
	00 00		 movsx	 ecx, WORD PTR [esi+8162]
  0050d	03 d1		 add	 edx, ecx
  0050f	03 d0		 add	 edx, eax
  00511	03 55 d0	 add	 edx, DWORD PTR _iValue2$223305[ebp]
  00514	03 d7		 add	 edx, edi
  00516	89 96 70 04 00
	00		 mov	 DWORD PTR [esi+1136], edx

; 3715 : 
; 3716 : 			int SkillAddCriticalDamage = 0;

  0051c	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _SkillAddCriticalDamage$223310[ebp], 0

; 3717 : 			gObjUpdateAppliedBuffEffect(lpObj, AT_INCREASE_CRITICAL_DMG, &SkillAddCriticalDamage, 0);

  00523	6a 00		 push	 0
  00525	8d 45 c0	 lea	 eax, DWORD PTR _SkillAddCriticalDamage$223310[ebp]
  00528	50		 push	 eax
  00529	6a 05		 push	 5
  0052b	56		 push	 esi
  0052c	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  00531	83 c4 10	 add	 esp, 16			; 00000010H

; 3718 : 
; 3719 : 			lpObj->m_AttackDamageRight += SkillAddCriticalDamage;

  00534	8b 45 c0	 mov	 eax, DWORD PTR _SkillAddCriticalDamage$223310[ebp]
  00537	01 86 74 04 00
	00		 add	 DWORD PTR [esi+1140], eax

; 3720 : 			lpObj->m_AttackDamageLeft += SkillAddCriticalDamage;

  0053d	01 86 70 04 00
	00		 add	 DWORD PTR [esi+1136], eax

; 3721 : 
; 3722 : 			if ( effect == 2 )

  00543	8b 4d 10	 mov	 ecx, DWORD PTR _effect$[ebp]
  00546	80 39 02	 cmp	 BYTE PTR [ecx], 2
  00549	0f 85 8c 00 00
	00		 jne	 $LN70@GetAttackD@3

; 3726 : 
; 3727 : 				lpObj->m_AttackDamageRight += lpObj->SetOpAddExDamage;

  0054f	0f bf 8e 26 11
	00 00		 movsx	 ecx, WORD PTR [esi+4390]
  00556	8b 86 80 04 00
	00		 mov	 eax, DWORD PTR [esi+1152]
  0055c	03 c3		 add	 eax, ebx

; 3723 : 			{
; 3724 : 				lpObj->m_AttackDamageRight += ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage ) * 20 / 100;

  0055e	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00561	03 d2		 add	 edx, edx
  00563	03 d2		 add	 edx, edx
  00565	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0056a	f7 ea		 imul	 edx
  0056c	c1 fa 05	 sar	 edx, 5
  0056f	8b c2		 mov	 eax, edx
  00571	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00574	03 c2		 add	 eax, edx

; 3726 : 
; 3727 : 				lpObj->m_AttackDamageRight += lpObj->SetOpAddExDamage;

  00576	03 c1		 add	 eax, ecx
  00578	03 86 74 04 00
	00		 add	 eax, DWORD PTR [esi+1140]
  0057e	89 86 74 04 00
	00		 mov	 DWORD PTR [esi+1140], eax

; 3728 : 				lpObj->m_AttackDamageLeft += lpObj->SetOpAddExDamage;

  00584	8b 86 78 04 00
	00		 mov	 eax, DWORD PTR [esi+1144]
  0058a	03 c7		 add	 eax, edi

; 3725 : 				lpObj->m_AttackDamageLeft += ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage ) * 20 / 100;

  0058c	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0058f	03 d2		 add	 edx, edx
  00591	03 d2		 add	 edx, edx
  00593	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00598	f7 ea		 imul	 edx
  0059a	c1 fa 05	 sar	 edx, 5
  0059d	8b c2		 mov	 eax, edx
  0059f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005a2	03 c2		 add	 eax, edx

; 3728 : 				lpObj->m_AttackDamageLeft += lpObj->SetOpAddExDamage;

  005a4	03 c1		 add	 eax, ecx
  005a6	03 86 70 04 00
	00		 add	 eax, DWORD PTR [esi+1136]
  005ac	89 86 70 04 00
	00		 mov	 DWORD PTR [esi+1136], eax
  005b2	eb 27		 jmp	 SHORT $LN70@GetAttackD@3
$LN102@GetAttackD@3:

; 3534 : 	{
; 3535 : 		int AttackMin = 0;
; 3536 : 		sub = lpObj->m_AttackDamageMax - lpObj->m_AttackDamageMin;

  005b4	8b be 64 04 00
	00		 mov	 edi, DWORD PTR [esi+1124]
  005ba	2b be 60 04 00
	00		 sub	 edi, DWORD PTR [esi+1120]

; 3537 : 		AttackMin = lpObj->m_AttackDamageMin + (rand()%(sub+1));

  005c0	e8 00 00 00 00	 call	 _rand
  005c5	47		 inc	 edi
  005c6	99		 cdq
  005c7	f7 ff		 idiv	 edi
  005c9	03 96 60 04 00
	00		 add	 edx, DWORD PTR [esi+1120]

; 3538 : 		lpObj->m_AttackDamageRight = AttackMin;

  005cf	89 96 74 04 00
	00		 mov	 DWORD PTR [esi+1140], edx

; 3539 : 		lpObj->m_AttackDamageLeft = AttackMin;

  005d5	89 96 70 04 00
	00		 mov	 DWORD PTR [esi+1136], edx
$LN70@GetAttackD@3:

; 3729 : 			}
; 3730 : 		}
; 3731 : 	}
; 3732 : 
; 3733 : 	if ( bTwoHandWeapon )

  005db	83 7d c8 00	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], 0
  005df	74 5c		 je	 SHORT $LN69@GetAttackD@3

; 3734 : 	{
; 3735 : 		if ( bIsOnDuel )

  005e1	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  005e5	74 39		 je	 SHORT $LN68@GetAttackD@3

; 3736 : 		{
; 3737 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  005e7	8b 86 74 04 00
	00		 mov	 eax, DWORD PTR [esi+1140]
  005ed	03 86 70 04 00
	00		 add	 eax, DWORD PTR [esi+1136]
  005f3	8b c8		 mov	 ecx, eax
  005f5	c1 e1 04	 shl	 ecx, 4
  005f8	2b c8		 sub	 ecx, eax
  005fa	03 c9		 add	 ecx, ecx
  005fc	03 c9		 add	 ecx, ecx
  005fe	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00603	f7 e9		 imul	 ecx
  00605	c1 fa 05	 sar	 edx, 5
  00608	8b fa		 mov	 edi, edx
  0060a	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0060d	03 fa		 add	 edi, edx

; 3738 : 		}
; 3739 : 		else
; 3740 : 		{
; 3741 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) - targetDefense;

  0060f	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]

; 3742 : 		}
; 3743 : 		ad -= lpObj->SetOpAddCriticalDamage; //season4 add-on

  00612	0f bf 96 2a 11
	00 00		 movsx	 edx, WORD PTR [esi+4394]
  00619	2b fa		 sub	 edi, edx

; 3744 : 	}
; 3745 : 	else if ( (Left->m_Type >= ITEMGET(4, 0) && Left->m_Type < ITEMGET(4, 7)) ||

  0061b	e9 47 02 00 00	 jmp	 $LN60@GetAttackD@3
$LN68@GetAttackD@3:

; 3738 : 		}
; 3739 : 		else
; 3740 : 		{
; 3741 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) - targetDefense;

  00620	8b be 74 04 00
	00		 mov	 edi, DWORD PTR [esi+1140]
  00626	03 be 70 04 00
	00		 add	 edi, DWORD PTR [esi+1136]
  0062c	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]

; 3742 : 		}
; 3743 : 		ad -= lpObj->SetOpAddCriticalDamage; //season4 add-on

  0062f	0f bf 96 2a 11
	00 00		 movsx	 edx, WORD PTR [esi+4394]
  00636	2b fa		 sub	 edi, edx

; 3744 : 	}
; 3745 : 	else if ( (Left->m_Type >= ITEMGET(4, 0) && Left->m_Type < ITEMGET(4, 7)) ||

  00638	e9 2a 02 00 00	 jmp	 $LN60@GetAttackD@3
$LN69@GetAttackD@3:

; 3746 : 			 Left->m_Type == ITEMGET(4,20) || Left->m_Type == ITEMGET(4,21)  ||
; 3747 : 			 Left->m_Type == ITEMGET(4,22) ||
; 3748 : 			 Left->m_Type == ITEMGET(4,23)) //season4 add-on

  0063d	8b 45 cc	 mov	 eax, DWORD PTR _Left$[ebp]
  00640	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  00644	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00649	66 3b c1	 cmp	 ax, cx
  0064c	7c 0e		 jl	 SHORT $LN63@GetAttackD@3
  0064e	ba 07 08 00 00	 mov	 edx, 2055		; 00000807H
  00653	66 3b c2	 cmp	 ax, dx
  00656	0f 8c b4 01 00
	00		 jl	 $LN64@GetAttackD@3
$LN63@GetAttackD@3:
  0065c	b9 14 08 00 00	 mov	 ecx, 2068		; 00000814H
  00661	66 3b c1	 cmp	 ax, cx
  00664	0f 84 a6 01 00
	00		 je	 $LN64@GetAttackD@3
  0066a	ba 15 08 00 00	 mov	 edx, 2069		; 00000815H
  0066f	66 3b c2	 cmp	 ax, dx
  00672	0f 84 98 01 00
	00		 je	 $LN64@GetAttackD@3
  00678	b9 16 08 00 00	 mov	 ecx, 2070		; 00000816H
  0067d	66 3b c1	 cmp	 ax, cx
  00680	0f 84 8a 01 00
	00		 je	 $LN64@GetAttackD@3
  00686	ba 17 08 00 00	 mov	 edx, 2071		; 00000817H
  0068b	66 3b c2	 cmp	 ax, dx
  0068e	0f 84 7c 01 00
	00		 je	 $LN64@GetAttackD@3

; 3762 : 		}
; 3763 : 
; 3764 : 	}
; 3765 : 	else if ( (Right->m_Type >= ITEMGET(4, 8) && Right->m_Type < ITEMGET(4, 15)) ||
; 3766 : 			  ( Right->m_Type >= ITEMGET(4,16) && Right->m_Type < ITEMGET(5,0) )  )

  00694	8b 45 b8	 mov	 eax, DWORD PTR _Right$[ebp]
  00697	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  0069b	b9 08 08 00 00	 mov	 ecx, 2056		; 00000808H
  006a0	66 3b c1	 cmp	 ax, cx
  006a3	7c 0a		 jl	 SHORT $LN56@GetAttackD@3
  006a5	ba 0f 08 00 00	 mov	 edx, 2063		; 0000080fH
  006aa	66 3b c2	 cmp	 ax, dx
  006ad	7c 14		 jl	 SHORT $LN57@GetAttackD@3
$LN56@GetAttackD@3:
  006af	b9 10 08 00 00	 mov	 ecx, 2064		; 00000810H
  006b4	66 3b c1	 cmp	 ax, cx
  006b7	7c 63		 jl	 SHORT $LN58@GetAttackD@3
  006b9	ba 00 0a 00 00	 mov	 edx, 2560		; 00000a00H
  006be	66 3b c2	 cmp	 ax, dx
  006c1	7d 59		 jge	 SHORT $LN58@GetAttackD@3
$LN57@GetAttackD@3:

; 3767 : 	{
; 3768 : 		if ( bIsOnDuel )

  006c3	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  006c7	74 26		 je	 SHORT $LN55@GetAttackD@3

; 3769 : 		{
; 3770 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;

  006c9	8b 86 74 04 00
	00		 mov	 eax, DWORD PTR [esi+1140]
  006cf	8b c8		 mov	 ecx, eax
  006d1	c1 e1 04	 shl	 ecx, 4
  006d4	2b c8		 sub	 ecx, eax
  006d6	03 c9		 add	 ecx, ecx
  006d8	03 c9		 add	 ecx, ecx
  006da	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  006df	f7 e9		 imul	 ecx
  006e1	c1 fa 05	 sar	 edx, 5
  006e4	8b c2		 mov	 eax, edx
  006e6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  006e9	03 c2		 add	 eax, edx
  006eb	8b f8		 mov	 edi, eax

; 3771 : 		}
; 3772 : 		else

  006ed	eb 06		 jmp	 SHORT $LN173@GetAttackD@3
$LN55@GetAttackD@3:

; 3773 : 		{
; 3774 : 			ad = lpObj->m_AttackDamageRight - targetDefense;

  006ef	8b be 74 04 00
	00		 mov	 edi, DWORD PTR [esi+1140]
$LN173@GetAttackD@3:
  006f5	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  006f8	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi

; 3775 : 		}
; 3776 : 
; 3777 : 		if( lpObj->m_MPSkillOpt.MpsCrossbowStrength > 0.0f )

  006fb	d9 ee		 fldz
  006fd	d8 9e b4 26 00
	00		 fcomp	 DWORD PTR [esi+9908]
  00703	df e0		 fnstsw	 ax
  00705	f6 c4 05	 test	 ah, 5
  00708	0f 8a 59 01 00
	00		 jp	 $LN60@GetAttackD@3

; 3778 : 		{
; 3779 : 			ad += lpObj->m_MPSkillOpt.MpsCrossbowStrength;

  0070e	db 45 0c	 fild	 DWORD PTR _ad$[ebp]
  00711	d8 86 b4 26 00
	00		 fadd	 DWORD PTR [esi+9908]

; 3780 : 		}
; 3781 : 
; 3782 : 	}

  00717	e9 44 01 00 00	 jmp	 $LN174@GetAttackD@3
$LN58@GetAttackD@3:

; 3783 : 	else if ( Right->m_Type >= ITEMGET(0,0) && Right->m_Type < ITEMGET(4,0) )

  0071c	66 85 c0	 test	 ax, ax
  0071f	78 63		 js	 SHORT $LN51@GetAttackD@3
  00721	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00726	66 3b c1	 cmp	 ax, cx
  00729	7d 59		 jge	 SHORT $LN51@GetAttackD@3

; 3784 : 	{
; 3785 : 		if ( bIsOnDuel )

  0072b	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0072f	74 26		 je	 SHORT $LN50@GetAttackD@3

; 3786 : 		{
; 3787 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;

  00731	8b 86 74 04 00
	00		 mov	 eax, DWORD PTR [esi+1140]
  00737	8b c8		 mov	 ecx, eax
  00739	c1 e1 04	 shl	 ecx, 4
  0073c	2b c8		 sub	 ecx, eax
  0073e	03 c9		 add	 ecx, ecx
  00740	03 c9		 add	 ecx, ecx
  00742	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00747	f7 e9		 imul	 ecx
  00749	c1 fa 05	 sar	 edx, 5
  0074c	8b c2		 mov	 eax, edx
  0074e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00751	03 c2		 add	 eax, edx
  00753	8b f8		 mov	 edi, eax

; 3788 : 		}
; 3789 : 		else

  00755	eb 06		 jmp	 SHORT $LN175@GetAttackD@3
$LN50@GetAttackD@3:

; 3790 : 		{
; 3791 : 			ad = lpObj->m_AttackDamageRight - targetDefense;

  00757	8b be 74 04 00
	00		 mov	 edi, DWORD PTR [esi+1140]
$LN175@GetAttackD@3:
  0075d	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  00760	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi

; 3792 : 		}
; 3793 : 
; 3794 : 		if( lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength > 0.0f )

  00763	d9 ee		 fldz
  00765	d8 9e 70 26 00
	00		 fcomp	 DWORD PTR [esi+9840]
  0076b	df e0		 fnstsw	 ax
  0076d	f6 c4 05	 test	 ah, 5
  00770	0f 8a f1 00 00
	00		 jp	 $LN60@GetAttackD@3

; 3795 : 		{
; 3796 : 			ad += lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength;

  00776	db 45 0c	 fild	 DWORD PTR _ad$[ebp]
  00779	d8 86 70 26 00
	00		 fadd	 DWORD PTR [esi+9840]

; 3797 : 		}
; 3798 : 
; 3799 : 	}

  0077f	e9 dc 00 00 00	 jmp	 $LN174@GetAttackD@3
$LN51@GetAttackD@3:

; 3800 : 	else if ( Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) )

  00784	b9 00 0a 00 00	 mov	 ecx, 2560		; 00000a00H
  00789	66 3b c1	 cmp	 ax, cx
  0078c	7c 4a		 jl	 SHORT $LN46@GetAttackD@3
  0078e	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  00793	66 3b c2	 cmp	 ax, dx
  00796	7d 40		 jge	 SHORT $LN46@GetAttackD@3

; 3801 : 	{
; 3802 : 		if ( bIsOnDuel )

  00798	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0079c	74 2c		 je	 SHORT $LN45@GetAttackD@3

; 3803 : 		{
; 3804 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;

  0079e	8b 86 74 04 00
	00		 mov	 eax, DWORD PTR [esi+1140]
  007a4	8b c8		 mov	 ecx, eax
  007a6	c1 e1 04	 shl	 ecx, 4
  007a9	2b c8		 sub	 ecx, eax
  007ab	03 c9		 add	 ecx, ecx
  007ad	03 c9		 add	 ecx, ecx
  007af	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  007b4	f7 e9		 imul	 ecx
  007b6	c1 fa 05	 sar	 edx, 5
  007b9	8b c2		 mov	 eax, edx
  007bb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  007be	03 c2		 add	 eax, edx
  007c0	8b f8		 mov	 edi, eax
  007c2	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]

; 3805 : 		}
; 3806 : 		else

  007c5	e9 9d 00 00 00	 jmp	 $LN60@GetAttackD@3
$LN45@GetAttackD@3:

; 3807 : 		{
; 3808 : 			ad = lpObj->m_AttackDamageRight - targetDefense;

  007ca	8b be 74 04 00
	00		 mov	 edi, DWORD PTR [esi+1140]
  007d0	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]

; 3809 : 		}

  007d3	e9 8f 00 00 00	 jmp	 $LN60@GetAttackD@3
$LN46@GetAttackD@3:

; 3810 : 	}
; 3811 : 	else if ( bIsOnDuel )

  007d8	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  007dc	74 27		 je	 SHORT $LN42@GetAttackD@3

; 3812 : 	{
; 3813 : 		ad = ( lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  007de	8b 86 70 04 00
	00		 mov	 eax, DWORD PTR [esi+1136]
  007e4	8b c8		 mov	 ecx, eax
  007e6	c1 e1 04	 shl	 ecx, 4
  007e9	2b c8		 sub	 ecx, eax
  007eb	03 c9		 add	 ecx, ecx
  007ed	03 c9		 add	 ecx, ecx
  007ef	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  007f4	f7 e9		 imul	 ecx
  007f6	c1 fa 05	 sar	 edx, 5
  007f9	8b fa		 mov	 edi, edx
  007fb	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  007fe	03 fa		 add	 edi, edx
  00800	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]

; 3814 : 	}
; 3815 : 	else

  00803	eb 62		 jmp	 SHORT $LN60@GetAttackD@3
$LN42@GetAttackD@3:

; 3816 : 	{
; 3817 : 		ad = lpObj->m_AttackDamageLeft - targetDefense;

  00805	8b be 70 04 00
	00		 mov	 edi, DWORD PTR [esi+1136]
  0080b	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  0080e	eb 57		 jmp	 SHORT $LN60@GetAttackD@3
$LN64@GetAttackD@3:

; 3749 : 	{
; 3750 : 		if ( bIsOnDuel )

  00810	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00814	74 26		 je	 SHORT $LN62@GetAttackD@3

; 3751 : 		{
; 3752 : 			ad = ( lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  00816	8b 86 70 04 00
	00		 mov	 eax, DWORD PTR [esi+1136]
  0081c	8b c8		 mov	 ecx, eax
  0081e	c1 e1 04	 shl	 ecx, 4
  00821	2b c8		 sub	 ecx, eax
  00823	03 c9		 add	 ecx, ecx
  00825	03 c9		 add	 ecx, ecx
  00827	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0082c	f7 e9		 imul	 ecx
  0082e	c1 fa 05	 sar	 edx, 5
  00831	8b c2		 mov	 eax, edx
  00833	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00836	03 c2		 add	 eax, edx
  00838	8b f8		 mov	 edi, eax

; 3753 : 		}
; 3754 : 		else

  0083a	eb 06		 jmp	 SHORT $LN176@GetAttackD@3
$LN62@GetAttackD@3:

; 3755 : 		{
; 3756 : 			ad = lpObj->m_AttackDamageLeft - targetDefense;

  0083c	8b be 70 04 00
	00		 mov	 edi, DWORD PTR [esi+1136]
$LN176@GetAttackD@3:
  00842	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  00845	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi

; 3757 : 		}
; 3758 : 
; 3759 : 		if( lpObj->m_MPSkillOpt.MpsBowStrength > 0.0f )

  00848	d9 ee		 fldz
  0084a	d8 9e ac 26 00
	00		 fcomp	 DWORD PTR [esi+9900]
  00850	df e0		 fnstsw	 ax
  00852	f6 c4 05	 test	 ah, 5
  00855	7a 10		 jp	 SHORT $LN60@GetAttackD@3

; 3760 : 		{
; 3761 : 			ad += lpObj->m_MPSkillOpt.MpsBowStrength;

  00857	db 45 0c	 fild	 DWORD PTR _ad$[ebp]
  0085a	d8 86 ac 26 00
	00		 fadd	 DWORD PTR [esi+9900]
$LN174@GetAttackD@3:
  00860	e8 00 00 00 00	 call	 __ftol2_sse
  00865	8b f8		 mov	 edi, eax
$LN60@GetAttackD@3:

; 3818 : 	}
; 3819 : 
; 3820 : 	if ( lpObj->SetOpTwoHandSwordImproveDamage )

  00867	8a 86 40 11 00
	00		 mov	 al, BYTE PTR [esi+4416]
  0086d	84 c0		 test	 al, al
  0086f	74 19		 je	 SHORT $LN40@GetAttackD@3

; 3821 : 	{
; 3822 : 		ad += ad * lpObj->SetOpTwoHandSwordImproveDamage  / 100;

  00871	0f b6 c8	 movzx	 ecx, al
  00874	0f af cf	 imul	 ecx, edi
  00877	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0087c	f7 e9		 imul	 ecx
  0087e	c1 fa 05	 sar	 edx, 5
  00881	8b ca		 mov	 ecx, edx
  00883	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00886	03 ca		 add	 ecx, edx
  00888	03 f9		 add	 edi, ecx
$LN40@GetAttackD@3:

; 3823 : 	}
; 3824 : 
; 3825 : 	int SkillAttack = 0;
; 3826 : 
; 3827 : 	SkillAttack = gObjGetActiveEffect(lpObj, ADD_OPTION_ATTACK_DAMAGE);

  0088a	6a 02		 push	 2
  0088c	56		 push	 esi
  0088d	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  00892	8b d8		 mov	 ebx, eax

; 3828 : 	SkillAttack += gObjGetActiveEffect(lpObj, ADD_OPTION_WRATH);

  00894	6a 0e		 push	 14			; 0000000eH
  00896	56		 push	 esi
  00897	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  0089c	83 c4 10	 add	 esp, 16			; 00000010H

; 3829 : 
; 3830 : 	ad += SkillAttack;

  0089f	03 c3		 add	 eax, ebx
  008a1	03 f8		 add	 edi, eax
  008a3	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi

; 3831 : 	
; 3832 : 	if ( lpObj->m_SkillAttack )

  008a6	83 be 24 04 00
	00 00		 cmp	 DWORD PTR [esi+1060], 0
  008ad	74 06		 je	 SHORT $LN39@GetAttackD@3

; 3833 : 	{
; 3834 : 		ad += 15;

  008af	83 c7 0f	 add	 edi, 15			; 0000000fH
  008b2	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi
$LN39@GetAttackD@3:

; 3835 : 	}
; 3836 : 
; 3837 : 	if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementAttackTime > 0 )

  008b5	83 be 2c 1c 00
	00 00		 cmp	 DWORD PTR [esi+7212], 0
  008bc	7e 10		 jle	 SHORT $LN37@GetAttackD@3

; 3838 : 	{
; 3839 : 		ad += lpObj->m_MonsterSkillElementInfo.m_iSkillElementAttack;

  008be	03 be 28 1c 00
	00		 add	 edi, DWORD PTR [esi+7208]
  008c4	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi

; 3840 : 
; 3841 : 		if ( ad < 0 )

  008c7	79 05		 jns	 SHORT $LN37@GetAttackD@3

; 3842 : 		{
; 3843 : 			ad = 0;

  008c9	33 ff		 xor	 edi, edi
  008cb	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi
$LN37@GetAttackD@3:

; 3844 : 		}
; 3845 : 	}
; 3846 : 
; 3847 : 	int SkillWeakness = 0;

  008ce	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _SkillWeakness$[ebp], 0

; 3848 : 
; 3849 : 	gObjUpdateAppliedBuffEffect(lpObj, AT_WEAKNESS, &SkillWeakness, 0);

  008d5	6a 00		 push	 0
  008d7	8d 55 bc	 lea	 edx, DWORD PTR _SkillWeakness$[ebp]
  008da	52		 push	 edx
  008db	6a 4c		 push	 76			; 0000004cH
  008dd	56		 push	 esi
  008de	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  008e3	83 c4 10	 add	 esp, 16			; 00000010H

; 3850 : 
; 3851 : 	if(SkillWeakness != 0)

  008e6	83 7d bc 00	 cmp	 DWORD PTR _SkillWeakness$[ebp], 0
  008ea	74 2a		 je	 SHORT $LN35@GetAttackD@3

; 3852 : 	{
; 3853 : 		//int Ex_WeaknessPower = GetPrivateProfileInt("Summoner","WeaknessPower",30,"..\\Data\\ZtData\\Skills.ini");
; 3854 : 		if(g_SkillAdditionInfo.WeaknessMaxPower > 0 && g_SkillAdditionInfo.WeaknessMaxPower < 100)

  008ec	a1 20 0c 00 00	 mov	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3104
  008f1	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  008f4	66 83 f9 62	 cmp	 cx, 98			; 00000062H
  008f8	77 1c		 ja	 SHORT $LN35@GetAttackD@3

; 3855 : 		{
; 3856 : 			ad -= ( ad * g_SkillAdditionInfo.WeaknessMaxPower ) / 100;	//SkillWeakness

  008fa	0f b7 c8	 movzx	 ecx, ax
  008fd	0f af cf	 imul	 ecx, edi
  00900	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00905	f7 e9		 imul	 ecx
  00907	c1 fa 05	 sar	 edx, 5
  0090a	8b c2		 mov	 eax, edx
  0090c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0090f	03 c2		 add	 eax, edx
  00911	03 f8		 add	 edi, eax
  00913	89 7d 0c	 mov	 DWORD PTR _ad$[ebp], edi
$LN35@GetAttackD@3:

; 3857 : 		}
; 3858 : 		
; 3859 : 	}
; 3860 : 
; 3861 : 
; 3862 : 	float nAddAttackDamageLeft	= 0;

  00916	d9 ee		 fldz
  00918	d9 55 18	 fst	 DWORD PTR _nAddAttackDamageLeft$[ebp]

; 3863 : 	float nAddAttackDamageRight = 0;

  0091b	d9 5d 14	 fstp	 DWORD PTR _nAddAttackDamageRight$[ebp]

; 3864 : 	switch(Left->GetDetailItemType())

  0091e	8b 4d cc	 mov	 ecx, DWORD PTR _Left$[ebp]
  00921	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00926	48		 dec	 eax
  00927	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0092a	0f 87 88 00 00
	00		 ja	 $LN23@GetAttackD@3
  00930	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN117@GetAttackD@3[eax]
  00937	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN178@GetAttackD@3[ecx*4]
$LN32@GetAttackD@3:

; 3865 : 	{
; 3866 : 	case 1:
; 3867 : 		{
; 3868 : 			if( lpObj->m_MPSkillOpt.MpsOneHandSwordStrength > 0.0f )

  0093e	d9 ee		 fldz
  00940	d8 9e 74 26 00
	00		 fcomp	 DWORD PTR [esi+9844]
  00946	df e0		 fnstsw	 ax
  00948	f6 c4 05	 test	 ah, 5
  0094b	7a 6b		 jp	 SHORT $LN23@GetAttackD@3

; 3869 : 			{
; 3870 : 				nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsOneHandSwordStrength;

  0094d	d9 86 74 26 00
	00		 fld	 DWORD PTR [esi+9844]

; 3871 : 			}
; 3872 : 		}
; 3873 : 		break;

  00953	eb 5a		 jmp	 SHORT $LN177@GetAttackD@3
$LN30@GetAttackD@3:

; 3874 : 	case 2:
; 3875 : 		{
; 3876 : 			if( lpObj->m_MPSkillOpt.MpsMaceStrength > 0.0f )

  00955	d9 ee		 fldz
  00957	d8 9e 78 26 00
	00		 fcomp	 DWORD PTR [esi+9848]
  0095d	df e0		 fnstsw	 ax
  0095f	f6 c4 05	 test	 ah, 5
  00962	7a 54		 jp	 SHORT $LN23@GetAttackD@3

; 3877 : 			{
; 3878 : 				nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsMaceStrength;

  00964	d9 86 78 26 00
	00		 fld	 DWORD PTR [esi+9848]

; 3879 : 			}
; 3880 : 		}
; 3881 : 		break;

  0096a	eb 43		 jmp	 SHORT $LN177@GetAttackD@3
$LN28@GetAttackD@3:

; 3882 : 	case 3:
; 3883 : 		{
; 3884 : 			if( lpObj->m_MPSkillOpt.MpsSpearStrength > 0.0f )

  0096c	d9 ee		 fldz
  0096e	d8 9e 7c 26 00
	00		 fcomp	 DWORD PTR [esi+9852]
  00974	df e0		 fnstsw	 ax
  00976	f6 c4 05	 test	 ah, 5
  00979	7a 3d		 jp	 SHORT $LN23@GetAttackD@3

; 3885 : 			{
; 3886 : 				nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsSpearStrength;

  0097b	d9 86 7c 26 00
	00		 fld	 DWORD PTR [esi+9852]

; 3887 : 			}
; 3888 : 		}
; 3889 : 		break;

  00981	eb 2c		 jmp	 SHORT $LN177@GetAttackD@3
$LN26@GetAttackD@3:

; 3890 : 	case 11:
; 3891 : 		{
; 3892 : 			if( lpObj->m_MPSkillOpt.MpsScepterStrength > 0.0f )

  00983	d9 ee		 fldz
  00985	d8 9e 10 27 00
	00		 fcomp	 DWORD PTR [esi+10000]
  0098b	df e0		 fnstsw	 ax
  0098d	f6 c4 05	 test	 ah, 5
  00990	7a 26		 jp	 SHORT $LN23@GetAttackD@3

; 3893 : 			{
; 3894 : 				nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsScepterStrength;

  00992	d9 86 10 27 00
	00		 fld	 DWORD PTR [esi+10000]

; 3895 : 			}
; 3896 : 		}
; 3897 : 		break;

  00998	eb 15		 jmp	 SHORT $LN177@GetAttackD@3
$LN24@GetAttackD@3:

; 3898 : 	case 12:
; 3899 : 		{
; 3900 : 			if( lpObj->m_MPSkillOpt.MpsFistStrength > 0.0f )

  0099a	d9 ee		 fldz
  0099c	d8 9e 94 27 00
	00		 fcomp	 DWORD PTR [esi+10132]
  009a2	df e0		 fnstsw	 ax
  009a4	f6 c4 05	 test	 ah, 5
  009a7	7a 0f		 jp	 SHORT $LN23@GetAttackD@3

; 3901 : 			{
; 3902 : 				nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsFistStrength;

  009a9	d9 86 94 27 00
	00		 fld	 DWORD PTR [esi+10132]
$LN177@GetAttackD@3:
  009af	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  009b5	d9 5d 18	 fstp	 DWORD PTR _nAddAttackDamageLeft$[ebp]
$LN23@GetAttackD@3:

; 3903 : 			}
; 3904 : 		}
; 3905 : 		break;
; 3906 : 	}
; 3907 : 
; 3908 : 	switch(Right->GetDetailItemType())

  009b8	8b 4d b8	 mov	 ecx, DWORD PTR _Right$[ebp]
  009bb	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  009c0	48		 dec	 eax
  009c1	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  009c4	0f 87 b5 00 00
	00		 ja	 $LN130@GetAttackD@3
  009ca	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN118@GetAttackD@3[eax]
  009d1	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN179@GetAttackD@3[edx*4]
$LN20@GetAttackD@3:

; 3909 : 	{
; 3910 : 	case 1:
; 3911 : 		{
; 3912 : 			if( lpObj->m_MPSkillOpt.MpsOneHandSwordStrength > 0.0f )

  009d8	d9 ee		 fldz
  009da	d8 96 74 26 00
	00		 fcom	 DWORD PTR [esi+9844]
  009e0	df e0		 fnstsw	 ax
  009e2	f6 c4 05	 test	 ah, 5
  009e5	0f 8a 96 00 00
	00		 jp	 $LN11@GetAttackD@3

; 3913 : 			{
; 3914 : 				nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsOneHandSwordStrength;

  009eb	d9 86 74 26 00
	00		 fld	 DWORD PTR [esi+9844]
  009f1	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  009f7	d9 5d 14	 fstp	 DWORD PTR _nAddAttackDamageRight$[ebp]

; 3915 : 			}
; 3916 : 		}
; 3917 : 		break;

  009fa	e9 82 00 00 00	 jmp	 $LN11@GetAttackD@3
$LN18@GetAttackD@3:

; 3918 : 	case 2:
; 3919 : 		{
; 3920 : 			if( lpObj->m_MPSkillOpt.MpsMaceStrength > 0.0f )

  009ff	d9 ee		 fldz
  00a01	d8 96 78 26 00
	00		 fcom	 DWORD PTR [esi+9848]
  00a07	df e0		 fnstsw	 ax
  00a09	f6 c4 05	 test	 ah, 5
  00a0c	7a 73		 jp	 SHORT $LN11@GetAttackD@3

; 3921 : 			{
; 3922 : 				nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsMaceStrength;

  00a0e	d9 86 78 26 00
	00		 fld	 DWORD PTR [esi+9848]
  00a14	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  00a1a	d9 5d 14	 fstp	 DWORD PTR _nAddAttackDamageRight$[ebp]

; 3923 : 			}
; 3924 : 		}
; 3925 : 		break;

  00a1d	eb 62		 jmp	 SHORT $LN11@GetAttackD@3
$LN16@GetAttackD@3:

; 3926 : 	case 3:
; 3927 : 		{
; 3928 : 			if( lpObj->m_MPSkillOpt.MpsSpearStrength > 0.0f )

  00a1f	d9 ee		 fldz
  00a21	d8 96 7c 26 00
	00		 fcom	 DWORD PTR [esi+9852]
  00a27	df e0		 fnstsw	 ax
  00a29	f6 c4 05	 test	 ah, 5
  00a2c	7a 53		 jp	 SHORT $LN11@GetAttackD@3

; 3929 : 			{
; 3930 : 				nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsSpearStrength;

  00a2e	d9 86 7c 26 00
	00		 fld	 DWORD PTR [esi+9852]
  00a34	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  00a3a	d9 5d 14	 fstp	 DWORD PTR _nAddAttackDamageRight$[ebp]

; 3931 : 			}
; 3932 : 		}
; 3933 : 		break;

  00a3d	eb 42		 jmp	 SHORT $LN11@GetAttackD@3
$LN14@GetAttackD@3:

; 3934 : 	case 11:
; 3935 : 		{
; 3936 : 			if( lpObj->m_MPSkillOpt.MpsScepterStrength > 0.0f )

  00a3f	d9 ee		 fldz
  00a41	d8 96 10 27 00
	00		 fcom	 DWORD PTR [esi+10000]
  00a47	df e0		 fnstsw	 ax
  00a49	f6 c4 05	 test	 ah, 5
  00a4c	7a 33		 jp	 SHORT $LN11@GetAttackD@3

; 3937 : 			{
; 3938 : 				nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsScepterStrength;

  00a4e	d9 86 10 27 00
	00		 fld	 DWORD PTR [esi+10000]
  00a54	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  00a5a	d9 5d 14	 fstp	 DWORD PTR _nAddAttackDamageRight$[ebp]

; 3939 : 			}
; 3940 : 		}
; 3941 : 		break;

  00a5d	eb 22		 jmp	 SHORT $LN11@GetAttackD@3
$LN12@GetAttackD@3:

; 3942 : 	case 12:
; 3943 : 		{
; 3944 : 			if( lpObj->m_MPSkillOpt.MpsFistStrength > 0.0f )

  00a5f	d9 ee		 fldz
  00a61	d8 96 94 27 00
	00		 fcom	 DWORD PTR [esi+10132]
  00a67	df e0		 fnstsw	 ax
  00a69	f6 c4 05	 test	 ah, 5
  00a6c	7a 13		 jp	 SHORT $LN11@GetAttackD@3

; 3945 : 			{
; 3946 : 				nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsFistStrength;

  00a6e	d9 86 94 27 00
	00		 fld	 DWORD PTR [esi+10132]
  00a74	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  00a7a	d9 5d 14	 fstp	 DWORD PTR _nAddAttackDamageRight$[ebp]
  00a7d	eb 02		 jmp	 SHORT $LN11@GetAttackD@3
$LN130@GetAttackD@3:
  00a7f	d9 ee		 fldz
$LN11@GetAttackD@3:

; 3953 : 	{
; 3954 : 		ad += nAddAttackDamageRight * 0.5f + nAddAttackDamageLeft * 0.5f;

  00a81	d9 45 14	 fld	 DWORD PTR _nAddAttackDamageRight$[ebp]

; 3947 : 			}
; 3948 : 		}
; 3949 : 		break;
; 3950 : 	}
; 3951 : 
; 3952 : 	if( bTwoHandWeapon )

  00a84	83 7d c8 00	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], 0
  00a88	74 1c		 je	 SHORT $LN10@GetAttackD@3

; 3953 : 	{
; 3954 : 		ad += nAddAttackDamageRight * 0.5f + nAddAttackDamageLeft * 0.5f;

  00a8a	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00a90	dc c9		 fmul	 ST(1), ST(0)
  00a92	d8 4d 18	 fmul	 DWORD PTR _nAddAttackDamageLeft$[ebp]
  00a95	de c1		 faddp	 ST(1), ST(0)
  00a97	da 45 0c	 fiadd	 DWORD PTR _ad$[ebp]
  00a9a	e8 00 00 00 00	 call	 __ftol2_sse
  00a9f	8b d8		 mov	 ebx, eax
  00aa1	89 5d 0c	 mov	 DWORD PTR _ad$[ebp], ebx

; 3955 : 	}
; 3956 : 	else

  00aa4	eb 10		 jmp	 SHORT $LN9@GetAttackD@3
$LN10@GetAttackD@3:

; 3957 : 	{
; 3958 : 		ad += nAddAttackDamageRight + nAddAttackDamageLeft;

  00aa6	d8 45 18	 fadd	 DWORD PTR _nAddAttackDamageLeft$[ebp]
  00aa9	da 45 0c	 fiadd	 DWORD PTR _ad$[ebp]
  00aac	e8 00 00 00 00	 call	 __ftol2_sse
  00ab1	8b d8		 mov	 ebx, eax
  00ab3	89 45 0c	 mov	 DWORD PTR _ad$[ebp], eax
$LN9@GetAttackD@3:

; 3959 : 	}
; 3960 : 
; 3961 : 	if( lpObj->Class == CLASS_KNIGHT 
; 3962 : 		|| lpObj->Class == CLASS_MAGUMSA 
; 3963 : 		|| lpObj->Class == CLASS_DARKLORD 
; 3964 : #ifdef MONK
; 3965 : 		|| lpObj->Class == CLASS_MONK 
; 3966 : #endif
; 3967 : 		)

  00ab6	0f b7 be b8 00
	00 00		 movzx	 edi, WORD PTR [esi+184]
  00abd	83 ff 01	 cmp	 edi, 1
  00ac0	74 0f		 je	 SHORT $LN7@GetAttackD@3
  00ac2	83 ff 03	 cmp	 edi, 3
  00ac5	74 0a		 je	 SHORT $LN7@GetAttackD@3
  00ac7	83 ff 04	 cmp	 edi, 4
  00aca	74 05		 je	 SHORT $LN7@GetAttackD@3
  00acc	83 ff 06	 cmp	 edi, 6
  00acf	75 20		 jne	 SHORT $LN6@GetAttackD@3
$LN7@GetAttackD@3:

; 3968 : 	{
; 3969 : 		if( lpObj->m_MPSkillOpt.MpsWeaponMastery > 0.0f )

  00ad1	d8 96 6c 26 00
	00		 fcom	 DWORD PTR [esi+9836]
  00ad7	df e0		 fnstsw	 ax
  00ad9	f6 c4 05	 test	 ah, 5
  00adc	7a 13		 jp	 SHORT $LN6@GetAttackD@3

; 3970 : 		{
; 3971 : 			ad += lpObj->m_MPSkillOpt.MpsWeaponMastery;

  00ade	db 45 0c	 fild	 DWORD PTR _ad$[ebp]
  00ae1	d8 86 6c 26 00
	00		 fadd	 DWORD PTR [esi+9836]
  00ae7	e8 00 00 00 00	 call	 __ftol2_sse
  00aec	8b d8		 mov	 ebx, eax
  00aee	89 5d 0c	 mov	 DWORD PTR _ad$[ebp], ebx
$LN6@GetAttackD@3:

; 3972 : 		}
; 3973 : 	}
; 3974 : 
; 3975 : 	if( lpObj->Class == CLASS_ELF )

  00af1	83 ff 02	 cmp	 edi, 2
  00af4	75 1d		 jne	 SHORT $LN4@GetAttackD@3

; 3976 : 	{
; 3977 : 		if( lpObj->m_MPSkillOpt.MpsWeaponMastery2 > 0.0f )

  00af6	d8 96 bc 26 00
	00		 fcom	 DWORD PTR [esi+9916]
  00afc	df e0		 fnstsw	 ax
  00afe	f6 c4 05	 test	 ah, 5
  00b01	7a 10		 jp	 SHORT $LN4@GetAttackD@3

; 3978 : 		{
; 3979 : 			ad += lpObj->m_MPSkillOpt.MpsWeaponMastery2;

  00b03	db 45 0c	 fild	 DWORD PTR _ad$[ebp]
  00b06	d8 86 bc 26 00
	00		 fadd	 DWORD PTR [esi+9916]
  00b0c	e8 00 00 00 00	 call	 __ftol2_sse
  00b11	8b d8		 mov	 ebx, eax
$LN4@GetAttackD@3:

; 3980 : 		}
; 3981 : 	}
; 3982 : 
; 3983 : 	if( lpObj->m_MPSkillOpt.MpsCommandAttackInc > 0.0f )

  00b13	d8 9e 24 27 00
	00		 fcomp	 DWORD PTR [esi+10020]
  00b19	df e0		 fnstsw	 ax
  00b1b	f6 c4 05	 test	 ah, 5
  00b1e	7a 49		 jp	 SHORT $LN2@GetAttackD@3

; 3984 : 	{
; 3985 : 		if( lpObj->pInventory[0].GetDetailItemType() == 11 || lpObj->pInventory[1].GetDetailItemType() == 11 )

  00b20	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00b26	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00b2b	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00b2e	74 16		 je	 SHORT $LN1@GetAttackD@3
  00b30	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00b36	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00b3c	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00b41	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00b44	75 23		 jne	 SHORT $LN2@GetAttackD@3
$LN1@GetAttackD@3:

; 3988 : 			ad += nAddAttack;

  00b46	0f b7 86 1a 01
	00 00		 movzx	 eax, WORD PTR [esi+282]
  00b4d	0f b7 8e 18 01
	00 00		 movzx	 ecx, WORD PTR [esi+280]

; 3986 : 		{
; 3987 : 			int nAddAttack = (lpObj->AddLeadership + lpObj->Leadership) / lpObj->m_MPSkillOpt.MpsCommandAttackInc;

  00b54	03 c1		 add	 eax, ecx

; 3988 : 			ad += nAddAttack;

  00b56	89 45 0c	 mov	 DWORD PTR tv1075[ebp], eax
  00b59	db 45 0c	 fild	 DWORD PTR tv1075[ebp]
  00b5c	d8 b6 24 27 00
	00		 fdiv	 DWORD PTR [esi+10020]
  00b62	e8 00 00 00 00	 call	 __ftol2_sse
  00b67	03 d8		 add	 ebx, eax
$LN2@GetAttackD@3:

; 3989 : 		}
; 3990 : 	}
; 3991 : 
; 3992 : 	return ad;

  00b69	8b c3		 mov	 eax, ebx

; 3993 : }

  00b6b	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00b6e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b75	59		 pop	 ecx
  00b76	5f		 pop	 edi
  00b77	5e		 pop	 esi
  00b78	5b		 pop	 ebx
  00b79	8b e5		 mov	 esp, ebp
  00b7b	5d		 pop	 ebp
  00b7c	c2 14 00	 ret	 20			; 00000014H
  00b7f	90		 npad	 1
$LN178@GetAttackD@3:
  00b80	00 00 00 00	 DD	 $LN32@GetAttackD@3
  00b84	00 00 00 00	 DD	 $LN30@GetAttackD@3
  00b88	00 00 00 00	 DD	 $LN28@GetAttackD@3
  00b8c	00 00 00 00	 DD	 $LN26@GetAttackD@3
  00b90	00 00 00 00	 DD	 $LN24@GetAttackD@3
  00b94	00 00 00 00	 DD	 $LN23@GetAttackD@3
$LN117@GetAttackD@3:
  00b98	00		 DB	 0
  00b99	01		 DB	 1
  00b9a	02		 DB	 2
  00b9b	05		 DB	 5
  00b9c	05		 DB	 5
  00b9d	05		 DB	 5
  00b9e	05		 DB	 5
  00b9f	05		 DB	 5
  00ba0	05		 DB	 5
  00ba1	05		 DB	 5
  00ba2	03		 DB	 3
  00ba3	04		 DB	 4
$LN179@GetAttackD@3:
  00ba4	00 00 00 00	 DD	 $LN20@GetAttackD@3
  00ba8	00 00 00 00	 DD	 $LN18@GetAttackD@3
  00bac	00 00 00 00	 DD	 $LN16@GetAttackD@3
  00bb0	00 00 00 00	 DD	 $LN14@GetAttackD@3
  00bb4	00 00 00 00	 DD	 $LN12@GetAttackD@3
  00bb8	00 00 00 00	 DD	 $LN130@GetAttackD@3
$LN118@GetAttackD@3:
  00bbc	00		 DB	 0
  00bbd	01		 DB	 1
  00bbe	02		 DB	 2
  00bbf	05		 DB	 5
  00bc0	05		 DB	 5
  00bc1	05		 DB	 5
  00bc2	05		 DB	 5
  00bc3	05		 DB	 5
  00bc4	05		 DB	 5
  00bc5	05		 DB	 5
  00bc6	03		 DB	 3
  00bc7	04		 DB	 4
?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z ENDP ; CObjAttack::GetAttackDamage
_TEXT	ENDS
PUBLIC	??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@ ; `string'
PUBLIC	??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@4014000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4002666666666666
PUBLIC	__real@400199999999999a
PUBLIC	__real@404e000000000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4010000000000000
PUBLIC	??_C@_08FOLAHAHG@CRITICAL?$AA@			; `string'
PUBLIC	__real@4008000000000000
PUBLIC	__real@4000000000000000
PUBLIC	??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_09PBMNMIBJ@EXCELLENT?$AA@			; `string'
PUBLIC	_this$GSCopy$
PUBLIC	_lpMagic$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; CObjAttack::Attack
EXTRN	?GCDamageTable@ZtUser@@QAEXH@Z:PROC		; ZtUser::GCDamageTable
EXTRN	?SpecificSkillAdditionTreat@CObjUseSkill@@QAEXPAUOBJECTSTRUCT@@0PAVCMagicInf@@H@Z:PROC ; CObjUseSkill::SpecificSkillAdditionTreat
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	?FireScreamExplosionAttack@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0H@Z:PROC ; CObjUseSkill::FireScreamExplosionAttack
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUniriaSprite
EXTRN	?GCActionSend@@YAXPAUOBJECTSTRUCT@@EHH@Z:PROC	; GCActionSend
EXTRN	?gObjCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckSelfDefense
EXTRN	?GetPkLevel@PartyClass@@QAEDH@Z:PROC		; PartyClass::GetPkLevel
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?GCMagicCancelSend@@YAXPAUOBJECTSTRUCT@@G@Z:PROC ; GCMagicCancelSend
EXTRN	?gObjUpdateSpecificBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HH@Z:PROC ; gObjUpdateSpecificBuffEffectDuration
EXTRN	?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z:PROC ; gObjArmorRandomDurDown
EXTRN	?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjGetRelationShip
EXTRN	?IncAgro@TMonsterAIAgro@@QAEHHH@Z:PROC		; TMonsterAIAgro::IncAgro
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z:PROC ; LuckyItemManager::IsLuckyItemEquipment
EXTRN	?g_LuckyItemManager@@3ULuckyItemManager@@A:BYTE	; g_LuckyItemManager
EXTRN	?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z:PROC ; cSystemOfRage::AttackDamageRG
EXTRN	?IsFenrirDecLastAttackDamage@CItem@@QAEHXZ:PROC	; CItem::IsFenrirDecLastAttackDamage
EXTRN	?IsFenrirIncLastAttackDamage@CItem@@QAEHXZ:PROC	; CItem::IsFenrirIncLastAttackDamage
EXTRN	?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z:PROC ; gObjWeaponDurDownInCastle
EXTRN	?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z:PROC	; CCrywolfAltar::GetAltarUserIndex
EXTRN	?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A:BYTE	; g_CrywolfNPC_Altar
EXTRN	?Main@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@0AAH@Z:PROC ; cBalanceSystem::Main
EXTRN	?gBalanceSystem@@3VcBalanceSystem@@A:BYTE	; gBalanceSystem
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?g_UserConfig@@3VCUserConfig@@A:BYTE		; g_UserConfig
EXTRN	?gObjBackSpring@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjBackSpring
EXTRN	?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjCheckBuffEffectValue
EXTRN	?SkillEletrictSurgeProc@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0HHHH@Z:PROC ; CObjUseSkill::SkillEletrictSurgeProc
EXTRN	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z:PROC ; cWingsDamage::SetCharHorseAttack
EXTRN	?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ:PROC ; CItem::IsDinorantReduceAttackDamaege
EXTRN	?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z:PROC ; cWingsDamage::SetCharWingAbsurd
EXTRN	?Defence@cWingsDamage@@QAEXHAAH@Z:PROC		; cWingsDamage::Defence
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z:PROC ; cWingsDamage::SetCharWingAttack
EXTRN	?Attack@cWingsDamage@@QAEXHAAH@Z:PROC		; cWingsDamage::Attack
EXTRN	?gWingsDamage@@3VcWingsDamage@@A:BYTE		; gWingsDamage
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObjSpiritGuardianSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjSpiritGuardianSprite
EXTRN	?gObjSkeletonSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjSkeletonSprite
EXTRN	?gObjDemonSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDemonSprite
EXTRN	?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAngelSprite
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	?gObjSatanSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjSatanSprite
EXTRN	?gObjSpriteDamage@@YAXPAUOBJECTSTRUCT@@H@Z:PROC	; gObjSpriteDamage
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	_sprintf:PROC
EXTRN	?g_bAbilityDebug@@3HA:DWORD			; g_bAbilityDebug
EXTRN	?AttackMonster@MonsterZt@@QAEXHHAAH@Z:PROC	; MonsterZt::AttackMonster
EXTRN	?g_MonsterZt@@3VMonsterZt@@A:BYTE		; g_MonsterZt
EXTRN	?gObjWeaponDurDown@@YAXPAUOBJECTSTRUCT@@0H@Z:PROC ; gObjWeaponDurDown
EXTRN	?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z:PROC ; CObjBaseAttack::GetTargetDefense
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z:PROC ; CObjBaseAttack::MissCheckPvP
EXTRN	?RemoveCloakingEffect@CObjUseSkill@@QAEHH@Z:PROC ; CObjUseSkill::RemoveCloakingEffect
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
EXTRN	?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z:PROC ; CObjBaseAttack::ResistanceCheck
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjDuelCheck
EXTRN	?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z:PROC ; CObjBaseAttack::PkCheck
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z:PROC ; CObjBaseAttack::CheckAttackArea
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
EXTRN	?gObjCheckAttackTypeMagic@@YAHHH@Z:PROC		; gObjCheckAttackTypeMagic
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	?gObjMonsterStateProc@@YAXPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjMonsterStateProc
EXTRN	?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CObjBaseAttack::DecreaseArrow
EXTRN	?gObjCallMonsterSetEnemy@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCallMonsterSetEnemy
EXTRN	?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAttackQ
EXTRN	?SetTarget@CDarkSpirit@@QAEXH@Z:PROC		; CDarkSpirit::SetTarget
EXTRN	?gDarkSpirit@@3PAVCDarkSpirit@@A:BYTE		; gDarkSpirit
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	?GetBattleSoccerGoalMove@@YAHH@Z:PROC		; GetBattleSoccerGoalMove
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_iCharacterRecuperationMaxLevel@@3HA:DWORD	; g_iCharacterRecuperationMaxLevel
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?g_iUseCharacterAutoRecuperationSystem@@3HA:DWORD ; g_iUseCharacterAutoRecuperationSystem
EXTRN	?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z:PROC	; ZtUser::CheckAlliancePlayer
EXTRN	?g_ZtUser@@3VZtUser@@A:BYTE			; g_ZtUser
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?g_Crywolf@@3VCCrywolf@@A:BYTE			; g_Crywolf
EXTRN	?GateAttack@CImperial@@QAE_NH@Z:PROC		; CImperial::GateAttack
EXTRN	?g_Imperial@@3VCImperial@@A:BYTE		; g_Imperial
EXTRN	?PlayerWaitAttack@CDungeonSiege@@QAE_NHH@Z:PROC	; CDungeonSiege::PlayerWaitAttack
EXTRN	?g_DungeonSiege@@3VCDungeonSiege@@A:BYTE	; g_DungeonSiege
EXTRN	?CheckAttackMap@cPvPMapSystem@@QAE_NPAUOBJECTSTRUCT@@0@Z:PROC ; cPvPMapSystem::CheckAttackMap
EXTRN	?PvPMapSystem@@3VcPvPMapSystem@@A:BYTE		; PvPMapSystem
EXTRN	?AllyKillCheck@cTvTEvent@@QAE_NPAUOBJECTSTRUCT@@0@Z:PROC ; cTvTEvent::AllyKillCheck
EXTRN	?TvT@@3VcTvTEvent@@A:BYTE			; TvT
EXTRN	?AttackCheck@CTeamVsTeam@@QAE_NHH@Z:PROC	; CTeamVsTeam::AttackCheck
EXTRN	?g_TeamVsTeam@@3VCTeamVsTeam@@A:BYTE		; g_TeamVsTeam
EXTRN	?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; GensSystem::GetGensInfluence
EXTRN	?IsMapBattleZone@GensSystem@@QAEHH@Z:PROC	; GensSystem::IsMapBattleZone
EXTRN	?gGensSystem@@3VGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGENS@@3HA:DWORD				; gGENS
;	COMDAT ??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
CONST	SEGMENT
??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@ DB '['
	DB	'PvP System] Victim:[%s][%s], Attacker:[%s][%s] - SD[%d] HP[%f'
	DB	'] -> SD[%d] HP[%f]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@
CONST	SEGMENT
??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@ DB 'e'
	DB	'rror-Level1 : [%s][%s] Str:%d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4002666666666666
CONST	SEGMENT
__real@4002666666666666 DQ 04002666666666666r	; 2.3
CONST	ENDS
;	COMDAT __real@400199999999999a
CONST	SEGMENT
__real@400199999999999a DQ 0400199999999999ar	; 2.2
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT ??_C@_08FOLAHAHG@CRITICAL?$AA@
CONST	SEGMENT
??_C@_08FOLAHAHG@CRITICAL?$AA@ DB 'CRITICAL', 00H	; `string'
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT ??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@ DB '%s Attack'
	DB	'Damage: %d %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBMNMIBJ@EXCELLENT?$AA@
CONST	SEGMENT
??_C@_09PBMNMIBJ@EXCELLENT?$AA@ DB 'EXCELLENT', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\objattack.cpp
CONST	ENDS
;	COMDAT ?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z
_TEXT	SEGMENT
_ManaChange$ = -360					; size = 4
_bDamageReflect$ = -356					; size = 4
_skillSuccess$ = -352					; size = 4
_iDurEquipment$223129 = -348				; size = 4
_iCShopScrollBuffDmgValue$222491 = -348			; size = 4
_iInnovationValue$222430 = -344				; size = 4
_lpCallObj$ = -344					; size = 4
_bAllMiss$ = -340					; size = 4
_Dexterity$ = -336					; size = 4
_Energy$ = -332						; size = 4
_fSpringValue$223231 = -328				; size = 4
tv1686 = -328						; size = 4
tv1677 = -328						; size = 4
tv1654 = -328						; size = 4
tv1642 = -328						; size = 4
_Strength$ = -328					; size = 4
_lpMagic$GSCopy$ = -324					; size = 4
_this$GSCopy$ = -320					; size = 4
tv2887 = -316						; size = 8
tv7003 = -312						; size = 4
tv6999 = -312						; size = 4
tv6879 = -312						; size = 4
_fPercent$223227 = -312					; size = 4
_iComboDamage$223187 = -312				; size = 4
tv3956 = -312						; size = 4
tv3868 = -312						; size = 4
tv3771 = -312						; size = 4
tv3711 = -312						; size = 4
tv3693 = -312						; size = 4
tv3660 = -312						; size = 4
tv3657 = -312						; size = 4
tv3596 = -312						; size = 4
tv3527 = -312						; size = 4
tv3452 = -312						; size = 4
tv3427 = -312						; size = 4
tv3411 = -312						; size = 4
tv3251 = -312						; size = 4
tv3115 = -312						; size = 4
_iEquipmentPos$223028 = -312				; size = 4
tv6781 = -308						; size = 4
_DecValue$222794 = -308					; size = 4
_DecValue$222767 = -308					; size = 4
_iTotalShieldDamage$ = -308				; size = 4
_skill$ = -304						; size = 4
tv5812 = -300						; size = 4
_iDurDecValue$223125 = -300				; size = 4
_iWizardSkillDefense$222962 = -300			; size = 4
_nAddHP$222927 = -300					; size = 4
_iMasterSkillDMGPercentDK$222856 = -300			; size = 4
_iCriticalDamageValue$222467 = -300			; size = 4
_bIsOnDuel$ = -300					; size = 4
tv4055 = -298						; size = 2
tv3663 = -298						; size = 2
tv6784 = -296						; size = 4
tv5929 = -296						; size = 4
_selfdefense$ = -296					; size = 4
_iDurEquipment$223034 = -296				; size = 4
_value$223031 = -296					; size = 4
_iWizardSkillTime$222963 = -296				; size = 4
_iSkillValue$222853 = -296				; size = 4
_iRecvLife$222716 = -296				; size = 4
_decdamage$222676 = -296				; size = 4
_targetdefense$222421 = -296				; size = 4
tv6743 = -292						; size = 4
tv6615 = -292						; size = 4
tv6525 = -292						; size = 4
tv5485 = -292						; size = 4
tv5474 = -292						; size = 4
tv5465 = -292						; size = 4
tv5453 = -292						; size = 4
tv5444 = -292						; size = 4
tv5433 = -292						; size = 4
tv5420 = -292						; size = 4
tv5409 = -292						; size = 4
tv5033 = -292						; size = 4
tv4926 = -292						; size = 4
tv4828 = -292						; size = 4
tv4822 = -292						; size = 4
tv4816 = -292						; size = 4
tv4791 = -292						; size = 4
tv4766 = -292						; size = 4
tv4589 = -292						; size = 4
tv4575 = -292						; size = 4
tv4567 = -292						; size = 4
tv4559 = -292						; size = 4
tv4541 = -292						; size = 4
tv4506 = -292						; size = 4
tv4492 = -292						; size = 4
tv4469 = -292						; size = 4
tv4464 = -292						; size = 4
tv4422 = -292						; size = 4
tv4373 = -292						; size = 4
_fRate$223195 = -292					; size = 4
tv4051 = -292						; size = 4
tv4049 = -292						; size = 4
_iEquipmentPos$223122 = -292				; size = 4
_fDurDownRate$223117 = -292				; size = 4
_fPercent$222956 = -292					; size = 4
_fPercent$222949 = -292					; size = 4
_tmpLife$222932 = -292					; size = 4
_iMLSBase$222855 = -292					; size = 4
tv1632 = -292						; size = 4
tv1602 = -292						; size = 4
_Vitality$ = -292					; size = 4
tv6856 = -288						; size = 4
tv6728 = -288						; size = 4
tv6220 = -288						; size = 4
tv6174 = -288						; size = 4
tv6155 = -288						; size = 4
tv6141 = -288						; size = 4
tv6138 = -288						; size = 4
tv6124 = -288						; size = 4
tv6122 = -288						; size = 4
tv6024 = -288						; size = 4
tv6022 = -288						; size = 4
tv6016 = -288						; size = 4
tv6014 = -288						; size = 4
tv5997 = -288						; size = 4
tv5994 = -288						; size = 4
tv5985 = -288						; size = 4
tv5983 = -288						; size = 4
tv5967 = -288						; size = 4
tv5965 = -288						; size = 4
tv5949 = -288						; size = 4
tv5947 = -288						; size = 4
tv5927 = -288						; size = 4
tv5925 = -288						; size = 4
tv5911 = -288						; size = 4
tv5909 = -288						; size = 4
tv5903 = -288						; size = 4
tv5901 = -288						; size = 4
tv5895 = -288						; size = 4
tv5893 = -288						; size = 4
tv5766 = -288						; size = 4
tv5761 = -288						; size = 4
tv5531 = -288						; size = 4
tv5523 = -288						; size = 4
tv5515 = -288						; size = 4
tv5505 = -288						; size = 4
tv5494 = -288						; size = 4
_replacemana$222964 = -288				; size = 4
tv1890 = -288						; size = 4
tv1885 = -288						; size = 4
tv1880 = -288						; size = 4
tv1862 = -288						; size = 4
tv1851 = -288						; size = 4
tv1844 = -288						; size = 4
tv1840 = -288						; size = 4
_CurrentLife$222721 = -288				; size = 4
tv1758 = -288						; size = 4
tv1701 = -288						; size = 4
_skillIceArrowSuccess$ = -288				; size = 4
_MsgDamage$ = -281					; size = 1
_item_num$223121 = -280					; size = 20
_szTemp$222497 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_magicsend$ = 20					; size = 4
_MSBFlag$ = 24						; size = 1
_AttackDamage$ = 28					; size = 4
_bCombo$ = 32						; size = 4
_byBarrageCount$ = 36					; size = 1
_byReflect$ = 40					; size = 1
?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z PROC ; CObjAttack::Attack, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3504 : 		}
; 3505 : 
; 3506 : 		
; 3507 : 	}
; 3508 : 	#endif
; 3509 : 
; 3510 : 	return TRUE;

  00013	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  0001f	33 db		 xor	 ebx, ebx
  00021	89 85 bc fe ff
	ff		 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], eax
  00027	8b 87 0c 02 00
	00		 mov	 eax, DWORD PTR [edi+524]
  0002d	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00033	88 9d e7 fe ff
	ff		 mov	 BYTE PTR _MsgDamage$[ebp], bl
  00039	89 9d 98 fe ff
	ff		 mov	 DWORD PTR _ManaChange$[ebp], ebx
  0003f	89 9d cc fe ff
	ff		 mov	 DWORD PTR _iTotalShieldDamage$[ebp], ebx
  00045	a8 02		 test	 al, 2
  00047	0f 85 e2 03 00
	00		 jne	 $LN1230@Attack

; 59   : //#if(FIX_REF_ON_REF == TRUE)
; 60   : //	if(byReflect)
; 61   : //	{lpMagic
; 62   : //		LogAddC(2, "[%s] vs [%s] :: [%d][%d]", lpObj->Name, lpTargetObj->Name, byReflect, lpObj->FixRefOnRef);
; 63   : //		if(lpObj->FixRefOnRef == true)
; 64   : //		{
; 65   : //			return false;
; 66   : //		}
; 67   : //		lpObj->FixRefOnRef = true;
; 68   : //	}
; 69   : //	else
; 70   : //	{
; 71   : //		lpObj->FixRefOnRef = false;
; 72   : //	}
; 73   : //#endif
; 74   : 
; 75   : #if(FIX_REF2==TRUE)
; 76   : 	//if(byReflect)
; 77   : 	//{
; 78   : 	//	if(lpObj->FixRef2 == true)
; 79   : 	//	{
; 80   : 	//		return false;
; 81   : 	//	}
; 82   : 	//}
; 83   : #endif
; 84   : 
; 85   : 	int skillSuccess = 0;
; 86   : 	LPOBJ lpCallObj;
; 87   : 	LPOBJ lpCallTargetObj;
; 88   : 	BYTE MsgDamage = 0;
; 89   : 	int ManaChange = 0;
; 90   : 	int iTempShieldDamage = 0;
; 91   : 	int iTotalShieldDamage = 0;
; 92   : 
; 93   : 	if ( (lpTargetObj->Authority&2) == 2 )
; 94   : 	{
; 95   : 		return FALSE;
; 96   : 	}
; 97   : 
; 98   : 	if ( (lpObj->Authority&2) == 2 ) //s4 add-on

  0004d	8b 8e 0c 02 00
	00		 mov	 ecx, DWORD PTR [esi+524]
  00053	f6 c1 02	 test	 cl, 2

; 99   : 	{
; 100  : 		return FALSE;

  00056	0f 85 d3 03 00
	00		 jne	 $LN1230@Attack

; 101  : 	}
; 102  : 
; 103  : 	if ( (lpObj->Authority&32) == 32 || (lpTargetObj->Authority&32) == 32) //s4 add-on

  0005c	f6 c1 20	 test	 cl, 32			; 00000020H
  0005f	75 04		 jne	 SHORT $LN739@Attack
  00061	a8 20		 test	 al, 32			; 00000020H
  00063	74 13		 je	 SHORT $LN738@Attack
$LN739@Attack:

; 104  : 	{
; 105  : 		if(gObjSearchActiveEffect(lpObj, AT_INVISIBILITY) == 1)

  00065	6a 12		 push	 18			; 00000012H
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0006d	83 c4 08	 add	 esp, 8
  00070	3c 01		 cmp	 al, 1

; 106  : 		{
; 107  : 			return FALSE;

  00072	0f 84 b7 03 00
	00		 je	 $LN1230@Attack
$LN738@Attack:

; 108  : 		}
; 109  : 	}
; 110  : 
; 111  : 	if(gGENS)	//-> Need check

  00078	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?gGENS@@3HA, ebx ; gGENS
  0007e	74 4d		 je	 SHORT $LN888@Attack

; 112  : 	{
; 113  : 		//if( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER && !gGensSystem.IsPkEnable(lpObj, lpTargetObj) )
; 114  : 		//{
; 115  : 		//	return false;
; 116  : 		//}
; 117  : 
; 118  : 	#if(DEBUG_CODE)
; 119  : 		LogAddC(2,"[DEBUG_GENS] %d %d",gGensSystem.GetGensInfluence(lpObj),gGensSystem.GetGensInfluence(lpTargetObj));
; 120  : 	#endif
; 121  : 
; 122  : 		if( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  00080	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00085	75 46		 jne	 SHORT $LN888@Attack
  00087	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0008c	75 3f		 jne	 SHORT $LN888@Attack

; 123  : 		{
; 124  : 			if( gGensSystem.IsMapBattleZone(lpObj->MapNumber) )

  0008e	0f b6 8e 49 01
	00 00		 movzx	 ecx, BYTE PTR [esi+329]
  00095	51		 push	 ecx
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  0009b	e8 00 00 00 00	 call	 ?IsMapBattleZone@GensSystem@@QAEHH@Z ; GensSystem::IsMapBattleZone
  000a0	85 c0		 test	 eax, eax
  000a2	74 29		 je	 SHORT $LN888@Attack

; 125  : 			{
; 126  : 				if( gGensSystem.GetGensInfluence(lpObj) == gGensSystem.GetGensInfluence(lpTargetObj) && !gGensSystem.AllowPK )

  000a4	57		 push	 edi
  000a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  000aa	e8 00 00 00 00	 call	 ?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::GetGensInfluence
  000af	56		 push	 esi
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  000b5	8b d8		 mov	 ebx, eax
  000b7	e8 00 00 00 00	 call	 ?GetGensInfluence@GensSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; GensSystem::GetGensInfluence
  000bc	3b c3		 cmp	 eax, ebx
  000be	75 0d		 jne	 SHORT $LN888@Attack
  000c0	80 3d b0 00 00
	00 00		 cmp	 BYTE PTR ?gGensSystem@@3VGensSystem@@A+176, 0

; 127  : 				{
; 128  : 					return false;

  000c7	0f 84 62 03 00
	00		 je	 $LN1230@Attack
$LN888@Attack:

; 129  : 				}
; 130  : 			}
; 131  : 		}
; 132  : 	}
; 133  : 
; 134  : 	if ( lpObj->MapNumber != lpTargetObj->MapNumber )

  000cd	8a 96 49 01 00
	00		 mov	 dl, BYTE PTR [esi+329]
  000d3	3a 97 49 01 00
	00		 cmp	 dl, BYTE PTR [edi+329]

; 135  : 	{
; 136  : 		return FALSE;

  000d9	0f 85 50 03 00
	00		 jne	 $LN1230@Attack

; 137  : 	}
; 138  : 
; 139  : #if(EVENT_TEAM_VS_TEAM)
; 140  : 	if(!g_TeamVsTeam.AttackCheck(lpObj->m_Index, lpTargetObj->m_Index))

  000df	8b 07		 mov	 eax, DWORD PTR [edi]
  000e1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e3	50		 push	 eax
  000e4	51		 push	 ecx
  000e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TeamVsTeam@@3VCTeamVsTeam@@A ; g_TeamVsTeam
  000ea	e8 00 00 00 00	 call	 ?AttackCheck@CTeamVsTeam@@QAE_NHH@Z ; CTeamVsTeam::AttackCheck
  000ef	84 c0		 test	 al, al

; 141  : 	{
; 142  : 		return false;

  000f1	0f 84 38 03 00
	00		 je	 $LN1230@Attack

; 143  : 	}
; 144  : #endif
; 145  : 
; 146  : #if(DEV_COMBO_CUSTOM==TRUE)
; 147  : 	if(g_ZtLicense.user.ComboCustom)

  000f7	80 3d dc 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+220, 0
  000fe	74 10		 je	 SHORT $LN854@Attack

; 148  : 	{
; 149  : 		if(!bCombo)

  00100	83 7d 20 00	 cmp	 DWORD PTR _bCombo$[ebp], 0
  00104	75 0a		 jne	 SHORT $LN854@Attack

; 150  : 		{
; 151  : 			bCombo = lpObj->NewCombo;

  00106	0f b6 96 88 28
	00 00		 movzx	 edx, BYTE PTR [esi+10376]
  0010d	89 55 20	 mov	 DWORD PTR _bCombo$[ebp], edx
$LN854@Attack:

; 152  : 		}
; 153  : 	}
; 154  : #endif
; 155  : 
; 156  : 	if(g_ZtLicense.user.TvTEvent)

  00110	80 3d d1 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+209, 0
  00117	74 14		 je	 SHORT $LN728@Attack

; 157  : 	{
; 158  : 		if(!TvT.AllyKillCheck(lpObj,lpTargetObj))return false;

  00119	57		 push	 edi
  0011a	56		 push	 esi
  0011b	b9 00 00 00 00	 mov	 ecx, OFFSET ?TvT@@3VcTvTEvent@@A ; TvT
  00120	e8 00 00 00 00	 call	 ?AllyKillCheck@cTvTEvent@@QAE_NPAUOBJECTSTRUCT@@0@Z ; cTvTEvent::AllyKillCheck
  00125	84 c0		 test	 al, al
  00127	0f 84 02 03 00
	00		 je	 $LN1230@Attack
$LN728@Attack:

; 159  : 	}
; 160  : 
; 161  : 	if(!PvPMapSystem.CheckAttackMap(lpObj,lpTargetObj)) return false;

  0012d	57		 push	 edi
  0012e	56		 push	 esi
  0012f	b9 00 00 00 00	 mov	 ecx, OFFSET ?PvPMapSystem@@3VcPvPMapSystem@@A ; PvPMapSystem
  00134	e8 00 00 00 00	 call	 ?CheckAttackMap@cPvPMapSystem@@QAE_NPAUOBJECTSTRUCT@@0@Z ; cPvPMapSystem::CheckAttackMap
  00139	84 c0		 test	 al, al
  0013b	0f 84 ee 02 00
	00		 je	 $LN1230@Attack

; 162  : 
; 163  : #if(EVENT_DUNGEON_SIEGE)
; 164  : 	if(!g_DungeonSiege.PlayerWaitAttack(lpObj->m_Index, lpTargetObj->m_Index))

  00141	8b 07		 mov	 eax, DWORD PTR [edi]
  00143	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00145	50		 push	 eax
  00146	51		 push	 ecx
  00147	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DungeonSiege@@3VCDungeonSiege@@A ; g_DungeonSiege
  0014c	e8 00 00 00 00	 call	 ?PlayerWaitAttack@CDungeonSiege@@QAE_NHH@Z ; CDungeonSiege::PlayerWaitAttack
  00151	84 c0		 test	 al, al

; 165  : 	{
; 166  : 		return false;

  00153	0f 84 d6 02 00
	00		 je	 $LN1230@Attack

; 167  : 	}
; 168  : #endif
; 169  : 
; 170  : #ifdef IMPERIAL_CONFLICT_OLD
; 171  : 	if(IMPERIAL_MAP_RANGE(lpObj->MapNumber))	//Season 5 ImperialFort

  00159	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  00160	3c 45		 cmp	 al, 69			; 00000045H
  00162	72 23		 jb	 SHORT $LN892@Attack
  00164	b2 48		 mov	 dl, 72			; 00000048H
  00166	3a d0		 cmp	 dl, al
  00168	1b c0		 sbb	 eax, eax
  0016a	40		 inc	 eax
  0016b	74 1a		 je	 SHORT $LN892@Attack

; 172  : 	{
; 173  : 		if(!g_Imperial.GateAttack(lpTargetObj->Class)) 

  0016d	0f b7 87 b8 00
	00 00		 movzx	 eax, WORD PTR [edi+184]
  00174	50		 push	 eax
  00175	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Imperial@@3VCImperial@@A ; g_Imperial
  0017a	e8 00 00 00 00	 call	 ?GateAttack@CImperial@@QAE_NH@Z ; CImperial::GateAttack
  0017f	84 c0		 test	 al, al

; 174  : 		{	
; 175  : 			return false;

  00181	0f 84 a8 02 00
	00		 je	 $LN1230@Attack
$LN892@Attack:

; 176  : 		}
; 177  : 	}
; 178  : #endif
; 179  : 
; 180  : //#if(GS_CASTLE==1)
; 181  : 	if( g_Crywolf.GetCrywolfState() == 3 || g_Crywolf.GetCrywolfState() == 5 )

  00187	a1 ec b7 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1030124
  0018c	83 f8 03	 cmp	 eax, 3
  0018f	74 05		 je	 SHORT $LN722@Attack
  00191	83 f8 05	 cmp	 eax, 5
  00194	75 14		 jne	 SHORT $LN896@Attack
$LN722@Attack:

; 182  : 	{
; 183  : 		if(CRYWOLF_MAP_RANGE(lpTargetObj->MapNumber))

  00196	80 bf 49 01 00
	00 22		 cmp	 BYTE PTR [edi+329], 34	; 00000022H
  0019d	75 0b		 jne	 SHORT $LN896@Attack

; 184  : 		{
; 185  : 			if(lpTargetObj->Type == OBJ_MONSTER)

  0019f	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2

; 186  : 				return FALSE;

  001a4	0f 84 85 02 00
	00		 je	 $LN1230@Attack
$LN896@Attack:

; 187  : 		}
; 188  : 	}
; 189  : //#endif
; 190  : 
; 191  : #if(ADD_CTRL_KEY)
; 192  : 	if(!lpObj->CtrlKey)

  001aa	80 be 1c 2b 00
	00 00		 cmp	 BYTE PTR [esi+11036], 0
  001b1	75 41		 jne	 SHORT $LN891@Attack

; 193  : 	{
; 194  : 		if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE)

  001b3	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  001ba	75 38		 jne	 SHORT $LN891@Attack

; 195  : 		{
; 196  : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  001bc	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  001c1	75 31		 jne	 SHORT $LN891@Attack
  001c3	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  001c8	75 2a		 jne	 SHORT $LN891@Attack

; 197  : 			{
; 198  : 				if ( lpObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )

  001ca	80 be 49 01 00
	00 1e		 cmp	 BYTE PTR [esi+329], 30	; 0000001eH
  001d1	75 21		 jne	 SHORT $LN891@Attack
  001d3	80 bf 49 01 00
	00 1e		 cmp	 BYTE PTR [edi+329], 30	; 0000001eH
  001da	75 18		 jne	 SHORT $LN891@Attack

; 199  : 				{
; 200  : 					if(g_ZtUser.CheckAlliancePlayer(lpObj->m_Index, lpTargetObj->m_Index))

  001dc	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001de	8b 16		 mov	 edx, DWORD PTR [esi]
  001e0	51		 push	 ecx
  001e1	52		 push	 edx
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtUser@@3VZtUser@@A ; g_ZtUser
  001e7	e8 00 00 00 00	 call	 ?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z ; ZtUser::CheckAlliancePlayer
  001ec	84 c0		 test	 al, al

; 201  : 					{
; 202  : 						return false;

  001ee	0f 85 3b 02 00
	00		 jne	 $LN1230@Attack
$LN891@Attack:

; 203  : 					}
; 204  : 				}
; 205  : 			}
; 206  : 		}
; 207  : 	}
; 208  : #endif
; 209  : 
; 210  : 	if ( g_iUseCharacterAutoRecuperationSystem && lpObj->Level <= g_iCharacterRecuperationMaxLevel )

  001f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iUseCharacterAutoRecuperationSystem@@3HA, 0 ; g_iUseCharacterAutoRecuperationSystem
  001fb	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  00201	74 3c		 je	 SHORT $LN895@Attack
  00203	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  0020a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_iCharacterRecuperationMaxLevel@@3HA ; g_iCharacterRecuperationMaxLevel
  00210	7f 2d		 jg	 SHORT $LN895@Attack

; 211  : 	{
; 212  : 		if ( lpObj->Type == OBJ_USER )

  00212	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00217	75 08		 jne	 SHORT $LN712@Attack

; 213  : 		{
; 214  : 			if ( lpObj->Level <= g_iCharacterRecuperationMaxLevel )
; 215  : 			{
; 216  : 				lpObj->m_iAutoRecuperationTime = GetTickCount();

  00219	ff d3		 call	 ebx
  0021b	89 86 cc 1f 00
	00		 mov	 DWORD PTR [esi+8140], eax
$LN712@Attack:

; 217  : 			}
; 218  : 		}
; 219  : 
; 220  : 		if ( lpTargetObj->Type == OBJ_USER )

  00221	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00226	75 17		 jne	 SHORT $LN895@Attack

; 221  : 		{
; 222  : 			if ( lpTargetObj->Level <= g_iCharacterRecuperationMaxLevel )

  00228	0f bf 8f be 00
	00 00		 movsx	 ecx, WORD PTR [edi+190]
  0022f	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iCharacterRecuperationMaxLevel@@3HA ; g_iCharacterRecuperationMaxLevel
  00235	7f 08		 jg	 SHORT $LN895@Attack

; 223  : 			{
; 224  : 				lpTargetObj->m_iAutoRecuperationTime = GetTickCount();

  00237	ff d3		 call	 ebx
  00239	89 87 cc 1f 00
	00		 mov	 DWORD PTR [edi+8140], eax
$LN895@Attack:

; 225  : 			}
; 226  : 		}
; 227  : 	}
; 228  : 
; 229  : 	if ( lpObj->Type == OBJ_USER )

  0023f	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00244	75 08		 jne	 SHORT $LN709@Attack

; 230  : 	{
; 231  : 		lpObj->dwShieldAutoRefillTimer = GetTickCount();

  00246	ff d3		 call	 ebx
  00248	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax
$LN709@Attack:

; 232  : 	}
; 233  : 
; 234  : 	if ( lpTargetObj->Type == OBJ_USER )

  0024e	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00253	75 08		 jne	 SHORT $LN708@Attack

; 235  : 	{
; 236  : 		lpTargetObj->dwShieldAutoRefillTimer = GetTickCount();

  00255	ff d3		 call	 ebx
  00257	89 87 6c 01 00
	00		 mov	 DWORD PTR [edi+364], eax
$LN708@Attack:

; 237  : 	}
; 238  : 
; 239  : 	int skill = 0;
; 240  : 	
; 241  : 	if ( lpMagic )

  0025d	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  00263	33 db		 xor	 ebx, ebx
  00265	89 9d d0 fe ff
	ff		 mov	 DWORD PTR _skill$[ebp], ebx
  0026b	85 c0		 test	 eax, eax
  0026d	74 09		 je	 SHORT $LN707@Attack

; 242  : 	{
; 243  : 		skill = lpMagic->m_Skill;

  0026f	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  00272	89 9d d0 fe ff
	ff		 mov	 DWORD PTR _skill$[ebp], ebx
$LN707@Attack:

; 244  : 	}
; 245  : 
; 246  : #ifdef DEBUG_CODE
; 247  : 	LogAddC(3,"Test skill: %d",skill);
; 248  : #endif
; 249  : 
; 250  : 	if(g_ZtLicense.CheckUser(eZtUB::SILVER1) || g_ZtLicense.CheckUser(eZtUB::SILVER2))

  00278	6a 07		 push	 7
  0027a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0027f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00284	84 c0		 test	 al, al
  00286	75 10		 jne	 SHORT $LN705@Attack
  00288	6a 08		 push	 8
  0028a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0028f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00294	84 c0		 test	 al, al
  00296	74 30		 je	 SHORT $LN961@Attack
$LN705@Attack:

; 251  : 	{
; 252  : 		if(BC_MAP_RANGE(lpObj->MapNumber) == TRUE)

  00298	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  0029f	3c 34		 cmp	 al, 52			; 00000034H
  002a1	74 10		 je	 SHORT $LN960@Attack
  002a3	3c 0b		 cmp	 al, 11			; 0000000bH
  002a5	72 21		 jb	 SHORT $LN961@Attack
  002a7	b2 11		 mov	 dl, 17			; 00000011H
  002a9	3a d0		 cmp	 dl, al
  002ab	1b c0		 sbb	 eax, eax
  002ad	40		 inc	 eax
  002ae	83 f8 01	 cmp	 eax, 1
  002b1	75 15		 jne	 SHORT $LN961@Attack
$LN960@Attack:

; 253  : 		{
; 254  : 			if ( skill == 52 || skill == 238 )

  002b3	83 fb 34	 cmp	 ebx, 52			; 00000034H
  002b6	0f 84 73 01 00
	00		 je	 $LN1230@Attack
  002bc	81 fb ee 00 00
	00		 cmp	 ebx, 238		; 000000eeH

; 255  : 			{
; 256  : 				return false;

  002c2	0f 84 67 01 00
	00		 je	 $LN1230@Attack
$LN961@Attack:

; 257  : 			}
; 258  : 		}
; 259  : 	}
; 260  : 
; 261  : 	if ( lpObj->Class == 77 )

  002c8	66 83 be b8 00
	00 00 4d	 cmp	 WORD PTR [esi+184], 77	; 0000004dH
  002d0	75 19		 jne	 SHORT $LN962@Attack

; 262  : 	{
; 263  : 		if ( lpObj->m_SkyBossMonSheild && skill == 17 )

  002d2	83 be c4 10 00
	00 00		 cmp	 DWORD PTR [esi+4292], 0
  002d9	74 10		 je	 SHORT $LN962@Attack
  002db	83 fb 11	 cmp	 ebx, 17			; 00000011H
  002de	75 0b		 jne	 SHORT $LN962@Attack

; 264  : 		{
; 265  : 			skill = 3;

  002e0	bb 03 00 00 00	 mov	 ebx, 3
  002e5	89 9d d0 fe ff
	ff		 mov	 DWORD PTR _skill$[ebp], ebx
$LN962@Attack:

; 266  : 		}
; 267  : 	}
; 268  : 
; 269  : 	skillSuccess = TRUE; //28
; 270  : 
; 271  : 	if ( lpObj->GuildNumber > 0 )

  002eb	83 be 34 04 00
	00 00		 cmp	 DWORD PTR [esi+1076], 0
  002f2	0f 8e 4c 01 00
	00		 jle	 $LN963@Attack

; 272  : 	{
; 273  : 		if ( lpObj->lpGuild )

  002f8	8b 86 38 04 00
	00		 mov	 eax, DWORD PTR [esi+1080]
  002fe	85 c0		 test	 eax, eax
  00300	0f 84 3e 01 00
	00		 je	 $LN963@Attack

; 274  : 		{
; 275  : 			if ( lpObj->lpGuild->WarState )

  00306	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  0030d	74 1b		 je	 SHORT $LN968@Attack

; 276  : 			{
; 277  : 				if ( lpObj->lpGuild->WarType == 1 )

  0030f	80 b8 92 05 00
	00 01		 cmp	 BYTE PTR [eax+1426], 1
  00316	75 12		 jne	 SHORT $LN968@Attack

; 278  : 				{
; 279  : 					if ( !GetBattleSoccerGoalMove(0) )

  00318	6a 00		 push	 0
  0031a	e8 00 00 00 00	 call	 ?GetBattleSoccerGoalMove@@YAHH@Z ; GetBattleSoccerGoalMove
  0031f	83 c4 04	 add	 esp, 4
  00322	85 c0		 test	 eax, eax

; 280  : 					{
; 281  : 						return TRUE;

  00324	0f 84 39 4b 00
	00		 je	 $LN1@Attack
$LN968@Attack:

; 282  : 					}
; 283  : 				}
; 284  : 			}
; 285  : 
; 286  : 			if ( lpObj->lpGuild->WarState )

  0032a	8b 86 38 04 00
	00		 mov	 eax, DWORD PTR [esi+1080]
  00330	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  00337	0f 84 07 01 00
	00		 je	 $LN963@Attack

; 287  : 			{
; 288  : 				if ( lpObj->lpGuild->WarType == 0 )

  0033d	80 b8 92 05 00
	00 00		 cmp	 BYTE PTR [eax+1426], 0
  00344	0f 85 fa 00 00
	00		 jne	 $LN963@Attack

; 289  : 				{
; 290  : 					if ( lpTargetObj->Type == OBJ_MONSTER )

  0034a	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2
  0034f	0f 84 0e 4b 00
	00		 je	 $LN1@Attack
$LN679@Attack:

; 358  : 		}
; 359  : 	}
; 360  : 
; 361  : #ifdef IMPERIAL_CONFLICT_NEW
; 362  : 
; 363  : 	if ( lpTargetObj->Class == 523 )
; 364  : 		return TRUE;
; 365  : 
; 366  : 	if ( lpTargetObj->Class >= 524 && lpTargetObj->Class <= 528 
; 367  : 		&& lpTargetObj->Class != 526
; 368  : 		&& !g_ImperialGuardian.IsAttackAbleMonster(lpTargetObj->m_Index) )
; 369  : 	{
; 370  : 		return TRUE;
; 371  : 	}
; 372  : #endif
; 373  : 
; 374  : 	if ( lpObj->Type == OBJ_USER )

  00355	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0035a	75 25		 jne	 SHORT $LN678@Attack

; 375  : 	{
; 376  : 		if ( !gObjIsConnected(lpObj) )

  0035c	56		 push	 esi
  0035d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00362	83 c4 04	 add	 esp, 4
  00365	85 c0		 test	 eax, eax

; 377  : 		{
; 378  : 			return FALSE;

  00367	0f 84 c2 00 00
	00		 je	 $LN1230@Attack

; 379  : 		}
; 380  : 
; 381  : 		/*if ( lpObj->m_Change == 8 )
; 382  : 		{
; 383  : 			skill = 1;
; 384  : 			lpMagic = &DefMagicInf[1];
; 385  : 			magicsend = 1;
; 386  : 		}*/
; 387  : 
; 388  : 		gDarkSpirit[lpObj->m_Index].SetTarget(lpTargetObj->m_Index);

  0036d	8b 06		 mov	 eax, DWORD PTR [esi]
  0036f	8b 17		 mov	 edx, DWORD PTR [edi]
  00371	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00374	52		 push	 edx
  00375	8d 0c cd 00 00
	00 00		 lea	 ecx, DWORD PTR ?gDarkSpirit@@3PAVCDarkSpirit@@A[ecx*8]
  0037c	e8 00 00 00 00	 call	 ?SetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::SetTarget
$LN678@Attack:

; 389  : 	}
; 390  : 
; 391  : 	if ( lpTargetObj->Type == OBJ_USER )

  00381	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00386	75 11		 jne	 SHORT $LN969@Attack

; 392  : 	{
; 393  : 		if ( !gObjIsConnected(lpTargetObj))

  00388	57		 push	 edi
  00389	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  0038e	83 c4 04	 add	 esp, 4
  00391	85 c0		 test	 eax, eax

; 394  : 		{
; 395  : 			return FALSE;

  00393	0f 84 96 00 00
	00		 je	 $LN1230@Attack
$LN969@Attack:

; 396  : 		}
; 397  : 	}
; 398  : 
; 399  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )

  00399	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0039e	75 15		 jne	 SHORT $LN672@Attack
  003a0	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2
  003a5	75 0e		 jne	 SHORT $LN672@Attack

; 400  : 	{
; 401  : 		if ( lpObj->m_RecallMon >= 0 )

  003a7	8b 86 50 04 00
	00		 mov	 eax, DWORD PTR [esi+1104]
  003ad	85 c0		 test	 eax, eax
  003af	78 04		 js	 SHORT $LN672@Attack

; 402  : 		{
; 403  : 			if ( lpObj->m_RecallMon == lpTargetObj->m_Index )

  003b1	3b 07		 cmp	 eax, DWORD PTR [edi]

; 404  : 			{
; 405  : 				return FALSE;

  003b3	74 7a		 je	 SHORT $LN1230@Attack
$LN672@Attack:

; 406  : 			}
; 407  : 		}
; 408  : 	}
; 409  : 
; 410  : 	if ( !gObjAttackQ(lpTargetObj))

  003b5	57		 push	 edi
  003b6	e8 00 00 00 00	 call	 ?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAttackQ
  003bb	83 c4 04	 add	 esp, 4
  003be	85 c0		 test	 eax, eax

; 411  : 	{
; 412  : 		return FALSE;

  003c0	74 6d		 je	 SHORT $LN1230@Attack

; 413  : 	}
; 414  : 
; 415  : 	if ( lpObj->m_RecallMon >= 0 )

  003c2	83 be 50 04 00
	00 00		 cmp	 DWORD PTR [esi+1104], 0
  003c9	7c 0c		 jl	 SHORT $LN670@Attack

; 416  : 	{
; 417  : 		gObjCallMonsterSetEnemy(lpObj, lpTargetObj->m_Index);

  003cb	8b 07		 mov	 eax, DWORD PTR [edi]
  003cd	50		 push	 eax
  003ce	56		 push	 esi
  003cf	e8 00 00 00 00	 call	 ?gObjCallMonsterSetEnemy@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjCallMonsterSetEnemy
  003d4	83 c4 08	 add	 esp, 8
$LN670@Attack:

; 418  : 	}
; 419  : 
; 420  : 	lpObj->m_TotalAttackCount++;

  003d7	ff 86 98 03 00
	00		 inc	 DWORD PTR [esi+920]

; 421  : 
; 422  : 	if ( AttackDamage == 0 )

  003dd	83 7d 1c 00	 cmp	 DWORD PTR _AttackDamage$[ebp], 0
  003e1	0f 85 6d 01 00
	00		 jne	 $LN897@Attack

; 423  : 	{
; 424  : 		if ( skill != 76 )

  003e7	83 fb 4c	 cmp	 ebx, 76			; 0000004cH
  003ea	0f 84 64 01 00
	00		 je	 $LN897@Attack

; 425  : 		{
; 426  : 			if(!gObjSearchActiveEffect(lpObj, AT_INFINITY_ARROW) &&
; 427  : 			   !gObjSearchActiveEffect(lpObj,BUFF_INFINITY_ARROW2))

  003f0	6a 06		 push	 6
  003f2	56		 push	 esi
  003f3	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  003f8	83 c4 08	 add	 esp, 8
  003fb	84 c0		 test	 al, al
  003fd	0f 85 51 01 00
	00		 jne	 $LN897@Attack
  00403	68 8f 00 00 00	 push	 143			; 0000008fH
  00408	56		 push	 esi
  00409	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0040e	83 c4 08	 add	 esp, 8
  00411	84 c0		 test	 al, al
  00413	0f 85 3b 01 00
	00		 jne	 $LN897@Attack

; 428  : 			{
; 429  : 				if ( !this->DecreaseArrow(lpObj) )

  00419	8b 9d c0 fe ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  0041f	56		 push	 esi
  00420	8b cb		 mov	 ecx, ebx
  00422	e8 00 00 00 00	 call	 ?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::DecreaseArrow
  00427	85 c0		 test	 eax, eax
  00429	0f 85 2b 01 00
	00		 jne	 $LN666@Attack
$LN1230@Attack:
  0042f	5f		 pop	 edi
  00430	5e		 pop	 esi

; 430  : 				{
; 431  : 					return FALSE;

  00431	33 c0		 xor	 eax, eax
  00433	5b		 pop	 ebx

; 3511 : }

  00434	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00437	33 cd		 xor	 ecx, ebp
  00439	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0043e	8b e5		 mov	 esp, ebp
  00440	5d		 pop	 ebp
  00441	c2 24 00	 ret	 36			; 00000024H
$LN963@Attack:

; 291  : 					{
; 292  : 						return TRUE;
; 293  : 					}
; 294  : 				}
; 295  : 			}
; 296  : 		}
; 297  : 	}
; 298  : 
; 299  : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  00444	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2
  00449	0f 85 06 ff ff
	ff		 jne	 $LN679@Attack

; 300  : 	{
; 301  : 		if ( lpTargetObj->m_iMonsterBattleDelay > 0 )

  0044f	80 bf c9 03 00
	00 00		 cmp	 BYTE PTR [edi+969], 0

; 302  : 		{
; 303  : 			return TRUE;

  00456	0f 8f 07 4a 00
	00		 jg	 $LN1@Attack

; 304  : 		}
; 305  : 		
; 306  : 		if ( lpTargetObj->Class == 200 )

  0045c	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  00461	66 39 87 b8 00
	00 00		 cmp	 WORD PTR [edi+184], ax
  00468	75 39		 jne	 SHORT $LN689@Attack

; 307  : 		{
; 308  : 			if ( skill )
; 309  : 			{
; 310  : 				gObjMonsterStateProc(lpTargetObj, 7, lpObj->m_Index, 0);

  0046a	6a 00		 push	 0
  0046c	85 db		 test	 ebx, ebx
  0046e	74 07		 je	 SHORT $LN688@Attack
  00470	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00472	51		 push	 ecx
  00473	6a 07		 push	 7

; 311  : 			}
; 312  : 			else

  00475	eb 05		 jmp	 SHORT $LN1174@Attack
$LN688@Attack:

; 313  : 			{
; 314  : 				gObjMonsterStateProc(lpTargetObj, 6, lpObj->m_Index, 0);

  00477	8b 16		 mov	 edx, DWORD PTR [esi]
  00479	52		 push	 edx
  0047a	6a 06		 push	 6
$LN1174@Attack:
  0047c	57		 push	 edi
  0047d	e8 00 00 00 00	 call	 ?gObjMonsterStateProc@@YAXPAUOBJECTSTRUCT@@HHH@Z ; gObjMonsterStateProc
  00482	83 c4 10	 add	 esp, 16			; 00000010H

; 315  : 			}
; 316  : 
; 317  : 			if ( magicsend )

  00485	83 7d 14 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  00489	0f 84 d4 49 00
	00		 je	 $LN1@Attack

; 318  : 			{
; 319  : 				GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  0048f	8b 07		 mov	 eax, DWORD PTR [edi]
  00491	6a 01		 push	 1
  00493	50		 push	 eax
  00494	53		 push	 ebx
  00495	56		 push	 esi
  00496	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0049b	83 c4 10	 add	 esp, 16			; 00000010H

; 320  : 			}
; 321  : 
; 322  : 			return TRUE;

  0049e	e9 c0 49 00 00	 jmp	 $LN1@Attack
$LN689@Attack:

; 323  : 		}
; 324  : 
; 325  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_IMMUNE_MAGIC) == 1)

  004a3	6a 3f		 push	 63			; 0000003fH
  004a5	57		 push	 edi
  004a6	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  004ab	83 c4 08	 add	 esp, 8
  004ae	3c 01		 cmp	 al, 1
  004b0	75 2a		 jne	 SHORT $LN684@Attack

; 326  : 		{
; 327  : 			BOOL bCheckAttackIsMagicType = gObjCheckAttackTypeMagic(lpObj->Class, skill);
; 328  : 
; 329  : 			if ( bCheckAttackIsMagicType == TRUE )

  004b2	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  004b9	53		 push	 ebx
  004ba	51		 push	 ecx
  004bb	e8 00 00 00 00	 call	 ?gObjCheckAttackTypeMagic@@YAHHH@Z ; gObjCheckAttackTypeMagic
  004c0	83 c4 08	 add	 esp, 8
  004c3	83 f8 01	 cmp	 eax, 1
  004c6	75 14		 jne	 SHORT $LN684@Attack

; 330  : 			{
; 331  : 				GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, 0);

  004c8	8b 17		 mov	 edx, DWORD PTR [edi]
  004ca	6a 00		 push	 0
  004cc	52		 push	 edx
  004cd	53		 push	 ebx
  004ce	56		 push	 esi
  004cf	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  004d4	83 c4 10	 add	 esp, 16			; 00000010H

; 332  : 				return TRUE;

  004d7	e9 87 49 00 00	 jmp	 $LN1@Attack
$LN684@Attack:

; 333  : 			}
; 334  : 		}
; 335  : 
; 336  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_IMMUNE_HARM) == 1)

  004dc	6a 40		 push	 64			; 00000040H
  004de	57		 push	 edi
  004df	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  004e4	83 c4 08	 add	 esp, 8
  004e7	3c 01		 cmp	 al, 1
  004e9	75 2c		 jne	 SHORT $LN682@Attack

; 337  : 		{
; 338  : 			BOOL bCheckAttackIsMagicType = gObjCheckAttackTypeMagic(lpObj->Class, skill); //loc11
; 339  : 
; 340  : 			if ( bCheckAttackIsMagicType == FALSE )

  004eb	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  004f2	53		 push	 ebx
  004f3	50		 push	 eax
  004f4	e8 00 00 00 00	 call	 ?gObjCheckAttackTypeMagic@@YAHHH@Z ; gObjCheckAttackTypeMagic
  004f9	83 c4 08	 add	 esp, 8
  004fc	85 c0		 test	 eax, eax
  004fe	75 17		 jne	 SHORT $LN682@Attack

; 341  : 			{
; 342  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  00500	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00502	8b 16		 mov	 edx, DWORD PTR [esi]
  00504	50		 push	 eax
  00505	50		 push	 eax
  00506	50		 push	 eax
  00507	50		 push	 eax
  00508	51		 push	 ecx
  00509	52		 push	 edx
  0050a	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0050f	83 c4 18	 add	 esp, 24			; 00000018H

; 343  : 				return TRUE;

  00512	e9 4c 49 00 00	 jmp	 $LN1@Attack
$LN682@Attack:

; 344  : 			}
; 345  : 		}
; 346  : 		if ( lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementImmuneTime > 0 )

  00517	83 bf 58 1c 00
	00 00		 cmp	 DWORD PTR [edi+7256], 0
  0051e	7e 0c		 jle	 SHORT $LN680@Attack

; 347  : 		{
; 348  : 			if ( lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementImmuneNumber == skill )

  00520	39 9f 54 1c 00
	00		 cmp	 DWORD PTR [edi+7252], ebx

; 349  : 			{
; 350  : 				return TRUE;

  00526	0f 84 37 49 00
	00		 je	 $LN1@Attack
$LN680@Attack:

; 351  : 			}
; 352  : 		}
; 353  : 		if ( lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementBerserkTime > 0 ) //season4

  0052c	83 bf 70 1c 00
	00 00		 cmp	 DWORD PTR [edi+7280], 0
  00533	0f 8e 1c fe ff
	ff		 jle	 $LN679@Attack

; 354  : 		{
; 355  : 			int MSBDamage = 32;
; 356  : 			GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, MSBDamage, 0);

  00539	8b 07		 mov	 eax, DWORD PTR [edi]
  0053b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0053d	6a 00		 push	 0
  0053f	6a 20		 push	 32			; 00000020H
  00541	6a 00		 push	 0
  00543	6a 00		 push	 0
  00545	50		 push	 eax
  00546	51		 push	 ecx
  00547	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0054c	83 c4 18	 add	 esp, 24			; 00000018H

; 357  : 			return TRUE;

  0054f	e9 0f 49 00 00	 jmp	 $LN1@Attack
$LN897@Attack:

; 428  : 			{
; 429  : 				if ( !this->DecreaseArrow(lpObj) )

  00554	8b 9d c0 fe ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
$LN666@Attack:

; 432  : 				}
; 433  : 			}
; 434  : 		}
; 435  : 	}
; 436  : 
; 437  : 	if ( this->CheckAttackArea(lpObj, lpTargetObj) == FALSE )

  0055a	57		 push	 edi
  0055b	56		 push	 esi
  0055c	8b cb		 mov	 ecx, ebx
  0055e	e8 00 00 00 00	 call	 ?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::CheckAttackArea
  00563	85 c0		 test	 eax, eax

; 438  : 	{
; 439  : 		return FALSE;

  00565	0f 84 c4 fe ff
	ff		 je	 $LN1230@Attack

; 440  : 	}
; 441  : 
; 442  : 	lpCallObj = lpObj;
; 443  : 
; 444  : 	if ( lpObj->Type == OBJ_MONSTER )

  0056b	66 83 7e 68 02	 cmp	 WORD PTR [esi+104], 2
  00570	8b ce		 mov	 ecx, esi
  00572	75 18		 jne	 SHORT $LN663@Attack

; 445  : 	{
; 446  : 		if ( lpObj->m_RecallMon >= 0 )

  00574	8b 86 50 04 00
	00		 mov	 eax, DWORD PTR [esi+1104]
  0057a	85 c0		 test	 eax, eax
  0057c	78 0e		 js	 SHORT $LN663@Attack

; 447  : 		{
; 448  : 			lpCallObj = &gObj[lpObj->m_RecallMon];

  0057e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00584	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0058a	8b c8		 mov	 ecx, eax
$LN663@Attack:

; 449  : 		}
; 450  : 	}
; 451  : 
; 452  : 	lpCallTargetObj = lpTargetObj;
; 453  : 
; 454  : 	if ( lpTargetObj->Type == OBJ_MONSTER )
; 455  : 	{
; 456  : 		if ( lpTargetObj->m_RecallMon >= 0 )
; 457  : 		{
; 458  : 			lpCallTargetObj = &gObj[lpTargetObj->m_RecallMon];
; 459  : 		}
; 460  : 	}
; 461  : 
; 462  : 	if ( this->PkCheck(lpCallObj, lpTargetObj) == FALSE )

  0058c	57		 push	 edi
  0058d	51		 push	 ecx
  0058e	8b cb		 mov	 ecx, ebx
  00590	e8 00 00 00 00	 call	 ?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::PkCheck
  00595	85 c0		 test	 eax, eax

; 463  : 	{
; 464  : 		return FALSE;

  00597	0f 84 92 fe ff
	ff		 je	 $LN1230@Attack

; 465  : 	}
; 466  : 
; 467  : 	int Strength = lpObj->Strength + lpObj->AddStrength; //

  0059d	0f b7 8e f4 00
	00 00		 movzx	 ecx, WORD PTR [esi+244]
  005a4	0f bf 86 20 01
	00 00		 movsx	 eax, WORD PTR [esi+288]

; 468  : 	int Dexterity = lpObj->Dexterity + lpObj->AddDexterity; //

  005ab	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  005b2	03 c1		 add	 eax, ecx

; 469  : 	int Vitality = lpObj->Vitality + lpObj->AddVitality; //loc12

  005b4	0f b7 8e f8 00
	00 00		 movzx	 ecx, WORD PTR [esi+248]
  005bb	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _Strength$[ebp], eax
  005c1	0f bf 86 22 01
	00 00		 movsx	 eax, WORD PTR [esi+290]
  005c8	03 c2		 add	 eax, edx

; 470  : 	int Energy = lpObj->Energy + lpObj->AddEnergy; //3c

  005ca	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  005d1	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _Dexterity$[ebp], eax
  005d7	0f bf 86 24 01
	00 00		 movsx	 eax, WORD PTR [esi+292]
  005de	03 c1		 add	 eax, ecx
  005e0	89 85 dc fe ff
	ff		 mov	 DWORD PTR _Vitality$[ebp], eax
  005e6	0f bf 86 26 01
	00 00		 movsx	 eax, WORD PTR [esi+294]
  005ed	03 c2		 add	 eax, edx

; 471  : 	BOOL bIsOnDuel = gObjDuelCheck(lpObj, lpTargetObj); //30

  005ef	57		 push	 edi
  005f0	56		 push	 esi
  005f1	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _Energy$[ebp], eax
  005f7	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  005fc	83 c4 08	 add	 esp, 8
  005ff	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _bIsOnDuel$[ebp], eax

; 472  : 
; 473  : 	if ( bIsOnDuel )

  00605	85 c0		 test	 eax, eax
  00607	74 16		 je	 SHORT $LN659@Attack

; 474  : 	{
; 475  : 		lpObj->m_iDuelTickCount = GetTickCount();

  00609	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  0060f	ff d3		 call	 ebx
  00611	89 86 c0 0e 00
	00		 mov	 DWORD PTR [esi+3776], eax

; 476  : 		lpTargetObj->m_iDuelTickCount = GetTickCount();

  00617	ff d3		 call	 ebx
  00619	89 87 c0 0e 00
	00		 mov	 DWORD PTR [edi+3776], eax
$LN659@Attack:

; 477  : 	}
; 478  : 
; 479  : 	if ( lpObj->pInventory[0].m_Type == ITEMGET(2,5) && lpObj->pInventory[0].m_IsValidItem != false )	// Crystal Sword

  0061f	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  00625	b9 05 04 00 00	 mov	 ecx, 1029		; 00000405H
  0062a	66 39 48 06	 cmp	 WORD PTR [eax+6], cx
  0062e	75 09		 jne	 SHORT $LN658@Attack
  00630	80 b8 b0 00 00
	00 00		 cmp	 BYTE PTR [eax+176], 0

; 480  : 	{
; 481  : 		if ( (rand()%20) == 0 )
; 482  : 		{
; 483  : 			skill = 7;
; 484  : 			lpMagic = &DefMagicInf[7];
; 485  : 			magicsend = 1;
; 486  : 		}
; 487  : 	}

  00637	75 14		 jne	 SHORT $LN1176@Attack
$LN658@Attack:

; 488  : 	else if ( lpObj->pInventory[1].m_Type == ITEMGET(2,5) && lpObj->pInventory[1].m_IsValidItem != false )	// Crystal Sword

  00639	8b d1		 mov	 edx, ecx
  0063b	66 39 90 da 00
	00 00		 cmp	 WORD PTR [eax+218], dx
  00642	75 35		 jne	 SHORT $LN855@Attack
  00644	80 b8 84 01 00
	00 00		 cmp	 BYTE PTR [eax+388], 0
  0064b	74 2c		 je	 SHORT $LN855@Attack
$LN1176@Attack:

; 489  : 	{
; 490  : 		if ( (rand()%20) == 0 )

  0064d	e8 00 00 00 00	 call	 _rand
  00652	99		 cdq
  00653	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00658	f7 f9		 idiv	 ecx
  0065a	85 d2		 test	 edx, edx
  0065c	75 1b		 jne	 SHORT $LN855@Attack

; 491  : 		{
; 492  : 			skill = 7;
; 493  : 			lpMagic = &DefMagicInf[7];
; 494  : 			magicsend = 1;

  0065e	c7 45 14 01 00
	00 00		 mov	 DWORD PTR _magicsend$[ebp], 1
  00665	c7 85 bc fe ff
	ff a8 00 00 00	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], OFFSET ?DefMagicInf@@3PAVCMagicInf@@A+168
  0066f	c7 85 d0 fe ff
	ff 07 00 00 00	 mov	 DWORD PTR _skill$[ebp], 7
$LN855@Attack:

; 495  : 		}
; 496  : 	}
; 497  : 
; 498  : 	MSBFlag = 0;
; 499  : 	MsgDamage = 0;
; 500  : 	skillSuccess = this->ResistanceCheck(lpObj, lpTargetObj, skill);

  00679	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _skill$[ebp]
  0067f	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00685	52		 push	 edx
  00686	57		 push	 edi
  00687	56		 push	 esi
  00688	c6 45 18 00	 mov	 BYTE PTR _MSBFlag$[ebp], 0
  0068c	c6 85 e7 fe ff
	ff 00		 mov	 BYTE PTR _MsgDamage$[ebp], 0
  00693	e8 00 00 00 00	 call	 ?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjBaseAttack::ResistanceCheck

; 501  : 	BOOL skillIceArrowSuccess = skillSuccess;
; 502  : 
; 503  : 	if ( skill == 51 || skill == 424 )

  00698	83 bd d0 fe ff
	ff 33		 cmp	 DWORD PTR _skill$[ebp], 51 ; 00000033H
  0069f	8b d8		 mov	 ebx, eax
  006a1	89 9d a0 fe ff
	ff		 mov	 DWORD PTR _skillSuccess$[ebp], ebx
  006a7	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _skillIceArrowSuccess$[ebp], ebx
  006ad	74 0c		 je	 SHORT $LN652@Attack
  006af	81 bd d0 fe ff
	ff a8 01 00 00	 cmp	 DWORD PTR _skill$[ebp], 424 ; 000001a8H
  006b9	75 08		 jne	 SHORT $LN653@Attack
$LN652@Attack:

; 504  : 	{
; 505  : 		skillSuccess = 0;

  006bb	33 db		 xor	 ebx, ebx
  006bd	89 9d a0 fe ff
	ff		 mov	 DWORD PTR _skillSuccess$[ebp], ebx
$LN653@Attack:

; 506  : 	}
; 507  : 
; 508  : 	BOOL bAllMiss = FALSE;
; 509  : 	
; 510  : 	if(gObjSearchActiveEffect(lpObj, AT_INVISIBILITY) == 1 && (lpObj->Authority&32) != 32)

  006c3	6a 12		 push	 18			; 00000012H
  006c5	56		 push	 esi
  006c6	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _bAllMiss$[ebp], 0
  006d0	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  006d5	83 c4 08	 add	 esp, 8
  006d8	3c 01		 cmp	 al, 1
  006da	75 16		 jne	 SHORT $LN651@Attack
  006dc	f6 86 0c 02 00
	00 20		 test	 BYTE PTR [esi+524], 32	; 00000020H
  006e3	75 0d		 jne	 SHORT $LN651@Attack

; 511  : 	{
; 512  : 		gObjUseSkill.RemoveCloakingEffect(lpObj->m_Index);

  006e5	8b 06		 mov	 eax, DWORD PTR [esi]
  006e7	50		 push	 eax
  006e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  006ed	e8 00 00 00 00	 call	 ?RemoveCloakingEffect@CObjUseSkill@@QAEHH@Z ; CObjUseSkill::RemoveCloakingEffect
$LN651@Attack:

; 513  : 	}
; 514  : 
; 515  : 	BOOL bDamageReflect = FALSE;
; 516  : 	
; 517  : 	if ( AttackDamage == 0 )

  006f2	83 7d 1c 00	 cmp	 DWORD PTR _AttackDamage$[ebp], 0
  006f6	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _bDamageReflect$[ebp], 0
  00700	0f 85 e4 36 00
	00		 jne	 $LN650@Attack

; 518  : 	{
; 519  : 		if ( g_ShieldSystemOn == TRUE )

  00706	b8 01 00 00 00	 mov	 eax, 1
  0070b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, eax ; g_ShieldSystemOn
  00711	0f 85 84 00 00
	00		 jne	 $LN649@Attack

; 520  : 		{
; 521  : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  00717	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0071b	75 41		 jne	 SHORT $LN648@Attack
  0071d	66 39 47 68	 cmp	 WORD PTR [edi+104], ax
  00721	75 3b		 jne	 SHORT $LN648@Attack

; 522  : 			{
; 523  : 				if ( !this->MissCheckPvP(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss,byBarrageCount) )

  00723	8b 4d 24	 mov	 ecx, DWORD PTR _byBarrageCount$[ebp]
  00726	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  00729	51		 push	 ecx
  0072a	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _skill$[ebp]
  00730	8d 95 ac fe ff
	ff		 lea	 edx, DWORD PTR _bAllMiss$[ebp]
  00736	52		 push	 edx
  00737	50		 push	 eax
  00738	53		 push	 ebx
  00739	51		 push	 ecx
  0073a	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00740	57		 push	 edi
  00741	56		 push	 esi
  00742	e8 00 00 00 00	 call	 ?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheckPvP
  00747	85 c0		 test	 eax, eax
  00749	75 7e		 jne	 SHORT $LN643@Attack
  0074b	5f		 pop	 edi
  0074c	5e		 pop	 esi
  0074d	5b		 pop	 ebx

; 3511 : }

  0074e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00751	33 cd		 xor	 ecx, ebp
  00753	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00758	8b e5		 mov	 esp, ebp
  0075a	5d		 pop	 ebp
  0075b	c2 24 00	 ret	 36			; 00000024H
$LN648@Attack:

; 524  : 				{
; 525  : 					return FALSE;
; 526  : 				}
; 527  : 			}
; 528  : 			else if ( !this->MissCheck(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss,byBarrageCount) )

  0075e	8b 45 24	 mov	 eax, DWORD PTR _byBarrageCount$[ebp]
  00761	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00767	8b 11		 mov	 edx, DWORD PTR [ecx]
  00769	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0076c	50		 push	 eax
  0076d	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  00773	50		 push	 eax
  00774	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  00777	50		 push	 eax
  00778	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  0077e	53		 push	 ebx
  0077f	50		 push	 eax
  00780	57		 push	 edi
  00781	56		 push	 esi
  00782	ff d2		 call	 edx
  00784	85 c0		 test	 eax, eax
  00786	75 41		 jne	 SHORT $LN643@Attack
  00788	5f		 pop	 edi
  00789	5e		 pop	 esi
  0078a	5b		 pop	 ebx

; 3511 : }

  0078b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0078e	33 cd		 xor	 ecx, ebp
  00790	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00795	8b e5		 mov	 esp, ebp
  00797	5d		 pop	 ebp
  00798	c2 24 00	 ret	 36			; 00000024H
$LN649@Attack:

; 529  : 			{
; 530  : 				return FALSE;
; 531  : 			}
; 532  : 
; 533  : 		}
; 534  : 		else if ( !this->MissCheck(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss,byBarrageCount) )

  0079b	8b 55 24	 mov	 edx, DWORD PTR _byBarrageCount$[ebp]
  0079e	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  007a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  007a6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  007a9	52		 push	 edx
  007aa	8d 95 ac fe ff
	ff		 lea	 edx, DWORD PTR _bAllMiss$[ebp]
  007b0	52		 push	 edx
  007b1	8b 55 14	 mov	 edx, DWORD PTR _magicsend$[ebp]
  007b4	52		 push	 edx
  007b5	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _skill$[ebp]
  007bb	53		 push	 ebx
  007bc	52		 push	 edx
  007bd	57		 push	 edi
  007be	56		 push	 esi
  007bf	ff d0		 call	 eax
  007c1	85 c0		 test	 eax, eax

; 535  : 		{
; 536  : 			return FALSE;

  007c3	0f 84 66 fc ff
	ff		 je	 $LN1230@Attack
$LN643@Attack:

; 537  : 		}
; 538  : 
; 539  : 		if ( ( skill == 51 || skill == 424 ) &&
; 540  : 			skillIceArrowSuccess == TRUE )

  007c9	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  007cf	83 f8 33	 cmp	 eax, 51			; 00000033H
  007d2	74 07		 je	 SHORT $LN641@Attack
  007d4	3d a8 01 00 00	 cmp	 eax, 424		; 000001a8H
  007d9	75 57		 jne	 SHORT $LN642@Attack
$LN641@Attack:
  007db	bb 01 00 00 00	 mov	 ebx, 1
  007e0	39 9d e0 fe ff
	ff		 cmp	 DWORD PTR _skillIceArrowSuccess$[ebp], ebx
  007e6	75 4a		 jne	 SHORT $LN642@Attack

; 541  : 		{
; 542  : 			gObjApplyBuffEffectDuration(lpTargetObj, AT_ICE_ARROW, 0, 0, 0, 0, 7);

  007e8	6a 07		 push	 7
  007ea	6a 00		 push	 0
  007ec	6a 00		 push	 0
  007ee	6a 00		 push	 0
  007f0	6a 00		 push	 0
  007f2	6a 39		 push	 57			; 00000039H
  007f4	57		 push	 edi
  007f5	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 543  : 			lpTargetObj->lpAttackObj = lpObj;
; 544  : 			lpTargetObj->PathCount = 0;
; 545  : 			lpTargetObj->PathStartEnd = 0;
; 546  : 			skillSuccess = TRUE;
; 547  : 
; 548  : 			//double :|
; 549  : 			lpTargetObj->PathCount = 0;
; 550  : 			lpTargetObj->PathStartEnd = 0;
; 551  : 			skillSuccess = TRUE;
; 552  : 
; 553  : 			gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  007fa	0f bf 8f 46 01
	00 00		 movsx	 ecx, WORD PTR [edi+326]
  00801	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  00808	8b 07		 mov	 eax, DWORD PTR [edi]
  0080a	51		 push	 ecx
  0080b	52		 push	 edx
  0080c	50		 push	 eax
  0080d	89 b7 d4 03 00
	00		 mov	 DWORD PTR [edi+980], esi
  00813	c7 87 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+388], 0
  0081d	c6 87 8c 01 00
	00 00		 mov	 BYTE PTR [edi+396], 0
  00824	89 9d a0 fe ff
	ff		 mov	 DWORD PTR _skillSuccess$[ebp], ebx
  0082a	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0082f	83 c4 28	 add	 esp, 40			; 00000028H
$LN642@Attack:

; 554  : 		}
; 555  : 
; 556  : 		if (g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  00832	6a 17		 push	 23			; 00000017H
  00834	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00839	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0083e	84 c0		 test	 al, al
  00840	75 10		 jne	 SHORT $LN639@Attack
  00842	6a 24		 push	 36			; 00000024H
  00844	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00849	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0084e	84 c0		 test	 al, al
  00850	74 0e		 je	 SHORT $LN640@Attack
$LN639@Attack:

; 557  : 		{
; 558  : 			lpObj->m_SkillNumber = skill;

  00852	66 8b 8d d0 fe
	ff ff		 mov	 cx, WORD PTR _skill$[ebp]
  00859	66 89 8e d8 03
	00 00		 mov	 WORD PTR [esi+984], cx
$LN640@Attack:

; 559  : 		}
; 560  : 
; 561  : 		int targetdefense = this->GetTargetDefense(lpObj, lpTargetObj, MsgDamage);

  00860	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00866	8d 95 e7 fe ff
	ff		 lea	 edx, DWORD PTR _MsgDamage$[ebp]
  0086c	52		 push	 edx
  0086d	57		 push	 edi
  0086e	56		 push	 esi
  0086f	e8 00 00 00 00	 call	 ?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ; CObjBaseAttack::GetTargetDefense
  00874	8b d8		 mov	 ebx, eax

; 562  : 
; 563  : 		//Season4 berserker add-on
; 564  : 		//if(gObjSearchActiveEffect(lpTargetObj, AT_BERSERKER) == 1)
; 565  : 		//{
; 566  : 
; 567  : 		//	//float BerserkerDex = (float)((lpTargetObj->Dexterity + lpTargetObj->AddDexterity) / 3);
; 568  : 		//	float BerserkerEffect = (float)gObjGetActiveEffect(lpTargetObj, 32);
; 569  : 
; 570  : 		//	//float loc24 = (((float)(40.0f) - (float)(BerserkerEffect))/100.0f);
; 571  : 
; 572  : 		//	//loc24 = (0.1f > loc24)?0.1f:loc24;
; 573  : 		//	//targetdefense -= (int)(BerserkerDex * loc24);
; 574  : 		//	//float fDefense = (lpTargetObj->Dexterity+lpTargetObj->AddDexterity)/3;
; 575  : 		//	//float fValue = (float)gObjGetTotalValueOfEffect(lpTargetObj, 32);
; 576  : 		//	//float fPercent = (40- (fValue+lpObj->m_MPSkillOpt.MpsBerserkInc1))/100;
; 577  : 
; 578  : 
; 579  : 		//	targetdefense -= ( targetdefense * ZtConfig.Skills.Ex_BerserkerDex ) / 100;
; 580  : 		//}
; 581  : 
; 582  : 		if( gObjSearchActiveEffect(lpTargetObj,AT_BERSERKER) == TRUE)

  00876	6a 51		 push	 81			; 00000051H
  00878	57		 push	 edi
  00879	89 9d d8 fe ff
	ff		 mov	 DWORD PTR _targetdefense$222421[ebp], ebx
  0087f	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00884	83 c4 08	 add	 esp, 8
  00887	3c 01		 cmp	 al, 1
  00889	75 2a		 jne	 SHORT $LN638@Attack

; 583  : 		{
; 584  : 			//if(g_SkillAdditionInfo.BerserkerDefenceDivProcent)
; 585  : 			//float fDefense = (lpTargetObj->Dexterity+lpTargetObj->AddDexterity)/3;
; 586  : 			float fValue = (float)gObjGetActiveEffect(lpTargetObj, 32);

  0088b	6a 20		 push	 32			; 00000020H
  0088d	57		 push	 edi
  0088e	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect

; 587  : 			//float fPercent = (40- (fValue+lpObj->m_MPSkillOpt.MpsBerserkInc1))/100;
; 588  : 			//fPercent = (0.1f > fPercent) ? 0.1f : fPercent;
; 589  : 			targetdefense -= ( targetdefense * g_SkillAdditionInfo.BerserkerDefenceDivProcent ) / 100;

  00893	0f b7 0d ba 0b
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3002
  0089a	0f af cb	 imul	 ecx, ebx
  0089d	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  008a2	f7 e9		 imul	 ecx
  008a4	c1 fa 05	 sar	 edx, 5
  008a7	8b c2		 mov	 eax, edx
  008a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  008ac	03 c2		 add	 eax, edx
  008ae	83 c4 08	 add	 esp, 8
  008b1	03 d8		 add	 ebx, eax

; 590  : 		}
; 591  : 		else if (	gObjSearchActiveEffect(lpTargetObj,150) == TRUE ||

  008b3	eb 5e		 jmp	 SHORT $LN1177@Attack
$LN638@Attack:

; 592  : 					gObjSearchActiveEffect(lpTargetObj,151) == TRUE ||
; 593  : 					gObjSearchActiveEffect(lpTargetObj,152) == TRUE)

  008b5	68 96 00 00 00	 push	 150			; 00000096H
  008ba	57		 push	 edi
  008bb	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  008c0	83 c4 08	 add	 esp, 8
  008c3	3c 01		 cmp	 al, 1
  008c5	74 24		 je	 SHORT $LN635@Attack
  008c7	68 97 00 00 00	 push	 151			; 00000097H
  008cc	57		 push	 edi
  008cd	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  008d2	83 c4 08	 add	 esp, 8
  008d5	3c 01		 cmp	 al, 1
  008d7	74 12		 je	 SHORT $LN635@Attack
  008d9	68 98 00 00 00	 push	 152			; 00000098H
  008de	57		 push	 edi
  008df	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  008e4	83 c4 08	 add	 esp, 8
  008e7	3c 01		 cmp	 al, 1
  008e9	75 2e		 jne	 SHORT $LN636@Attack
$LN635@Attack:

; 594  : 		{
; 595  : 			//float fDefense = (lpTargetObj->Dexterity+lpTargetObj->AddDexterity)/3;
; 596  : 			float fValue = (float)gObjGetActiveEffect(lpTargetObj, 32);

  008eb	6a 20		 push	 32			; 00000020H
  008ed	57		 push	 edi
  008ee	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect

; 597  : 			//float fPercent = (40- (fValue+lpObj->m_MPSkillOpt.MpsBerserkInc1))/100;
; 598  : 			//fPercent = (0.1f > fPercent) ? 0.1f : fPercent;
; 599  : 			targetdefense -= ( targetdefense * g_SkillAdditionInfo.m_BerserkerDefenceDivProcent ) / 100;

  008f3	0f b7 0d c2 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3266
  008fa	0f af cb	 imul	 ecx, ebx
  008fd	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00902	f7 e9		 imul	 ecx
  00904	c1 fa 05	 sar	 edx, 5
  00907	8b ca		 mov	 ecx, edx
  00909	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0090c	03 ca		 add	 ecx, edx
  0090e	83 c4 08	 add	 esp, 8
  00911	03 d9		 add	 ebx, ecx
$LN1177@Attack:
  00913	89 9d d8 fe ff
	ff		 mov	 DWORD PTR _targetdefense$222421[ebp], ebx
$LN636@Attack:

; 600  : 		}
; 601  : 
; 602  : 		int iInnovationValue = 0; //Reduce Target Defense
; 603  : 
; 604  : 		gObjUpdateAppliedBuffEffect(lpTargetObj, AT_INNOVATION, &iInnovationValue, 0);

  00919	6a 00		 push	 0
  0091b	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR _iInnovationValue$222430[ebp]
  00921	52		 push	 edx
  00922	6a 4d		 push	 77			; 0000004dH
  00924	57		 push	 edi
  00925	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iInnovationValue$222430[ebp], 0
  0092f	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  00934	83 c4 10	 add	 esp, 16			; 00000010H

; 605  : 
; 606  : 		if(iInnovationValue != 0)

  00937	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _iInnovationValue$222430[ebp], 0
  0093e	74 23		 je	 SHORT $LN634@Attack

; 607  : 		{
; 608  : 			//int Ex_InnovationPower = GetPrivateProfileInt("Summoner","InnovationPower",30,"..\\Data\\ZtData\\Skills.ini");
; 609  : 			targetdefense -= ( targetdefense * g_SkillAdditionInfo.InnovationMaxPower ) / 100;

  00940	0f b7 0d 3a 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3130
  00947	0f af cb	 imul	 ecx, ebx
  0094a	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  0094f	f7 e9		 imul	 ecx
  00951	c1 fa 05	 sar	 edx, 5
  00954	8b c2		 mov	 eax, edx
  00956	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00959	03 c2		 add	 eax, edx
  0095b	03 d8		 add	 ebx, eax
  0095d	89 9d d8 fe ff
	ff		 mov	 DWORD PTR _targetdefense$222421[ebp], ebx
$LN634@Attack:

; 610  : 		}
; 611  : 
; 612  : 		if ( skill == 19
; 613  : 			|| skill == 20
; 614  : 			|| skill == 21
; 615  : 			|| skill == 22
; 616  : 			|| skill == 23
; 617  : 			|| skill == 56
; 618  : 			|| skill == 41
; 619  : 			|| skill == 47
; 620  : 			|| skill == 42
; 621  : 			|| skill == 49
; 622  : 			|| skill == 43
; 623  : 			|| skill == 55
; 624  : 			|| skill == 44
; 625  : 			|| skill == 57
; 626  : 			|| skill == 74
; 627  : 			|| skill == 235
; 628  : 			|| skill == 232
; 629  : 			|| skill == 236
; 630  : 			|| skill == 238
; 631  : 			|| skill == 326
; 632  : 			|| skill == 327
; 633  : 			|| skill == 328
; 634  : 			|| skill == 329
; 635  : 			|| skill == 330
; 636  : 			|| skill == 331
; 637  : 			|| skill == 332
; 638  : 			|| skill == 333
; 639  : 			|| skill == 336
; 640  : 			|| skill == 339
; 641  : 			|| skill == 342
; 642  : 			|| skill == 337
; 643  : 			//case AT_MSKILL_DK_DESTRUCTION2:
; 644  : 			//case AT_MSKILL_DK_DESTRUCTION3:
; 645  : 			|| skill == 344
; 646  : 			|| skill == 346
; 647  : 			|| skill == 411
; 648  : 			|| skill == 431
; 649  : 			|| skill == 479
; 650  : 			|| skill == 481
; 651  : 			|| skill == 493
; 652  : 			//case AT_MSKILL_MG_FIRESLASH2:
; 653  : 			|| skill == 482
; 654  : 			|| skill == 492
; 655  : 			|| skill == 494
; 656  : 			)

  00963	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  00969	83 f8 13	 cmp	 eax, 19			; 00000013H
  0096c	0f 84 92 05 00
	00		 je	 $LN632@Attack
  00972	83 f8 14	 cmp	 eax, 20			; 00000014H
  00975	0f 84 89 05 00
	00		 je	 $LN632@Attack
  0097b	83 f8 15	 cmp	 eax, 21			; 00000015H
  0097e	0f 84 80 05 00
	00		 je	 $LN632@Attack
  00984	83 f8 16	 cmp	 eax, 22			; 00000016H
  00987	0f 84 77 05 00
	00		 je	 $LN632@Attack
  0098d	83 f8 17	 cmp	 eax, 23			; 00000017H
  00990	0f 84 6e 05 00
	00		 je	 $LN632@Attack
  00996	83 f8 38	 cmp	 eax, 56			; 00000038H
  00999	0f 84 65 05 00
	00		 je	 $LN632@Attack
  0099f	83 f8 29	 cmp	 eax, 41			; 00000029H
  009a2	0f 84 5c 05 00
	00		 je	 $LN632@Attack
  009a8	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  009ab	0f 84 53 05 00
	00		 je	 $LN632@Attack
  009b1	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  009b4	0f 84 4a 05 00
	00		 je	 $LN632@Attack
  009ba	83 f8 31	 cmp	 eax, 49			; 00000031H
  009bd	0f 84 41 05 00
	00		 je	 $LN632@Attack
  009c3	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  009c6	0f 84 38 05 00
	00		 je	 $LN632@Attack
  009cc	83 f8 37	 cmp	 eax, 55			; 00000037H
  009cf	0f 84 2f 05 00
	00		 je	 $LN632@Attack
  009d5	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  009d8	0f 84 26 05 00
	00		 je	 $LN632@Attack
  009de	83 f8 39	 cmp	 eax, 57			; 00000039H
  009e1	0f 84 1d 05 00
	00		 je	 $LN632@Attack
  009e7	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  009ea	0f 84 14 05 00
	00		 je	 $LN632@Attack
  009f0	3d eb 00 00 00	 cmp	 eax, 235		; 000000ebH
  009f5	0f 84 09 05 00
	00		 je	 $LN632@Attack
  009fb	3d e8 00 00 00	 cmp	 eax, 232		; 000000e8H
  00a00	0f 84 fe 04 00
	00		 je	 $LN632@Attack
  00a06	3d ec 00 00 00	 cmp	 eax, 236		; 000000ecH
  00a0b	0f 84 f3 04 00
	00		 je	 $LN632@Attack
  00a11	3d ee 00 00 00	 cmp	 eax, 238		; 000000eeH
  00a16	0f 84 e8 04 00
	00		 je	 $LN632@Attack
  00a1c	3d 46 01 00 00	 cmp	 eax, 326		; 00000146H
  00a21	0f 84 dd 04 00
	00		 je	 $LN632@Attack
  00a27	3d 47 01 00 00	 cmp	 eax, 327		; 00000147H
  00a2c	0f 84 d2 04 00
	00		 je	 $LN632@Attack
  00a32	3d 48 01 00 00	 cmp	 eax, 328		; 00000148H
  00a37	0f 84 c7 04 00
	00		 je	 $LN632@Attack
  00a3d	3d 49 01 00 00	 cmp	 eax, 329		; 00000149H
  00a42	0f 84 bc 04 00
	00		 je	 $LN632@Attack
  00a48	3d 4a 01 00 00	 cmp	 eax, 330		; 0000014aH
  00a4d	0f 84 b1 04 00
	00		 je	 $LN632@Attack
  00a53	3d 4b 01 00 00	 cmp	 eax, 331		; 0000014bH
  00a58	0f 84 a6 04 00
	00		 je	 $LN632@Attack
  00a5e	3d 4c 01 00 00	 cmp	 eax, 332		; 0000014cH
  00a63	0f 84 9b 04 00
	00		 je	 $LN632@Attack
  00a69	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  00a6e	0f 84 90 04 00
	00		 je	 $LN632@Attack
  00a74	3d 50 01 00 00	 cmp	 eax, 336		; 00000150H
  00a79	0f 84 85 04 00
	00		 je	 $LN632@Attack
  00a7f	3d 53 01 00 00	 cmp	 eax, 339		; 00000153H
  00a84	0f 84 7a 04 00
	00		 je	 $LN632@Attack
  00a8a	3d 56 01 00 00	 cmp	 eax, 342		; 00000156H
  00a8f	0f 84 6f 04 00
	00		 je	 $LN632@Attack
  00a95	3d 51 01 00 00	 cmp	 eax, 337		; 00000151H
  00a9a	0f 84 64 04 00
	00		 je	 $LN632@Attack
  00aa0	3d 58 01 00 00	 cmp	 eax, 344		; 00000158H
  00aa5	0f 84 59 04 00
	00		 je	 $LN632@Attack
  00aab	3d 5a 01 00 00	 cmp	 eax, 346		; 0000015aH
  00ab0	0f 84 4e 04 00
	00		 je	 $LN632@Attack
  00ab6	3d 9b 01 00 00	 cmp	 eax, 411		; 0000019bH
  00abb	0f 84 43 04 00
	00		 je	 $LN632@Attack
  00ac1	3d af 01 00 00	 cmp	 eax, 431		; 000001afH
  00ac6	0f 84 38 04 00
	00		 je	 $LN632@Attack
  00acc	3d df 01 00 00	 cmp	 eax, 479		; 000001dfH
  00ad1	0f 84 2d 04 00
	00		 je	 $LN632@Attack
  00ad7	3d e1 01 00 00	 cmp	 eax, 481		; 000001e1H
  00adc	0f 84 22 04 00
	00		 je	 $LN632@Attack
  00ae2	3d ed 01 00 00	 cmp	 eax, 493		; 000001edH
  00ae7	0f 84 17 04 00
	00		 je	 $LN632@Attack
  00aed	3d e2 01 00 00	 cmp	 eax, 482		; 000001e2H
  00af2	0f 84 0c 04 00
	00		 je	 $LN632@Attack
  00af8	3d ec 01 00 00	 cmp	 eax, 492		; 000001ecH
  00afd	0f 84 01 04 00
	00		 je	 $LN632@Attack
  00b03	3d ee 01 00 00	 cmp	 eax, 494		; 000001eeH
  00b08	0f 84 f6 03 00
	00		 je	 $LN632@Attack

; 663  : 			}
; 664  : 		}
; 665  : 		else if ( skill == 76 )	// pluzzmanton

  00b0e	83 f8 4c	 cmp	 eax, 76			; 0000004cH
  00b11	0f 85 27 03 00
	00		 jne	 $LN629@Attack

; 666  : 		{
; 667  : 			int iFenrirAttackDmg = 0;
; 668  : 
; 669  : 			if ( lpObj->Class == CLASS_KNIGHT || lpObj->Class == CLASS_MAGUMSA )

  00b17	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00b1e	83 f8 01	 cmp	 eax, 1
  00b21	0f 84 78 01 00
	00		 je	 $LN627@Attack
  00b27	83 f8 03	 cmp	 eax, 3
  00b2a	0f 84 6f 01 00
	00		 je	 $LN627@Attack

; 672  : 			}
; 673  : 			else if ( lpObj->Class == CLASS_WIZARD )

  00b30	66 85 c0	 test	 ax, ax
  00b33	75 6d		 jne	 SHORT $LN625@Attack

; 674  : 			{
; 675  : 				iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 5 + lpObj->Vitality / 7 + lpObj->Energy / 3;	// #formula

  00b35	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  00b3c	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00b41	f7 e9		 imul	 ecx
  00b43	0f b7 8e f8 00
	00 00		 movzx	 ecx, WORD PTR [esi+248]
  00b4a	8b da		 mov	 ebx, edx
  00b4c	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00b4f	03 da		 add	 ebx, edx
  00b51	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00b56	f7 e9		 imul	 ecx
  00b58	03 d1		 add	 edx, ecx
  00b5a	0f b7 8e f6 00
	00 00		 movzx	 ecx, WORD PTR [esi+246]
  00b61	c1 fa 02	 sar	 edx, 2
  00b64	8b c2		 mov	 eax, edx
  00b66	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00b69	03 da		 add	 ebx, edx
  00b6b	03 c3		 add	 eax, ebx
  00b6d	8b d8		 mov	 ebx, eax
  00b6f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00b74	f7 e9		 imul	 ecx
  00b76	0f b7 8e f4 00
	00 00		 movzx	 ecx, WORD PTR [esi+244]
  00b7d	d1 fa		 sar	 edx, 1
  00b7f	8b c2		 mov	 eax, edx
  00b81	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00b84	03 da		 add	 ebx, edx
  00b86	03 c3		 add	 eax, ebx
  00b88	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv1885[ebp], eax
  00b8e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00b93	f7 e9		 imul	 ecx
  00b95	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv1885[ebp]
  00b9b	d1 fa		 sar	 edx, 1
  00b9d	e9 65 01 00 00	 jmp	 $LN1178@Attack
$LN625@Attack:

; 676  : 			}
; 677  : 			else if ( lpObj->Class == CLASS_ELF )

  00ba2	83 f8 02	 cmp	 eax, 2
  00ba5	75 6d		 jne	 SHORT $LN623@Attack

; 678  : 			{
; 679  : 				iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 3 + lpObj->Vitality / 7 + lpObj->Energy / 5;	// #formula

  00ba7	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  00bae	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00bb3	f7 e9		 imul	 ecx
  00bb5	0f b7 8e f8 00
	00 00		 movzx	 ecx, WORD PTR [esi+248]
  00bbc	d1 fa		 sar	 edx, 1
  00bbe	8b da		 mov	 ebx, edx
  00bc0	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00bc3	03 da		 add	 ebx, edx
  00bc5	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00bca	f7 e9		 imul	 ecx
  00bcc	03 d1		 add	 edx, ecx
  00bce	0f b7 8e f6 00
	00 00		 movzx	 ecx, WORD PTR [esi+246]
  00bd5	c1 fa 02	 sar	 edx, 2
  00bd8	8b c2		 mov	 eax, edx
  00bda	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00bdd	03 da		 add	 ebx, edx
  00bdf	03 c3		 add	 eax, ebx
  00be1	8b d8		 mov	 ebx, eax
  00be3	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00be8	f7 e9		 imul	 ecx
  00bea	0f b7 8e f4 00
	00 00		 movzx	 ecx, WORD PTR [esi+244]
  00bf1	8b c2		 mov	 eax, edx
  00bf3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00bf6	03 da		 add	 ebx, edx
  00bf8	03 c3		 add	 eax, ebx
  00bfa	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv1862[ebp], eax
  00c00	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00c05	f7 e9		 imul	 ecx
  00c07	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv1862[ebp]
  00c0d	d1 fa		 sar	 edx, 1

; 680  : 			}
; 681  : 			else	// Dark Lord

  00c0f	e9 f3 00 00 00	 jmp	 $LN1178@Attack
$LN623@Attack:

; 682  : 			{
; 683  : 				iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 5 + lpObj->Vitality / 7 + lpObj->Energy / 3 + lpObj->Leadership / 3;	// #formula

  00c14	0f b7 8e 18 01
	00 00		 movzx	 ecx, WORD PTR [esi+280]
  00c1b	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00c20	f7 e9		 imul	 ecx
  00c22	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  00c29	8b da		 mov	 ebx, edx
  00c2b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00c2e	03 da		 add	 ebx, edx
  00c30	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00c35	f7 e9		 imul	 ecx
  00c37	0f b7 8e f8 00
	00 00		 movzx	 ecx, WORD PTR [esi+248]
  00c3e	03 da		 add	 ebx, edx
  00c40	8b c2		 mov	 eax, edx
  00c42	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00c45	03 c3		 add	 eax, ebx
  00c47	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv1851[ebp], eax
  00c4d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00c52	f7 e9		 imul	 ecx
  00c54	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv1851[ebp]
  00c5a	03 d1		 add	 edx, ecx
  00c5c	0f b7 8e f6 00
	00 00		 movzx	 ecx, WORD PTR [esi+246]
  00c63	c1 fa 02	 sar	 edx, 2
  00c66	03 c2		 add	 eax, edx
  00c68	8b da		 mov	 ebx, edx
  00c6a	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00c6d	03 d8		 add	 ebx, eax
  00c6f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00c74	f7 e9		 imul	 ecx
  00c76	0f b7 8e f4 00
	00 00		 movzx	 ecx, WORD PTR [esi+244]
  00c7d	d1 fa		 sar	 edx, 1
  00c7f	8b c2		 mov	 eax, edx
  00c81	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00c84	03 da		 add	 ebx, edx
  00c86	03 c3		 add	 eax, ebx
  00c88	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv1844[ebp], eax
  00c8e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00c93	f7 e9		 imul	 ecx
  00c95	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv1844[ebp]
  00c9b	d1 fa		 sar	 edx, 1
  00c9d	eb 68		 jmp	 SHORT $LN1178@Attack
$LN627@Attack:

; 670  : 			{
; 671  : 				iFenrirAttackDmg = lpObj->Strength / 3 + lpObj->Dexterity / 5 + lpObj->Vitality / 5 + lpObj->Energy / 7;	// #formula

  00c9f	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  00ca6	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00cab	f7 e9		 imul	 ecx
  00cad	03 d1		 add	 edx, ecx
  00caf	0f b7 8e f8 00
	00 00		 movzx	 ecx, WORD PTR [esi+248]
  00cb6	c1 fa 02	 sar	 edx, 2
  00cb9	8b da		 mov	 ebx, edx
  00cbb	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00cbe	03 da		 add	 ebx, edx
  00cc0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00cc5	f7 e9		 imul	 ecx
  00cc7	0f b7 8e f6 00
	00 00		 movzx	 ecx, WORD PTR [esi+246]
  00cce	d1 fa		 sar	 edx, 1
  00cd0	8b c2		 mov	 eax, edx
  00cd2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00cd5	03 da		 add	 ebx, edx
  00cd7	03 c3		 add	 eax, ebx
  00cd9	8b d8		 mov	 ebx, eax
  00cdb	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00ce0	f7 e9		 imul	 ecx
  00ce2	0f b7 8e f4 00
	00 00		 movzx	 ecx, WORD PTR [esi+244]
  00ce9	d1 fa		 sar	 edx, 1
  00ceb	8b c2		 mov	 eax, edx
  00ced	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00cf0	03 da		 add	 ebx, edx
  00cf2	03 c3		 add	 eax, ebx
  00cf4	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv1758[ebp], eax
  00cfa	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00cff	f7 e9		 imul	 ecx
  00d01	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv1758[ebp]
$LN1178@Attack:
  00d07	8b da		 mov	 ebx, edx
  00d09	03 c2		 add	 eax, edx
  00d0b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00d0e	03 d8		 add	 ebx, eax

; 684  : 			}
; 685  : 
; 686  : 			if ( iFenrirAttackDmg < 0 )

  00d10	85 db		 test	 ebx, ebx
  00d12	79 02		 jns	 SHORT $LN621@Attack

; 687  : 			{
; 688  : 				iFenrirAttackDmg = 0;

  00d14	33 db		 xor	 ebx, ebx
$LN621@Attack:

; 689  : 			}
; 690  : 
; 691  : 			if ( lpObj->m_CriticalDamage > 0 )

  00d16	83 be bc 04 00
	00 00		 cmp	 DWORD PTR [esi+1212], 0
  00d1d	7e 1c		 jle	 SHORT $LN890@Attack

; 692  : 			{
; 693  : 				if ( (rand()%100) < lpObj->m_CriticalDamage )

  00d1f	e8 00 00 00 00	 call	 _rand
  00d24	99		 cdq
  00d25	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00d2a	f7 f9		 idiv	 ecx
  00d2c	3b 96 bc 04 00
	00		 cmp	 edx, DWORD PTR [esi+1212]
  00d32	7d 07		 jge	 SHORT $LN890@Attack

; 694  : 				{
; 695  : 					MsgDamage = 3;

  00d34	c6 85 e7 fe ff
	ff 03		 mov	 BYTE PTR _MsgDamage$[ebp], 3
$LN890@Attack:

; 696  : 				}
; 697  : 			}
; 698  : 
; 699  : 			if ( lpObj->m_ExcelentDamage > 0 )

  00d3b	83 be c0 04 00
	00 00		 cmp	 DWORD PTR [esi+1216], 0
  00d42	7e 1e		 jle	 SHORT $LN857@Attack

; 700  : 			{
; 701  : 				if ( (rand()%100) < lpObj->m_ExcelentDamage )

  00d44	e8 00 00 00 00	 call	 _rand
  00d49	99		 cdq
  00d4a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00d4f	f7 f9		 idiv	 ecx
  00d51	3b 96 c0 04 00
	00		 cmp	 edx, DWORD PTR [esi+1216]
  00d57	7d 09		 jge	 SHORT $LN857@Attack

; 702  : 				{
; 703  : 					MsgDamage = 2;

  00d59	c6 85 e7 fe ff
	ff 02		 mov	 BYTE PTR _MsgDamage$[ebp], 2

; 704  : 				}
; 705  : 			}
; 706  : 
; 707  : 			if ( MsgDamage == 3 )	// Critical Damage

  00d60	eb 61		 jmp	 SHORT $LN833@Attack
$LN857@Attack:
  00d62	8a 85 e7 fe ff
	ff		 mov	 al, BYTE PTR _MsgDamage$[ebp]
  00d68	3c 03		 cmp	 al, 3
  00d6a	75 53		 jne	 SHORT $LN616@Attack

; 708  : 			{
; 709  : 				AttackDamage =  iFenrirAttackDmg + lpMagic->m_DamageMax;
; 710  : 				AttackDamage += lpObj->SetOpAddCriticalDamage;

  00d6c	0f bf 96 2a 11
	00 00		 movsx	 edx, WORD PTR [esi+4394]
  00d73	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  00d79	03 50 10	 add	 edx, DWORD PTR [eax+16]

; 711  : 
; 712  : 				int iCriticalDamageValue = 0;
; 713  : 				gObjUpdateAppliedBuffEffect(lpObj, AT_INCREASE_CRITICAL_DMG, &iCriticalDamageValue, 0);

  00d7c	6a 00		 push	 0
  00d7e	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _iCriticalDamageValue$222467[ebp]
  00d84	51		 push	 ecx
  00d85	03 d3		 add	 edx, ebx
  00d87	6a 05		 push	 5
  00d89	56		 push	 esi
  00d8a	89 55 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edx
  00d8d	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iCriticalDamageValue$222467[ebp], 0
  00d97	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect

; 714  : 
; 715  : 				AttackDamage += iCriticalDamageValue;
; 716  : 				AttackDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;
; 717  : 				AttackDamage -= targetdefense;

  00d9c	0f bf 96 e2 1f
	00 00		 movsx	 edx, WORD PTR [esi+8162]
  00da3	2b 95 d8 fe ff
	ff		 sub	 edx, DWORD PTR _targetdefense$222421[ebp]
  00da9	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  00dac	03 95 d4 fe ff
	ff		 add	 edx, DWORD PTR _iCriticalDamageValue$222467[ebp]
  00db2	83 c4 10	 add	 esp, 16			; 00000010H
  00db5	03 ca		 add	 ecx, edx
  00db7	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  00dba	e9 7f 01 00 00	 jmp	 $LN858@Attack
$LN616@Attack:

; 718  : 			}
; 719  : 			else if ( MsgDamage == 2 )	// Excellent

  00dbf	3c 02		 cmp	 al, 2
  00dc1	75 3c		 jne	 SHORT $LN614@Attack
$LN833@Attack:

; 720  : 			{
; 721  : 				AttackDamage = iFenrirAttackDmg + lpMagic->m_DamageMax;

  00dc3	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  00dc9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00dcc	03 cb		 add	 ecx, ebx

; 722  : 				AttackDamage += AttackDamage * 20 / 100;
; 723  : 				AttackDamage += lpObj->SetOpAddExDamage;
; 724  : 				AttackDamage -= targetdefense;

  00dce	0f bf 9e 26 11
	00 00		 movsx	 ebx, WORD PTR [esi+4390]
  00dd5	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00dd8	03 d2		 add	 edx, edx
  00dda	03 d2		 add	 edx, edx
  00ddc	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00de1	f7 ea		 imul	 edx
  00de3	c1 fa 05	 sar	 edx, 5
  00de6	8b c2		 mov	 eax, edx
  00de8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00deb	03 da		 add	 ebx, edx
  00ded	03 c3		 add	 eax, ebx
  00def	2b 85 d8 fe ff
	ff		 sub	 eax, DWORD PTR _targetdefense$222421[ebp]
  00df5	03 c8		 add	 ecx, eax
  00df7	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 725  : 			}
; 726  : 			else

  00dfa	e9 3f 01 00 00	 jmp	 $LN858@Attack
$LN614@Attack:

; 727  : 			{
; 728  : 				AttackDamage = (iFenrirAttackDmg + lpMagic->m_DamageMin) + (rand()%(lpMagic->m_DamageMax - lpMagic->m_DamageMin + 1));

  00dff	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00e05	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00e08	89 95 d4 fe ff
	ff		 mov	 DWORD PTR tv5812[ebp], edx
  00e0e	e8 00 00 00 00	 call	 _rand

; 729  : 				AttackDamage -= targetdefense;

  00e13	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00e19	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00e1c	2b 8d d4 fe ff
	ff		 sub	 ecx, DWORD PTR tv5812[ebp]
  00e22	99		 cdq
  00e23	41		 inc	 ecx
  00e24	f7 f9		 idiv	 ecx
  00e26	8b ca		 mov	 ecx, edx
  00e28	2b 8d d8 fe ff
	ff		 sub	 ecx, DWORD PTR _targetdefense$222421[ebp]
  00e2e	03 8d d4 fe ff
	ff		 add	 ecx, DWORD PTR tv5812[ebp]
  00e34	03 cb		 add	 ecx, ebx
  00e36	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 730  : 			}
; 731  : 		}
; 732  : 		else

  00e39	e9 00 01 00 00	 jmp	 $LN858@Attack
$LN629@Attack:

; 733  : 		{
; 734  : 			
; 735  : 			if ( ( lpObj->Class == CLASS_WIZARD || lpObj->Class == CLASS_MAGUMSA ) && skill )

  00e3e	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  00e45	66 85 c9	 test	 cx, cx
  00e48	74 05		 je	 SHORT $LN610@Attack
  00e4a	83 f9 03	 cmp	 ecx, 3
  00e4d	75 31		 jne	 SHORT $LN611@Attack
$LN610@Attack:
  00e4f	85 c0		 test	 eax, eax
  00e51	74 2d		 je	 SHORT $LN611@Attack

; 736  : 			{
; 737  : 				AttackDamage = this->GetAttackDamageWizard(lpObj, targetdefense, lpMagic, MsgDamage, bIsOnDuel);

  00e53	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _bIsOnDuel$[ebp]
  00e59	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00e5f	52		 push	 edx
  00e60	8d 85 e7 fe ff
	ff		 lea	 eax, DWORD PTR _MsgDamage$[ebp]
  00e66	50		 push	 eax
  00e67	51		 push	 ecx
  00e68	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00e6e	53		 push	 ebx
  00e6f	56		 push	 esi
  00e70	e8 00 00 00 00	 call	 ?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ; CObjAttack::GetAttackDamageWizard
  00e75	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 738  : 
; 739  : 				if ( AttackDamage > 0 )

  00e78	85 c0		 test	 eax, eax
  00e7a	7e 72		 jle	 SHORT $LN601@Attack

; 740  : 				{
; 741  : 					gObjWeaponDurDown(lpObj, lpTargetObj, 1);

  00e7c	6a 01		 push	 1

; 742  : 				}
; 743  : 			}

  00e7e	eb 64		 jmp	 SHORT $LN1179@Attack
$LN611@Attack:

; 744  : 			else if ( lpObj->Class == CLASS_SUMMONER && skill ) //Summoner

  00e80	83 f9 05	 cmp	 ecx, 5
  00e83	75 31		 jne	 SHORT $LN607@Attack
  00e85	85 c0		 test	 eax, eax
  00e87	74 2d		 je	 SHORT $LN607@Attack

; 745  : 			{
; 746  : 				AttackDamage = this->GetAttackDamageSummoner(lpObj, targetdefense, lpMagic, MsgDamage, bIsOnDuel);

  00e89	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _bIsOnDuel$[ebp]
  00e8f	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00e95	52		 push	 edx
  00e96	8d 85 e7 fe ff
	ff		 lea	 eax, DWORD PTR _MsgDamage$[ebp]
  00e9c	50		 push	 eax
  00e9d	51		 push	 ecx
  00e9e	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00ea4	53		 push	 ebx
  00ea5	56		 push	 esi
  00ea6	e8 00 00 00 00	 call	 ?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ; CObjAttack::GetAttackDamageSummoner
  00eab	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 747  : 
; 748  : 				if ( AttackDamage > 0 )

  00eae	85 c0		 test	 eax, eax
  00eb0	7e 3c		 jle	 SHORT $LN601@Attack

; 749  : 				{
; 750  : 					gObjWeaponDurDown(lpObj, lpTargetObj, 1);

  00eb2	6a 01		 push	 1

; 751  : 				}
; 752  : 			}

  00eb4	eb 2e		 jmp	 SHORT $LN1179@Attack
$LN607@Attack:

; 753  : #ifdef MONK
; 754  : 			else if( lpObj->Class == CLASS_MONK )
; 755  : 			{
; 756  : 				AttackDamage = GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);

  00eb6	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00ebc	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _bIsOnDuel$[ebp]
  00ec2	52		 push	 edx
  00ec3	50		 push	 eax
  00ec4	83 f9 06	 cmp	 ecx, 6
  00ec7	8d 8d e7 fe ff
	ff		 lea	 ecx, DWORD PTR _MsgDamage$[ebp]
  00ecd	51		 push	 ecx
  00ece	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00ed4	53		 push	 ebx
  00ed5	56		 push	 esi

; 757  : 	
; 758  : 				if ( AttackDamage > 0 )
; 759  : 				{
; 760  : 					gObjWeaponDurDown(lpObj, lpTargetObj, 0);
; 761  : 				}
; 762  : 			}
; 763  : #endif
; 764  : 			else
; 765  : 			{
; 766  : 				AttackDamage = this->GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);

  00ed6	e8 00 00 00 00	 call	 ?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z ; CObjAttack::GetAttackDamage
  00edb	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 767  : 
; 768  : 				if ( AttackDamage > 0 )

  00ede	85 c0		 test	 eax, eax
  00ee0	7e 0c		 jle	 SHORT $LN601@Attack

; 769  : 				{
; 770  : 					gObjWeaponDurDown(lpObj, lpTargetObj, 0);

  00ee2	6a 00		 push	 0
$LN1179@Attack:
  00ee4	57		 push	 edi
  00ee5	56		 push	 esi
  00ee6	e8 00 00 00 00	 call	 ?gObjWeaponDurDown@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDown
  00eeb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN601@Attack:

; 771  : 				}
; 772  : 			}
; 773  : #if(CUSTOM_MONSTER_ZT==TRUE)
; 774  : 			g_MonsterZt.AttackMonster(lpTargetObj->m_Index, lpObj->m_Index, AttackDamage);

  00eee	8b 06		 mov	 eax, DWORD PTR [esi]
  00ef0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00ef2	8d 55 1c	 lea	 edx, DWORD PTR _AttackDamage$[ebp]
  00ef5	52		 push	 edx
  00ef6	50		 push	 eax
  00ef7	51		 push	 ecx
  00ef8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterZt@@3VMonsterZt@@A ; g_MonsterZt
  00efd	e8 00 00 00 00	 call	 ?AttackMonster@MonsterZt@@QAEXHHAAH@Z ; MonsterZt::AttackMonster
  00f02	eb 37		 jmp	 SHORT $LN1181@Attack
$LN632@Attack:

; 657  : 		{
; 658  : 			AttackDamage = this->GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);

  00f04	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _lpMagic$GSCopy$[ebp]
  00f0a	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _bIsOnDuel$[ebp]
  00f10	52		 push	 edx
  00f11	50		 push	 eax
  00f12	8d 8d e7 fe ff
	ff		 lea	 ecx, DWORD PTR _MsgDamage$[ebp]
  00f18	51		 push	 ecx
  00f19	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00f1f	53		 push	 ebx
  00f20	56		 push	 esi
  00f21	e8 00 00 00 00	 call	 ?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z ; CObjAttack::GetAttackDamage
  00f26	8b c8		 mov	 ecx, eax
  00f28	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 659  : 
; 660  : 			if ( AttackDamage > 0 )

  00f2b	85 c9		 test	 ecx, ecx
  00f2d	7e 0f		 jle	 SHORT $LN858@Attack

; 661  : 			{
; 662  : 				gObjWeaponDurDown(lpObj, lpTargetObj, 0);

  00f2f	6a 00		 push	 0
  00f31	57		 push	 edi
  00f32	56		 push	 esi
  00f33	e8 00 00 00 00	 call	 ?gObjWeaponDurDown@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDown
  00f38	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1181@Attack:
  00f3b	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN858@Attack:

; 775  : #endif
; 776  : 		}
; 777  : 
; 778  : 		int iCShopScrollBuffID = -1;
; 779  : 	
; 780  : 		switch(MsgDamage)

  00f3e	0f b6 85 e7 fe
	ff ff		 movzx	 eax, BYTE PTR _MsgDamage$[ebp]
  00f45	83 e8 02	 sub	 eax, 2
  00f48	74 0f		 je	 SHORT $LN597@Attack
  00f4a	48		 dec	 eax
  00f4b	74 05		 je	 SHORT $LN598@Attack

; 784  : 		default:	iCShopScrollBuffID = -1;	break; //CashShop Scroll Disabled

  00f4d	83 c8 ff	 or	 eax, -1
  00f50	eb 0c		 jmp	 SHORT $LN599@Attack
$LN598@Attack:

; 781  : 		{
; 782  : 		case 3:		iCShopScrollBuffID = 89;	break; //CashShop Scroll of Battle

  00f52	b8 59 00 00 00	 mov	 eax, 89			; 00000059H
  00f57	eb 05		 jmp	 SHORT $LN599@Attack
$LN597@Attack:

; 783  : 		case 2:		iCShopScrollBuffID = 90;	break; //CashShop Scroll of Strengthener

  00f59	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
$LN599@Attack:

; 785  : 		}
; 786  : 		
; 787  : 		int iCShopScrollBuffDmgValue = 0;

  00f5e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iCShopScrollBuffDmgValue$222491[ebp], 0

; 788  : 		int iCShopScrollBuffDmgBefore = AttackDamage;

  00f68	8b d9		 mov	 ebx, ecx

; 789  : 
; 790  : 		if(iCShopScrollBuffID > -1)

  00f6a	83 f8 ff	 cmp	 eax, -1
  00f6d	7e 3b		 jle	 SHORT $LN920@Attack

; 791  : 		{
; 792  : 			gObjUpdateAppliedBuffEffect(lpObj, iCShopScrollBuffID, &iCShopScrollBuffDmgValue, 0); //CashShop Scroll of Battle and Strengthener

  00f6f	6a 00		 push	 0
  00f71	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR _iCShopScrollBuffDmgValue$222491[ebp]
  00f77	52		 push	 edx
  00f78	50		 push	 eax
  00f79	56		 push	 esi
  00f7a	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect

; 793  : 
; 794  : 			if(iCShopScrollBuffDmgValue > 0)

  00f7f	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _iCShopScrollBuffDmgValue$222491[ebp]

; 795  : 			{
; 796  : 				AttackDamage += AttackDamage * iCShopScrollBuffDmgValue / 100;

  00f85	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  00f88	83 c4 10	 add	 esp, 16			; 00000010H
  00f8b	85 c0		 test	 eax, eax
  00f8d	7e 1b		 jle	 SHORT $LN920@Attack
  00f8f	0f af c1	 imul	 eax, ecx
  00f92	8b d0		 mov	 edx, eax
  00f94	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00f99	f7 ea		 imul	 edx
  00f9b	c1 fa 05	 sar	 edx, 5
  00f9e	8b c2		 mov	 eax, edx
  00fa0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00fa3	03 c2		 add	 eax, edx
  00fa5	03 c8		 add	 ecx, eax
  00fa7	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN920@Attack:

; 797  : 			}
; 798  : 		}
; 799  : 		
; 800  : 		if(g_bAbilityDebug == 1 && (MsgDamage == 3 || MsgDamage == 2)) //Season 3 Add-on for Ability Debug

  00faa	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_bAbilityDebug@@3HA, 1 ; g_bAbilityDebug
  00fb1	75 42		 jne	 SHORT $LN593@Attack
  00fb3	8a 85 e7 fe ff
	ff		 mov	 al, BYTE PTR _MsgDamage$[ebp]
  00fb9	3c 03		 cmp	 al, 3
  00fbb	0f 84 2d 01 00
	00		 je	 $LN831@Attack
  00fc1	3c 02		 cmp	 al, 2
  00fc3	75 30		 jne	 SHORT $LN593@Attack

; 801  : 		{
; 802  : 			char szTemp[256];
; 803  : 			sprintf(szTemp, "%s AttackDamage: %d %d", (MsgDamage == 3) ? "CRITICAL" : "EXCELLENT", iCShopScrollBuffDmgBefore, AttackDamage);

  00fc5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PBMNMIBJ@EXCELLENT?$AA@
$LN752@Attack:
  00fca	51		 push	 ecx
  00fcb	53		 push	 ebx
  00fcc	50		 push	 eax
  00fcd	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$222497[ebp]
  00fd3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@
  00fd8	51		 push	 ecx
  00fd9	e8 00 00 00 00	 call	 _sprintf

; 804  : 			GCServerMsgStringSend(szTemp, lpObj->m_Index, 1);

  00fde	8b 16		 mov	 edx, DWORD PTR [esi]
  00fe0	6a 01		 push	 1
  00fe2	52		 push	 edx
  00fe3	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$222497[ebp]
  00fe9	50		 push	 eax
  00fea	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00fef	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  00ff2	83 c4 20	 add	 esp, 32			; 00000020H
$LN593@Attack:

; 805  : 		}
; 806  : 
; 807  : 		if ( bAllMiss )

  00ff5	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR _bAllMiss$[ebp], 0
  00ffc	74 1d		 je	 SHORT $LN591@Attack

; 808  : 		{
; 809  : 			AttackDamage = ( AttackDamage * 30 ) / 100;

  00ffe	8b d1		 mov	 edx, ecx
  01000	c1 e2 04	 shl	 edx, 4
  01003	2b d1		 sub	 edx, ecx
  01005	03 d2		 add	 edx, edx
  01007	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0100c	f7 ea		 imul	 edx
  0100e	c1 fa 05	 sar	 edx, 5
  01011	8b ca		 mov	 ecx, edx
  01013	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01016	03 ca		 add	 ecx, edx
  01018	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN591@Attack:

; 810  : 		}
; 811  : 
; 812  : 		if ( lpTargetObj->DamageMinus )

  0101b	8a 87 70 01 00
	00		 mov	 al, BYTE PTR [edi+368]
  01021	84 c0		 test	 al, al
  01023	74 1c		 je	 SHORT $LN590@Attack

; 813  : 		{
; 814  : 			int beforeDamage = AttackDamage;
; 815  : 			AttackDamage -= ( ( AttackDamage * (int)lpTargetObj->DamageMinus) / 100 );

  01025	0f b6 d0	 movzx	 edx, al
  01028	0f af d1	 imul	 edx, ecx
  0102b	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  01030	f7 ea		 imul	 edx
  01032	c1 fa 05	 sar	 edx, 5
  01035	8b c2		 mov	 eax, edx
  01037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0103a	03 c2		 add	 eax, edx
  0103c	03 c8		 add	 ecx, eax
  0103e	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN590@Attack:

; 816  : 		}
; 817  : 
; 818  : 		int tlevel = (lpObj->Level + lpObj->MLevel) / 10; //s3 addon

  01041	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  01048	0f bf 96 d0 00
	00 00		 movsx	 edx, WORD PTR [esi+208]
  0104f	03 d0		 add	 edx, eax
  01051	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01056	f7 ea		 imul	 edx
  01058	c1 fa 02	 sar	 edx, 2
  0105b	8b c2		 mov	 eax, edx
  0105d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01060	03 c2		 add	 eax, edx

; 819  : 
; 820  : 		if ( AttackDamage < tlevel )

  01062	3b c8		 cmp	 ecx, eax
  01064	7d 0f		 jge	 SHORT $LN964@Attack

; 821  : 		{
; 822  : 			if ( tlevel < 1 )

  01066	83 f8 01	 cmp	 eax, 1
  01069	7d 05		 jge	 SHORT $LN588@Attack

; 823  : 			{
; 824  : 				tlevel = 1;

  0106b	b8 01 00 00 00	 mov	 eax, 1
$LN588@Attack:

; 825  : 			}
; 826  : 
; 827  : 			AttackDamage = tlevel;

  01070	8b c8		 mov	 ecx, eax
  01072	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN964@Attack:

; 828  : 		}
; 829  : 
; 830  : 		if ( lpTargetObj->m_SkillNumber == 18 )

  01075	66 83 bf d8 03
	00 00 12	 cmp	 WORD PTR [edi+984], 18	; 00000012H
  0107d	75 0a		 jne	 SHORT $LN975@Attack

; 831  : 		{
; 832  : 			if ( AttackDamage > 1 )

  0107f	83 f9 01	 cmp	 ecx, 1
  01082	7e 05		 jle	 SHORT $LN975@Attack

; 833  : 			{
; 834  : 				AttackDamage >>= 1;

  01084	d1 f9		 sar	 ecx, 1
  01086	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN975@Attack:

; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 		gObjSpriteDamage(lpTargetObj, AttackDamage);

  01089	51		 push	 ecx
  0108a	57		 push	 edi
  0108b	e8 00 00 00 00	 call	 ?gObjSpriteDamage@@YAXPAUOBJECTSTRUCT@@H@Z ; gObjSpriteDamage

; 839  : 
; 840  : 		if ( gObjSatanSprite(lpObj) == TRUE )

  01090	56		 push	 esi
  01091	e8 00 00 00 00	 call	 ?gObjSatanSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjSatanSprite
  01096	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4000000000000000
  0109c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4008000000000000
  010a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  010a5	d9 ee		 fldz
  010a7	83 f8 01	 cmp	 eax, 1
  010aa	0f 85 ea 00 00
	00		 jne	 $LN981@Attack

; 841  : 		{
; 842  : #ifdef MONK
; 843  : 			if( lpObj->Class == CLASS_MONK )

  010b0	66 83 be b8 00
	00 00 06	 cmp	 WORD PTR [esi+184], 6
  010b8	75 7a		 jne	 SHORT $LN984@Attack

; 844  : 			{
; 845  : 				if( skill == 263 ||
; 846  : 					skill == 269 ||
; 847  : 					skill == 262 )

  010ba	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  010c0	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  010c5	74 5b		 je	 SHORT $LN993@Attack
  010c7	3d 0d 01 00 00	 cmp	 eax, 269		; 0000010dH
  010cc	74 54		 je	 SHORT $LN993@Attack
  010ce	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  010d3	74 4d		 je	 SHORT $LN993@Attack

; 850  : 				}
; 851  : 				else if( skill == 265 )

  010d5	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  010da	75 1c		 jne	 SHORT $LN580@Attack
  010dc	dd da		 fstp	 ST(2)
  010de	dd d8		 fstp	 ST(0)

; 852  : 				{
; 853  : 					lpObj->Life -= 100.0f;

  010e0	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  010e6	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4059000000000000

; 854  : 				}
; 855  : 				else if( skill == 260 ||

  010ec	eb 4e		 jmp	 SHORT $LN1182@Attack
$LN831@Attack:

; 801  : 		{
; 802  : 			char szTemp[256];
; 803  : 			sprintf(szTemp, "%s AttackDamage: %d %d", (MsgDamage == 3) ? "CRITICAL" : "EXCELLENT", iCShopScrollBuffDmgBefore, AttackDamage);

  010ee	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08FOLAHAHG@CRITICAL?$AA@
  010f3	e9 d2 fe ff ff	 jmp	 $LN752@Attack
$LN580@Attack:

; 856  : 					skill == 261 ||
; 857  : 					skill == 264 )

  010f8	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  010fd	74 15		 je	 SHORT $LN1009@Attack
  010ff	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  01104	74 0e		 je	 SHORT $LN1009@Attack
  01106	3d 08 01 00 00	 cmp	 eax, 264		; 00000108H
  0110b	74 07		 je	 SHORT $LN1009@Attack

; 858  : 				{
; 859  : 					lpObj->Life -= 2.0f;
; 860  : 				}
; 861  : 				else if( skill == 270 )

  0110d	3d 0e 01 00 00	 cmp	 eax, 270		; 0000010eH
  01112	75 20		 jne	 SHORT $LN984@Attack
$LN1009@Attack:
  01114	dd d9		 fstp	 ST(1)

; 862  : 				{
; 863  : 					lpObj->Life -= 2.0f;

  01116	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0111c	de e2		 fsubrp	 ST(2), ST(0)
  0111e	d9 c9		 fxch	 ST(1)

; 864  : 				}
; 865  : 				else

  01120	eb 1a		 jmp	 SHORT $LN1182@Attack
$LN993@Attack:

; 844  : 			{
; 845  : 				if( skill == 263 ||
; 846  : 					skill == 269 ||
; 847  : 					skill == 262 )

  01122	dd da		 fstp	 ST(2)
  01124	dd d8		 fstp	 ST(0)

; 848  : 				{
; 849  : 					lpObj->Life -= 4.0f;

  01126	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0112c	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4010000000000000

; 866  : 				{
; 867  : 					lpObj->Life -= 3.0f;
; 868  : 				}
; 869  : 			}
; 870  : 			else

  01132	eb 08		 jmp	 SHORT $LN1182@Attack
$LN984@Attack:

; 841  : 		{
; 842  : #ifdef MONK
; 843  : 			if( lpObj->Class == CLASS_MONK )

  01134	dd da		 fstp	 ST(2)

; 871  : 			{
; 872  : 				lpObj->Life -= 3.0f;

  01136	d8 ae fc 00 00
	00		 fsubr	 DWORD PTR [esi+252]
$LN1182@Attack:
  0113c	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 873  : 			}
; 874  : #else
; 875  : 			lpObj->Life -= 3.0f;
; 876  : #endif
; 877  : 
; 878  : 			if ( lpObj->Life < 0.0f )

  01142	d8 96 fc 00 00
	00		 fcom	 DWORD PTR [esi+252]
  01148	df e0		 fnstsw	 ax
  0114a	f6 c4 41	 test	 ah, 65			; 00000041H
  0114d	75 08		 jne	 SHORT $LN1000@Attack

; 879  : 			{
; 880  : 				lpObj->Life = 0.0f;

  0114f	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 881  : 			}
; 882  : 			else

  01155	eb 1c		 jmp	 SHORT $LN571@Attack
$LN1000@Attack:

; 883  : 			{
; 884  : 				AttackDamage = AttackDamage * 13 / 10;

  01157	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  0115a	dd d8		 fstp	 ST(0)
  0115c	6b c9 0d	 imul	 ecx, 13			; 0000000dH
  0115f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01164	f7 e9		 imul	 ecx
  01166	c1 fa 02	 sar	 edx, 2
  01169	8b ca		 mov	 ecx, edx
  0116b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0116e	03 ca		 add	 ecx, edx
  01170	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN571@Attack:

; 885  : 			}
; 886  : 
; 887  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  01173	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  01179	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0117f	52		 push	 edx
  01180	6a 00		 push	 0
  01182	68 ff 00 00 00	 push	 255			; 000000ffH
  01187	e8 00 00 00 00	 call	 __ftol2_sse
  0118c	50		 push	 eax
  0118d	8b 06		 mov	 eax, DWORD PTR [esi]
  0118f	50		 push	 eax
  01190	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01195	83 c4 14	 add	 esp, 20			; 00000014H
  01198	eb 06		 jmp	 SHORT $LN921@Attack
$LN981@Attack:
  0119a	dd da		 fstp	 ST(2)
  0119c	dd d8		 fstp	 ST(0)
  0119e	dd d8		 fstp	 ST(0)
$LN921@Attack:

; 888  : 		}
; 889  : 
; 890  : 		if ( gObjAngelSprite(lpTargetObj) == TRUE )

  011a0	57		 push	 edi
  011a1	e8 00 00 00 00	 call	 ?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAngelSprite
  011a6	83 c4 04	 add	 esp, 4
  011a9	83 f8 01	 cmp	 eax, 1
  011ac	75 35		 jne	 SHORT $LN569@Attack

; 891  : 		{
; 892  : 			if ( AttackDamage > 1 )

  011ae	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  011b1	83 f8 01	 cmp	 eax, 1
  011b4	7e 2d		 jle	 SHORT $LN569@Attack

; 893  : 			{
; 894  : 				float  damage = (AttackDamage * 8) / 10.0f;

  011b6	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]

; 895  : 				AttackDamage = (int)damage;

  011bd	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv6141[ebp], ecx
  011c3	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv6141[ebp]
  011c9	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  011cf	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv6138[ebp]
  011d5	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv6138[ebp]
  011db	e8 00 00 00 00	 call	 __ftol2_sse
  011e0	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN569@Attack:

; 896  : 			}
; 897  : 		}
; 898  : 
; 899  : 		if ( gObjDemonSprite(lpObj) == TRUE ) //season4 add-on (fix from 3.5)

  011e3	56		 push	 esi
  011e4	e8 00 00 00 00	 call	 ?gObjDemonSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDemonSprite
  011e9	83 c4 04	 add	 esp, 4
  011ec	83 f8 01	 cmp	 eax, 1
  011ef	75 27		 jne	 SHORT $LN567@Attack

; 900  : 		{
; 901  : 			if ( AttackDamage > 1 )

  011f1	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  011f4	83 f8 01	 cmp	 eax, 1
  011f7	7e 1f		 jle	 SHORT $LN567@Attack

; 902  : 			{
; 903  : 				AttackDamage = (AttackDamage * 14) / 10;

  011f9	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  01200	2b c8		 sub	 ecx, eax
  01202	03 c9		 add	 ecx, ecx
  01204	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01209	f7 e9		 imul	 ecx
  0120b	c1 fa 02	 sar	 edx, 2
  0120e	8b c2		 mov	 eax, edx
  01210	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01213	03 c2		 add	 eax, edx
  01215	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN567@Attack:

; 904  : 			}
; 905  : 		}
; 906  : 
; 907  : 		if ( gObjSkeletonSprite(lpObj) == TRUE ) //Season 5 Skeleton Pet

  01218	56		 push	 esi
  01219	e8 00 00 00 00	 call	 ?gObjSkeletonSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjSkeletonSprite
  0121e	83 c4 04	 add	 esp, 4
  01221	83 f8 01	 cmp	 eax, 1
  01224	75 24		 jne	 SHORT $LN949@Attack

; 908  : 		{
; 909  : 			if ( AttackDamage > 1 )

  01226	8b 5d 1c	 mov	 ebx, DWORD PTR _AttackDamage$[ebp]
  01229	3b d8		 cmp	 ebx, eax
  0122b	7e 1d		 jle	 SHORT $LN949@Attack

; 910  : 			{
; 911  : 				AttackDamage += (AttackDamage * 20) / 100;

  0122d	8d 0c 9b	 lea	 ecx, DWORD PTR [ebx+ebx*4]
  01230	03 c9		 add	 ecx, ecx
  01232	03 c9		 add	 ecx, ecx
  01234	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01239	f7 e9		 imul	 ecx
  0123b	c1 fa 05	 sar	 edx, 5
  0123e	8b ca		 mov	 ecx, edx
  01240	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01243	03 ca		 add	 ecx, edx
  01245	03 d9		 add	 ebx, ecx
  01247	89 5d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ebx
$LN949@Attack:

; 912  : 			}
; 913  : 		}
; 914  : 
; 915  : 		if ( gObjSpiritGuardianSprite(lpTargetObj) == TRUE )

  0124a	57		 push	 edi
  0124b	e8 00 00 00 00	 call	 ?gObjSpiritGuardianSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjSpiritGuardianSprite
  01250	83 c4 04	 add	 esp, 4
  01253	83 f8 01	 cmp	 eax, 1
  01256	75 37		 jne	 SHORT $LN563@Attack

; 916  : 		{
; 917  : 			if ( AttackDamage > 1 )

  01258	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0125b	83 f8 01	 cmp	 eax, 1
  0125e	7e 2f		 jle	 SHORT $LN563@Attack

; 918  : 			{
; 919  : 				float  damage = (AttackDamage * 7) / 10.0f;

  01260	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  01267	2b d0		 sub	 edx, eax

; 920  : 				AttackDamage = (int)damage;

  01269	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv6124[ebp], edx
  0126f	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv6124[ebp]
  01275	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  0127b	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv6122[ebp]
  01281	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv6122[ebp]
  01287	e8 00 00 00 00	 call	 __ftol2_sse
  0128c	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN563@Attack:

; 921  : 			}
; 922  : 		}
; 923  : 
; 924  : 		if ( (lpObj->pInventory[10].IsItem() &&
; 925  : 			 lpObj->pInventory[10].m_Type == ITEMGET(13,76) &&
; 926  : 			 lpObj->pInventory[10].m_Durability > 0.0f) || 
; 927  : 
; 928  : 			 (lpObj->pInventory[11].IsItem() &&
; 929  : 			 lpObj->pInventory[11].m_Type == ITEMGET(13,76) &&
; 930  : 			 lpObj->pInventory[11].m_Durability > 0.0f) )

  0128f	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  01295	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  0129b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  012a0	85 c0		 test	 eax, eax
  012a2	74 23		 je	 SHORT $LN560@Attack
  012a4	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  012aa	b9 4c 1a 00 00	 mov	 ecx, 6732		; 00001a4cH
  012af	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  012b6	75 0f		 jne	 SHORT $LN560@Attack
  012b8	d9 ee		 fldz
  012ba	d8 98 6c 08 00
	00		 fcomp	 DWORD PTR [eax+2156]
  012c0	df e0		 fnstsw	 ax
  012c2	f6 c4 05	 test	 ah, 5
  012c5	7b 38		 jnp	 SHORT $LN561@Attack
$LN560@Attack:
  012c7	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  012cd	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  012d3	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  012d8	85 c0		 test	 eax, eax
  012da	74 27		 je	 SHORT $LN922@Attack
  012dc	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  012e2	ba 4c 1a 00 00	 mov	 edx, 6732		; 00001a4cH
  012e7	66 39 90 22 09
	00 00		 cmp	 WORD PTR [eax+2338], dx
  012ee	75 13		 jne	 SHORT $LN922@Attack
  012f0	d9 ee		 fldz
  012f2	d8 98 40 09 00
	00		 fcomp	 DWORD PTR [eax+2368]
  012f8	df e0		 fnstsw	 ax
  012fa	f6 c4 05	 test	 ah, 5
  012fd	7a 04		 jp	 SHORT $LN922@Attack
$LN561@Attack:

; 931  : 		{
; 932  : 			AttackDamage += 30;

  012ff	83 45 1c 1e	 add	 DWORD PTR _AttackDamage$[ebp], 30 ; 0000001eH
$LN922@Attack:

; 933  : 		}
; 934  : 
; 935  : 		if ( gObjWingSprite(lpObj) == TRUE )

  01303	56		 push	 esi
  01304	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  01309	d9 e8		 fld1
  0130b	83 c4 04	 add	 esp, 4
  0130e	83 f8 01	 cmp	 eax, 1
  01311	0f 85 29 03 00
	00		 jne	 $LN1015@Attack

; 936  : 		{
; 937  : 			CItem * Wing = &lpObj->pInventory[7];
; 938  : 
; 939  : 			if ( lpObj->Class == CLASS_WIZARD || lpObj->Class == CLASS_ELF )

  01317	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  0131e	8b 9e 24 0e 00
	00		 mov	 ebx, DWORD PTR [esi+3620]
  01324	66 85 c0	 test	 ax, ax
  01327	0f 84 9d 00 00
	00		 je	 $LN557@Attack
  0132d	83 f8 02	 cmp	 eax, 2
  01330	0f 84 94 00 00
	00		 je	 $LN557@Attack

; 942  : 			}
; 943  : 			else if ( lpObj->Class == CLASS_SUMMONER ) //summoner

  01336	83 f8 05	 cmp	 eax, 5

; 944  : 			{
; 945  : 				lpObj->Life -= 1.0f;

  01339	0f 84 8b 00 00
	00		 je	 $LN557@Attack

; 946  : 			}
; 947  : #ifdef MONK
; 948  : 			else if( lpObj->Class == CLASS_MONK )

  0133f	dd d8		 fstp	 ST(0)
  01341	83 f8 06	 cmp	 eax, 6
  01344	75 76		 jne	 SHORT $LN553@Attack

; 949  : 			{
; 950  : 				if( skill == 263 ||
; 951  : 					skill == 269 ||
; 952  : 					skill == 262 )

  01346	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  0134c	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  01351	74 5b		 je	 SHORT $LN551@Attack
  01353	3d 0d 01 00 00	 cmp	 eax, 269		; 0000010dH
  01358	74 54		 je	 SHORT $LN551@Attack
  0135a	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0135f	74 4d		 je	 SHORT $LN551@Attack

; 955  : 				}
; 956  : 				else if( skill == 265 )

  01361	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  01366	75 0e		 jne	 SHORT $LN549@Attack

; 957  : 				{
; 958  : 					lpObj->Life -= 100.0f;

  01368	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0136e	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4059000000000000

; 959  : 				}
; 960  : 				else if( skill == 260 ||

  01374	eb 5a		 jmp	 SHORT $LN1183@Attack
$LN549@Attack:

; 961  : 					skill == 261 ||
; 962  : 					skill == 264 )

  01376	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  0137b	74 23		 je	 SHORT $LN546@Attack
  0137d	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  01382	74 1c		 je	 SHORT $LN546@Attack
  01384	3d 08 01 00 00	 cmp	 eax, 264		; 00000108H
  01389	74 15		 je	 SHORT $LN546@Attack

; 965  : 				}
; 966  : 				else if( skill == 270 )
; 967  : 				{
; 968  : 					lpObj->Life -= 2.0f;

  0138b	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  01391	3d 0e 01 00 00	 cmp	 eax, 270		; 0000010eH
  01396	75 2a		 jne	 SHORT $LN544@Attack
  01398	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4000000000000000

; 969  : 				}
; 970  : 				else

  0139e	eb 30		 jmp	 SHORT $LN1183@Attack
$LN546@Attack:

; 963  : 				{
; 964  : 					lpObj->Life -= 2.0f;

  013a0	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  013a6	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4000000000000000
  013ac	eb 22		 jmp	 SHORT $LN1183@Attack
$LN551@Attack:

; 953  : 				{
; 954  : 					lpObj->Life -= 4.0f;

  013ae	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  013b4	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4010000000000000

; 971  : 				{
; 972  : 					lpObj->Life -= 3.0f;
; 973  : 				}
; 974  : 			}
; 975  : #endif
; 976  : 			else

  013ba	eb 14		 jmp	 SHORT $LN1183@Attack
$LN553@Attack:

; 977  : 			{
; 978  : 				lpObj->Life -= 3.0f;

  013bc	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
$LN544@Attack:
  013c2	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4008000000000000
  013c8	eb 06		 jmp	 SHORT $LN1183@Attack
$LN557@Attack:

; 940  : 			{
; 941  : 				lpObj->Life -= 1.0f;

  013ca	d8 ae fc 00 00
	00		 fsubr	 DWORD PTR [esi+252]
$LN1183@Attack:
  013d0	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 979  : 			}
; 980  : 
; 981  : 			if ( lpObj->Life < 0.0f )

  013d6	d9 ee		 fldz
  013d8	d8 96 fc 00 00
	00		 fcom	 DWORD PTR [esi+252]
  013de	df e0		 fnstsw	 ax
  013e0	f6 c4 41	 test	 ah, 65			; 00000041H
  013e3	75 0b		 jne	 SHORT $LN1026@Attack

; 982  : 			{
; 983  : 				lpObj->Life = 0.0f;

  013e5	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 984  : 			}
; 985  : 			else

  013eb	e9 29 02 00 00	 jmp	 $LN540@Attack
$LN1026@Attack:

; 986  : 			{
; 987  : 				if ( Wing->m_Type >= ITEMGET(12,36) && Wing->m_Type <= ITEMGET(12,40) ) //season 2.5 add-on

  013f0	0f b7 83 d2 05
	00 00		 movzx	 eax, WORD PTR [ebx+1490]
  013f7	dd d8		 fstp	 ST(0)
  013f9	b9 24 18 00 00	 mov	 ecx, 6180		; 00001824H
  013fe	66 3b c1	 cmp	 ax, cx
  01401	7c 0e		 jl	 SHORT $LN539@Attack
  01403	ba 28 18 00 00	 mov	 edx, 6184		; 00001828H
  01408	66 3b c2	 cmp	 ax, dx

; 988  : 				{
; 989  : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 139) / 100;	// #formula

  0140b	0f 8e 1a 01 00
	00		 jle	 $LN1232@Attack
$LN539@Attack:

; 990  : 				}
; 991  : #ifdef NEWWINGS_6
; 992  : 				else if ( IS_NEWWINGS_6(Wing->m_Type) )

  01411	b9 c3 18 00 00	 mov	 ecx, 6339		; 000018c3H
  01416	66 3b c1	 cmp	 ax, cx
  01419	7c 20		 jl	 SHORT $LN537@Attack
  0141b	33 c9		 xor	 ecx, ecx
  0141d	ba dc 18 00 00	 mov	 edx, 6364		; 000018dcH
  01422	66 3b c2	 cmp	 ax, dx
  01425	0f 9e c1	 setle	 cl
  01428	85 c9		 test	 ecx, ecx
  0142a	74 0f		 je	 SHORT $LN537@Attack

; 993  : 				{
; 994  : 					
; 995  : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 150/*150*/) / 100;	// #formula   // Fix Damage wings 5lvl in Pvp

  0142c	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  01433	83 c1 4b	 add	 ecx, 75			; 0000004bH
  01436	e9 42 01 00 00	 jmp	 $LN1184@Attack
$LN537@Attack:

; 996  : 				}
; 997  : #endif
; 998  : #ifdef NEWWINGS_5
; 999  : 				else if ( IS_NEWWINGS_5(Wing->m_Type) )

  0143b	b9 bd 18 00 00	 mov	 ecx, 6333		; 000018bdH
  01440	66 3b c1	 cmp	 ax, cx
  01443	7c 20		 jl	 SHORT $LN535@Attack
  01445	33 c9		 xor	 ecx, ecx
  01447	ba c2 18 00 00	 mov	 edx, 6338		; 000018c2H
  0144c	66 3b c2	 cmp	 ax, dx
  0144f	0f 9e c1	 setle	 cl
  01452	85 c9		 test	 ecx, ecx
  01454	74 0f		 je	 SHORT $LN535@Attack

; 1000 : 				{
; 1001 : 					//int ABXCONF5 = 150;
; 1002 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 150/*150*/) / 100;	// #formula   // Fix Damage wings 5lvl in Pvp	

  01456	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  0145d	83 c1 4b	 add	 ecx, 75			; 0000004bH
  01460	e9 18 01 00 00	 jmp	 $LN1184@Attack
$LN535@Attack:

; 1003 : 				}
; 1004 : #endif
; 1005 : #ifdef NEWWINGS_4
; 1006 : 				else if ( IS_NEWWINGS_4(Wing->m_Type) )

  01465	b9 b4 18 00 00	 mov	 ecx, 6324		; 000018b4H
  0146a	66 3b c1	 cmp	 ax, cx
  0146d	7c 28		 jl	 SHORT $LN533@Attack
  0146f	33 c9		 xor	 ecx, ecx
  01471	ba b9 18 00 00	 mov	 edx, 6329		; 000018b9H
  01476	66 3b c2	 cmp	 ax, dx
  01479	0f 9e c1	 setle	 cl
  0147c	85 c9		 test	 ecx, ecx
  0147e	74 17		 je	 SHORT $LN533@Attack

; 1007 : 				{
; 1008 : 					//damage atack
; 1009 : 					//int ABXCONF4 = 145;
; 1010 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 145) / 100;	// #formula

  01480	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  01487	8d 8c 09 91 00
	00 00		 lea	 ecx, DWORD PTR [ecx+ecx+145]

; 1040 : 				{
; 1041 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 139) / 100;	// #formula

  0148e	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01492	e9 ec 00 00 00	 jmp	 $LN1186@Attack
$LN533@Attack:

; 1011 : 				}
; 1012 : #endif
; 1013 : #ifdef NEWWINGS_2_5
; 1014 : 				else if ( IS_NEWWINGS_2_5(Wing->m_Type) )

  01497	b9 ba 18 00 00	 mov	 ecx, 6330		; 000018baH
  0149c	66 3b c1	 cmp	 ax, cx
  0149f	7c 28		 jl	 SHORT $LN531@Attack
  014a1	33 c9		 xor	 ecx, ecx
  014a3	ba bc 18 00 00	 mov	 edx, 6332		; 000018bcH
  014a8	66 3b c2	 cmp	 ax, dx
  014ab	0f 9e c1	 setle	 cl
  014ae	85 c9		 test	 ecx, ecx
  014b0	74 17		 je	 SHORT $LN531@Attack

; 1015 : 				{
; 1016 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 135) / 100;	// #formula	

  014b2	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  014b9	8d 8c 09 87 00
	00 00		 lea	 ecx, DWORD PTR [ecx+ecx+135]

; 1040 : 				{
; 1041 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 139) / 100;	// #formula

  014c0	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  014c4	e9 ba 00 00 00	 jmp	 $LN1186@Attack
$LN531@Attack:

; 1017 : 				}
; 1018 : #endif
; 1019 : 				else if ( Wing->m_Type == ITEMGET(13,30) )	// Cape Of Lord

  014c9	b9 1e 1a 00 00	 mov	 ecx, 6686		; 00001a1eH
  014ce	66 3b c1	 cmp	 ax, cx

; 1020 : 				{
; 1021 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 120) / 100;	// #formula

  014d1	0f 84 9c 00 00
	00		 je	 $LN1185@Attack

; 1022 : 				}
; 1023 : 				else if ( Wing->m_Type == ITEMGET(12,41) )	//

  014d7	b9 29 18 00 00	 mov	 ecx, 6185		; 00001829H
  014dc	66 3b c1	 cmp	 ax, cx
  014df	75 0f		 jne	 SHORT $LN527@Attack

; 1024 : 				{
; 1025 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 112) / 100;	// #formula

  014e1	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  014e8	83 c1 38	 add	 ecx, 56			; 00000038H
  014eb	e9 8d 00 00 00	 jmp	 $LN1184@Attack
$LN527@Attack:

; 1026 : 				}
; 1027 : 				else if ( Wing->m_Type == ITEMGET(12,42) )	//

  014f0	b9 2a 18 00 00	 mov	 ecx, 6186		; 0000182aH
  014f5	66 3b c1	 cmp	 ax, cx
  014f8	75 13		 jne	 SHORT $LN525@Attack

; 1028 : 				{
; 1029 : 					AttackDamage = AttackDamage * (Wing->m_Level + 132) / 100;	// #formula

  014fa	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  01501	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H

; 1040 : 				{
; 1041 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 139) / 100;	// #formula

  01507	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  0150b	eb 76		 jmp	 SHORT $LN1186@Attack
$LN525@Attack:

; 1030 : 				}
; 1031 : 				else if ( Wing->m_Type == ITEMGET(12,43) )	//

  0150d	b9 2b 18 00 00	 mov	 ecx, 6187		; 0000182bH
  01512	66 3b c1	 cmp	 ax, cx

; 1032 : 				{
; 1033 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 139) / 100;	// #formula

  01515	74 14		 je	 SHORT $LN1232@Attack

; 1034 : 				}
; 1035 : 				else if ( Wing->m_Type == ITEMGET(12,49) ) //season 6.0 add-on

  01517	b9 31 18 00 00	 mov	 ecx, 6193		; 00001831H
  0151c	66 3b c1	 cmp	 ax, cx

; 1036 : 				{
; 1037 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 120) / 100;	// #formula

  0151f	74 52		 je	 SHORT $LN1185@Attack

; 1038 : 				}
; 1039 : 				else if ( Wing->m_Type == ITEMGET(12,50) ) //season 6.0 add-on

  01521	b9 32 18 00 00	 mov	 ecx, 6194		; 00001832H
  01526	66 3b c1	 cmp	 ax, cx
  01529	75 14		 jne	 SHORT $LN519@Attack
$LN1232@Attack:

; 1040 : 				{
; 1041 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 139) / 100;	// #formula

  0152b	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  01532	8d 8c 09 8b 00
	00 00		 lea	 ecx, DWORD PTR [ecx+ecx+139]
  01539	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  0153d	eb 44		 jmp	 SHORT $LN1186@Attack
$LN519@Attack:

; 1042 : 				}
; 1043 : 				else if ( Wing->m_Type == ITEMGET(12,130) ) //season 6.0 add-on

  0153f	b9 82 18 00 00	 mov	 ecx, 6274		; 00001882H
  01544	66 3b c1	 cmp	 ax, cx

; 1044 : 				{
; 1045 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 120) / 100;	// #formula

  01547	74 2a		 je	 SHORT $LN1185@Attack

; 1046 : 				}
; 1047 : 				else if ( Wing->m_Type >= ITEMGET(12,131) &&  Wing->m_Type <= ITEMGET(12,134)) //season 6.0 add-on

  01549	b9 83 18 00 00	 mov	 ecx, 6275		; 00001883H
  0154e	66 3b c1	 cmp	 ax, cx
  01551	7c 16		 jl	 SHORT $LN515@Attack
  01553	ba 86 18 00 00	 mov	 edx, 6278		; 00001886H
  01558	66 3b c2	 cmp	 ax, dx
  0155b	7f 0c		 jg	 SHORT $LN515@Attack

; 1048 : 				{
; 1049 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 112) / 100;	// #formula

  0155d	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  01564	83 c1 38	 add	 ecx, 56			; 00000038H
  01567	eb 14		 jmp	 SHORT $LN1184@Attack
$LN515@Attack:

; 1050 : 				}
; 1051 : 				else if ( Wing->m_Type == ITEMGET(12,135) ) //season 6.0 add-on

  01569	b9 87 18 00 00	 mov	 ecx, 6279		; 00001887H
  0156e	66 3b c1	 cmp	 ax, cx
  01571	75 26		 jne	 SHORT $LN513@Attack
$LN1185@Attack:

; 1052 : 				{
; 1053 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 120) / 100;	// #formula

  01573	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  0157a	83 c1 3c	 add	 ecx, 60			; 0000003cH
$LN1184@Attack:
  0157d	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01581	03 c9		 add	 ecx, ecx
$LN1186@Attack:
  01583	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01588	f7 e9		 imul	 ecx
  0158a	c1 fa 05	 sar	 edx, 5
  0158d	8b c2		 mov	 eax, edx
  0158f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01592	03 c2		 add	 eax, edx
  01594	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  01597	eb 49		 jmp	 SHORT $LN510@Attack
$LN513@Attack:

; 1054 : 				}
; 1055 : 				else if ( Wing->m_Type > ITEMGET(12,2) )

  01599	b9 02 18 00 00	 mov	 ecx, 6146		; 00001802H
  0159e	66 3b c1	 cmp	 ax, cx

; 1056 : 				{
; 1057 : 					AttackDamage = AttackDamage * (Wing->m_Level + 132) / 100 ;	// #formula

  015a1	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  015a8	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  015ad	7e 1b		 jle	 SHORT $LN511@Attack
  015af	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  015b5	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  015b9	f7 e9		 imul	 ecx
  015bb	c1 fa 05	 sar	 edx, 5
  015be	8b c2		 mov	 eax, edx
  015c0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  015c3	03 c2		 add	 eax, edx
  015c5	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1058 : 				}
; 1059 : 				else

  015c8	eb 18		 jmp	 SHORT $LN510@Attack
$LN511@Attack:

; 1060 : 				{
; 1061 : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 112) / 100;	// #formula

  015ca	83 c1 38	 add	 ecx, 56			; 00000038H
  015cd	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  015d1	03 c9		 add	 ecx, ecx
  015d3	f7 e9		 imul	 ecx
  015d5	c1 fa 05	 sar	 edx, 5
  015d8	8b ca		 mov	 ecx, edx
  015da	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  015dd	03 ca		 add	 ecx, edx
  015df	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN510@Attack:

; 1062 : 				}
; 1063 : #ifdef _WINGS_DAMAGE_
; 1064 : 				gWingsDamage.Attack(Wing->m_Type, AttackDamage);

  015e2	0f bf 83 d2 05
	00 00		 movsx	 eax, WORD PTR [ebx+1490]
  015e9	8d 55 1c	 lea	 edx, DWORD PTR _AttackDamage$[ebp]
  015ec	52		 push	 edx
  015ed	50		 push	 eax
  015ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  015f3	e8 00 00 00 00	 call	 ?Attack@cWingsDamage@@QAEXHAAH@Z ; cWingsDamage::Attack

; 1065 : 				gWingsDamage.SetCharWingAttack(lpObj->m_Index, Wing->m_Type, Wing->m_Level, AttackDamage);

  015f8	0f bf 93 d4 05
	00 00		 movsx	 edx, WORD PTR [ebx+1492]
  015ff	0f bf 83 d2 05
	00 00		 movsx	 eax, WORD PTR [ebx+1490]
  01606	8d 4d 1c	 lea	 ecx, DWORD PTR _AttackDamage$[ebp]
  01609	51		 push	 ecx
  0160a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0160c	52		 push	 edx
  0160d	50		 push	 eax
  0160e	51		 push	 ecx
  0160f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  01614	e8 00 00 00 00	 call	 ?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z ; cWingsDamage::SetCharWingAttack
$LN540@Attack:

; 1066 : #endif // _WINGS_DAMAGE_
; 1067 : 
; 1068 : 			}
; 1069 : 
; 1070 : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  01619	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  0161f	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  01625	52		 push	 edx
  01626	6a 00		 push	 0
  01628	68 ff 00 00 00	 push	 255			; 000000ffH
  0162d	e8 00 00 00 00	 call	 __ftol2_sse
  01632	50		 push	 eax
  01633	8b 06		 mov	 eax, DWORD PTR [esi]
  01635	50		 push	 eax
  01636	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0163b	83 c4 14	 add	 esp, 20			; 00000014H
  0163e	eb 02		 jmp	 SHORT $LN559@Attack
$LN1015@Attack:
  01640	dd d8		 fstp	 ST(0)
$LN559@Attack:

; 1071 : 		}
; 1072 : 
; 1073 : 		if ( gObjWingSprite(lpTargetObj) == TRUE )

  01642	57		 push	 edi
  01643	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  01648	83 c4 04	 add	 esp, 4
  0164b	83 f8 01	 cmp	 eax, 1
  0164e	0f 85 d6 04 00
	00		 jne	 $LN925@Attack

; 1074 : 		{
; 1075 : 			CItem * Wing = &lpTargetObj->pInventory[7];

  01654	8b 9f 24 0e 00
	00		 mov	 ebx, DWORD PTR [edi+3620]

; 1076 : 
; 1077 : 			if ( Wing->m_Type != ITEMGET(13,30) ) // Cape Of Lord

  0165a	0f b7 83 d2 05
	00 00		 movzx	 eax, WORD PTR [ebx+1490]
  01661	b9 1e 1a 00 00	 mov	 ecx, 6686		; 00001a1eH
  01666	66 3b c1	 cmp	 ax, cx
  01669	0f 84 bb 04 00
	00		 je	 $LN925@Attack

; 1078 : 			{
; 1079 : 				if ( AttackDamage > 1 )

  0166f	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01672	83 f9 01	 cmp	 ecx, 1
  01675	0f 8e af 04 00
	00		 jle	 $LN925@Attack

; 1080 : 				{
; 1081 : 					if ( Wing->m_Type >= ITEMGET(12, 36) && Wing->m_Type <= ITEMGET(12, 40) || Wing->m_Type == ITEMGET(12, 43)) //season 2.5 add-on

  0167b	ba 24 18 00 00	 mov	 edx, 6180		; 00001824H
  01680	66 3b c2	 cmp	 ax, dx
  01683	7c 0a		 jl	 SHORT $LN923@Attack
  01685	ba 28 18 00 00	 mov	 edx, 6184		; 00001828H
  0168a	66 3b c2	 cmp	 ax, dx
  0168d	7e 0e		 jle	 SHORT $LN505@Attack
$LN923@Attack:
  0168f	ba 2b 18 00 00	 mov	 edx, 6187		; 0000182bH
  01694	66 3b c2	 cmp	 ax, dx
  01697	0f 85 b1 00 00
	00		 jne	 $LN860@Attack
$LN505@Attack:

; 1082 : 					{
; 1083 : 						if(Wing->m_Type == ITEMGET(12,40))

  0169d	ba 28 18 00 00	 mov	 edx, 6184		; 00001828H
  016a2	66 3b c2	 cmp	 ax, dx

; 1086 : 							AttackDamage = (int)(damage);	//  #formula

  016a5	0f bf 83 d4 05
	00 00		 movsx	 eax, WORD PTR [ebx+1492]
  016ac	75 2c		 jne	 SHORT $LN503@Attack

; 1084 : 						{
; 1085 : 							float damage = (float)(AttackDamage * (76 - (Wing->m_Level*2))) / 100.0f;

  016ae	ba 26 00 00 00	 mov	 edx, 38			; 00000026H
  016b3	2b d0		 sub	 edx, eax
  016b5	0f af d1	 imul	 edx, ecx
  016b8	03 d2		 add	 edx, edx

; 1086 : 							AttackDamage = (int)(damage);	//  #formula

  016ba	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv6024[ebp], edx
  016c0	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv6024[ebp]
  016c6	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  016cc	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv6022[ebp]
  016d2	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv6022[ebp]

; 1087 : 						}
; 1088 : 						else

  016d8	eb 2a		 jmp	 SHORT $LN1187@Attack
$LN503@Attack:

; 1089 : 						{
; 1090 : 							
; 1091 : 							float damage = (float)(AttackDamage * (61 - (Wing->m_Level*2))) / 100.0f;

  016da	03 c0		 add	 eax, eax
  016dc	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  016e1	2b d0		 sub	 edx, eax
  016e3	0f af d1	 imul	 edx, ecx

; 1092 : 							AttackDamage = (int)(damage);	//  #formula

  016e6	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv6016[ebp], edx
  016ec	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv6016[ebp]
  016f2	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  016f8	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv6014[ebp]
  016fe	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv6014[ebp]
$LN1187@Attack:
  01704	e8 00 00 00 00	 call	 __ftol2_sse
  01709	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1093 : 						}
; 1094 : 
; 1095 : 						if((rand()%100)< 5)

  0170c	e8 00 00 00 00	 call	 _rand
  01711	99		 cdq
  01712	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01717	f7 f9		 idiv	 ecx
  01719	83 fa 05	 cmp	 edx, 5
  0171c	7d 30		 jge	 SHORT $LN860@Attack

; 1096 : 						{
; 1097 : 							BYTE WingOption = lpTargetObj->pInventory[7].m_NewOption;

  0171e	8b 97 24 0e 00
	00		 mov	 edx, DWORD PTR [edi+3620]
  01724	8a 82 63 06 00
	00		 mov	 al, BYTE PTR [edx+1635]

; 1098 : 							
; 1099 : 							if((WingOption&4) == 4) // 5% Chance of Recover Full Life

  0172a	a8 04		 test	 al, 4
  0172c	74 0a		 je	 SHORT $LN500@Attack

; 1100 : 							{
; 1101 : 								gObjAddMsgSendDelay(lpTargetObj,13,lpObj->m_Index,100,0);

  0172e	8b 06		 mov	 eax, DWORD PTR [esi]
  01730	6a 00		 push	 0
  01732	51		 push	 ecx
  01733	50		 push	 eax
  01734	6a 0d		 push	 13			; 0000000dH

; 1102 : 							}
; 1103 : 							else

  01736	eb 0d		 jmp	 SHORT $LN1188@Attack
$LN500@Attack:

; 1104 : 							{
; 1105 : 								if((WingOption&8) == 8) // 5% Chance of Recover Full Mana

  01738	a8 08		 test	 al, 8
  0173a	74 12		 je	 SHORT $LN860@Attack

; 1106 : 								{
; 1107 : 									gObjAddMsgSendDelay(lpTargetObj,14,lpObj->m_Index,100,0);

  0173c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0173e	6a 00		 push	 0
  01740	6a 64		 push	 100			; 00000064H
  01742	51		 push	 ecx
  01743	6a 0e		 push	 14			; 0000000eH
$LN1188@Attack:
  01745	57		 push	 edi
  01746	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  0174b	83 c4 14	 add	 esp, 20			; 00000014H
$LN860@Attack:

; 1108 : 								}
; 1109 : 							}
; 1110 : 						}
; 1111 : 					}
; 1112 : #ifdef NEWWINGS_4
; 1113 : 					if ( IS_NEWWINGS_4(Wing->m_Type) ) //season 2.5 add-on

  0174e	0f b7 83 d2 05
	00 00		 movzx	 eax, WORD PTR [ebx+1490]
  01755	ba b4 18 00 00	 mov	 edx, 6324		; 000018b4H
  0175a	66 3b c2	 cmp	 ax, dx
  0175d	0f 8c d1 00 00
	00		 jl	 $LN861@Attack
  01763	33 d2		 xor	 edx, edx
  01765	b9 b9 18 00 00	 mov	 ecx, 6329		; 000018b9H
  0176a	66 3b c1	 cmp	 ax, cx
  0176d	0f 9e c2	 setle	 dl
  01770	8b ca		 mov	 ecx, edx
  01772	85 c9		 test	 ecx, ecx
  01774	0f 84 ba 00 00
	00		 je	 $LN861@Attack

; 1114 : 					{
; 1115 : 						if(Wing->m_Type == ITEMGET(12,184))

  0177a	b9 b8 18 00 00	 mov	 ecx, 6328		; 000018b8H
  0177f	66 3b c1	 cmp	 ax, cx
  01782	75 34		 jne	 SHORT $LN496@Attack

; 1116 : 						{
; 1117 : 							float damage = (float)(AttackDamage * (70 - (Wing->m_Level*2))) / 100.0f;
; 1118 : 						AttackDamage = (int)(damage);	//  #formula

  01784	0f bf 93 d4 05
	00 00		 movsx	 edx, WORD PTR [ebx+1492]
  0178b	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  01790	2b c2		 sub	 eax, edx
  01792	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  01796	03 c0		 add	 eax, eax
  01798	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv5997[ebp], eax
  0179e	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5997[ebp]
  017a4	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  017aa	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5994[ebp]
  017b0	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5994[ebp]

; 1119 : 						}
; 1120 : 						else

  017b6	eb 32		 jmp	 SHORT $LN1189@Attack
$LN496@Attack:

; 1121 : 						{
; 1122 : 							//int ABXCON4 = 55;
; 1123 : 							float damage = (float)(AttackDamage * (55/*55*/ - (Wing->m_Level*2))) / 100.0f;
; 1124 : 							AttackDamage = (int)(damage);	//  #formula

  017b8	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  017bf	03 c9		 add	 ecx, ecx
  017c1	ba 37 00 00 00	 mov	 edx, 55			; 00000037H
  017c6	2b d1		 sub	 edx, ecx
  017c8	0f af 55 1c	 imul	 edx, DWORD PTR _AttackDamage$[ebp]
  017cc	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv5985[ebp], edx
  017d2	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5985[ebp]
  017d8	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  017de	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5983[ebp]
  017e4	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5983[ebp]
$LN1189@Attack:
  017ea	e8 00 00 00 00	 call	 __ftol2_sse
  017ef	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1125 : 						}
; 1126 : 
; 1127 : 						if((rand()%100)< 5)

  017f2	e8 00 00 00 00	 call	 _rand
  017f7	99		 cdq
  017f8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  017fd	f7 f9		 idiv	 ecx
  017ff	83 fa 05	 cmp	 edx, 5
  01802	7d 30		 jge	 SHORT $LN861@Attack

; 1128 : 						{
; 1129 : 							BYTE WingOption = lpTargetObj->pInventory[7].m_NewOption;

  01804	8b 97 24 0e 00
	00		 mov	 edx, DWORD PTR [edi+3620]
  0180a	8a 82 63 06 00
	00		 mov	 al, BYTE PTR [edx+1635]

; 1130 : 							
; 1131 : 							if((WingOption&4) == 4) // 5% Chance of Recover Full Life

  01810	a8 04		 test	 al, 4
  01812	74 0a		 je	 SHORT $LN493@Attack

; 1132 : 							{
; 1133 : 								gObjAddMsgSendDelay(lpTargetObj,13,lpObj->m_Index,100,0);

  01814	8b 06		 mov	 eax, DWORD PTR [esi]
  01816	6a 00		 push	 0
  01818	51		 push	 ecx
  01819	50		 push	 eax
  0181a	6a 0d		 push	 13			; 0000000dH

; 1134 : 							}
; 1135 : 							else

  0181c	eb 0d		 jmp	 SHORT $LN1190@Attack
$LN493@Attack:

; 1136 : 							{
; 1137 : 								if((WingOption&8) == 8) // 5% Chance of Recover Full Mana

  0181e	a8 08		 test	 al, 8
  01820	74 12		 je	 SHORT $LN861@Attack

; 1138 : 								{
; 1139 : 									gObjAddMsgSendDelay(lpTargetObj,14,lpObj->m_Index,100,0);

  01822	8b 0e		 mov	 ecx, DWORD PTR [esi]
  01824	6a 00		 push	 0
  01826	6a 64		 push	 100			; 00000064H
  01828	51		 push	 ecx
  01829	6a 0e		 push	 14			; 0000000eH
$LN1190@Attack:
  0182b	57		 push	 edi
  0182c	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  01831	83 c4 14	 add	 esp, 20			; 00000014H
$LN861@Attack:

; 1140 : 								}
; 1141 : 							}
; 1142 : 						}
; 1143 : 					}
; 1144 : #endif
; 1145 : #ifdef NEWWINGS_2_5
; 1146 : 					if ( IS_NEWWINGS_2_5(Wing->m_Type) ) //season 2.5 add-on

  01834	0f b7 83 d2 05
	00 00		 movzx	 eax, WORD PTR [ebx+1490]
  0183b	ba ba 18 00 00	 mov	 edx, 6330		; 000018baH
  01840	66 3b c2	 cmp	 ax, dx
  01843	0f 8c 8f 00 00
	00		 jl	 $LN862@Attack
  01849	33 d2		 xor	 edx, edx
  0184b	b9 bc 18 00 00	 mov	 ecx, 6332		; 000018bcH
  01850	66 3b c1	 cmp	 ax, cx
  01853	0f 9e c2	 setle	 dl
  01856	8b c2		 mov	 eax, edx
  01858	85 c0		 test	 eax, eax
  0185a	74 7c		 je	 SHORT $LN862@Attack

; 1147 : 					{
; 1148 : 						float damage = (float)(AttackDamage * (65 - (Wing->m_Level*2))) / 100.0f;
; 1149 : 						AttackDamage = (int)(damage);	//  #formula

  0185c	0f bf 83 d4 05
	00 00		 movsx	 eax, WORD PTR [ebx+1492]
  01863	03 c0		 add	 eax, eax
  01865	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  0186a	2b c8		 sub	 ecx, eax
  0186c	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01870	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv5967[ebp], ecx
  01876	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5967[ebp]
  0187c	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01882	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5965[ebp]
  01888	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5965[ebp]
  0188e	e8 00 00 00 00	 call	 __ftol2_sse
  01893	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1150 : 
; 1151 : 
; 1152 : 						if((rand()%100)< 5)

  01896	e8 00 00 00 00	 call	 _rand
  0189b	99		 cdq
  0189c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  018a1	f7 f9		 idiv	 ecx
  018a3	83 fa 05	 cmp	 edx, 5
  018a6	7d 30		 jge	 SHORT $LN862@Attack

; 1153 : 						{
; 1154 : 							BYTE WingOption = lpTargetObj->pInventory[7].m_NewOption;

  018a8	8b 97 24 0e 00
	00		 mov	 edx, DWORD PTR [edi+3620]
  018ae	8a 82 63 06 00
	00		 mov	 al, BYTE PTR [edx+1635]

; 1155 : 							
; 1156 : 							if((WingOption&4) == 4) // 5% Chance of Recover Full Life

  018b4	a8 04		 test	 al, 4
  018b6	74 0a		 je	 SHORT $LN488@Attack

; 1157 : 							{
; 1158 : 								gObjAddMsgSendDelay(lpTargetObj,13,lpObj->m_Index,100,0);

  018b8	8b 06		 mov	 eax, DWORD PTR [esi]
  018ba	6a 00		 push	 0
  018bc	51		 push	 ecx
  018bd	50		 push	 eax
  018be	6a 0d		 push	 13			; 0000000dH

; 1159 : 							}
; 1160 : 							else

  018c0	eb 0d		 jmp	 SHORT $LN1191@Attack
$LN488@Attack:

; 1161 : 							{
; 1162 : 								if((WingOption&8) == 8) // 5% Chance of Recover Full Mana

  018c2	a8 08		 test	 al, 8
  018c4	74 12		 je	 SHORT $LN862@Attack

; 1163 : 								{
; 1164 : 									gObjAddMsgSendDelay(lpTargetObj,14,lpObj->m_Index,100,0);

  018c6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  018c8	6a 00		 push	 0
  018ca	6a 64		 push	 100			; 00000064H
  018cc	51		 push	 ecx
  018cd	6a 0e		 push	 14			; 0000000eH
$LN1191@Attack:
  018cf	57		 push	 edi
  018d0	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  018d5	83 c4 14	 add	 esp, 20			; 00000014H
$LN862@Attack:

; 1165 : 								}
; 1166 : 							}
; 1167 : 						}
; 1168 : 					}
; 1169 : #endif
; 1170 : #ifdef NEWWINGS_5
; 1171 : 					if ( IS_NEWWINGS_5(Wing->m_Type) ) //season 2.5 add-on

  018d8	0f b7 83 d2 05
	00 00		 movzx	 eax, WORD PTR [ebx+1490]
  018df	ba bd 18 00 00	 mov	 edx, 6333		; 000018bdH
  018e4	66 3b c2	 cmp	 ax, dx
  018e7	0f 8c 8f 00 00
	00		 jl	 $LN863@Attack
  018ed	33 d2		 xor	 edx, edx
  018ef	b9 c2 18 00 00	 mov	 ecx, 6338		; 000018c2H
  018f4	66 3b c1	 cmp	 ax, cx
  018f7	0f 9e c2	 setle	 dl
  018fa	8b c2		 mov	 eax, edx
  018fc	85 c0		 test	 eax, eax
  018fe	74 7c		 je	 SHORT $LN863@Attack

; 1172 : 					{
; 1173 : 							//int ABXCON5 = 35;
; 1174 : 						float damage = (float)(AttackDamage * (50/**//*100*/ - (Wing->m_Level*2))) / 100.0f;   // Fix Damage wings 5lvl in Pvp
; 1175 : 						AttackDamage = (int)(damage);	//  #formula

  01900	0f bf 83 d4 05
	00 00		 movsx	 eax, WORD PTR [ebx+1492]
  01907	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0190c	2b c8		 sub	 ecx, eax
  0190e	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01912	03 c9		 add	 ecx, ecx
  01914	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv5949[ebp], ecx
  0191a	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5949[ebp]
  01920	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01926	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5947[ebp]
  0192c	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5947[ebp]
  01932	e8 00 00 00 00	 call	 __ftol2_sse
  01937	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1176 : 							
; 1177 : 
; 1178 : 
; 1179 : 						if((rand()%100)< 5)

  0193a	e8 00 00 00 00	 call	 _rand
  0193f	99		 cdq
  01940	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01945	f7 f9		 idiv	 ecx
  01947	83 fa 05	 cmp	 edx, 5
  0194a	7d 30		 jge	 SHORT $LN863@Attack

; 1180 : 						{
; 1181 : 							BYTE WingOption = lpTargetObj->pInventory[7].m_NewOption;

  0194c	8b 97 24 0e 00
	00		 mov	 edx, DWORD PTR [edi+3620]
  01952	8a 82 63 06 00
	00		 mov	 al, BYTE PTR [edx+1635]

; 1182 : 							
; 1183 : 							if((WingOption&4) == 4) // 5% Chance of Recover Full Life

  01958	a8 04		 test	 al, 4
  0195a	74 0a		 je	 SHORT $LN483@Attack

; 1184 : 							{
; 1185 : 								gObjAddMsgSendDelay(lpTargetObj,13,lpObj->m_Index,100,0);

  0195c	8b 06		 mov	 eax, DWORD PTR [esi]
  0195e	6a 00		 push	 0
  01960	51		 push	 ecx
  01961	50		 push	 eax
  01962	6a 0d		 push	 13			; 0000000dH

; 1186 : 							}
; 1187 : 							else

  01964	eb 0d		 jmp	 SHORT $LN1192@Attack
$LN483@Attack:

; 1188 : 							{
; 1189 : 								if((WingOption&8) == 8) // 5% Chance of Recover Full Mana

  01966	a8 08		 test	 al, 8
  01968	74 12		 je	 SHORT $LN863@Attack

; 1190 : 								{
; 1191 : 									gObjAddMsgSendDelay(lpTargetObj,14,lpObj->m_Index,100,0);

  0196a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0196c	6a 00		 push	 0
  0196e	6a 64		 push	 100			; 00000064H
  01970	51		 push	 ecx
  01971	6a 0e		 push	 14			; 0000000eH
$LN1192@Attack:
  01973	57		 push	 edi
  01974	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  01979	83 c4 14	 add	 esp, 20			; 00000014H
$LN863@Attack:

; 1192 : 								}
; 1193 : 							}
; 1194 : 						}
; 1195 : 					}
; 1196 : #endif
; 1197 : #ifdef NEWWINGS_6
; 1198 : 					if ( IS_NEWWINGS_6(Wing->m_Type) ) //season 2.5 add-on

  0197c	0f b7 83 d2 05
	00 00		 movzx	 eax, WORD PTR [ebx+1490]
  01983	ba c3 18 00 00	 mov	 edx, 6339		; 000018c3H
  01988	66 3b c2	 cmp	 ax, dx
  0198b	0f 8c ac 00 00
	00		 jl	 $LN954@Attack
  01991	33 d2		 xor	 edx, edx
  01993	b9 dc 18 00 00	 mov	 ecx, 6364		; 000018dcH
  01998	66 3b c1	 cmp	 ax, cx
  0199b	0f 9e c2	 setle	 dl
  0199e	8b ca		 mov	 ecx, edx
  019a0	85 c9		 test	 ecx, ecx
  019a2	0f 84 95 00 00
	00		 je	 $LN954@Attack

; 1199 : 					{
; 1200 : 						//if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal || eZtUB::PrideMu || eZtUB::Local3 || eZtUB::Local2)){
; 1201 : 			
; 1202 : 						float damage = (float)(AttackDamage * (40/*100*/ - (Wing->m_Level*2))) / 100.0f;   // Fix Damage wings 5lvl in Pvp
; 1203 : 						AttackDamage = (int)(damage);	//  #formula

  019a8	0f bf 83 d4 05
	00 00		 movsx	 eax, WORD PTR [ebx+1492]
  019af	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  019b4	2b c8		 sub	 ecx, eax
  019b6	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  019ba	03 c9		 add	 ecx, ecx
  019bc	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv5927[ebp], ecx
  019c2	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5927[ebp]
  019c8	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  019ce	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5925[ebp]
  019d4	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5925[ebp]
  019da	e8 00 00 00 00	 call	 __ftol2_sse
  019df	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1204 : 
; 1205 : 
; 1206 : 						if((rand()%100)< 5)

  019e2	e8 00 00 00 00	 call	 _rand
  019e7	99		 cdq
  019e8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  019ed	f7 f9		 idiv	 ecx
  019ef	83 fa 05	 cmp	 edx, 5
  019f2	0f 8d fb 00 00
	00		 jge	 $LN471@Attack

; 1207 : 						{
; 1208 : 							BYTE WingOption = lpTargetObj->pInventory[7].m_NewOption;

  019f8	8b 97 24 0e 00
	00		 mov	 edx, DWORD PTR [edi+3620]
  019fe	8a 82 63 06 00
	00		 mov	 al, BYTE PTR [edx+1635]

; 1209 : 							
; 1210 : 							if((WingOption&4) == 4) // 5% Chance of Recover Full Life

  01a04	a8 04		 test	 al, 4
  01a06	74 16		 je	 SHORT $LN478@Attack

; 1211 : 							{
; 1212 : 								gObjAddMsgSendDelay(lpTargetObj,13,lpObj->m_Index,100,0);

  01a08	8b 06		 mov	 eax, DWORD PTR [esi]
  01a0a	6a 00		 push	 0
  01a0c	51		 push	 ecx
  01a0d	50		 push	 eax
  01a0e	6a 0d		 push	 13			; 0000000dH
  01a10	57		 push	 edi
  01a11	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  01a16	83 c4 14	 add	 esp, 20			; 00000014H

; 1213 : 							}
; 1214 : 							else

  01a19	e9 d5 00 00 00	 jmp	 $LN471@Attack
$LN478@Attack:

; 1215 : 							{
; 1216 : 								if((WingOption&8) == 8) // 5% Chance of Recover Full Mana

  01a1e	a8 08		 test	 al, 8
  01a20	0f 84 cd 00 00
	00		 je	 $LN471@Attack

; 1217 : 								{
; 1218 : 									gObjAddMsgSendDelay(lpTargetObj,14,lpObj->m_Index,100,0);

  01a26	8b 0e		 mov	 ecx, DWORD PTR [esi]
  01a28	6a 00		 push	 0
  01a2a	6a 64		 push	 100			; 00000064H
  01a2c	51		 push	 ecx
  01a2d	6a 0e		 push	 14			; 0000000eH
  01a2f	57		 push	 edi
  01a30	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  01a35	83 c4 14	 add	 esp, 20			; 00000014H

; 1219 : 								}
; 1220 : 							}
; 1221 : 						  }
; 1222 : 						//}
; 1223 : 					}

  01a38	e9 b6 00 00 00	 jmp	 $LN471@Attack
$LN954@Attack:

; 1224 : #endif
; 1225 : 					else if ( Wing->m_Type == ITEMGET(12,49) )

  01a3d	ba 31 18 00 00	 mov	 edx, 6193		; 00001831H
  01a42	66 3b c2	 cmp	 ax, dx
  01a45	75 34		 jne	 SHORT $LN474@Attack

; 1226 : 					{
; 1227 : 						float damage = (float)(AttackDamage * (90 - (Wing->m_Level*2))) / 100.0f;
; 1228 : 						AttackDamage = (int)(damage);	//  #formula

  01a47	0f bf 83 d4 05
	00 00		 movsx	 eax, WORD PTR [ebx+1492]
  01a4e	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  01a53	2b c8		 sub	 ecx, eax
  01a55	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01a59	03 c9		 add	 ecx, ecx
  01a5b	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv5911[ebp], ecx
  01a61	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5911[ebp]
  01a67	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01a6d	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5909[ebp]
  01a73	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5909[ebp]
  01a79	eb 70		 jmp	 SHORT $LN1193@Attack
$LN474@Attack:

; 1229 : 					}
; 1230 : 					else if ( Wing->m_Type > ITEMGET(12, 2) )

  01a7b	ba 02 18 00 00	 mov	 edx, 6146		; 00001802H
  01a80	66 3b c2	 cmp	 ax, dx
  01a83	7e 34		 jle	 SHORT $LN472@Attack

; 1231 : 					{
; 1232 : 						float damage = (float)(AttackDamage * (75 - (Wing->m_Level*2))) / 100.0f;
; 1233 : 						AttackDamage = (int)(damage);	//  #formula

  01a85	0f bf 83 d4 05
	00 00		 movsx	 eax, WORD PTR [ebx+1492]
  01a8c	03 c0		 add	 eax, eax
  01a8e	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  01a93	2b c8		 sub	 ecx, eax
  01a95	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01a99	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv5903[ebp], ecx
  01a9f	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5903[ebp]
  01aa5	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01aab	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5901[ebp]
  01ab1	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5901[ebp]

; 1234 : 						
; 1235 : 					}
; 1236 : 					else

  01ab7	eb 32		 jmp	 SHORT $LN1193@Attack
$LN472@Attack:

; 1237 : 					{
; 1238 : 						float damage = (float)(AttackDamage * (88 - (Wing->m_Level*2))) / 100.0f;
; 1239 : 						AttackDamage = (int)(damage);	//  #formula

  01ab9	0f bf 93 d4 05
	00 00		 movsx	 edx, WORD PTR [ebx+1492]
  01ac0	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  01ac5	2b c2		 sub	 eax, edx
  01ac7	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  01acb	03 c0		 add	 eax, eax
  01acd	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv5895[ebp], eax
  01ad3	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5895[ebp]
  01ad9	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01adf	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5893[ebp]
  01ae5	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5893[ebp]
$LN1193@Attack:
  01aeb	e8 00 00 00 00	 call	 __ftol2_sse
  01af0	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN471@Attack:

; 1240 : 					}
; 1241 : #ifdef _WINGS_DAMAGE_
; 1242 : 					gWingsDamage.Defence(Wing->m_Type, AttackDamage);

  01af3	0f bf 93 d2 05
	00 00		 movsx	 edx, WORD PTR [ebx+1490]
  01afa	8d 4d 1c	 lea	 ecx, DWORD PTR _AttackDamage$[ebp]
  01afd	51		 push	 ecx
  01afe	52		 push	 edx
  01aff	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  01b04	e8 00 00 00 00	 call	 ?Defence@cWingsDamage@@QAEXHAAH@Z ; cWingsDamage::Defence

; 1243 : 					gWingsDamage.SetCharWingAbsurd(lpObj->m_Index, Wing->m_Type, Wing->m_Level, AttackDamage);

  01b09	0f bf 8b d4 05
	00 00		 movsx	 ecx, WORD PTR [ebx+1492]
  01b10	0f bf 93 d2 05
	00 00		 movsx	 edx, WORD PTR [ebx+1490]
  01b17	8d 45 1c	 lea	 eax, DWORD PTR _AttackDamage$[ebp]
  01b1a	50		 push	 eax
  01b1b	8b 06		 mov	 eax, DWORD PTR [esi]
  01b1d	51		 push	 ecx
  01b1e	52		 push	 edx
  01b1f	50		 push	 eax
  01b20	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  01b25	e8 00 00 00 00	 call	 ?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z ; cWingsDamage::SetCharWingAbsurd
$LN925@Attack:

; 1244 : #endif // _WINGS_DAMAGE_
; 1245 : 				}
; 1246 : 			}
; 1247 : 		}
; 1248 : 
; 1249 : 
; 1250 : 		if ( gObjDenorantSprite(lpObj ) )

  01b2a	56		 push	 esi
  01b2b	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  01b30	83 c4 04	 add	 esp, 4
  01b33	85 c0		 test	 eax, eax
  01b35	74 74		 je	 SHORT $LN955@Attack

; 1251 : 		{
; 1252 : 			lpObj->Life -= 1.0f;

  01b37	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  01b3d	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  01b43	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR tv5929[ebp]
  01b49	d9 85 d8 fe ff
	ff		 fld	 DWORD PTR tv5929[ebp]
  01b4f	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]

; 1253 : 
; 1254 : 			if ( lpObj->Life < 0.0f )

  01b55	d9 ee		 fldz
  01b57	d8 d1		 fcom	 ST(1)
  01b59	df e0		 fnstsw	 ax
  01b5b	dd d9		 fstp	 ST(1)
  01b5d	f6 c4 41	 test	 ah, 65			; 00000041H
  01b60	75 08		 jne	 SHORT $LN1029@Attack

; 1255 : 			{
; 1256 : 				lpObj->Life = 0.0f;

  01b62	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 1257 : 			}
; 1258 : 			else

  01b68	eb 1c		 jmp	 SHORT $LN468@Attack
$LN1029@Attack:

; 1259 : 			{
; 1260 : 				AttackDamage = AttackDamage * 115 / 100;

  01b6a	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01b6d	dd d8		 fstp	 ST(0)
  01b6f	6b c9 73	 imul	 ecx, 115		; 00000073H
  01b72	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01b77	f7 e9		 imul	 ecx
  01b79	c1 fa 05	 sar	 edx, 5
  01b7c	8b ca		 mov	 ecx, edx
  01b7e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01b81	03 ca		 add	 ecx, edx
  01b83	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN468@Attack:

; 1261 : 			}
; 1262 : 
; 1263 : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  01b86	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  01b8c	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  01b92	52		 push	 edx
  01b93	6a 00		 push	 0
  01b95	68 ff 00 00 00	 push	 255			; 000000ffH
  01b9a	e8 00 00 00 00	 call	 __ftol2_sse
  01b9f	50		 push	 eax
  01ba0	8b 06		 mov	 eax, DWORD PTR [esi]
  01ba2	50		 push	 eax
  01ba3	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01ba8	83 c4 14	 add	 esp, 20			; 00000014H
$LN955@Attack:

; 1264 : 		}
; 1265 : 
; 1266 : 		if ( gObjDenorantSprite(lpTargetObj ) )

  01bab	57		 push	 edi
  01bac	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  01bb1	83 c4 04	 add	 esp, 4
  01bb4	85 c0		 test	 eax, eax
  01bb6	0f 84 8a 00 00
	00		 je	 $LN976@Attack

; 1267 : 		{
; 1268 : 			CItem * Dinorant = &lpTargetObj->pInventory[8];

  01bbc	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  01bc2	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H

; 1269 : 
; 1270 : 			int dinorantdecdamage = 90 - Dinorant->IsDinorantReduceAttackDamaege();

  01bc8	e8 00 00 00 00	 call	 ?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ ; CItem::IsDinorantReduceAttackDamaege

; 1271 : 			lpObj->Life -= 1.0f;

  01bcd	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  01bd3	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  01bd9	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  01bde	2b c8		 sub	 ecx, eax
  01be0	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR tv5929[ebp]
  01be6	d9 85 d8 fe ff
	ff		 fld	 DWORD PTR tv5929[ebp]
  01bec	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]

; 1272 : 
; 1273 : 			if ( lpObj->Life < 0.0f )

  01bf2	d9 ee		 fldz
  01bf4	d8 d1		 fcom	 ST(1)
  01bf6	df e0		 fnstsw	 ax
  01bf8	dd d9		 fstp	 ST(1)
  01bfa	f6 c4 41	 test	 ah, 65			; 00000041H
  01bfd	75 08		 jne	 SHORT $LN1032@Attack

; 1274 : 			{
; 1275 : 				lpObj->Life = 0.0f;

  01bff	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 1276 : 			}
; 1277 : 			else

  01c05	eb 1a		 jmp	 SHORT $LN465@Attack
$LN1032@Attack:

; 1278 : 			{
; 1279 : 				AttackDamage = AttackDamage * dinorantdecdamage / 100;

  01c07	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01c0b	dd d8		 fstp	 ST(0)
  01c0d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01c12	f7 e9		 imul	 ecx
  01c14	c1 fa 05	 sar	 edx, 5
  01c17	8b ca		 mov	 ecx, edx
  01c19	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01c1c	03 ca		 add	 ecx, edx
  01c1e	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN465@Attack:

; 1280 : 			}
; 1281 : 
; 1282 : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  01c21	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  01c27	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  01c2d	52		 push	 edx
  01c2e	6a 00		 push	 0
  01c30	68 ff 00 00 00	 push	 255			; 000000ffH
  01c35	e8 00 00 00 00	 call	 __ftol2_sse
  01c3a	50		 push	 eax
  01c3b	8b 06		 mov	 eax, DWORD PTR [esi]
  01c3d	50		 push	 eax
  01c3e	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01c43	83 c4 14	 add	 esp, 20			; 00000014H
$LN976@Attack:

; 1283 : 		}
; 1284 : 
; 1285 : 		if ( gObjDarkHorse(lpTargetObj ) )

  01c46	57		 push	 edi
  01c47	e8 00 00 00 00	 call	 ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDarkHorse
  01c4c	83 c4 04	 add	 esp, 4
  01c4f	85 c0		 test	 eax, eax
  01c51	0f 84 bc 00 00
	00		 je	 $LN464@Attack

; 1286 : 		{
; 1287 : 			CItem * Darkhorse = &lpTargetObj->pInventory[8];

  01c57	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]

; 1288 : 
; 1289 : 			int decdamage = 100 - ((Darkhorse->m_PetItem_Level + 30) / 2 );

  01c5d	8b 81 5c 07 00
	00		 mov	 eax, DWORD PTR [ecx+1884]
  01c63	83 c0 1e	 add	 eax, 30			; 0000001eH
  01c66	99		 cdq
  01c67	2b c2		 sub	 eax, edx
  01c69	d1 f8		 sar	 eax, 1
  01c6b	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  01c70	2b d0		 sub	 edx, eax

; 1290 : #ifdef _WINGS_DAMAGE_
; 1291 : 			gWingsDamage.SetCharHorseAttack(lpTargetObj->m_Index, Darkhorse->m_Type, Darkhorse->m_PetItem_Level, decdamage);

  01c72	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _decdamage$222676[ebp]
  01c78	50		 push	 eax
  01c79	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _decdamage$222676[ebp], edx
  01c7f	8b 91 5c 07 00
	00		 mov	 edx, DWORD PTR [ecx+1884]
  01c85	0f bf 81 a6 06
	00 00		 movsx	 eax, WORD PTR [ecx+1702]
  01c8c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  01c8e	52		 push	 edx
  01c8f	50		 push	 eax
  01c90	51		 push	 ecx
  01c91	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  01c96	e8 00 00 00 00	 call	 ?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z ; cWingsDamage::SetCharHorseAttack

; 1292 : #endif
; 1293 : 			lpTargetObj->Life -= 1.0f;

  01c9b	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  01ca1	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  01ca7	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv6155[ebp]
  01cad	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv6155[ebp]
  01cb3	d9 97 fc 00 00
	00		 fst	 DWORD PTR [edi+252]

; 1294 : 
; 1295 : 			if ( lpTargetObj->Life < 0.0f )

  01cb9	d9 ee		 fldz
  01cbb	d8 d1		 fcom	 ST(1)
  01cbd	df e0		 fnstsw	 ax
  01cbf	dd d9		 fstp	 ST(1)
  01cc1	f6 c4 41	 test	 ah, 65			; 00000041H
  01cc4	75 08		 jne	 SHORT $LN1035@Attack

; 1296 : 			{
; 1297 : 				lpTargetObj->Life = 0.0f;

  01cc6	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]

; 1298 : 			}
; 1299 : 			else

  01ccc	eb 20		 jmp	 SHORT $LN462@Attack
$LN1035@Attack:

; 1300 : 			{
; 1301 : 				AttackDamage = AttackDamage * decdamage / 100;

  01cce	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _decdamage$222676[ebp]
  01cd4	dd d8		 fstp	 ST(0)
  01cd6	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01cda	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01cdf	f7 e9		 imul	 ecx
  01ce1	c1 fa 05	 sar	 edx, 5
  01ce4	8b c2		 mov	 eax, edx
  01ce6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01ce9	03 c2		 add	 eax, edx
  01ceb	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN462@Attack:

; 1302 : 			}
; 1303 : 
; 1304 : 			GCReFillSend(lpTargetObj->m_Index, lpTargetObj->Life, 0xFF, 0, lpTargetObj->iShield);

  01cee	8b 8f 54 01 00
	00		 mov	 ecx, DWORD PTR [edi+340]
  01cf4	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  01cfa	51		 push	 ecx
  01cfb	6a 00		 push	 0
  01cfd	68 ff 00 00 00	 push	 255			; 000000ffH
  01d02	e8 00 00 00 00	 call	 __ftol2_sse
  01d07	8b 17		 mov	 edx, DWORD PTR [edi]
  01d09	50		 push	 eax
  01d0a	52		 push	 edx
  01d0b	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  01d10	83 c4 14	 add	 esp, 20			; 00000014H
$LN464@Attack:

; 1305 : 		}
; 1306 : 
; 1307 : 		if ( lpTargetObj->Live )

  01d13	80 7f 6a 00	 cmp	 BYTE PTR [edi+106], 0
  01d17	0f 84 c2 23 00
	00		 je	 $LN877@Attack

; 1308 : 		{
; 1309 : 
; 1310 : #ifdef DEBUG_CODE
; 1311 : 			LogAddC(3,"skill:%d",skill);
; 1312 : #endif
; 1313 : 
; 1314 : 			switch ( skill )

  01d1d	8b 9d d0 fe ff
	ff		 mov	 ebx, DWORD PTR _skill$[ebp]
  01d23	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4004000000000000
  01d29	8d 43 ed	 lea	 eax, DWORD PTR [ebx-19]
  01d2c	3d fb 00 00 00	 cmp	 eax, 251		; 000000fbH
  01d31	0f 87 4b 01 00
	00		 ja	 $LN1040@Attack
  01d37	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN852@Attack[eax]
  01d3e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1246@Attack[eax*4]
$LN1070@Attack:

; 1315 : 			{
; 1316 : 				case 19:
; 1317 : 				case 20:
; 1318 : 				case 21:
; 1319 : 				case 22:
; 1320 : 				case 23:
; 1321 : 				case 41:
; 1322 : 				case 42:
; 1323 : 				case 43:
; 1324 : 				case 44:
; 1325 : 				case 49:
; 1326 : 				case 55:
; 1327 : 				case 57:
; 1328 : 					if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA )

  01d45	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  01d4c	dd d8		 fstp	 ST(0)
  01d4e	83 f8 04	 cmp	 eax, 4
  01d51	0f 84 c9 00 00
	00		 je	 $LN456@Attack

; 1315 : 			{
; 1316 : 				case 19:
; 1317 : 				case 20:
; 1318 : 				case 21:
; 1319 : 				case 22:
; 1320 : 				case 23:
; 1321 : 				case 41:
; 1322 : 				case 42:
; 1323 : 				case 43:
; 1324 : 				case 44:
; 1325 : 				case 49:
; 1326 : 				case 55:
; 1327 : 				case 57:
; 1328 : 					if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA )

  01d57	83 f8 03	 cmp	 eax, 3
  01d5a	0f 84 c0 00 00
	00		 je	 $LN456@Attack

; 1331 : 					}
; 1332 : #ifdef MONK
; 1333 : 					else if( lpObj->Class == CLASS_MONK )

  01d60	83 f8 06	 cmp	 eax, 6
  01d63	75 0e		 jne	 SHORT $LN454@Attack

; 1334 : 					{
; 1335 : 						AttackDamage *= 2;

  01d65	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01d68	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  01d6b	89 55 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edx

; 1336 : 					}
; 1337 : #endif
; 1338 : 					else

  01d6e	e9 11 01 00 00	 jmp	 $LN459@Attack
$LN454@Attack:

; 1339 : 					{
; 1340 : 						if(g_ZtLicense.CheckUser(eZtUB::Local) || g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  01d73	6a 00		 push	 0
  01d75	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01d7a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01d7f	84 c0		 test	 al, al
  01d81	75 57		 jne	 SHORT $LN451@Attack
  01d83	6a 30		 push	 48			; 00000030H
  01d85	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01d8a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01d8f	84 c0		 test	 al, al
  01d91	75 47		 jne	 SHORT $LN451@Attack
  01d93	6a 31		 push	 49			; 00000031H
  01d95	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01d9a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01d9f	84 c0		 test	 al, al
  01da1	75 37		 jne	 SHORT $LN451@Attack
$LN1207@Attack:

; 1355 : 						{
; 1356 : 							AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;

  01da3	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01da8	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  01dae	c1 fa 02	 sar	 edx, 2
  01db1	8b c2		 mov	 eax, edx
  01db3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01db6	8d 8c 02 c8 00
	00 00		 lea	 ecx, DWORD PTR [edx+eax+200]
  01dbd	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01dc1	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01dc6	f7 e9		 imul	 ecx
  01dc8	c1 fa 05	 sar	 edx, 5
  01dcb	8b ca		 mov	 ecx, edx
  01dcd	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01dd0	03 ca		 add	 ecx, edx
  01dd2	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  01dd5	e9 aa 00 00 00	 jmp	 $LN459@Attack
$LN451@Attack:

; 1341 : 						{
; 1342 : 							int iSkillDMGPercent = ( 200 + ( Energy / 10 ) );
; 1343 : 
; 1344 : 							if(ZtConfig.Character.DKSkillDMGPercentMax > 0)

  01dda	8b 0d b8 02 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+696
  01de0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01de5	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  01deb	c1 fa 02	 sar	 edx, 2
  01dee	8b c2		 mov	 eax, edx
  01df0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01df3	8d 84 02 c8 00
	00 00		 lea	 eax, DWORD PTR [edx+eax+200]
  01dfa	85 c9		 test	 ecx, ecx
  01dfc	7e 06		 jle	 SHORT $LN449@Attack

; 1345 : 							{
; 1346 : 								if(iSkillDMGPercent > ZtConfig.Character.DKSkillDMGPercentMax)

  01dfe	3b c1		 cmp	 eax, ecx
  01e00	7e 02		 jle	 SHORT $LN449@Attack

; 1347 : 								{
; 1348 : 									iSkillDMGPercent = ZtConfig.Character.DKSkillDMGPercentMax;

  01e02	8b c1		 mov	 eax, ecx
$LN449@Attack:

; 1349 : 								}
; 1350 : 							}
; 1351 : 
; 1352 : 							AttackDamage = ( AttackDamage * iSkillDMGPercent ) / 100;

  01e04	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  01e08	8b c8		 mov	 ecx, eax
  01e0a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01e0f	f7 e9		 imul	 ecx
  01e11	c1 fa 05	 sar	 edx, 5
  01e14	8b ca		 mov	 ecx, edx
  01e16	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01e19	03 ca		 add	 ecx, edx
  01e1b	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 1353 : 						}
; 1354 : 						else

  01e1e	eb 64		 jmp	 SHORT $LN459@Attack
$LN456@Attack:

; 1329 : 					{
; 1330 : 						AttackDamage *= 2;

  01e20	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  01e23	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  01e26	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1357 : 						}
; 1358 : 						
; 1359 : 					}
; 1360 : 					break;

  01e29	eb 59		 jmp	 SHORT $LN459@Attack
$LN1069@Attack:

; 1361 : 
; 1362 : 				case 47:
; 1363 : 					if ( lpObj->pInventory[8].m_Type == ITEMGET(13,3) ||
; 1364 : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,2) ||
; 1365 : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,37) )

  01e2b	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  01e31	dd d8		 fstp	 ST(0)
  01e33	0f b7 81 a6 06
	00 00		 movzx	 eax, WORD PTR [ecx+1702]
  01e3a	ba 03 1a 00 00	 mov	 edx, 6659		; 00001a03H
  01e3f	66 3b c2	 cmp	 ax, dx
  01e42	74 14		 je	 SHORT $LN445@Attack

; 1361 : 
; 1362 : 				case 47:
; 1363 : 					if ( lpObj->pInventory[8].m_Type == ITEMGET(13,3) ||
; 1364 : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,2) ||
; 1365 : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,37) )

  01e44	b9 02 1a 00 00	 mov	 ecx, 6658		; 00001a02H
  01e49	66 3b c1	 cmp	 ax, cx
  01e4c	74 0a		 je	 SHORT $LN445@Attack
  01e4e	ba 25 1a 00 00	 mov	 edx, 6693		; 00001a25H
  01e53	66 3b c2	 cmp	 ax, dx
  01e56	75 2c		 jne	 SHORT $LN459@Attack
$LN445@Attack:

; 1366 : 					{
; 1367 : #ifdef FENRIR_CONFIG
; 1368 : #endif
; 1369 : 						if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA )

  01e58	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  01e5f	83 f8 04	 cmp	 eax, 4
  01e62	74 bc		 je	 SHORT $LN456@Attack
  01e64	83 f8 03	 cmp	 eax, 3
  01e67	74 b7		 je	 SHORT $LN456@Attack

; 1370 : 						{
; 1371 : 							AttackDamage *= 2;
; 1372 : 						}
; 1373 : 						else
; 1374 : 						{
; 1375 : 							AttackDamage = ( AttackDamage * ( Energy / 10 + 200 )  ) / 100;

  01e69	e9 35 ff ff ff	 jmp	 $LN1207@Attack
$LN1068@Attack:

; 1376 : 						}
; 1377 : 					}
; 1378 : 					break;
; 1379 : 
; 1380 : 				case 56:
; 1381 : 					AttackDamage *= 2;

  01e6e	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01e71	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  01e74	89 55 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edx

; 1382 : 					break;

  01e77	eb 09		 jmp	 SHORT $LN1040@Attack
$LN1067@Attack:

; 1383 : 
; 1384 : 				case 46:
; 1385 : 				case 51:
; 1386 : 				case 52:
; 1387 : 					AttackDamage *= 2;

  01e79	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01e7c	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
$LN1206@Attack:

; 2007 : 					}
; 2008 : 					break;
; 2009 : 				case 238: //Chaotic Diseier (Season4) add-on
; 2010 : 					{						
; 2011 : 						AttackDamage = ( AttackDamage * ( (Energy/25) + 200 ) ) / 100;

  01e7f	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN1040@Attack:

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  01e82	dd d8		 fstp	 ST(0)
$LN459@Attack:

; 2106 : #else
; 2107 : 					AttackDamage = AttackDamage*( 200 + (Vitality/10) ) / 100.0f;
; 2108 : #endif
; 2109 : 					break;
; 2110 : 
; 2111 : 			}
; 2112 : 
; 2113 : 			if( g_MasterSkillSystem.CheckRequireStatus(skill) )

  01e84	53		 push	 ebx
  01e85	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  01e8a	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  01e8f	85 c0		 test	 eax, eax
  01e91	0f 84 3b 15 00
	00		 je	 $LN315@Attack

; 2114 : 			{
; 2115 : 				float iSkillValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  01e97	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  01e9d	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  01ea1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  01ea4	52		 push	 edx
  01ea5	50		 push	 eax
  01ea6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  01eab	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  01eb0	50		 push	 eax
  01eb1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  01eb6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2116 : 				float fPrevValue = 0;
; 2117 : 
; 2118 : 				int iMLSBase = g_MasterSkillSystem.GetBaseMasterLevelSkill(skill);

  01ebb	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _skill$[ebp]
  01ec1	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _iSkillValue$222853[ebp]
  01ec7	51		 push	 ecx
  01ec8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  01ecd	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 2119 : 
; 2120 : 				int iMasterSkillDMGPercentDK = ( 200 + ( Energy / 10 ) );
; 2121 : 				int iMasterSkillDMGPercentDL = ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) );

  01ed2	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  01ed9	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iMLSBase$222855[ebp], eax
  01edf	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01ee4	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  01eea	c1 fa 02	 sar	 edx, 2
  01eed	8b c2		 mov	 eax, edx
  01eef	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01ef2	03 c2		 add	 eax, edx
  01ef4	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  01efb	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv6174[ebp], eax
  01f01	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  01f06	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp], eax
  01f0c	03 ca		 add	 ecx, edx
  01f0e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01f13	f7 e9		 imul	 ecx
  01f15	c1 fa 03	 sar	 edx, 3
  01f18	8b c2		 mov	 eax, edx
  01f1a	c1 e8 1f	 shr	 eax, 31			; 0000001fH

; 2122 : 
; 2123 : 				if(g_ZtLicense.CheckUser(eZtUB::Local) || g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  01f1d	6a 00		 push	 0
  01f1f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01f24	8d 9c 02 c8 00
	00 00		 lea	 ebx, DWORD PTR [edx+eax+200]
  01f2b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01f30	84 c0		 test	 al, al
  01f32	75 20		 jne	 SHORT $LN321@Attack
  01f34	6a 30		 push	 48			; 00000030H
  01f36	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01f3b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01f40	84 c0		 test	 al, al
  01f42	75 10		 jne	 SHORT $LN321@Attack
  01f44	6a 31		 push	 49			; 00000031H
  01f46	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01f4b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01f50	84 c0		 test	 al, al
  01f52	74 26		 je	 SHORT $LN317@Attack
$LN321@Attack:

; 2124 : 				{
; 2125 : 					if(ZtConfig.Character.DKSkillDMGPercentMax > 0)

  01f54	a1 b8 02 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+696
  01f59	85 c0		 test	 eax, eax
  01f5b	7e 0e		 jle	 SHORT $LN319@Attack

; 2126 : 					{
; 2127 : 						if(iMasterSkillDMGPercentDK > ZtConfig.Character.DKSkillDMGPercentMax)

  01f5d	39 85 d4 fe ff
	ff		 cmp	 DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp], eax
  01f63	7e 06		 jle	 SHORT $LN319@Attack

; 2128 : 						{
; 2129 : 							iMasterSkillDMGPercentDK = ZtConfig.Character.DKSkillDMGPercentMax;

  01f65	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp], eax
$LN319@Attack:

; 2130 : 						}
; 2131 : 					}					
; 2132 : 
; 2133 : 					if(ZtConfig.Character.DLSkillDMGPercentMax > 0)

  01f6b	a1 bc 02 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+700
  01f70	85 c0		 test	 eax, eax
  01f72	7e 06		 jle	 SHORT $LN317@Attack

; 2134 : 					{
; 2135 : 						if(iMasterSkillDMGPercentDL > ZtConfig.Character.DLSkillDMGPercentMax)

  01f74	3b d8		 cmp	 ebx, eax
  01f76	7e 02		 jle	 SHORT $LN317@Attack

; 2136 : 						{
; 2137 : 							iMasterSkillDMGPercentDL = ZtConfig.Character.DLSkillDMGPercentMax;

  01f78	8b d8		 mov	 ebx, eax
$LN317@Attack:

; 2138 : 						}
; 2139 : 					}
; 2140 : 				}
; 2141 : 							
; 2142 : 				switch( iMLSBase )

  01f7a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iMLSBase$222855[ebp]
  01f80	05 ba fe ff ff	 add	 eax, -326		; fffffebaH
  01f85	3d ea 00 00 00	 cmp	 eax, 234		; 000000eaH
  01f8a	0f 87 42 14 00
	00		 ja	 $LN315@Attack
  01f90	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN853@Attack[eax]
  01f97	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1247@Attack[ecx*4]
$LN1066@Attack:

; 1388 : 					break;
; 1389 : 
; 1390 : 				case 60:
; 1391 : 				case 61:
; 1392 : 				case 62:
; 1393 : 				case 65:
; 1394 : 				case 74:
; 1395 : 				case 78:
; 1396 : 					{
; 1397 : 						if(g_ZtLicense.CheckUser(eZtUB::Local) || g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  01f9e	6a 00		 push	 0

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  01fa0	dd d8		 fstp	 ST(0)
  01fa2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01fa7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01fac	84 c0		 test	 al, al
  01fae	75 48		 jne	 SHORT $LN437@Attack

; 1388 : 					break;
; 1389 : 
; 1390 : 				case 60:
; 1391 : 				case 61:
; 1392 : 				case 62:
; 1393 : 				case 65:
; 1394 : 				case 74:
; 1395 : 				case 78:
; 1396 : 					{
; 1397 : 						if(g_ZtLicense.CheckUser(eZtUB::Local) || g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  01fb0	6a 30		 push	 48			; 00000030H
  01fb2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01fb7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01fbc	84 c0		 test	 al, al
  01fbe	75 38		 jne	 SHORT $LN437@Attack
  01fc0	6a 31		 push	 49			; 00000031H
  01fc2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  01fc7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  01fcc	84 c0		 test	 al, al
  01fce	75 28		 jne	 SHORT $LN437@Attack

; 1410 : 						}
; 1411 : 						else
; 1412 : 						{
; 1413 : 							AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;

  01fd0	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  01fd7	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  01fde	03 ca		 add	 ecx, edx
  01fe0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01fe5	f7 e9		 imul	 ecx
  01fe7	c1 fa 03	 sar	 edx, 3
  01fea	8b c2		 mov	 eax, edx
  01fec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01fef	8d 94 02 c8 00
	00 00		 lea	 edx, DWORD PTR [edx+eax+200]
  01ff6	eb 35		 jmp	 SHORT $LN435@Attack
$LN437@Attack:

; 1398 : 						{
; 1399 : 							int iSkillDMGPercentDL = ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) );

  01ff8	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  01fff	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  02006	03 ca		 add	 ecx, edx
  02008	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0200d	f7 e9		 imul	 ecx
  0200f	c1 fa 03	 sar	 edx, 3
  02012	8b c2		 mov	 eax, edx
  02014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02017	8d 94 02 c8 00
	00 00		 lea	 edx, DWORD PTR [edx+eax+200]

; 1400 : 
; 1401 : 							if(ZtConfig.Character.DLSkillDMGPercentMax > 0)

  0201e	a1 bc 02 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+700
  02023	85 c0		 test	 eax, eax
  02025	7e 06		 jle	 SHORT $LN435@Attack

; 1402 : 							{
; 1403 : 								if(iSkillDMGPercentDL > ZtConfig.Character.DLSkillDMGPercentMax)

  02027	3b d0		 cmp	 edx, eax
  02029	7e 02		 jle	 SHORT $LN435@Attack

; 1404 : 								{
; 1405 : 									iSkillDMGPercentDL = ZtConfig.Character.DLSkillDMGPercentMax;

  0202b	8b d0		 mov	 edx, eax
$LN435@Attack:

; 1406 : 								}
; 1407 : 							}
; 1408 : 
; 1409 : 							AttackDamage = ( AttackDamage * iSkillDMGPercentDL ) / 100;

  0202d	0f af 55 1c	 imul	 edx, DWORD PTR _AttackDamage$[ebp]
  02031	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02036	f7 ea		 imul	 edx
  02038	c1 fa 05	 sar	 edx, 5
  0203b	8b ca		 mov	 ecx, edx
  0203d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02040	03 ca		 add	 ecx, edx
  02042	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 1414 : 						}
; 1415 : 
; 1416 : 					}
; 1417 : 					break;

  02045	e9 3a fe ff ff	 jmp	 $LN459@Attack
$LN1065@Attack:

; 1418 : 
; 1419 : 				case 76:
; 1420 : 					{
; 1421 : 						int iDamageInc = lpObj->Level - 300;
; 1422 : 
; 1423 : 						iDamageInc += lpObj->MLevel;

  0204a	0f bf 96 d0 00
	00 00		 movsx	 edx, WORD PTR [esi+208]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02051	dd d8		 fstp	 ST(0)
  02053	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  0205a	8d 8c 02 d4 fe
	ff ff		 lea	 ecx, DWORD PTR [edx+eax-300]
  02061	85 c9		 test	 ecx, ecx
  02063	79 02		 jns	 SHORT $LN432@Attack

; 1424 : 
; 1425 : 						if ( iDamageInc < 0 )
; 1426 : 						{
; 1427 : 							iDamageInc = 0;

  02065	33 c9		 xor	 ecx, ecx
$LN432@Attack:

; 1428 : 						}
; 1429 : 
; 1430 : 						iDamageInc /= 5;

  02067	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0206c	f7 e9		 imul	 ecx
  0206e	d1 fa		 sar	 edx, 1
  02070	8b ca		 mov	 ecx, edx
  02072	c1 e9 1f	 shr	 ecx, 31			; 0000001fH

; 1431 : 						AttackDamage = ( AttackDamage * ( iDamageInc + 200 ) ) / 100;

  02075	8d 8c 0a c8 00
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+200]
  0207c	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02080	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02085	f7 e9		 imul	 ecx
  02087	c1 fa 05	 sar	 edx, 5
  0208a	8b c2		 mov	 eax, edx
  0208c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0208f	03 c2		 add	 eax, edx
  02091	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1432 : 					}
; 1433 : 					break;

  02094	e9 eb fd ff ff	 jmp	 $LN459@Attack
$LN1064@Attack:

; 1434 : 				case 216:
; 1435 : 					gObjUseSkill.SkillEletrictSurgeProc(lpObj, lpTargetObj, 216, AttackDamage, 1, 50);

  02099	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  0209c	dd d8		 fstp	 ST(0)
  0209e	6a 32		 push	 50			; 00000032H
  020a0	6a 01		 push	 1
  020a2	51		 push	 ecx
  020a3	68 d8 00 00 00	 push	 216			; 000000d8H
  020a8	57		 push	 edi
  020a9	56		 push	 esi
  020aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  020af	e8 00 00 00 00	 call	 ?SkillEletrictSurgeProc@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0HHHH@Z ; CObjUseSkill::SkillEletrictSurgeProc
  020b4	e9 cb fd ff ff	 jmp	 $LN459@Attack
$LN430@Attack:

; 1436 : 					break;
; 1437 : 				case 214: //Drain Life
; 1438 : #if(S5E4)
; 1439 : 				case 550:
; 1440 : 				case 551:
; 1441 : 				case 552:
; 1442 : 				case 553:
; 1443 : 				case 554:
; 1444 : #endif
; 1445 : 					{
; 1446 : 						int iRecvLife = 0;
; 1447 : 
; 1448 : 						if(lpTargetObj->Type == OBJ_MONSTER)

  020b9	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  020bd	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iRecvLife$222716[ebp], 0
  020c7	83 f8 02	 cmp	 eax, 2
  020ca	75 4a		 jne	 SHORT $LN1074@Attack

; 1449 : 						{
; 1450 : 							iRecvLife = (int)((lpObj->Energy / 15) + (lpTargetObj->Level / 2.5));

  020cc	0f bf 97 be 00
	00 00		 movsx	 edx, WORD PTR [edi+190]
  020d3	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  020da	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv5766[ebp], edx
  020e0	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  020e5	f7 e9		 imul	 ecx
  020e7	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5766[ebp]
  020ed	de f1		 fdivrp	 ST(1), ST(0)
  020ef	03 d1		 add	 edx, ecx
  020f1	c1 fa 03	 sar	 edx, 3
  020f4	8b c2		 mov	 eax, edx
  020f6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  020f9	03 c2		 add	 eax, edx
  020fb	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv5761[ebp], eax
  02101	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5761[ebp]
  02107	de c1		 faddp	 ST(1), ST(0)
  02109	e8 00 00 00 00	 call	 __ftol2_sse
  0210e	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _iRecvLife$222716[ebp], eax
  02114	eb 4e		 jmp	 SHORT $LN427@Attack
$LN1074@Attack:

; 1436 : 					break;
; 1437 : 				case 214: //Drain Life
; 1438 : #if(S5E4)
; 1439 : 				case 550:
; 1440 : 				case 551:
; 1441 : 				case 552:
; 1442 : 				case 553:
; 1443 : 				case 554:
; 1444 : #endif
; 1445 : 					{
; 1446 : 						int iRecvLife = 0;
; 1447 : 
; 1448 : 						if(lpTargetObj->Type == OBJ_MONSTER)

  02116	dd d8		 fstp	 ST(0)

; 1451 : 						}
; 1452 : 						else if(lpTargetObj->Type == OBJ_USER)

  02118	83 f8 01	 cmp	 eax, 1
  0211b	75 47		 jne	 SHORT $LN427@Attack

; 1453 : 						{
; 1454 : 							iRecvLife = ((AttackDamage * 10) / 100) + (lpObj->Energy / 23);

  0211d	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  02124	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  02129	f7 e9		 imul	 ecx
  0212b	03 d1		 add	 edx, ecx
  0212d	c1 fa 04	 sar	 edx, 4
  02130	8b c2		 mov	 eax, edx
  02132	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02135	03 c2		 add	 eax, edx
  02137	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv1701[ebp], eax
  0213d	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  02140	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  02143	03 c9		 add	 ecx, ecx
  02145	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0214a	f7 e9		 imul	 ecx
  0214c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv1701[ebp]
  02152	c1 fa 05	 sar	 edx, 5
  02155	8b ca		 mov	 ecx, edx
  02157	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0215a	03 c2		 add	 eax, edx
  0215c	03 c8		 add	 ecx, eax
  0215e	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _iRecvLife$222716[ebp], ecx
$LN427@Attack:

; 1455 : 						}
; 1456 : 
; 1457 : 						int CurrentLife = (int)(iRecvLife + lpObj->Life);

  02164	db 85 d8 fe ff
	ff		 fild	 DWORD PTR _iRecvLife$222716[ebp]
  0216a	d8 86 fc 00 00
	00		 fadd	 DWORD PTR [esi+252]
  02170	e8 00 00 00 00	 call	 __ftol2_sse
  02175	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _CurrentLife$222721[ebp], eax

; 1458 : 
; 1459 : 						if(CurrentLife > (lpObj->AddLife + lpObj->MaxLife))

  0217b	db 85 e0 fe ff
	ff		 fild	 DWORD PTR _CurrentLife$222721[ebp]
  02181	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv6220[ebp]
  02187	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  0218d	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  02193	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv6220[ebp]
  02199	d8 d1		 fcom	 ST(1)
  0219b	df e0		 fnstsw	 ax
  0219d	f6 c4 41	 test	 ah, 65			; 00000041H
  021a0	75 0a		 jne	 SHORT $LN1077@Attack
  021a2	dd d8		 fstp	 ST(0)

; 1460 : 						{
; 1461 : 							lpObj->Life = lpObj->AddLife + lpObj->MaxLife;

  021a4	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 1462 : 						}
; 1463 : 						else

  021aa	eb 08		 jmp	 SHORT $LN425@Attack
$LN1077@Attack:

; 1458 : 
; 1459 : 						if(CurrentLife > (lpObj->AddLife + lpObj->MaxLife))

  021ac	dd d9		 fstp	 ST(1)

; 1464 : 						{
; 1465 : 							lpObj->Life = (float)CurrentLife;

  021ae	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
$LN425@Attack:

; 1466 : 						}
; 1467 : 
; 1468 : 						GCReFillSend(lpObj->m_Index,lpObj->Life, -1, 0, lpObj->iShield);

  021b4	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  021ba	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  021c0	52		 push	 edx
  021c1	6a 00		 push	 0
  021c3	68 ff 00 00 00	 push	 255			; 000000ffH
  021c8	e8 00 00 00 00	 call	 __ftol2_sse
  021cd	50		 push	 eax
  021ce	8b 06		 mov	 eax, DWORD PTR [esi]
  021d0	50		 push	 eax
  021d1	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  021d6	83 c4 14	 add	 esp, 20			; 00000014H

; 1469 : 					}
; 1470 : 					break;

  021d9	e9 a6 fc ff ff	 jmp	 $LN459@Attack
$LN1063@Attack:

; 1471 : 				case 215: //Chain Lightning Skill
; 1472 : #if(S5E4)
; 1473 : 				case 540:
; 1474 : 				case 541:
; 1475 : 				case 542:
; 1476 : 				case 543:
; 1477 : 				case 544:
; 1478 : #endif
; 1479 : 					{
; 1480 : 						switch(bCombo) //LOOL!!

  021de	8b 45 20	 mov	 eax, DWORD PTR _bCombo$[ebp]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  021e1	dd d8		 fstp	 ST(0)
  021e3	48		 dec	 eax
  021e4	74 4a		 je	 SHORT $LN421@Attack

; 1471 : 				case 215: //Chain Lightning Skill
; 1472 : #if(S5E4)
; 1473 : 				case 540:
; 1474 : 				case 541:
; 1475 : 				case 542:
; 1476 : 				case 543:
; 1477 : 				case 544:
; 1478 : #endif
; 1479 : 					{
; 1480 : 						switch(bCombo) //LOOL!!

  021e6	48		 dec	 eax
  021e7	74 2d		 je	 SHORT $LN420@Attack
  021e9	48		 dec	 eax

; 1489 : 							break;
; 1490 : 						default:
; 1491 : 							return FALSE;

  021ea	0f 85 3f e2 ff
	ff		 jne	 $LN1230@Attack

; 1486 : 							break;
; 1487 : 						case 3:
; 1488 : 							AttackDamage = AttackDamage * 50/ 100;

  021f0	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  021f3	6b c9 32	 imul	 ecx, 50			; 00000032H
  021f6	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  021fb	f7 e9		 imul	 ecx
  021fd	c1 fa 05	 sar	 edx, 5
  02200	8b ca		 mov	 ecx, edx
  02202	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02205	03 ca		 add	 ecx, edx
  02207	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 1492 : 						}
; 1493 : 						bCombo = 0; 

  0220a	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _bCombo$[ebp], 0

; 1494 : 					}
; 1495 : 					break;

  02211	e9 6e fc ff ff	 jmp	 $LN459@Attack
$LN420@Attack:

; 1481 : 						{
; 1482 : 						case 1:
; 1483 : 							break;
; 1484 : 						case 2:
; 1485 : 							AttackDamage = AttackDamage * 70/ 100;

  02216	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  02219	6b c9 46	 imul	 ecx, 70			; 00000046H
  0221c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02221	f7 e9		 imul	 ecx
  02223	c1 fa 05	 sar	 edx, 5
  02226	8b c2		 mov	 eax, edx
  02228	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0222b	03 c2		 add	 eax, edx
  0222d	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN421@Attack:

; 1492 : 						}
; 1493 : 						bCombo = 0; 

  02230	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _bCombo$[ebp], 0

; 1494 : 					}
; 1495 : 					break;

  02237	e9 48 fc ff ff	 jmp	 $LN459@Attack
$LN1062@Attack:

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  0223c	dd d8		 fstp	 ST(0)
  0223e	d9 ee		 fldz
  02240	d8 9e dc 26 00
	00		 fcomp	 DWORD PTR [esi+9948]
  02246	df e0		 fnstsw	 ax
  02248	f6 c4 05	 test	 ah, 5
  0224b	7a 1c		 jp	 SHORT $LN416@Attack

; 1496 : 
; 1497 : 				case 223: //Book of Sahamutt
; 1498 : 					{
; 1499 : 						int value;
; 1500 : 
; 1501 : 						if( lpObj->m_MPSkillOpt.MpsFireTomeMastery > 0 )
; 1502 : 						{
; 1503 : 							value = AttackDamage * (60.0f+lpObj->m_MPSkillOpt.MpsFireTomeMastery) / 100.0f;

  0224d	d9 86 dc 26 00
	00		 fld	 DWORD PTR [esi+9948]
  02253	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@404e000000000000
  02259	da 4d 1c	 fimul	 DWORD PTR _AttackDamage$[ebp]
  0225c	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02262	e8 00 00 00 00	 call	 __ftol2_sse

; 1504 : 						}
; 1505 : 						else

  02267	eb 1f		 jmp	 SHORT $LN415@Attack
$LN416@Attack:

; 1506 : 						{
; 1507 : 							value = AttackDamage * 60 / 100;

  02269	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0226c	8b c8		 mov	 ecx, eax
  0226e	c1 e1 04	 shl	 ecx, 4
  02271	2b c8		 sub	 ecx, eax
  02273	03 c9		 add	 ecx, ecx
  02275	03 c9		 add	 ecx, ecx
  02277	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0227c	f7 e9		 imul	 ecx
  0227e	c1 fa 05	 sar	 edx, 5
  02281	8b c2		 mov	 eax, edx
  02283	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02286	03 c2		 add	 eax, edx
$LN415@Attack:

; 1508 : 						}
; 1509 : 						
; 1510 : 						gObjApplyBuffEffectDuration(lpTargetObj, AT_EXPLOSION, 18, value, 0, 0, 5);

  02288	6a 05		 push	 5
  0228a	6a 00		 push	 0
  0228c	6a 00		 push	 0
  0228e	50		 push	 eax
  0228f	6a 12		 push	 18			; 00000012H
  02291	6a 4b		 push	 75			; 0000004bH
  02293	57		 push	 edi
  02294	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  02299	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1511 : 					}
; 1512 : 					break;

  0229c	e9 e3 fb ff ff	 jmp	 $LN459@Attack
$LN1061@Attack:

; 1513 : 				case 224: //Book of Neil
; 1514 : 					{
; 1515 : 						int value = AttackDamage * 60 / 100;

  022a1	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  022a4	dd d8		 fstp	 ST(0)
  022a6	8b c8		 mov	 ecx, eax
  022a8	c1 e1 04	 shl	 ecx, 4
  022ab	2b c8		 sub	 ecx, eax
  022ad	03 c9		 add	 ecx, ecx
  022af	03 c9		 add	 ecx, ecx
  022b1	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  022b6	f7 e9		 imul	 ecx
  022b8	6a 05		 push	 5
  022ba	c1 fa 05	 sar	 edx, 5
  022bd	6a 00		 push	 0
  022bf	8b ca		 mov	 ecx, edx
  022c1	6a 00		 push	 0
  022c3	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  022c6	03 ca		 add	 ecx, edx
  022c8	51		 push	 ecx
  022c9	6a 12		 push	 18			; 00000012H
  022cb	6a 4a		 push	 74			; 0000004aH
  022cd	57		 push	 edi
  022ce	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  022d3	83 c4 1c	 add	 esp, 28			; 0000001cH
  022d6	e9 a9 fb ff ff	 jmp	 $LN459@Attack
$LN1060@Attack:

; 1516 : 						gObjApplyBuffEffectDuration(lpTargetObj, AT_REQUIEM, 18, value, 0, 0, 5);
; 1517 : 					}
; 1518 : 					break;
; 1519 : 				case 219: //Sleep Skill
; 1520 : 					{
; 1521 : 						//int value = 0;
; 1522 : 
; 1523 : 						//if(lpTargetObj->Type == OBJ_MONSTER)
; 1524 : 						//{
; 1525 : 						//	value = ((lpObj->Energy / 30) + (lpObj->m_iSummonerBookSpell / 6) + 20);
; 1526 : 						//}
; 1527 : 						//else if(lpTargetObj->Type == OBJ_USER)
; 1528 : 						//{
; 1529 : 						//	value = ((lpObj->Energy / 37) + (lpObj->m_iSummonerBookSpell / 6) + 15);
; 1530 : 						//}
; 1531 : 
; 1532 : 						//if(value < rand()%100)
; 1533 : 						//{
; 1534 : 						//	GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);
; 1535 : 						//	return FALSE;
; 1536 : 						//}
; 1537 : 
; 1538 : 						//int value2 = 0;
; 1539 : 
; 1540 : 						//if(lpTargetObj->Type == OBJ_MONSTER)
; 1541 : 						//{
; 1542 : 						//	value2 = ((lpObj->Energy / 100) + 5) - (lpTargetObj->Level / 20);
; 1543 : 						//}
; 1544 : 						//else if(lpTargetObj->Type == OBJ_USER)
; 1545 : 						//{
; 1546 : 						//	value2 = ((lpObj->Energy / 250) + ((lpObj->Level - lpTargetObj->Level) / 100) + 4);
; 1547 : 						//}
; 1548 : 
; 1549 : 						//if(value2 < 1)
; 1550 : 						//{
; 1551 : 						//	GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);
; 1552 : 						//	return FALSE;
; 1553 : 						//}
; 1554 : 
; 1555 : 						//if(gObjCheckBuffEffectValue(lpTargetObj, AT_SLEEP, value2, 0) == 1)
; 1556 : 						//{
; 1557 : 						//	GCMagicAttackNumberSend(lpObj, 219, lpTargetObj->m_Index, 0);
; 1558 : 						//	return FALSE;
; 1559 : 						//}
; 1560 : 
; 1561 : 						//gObjApplyBuffEffectDuration(lpTargetObj, AT_SLEEP, 25, value2, 0, 0, value2);
; 1562 : 						//return TRUE;
; 1563 : 
; 1564 : 						int Rate = 0;
; 1565 : 
; 1566 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  022db	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  022df	dd d8		 fstp	 ST(0)
  022e1	33 db		 xor	 ebx, ebx
  022e3	83 f8 02	 cmp	 eax, 2
  022e6	75 40		 jne	 SHORT $LN412@Attack

; 1567 : 						{
; 1568 : 							Rate = g_SkillAdditionInfo.SleepRateStartVsMob + lpObj->Energy / g_SkillAdditionInfo.SleepRateDivVsMob + lpObj->m_iSummonerBookSpell / 6;

  022e8	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  022ef	0f b7 0d 3e 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3134
  022f6	99		 cdq
  022f7	f7 f9		 idiv	 ecx
  022f9	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv1686[ebp], eax
  022ff	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02304	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  0230a	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR tv1686[ebp]
  02310	8b da		 mov	 ebx, edx
  02312	03 c2		 add	 eax, edx
  02314	0f b7 15 3c 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3132
  0231b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0231e	03 d8		 add	 ebx, eax

; 1569 : 
; 1570 : 							if(g_SkillAdditionInfo.SleepRateMaxVsMob	!= 0)

  02320	66 a1 40 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3136

; 1571 : 							{
; 1572 : 								if(Rate > g_SkillAdditionInfo.SleepRateMaxVsMob)
; 1573 : 								{
; 1574 : 									Rate = g_SkillAdditionInfo.SleepRateMaxVsMob;
; 1575 : 								}
; 1576 : 							}
; 1577 : 						}

  02326	eb 43		 jmp	 SHORT $LN1196@Attack
$LN412@Attack:

; 1578 : 						else if( lpTargetObj->Type == OBJ_USER )

  02328	83 f8 01	 cmp	 eax, 1
  0232b	75 4e		 jne	 SHORT $LN406@Attack

; 1579 : 						{
; 1580 : 							Rate = g_SkillAdditionInfo.SleepRateStartVsUser + lpObj->Energy / g_SkillAdditionInfo.SleepRateDivVsUser + lpObj->m_iSummonerBookSpell / 6;

  0232d	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  02334	0f b7 0d 4a 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3146
  0233b	99		 cdq
  0233c	f7 f9		 idiv	 ecx
  0233e	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv1677[ebp], eax
  02344	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02349	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  0234f	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR tv1677[ebp]
  02355	8b da		 mov	 ebx, edx
  02357	03 c2		 add	 eax, edx
  02359	0f b7 15 48 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3144
  02360	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  02363	03 d8		 add	 ebx, eax

; 1581 : 
; 1582 : 							if(g_SkillAdditionInfo.SleepRateMaxVsUser	!= 0)

  02365	66 a1 4c 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3148
$LN1196@Attack:
  0236b	03 da		 add	 ebx, edx
  0236d	66 85 c0	 test	 ax, ax
  02370	74 09		 je	 SHORT $LN406@Attack

; 1583 : 							{
; 1584 : 								if(Rate > g_SkillAdditionInfo.SleepRateMaxVsUser)

  02372	0f b7 c0	 movzx	 eax, ax
  02375	3b d8		 cmp	 ebx, eax
  02377	7e 02		 jle	 SHORT $LN406@Attack

; 1585 : 								{
; 1586 : 									Rate = g_SkillAdditionInfo.SleepRateMaxVsUser;

  02379	8b d8		 mov	 ebx, eax
$LN406@Attack:

; 1587 : 								}
; 1588 : 							}
; 1589 : 						}
; 1590 : 
; 1591 : 						if( Rate < rand()%100)

  0237b	e8 00 00 00 00	 call	 _rand
  02380	99		 cdq
  02381	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02386	f7 f9		 idiv	 ecx
  02388	3b da		 cmp	 ebx, edx
  0238a	7d 2b		 jge	 SHORT $LN405@Attack
$LN835@Attack:

; 1592 : 						{
; 1593 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  0238c	8b 17		 mov	 edx, DWORD PTR [edi]
  0238e	8b 06		 mov	 eax, DWORD PTR [esi]
  02390	6a 00		 push	 0
  02392	6a 00		 push	 0
  02394	6a 00		 push	 0
  02396	6a 00		 push	 0
  02398	52		 push	 edx
  02399	50		 push	 eax
  0239a	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0239f	83 c4 18	 add	 esp, 24			; 00000018H
  023a2	5f		 pop	 edi
  023a3	5e		 pop	 esi

; 1594 : 							return FALSE;

  023a4	33 c0		 xor	 eax, eax
  023a6	5b		 pop	 ebx

; 3511 : }

  023a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  023aa	33 cd		 xor	 ecx, ebp
  023ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  023b1	8b e5		 mov	 esp, ebp
  023b3	5d		 pop	 ebp
  023b4	c2 24 00	 ret	 36			; 00000024H
$LN405@Attack:

; 1595 : 						}
; 1596 : 
; 1597 : 						int SleepTime = 0;
; 1598 : 
; 1599 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  023b7	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  023bb	83 f8 02	 cmp	 eax, 2
  023be	75 3e		 jne	 SHORT $LN404@Attack

; 1600 : 						{
; 1601 : 							SleepTime = (g_SkillAdditionInfo.SleepTimeStartVsMob + lpObj->Energy /g_SkillAdditionInfo.SleepTimeDivVsMob) - lpTargetObj->Level / 20;

  023c0	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  023c7	0f b7 0d 44 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3140
  023ce	99		 cdq
  023cf	f7 f9		 idiv	 ecx
  023d1	0f bf 8f be 00
	00 00		 movsx	 ecx, WORD PTR [edi+190]
  023d8	8b d8		 mov	 ebx, eax
  023da	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  023df	f7 e9		 imul	 ecx
  023e1	0f b7 0d 42 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3138
  023e8	c1 fa 03	 sar	 edx, 3
  023eb	8b c2		 mov	 eax, edx
  023ed	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  023f0	03 c2		 add	 eax, edx
  023f2	2b d8		 sub	 ebx, eax

; 1602 : 
; 1603 : 							if(g_SkillAdditionInfo.SleepTimeMaxVsMob != 0)

  023f4	66 a1 46 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3142
  023fa	03 d9		 add	 ebx, ecx

; 1604 : 							{
; 1605 : 								if(SleepTime > g_SkillAdditionInfo.SleepTimeMaxVsMob)
; 1606 : 								{
; 1607 : 									SleepTime = g_SkillAdditionInfo.SleepTimeMaxVsMob;
; 1608 : 								}
; 1609 : 							}
; 1610 : 						}

  023fc	eb 48		 jmp	 SHORT $LN1199@Attack
$LN404@Attack:

; 1611 : 						else if( lpTargetObj->Type == OBJ_USER )

  023fe	83 f8 01	 cmp	 eax, 1
  02401	75 56		 jne	 SHORT $LN894@Attack

; 1612 : 						{
; 1613 : 							SleepTime = g_SkillAdditionInfo.SleepTimeStartVsUser + ((lpObj->Energy /g_SkillAdditionInfo.SleepTimeDivVsUser) + (lpObj->Level - lpTargetObj->Level) / 100);

  02403	0f bf 97 be 00
	00 00		 movsx	 edx, WORD PTR [edi+190]
  0240a	0f bf 8e be 00
	00 00		 movsx	 ecx, WORD PTR [esi+190]
  02411	2b ca		 sub	 ecx, edx
  02413	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02418	f7 e9		 imul	 ecx
  0241a	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  02421	0f b7 0d 50 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3152
  02428	c1 fa 05	 sar	 edx, 5
  0242b	8b da		 mov	 ebx, edx
  0242d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  02430	03 da		 add	 ebx, edx
  02432	99		 cdq
  02433	f7 f9		 idiv	 ecx
  02435	0f b7 15 4e 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3150
  0243c	03 d8		 add	 ebx, eax

; 1614 : 
; 1615 : 							if(g_SkillAdditionInfo.SleepTimeMaxVsUser != 0)

  0243e	66 a1 52 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3154
$LN1241@Attack:

; 1612 : 						{
; 1613 : 							SleepTime = g_SkillAdditionInfo.SleepTimeStartVsUser + ((lpObj->Energy /g_SkillAdditionInfo.SleepTimeDivVsUser) + (lpObj->Level - lpTargetObj->Level) / 100);

  02444	03 da		 add	 ebx, edx
$LN1199@Attack:

; 1614 : 
; 1615 : 							if(g_SkillAdditionInfo.SleepTimeMaxVsUser != 0)

  02446	66 85 c0	 test	 ax, ax
  02449	74 09		 je	 SHORT $LN398@Attack

; 1616 : 							{
; 1617 : 								if(SleepTime > g_SkillAdditionInfo.SleepTimeMaxVsUser)

  0244b	0f b7 c0	 movzx	 eax, ax
  0244e	3b d8		 cmp	 ebx, eax
  02450	7e 02		 jle	 SHORT $LN398@Attack

; 1618 : 								{
; 1619 : 									SleepTime = g_SkillAdditionInfo.SleepTimeMaxVsUser;

  02452	8b d8		 mov	 ebx, eax
$LN398@Attack:

; 1620 : 								}
; 1621 : 							}
; 1622 : 						}
; 1623 : 
; 1624 : 						if( SleepTime < 1 )

  02454	83 fb 01	 cmp	 ebx, 1
  02457	7d 2b		 jge	 SHORT $LN397@Attack
$LN894@Attack:

; 1625 : 						{
; 1626 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  02459	8b 07		 mov	 eax, DWORD PTR [edi]
  0245b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0245d	6a 00		 push	 0
  0245f	6a 00		 push	 0
  02461	6a 00		 push	 0
  02463	6a 00		 push	 0
  02465	50		 push	 eax
  02466	51		 push	 ecx
  02467	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0246c	83 c4 18	 add	 esp, 24			; 00000018H
  0246f	5f		 pop	 edi
  02470	5e		 pop	 esi

; 1627 : 							return FALSE;

  02471	33 c0		 xor	 eax, eax
  02473	5b		 pop	 ebx

; 3511 : }

  02474	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02477	33 cd		 xor	 ecx, ebp
  02479	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0247e	8b e5		 mov	 esp, ebp
  02480	5d		 pop	 ebp
  02481	c2 24 00	 ret	 36			; 00000024H
$LN397@Attack:

; 1628 : 						}
; 1629 : 
; 1630 : 						if( gObjCheckBuffEffectValue(lpTargetObj,0x48,SleepTime,0) == TRUE )

  02484	6a 00		 push	 0
  02486	53		 push	 ebx
  02487	6a 48		 push	 72			; 00000048H
  02489	57		 push	 edi
  0248a	e8 00 00 00 00	 call	 ?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckBuffEffectValue
  0248f	83 c4 10	 add	 esp, 16			; 00000010H
  02492	3c 01		 cmp	 al, 1
  02494	75 28		 jne	 SHORT $LN396@Attack

; 1631 : 						{
; 1632 : 							GCMagicAttackNumberSend(lpObj,219,lpTargetObj->m_Index,0);

  02496	8b 17		 mov	 edx, DWORD PTR [edi]
  02498	6a 00		 push	 0
  0249a	52		 push	 edx
  0249b	68 db 00 00 00	 push	 219			; 000000dbH
  024a0	56		 push	 esi
  024a1	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  024a6	83 c4 10	 add	 esp, 16			; 00000010H
  024a9	5f		 pop	 edi
  024aa	5e		 pop	 esi

; 1633 : 							return FALSE;

  024ab	33 c0		 xor	 eax, eax
  024ad	5b		 pop	 ebx

; 3511 : }

  024ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  024b1	33 cd		 xor	 ecx, ebp
  024b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  024b8	8b e5		 mov	 esp, ebp
  024ba	5d		 pop	 ebp
  024bb	c2 24 00	 ret	 36			; 00000024H
$LN396@Attack:

; 1634 : 						}
; 1635 : 
; 1636 : 						gObjApplyBuffEffectDuration(lpTargetObj,72,25,SleepTime,0,0,SleepTime);

  024be	53		 push	 ebx
  024bf	6a 00		 push	 0
  024c1	6a 00		 push	 0
  024c3	53		 push	 ebx
  024c4	6a 19		 push	 25			; 00000019H
  024c6	6a 48		 push	 72			; 00000048H
  024c8	57		 push	 edi
  024c9	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  024ce	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1637 : 						return TRUE;

  024d1	e9 8d 29 00 00	 jmp	 $LN1@Attack
$LN1059@Attack:

; 1638 : 					}
; 1639 : 					break;
; 1640 : 				case 221: //Weakness
; 1641 : 					{
; 1642 : 						//int value = 0;
; 1643 : 
; 1644 : 						//if(lpTargetObj->Type == OBJ_MONSTER)
; 1645 : 						//{
; 1646 : 						//	value = ((lpObj->Energy / 50) + (lpObj->m_iSummonerBookSpell / 6) + 32);
; 1647 : 						//}
; 1648 : 						//else if(lpTargetObj->Type == OBJ_USER)
; 1649 : 						//{
; 1650 : 						//	value = ((lpObj->Energy / 50) + (lpObj->m_iSummonerBookSpell / 6) + 17);
; 1651 : 						//}
; 1652 : 
; 1653 : 						//if(value >= rand()%100)
; 1654 : 						//{
; 1655 : 						//	int value1 = 0;
; 1656 : 						//	int value2 = 0;
; 1657 : 
; 1658 : 						//	if(lpTargetObj->Type == OBJ_MONSTER)
; 1659 : 						//	{
; 1660 : 						//		int MaxEnergy = 0;
; 1661 : 
; 1662 : 						//		if(lpObj->Energy > 4000)
; 1663 : 						//		{
; 1664 : 						//			MaxEnergy = 4000;
; 1665 : 						//		}
; 1666 : 
; 1667 : 						//		value1 = lpObj->Energy / 58 + 4;
; 1668 : 						//		value2 = ((lpObj->Energy / 100) + 4) - (lpTargetObj->Level / 20);
; 1669 : 						//	}
; 1670 : 						//	else if(lpTargetObj->Type == OBJ_USER)
; 1671 : 						//	{
; 1672 : 						//		int MaxEnergy = 0;
; 1673 : 
; 1674 : 						//		if(lpObj->Energy > 4000)
; 1675 : 						//		{
; 1676 : 						//			MaxEnergy = 4000;
; 1677 : 						//		}
; 1678 : 
; 1679 : 						//		value1 = lpObj->Energy / 93 + 3;
; 1680 : 						//		value2 = ((lpObj->Energy / 300) + ((lpObj->Level - lpTargetObj->Level) / 150) + 5);
; 1681 : 						//	}
; 1682 : 
; 1683 : 						//	if(value2 < 1)
; 1684 : 						//	{
; 1685 : 						//		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);
; 1686 : 						//		return FALSE;
; 1687 : 						//	}
; 1688 : 
; 1689 : 						//	if(gObjCheckBuffEffectValue(lpTargetObj, AT_WEAKNESS, value1, 0) == 1)
; 1690 : 						//	{
; 1691 : 						//		GCMagicAttackNumberSend(lpObj, 221, lpTargetObj->m_Index, 0);
; 1692 : 						//		return FALSE;
; 1693 : 						//	}
; 1694 : 
; 1695 : 						//	gObjApplyBuffEffectDuration(lpTargetObj, AT_WEAKNESS, 29, value1, 0, 0, value2);
; 1696 : 						//	return TRUE;
; 1697 : 						//}
; 1698 : 						//GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);
; 1699 : 						//return FALSE;
; 1700 : 
; 1701 : 						int Rate = 0;
; 1702 : 
; 1703 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  024d6	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  024da	dd d8		 fstp	 ST(0)
  024dc	33 db		 xor	 ebx, ebx
  024de	83 f8 02	 cmp	 eax, 2
  024e1	75 30		 jne	 SHORT $LN394@Attack

; 1704 : 						{
; 1705 : 							Rate = 32 + lpObj->Energy / 50 + lpObj->m_iSummonerBookSpell / 6;

  024e3	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  024ea	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  024ef	f7 e9		 imul	 ecx
  024f1	c1 fa 04	 sar	 edx, 4
  024f4	8b da		 mov	 ebx, edx
  024f6	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  024f9	03 da		 add	 ebx, edx
  024fb	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02500	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  02506	8b c2		 mov	 eax, edx
  02508	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0250b	03 da		 add	 ebx, edx
  0250d	8d 5c 18 20	 lea	 ebx, DWORD PTR [eax+ebx+32]
  02511	eb 33		 jmp	 SHORT $LN392@Attack
$LN394@Attack:

; 1706 : 						}
; 1707 : 						else if( lpTargetObj->Type == OBJ_USER )

  02513	83 f8 01	 cmp	 eax, 1
  02516	75 2e		 jne	 SHORT $LN392@Attack

; 1708 : 						{
; 1709 : 							Rate = 17 + lpObj->Energy / 50 + lpObj->m_iSummonerBookSpell / 6;

  02518	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  0251f	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02524	f7 e9		 imul	 ecx
  02526	c1 fa 04	 sar	 edx, 4
  02529	8b da		 mov	 ebx, edx
  0252b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0252e	03 da		 add	 ebx, edx
  02530	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02535	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  0253b	8b ca		 mov	 ecx, edx
  0253d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02540	03 da		 add	 ebx, edx
  02542	8d 5c 19 11	 lea	 ebx, DWORD PTR [ecx+ebx+17]
$LN392@Attack:

; 1710 : 						}
; 1711 : 
; 1712 : 						if( Rate >= rand() % 100 )

  02546	e8 00 00 00 00	 call	 _rand
  0254b	99		 cdq
  0254c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02551	f7 f9		 idiv	 ecx
  02553	3b da		 cmp	 ebx, edx
  02555	0f 8c 31 fe ff
	ff		 jl	 $LN835@Attack

; 1713 : 						{
; 1714 : 							int DecValue = 0;
; 1715 : 							int DecTime = 0;
; 1716 : 
; 1717 : 							if( lpTargetObj->Type == OBJ_MONSTER )

  0255b	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  0255f	83 f8 02	 cmp	 eax, 2
  02562	0f 85 83 00 00
	00		 jne	 $LN390@Attack

; 1718 : 							{
; 1719 : 								int MaxEnergy = lpObj->Energy;

  02568	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]

; 1720 : 
; 1721 : 								if( lpObj->Energy > 4000 )

  0256f	ba a0 0f 00 00	 mov	 edx, 4000		; 00000fa0H
  02574	8b c8		 mov	 ecx, eax
  02576	66 3b c2	 cmp	 ax, dx
  02579	76 02		 jbe	 SHORT $LN389@Attack

; 1722 : 								{
; 1723 : 									MaxEnergy = 4000;

  0257b	8b ca		 mov	 ecx, edx
$LN389@Attack:

; 1724 : 								}
; 1725 : 
; 1726 : 								DecValue = g_SkillAdditionInfo.WeaknessEffectStartVsMob + MaxEnergy / g_SkillAdditionInfo.WeaknessEffectDivVsMob;

  0257d	0f b7 1d 0a 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3082
  02584	8b c1		 mov	 eax, ecx
  02586	99		 cdq
  02587	f7 fb		 idiv	 ebx
  02589	0f b7 15 08 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3080
  02590	03 c2		 add	 eax, edx

; 1727 : 
; 1728 : 								if(g_SkillAdditionInfo.WeaknessEffectMaxVsMob != 0)

  02592	66 8b 15 0c 0c
	00 00		 mov	 dx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3084
  02599	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222767[ebp], eax
  0259f	66 85 d2	 test	 dx, dx
  025a2	74 0d		 je	 SHORT $LN387@Attack

; 1729 : 								{
; 1730 : 									if(DecValue > g_SkillAdditionInfo.WeaknessEffectMaxVsMob)

  025a4	0f b7 d2	 movzx	 edx, dx
  025a7	3b c2		 cmp	 eax, edx
  025a9	7e 06		 jle	 SHORT $LN387@Attack

; 1731 : 									{
; 1732 : 										DecValue = g_SkillAdditionInfo.WeaknessEffectMaxVsMob;

  025ab	89 95 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222767[ebp], edx
$LN387@Attack:

; 1733 : 									}
; 1734 : 								}
; 1735 : 
; 1736 : 								DecTime = g_SkillAdditionInfo.WeaknessTimeStartVsMob + MaxEnergy / g_SkillAdditionInfo.WeaknessTimeDivVsMob - lpTargetObj->Level / 20;

  025b1	0f b7 1d 10 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3088
  025b8	8b c1		 mov	 eax, ecx
  025ba	99		 cdq
  025bb	f7 fb		 idiv	 ebx
  025bd	0f bf 8f be 00
	00 00		 movsx	 ecx, WORD PTR [edi+190]
  025c4	8b d8		 mov	 ebx, eax
  025c6	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  025cb	f7 e9		 imul	 ecx
  025cd	0f b7 0d 0e 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3086
  025d4	c1 fa 03	 sar	 edx, 3
  025d7	8b c2		 mov	 eax, edx
  025d9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  025dc	03 c2		 add	 eax, edx
  025de	2b d8		 sub	 ebx, eax

; 1737 : 
; 1738 : 								if(g_SkillAdditionInfo.WeaknessTimeMaxVsMob != 0)

  025e0	66 a1 12 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3090

; 1739 : 								{
; 1740 : 									if(DecTime > g_SkillAdditionInfo.WeaknessTimeMaxVsMob)
; 1741 : 									{
; 1742 : 										DecTime = g_SkillAdditionInfo.WeaknessTimeMaxVsMob;
; 1743 : 									}
; 1744 : 								}
; 1745 : 							}

  025e6	e9 98 00 00 00	 jmp	 $LN1202@Attack
$LN390@Attack:

; 1746 : 							else if( lpTargetObj->Type == OBJ_USER )

  025eb	83 f8 01	 cmp	 eax, 1
  025ee	0f 85 98 fd ff
	ff		 jne	 $LN835@Attack

; 1747 : 							{
; 1748 : 								int MaxEnergy = lpObj->Energy;

  025f4	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]

; 1749 : 
; 1750 : 								if( lpObj->Energy > 4000 )

  025fb	ba a0 0f 00 00	 mov	 edx, 4000		; 00000fa0H
  02600	8b c8		 mov	 ecx, eax
  02602	66 3b c2	 cmp	 ax, dx
  02605	76 02		 jbe	 SHORT $LN382@Attack

; 1751 : 								{
; 1752 : 									MaxEnergy = 4000;

  02607	8b ca		 mov	 ecx, edx
$LN382@Attack:

; 1753 : 								}
; 1754 : 
; 1755 : 								DecValue = g_SkillAdditionInfo.WeaknessEffectStartVsUser + MaxEnergy / g_SkillAdditionInfo.WeaknessEffectDivVsUser;

  02609	0f b7 1d 16 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3094
  02610	8b c1		 mov	 eax, ecx
  02612	99		 cdq
  02613	f7 fb		 idiv	 ebx
  02615	0f b7 15 14 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3092
  0261c	03 c2		 add	 eax, edx

; 1756 : 
; 1757 : 								if(g_SkillAdditionInfo.WeaknessEffectMaxVsUser != 0)

  0261e	66 8b 15 18 0c
	00 00		 mov	 dx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3096
  02625	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222767[ebp], eax
  0262b	66 85 d2	 test	 dx, dx
  0262e	74 0d		 je	 SHORT $LN380@Attack

; 1758 : 								{
; 1759 : 									if(DecValue > g_SkillAdditionInfo.WeaknessEffectMaxVsUser)

  02630	0f b7 d2	 movzx	 edx, dx
  02633	3b c2		 cmp	 eax, edx
  02635	7e 06		 jle	 SHORT $LN380@Attack

; 1760 : 									{
; 1761 : 										DecValue = g_SkillAdditionInfo.WeaknessEffectMaxVsUser;

  02637	89 95 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222767[ebp], edx
$LN380@Attack:

; 1762 : 									}
; 1763 : 								}
; 1764 : 
; 1765 : 								DecTime = g_SkillAdditionInfo.WeaknessTimeStartVsUser + MaxEnergy / g_SkillAdditionInfo.WeaknessTimeDivVsUser + (lpObj->Level - lpTargetObj->Level) / 150;

  0263d	0f bf 87 be 00
	00 00		 movsx	 eax, WORD PTR [edi+190]
  02644	0f bf 96 be 00
	00 00		 movsx	 edx, WORD PTR [esi+190]
  0264b	2b d0		 sub	 edx, eax
  0264d	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  02652	f7 ea		 imul	 edx
  02654	0f b7 05 1c 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3100
  0265b	c1 fa 04	 sar	 edx, 4
  0265e	8b da		 mov	 ebx, edx
  02660	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv1654[ebp], eax
  02666	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  02669	03 da		 add	 ebx, edx
  0266b	8b c1		 mov	 eax, ecx
  0266d	99		 cdq
  0266e	f7 bd b8 fe ff
	ff		 idiv	 DWORD PTR tv1654[ebp]
  02674	0f b7 0d 1a 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3098
  0267b	03 d8		 add	 ebx, eax

; 1766 : 
; 1767 : 								if(g_SkillAdditionInfo.WeaknessTimeMaxVsUser != 0)

  0267d	66 a1 1e 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3102
$LN1202@Attack:
  02683	03 d9		 add	 ebx, ecx
  02685	66 85 c0	 test	 ax, ax
  02688	74 09		 je	 SHORT $LN378@Attack

; 1768 : 								{
; 1769 : 									if(DecTime > g_SkillAdditionInfo.WeaknessTimeMaxVsUser)

  0268a	0f b7 c0	 movzx	 eax, ax
  0268d	3b d8		 cmp	 ebx, eax
  0268f	7e 02		 jle	 SHORT $LN378@Attack

; 1770 : 									{
; 1771 : 										DecTime = g_SkillAdditionInfo.WeaknessTimeMaxVsUser;

  02691	8b d8		 mov	 ebx, eax
$LN378@Attack:

; 1772 : 									}
; 1773 : 								}
; 1774 : 							}
; 1775 : 
; 1776 : 							if( DecValue > 100 )

  02693	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  02698	39 85 cc fe ff
	ff		 cmp	 DWORD PTR _DecValue$222767[ebp], eax
  0269e	7e 06		 jle	 SHORT $LN377@Attack

; 1777 : 								DecValue = 100;

  026a0	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222767[ebp], eax
$LN377@Attack:

; 1778 : 
; 1779 : 							if( DecTime < 1 )

  026a6	83 fb 01	 cmp	 ebx, 1

; 1780 : 							{
; 1781 : 								GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1782 : 								return FALSE;

  026a9	0f 8c dd fc ff
	ff		 jl	 $LN835@Attack

; 1783 : 							}
; 1784 : 
; 1785 : 							if( gObjCheckBuffEffectValue(lpObj,AT_WEAKNESS,DecValue,0) == TRUE )

  026af	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _DecValue$222767[ebp]
  026b5	6a 00		 push	 0
  026b7	51		 push	 ecx
  026b8	6a 4c		 push	 76			; 0000004cH
  026ba	56		 push	 esi
  026bb	e8 00 00 00 00	 call	 ?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckBuffEffectValue
  026c0	83 c4 10	 add	 esp, 16			; 00000010H
  026c3	3c 01		 cmp	 al, 1
  026c5	75 2a		 jne	 SHORT $LN375@Attack
$LN1231@Attack:

; 1786 : 							{
; 1787 : 								GCMagicAttackNumberSend(lpObj,skill,lpTargetObj->m_Index,0);

  026c7	8b 17		 mov	 edx, DWORD PTR [edi]
  026c9	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  026cf	6a 00		 push	 0
  026d1	52		 push	 edx
  026d2	50		 push	 eax
  026d3	56		 push	 esi
  026d4	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  026d9	83 c4 10	 add	 esp, 16			; 00000010H
  026dc	5f		 pop	 edi
  026dd	5e		 pop	 esi

; 1788 : 								return FALSE;

  026de	33 c0		 xor	 eax, eax
  026e0	5b		 pop	 ebx

; 3511 : }

  026e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  026e4	33 cd		 xor	 ecx, ebp
  026e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  026eb	8b e5		 mov	 esp, ebp
  026ed	5d		 pop	 ebp
  026ee	c2 24 00	 ret	 36			; 00000024H
$LN375@Attack:

; 1789 : 							}
; 1790 : 
; 1791 : 							gObjApplyBuffEffectDuration(lpTargetObj,AT_WEAKNESS,29,DecValue,0,0,DecTime);

  026f1	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _DecValue$222767[ebp]
  026f7	53		 push	 ebx
  026f8	6a 00		 push	 0
  026fa	6a 00		 push	 0
  026fc	51		 push	 ecx
  026fd	6a 1d		 push	 29			; 0000001dH
  026ff	6a 4c		 push	 76			; 0000004cH
  02701	57		 push	 edi
  02702	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  02707	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1792 : 							return TRUE;

  0270a	e9 54 27 00 00	 jmp	 $LN1@Attack
$LN1058@Attack:

; 1793 : 						}
; 1794 : 						else
; 1795 : 						{
; 1796 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1797 : 							return FALSE;
; 1798 : 						}
; 1799 : 					}
; 1800 : 					break;
; 1801 : 				case 222: //Innovation
; 1802 : 					{
; 1803 : 						//int value = 0;
; 1804 : 
; 1805 : 						//if(lpTargetObj->Type == OBJ_MONSTER)
; 1806 : 						//{
; 1807 : 						//	value = ((lpObj->Energy / 50) + (lpObj->m_iSummonerBookSpell / 6) + 32);
; 1808 : 						//}
; 1809 : 						//else if(lpTargetObj->Type == OBJ_USER)
; 1810 : 						//{
; 1811 : 						//	value = ((lpObj->Energy / 50) + (lpObj->m_iSummonerBookSpell / 6) + 17);
; 1812 : 						//}
; 1813 : 
; 1814 : 						//if(value >= rand()%100)
; 1815 : 						//{
; 1816 : 						//	int value1 = 0;
; 1817 : 						//	int value2 = 0;
; 1818 : 
; 1819 : 						//	if(lpTargetObj->Type == OBJ_MONSTER)
; 1820 : 						//	{
; 1821 : 						//		int MaxEnergy = 0;
; 1822 : 
; 1823 : 						//		if(lpObj->Energy > 4000)
; 1824 : 						//		{
; 1825 : 						//			MaxEnergy = 4000;
; 1826 : 						//		}
; 1827 : 
; 1828 : 						//		value1 = lpObj->Energy / 90 + 20;
; 1829 : 						//		value2 = ((lpObj->Energy / 100) + 4) - (lpTargetObj->Level / 20);
; 1830 : 						//	}
; 1831 : 						//	else if(lpTargetObj->Type == OBJ_USER)
; 1832 : 						//	{
; 1833 : 						//		int MaxEnergy = 0;
; 1834 : 
; 1835 : 						//		if(lpObj->Energy > 4000)
; 1836 : 						//		{
; 1837 : 						//			MaxEnergy = 4000;
; 1838 : 						//		}
; 1839 : 
; 1840 : 						//		value1 = lpObj->Energy / 110 + 12;
; 1841 : 						//		value2 = ((lpObj->Energy / 300) + ((lpObj->Level - lpTargetObj->Level) / 150) + 5);
; 1842 : 						//	}
; 1843 : 
; 1844 : 						//	if(value2 < 1)
; 1845 : 						//	{
; 1846 : 						//		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);
; 1847 : 						//		return FALSE;
; 1848 : 						//	}
; 1849 : 
; 1850 : 						//	if(gObjCheckBuffEffectValue(lpTargetObj, AT_INNOVATION, value1, 0) == 1)
; 1851 : 						//	{
; 1852 : 						//		GCMagicAttackNumberSend(lpObj, 222, lpTargetObj->m_Index, 0);
; 1853 : 						//		return FALSE;
; 1854 : 						//	}
; 1855 : 
; 1856 : 						//	gObjApplyBuffEffectDuration(lpTargetObj, AT_INNOVATION, 30, value1, 0, 0, value2);
; 1857 : 						//	return TRUE;
; 1858 : 						//}
; 1859 : 						//GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);
; 1860 : 						//return FALSE;
; 1861 : 
; 1862 : 						int Rate = 0;
; 1863 : 
; 1864 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  0270f	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02713	dd d8		 fstp	 ST(0)
  02715	33 db		 xor	 ebx, ebx
  02717	83 f8 02	 cmp	 eax, 2
  0271a	75 30		 jne	 SHORT $LN372@Attack

; 1865 : 						{
; 1866 : 							Rate = 32 + lpObj->Energy / 50 + lpObj->m_iSummonerBookSpell / 6;

  0271c	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  02723	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02728	f7 e9		 imul	 ecx
  0272a	c1 fa 04	 sar	 edx, 4
  0272d	8b da		 mov	 ebx, edx
  0272f	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  02732	03 da		 add	 ebx, edx
  02734	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02739	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  0273f	8b ca		 mov	 ecx, edx
  02741	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02744	03 da		 add	 ebx, edx
  02746	8d 5c 19 20	 lea	 ebx, DWORD PTR [ecx+ebx+32]
  0274a	eb 33		 jmp	 SHORT $LN370@Attack
$LN372@Attack:

; 1867 : 						}
; 1868 : 						else if( lpTargetObj->Type == OBJ_USER )

  0274c	83 f8 01	 cmp	 eax, 1
  0274f	75 2e		 jne	 SHORT $LN370@Attack

; 1869 : 						{
; 1870 : 							Rate = 17 + lpObj->Energy / 50 + lpObj->m_iSummonerBookSpell / 6;

  02751	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  02758	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0275d	f7 e9		 imul	 ecx
  0275f	c1 fa 04	 sar	 edx, 4
  02762	8b da		 mov	 ebx, edx
  02764	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  02767	03 da		 add	 ebx, edx
  02769	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0276e	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  02774	8b c2		 mov	 eax, edx
  02776	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02779	03 da		 add	 ebx, edx
  0277b	8d 5c 18 11	 lea	 ebx, DWORD PTR [eax+ebx+17]
$LN370@Attack:

; 1871 : 						}
; 1872 : 
; 1873 : 						if( Rate >= rand()%100 )

  0277f	e8 00 00 00 00	 call	 _rand
  02784	99		 cdq
  02785	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0278a	f7 f9		 idiv	 ecx
  0278c	3b da		 cmp	 ebx, edx
  0278e	0f 8c f8 fb ff
	ff		 jl	 $LN835@Attack

; 1874 : 						{
; 1875 : 							int DecValue = 0;
; 1876 : 							int DecTime = 0;
; 1877 : 
; 1878 : 							if( lpTargetObj->Type == OBJ_MONSTER )

  02794	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  02798	83 f8 02	 cmp	 eax, 2
  0279b	0f 85 83 00 00
	00		 jne	 $LN368@Attack

; 1879 : 							{
; 1880 : 								int MaxEnergy = lpObj->Energy;

  027a1	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]

; 1881 : 
; 1882 : 								if( lpObj->Energy > 4000 )

  027a8	ba a0 0f 00 00	 mov	 edx, 4000		; 00000fa0H
  027ad	8b c8		 mov	 ecx, eax
  027af	66 3b c2	 cmp	 ax, dx
  027b2	76 02		 jbe	 SHORT $LN367@Attack

; 1883 : 								{
; 1884 : 									MaxEnergy = 4000;

  027b4	8b ca		 mov	 ecx, edx
$LN367@Attack:

; 1885 : 								}
; 1886 : 
; 1887 : 								DecValue = g_SkillAdditionInfo.InnovationEffectStartVsMob + MaxEnergy / g_SkillAdditionInfo.InnovationEffectDivVsMob;

  027b6	0f b7 1d 24 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3108
  027bd	8b c1		 mov	 eax, ecx
  027bf	99		 cdq
  027c0	f7 fb		 idiv	 ebx
  027c2	0f b7 15 22 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3106
  027c9	03 c2		 add	 eax, edx

; 1888 : 
; 1889 : 								if(g_SkillAdditionInfo.InnovationEffectMaxVsMob != 0)

  027cb	66 8b 15 26 0c
	00 00		 mov	 dx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3110
  027d2	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222794[ebp], eax
  027d8	66 85 d2	 test	 dx, dx
  027db	74 0d		 je	 SHORT $LN365@Attack

; 1890 : 								{
; 1891 : 									if(DecValue > g_SkillAdditionInfo.InnovationEffectMaxVsMob)

  027dd	0f b7 d2	 movzx	 edx, dx
  027e0	3b c2		 cmp	 eax, edx
  027e2	7e 06		 jle	 SHORT $LN365@Attack

; 1892 : 									{
; 1893 : 										DecValue = g_SkillAdditionInfo.InnovationEffectMaxVsMob;

  027e4	89 95 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222794[ebp], edx
$LN365@Attack:

; 1894 : 									}
; 1895 : 								}
; 1896 : 
; 1897 : 								DecTime = g_SkillAdditionInfo.InnovationTimeStartVsMob + MaxEnergy / g_SkillAdditionInfo.InnovationTimeDivVsMob - lpTargetObj->Level / 20;

  027ea	0f b7 1d 2a 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3114
  027f1	8b c1		 mov	 eax, ecx
  027f3	99		 cdq
  027f4	f7 fb		 idiv	 ebx
  027f6	0f bf 8f be 00
	00 00		 movsx	 ecx, WORD PTR [edi+190]
  027fd	8b d8		 mov	 ebx, eax
  027ff	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02804	f7 e9		 imul	 ecx
  02806	0f b7 0d 28 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3112
  0280d	c1 fa 03	 sar	 edx, 3
  02810	8b c2		 mov	 eax, edx
  02812	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02815	03 c2		 add	 eax, edx
  02817	2b d8		 sub	 ebx, eax

; 1898 : 
; 1899 : 								if(g_SkillAdditionInfo.InnovationTimeMaxVsMob != 0)

  02819	66 a1 2c 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3116

; 1900 : 								{
; 1901 : 									if(DecTime > g_SkillAdditionInfo.InnovationTimeMaxVsMob)
; 1902 : 									{
; 1903 : 										DecTime = g_SkillAdditionInfo.InnovationTimeMaxVsMob;
; 1904 : 									}
; 1905 : 								}
; 1906 : 							}

  0281f	e9 95 00 00 00	 jmp	 $LN1205@Attack
$LN368@Attack:

; 1907 : 							else if( lpTargetObj->Type == OBJ_USER )

  02824	83 f8 01	 cmp	 eax, 1
  02827	0f 85 5f fb ff
	ff		 jne	 $LN835@Attack

; 1908 : 							{
; 1909 : 								int MaxEnergy = lpObj->Energy;

  0282d	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]

; 1910 : 
; 1911 : 								if( lpObj->Energy > 4000 )

  02834	ba a0 0f 00 00	 mov	 edx, 4000		; 00000fa0H
  02839	8b c8		 mov	 ecx, eax
  0283b	66 3b c2	 cmp	 ax, dx
  0283e	76 02		 jbe	 SHORT $LN360@Attack

; 1912 : 								{
; 1913 : 									MaxEnergy = 4000;

  02840	8b ca		 mov	 ecx, edx
$LN360@Attack:

; 1914 : 								}
; 1915 : 
; 1916 : 								DecValue = g_SkillAdditionInfo.InnovationEffectStartVsUser + MaxEnergy / g_SkillAdditionInfo.InnovationEffectDivVsUser;

  02842	0f b7 1d 30 0c
	00 00		 movzx	 ebx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3120
  02849	8b c1		 mov	 eax, ecx
  0284b	99		 cdq
  0284c	f7 fb		 idiv	 ebx
  0284e	0f b7 15 2e 0c
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3118
  02855	03 c2		 add	 eax, edx

; 1917 : 
; 1918 : 								if(g_SkillAdditionInfo.InnovationEffectMaxVsUser	=! 0)

  02857	ba 01 00 00 00	 mov	 edx, 1
  0285c	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222794[ebp], eax
  02862	66 89 15 32 0c
	00 00		 mov	 WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3122, dx

; 1919 : 								{
; 1920 : 									if(DecValue > g_SkillAdditionInfo.InnovationEffectMaxVsUser)

  02869	3b c2		 cmp	 eax, edx
  0286b	7e 06		 jle	 SHORT $LN358@Attack

; 1921 : 									{
; 1922 : 										DecValue = g_SkillAdditionInfo.InnovationEffectMaxVsUser;

  0286d	89 95 cc fe ff
	ff		 mov	 DWORD PTR _DecValue$222794[ebp], edx
$LN358@Attack:

; 1923 : 									}
; 1924 : 								}
; 1925 : 
; 1926 : 								DecTime = g_SkillAdditionInfo.InnovationTimeStartVsUser + MaxEnergy / g_SkillAdditionInfo.InnovationTimeDivVsUser + (lpObj->Level - lpTargetObj->Level) / 150;

  02873	0f bf 87 be 00
	00 00		 movsx	 eax, WORD PTR [edi+190]
  0287a	0f bf 96 be 00
	00 00		 movsx	 edx, WORD PTR [esi+190]
  02881	2b d0		 sub	 edx, eax
  02883	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  02888	f7 ea		 imul	 edx
  0288a	0f b7 05 36 0c
	00 00		 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3126
  02891	c1 fa 04	 sar	 edx, 4
  02894	8b da		 mov	 ebx, edx
  02896	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv1642[ebp], eax
  0289c	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0289f	03 da		 add	 ebx, edx
  028a1	8b c1		 mov	 eax, ecx
  028a3	99		 cdq
  028a4	f7 bd b8 fe ff
	ff		 idiv	 DWORD PTR tv1642[ebp]
  028aa	0f b7 0d 34 0c
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3124
  028b1	03 d8		 add	 ebx, eax

; 1927 : 
; 1928 : 								if(g_SkillAdditionInfo.InnovationTimeMaxVsUser != 0)

  028b3	66 a1 38 0c 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3128
$LN1205@Attack:
  028b9	03 d9		 add	 ebx, ecx
  028bb	66 85 c0	 test	 ax, ax
  028be	74 09		 je	 SHORT $LN356@Attack

; 1929 : 								{
; 1930 : 									if(DecTime > g_SkillAdditionInfo.InnovationTimeMaxVsUser)

  028c0	0f b7 c0	 movzx	 eax, ax
  028c3	3b d8		 cmp	 ebx, eax
  028c5	7e 02		 jle	 SHORT $LN356@Attack

; 1931 : 									{
; 1932 : 										DecTime = g_SkillAdditionInfo.InnovationTimeMaxVsUser;

  028c7	8b d8		 mov	 ebx, eax
$LN356@Attack:

; 1933 : 									}
; 1934 : 								}
; 1935 : 							}
; 1936 : 
; 1937 : 							if( DecValue > 100 )

  028c9	83 bd cc fe ff
	ff 64		 cmp	 DWORD PTR _DecValue$222794[ebp], 100 ; 00000064H
  028d0	7e 0a		 jle	 SHORT $LN355@Attack

; 1938 : 								DecValue = 0;

  028d2	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _DecValue$222794[ebp], 0
$LN355@Attack:

; 1939 : 
; 1940 : 							if( DecTime < 1 )

  028dc	83 fb 01	 cmp	 ebx, 1

; 1941 : 							{
; 1942 : 								GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1943 : 								return FALSE;

  028df	0f 8c a7 fa ff
	ff		 jl	 $LN835@Attack

; 1944 : 							}
; 1945 : 
; 1946 : 							if( gObjCheckBuffEffectValue(lpObj,AT_INNOVATION,DecValue,0) == TRUE )

  028e5	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _DecValue$222794[ebp]
  028eb	6a 00		 push	 0
  028ed	51		 push	 ecx
  028ee	6a 4d		 push	 77			; 0000004dH
  028f0	56		 push	 esi
  028f1	e8 00 00 00 00	 call	 ?gObjCheckBuffEffectValue@@YAEPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckBuffEffectValue
  028f6	83 c4 10	 add	 esp, 16			; 00000010H
  028f9	3c 01		 cmp	 al, 1

; 1947 : 							{
; 1948 : 								GCMagicAttackNumberSend(lpObj,skill,lpTargetObj->m_Index,0);
; 1949 : 								return FALSE;

  028fb	0f 84 c6 fd ff
	ff		 je	 $LN1231@Attack

; 1950 : 							}
; 1951 : 
; 1952 : 							gObjApplyBuffEffectDuration(lpTargetObj,AT_INNOVATION,30,DecValue,0,0,DecTime);

  02901	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _DecValue$222794[ebp]
  02907	53		 push	 ebx
  02908	6a 00		 push	 0
  0290a	6a 00		 push	 0
  0290c	51		 push	 ecx
  0290d	6a 1e		 push	 30			; 0000001eH
  0290f	6a 4d		 push	 77			; 0000004dH
  02911	57		 push	 edi
  02912	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  02917	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1953 : 							return TRUE;

  0291a	e9 44 25 00 00	 jmp	 $LN1@Attack
$LN1057@Attack:

; 1954 : 						}
; 1955 : 						else
; 1956 : 						{
; 1957 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1958 : 							return FALSE;
; 1959 : 						}
; 1960 : 					}
; 1961 : 					break;
; 1962 : 				case 225: //Pollution (Season4) add-on
; 1963 : 					{
; 1964 : 						if(gObjSearchActiveEffect(lpTargetObj, AT_ICE) == 0)

  0291f	6a 38		 push	 56			; 00000038H

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02921	dd d8		 fstp	 ST(0)
  02923	57		 push	 edi
  02924	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  02929	83 c4 08	 add	 esp, 8
  0292c	84 c0		 test	 al, al
  0292e	0f 85 50 f5 ff
	ff		 jne	 $LN459@Attack

; 1965 : 						{
; 1966 : 							lpTargetObj->lpAttackObj = lpObj;
; 1967 : 							lpTargetObj->DelayActionTime = 1000;
; 1968 : 							lpTargetObj->DelayLevel = 1;
; 1969 : 
; 1970 : 							gObjApplyBuffEffectDuration(lpTargetObj, AT_ICE, 20, 0, 0, 0, 2);

  02934	6a 02		 push	 2
  02936	6a 00		 push	 0
  02938	6a 00		 push	 0
  0293a	6a 00		 push	 0
  0293c	6a 14		 push	 20			; 00000014H
  0293e	6a 38		 push	 56			; 00000038H
  02940	57		 push	 edi
  02941	89 b7 d4 03 00
	00		 mov	 DWORD PTR [edi+980], esi
  02947	c7 87 c0 03 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+960], 1000 ; 000003e8H
  02951	c6 87 c4 03 00
	00 01		 mov	 BYTE PTR [edi+964], 1
  02958	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  0295d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1971 : 						}
; 1972 : 					}
; 1973 : 					break;

  02960	e9 1f f5 ff ff	 jmp	 $LN459@Attack
$LN1056@Attack:

; 1974 : 				case 230: //Lightning Shock (Season4) add-on
; 1975 : #if(S5E4)
; 1976 : 				case 545:
; 1977 : 				case 546:
; 1978 : 				case 547:
; 1979 : 				case 548:
; 1980 : 				case 549:
; 1981 : #endif
; 1982 : 					{
; 1983 : 						gObjApplyBuffEffectDuration(lpTargetObj, AT_LIGHTNING_SHOCK, 0, 0, 0, 0, 1);

  02965	6a 01		 push	 1

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02967	dd d8		 fstp	 ST(0)
  02969	6a 00		 push	 0
  0296b	6a 00		 push	 0
  0296d	6a 00		 push	 0
  0296f	6a 00		 push	 0
  02971	6a 55		 push	 85			; 00000055H
  02973	57		 push	 edi
  02974	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  02979	83 c4 1c	 add	 esp, 28			; 0000001cH
  0297c	e9 03 f5 ff ff	 jmp	 $LN459@Attack
$LN1055@Attack:

; 1984 : 					}
; 1985 : 					break;
; 1986 : 				case 232: //Strike of Destruction (Season4) add-on
; 1987 : 					{
; 1988 : 						lpTargetObj->lpAttackObj = lpObj;
; 1989 : 						lpTargetObj->DelayActionTime = 1000;
; 1990 : 						lpTargetObj->DelayLevel = 1;
; 1991 : 						
; 1992 : 						gObjApplyBuffEffectDuration(lpTargetObj, AT_DESTRUCTION, 20, 0, 0, 0, 10);

  02981	6a 0a		 push	 10			; 0000000aH

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02983	dd d8		 fstp	 ST(0)
  02985	6a 00		 push	 0
  02987	6a 00		 push	 0
  02989	6a 00		 push	 0
  0298b	6a 14		 push	 20			; 00000014H
  0298d	6a 56		 push	 86			; 00000056H
  0298f	57		 push	 edi
  02990	89 b7 d4 03 00
	00		 mov	 DWORD PTR [edi+980], esi
  02996	c7 87 c0 03 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+960], 1000 ; 000003e8H
  029a0	c6 87 c4 03 00
	00 01		 mov	 BYTE PTR [edi+964], 1
  029a7	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  029ac	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  029b1	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  029b7	c1 fa 02	 sar	 edx, 2
  029ba	8b ca		 mov	 ecx, edx
  029bc	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  029bf	8d 94 0a c8 00
	00 00		 lea	 edx, DWORD PTR [edx+ecx+200]
  029c6	0f af 55 1c	 imul	 edx, DWORD PTR _AttackDamage$[ebp]
  029ca	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  029cf	f7 ea		 imul	 edx
  029d1	c1 fa 05	 sar	 edx, 5
  029d4	8b c2		 mov	 eax, edx
  029d6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  029d9	83 c4 1c	 add	 esp, 28			; 0000001cH
  029dc	03 c2		 add	 eax, edx
  029de	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  029e1	e9 9e f4 ff ff	 jmp	 $LN459@Attack
$LN1054@Attack:

; 1993 : 
; 1994 : 						AttackDamage = ( AttackDamage * ( (Energy/10) + 200 ) ) / 100;
; 1995 : 					}
; 1996 : 					break;
; 1997 : 				case 236: //Flame Strike (Season4) add-on
; 1998 : 					{
; 1999 : 						AttackDamage *= 2;

  029e6	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  029e9	dd d8		 fstp	 ST(0)
  029eb	6a 01		 push	 1
  029ed	6a 00		 push	 0
  029ef	6a 00		 push	 0
  029f1	6a 00		 push	 0
  029f3	6a 00		 push	 0
  029f5	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  029f8	6a 53		 push	 83			; 00000053H
  029fa	57		 push	 edi
  029fb	89 55 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edx
  029fe	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  02a03	83 c4 1c	 add	 esp, 28			; 0000001cH
  02a06	e9 79 f4 ff ff	 jmp	 $LN459@Attack
$LN1053@Attack:

; 2000 : 						
; 2001 : 						gObjApplyBuffEffectDuration(lpTargetObj, AT_FLAME_STRIKE, 0, 0, 0, 0, 1);
; 2002 : 					}
; 2003 : 					break;
; 2004 : 				case 237: //Gigantic Storm (Season4) add-on
; 2005 : 					{						
; 2006 : 						gObjApplyBuffEffectDuration(lpTargetObj, AT_GIGANTIC_STORM, 0, 0, 0, 0, 1);

  02a0b	6a 01		 push	 1

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02a0d	dd d8		 fstp	 ST(0)
  02a0f	6a 00		 push	 0
  02a11	6a 00		 push	 0
  02a13	6a 00		 push	 0
  02a15	6a 00		 push	 0
  02a17	6a 54		 push	 84			; 00000054H
  02a19	57		 push	 edi
  02a1a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  02a1f	83 c4 1c	 add	 esp, 28			; 0000001cH
  02a22	e9 5d f4 ff ff	 jmp	 $LN459@Attack
$LN1052@Attack:

; 2007 : 					}
; 2008 : 					break;
; 2009 : 				case 238: //Chaotic Diseier (Season4) add-on
; 2010 : 					{						
; 2011 : 						AttackDamage = ( AttackDamage * ( (Energy/25) + 200 ) ) / 100;

  02a27	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02a2c	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  02a32	c1 fa 03	 sar	 edx, 3
  02a35	8b c2		 mov	 eax, edx
  02a37	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02a3a	8d 8c 02 c8 00
	00 00		 lea	 ecx, DWORD PTR [edx+eax+200]
  02a41	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02a45	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02a4a	f7 e9		 imul	 ecx
  02a4c	c1 fa 05	 sar	 edx, 5
  02a4f	8b ca		 mov	 ecx, edx
  02a51	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02a54	03 ca		 add	 ecx, edx

; 2012 : 					}
; 2013 : 					break;

  02a56	e9 24 f4 ff ff	 jmp	 $LN1206@Attack
$LN1051@Attack:

; 2014 : 				case 250: //Unknown Skill ID (Season4) add-on
; 2015 : 					{						
; 2016 : 						AttackDamage *= 2;

  02a5b	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  02a5e	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  02a61	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2017 : 					}
; 2018 : 					break;

  02a64	e9 19 f4 ff ff	 jmp	 $LN1040@Attack
$LN1050@Attack:

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02a69	dd d8		 fstp	 ST(0)
  02a6b	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  02a6e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@400199999999999a
  02a74	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5531[ebp]
  02a7a	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5531[ebp]
  02a80	e8 00 00 00 00	 call	 __ftol2_sse
  02a85	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02a88	e9 f7 f3 ff ff	 jmp	 $LN459@Attack
$LN1049@Attack:
  02a8d	dd d8		 fstp	 ST(0)
  02a8f	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  02a92	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4002666666666666
  02a98	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5523[ebp]
  02a9e	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5523[ebp]
  02aa4	e8 00 00 00 00	 call	 __ftol2_sse
  02aa9	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02aac	e9 d3 f3 ff ff	 jmp	 $LN459@Attack
$LN341@Attack:

; 2019 : 				case 251: //Unknown Skill ID (Season4) add-on
; 2020 : 					{	
; 2021 : 						AttackDamage = (int)((float)((float)AttackDamage * 2.2));
; 2022 : 					}
; 2023 : 					break;
; 2024 : 				case 252: //Unknown Skill ID (Season4) add-on
; 2025 : 					{						
; 2026 : 						AttackDamage = (int)((float)((float)AttackDamage * 2.3));
; 2027 : 					}
; 2028 : 					break;
; 2029 : 				case 253: //Unknown Skill ID (Season4) add-on
; 2030 : 					{						
; 2031 : 						AttackDamage = (int)((float)((float)AttackDamage * 2.5));

  02ab1	da 4d 1c	 fimul	 DWORD PTR _AttackDamage$[ebp]
  02ab4	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv5515[ebp]
  02aba	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR tv5515[ebp]
  02ac0	e8 00 00 00 00	 call	 __ftol2_sse
  02ac5	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2032 : 					}
; 2033 : 					break;

  02ac8	e9 b7 f3 ff ff	 jmp	 $LN459@Attack
$LN1048@Attack:

; 2034 : 
; 2035 : 				case 239:
; 2036 : 					gObjBackSpring(lpTargetObj,lpObj);

  02acd	56		 push	 esi

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02ace	dd d8		 fstp	 ST(0)
  02ad0	57		 push	 edi
  02ad1	e8 00 00 00 00	 call	 ?gObjBackSpring@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjBackSpring
  02ad6	83 c4 08	 add	 esp, 8
  02ad9	e9 a6 f3 ff ff	 jmp	 $LN459@Attack
$LN1047@Attack:

; 2037 : 					break;
; 2038 : 				case 260:
; 2039 : 				case 261:
; 2040 : #ifdef _FIX_
; 2041 : 					AttackDamage = AttackDamage*(50 + (Dexterity / 10)) / 100.0f;

  02ade	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02ae3	dd d8		 fstp	 ST(0)
  02ae5	f7 ad b0 fe ff
	ff		 imul	 DWORD PTR _Dexterity$[ebp]
  02aeb	c1 fa 02	 sar	 edx, 2
  02aee	8b ca		 mov	 ecx, edx
  02af0	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02af3	8d 54 0a 32	 lea	 edx, DWORD PTR [edx+ecx+50]
  02af7	0f af 55 1c	 imul	 edx, DWORD PTR _AttackDamage$[ebp]
  02afb	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv5505[ebp], edx
  02b01	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5505[ebp]
  02b07	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02b0d	e8 00 00 00 00	 call	 __ftol2_sse
  02b12	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02b15	e9 6a f3 ff ff	 jmp	 $LN459@Attack
$LN1046@Attack:

; 2042 : #else
; 2043 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2044 : #endif
; 2045 : 					break;
; 2046 : 				case 262:	// -> Chain Drive
; 2047 : 					{
; 2048 : #ifdef _FIX_
; 2049 : 						if(g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  02b1a	6a 17		 push	 23			; 00000017H

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02b1c	dd d8		 fstp	 ST(0)
  02b1e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  02b23	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  02b28	84 c0		 test	 al, al
  02b2a	75 4a		 jne	 SHORT $LN336@Attack

; 2042 : #else
; 2043 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2044 : #endif
; 2045 : 					break;
; 2046 : 				case 262:	// -> Chain Drive
; 2047 : 					{
; 2048 : #ifdef _FIX_
; 2049 : 						if(g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  02b2c	6a 24		 push	 36			; 00000024H
  02b2e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  02b33	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  02b38	84 c0		 test	 al, al
  02b3a	75 3a		 jne	 SHORT $LN336@Attack

; 2052 : 						}
; 2053 : 						else
; 2054 : 						{
; 2055 : 							AttackDamage = (AttackDamage)*(50+(Dexterity/10))/100.0f;

  02b3c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02b41	f7 ad b0 fe ff
	ff		 imul	 DWORD PTR _Dexterity$[ebp]
  02b47	c1 fa 02	 sar	 edx, 2
  02b4a	8b c2		 mov	 eax, edx
  02b4c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02b4f	8d 4c 02 32	 lea	 ecx, DWORD PTR [edx+eax+50]
  02b53	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02b57	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv5494[ebp], ecx
  02b5d	db 85 e0 fe ff
	ff		 fild	 DWORD PTR tv5494[ebp]
  02b63	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02b69	e8 00 00 00 00	 call	 __ftol2_sse
  02b6e	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02b71	e9 0e f3 ff ff	 jmp	 $LN459@Attack
$LN336@Attack:

; 2050 : 						{
; 2051 : 							AttackDamage = (AttackDamage)*(50+(Vitality/g_UserConfig.m_Usilevich.ChainDriveVitality))/100.0f;

  02b76	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _Vitality$[ebp]
  02b7c	99		 cdq
  02b7d	f7 3d 04 00 00
	00		 idiv	 DWORD PTR ?g_UserConfig@@3VCUserConfig@@A+4
  02b83	83 c0 32	 add	 eax, 50			; 00000032H
  02b86	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02b8a	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv5485[ebp], eax
  02b90	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5485[ebp]
  02b96	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02b9c	e8 00 00 00 00	 call	 __ftol2_sse
  02ba1	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2056 : 						}
; 2057 : #else
; 2058 : 						AttackDamage = (AttackDamage)*(50+(Vitality/10))/100.0f;
; 2059 : #endif
; 2060 : 					}
; 2061 : 					break;

  02ba4	e9 db f2 ff ff	 jmp	 $LN459@Attack
$LN1045@Attack:

; 2062 : 				case 263:	// -> Dark Side
; 2063 : 					{
; 2064 : 						if(g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  02ba9	6a 17		 push	 23			; 00000017H

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02bab	dd d8		 fstp	 ST(0)
  02bad	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  02bb2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  02bb7	84 c0		 test	 al, al
  02bb9	75 4a		 jne	 SHORT $LN332@Attack

; 2062 : 				case 263:	// -> Dark Side
; 2063 : 					{
; 2064 : 						if(g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  02bbb	6a 24		 push	 36			; 00000024H
  02bbd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  02bc2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  02bc7	84 c0		 test	 al, al
  02bc9	75 3a		 jne	 SHORT $LN332@Attack

; 2067 : 						}
; 2068 : 						else
; 2069 : 						{
; 2070 : 							AttackDamage = (AttackDamage)*(/*100*/50 + /*(Dexterity/8) +*/ (Energy/10))/100.0f;

  02bcb	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02bd0	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  02bd6	c1 fa 02	 sar	 edx, 2
  02bd9	8b c2		 mov	 eax, edx
  02bdb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02bde	8d 4c 02 32	 lea	 ecx, DWORD PTR [edx+eax+50]
  02be2	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02be6	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv5474[ebp], ecx
  02bec	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5474[ebp]
  02bf2	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02bf8	e8 00 00 00 00	 call	 __ftol2_sse
  02bfd	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02c00	e9 7f f2 ff ff	 jmp	 $LN459@Attack
$LN332@Attack:

; 2065 : 						{
; 2066 : 							AttackDamage = (AttackDamage)*(50 + (Dexterity/g_UserConfig.m_Usilevich.DarkSideAgility))/100.0f;

  02c05	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _Dexterity$[ebp]
  02c0b	99		 cdq
  02c0c	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?g_UserConfig@@3VCUserConfig@@A
  02c12	83 c0 32	 add	 eax, 50			; 00000032H
  02c15	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02c19	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv5465[ebp], eax
  02c1f	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5465[ebp]
  02c25	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02c2b	e8 00 00 00 00	 call	 __ftol2_sse
  02c30	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2071 : 						}
; 2072 : 					}
; 2073 : 					break;

  02c33	e9 4c f2 ff ff	 jmp	 $LN459@Attack
$LN1044@Attack:

; 2074 : 				case 264:	// -> Dragon Roar
; 2075 : 					{
; 2076 : 						if(g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  02c38	6a 17		 push	 23			; 00000017H

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02c3a	dd d8		 fstp	 ST(0)
  02c3c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  02c41	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  02c46	84 c0		 test	 al, al
  02c48	75 4a		 jne	 SHORT $LN328@Attack

; 2074 : 				case 264:	// -> Dragon Roar
; 2075 : 					{
; 2076 : 						if(g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  02c4a	6a 24		 push	 36			; 00000024H
  02c4c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  02c51	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  02c56	84 c0		 test	 al, al
  02c58	75 3a		 jne	 SHORT $LN328@Attack

; 2079 : 						}
; 2080 : 						else
; 2081 : 						{
; 2082 : 							AttackDamage = (AttackDamage)*(50 + (Energy/10))/100.0f;

  02c5a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02c5f	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  02c65	c1 fa 02	 sar	 edx, 2
  02c68	8b c2		 mov	 eax, edx
  02c6a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02c6d	8d 4c 02 32	 lea	 ecx, DWORD PTR [edx+eax+50]
  02c71	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02c75	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv5453[ebp], ecx
  02c7b	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5453[ebp]
  02c81	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02c87	e8 00 00 00 00	 call	 __ftol2_sse
  02c8c	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02c8f	e9 f0 f1 ff ff	 jmp	 $LN459@Attack
$LN328@Attack:

; 2077 : 						{
; 2078 : 							AttackDamage = (AttackDamage)*(50 + (Energy/g_UserConfig.m_Usilevich.DragonRoarEnergy))/100.0f;

  02c94	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _Energy$[ebp]
  02c9a	99		 cdq
  02c9b	f7 3d 08 00 00
	00		 idiv	 DWORD PTR ?g_UserConfig@@3VCUserConfig@@A+8
  02ca1	83 c0 32	 add	 eax, 50			; 00000032H
  02ca4	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02ca8	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv5444[ebp], eax
  02cae	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5444[ebp]
  02cb4	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02cba	e8 00 00 00 00	 call	 __ftol2_sse
  02cbf	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2083 : 						}
; 2084 : 					}
; 2085 : 					break;

  02cc2	e9 bd f1 ff ff	 jmp	 $LN459@Attack
$LN1043@Attack:

; 2086 : 				case 265:
; 2087 : 					//if( lpTargetObj->Type == OBJ_USER )
; 2088 : 					//{
; 2089 : 						AttackDamage = AttackDamage * (50 + (Energy/10)) / 100.0f;

  02cc7	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02ccc	dd d8		 fstp	 ST(0)
  02cce	f7 ad b4 fe ff
	ff		 imul	 DWORD PTR _Energy$[ebp]
  02cd4	c1 fa 02	 sar	 edx, 2
  02cd7	8b c2		 mov	 eax, edx
  02cd9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02cdc	8d 4c 02 32	 lea	 ecx, DWORD PTR [edx+eax+50]
  02ce0	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02ce4	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv5433[ebp], ecx
  02cea	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5433[ebp]
  02cf0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02cf6	e8 00 00 00 00	 call	 __ftol2_sse
  02cfb	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02cfe	e9 81 f1 ff ff	 jmp	 $LN459@Attack
$LN1042@Attack:

; 2090 : 					//}
; 2091 : 					//else
; 2092 : 					//{
; 2093 : 					//	AttackDamage = ((AttackDamage * (50 + (Energy/10)) / 100.0f) + 100.0f)*3.0f;
; 2094 : 					//}
; 2095 : 					break;
; 2096 : 				case 269:
; 2097 : #ifdef _FIX_
; 2098 : 					AttackDamage = AttackDamage*(50 + (Dexterity / 10)) / 100.0f;

  02d03	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 2099 : #else
; 2100 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2101 : #endif
; 2102 : 					break;
; 2103 : 				case 270:
; 2104 : #ifdef _FIX_
; 2105 : 					AttackDamage = AttackDamage*( 200 + (Dexterity/10) ) / 100.0f;

  02d08	dd d8		 fstp	 ST(0)
  02d0a	f7 ad b0 fe ff
	ff		 imul	 DWORD PTR _Dexterity$[ebp]
  02d10	c1 fa 02	 sar	 edx, 2
  02d13	8b c2		 mov	 eax, edx
  02d15	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02d18	8d 4c 02 32	 lea	 ecx, DWORD PTR [edx+eax+50]
  02d1c	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02d20	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv5420[ebp], ecx
  02d26	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5420[ebp]
  02d2c	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02d32	e8 00 00 00 00	 call	 __ftol2_sse
  02d37	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02d3a	e9 45 f1 ff ff	 jmp	 $LN459@Attack
$LN1041@Attack:
  02d3f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02d44	dd d8		 fstp	 ST(0)
  02d46	f7 ad b0 fe ff
	ff		 imul	 DWORD PTR _Dexterity$[ebp]
  02d4c	c1 fa 02	 sar	 edx, 2
  02d4f	8b c2		 mov	 eax, edx
  02d51	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02d54	8d 8c 02 c8 00
	00 00		 lea	 ecx, DWORD PTR [edx+eax+200]
  02d5b	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02d5f	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv5409[ebp], ecx
  02d65	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5409[ebp]
  02d6b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02d71	e8 00 00 00 00	 call	 __ftol2_sse
  02d76	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02d79	e9 06 f1 ff ff	 jmp	 $LN459@Attack
$LN314@Attack:

; 2143 : 				{
; 2144 : 				case 330:
; 2145 : 				case 332:
; 2146 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100;

  02d7e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp]
  02d84	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02d88	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02d8d	f7 e9		 imul	 ecx
  02d8f	c1 fa 05	 sar	 edx, 5
  02d92	8b c2		 mov	 eax, edx
  02d94	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02d97	03 c2		 add	 eax, edx
  02d99	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2147 : 					break;

  02d9c	e9 31 06 00 00	 jmp	 $LN315@Attack
$LN313@Attack:

; 2148 : 				case 481:
; 2149 : 					AttackDamage *= 2;

  02da1	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  02da4	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  02da7	89 55 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edx

; 2150 : 					break;

  02daa	e9 23 06 00 00	 jmp	 $LN315@Attack
$LN312@Attack:

; 2151 : 				case 326:
; 2152 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100.0f;

  02daf	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp]
  02db5	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02db9	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv5033[ebp], eax
  02dbf	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv5033[ebp]
  02dc5	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02dcb	e8 00 00 00 00	 call	 __ftol2_sse
  02dd0	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2153 : 					break;

  02dd3	e9 fa 05 00 00	 jmp	 $LN315@Attack
$LN311@Attack:

; 2154 : 				case 479:
; 2155 : 					AttackDamage *= 2;

  02dd8	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  02ddb	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  02dde	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 2156 : 					break;

  02de1	e9 ec 05 00 00	 jmp	 $LN315@Attack
$LN310@Attack:

; 2157 : 				case 327:
; 2158 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100.0f;

  02de6	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp]
  02dec	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02df0	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4926[ebp], eax
  02df6	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4926[ebp]
  02dfc	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02e02	e8 00 00 00 00	 call	 __ftol2_sse
  02e07	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2159 : 					break;

  02e0a	e9 c3 05 00 00	 jmp	 $LN315@Attack
$LN309@Attack:

; 2160 : 				case 328:
; 2161 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100.0f;

  02e0f	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp]
  02e15	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02e19	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4828[ebp], eax
  02e1f	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4828[ebp]
  02e25	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02e2b	e8 00 00 00 00	 call	 __ftol2_sse
  02e30	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2162 : 					break;

  02e33	e9 9a 05 00 00	 jmp	 $LN315@Attack
$LN308@Attack:

; 2163 : 				case 329:
; 2164 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100.0f;

  02e38	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp]
  02e3e	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02e42	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4822[ebp], eax
  02e48	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4822[ebp]
  02e4e	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02e54	e8 00 00 00 00	 call	 __ftol2_sse
  02e59	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2165 : 					break;

  02e5c	e9 71 05 00 00	 jmp	 $LN315@Attack
$LN307@Attack:

; 2166 : 				case 337:
; 2167 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100.0f;

  02e61	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp]
  02e67	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02e6b	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4816[ebp], eax
  02e71	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4816[ebp]
  02e77	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  02e7d	e8 00 00 00 00	 call	 __ftol2_sse
  02e82	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2168 : 					break;

  02e85	e9 48 05 00 00	 jmp	 $LN315@Attack
$LN306@Attack:

; 2169 : 				case 416:
; 2170 : 					AttackDamage *= 2;

  02e8a	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  02e8d	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  02e90	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2171 : 					break;

  02e93	e9 3a 05 00 00	 jmp	 $LN315@Attack
$LN304@Attack:

; 2172 : 				case 424:
; 2173 : 					AttackDamage *= 2;
; 2174 : 					break;
; 2175 : 				case 516:
; 2176 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDL ) / 100;

  02e98	0f af 5d 1c	 imul	 ebx, DWORD PTR _AttackDamage$[ebp]

; 2177 : 
; 2178 : 					if( iSkillValue > 0 )

  02e9c	d9 ee		 fldz
  02e9e	d9 85 d8 fe ff
	ff		 fld	 DWORD PTR _iSkillValue$222853[ebp]
  02ea4	d8 d1		 fcom	 ST(1)
  02ea6	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02eab	f7 eb		 imul	 ebx
  02ead	c1 fa 05	 sar	 edx, 5
  02eb0	8b c2		 mov	 eax, edx
  02eb2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02eb5	03 c2		 add	 eax, edx
  02eb7	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02eba	df e0		 fnstsw	 ax
  02ebc	dd d9		 fstp	 ST(1)
  02ebe	f6 c4 41	 test	 ah, 65			; 00000041H
  02ec1	0f 85 09 05 00
	00		 jne	 $LN1080@Attack

; 2179 : 					{
; 2180 : 						float fPercent = rand()%100;
; 2181 : 
; 2182 : 						if( iSkillValue < fPercent )

  02ec7	dd 9d c4 fe ff
	ff		 fstp	 QWORD PTR tv2887[ebp]
  02ecd	e8 00 00 00 00	 call	 _rand
  02ed2	99		 cdq
  02ed3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02ed8	f7 f9		 idiv	 ecx
  02eda	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv4791[ebp], edx
  02ee0	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4791[ebp]
  02ee6	dc 9d c4 fe ff
	ff		 fcomp	 QWORD PTR tv2887[ebp]
$LN1236@Attack:
  02eec	df e0		 fnstsw	 ax
  02eee	f6 c4 41	 test	 ah, 65			; 00000041H
  02ef1	0f 85 db 04 00
	00		 jne	 $LN315@Attack

; 2183 : 						{
; 2184 : 							if(!g_ZtLicense.CheckUser(eZtUB::Stone))

  02ef7	6a 37		 push	 55			; 00000037H
  02ef9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  02efe	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  02f03	84 c0		 test	 al, al
  02f05	75 15		 jne	 SHORT $LN301@Attack

; 2185 : 							{
; 2186 : 								gObjApplyBuffEffectDuration(lpTargetObj,AT_STUN,0,0,0,0,2);

  02f07	6a 02		 push	 2
  02f09	6a 00		 push	 0
  02f0b	6a 00		 push	 0
  02f0d	6a 00		 push	 0
  02f0f	6a 00		 push	 0
  02f11	6a 3d		 push	 61			; 0000003dH
  02f13	57		 push	 edi
  02f14	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  02f19	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN301@Attack:

; 2187 : 							}
; 2188 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  02f1c	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  02f23	0f bf 87 44 01
	00 00		 movsx	 eax, WORD PTR [edi+324]
  02f2a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  02f2c	52		 push	 edx
  02f2d	50		 push	 eax
  02f2e	51		 push	 ecx
  02f2f	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  02f34	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2189 : 						}
; 2190 : 					}
; 2191 : 					break;

  02f37	e9 96 04 00 00	 jmp	 $LN315@Attack
$LN300@Attack:

; 2192 : 				case 514:
; 2193 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDL ) / 100;

  02f3c	0f af 5d 1c	 imul	 ebx, DWORD PTR _AttackDamage$[ebp]

; 2194 : 
; 2195 : 					if( iSkillValue > 0 )

  02f40	d9 ee		 fldz
  02f42	d8 9d d8 fe ff
	ff		 fcomp	 DWORD PTR _iSkillValue$222853[ebp]
  02f48	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02f4d	f7 eb		 imul	 ebx
  02f4f	c1 fa 05	 sar	 edx, 5
  02f52	8b c2		 mov	 eax, edx
  02f54	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02f57	03 c2		 add	 eax, edx
  02f59	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02f5c	df e0		 fnstsw	 ax
  02f5e	f6 c4 05	 test	 ah, 5
  02f61	0f 8a 6b 04 00
	00		 jp	 $LN315@Attack

; 2196 : 					{
; 2197 : 						float fPercent = rand()%100;

  02f67	e8 00 00 00 00	 call	 _rand
  02f6c	99		 cdq
  02f6d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02f72	f7 f9		 idiv	 ecx

; 2198 : 
; 2199 : 						if( fPercent < iSkillValue )

  02f74	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv4766[ebp], edx
  02f7a	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4766[ebp]
  02f80	d9 85 d8 fe ff
	ff		 fld	 DWORD PTR _iSkillValue$222853[ebp]
  02f86	de d9		 fcompp

; 2200 : 						{
; 2201 : 							if(!g_ZtLicense.CheckUser(eZtUB::Stone))
; 2202 : 							{
; 2203 : 								gObjApplyBuffEffectDuration(lpTargetObj,AT_STUN,0,0,0,0,2);
; 2204 : 							}
; 2205 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 2206 : 						}
; 2207 : 					}
; 2208 : 					break;

  02f88	e9 5f ff ff ff	 jmp	 $LN1236@Attack
$LN296@Attack:

; 2209 : 				case 509:
; 2210 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDL ) / 100;

  02f8d	0f af 5d 1c	 imul	 ebx, DWORD PTR _AttackDamage$[ebp]
  02f91	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02f96	f7 eb		 imul	 ebx
  02f98	c1 fa 05	 sar	 edx, 5
  02f9b	8b c2		 mov	 eax, edx
  02f9d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02fa0	03 c2		 add	 eax, edx
  02fa2	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2211 : 					break;

  02fa5	e9 28 04 00 00	 jmp	 $LN315@Attack
$LN295@Attack:

; 2212 : 				case 512:
; 2213 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDL ) / 100;

  02faa	0f af 5d 1c	 imul	 ebx, DWORD PTR _AttackDamage$[ebp]
  02fae	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02fb3	f7 eb		 imul	 ebx
  02fb5	c1 fa 05	 sar	 edx, 5
  02fb8	8b ca		 mov	 ecx, edx
  02fba	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02fbd	03 ca		 add	 ecx, edx
  02fbf	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 2214 : 					break;

  02fc2	e9 0b 04 00 00	 jmp	 $LN315@Attack
$LN293@Attack:

; 2215 : 				case 508:
; 2216 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDL ) / 100;
; 2217 : 					break;
; 2218 : 				case 336:
; 2219 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100;

  02fc7	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _iMasterSkillDMGPercentDK$222856[ebp]
  02fcd	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02fd1	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02fd6	f7 e9		 imul	 ecx
  02fd8	c1 fa 05	 sar	 edx, 5
  02fdb	8b ca		 mov	 ecx, edx
  02fdd	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02fe0	03 ca		 add	 ecx, edx
  02fe2	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 2220 : 					break;

  02fe5	e9 e8 03 00 00	 jmp	 $LN315@Attack
$LN288@Attack:

; 2221 : 				case 331:
; 2222 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDK ) / 100;
; 2223 : 					break;
; 2224 : 				case 493:
; 2225 : 					AttackDamage *= 2;
; 2226 : 					break;
; 2227 : 				case 482:
; 2228 : 					AttackDamage *= 2;
; 2229 : 					break;
; 2230 : 				case 518:
; 2231 : 					AttackDamage = ( AttackDamage * iMasterSkillDMGPercentDL ) / 100;
; 2232 : 					break;
; 2233 : 				case 454:
; 2234 : 					{
; 2235 : 						//int skillSuccessRate = 0;
; 2236 : 
; 2237 : 						//if( lpTargetObj->Type == OBJ_MONSTER )
; 2238 : 						//{
; 2239 : 						//	skillSuccessRate = 20 + lpObj->Energy/30 + lpObj->m_iSummonerBookSpell/6;
; 2240 : 						//}
; 2241 : 						//else if( lpTargetObj->Type == OBJ_USER )
; 2242 : 						//{
; 2243 : 						//	skillSuccessRate = 15 + lpObj->Energy/37 + lpObj->m_iSummonerBookSpell/6;
; 2244 : 						//}
; 2245 : 
; 2246 : 						//skillSuccessRate += iSkillValue;
; 2247 : 
; 2248 : 						//if( skillSuccessRate < rand()%100 )
; 2249 : 						//{
; 2250 : 						//	GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 2251 : 						//	return 0;
; 2252 : 						//}
; 2253 : 
; 2254 : 						//int nEffectTime = 0;
; 2255 : 
; 2256 : 						//if( lpTargetObj->Type == OBJ_MONSTER )
; 2257 : 						//{
; 2258 : 						//	nEffectTime = (5 + lpObj->Energy /100) - lpTargetObj->Level / 20;
; 2259 : 						//}
; 2260 : 						//else if( lpTargetObj->Type == OBJ_USER )
; 2261 : 						//{
; 2262 : 						//	nEffectTime = 4 + ((lpObj->Energy /250) + (lpObj->Level - lpTargetObj->Level) / 100);
; 2263 : 						//}
; 2264 : 
; 2265 : 						//if( nEffectTime < 1 )
; 2266 : 						//{
; 2267 : 						//	GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 2268 : 						//	return FALSE;
; 2269 : 						//}
; 2270 : 
; 2271 : 						//if( gObjCheckBuffEffectValue(lpTargetObj,72,nEffectTime,0) == TRUE )
; 2272 : 						//{
; 2273 : 						//	GCMagicAttackNumberSend(lpObj,219,lpTargetObj->m_Index,0);
; 2274 : 						//	return FALSE;
; 2275 : 						//}
; 2276 : 
; 2277 : 						//gObjApplyBuffEffectDuration(lpTargetObj,72,25,nEffectTime,0,0,nEffectTime);
; 2278 : 						//return TRUE;
; 2279 : 
; 2280 : 						int Rate = 0;
; 2281 : 
; 2282 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  02fea	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  02fee	33 db		 xor	 ebx, ebx
  02ff0	83 f8 02	 cmp	 eax, 2
  02ff3	75 40		 jne	 SHORT $LN287@Attack

; 2283 : 						{
; 2284 : 							Rate = g_SkillAdditionInfo.m_SleepRateStartVsMob + lpObj->Energy / g_SkillAdditionInfo.m_SleepRateDivVsMob + lpObj->m_iSummonerBookSpell / 6;

  02ff5	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  02ffc	0f b7 0d 12 0d
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3346
  03003	99		 cdq
  03004	f7 f9		 idiv	 ecx
  03006	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv1632[ebp], eax
  0300c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  03011	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  03017	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv1632[ebp]
  0301d	8b da		 mov	 ebx, edx
  0301f	03 c2		 add	 eax, edx
  03021	0f b7 15 10 0d
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3344
  03028	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0302b	03 d8		 add	 ebx, eax

; 2285 : 
; 2286 : 							if(g_SkillAdditionInfo.m_SleepRateMaxVsMob	!= 0)

  0302d	66 a1 14 0d 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3348

; 2287 : 							{
; 2288 : 								if(Rate > g_SkillAdditionInfo.m_SleepRateMaxVsMob)
; 2289 : 								{
; 2290 : 									Rate = g_SkillAdditionInfo.m_SleepRateMaxVsMob;
; 2291 : 								}
; 2292 : 							}
; 2293 : 						}

  03033	eb 43		 jmp	 SHORT $LN1210@Attack
$LN287@Attack:

; 2294 : 						else if( lpTargetObj->Type == OBJ_USER )

  03035	83 f8 01	 cmp	 eax, 1
  03038	75 4e		 jne	 SHORT $LN281@Attack

; 2295 : 						{
; 2296 : 							Rate = g_SkillAdditionInfo.m_SleepRateStartVsUser + lpObj->Energy / g_SkillAdditionInfo.m_SleepRateDivVsUser + lpObj->m_iSummonerBookSpell / 6;

  0303a	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  03041	0f b7 0d 1e 0d
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3358
  03048	99		 cdq
  03049	f7 f9		 idiv	 ecx
  0304b	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv1602[ebp], eax
  03051	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  03056	f7 ae a0 04 00
	00		 imul	 DWORD PTR [esi+1184]
  0305c	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv1602[ebp]
  03062	8b da		 mov	 ebx, edx
  03064	03 c2		 add	 eax, edx
  03066	0f b7 15 1c 0d
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3356
  0306d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  03070	03 d8		 add	 ebx, eax

; 2297 : 
; 2298 : 							if(g_SkillAdditionInfo.m_SleepRateMaxVsUser	!= 0)

  03072	66 a1 20 0d 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3360
$LN1210@Attack:
  03078	03 da		 add	 ebx, edx
  0307a	66 85 c0	 test	 ax, ax
  0307d	74 09		 je	 SHORT $LN281@Attack

; 2299 : 							{
; 2300 : 								if(Rate > g_SkillAdditionInfo.m_SleepRateMaxVsUser)

  0307f	0f b7 c0	 movzx	 eax, ax
  03082	3b d8		 cmp	 ebx, eax
  03084	7e 02		 jle	 SHORT $LN281@Attack

; 2301 : 								{
; 2302 : 									Rate = g_SkillAdditionInfo.m_SleepRateMaxVsUser;

  03086	8b d8		 mov	 ebx, eax
$LN281@Attack:

; 2303 : 								}
; 2304 : 							}
; 2305 : 						}
; 2306 : 
; 2307 : 						if( Rate < rand()%100)

  03088	e8 00 00 00 00	 call	 _rand
  0308d	99		 cdq
  0308e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03093	f7 f9		 idiv	 ecx
  03095	3b da		 cmp	 ebx, edx

; 2308 : 						{
; 2309 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 2310 : 							return FALSE;

  03097	0f 8c ef f2 ff
	ff		 jl	 $LN835@Attack

; 2311 : 						}
; 2312 : 
; 2313 : 						int SleepTime = 0;
; 2314 : 
; 2315 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  0309d	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  030a1	83 f8 02	 cmp	 eax, 2
  030a4	75 41		 jne	 SHORT $LN279@Attack

; 2316 : 						{
; 2317 : 							SleepTime = (g_SkillAdditionInfo.m_SleepTimeStartVsMob + lpObj->Energy /g_SkillAdditionInfo.m_SleepTimeDivVsMob) - lpTargetObj->Level / 20;

  030a6	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  030ad	0f b7 0d 18 0d
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3352
  030b4	99		 cdq
  030b5	f7 f9		 idiv	 ecx
  030b7	0f bf 8f be 00
	00 00		 movsx	 ecx, WORD PTR [edi+190]
  030be	8b d8		 mov	 ebx, eax
  030c0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  030c5	f7 e9		 imul	 ecx
  030c7	0f b7 0d 16 0d
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3350
  030ce	c1 fa 03	 sar	 edx, 3
  030d1	8b c2		 mov	 eax, edx
  030d3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  030d6	03 c2		 add	 eax, edx
  030d8	2b d8		 sub	 ebx, eax

; 2318 : 
; 2319 : 							if(g_SkillAdditionInfo.m_SleepTimeMaxVsMob != 0)

  030da	66 a1 1a 0d 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3354
  030e0	03 d9		 add	 ebx, ecx

; 2320 : 							{
; 2321 : 								if(SleepTime > g_SkillAdditionInfo.m_SleepTimeMaxVsMob)
; 2322 : 								{
; 2323 : 									SleepTime = g_SkillAdditionInfo.m_SleepTimeMaxVsMob;
; 2324 : 								}
; 2325 : 							}
; 2326 : 						}

  030e2	e9 5f f3 ff ff	 jmp	 $LN1199@Attack
$LN279@Attack:

; 2327 : 						else if( lpTargetObj->Type == OBJ_USER )

  030e7	83 f8 01	 cmp	 eax, 1
  030ea	0f 85 69 f3 ff
	ff		 jne	 $LN894@Attack

; 2328 : 						{
; 2329 : 							SleepTime = g_SkillAdditionInfo.m_SleepTimeStartVsUser + ((lpObj->Energy /g_SkillAdditionInfo.m_SleepTimeDivVsUser) + (lpObj->Level - lpTargetObj->Level) / 100);

  030f0	0f bf 97 be 00
	00 00		 movsx	 edx, WORD PTR [edi+190]
  030f7	0f bf 8e be 00
	00 00		 movsx	 ecx, WORD PTR [esi+190]
  030fe	2b ca		 sub	 ecx, edx
  03100	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03105	f7 e9		 imul	 ecx
  03107	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  0310e	0f b7 0d 24 0d
	00 00		 movzx	 ecx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3364
  03115	c1 fa 05	 sar	 edx, 5
  03118	8b da		 mov	 ebx, edx
  0311a	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0311d	03 da		 add	 ebx, edx
  0311f	99		 cdq
  03120	f7 f9		 idiv	 ecx
  03122	0f b7 15 22 0d
	00 00		 movzx	 edx, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3362
  03129	03 d8		 add	 ebx, eax

; 2330 : 
; 2331 : 							if(g_SkillAdditionInfo.m_SleepTimeMaxVsUser != 0)

  0312b	66 a1 26 0d 00
	00		 mov	 ax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+3366

; 2332 : 							{
; 2333 : 								if(SleepTime > g_SkillAdditionInfo.m_SleepTimeMaxVsUser)
; 2334 : 								{
; 2335 : 									SleepTime = g_SkillAdditionInfo.m_SleepTimeMaxVsUser;
; 2336 : 								}
; 2337 : 							}
; 2338 : 						}
; 2339 : 
; 2340 : 						if( SleepTime < 1 )
; 2341 : 						{
; 2342 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 2343 : 							return FALSE;

  03131	e9 0e f3 ff ff	 jmp	 $LN1241@Attack
$LN270@Attack:

; 2344 : 						}
; 2345 : 
; 2346 : 						if( gObjCheckBuffEffectValue(lpTargetObj,0x48,SleepTime,0) == TRUE )
; 2347 : 						{
; 2348 : 							GCMagicAttackNumberSend(lpObj,219,lpTargetObj->m_Index,0);
; 2349 : 							return FALSE;
; 2350 : 						}
; 2351 : 
; 2352 : 						gObjApplyBuffEffectDuration(lpTargetObj,72,25,SleepTime,0,0,SleepTime);
; 2353 : 						return TRUE;
; 2354 : 					}
; 2355 : 					break;
; 2356 : 				case 455:
; 2357 : 					switch( bCombo )

  03136	8b 45 20	 mov	 eax, DWORD PTR _bCombo$[ebp]
  03139	48		 dec	 eax
  0313a	74 4a		 je	 SHORT $LN267@Attack
  0313c	48		 dec	 eax
  0313d	74 2d		 je	 SHORT $LN266@Attack
  0313f	48		 dec	 eax

; 2366 : 						break;
; 2367 : 					default:
; 2368 : 						return FALSE;

  03140	0f 85 e9 d2 ff
	ff		 jne	 $LN1230@Attack

; 2363 : 						break;
; 2364 : 					case 3:
; 2365 : 						AttackDamage = AttackDamage * 50 / 100;

  03146	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03149	6b c9 32	 imul	 ecx, 50			; 00000032H
  0314c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03151	f7 e9		 imul	 ecx
  03153	c1 fa 05	 sar	 edx, 5
  03156	8b c2		 mov	 eax, edx
  03158	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0315b	03 c2		 add	 eax, edx
  0315d	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2369 : 					}
; 2370 : 
; 2371 : 					bCombo = FALSE;

  03160	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _bCombo$[ebp], 0

; 2372 : 					break;

  03167	e9 66 02 00 00	 jmp	 $LN315@Attack
$LN266@Attack:

; 2358 : 					{
; 2359 : 					case 1:
; 2360 : 						break;
; 2361 : 					case 2:
; 2362 : 						AttackDamage = AttackDamage * 70 / 100;

  0316c	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  0316f	6b c9 46	 imul	 ecx, 70			; 00000046H
  03172	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03177	f7 e9		 imul	 ecx
  03179	c1 fa 05	 sar	 edx, 5
  0317c	8b ca		 mov	 ecx, edx
  0317e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03181	03 ca		 add	 ecx, edx
  03183	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN267@Attack:

; 2369 : 					}
; 2370 : 
; 2371 : 					bCombo = FALSE;

  03186	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _bCombo$[ebp], 0

; 2372 : 					break;

  0318d	e9 40 02 00 00	 jmp	 $LN315@Attack
$LN263@Attack:

; 2373 : 				case 456:
; 2374 : 					gObjApplyBuffEffectDuration(lpTargetObj,85,0,0,0,0,1);

  03192	6a 01		 push	 1
  03194	6a 00		 push	 0
  03196	6a 00		 push	 0
  03198	6a 00		 push	 0
  0319a	6a 00		 push	 0
  0319c	6a 55		 push	 85			; 00000055H
  0319e	57		 push	 edi
  0319f	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  031a4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2375 : 					break;

  031a7	e9 26 02 00 00	 jmp	 $LN315@Attack
$LN262@Attack:

; 2376 : 				case 458:
; 2377 : 					{
; 2378 : 						int nAddHP = 0;
; 2379 : 
; 2380 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  031ac	0f b7 47 68	 movzx	 eax, WORD PTR [edi+104]
  031b0	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nAddHP$222927[ebp], 0
  031ba	83 f8 02	 cmp	 eax, 2
  031bd	75 5e		 jne	 SHORT $LN261@Attack

; 2381 : 						{
; 2382 : 							nAddHP = (int)(float(lpObj->Energy / 15) + float(lpTargetObj->Level / 2.5f));
; 2383 : 							nAddHP += iSkillValue;

  031bf	0f bf 97 be 00
	00 00		 movsx	 edx, WORD PTR [edi+190]
  031c6	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  031cd	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv4589[ebp], edx
  031d3	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  031d8	f7 e9		 imul	 ecx
  031da	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4589[ebp]
  031e0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4004000000000000
  031e6	03 d1		 add	 edx, ecx
  031e8	c1 fa 03	 sar	 edx, 3
  031eb	8b c2		 mov	 eax, edx
  031ed	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  031f0	03 c2		 add	 eax, edx
  031f2	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv4575[ebp]
  031f8	d9 85 dc fe ff
	ff		 fld	 DWORD PTR tv4575[ebp]
  031fe	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4567[ebp], eax
  03204	da 85 dc fe ff
	ff		 fiadd	 DWORD PTR tv4567[ebp]
  0320a	e8 00 00 00 00	 call	 __ftol2_sse
  0320f	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4559[ebp], eax
  03215	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4559[ebp]
  0321b	eb 46		 jmp	 SHORT $LN1214@Attack
$LN261@Attack:

; 2384 : 						}
; 2385 : 						else if( lpTargetObj->Type == OBJ_USER )

  0321d	83 f8 01	 cmp	 eax, 1
  03220	75 52		 jne	 SHORT $LN259@Attack

; 2386 : 						{
; 2387 : 							nAddHP = AttackDamage * 10 / 100 + lpObj->Energy / 23;
; 2388 : 							nAddHP += iSkillValue;

  03222	0f b7 8e fa 00
	00 00		 movzx	 ecx, WORD PTR [esi+250]
  03229	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  0322e	f7 e9		 imul	 ecx
  03230	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03233	03 d1		 add	 edx, ecx
  03235	c1 fa 04	 sar	 edx, 4
  03238	8b da		 mov	 ebx, edx
  0323a	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0323d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  03240	03 c9		 add	 ecx, ecx
  03242	03 da		 add	 ebx, edx
  03244	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03249	f7 e9		 imul	 ecx
  0324b	c1 fa 05	 sar	 edx, 5
  0324e	8b ca		 mov	 ecx, edx
  03250	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03253	03 da		 add	 ebx, edx
  03255	03 cb		 add	 ecx, ebx
  03257	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv4541[ebp], ecx
  0325d	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4541[ebp]
$LN1214@Attack:
  03263	d8 85 d8 fe ff
	ff		 fadd	 DWORD PTR _iSkillValue$222853[ebp]
  03269	e8 00 00 00 00	 call	 __ftol2_sse
  0326e	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _nAddHP$222927[ebp], eax
$LN259@Attack:

; 2389 : 						}
; 2390 : 	
; 2391 : 						int tmpLife = (int)(lpObj->Life + nAddHP);

  03274	db 85 d4 fe ff
	ff		 fild	 DWORD PTR _nAddHP$222927[ebp]
  0327a	d8 86 fc 00 00
	00		 fadd	 DWORD PTR [esi+252]
  03280	e8 00 00 00 00	 call	 __ftol2_sse
  03285	89 85 dc fe ff
	ff		 mov	 DWORD PTR _tmpLife$222932[ebp], eax

; 2392 : 	
; 2393 : 						if( tmpLife > lpObj->MaxLife + lpObj->AddLife )

  0328b	db 85 dc fe ff
	ff		 fild	 DWORD PTR _tmpLife$222932[ebp]
  03291	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv6525[ebp]
  03297	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  0329d	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  032a3	d9 85 dc fe ff
	ff		 fld	 DWORD PTR tv6525[ebp]
  032a9	d8 d1		 fcom	 ST(1)
  032ab	df e0		 fnstsw	 ax
  032ad	f6 c4 41	 test	 ah, 65			; 00000041H
  032b0	75 0a		 jne	 SHORT $LN1083@Attack
  032b2	dd d8		 fstp	 ST(0)

; 2394 : 						{
; 2395 : 							lpObj->Life = lpObj->MaxLife + lpObj->AddLife;

  032b4	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 2396 : 						}
; 2397 : 						else	

  032ba	eb 08		 jmp	 SHORT $LN257@Attack
$LN1083@Attack:

; 2392 : 	
; 2393 : 						if( tmpLife > lpObj->MaxLife + lpObj->AddLife )

  032bc	dd d9		 fstp	 ST(1)

; 2398 : 						{
; 2399 : 							lpObj->Life = (float)tmpLife;

  032be	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
$LN257@Attack:

; 2400 : 						}
; 2401 : 	
; 2402 : 						GCReFillSend(lpObj->m_Index,(int)lpObj->Life,0xFF,0,lpObj->iShield);

  032c4	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  032ca	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  032d0	52		 push	 edx
  032d1	6a 00		 push	 0
  032d3	68 ff 00 00 00	 push	 255			; 000000ffH
  032d8	e8 00 00 00 00	 call	 __ftol2_sse
  032dd	50		 push	 eax
  032de	8b 06		 mov	 eax, DWORD PTR [esi]
  032e0	50		 push	 eax
  032e1	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  032e6	83 c4 14	 add	 esp, 20			; 00000014H

; 2403 : 					}
; 2404 : 					break;

  032e9	e9 e4 00 00 00	 jmp	 $LN315@Attack
$LN256@Attack:

; 2405 : 
; 2406 : 				case 551:
; 2407 : 				case 554:
; 2408 : 				case 552:
; 2409 : 				case 555:
; 2410 : #ifdef _FIX_
; 2411 : 					AttackDamage = AttackDamage*(50 + (Dexterity / 10)) / 100.0f;

  032ee	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  032f3	f7 ad b0 fe ff
	ff		 imul	 DWORD PTR _Dexterity$[ebp]
  032f9	c1 fa 02	 sar	 edx, 2
  032fc	8b ca		 mov	 ecx, edx
  032fe	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03301	8d 54 0a 32	 lea	 edx, DWORD PTR [edx+ecx+50]
  03305	0f af 55 1c	 imul	 edx, DWORD PTR _AttackDamage$[ebp]
  03309	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv4506[ebp], edx
  0330f	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4506[ebp]
  03315	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0331b	e8 00 00 00 00	 call	 __ftol2_sse
  03320	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2412 : #else
; 2413 : 					AttackDamage = AttackDamage*(50 + (Vitality / 10)) / 100.0f;
; 2414 : #endif
; 2415 : 					break;

  03323	e9 aa 00 00 00	 jmp	 $LN315@Attack
$LN255@Attack:

; 2416 : 				case 558:
; 2417 : #ifdef _FIX_
; 2418 : 					AttackDamage = (AttackDamage+(Dexterity/10))*(50+(Dexterity/10))/100.0f;

  03328	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  0332b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  03330	f7 ad b0 fe ff
	ff		 imul	 DWORD PTR _Dexterity$[ebp]
  03336	c1 fa 02	 sar	 edx, 2
  03339	8b c2		 mov	 eax, edx
  0333b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0333e	03 c2		 add	 eax, edx
  03340	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  03343	83 c0 32	 add	 eax, 50			; 00000032H
  03346	0f af d0	 imul	 edx, eax
  03349	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv4492[ebp], edx
  0334f	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4492[ebp]
  03355	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0335b	e8 00 00 00 00	 call	 __ftol2_sse
  03360	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2419 : #else
; 2420 : 					AttackDamage = (AttackDamage+(Vitality/10))*(50+(Vitality/10))/100.0f;
; 2421 : #endif
; 2422 : 					break;

  03363	eb 6d		 jmp	 SHORT $LN315@Attack
$LN254@Attack:

; 2423 : 				case 559:
; 2424 : #ifdef _FIX_
; 2425 : 					AttackDamage = (AttackDamage+(Dexterity/8)+(Energy/10))*(100 + (Dexterity/8) + (Energy/10))/100.0f;

  03365	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _Dexterity$[ebp]
  0336b	99		 cdq
  0336c	83 e2 07	 and	 edx, 7
  0336f	03 c2		 add	 eax, edx
  03371	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  03374	c1 f8 03	 sar	 eax, 3
  03377	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR tv6174[ebp]
  0337d	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  03380	83 c0 64	 add	 eax, 100		; 00000064H
  03383	0f af c8	 imul	 ecx, eax
  03386	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv4469[ebp], ecx
  0338c	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4469[ebp]
  03392	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  03398	e8 00 00 00 00	 call	 __ftol2_sse
  0339d	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2426 : #else
; 2427 : 					AttackDamage = (AttackDamage+(Vitality/8)+(Energy/10))*(100 + (Vitality/8) + (Energy/10))/100.0f;
; 2428 : #endif
; 2429 : 					break;

  033a0	eb 30		 jmp	 SHORT $LN315@Attack
$LN253@Attack:

; 2430 : 				case 560:
; 2431 : 					AttackDamage = (AttackDamage+(Energy/10))*(50 + (Energy/10))/100.0f;

  033a2	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  033a5	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv6174[ebp]
  033ab	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  033ae	83 c0 32	 add	 eax, 50			; 00000032H
  033b1	0f af c8	 imul	 ecx, eax
  033b4	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv4464[ebp], ecx
  033ba	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4464[ebp]
  033c0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  033c6	e8 00 00 00 00	 call	 __ftol2_sse
  033cb	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  033ce	eb 02		 jmp	 SHORT $LN315@Attack
$LN1080@Attack:
  033d0	dd d8		 fstp	 ST(0)
$LN315@Attack:

; 2432 : 					break;
; 2433 : 				}
; 2434 : 			}
; 2435 : 
; 2436 : 			if ( lpObj->pInventory[1].GetDetailItemType() == 10 &&
; 2437 : 				 lpObj->pInventory[1].m_Special[0] == skill )

  033d2	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  033d8	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  033de	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  033e3	8b 9d d0 fe ff
	ff		 mov	 ebx, DWORD PTR _skill$[ebp]
  033e9	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  033ec	0f 85 9a 01 00
	00		 jne	 $LN903@Attack
  033f2	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  033f8	0f b7 82 06 01
	00 00		 movzx	 eax, WORD PTR [edx+262]
  033ff	3b c3		 cmp	 eax, ebx
  03401	0f 85 85 01 00
	00		 jne	 $LN903@Attack

; 2438 : 			{
; 2439 : 				if( MagicDamageC.GetSkillAttr(skill) == R_FIRE )

  03407	53		 push	 ebx
  03408	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0340d	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr
  03412	83 f8 03	 cmp	 eax, 3
  03415	75 2b		 jne	 SHORT $LN251@Attack

; 2440 : 				{
; 2441 : 					if( lpObj->m_MPSkillOpt.MpsFireTomeStrength > 0.0f )

  03417	d9 ee		 fldz
  03419	d8 9e d0 26 00
	00		 fcomp	 DWORD PTR [esi+9936]
  0341f	df e0		 fnstsw	 ax
  03421	f6 c4 05	 test	 ah, 5
  03424	0f 8a 62 01 00
	00		 jp	 $LN903@Attack

; 2442 : 					{
; 2443 : 						AttackDamage += lpObj->m_MPSkillOpt.MpsFireTomeStrength;

  0342a	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  0342d	d8 86 d0 26 00
	00		 fadd	 DWORD PTR [esi+9936]
  03433	e8 00 00 00 00	 call	 __ftol2_sse
  03438	8b c8		 mov	 ecx, eax
  0343a	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 2444 : 					}
; 2445 : 				}

  0343d	e9 4d 01 00 00	 jmp	 $LN904@Attack
$LN251@Attack:

; 2446 : 				else if( MagicDamageC.GetSkillAttr(skill) == R_WIND )

  03442	53		 push	 ebx
  03443	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  03448	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr
  0344d	83 f8 05	 cmp	 eax, 5
  03450	0f 85 b2 00 00
	00		 jne	 $LN248@Attack

; 2447 : 				{
; 2448 : 					if( lpObj->m_MPSkillOpt.MpsWindTomeStrength > 0.0f )

  03456	d9 ee		 fldz
  03458	d8 96 d4 26 00
	00		 fcom	 DWORD PTR [esi+9940]
  0345e	df e0		 fnstsw	 ax
  03460	f6 c4 05	 test	 ah, 5
  03463	7a 15		 jp	 SHORT $LN864@Attack

; 2449 : 					{
; 2450 : 						AttackDamage += lpObj->m_MPSkillOpt.MpsWindTomeStrength;

  03465	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  03468	d8 86 d4 26 00
	00		 fadd	 DWORD PTR [esi+9940]
  0346e	e8 00 00 00 00	 call	 __ftol2_sse
  03473	8b c8		 mov	 ecx, eax
  03475	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  03478	eb 03		 jmp	 SHORT $LN247@Attack
$LN864@Attack:
  0347a	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN247@Attack:

; 2451 : 					}
; 2452 : 
; 2453 : 					if( lpObj->m_MPSkillOpt.MpsWindTomeMastery > 0.0f )

  0347d	d8 9e e0 26 00
	00		 fcomp	 DWORD PTR [esi+9952]
  03483	df e0		 fnstsw	 ax
  03485	f6 c4 05	 test	 ah, 5
  03488	0f 8a 01 01 00
	00		 jp	 $LN904@Attack

; 2454 : 					{
; 2455 : 						float fPercent = rand()%100;

  0348e	e8 00 00 00 00	 call	 _rand
  03493	99		 cdq
  03494	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03499	f7 f9		 idiv	 ecx
  0349b	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv4422[ebp], edx
  034a1	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4422[ebp]
  034a7	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR _fPercent$222949[ebp]

; 2456 : 
; 2457 : 						if( fPercent < lpObj->m_MPSkillOpt.MpsWindTomeMastery )

  034ad	d9 85 dc fe ff
	ff		 fld	 DWORD PTR _fPercent$222949[ebp]
  034b3	d9 86 e0 26 00
	00		 fld	 DWORD PTR [esi+9952]
  034b9	de d9		 fcompp
  034bb	df e0		 fnstsw	 ax
  034bd	f6 c4 41	 test	 ah, 65			; 00000041H
  034c0	0f 85 c6 00 00
	00		 jne	 $LN903@Attack

; 2458 : 						{
; 2459 : 							if(!g_ZtLicense.CheckUser(eZtUB::Stone))

  034c6	6a 37		 push	 55			; 00000037H
  034c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  034cd	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  034d2	84 c0		 test	 al, al
  034d4	75 15		 jne	 SHORT $LN898@Attack

; 2460 : 							{
; 2461 : 								gObjApplyBuffEffectDuration(lpTargetObj,AT_STUN,0,0,0,0,3);

  034d6	6a 03		 push	 3
  034d8	6a 00		 push	 0
  034da	6a 00		 push	 0
  034dc	6a 00		 push	 0
  034de	6a 00		 push	 0
  034e0	6a 3d		 push	 61			; 0000003dH
  034e2	57		 push	 edi
  034e3	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  034e8	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN898@Attack:

; 2462 : 							}
; 2463 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  034eb	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  034f2	0f bf 87 44 01
	00 00		 movsx	 eax, WORD PTR [edi+324]
  034f9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  034fb	52		 push	 edx
  034fc	50		 push	 eax
  034fd	51		 push	 ecx
  034fe	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition

; 2464 : 						}
; 2465 : 					}
; 2466 : 				}

  03503	e9 81 00 00 00	 jmp	 $LN1242@Attack
$LN248@Attack:

; 2467 : 				else if( MagicDamageC.GetSkillAttr(skill) == R_LIGHTNING )

  03508	53		 push	 ebx
  03509	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0350e	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr
  03513	83 f8 02	 cmp	 eax, 2
  03516	75 74		 jne	 SHORT $LN903@Attack

; 2468 : 				{
; 2469 : 					if( lpObj->m_MPSkillOpt.MpsLightTomeStrength > 0.0f )

  03518	d9 ee		 fldz
  0351a	d8 96 d8 26 00
	00		 fcom	 DWORD PTR [esi+9944]
  03520	df e0		 fnstsw	 ax
  03522	f6 c4 05	 test	 ah, 5
  03525	7a 15		 jp	 SHORT $LN865@Attack

; 2470 : 					{
; 2471 : 						AttackDamage += lpObj->m_MPSkillOpt.MpsLightTomeStrength;

  03527	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  0352a	d8 86 d8 26 00
	00		 fadd	 DWORD PTR [esi+9944]
  03530	e8 00 00 00 00	 call	 __ftol2_sse
  03535	8b c8		 mov	 ecx, eax
  03537	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  0353a	eb 03		 jmp	 SHORT $LN241@Attack
$LN865@Attack:
  0353c	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN241@Attack:

; 2472 : 					}
; 2473 : 
; 2474 : 					if( lpObj->m_MPSkillOpt.MpsLightTomeMastery > 0.0f )

  0353f	d8 9e e4 26 00
	00		 fcomp	 DWORD PTR [esi+9956]
  03545	df e0		 fnstsw	 ax
  03547	f6 c4 05	 test	 ah, 5
  0354a	7a 43		 jp	 SHORT $LN904@Attack

; 2475 : 					{
; 2476 : 						float fPercent = rand()%100;

  0354c	e8 00 00 00 00	 call	 _rand
  03551	99		 cdq
  03552	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03557	f7 f9		 idiv	 ecx
  03559	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv4373[ebp], edx
  0355f	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv4373[ebp]
  03565	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR _fPercent$222956[ebp]

; 2477 : 
; 2478 : 						if( fPercent < lpObj->m_MPSkillOpt.MpsLightTomeMastery )

  0356b	d9 85 dc fe ff
	ff		 fld	 DWORD PTR _fPercent$222956[ebp]
  03571	d9 86 e4 26 00
	00		 fld	 DWORD PTR [esi+9956]
  03577	de d9		 fcompp
  03579	df e0		 fnstsw	 ax
  0357b	f6 c4 41	 test	 ah, 65			; 00000041H
  0357e	75 0c		 jne	 SHORT $LN903@Attack

; 2479 : 						{
; 2480 : 							gObjBackSpring2(lpTargetObj,lpObj,2);

  03580	6a 02		 push	 2
  03582	56		 push	 esi
  03583	57		 push	 edi
  03584	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
$LN1242@Attack:
  03589	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN903@Attack:
  0358c	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN904@Attack:

; 2481 : 						}
; 2482 : 					}
; 2483 : 				}
; 2484 : 			}
; 2485 : 
; 2486 : 			if ( skill == 0 )

  0358f	85 db		 test	 ebx, ebx
  03591	75 2e		 jne	 SHORT $LN906@Attack

; 2487 : 			{
; 2488 : 				if ( lpObj->pInventory[8].m_Type == ITEMGET(13, 3) )

  03593	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  03599	b8 03 1a 00 00	 mov	 eax, 6659		; 00001a03H
  0359e	66 39 82 a6 06
	00 00		 cmp	 WORD PTR [edx+1702], ax
  035a5	75 1a		 jne	 SHORT $LN906@Attack

; 2489 : 				{
; 2490 : 					AttackDamage = AttackDamage * 130 / 100;

  035a7	69 c9 82 00 00
	00		 imul	 ecx, 130		; 00000082H
  035ad	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  035b2	f7 e9		 imul	 ecx
  035b4	c1 fa 05	 sar	 edx, 5
  035b7	8b ca		 mov	 ecx, edx
  035b9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  035bc	03 ca		 add	 ecx, edx
  035be	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN906@Attack:

; 2491 : 				}
; 2492 : 			}
; 2493 : 
; 2494 : 			if(ZtConfig.Character.SoulBarrierAttackManaDown)

  035c1	80 3d 94 01 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+404, 0
  035c8	0f 84 de 00 00
	00		 je	 $LN908@Attack

; 2495 : 			{
; 2496 : 				if(gObjSearchActiveEffect(lpTargetObj, AT_WIZARD_DEFENSE) == 1 && AttackDamage > 0)

  035ce	6a 04		 push	 4
  035d0	57		 push	 edi
  035d1	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  035d6	83 c4 08	 add	 esp, 8
  035d9	3c 01		 cmp	 al, 1
  035db	0f 85 c8 00 00
	00		 jne	 $LN972@Attack
  035e1	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  035e4	33 db		 xor	 ebx, ebx
  035e6	3b cb		 cmp	 ecx, ebx
  035e8	0f 8e be 00 00
	00		 jle	 $LN908@Attack

; 2497 : 				{
; 2498 : 					int iWizardSkillDefense = 0; //1f4
; 2499 : 					int iWizardSkillTime = 0; //1f8
; 2500 : 
; 2501 : 					gObjUpdateAppliedBuffEffect(lpTargetObj, AT_WIZARD_DEFENSE, &iWizardSkillDefense, &iWizardSkillTime);

  035ee	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR _iWizardSkillTime$222963[ebp]
  035f4	52		 push	 edx
  035f5	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _iWizardSkillDefense$222962[ebp]
  035fb	50		 push	 eax
  035fc	6a 04		 push	 4
  035fe	57		 push	 edi
  035ff	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _iWizardSkillDefense$222962[ebp], ebx
  03605	89 9d d8 fe ff
	ff		 mov	 DWORD PTR _iWizardSkillTime$222963[ebp], ebx
  0360b	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  03610	83 c4 10	 add	 esp, 16			; 00000010H

; 2502 : 
; 2503 : 					int replacemana = 0;
; 2504 : 
; 2505 : 					if(iWizardSkillTime > 0)

  03613	39 9d d8 fe ff
	ff		 cmp	 DWORD PTR _iWizardSkillTime$222963[ebp], ebx
  03619	7e 14		 jle	 SHORT $LN234@Attack

; 2506 : 					{
; 2507 : 						replacemana = lpTargetObj->Mana * iWizardSkillTime / 1000;

  0361b	db 85 d8 fe ff
	ff		 fild	 DWORD PTR _iWizardSkillTime$222963[ebp]
  03621	d8 8f 10 01 00
	00		 fmul	 DWORD PTR [edi+272]
  03627	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@408f400000000000

; 2508 : 					}
; 2509 : 					else

  0362d	eb 0e		 jmp	 SHORT $LN1216@Attack
$LN234@Attack:

; 2510 : 					{
; 2511 : 						replacemana = lpTargetObj->Mana * 2 / 100;

  0362f	d9 87 10 01 00
	00		 fld	 DWORD PTR [edi+272]
  03635	dc c0		 fadd	 ST(0), ST(0)
  03637	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
$LN1216@Attack:
  0363d	e8 00 00 00 00	 call	 __ftol2_sse
  03642	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _replacemana$222964[ebp], eax

; 2512 : 					}
; 2513 : 
; 2514 : 					if ( replacemana < lpTargetObj->Mana )

  03648	db 85 e0 fe ff
	ff		 fild	 DWORD PTR _replacemana$222964[ebp]
  0364e	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv6615[ebp]
  03654	d9 85 dc fe ff
	ff		 fld	 DWORD PTR tv6615[ebp]
  0365a	d9 87 10 01 00
	00		 fld	 DWORD PTR [edi+272]
  03660	d8 d9		 fcomp	 ST(1)
  03662	df e0		 fnstsw	 ax
  03664	f6 c4 41	 test	 ah, 65			; 00000041H
  03667	75 3e		 jne	 SHORT $LN1094@Attack

; 2515 : 					{
; 2516 : 						lpTargetObj->Mana -= replacemana;

  03669	d8 af 10 01 00
	00		 fsubr	 DWORD PTR [edi+272]

; 2517 : 
; 2518 : 						int decattackdamage = 0; //200
; 2519 : 
; 2520 : 						if(iWizardSkillDefense > 0)

  0366f	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _iWizardSkillDefense$222962[ebp]
  03675	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03678	33 c0		 xor	 eax, eax
  0367a	d9 9f 10 01 00
	00		 fstp	 DWORD PTR [edi+272]
  03680	3b d3		 cmp	 edx, ebx
  03682	7e 14		 jle	 SHORT $LN231@Attack

; 2521 : 						{
; 2522 : 							decattackdamage = AttackDamage * iWizardSkillDefense / 100;

  03684	0f af d1	 imul	 edx, ecx
  03687	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0368c	f7 ea		 imul	 edx
  0368e	c1 fa 05	 sar	 edx, 5
  03691	8b c2		 mov	 eax, edx
  03693	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03696	03 c2		 add	 eax, edx
$LN231@Attack:

; 2523 : 						}
; 2524 : 
; 2525 : 						AttackDamage -= decattackdamage;
; 2526 : 						ManaChange = TRUE;

  03698	bb 01 00 00 00	 mov	 ebx, 1
  0369d	2b c8		 sub	 ecx, eax
  0369f	89 9d 98 fe ff
	ff		 mov	 DWORD PTR _ManaChange$[ebp], ebx
  036a5	eb 0a		 jmp	 SHORT $LN232@Attack
$LN1094@Attack:

; 2512 : 					}
; 2513 : 
; 2514 : 					if ( replacemana < lpTargetObj->Mana )

  036a7	dd d8		 fstp	 ST(0)
$LN972@Attack:

; 2523 : 						}
; 2524 : 
; 2525 : 						AttackDamage -= decattackdamage;
; 2526 : 						ManaChange = TRUE;

  036a9	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN908@Attack:
  036ac	bb 01 00 00 00	 mov	 ebx, 1
$LN232@Attack:

; 2527 : 					}
; 2528 : 				}
; 2529 : 			}
; 2530 : 
; 2531 : 			AttackDamage += lpObj->SetOpAddDamage;

  036b1	0f bf 96 30 11
	00 00		 movsx	 edx, WORD PTR [esi+4400]

; 2532 : 
; 2533 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  036b8	0f b7 46 68	 movzx	 eax, WORD PTR [esi+104]
  036bc	03 ca		 add	 ecx, edx
  036be	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  036c1	66 3b c3	 cmp	 ax, bx
  036c4	75 64		 jne	 SHORT $LN228@Attack
  036c6	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  036ca	75 0c		 jne	 SHORT $LN230@Attack

; 2534 : 			{
; 2535 : 				AttackDamage += lpObj->m_ItemOptionExFor380.OpAddDamage;

  036cc	0f bf 96 00 20
	00 00		 movsx	 edx, WORD PTR [esi+8192]
  036d3	03 ca		 add	 ecx, edx
  036d5	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN230@Attack:

; 2536 : 			}
; 2537 : 
; 2538 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  036d8	66 3b c3	 cmp	 ax, bx
  036db	75 4d		 jne	 SHORT $LN228@Attack
  036dd	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  036e1	75 47		 jne	 SHORT $LN228@Attack

; 2539 : 			{
; 2540 : 				if ( CC_MAP_RANGE(lpObj->MapNumber ) && CC_MAP_RANGE(lpTargetObj->MapNumber) )

  036e3	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  036ea	3c 35		 cmp	 al, 53			; 00000035H
  036ec	74 0d		 je	 SHORT $LN838@Attack
  036ee	3c 12		 cmp	 al, 18			; 00000012H
  036f0	72 38		 jb	 SHORT $LN228@Attack
  036f2	b2 17		 mov	 dl, 23			; 00000017H
  036f4	3a d0		 cmp	 dl, al
  036f6	1b c0		 sbb	 eax, eax
  036f8	40		 inc	 eax
  036f9	74 2f		 je	 SHORT $LN228@Attack
$LN838@Attack:
  036fb	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  03702	3c 35		 cmp	 al, 53			; 00000035H
  03704	74 0d		 je	 SHORT $LN839@Attack
  03706	3c 12		 cmp	 al, 18			; 00000012H
  03708	72 20		 jb	 SHORT $LN228@Attack
  0370a	b2 17		 mov	 dl, 23			; 00000017H
  0370c	3a d0		 cmp	 dl, al
  0370e	1b c0		 sbb	 eax, eax
  03710	40		 inc	 eax
  03711	74 17		 je	 SHORT $LN228@Attack
$LN839@Attack:

; 2541 : 				{
; 2542 : 					AttackDamage = AttackDamage * 50 / 100;

  03713	6b c9 32	 imul	 ecx, 50			; 00000032H
  03716	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0371b	f7 e9		 imul	 ecx
  0371d	c1 fa 05	 sar	 edx, 5
  03720	8b ca		 mov	 ecx, edx
  03722	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03725	03 ca		 add	 ecx, edx
  03727	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN228@Attack:

; 2543 : 				}
; 2544 : 			}
; 2545 : #ifdef _BALANS_SYSTEM_
; 2546 : 			if(byReflect == 0)

  0372a	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0
  0372e	0f 85 a6 00 00
	00		 jne	 $LN910@Attack

; 2547 : 			{
; 2548 : 				gBalanceSystem.Main(lpObj,lpTargetObj,AttackDamage);

  03734	8d 4d 1c	 lea	 ecx, DWORD PTR _AttackDamage$[ebp]
  03737	51		 push	 ecx
  03738	57		 push	 edi
  03739	56		 push	 esi
  0373a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBalanceSystem@@3VcBalanceSystem@@A ; gBalanceSystem
  0373f	e8 00 00 00 00	 call	 ?Main@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@0AAH@Z ; cBalanceSystem::Main

; 2549 : 			}
; 2550 : 			else
; 2551 : 			{
; 2552 : 				//gBalanceSystem.Refflect(lpObj,AttackDamage);
; 2553 : 			}
; 2554 : #endif
; 2555 : #if(CUSTOM_CW_ALTERELFDMG)
; 2556 : 			if(byReflect == 0)
; 2557 : 			{
; 2558 : 				if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  03744	6a 20		 push	 32			; 00000020H
  03746	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0374b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03750	84 c0		 test	 al, al
  03752	75 20		 jne	 SHORT $LN909@Attack
  03754	6a 21		 push	 33			; 00000021H
  03756	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0375b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03760	84 c0		 test	 al, al
  03762	75 10		 jne	 SHORT $LN909@Attack
  03764	6a 22		 push	 34			; 00000022H
  03766	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0376b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03770	84 c0		 test	 al, al
  03772	74 63		 je	 SHORT $LN869@Attack
$LN909@Attack:

; 2559 : 				{
; 2560 : 					if(g_Crywolf.GetCrywolfState() == 4 || g_Crywolf.GetCrywolfState() == 3)

  03774	a1 ec b7 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1030124
  03779	83 f8 04	 cmp	 eax, 4
  0377c	74 05		 je	 SHORT $LN221@Attack
  0377e	83 f8 03	 cmp	 eax, 3
  03781	75 54		 jne	 SHORT $LN869@Attack
$LN221@Attack:

; 2561 : 					{
; 2562 : 						if(lpObj->Type == OBJ_USER)

  03783	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03787	75 4e		 jne	 SHORT $LN869@Attack

; 2563 : 						{
; 2564 : 							for(int i=205;i<=209;i++)

  03789	bb cd 00 00 00	 mov	 ebx, 205		; 000000cdH
  0378e	8b ff		 npad	 2
$LL219@Attack:

; 2565 : 							{
; 2566 : 								int iAltarIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(i);

  03790	53		 push	 ebx
  03791	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  03796	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex

; 2567 : 				
; 2568 : 								if(iAltarIndex != -1)

  0379b	83 f8 ff	 cmp	 eax, -1
  0379e	74 24		 je	 SHORT $LN868@Attack

; 2569 : 								{
; 2570 : 									if(iAltarIndex == lpObj->m_Index)

  037a0	3b 06		 cmp	 eax, DWORD PTR [esi]
  037a2	75 20		 jne	 SHORT $LN868@Attack

; 2571 : 									{
; 2572 : 										AttackDamage = ( AttackDamage * ZtConfig.Character.CWElfAlterDMGPercent ) / 100; 

  037a4	8b 0d 8c 01 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+396
  037aa	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  037ae	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  037b3	f7 e9		 imul	 ecx
  037b5	c1 fa 05	 sar	 edx, 5
  037b8	8b ca		 mov	 ecx, edx
  037ba	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  037bd	03 ca		 add	 ecx, edx
  037bf	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  037c2	eb 03		 jmp	 SHORT $LN218@Attack
$LN868@Attack:
  037c4	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN218@Attack:

; 2563 : 						{
; 2564 : 							for(int i=205;i<=209;i++)

  037c7	43		 inc	 ebx
  037c8	81 fb d1 00 00
	00		 cmp	 ebx, 209		; 000000d1H
  037ce	7e c0		 jle	 SHORT $LL219@Attack
  037d0	bb 01 00 00 00	 mov	 ebx, 1
  037d5	eb 03		 jmp	 SHORT $LN910@Attack
$LN869@Attack:
  037d7	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN910@Attack:

; 2573 : 									}
; 2574 : 								}
; 2575 : 							}
; 2576 : 						}
; 2577 : 					}
; 2578 : 				}
; 2579 : 			}
; 2580 : #endif
; 2581 : //#if(GS_CASTLE==1)
; 2582 : 			if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE)

  037da	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  037e1	0f 85 d5 00 00
	00		 jne	 $LN207@Attack

; 2583 : 			{
; 2584 : 				if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  037e7	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  037eb	0f 85 c6 01 00
	00		 jne	 $LN194@Attack
  037f1	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  037f5	0f 85 c1 00 00
	00		 jne	 $LN207@Attack

; 2585 : 				{
; 2586 : 					if ( lpObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )

  037fb	80 be 49 01 00
	00 1e		 cmp	 BYTE PTR [esi+329], 30	; 0000001eH
  03802	0f 85 b4 00 00
	00		 jne	 $LN207@Attack
  03808	80 bf 49 01 00
	00 1e		 cmp	 BYTE PTR [edi+329], 30	; 0000001eH
  0380f	0f 85 a7 00 00
	00		 jne	 $LN207@Attack

; 2587 : 					{
; 2588 : 						if( lpObj->m_btCsJoinSide == lpTargetObj->m_btCsJoinSide)

  03815	8a 96 02 1c 00
	00		 mov	 dl, BYTE PTR [esi+7170]

; 2589 : 						{
; 2590 : 							//int AttackByNPC = GetPrivateProfileInt("CastleSiege","AttackByNPC",20,"..\\Data\\ZtData\\Skills.ini");
; 2591 : 							AttackDamage =  ( AttackDamage * ZtConfig.Character.CastleAttackByPlayer ) / 100;		//AttackDamage = AttackDamage * 20 / 100;	CastleAttackByPlayer

  0381b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03820	3a 97 02 1c 00
	00		 cmp	 dl, BYTE PTR [edi+7170]
  03826	75 1a		 jne	 SHORT $LN211@Attack
  03828	8b 15 74 01 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+372
  0382e	0f af d1	 imul	 edx, ecx
  03831	f7 ea		 imul	 edx
  03833	c1 fa 05	 sar	 edx, 5
  03836	8b c2		 mov	 eax, edx
  03838	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0383b	03 c2		 add	 eax, edx
  0383d	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2592 : 						}
; 2593 : 						else

  03840	eb 18		 jmp	 SHORT $LN210@Attack
$LN211@Attack:

; 2594 : 						{
; 2595 : 							//int AttackByPlayer = GetPrivateProfileInt("CastleSiege","AttackByPlayer",40,"..\\Data\\ZtData\\Skills.ini");
; 2596 : 							AttackDamage = ( AttackDamage * ZtConfig.Character.CastleAttackByNPC ) / 100;		//AttackDamage = AttackDamage * 40 / 100;

  03842	8b 15 70 01 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+368
  03848	0f af d1	 imul	 edx, ecx
  0384b	f7 ea		 imul	 edx
  0384d	c1 fa 05	 sar	 edx, 5
  03850	8b ca		 mov	 ecx, edx
  03852	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03855	03 ca		 add	 ecx, edx
  03857	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN210@Attack:

; 2597 : 						}
; 2598 : 						// ----
; 2599 : 						if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  0385a	6a 20		 push	 32			; 00000020H
  0385c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03861	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03866	84 c0		 test	 al, al
  03868	75 20		 jne	 SHORT $LN208@Attack
  0386a	6a 22		 push	 34			; 00000022H
  0386c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03871	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03876	84 c0		 test	 al, al
  03878	75 10		 jne	 SHORT $LN208@Attack
  0387a	6a 21		 push	 33			; 00000021H
  0387c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03881	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03886	84 c0		 test	 al, al
  03888	74 32		 je	 SHORT $LN207@Attack
$LN208@Attack:

; 2600 : 						{
; 2601 : 							if(g_ZtUser.CheckAlliancePlayer(lpObj->m_Index, lpTargetObj->m_Index))

  0388a	8b 17		 mov	 edx, DWORD PTR [edi]
  0388c	8b 06		 mov	 eax, DWORD PTR [esi]
  0388e	52		 push	 edx
  0388f	50		 push	 eax
  03890	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtUser@@3VZtUser@@A ; g_ZtUser
  03895	e8 00 00 00 00	 call	 ?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z ; ZtUser::CheckAlliancePlayer
  0389a	84 c0		 test	 al, al
  0389c	74 1e		 je	 SHORT $LN207@Attack

; 2602 : 							{
; 2603 : 								AttackDamage = ( AttackDamage * ZtConfig.Character.CastleDamageByAlliance ) / 100;

  0389e	8b 0d 84 01 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+388
  038a4	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  038a8	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  038ad	f7 e9		 imul	 ecx
  038af	c1 fa 05	 sar	 edx, 5
  038b2	8b ca		 mov	 ecx, edx
  038b4	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  038b7	03 ca		 add	 ecx, edx
  038b9	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN207@Attack:

; 2604 : 							}
; 2605 : 						}
; 2606 : 					}
; 2607 : 				}
; 2608 : 			}
; 2609 : //#endif
; 2610 : 
; 2611 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )

  038bc	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  038c0	0f 85 f1 00 00
	00		 jne	 $LN194@Attack
  038c6	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2
  038cb	0f 85 e6 00 00
	00		 jne	 $LN194@Attack

; 2612 : 			{
; 2613 : 				if ( lpTargetObj->Class == 283 )

  038d1	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  038d6	66 39 97 b8 00
	00 00		 cmp	 WORD PTR [edi+184], dx
  038dd	75 65		 jne	 SHORT $LN970@Attack

; 2614 : 				{
; 2615 : 					if(gObjSearchActiveEffect(lpObj, AT_POTION_OF_BLESS) == 1)

  038df	6a 0a		 push	 10			; 0000000aH
  038e1	56		 push	 esi
  038e2	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  038e7	83 c4 08	 add	 esp, 8
  038ea	3c 01		 cmp	 al, 1
  038ec	74 56		 je	 SHORT $LN970@Attack

; 2616 : 					{
; 2617 : 						AttackDamage = AttackDamage;
; 2618 : 					}
; 2619 : 					else if(gObjSearchActiveEffect(lpObj, AT_POTION_OF_SOUL) == 1)

  038ee	6a 0b		 push	 11			; 0000000bH
  038f0	56		 push	 esi
  038f1	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  038f6	83 c4 08	 add	 esp, 8
  038f9	3c 01		 cmp	 al, 1
  038fb	74 47		 je	 SHORT $LN970@Attack

; 2620 : 					{
; 2621 : 						AttackDamage = AttackDamage;
; 2622 : 					}
; 2623 : 					else
; 2624 : 					{
; 2625 : 						if ( lpObj->m_iAccumulatedDamage > 100 )

  038fd	8b 8e 10 1c 00
	00		 mov	 ecx, DWORD PTR [esi+7184]
  03903	83 f9 64	 cmp	 ecx, 100		; 00000064H
  03906	7e 1a		 jle	 SHORT $LN200@Attack

; 2626 : 						{
; 2627 : 							gObjWeaponDurDownInCastle(lpObj, lpTargetObj, 1);

  03908	53		 push	 ebx
  03909	57		 push	 edi
  0390a	56		 push	 esi
  0390b	e8 00 00 00 00	 call	 ?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDownInCastle

; 2628 : 							lpObj->m_iAccumulatedDamage = 0;
; 2629 : 						}
; 2630 : 						else

  03910	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03913	83 c4 0c	 add	 esp, 12			; 0000000cH
  03916	c7 86 10 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+7184], 0
  03920	eb 0b		 jmp	 SHORT $LN199@Attack
$LN200@Attack:

; 2631 : 						{
; 2632 : 							lpObj->m_iAccumulatedDamage += AttackDamage;

  03922	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03925	03 c8		 add	 ecx, eax
  03927	89 8e 10 1c 00
	00		 mov	 DWORD PTR [esi+7184], ecx
$LN199@Attack:

; 2633 : 						}
; 2634 : 
; 2635 : 						AttackDamage = AttackDamage * 5 / 100;

  0392d	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  03930	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03935	f7 e9		 imul	 ecx
  03937	c1 fa 05	 sar	 edx, 5
  0393a	8b c2		 mov	 eax, edx
  0393c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0393f	03 c2		 add	 eax, edx
  03941	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN970@Attack:

; 2636 : 					}
; 2637 : 				}
; 2638 : 
; 2639 : 				if ( lpTargetObj->Class == 277 )

  03944	b9 15 01 00 00	 mov	 ecx, 277		; 00000115H
  03949	66 39 8f b8 00
	00 00		 cmp	 WORD PTR [edi+184], cx
  03950	75 65		 jne	 SHORT $LN194@Attack

; 2640 : 				{
; 2641 : 					if(gObjSearchActiveEffect(lpObj, AT_POTION_OF_BLESS) == 1)

  03952	6a 0a		 push	 10			; 0000000aH
  03954	56		 push	 esi
  03955	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0395a	83 c4 08	 add	 esp, 8
  0395d	3c 01		 cmp	 al, 1
  0395f	74 56		 je	 SHORT $LN194@Attack

; 2642 : 					{
; 2643 : 						AttackDamage = AttackDamage;
; 2644 : 					}
; 2645 : 					else if(gObjSearchActiveEffect(lpObj, AT_POTION_OF_SOUL) == 1)

  03961	6a 0b		 push	 11			; 0000000bH
  03963	56		 push	 esi
  03964	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  03969	83 c4 08	 add	 esp, 8
  0396c	3c 01		 cmp	 al, 1
  0396e	74 47		 je	 SHORT $LN194@Attack

; 2646 : 					{
; 2647 : 						AttackDamage = AttackDamage;
; 2648 : 					}
; 2649 : 					else
; 2650 : 					{					
; 2651 : 						if ( lpObj->m_iAccumulatedDamage > 100 )

  03970	8b 8e 10 1c 00
	00		 mov	 ecx, DWORD PTR [esi+7184]
  03976	83 f9 64	 cmp	 ecx, 100		; 00000064H
  03979	7e 1a		 jle	 SHORT $LN193@Attack

; 2652 : 						{
; 2653 : 							gObjWeaponDurDownInCastle(lpObj, lpTargetObj, 1);

  0397b	53		 push	 ebx
  0397c	57		 push	 edi
  0397d	56		 push	 esi
  0397e	e8 00 00 00 00	 call	 ?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDownInCastle

; 2654 : 							lpObj->m_iAccumulatedDamage = 0;
; 2655 : 						}
; 2656 : 						else

  03983	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03986	83 c4 0c	 add	 esp, 12			; 0000000cH
  03989	c7 86 10 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+7184], 0
  03993	eb 0b		 jmp	 SHORT $LN192@Attack
$LN193@Attack:

; 2657 : 						{
; 2658 : 							lpObj->m_iAccumulatedDamage += AttackDamage;

  03995	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03998	03 c8		 add	 ecx, eax
  0399a	89 8e 10 1c 00
	00		 mov	 DWORD PTR [esi+7184], ecx
$LN192@Attack:

; 2659 : 						}
; 2660 : 
; 2661 : 						AttackDamage = AttackDamage * 5 / 100;

  039a0	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  039a3	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  039a8	f7 e9		 imul	 ecx
  039aa	c1 fa 05	 sar	 edx, 5
  039ad	8b c2		 mov	 eax, edx
  039af	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  039b2	03 c2		 add	 eax, edx
  039b4	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN194@Attack:

; 2662 : 					}
; 2663 : 				}
; 2664 : 			}
; 2665 : 
; 2666 : 			if ( gObjFenrir( lpObj ) )

  039b7	56		 push	 esi
  039b8	e8 00 00 00 00	 call	 ?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z ; gObjFenrir
  039bd	83 c4 04	 add	 esp, 4
  039c0	85 c0		 test	 eax, eax
  039c2	74 79		 je	 SHORT $LN913@Attack

; 2667 : 			{
; 2668 : 				int iIncPercent = lpObj->pInventory[8].IsFenrirIncLastAttackDamage();

  039c4	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  039ca	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  039d0	e8 00 00 00 00	 call	 ?IsFenrirIncLastAttackDamage@CItem@@QAEHXZ ; CItem::IsFenrirIncLastAttackDamage

; 2669 : #ifdef FENRIR_CONFIG
; 2670 : 				
; 2671 : 
; 2672 : 				if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu) || g_ZtLicense.CheckUser(eZtUB::Local3) || g_ZtLicense.CheckUser(eZtUB::Local))

  039d5	6a 1a		 push	 26			; 0000001aH
  039d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  039dc	8b d8		 mov	 ebx, eax
  039de	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  039e3	84 c0		 test	 al, al
  039e5	75 30		 jne	 SHORT $LN912@Attack
  039e7	6a 11		 push	 17			; 00000011H
  039e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  039ee	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  039f3	84 c0		 test	 al, al
  039f5	75 20		 jne	 SHORT $LN912@Attack
  039f7	6a 1c		 push	 28			; 0000001cH
  039f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  039fe	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03a03	84 c0		 test	 al, al
  03a05	75 10		 jne	 SHORT $LN912@Attack
  03a07	6a 00		 push	 0
  03a09	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03a0e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03a13	84 c0		 test	 al, al
  03a15	74 06		 je	 SHORT $LN190@Attack
$LN912@Attack:

; 2673 : 				{
; 2674 : 					iIncPercent += ZtConfig.PrideMu.IncPercent;

  03a17	03 1d c4 0b 00
	00		 add	 ebx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3012
$LN190@Attack:

; 2675 : 				}
; 2676 : #endif
; 2677 : 				if ( iIncPercent > 0 )

  03a1d	85 db		 test	 ebx, ebx
  03a1f	7e 1c		 jle	 SHORT $LN913@Attack

; 2678 : 				{
; 2679 : 					AttackDamage += AttackDamage * iIncPercent / 100;

  03a21	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03a24	0f af d9	 imul	 ebx, ecx
  03a27	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03a2c	f7 eb		 imul	 ebx
  03a2e	c1 fa 05	 sar	 edx, 5
  03a31	8b c2		 mov	 eax, edx
  03a33	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03a36	03 c2		 add	 eax, edx
  03a38	03 c8		 add	 ecx, eax
  03a3a	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN913@Attack:

; 2680 : 				}
; 2681 : 			}
; 2682 : 
; 2683 : 			if ( gObjFenrir( lpTargetObj ) )

  03a3d	57		 push	 edi
  03a3e	e8 00 00 00 00	 call	 ?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z ; gObjFenrir
  03a43	83 c4 04	 add	 esp, 4
  03a46	85 c0		 test	 eax, eax
  03a48	74 79		 je	 SHORT $LN946@Attack

; 2684 : 			{
; 2685 : 				int iDecPercent = lpTargetObj->pInventory[8].IsFenrirDecLastAttackDamage();

  03a4a	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  03a50	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  03a56	e8 00 00 00 00	 call	 ?IsFenrirDecLastAttackDamage@CItem@@QAEHXZ ; CItem::IsFenrirDecLastAttackDamage

; 2686 : #ifdef FENRIR_CONFIG
; 2687 : 				if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu) || g_ZtLicense.CheckUser(eZtUB::Local3) || g_ZtLicense.CheckUser(eZtUB::Local))

  03a5b	6a 1a		 push	 26			; 0000001aH
  03a5d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03a62	8b d8		 mov	 ebx, eax
  03a64	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03a69	84 c0		 test	 al, al
  03a6b	75 30		 jne	 SHORT $LN185@Attack
  03a6d	6a 11		 push	 17			; 00000011H
  03a6f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03a74	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03a79	84 c0		 test	 al, al
  03a7b	75 20		 jne	 SHORT $LN185@Attack
  03a7d	6a 1c		 push	 28			; 0000001cH
  03a7f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03a84	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03a89	84 c0		 test	 al, al
  03a8b	75 10		 jne	 SHORT $LN185@Attack
  03a8d	6a 00		 push	 0
  03a8f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03a94	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03a99	84 c0		 test	 al, al
  03a9b	74 06		 je	 SHORT $LN186@Attack
$LN185@Attack:

; 2688 : 				{
; 2689 : 					iDecPercent += ZtConfig.PrideMu.DecPercent;

  03a9d	03 1d c0 0b 00
	00		 add	 ebx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3008
$LN186@Attack:

; 2690 : 				}
; 2691 : #endif
; 2692 : 				if ( iDecPercent > 0 )

  03aa3	85 db		 test	 ebx, ebx
  03aa5	7e 1c		 jle	 SHORT $LN946@Attack

; 2693 : 				{
; 2694 : 					//
; 2695 : 					AttackDamage -= AttackDamage * iDecPercent / 100;

  03aa7	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03aaa	0f af d9	 imul	 ebx, ecx
  03aad	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  03ab2	f7 eb		 imul	 ebx
  03ab4	c1 fa 05	 sar	 edx, 5
  03ab7	8b c2		 mov	 eax, edx
  03ab9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03abc	03 c2		 add	 eax, edx
  03abe	03 c8		 add	 ecx, eax
  03ac0	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN946@Attack:

; 2696 : 				}
; 2697 : 			}
; 2698 : 
; 2699 : 			if(g_ZtLicense.user.Rage)

  03ac3	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  03aca	74 12		 je	 SHORT $LN947@Attack

; 2700 : 			{
; 2701 : 				gSystemOfRage.AttackDamageRG(lpObj, lpTargetObj, AttackDamage, bDamageReflect);

  03acc	6a 00		 push	 0
  03ace	8d 4d 1c	 lea	 ecx, DWORD PTR _AttackDamage$[ebp]
  03ad1	51		 push	 ecx
  03ad2	57		 push	 edi
  03ad3	56		 push	 esi
  03ad4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  03ad9	e8 00 00 00 00	 call	 ?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z ; cSystemOfRage::AttackDamageRG
$LN947@Attack:

; 2702 : 			}
; 2703 : 
; 2704 : 
; 2705 : 			if ( AttackDamage < 0 )

  03ade	83 7d 1c 00	 cmp	 DWORD PTR _AttackDamage$[ebp], 0
  03ae2	7d 07		 jge	 SHORT $LN182@Attack

; 2706 : 			{
; 2707 : 				AttackDamage = 0;

  03ae4	c7 45 1c 00 00
	00 00		 mov	 DWORD PTR _AttackDamage$[ebp], 0
$LN182@Attack:

; 2708 : 			}
; 2709 : 
; 2710 : 			if ( skill == 76 )

  03aeb	83 bd d0 fe ff
	ff 4c		 cmp	 DWORD PTR _skill$[ebp], 76 ; 0000004cH
  03af2	0f 85 68 01 00
	00		 jne	 $LN871@Attack

; 2711 : 			{
; 2712 : 				if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03af8	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  03afd	0f 85 5d 01 00
	00		 jne	 $LN871@Attack
  03b03	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  03b08	0f 85 52 01 00
	00		 jne	 $LN871@Attack

; 2713 : 				{
; 2714 : 					if ( AttackDamage > 0 )

  03b0e	83 7d 1c 00	 cmp	 DWORD PTR _AttackDamage$[ebp], 0
  03b12	0f 8e 48 01 00
	00		 jle	 $LN871@Attack

; 2715 : 					{
; 2716 : //#if(GS_CASTLE==1)
; 2717 : 						if(lpObj->m_btCsJoinSide == FALSE || (lpObj->m_btCsJoinSide != lpTargetObj->m_btCsJoinSide))

  03b18	8a 86 02 1c 00
	00		 mov	 al, BYTE PTR [esi+7170]
  03b1e	84 c0		 test	 al, al
  03b20	74 0c		 je	 SHORT $LN177@Attack
  03b22	3a 87 02 1c 00
	00		 cmp	 al, BYTE PTR [edi+7170]
  03b28	0f 84 32 01 00
	00		 je	 $LN871@Attack
$LN177@Attack:

; 2718 : //#endif
; 2719 : 						{
; 2720 : 							int iEquipmentPos = rand()%5 + 2;

  03b2e	e8 00 00 00 00	 call	 _rand
  03b33	99		 cdq
  03b34	b9 05 00 00 00	 mov	 ecx, 5
  03b39	f7 f9		 idiv	 ecx
  03b3b	83 c2 02	 add	 edx, 2

; 2721 : 							CItem * lpEquipment = &lpTargetObj->pInventory[iEquipmentPos];

  03b3e	8b da		 mov	 ebx, edx
  03b40	69 db d4 00 00
	00		 imul	 ebx, 212		; 000000d4H
  03b46	03 9f 24 0e 00
	00		 add	 ebx, DWORD PTR [edi+3620]
  03b4c	89 95 c8 fe ff
	ff		 mov	 DWORD PTR _iEquipmentPos$223028[ebp], edx

; 2722 : 
; 2723 : 							if ( lpEquipment && lpEquipment->IsItem() )

  03b52	0f 84 08 01 00
	00		 je	 $LN871@Attack
  03b58	8b cb		 mov	 ecx, ebx
  03b5a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  03b5f	85 c0		 test	 eax, eax
  03b61	0f 84 f9 00 00
	00		 je	 $LN871@Attack

; 2724 : 							{
; 2725 : 								int value = 50;
; 2726 : #if(S4E6||S5E3||S5E4)
; 2727 : 								if(lpTargetObj->m_MLPassiveSkill.m_iML_DurationReduction1 > 0)
; 2728 : 								{
; 2729 : 									value += 7 * lpTargetObj->m_MLPassiveSkill.m_btML_DurationReduction1;
; 2730 : 								}
; 2731 : #else
; 2732 : 								if( lpObj->m_MPSkillOpt.MpsDownDur1 != 0.0f )

  03b67	d9 86 44 26 00
	00		 fld	 DWORD PTR [esi+9796]
  03b6d	c7 85 d8 fe ff
	ff 32 00 00 00	 mov	 DWORD PTR _value$223031[ebp], 50 ; 00000032H
  03b77	d9 ee		 fldz
  03b79	da e9		 fucompp
  03b7b	df e0		 fnstsw	 ax
  03b7d	f6 c4 44	 test	 ah, 68			; 00000044H
  03b80	7b 25		 jnp	 SHORT $LN174@Attack

; 2733 : 								{
; 2734 : 									value += lpObj->m_MPSkillOpt.btMpsDownDur1Level*7;

  03b82	0f b6 86 48 26
	00 00		 movzx	 eax, BYTE PTR [esi+9800]
  03b89	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  03b90	2b d0		 sub	 edx, eax
  03b92	83 c2 32	 add	 edx, 50			; 00000032H
  03b95	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _value$223031[ebp], edx

; 2735 : 								}
; 2736 : #endif
; 2737 : 
; 2738 : 								if(value < 0)

  03b9b	79 0a		 jns	 SHORT $LN174@Attack

; 2739 : 								{
; 2740 : 									value = 1;

  03b9d	c7 85 d8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _value$223031[ebp], 1
$LN174@Attack:

; 2741 : 								}
; 2742 : 								
; 2743 : 								int iDurEquipment = (int)(lpEquipment->m_Durability * value / 100.0f);

  03ba7	db 85 d8 fe ff
	ff		 fild	 DWORD PTR _value$223031[ebp]
  03bad	8d 43 24	 lea	 eax, DWORD PTR [ebx+36]
  03bb0	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv6728[ebp], eax
  03bb6	d8 08		 fmul	 DWORD PTR [eax]
  03bb8	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  03bbe	e8 00 00 00 00	 call	 __ftol2_sse
  03bc3	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _iDurEquipment$223034[ebp], eax

; 2744 : 
; 2745 : #ifdef LUCKYITEM
; 2746 : 								if( g_LuckyItemManager.IsLuckyItemEquipment(lpEquipment->m_Type) )

  03bc9	0f bf 43 06	 movsx	 eax, WORD PTR [ebx+6]
  03bcd	50		 push	 eax
  03bce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  03bd3	e8 00 00 00 00	 call	 ?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemEquipment

; 2747 : 								{
; 2748 : 									iDurEquipment = lpEquipment->m_Durability;

  03bd8	8b 9d e0 fe ff
	ff		 mov	 ebx, DWORD PTR tv6728[ebp]
  03bde	85 c0		 test	 eax, eax
  03be0	74 0d		 je	 SHORT $LN173@Attack
  03be2	d9 03		 fld	 DWORD PTR [ebx]
  03be4	e8 00 00 00 00	 call	 __ftol2_sse
  03be9	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _iDurEquipment$223034[ebp], eax
$LN173@Attack:

; 2749 : 								}
; 2750 : #endif
; 2751 : 								lpEquipment->m_Durability = (float)iDurEquipment;

  03bef	db 85 d8 fe ff
	ff		 fild	 DWORD PTR _iDurEquipment$223034[ebp]
  03bf5	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv6743[ebp]
  03bfb	d9 85 dc fe ff
	ff		 fld	 DWORD PTR tv6743[ebp]
  03c01	d9 13		 fst	 DWORD PTR [ebx]

; 2752 : 
; 2753 : 								if ( lpEquipment->m_Durability < 0.0f )

  03c03	d9 ee		 fldz
  03c05	d8 d1		 fcom	 ST(1)
  03c07	df e0		 fnstsw	 ax
  03c09	dd d9		 fstp	 ST(1)
  03c0b	f6 c4 41	 test	 ah, 65			; 00000041H
  03c0e	75 04		 jne	 SHORT $LN1097@Attack

; 2754 : 								{
; 2755 : 									lpEquipment->m_Durability = 0.0f;

  03c10	d9 1b		 fstp	 DWORD PTR [ebx]
  03c12	eb 02		 jmp	 SHORT $LN172@Attack
$LN1097@Attack:
  03c14	dd d8		 fstp	 ST(0)
$LN172@Attack:

; 2756 : 								}
; 2757 : 
; 2758 : 								GCItemDurSend(lpTargetObj->m_Index, (BYTE)iEquipmentPos, (BYTE)lpEquipment->m_Durability, 0);

  03c16	d9 03		 fld	 DWORD PTR [ebx]
  03c18	6a 00		 push	 0
  03c1a	d9 bd d6 fe ff
	ff		 fnstcw	 WORD PTR tv4055[ebp]
  03c20	0f b7 85 d6 fe
	ff ff		 movzx	 eax, WORD PTR tv4055[ebp]
  03c27	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  03c2c	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4051[ebp], eax
  03c32	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _iEquipmentPos$223028[ebp]
  03c38	d9 ad dc fe ff
	ff		 fldcw	 WORD PTR tv4051[ebp]
  03c3e	db 9d dc fe ff
	ff		 fistp	 DWORD PTR tv4049[ebp]
  03c44	8a 8d dc fe ff
	ff		 mov	 cl, BYTE PTR tv4049[ebp]
  03c4a	0f b6 d1	 movzx	 edx, cl
  03c4d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  03c4f	d9 ad d6 fe ff
	ff		 fldcw	 WORD PTR tv4055[ebp]
  03c55	52		 push	 edx
  03c56	50		 push	 eax
  03c57	51		 push	 ecx
  03c58	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  03c5d	83 c4 10	 add	 esp, 16			; 00000010H
$LN871@Attack:

; 2759 : 							}
; 2760 : 						}
; 2761 : 					}
; 2762 : 				}
; 2763 : 			}
; 2764 : 
; 2765 : 			if ( !byReflect )

  03c60	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0

; 2766 : 			{
; 2767 : 				if( lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery > 0.0f &&
; 2768 : 					lpObj->Type == OBJ_USER &&
; 2769 : 					lpTargetObj->Type == OBJ_USER )

  03c64	d9 ee		 fldz
  03c66	bb 01 00 00 00	 mov	 ebx, 1
  03c6b	0f 85 d6 00 00
	00		 jne	 $LN166@Attack
  03c71	d8 96 80 26 00
	00		 fcom	 DWORD PTR [esi+9856]
  03c77	df e0		 fnstsw	 ax
  03c79	f6 c4 05	 test	 ah, 5
  03c7c	7a 1d		 jp	 SHORT $LN170@Attack
  03c7e	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03c82	75 17		 jne	 SHORT $LN170@Attack
  03c84	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  03c88	75 11		 jne	 SHORT $LN170@Attack

; 2770 : 				{
; 2771 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery;

  03c8a	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  03c8d	d8 86 80 26 00
	00		 fadd	 DWORD PTR [esi+9856]
  03c93	e8 00 00 00 00	 call	 __ftol2_sse
  03c98	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN170@Attack:

; 2772 : 				}
; 2773 : 
; 2774 : 				if( lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery > 0.0f &&
; 2775 : 					lpObj->Type == OBJ_USER &&
; 2776 : 					lpTargetObj->Type == OBJ_USER )

  03c9b	d8 96 a4 26 00
	00		 fcom	 DWORD PTR [esi+9892]
  03ca1	df e0		 fnstsw	 ax
  03ca3	f6 c4 05	 test	 ah, 5
  03ca6	7a 1d		 jp	 SHORT $LN169@Attack
  03ca8	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03cac	75 17		 jne	 SHORT $LN169@Attack
  03cae	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  03cb2	75 11		 jne	 SHORT $LN169@Attack

; 2777 : 				{
; 2778 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery;

  03cb4	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  03cb7	d8 86 a4 26 00
	00		 fadd	 DWORD PTR [esi+9892]
  03cbd	e8 00 00 00 00	 call	 __ftol2_sse
  03cc2	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN169@Attack:

; 2779 : 				}
; 2780 : 
; 2781 : 				if( lpObj->m_MPSkillOpt.MpsCrossbowMastery > 0.0f &&
; 2782 : 					lpObj->Type == OBJ_USER &&
; 2783 : 					lpTargetObj->Type == OBJ_USER )

  03cc5	d8 96 b8 26 00
	00		 fcom	 DWORD PTR [esi+9912]
  03ccb	df e0		 fnstsw	 ax
  03ccd	f6 c4 05	 test	 ah, 5
  03cd0	7a 1d		 jp	 SHORT $LN168@Attack
  03cd2	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03cd6	75 17		 jne	 SHORT $LN168@Attack
  03cd8	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  03cdc	75 11		 jne	 SHORT $LN168@Attack

; 2784 : 				{
; 2785 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsCrossbowMastery;

  03cde	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  03ce1	d8 86 b8 26 00
	00		 fadd	 DWORD PTR [esi+9912]
  03ce7	e8 00 00 00 00	 call	 __ftol2_sse
  03cec	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN168@Attack:

; 2786 : 				}
; 2787 : 
; 2788 : 				if( lpObj->m_MPSkillOpt.MpsStickMastery > 0.0f &&
; 2789 : 					lpObj->Type == OBJ_USER &&
; 2790 : 					lpTargetObj->Type == OBJ_USER )

  03cef	d8 96 f0 26 00
	00		 fcom	 DWORD PTR [esi+9968]
  03cf5	df e0		 fnstsw	 ax
  03cf7	f6 c4 05	 test	 ah, 5
  03cfa	7a 1d		 jp	 SHORT $LN167@Attack
  03cfc	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03d00	75 17		 jne	 SHORT $LN167@Attack
  03d02	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  03d06	75 11		 jne	 SHORT $LN167@Attack

; 2791 : 				{
; 2792 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsStickMastery;

  03d08	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  03d0b	d8 86 f0 26 00
	00		 fadd	 DWORD PTR [esi+9968]
  03d11	e8 00 00 00 00	 call	 __ftol2_sse
  03d16	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN167@Attack:

; 2793 : 				}
; 2794 : 
; 2795 : 				if( lpObj->m_MPSkillOpt.MpsScepterMastery > 0.0f &&
; 2796 : 					lpObj->Type == OBJ_USER &&
; 2797 : 					lpTargetObj->Type == OBJ_USER )

  03d19	d8 96 14 27 00
	00		 fcom	 DWORD PTR [esi+10004]
  03d1f	df e0		 fnstsw	 ax
  03d21	f6 c4 05	 test	 ah, 5
  03d24	7a 21		 jp	 SHORT $LN166@Attack
  03d26	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03d2a	0f 85 87 00 00
	00		 jne	 $LN165@Attack
  03d30	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  03d34	75 11		 jne	 SHORT $LN166@Attack

; 2798 : 				{
; 2799 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsScepterMastery;

  03d36	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  03d39	d8 86 14 27 00
	00		 fadd	 DWORD PTR [esi+10004]
  03d3f	e8 00 00 00 00	 call	 __ftol2_sse
  03d44	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN166@Attack:

; 2800 : 				}
; 2801 : 			}
; 2802 : 
; 2803 : 
; 2804 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03d47	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03d4b	75 6a		 jne	 SHORT $LN165@Attack
  03d4d	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  03d51	75 64		 jne	 SHORT $LN165@Attack

; 2805 : 			{
; 2806 : 				iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, AttackDamage);

  03d53	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  03d56	dd d8		 fstp	 ST(0)
  03d58	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  03d5e	52		 push	 edx
  03d5f	57		 push	 edi
  03d60	56		 push	 esi
  03d61	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage

; 2807 : 				lpTargetObj->iShield -= iTempShieldDamage;
; 2808 : 				lpTargetObj->Life -= AttackDamage - iTempShieldDamage;

  03d66	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  03d6c	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03d6f	29 87 54 01 00
	00		 sub	 DWORD PTR [edi+340], eax
  03d75	2b c8		 sub	 ecx, eax
  03d77	89 8d c8 fe ff
	ff		 mov	 DWORD PTR tv3956[ebp], ecx
  03d7d	da a5 c8 fe ff
	ff		 fisub	 DWORD PTR tv3956[ebp]
$LN1221@Attack:
  03d83	d9 9d cc fe ff
	ff		 fstp	 DWORD PTR tv6781[ebp]
  03d89	d9 85 cc fe ff
	ff		 fld	 DWORD PTR tv6781[ebp]

; 2809 : 				iTotalShieldDamage += iTempShieldDamage;

  03d8f	89 85 cc fe ff
	ff		 mov	 DWORD PTR _iTotalShieldDamage$[ebp], eax
$LN1243@Attack:

; 2810 : 
; 2811 : 				if ( lpTargetObj->Life < 0.0f )

  03d95	d9 97 fc 00 00
	00		 fst	 DWORD PTR [edi+252]
  03d9b	d9 ee		 fldz
  03d9d	d8 d1		 fcom	 ST(1)
  03d9f	df e0		 fnstsw	 ax
  03da1	dd d9		 fstp	 ST(1)
  03da3	f6 c4 41	 test	 ah, 65			; 00000041H
  03da6	0f 85 31 03 00
	00		 jne	 $LN1150@Attack

; 2812 : 				{
; 2813 : 					lpTargetObj->Life = 0.0f;

  03dac	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]

; 2814 : 				}
; 2815 : 			}
; 2816 : 			else

  03db2	e9 28 03 00 00	 jmp	 $LN877@Attack
$LN165@Attack:

; 2817 : 			{
; 2818 : 				lpTargetObj->Life -= AttackDamage;

  03db7	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  03dbd	da 65 1c	 fisub	 DWORD PTR _AttackDamage$[ebp]
  03dc0	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR tv6784[ebp]
  03dc6	d9 85 d8 fe ff
	ff		 fld	 DWORD PTR tv6784[ebp]
  03dcc	d9 97 fc 00 00
	00		 fst	 DWORD PTR [edi+252]

; 2819 : 
; 2820 : 				if ( lpTargetObj->Life < 0.0f )

  03dd2	d8 d9		 fcomp	 ST(1)
  03dd4	df e0		 fnstsw	 ax
  03dd6	f6 c4 05	 test	 ah, 5
  03dd9	0f 8a fe 02 00
	00		 jp	 $LN1150@Attack

; 2821 : 				{
; 2822 : 					lpTargetObj->Life = 0.0f;

  03ddf	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]

; 2823 : 				}
; 2824 : 			}
; 2825 : 		}
; 2826 : 	}	
; 2827 : 	else

  03de5	e9 f5 02 00 00	 jmp	 $LN877@Attack
$LN650@Attack:

; 2828 : 	{
; 2829 : 		if ( skill == 216 ) //summoner skill

  03dea	81 bd d0 fe ff
	ff d8 00 00 00	 cmp	 DWORD PTR _skill$[ebp], 216 ; 000000d8H
  03df4	8b 45 24	 mov	 eax, DWORD PTR _byBarrageCount$[ebp]
  03df7	0f 85 b0 00 00
	00		 jne	 $LN872@Attack

; 2830 : 		{
; 2831 : 			if ( g_ShieldSystemOn == TRUE )

  03dfd	b9 01 00 00 00	 mov	 ecx, 1
  03e02	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, ecx ; g_ShieldSystemOn
  03e08	75 7a		 jne	 SHORT $LN159@Attack

; 2832 : 			{
; 2833 : 				if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03e0a	66 39 4e 68	 cmp	 WORD PTR [esi+104], cx
  03e0e	75 3c		 jne	 SHORT $LN158@Attack
  03e10	66 39 4f 68	 cmp	 WORD PTR [edi+104], cx
  03e14	75 36		 jne	 SHORT $LN158@Attack

; 2834 : 				{
; 2835 : 					if ( !this->MissCheckPvP(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss,byBarrageCount) )

  03e16	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  03e1c	50		 push	 eax
  03e1d	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  03e20	8d 95 ac fe ff
	ff		 lea	 edx, DWORD PTR _bAllMiss$[ebp]
  03e26	52		 push	 edx
  03e27	50		 push	 eax
  03e28	53		 push	 ebx
  03e29	68 d8 00 00 00	 push	 216			; 000000d8H
  03e2e	57		 push	 edi
  03e2f	56		 push	 esi
  03e30	e8 00 00 00 00	 call	 ?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheckPvP
  03e35	85 c0		 test	 eax, eax
  03e37	75 74		 jne	 SHORT $LN872@Attack
  03e39	5f		 pop	 edi
  03e3a	5e		 pop	 esi
  03e3b	5b		 pop	 ebx

; 3511 : }

  03e3c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03e3f	33 cd		 xor	 ecx, ebp
  03e41	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03e46	8b e5		 mov	 esp, ebp
  03e48	5d		 pop	 ebp
  03e49	c2 24 00	 ret	 36			; 00000024H
$LN158@Attack:

; 2836 : 					{
; 2837 : 						return FALSE;
; 2838 : 					}
; 2839 : 				}
; 2840 : 				else if ( !this->MissCheck(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss, byBarrageCount) )

  03e4c	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  03e52	8b 11		 mov	 edx, DWORD PTR [ecx]
  03e54	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  03e57	50		 push	 eax
  03e58	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  03e5e	50		 push	 eax
  03e5f	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  03e62	50		 push	 eax
  03e63	53		 push	 ebx
  03e64	68 d8 00 00 00	 push	 216			; 000000d8H
  03e69	57		 push	 edi
  03e6a	56		 push	 esi
  03e6b	ff d2		 call	 edx
  03e6d	85 c0		 test	 eax, eax
  03e6f	75 3c		 jne	 SHORT $LN872@Attack
  03e71	5f		 pop	 edi
  03e72	5e		 pop	 esi
  03e73	5b		 pop	 ebx

; 3511 : }

  03e74	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03e77	33 cd		 xor	 ecx, ebp
  03e79	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03e7e	8b e5		 mov	 esp, ebp
  03e80	5d		 pop	 ebp
  03e81	c2 24 00	 ret	 36			; 00000024H
$LN159@Attack:

; 2841 : 				{
; 2842 : 					return FALSE;
; 2843 : 				}
; 2844 : 			}
; 2845 : 			else if ( !this->MissCheck(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss, byBarrageCount) )

  03e84	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  03e8a	8b 11		 mov	 edx, DWORD PTR [ecx]
  03e8c	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  03e8f	50		 push	 eax
  03e90	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  03e96	50		 push	 eax
  03e97	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  03e9a	50		 push	 eax
  03e9b	53		 push	 ebx
  03e9c	68 d8 00 00 00	 push	 216			; 000000d8H
  03ea1	57		 push	 edi
  03ea2	56		 push	 esi
  03ea3	ff d2		 call	 edx
  03ea5	85 c0		 test	 eax, eax

; 2846 : 			{
; 2847 : 				return FALSE;

  03ea7	0f 84 82 c5 ff
	ff		 je	 $LN1230@Attack
$LN872@Attack:

; 2848 : 			}
; 2849 : 		}
; 2850 : 
; 2851 : 
; 2852 : 
; 2853 : #if(CUSTOM_CW_ALTERELFDMG)
; 2854 : 		if(byReflect == 0)

  03ead	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0
  03eb1	0f 85 86 00 00
	00		 jne	 $LN914@Attack

; 2855 : 		{
; 2856 : 			if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  03eb7	6a 20		 push	 32			; 00000020H
  03eb9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03ebe	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03ec3	84 c0		 test	 al, al
  03ec5	75 20		 jne	 SHORT $LN941@Attack
  03ec7	6a 21		 push	 33			; 00000021H
  03ec9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03ece	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03ed3	84 c0		 test	 al, al
  03ed5	75 10		 jne	 SHORT $LN941@Attack
  03ed7	6a 22		 push	 34			; 00000022H
  03ed9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03ede	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03ee3	84 c0		 test	 al, al
  03ee5	74 56		 je	 SHORT $LN914@Attack
$LN941@Attack:

; 2857 : 			{
; 2858 : 				if(g_Crywolf.GetCrywolfState() == 4 || g_Crywolf.GetCrywolfState() == 3)

  03ee7	a1 ec b7 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1030124
  03eec	83 f8 04	 cmp	 eax, 4
  03eef	74 05		 je	 SHORT $LN148@Attack
  03ef1	83 f8 03	 cmp	 eax, 3
  03ef4	75 47		 jne	 SHORT $LN914@Attack
$LN148@Attack:

; 2859 : 				{
; 2860 : 					if(lpObj->Type == OBJ_USER)

  03ef6	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  03efb	75 40		 jne	 SHORT $LN914@Attack

; 2861 : 					{
; 2862 : 						for(int i=205;i<=209;i++)

  03efd	bb cd 00 00 00	 mov	 ebx, 205		; 000000cdH
$LL146@Attack:

; 2863 : 						{
; 2864 : 							int iAltarIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(i);

  03f02	53		 push	 ebx
  03f03	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  03f08	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex

; 2865 : 				
; 2866 : 							if(iAltarIndex != -1)

  03f0d	83 f8 ff	 cmp	 eax, -1
  03f10	74 22		 je	 SHORT $LN145@Attack

; 2867 : 							{
; 2868 : 								if(iAltarIndex == lpObj->m_Index)

  03f12	3b 06		 cmp	 eax, DWORD PTR [esi]
  03f14	75 1e		 jne	 SHORT $LN145@Attack

; 2869 : 								{
; 2870 : 									AttackDamage = ( AttackDamage * ZtConfig.Character.CWElfAlterDMGPercent ) / 100; 

  03f16	8b 0d 8c 01 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+396
  03f1c	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  03f20	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03f25	f7 e9		 imul	 ecx
  03f27	c1 fa 05	 sar	 edx, 5
  03f2a	8b c2		 mov	 eax, edx
  03f2c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03f2f	03 c2		 add	 eax, edx
  03f31	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN145@Attack:

; 2861 : 					{
; 2862 : 						for(int i=205;i<=209;i++)

  03f34	43		 inc	 ebx
  03f35	81 fb d1 00 00
	00		 cmp	 ebx, 209		; 000000d1H
  03f3b	7e c5		 jle	 SHORT $LL146@Attack
$LN914@Attack:

; 2871 : 								}
; 2872 : 							}
; 2873 : 						}
; 2874 : 					}
; 2875 : 				}
; 2876 : 			}
; 2877 : 		}
; 2878 : #endif
; 2879 : //#if(GS_CASTLE==1)
; 2880 : 		if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE)

  03f3d	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  03f44	bb 01 00 00 00	 mov	 ebx, 1
  03f49	0f 85 e5 00 00
	00		 jne	 $LN875@Attack

; 2881 : 		{
; 2882 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03f4f	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  03f53	0f 85 db 00 00
	00		 jne	 $LN875@Attack
  03f59	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  03f5d	0f 85 d1 00 00
	00		 jne	 $LN875@Attack

; 2883 : 			{
; 2884 : 				if ( lpObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )

  03f63	80 be 49 01 00
	00 1e		 cmp	 BYTE PTR [esi+329], 30	; 0000001eH
  03f6a	0f 85 c4 00 00
	00		 jne	 $LN875@Attack
  03f70	80 bf 49 01 00
	00 1e		 cmp	 BYTE PTR [edi+329], 30	; 0000001eH
  03f77	0f 85 b7 00 00
	00		 jne	 $LN875@Attack

; 2885 : 				{
; 2886 : 					if( lpObj->m_btCsJoinSide == lpTargetObj->m_btCsJoinSide)

  03f7d	8a 86 02 1c 00
	00		 mov	 al, BYTE PTR [esi+7170]
  03f83	3a 87 02 1c 00
	00		 cmp	 al, BYTE PTR [edi+7170]
  03f89	75 20		 jne	 SHORT $LN138@Attack

; 2887 : 					{
; 2888 : 						//int AttackByNPC2 = GetPrivateProfileInt("CastleSiege","AttackByNPC",20,"..\\Data\\ZtData\\Skills.ini");
; 2889 : 						AttackDamage = AttackDamage * ZtConfig.Character.CastleAttackByPlayer / 100;		//AttackDamage = AttackDamage * 20 / 100;

  03f8b	8b 0d 74 01 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+372
  03f91	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  03f95	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03f9a	f7 e9		 imul	 ecx
  03f9c	c1 fa 05	 sar	 edx, 5
  03f9f	8b ca		 mov	 ecx, edx
  03fa1	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03fa4	03 ca		 add	 ecx, edx
  03fa6	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  03fa9	eb 27		 jmp	 SHORT $LN136@Attack
$LN138@Attack:

; 2890 : 					}
; 2891 : 					else if(g_ShieldSystemOn == 0)

  03fab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 0 ; g_ShieldSystemOn
  03fb2	75 1e		 jne	 SHORT $LN136@Attack

; 2892 : 					{
; 2893 : 						//int AttackByPlayer2 = GetPrivateProfileInt("CastleSiege","AttackByPlayer",40,"..\\Data\\ZtData\\Skills.ini");
; 2894 : 						AttackDamage = AttackDamage * ZtConfig.Character.CastleAttackByPlayer / 100;		//AttackDamage = AttackDamage * 40 / 100;

  03fb4	8b 0d 74 01 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+372
  03fba	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  03fbe	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03fc3	f7 e9		 imul	 ecx
  03fc5	c1 fa 05	 sar	 edx, 5
  03fc8	8b c2		 mov	 eax, edx
  03fca	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03fcd	03 c2		 add	 eax, edx
  03fcf	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN136@Attack:

; 2895 : 					}
; 2896 : 					// ----
; 2897 : 					if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  03fd2	6a 20		 push	 32			; 00000020H
  03fd4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03fd9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03fde	84 c0		 test	 al, al
  03fe0	75 20		 jne	 SHORT $LN134@Attack
  03fe2	6a 22		 push	 34			; 00000022H
  03fe4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03fe9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03fee	84 c0		 test	 al, al
  03ff0	75 10		 jne	 SHORT $LN134@Attack
  03ff2	6a 21		 push	 33			; 00000021H
  03ff4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  03ff9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  03ffe	84 c0		 test	 al, al
  04000	74 32		 je	 SHORT $LN875@Attack
$LN134@Attack:

; 2898 : 					{
; 2899 : 						if(g_ZtUser.CheckAlliancePlayer(lpObj->m_Index, lpTargetObj->m_Index))

  04002	8b 0f		 mov	 ecx, DWORD PTR [edi]
  04004	8b 16		 mov	 edx, DWORD PTR [esi]
  04006	51		 push	 ecx
  04007	52		 push	 edx
  04008	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtUser@@3VZtUser@@A ; g_ZtUser
  0400d	e8 00 00 00 00	 call	 ?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z ; ZtUser::CheckAlliancePlayer
  04012	84 c0		 test	 al, al
  04014	74 1e		 je	 SHORT $LN875@Attack

; 2900 : 						{
; 2901 : 							AttackDamage = ( AttackDamage * ZtConfig.Character.CastleDamageByAlliance ) / 100;

  04016	8b 0d 84 01 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+388
  0401c	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  04020	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  04025	f7 e9		 imul	 ecx
  04027	c1 fa 05	 sar	 edx, 5
  0402a	8b c2		 mov	 eax, edx
  0402c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0402f	03 c2		 add	 eax, edx
  04031	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN875@Attack:

; 2902 : 						}
; 2903 : 					}
; 2904 : 				}
; 2905 : 			}
; 2906 : 		}
; 2907 : //#endif
; 2908 : 
; 2909 : 		if(g_ZtLicense.user.Rage)

  04034	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  0403b	74 12		 je	 SHORT $LN132@Attack

; 2910 : 		{
; 2911 : 			gSystemOfRage.AttackDamageRG(lpObj, lpTargetObj, AttackDamage, bDamageReflect);

  0403d	6a 00		 push	 0
  0403f	8d 45 1c	 lea	 eax, DWORD PTR _AttackDamage$[ebp]
  04042	50		 push	 eax
  04043	57		 push	 edi
  04044	56		 push	 esi
  04045	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  0404a	e8 00 00 00 00	 call	 ?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z ; cSystemOfRage::AttackDamageRG
$LN132@Attack:

; 2912 : 		}
; 2913 : 
; 2914 : #ifdef _BALANS_SYSTEM_
; 2915 : 		if(byReflect == 0)

  0404f	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0
  04053	75 10		 jne	 SHORT $LN131@Attack

; 2916 : 		{
; 2917 : 			gBalanceSystem.Main(lpObj,lpTargetObj,AttackDamage);

  04055	8d 4d 1c	 lea	 ecx, DWORD PTR _AttackDamage$[ebp]
  04058	51		 push	 ecx
  04059	57		 push	 edi
  0405a	56		 push	 esi
  0405b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBalanceSystem@@3VcBalanceSystem@@A ; gBalanceSystem
  04060	e8 00 00 00 00	 call	 ?Main@cBalanceSystem@@QAEXPAUOBJECTSTRUCT@@0AAH@Z ; cBalanceSystem::Main
$LN131@Attack:

; 2918 : 		}
; 2919 : 		else
; 2920 : 		{
; 2921 : 			//gBalanceSystem.Refflect(lpObj,AttackDamage);
; 2922 : 		}
; 2923 : #endif
; 2924 : 
; 2925 : 		//AttackDamage
; 2926 : 
; 2927 : 		if ( skill != 79 && skill != 216)

  04065	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  0406b	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  0406e	74 14		 je	 SHORT $LN876@Attack
  04070	3d d8 00 00 00	 cmp	 eax, 216		; 000000d8H
  04075	74 0d		 je	 SHORT $LN876@Attack

; 2928 : 		{
; 2929 : 			bDamageReflect = TRUE;

  04077	89 9d 9c fe ff
	ff		 mov	 DWORD PTR _bDamageReflect$[ebp], ebx

; 2930 : 			MsgDamage = 4;

  0407d	c6 85 e7 fe ff
	ff 04		 mov	 BYTE PTR _MsgDamage$[ebp], 4
$LN876@Attack:

; 2931 : 		}
; 2932 : 
; 2933 : 		if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  04084	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  04088	75 39		 jne	 SHORT $LN128@Attack
  0408a	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  0408e	75 33		 jne	 SHORT $LN128@Attack

; 2934 : 		{
; 2935 : 			iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, AttackDamage);

  04090	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  04093	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  04099	52		 push	 edx
  0409a	57		 push	 edi
  0409b	56		 push	 esi
  0409c	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage

; 2936 : 			lpTargetObj->iShield -= iTempShieldDamage;
; 2937 : 			lpTargetObj->Life -= AttackDamage - iTempShieldDamage;

  040a1	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  040a7	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  040aa	29 87 54 01 00
	00		 sub	 DWORD PTR [edi+340], eax
  040b0	2b c8		 sub	 ecx, eax
  040b2	89 8d c8 fe ff
	ff		 mov	 DWORD PTR tv3868[ebp], ecx
  040b8	da a5 c8 fe ff
	ff		 fisub	 DWORD PTR tv3868[ebp]

; 2938 : 			iTotalShieldDamage += iTempShieldDamage;
; 2939 : 
; 2940 : 			if ( lpTargetObj->Life < 0.0f )
; 2941 : 			{
; 2942 : 				lpTargetObj->Life = 0.0f;
; 2943 : 			}
; 2944 : 		}
; 2945 : 		else

  040be	e9 c0 fc ff ff	 jmp	 $LN1221@Attack
$LN128@Attack:

; 2946 : 		{
; 2947 : 			lpTargetObj->Life -= AttackDamage;

  040c3	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  040c9	da 65 1c	 fisub	 DWORD PTR _AttackDamage$[ebp]
  040cc	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR tv6784[ebp]
  040d2	d9 85 d8 fe ff
	ff		 fld	 DWORD PTR tv6784[ebp]
  040d8	e9 b8 fc ff ff	 jmp	 $LN1243@Attack
$LN1150@Attack:

; 2948 : 
; 2949 : 			if ( lpTargetObj->Life < 0.0f )

  040dd	dd d8		 fstp	 ST(0)
$LN877@Attack:

; 2950 : 			{
; 2951 : 				lpTargetObj->Life = 0.0f;
; 2952 : 			}
; 2953 : 		}
; 2954 : 	}
; 2955 : 
; 2956 : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  040df	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2
  040e4	75 46		 jne	 SHORT $LN880@Attack

; 2957 : 	{
; 2958 : 		gObjAddMsgSendDelay(lpTargetObj, 0, lpObj->m_Index, 100, 0);

  040e6	8b 16		 mov	 edx, DWORD PTR [esi]
  040e8	6a 00		 push	 0
  040ea	6a 64		 push	 100			; 00000064H
  040ec	52		 push	 edx
  040ed	6a 00		 push	 0
  040ef	57		 push	 edi
  040f0	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 2959 : 		lpTargetObj->LastAttackerID = lpObj->m_Index;

  040f5	66 8b 06	 mov	 ax, WORD PTR [esi]
  040f8	83 c4 14	 add	 esp, 20			; 00000014H

; 2960 : 
; 2961 : 		if ( lpTargetObj->m_iCurrentAI )

  040fb	83 bf 78 1c 00
	00 00		 cmp	 DWORD PTR [edi+7288], 0
  04102	66 89 87 5e 04
	00 00		 mov	 WORD PTR [edi+1118], ax
  04109	74 21		 je	 SHORT $LN880@Attack

; 2962 : 		{
; 2963 : 			lpTargetObj->m_Agro.IncAgro(lpObj->m_Index, AttackDamage / 50);

  0410b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  04110	f7 6d 1c	 imul	 DWORD PTR _AttackDamage$[ebp]
  04113	c1 fa 04	 sar	 edx, 4
  04116	8b ca		 mov	 ecx, edx
  04118	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0411b	03 ca		 add	 ecx, edx
  0411d	8b 16		 mov	 edx, DWORD PTR [esi]
  0411f	51		 push	 ecx
  04120	52		 push	 edx
  04121	8d 8f 94 1c 00
	00		 lea	 ecx, DWORD PTR [edi+7316]
  04127	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN880@Attack:

; 2964 : 		}
; 2965 : 	}
; 2966 : 
; 2967 : 	BOOL selfdefense = FALSE;
; 2968 : 	lpCallObj = lpTargetObj;
; 2969 : 	
; 2970 : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  0412c	0f b7 4f 68	 movzx	 ecx, WORD PTR [edi+104]
  04130	8b df		 mov	 ebx, edi
  04132	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _selfdefense$[ebp], 0
  0413c	89 9d a8 fe ff
	ff		 mov	 DWORD PTR _lpCallObj$[ebp], ebx
  04142	83 f9 02	 cmp	 ecx, 2
  04145	75 1e		 jne	 SHORT $LN121@Attack

; 2971 : 	{
; 2972 : 		if ( lpTargetObj->m_RecallMon >= 0 )

  04147	8b 87 50 04 00
	00		 mov	 eax, DWORD PTR [edi+1104]
  0414d	85 c0		 test	 eax, eax
  0414f	78 14		 js	 SHORT $LN121@Attack

; 2973 : 		{
; 2974 : 			lpCallObj = &gObj[lpTargetObj->m_RecallMon];

  04151	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  04157	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0415d	8b d8		 mov	 ebx, eax
  0415f	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _lpCallObj$[ebp], eax
$LN121@Attack:

; 2975 : 		}
; 2976 : 	}
; 2977 : 
; 2978 : 	if ( AttackDamage >= 1 )

  04165	83 7d 1c 01	 cmp	 DWORD PTR _AttackDamage$[ebp], 1
  04169	0f 8c 96 03 00
	00		 jl	 $LN881@Attack

; 2979 : 	{
; 2980 : 		if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  0416f	0f b7 46 68	 movzx	 eax, WORD PTR [esi+104]
  04173	83 f8 01	 cmp	 eax, 1
  04176	0f 85 f4 00 00
	00		 jne	 $LN119@Attack
  0417c	3b c8		 cmp	 ecx, eax
  0417e	0f 85 ec 00 00
	00		 jne	 $LN119@Attack

; 2981 : 		{
; 2982 : 			if ( gObjDuelCheck(lpObj, lpTargetObj) )

  04184	57		 push	 edi
  04185	56		 push	 esi
  04186	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  0418b	83 c4 08	 add	 esp, 8
  0418e	85 c0		 test	 eax, eax

; 2983 : 			{
; 2984 : 				selfdefense = 0;

  04190	0f 85 99 00 00
	00		 jne	 $LN927@Attack

; 2985 : 			}
; 2986 : 			else if ( CC_MAP_RANGE(lpObj->MapNumber) || CC_MAP_RANGE(lpTargetObj->MapNumber) )

  04196	8a 96 49 01 00
	00		 mov	 dl, BYTE PTR [esi+329]
  0419c	80 fa 35	 cmp	 dl, 53			; 00000035H
  0419f	0f 84 8a 00 00
	00		 je	 $LN927@Attack
  041a5	80 fa 12	 cmp	 dl, 18			; 00000012H
  041a8	72 0c		 jb	 SHORT $LN926@Attack
  041aa	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  041af	3a c2		 cmp	 al, dl
  041b1	1b c0		 sbb	 eax, eax
  041b3	40		 inc	 eax
  041b4	75 79		 jne	 SHORT $LN927@Attack
$LN926@Attack:
  041b6	8a 8f 49 01 00
	00		 mov	 cl, BYTE PTR [edi+329]
  041bc	80 f9 35	 cmp	 cl, 53			; 00000035H
  041bf	74 6e		 je	 SHORT $LN927@Attack
  041c1	80 f9 12	 cmp	 cl, 18			; 00000012H
  041c4	72 0c		 jb	 SHORT $LN841@Attack
  041c6	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  041cb	3a c1		 cmp	 al, cl
  041cd	1b c0		 sbb	 eax, eax
  041cf	40		 inc	 eax
  041d0	75 5d		 jne	 SHORT $LN927@Attack
$LN841@Attack:

; 2989 : 			}
; 2990 : 			else if ( IT_MAP_RANGE(lpObj->MapNumber) || IT_MAP_RANGE(lpTargetObj->MapNumber) ) //season 2.5 add-on

  041d2	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  041d5	72 0c		 jb	 SHORT $LN842@Attack
  041d7	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  041dc	3a c2		 cmp	 al, dl
  041de	1b c0		 sbb	 eax, eax
  041e0	40		 inc	 eax
  041e1	75 4c		 jne	 SHORT $LN927@Attack
$LN842@Attack:
  041e3	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  041e6	72 0c		 jb	 SHORT $LN843@Attack
  041e8	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  041ed	3a c1		 cmp	 al, cl
  041ef	1b c0		 sbb	 eax, eax
  041f1	40		 inc	 eax
  041f2	75 3b		 jne	 SHORT $LN927@Attack
$LN843@Attack:

; 2991 : 			{
; 2992 : 				selfdefense = 0;
; 2993 : 			}
; 2994 : 			else if( gGENS && gGensSystem.IsMapBattleZone(lpObj->MapNumber) || gGensSystem.IsMapBattleZone(lpTargetObj->MapNumber) )

  041f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  041fb	74 12		 je	 SHORT $LN916@Attack
  041fd	0f b6 ca	 movzx	 ecx, dl
  04200	51		 push	 ecx
  04201	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  04206	e8 00 00 00 00	 call	 ?IsMapBattleZone@GensSystem@@QAEHH@Z ; GensSystem::IsMapBattleZone
  0420b	85 c0		 test	 eax, eax
  0420d	75 20		 jne	 SHORT $LN927@Attack
$LN916@Attack:
  0420f	0f b6 97 49 01
	00 00		 movzx	 edx, BYTE PTR [edi+329]
  04216	52		 push	 edx
  04217	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  0421c	e8 00 00 00 00	 call	 ?IsMapBattleZone@GensSystem@@QAEHH@Z ; GensSystem::IsMapBattleZone

; 2995 : 			{
; 2996 : 				selfdefense = 0;
; 2997 : 			}
; 2998 : 			else
; 2999 : 			{
; 3000 : 				selfdefense = 1;

  04221	c7 85 d8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _selfdefense$[ebp], 1
  0422b	85 c0		 test	 eax, eax
  0422d	74 0a		 je	 SHORT $LN107@Attack
$LN927@Attack:

; 2987 : 			{
; 2988 : 				selfdefense = 0;

  0422f	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _selfdefense$[ebp], 0
$LN107@Attack:

; 3001 : 			}
; 3002 : 			if ( gObjGetRelationShip(lpObj, lpTargetObj) == 2 )

  04239	57		 push	 edi
  0423a	56		 push	 esi
  0423b	e8 00 00 00 00	 call	 ?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjGetRelationShip
  04240	83 c4 08	 add	 esp, 8
  04243	83 f8 02	 cmp	 eax, 2
  04246	75 0a		 jne	 SHORT $LN106@Attack

; 3003 : 			{
; 3004 : 				selfdefense = FALSE;

  04248	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _selfdefense$[ebp], 0
$LN106@Attack:

; 3005 : 			}
; 3006 : //#if(GS_CASTLE==1)
; 3007 : 			if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE)

  04252	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  04259	75 2e		 jne	 SHORT $LN101@Attack

; 3008 : 			{
; 3009 : 				if( lpObj->m_btCsJoinSide > 0 )

  0425b	80 be 02 1c 00
	00 00		 cmp	 BYTE PTR [esi+7170], 0
  04262	76 25		 jbe	 SHORT $LN101@Attack

; 3010 : 				{
; 3011 : 					selfdefense = FALSE;

  04264	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _selfdefense$[ebp], 0

; 3012 : 				}
; 3013 : 			}
; 3014 : //#endif
; 3015 : 		}

  0426e	eb 19		 jmp	 SHORT $LN101@Attack
$LN119@Attack:

; 3016 : 		else if ( lpTargetObj->Type == OBJ_MONSTER && lpObj->Type == OBJ_USER )

  04270	83 f9 02	 cmp	 ecx, 2
  04273	75 14		 jne	 SHORT $LN101@Attack
  04275	83 f8 01	 cmp	 eax, 1
  04278	75 0f		 jne	 SHORT $LN101@Attack

; 3017 : 		{
; 3018 : 			if ( lpTargetObj->m_RecallMon >= 0 )

  0427a	83 bf 50 04 00
	00 00		 cmp	 DWORD PTR [edi+1104], 0
  04281	7c 06		 jl	 SHORT $LN101@Attack

; 3019 : 			{
; 3020 : 				selfdefense = TRUE;

  04283	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _selfdefense$[ebp], eax
$LN101@Attack:

; 3021 : 			}
; 3022 : 		}
; 3023 : 
; 3024 : 		if ( lpTargetObj->Type == OBJ_USER )

  04289	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0428e	0f 85 24 02 00
	00		 jne	 $LN95@Attack

; 3025 : 		{
; 3026 : 			gObjArmorRandomDurDown(lpTargetObj, lpObj);

  04294	56		 push	 esi
  04295	57		 push	 edi
  04296	e8 00 00 00 00	 call	 ?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z ; gObjArmorRandomDurDown
  0429b	83 c4 08	 add	 esp, 8

; 3027 : 
; 3028 : 			if( skill == 333 )

  0429e	81 bd d0 fe ff
	ff 4d 01 00 00	 cmp	 DWORD PTR _skill$[ebp], 333 ; 0000014dH
  042a8	0f 85 0a 02 00
	00		 jne	 $LN95@Attack

; 3029 : 			{
; 3030 : 				float fDurDownRate = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  042ae	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$[ebp]
  042b4	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  042b8	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  042bb	51		 push	 ecx
  042bc	52		 push	 edx
  042bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  042c2	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  042c7	50		 push	 eax
  042c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  042cd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  042d2	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR _fDurDownRate$223117[ebp]

; 3031 : 
; 3032 : 				if( rand()%100 < fDurDownRate )

  042d8	e8 00 00 00 00	 call	 _rand
  042dd	99		 cdq
  042de	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  042e3	f7 f9		 idiv	 ecx
  042e5	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv3771[ebp], edx
  042eb	db 85 c8 fe ff
	ff		 fild	 DWORD PTR tv3771[ebp]
  042f1	d9 85 dc fe ff
	ff		 fld	 DWORD PTR _fDurDownRate$223117[ebp]
  042f7	de d9		 fcompp
  042f9	df e0		 fnstsw	 ax
  042fb	f6 c4 41	 test	 ah, 65			; 00000041H
  042fe	0f 85 b4 01 00
	00		 jne	 $LN95@Attack

; 3033 : 				{
; 3034 : 					if(lpObj->m_btCsJoinSide == 0 || lpObj->m_btCsJoinSide != lpTargetObj->m_btCsJoinSide)

  04304	8a 86 02 1c 00
	00		 mov	 al, BYTE PTR [esi+7170]
  0430a	84 c0		 test	 al, al
  0430c	74 0c		 je	 SHORT $LN96@Attack
  0430e	3a 87 02 1c 00
	00		 cmp	 al, BYTE PTR [edi+7170]
  04314	0f 84 9e 01 00
	00		 je	 $LN95@Attack
$LN96@Attack:

; 3035 : 					{
; 3036 : 						int item_num[5];
; 3037 : 						item_num[0] = 2;

  0431a	c7 85 e8 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _item_num$223121[ebp], 2

; 3038 : 						item_num[1] = 3;

  04324	c7 85 ec fe ff
	ff 03 00 00 00	 mov	 DWORD PTR _item_num$223121[ebp+4], 3

; 3039 : 						item_num[2] = 4;

  0432e	c7 85 f0 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _item_num$223121[ebp+8], 4

; 3040 : 						item_num[3] = 5;

  04338	c7 85 f4 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR _item_num$223121[ebp+12], 5

; 3041 : 						item_num[4] = 6;

  04342	c7 85 f8 fe ff
	ff 06 00 00 00	 mov	 DWORD PTR _item_num$223121[ebp+16], 6

; 3042 : 						int iEquipmentPos = rand()%5;	// Select and Armor

  0434c	e8 00 00 00 00	 call	 _rand
  04351	99		 cdq
  04352	b9 05 00 00 00	 mov	 ecx, 5
  04357	f7 f9		 idiv	 ecx

; 3043 : 						CItem * lpEquipment = &lpTargetObj->pInventory[item_num[iEquipmentPos]];

  04359	8b 9c 95 e8 fe
	ff ff		 mov	 ebx, DWORD PTR _item_num$223121[ebp+edx*4]
  04360	69 db d4 00 00
	00		 imul	 ebx, 212		; 000000d4H
  04366	03 9f 24 0e 00
	00		 add	 ebx, DWORD PTR [edi+3620]
  0436c	89 95 dc fe ff
	ff		 mov	 DWORD PTR _iEquipmentPos$223122[ebp], edx

; 3044 : 
; 3045 : 						if ( lpEquipment && lpEquipment->IsItem() )

  04372	0f 84 3a 01 00
	00		 je	 $LN919@Attack
  04378	8b cb		 mov	 ecx, ebx
  0437a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0437f	85 c0		 test	 eax, eax
  04381	0f 84 2b 01 00
	00		 je	 $LN919@Attack

; 3046 : 						{
; 3047 : 							float iDurDecValue = 0;
; 3048 : 
; 3049 : 							if( lpObj->m_MPSkillOpt.MpsDownDur1 != 0.0f )

  04387	d9 86 44 26 00
	00		 fld	 DWORD PTR [esi+9796]
  0438d	d9 ee		 fldz
  0438f	d9 c0		 fld	 ST(0)
  04391	dd ea		 fucomp	 ST(2)
  04393	df e0		 fnstsw	 ax
  04395	dd d9		 fstp	 ST(1)
  04397	f6 c4 44	 test	 ah, 68			; 00000044H
  0439a	7b 36		 jnp	 SHORT $LN1153@Attack

; 3050 : 							{
; 3051 : 								iDurDecValue += lpObj->m_MPSkillOpt.btMpsDownDur1Level/5.0f;

  0439c	0f b6 96 48 26
	00 00		 movzx	 edx, BYTE PTR [esi+9800]
  043a3	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv3711[ebp], edx
  043a9	db 85 c8 fe ff
	ff		 fild	 DWORD PTR tv3711[ebp]
  043af	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4014000000000000
  043b5	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  043bb	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR _iDurDecValue$223125[ebp]

; 3052 : 							}
; 3053 : 
; 3054 : 							if( iDurDecValue == 0.0f )

  043c1	d9 85 d4 fe ff
	ff		 fld	 DWORD PTR _iDurDecValue$223125[ebp]
  043c7	da e9		 fucompp
  043c9	df e0		 fnstsw	 ax
  043cb	f6 c4 44	 test	 ah, 68			; 00000044H
  043ce	7a 0c		 jp	 SHORT $LN93@Attack
  043d0	eb 02		 jmp	 SHORT $LN844@Attack
$LN1153@Attack:
  043d2	dd d8		 fstp	 ST(0)
$LN844@Attack:

; 3055 : 								iDurDecValue = 1.0f;

  043d4	d9 e8		 fld1
  043d6	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR _iDurDecValue$223125[ebp]
$LN93@Attack:

; 3056 : 
; 3057 : 							int damagemin = lpEquipment->m_BaseDurability/100.0f*(10-iDurDecValue);
; 3058 : 
; 3059 : 							int iDurEquipment = lpEquipment->m_Durability - damagemin;

  043dc	d9 43 24	 fld	 DWORD PTR [ebx+36]
  043df	8d 43 24	 lea	 eax, DWORD PTR [ebx+36]
  043e2	d9 85 d4 fe ff
	ff		 fld	 DWORD PTR _iDurDecValue$223125[ebp]
  043e8	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv6856[ebp], eax
  043ee	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4024000000000000
  043f4	d9 43 2c	 fld	 DWORD PTR [ebx+44]
  043f7	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  043fd	de c9		 fmulp	 ST(1), ST(0)
  043ff	e8 00 00 00 00	 call	 __ftol2_sse
  04404	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv3693[ebp], eax
  0440a	da a5 c8 fe ff
	ff		 fisub	 DWORD PTR tv3693[ebp]
  04410	e8 00 00 00 00	 call	 __ftol2_sse
  04415	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _iDurEquipment$223129[ebp], eax

; 3060 : 
; 3061 : 							/*for(int iBuffIndex = 0; iBuffIndex < lpObj->btEffectCount; iBuffIndex++)
; 3062 : 							{
; 3063 : 								if( lpObj->pEffectInfo[iBuffIndex].btEffectNum == BUFF_TALISMAN_ITEMPROTECT )
; 3064 : 								{
; 3065 : 									iDurEquipment = lpEquipment->m_Durability;
; 3066 : 									break;
; 3067 : 								}
; 3068 : 							}*/
; 3069 : 
; 3070 : #ifdef LUCKYITEM
; 3071 : 							if( g_LuckyItemManager.IsLuckyItemEquipment(lpEquipment->m_Type) )

  0441b	0f bf 43 06	 movsx	 eax, WORD PTR [ebx+6]
  0441f	50		 push	 eax
  04420	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LuckyItemManager@@3ULuckyItemManager@@A ; g_LuckyItemManager
  04425	e8 00 00 00 00	 call	 ?IsLuckyItemEquipment@LuckyItemManager@@QAEHH@Z ; LuckyItemManager::IsLuckyItemEquipment

; 3072 : 							{
; 3073 : 								iDurEquipment = lpEquipment->m_Durability;

  0442a	8b 9d e0 fe ff
	ff		 mov	 ebx, DWORD PTR tv6856[ebp]
  04430	85 c0		 test	 eax, eax
  04432	74 0d		 je	 SHORT $LN92@Attack
  04434	d9 03		 fld	 DWORD PTR [ebx]
  04436	e8 00 00 00 00	 call	 __ftol2_sse
  0443b	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _iDurEquipment$223129[ebp], eax
$LN92@Attack:

; 3074 : 							}
; 3075 : #endif
; 3076 : 
; 3077 : 							lpEquipment->m_Durability = (float)iDurEquipment;

  04441	db 85 a4 fe ff
	ff		 fild	 DWORD PTR _iDurEquipment$223129[ebp]
  04447	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR tv6879[ebp]
  0444d	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR tv6879[ebp]
  04453	d9 13		 fst	 DWORD PTR [ebx]

; 3078 : 
; 3079 : 							if ( lpEquipment->m_Durability < 0.0f )

  04455	d9 ee		 fldz
  04457	d8 d1		 fcom	 ST(1)
  04459	df e0		 fnstsw	 ax
  0445b	dd d9		 fstp	 ST(1)
  0445d	f6 c4 41	 test	 ah, 65			; 00000041H
  04460	75 04		 jne	 SHORT $LN1156@Attack

; 3080 : 							{
; 3081 : 								lpEquipment->m_Durability = 0.0f;

  04462	d9 1b		 fstp	 DWORD PTR [ebx]
  04464	eb 02		 jmp	 SHORT $LN91@Attack
$LN1156@Attack:
  04466	dd d8		 fstp	 ST(0)
$LN91@Attack:

; 3082 : 							}
; 3083 : 
; 3084 : 							GCItemDurSend(lpTargetObj->m_Index, iEquipmentPos, (BYTE)lpEquipment->m_Durability, 0);

  04468	d9 03		 fld	 DWORD PTR [ebx]
  0446a	6a 00		 push	 0
  0446c	d9 bd d6 fe ff
	ff		 fnstcw	 WORD PTR tv3663[ebp]
  04472	0f b7 85 d6 fe
	ff ff		 movzx	 eax, WORD PTR tv3663[ebp]
  04479	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0447e	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv3660[ebp], eax
  04484	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iEquipmentPos$223122[ebp]
  0448a	d9 ad c8 fe ff
	ff		 fldcw	 WORD PTR tv3660[ebp]
  04490	db 9d c8 fe ff
	ff		 fistp	 DWORD PTR tv3657[ebp]
  04496	8a 8d c8 fe ff
	ff		 mov	 cl, BYTE PTR tv3657[ebp]
  0449c	0f b6 d1	 movzx	 edx, cl
  0449f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  044a1	d9 ad d6 fe ff
	ff		 fldcw	 WORD PTR tv3663[ebp]
  044a7	52		 push	 edx
  044a8	50		 push	 eax
  044a9	51		 push	 ecx
  044aa	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  044af	83 c4 10	 add	 esp, 16			; 00000010H
$LN919@Attack:
  044b2	8b 9d a8 fe ff
	ff		 mov	 ebx, DWORD PTR _lpCallObj$[ebp]
$LN95@Attack:

; 3085 : 						}
; 3086 : 					}
; 3087 : 				}
; 3088 : 			}
; 3089 : 
; 3090 : 		}
; 3091 : 
; 3092 : 		if(gObjSearchActiveEffect(lpTargetObj, AT_ICE_ARROW) == 1)

  044b8	6a 39		 push	 57			; 00000039H
  044ba	57		 push	 edi
  044bb	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  044c0	83 c4 08	 add	 esp, 8
  044c3	3c 01		 cmp	 al, 1
  044c5	75 24		 jne	 SHORT $LN89@Attack

; 3093 : 		{
; 3094 : 			gObjUpdateSpecificBuffEffectDuration(lpTargetObj, AT_ICE_ARROW, -1);

  044c7	6a ff		 push	 -1
  044c9	6a 39		 push	 57			; 00000039H
  044cb	57		 push	 edi
  044cc	e8 00 00 00 00	 call	 ?gObjUpdateSpecificBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjUpdateSpecificBuffEffectDuration

; 3095 : 
; 3096 : 			if(gObjSearchActiveEffect(lpTargetObj, AT_ICE_ARROW) == 0)

  044d1	6a 39		 push	 57			; 00000039H
  044d3	57		 push	 edi
  044d4	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  044d9	83 c4 14	 add	 esp, 20			; 00000014H
  044dc	84 c0		 test	 al, al
  044de	75 0b		 jne	 SHORT $LN89@Attack

; 3097 : 			{
; 3098 : 				GCMagicCancelSend(lpTargetObj, 51);

  044e0	6a 33		 push	 51			; 00000033H
  044e2	57		 push	 edi
  044e3	e8 00 00 00 00	 call	 ?GCMagicCancelSend@@YAXPAUOBJECTSTRUCT@@G@Z ; GCMagicCancelSend
  044e8	83 c4 08	 add	 esp, 8
$LN89@Attack:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 		if(gObjSearchActiveEffect(lpTargetObj, AT_SLEEP) == 1)

  044eb	6a 48		 push	 72			; 00000048H
  044ed	57		 push	 edi
  044ee	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  044f3	83 c4 08	 add	 esp, 8
  044f6	3c 01		 cmp	 al, 1
  044f8	75 0b		 jne	 SHORT $LN881@Attack

; 3103 : 		{
; 3104 : 			gObjRemoveBuffEffect(lpTargetObj, AT_SLEEP);

  044fa	6a 48		 push	 72			; 00000048H
  044fc	57		 push	 edi
  044fd	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  04502	83 c4 08	 add	 esp, 8
$LN881@Attack:

; 3105 : 		}
; 3106 : 	}
; 3107 : 
; 3108 : 	if(lpObj->PartyNumber >= 0) //Season 2.5 add-on

  04505	8b 8e 2c 04 00
	00		 mov	 ecx, DWORD PTR [esi+1068]
  0450b	85 c9		 test	 ecx, ecx
  0450d	78 0e		 js	 SHORT $LN85@Attack

; 3109 : 	{
; 3110 : 		if(lpCallObj->PartyNumber >= 0)

  0450f	8b 83 2c 04 00
	00		 mov	 eax, DWORD PTR [ebx+1068]
  04515	85 c0		 test	 eax, eax
  04517	78 04		 js	 SHORT $LN85@Attack

; 3111 : 		{
; 3112 : 			if(lpObj->PartyNumber == lpCallObj->PartyNumber)

  04519	3b c8		 cmp	 ecx, eax

; 3113 : 			{
; 3114 : 				selfdefense = FALSE;
; 3115 : 			}
; 3116 : 		}
; 3117 : 
; 3118 : 	}
; 3119 : 
; 3120 : 	if ( selfdefense == TRUE && bDamageReflect == FALSE )

  0451b	74 52		 je	 SHORT $LN882@Attack
$LN85@Attack:
  0451d	83 bd d8 fe ff
	ff 01		 cmp	 DWORD PTR _selfdefense$[ebp], 1
  04524	75 49		 jne	 SHORT $LN882@Attack
  04526	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR _bDamageReflect$[ebp], 0
  0452d	75 40		 jne	 SHORT $LN882@Attack

; 3121 : 	{
; 3122 : 		if ( !gObjTargetGuildWarCheck(lpObj, lpCallObj) )

  0452f	53		 push	 ebx
  04530	56		 push	 esi
  04531	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  04536	83 c4 08	 add	 esp, 8
  04539	85 c0		 test	 eax, eax
  0453b	75 32		 jne	 SHORT $LN882@Attack

; 3123 : 		{
; 3124 : 			if(ZtConfig.PvP.ZtPkPartySystem && lpCallObj->PartyNumber >= 0) //Season 2.5 add-on

  0453d	39 05 38 09 00
	00		 cmp	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2360, eax
  04543	74 1e		 je	 SHORT $LN82@Attack
  04545	8b 83 2c 04 00
	00		 mov	 eax, DWORD PTR [ebx+1068]
  0454b	85 c0		 test	 eax, eax
  0454d	78 14		 js	 SHORT $LN82@Attack

; 3125 : 			{
; 3126 : 				int number = 0;
; 3127 : 				int partynum = lpCallObj->PartyNumber;
; 3128 : 
; 3129 : 				if( (gParty.GetPkLevel(partynum)) < 5)

  0454f	50		 push	 eax
  04550	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  04555	e8 00 00 00 00	 call	 ?GetPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPkLevel
  0455a	3c 05		 cmp	 al, 5
  0455c	7d 11		 jge	 SHORT $LN882@Attack

; 3130 : 				{
; 3131 : 					gObjCheckSelfDefense(lpObj, lpCallObj->m_Index);

  0455e	8b 13		 mov	 edx, DWORD PTR [ebx]
  04560	52		 push	 edx

; 3132 : 				}
; 3133 : 			}
; 3134 : 			else

  04561	eb 03		 jmp	 SHORT $LN1223@Attack
$LN82@Attack:

; 3135 : 			{
; 3136 : 				gObjCheckSelfDefense(lpObj, lpCallObj->m_Index);

  04563	8b 03		 mov	 eax, DWORD PTR [ebx]
  04565	50		 push	 eax
$LN1223@Attack:
  04566	56		 push	 esi
  04567	e8 00 00 00 00	 call	 ?gObjCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@H@Z ; gObjCheckSelfDefense
  0456c	83 c4 08	 add	 esp, 8
$LN882@Attack:

; 3137 : 			}
; 3138 : 		}
; 3139 : 	}
; 3140 : 
; 3141 : 	if ( lpTargetObj->Class == 275 )

  0456f	b9 13 01 00 00	 mov	 ecx, 275		; 00000113H
  04574	66 39 8f b8 00
	00 00		 cmp	 WORD PTR [edi+184], cx
  0457b	75 42		 jne	 SHORT $LN883@Attack

; 3142 : 	{
; 3143 : 		if ( lpTargetObj->m_iMonsterBattleDelay <= 0 )

  0457d	80 bf c9 03 00
	00 00		 cmp	 BYTE PTR [edi+969], 0
  04584	7f 39		 jg	 SHORT $LN883@Attack

; 3144 : 		{
; 3145 : 			if ( (rand()%15) < 1 )

  04586	e8 00 00 00 00	 call	 _rand
  0458b	99		 cdq
  0458c	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  04591	f7 f9		 idiv	 ecx
  04593	83 fa 01	 cmp	 edx, 1
  04596	7d 27		 jge	 SHORT $LN883@Attack

; 3146 : 			{
; 3147 : 				gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  04598	8b 16		 mov	 edx, DWORD PTR [esi]
  0459a	6a 00		 push	 0
  0459c	6a 64		 push	 100			; 00000064H
  0459e	52		 push	 edx
  0459f	6a 04		 push	 4
  045a1	57		 push	 edi
  045a2	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 3148 : 				lpTargetObj->m_iMonsterBattleDelay = 10;
; 3149 : 				GCActionSend(lpTargetObj, 126, lpTargetObj->m_Index, lpObj->m_Index);

  045a7	8b 0f		 mov	 ecx, DWORD PTR [edi]
  045a9	c6 87 c9 03 00
	00 0a		 mov	 BYTE PTR [edi+969], 10	; 0000000aH
  045b0	8b 06		 mov	 eax, DWORD PTR [esi]
  045b2	50		 push	 eax
  045b3	51		 push	 ecx
  045b4	6a 7e		 push	 126			; 0000007eH
  045b6	57		 push	 edi
  045b7	e8 00 00 00 00	 call	 ?GCActionSend@@YAXPAUOBJECTSTRUCT@@EHH@Z ; GCActionSend
  045bc	83 c4 24	 add	 esp, 36			; 00000024H
$LN883@Attack:

; 3150 : 			}
; 3151 : 		}
; 3152 : 	}
; 3153 : 
; 3154 : 	if ( lpTargetObj->Class == 131 || BC_STATUE_RANGE(lpTargetObj->Class-132) )

  045bf	0f b7 87 b8 00
	00 00		 movzx	 eax, WORD PTR [edi+184]
  045c6	ba 83 00 00 00	 mov	 edx, 131		; 00000083H
  045cb	66 3b c2	 cmp	 ax, dx
  045ce	74 6c		 je	 SHORT $LN931@Attack
  045d0	05 7c ff ff ff	 add	 eax, -132		; ffffff7cH
  045d5	78 0e		 js	 SHORT $LN930@Attack
  045d7	33 c9		 xor	 ecx, ecx
  045d9	83 f8 02	 cmp	 eax, 2
  045dc	0f 9e c1	 setle	 cl
  045df	8b c1		 mov	 eax, ecx
  045e1	85 c0		 test	 eax, eax
  045e3	75 57		 jne	 SHORT $LN931@Attack
$LN930@Attack:

; 3158 : 	}
; 3159 : 	else if ( AttackDamage >= 5 )

  045e5	83 7d 1c 05	 cmp	 DWORD PTR _AttackDamage$[ebp], 5
  045e9	7c 7b		 jl	 SHORT $LN932@Attack

; 3160 : 	{
; 3161 : 		if ( lpTargetObj->Type == OBJ_MONSTER )

  045eb	66 83 7f 68 02	 cmp	 WORD PTR [edi+104], 2
  045f0	75 24		 jne	 SHORT $LN72@Attack

; 3162 : 		{
; 3163 : 			if ( (rand()%26) == 0 )

  045f2	e8 00 00 00 00	 call	 _rand
  045f7	99		 cdq
  045f8	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  045fd	f7 f9		 idiv	 ecx
  045ff	85 d2		 test	 edx, edx
  04601	75 63		 jne	 SHORT $LN932@Attack

; 3164 : 			{
; 3165 : 				gObjAddMsgSendDelay(lpTargetObj,4, lpObj->m_Index, 100, 0);

  04603	52		 push	 edx
  04604	8b 16		 mov	 edx, DWORD PTR [esi]
  04606	6a 64		 push	 100			; 00000064H
  04608	52		 push	 edx
  04609	6a 04		 push	 4
  0460b	57		 push	 edi
  0460c	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  04611	83 c4 14	 add	 esp, 20			; 00000014H

; 3166 : 			}
; 3167 : 		}

  04614	eb 50		 jmp	 SHORT $LN932@Attack
$LN72@Attack:

; 3168 : 		else if ( (rand()%4) == 0 )

  04616	e8 00 00 00 00	 call	 _rand
  0461b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  04620	79 05		 jns	 SHORT $LN1170@Attack
  04622	48		 dec	 eax
  04623	83 c8 fc	 or	 eax, -4			; fffffffcH
  04626	40		 inc	 eax
$LN1170@Attack:
  04627	75 3d		 jne	 SHORT $LN932@Attack

; 3169 : 		{
; 3170 : 			if ( !gObjUniriaSprite(lpTargetObj) )

  04629	57		 push	 edi
  0462a	e8 00 00 00 00	 call	 ?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUniriaSprite
  0462f	83 c4 04	 add	 esp, 4
  04632	85 c0		 test	 eax, eax
  04634	75 30		 jne	 SHORT $LN932@Attack

; 3171 : 			{
; 3172 : 				MSBFlag = 1;

  04636	c6 45 18 01	 mov	 BYTE PTR _MSBFlag$[ebp], 1
  0463a	eb 2a		 jmp	 SHORT $LN932@Attack
$LN931@Attack:

; 3155 : 	{
; 3156 : 		gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  0463c	8b 06		 mov	 eax, DWORD PTR [esi]
  0463e	6a 00		 push	 0
  04640	6a 64		 push	 100			; 00000064H
  04642	50		 push	 eax
  04643	6a 04		 push	 4
  04645	57		 push	 edi
  04646	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 3157 : 		gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  0464b	0f bf 8f 46 01
	00 00		 movsx	 ecx, WORD PTR [edi+326]
  04652	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  04659	8b 07		 mov	 eax, DWORD PTR [edi]
  0465b	51		 push	 ecx
  0465c	52		 push	 edx
  0465d	50		 push	 eax
  0465e	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  04663	83 c4 20	 add	 esp, 32			; 00000020H
$LN932@Attack:

; 3173 : 			}
; 3174 : 		}
; 3175 : 	}
; 3176 : 
; 3177 : 	if(ManaChange)

  04666	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR _ManaChange$[ebp], 0
  0466d	74 25		 je	 SHORT $LN67@Attack

; 3178 : 	{
; 3179 : 		GCManaSend(lpTargetObj->m_Index, lpTargetObj->Mana, 0xFF, 0, lpTargetObj->BP);

  0466f	8b 8f 28 01 00
	00		 mov	 ecx, DWORD PTR [edi+296]
  04675	d9 87 10 01 00
	00		 fld	 DWORD PTR [edi+272]
  0467b	51		 push	 ecx
  0467c	6a 00		 push	 0
  0467e	68 ff 00 00 00	 push	 255			; 000000ffH
  04683	e8 00 00 00 00	 call	 __ftol2_sse
  04688	8b 17		 mov	 edx, DWORD PTR [edi]
  0468a	50		 push	 eax
  0468b	52		 push	 edx
  0468c	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  04691	83 c4 14	 add	 esp, 20			; 00000014H
$LN67@Attack:

; 3180 : 	}
; 3181 : 
; 3182 : 	if ( magicsend )

  04694	83 7d 14 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  04698	74 1a		 je	 SHORT $LN934@Attack

; 3183 : 	{
; 3184 : 		GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  0469a	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _skillSuccess$[ebp]
  046a0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  046a2	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _skill$[ebp]
  046a8	50		 push	 eax
  046a9	51		 push	 ecx
  046aa	52		 push	 edx
  046ab	56		 push	 esi
  046ac	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  046b1	83 c4 10	 add	 esp, 16			; 00000010H
$LN934@Attack:

; 3185 : 	}
; 3186 : 
; 3187 : 	if ( lpObj->Type == OBJ_USER )

  046b4	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  046b9	75 19		 jne	 SHORT $LN935@Attack

; 3188 : 	{
; 3189 : 		if ( lpObj->m_Change == 9 )

  046bb	83 be 54 04 00
	00 09		 cmp	 DWORD PTR [esi+1108], 9
  046c2	75 10		 jne	 SHORT $LN935@Attack

; 3190 : 		{
; 3191 : 			GCMagicAttackNumberSend(lpObj, 3, lpTargetObj->m_Index, 1);

  046c4	8b 07		 mov	 eax, DWORD PTR [edi]
  046c6	6a 01		 push	 1
  046c8	50		 push	 eax
  046c9	6a 03		 push	 3
  046cb	56		 push	 esi
  046cc	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  046d1	83 c4 10	 add	 esp, 16			; 00000010H
$LN935@Attack:

; 3192 : 		}
; 3193 : 	}
; 3194 : 
; 3195 : 	if ( lpObj->Class == CLASS_ELF && lpObj->Level == 1 && AttackDamage > 10 )

  046d4	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2
  046dc	75 58		 jne	 SHORT $LN936@Attack
  046de	66 83 be be 00
	00 00 01	 cmp	 WORD PTR [esi+190], 1
  046e6	75 4e		 jne	 SHORT $LN936@Attack
  046e8	83 7d 1c 0a	 cmp	 DWORD PTR _AttackDamage$[ebp], 10 ; 0000000aH
  046ec	7e 48		 jle	 SHORT $LN936@Attack

; 3196 : 	{
; 3197 : 		LogAdd("error-Level1 : [%s][%s] Str:%d %d %d %d %d %d %d", lpObj->AccountID, lpObj->Name, lpObj->Strength, lpObj->m_AttackDamageMinRight, lpObj->m_AttackDamageMaxRight, lpObj->m_AttackDamageMinLeft, lpObj->m_AttackDamageMaxLeft, lpObj->m_AttackDamageMax, lpObj->m_AttackDamageMin);

  046ee	8b 8e 60 04 00
	00		 mov	 ecx, DWORD PTR [esi+1120]
  046f4	8b 96 64 04 00
	00		 mov	 edx, DWORD PTR [esi+1124]
  046fa	8b 86 78 04 00
	00		 mov	 eax, DWORD PTR [esi+1144]
  04700	51		 push	 ecx
  04701	8b 8e 7c 04 00
	00		 mov	 ecx, DWORD PTR [esi+1148]
  04707	52		 push	 edx
  04708	8b 96 80 04 00
	00		 mov	 edx, DWORD PTR [esi+1152]
  0470e	50		 push	 eax
  0470f	8b 86 84 04 00
	00		 mov	 eax, DWORD PTR [esi+1156]
  04715	51		 push	 ecx
  04716	0f b7 8e f4 00
	00 00		 movzx	 ecx, WORD PTR [esi+244]
  0471d	52		 push	 edx
  0471e	50		 push	 eax
  0471f	51		 push	 ecx
  04720	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  04723	52		 push	 edx
  04724	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  04727	50		 push	 eax
  04728	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@
  0472d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  04733	83 c4 28	 add	 esp, 40			; 00000028H
$LN936@Attack:

; 3198 : 	}
; 3199 : 
; 3200 : 	lpObj->m_Rest = 0;
; 3201 : 	
; 3202 : 	if ( AttackDamage > 0 )

  04736	83 7d 1c 00	 cmp	 DWORD PTR _AttackDamage$[ebp], 0
  0473a	c6 86 25 02 00
	00 00		 mov	 BYTE PTR [esi+549], 0
  04741	0f 8e 29 05 00
	00		 jle	 $LN62@Attack

; 3203 : 	{
; 3204 : 
; 3205 : 			int atd_reflect = (int)((float)AttackDamage * lpTargetObj->DamageReflect / 100.0f);

  04747	0f b6 8f 71 01
	00 00		 movzx	 ecx, BYTE PTR [edi+369]
  0474e	89 8d c8 fe ff
	ff		 mov	 DWORD PTR tv3596[ebp], ecx
  04754	db 85 c8 fe ff
	ff		 fild	 DWORD PTR tv3596[ebp]
  0475a	da 4d 1c	 fimul	 DWORD PTR _AttackDamage$[ebp]
  0475d	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  04763	e8 00 00 00 00	 call	 __ftol2_sse

; 3206 : 
; 3207 : #if(FIX_REF2)
; 3208 : 			if(!ZtConfig.Character.bReflectToReflect)

  04768	80 3d 88 01 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+392, 0
  0476f	75 12		 jne	 SHORT $LN61@Attack

; 3209 : 			{
; 3210 : 				if(!byReflect)

  04771	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0
  04775	75 21		 jne	 SHORT $LN937@Attack

; 3211 : 				{
; 3212 : 					if ( atd_reflect )

  04777	85 c0		 test	 eax, eax
  04779	74 1d		 je	 SHORT $LN937@Attack

; 3213 : 					{
; 3214 : 						gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, atd_reflect);

  0477b	8b 16		 mov	 edx, DWORD PTR [esi]
  0477d	50		 push	 eax
  0477e	6a 0a		 push	 10			; 0000000aH
  04780	52		 push	 edx

; 3215 : 					}
; 3216 : 				}
; 3217 : 			}
; 3218 : 			else

  04781	eb 0a		 jmp	 SHORT $LN1224@Attack
$LN61@Attack:

; 3219 : 			{
; 3220 : 				if ( atd_reflect )

  04783	85 c0		 test	 eax, eax
  04785	74 11		 je	 SHORT $LN937@Attack

; 3221 : 				{
; 3222 : 					gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, atd_reflect);

  04787	50		 push	 eax
  04788	8b 06		 mov	 eax, DWORD PTR [esi]
  0478a	6a 0a		 push	 10			; 0000000aH
  0478c	50		 push	 eax
$LN1224@Attack:
  0478d	6a 0a		 push	 10			; 0000000aH
  0478f	57		 push	 edi
  04790	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  04795	83 c4 14	 add	 esp, 20			; 00000014H
$LN937@Attack:

; 3223 : 				}
; 3224 : 			}
; 3225 : #else
; 3226 : 			if ( atd_reflect )
; 3227 : 			{
; 3228 : 				gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, atd_reflect);
; 3229 : 			}
; 3230 : 
; 3231 : 			if ( (rand()%100) < lpObj->SetOpReflectionDamage )
; 3232 : 			{
; 3233 : 				gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, AttackDamage);
; 3234 : 			}
; 3235 : #endif
; 3236 : 		
; 3237 : 
; 3238 : 		if ( (rand()%100) < 5 ) //season 2.5 add-on

  04798	e8 00 00 00 00	 call	 _rand
  0479d	99		 cdq
  0479e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  047a3	f7 f9		 idiv	 ecx
  047a5	83 fa 05	 cmp	 edx, 5
  047a8	0f 8d f4 00 00
	00		 jge	 $LN974@Attack

; 3239 : 		{
; 3240 : 			if(gObjWingSprite(lpTargetObj) == TRUE)

  047ae	57		 push	 edi
  047af	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  047b4	83 c4 04	 add	 esp, 4
  047b7	83 f8 01	 cmp	 eax, 1
  047ba	0f 85 e2 00 00
	00		 jne	 $LN974@Attack

; 3241 : 			{
; 3242 : 				CItem * Wing = &lpTargetObj->pInventory[7];

  047c0	8b 97 24 0e 00
	00		 mov	 edx, DWORD PTR [edi+3620]

; 3243 : 				if(Wing->m_Type >= ITEMGET(12, 36) && Wing->m_Type <= ITEMGET(12, 40) || 
; 3244 : #ifdef NEWWINGS_2_5
; 3245 : 					IS_NEWWINGS_2_5(Wing->m_Type) || 
; 3246 : #endif
; 3247 : #ifdef NEWWINGS_4
; 3248 : 					IS_NEWWINGS_4(Wing->m_Type) || 
; 3249 : #endif
; 3250 : #ifdef NEWWINGS_5
; 3251 : 					IS_NEWWINGS_5(Wing->m_Type) || 
; 3252 : #endif
; 3253 : #ifdef NEWWINGS_6
; 3254 : 					IS_NEWWINGS_6(Wing->m_Type) || 
; 3255 : #endif
; 3256 : 					Wing->m_Type == ITEMGET(12, 43))			

  047c6	0f b7 82 d2 05
	00 00		 movzx	 eax, WORD PTR [edx+1490]
  047cd	b9 24 18 00 00	 mov	 ecx, 6180		; 00001824H
  047d2	66 3b c1	 cmp	 ax, cx
  047d5	7c 0e		 jl	 SHORT $LN52@Attack
  047d7	b9 28 18 00 00	 mov	 ecx, 6184		; 00001828H
  047dc	66 3b c1	 cmp	 ax, cx
  047df	0f 8e 7e 00 00
	00		 jle	 $LN967@Attack
$LN52@Attack:
  047e5	b9 ba 18 00 00	 mov	 ecx, 6330		; 000018baH
  047ea	66 3b c1	 cmp	 ax, cx
  047ed	7c 13		 jl	 SHORT $LN977@Attack
  047ef	33 db		 xor	 ebx, ebx
  047f1	b9 bc 18 00 00	 mov	 ecx, 6332		; 000018bcH
  047f6	66 3b c1	 cmp	 ax, cx
  047f9	0f 9e c3	 setle	 bl
  047fc	8b cb		 mov	 ecx, ebx
  047fe	85 c9		 test	 ecx, ecx
  04800	75 61		 jne	 SHORT $LN967@Attack
$LN977@Attack:
  04802	b9 b4 18 00 00	 mov	 ecx, 6324		; 000018b4H
  04807	66 3b c1	 cmp	 ax, cx
  0480a	7c 13		 jl	 SHORT $LN847@Attack
  0480c	33 db		 xor	 ebx, ebx
  0480e	b9 b9 18 00 00	 mov	 ecx, 6329		; 000018b9H
  04813	66 3b c1	 cmp	 ax, cx
  04816	0f 9e c3	 setle	 bl
  04819	8b cb		 mov	 ecx, ebx
  0481b	85 c9		 test	 ecx, ecx
  0481d	75 44		 jne	 SHORT $LN967@Attack
$LN847@Attack:
  0481f	b9 bd 18 00 00	 mov	 ecx, 6333		; 000018bdH
  04824	66 3b c1	 cmp	 ax, cx
  04827	7c 13		 jl	 SHORT $LN848@Attack
  04829	33 db		 xor	 ebx, ebx
  0482b	b9 c2 18 00 00	 mov	 ecx, 6338		; 000018c2H
  04830	66 3b c1	 cmp	 ax, cx
  04833	0f 9e c3	 setle	 bl
  04836	8b cb		 mov	 ecx, ebx
  04838	85 c9		 test	 ecx, ecx
  0483a	75 27		 jne	 SHORT $LN967@Attack
$LN848@Attack:
  0483c	b9 c3 18 00 00	 mov	 ecx, 6339		; 000018c3H
  04841	66 3b c1	 cmp	 ax, cx
  04844	7c 13		 jl	 SHORT $LN849@Attack
  04846	33 db		 xor	 ebx, ebx
  04848	b9 dc 18 00 00	 mov	 ecx, 6364		; 000018dcH
  0484d	66 3b c1	 cmp	 ax, cx
  04850	0f 9e c3	 setle	 bl
  04853	8b cb		 mov	 ecx, ebx
  04855	85 c9		 test	 ecx, ecx
  04857	75 0a		 jne	 SHORT $LN967@Attack
$LN849@Attack:
  04859	b9 2b 18 00 00	 mov	 ecx, 6187		; 0000182bH
  0485e	66 3b c1	 cmp	 ax, cx
  04861	75 3f		 jne	 SHORT $LN974@Attack
$LN967@Attack:

; 3257 : 				{
; 3258 : 					BYTE WingOption = lpTargetObj->pInventory[7].m_NewOption;
; 3259 : 
; 3260 : 					if((WingOption&2) == 2) // 5% Chance of Return Damage

  04863	f6 82 63 06 00
	00 02		 test	 BYTE PTR [edx+1635], 2
  0486a	74 36		 je	 SHORT $LN974@Attack

; 3261 : 					{
; 3262 : 						if(!byReflect)

  0486c	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0
  04870	75 30		 jne	 SHORT $LN974@Attack

; 3263 : 						{
; 3264 : 							if(lpObj->Type == OBJ_MONSTER)

  04872	0f b7 46 68	 movzx	 eax, WORD PTR [esi+104]
  04876	83 f8 02	 cmp	 eax, 2
  04879	75 0e		 jne	 SHORT $LN49@Attack

; 3265 : 							{
; 3266 : 								gObjAddMsgSendDelay(lpTargetObj, 12, lpObj->m_Index, 10, lpObj->m_AttackDamageMax);

  0487b	8b 96 64 04 00
	00		 mov	 edx, DWORD PTR [esi+1124]
  04881	8b 06		 mov	 eax, DWORD PTR [esi]
  04883	52		 push	 edx
  04884	6a 0a		 push	 10			; 0000000aH
  04886	50		 push	 eax
  04887	eb 0e		 jmp	 SHORT $LN1225@Attack
$LN49@Attack:

; 3267 : 							}
; 3268 : 							else if(lpObj->Type == OBJ_USER)

  04889	83 f8 01	 cmp	 eax, 1
  0488c	75 14		 jne	 SHORT $LN974@Attack

; 3269 : 							{
; 3270 : 								gObjAddMsgSendDelay(lpTargetObj, 12, lpObj->m_Index, 10, AttackDamage);

  0488e	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  04891	8b 16		 mov	 edx, DWORD PTR [esi]
  04893	51		 push	 ecx
  04894	6a 0a		 push	 10			; 0000000aH
  04896	52		 push	 edx
$LN1225@Attack:
  04897	6a 0c		 push	 12			; 0000000cH
  04899	57		 push	 edi
  0489a	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  0489f	83 c4 14	 add	 esp, 20			; 00000014H
$LN974@Attack:

; 3271 : 							}
; 3272 : 						}
; 3273 : 					}
; 3274 : 				}
; 3275 : 			}
; 3276 : 		}
; 3277 : 
; 3278 : 		if ( bCombo )

  048a2	83 7d 20 00	 cmp	 DWORD PTR _bCombo$[ebp], 0
  048a6	0f 84 22 01 00
	00		 je	 $LN46@Attack

; 3279 : 		{
; 3280 : #ifdef PRIDEMU_CONFIG
; 3281 : 			int iComboDamage;
; 3282 : 			if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu) /*|| g_ZtLicense.CheckUser(eZtUB::Local3) || g_ZtLicense.CheckUser(eZtUB::Local)*/)

  048ac	6a 1a		 push	 26			; 0000001aH
  048ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  048b3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  048b8	84 c0		 test	 al, al
  048ba	75 2b		 jne	 SHORT $LN44@Attack
  048bc	6a 11		 push	 17			; 00000011H
  048be	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  048c3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  048c8	84 c0		 test	 al, al
  048ca	75 1b		 jne	 SHORT $LN44@Attack

; 3286 : 			}
; 3287 : 			else
; 3288 : 			{
; 3289 : 				iComboDamage = ( Strength + Dexterity + Energy ) / 2;

  048cc	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _Energy$[ebp]
  048d2	03 85 b0 fe ff
	ff		 add	 eax, DWORD PTR _Dexterity$[ebp]
  048d8	03 85 b8 fe ff
	ff		 add	 eax, DWORD PTR _Strength$[ebp]
  048de	99		 cdq
  048df	2b c2		 sub	 eax, edx
  048e1	8b c8		 mov	 ecx, eax
  048e3	d1 f9		 sar	 ecx, 1
  048e5	eb 31		 jmp	 SHORT $LN43@Attack
$LN44@Attack:

; 3283 : 			{
; 3284 : 				iComboDamage = ( Strength + Dexterity + Energy ) / 2;

  048e7	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _Dexterity$[ebp]
  048ed	03 85 b4 fe ff
	ff		 add	 eax, DWORD PTR _Energy$[ebp]
  048f3	03 85 b8 fe ff
	ff		 add	 eax, DWORD PTR _Strength$[ebp]
  048f9	99		 cdq
  048fa	2b c2		 sub	 eax, edx
  048fc	8b c8		 mov	 ecx, eax

; 3285 : 				iComboDamage *= ZtConfig.PrideMu.ComboBase / 100;

  048fe	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  04903	f7 2d cc 0b 00
	00		 imul	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3020
  04909	c1 fa 05	 sar	 edx, 5
  0490c	8b c2		 mov	 eax, edx
  0490e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  04911	d1 f9		 sar	 ecx, 1
  04913	03 c2		 add	 eax, edx
  04915	0f af c8	 imul	 ecx, eax
$LN43@Attack:

; 3290 : 			}
; 3291 : #else
; 3292 : 			int iComboDamage = ( Strength + Dexterity + Energy ) / 2;
; 3293 : #endif
; 3294 : 
; 3295 : 			iComboDamage = ( iComboDamage * ZtConfig.Character.ComboDamagePercent ) / 100;

  04918	8b 15 90 01 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+400
  0491e	0f af d1	 imul	 edx, ecx
  04921	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  04926	f7 ea		 imul	 edx
  04928	c1 fa 05	 sar	 edx, 5
  0492b	8b da		 mov	 ebx, edx
  0492d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  04930	03 da		 add	 ebx, edx

; 3296 : 
; 3297 : 			AttackDamage += iComboDamage;

  04932	01 5d 1c	 add	 DWORD PTR _AttackDamage$[ebp], ebx

; 3298 : 
; 3299 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  04935	b8 01 00 00 00	 mov	 eax, 1
  0493a	89 9d c8 fe ff
	ff		 mov	 DWORD PTR _iComboDamage$223187[ebp], ebx
  04940	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  04944	75 5b		 jne	 SHORT $LN42@Attack
  04946	66 39 47 68	 cmp	 WORD PTR [edi+104], ax
  0494a	75 55		 jne	 SHORT $LN42@Attack

; 3300 : 			{
; 3301 : 				iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, iComboDamage);

  0494c	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  04952	53		 push	 ebx
  04953	57		 push	 edi
  04954	56		 push	 esi
  04955	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage

; 3302 : 				lpTargetObj->iShield -= iTempShieldDamage;
; 3303 : 				lpTargetObj->Life -= iComboDamage - iTempShieldDamage;

  0495a	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  04960	29 87 54 01 00
	00		 sub	 DWORD PTR [edi+340], eax
  04966	2b d8		 sub	 ebx, eax

; 3304 : 				iTotalShieldDamage += iTempShieldDamage;

  04968	01 85 cc fe ff
	ff		 add	 DWORD PTR _iTotalShieldDamage$[ebp], eax
  0496e	89 9d c8 fe ff
	ff		 mov	 DWORD PTR tv3527[ebp], ebx
  04974	da a5 c8 fe ff
	ff		 fisub	 DWORD PTR tv3527[ebp]
  0497a	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR tv6999[ebp]
  04980	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR tv6999[ebp]
$LN1244@Attack:

; 3305 : 
; 3306 : 				if ( lpTargetObj->Life < 0.0f )

  04986	d9 97 fc 00 00
	00		 fst	 DWORD PTR [edi+252]
  0498c	d9 ee		 fldz
  0498e	d8 d1		 fcom	 ST(1)
  04990	df e0		 fnstsw	 ax
  04992	dd d9		 fstp	 ST(1)
  04994	f6 c4 41	 test	 ah, 65			; 00000041H
  04997	75 22		 jne	 SHORT $LN1162@Attack

; 3307 : 				{
; 3308 : 					lpTargetObj->Life = 0.0f;

  04999	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]

; 3309 : 				}
; 3310 : 			}
; 3311 : 			else

  0499f	eb 1c		 jmp	 SHORT $LN39@Attack
$LN42@Attack:

; 3312 : 			{
; 3313 : 				lpTargetObj->Life -= iComboDamage;

  049a1	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  049a7	da a5 c8 fe ff
	ff		 fisub	 DWORD PTR _iComboDamage$223187[ebp]
  049ad	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR tv7003[ebp]
  049b3	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR tv7003[ebp]

; 3316 : 				{
; 3317 : 					lpTargetObj->Life = 0.0f;

  049b9	eb cb		 jmp	 SHORT $LN1244@Attack
$LN1162@Attack:

; 3314 : 
; 3315 : 				if ( lpTargetObj->Life < 0.0f )

  049bb	dd d8		 fstp	 ST(0)
$LN39@Attack:

; 3318 : 				}
; 3319 : 			}
; 3320 : 
; 3321 : 			MsgDamage |= 0x80;

  049bd	80 8d e7 fe ff
	ff 80		 or	 BYTE PTR _MsgDamage$[ebp], 128 ; 00000080H

; 3322 : 			skill = 59;

  049c4	c7 85 d0 fe ff
	ff 3b 00 00 00	 mov	 DWORD PTR _skill$[ebp], 59 ; 0000003bH
$LN46@Attack:

; 3323 : 		}
; 3324 : 
; 3325 : 		float fRate = lpObj->SetOpDoubleDamage + lpObj->m_MPSkillOpt.MpsSpearMastery + lpObj->m_MPSkillOpt.MpsFistMastery;

  049ce	0f b6 8e 3f 11
	00 00		 movzx	 ecx, BYTE PTR [esi+4415]
  049d5	d9 86 88 26 00
	00		 fld	 DWORD PTR [esi+9864]
  049db	89 8d c8 fe ff
	ff		 mov	 DWORD PTR tv3452[ebp], ecx
  049e1	db 85 c8 fe ff
	ff		 fild	 DWORD PTR tv3452[ebp]
  049e7	de c1		 faddp	 ST(1), ST(0)
  049e9	d8 86 98 27 00
	00		 fadd	 DWORD PTR [esi+10136]
  049ef	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR _fRate$223195[ebp]

; 3326 : 
; 3327 : 		if ( (rand()%100) < fRate )

  049f5	e8 00 00 00 00	 call	 _rand
  049fa	99		 cdq
  049fb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04a00	f7 f9		 idiv	 ecx
  04a02	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv3427[ebp], edx
  04a08	db 85 c8 fe ff
	ff		 fild	 DWORD PTR tv3427[ebp]
  04a0e	d9 85 dc fe ff
	ff		 fld	 DWORD PTR _fRate$223195[ebp]
  04a14	de d9		 fcompp
  04a16	df e0		 fnstsw	 ax
  04a18	f6 c4 41	 test	 ah, 65			; 00000041H
  04a1b	0f 85 bd 00 00
	00		 jne	 $LN885@Attack

; 3328 : 		{
; 3329 : 			if ( skill == 78 || (g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 525) )

  04a21	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  04a27	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  04a2a	74 12		 je	 SHORT $LN938@Attack
  04a2c	50		 push	 eax
  04a2d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  04a32	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  04a37	3d 0d 02 00 00	 cmp	 eax, 525		; 0000020dH
  04a3c	75 10		 jne	 SHORT $LN939@Attack
$LN938@Attack:

; 3330 : 			{
; 3331 : 				gObjUseSkill.FireScreamExplosionAttack(lpObj, lpTargetObj, AttackDamage);

  04a3e	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  04a41	52		 push	 edx
  04a42	57		 push	 edi
  04a43	56		 push	 esi
  04a44	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  04a49	e8 00 00 00 00	 call	 ?FireScreamExplosionAttack@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjUseSkill::FireScreamExplosionAttack
$LN939@Attack:

; 3332 : 			}
; 3333 : 
; 3334 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  04a4e	bb 01 00 00 00	 mov	 ebx, 1
  04a53	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  04a57	75 66		 jne	 SHORT $LN35@Attack
  04a59	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  04a5d	75 60		 jne	 SHORT $LN35@Attack

; 3335 : 			{
; 3336 : 				iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, AttackDamage);

  04a5f	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  04a62	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  04a68	50		 push	 eax
  04a69	57		 push	 edi
  04a6a	56		 push	 esi
  04a6b	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage

; 3337 : 				lpTargetObj->iShield -= iTempShieldDamage;
; 3338 : 				lpTargetObj->Life -= AttackDamage - iTempShieldDamage;

  04a70	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  04a76	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  04a79	29 87 54 01 00
	00		 sub	 DWORD PTR [edi+340], eax
  04a7f	8b d1		 mov	 edx, ecx
  04a81	2b d0		 sub	 edx, eax

; 3339 : 				iTotalShieldDamage += iTempShieldDamage;

  04a83	01 85 cc fe ff
	ff		 add	 DWORD PTR _iTotalShieldDamage$[ebp], eax
  04a89	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv3411[ebp], edx
  04a8f	da a5 c8 fe ff
	ff		 fisub	 DWORD PTR tv3411[ebp]

; 3340 : 				AttackDamage += AttackDamage;

  04a95	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  04a98	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN1245@Attack:

; 3341 : 
; 3342 : 				if ( lpTargetObj->Life < 0.0f )

  04a9b	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]
  04aa1	d9 ee		 fldz
  04aa3	d8 97 fc 00 00
	00		 fcom	 DWORD PTR [edi+252]
  04aa9	df e0		 fnstsw	 ax
  04aab	f6 c4 41	 test	 ah, 65			; 00000041H
  04aae	75 23		 jne	 SHORT $LN1168@Attack

; 3355 : 				}
; 3356 : 			}
; 3357 : 
; 3358 : 			MsgDamage |= 0x40;

  04ab0	80 8d e7 fe ff
	ff 40		 or	 BYTE PTR _MsgDamage$[ebp], 64 ; 00000040H
  04ab7	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]
  04abd	eb 24		 jmp	 SHORT $LN38@Attack
$LN35@Attack:

; 3343 : 				{
; 3344 : 					lpTargetObj->Life = 0.0f;
; 3345 : 				}
; 3346 : 			}
; 3347 : 			else
; 3348 : 			{
; 3349 : 				lpTargetObj->Life -= AttackDamage;
; 3350 : 				AttackDamage += AttackDamage;

  04abf	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  04ac2	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  04ac8	da 65 1c	 fisub	 DWORD PTR _AttackDamage$[ebp]
  04acb	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  04ace	89 55 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edx

; 3351 : 
; 3352 : 				if ( lpTargetObj->Life < 0.0f )
; 3353 : 				{
; 3354 : 					lpTargetObj->Life = 0.0f;

  04ad1	eb c8		 jmp	 SHORT $LN1245@Attack
$LN1168@Attack:

; 3355 : 				}
; 3356 : 			}
; 3357 : 
; 3358 : 			MsgDamage |= 0x40;

  04ad3	80 8d e7 fe ff
	ff 40		 or	 BYTE PTR _MsgDamage$[ebp], 64 ; 00000040H
  04ada	dd d8		 fstp	 ST(0)
  04adc	eb 05		 jmp	 SHORT $LN38@Attack
$LN885@Attack:
  04ade	bb 01 00 00 00	 mov	 ebx, 1
$LN38@Attack:

; 3359 : 		}
; 3360 : 
; 3361 : 		if ( g_ShieldSystemOn == TRUE )

  04ae3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_ShieldSystemOn@@3HA ; g_ShieldSystemOn
  04ae8	3b c3		 cmp	 eax, ebx
  04aea	75 0b		 jne	 SHORT $LN31@Attack

; 3362 : 		{
; 3363 : 			AttackDamage -= iTotalShieldDamage;

  04aec	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _iTotalShieldDamage$[ebp]
  04af2	29 45 1c	 sub	 DWORD PTR _AttackDamage$[ebp], eax

; 3364 : 		}
; 3365 : 
; 3366 : 		if ( g_ShieldSystemOn == FALSE )

  04af5	eb 5a		 jmp	 SHORT $LN28@Attack
$LN31@Attack:
  04af7	85 c0		 test	 eax, eax
  04af9	75 56		 jne	 SHORT $LN28@Attack

; 3367 : 		{
; 3368 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  04afb	66 39 5e 68	 cmp	 WORD PTR [esi+104], bx
  04aff	75 50		 jne	 SHORT $LN28@Attack
  04b01	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  04b05	75 4a		 jne	 SHORT $LN28@Attack

; 3369 : 			{
; 3370 : 				if ( CC_MAP_RANGE(lpObj->MapNumber) && CC_MAP_RANGE(lpTargetObj->MapNumber) )

  04b07	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  04b0e	3c 35		 cmp	 al, 53			; 00000035H
  04b10	74 0d		 je	 SHORT $LN850@Attack
  04b12	3c 12		 cmp	 al, 18			; 00000012H
  04b14	72 3b		 jb	 SHORT $LN28@Attack
  04b16	b1 17		 mov	 cl, 23			; 00000017H
  04b18	3a c8		 cmp	 cl, al
  04b1a	1b c0		 sbb	 eax, eax
  04b1c	40		 inc	 eax
  04b1d	74 32		 je	 SHORT $LN28@Attack
$LN850@Attack:
  04b1f	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  04b26	3c 35		 cmp	 al, 53			; 00000035H
  04b28	74 0d		 je	 SHORT $LN851@Attack
  04b2a	3c 12		 cmp	 al, 18			; 00000012H
  04b2c	72 23		 jb	 SHORT $LN28@Attack
  04b2e	b2 17		 mov	 dl, 23			; 00000017H
  04b30	3a d0		 cmp	 dl, al
  04b32	1b c0		 sbb	 eax, eax
  04b34	40		 inc	 eax
  04b35	74 1a		 je	 SHORT $LN28@Attack
$LN851@Attack:

; 3371 : 				{
; 3372 : 					AttackDamage = AttackDamage * 50 / 100;

  04b37	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  04b3a	6b c9 32	 imul	 ecx, 50			; 00000032H
  04b3d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  04b42	f7 e9		 imul	 ecx
  04b44	c1 fa 05	 sar	 edx, 5
  04b47	8b c2		 mov	 eax, edx
  04b49	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  04b4c	03 c2		 add	 eax, edx
  04b4e	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN28@Attack:

; 3373 : 				}
; 3374 : 			}
; 3375 : 		}
; 3376 : 
; 3377 : #ifdef MONK
; 3378 : 		if( lpObj->Class == CLASS_MONK && byBarrageCount )

  04b51	66 83 be b8 00
	00 00 06	 cmp	 WORD PTR [esi+184], 6
  04b59	0f 85 9d 00 00
	00		 jne	 $LN966@Attack
  04b5f	8a 5d 24	 mov	 bl, BYTE PTR _byBarrageCount$[ebp]
  04b62	84 db		 test	 bl, bl
  04b64	0f 84 92 00 00
	00		 je	 $LN966@Attack

; 3379 : 		{
; 3380 : 			if( lpMagic->m_Skill == 261 ||
; 3381 : 				lpMagic->m_Skill == 263 ||
; 3382 : 				g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 552 ||
; 3383 : 				g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 555 ||
; 3384 : 				g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 559 )

  04b6a	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  04b70	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  04b73	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  04b78	74 61		 je	 SHORT $LN886@Attack
  04b7a	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  04b7f	74 5a		 je	 SHORT $LN886@Attack
  04b81	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _skill$[ebp]
  04b87	52		 push	 edx
  04b88	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  04b8d	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  04b92	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  04b97	74 42		 je	 SHORT $LN886@Attack
  04b99	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$[ebp]
  04b9f	50		 push	 eax
  04ba0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  04ba5	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  04baa	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  04baf	74 2a		 je	 SHORT $LN886@Attack
  04bb1	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _skill$[ebp]
  04bb7	51		 push	 ecx
  04bb8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  04bbd	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  04bc2	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  04bc7	74 12		 je	 SHORT $LN886@Attack

; 3393 : 				}
; 3394 : 			}
; 3395 : 			else
; 3396 : 			{
; 3397 : 				if( (byBarrageCount%4) == 0 )

  04bc9	0f b6 d3	 movzx	 edx, bl
  04bcc	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  04bd2	79 16		 jns	 SHORT $LN1172@Attack
  04bd4	4a		 dec	 edx
  04bd5	83 ca fc	 or	 edx, -4			; fffffffcH
  04bd8	42		 inc	 edx

; 3398 : 				{
; 3399 : 					MsgDamage |= 0x20;
; 3400 : 				}
; 3401 : 				else
; 3402 : 				{
; 3403 : 					MsgDamage |= 0x10;

  04bd9	eb 0f		 jmp	 SHORT $LN1172@Attack
$LN886@Attack:

; 3385 : 			{
; 3386 : 				if( (byBarrageCount%2) == 0 )

  04bdb	0f b6 c3	 movzx	 eax, bl
  04bde	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  04be3	79 05		 jns	 SHORT $LN1172@Attack
  04be5	48		 dec	 eax
  04be6	83 c8 fe	 or	 eax, -2			; fffffffeH
  04be9	40		 inc	 eax
$LN1172@Attack:
  04bea	75 09		 jne	 SHORT $LN24@Attack

; 3387 : 				{
; 3388 : 					MsgDamage |= 0x20;

  04bec	80 8d e7 fe ff
	ff 20		 or	 BYTE PTR _MsgDamage$[ebp], 32 ; 00000020H

; 3389 : 				}
; 3390 : 				else

  04bf3	eb 07		 jmp	 SHORT $LN966@Attack
$LN24@Attack:

; 3391 : 				{
; 3392 : 					MsgDamage |= 0x10;

  04bf5	80 8d e7 fe ff
	ff 10		 or	 BYTE PTR _MsgDamage$[ebp], 16 ; 00000010H
$LN966@Attack:

; 3404 : 				}
; 3405 : 			}
; 3406 : 		}
; 3407 : #endif
; 3408 : 
; 3409 : 		gObjLifeCheck(lpTargetObj, lpObj, AttackDamage, 0, MSBFlag, MsgDamage, skill, iTotalShieldDamage);

  04bfc	8b 9d cc fe ff
	ff		 mov	 ebx, DWORD PTR _iTotalShieldDamage$[ebp]
  04c02	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _skill$[ebp]
  04c08	0f b6 95 e7 fe
	ff ff		 movzx	 edx, BYTE PTR _MsgDamage$[ebp]
  04c0f	0f b6 45 18	 movzx	 eax, BYTE PTR _MSBFlag$[ebp]
  04c13	53		 push	 ebx
  04c14	51		 push	 ecx
  04c15	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  04c18	52		 push	 edx
  04c19	50		 push	 eax
  04c1a	6a 00		 push	 0
  04c1c	51		 push	 ecx
  04c1d	56		 push	 esi
  04c1e	57		 push	 edi
  04c1f	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  04c24	83 c4 20	 add	 esp, 32			; 00000020H

; 3410 : 
; 3411 : 		if ( iTotalShieldDamage > 0 )

  04c27	85 db		 test	 ebx, ebx
  04c29	7e 61		 jle	 SHORT $LN18@Attack

; 3412 : 		{
; 3413 : 			LogAddTD("[PvP System] Victim:[%s][%s], Attacker:[%s][%s] - SD[%d] HP[%f] -> SD[%d] HP[%f]", lpTargetObj->AccountID, lpTargetObj->Name, lpObj->AccountID, lpObj->Name, lpTargetObj->iShield + iTotalShieldDamage, lpTargetObj->Life + AttackDamage, lpTargetObj->iShield, lpTargetObj->Life);

  04c2b	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]
  04c31	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  04c37	83 ec 08	 sub	 esp, 8
  04c3a	dd 1c 24	 fstp	 QWORD PTR [esp]
  04c3d	50		 push	 eax
  04c3e	db 45 1c	 fild	 DWORD PTR _AttackDamage$[ebp]
  04c41	83 ec 08	 sub	 esp, 8
  04c44	03 c3		 add	 eax, ebx
  04c46	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  04c49	d8 87 fc 00 00
	00		 fadd	 DWORD PTR [edi+252]
  04c4f	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  04c52	dd 1c 24	 fstp	 QWORD PTR [esp]
  04c55	50		 push	 eax
  04c56	52		 push	 edx
  04c57	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  04c5a	50		 push	 eax
  04c5b	51		 push	 ecx
  04c5c	8d 57 6c	 lea	 edx, DWORD PTR [edi+108]
  04c5f	52		 push	 edx
  04c60	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@
  04c65	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  04c6b	83 c4 2c	 add	 esp, 44			; 0000002cH

; 3414 : 		}
; 3415 : 	}
; 3416 : 	else

  04c6e	eb 1c		 jmp	 SHORT $LN18@Attack
$LN62@Attack:

; 3417 : 	{
; 3418 : 		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, MsgDamage, 0);

  04c70	0f b6 85 e7 fe
	ff ff		 movzx	 eax, BYTE PTR _MsgDamage$[ebp]
  04c77	8b 0f		 mov	 ecx, DWORD PTR [edi]
  04c79	8b 16		 mov	 edx, DWORD PTR [esi]
  04c7b	6a 00		 push	 0
  04c7d	50		 push	 eax
  04c7e	6a 00		 push	 0
  04c80	6a 00		 push	 0
  04c82	51		 push	 ecx
  04c83	52		 push	 edx
  04c84	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  04c89	83 c4 18	 add	 esp, 24			; 00000018H
$LN18@Attack:

; 3419 : 	}
; 3420 : 
; 3421 : 	if ( lpObj->Life <= 0.0f && lpObj->Type == OBJ_USER )

  04c8c	d9 ee		 fldz
  04c8e	d8 9e fc 00 00
	00		 fcomp	 DWORD PTR [esi+252]
  04c94	df e0		 fnstsw	 ax
  04c96	f6 c4 01	 test	 ah, 1
  04c99	75 31		 jne	 SHORT $LN16@Attack
  04c9b	b8 01 00 00 00	 mov	 eax, 1
  04ca0	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  04ca4	75 26		 jne	 SHORT $LN16@Attack

; 3422 : 	{
; 3423 : 		if ( lpObj->m_CheckLifeTime <= 0 )

  04ca6	83 be d4 10 00
	00 00		 cmp	 DWORD PTR [esi+4308], 0
  04cad	7f 1d		 jg	 SHORT $LN16@Attack

; 3424 : 		{
; 3425 : 			lpObj->lpAttackObj = lpTargetObj;

  04caf	89 be d4 03 00
	00		 mov	 DWORD PTR [esi+980], edi

; 3426 : 
; 3427 : 			if ( lpTargetObj->Type == OBJ_USER )

  04cb5	66 39 47 68	 cmp	 WORD PTR [edi+104], ax

; 3428 : 			{
; 3429 : 				lpObj->m_bAttackerKilled = true;
; 3430 : 			}
; 3431 : 			else
; 3432 : 			{
; 3433 : 				lpObj->m_bAttackerKilled = false;
; 3434 : 			}
; 3435 : 
; 3436 : 			lpObj->m_CheckLifeTime = 3;

  04cb9	c7 86 d4 10 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+4308], 3
  04cc3	0f 94 c0	 sete	 al
  04cc6	88 86 e0 03 00
	00		 mov	 BYTE PTR [esi+992], al
$LN16@Attack:

; 3437 : 		}
; 3438 : 	}
; 3439 : 
; 3440 : 
; 3441 : 	CItem* Right = &lpObj->pInventory[0];

  04ccc	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]

; 3442 : 	CItem* Left = &lpObj->pInventory[1];

  04cd2	8d 99 d4 00 00
	00		 lea	 ebx, DWORD PTR [ecx+212]

; 3443 : 
; 3444 : 	if( Right->GetDetailItemType() == 2 ||
; 3445 : 		Left->GetDetailItemType() == 2 )

  04cd8	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  04cdd	83 f8 02	 cmp	 eax, 2
  04ce0	74 10		 je	 SHORT $LN12@Attack
  04ce2	8b cb		 mov	 ecx, ebx
  04ce4	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  04ce9	83 f8 02	 cmp	 eax, 2
  04cec	0f 85 83 00 00
	00		 jne	 $LN957@Attack
$LN12@Attack:

; 3446 : 	{
; 3447 : 		if( lpObj->m_MPSkillOpt.MpsMaceMastery > 0.0f )

  04cf2	d9 ee		 fldz
  04cf4	d8 9e 8c 26 00
	00		 fcomp	 DWORD PTR [esi+9868]
  04cfa	df e0		 fnstsw	 ax
  04cfc	f6 c4 05	 test	 ah, 5
  04cff	7a 74		 jp	 SHORT $LN957@Attack

; 3448 : 		{
; 3449 : 			float fPercent = rand()%100;

  04d01	e8 00 00 00 00	 call	 _rand
  04d06	99		 cdq
  04d07	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04d0c	f7 f9		 idiv	 ecx
  04d0e	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv3251[ebp], edx
  04d14	db 85 c8 fe ff
	ff		 fild	 DWORD PTR tv3251[ebp]
  04d1a	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR _fPercent$223227[ebp]

; 3450 : 
; 3451 : 			if( fPercent < lpObj->m_MPSkillOpt.MpsMaceMastery )

  04d20	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR _fPercent$223227[ebp]
  04d26	d9 86 8c 26 00
	00		 fld	 DWORD PTR [esi+9868]
  04d2c	de d9		 fcompp
  04d2e	df e0		 fnstsw	 ax
  04d30	f6 c4 41	 test	 ah, 65			; 00000041H
  04d33	75 40		 jne	 SHORT $LN957@Attack

; 3452 : 			{
; 3453 : 				if(!g_ZtLicense.CheckUser(eZtUB::Stone))

  04d35	6a 37		 push	 55			; 00000037H
  04d37	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  04d3c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  04d41	84 c0		 test	 al, al
  04d43	75 15		 jne	 SHORT $LN956@Attack

; 3454 : 				{
; 3455 : 					gObjApplyBuffEffectDuration(lpTargetObj,AT_STUN,0,0,0,0,2);

  04d45	6a 02		 push	 2
  04d47	6a 00		 push	 0
  04d49	6a 00		 push	 0
  04d4b	6a 00		 push	 0
  04d4d	6a 00		 push	 0
  04d4f	6a 3d		 push	 61			; 0000003dH
  04d51	57		 push	 edi
  04d52	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  04d57	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN956@Attack:

; 3456 : 				}
; 3457 : 				gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  04d5a	0f bf 97 46 01
	00 00		 movsx	 edx, WORD PTR [edi+326]
  04d61	0f bf 87 44 01
	00 00		 movsx	 eax, WORD PTR [edi+324]
  04d68	8b 0f		 mov	 ecx, DWORD PTR [edi]
  04d6a	52		 push	 edx
  04d6b	50		 push	 eax
  04d6c	51		 push	 ecx
  04d6d	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  04d72	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN957@Attack:

; 3458 : 			}
; 3459 : 		}
; 3460 : 	}
; 3461 : 
; 3462 : 	if ( lpMagic && lpMagic->m_Skill == 332 )

  04d75	8b 9d bc fe ff
	ff		 mov	 ebx, DWORD PTR _lpMagic$GSCopy$[ebp]
  04d7b	85 db		 test	 ebx, ebx
  04d7d	0f 84 82 00 00
	00		 je	 $LN5@Attack
  04d83	81 7b 08 4c 01
	00 00		 cmp	 DWORD PTR [ebx+8], 332	; 0000014cH
  04d8a	75 68		 jne	 SHORT $LN6@Attack

; 3463 : 	{
; 3464 : 		float fSpringValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  04d8c	0f b6 53 04	 movzx	 edx, BYTE PTR [ebx+4]
  04d90	52		 push	 edx
  04d91	68 4c 01 00 00	 push	 332			; 0000014cH
  04d96	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  04d9b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  04da0	50		 push	 eax
  04da1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  04da6	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  04dab	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR _fSpringValue$223231[ebp]

; 3465 : 
; 3466 : 		if( fSpringValue > 0.0f )

  04db1	d9 ee		 fldz
  04db3	d8 9d b8 fe ff
	ff		 fcomp	 DWORD PTR _fSpringValue$223231[ebp]
  04db9	df e0		 fnstsw	 ax
  04dbb	f6 c4 05	 test	 ah, 5
  04dbe	7a 34		 jp	 SHORT $LN6@Attack

; 3467 : 		{
; 3468 : 			float fPercent = rand()%100;

  04dc0	e8 00 00 00 00	 call	 _rand
  04dc5	99		 cdq
  04dc6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04dcb	f7 f9		 idiv	 ecx

; 3469 : 
; 3470 : 			if( fPercent < fSpringValue )

  04dcd	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv3115[ebp], edx
  04dd3	db 85 c8 fe ff
	ff		 fild	 DWORD PTR tv3115[ebp]
  04dd9	d9 85 b8 fe ff
	ff		 fld	 DWORD PTR _fSpringValue$223231[ebp]
  04ddf	de d9		 fcompp
  04de1	df e0		 fnstsw	 ax
  04de3	f6 c4 41	 test	 ah, 65			; 00000041H
  04de6	75 0c		 jne	 SHORT $LN6@Attack

; 3471 : 			{
; 3472 : 				gObjBackSpring2(lpTargetObj,lpObj,2);

  04de8	6a 02		 push	 2
  04dea	56		 push	 esi
  04deb	57		 push	 edi
  04dec	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  04df1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Attack:

; 3473 : 			}
; 3474 : 		}
; 3475 : 	}
; 3476 : 
; 3477 : 
; 3478 : 	if ( lpMagic )
; 3479 : 	{
; 3480 : 		gObjUseSkill.SpecificSkillAdditionTreat(lpObj, lpTargetObj, lpMagic, AttackDamage);

  04df4	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  04df7	52		 push	 edx
  04df8	53		 push	 ebx
  04df9	57		 push	 edi
  04dfa	56		 push	 esi
  04dfb	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  04e00	e8 00 00 00 00	 call	 ?SpecificSkillAdditionTreat@CObjUseSkill@@QAEXPAUOBJECTSTRUCT@@0PAVCMagicInf@@H@Z ; CObjUseSkill::SpecificSkillAdditionTreat
$LN5@Attack:

; 3481 : 	}
; 3482 : 
; 3483 : #if(DEV_COMBO_CUSTOM==TRUE)
; 3484 : 	if ( bCombo && lpObj->Class != CLASS_KNIGHT)

  04e05	83 7d 20 00	 cmp	 DWORD PTR _bCombo$[ebp], 0
  04e09	74 1a		 je	 SHORT $LN959@Attack
  04e0b	66 83 be b8 00
	00 00 01	 cmp	 WORD PTR [esi+184], 1
  04e13	74 10		 je	 SHORT $LN959@Attack

; 3485 : 	{
; 3486 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpTargetObj->m_Index,1);

  04e15	8b 07		 mov	 eax, DWORD PTR [edi]
  04e17	6a 01		 push	 1
  04e19	50		 push	 eax
  04e1a	6a 3b		 push	 59			; 0000003bH
  04e1c	56		 push	 esi
  04e1d	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  04e22	83 c4 10	 add	 esp, 16			; 00000010H
$LN959@Attack:

; 3487 : 	}
; 3488 : #endif
; 3489 : 
; 3490 : 	#if(DEV_DAMAGE_TABLE)
; 3491 : 	if(AttackDamage > 0)

  04e25	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  04e28	85 c0		 test	 eax, eax
  04e2a	7e 37		 jle	 SHORT $LN1@Attack

; 3492 : 	{
; 3493 : 		if(byReflect)

  04e2c	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0
  04e30	74 0b		 je	 SHORT $LN2@Attack

; 3494 : 		{
; 3495 : 			lpObj->m_SecondReflect += AttackDamage;
; 3496 : 			g_ZtUser.GCDamageTable(lpObj->m_Index);

  04e32	8b 0e		 mov	 ecx, DWORD PTR [esi]
  04e34	01 86 30 2b 00
	00		 add	 DWORD PTR [esi+11056], eax
  04e3a	51		 push	 ecx

; 3497 : 		}
; 3498 : 		else

  04e3b	eb 1c		 jmp	 SHORT $LN1229@Attack
$LN2@Attack:

; 3499 : 		{
; 3500 : 			lpObj->m_SecondDamage += AttackDamage;

  04e3d	01 86 28 2b 00
	00		 add	 DWORD PTR [esi+11048], eax

; 3501 : 			lpTargetObj->m_SecondDefence += AttackDamage;

  04e43	01 87 2c 2b 00
	00		 add	 DWORD PTR [edi+11052], eax

; 3502 : 			g_ZtUser.GCDamageTable(lpObj->m_Index);

  04e49	8b 16		 mov	 edx, DWORD PTR [esi]
  04e4b	52		 push	 edx
  04e4c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtUser@@3VZtUser@@A ; g_ZtUser
  04e51	e8 00 00 00 00	 call	 ?GCDamageTable@ZtUser@@QAEXH@Z ; ZtUser::GCDamageTable

; 3503 : 			g_ZtUser.GCDamageTable(lpTargetObj->m_Index);

  04e56	8b 07		 mov	 eax, DWORD PTR [edi]
  04e58	50		 push	 eax
$LN1229@Attack:
  04e59	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtUser@@3VZtUser@@A ; g_ZtUser
  04e5e	e8 00 00 00 00	 call	 ?GCDamageTable@ZtUser@@QAEXH@Z ; ZtUser::GCDamageTable
$LN1@Attack:

; 3511 : }

  04e63	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  04e66	5f		 pop	 edi
  04e67	5e		 pop	 esi
  04e68	33 cd		 xor	 ecx, ebp
  04e6a	b8 01 00 00 00	 mov	 eax, 1
  04e6f	5b		 pop	 ebx
  04e70	e8 00 00 00 00	 call	 @__security_check_cookie@4
  04e75	8b e5		 mov	 esp, ebp
  04e77	5d		 pop	 ebp
  04e78	c2 24 00	 ret	 36			; 00000024H
  04e7b	90		 npad	 1
$LN1246@Attack:
  04e7c	00 00 00 00	 DD	 $LN1070@Attack
  04e80	00 00 00 00	 DD	 $LN1067@Attack
  04e84	00 00 00 00	 DD	 $LN1069@Attack
  04e88	00 00 00 00	 DD	 $LN1068@Attack
  04e8c	00 00 00 00	 DD	 $LN1066@Attack
  04e90	00 00 00 00	 DD	 $LN1065@Attack
  04e94	00 00 00 00	 DD	 $LN430@Attack
  04e98	00 00 00 00	 DD	 $LN1063@Attack
  04e9c	00 00 00 00	 DD	 $LN1064@Attack
  04ea0	00 00 00 00	 DD	 $LN1060@Attack
  04ea4	00 00 00 00	 DD	 $LN1059@Attack
  04ea8	00 00 00 00	 DD	 $LN1058@Attack
  04eac	00 00 00 00	 DD	 $LN1062@Attack
  04eb0	00 00 00 00	 DD	 $LN1061@Attack
  04eb4	00 00 00 00	 DD	 $LN1057@Attack
  04eb8	00 00 00 00	 DD	 $LN1056@Attack
  04ebc	00 00 00 00	 DD	 $LN1055@Attack
  04ec0	00 00 00 00	 DD	 $LN1054@Attack
  04ec4	00 00 00 00	 DD	 $LN1053@Attack
  04ec8	00 00 00 00	 DD	 $LN1052@Attack
  04ecc	00 00 00 00	 DD	 $LN1048@Attack
  04ed0	00 00 00 00	 DD	 $LN1051@Attack
  04ed4	00 00 00 00	 DD	 $LN1050@Attack
  04ed8	00 00 00 00	 DD	 $LN1049@Attack
  04edc	00 00 00 00	 DD	 $LN341@Attack
  04ee0	00 00 00 00	 DD	 $LN1047@Attack
  04ee4	00 00 00 00	 DD	 $LN1046@Attack
  04ee8	00 00 00 00	 DD	 $LN1045@Attack
  04eec	00 00 00 00	 DD	 $LN1044@Attack
  04ef0	00 00 00 00	 DD	 $LN1043@Attack
  04ef4	00 00 00 00	 DD	 $LN1042@Attack
  04ef8	00 00 00 00	 DD	 $LN1041@Attack
  04efc	00 00 00 00	 DD	 $LN1040@Attack
$LN852@Attack:
  04f00	00		 DB	 0
  04f01	00		 DB	 0
  04f02	00		 DB	 0
  04f03	00		 DB	 0
  04f04	00		 DB	 0
  04f05	20		 DB	 32			; 00000020H
  04f06	20		 DB	 32			; 00000020H
  04f07	20		 DB	 32			; 00000020H
  04f08	20		 DB	 32			; 00000020H
  04f09	20		 DB	 32			; 00000020H
  04f0a	20		 DB	 32			; 00000020H
  04f0b	20		 DB	 32			; 00000020H
  04f0c	20		 DB	 32			; 00000020H
  04f0d	20		 DB	 32			; 00000020H
  04f0e	20		 DB	 32			; 00000020H
  04f0f	20		 DB	 32			; 00000020H
  04f10	20		 DB	 32			; 00000020H
  04f11	20		 DB	 32			; 00000020H
  04f12	20		 DB	 32			; 00000020H
  04f13	20		 DB	 32			; 00000020H
  04f14	20		 DB	 32			; 00000020H
  04f15	20		 DB	 32			; 00000020H
  04f16	00		 DB	 0
  04f17	00		 DB	 0
  04f18	00		 DB	 0
  04f19	00		 DB	 0
  04f1a	20		 DB	 32			; 00000020H
  04f1b	01		 DB	 1
  04f1c	02		 DB	 2
  04f1d	20		 DB	 32			; 00000020H
  04f1e	00		 DB	 0
  04f1f	20		 DB	 32			; 00000020H
  04f20	01		 DB	 1
  04f21	01		 DB	 1
  04f22	20		 DB	 32			; 00000020H
  04f23	20		 DB	 32			; 00000020H
  04f24	00		 DB	 0
  04f25	03		 DB	 3
  04f26	00		 DB	 0
  04f27	20		 DB	 32			; 00000020H
  04f28	20		 DB	 32			; 00000020H
  04f29	04		 DB	 4
  04f2a	04		 DB	 4
  04f2b	04		 DB	 4
  04f2c	20		 DB	 32			; 00000020H
  04f2d	20		 DB	 32			; 00000020H
  04f2e	04		 DB	 4
  04f2f	20		 DB	 32			; 00000020H
  04f30	20		 DB	 32			; 00000020H
  04f31	20		 DB	 32			; 00000020H
  04f32	20		 DB	 32			; 00000020H
  04f33	20		 DB	 32			; 00000020H
  04f34	20		 DB	 32			; 00000020H
  04f35	20		 DB	 32			; 00000020H
  04f36	20		 DB	 32			; 00000020H
  04f37	04		 DB	 4
  04f38	20		 DB	 32			; 00000020H
  04f39	05		 DB	 5
  04f3a	20		 DB	 32			; 00000020H
  04f3b	04		 DB	 4
  04f3c	20		 DB	 32			; 00000020H
  04f3d	20		 DB	 32			; 00000020H
  04f3e	20		 DB	 32			; 00000020H
  04f3f	20		 DB	 32			; 00000020H
  04f40	20		 DB	 32			; 00000020H
  04f41	20		 DB	 32			; 00000020H
  04f42	20		 DB	 32			; 00000020H
  04f43	20		 DB	 32			; 00000020H
  04f44	20		 DB	 32			; 00000020H
  04f45	20		 DB	 32			; 00000020H
  04f46	20		 DB	 32			; 00000020H
  04f47	20		 DB	 32			; 00000020H
  04f48	20		 DB	 32			; 00000020H
  04f49	20		 DB	 32			; 00000020H
  04f4a	20		 DB	 32			; 00000020H
  04f4b	20		 DB	 32			; 00000020H
  04f4c	20		 DB	 32			; 00000020H
  04f4d	20		 DB	 32			; 00000020H
  04f4e	20		 DB	 32			; 00000020H
  04f4f	20		 DB	 32			; 00000020H
  04f50	20		 DB	 32			; 00000020H
  04f51	20		 DB	 32			; 00000020H
  04f52	20		 DB	 32			; 00000020H
  04f53	20		 DB	 32			; 00000020H
  04f54	20		 DB	 32			; 00000020H
  04f55	20		 DB	 32			; 00000020H
  04f56	20		 DB	 32			; 00000020H
  04f57	20		 DB	 32			; 00000020H
  04f58	20		 DB	 32			; 00000020H
  04f59	20		 DB	 32			; 00000020H
  04f5a	20		 DB	 32			; 00000020H
  04f5b	20		 DB	 32			; 00000020H
  04f5c	20		 DB	 32			; 00000020H
  04f5d	20		 DB	 32			; 00000020H
  04f5e	20		 DB	 32			; 00000020H
  04f5f	20		 DB	 32			; 00000020H
  04f60	20		 DB	 32			; 00000020H
  04f61	20		 DB	 32			; 00000020H
  04f62	20		 DB	 32			; 00000020H
  04f63	20		 DB	 32			; 00000020H
  04f64	20		 DB	 32			; 00000020H
  04f65	20		 DB	 32			; 00000020H
  04f66	20		 DB	 32			; 00000020H
  04f67	20		 DB	 32			; 00000020H
  04f68	20		 DB	 32			; 00000020H
  04f69	20		 DB	 32			; 00000020H
  04f6a	20		 DB	 32			; 00000020H
  04f6b	20		 DB	 32			; 00000020H
  04f6c	20		 DB	 32			; 00000020H
  04f6d	20		 DB	 32			; 00000020H
  04f6e	20		 DB	 32			; 00000020H
  04f6f	20		 DB	 32			; 00000020H
  04f70	20		 DB	 32			; 00000020H
  04f71	20		 DB	 32			; 00000020H
  04f72	20		 DB	 32			; 00000020H
  04f73	20		 DB	 32			; 00000020H
  04f74	20		 DB	 32			; 00000020H
  04f75	20		 DB	 32			; 00000020H
  04f76	20		 DB	 32			; 00000020H
  04f77	20		 DB	 32			; 00000020H
  04f78	20		 DB	 32			; 00000020H
  04f79	20		 DB	 32			; 00000020H
  04f7a	20		 DB	 32			; 00000020H
  04f7b	20		 DB	 32			; 00000020H
  04f7c	20		 DB	 32			; 00000020H
  04f7d	20		 DB	 32			; 00000020H
  04f7e	20		 DB	 32			; 00000020H
  04f7f	20		 DB	 32			; 00000020H
  04f80	20		 DB	 32			; 00000020H
  04f81	20		 DB	 32			; 00000020H
  04f82	20		 DB	 32			; 00000020H
  04f83	20		 DB	 32			; 00000020H
  04f84	20		 DB	 32			; 00000020H
  04f85	20		 DB	 32			; 00000020H
  04f86	20		 DB	 32			; 00000020H
  04f87	20		 DB	 32			; 00000020H
  04f88	20		 DB	 32			; 00000020H
  04f89	20		 DB	 32			; 00000020H
  04f8a	20		 DB	 32			; 00000020H
  04f8b	20		 DB	 32			; 00000020H
  04f8c	20		 DB	 32			; 00000020H
  04f8d	20		 DB	 32			; 00000020H
  04f8e	20		 DB	 32			; 00000020H
  04f8f	20		 DB	 32			; 00000020H
  04f90	20		 DB	 32			; 00000020H
  04f91	20		 DB	 32			; 00000020H
  04f92	20		 DB	 32			; 00000020H
  04f93	20		 DB	 32			; 00000020H
  04f94	20		 DB	 32			; 00000020H
  04f95	20		 DB	 32			; 00000020H
  04f96	20		 DB	 32			; 00000020H
  04f97	20		 DB	 32			; 00000020H
  04f98	20		 DB	 32			; 00000020H
  04f99	20		 DB	 32			; 00000020H
  04f9a	20		 DB	 32			; 00000020H
  04f9b	20		 DB	 32			; 00000020H
  04f9c	20		 DB	 32			; 00000020H
  04f9d	20		 DB	 32			; 00000020H
  04f9e	20		 DB	 32			; 00000020H
  04f9f	20		 DB	 32			; 00000020H
  04fa0	20		 DB	 32			; 00000020H
  04fa1	20		 DB	 32			; 00000020H
  04fa2	20		 DB	 32			; 00000020H
  04fa3	20		 DB	 32			; 00000020H
  04fa4	20		 DB	 32			; 00000020H
  04fa5	20		 DB	 32			; 00000020H
  04fa6	20		 DB	 32			; 00000020H
  04fa7	20		 DB	 32			; 00000020H
  04fa8	20		 DB	 32			; 00000020H
  04fa9	20		 DB	 32			; 00000020H
  04faa	20		 DB	 32			; 00000020H
  04fab	20		 DB	 32			; 00000020H
  04fac	20		 DB	 32			; 00000020H
  04fad	20		 DB	 32			; 00000020H
  04fae	20		 DB	 32			; 00000020H
  04faf	20		 DB	 32			; 00000020H
  04fb0	20		 DB	 32			; 00000020H
  04fb1	20		 DB	 32			; 00000020H
  04fb2	20		 DB	 32			; 00000020H
  04fb3	20		 DB	 32			; 00000020H
  04fb4	20		 DB	 32			; 00000020H
  04fb5	20		 DB	 32			; 00000020H
  04fb6	20		 DB	 32			; 00000020H
  04fb7	20		 DB	 32			; 00000020H
  04fb8	20		 DB	 32			; 00000020H
  04fb9	20		 DB	 32			; 00000020H
  04fba	20		 DB	 32			; 00000020H
  04fbb	20		 DB	 32			; 00000020H
  04fbc	20		 DB	 32			; 00000020H
  04fbd	20		 DB	 32			; 00000020H
  04fbe	20		 DB	 32			; 00000020H
  04fbf	20		 DB	 32			; 00000020H
  04fc0	20		 DB	 32			; 00000020H
  04fc1	20		 DB	 32			; 00000020H
  04fc2	20		 DB	 32			; 00000020H
  04fc3	06		 DB	 6
  04fc4	07		 DB	 7
  04fc5	08		 DB	 8
  04fc6	20		 DB	 32			; 00000020H
  04fc7	20		 DB	 32			; 00000020H
  04fc8	09		 DB	 9
  04fc9	20		 DB	 32			; 00000020H
  04fca	0a		 DB	 10			; 0000000aH
  04fcb	0b		 DB	 11			; 0000000bH
  04fcc	0c		 DB	 12			; 0000000cH
  04fcd	0d		 DB	 13			; 0000000dH
  04fce	0e		 DB	 14			; 0000000eH
  04fcf	20		 DB	 32			; 00000020H
  04fd0	20		 DB	 32			; 00000020H
  04fd1	20		 DB	 32			; 00000020H
  04fd2	20		 DB	 32			; 00000020H
  04fd3	0f		 DB	 15			; 0000000fH
  04fd4	20		 DB	 32			; 00000020H
  04fd5	10		 DB	 16			; 00000010H
  04fd6	20		 DB	 32			; 00000020H
  04fd7	20		 DB	 32			; 00000020H
  04fd8	20		 DB	 32			; 00000020H
  04fd9	11		 DB	 17			; 00000011H
  04fda	12		 DB	 18			; 00000012H
  04fdb	13		 DB	 19			; 00000013H
  04fdc	14		 DB	 20			; 00000014H
  04fdd	20		 DB	 32			; 00000020H
  04fde	20		 DB	 32			; 00000020H
  04fdf	20		 DB	 32			; 00000020H
  04fe0	20		 DB	 32			; 00000020H
  04fe1	20		 DB	 32			; 00000020H
  04fe2	20		 DB	 32			; 00000020H
  04fe3	20		 DB	 32			; 00000020H
  04fe4	20		 DB	 32			; 00000020H
  04fe5	20		 DB	 32			; 00000020H
  04fe6	20		 DB	 32			; 00000020H
  04fe7	15		 DB	 21			; 00000015H
  04fe8	16		 DB	 22			; 00000016H
  04fe9	17		 DB	 23			; 00000017H
  04fea	18		 DB	 24			; 00000018H
  04feb	20		 DB	 32			; 00000020H
  04fec	20		 DB	 32			; 00000020H
  04fed	20		 DB	 32			; 00000020H
  04fee	20		 DB	 32			; 00000020H
  04fef	20		 DB	 32			; 00000020H
  04ff0	20		 DB	 32			; 00000020H
  04ff1	19		 DB	 25			; 00000019H
  04ff2	19		 DB	 25			; 00000019H
  04ff3	1a		 DB	 26			; 0000001aH
  04ff4	1b		 DB	 27			; 0000001bH
  04ff5	1c		 DB	 28			; 0000001cH
  04ff6	1d		 DB	 29			; 0000001dH
  04ff7	20		 DB	 32			; 00000020H
  04ff8	20		 DB	 32			; 00000020H
  04ff9	20		 DB	 32			; 00000020H
  04ffa	1e		 DB	 30			; 0000001eH
  04ffb	1f		 DB	 31			; 0000001fH
$LN1247@Attack:
  04ffc	00 00 00 00	 DD	 $LN312@Attack
  05000	00 00 00 00	 DD	 $LN310@Attack
  05004	00 00 00 00	 DD	 $LN309@Attack
  05008	00 00 00 00	 DD	 $LN308@Attack
  0500c	00 00 00 00	 DD	 $LN314@Attack
  05010	00 00 00 00	 DD	 $LN293@Attack
  05014	00 00 00 00	 DD	 $LN307@Attack
  05018	00 00 00 00	 DD	 $LN306@Attack
  0501c	00 00 00 00	 DD	 $LN313@Attack
  05020	00 00 00 00	 DD	 $LN288@Attack
  05024	00 00 00 00	 DD	 $LN270@Attack
  05028	00 00 00 00	 DD	 $LN263@Attack
  0502c	00 00 00 00	 DD	 $LN262@Attack
  05030	00 00 00 00	 DD	 $LN311@Attack
  05034	00 00 00 00	 DD	 $LN296@Attack
  05038	00 00 00 00	 DD	 $LN295@Attack
  0503c	00 00 00 00	 DD	 $LN300@Attack
  05040	00 00 00 00	 DD	 $LN304@Attack
  05044	00 00 00 00	 DD	 $LN256@Attack
  05048	00 00 00 00	 DD	 $LN255@Attack
  0504c	00 00 00 00	 DD	 $LN254@Attack
  05050	00 00 00 00	 DD	 $LN253@Attack
  05054	00 00 00 00	 DD	 $LN315@Attack
$LN853@Attack:
  05058	00		 DB	 0
  05059	01		 DB	 1
  0505a	02		 DB	 2
  0505b	03		 DB	 3
  0505c	04		 DB	 4
  0505d	04		 DB	 4
  0505e	04		 DB	 4
  0505f	16		 DB	 22			; 00000016H
  05060	16		 DB	 22			; 00000016H
  05061	16		 DB	 22			; 00000016H
  05062	05		 DB	 5
  05063	06		 DB	 6
  05064	16		 DB	 22			; 00000016H
  05065	16		 DB	 22			; 00000016H
  05066	16		 DB	 22			; 00000016H
  05067	16		 DB	 22			; 00000016H
  05068	16		 DB	 22			; 00000016H
  05069	16		 DB	 22			; 00000016H
  0506a	16		 DB	 22			; 00000016H
  0506b	16		 DB	 22			; 00000016H
  0506c	16		 DB	 22			; 00000016H
  0506d	16		 DB	 22			; 00000016H
  0506e	16		 DB	 22			; 00000016H
  0506f	16		 DB	 22			; 00000016H
  05070	16		 DB	 22			; 00000016H
  05071	16		 DB	 22			; 00000016H
  05072	16		 DB	 22			; 00000016H
  05073	16		 DB	 22			; 00000016H
  05074	16		 DB	 22			; 00000016H
  05075	16		 DB	 22			; 00000016H
  05076	16		 DB	 22			; 00000016H
  05077	16		 DB	 22			; 00000016H
  05078	16		 DB	 22			; 00000016H
  05079	16		 DB	 22			; 00000016H
  0507a	16		 DB	 22			; 00000016H
  0507b	16		 DB	 22			; 00000016H
  0507c	16		 DB	 22			; 00000016H
  0507d	16		 DB	 22			; 00000016H
  0507e	16		 DB	 22			; 00000016H
  0507f	16		 DB	 22			; 00000016H
  05080	16		 DB	 22			; 00000016H
  05081	16		 DB	 22			; 00000016H
  05082	16		 DB	 22			; 00000016H
  05083	16		 DB	 22			; 00000016H
  05084	16		 DB	 22			; 00000016H
  05085	16		 DB	 22			; 00000016H
  05086	16		 DB	 22			; 00000016H
  05087	16		 DB	 22			; 00000016H
  05088	16		 DB	 22			; 00000016H
  05089	16		 DB	 22			; 00000016H
  0508a	16		 DB	 22			; 00000016H
  0508b	16		 DB	 22			; 00000016H
  0508c	16		 DB	 22			; 00000016H
  0508d	16		 DB	 22			; 00000016H
  0508e	16		 DB	 22			; 00000016H
  0508f	16		 DB	 22			; 00000016H
  05090	16		 DB	 22			; 00000016H
  05091	16		 DB	 22			; 00000016H
  05092	16		 DB	 22			; 00000016H
  05093	16		 DB	 22			; 00000016H
  05094	16		 DB	 22			; 00000016H
  05095	16		 DB	 22			; 00000016H
  05096	16		 DB	 22			; 00000016H
  05097	16		 DB	 22			; 00000016H
  05098	16		 DB	 22			; 00000016H
  05099	16		 DB	 22			; 00000016H
  0509a	16		 DB	 22			; 00000016H
  0509b	16		 DB	 22			; 00000016H
  0509c	16		 DB	 22			; 00000016H
  0509d	16		 DB	 22			; 00000016H
  0509e	16		 DB	 22			; 00000016H
  0509f	16		 DB	 22			; 00000016H
  050a0	16		 DB	 22			; 00000016H
  050a1	16		 DB	 22			; 00000016H
  050a2	16		 DB	 22			; 00000016H
  050a3	16		 DB	 22			; 00000016H
  050a4	16		 DB	 22			; 00000016H
  050a5	16		 DB	 22			; 00000016H
  050a6	16		 DB	 22			; 00000016H
  050a7	16		 DB	 22			; 00000016H
  050a8	16		 DB	 22			; 00000016H
  050a9	16		 DB	 22			; 00000016H
  050aa	16		 DB	 22			; 00000016H
  050ab	16		 DB	 22			; 00000016H
  050ac	16		 DB	 22			; 00000016H
  050ad	16		 DB	 22			; 00000016H
  050ae	16		 DB	 22			; 00000016H
  050af	16		 DB	 22			; 00000016H
  050b0	16		 DB	 22			; 00000016H
  050b1	16		 DB	 22			; 00000016H
  050b2	07		 DB	 7
  050b3	16		 DB	 22			; 00000016H
  050b4	16		 DB	 22			; 00000016H
  050b5	16		 DB	 22			; 00000016H
  050b6	16		 DB	 22			; 00000016H
  050b7	16		 DB	 22			; 00000016H
  050b8	16		 DB	 22			; 00000016H
  050b9	16		 DB	 22			; 00000016H
  050ba	08		 DB	 8
  050bb	16		 DB	 22			; 00000016H
  050bc	16		 DB	 22			; 00000016H
  050bd	16		 DB	 22			; 00000016H
  050be	16		 DB	 22			; 00000016H
  050bf	16		 DB	 22			; 00000016H
  050c0	16		 DB	 22			; 00000016H
  050c1	16		 DB	 22			; 00000016H
  050c2	16		 DB	 22			; 00000016H
  050c3	16		 DB	 22			; 00000016H
  050c4	16		 DB	 22			; 00000016H
  050c5	16		 DB	 22			; 00000016H
  050c6	16		 DB	 22			; 00000016H
  050c7	16		 DB	 22			; 00000016H
  050c8	16		 DB	 22			; 00000016H
  050c9	16		 DB	 22			; 00000016H
  050ca	16		 DB	 22			; 00000016H
  050cb	16		 DB	 22			; 00000016H
  050cc	16		 DB	 22			; 00000016H
  050cd	16		 DB	 22			; 00000016H
  050ce	16		 DB	 22			; 00000016H
  050cf	16		 DB	 22			; 00000016H
  050d0	16		 DB	 22			; 00000016H
  050d1	16		 DB	 22			; 00000016H
  050d2	16		 DB	 22			; 00000016H
  050d3	16		 DB	 22			; 00000016H
  050d4	16		 DB	 22			; 00000016H
  050d5	16		 DB	 22			; 00000016H
  050d6	16		 DB	 22			; 00000016H
  050d7	16		 DB	 22			; 00000016H
  050d8	09		 DB	 9
  050d9	0a		 DB	 10			; 0000000aH
  050da	0b		 DB	 11			; 0000000bH
  050db	16		 DB	 22			; 00000016H
  050dc	0c		 DB	 12			; 0000000cH
  050dd	16		 DB	 22			; 00000016H
  050de	16		 DB	 22			; 00000016H
  050df	16		 DB	 22			; 00000016H
  050e0	16		 DB	 22			; 00000016H
  050e1	16		 DB	 22			; 00000016H
  050e2	16		 DB	 22			; 00000016H
  050e3	16		 DB	 22			; 00000016H
  050e4	16		 DB	 22			; 00000016H
  050e5	16		 DB	 22			; 00000016H
  050e6	16		 DB	 22			; 00000016H
  050e7	16		 DB	 22			; 00000016H
  050e8	16		 DB	 22			; 00000016H
  050e9	16		 DB	 22			; 00000016H
  050ea	16		 DB	 22			; 00000016H
  050eb	16		 DB	 22			; 00000016H
  050ec	16		 DB	 22			; 00000016H
  050ed	16		 DB	 22			; 00000016H
  050ee	16		 DB	 22			; 00000016H
  050ef	16		 DB	 22			; 00000016H
  050f0	16		 DB	 22			; 00000016H
  050f1	0d		 DB	 13			; 0000000dH
  050f2	16		 DB	 22			; 00000016H
  050f3	08		 DB	 8
  050f4	0d		 DB	 13			; 0000000dH
  050f5	16		 DB	 22			; 00000016H
  050f6	16		 DB	 22			; 00000016H
  050f7	16		 DB	 22			; 00000016H
  050f8	16		 DB	 22			; 00000016H
  050f9	16		 DB	 22			; 00000016H
  050fa	16		 DB	 22			; 00000016H
  050fb	16		 DB	 22			; 00000016H
  050fc	16		 DB	 22			; 00000016H
  050fd	16		 DB	 22			; 00000016H
  050fe	16		 DB	 22			; 00000016H
  050ff	08		 DB	 8
  05100	16		 DB	 22			; 00000016H
  05101	16		 DB	 22			; 00000016H
  05102	16		 DB	 22			; 00000016H
  05103	16		 DB	 22			; 00000016H
  05104	16		 DB	 22			; 00000016H
  05105	16		 DB	 22			; 00000016H
  05106	16		 DB	 22			; 00000016H
  05107	16		 DB	 22			; 00000016H
  05108	16		 DB	 22			; 00000016H
  05109	16		 DB	 22			; 00000016H
  0510a	16		 DB	 22			; 00000016H
  0510b	16		 DB	 22			; 00000016H
  0510c	16		 DB	 22			; 00000016H
  0510d	16		 DB	 22			; 00000016H
  0510e	0e		 DB	 14			; 0000000eH
  0510f	0e		 DB	 14			; 0000000eH
  05110	16		 DB	 22			; 00000016H
  05111	16		 DB	 22			; 00000016H
  05112	0f		 DB	 15			; 0000000fH
  05113	16		 DB	 22			; 00000016H
  05114	10		 DB	 16			; 00000010H
  05115	16		 DB	 22			; 00000016H
  05116	11		 DB	 17			; 00000011H
  05117	16		 DB	 22			; 00000016H
  05118	0e		 DB	 14			; 0000000eH
  05119	16		 DB	 22			; 00000016H
  0511a	16		 DB	 22			; 00000016H
  0511b	16		 DB	 22			; 00000016H
  0511c	16		 DB	 22			; 00000016H
  0511d	16		 DB	 22			; 00000016H
  0511e	16		 DB	 22			; 00000016H
  0511f	16		 DB	 22			; 00000016H
  05120	16		 DB	 22			; 00000016H
  05121	16		 DB	 22			; 00000016H
  05122	16		 DB	 22			; 00000016H
  05123	16		 DB	 22			; 00000016H
  05124	16		 DB	 22			; 00000016H
  05125	16		 DB	 22			; 00000016H
  05126	16		 DB	 22			; 00000016H
  05127	16		 DB	 22			; 00000016H
  05128	16		 DB	 22			; 00000016H
  05129	16		 DB	 22			; 00000016H
  0512a	16		 DB	 22			; 00000016H
  0512b	16		 DB	 22			; 00000016H
  0512c	16		 DB	 22			; 00000016H
  0512d	16		 DB	 22			; 00000016H
  0512e	16		 DB	 22			; 00000016H
  0512f	16		 DB	 22			; 00000016H
  05130	16		 DB	 22			; 00000016H
  05131	16		 DB	 22			; 00000016H
  05132	16		 DB	 22			; 00000016H
  05133	16		 DB	 22			; 00000016H
  05134	16		 DB	 22			; 00000016H
  05135	16		 DB	 22			; 00000016H
  05136	16		 DB	 22			; 00000016H
  05137	16		 DB	 22			; 00000016H
  05138	16		 DB	 22			; 00000016H
  05139	12		 DB	 18			; 00000012H
  0513a	12		 DB	 18			; 00000012H
  0513b	16		 DB	 22			; 00000016H
  0513c	12		 DB	 18			; 00000012H
  0513d	12		 DB	 18			; 00000012H
  0513e	16		 DB	 22			; 00000016H
  0513f	16		 DB	 22			; 00000016H
  05140	13		 DB	 19			; 00000013H
  05141	14		 DB	 20			; 00000014H
  05142	15		 DB	 21			; 00000015H
?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ENDP ; CObjAttack::Attack
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgclassObjAttack@@YAXXZ
text$yc	SEGMENT
??__EgclassObjAttack@@YAXXZ PROC			; `dynamic initializer for 'gclassObjAttack'', COMDAT

; 44   : CObjAttack gclassObjAttack;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gclassObjAttack@@3VCObjAttack@@A ; gclassObjAttack
  00005	e8 00 00 00 00	 call	 ??0CObjAttack@@QAE@XZ	; CObjAttack::CObjAttack
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgclassObjAttack@@YAXXZ ; `dynamic atexit destructor for 'gclassObjAttack''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgclassObjAttack@@YAXXZ ENDP			; `dynamic initializer for 'gclassObjAttack''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgclassObjAttack@@YAXXZ
text$yd	SEGMENT
??__FgclassObjAttack@@YAXXZ PROC			; `dynamic atexit destructor for 'gclassObjAttack'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gclassObjAttack@@3VCObjAttack@@A ; gclassObjAttack
  00005	e9 00 00 00 00	 jmp	 ??1CObjAttack@@UAE@XZ	; CObjAttack::~CObjAttack
??__FgclassObjAttack@@YAXXZ ENDP			; `dynamic atexit destructor for 'gclassObjAttack''
text$yd	ENDS
PUBLIC	?gclassObjAttack@@3VCObjAttack@@A		; gclassObjAttack
_BSS	SEGMENT
?gclassObjAttack@@3VCObjAttack@@A DD 01H DUP (?)	; gclassObjAttack
_BSS	ENDS
CRT$XCU	SEGMENT
_gclassObjAttack$initializer$ DD FLAT:??__EgclassObjAttack@@YAXXZ
CRT$XCU	ENDS
END
