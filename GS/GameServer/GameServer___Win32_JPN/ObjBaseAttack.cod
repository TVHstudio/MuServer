; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ObjBaseAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	070H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
	DD	010eH
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	03e8H
	DD	0137H
	DD	03e8H
	DD	0fH
	DD	04afH
	DD	0aH
	DD	04afH
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	03e8H
	DD	0118H
	DD	03e8H
	DD	03e8H
	DD	04afH
	DD	03e8H
	DD	04afH
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	ORG $+4
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCastleState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\castlesiege.h
;	COMDAT ?GetCastleState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCastleState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCastleState, COMDAT
; _this$ = ecx

; 314  : 	int GetCastleState(){return m_iCastleSiegeState;}

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00003	c3		 ret	 0
?GetCastleState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCastleState
_TEXT	ENDS
PUBLIC	??_7CObjBaseAttack@@6B@				; CObjBaseAttack::`vftable'
PUBLIC	??0CObjBaseAttack@@QAE@XZ			; CObjBaseAttack::CObjBaseAttack
PUBLIC	??_R4CObjBaseAttack@@6B@			; CObjBaseAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCObjBaseAttack@@@8			; CObjBaseAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObjBaseAttack@@8			; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheck
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECObjBaseAttack@@UAEPAXI@Z:PROC		; CObjBaseAttack::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CObjBaseAttack@@8
; File e:\work\tranet_version\gs\gameserver\objbaseattack.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjBaseAttack@@8 DD FLAT:??_R0?AVCObjBaseAttack@@@8 ; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CObjBaseAttack@@8
rdata$r	SEGMENT
??_R2CObjBaseAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8 ; CObjBaseAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObjBaseAttack@@8
rdata$r	SEGMENT
??_R3CObjBaseAttack@@8 DD 00H				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjBaseAttack@@@8
_DATA	SEGMENT
??_R0?AVCObjBaseAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjBaseAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjBaseAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CObjBaseAttack@@6B@
rdata$r	SEGMENT
??_R4CObjBaseAttack@@6B@ DD 00H				; CObjBaseAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObjBaseAttack@@@8
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CObjBaseAttack@@6B@
CONST	SEGMENT
??_7CObjBaseAttack@@6B@ DD FLAT:??_R4CObjBaseAttack@@6B@ ; CObjBaseAttack::`vftable'
	DD	FLAT:??_ECObjBaseAttack@@UAEPAXI@Z
	DD	FLAT:?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CObjBaseAttack@@QAE@XZ
_TEXT	SEGMENT
??0CObjBaseAttack@@QAE@XZ PROC				; CObjBaseAttack::CObjBaseAttack, COMDAT
; _this$ = ecx

; 29   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CObjBaseAttack@@6B@

; 30   : 	return;
; 31   : }

  00008	c3		 ret	 0
??0CObjBaseAttack@@QAE@XZ ENDP				; CObjBaseAttack::CObjBaseAttack
_TEXT	ENDS
PUBLIC	??1CObjBaseAttack@@UAE@XZ			; CObjBaseAttack::~CObjBaseAttack
; Function compile flags: /Ogtp
;	COMDAT ??1CObjBaseAttack@@UAE@XZ
_TEXT	SEGMENT
??1CObjBaseAttack@@UAE@XZ PROC				; CObjBaseAttack::~CObjBaseAttack, COMDAT
; _this$ = ecx

; 34   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CObjBaseAttack@@6B@

; 35   : 	return;
; 36   : }

  00006	c3		 ret	 0
??1CObjBaseAttack@@UAE@XZ ENDP				; CObjBaseAttack::~CObjBaseAttack
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3f800000
PUBLIC	?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::DecreaseArrow
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv226 = -4						; size = 4
tv224 = -4						; size = 4
tv198 = -4						; size = 4
tv196 = -4						; size = 4
_lpObj$ = 8						; size = 4
tv229 = 10						; size = 2
tv203 = 10						; size = 2
?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CObjBaseAttack::DecreaseArrow, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 40   : 	if (lpObj->Class == CLASS_ELF && lpObj->Type == OBJ_USER )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00008	66 83 be b8 00
	00 00 02	 cmp	 WORD PTR [esi+184], 2
  00010	57		 push	 edi
  00011	0f 85 74 01 00
	00		 jne	 $LN1@DecreaseAr
  00017	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0001c	0f 85 69 01 00
	00		 jne	 $LN1@DecreaseAr

; 41   : 	{
; 42   : 		CItem * Right = &lpObj->pInventory[0];

  00022	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]

; 43   : 		CItem * Left  = &lpObj->pInventory[1];
; 44   : 
; 45   : 		//if ( (Right->m_Type >= ITEMGET(4,8) && Right->m_Type <= ITEMGET(4,14)) ||
; 46   : 		//	  Right->m_Type == ITEMGET(4,16) || Right->m_Type == ITEMGET(4,18) ||
; 47   : 		//	  Right->m_Type == ITEMGET(4,19) )
; 48   : 		if(Right->m_Type >= ITEMGET(4,0) && Right->m_Type < ITEMGET(5,0))

  00028	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0002c	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00031	66 3b ca	 cmp	 cx, dx
  00034	0f 8c a6 00 00
	00		 jl	 $LN13@DecreaseAr
  0003a	ba 00 0a 00 00	 mov	 edx, 2560		; 00000a00H
  0003f	66 3b ca	 cmp	 cx, dx
  00042	0f 8d 98 00 00
	00		 jge	 $LN13@DecreaseAr

; 49   : 		{
; 50   : 			if ( Left->m_Type == ITEMGET(4,7) )

  00048	b9 07 08 00 00	 mov	 ecx, 2055		; 00000807H
  0004d	66 39 88 da 00
	00 00		 cmp	 WORD PTR [eax+218], cx
  00054	75 11		 jne	 SHORT $LN12@DecreaseAr

; 51   : 			{
; 52   : 				if ( Left->m_Durability < 1.0f )

  00056	d9 e8		 fld1
  00058	8d b8 f8 00 00
	00		 lea	 edi, DWORD PTR [eax+248]
  0005e	d8 1f		 fcomp	 DWORD PTR [edi]
  00060	df e0		 fnstsw	 ax
  00062	f6 c4 41	 test	 ah, 65			; 00000041H
  00065	75 0a		 jne	 SHORT $LN11@DecreaseAr
$LN12@DecreaseAr:
  00067	5f		 pop	 edi

; 53   : 				{
; 54   : 					return FALSE;

  00068	33 c0		 xor	 eax, eax
  0006a	5e		 pop	 esi

; 103  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
$LN11@DecreaseAr:

; 55   : 				}
; 56   : 
; 57   : 				if(ZtConfig.Character.NeedArrow) Left->m_Durability -= 1.0f;

  00071	83 3d 68 01 00
	00 00		 cmp	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+360, 0
  00078	74 0a		 je	 SHORT $LN10@DecreaseAr
  0007a	d9 07		 fld	 DWORD PTR [edi]
  0007c	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00082	d9 1f		 fstp	 DWORD PTR [edi]
$LN10@DecreaseAr:

; 58   : 				GCItemDurSend(lpObj->m_Index, 1, (BYTE)Left->m_Durability, 0);

  00084	d9 07		 fld	 DWORD PTR [edi]
  00086	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00088	d9 7d 0a	 fnstcw	 WORD PTR tv229[ebp]
  0008b	6a 00		 push	 0
  0008d	0f b7 45 0a	 movzx	 eax, WORD PTR tv229[ebp]
  00091	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00096	89 45 fc	 mov	 DWORD PTR tv226[ebp], eax
  00099	d9 6d fc	 fldcw	 WORD PTR tv226[ebp]
  0009c	db 5d fc	 fistp	 DWORD PTR tv224[ebp]
  0009f	8a 55 fc	 mov	 dl, BYTE PTR tv224[ebp]
  000a2	0f b6 c2	 movzx	 eax, dl
  000a5	50		 push	 eax
  000a6	d9 6d 0a	 fldcw	 WORD PTR tv229[ebp]
  000a9	6a 01		 push	 1
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  000b1	83 c4 10	 add	 esp, 16			; 00000010H

; 59   : 
; 60   : 				if ( Left->m_Durability < 1.0f )

  000b4	d9 e8		 fld1
  000b6	d8 1f		 fcomp	 DWORD PTR [edi]
  000b8	df e0		 fnstsw	 ax
  000ba	f6 c4 41	 test	 ah, 65			; 00000041H
  000bd	0f 85 c8 00 00
	00		 jne	 $LN1@DecreaseAr

; 61   : 				{
; 62   : 					lpObj->pInventory[1].Clear();

  000c3	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  000c9	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  000cf	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 63   : 					GCInventoryItemDeleteSend(lpObj->m_Index, 1, 0);

  000d4	8b 16		 mov	 edx, DWORD PTR [esi]
  000d6	6a 00		 push	 0
  000d8	6a 01		 push	 1
  000da	52		 push	 edx

; 64   : 				}
; 65   : 			}
; 66   : 			else
; 67   : 			{
; 68   : 				return FALSE;
; 69   : 			}

  000db	e9 a3 00 00 00	 jmp	 $LN17@DecreaseAr
$LN13@DecreaseAr:

; 70   : 		}
; 71   : /*		else if ( (Left->m_Type >= ITEMGET(4,0) && Left->m_Type <= ITEMGET(4,6) ) ||
; 72   : 				   Left->m_Type == ITEMGET(4,17) ||
; 73   : 				   Left->m_Type == ITEMGET(4,20) ||
; 74   : 				   Left->m_Type == ITEMGET(4,21) ||
; 75   : 				   Left->m_Type == ITEMGET(4,22) ||
; 76   : 				   Left->m_Type == ITEMGET(4,23))*/ //season4 add-on
; 77   : 		else if(Left->m_Type >= ITEMGET(4,0) && Left->m_Type < ITEMGET(5,0))

  000e0	0f b7 90 da 00
	00 00		 movzx	 edx, WORD PTR [eax+218]
  000e7	bf 00 08 00 00	 mov	 edi, 2048		; 00000800H
  000ec	66 3b d7	 cmp	 dx, di
  000ef	0f 8c 96 00 00
	00		 jl	 $LN1@DecreaseAr
  000f5	bf 00 0a 00 00	 mov	 edi, 2560		; 00000a00H
  000fa	66 3b d7	 cmp	 dx, di
  000fd	0f 8d 88 00 00
	00		 jge	 $LN1@DecreaseAr

; 78   : 		{
; 79   : 			if ( Right->m_Type == ITEMGET(4,15) )

  00103	ba 0f 08 00 00	 mov	 edx, 2063		; 0000080fH
  00108	66 3b ca	 cmp	 cx, dx
  0010b	0f 85 56 ff ff
	ff		 jne	 $LN12@DecreaseAr

; 80   : 			{
; 81   : 				if ( Right->m_Durability < 1.0f )

  00111	d9 e8		 fld1
  00113	8d 78 24	 lea	 edi, DWORD PTR [eax+36]
  00116	d8 1f		 fcomp	 DWORD PTR [edi]
  00118	df e0		 fnstsw	 ax
  0011a	f6 c4 41	 test	 ah, 65			; 00000041H

; 82   : 				{
; 83   : 					return FALSE;

  0011d	0f 84 44 ff ff
	ff		 je	 $LN12@DecreaseAr

; 84   : 				}
; 85   : 
; 86   : 				if(ZtConfig.Character.NeedArrow) Right->m_Durability -= 1.0f;

  00123	83 3d 68 01 00
	00 00		 cmp	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+360, 0
  0012a	74 0a		 je	 SHORT $LN3@DecreaseAr
  0012c	d9 07		 fld	 DWORD PTR [edi]
  0012e	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00134	d9 1f		 fstp	 DWORD PTR [edi]
$LN3@DecreaseAr:

; 87   : 				GCItemDurSend(lpObj->m_Index, 0, (BYTE)Right->m_Durability, 0);

  00136	d9 07		 fld	 DWORD PTR [edi]
  00138	8b 16		 mov	 edx, DWORD PTR [esi]
  0013a	d9 7d 0a	 fnstcw	 WORD PTR tv203[ebp]
  0013d	6a 00		 push	 0
  0013f	0f b7 45 0a	 movzx	 eax, WORD PTR tv203[ebp]
  00143	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00148	89 45 fc	 mov	 DWORD PTR tv198[ebp], eax
  0014b	d9 6d fc	 fldcw	 WORD PTR tv198[ebp]
  0014e	db 5d fc	 fistp	 DWORD PTR tv196[ebp]
  00151	8a 45 fc	 mov	 al, BYTE PTR tv196[ebp]
  00154	0f b6 c8	 movzx	 ecx, al
  00157	51		 push	 ecx
  00158	d9 6d 0a	 fldcw	 WORD PTR tv203[ebp]
  0015b	6a 00		 push	 0
  0015d	52		 push	 edx
  0015e	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  00163	83 c4 10	 add	 esp, 16			; 00000010H

; 88   : 
; 89   : 				if ( Right->m_Durability < 1.0f )

  00166	d9 e8		 fld1
  00168	d8 1f		 fcomp	 DWORD PTR [edi]
  0016a	df e0		 fnstsw	 ax
  0016c	f6 c4 41	 test	 ah, 65			; 00000041H
  0016f	75 1a		 jne	 SHORT $LN1@DecreaseAr

; 90   : 				{
; 91   : 					lpObj->pInventory[0].Clear();

  00171	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00177	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 92   : 					GCInventoryItemDeleteSend(lpObj->m_Index, 0, 0);

  0017c	8b 06		 mov	 eax, DWORD PTR [esi]
  0017e	6a 00		 push	 0
  00180	6a 00		 push	 0
  00182	50		 push	 eax
$LN17@DecreaseAr:

; 63   : 					GCInventoryItemDeleteSend(lpObj->m_Index, 1, 0);

  00183	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  00188	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@DecreaseAr:

; 93   : 				}
; 94   : 			}
; 95   : 			else
; 96   : 			{
; 97   : 				return FALSE;
; 98   : 			}
; 99   : 		}
; 100  : 	}
; 101  : 
; 102  : 	return TRUE;

  0018b	5f		 pop	 edi
  0018c	b8 01 00 00 00	 mov	 eax, 1
  00191	5e		 pop	 esi

; 103  : }

  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c2 04 00	 ret	 4
?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CObjBaseAttack::DecreaseArrow
_TEXT	ENDS
PUBLIC	??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@ ; `string'
PUBLIC	?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::CheckAttackArea
EXTRN	?bIsIgnorePacketSpeedHackDetect@@3HA:DWORD	; bIsIgnorePacketSpeedHackDetect
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?gObjCheckAttackArea@@YAHHH@Z:PROC		; gObjCheckAttackArea
EXTRN	?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A:BYTE	; gPandoraBoxEvent
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
;	COMDAT ??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@
CONST	SEGMENT
??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@ DB '['
	DB	'%s][%s] Try Attack In Not Attack Area (%s,%d,%d) errortype = '
	DB	'%d', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z PROC ; CObjBaseAttack::CheckAttackArea, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 107  : 	if ( lpTargetObj->Type == OBJ_USER || lpTargetObj->m_RecallMon >= 0 )

  00004	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00007	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0000c	74 09		 je	 SHORT $LN7@CheckAttac
  0000e	83 bf 50 04 00
	00 00		 cmp	 DWORD PTR [edi+1104], 0
  00015	7c 54		 jl	 SHORT $LN4@CheckAttac
$LN7@CheckAttac:

; 108  : 	{
; 109  : 		BYTE attr = MapC[lpTargetObj->MapNumber].GetAttr(lpTargetObj->X, lpTargetObj->Y);

  00017	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  0001e	0f bf 8f 44 01
	00 00		 movsx	 ecx, WORD PTR [edi+324]
  00025	50		 push	 eax
  00026	51		 push	 ecx
  00027	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  0002e	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  00034	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0003a	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 110  : 
; 111  : #ifdef PANDORA_EVENT
; 112  : 	  if (gPandoraBoxEvent.Started && lpTargetObj->m_Index == gPandoraBoxEvent.ActivePlayer && (attr&1) == 1)

  0003f	80 3d 04 00 00
	00 00		 cmp	 BYTE PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A+4, 0
  00046	74 18		 je	 SHORT $LN6@CheckAttac
  00048	8b 17		 mov	 edx, DWORD PTR [edi]
  0004a	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A
  00050	75 0e		 jne	 SHORT $LN6@CheckAttac
  00052	a8 01		 test	 al, 1
  00054	74 15		 je	 SHORT $LN4@CheckAttac

; 113  : 	  {
; 114  : 		return TRUE;

  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	5f		 pop	 edi

; 144  : }

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN6@CheckAttac:

; 115  : 	  }
; 116  : 	  else if ( (attr&1) == 1 )

  00060	a8 01		 test	 al, 1
  00062	74 07		 je	 SHORT $LN4@CheckAttac

; 117  : 	  {
; 118  : 		 return FALSE;

  00064	33 c0		 xor	 eax, eax
  00066	5f		 pop	 edi

; 144  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN4@CheckAttac:
  0006b	56		 push	 esi

; 119  : 	  }
; 120  : #else
; 121  : 	  if ( (attr&1) == 1 )
; 122  : 	  {
; 123  : 		return FALSE;
; 124  : 	  }
; 125  : #endif
; 126  : 	}
; 127  : 
; 128  : 	if ( lpObj->Type == OBJ_USER )

  0006c	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0006f	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00074	75 63		 jne	 SHORT $LN1@CheckAttac

; 129  : 	{
; 130  : 		int iRet = gObjCheckAttackArea(lpObj->m_Index, lpTargetObj->m_Index);

  00076	8b 07		 mov	 eax, DWORD PTR [edi]
  00078	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0007a	50		 push	 eax
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?gObjCheckAttackArea@@YAHHH@Z ; gObjCheckAttackArea
  00081	83 c4 08	 add	 esp, 8

; 131  : 
; 132  : 		if ( iRet != 0 )

  00084	85 c0		 test	 eax, eax
  00086	74 51		 je	 SHORT $LN1@CheckAttac

; 133  : 		{
; 134  : 			LogAddTD("[%s][%s] Try Attack In Not Attack Area (%s,%d,%d) errortype = %d", lpObj->AccountID, lpObj->Name, lMsg.Get(MSGGET(7, 208) + lpObj->MapNumber), lpObj->X, lpObj->Y, iRet);

  00088	0f bf 96 46 01
	00 00		 movsx	 edx, WORD PTR [esi+326]
  0008f	0f b6 8e 49 01
	00 00		 movzx	 ecx, BYTE PTR [esi+329]
  00096	50		 push	 eax
  00097	0f bf 86 44 01
	00 00		 movsx	 eax, WORD PTR [esi+324]
  0009e	52		 push	 edx
  0009f	81 c1 d0 07 00
	00		 add	 ecx, 2000		; 000007d0H
  000a5	50		 push	 eax
  000a6	51		 push	 ecx
  000a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000ac	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000b1	50		 push	 eax
  000b2	8d 56 77	 lea	 edx, DWORD PTR [esi+119]
  000b5	52		 push	 edx
  000b6	83 c6 6c	 add	 esi, 108		; 0000006cH
  000b9	56		 push	 esi
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 135  : 
; 136  : 			if ( bIsIgnorePacketSpeedHackDetect != FALSE )

  000c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bIsIgnorePacketSpeedHackDetect@@3HA, 0 ; bIsIgnorePacketSpeedHackDetect
  000cf	74 08		 je	 SHORT $LN1@CheckAttac

; 137  : 			{
; 138  : 				return FALSE;

  000d1	5e		 pop	 esi
  000d2	33 c0		 xor	 eax, eax
  000d4	5f		 pop	 edi

; 144  : }

  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
$LN1@CheckAttac:
  000d9	5e		 pop	 esi

; 139  : 			}
; 140  : 		}
; 141  : 	}
; 142  : 
; 143  : 	return TRUE;

  000da	b8 01 00 00 00	 mov	 eax, 1
  000df	5f		 pop	 edi

; 144  : }

  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP ; CObjBaseAttack::CheckAttackArea
_TEXT	ENDS
PUBLIC	?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::PkCheck
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDuelCheck
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjDuelCheck
EXTRN	?GetCurrentState@CChaosCastle@@QAEHH@Z:PROC	; CChaosCastle::GetCurrentState
EXTRN	?GetChaosCastleIndex@CChaosCastle@@QAEHH@Z:PROC	; CChaosCastle::GetChaosCastleIndex
EXTRN	?g_ChaosCastle@@3VCChaosCastle@@A:BYTE		; g_ChaosCastle
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?gNonPK@@3HA:DWORD				; gNonPK
EXTRN	?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjGetRelationShip
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?gPkLimitFree@@3HA:DWORD			; gPkLimitFree
EXTRN	?GetPkLevel@PartyClass@@QAEDH@Z:PROC		; PartyClass::GetPkLevel
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gLanguage@@3HA:DWORD				; gLanguage
; Function compile flags: /Ogtp
;	COMDAT ?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z PROC	; CObjBaseAttack::PkCheck, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 148  : 	if ( gLanguage == 0 || gLanguage == 2 || gLanguage == 4)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gLanguage@@3HA ; gLanguage
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000e	bb 01 00 00 00	 mov	 ebx, 1
  00013	85 c0		 test	 eax, eax
  00015	74 0a		 je	 SHORT $LN62@PkCheck
  00017	83 f8 02	 cmp	 eax, 2
  0001a	74 05		 je	 SHORT $LN62@PkCheck
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	75 6d		 jne	 SHORT $LN52@PkCheck
$LN62@PkCheck:

; 149  : 	{
; 150  : 		if ( lpObj->Type == OBJ_USER )

  00021	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  00025	0f 85 80 03 00
	00		 jne	 $LN1@PkCheck

; 151  : 		{
; 152  : 			BOOL bPlayerKiller = FALSE; //Season 2.5 add-on

  0002b	33 f6		 xor	 esi, esi

; 153  : 			
; 154  : 			if(ZtConfig.PvP.ZtPkPartySystem && lpObj->PartyNumber >= 0) //Season 2.5 add-on

  0002d	39 35 38 09 00
	00		 cmp	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2360, esi
  00033	74 22		 je	 SHORT $LN98@PkCheck
  00035	8b 87 2c 04 00
	00		 mov	 eax, DWORD PTR [edi+1068]
  0003b	85 c0		 test	 eax, eax
  0003d	78 18		 js	 SHORT $LN98@PkCheck

; 155  : 			{
; 156  : 				if(gParty.GetPkLevel(lpObj->PartyNumber) >= ZtConfig.PvP.ZtPkLimit)

  0003f	50		 push	 eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00045	e8 00 00 00 00	 call	 ?GetPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPkLevel
  0004a	0f be c0	 movsx	 eax, al
  0004d	3b 05 3c 09 00
	00		 cmp	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2364
  00053	7c 02		 jl	 SHORT $LN98@PkCheck

; 157  : 				{
; 158  : 					bPlayerKiller = TRUE;

  00055	8b f3		 mov	 esi, ebx
$LN98@PkCheck:

; 159  : 				}
; 160  : 			}
; 161  : 
; 162  : 			if(lpObj->m_PK_Level >= ZtConfig.PvP.ZtPkLimit) //6

  00057	0f be 8f 3d 01
	00 00		 movsx	 ecx, BYTE PTR [edi+317]
  0005e	3b 0d 3c 09 00
	00		 cmp	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2364

; 163  : 			{
; 164  : 				bPlayerKiller = TRUE;
; 165  : 			}
; 166  : 
; 167  : 			if(bPlayerKiller == TRUE) //Season 2.5 add-on

  00064	7d 04		 jge	 SHORT $LN90@PkCheck
  00066	3b f3		 cmp	 esi, ebx
  00068	75 24		 jne	 SHORT $LN52@PkCheck
$LN90@PkCheck:

; 168  : 			{
; 169  : 				if (lpObj->PartyNumber >= 0 )

  0006a	83 bf 2c 04 00
	00 00		 cmp	 DWORD PTR [edi+1068], 0
  00071	7c 12		 jl	 SHORT $LN56@PkCheck
$LN112@PkCheck:

; 170  : 				{
; 171  : 					if ( gPkLimitFree == FALSE )

  00073	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  0007a	75 12		 jne	 SHORT $LN52@PkCheck
$LN46@PkCheck:
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 172  : 					{
; 173  : 						return FALSE;

  0007e	33 c0		 xor	 eax, eax
  00080	5b		 pop	 ebx

; 386  : }

  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
$LN56@PkCheck:

; 174  : 					}
; 175  : 				}
; 176  : 				else if ( lpObj->m_PK_Count >= 3 )

  00085	80 bf 3c 01 00
	00 03		 cmp	 BYTE PTR [edi+316], 3

; 177  : 				{
; 178  : 					if ( gPkLimitFree == FALSE )
; 179  : 					{
; 180  : 						return FALSE;

  0008c	7d e5		 jge	 SHORT $LN112@PkCheck
$LN52@PkCheck:

; 181  : 					}
; 182  : 				}
; 183  : 			}
; 184  : 		}
; 185  : 	}
; 186  : 
; 187  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER)

  0008e	66 39 5f 68	 cmp	 WORD PTR [edi+104], bx
  00092	0f 85 13 03 00
	00		 jne	 $LN1@PkCheck
  00098	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  0009b	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  000a0	0f 85 05 03 00
	00		 jne	 $LN1@PkCheck

; 188  : 	{
; 189  : #ifdef PRIVATE_MODULE
; 190  : 		if( g_ZtLicense.CheckUser(eZtUB::Encode)	 || 
; 191  : 			g_ZtLicense.CheckUser(eZtUB::Gredy)		 || 
; 192  : 			g_ZtLicense.CheckUser(eZtUB::GredyLocal) || 
; 193  : 			g_ZtLicense.CheckUser(eZtUB::Gredy2)	 ||
; 194  : 			g_ZtLicense.CheckUser(eZtUB::Local) ) 

  000a6	6a 0f		 push	 15			; 0000000fH
  000a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ad	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000b2	84 c0		 test	 al, al
  000b4	75 5f		 jne	 SHORT $LN102@PkCheck
  000b6	6a 20		 push	 32			; 00000020H
  000b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000bd	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000c2	84 c0		 test	 al, al
  000c4	75 4f		 jne	 SHORT $LN102@PkCheck
  000c6	6a 21		 push	 33			; 00000021H
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000cd	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000d2	84 c0		 test	 al, al
  000d4	75 3f		 jne	 SHORT $LN102@PkCheck
  000d6	6a 22		 push	 34			; 00000022H
  000d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000dd	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000e2	84 c0		 test	 al, al
  000e4	75 2f		 jne	 SHORT $LN102@PkCheck
  000e6	6a 00		 push	 0
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ed	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000f2	84 c0		 test	 al, al
  000f4	75 1f		 jne	 SHORT $LN102@PkCheck

; 195  : 		{
; 196  : 			// ----
; 197  : 		}
; 198  : 		else
; 199  : 		{
; 200  : 			if ( lpTargetObj->Level <= 5 || lpObj->Level <= 5 )

  000f6	b8 05 00 00 00	 mov	 eax, 5
  000fb	66 39 83 be 00
	00 00		 cmp	 WORD PTR [ebx+190], ax
  00102	0f 8e 74 ff ff
	ff		 jle	 $LN46@PkCheck
  00108	66 39 87 be 00
	00 00		 cmp	 WORD PTR [edi+190], ax

; 201  : 			{
; 202  : 				return FALSE;

  0010f	0f 8e 67 ff ff
	ff		 jle	 $LN46@PkCheck
$LN102@PkCheck:

; 203  : 			}
; 204  : 		}
; 205  : 
; 206  : #else
; 207  : 		if ( lpTargetObj->Level <= 5 || lpObj->Level <= 5 )
; 208  : 		{
; 209  : 			return FALSE;
; 210  : 		}
; 211  : #endif
; 212  : 
; 213  : 		if ( gObjGetRelationShip(lpObj, lpTargetObj) == 2 ) // Rivals

  00115	53		 push	 ebx
  00116	57		 push	 edi
  00117	e8 00 00 00 00	 call	 ?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjGetRelationShip
  0011c	83 c4 08	 add	 esp, 8
  0011f	83 f8 02	 cmp	 eax, 2
  00122	75 0d		 jne	 SHORT $LN110@PkCheck

; 214  : 		{
; 215  : 			if ( gNonPK == FALSE )

  00124	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK

; 216  : 			{
; 217  : 				return TRUE;

  0012b	0f 84 7a 02 00
	00		 je	 $LN1@PkCheck
$LN110@PkCheck:

; 218  : 			}
; 219  : 		}
; 220  : 
; 221  : 		if ( lpObj->lpGuild != NULL && lpTargetObj->lpGuild != NULL )

  00131	8b 8f 38 04 00
	00		 mov	 ecx, DWORD PTR [edi+1080]
  00137	85 c9		 test	 ecx, ecx
  00139	74 26		 je	 SHORT $LN41@PkCheck
  0013b	8b 83 38 04 00
	00		 mov	 eax, DWORD PTR [ebx+1080]
  00141	85 c0		 test	 eax, eax
  00143	74 1c		 je	 SHORT $LN41@PkCheck

; 222  : 		{
; 223  : 			if ( lpObj->lpGuild->WarState == 1 && lpTargetObj->lpGuild->WarState == 1 )

  00145	80 b9 91 05 00
	00 01		 cmp	 BYTE PTR [ecx+1425], 1
  0014c	75 13		 jne	 SHORT $LN41@PkCheck
  0014e	80 b8 91 05 00
	00 01		 cmp	 BYTE PTR [eax+1425], 1
  00155	75 0a		 jne	 SHORT $LN41@PkCheck

; 224  : 			{
; 225  : 				if ( lpObj->lpGuild->Number == lpTargetObj->lpGuild->Number )

  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	3b 10		 cmp	 edx, DWORD PTR [eax]

; 226  : 				{
; 227  : 					return FALSE;

  0015b	0f 84 1b ff ff
	ff		 je	 $LN46@PkCheck
$LN41@PkCheck:

; 228  : 				}
; 229  : 			}
; 230  : 		}
; 231  : 
; 232  : 		if ( gObjTargetGuildWarCheck(lpObj, lpTargetObj) == FALSE && lpTargetObj->lpGuild != NULL && lpTargetObj->lpGuild->WarState != 0)

  00161	53		 push	 ebx
  00162	57		 push	 edi
  00163	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00168	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gNonPK@@3HA ; gNonPK
  0016e	83 c4 08	 add	 esp, 8
  00171	85 c0		 test	 eax, eax
  00173	75 6c		 jne	 SHORT $LN103@PkCheck
  00175	8b 83 38 04 00
	00		 mov	 eax, DWORD PTR [ebx+1080]
  0017b	85 c0		 test	 eax, eax
  0017d	74 62		 je	 SHORT $LN103@PkCheck
  0017f	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  00186	74 59		 je	 SHORT $LN103@PkCheck

; 233  : 		{
; 234  : 			if ( lpTargetObj->lpGuild->WarType == 1 )

  00188	80 b8 92 05 00
	00 01		 cmp	 BYTE PTR [eax+1426], 1
  0018f	75 11		 jne	 SHORT $LN37@PkCheck

; 235  : 			{
; 236  : 				if ( lpTargetObj->MapNumber != 6 )

  00191	80 bb 49 01 00
	00 06		 cmp	 BYTE PTR [ebx+329], 6
  00198	74 08		 je	 SHORT $LN37@PkCheck

; 237  : 				{
; 238  : 					if ( !gNonPK )

  0019a	85 d2		 test	 edx, edx

; 239  : 					{
; 240  : 						return TRUE;

  0019c	0f 84 09 02 00
	00		 je	 $LN1@PkCheck
$LN37@PkCheck:

; 241  : 					}
; 242  : 				}
; 243  : 			}
; 244  : 
; 245  : #if(FIX_CASTLE_SIEGE_WAR)
; 246  : 			if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE)

  001a2	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  001a9	75 16		 jne	 SHORT $LN35@PkCheck

; 247  : 			{
; 248  : 				if ( lpObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )

  001ab	b0 1e		 mov	 al, 30			; 0000001eH
  001ad	38 87 49 01 00
	00		 cmp	 BYTE PTR [edi+329], al
  001b3	75 0c		 jne	 SHORT $LN35@PkCheck
  001b5	38 83 49 01 00
	00		 cmp	 BYTE PTR [ebx+329], al

; 249  : 				{
; 250  : 					return true;

  001bb	0f 84 ea 01 00
	00		 je	 $LN1@PkCheck
$LN35@PkCheck:

; 251  : 				}
; 252  : 			}
; 253  : #endif
; 254  : 
; 255  : 			if ( CC_MAP_RANGE(lpTargetObj->MapNumber) == FALSE )

  001c1	0f b6 83 49 01
	00 00		 movzx	 eax, BYTE PTR [ebx+329]
  001c8	3c 35		 cmp	 al, 53			; 00000035H
  001ca	74 15		 je	 SHORT $LN103@PkCheck
  001cc	3c 12		 cmp	 al, 18			; 00000012H
  001ce	0f 82 a8 fe ff
	ff		 jb	 $LN46@PkCheck
  001d4	b1 17		 mov	 cl, 23			; 00000017H
  001d6	3a c8		 cmp	 cl, al
  001d8	1b c0		 sbb	 eax, eax
  001da	40		 inc	 eax

; 256  : 			{
; 257  : 				return FALSE;

  001db	0f 84 9b fe ff
	ff		 je	 $LN46@PkCheck
$LN103@PkCheck:

; 258  : 			}
; 259  : 		}
; 260  : 
; 261  : 		if ( IT_MAP_RANGE(lpObj->MapNumber) != FALSE ) //season2.5 add-on

  001e1	8a 87 49 01 00
	00		 mov	 al, BYTE PTR [edi+329]
  001e7	3c 2d		 cmp	 al, 45			; 0000002dH
  001e9	72 0c		 jb	 SHORT $LN92@PkCheck
  001eb	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  001f0	3a c8		 cmp	 cl, al
  001f2	1b c9		 sbb	 ecx, ecx
  001f4	41		 inc	 ecx
  001f5	75 43		 jne	 SHORT $LN105@PkCheck
$LN92@PkCheck:

; 262  : 		{
; 263  : 			//
; 264  : 		}
; 265  : 		else if ( CC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  001f7	3c 35		 cmp	 al, 53			; 00000035H
  001f9	74 10		 je	 SHORT $LN93@PkCheck
  001fb	3c 12		 cmp	 al, 18			; 00000012H
  001fd	72 33		 jb	 SHORT $LN104@PkCheck
  001ff	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00204	3a c8		 cmp	 cl, al
  00206	1b c9		 sbb	 ecx, ecx
  00208	41		 inc	 ecx
  00209	74 27		 je	 SHORT $LN104@PkCheck
$LN93@PkCheck:

; 266  : 		{
; 267  : 			if ( g_ChaosCastle.GetCurrentState(g_ChaosCastle.GetChaosCastleIndex(lpObj->MapNumber)) != 2 )

  0020b	0f b6 d0	 movzx	 edx, al
  0020e	52		 push	 edx
  0020f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  00214	e8 00 00 00 00	 call	 ?GetChaosCastleIndex@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetChaosCastleIndex
  00219	50		 push	 eax
  0021a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  0021f	e8 00 00 00 00	 call	 ?GetCurrentState@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurrentState
  00224	83 f8 02	 cmp	 eax, 2
  00227	74 11		 je	 SHORT $LN105@PkCheck

; 268  : 			{
; 269  : 				return FALSE;

  00229	5f		 pop	 edi
  0022a	5e		 pop	 esi
  0022b	33 c0		 xor	 eax, eax
  0022d	5b		 pop	 ebx

; 386  : }

  0022e	5d		 pop	 ebp
  0022f	c2 08 00	 ret	 8
$LN104@PkCheck:

; 270  : 			}
; 271  : 		}
; 272  : 		else if ( gNonPK != FALSE )

  00232	85 d2		 test	 edx, edx

; 273  : 		{
; 274  : 			return FALSE;

  00234	0f 85 42 fe ff
	ff		 jne	 $LN46@PkCheck
$LN105@PkCheck:

; 275  : 		}
; 276  : 
; 277  : 		if ( DS_MAP_RANGE(lpObj->MapNumber) ) // DEvil

  0023a	8a 87 49 01 00
	00		 mov	 al, BYTE PTR [edi+329]
  00240	3c 09		 cmp	 al, 9
  00242	0f 84 34 fe ff
	ff		 je	 $LN46@PkCheck
  00248	33 c9		 xor	 ecx, ecx
  0024a	3c 20		 cmp	 al, 32			; 00000020H
  0024c	0f 94 c1	 sete	 cl
  0024f	85 c9		 test	 ecx, ecx

; 278  : 		{
; 279  : 			return FALSE;

  00251	0f 85 25 fe ff
	ff		 jne	 $LN46@PkCheck

; 280  : 		}
; 281  : 
; 282  : 		if ( BC_MAP_RANGE(lpObj->MapNumber) )

  00257	3c 34		 cmp	 al, 52			; 00000034H
  00259	0f 84 1d fe ff
	ff		 je	 $LN46@PkCheck
  0025f	3c 0b		 cmp	 al, 11			; 0000000bH
  00261	72 10		 jb	 SHORT $LN26@PkCheck
  00263	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00268	3a c8		 cmp	 cl, al
  0026a	1b c9		 sbb	 ecx, ecx
  0026c	41		 inc	 ecx

; 283  : 		{
; 284  : 			return FALSE;

  0026d	0f 85 09 fe ff
	ff		 jne	 $LN46@PkCheck
$LN26@PkCheck:

; 285  : 		}
; 286  : 
; 287  : 		if ( DG_MAP_RANGE(lpObj->MapNumber))	//Season 5 DoppelGanger

  00273	3c 41		 cmp	 al, 65			; 00000041H
  00275	72 0d		 jb	 SHORT $LN25@PkCheck
  00277	b2 44		 mov	 dl, 68			; 00000044H
  00279	3a d0		 cmp	 dl, al
  0027b	1b c0		 sbb	 eax, eax
  0027d	40		 inc	 eax

; 288  : 		{
; 289  : 			return FALSE;

  0027e	0f 85 f8 fd ff
	ff		 jne	 $LN46@PkCheck
$LN25@PkCheck:

; 290  : 		}
; 291  : 
; 292  : 		if ( gObjDuelCheck(lpObj, lpTargetObj) == FALSE )

  00284	53		 push	 ebx
  00285	57		 push	 edi
  00286	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  0028b	83 c4 08	 add	 esp, 8
  0028e	85 c0		 test	 eax, eax
  00290	75 11		 jne	 SHORT $LN23@PkCheck

; 293  : 		{
; 294  : 			if ( gObjDuelCheck(lpTargetObj) )

  00292	53		 push	 ebx
  00293	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDuelCheck
  00298	83 c4 04	 add	 esp, 4
  0029b	85 c0		 test	 eax, eax

; 295  : 			{
; 296  : 				return FALSE;

  0029d	0f 85 d9 fd ff
	ff		 jne	 $LN46@PkCheck
$LN23@PkCheck:

; 297  : 			}
; 298  : 		}
; 299  : 
; 300  : 		if ( gLanguage == 0 || gLanguage == 2 )

  002a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gLanguage@@3HA ; gLanguage
  002a8	85 c0		 test	 eax, eax
  002aa	74 09		 je	 SHORT $LN21@PkCheck
  002ac	83 f8 02	 cmp	 eax, 2
  002af	0f 85 f6 00 00
	00		 jne	 $LN1@PkCheck
$LN21@PkCheck:

; 301  : 		{
; 302  : 			BOOL bPlayerKiller = FALSE; //Season 2.5 add-on

  002b5	33 f6		 xor	 esi, esi

; 303  : 
; 304  : 			if(ZtConfig.PvP.ZtPkPartySystem && lpObj->PartyNumber >= 0) //Season 2.5 add-on

  002b7	39 35 38 09 00
	00		 cmp	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2360, esi
  002bd	74 29		 je	 SHORT $LN100@PkCheck
  002bf	8b 87 2c 04 00
	00		 mov	 eax, DWORD PTR [edi+1068]
  002c5	85 c0		 test	 eax, eax
  002c7	78 1f		 js	 SHORT $LN100@PkCheck

; 305  : 			{
; 306  : 				if(gParty.GetPkLevel(lpObj->PartyNumber) >= ZtConfig.PvP.ZtPkLimit)

  002c9	50		 push	 eax
  002ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  002cf	e8 00 00 00 00	 call	 ?GetPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPkLevel
  002d4	8b 0d 3c 09 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2364
  002da	0f be c0	 movsx	 eax, al
  002dd	3b c1		 cmp	 eax, ecx
  002df	7c 0d		 jl	 SHORT $LN19@PkCheck

; 307  : 				{
; 308  : 					bPlayerKiller = TRUE;

  002e1	be 01 00 00 00	 mov	 esi, 1
  002e6	eb 06		 jmp	 SHORT $LN19@PkCheck
$LN100@PkCheck:
  002e8	8b 0d 3c 09 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2364
$LN19@PkCheck:

; 309  : 				}
; 310  : 			}
; 311  : 
; 312  : 			if(lpObj->m_PK_Level >= ZtConfig.PvP.ZtPkLimit)

  002ee	0f be 97 3d 01
	00 00		 movsx	 edx, BYTE PTR [edi+317]
  002f5	3b d1		 cmp	 edx, ecx

; 313  : 			{
; 314  : 				bPlayerKiller = TRUE;
; 315  : 			}
; 316  : 
; 317  : 			if(bPlayerKiller == TRUE) //Season 2.5 add-on

  002f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gPkLimitFree@@3HA ; gPkLimitFree
  002fd	7d 05		 jge	 SHORT $LN96@PkCheck
  002ff	83 fe 01	 cmp	 esi, 1
  00302	75 27		 jne	 SHORT $LN106@PkCheck
$LN96@PkCheck:

; 318  : 			{
; 319  : 				if (lpObj->PartyNumber >= 0 )

  00304	83 bf 2c 04 00
	00 00		 cmp	 DWORD PTR [edi+1068], 0
  0030b	7c 0d		 jl	 SHORT $LN16@PkCheck

; 320  : 				{
; 321  : 					if ( gPkLimitFree == FALSE )

  0030d	85 d2		 test	 edx, edx
  0030f	75 1a		 jne	 SHORT $LN106@PkCheck

; 322  : 					{
; 323  : 						return FALSE;

  00311	5f		 pop	 edi
  00312	5e		 pop	 esi
  00313	33 c0		 xor	 eax, eax
  00315	5b		 pop	 ebx

; 386  : }

  00316	5d		 pop	 ebp
  00317	c2 08 00	 ret	 8
$LN16@PkCheck:

; 324  : 					}
; 325  : 				}
; 326  : 				else if ( lpObj->m_PK_Count >= 3 )

  0031a	80 bf 3c 01 00
	00 03		 cmp	 BYTE PTR [edi+316], 3
  00321	7c 08		 jl	 SHORT $LN106@PkCheck

; 327  : 				{
; 328  : 					if ( gPkLimitFree == FALSE )

  00323	85 d2		 test	 edx, edx

; 329  : 					{
; 330  : 						return FALSE;

  00325	0f 84 51 fd ff
	ff		 je	 $LN46@PkCheck
$LN106@PkCheck:

; 331  : 					}
; 332  : 				}
; 333  : 			}
; 334  : 
; 335  : 			bPlayerKiller = FALSE; //Season 2.5 add-on

  0032b	33 f6		 xor	 esi, esi

; 336  : 
; 337  : 			if(ZtConfig.PvP.ZtPkPartySystem && lpTargetObj->PartyNumber >= 0) //Season 2.5 add-on

  0032d	39 35 38 09 00
	00		 cmp	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2360, esi
  00333	74 2d		 je	 SHORT $LN107@PkCheck
  00335	8b 83 2c 04 00
	00		 mov	 eax, DWORD PTR [ebx+1068]
  0033b	85 c0		 test	 eax, eax
  0033d	78 23		 js	 SHORT $LN107@PkCheck

; 338  : 			{
; 339  : 				if(gParty.GetPkLevel(lpTargetObj->PartyNumber) >= ZtConfig.PvP.ZtPkLimit)

  0033f	50		 push	 eax
  00340	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00345	e8 00 00 00 00	 call	 ?GetPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPkLevel
  0034a	8b 0d 3c 09 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+2364

; 340  : 				{
; 341  : 					bPlayerKiller = TRUE;

  00350	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gPkLimitFree@@3HA ; gPkLimitFree
  00356	0f be c0	 movsx	 eax, al
  00359	3b c1		 cmp	 eax, ecx
  0035b	7c 05		 jl	 SHORT $LN107@PkCheck
  0035d	be 01 00 00 00	 mov	 esi, 1
$LN107@PkCheck:

; 342  : 				}
; 343  : 			}
; 344  : 
; 345  : 			if(lpTargetObj->m_PK_Level >= ZtConfig.PvP.ZtPkLimit)

  00362	0f be 83 3d 01
	00 00		 movsx	 eax, BYTE PTR [ebx+317]
  00369	3b c1		 cmp	 eax, ecx

; 346  : 			{
; 347  : 				bPlayerKiller = TRUE;
; 348  : 			}
; 349  : 
; 350  : 			if(bPlayerKiller == 1) //Season 2.5 add-on

  0036b	7d 05		 jge	 SHORT $LN97@PkCheck
  0036d	83 fe 01	 cmp	 esi, 1
  00370	75 39		 jne	 SHORT $LN1@PkCheck
$LN97@PkCheck:

; 351  : 			{
; 352  : 				if (lpTargetObj->PartyNumber >= 0 )

  00372	83 bb 2c 04 00
	00 00		 cmp	 DWORD PTR [ebx+1068], 0
  00379	7c 16		 jl	 SHORT $LN7@PkCheck

; 353  : 				{
; 354  : 					if ( gPkLimitFree == FALSE )

  0037b	85 d2		 test	 edx, edx
  0037d	75 2c		 jne	 SHORT $LN1@PkCheck

; 355  : 					{
; 356  : //#if(GS_CASTLE==1) //---------------------------------------------------
; 357  : 						if(g_CastleSiege.GetCastleState() != CASTLESIEGE_STATE_STARTSIEGE)

  0037f	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7
  00386	74 23		 je	 SHORT $LN1@PkCheck

; 358  : 						{
; 359  : 							return FALSE;

  00388	5f		 pop	 edi
  00389	5e		 pop	 esi
  0038a	33 c0		 xor	 eax, eax
  0038c	5b		 pop	 ebx

; 386  : }

  0038d	5d		 pop	 ebp
  0038e	c2 08 00	 ret	 8
$LN7@PkCheck:

; 360  : 						}
; 361  : //#else //---------------------------------------------------------------
; 362  : //						return FALSE;
; 363  : //#endif //--------------------------------------------------------------
; 364  : 					}
; 365  : 				}
; 366  : 				else if ( lpTargetObj->m_PK_Count >= 3 )

  00391	80 bb 3c 01 00
	00 03		 cmp	 BYTE PTR [ebx+316], 3
  00398	7c 11		 jl	 SHORT $LN1@PkCheck

; 367  : 				{
; 368  : 					if ( gPkLimitFree == FALSE )

  0039a	85 d2		 test	 edx, edx
  0039c	75 0d		 jne	 SHORT $LN1@PkCheck

; 369  : 					{
; 370  : //#if(GS_CASTLE==1) //---------------------------------------------------
; 371  : 						if(g_CastleSiege.GetCastleState() != CASTLESIEGE_STATE_STARTSIEGE)

  0039e	83 3d 28 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiege@@3VCCastleSiege@@A+40, 7

; 372  : 						{
; 373  : 							return FALSE;

  003a5	0f 85 d1 fc ff
	ff		 jne	 $LN46@PkCheck
$LN1@PkCheck:
  003ab	5f		 pop	 edi
  003ac	5e		 pop	 esi

; 374  : 						}
; 375  : //#else //---------------------------------------------------------------
; 376  : //						return FALSE;
; 377  : //#endif //--------------------------------------------------------------
; 378  : 					}
; 379  : 				}
; 380  : 			}
; 381  : 
; 382  : 
; 383  : 		}
; 384  : 	}
; 385  : 	return TRUE;

  003ad	b8 01 00 00 00	 mov	 eax, 1
  003b2	5b		 pop	 ebx

; 386  : }

  003b3	5d		 pop	 ebp
  003b4	c2 08 00	 ret	 8
?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP	; CObjBaseAttack::PkCheck
_TEXT	ENDS
PUBLIC	?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjBaseAttack::ResistanceCheck
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z:PROC	; retResistance
EXTRN	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
; Function compile flags: /Ogtp
;	COMDAT ?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z PROC ; CObjBaseAttack::ResistanceCheck, COMDAT
; _this$ = ecx

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 390  : //#if(GS_CASTLE==1) //HermeX Decompilation
; 391  : 	if( lpTargetObj->Type != OBJ_USER)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00007	0f b7 4e 68	 movzx	 ecx, WORD PTR [esi+104]
  0000b	83 f9 01	 cmp	 ecx, 1
  0000e	0f 84 95 00 00
	00		 je	 $LN39@Resistance

; 392  : 	{
; 393  : 		if(lpTargetObj->Class == 277 || lpTargetObj->Class == 283 || lpTargetObj->Class == 288 || lpTargetObj->Class == 278 || lpTargetObj->Class == 215 || lpTargetObj->Class == 216 || lpTargetObj->Class == 217 || lpTargetObj->Class == 218 || lpTargetObj->Class == 219)

  00014	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  0001b	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00020	66 3b c2	 cmp	 ax, dx
  00023	74 50		 je	 SHORT $LN41@Resistance
  00025	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  0002a	66 3b c2	 cmp	 ax, dx
  0002d	74 46		 je	 SHORT $LN41@Resistance
  0002f	ba 20 01 00 00	 mov	 edx, 288		; 00000120H
  00034	66 3b c2	 cmp	 ax, dx
  00037	74 3c		 je	 SHORT $LN41@Resistance
  00039	ba 16 01 00 00	 mov	 edx, 278		; 00000116H
  0003e	66 3b c2	 cmp	 ax, dx
  00041	74 32		 je	 SHORT $LN41@Resistance
  00043	ba d7 00 00 00	 mov	 edx, 215		; 000000d7H
  00048	66 3b c2	 cmp	 ax, dx
  0004b	74 28		 je	 SHORT $LN41@Resistance
  0004d	ba d8 00 00 00	 mov	 edx, 216		; 000000d8H
  00052	66 3b c2	 cmp	 ax, dx
  00055	74 1e		 je	 SHORT $LN41@Resistance
  00057	ba d9 00 00 00	 mov	 edx, 217		; 000000d9H
  0005c	66 3b c2	 cmp	 ax, dx
  0005f	74 14		 je	 SHORT $LN41@Resistance
  00061	ba da 00 00 00	 mov	 edx, 218		; 000000daH
  00066	66 3b c2	 cmp	 ax, dx
  00069	74 0a		 je	 SHORT $LN41@Resistance
  0006b	ba db 00 00 00	 mov	 edx, 219		; 000000dbH
  00070	66 3b c2	 cmp	 ax, dx
  00073	75 07		 jne	 SHORT $LN42@Resistance
$LN41@Resistance:

; 394  : 		{
; 395  : 			return FALSE;

  00075	33 c0		 xor	 eax, eax
  00077	5e		 pop	 esi

; 538  : }

  00078	5d		 pop	 ebp
  00079	c2 0c 00	 ret	 12			; 0000000cH
$LN42@Resistance:

; 396  : 		}
; 397  : 	}
; 398  : 
; 399  : 	if( lpTargetObj->Type != OBJ_USER)

  0007c	83 f9 01	 cmp	 ecx, 1
  0007f	74 28		 je	 SHORT $LN39@Resistance

; 400  : 	{
; 401  : 		if( CRYWOLF_ALTAR_CLASS_RANGE(lpTargetObj->Class) != FALSE || CRYWOLF_STATUE_CHECK(lpTargetObj->Class) != FALSE ) //HermeX Fix @28/01/2010

  00081	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  00088	b8 cd 00 00 00	 mov	 eax, 205		; 000000cdH
  0008d	66 3b c8	 cmp	 cx, ax
  00090	72 0d		 jb	 SHORT $LN48@Resistance
  00092	ba d1 00 00 00	 mov	 edx, 209		; 000000d1H
  00097	66 3b d1	 cmp	 dx, cx
  0009a	1b c0		 sbb	 eax, eax
  0009c	40		 inc	 eax
  0009d	75 d6		 jne	 SHORT $LN41@Resistance
$LN48@Resistance:
  0009f	b8 cc 00 00 00	 mov	 eax, 204		; 000000ccH
  000a4	66 3b c8	 cmp	 cx, ax

; 402  : 		{
; 403  : 			return FALSE;

  000a7	74 cc		 je	 SHORT $LN41@Resistance
$LN39@Resistance:
  000a9	53		 push	 ebx

; 404  : 		}
; 405  : 	}
; 406  : //#endif
; 407  : 
; 408  : 	if ( skill == 62 || g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 515)

  000aa	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  000ad	57		 push	 edi
  000ae	8b 7d 10	 mov	 edi, DWORD PTR _skill$[ebp]
  000b1	83 ff 3e	 cmp	 edi, 62			; 0000003eH
  000b4	74 12		 je	 SHORT $LN36@Resistance
  000b6	57		 push	 edi
  000b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000bc	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  000c1	3d 03 02 00 00	 cmp	 eax, 515		; 00000203H
  000c6	75 4b		 jne	 SHORT $LN33@Resistance
$LN36@Resistance:

; 409  : 	{
; 410  : 		if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  000c8	6a 20		 push	 32			; 00000020H
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000cf	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000d4	84 c0		 test	 al, al
  000d6	75 20		 jne	 SHORT $LN34@Resistance
  000d8	6a 21		 push	 33			; 00000021H
  000da	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000df	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000e4	84 c0		 test	 al, al
  000e6	75 10		 jne	 SHORT $LN34@Resistance
  000e8	6a 22		 push	 34			; 00000022H
  000ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ef	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000f4	84 c0		 test	 al, al

; 415  : 			}
; 416  : 		}
; 417  : 		else
; 418  : 		{
; 419  : 			gObjBackSpring2(lpTargetObj, lpObj, 3);

  000f6	74 0f		 je	 SHORT $LN52@Resistance
$LN34@Resistance:

; 411  : 		{
; 412  : 			if ( retResistance(lpTargetObj, R_EARTH) == 0 )

  000f8	6a 04		 push	 4
  000fa	56		 push	 esi
  000fb	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00100	83 c4 08	 add	 esp, 8
  00103	85 c0		 test	 eax, eax
  00105	75 0c		 jne	 SHORT $LN33@Resistance
$LN52@Resistance:

; 413  : 			{
; 414  : 				gObjBackSpring2(lpTargetObj, lpObj, 3);

  00107	6a 03		 push	 3
  00109	53		 push	 ebx
  0010a	56		 push	 esi
  0010b	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN33@Resistance:

; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : 	if ( skill == 19
; 424  : 		|| skill == 20
; 425  : 		|| skill == 21
; 426  : 		|| skill == 22
; 427  : 		|| skill == 23
; 428  : 
; 429  : 		|| skill == 260
; 430  : 		|| skill == 261
; 431  : 		|| skill == 262
; 432  : 		|| skill == 270
; 433  : 		|| skill == 326
; 434  : 		|| skill == 327
; 435  : 		|| skill == 328
; 436  : 		|| skill == 329
; 437  : 		|| skill == 479
; 438  : 		)

  00113	83 ff 13	 cmp	 edi, 19			; 00000013H
  00116	0f 84 33 02 00
	00		 je	 $LN30@Resistance
  0011c	83 ff 14	 cmp	 edi, 20			; 00000014H
  0011f	0f 84 2a 02 00
	00		 je	 $LN30@Resistance
  00125	83 ff 15	 cmp	 edi, 21			; 00000015H
  00128	0f 84 21 02 00
	00		 je	 $LN30@Resistance
  0012e	83 ff 16	 cmp	 edi, 22			; 00000016H
  00131	0f 84 18 02 00
	00		 je	 $LN30@Resistance
  00137	83 ff 17	 cmp	 edi, 23			; 00000017H
  0013a	0f 84 0f 02 00
	00		 je	 $LN30@Resistance
  00140	81 ff 04 01 00
	00		 cmp	 edi, 260		; 00000104H
  00146	0f 84 03 02 00
	00		 je	 $LN30@Resistance
  0014c	81 ff 05 01 00
	00		 cmp	 edi, 261		; 00000105H
  00152	0f 84 f7 01 00
	00		 je	 $LN30@Resistance
  00158	81 ff 06 01 00
	00		 cmp	 edi, 262		; 00000106H
  0015e	0f 84 eb 01 00
	00		 je	 $LN30@Resistance
  00164	81 ff 0e 01 00
	00		 cmp	 edi, 270		; 0000010eH
  0016a	0f 84 df 01 00
	00		 je	 $LN30@Resistance
  00170	81 ff 46 01 00
	00		 cmp	 edi, 326		; 00000146H
  00176	0f 84 d3 01 00
	00		 je	 $LN30@Resistance
  0017c	81 ff 47 01 00
	00		 cmp	 edi, 327		; 00000147H
  00182	0f 84 c7 01 00
	00		 je	 $LN30@Resistance
  00188	81 ff 48 01 00
	00		 cmp	 edi, 328		; 00000148H
  0018e	0f 84 bb 01 00
	00		 je	 $LN30@Resistance
  00194	81 ff 49 01 00
	00		 cmp	 edi, 329		; 00000149H
  0019a	0f 84 af 01 00
	00		 je	 $LN30@Resistance
  001a0	81 ff df 01 00
	00		 cmp	 edi, 479		; 000001dfH
  001a6	0f 84 a3 01 00
	00		 je	 $LN30@Resistance

; 441  : 	}
; 442  : 	else if ( skill == 3 )	// Poison

  001ac	83 ff 03	 cmp	 edi, 3
  001af	75 21		 jne	 SHORT $LN28@Resistance

; 443  : 	{
; 444  : 		if ( retResistance(lpTargetObj, 2) == 0 )

  001b1	6a 02		 push	 2
  001b3	56		 push	 esi
  001b4	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  001b9	83 c4 08	 add	 esp, 8
  001bc	85 c0		 test	 eax, eax
  001be	0f 85 82 01 00
	00		 jne	 $LN11@Resistance

; 445  : 		{
; 446  : 			gObjAddMsgSendDelay(lpTargetObj, 2, lpObj->m_Index, 150, 0);

  001c4	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001c6	50		 push	 eax
  001c7	68 96 00 00 00	 push	 150			; 00000096H
  001cc	51		 push	 ecx

; 447  : 			return TRUE;

  001cd	e9 87 01 00 00	 jmp	 $LN53@Resistance
$LN28@Resistance:

; 448  : 		}
; 449  : 		return FALSE;
; 450  : 	}
; 451  : 	else if ( skill == 1 )

  001d2	83 ff 01	 cmp	 edi, 1
  001d5	75 4c		 jne	 SHORT $LN25@Resistance

; 452  : 	{
; 453  : 		if(gObjSearchActiveEffect(lpObj, AT_POISON) == 0)

  001d7	6a 37		 push	 55			; 00000037H
  001d9	53		 push	 ebx
  001da	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  001df	83 c4 08	 add	 esp, 8
  001e2	84 c0		 test	 al, al
  001e4	0f 85 5c 01 00
	00		 jne	 $LN11@Resistance

; 454  : 		{
; 455  : 			if ( retResistance(lpTargetObj, 1) == 0 )

  001ea	57		 push	 edi
  001eb	56		 push	 esi
  001ec	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  001f1	83 c4 08	 add	 esp, 8
  001f4	85 c0		 test	 eax, eax
  001f6	0f 85 4a 01 00
	00		 jne	 $LN11@Resistance

; 456  : 			{
; 457  : 				lpTargetObj->lpAttackObj = lpObj;
; 458  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_POISON, 19, 3, 0, 0, 20);

  001fc	6a 14		 push	 20			; 00000014H
$LN55@Resistance:
  001fe	6a 00		 push	 0
  00200	6a 00		 push	 0
  00202	6a 03		 push	 3
  00204	6a 13		 push	 19			; 00000013H
  00206	6a 37		 push	 55			; 00000037H
  00208	56		 push	 esi
  00209	89 9e d4 03 00
	00		 mov	 DWORD PTR [esi+980], ebx
  0020f	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00214	83 c4 1c	 add	 esp, 28			; 0000001cH
  00217	5f		 pop	 edi
  00218	5b		 pop	 ebx

; 525  : 			}
; 526  : 			else
; 527  : 			{
; 528  : 				return FALSE;
; 529  : 			}
; 530  : 		}
; 531  : 		else
; 532  : 		{
; 533  : 			return FALSE;
; 534  : 		}
; 535  : 	}
; 536  : 
; 537  : 	return TRUE;

  00219	b8 01 00 00 00	 mov	 eax, 1
  0021e	5e		 pop	 esi

; 538  : }

  0021f	5d		 pop	 ebp
  00220	c2 0c 00	 ret	 12			; 0000000cH
$LN25@Resistance:

; 459  : 				return TRUE;
; 460  : 			}
; 461  : 			else
; 462  : 			{
; 463  : 				return FALSE;
; 464  : 			}	
; 465  : 		}
; 466  : 		else
; 467  : 		{
; 468  : 			return FALSE;
; 469  : 		}
; 470  : 	}
; 471  : 	else if ( skill == 38 ) // Death Poison

  00223	83 ff 26	 cmp	 edi, 38			; 00000026H
  00226	75 2a		 jne	 SHORT $LN19@Resistance

; 472  : 	{
; 473  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_POISON) == 0)

  00228	6a 37		 push	 55			; 00000037H
  0022a	56		 push	 esi
  0022b	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00230	83 c4 08	 add	 esp, 8
  00233	84 c0		 test	 al, al
  00235	0f 85 0b 01 00
	00		 jne	 $LN11@Resistance

; 474  : 		{
; 475  : 			if ( retResistance(lpTargetObj, 1) == 0 )

  0023b	6a 01		 push	 1
  0023d	56		 push	 esi
  0023e	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00243	83 c4 08	 add	 esp, 8
  00246	85 c0		 test	 eax, eax
  00248	0f 85 f8 00 00
	00		 jne	 $LN11@Resistance

; 476  : 			{
; 477  : 				lpTargetObj->lpAttackObj = lpObj;
; 478  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_POISON, 19, 3, 0, 0, 10);

  0024e	6a 0a		 push	 10			; 0000000aH

; 479  : 				return TRUE;

  00250	eb ac		 jmp	 SHORT $LN55@Resistance
$LN19@Resistance:

; 480  : 			}
; 481  : 			else
; 482  : 			{
; 483  : 				return FALSE;
; 484  : 			}
; 485  : 		}
; 486  : 		else
; 487  : 		{
; 488  : 			return FALSE;
; 489  : 		}
; 490  : 
; 491  : 		return TRUE;
; 492  : 	}
; 493  : 	else if ( skill == 7 || skill == 39 || 
; 494  : 		g_MasterSkillSystem.GetBaseMasterLevelSkill(skill) == 450 ) //Season4 add-on

  00252	83 ff 07	 cmp	 edi, 7
  00255	0f 84 98 00 00
	00		 je	 $LN12@Resistance
  0025b	83 ff 27	 cmp	 edi, 39			; 00000027H
  0025e	0f 84 8f 00 00
	00		 je	 $LN12@Resistance
  00264	57		 push	 edi
  00265	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0026a	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  0026f	3d c2 01 00 00	 cmp	 eax, 450		; 000001c2H
  00274	74 7d		 je	 SHORT $LN12@Resistance

; 513  : 		}
; 514  : 	}
; 515  : 	else if ( skill == 51 || skill == 424 ) // Ice Arrow

  00276	83 ff 33	 cmp	 edi, 51			; 00000033H
  00279	74 0c		 je	 SHORT $LN5@Resistance
  0027b	81 ff a8 01 00
	00		 cmp	 edi, 424		; 000001a8H
  00281	0f 85 dd 00 00
	00		 jne	 $LN1@Resistance
$LN5@Resistance:

; 516  : 	{
; 517  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_ICE_ARROW) == 0)

  00287	6a 39		 push	 57			; 00000039H
  00289	56		 push	 esi
  0028a	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  0028f	83 c4 08	 add	 esp, 8
  00292	84 c0		 test	 al, al
  00294	0f 85 ac 00 00
	00		 jne	 $LN11@Resistance

; 518  : 		{
; 519  : 			if ( retResistance(lpTargetObj, 0) == 0 )

  0029a	6a 00		 push	 0
  0029c	56		 push	 esi
  0029d	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  002a2	83 c4 08	 add	 esp, 8
  002a5	85 c0		 test	 eax, eax
  002a7	0f 85 99 00 00
	00		 jne	 $LN11@Resistance

; 520  : 			{
; 521  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_ICE_ARROW, 0, 0, 0, 0, 7);

  002ad	6a 07		 push	 7
  002af	50		 push	 eax
  002b0	50		 push	 eax
  002b1	50		 push	 eax
  002b2	50		 push	 eax
  002b3	6a 39		 push	 57			; 00000039H
  002b5	56		 push	 esi
  002b6	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration

; 522  : 				lpTargetObj->PathCount = 0;
; 523  : 				lpTargetObj->PathStartEnd = 0; //Season3 add-on
; 524  : 				gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  002bb	0f bf 96 46 01
	00 00		 movsx	 edx, WORD PTR [esi+326]
  002c2	0f bf 86 44 01
	00 00		 movsx	 eax, WORD PTR [esi+324]
  002c9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002cb	52		 push	 edx
  002cc	50		 push	 eax
  002cd	51		 push	 ecx
  002ce	c7 86 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+388], 0
  002d8	c6 86 8c 01 00
	00 00		 mov	 BYTE PTR [esi+396], 0
  002df	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  002e4	83 c4 28	 add	 esp, 40			; 00000028H
  002e7	5f		 pop	 edi
  002e8	5b		 pop	 ebx

; 525  : 			}
; 526  : 			else
; 527  : 			{
; 528  : 				return FALSE;
; 529  : 			}
; 530  : 		}
; 531  : 		else
; 532  : 		{
; 533  : 			return FALSE;
; 534  : 		}
; 535  : 	}
; 536  : 
; 537  : 	return TRUE;

  002e9	b8 01 00 00 00	 mov	 eax, 1
  002ee	5e		 pop	 esi

; 538  : }

  002ef	5d		 pop	 ebp
  002f0	c2 0c 00	 ret	 12			; 0000000cH
$LN12@Resistance:

; 495  : 	{
; 496  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_ICE) == 0)

  002f3	6a 38		 push	 56			; 00000038H
  002f5	56		 push	 esi
  002f6	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  002fb	83 c4 08	 add	 esp, 8
  002fe	84 c0		 test	 al, al
  00300	75 44		 jne	 SHORT $LN11@Resistance

; 497  : 		{
; 498  : 			if ( retResistance(lpTargetObj, 0) == 0 )

  00302	6a 00		 push	 0
  00304	56		 push	 esi
  00305	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  0030a	83 c4 08	 add	 esp, 8
  0030d	85 c0		 test	 eax, eax
  0030f	75 35		 jne	 SHORT $LN11@Resistance

; 499  : 			{
; 500  : 				lpTargetObj->lpAttackObj = lpObj;
; 501  : 				lpTargetObj->DelayActionTime = 800;
; 502  : 				lpTargetObj->DelayLevel = 1;
; 503  : 				gObjApplyBuffEffectDuration(lpTargetObj, AT_ICE, 20, 0, 0, 0, 10);

  00311	6a 0a		 push	 10			; 0000000aH
  00313	50		 push	 eax
  00314	50		 push	 eax
  00315	50		 push	 eax
  00316	6a 14		 push	 20			; 00000014H
  00318	6a 38		 push	 56			; 00000038H
  0031a	56		 push	 esi
  0031b	89 9e d4 03 00
	00		 mov	 DWORD PTR [esi+980], ebx
  00321	c7 86 c0 03 00
	00 20 03 00 00	 mov	 DWORD PTR [esi+960], 800 ; 00000320H
  0032b	c6 86 c4 03 00
	00 01		 mov	 BYTE PTR [esi+964], 1
  00332	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00337	83 c4 1c	 add	 esp, 28			; 0000001cH
  0033a	5f		 pop	 edi
  0033b	5b		 pop	 ebx

; 525  : 			}
; 526  : 			else
; 527  : 			{
; 528  : 				return FALSE;
; 529  : 			}
; 530  : 		}
; 531  : 		else
; 532  : 		{
; 533  : 			return FALSE;
; 534  : 		}
; 535  : 	}
; 536  : 
; 537  : 	return TRUE;

  0033c	b8 01 00 00 00	 mov	 eax, 1
  00341	5e		 pop	 esi

; 538  : }

  00342	5d		 pop	 ebp
  00343	c2 0c 00	 ret	 12			; 0000000cH
$LN11@Resistance:
  00346	5f		 pop	 edi
  00347	5b		 pop	 ebx

; 504  : 			}
; 505  : 			else
; 506  : 			{
; 507  : 				return FALSE;
; 508  : 			}
; 509  : 		}
; 510  : 		else
; 511  : 		{
; 512  : 			return FALSE;

  00348	33 c0		 xor	 eax, eax
  0034a	5e		 pop	 esi

; 538  : }

  0034b	5d		 pop	 ebp
  0034c	c2 0c 00	 ret	 12			; 0000000cH
$LN30@Resistance:

; 439  : 	{
; 440  : 		gObjAddMsgSendDelay(lpTargetObj, 2, lpObj->m_Index, 150, 0);

  0034f	8b 13		 mov	 edx, DWORD PTR [ebx]
  00351	6a 00		 push	 0
  00353	68 96 00 00 00	 push	 150			; 00000096H
  00358	52		 push	 edx
$LN53@Resistance:
  00359	6a 02		 push	 2
  0035b	56		 push	 esi
  0035c	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  00361	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Resistance:

; 525  : 			}
; 526  : 			else
; 527  : 			{
; 528  : 				return FALSE;
; 529  : 			}
; 530  : 		}
; 531  : 		else
; 532  : 		{
; 533  : 			return FALSE;
; 534  : 		}
; 535  : 	}
; 536  : 
; 537  : 	return TRUE;

  00364	5f		 pop	 edi
  00365	5b		 pop	 ebx
  00366	b8 01 00 00 00	 mov	 eax, 1
  0036b	5e		 pop	 esi

; 538  : }

  0036c	5d		 pop	 ebp
  0036d	c2 0c 00	 ret	 12			; 0000000cH
?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ENDP ; CObjBaseAttack::ResistanceCheck
_TEXT	ENDS
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	_rand:PROC
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
EXTRN	?GetShieldSpellStatus@CIllusionTempleEvent@@QAEHHE@Z:PROC ; CIllusionTempleEvent::GetShieldSpellStatus
EXTRN	?GetState@CIllusionTempleEvent@@QAEEE@Z:PROC	; CIllusionTempleEvent::GetState
EXTRN	?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A:BYTE ; g_IllusionTempleEvent
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffccH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN37@MissCheck
	DD	FLAT:$LN38@MissCheck
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
_TEXT	SEGMENT
_iDefenseRate$218359 = -36				; size = 4
_iMSBDamage$218360 = -32				; size = 4
tv281 = -28						; size = 4
_iAttackRate$218358 = -28				; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
_skillSuccess$ = 20					; size = 4
_magicsend$ = 24					; size = 4
_bAllMiss$ = 28						; size = 4
_byBarrageCount$ = 32					; size = 1
?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z PROC ; CObjBaseAttack::MissCheck, COMDAT
; _this$ = ecx

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 14	 sub	 esp, 20			; 00000014H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 543  : 	__try

  00033	9b		 fwait
  00034	33 ff		 xor	 edi, edi
  00036	89 7d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], edi

; 544  : 	{
; 545  : 		int iAttackRate = 0;	// lc20
; 546  : 		int iDefenseRate = lpTargetObj->m_SuccessfulBlocking;	// lc24

  00039	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  0003c	8b 83 9c 04 00
	00		 mov	 eax, DWORD PTR [ebx+1180]
  00042	89 45 dc	 mov	 DWORD PTR _iDefenseRate$218359[ebp], eax

; 547  : 		int iMSBDamage = 0;	// MonsterSetBasse Damage

  00045	89 7d e0	 mov	 DWORD PTR _iMSBDamage$218360[ebp], edi

; 548  : 
; 549  : 		if(IT_MAP_RANGE(lpTargetObj->MapNumber) != FALSE) //Season2.5 add-on Illusion

  00048	8a 83 49 01 00
	00		 mov	 al, BYTE PTR [ebx+329]
  0004e	3c 2d		 cmp	 al, 45			; 0000002dH
  00050	0f 82 87 00 00
	00		 jb	 $LN41@MissCheck
  00056	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0005b	3a c8		 cmp	 cl, al
  0005d	1b c9		 sbb	 ecx, ecx
  0005f	41		 inc	 ecx
  00060	3b cf		 cmp	 ecx, edi
  00062	74 79		 je	 SHORT $LN41@MissCheck

; 550  : 		{
; 551  : 			if(g_IllusionTempleEvent.GetState(lpTargetObj->MapNumber) == 2)

  00064	50		 push	 eax
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  0006a	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  0006f	3c 02		 cmp	 al, 2
  00071	75 6a		 jne	 SHORT $LN41@MissCheck

; 552  : 			{
; 553  : 				if ( lpTargetObj->Type == OBJ_USER )

  00073	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  00078	75 37		 jne	 SHORT $LN27@MissCheck

; 554  : 				{
; 555  : 					if(g_IllusionTempleEvent.GetShieldSpellStatus(lpTargetObj->m_iIllusionTempleIndex, lpTargetObj->MapNumber) != FALSE)

  0007a	0f b6 93 49 01
	00 00		 movzx	 edx, BYTE PTR [ebx+329]
  00081	52		 push	 edx
  00082	8b 83 78 20 00
	00		 mov	 eax, DWORD PTR [ebx+8312]
  00088	50		 push	 eax
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  0008e	e8 00 00 00 00	 call	 ?GetShieldSpellStatus@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::GetShieldSpellStatus
  00093	85 c0		 test	 eax, eax
  00095	74 1a		 je	 SHORT $LN27@MissCheck

; 556  : 					{
; 557  : 						GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  00097	57		 push	 edi
  00098	57		 push	 edi
  00099	57		 push	 edi
  0009a	57		 push	 edi
  0009b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009d	51		 push	 ecx
  0009e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  000a9	83 c4 18	 add	 esp, 24			; 00000018H

; 558  : 						return FALSE;

  000ac	e9 ee 02 00 00	 jmp	 $LN50@MissCheck
$LN27@MissCheck:

; 559  : 					}	
; 560  : 				}
; 561  : 				if(lpObj->PartyNumber == lpTargetObj->PartyNumber)

  000b1	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  000b4	8b 8e 2c 04 00
	00		 mov	 ecx, DWORD PTR [esi+1068]
  000ba	3b 8b 2c 04 00
	00		 cmp	 ecx, DWORD PTR [ebx+1068]
  000c0	75 1e		 jne	 SHORT $LN26@MissCheck

; 562  : 				{
; 563  : 					GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  000c2	6a 00		 push	 0
  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	8b 13		 mov	 edx, DWORD PTR [ebx]
  000cc	52		 push	 edx
  000cd	8b 06		 mov	 eax, DWORD PTR [esi]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  000d5	83 c4 18	 add	 esp, 24			; 00000018H

; 564  : 					return FALSE;

  000d8	e9 c2 02 00 00	 jmp	 $LN50@MissCheck
$LN41@MissCheck:
  000dd	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
$LN26@MissCheck:

; 565  : 				}
; 566  : 			}
; 567  : 		}
; 568  : 
; 569  : 		if ( lpObj->Type == OBJ_USER )	// Miss for Uses

  000e0	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  000e5	0f 85 f4 00 00
	00		 jne	 $LN25@MissCheck

; 570  : 		{
; 571  : 			int iBaseLevel = lpObj->Level + lpObj->MLevel;

  000eb	0f bf 9e d0 00
	00 00		 movsx	 ebx, WORD PTR [esi+208]
  000f2	0f bf 8e be 00
	00 00		 movsx	 ecx, WORD PTR [esi+190]
  000f9	03 d9		 add	 ebx, ecx

; 574  : 			{
; 575  : 				iAttackRate = iBaseLevel * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 6) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4  + ((lpObj->Leadership + lpObj->AddLeadership)/10);

  000fb	0f bf 86 22 01
	00 00		 movsx	 eax, WORD PTR [esi+290]

; 572  : 
; 573  : 			if ( lpObj->Class == CLASS_DARKLORD ) // DL

  00102	66 83 be b8 00
	00 00 04	 cmp	 WORD PTR [esi+184], 4
  0010a	75 7e		 jne	 SHORT $LN24@MissCheck

; 574  : 			{
; 575  : 				iAttackRate = iBaseLevel * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 6) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4  + ((lpObj->Leadership + lpObj->AddLeadership)/10);

  0010c	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  00113	03 c2		 add	 eax, edx
  00115	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00118	03 c0		 add	 eax, eax
  0011a	99		 cdq
  0011b	2b c2		 sub	 eax, edx
  0011d	d1 f8		 sar	 eax, 1
  0011f	0f b7 8e 1a 01
	00 00		 movzx	 ecx, WORD PTR [esi+282]
  00126	0f b7 96 18 01
	00 00		 movzx	 edx, WORD PTR [esi+280]
  0012d	03 ca		 add	 ecx, edx
  0012f	89 45 e4	 mov	 DWORD PTR tv281[ebp], eax
  00132	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00137	f7 e9		 imul	 ecx
  00139	c1 fa 02	 sar	 edx, 2
  0013c	8b ca		 mov	 ecx, edx
  0013e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00141	8b 45 e4	 mov	 eax, DWORD PTR tv281[ebp]
  00144	03 c2		 add	 eax, edx
  00146	03 c8		 add	 ecx, eax
  00148	0f bf 86 20 01
	00 00		 movsx	 eax, WORD PTR [esi+288]
  0014f	0f b7 96 f4 00
	00 00		 movzx	 edx, WORD PTR [esi+244]
  00156	03 c2		 add	 eax, edx
  00158	99		 cdq
  00159	83 e2 03	 and	 edx, 3
  0015c	03 c2		 add	 eax, edx
  0015e	c1 f8 02	 sar	 eax, 2
  00161	03 c8		 add	 ecx, eax
  00163	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  00166	03 c8		 add	 ecx, eax

; 576  : 				iAttackRate += iAttackRate * lpObj->SetOpImproveSuccessAttackRate / 100;

  00168	0f b6 96 41 11
	00 00		 movzx	 edx, BYTE PTR [esi+4417]
  0016f	0f af d1	 imul	 edx, ecx
  00172	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00177	f7 ea		 imul	 edx
  00179	c1 fa 05	 sar	 edx, 5
  0017c	8b c2		 mov	 eax, edx
  0017e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00181	03 c2		 add	 eax, edx
  00183	03 c8		 add	 ecx, eax

; 577  : 			}
; 578  : 			else

  00185	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  00188	eb 5b		 jmp	 SHORT $LN51@MissCheck
$LN24@MissCheck:

; 579  : 			{
; 580  : 				iAttackRate = iBaseLevel * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 3) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4 ;

  0018a	0f b7 8e f6 00
	00 00		 movzx	 ecx, WORD PTR [esi+246]
  00191	03 c1		 add	 eax, ecx
  00193	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00196	99		 cdq
  00197	2b c2		 sub	 eax, edx
  00199	8b c8		 mov	 ecx, eax
  0019b	d1 f9		 sar	 ecx, 1
  0019d	0f bf 86 20 01
	00 00		 movsx	 eax, WORD PTR [esi+288]
  001a4	0f b7 96 f4 00
	00 00		 movzx	 edx, WORD PTR [esi+244]
  001ab	03 c2		 add	 eax, edx
  001ad	99		 cdq
  001ae	83 e2 03	 and	 edx, 3
  001b1	03 c2		 add	 eax, edx
  001b3	c1 f8 02	 sar	 eax, 2
  001b6	03 c8		 add	 ecx, eax
  001b8	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  001bb	03 c8		 add	 ecx, eax

; 581  : 				iAttackRate += iAttackRate * lpObj->SetOpImproveSuccessAttackRate / 100;

  001bd	0f b6 96 41 11
	00 00		 movzx	 edx, BYTE PTR [esi+4417]
  001c4	0f af d1	 imul	 edx, ecx
  001c7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  001cc	f7 ea		 imul	 edx
  001ce	c1 fa 05	 sar	 edx, 5
  001d1	8b c2		 mov	 eax, edx
  001d3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d6	03 c2		 add	 eax, edx
  001d8	03 c8		 add	 ecx, eax

; 582  : 			}
; 583  : 		}
; 584  : 		else	// Miss for Monsters

  001da	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  001dd	eb 06		 jmp	 SHORT $LN51@MissCheck
$LN25@MissCheck:

; 585  : 		{
; 586  : 			iAttackRate = lpObj->m_AttackRating;

  001df	8b 8e 88 04 00
	00		 mov	 ecx, DWORD PTR [esi+1160]
$LN51@MissCheck:
  001e5	89 4d e4	 mov	 DWORD PTR _iAttackRate$218358[ebp], ecx

; 587  : 		}
; 588  : 
; 589  : 		iAttackRate += lpObj->m_MPSkillOpt.MpsAttackSuccessRate;

  001e8	db 45 e4	 fild	 DWORD PTR _iAttackRate$218358[ebp]
  001eb	d8 86 34 26 00
	00		 fadd	 DWORD PTR [esi+9780]
  001f1	e8 00 00 00 00	 call	 __ftol2_sse
  001f6	89 45 e4	 mov	 DWORD PTR _iAttackRate$218358[ebp], eax

; 590  : 
; 591  : 		if ( iAttackRate < iDefenseRate )

  001f9	3b 45 dc	 cmp	 eax, DWORD PTR _iDefenseRate$218359[ebp]
  001fc	7d 09		 jge	 SHORT $LN21@MissCheck

; 592  : 		{
; 593  : 			bAllMiss = TRUE;

  001fe	8b 55 1c	 mov	 edx, DWORD PTR _bAllMiss$[ebp]
  00201	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1
$LN21@MissCheck:

; 594  : 		}
; 595  : 
; 596  : 		if ( bAllMiss != FALSE )	// When All Miss

  00207	8b 45 1c	 mov	 eax, DWORD PTR _bAllMiss$[ebp]
  0020a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0020d	0f 84 a0 00 00
	00		 je	 $LN20@MissCheck

; 597  : 		{
; 598  : 			if ( (rand()%100) >= 5 )

  00213	e8 00 00 00 00	 call	 _rand
  00218	99		 cdq
  00219	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0021e	f7 f9		 idiv	 ecx
  00220	83 fa 05	 cmp	 edx, 5
  00223	0f 8c 1f 01 00
	00		 jl	 $LN9@MissCheck

; 599  : 			{
; 600  : #ifdef MONK
; 601  : 				if( lpObj->Class == CLASS_MONK && byBarrageCount )

  00229	66 83 be b8 00
	00 00 06	 cmp	 WORD PTR [esi+184], 6
  00231	75 48		 jne	 SHORT $LN13@MissCheck
  00233	8a 45 20	 mov	 al, BYTE PTR _byBarrageCount$[ebp]
  00236	84 c0		 test	 al, al
  00238	74 41		 je	 SHORT $LN13@MissCheck

; 602  : 				{
; 603  : 					if( skill != 261 && skill != 263 )

  0023a	8b 4d 10	 mov	 ecx, DWORD PTR _skill$[ebp]
  0023d	81 f9 05 01 00
	00		 cmp	 ecx, 261		; 00000105H
  00243	74 19		 je	 SHORT $LN17@MissCheck
  00245	81 f9 07 01 00
	00		 cmp	 ecx, 263		; 00000107H
  0024b	74 11		 je	 SHORT $LN17@MissCheck

; 604  : 					{
; 605  : 						if( byBarrageCount % 4 )

  0024d	0f b6 f8	 movzx	 edi, al
  00250	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  00256	79 16		 jns	 SHORT $LN46@MissCheck
  00258	4f		 dec	 edi
  00259	83 cf fc	 or	 edi, -4			; fffffffcH

; 606  : 						{
; 607  : 							iMSBDamage |= 0x10u;
; 608  : 						}
; 609  : 						else
; 610  : 						{
; 611  : 							iMSBDamage |= 0x20;
; 612  : 						}
; 613  : 					}
; 614  : 					else

  0025c	eb 0f		 jmp	 SHORT $LN52@MissCheck
$LN17@MissCheck:

; 615  : 					{
; 616  : 						if( byBarrageCount % 2 )

  0025e	0f b6 f8	 movzx	 edi, al
  00261	81 e7 01 00 00
	80		 and	 edi, -2147483647	; 80000001H
  00267	79 05		 jns	 SHORT $LN46@MissCheck
  00269	4f		 dec	 edi
  0026a	83 cf fe	 or	 edi, -2			; fffffffeH
$LN52@MissCheck:
  0026d	47		 inc	 edi
$LN46@MissCheck:
  0026e	f7 df		 neg	 edi
  00270	1b ff		 sbb	 edi, edi
  00272	83 e7 f0	 and	 edi, -16		; fffffff0H
  00275	83 c7 20	 add	 edi, 32			; 00000020H
  00278	89 7d e0	 mov	 DWORD PTR _iMSBDamage$218360[ebp], edi
$LN13@MissCheck:

; 617  : 						{
; 618  : 							iMSBDamage |= 0x10u;
; 619  : 						}
; 620  : 						else
; 621  : 						{
; 622  : 							iMSBDamage |= 0x20;
; 623  : 						}
; 624  : 					}
; 625  : 				}
; 626  : #endif
; 627  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, iMSBDamage, 0);

  0027b	6a 00		 push	 0
  0027d	57		 push	 edi
  0027e	6a 00		 push	 0
  00280	6a 00		 push	 0
  00282	8b 13		 mov	 edx, DWORD PTR [ebx]
  00284	52		 push	 edx
  00285	8b 06		 mov	 eax, DWORD PTR [esi]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0028d	83 c4 18	 add	 esp, 24			; 00000018H

; 628  : 
; 629  : 				if (magicsend != 0 )

  00290	83 7d 18 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  00294	0f 84 05 01 00
	00		 je	 $LN50@MissCheck

; 630  : 				{
; 631  : 					GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  0029a	8b 4d 14	 mov	 ecx, DWORD PTR _skillSuccess$[ebp]
  0029d	51		 push	 ecx
  0029e	8b 13		 mov	 edx, DWORD PTR [ebx]
  002a0	52		 push	 edx
  002a1	8b 45 10	 mov	 eax, DWORD PTR _skill$[ebp]
  002a4	50		 push	 eax
  002a5	56		 push	 esi
  002a6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  002ab	83 c4 10	 add	 esp, 16			; 00000010H

; 632  : 				}
; 633  : 
; 634  : 				return FALSE;

  002ae	e9 ec 00 00 00	 jmp	 $LN50@MissCheck
$LN20@MissCheck:

; 635  : 			}
; 636  : 		}
; 637  : 		else	// if the is a chance  ot hit the target
; 638  : 		{
; 639  : 			if ( (rand()%iAttackRate) < iDefenseRate)

  002b3	e8 00 00 00 00	 call	 _rand
  002b8	99		 cdq
  002b9	f7 7d e4	 idiv	 DWORD PTR _iAttackRate$218358[ebp]
  002bc	3b 55 dc	 cmp	 edx, DWORD PTR _iDefenseRate$218359[ebp]
  002bf	0f 8d 83 00 00
	00		 jge	 $LN9@MissCheck

; 640  : 			{
; 641  : #ifdef MONK
; 642  : 				if( lpObj->Class == CLASS_MONK && byBarrageCount )

  002c5	66 83 be b8 00
	00 00 06	 cmp	 WORD PTR [esi+184], 6
  002cd	75 48		 jne	 SHORT $LN3@MissCheck
  002cf	8a 45 20	 mov	 al, BYTE PTR _byBarrageCount$[ebp]
  002d2	84 c0		 test	 al, al
  002d4	74 41		 je	 SHORT $LN3@MissCheck

; 643  : 				{
; 644  : 					if( skill != 261 && skill != 263 )

  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _skill$[ebp]
  002d9	81 f9 05 01 00
	00		 cmp	 ecx, 261		; 00000105H
  002df	74 19		 je	 SHORT $LN7@MissCheck
  002e1	81 f9 07 01 00
	00		 cmp	 ecx, 263		; 00000107H
  002e7	74 11		 je	 SHORT $LN7@MissCheck

; 645  : 					{
; 646  : 						if( byBarrageCount % 4 )

  002e9	0f b6 f8	 movzx	 edi, al
  002ec	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  002f2	79 16		 jns	 SHORT $LN48@MissCheck
  002f4	4f		 dec	 edi
  002f5	83 cf fc	 or	 edi, -4			; fffffffcH

; 647  : 						{
; 648  : 							iMSBDamage |= 0x10u;
; 649  : 						}
; 650  : 						else
; 651  : 						{
; 652  : 							iMSBDamage |= 0x20;
; 653  : 						}
; 654  : 					}
; 655  : 					else

  002f8	eb 0f		 jmp	 SHORT $LN53@MissCheck
$LN7@MissCheck:

; 656  : 					{
; 657  : 						if( byBarrageCount % 2 )

  002fa	0f b6 f8	 movzx	 edi, al
  002fd	81 e7 01 00 00
	80		 and	 edi, -2147483647	; 80000001H
  00303	79 05		 jns	 SHORT $LN48@MissCheck
  00305	4f		 dec	 edi
  00306	83 cf fe	 or	 edi, -2			; fffffffeH
$LN53@MissCheck:
  00309	47		 inc	 edi
$LN48@MissCheck:
  0030a	f7 df		 neg	 edi
  0030c	1b ff		 sbb	 edi, edi
  0030e	83 e7 f0	 and	 edi, -16		; fffffff0H
  00311	83 c7 20	 add	 edi, 32			; 00000020H
  00314	89 7d e0	 mov	 DWORD PTR _iMSBDamage$218360[ebp], edi
$LN3@MissCheck:

; 658  : 						{
; 659  : 							iMSBDamage |= 0x10u;
; 660  : 						}
; 661  : 						else
; 662  : 						{
; 663  : 							iMSBDamage |= 0x20;
; 664  : 						}
; 665  : 					}
; 666  : 				}
; 667  : #endif
; 668  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, iMSBDamage, 0);

  00317	6a 00		 push	 0
  00319	57		 push	 edi
  0031a	6a 00		 push	 0
  0031c	6a 00		 push	 0
  0031e	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00320	51		 push	 ecx
  00321	8b 16		 mov	 edx, DWORD PTR [esi]
  00323	52		 push	 edx
  00324	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  00329	83 c4 18	 add	 esp, 24			; 00000018H

; 669  : 
; 670  : 				if ( magicsend != 0 )

  0032c	83 7d 18 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  00330	74 6d		 je	 SHORT $LN50@MissCheck

; 671  : 				{
; 672  : 					GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index,  skillSuccess);

  00332	8b 45 14	 mov	 eax, DWORD PTR _skillSuccess$[ebp]
  00335	50		 push	 eax
  00336	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00338	51		 push	 ecx
  00339	8b 55 10	 mov	 edx, DWORD PTR _skill$[ebp]
  0033c	52		 push	 edx
  0033d	56		 push	 esi
  0033e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00343	83 c4 10	 add	 esp, 16			; 00000010H

; 673  : 				}
; 674  : 
; 675  : 				return FALSE;

  00346	eb 57		 jmp	 SHORT $LN50@MissCheck
$LN9@MissCheck:

; 676  : 			}
; 677  : 		}
; 678  : 	}

  00348	9b		 fwait
  00349	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 683  : 	}
; 684  : 
; 685  : 	return TRUE;

  00350	b8 01 00 00 00	 mov	 eax, 1

; 686  : }

  00355	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00358	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035f	59		 pop	 ecx
  00360	5f		 pop	 edi
  00361	5e		 pop	 esi
  00362	5b		 pop	 ebx
  00363	8b e5		 mov	 esp, ebp
  00365	5d		 pop	 ebp
  00366	c2 1c 00	 ret	 28			; 0000001cH
$LN37@MissCheck:
$LN54@MissCheck:

; 679  : 	__except (lpObj->Level=1,-1)

  00369	b8 01 00 00 00	 mov	 eax, 1
  0036e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00371	66 89 81 be 00
	00 00		 mov	 WORD PTR [ecx+190], ax
  00378	83 c8 ff	 or	 eax, -1
$LN49@MissCheck:
$LN39@MissCheck:
  0037b	c3		 ret	 0
$LN38@MissCheck:
  0037c	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 680  : 	{
; 681  : 		LogAdd(lMsg.Get(MSGGET(2, 12)), lpObj->Name);

  0037f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00382	83 c2 77	 add	 edx, 119		; 00000077H
  00385	52		 push	 edx
  00386	68 0c 02 00 00	 push	 524			; 0000020cH
  0038b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00390	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00395	50		 push	 eax
  00396	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0039c	83 c4 08	 add	 esp, 8
$LN50@MissCheck:

; 682  : 		return FALSE;

  0039f	9b		 fwait
  003a0	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  003a7	33 c0		 xor	 eax, eax

; 686  : }

  003a9	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  003ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003b3	59		 pop	 ecx
  003b4	5f		 pop	 edi
  003b5	5e		 pop	 esi
  003b6	5b		 pop	 ebx
  003b7	8b e5		 mov	 esp, ebp
  003b9	5d		 pop	 ebp
  003ba	c2 1c 00	 ret	 28			; 0000001cH
?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ENDP ; CObjBaseAttack::MissCheck
_TEXT	ENDS
PUBLIC	??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@ ; `string'
PUBLIC	??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@	; `string'
PUBLIC	?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::GetPartyMemberCount
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@
CONST	SEGMENT
??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@ DB 'error : De'
	DB	'cPartyMemberHPandMP %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@
CONST	SEGMENT
??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@ DB 'ObjBaseAttack.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_retcount$ = 8						; size = 4
_lpObj$ = 8						; size = 4
?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CObjBaseAttack::GetPartyMemberCount, COMDAT
; _this$ = ecx

; 973  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 974  : 	LPOBJ lpPartyObj;
; 975  : 	int partynum = lpObj->PartyNumber;

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	8b 87 2c 04 00
	00		 mov	 eax, DWORD PTR [edi+1068]

; 976  : 
; 977  : 	if ( OBJMAX_RANGE(partynum) == FALSE )

  0000d	85 c0		 test	 eax, eax
  0000f	78 0e		 js	 SHORT $LN14@GetPartyMe
  00011	33 c9		 xor	 ecx, ecx
  00013	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00018	0f 9e c1	 setle	 cl
  0001b	85 c9		 test	 ecx, ecx
  0001d	75 1f		 jne	 SHORT $LN7@GetPartyMe
$LN14@GetPartyMe:

; 978  : 	{
; 979  : 		LogAdd("error : DecPartyMemberHPandMP %s %d", __FILE__, __LINE__);

  0001f	68 d3 03 00 00	 push	 979			; 000003d3H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 980  : 		return 0;

  00037	33 c0		 xor	 eax, eax
  00039	5f		 pop	 edi

; 1007 : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN7@GetPartyMe:

; 981  : 	}
; 982  : 
; 983  : 	int partycount = gParty.m_PartyS[partynum].Count;
; 984  : 	int retcount = 0;

  0003e	6b c0 68	 imul	 eax, 104		; 00000068H
  00041	53		 push	 ebx
  00042	05 0c 00 00 00	 add	 eax, OFFSET ?gParty@@3VPartyClass@@A+12
  00047	56		 push	 esi
  00048	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _retcount$[ebp], 0
  0004f	8b f0		 mov	 esi, eax
  00051	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
$LL17@GetPartyMe:

; 987  : 	{
; 988  : 		int memberindex = gParty.m_PartyS[partynum].Number[n];

  00056	8b 06		 mov	 eax, DWORD PTR [esi]

; 989  : 
; 990  : 		if ( memberindex >= 0 )

  00058	85 c0		 test	 eax, eax
  0005a	78 2c		 js	 SHORT $LN5@GetPartyMe

; 991  : 		{
; 992  : 			lpPartyObj = &gObj[memberindex];
; 993  : 
; 994  : 			if ( lpObj->MapNumber == lpPartyObj->MapNumber )

  0005c	8a 97 49 01 00
	00		 mov	 dl, BYTE PTR [edi+329]
  00062	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00068	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	3a 90 49 01 00
	00		 cmp	 dl, BYTE PTR [eax+329]
  00074	75 12		 jne	 SHORT $LN5@GetPartyMe

; 995  : 			{
; 996  : 				int dis = gObjCalDistance(lpObj, &gObj[memberindex]);

  00076	50		 push	 eax
  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0007d	83 c4 08	 add	 esp, 8

; 997  : 				
; 998  : 				if ( dis < MAX_PARTY_DISTANCE_EFFECT )

  00080	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00083	7d 03		 jge	 SHORT $LN5@GetPartyMe

; 999  : 				{
; 1000 : 					retcount++;

  00085	ff 45 08	 inc	 DWORD PTR _retcount$[ebp]
$LN5@GetPartyMe:

; 985  : 
; 986  : 	for ( int n=0;n<MAX_USER_IN_PARTY;n++)

  00088	83 c6 04	 add	 esi, 4
  0008b	4b		 dec	 ebx
  0008c	75 c8		 jne	 SHORT $LL17@GetPartyMe

; 1001 : 				}
; 1002 : 			}
; 1003 : 		}
; 1004 : 	}
; 1005 : 
; 1006 : 	return retcount;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _retcount$[ebp]
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	5f		 pop	 edi

; 1007 : }

  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CObjBaseAttack::GetPartyMemberCount
_TEXT	ENDS
PUBLIC	?MagicDefenceCheck@CObjBaseAttack@@QAE_NPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::MagicDefenceCheck
; Function compile flags: /Ogtp
;	COMDAT ?MagicDefenceCheck@CObjBaseAttack@@QAE_NPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?MagicDefenceCheck@CObjBaseAttack@@QAE_NPAUOBJECTSTRUCT@@0@Z PROC ; CObjBaseAttack::MagicDefenceCheck, COMDAT
; _this$ = ecx

; 1010 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1011 : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	66 83 79 68 01	 cmp	 WORD PTR [ecx+104], 1
  0000b	0f 85 93 00 00
	00		 jne	 $LN2@MagicDefen
  00011	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00014	66 83 78 68 02	 cmp	 WORD PTR [eax+104], 2
  00019	0f 85 85 00 00
	00		 jne	 $LN2@MagicDefen

; 1012 : 	{
; 1013 : 		if(lpObj->Class == CLASS_WIZARD || lpObj->Class == CLASS_SUMMONER || lpObj->Class == CLASS_MAGUMSA)

  0001f	0f b7 81 b8 00
	00 00		 movzx	 eax, WORD PTR [ecx+184]
  00026	66 85 c0	 test	 ax, ax
  00029	74 0a		 je	 SHORT $LN4@MagicDefen
  0002b	83 f8 05	 cmp	 eax, 5
  0002e	74 05		 je	 SHORT $LN4@MagicDefen
  00030	83 f8 03	 cmp	 eax, 3
  00033	75 6f		 jne	 SHORT $LN2@MagicDefen
$LN4@MagicDefen:

; 1014 : 		{
; 1015 : 			switch(lpObj->m_SkillNumber)

  00035	0f bf 81 d8 03
	00 00		 movsx	 eax, WORD PTR [ecx+984]
  0003c	3d d7 00 00 00	 cmp	 eax, 215		; 000000d7H
  00041	7f 1b		 jg	 SHORT $LN9@MagicDefen
  00043	3d d6 00 00 00	 cmp	 eax, 214		; 000000d6H
  00048	7d 54		 jge	 SHORT $LN1@MagicDefen
  0004a	48		 dec	 eax
  0004b	83 f8 26	 cmp	 eax, 38			; 00000026H
  0004e	77 54		 ja	 SHORT $LN2@MagicDefen
  00050	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN11@MagicDefen[eax]
  00057	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN14@MagicDefen[ecx*4]
$LN9@MagicDefen:
  0005e	3d e7 01 00 00	 cmp	 eax, 487		; 000001e7H
  00063	7f 21		 jg	 SHORT $LN10@MagicDefen
  00065	3d e6 01 00 00	 cmp	 eax, 486		; 000001e6H
  0006a	7d 32		 jge	 SHORT $LN1@MagicDefen
  0006c	2d e6 00 00 00	 sub	 eax, 230		; 000000e6H
  00071	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  00076	77 2c		 ja	 SHORT $LN2@MagicDefen
  00078	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN12@MagicDefen[eax]
  0007f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN15@MagicDefen[edx*4]
$LN10@MagicDefen:
  00086	2d e9 01 00 00	 sub	 eax, 489		; 000001e9H
  0008b	83 f8 07	 cmp	 eax, 7
  0008e	77 14		 ja	 SHORT $LN2@MagicDefen
  00090	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN13@MagicDefen[eax]
  00097	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@MagicDefen[eax*4]
$LN1@MagicDefen:

; 1016 : 			{
; 1017 : 			case AT_SKILL_POISON:
; 1018 : 			case AT_SKILL_METEO:
; 1019 : 			case AT_SKILL_THUNDER:
; 1020 : 			case AT_SKILL_FIREBALL:
; 1021 : 			case AT_SKILL_FLAME:
; 1022 : 			case AT_SKILL_SLOW:
; 1023 : 			case AT_SKILL_STORM:
; 1024 : 			case AT_SKILL_EVIL:
; 1025 : 			case AT_SKILL_HELL:
; 1026 : 			case AT_SKILL_POWERWAVE:
; 1027 : 			case AT_SKILL_FLASH:
; 1028 : 			case AT_SKILL_BLAST:
; 1029 : 			case AT_SKILL_INFERNO:
; 1030 : 			case AT_SKILL_ENERGYBALL:
; 1031 : 			case 38:
; 1032 : 			case 39:
; 1033 : 			case 214:
; 1034 : 			case 215:
; 1035 : 			case 230:
; 1036 : 			case 237:
; 1037 : 			//master
; 1038 : 			case 378:
; 1039 : 			case 379:
; 1040 : 			case 381:
; 1041 : 			case 382:
; 1042 : 			case 384:
; 1043 : 			case 385:
; 1044 : 			case 387:
; 1045 : 			case 388:
; 1046 : 			case 389:
; 1047 : 			case 390:
; 1048 : 			case 391:
; 1049 : 			case 392:
; 1050 : 			case 393:
; 1051 : 			case 394:
; 1052 : 			case 395:
; 1053 : 			case 450:
; 1054 : 			case 451:
; 1055 : 			case 453:
; 1056 : 			case 454:
; 1057 : 			case 455:
; 1058 : 			case 456:
; 1059 : 			case 458:
; 1060 : 			case 462:
; 1061 : 			case 480:
; 1062 : 			case 483:
; 1063 : 			case 484:
; 1064 : 			case 486:
; 1065 : 			case 487:
; 1066 : 			case 489:
; 1067 : 			case 491:
; 1068 : 			case 492:
; 1069 : 			case 494:
; 1070 : 			case 495:
; 1071 : 			case 496:
; 1072 : 				return true;

  0009e	b0 01		 mov	 al, 1

; 1078 : }

  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
$LN2@MagicDefen:

; 1073 : 			}
; 1074 : 		}
; 1075 : 	}
; 1076 : 
; 1077 : 	return false;

  000a4	32 c0		 xor	 al, al

; 1078 : }

  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
  000aa	8b ff		 npad	 2
$LN14@MagicDefen:
  000ac	00 00 00 00	 DD	 $LN1@MagicDefen
  000b0	00 00 00 00	 DD	 $LN2@MagicDefen
$LN11@MagicDefen:
  000b4	00		 DB	 0
  000b5	00		 DB	 0
  000b6	00		 DB	 0
  000b7	00		 DB	 0
  000b8	00		 DB	 0
  000b9	01		 DB	 1
  000ba	00		 DB	 0
  000bb	00		 DB	 0
  000bc	00		 DB	 0
  000bd	00		 DB	 0
  000be	00		 DB	 0
  000bf	00		 DB	 0
  000c0	00		 DB	 0
  000c1	00		 DB	 0
  000c2	01		 DB	 1
  000c3	01		 DB	 1
  000c4	00		 DB	 0
  000c5	01		 DB	 1
  000c6	01		 DB	 1
  000c7	01		 DB	 1
  000c8	01		 DB	 1
  000c9	01		 DB	 1
  000ca	01		 DB	 1
  000cb	01		 DB	 1
  000cc	01		 DB	 1
  000cd	01		 DB	 1
  000ce	01		 DB	 1
  000cf	01		 DB	 1
  000d0	01		 DB	 1
  000d1	01		 DB	 1
  000d2	01		 DB	 1
  000d3	01		 DB	 1
  000d4	01		 DB	 1
  000d5	01		 DB	 1
  000d6	01		 DB	 1
  000d7	01		 DB	 1
  000d8	01		 DB	 1
  000d9	00		 DB	 0
  000da	00		 DB	 0
  000db	90		 npad	 1
$LN15@MagicDefen:
  000dc	00 00 00 00	 DD	 $LN1@MagicDefen
  000e0	00 00 00 00	 DD	 $LN2@MagicDefen
$LN12@MagicDefen:
  000e4	00		 DB	 0
  000e5	01		 DB	 1
  000e6	01		 DB	 1
  000e7	01		 DB	 1
  000e8	01		 DB	 1
  000e9	01		 DB	 1
  000ea	01		 DB	 1
  000eb	00		 DB	 0
  000ec	01		 DB	 1
  000ed	01		 DB	 1
  000ee	01		 DB	 1
  000ef	01		 DB	 1
  000f0	01		 DB	 1
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	01		 DB	 1
  000f5	01		 DB	 1
  000f6	01		 DB	 1
  000f7	01		 DB	 1
  000f8	01		 DB	 1
  000f9	01		 DB	 1
  000fa	01		 DB	 1
  000fb	01		 DB	 1
  000fc	01		 DB	 1
  000fd	01		 DB	 1
  000fe	01		 DB	 1
  000ff	01		 DB	 1
  00100	01		 DB	 1
  00101	01		 DB	 1
  00102	01		 DB	 1
  00103	01		 DB	 1
  00104	01		 DB	 1
  00105	01		 DB	 1
  00106	01		 DB	 1
  00107	01		 DB	 1
  00108	01		 DB	 1
  00109	01		 DB	 1
  0010a	01		 DB	 1
  0010b	01		 DB	 1
  0010c	01		 DB	 1
  0010d	01		 DB	 1
  0010e	01		 DB	 1
  0010f	01		 DB	 1
  00110	01		 DB	 1
  00111	01		 DB	 1
  00112	01		 DB	 1
  00113	01		 DB	 1
  00114	01		 DB	 1
  00115	01		 DB	 1
  00116	01		 DB	 1
  00117	01		 DB	 1
  00118	01		 DB	 1
  00119	01		 DB	 1
  0011a	01		 DB	 1
  0011b	01		 DB	 1
  0011c	01		 DB	 1
  0011d	01		 DB	 1
  0011e	01		 DB	 1
  0011f	01		 DB	 1
  00120	01		 DB	 1
  00121	01		 DB	 1
  00122	01		 DB	 1
  00123	01		 DB	 1
  00124	01		 DB	 1
  00125	01		 DB	 1
  00126	01		 DB	 1
  00127	01		 DB	 1
  00128	01		 DB	 1
  00129	01		 DB	 1
  0012a	01		 DB	 1
  0012b	01		 DB	 1
  0012c	01		 DB	 1
  0012d	01		 DB	 1
  0012e	01		 DB	 1
  0012f	01		 DB	 1
  00130	01		 DB	 1
  00131	01		 DB	 1
  00132	01		 DB	 1
  00133	01		 DB	 1
  00134	01		 DB	 1
  00135	01		 DB	 1
  00136	01		 DB	 1
  00137	01		 DB	 1
  00138	01		 DB	 1
  00139	01		 DB	 1
  0013a	01		 DB	 1
  0013b	01		 DB	 1
  0013c	01		 DB	 1
  0013d	01		 DB	 1
  0013e	01		 DB	 1
  0013f	01		 DB	 1
  00140	01		 DB	 1
  00141	01		 DB	 1
  00142	01		 DB	 1
  00143	01		 DB	 1
  00144	01		 DB	 1
  00145	01		 DB	 1
  00146	01		 DB	 1
  00147	01		 DB	 1
  00148	01		 DB	 1
  00149	01		 DB	 1
  0014a	01		 DB	 1
  0014b	01		 DB	 1
  0014c	01		 DB	 1
  0014d	01		 DB	 1
  0014e	01		 DB	 1
  0014f	01		 DB	 1
  00150	01		 DB	 1
  00151	01		 DB	 1
  00152	01		 DB	 1
  00153	01		 DB	 1
  00154	01		 DB	 1
  00155	01		 DB	 1
  00156	01		 DB	 1
  00157	01		 DB	 1
  00158	01		 DB	 1
  00159	01		 DB	 1
  0015a	01		 DB	 1
  0015b	01		 DB	 1
  0015c	01		 DB	 1
  0015d	01		 DB	 1
  0015e	01		 DB	 1
  0015f	01		 DB	 1
  00160	01		 DB	 1
  00161	01		 DB	 1
  00162	01		 DB	 1
  00163	01		 DB	 1
  00164	01		 DB	 1
  00165	01		 DB	 1
  00166	01		 DB	 1
  00167	01		 DB	 1
  00168	01		 DB	 1
  00169	01		 DB	 1
  0016a	01		 DB	 1
  0016b	01		 DB	 1
  0016c	01		 DB	 1
  0016d	01		 DB	 1
  0016e	01		 DB	 1
  0016f	01		 DB	 1
  00170	01		 DB	 1
  00171	01		 DB	 1
  00172	01		 DB	 1
  00173	01		 DB	 1
  00174	01		 DB	 1
  00175	01		 DB	 1
  00176	01		 DB	 1
  00177	01		 DB	 1
  00178	00		 DB	 0
  00179	00		 DB	 0
  0017a	01		 DB	 1
  0017b	00		 DB	 0
  0017c	00		 DB	 0
  0017d	01		 DB	 1
  0017e	00		 DB	 0
  0017f	00		 DB	 0
  00180	01		 DB	 1
  00181	00		 DB	 0
  00182	00		 DB	 0
  00183	00		 DB	 0
  00184	00		 DB	 0
  00185	00		 DB	 0
  00186	00		 DB	 0
  00187	00		 DB	 0
  00188	00		 DB	 0
  00189	00		 DB	 0
  0018a	01		 DB	 1
  0018b	01		 DB	 1
  0018c	01		 DB	 1
  0018d	01		 DB	 1
  0018e	01		 DB	 1
  0018f	01		 DB	 1
  00190	01		 DB	 1
  00191	01		 DB	 1
  00192	01		 DB	 1
  00193	01		 DB	 1
  00194	01		 DB	 1
  00195	01		 DB	 1
  00196	01		 DB	 1
  00197	01		 DB	 1
  00198	01		 DB	 1
  00199	01		 DB	 1
  0019a	01		 DB	 1
  0019b	01		 DB	 1
  0019c	01		 DB	 1
  0019d	01		 DB	 1
  0019e	01		 DB	 1
  0019f	01		 DB	 1
  001a0	01		 DB	 1
  001a1	01		 DB	 1
  001a2	01		 DB	 1
  001a3	01		 DB	 1
  001a4	01		 DB	 1
  001a5	01		 DB	 1
  001a6	01		 DB	 1
  001a7	01		 DB	 1
  001a8	01		 DB	 1
  001a9	01		 DB	 1
  001aa	01		 DB	 1
  001ab	01		 DB	 1
  001ac	01		 DB	 1
  001ad	01		 DB	 1
  001ae	01		 DB	 1
  001af	01		 DB	 1
  001b0	01		 DB	 1
  001b1	01		 DB	 1
  001b2	01		 DB	 1
  001b3	01		 DB	 1
  001b4	01		 DB	 1
  001b5	01		 DB	 1
  001b6	01		 DB	 1
  001b7	01		 DB	 1
  001b8	01		 DB	 1
  001b9	01		 DB	 1
  001ba	01		 DB	 1
  001bb	01		 DB	 1
  001bc	01		 DB	 1
  001bd	01		 DB	 1
  001be	01		 DB	 1
  001bf	01		 DB	 1
  001c0	00		 DB	 0
  001c1	00		 DB	 0
  001c2	01		 DB	 1
  001c3	00		 DB	 0
  001c4	00		 DB	 0
  001c5	00		 DB	 0
  001c6	00		 DB	 0
  001c7	01		 DB	 1
  001c8	00		 DB	 0
  001c9	01		 DB	 1
  001ca	01		 DB	 1
  001cb	01		 DB	 1
  001cc	00		 DB	 0
  001cd	01		 DB	 1
  001ce	01		 DB	 1
  001cf	01		 DB	 1
  001d0	01		 DB	 1
  001d1	01		 DB	 1
  001d2	01		 DB	 1
  001d3	01		 DB	 1
  001d4	01		 DB	 1
  001d5	01		 DB	 1
  001d6	01		 DB	 1
  001d7	01		 DB	 1
  001d8	01		 DB	 1
  001d9	01		 DB	 1
  001da	01		 DB	 1
  001db	01		 DB	 1
  001dc	01		 DB	 1
  001dd	01		 DB	 1
  001de	00		 DB	 0
  001df	01		 DB	 1
  001e0	01		 DB	 1
  001e1	00		 DB	 0
  001e2	00		 DB	 0
  001e3	90		 npad	 1
$LN16@MagicDefen:
  001e4	00 00 00 00	 DD	 $LN1@MagicDefen
  001e8	00 00 00 00	 DD	 $LN2@MagicDefen
$LN13@MagicDefen:
  001ec	00		 DB	 0
  001ed	01		 DB	 1
  001ee	00		 DB	 0
  001ef	00		 DB	 0
  001f0	01		 DB	 1
  001f1	00		 DB	 0
  001f2	00		 DB	 0
  001f3	00		 DB	 0
?MagicDefenceCheck@CObjBaseAttack@@QAE_NPAUOBJECTSTRUCT@@0@Z ENDP ; CObjBaseAttack::MagicDefenceCheck
_TEXT	ENDS
PUBLIC	?GetTargetMagicDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ; CObjBaseAttack::GetTargetMagicDefense
EXTRN	?IsThirdWingOpGetOnePercentDamage@CItem@@QAEHXZ:PROC ; CItem::IsThirdWingOpGetOnePercentDamage
EXTRN	?IsWingOpGetOnePercentDamage@CItem@@QAEHXZ:PROC	; CItem::IsWingOpGetOnePercentDamage
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetActiveEffect
; Function compile flags: /Ogtp
;	COMDAT ?GetTargetMagicDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_MsgDamage$ = 16					; size = 4
?GetTargetMagicDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z PROC ; CObjBaseAttack::GetTargetMagicDefense, COMDAT
; _this$ = ecx

; 1081 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1082 : 	int targetdefense = lpTargetObj->m_MagicDefense;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1083 : 
; 1084 : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	b8 01 00 00 00	 mov	 eax, 1
  00010	57		 push	 edi
  00011	8b b9 98 04 00
	00		 mov	 edi, DWORD PTR [ecx+1176]
  00017	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0001b	75 14		 jne	 SHORT $LN6@GetTargetM
  0001d	66 39 41 68	 cmp	 WORD PTR [ecx+104], ax
  00021	75 0e		 jne	 SHORT $LN6@GetTargetM

; 1085 : 	{
; 1086 : 		targetdefense += lpTargetObj->m_ItemOptionExFor380.OpAddDefense / 2;

  00023	0f bf 81 04 20
	00 00		 movsx	 eax, WORD PTR [ecx+8196]
  0002a	99		 cdq
  0002b	2b c2		 sub	 eax, edx
  0002d	d1 f8		 sar	 eax, 1
  0002f	03 f8		 add	 edi, eax
$LN6@GetTargetM:

; 1087 : 	}
; 1088 : 
; 1089 : 	int iSkillMagumReduceDefense = 0;
; 1090 : 	iSkillMagumReduceDefense = gObjGetActiveEffect(lpTargetObj, ADD_OPTION_REDUCE_DEFENSE);

  00031	6a 17		 push	 23			; 00000017H
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  00039	8b c8		 mov	 ecx, eax

; 1091 : 	targetdefense -= (targetdefense * iSkillMagumReduceDefense)/100;

  0003b	0f af cf	 imul	 ecx, edi
  0003e	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00043	f7 e9		 imul	 ecx
  00045	c1 fa 05	 sar	 edx, 5
  00048	8b c2		 mov	 eax, edx
  0004a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004d	03 c2		 add	 eax, edx
  0004f	83 c4 08	 add	 esp, 8
  00052	03 f8		 add	 edi, eax

; 1092 : 	
; 1093 : 	if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementDefenseTime > 0 )

  00054	83 be 24 1c 00
	00 00		 cmp	 DWORD PTR [esi+7204], 0
  0005b	7e 0a		 jle	 SHORT $LN4@GetTargetM

; 1094 : 	{
; 1095 : 		targetdefense += lpObj->m_MonsterSkillElementInfo.m_iSkillElementDefense;

  0005d	03 be 20 1c 00
	00		 add	 edi, DWORD PTR [esi+7200]

; 1096 : 
; 1097 : 		if ( targetdefense <0 )

  00063	79 02		 jns	 SHORT $LN4@GetTargetM

; 1098 : 		{
; 1099 : 			targetdefense = 0;

  00065	33 ff		 xor	 edi, edi
$LN4@GetTargetM:

; 1100 : 		}
; 1101 : 	}
; 1102 : 
; 1103 : 	int percentdamage = 0;
; 1104 : 
; 1105 : 	if ( lpObj->pInventory[7].IsItem() != FALSE )

  00067	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  0006d	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  00073	33 db		 xor	 ebx, ebx
  00075	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007a	85 c0		 test	 eax, eax
  0007c	74 26		 je	 SHORT $LN3@GetTargetM

; 1106 : 	{
; 1107 : 		percentdamage = lpObj->pInventory[7].IsWingOpGetOnePercentDamage();

  0007e	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00084	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  0008a	e8 00 00 00 00	 call	 ?IsWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::IsWingOpGetOnePercentDamage

; 1108 : 		percentdamage += lpObj->pInventory[7].IsThirdWingOpGetOnePercentDamage();

  0008f	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00095	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  0009b	8b d8		 mov	 ebx, eax
  0009d	e8 00 00 00 00	 call	 ?IsThirdWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::IsThirdWingOpGetOnePercentDamage
  000a2	03 d8		 add	 ebx, eax
$LN3@GetTargetM:

; 1109 : 	}
; 1110 : 
; 1111 : 	percentdamage += lpObj->SetOpIgnoreDefense;

  000a4	0f b6 8e 3e 11
	00 00		 movzx	 ecx, BYTE PTR [esi+4414]
  000ab	03 d9		 add	 ebx, ecx

; 1112 : 
; 1113 : 	if ( percentdamage != 0)

  000ad	74 20		 je	 SHORT $LN10@GetTargetM

; 1114 : 	{
; 1115 : 		if ( (rand()%100) <= percentdamage)

  000af	e8 00 00 00 00	 call	 _rand
  000b4	99		 cdq
  000b5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000ba	f7 f9		 idiv	 ecx
  000bc	3b d3		 cmp	 edx, ebx
  000be	7f 0f		 jg	 SHORT $LN10@GetTargetM

; 1116 : 		{
; 1117 : 			targetdefense = 0;
; 1118 : 			MsgDamage = 1;

  000c0	8b 55 10	 mov	 edx, DWORD PTR _MsgDamage$[ebp]
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	33 c0		 xor	 eax, eax
  000c7	c6 02 01	 mov	 BYTE PTR [edx], 1
  000ca	5b		 pop	 ebx

; 1123 : }

  000cb	5d		 pop	 ebp
  000cc	c2 0c 00	 ret	 12			; 0000000cH
$LN10@GetTargetM:

; 1119 : 		}
; 1120 : 	}
; 1121 : 
; 1122 : 	return targetdefense;

  000cf	8b c7		 mov	 eax, edi
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 1123 : }

  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH
?GetTargetMagicDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ENDP ; CObjBaseAttack::GetTargetMagicDefense
_TEXT	ENDS
PUBLIC	?Init@ComboSkillData@@QAEXXZ			; ComboSkillData::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@ComboSkillData@@QAEXXZ
_TEXT	SEGMENT
?Init@ComboSkillData@@QAEXXZ PROC			; ComboSkillData::Init, COMDAT
; _this$ = ecx

; 1130 : 	this->dwTime = 0;
; 1131 : 	this->Skill[0] = -1;

  00000	83 c8 ff	 or	 eax, -1

; 1132 : 	this->Skill[1] = -1;

  00003	0b d0		 or	 edx, eax
  00005	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 1133 : 	this->Skill[2] = -1;

  00009	0b c0		 or	 eax, eax
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00011	66 89 51 06	 mov	 WORD PTR [ecx+6], dx
  00015	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 1134 : 	this->ProgressIndex = -1;

  00019	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 1135 : }

  00020	c3		 ret	 0
?Init@ComboSkillData@@QAEXXZ ENDP			; ComboSkillData::Init
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCObjBaseAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCObjBaseAttack@@UAEPAXI@Z PROC			; CObjBaseAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCObjBaseAttack@@UAEPAXI@Z ENDP			; CObjBaseAttack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	__real@4059000000000000
PUBLIC	__real@40c3880000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@00000000
PUBLIC	?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheckPvP
EXTRN	?g_bShieldComboMissOptionOn@@3HA:DWORD		; g_bShieldComboMissOptionOn
EXTRN	?g_fSuccessAttackRateOption@@3MA:DWORD		; g_fSuccessAttackRateOption
;	COMDAT ??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@ DB '['
	DB	'Shield] ComboSkill Cancel! [%s][%s]', 00H	; `string'
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
_TEXT	SEGMENT
_iDefenseRate$ = -8					; size = 4
_iAttackRate$ = -4					; size = 4
tv713 = 8						; size = 4
tv711 = 8						; size = 4
tv705 = 8						; size = 4
tv699 = 8						; size = 4
tv697 = 8						; size = 4
tv691 = 8						; size = 4
tv685 = 8						; size = 4
tv684 = 8						; size = 4
tv683 = 8						; size = 4
tv679 = 8						; size = 4
tv678 = 8						; size = 4
tv677 = 8						; size = 4
tv676 = 8						; size = 4
tv672 = 8						; size = 4
tv657 = 8						; size = 4
tv656 = 8						; size = 4
tv653 = 8						; size = 4
tv652 = 8						; size = 4
tv647 = 8						; size = 4
tv646 = 8						; size = 4
tv643 = 8						; size = 4
tv642 = 8						; size = 4
tv639 = 8						; size = 4
tv635 = 8						; size = 4
tv632 = 8						; size = 4
tv624 = 8						; size = 4
tv621 = 8						; size = 4
_iAttackSuccessRate$ = 8				; size = 4
_lpObj$ = 8						; size = 4
_iTargetBaseLevel$ = 12					; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
_skillSuccess$ = 20					; size = 4
_magicsend$ = 24					; size = 4
_bAllMiss$ = 28						; size = 4
_byBarrageCount$ = 32					; size = 1
?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z PROC ; CObjBaseAttack::MissCheckPvP, COMDAT
; _this$ = ecx

; 690  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 691  : 	float iAttackRate = 0;

  00006	d9 ee		 fldz
  00008	56		 push	 esi

; 692  : 	float iDefenseRate = 0;
; 693  : 	int iAttackSuccessRate = 0; 
; 694  : 
; 695  : 	if(IT_MAP_RANGE(lpTargetObj->MapNumber) != FALSE) //Season2.5 add-on Illusion

  00009	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  0000c	d9 55 fc	 fst	 DWORD PTR _iAttackRate$[ebp]
  0000f	8a 86 49 01 00
	00		 mov	 al, BYTE PTR [esi+329]
  00015	d9 55 f8	 fst	 DWORD PTR _iDefenseRate$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001c	3c 2d		 cmp	 al, 45			; 0000002dH
  0001e	0f 82 97 00 00
	00		 jb	 $LN45@MissCheckP
  00024	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00029	3a c8		 cmp	 cl, al
  0002b	1b c9		 sbb	 ecx, ecx
  0002d	41		 inc	 ecx
  0002e	0f 84 87 00 00
	00		 je	 $LN45@MissCheckP

; 696  : 	{
; 697  : 		if(g_IllusionTempleEvent.GetState(lpTargetObj->MapNumber) == 2)

  00034	50		 push	 eax
  00035	dd d8		 fstp	 ST(0)
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  0003c	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  00041	3c 02		 cmp	 al, 2
  00043	75 74		 jne	 SHORT $LN54@MissCheckP

; 698  : 		{
; 699  : 			if ( lpTargetObj->Type == OBJ_USER )

  00045	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0004a	75 3f		 jne	 SHORT $LN46@MissCheckP

; 700  : 			{
; 701  : 				if(g_IllusionTempleEvent.GetShieldSpellStatus(lpTargetObj->m_iIllusionTempleIndex, lpTargetObj->MapNumber) != FALSE)

  0004c	0f b6 96 49 01
	00 00		 movzx	 edx, BYTE PTR [esi+329]
  00053	8b 86 78 20 00
	00		 mov	 eax, DWORD PTR [esi+8312]
  00059	52		 push	 edx
  0005a	50		 push	 eax
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTempleEvent@@3VCIllusionTempleEvent@@A ; g_IllusionTempleEvent
  00060	e8 00 00 00 00	 call	 ?GetShieldSpellStatus@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::GetShieldSpellStatus
  00065	85 c0		 test	 eax, eax
  00067	74 22		 je	 SHORT $LN46@MissCheckP

; 702  : 				{
; 703  : 					GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	6a 00		 push	 0
  0006d	6a 00		 push	 0
  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	8b d7		 mov	 edx, edi
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	5f		 pop	 edi

; 704  : 					return FALSE;

  00082	33 c0		 xor	 eax, eax
  00084	5e		 pop	 esi

; 909  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 1c 00	 ret	 28			; 0000001cH
$LN46@MissCheckP:

; 705  : 				}	
; 706  : 			}
; 707  : 			if(lpObj->PartyNumber == lpTargetObj->PartyNumber)

  0008b	8b 8f 2c 04 00
	00		 mov	 ecx, DWORD PTR [edi+1068]
  00091	3b 8e 2c 04 00
	00		 cmp	 ecx, DWORD PTR [esi+1068]
  00097	75 20		 jne	 SHORT $LN54@MissCheckP

; 708  : 			{
; 709  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  00099	8b 16		 mov	 edx, DWORD PTR [esi]
  0009b	8b 07		 mov	 eax, DWORD PTR [edi]
  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	52		 push	 edx
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  000ac	83 c4 18	 add	 esp, 24			; 00000018H
  000af	5f		 pop	 edi

; 710  : 				return FALSE;

  000b0	33 c0		 xor	 eax, eax
  000b2	5e		 pop	 esi

; 909  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 1c 00	 ret	 28			; 0000001cH
$LN54@MissCheckP:

; 705  : 				}	
; 706  : 			}
; 707  : 			if(lpObj->PartyNumber == lpTargetObj->PartyNumber)

  000b9	d9 ee		 fldz
$LN45@MissCheckP:

; 711  : 			}
; 712  : 		}
; 713  : 	}
; 714  : 
; 715  : 	int iBaseLevel = lpObj->Level + lpObj->MLevel;

  000bb	0f b7 87 be 00
	00 00		 movzx	 eax, WORD PTR [edi+190]
  000c2	53		 push	 ebx
  000c3	0f bf 9f d0 00
	00 00		 movsx	 ebx, WORD PTR [edi+208]
  000ca	0f bf c8	 movsx	 ecx, ax

; 716  : 
; 717  : 	//if( Class == CLASS_WIZARD || Class == CLASS_DARKLORD )
; 718  : 	//{
; 719  : 	//	AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1 + lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2);
; 720  : 	//}
; 721  : 	//else if( Class == CLASS_KNIGHT || Class == CLASS_ELF || Class == CLASS_MAGUMSA || Class == CLASS_SUMMONER )
; 722  : 	//{
; 723  : 	//	AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1  + (lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2) / this->m_Data[Class].PvPAttackRateDiv);
; 724  : 	//}
; 725  : 	//else if( Class == CLASS_FIGHTER )
; 726  : 	//{
; 727  : 	//	AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1RF + (lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2) / this->m_Data[Class].PvPAttackRateDiv);
; 728  : 	//}
; 729  : 
; 730  : 	if ( lpObj->Class == CLASS_KNIGHT )

  000cd	0f b7 87 b8 00
	00 00		 movzx	 eax, WORD PTR [edi+184]
  000d4	03 d9		 add	 ebx, ecx
  000d6	83 f8 01	 cmp	 eax, 1
  000d9	75 2b		 jne	 SHORT $LN44@MissCheckP

; 731  : 	{
; 732  : 		iAttackRate = (float)(iBaseLevel * ZtConfig.Character.DKPvPAttackRateFact1 + ( lpObj->Dexterity * ZtConfig.Character.DKPvPAttackRateFact2) / ZtConfig.Character.DKPvPAttackRateDiv);	// #formula

  000db	0f b7 87 f6 00
	00 00		 movzx	 eax, WORD PTR [edi+246]
  000e2	0f af 05 c8 02
	00 00		 imul	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+712
  000e9	99		 cdq
  000ea	f7 3d cc 02 00
	00		 idiv	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+716
  000f0	8b 15 c4 02 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+708
  000f6	0f af d3	 imul	 edx, ebx
  000f9	03 c2		 add	 eax, edx
  000fb	89 45 08	 mov	 DWORD PTR tv713[ebp], eax
  000fe	db 45 08	 fild	 DWORD PTR tv713[ebp]
  00101	e9 03 01 00 00	 jmp	 $LN115@MissCheckP
$LN44@MissCheckP:

; 733  : 	}
; 734  : 	else if ( lpObj->Class == CLASS_DARKLORD )

  00106	83 f8 04	 cmp	 eax, 4
  00109	75 24		 jne	 SHORT $LN42@MissCheckP

; 735  : 	{
; 736  : 		iAttackRate = (float)(iBaseLevel * ZtConfig.Character.DLPvPAttackRateFact1 + ( lpObj->Dexterity * ZtConfig.Character.DLPvPAttackRateFact2 ));	// #formula

  0010b	0f b7 87 f6 00
	00 00		 movzx	 eax, WORD PTR [edi+246]
  00112	8b 0d f0 02 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+752
  00118	0f af 05 f4 02
	00 00		 imul	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+756
  0011f	0f af cb	 imul	 ecx, ebx
  00122	03 c1		 add	 eax, ecx
  00124	89 45 08	 mov	 DWORD PTR tv711[ebp], eax
  00127	db 45 08	 fild	 DWORD PTR tv711[ebp]
  0012a	e9 da 00 00 00	 jmp	 $LN115@MissCheckP
$LN42@MissCheckP:

; 737  : 	}
; 738  : 	else if ( lpObj->Class == CLASS_ELF )

  0012f	83 f8 02	 cmp	 eax, 2
  00132	75 2b		 jne	 SHORT $LN40@MissCheckP

; 739  : 	{
; 740  : 		iAttackRate = (float)(iBaseLevel * ZtConfig.Character.EEPvPAttackRateFact1 + ( lpObj->Dexterity * ZtConfig.Character.EEPvPAttackRateFact2 ) / ZtConfig.Character.EEPvPAttackRateDiv);	// #formula

  00134	0f b7 87 f6 00
	00 00		 movzx	 eax, WORD PTR [edi+246]
  0013b	0f af 05 dc 02
	00 00		 imul	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+732
  00142	99		 cdq
  00143	f7 3d e0 02 00
	00		 idiv	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+736
  00149	8b 15 d8 02 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+728
  0014f	0f af d3	 imul	 edx, ebx
  00152	03 c2		 add	 eax, edx
  00154	89 45 08	 mov	 DWORD PTR tv705[ebp], eax
  00157	db 45 08	 fild	 DWORD PTR tv705[ebp]
  0015a	e9 aa 00 00 00	 jmp	 $LN115@MissCheckP
$LN40@MissCheckP:

; 741  : 	}
; 742  : 	else if ( lpObj->Class == CLASS_MAGUMSA )

  0015f	83 f8 03	 cmp	 eax, 3
  00162	75 28		 jne	 SHORT $LN38@MissCheckP

; 743  : 	{
; 744  : 		iAttackRate = (float)(iBaseLevel * ZtConfig.Character.MGPvPAttackRateFact1 + ( lpObj->Dexterity * ZtConfig.Character.MGPvPAttackRateFact2 ) / ZtConfig.Character.MGPvPAttackRateDiv);	// #formula

  00164	0f b7 87 f6 00
	00 00		 movzx	 eax, WORD PTR [edi+246]
  0016b	0f af 05 e8 02
	00 00		 imul	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+744
  00172	99		 cdq
  00173	f7 3d ec 02 00
	00		 idiv	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+748
  00179	8b 0d e4 02 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+740
  0017f	0f af cb	 imul	 ecx, ebx
  00182	03 c1		 add	 eax, ecx
  00184	89 45 08	 mov	 DWORD PTR tv699[ebp], eax
  00187	db 45 08	 fild	 DWORD PTR tv699[ebp]
  0018a	eb 7d		 jmp	 SHORT $LN115@MissCheckP
$LN38@MissCheckP:

; 745  : 	}
; 746  : 	else if ( lpObj->Class == CLASS_WIZARD )

  0018c	66 85 c0	 test	 ax, ax
  0018f	75 20		 jne	 SHORT $LN36@MissCheckP

; 747  : 	{
; 748  : 		iAttackRate = (float)(iBaseLevel * ZtConfig.Character.DWPvPAttackRateFact1 + ( lpObj->Dexterity * ZtConfig.Character.DWPvPAttackRateFact2 ));	// #formula

  00191	0f b7 97 f6 00
	00 00		 movzx	 edx, WORD PTR [edi+246]
  00198	a1 d0 02 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+720
  0019d	0f af 15 d4 02
	00 00		 imul	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+724
  001a4	0f af c3	 imul	 eax, ebx
  001a7	03 d0		 add	 edx, eax
  001a9	89 55 08	 mov	 DWORD PTR tv697[ebp], edx
  001ac	db 45 08	 fild	 DWORD PTR tv697[ebp]
  001af	eb 58		 jmp	 SHORT $LN115@MissCheckP
$LN36@MissCheckP:

; 749  : 	}
; 750  : 	else if ( lpObj->Class == CLASS_SUMMONER )

  001b1	83 f8 05	 cmp	 eax, 5
  001b4	75 28		 jne	 SHORT $LN34@MissCheckP

; 751  : 	{
; 752  : 		iAttackRate = (float)(iBaseLevel * ZtConfig.Character.SUPvPAttackRateFact1 + ( lpObj->Dexterity * ZtConfig.Character.SUPvPAttackRateFact2 ) / ZtConfig.Character.SUPvPAttackRateDiv);	// #formula

  001b6	0f b7 87 f6 00
	00 00		 movzx	 eax, WORD PTR [edi+246]
  001bd	0f af 05 fc 02
	00 00		 imul	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+764
  001c4	99		 cdq
  001c5	f7 3d 00 03 00
	00		 idiv	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+768
  001cb	8b 0d f8 02 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+760
  001d1	0f af cb	 imul	 ecx, ebx
  001d4	03 c1		 add	 eax, ecx
  001d6	89 45 08	 mov	 DWORD PTR tv691[ebp], eax
  001d9	db 45 08	 fild	 DWORD PTR tv691[ebp]
  001dc	eb 2b		 jmp	 SHORT $LN115@MissCheckP
$LN34@MissCheckP:

; 753  : 	}
; 754  : 	else if( lpObj->Class == CLASS_MONK )

  001de	83 f8 06	 cmp	 eax, 6
  001e1	75 29		 jne	 SHORT $LN32@MissCheckP

; 755  : 	{
; 756  : 		iAttackRate = (float)(iBaseLevel * ZtConfig.Character.RFPvPAttackRateFact1 + ( lpObj->Dexterity * ZtConfig.Character.RFPvPAttackRateFact2 ) / ZtConfig.Character.RFPvPAttackRateDiv);

  001e3	0f b7 87 f6 00
	00 00		 movzx	 eax, WORD PTR [edi+246]
  001ea	0f af 05 08 03
	00 00		 imul	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+776
  001f1	99		 cdq
  001f2	f7 3d 0c 03 00
	00		 idiv	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+780
  001f8	8b 15 04 03 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+772
  001fe	0f af d3	 imul	 edx, ebx
  00201	03 c2		 add	 eax, edx
  00203	89 45 08	 mov	 DWORD PTR tv685[ebp], eax
  00206	db 45 08	 fild	 DWORD PTR tv685[ebp]
$LN115@MissCheckP:
  00209	d9 5d fc	 fstp	 DWORD PTR _iAttackRate$[ebp]
$LN32@MissCheckP:

; 757  : 	}
; 758  : 
; 759  : 	//if ( lpObj->Class == CLASS_KNIGHT )
; 760  : 	//{
; 761  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 45) / 10);	// #formula
; 762  : 	//}
; 763  : 	//else if ( lpObj->Class == CLASS_DARKLORD )
; 764  : 	//{
; 765  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 4 ));	// #formula
; 766  : 	//}
; 767  : 	//else if ( lpObj->Class == CLASS_ELF )
; 768  : 	//{
; 769  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 6 ) / 10);	// #formula
; 770  : 	//}
; 771  : 	//else if ( lpObj->Class == CLASS_MAGUMSA )
; 772  : 	//{
; 773  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 35 ) / 10);	// #formula
; 774  : 	//}
; 775  : 	//else if ( lpObj->Class == CLASS_WIZARD )
; 776  : 	//{
; 777  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 4 ));	// #formula
; 778  : 	//}
; 779  : 	//else if ( lpObj->Class == CLASS_SUMMONER )
; 780  : 	//{
; 781  : 	//	iAttackRate = (float)(iBaseLevel * 3 + ( lpObj->Dexterity * 35 ) / 10);	// #formula
; 782  : 	//}
; 783  : 	//else if( lpObj->Class == CLASS_MONK )
; 784  : 	//{
; 785  : 	//	iAttackRate = (float)(iBaseLevel * 2.6f + ( lpObj->Dexterity * 36 ) / 10);
; 786  : 	//}
; 787  : 
; 788  : 
; 789  : 
; 790  : 	int iTargetBaseLevel = lpTargetObj->Level + lpTargetObj->MLevel;

  0020c	0f b7 86 be 00
	00 00		 movzx	 eax, WORD PTR [esi+190]
  00213	0f bf 8e d0 00
	00 00		 movsx	 ecx, WORD PTR [esi+208]
  0021a	98		 cwde
  0021b	03 c8		 add	 ecx, eax

; 791  : 
; 792  : 	if ( lpTargetObj->Class == CLASS_KNIGHT )

  0021d	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00224	89 4d 0c	 mov	 DWORD PTR _iTargetBaseLevel$[ebp], ecx
  00227	83 f8 01	 cmp	 eax, 1
  0022a	75 17		 jne	 SHORT $LN31@MissCheckP

; 793  : 	{
; 794  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula

  0022c	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  00233	d1 ea		 shr	 edx, 1
  00235	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00238	89 45 08	 mov	 DWORD PTR tv684[ebp], eax
  0023b	db 45 08	 fild	 DWORD PTR tv684[ebp]
  0023e	e9 be 00 00 00	 jmp	 $LN116@MissCheckP
$LN31@MissCheckP:

; 795  : 	}
; 796  : 	else if ( lpTargetObj->Class == CLASS_DARKLORD )

  00243	83 f8 04	 cmp	 eax, 4
  00246	75 17		 jne	 SHORT $LN29@MissCheckP

; 797  : 	{
; 798  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula

  00248	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  0024f	d1 ea		 shr	 edx, 1
  00251	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00254	89 45 08	 mov	 DWORD PTR tv683[ebp], eax
  00257	db 45 08	 fild	 DWORD PTR tv683[ebp]
  0025a	e9 a2 00 00 00	 jmp	 $LN116@MissCheckP
$LN29@MissCheckP:

; 799  : 	}
; 800  : 	else if ( lpTargetObj->Class == CLASS_ELF )

  0025f	83 f8 02	 cmp	 eax, 2
  00262	75 23		 jne	 SHORT $LN27@MissCheckP

; 801  : 	{
; 802  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 10);	// #formula

  00264	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  0026b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00270	f7 ea		 imul	 edx
  00272	c1 fa 02	 sar	 edx, 2
  00275	8b c2		 mov	 eax, edx
  00277	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0027a	03 c2		 add	 eax, edx
  0027c	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0027f	89 55 08	 mov	 DWORD PTR tv679[ebp], edx
  00282	db 45 08	 fild	 DWORD PTR tv679[ebp]
  00285	eb 7a		 jmp	 SHORT $LN116@MissCheckP
$LN27@MissCheckP:

; 803  : 	}
; 804  : 	else if ( lpTargetObj->Class == CLASS_MAGUMSA )

  00287	83 f8 03	 cmp	 eax, 3
  0028a	75 15		 jne	 SHORT $LN25@MissCheckP

; 805  : 	{
; 806  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 4);	// #formula

  0028c	0f b7 86 f6 00
	00 00		 movzx	 eax, WORD PTR [esi+246]
  00293	c1 e8 02	 shr	 eax, 2
  00296	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00299	89 55 08	 mov	 DWORD PTR tv678[ebp], edx
  0029c	db 45 08	 fild	 DWORD PTR tv678[ebp]
  0029f	eb 60		 jmp	 SHORT $LN116@MissCheckP
$LN25@MissCheckP:

; 807  : 	}
; 808  : 	else if ( lpTargetObj->Class == CLASS_WIZARD )

  002a1	66 85 c0	 test	 ax, ax
  002a4	75 15		 jne	 SHORT $LN23@MissCheckP

; 809  : 	{
; 810  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 4);	// #formula

  002a6	0f b7 86 f6 00
	00 00		 movzx	 eax, WORD PTR [esi+246]
  002ad	c1 e8 02	 shr	 eax, 2
  002b0	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  002b3	89 55 08	 mov	 DWORD PTR tv677[ebp], edx
  002b6	db 45 08	 fild	 DWORD PTR tv677[ebp]
  002b9	eb 46		 jmp	 SHORT $LN116@MissCheckP
$LN23@MissCheckP:

; 811  : 	}
; 812  : 	else if ( lpTargetObj->Class == CLASS_SUMMONER )

  002bb	83 f8 05	 cmp	 eax, 5
  002be	75 14		 jne	 SHORT $LN21@MissCheckP

; 813  : 	{
; 814  : 		iDefenseRate = (float)(iTargetBaseLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula

  002c0	0f b7 86 f6 00
	00 00		 movzx	 eax, WORD PTR [esi+246]
  002c7	d1 e8		 shr	 eax, 1
  002c9	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  002cc	89 55 08	 mov	 DWORD PTR tv676[ebp], edx
  002cf	db 45 08	 fild	 DWORD PTR tv676[ebp]
  002d2	eb 2d		 jmp	 SHORT $LN116@MissCheckP
$LN21@MissCheckP:

; 815  : 	}
; 816  : 	else if( lpTargetObj->Class == CLASS_MONK )

  002d4	83 f8 06	 cmp	 eax, 6
  002d7	75 2b		 jne	 SHORT $LN19@MissCheckP

; 817  : 	{
; 818  : 		iDefenseRate = (iTargetBaseLevel * 1.5f) + lpTargetObj->Dexterity / 5;

  002d9	0f b7 96 f6 00
	00 00		 movzx	 edx, WORD PTR [esi+246]
  002e0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  002e5	f7 ea		 imul	 edx
  002e7	d1 fa		 sar	 edx, 1
  002e9	8b c2		 mov	 eax, edx
  002eb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ee	03 c2		 add	 eax, edx
  002f0	89 45 08	 mov	 DWORD PTR tv672[ebp], eax
  002f3	db 45 08	 fild	 DWORD PTR tv672[ebp]
  002f6	db 45 0c	 fild	 DWORD PTR _iTargetBaseLevel$[ebp]
  002f9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff8000000000000
  002ff	de c1		 faddp	 ST(1), ST(0)
$LN116@MissCheckP:
  00301	d9 5d f8	 fstp	 DWORD PTR _iDefenseRate$[ebp]
$LN19@MissCheckP:

; 819  : 	}
; 820  : 	if ( iAttackRate <= 0.0f || iDefenseRate <= 0.0f || lpObj->Level <= 0 || lpTargetObj->Level <= 0 )

  00304	d9 45 fc	 fld	 DWORD PTR _iAttackRate$[ebp]
  00307	d8 d1		 fcom	 ST(1)
  00309	df e0		 fnstsw	 ax
  0030b	f6 c4 41	 test	 ah, 65			; 00000041H
  0030e	0f 8b 89 01 00
	00		 jnp	 $LN70@MissCheckP
  00314	d9 45 f8	 fld	 DWORD PTR _iDefenseRate$[ebp]
  00317	d8 d2		 fcom	 ST(2)
  00319	df e0		 fnstsw	 ax
  0031b	dd da		 fstp	 ST(2)
  0031d	f6 c4 41	 test	 ah, 65			; 00000041H
  00320	0f 8b 86 01 00
	00		 jnp	 $LN79@MissCheckP
  00326	0f b7 87 be 00
	00 00		 movzx	 eax, WORD PTR [edi+190]
  0032d	66 85 c0	 test	 ax, ax
  00330	0f 8e 76 01 00
	00		 jle	 $LN79@MissCheckP
  00336	0f b7 86 be 00
	00 00		 movzx	 eax, WORD PTR [esi+190]
  0033d	66 85 c0	 test	 ax, ax
  00340	0f 8e 66 01 00
	00		 jle	 $LN79@MissCheckP

; 823  : 	}
; 824  : 
; 825  : 	iAttackRate += lpObj->m_ItemOptionExFor380.OpAddAttackSuccessRatePVP;
; 826  : 	iDefenseRate += lpTargetObj->m_ItemOptionExFor380.OpAddDefenseSuccessRatePvP;
; 827  : 
; 828  : 	iAttackRate += lpObj->m_JewelOfHarmonyEffect.HJOpAddAttackSuccessRatePVP;
; 829  : 	iDefenseRate += lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddDefenseSuccessRatePvP;
; 830  : 
; 831  : 	iAttackRate		+= lpObj->m_MPSkillOpt.MpsPVPAttackDmgRate;

  00346	0f bf 97 fe 1f
	00 00		 movsx	 edx, WORD PTR [edi+8190]
  0034d	0f bf 87 e6 1f
	00 00		 movsx	 eax, WORD PTR [edi+8166]
  00354	89 55 08	 mov	 DWORD PTR tv657[ebp], edx

; 832  : 	iDefenseRate	+= lpTargetObj->m_MPSkillOpt.MpsPVPBlockingRate;
; 833  : 
; 834  : 	if(g_ZtLicense.user.Rage)
; 835  : 	{
; 836  : 		//LogAddC(2,"lpObj->m_Index: %d",lpObj->m_Index);
; 837  : 		//gSystemOfRage.AttackDefenceRate(lpObj->m_Index,lpTargetObj->m_Index, iAttackRate, iDefenseRate);
; 838  : 	}
; 839  : 
; 840  : 
; 841  : 	float iExpressionA = ( iAttackRate * 10000.0f ) / ( iAttackRate + iDefenseRate );
; 842  : 	float iExpressionB = (float)(( iBaseLevel * 10000 ) / ( iBaseLevel + iTargetBaseLevel ));
; 843  : 
; 844  : 	iExpressionA /= 10000.0f;
; 845  : 	iExpressionB /= 10000.0f;
; 846  : 
; 847  : 	iAttackSuccessRate = (int)(100.0f * iExpressionA * g_fSuccessAttackRateOption * iExpressionB);

  00357	0f bf 96 02 20
	00 00		 movsx	 edx, WORD PTR [esi+8194]
  0035e	db 45 08	 fild	 DWORD PTR tv657[ebp]
  00361	03 cb		 add	 ecx, ebx
  00363	de c1		 faddp	 ST(1), ST(0)
  00365	d9 5d 08	 fstp	 DWORD PTR tv656[ebp]
  00368	d9 45 08	 fld	 DWORD PTR tv656[ebp]
  0036b	89 45 08	 mov	 DWORD PTR tv653[ebp], eax
  0036e	db 45 08	 fild	 DWORD PTR tv653[ebp]
  00371	0f bf 86 f8 1f
	00 00		 movsx	 eax, WORD PTR [esi+8184]
  00378	de c1		 faddp	 ST(1), ST(0)
  0037a	d9 5d 08	 fstp	 DWORD PTR tv652[ebp]
  0037d	d9 45 08	 fld	 DWORD PTR tv652[ebp]
  00380	89 55 08	 mov	 DWORD PTR tv647[ebp], edx
  00383	d8 87 3c 26 00
	00		 fadd	 DWORD PTR [edi+9788]
  00389	d9 5d fc	 fstp	 DWORD PTR _iAttackRate$[ebp]
  0038c	d9 45 fc	 fld	 DWORD PTR _iAttackRate$[ebp]
  0038f	d9 c0		 fld	 ST(0)
  00391	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@40c3880000000000
  00397	dc c9		 fmul	 ST(1), ST(0)
  00399	db 45 08	 fild	 DWORD PTR tv647[ebp]
  0039c	de c4		 faddp	 ST(4), ST(0)
  0039e	d9 cb		 fxch	 ST(3)
  003a0	d9 5d 08	 fstp	 DWORD PTR tv646[ebp]
  003a3	d9 45 08	 fld	 DWORD PTR tv646[ebp]
  003a6	89 45 08	 mov	 DWORD PTR tv643[ebp], eax
  003a9	db 45 08	 fild	 DWORD PTR tv643[ebp]
  003ac	8b c3		 mov	 eax, ebx
  003ae	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  003b4	de c1		 faddp	 ST(1), ST(0)
  003b6	d9 5d 08	 fstp	 DWORD PTR tv642[ebp]
  003b9	d9 45 08	 fld	 DWORD PTR tv642[ebp]
  003bc	d8 86 40 26 00
	00		 fadd	 DWORD PTR [esi+9792]
  003c2	99		 cdq
  003c3	d9 5d 08	 fstp	 DWORD PTR tv639[ebp]
  003c6	f7 f9		 idiv	 ecx
  003c8	d9 45 08	 fld	 DWORD PTR tv639[ebp]
  003cb	de c2		 faddp	 ST(2), ST(0)
  003cd	de f1		 fdivrp	 ST(1), ST(0)
  003cf	d9 5d 08	 fstp	 DWORD PTR tv635[ebp]
  003d2	d9 45 08	 fld	 DWORD PTR tv635[ebp]
  003d5	d8 f1		 fdiv	 ST(0), ST(1)
  003d7	d9 5d 08	 fstp	 DWORD PTR tv632[ebp]
  003da	d9 45 08	 fld	 DWORD PTR tv632[ebp]
  003dd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  003e3	89 45 08	 mov	 DWORD PTR tv624[ebp], eax
  003e6	d8 0d 00 00 00
	00		 fmul	 DWORD PTR ?g_fSuccessAttackRateOption@@3MA ; g_fSuccessAttackRateOption
  003ec	db 45 08	 fild	 DWORD PTR tv624[ebp]
  003ef	de f2		 fdivrp	 ST(2), ST(0)
  003f1	d9 c9		 fxch	 ST(1)
  003f3	d9 5d 08	 fstp	 DWORD PTR tv621[ebp]
  003f6	d8 4d 08	 fmul	 DWORD PTR tv621[ebp]
  003f9	e8 00 00 00 00	 call	 __ftol2_sse
  003fe	89 45 08	 mov	 DWORD PTR _iAttackSuccessRate$[ebp], eax

; 848  : 
; 849  : 	if ( (iTargetBaseLevel - iBaseLevel) >= 100 )

  00401	8b 45 0c	 mov	 eax, DWORD PTR _iTargetBaseLevel$[ebp]
  00404	2b c3		 sub	 eax, ebx
  00406	83 f8 64	 cmp	 eax, 100		; 00000064H
  00409	7c 06		 jl	 SHORT $LN15@MissCheckP

; 850  : 	{
; 851  : 		iAttackSuccessRate -= 5;

  0040b	83 6d 08 05	 sub	 DWORD PTR _iAttackSuccessRate$[ebp], 5
  0040f	eb 18		 jmp	 SHORT $LN11@MissCheckP
$LN15@MissCheckP:

; 852  : 	}
; 853  : 	else if ( (iTargetBaseLevel - iBaseLevel) >= 200 )

  00411	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00416	7c 06		 jl	 SHORT $LN13@MissCheckP

; 854  : 	{
; 855  : 		iAttackSuccessRate -= 10;

  00418	83 6d 08 0a	 sub	 DWORD PTR _iAttackSuccessRate$[ebp], 10 ; 0000000aH
  0041c	eb 0b		 jmp	 SHORT $LN11@MissCheckP
$LN13@MissCheckP:

; 856  : 	}
; 857  : 	else if ( (iTargetBaseLevel - iBaseLevel) >= 300 )

  0041e	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00423	7c 04		 jl	 SHORT $LN11@MissCheckP

; 858  : 	{
; 859  : 		iAttackSuccessRate -= 15;

  00425	83 6d 08 0f	 sub	 DWORD PTR _iAttackSuccessRate$[ebp], 15 ; 0000000fH
$LN11@MissCheckP:

; 860  : 	}
; 861  : 
; 862  : 	DWORD dwRate = rand() % 100;

  00429	e8 00 00 00 00	 call	 _rand
  0042e	99		 cdq
  0042f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00434	f7 f9		 idiv	 ecx

; 863  : 
; 864  : 	if ( dwRate > iAttackSuccessRate )

  00436	3b 55 08	 cmp	 edx, DWORD PTR _iAttackSuccessRate$[ebp]
  00439	76 54		 jbe	 SHORT $LN10@MissCheckP

; 865  : 	{
; 866  : 		int MsgDamage = 0;	//1.01.00 update
; 867  : 		// ----
; 868  : 		if( lpObj->Class == CLASS_MONK && byBarrageCount )
; 869  : 		{
; 870  : 			if( skill != 261 && skill != 263 )
; 871  : 			{
; 872  : 				if( byBarrageCount % 4 )
; 873  : 				{
; 874  : 					MsgDamage |= 0x10;
; 875  : 				}
; 876  : 				else
; 877  : 				{
; 878  : 					MsgDamage |= 0x20;
; 879  : 				}
; 880  : 			}
; 881  : 			else
; 882  : 			{
; 883  : 				if( byBarrageCount % 2 )
; 884  : 				{
; 885  : 					MsgDamage |= 0x10;
; 886  : 				}
; 887  : 				else
; 888  : 				{
; 889  : 					MsgDamage |= 0x20;
; 890  : 				}
; 891  : 			}
; 892  : 		}
; 893  : 
; 894  : 		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  0043b	8b 16		 mov	 edx, DWORD PTR [esi]
  0043d	8b 07		 mov	 eax, DWORD PTR [edi]
  0043f	6a 00		 push	 0
  00441	6a 00		 push	 0
  00443	6a 00		 push	 0
  00445	6a 00		 push	 0
  00447	52		 push	 edx
  00448	50		 push	 eax
  00449	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0044e	83 c4 18	 add	 esp, 24			; 00000018H

; 895  : 
; 896  : 		if ( g_bShieldComboMissOptionOn == TRUE )

  00451	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_bShieldComboMissOptionOn@@3HA, 1 ; g_bShieldComboMissOptionOn
  00458	75 56		 jne	 SHORT $LN17@MissCheckP

; 897  : 		{
; 898  : 			if ( lpObj->comboSkill.ProgressIndex >= 0 )

  0045a	83 bf b4 00 00
	00 00		 cmp	 DWORD PTR [edi+180], 0
  00461	7c 4d		 jl	 SHORT $LN17@MissCheckP

; 899  : 			{
; 900  : 				LogAddTD("[Shield] ComboSkill Cancel! [%s][%s]", lpObj->AccountID, lpObj->Name);

  00463	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  00466	51		 push	 ecx
  00467	8d 57 6c	 lea	 edx, DWORD PTR [edi+108]
  0046a	52		 push	 edx
  0046b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@
  00470	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00476	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  : 				lpObj->comboSkill.Init();

  00479	8d 8f a8 00 00
	00		 lea	 ecx, DWORD PTR [edi+168]
  0047f	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
  00484	5b		 pop	 ebx
  00485	5f		 pop	 edi
  00486	33 c0		 xor	 eax, eax
  00488	5e		 pop	 esi

; 909  : }

  00489	8b e5		 mov	 esp, ebp
  0048b	5d		 pop	 ebp
  0048c	c2 1c 00	 ret	 28			; 0000001cH
$LN10@MissCheckP:
  0048f	5b		 pop	 ebx
  00490	5f		 pop	 edi

; 902  : 			}
; 903  : 		}
; 904  : 
; 905  : 		return FALSE;
; 906  : 	}
; 907  : 
; 908  : 	return TRUE;

  00491	b8 01 00 00 00	 mov	 eax, 1
  00496	5e		 pop	 esi

; 909  : }

  00497	8b e5		 mov	 esp, ebp
  00499	5d		 pop	 ebp
  0049a	c2 1c 00	 ret	 28			; 0000001cH
$LN70@MissCheckP:
  0049d	5b		 pop	 ebx

; 819  : 	}
; 820  : 	if ( iAttackRate <= 0.0f || iDefenseRate <= 0.0f || lpObj->Level <= 0 || lpTargetObj->Level <= 0 )

  0049e	dd d9		 fstp	 ST(1)
  004a0	5f		 pop	 edi
  004a1	dd d8		 fstp	 ST(0)

; 821  : 	{
; 822  : 		return FALSE;

  004a3	33 c0		 xor	 eax, eax
  004a5	5e		 pop	 esi

; 909  : }

  004a6	8b e5		 mov	 esp, ebp
  004a8	5d		 pop	 ebp
  004a9	c2 1c 00	 ret	 28			; 0000001cH
$LN79@MissCheckP:

; 819  : 	}
; 820  : 	if ( iAttackRate <= 0.0f || iDefenseRate <= 0.0f || lpObj->Level <= 0 || lpTargetObj->Level <= 0 )

  004ac	dd d8		 fstp	 ST(0)
  004ae	dd d8		 fstp	 ST(0)
$LN17@MissCheckP:

; 821  : 	{
; 822  : 		return FALSE;

  004b0	5b		 pop	 ebx
  004b1	5f		 pop	 edi
  004b2	33 c0		 xor	 eax, eax
  004b4	5e		 pop	 esi

; 909  : }

  004b5	8b e5		 mov	 esp, ebp
  004b7	5d		 pop	 ebp
  004b8	c2 1c 00	 ret	 28			; 0000001cH
?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ENDP ; CObjBaseAttack::MissCheckPvP
_TEXT	ENDS
PUBLIC	?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ; CObjBaseAttack::GetTargetDefense
; Function compile flags: /Ogtp
;	COMDAT ?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_MsgDamage$ = 16					; size = 4
?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z PROC ; CObjBaseAttack::GetTargetDefense, COMDAT
; _this$ = ecx

; 912  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b d9		 mov	 ebx, ecx

; 913  : 	if(g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2))

  00008	6a 30		 push	 48			; 00000030H
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00014	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001a	84 c0		 test	 al, al
  0001c	75 10		 jne	 SHORT $LN11@GetTargetD
  0001e	6a 31		 push	 49			; 00000031H
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00025	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0002a	84 c0		 test	 al, al
  0002c	74 21		 je	 SHORT $LN10@GetTargetD
$LN11@GetTargetD:

; 914  : 	{
; 915  : 		if(this->MagicDefenceCheck(lpObj, lpTargetObj))

  0002e	57		 push	 edi
  0002f	56		 push	 esi
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?MagicDefenceCheck@CObjBaseAttack@@QAE_NPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::MagicDefenceCheck
  00037	84 c0		 test	 al, al
  00039	74 14		 je	 SHORT $LN10@GetTargetD

; 916  : 		{
; 917  : 			return this->GetTargetMagicDefense(lpObj, lpTargetObj, MsgDamage);

  0003b	8b 45 10	 mov	 eax, DWORD PTR _MsgDamage$[ebp]
  0003e	50		 push	 eax
  0003f	57		 push	 edi
  00040	56		 push	 esi
  00041	8b cb		 mov	 ecx, ebx
  00043	e8 00 00 00 00	 call	 ?GetTargetMagicDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ; CObjBaseAttack::GetTargetMagicDefense
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 970  : }

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
$LN10@GetTargetD:

; 918  : 		}
; 919  : 	}
; 920  : 
; 921  : 	if (g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  0004f	6a 17		 push	 23			; 00000017H
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00056	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0005b	84 c0		 test	 al, al
  0005d	75 10		 jne	 SHORT $LN8@GetTargetD
  0005f	6a 24		 push	 36			; 00000024H
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00066	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0006b	84 c0		 test	 al, al
  0006d	74 21		 je	 SHORT $LN7@GetTargetD
$LN8@GetTargetD:

; 922  : 	{
; 923  : 		if(this->MagicDefenceCheck(lpObj, lpTargetObj))

  0006f	57		 push	 edi
  00070	56		 push	 esi
  00071	8b cb		 mov	 ecx, ebx
  00073	e8 00 00 00 00	 call	 ?MagicDefenceCheck@CObjBaseAttack@@QAE_NPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::MagicDefenceCheck
  00078	84 c0		 test	 al, al
  0007a	74 14		 je	 SHORT $LN7@GetTargetD

; 924  : 		{
; 925  : 			return this->GetTargetMagicDefense(lpObj, lpTargetObj, MsgDamage);

  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _MsgDamage$[ebp]
  0007f	51		 push	 ecx
  00080	57		 push	 edi
  00081	56		 push	 esi
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?GetTargetMagicDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ; CObjBaseAttack::GetTargetMagicDefense
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 970  : }

  0008c	5d		 pop	 ebp
  0008d	c2 0c 00	 ret	 12			; 0000000cH
$LN7@GetTargetD:

; 926  : 		}
; 927  : 	}
; 928  : 
; 929  : 	int targetdefense = lpTargetObj->m_Defense;

  00090	8b 9f 94 04 00
	00		 mov	 ebx, DWORD PTR [edi+1172]

; 930  : 
; 931  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0009f	75 14		 jne	 SHORT $LN6@GetTargetD
  000a1	66 39 47 68	 cmp	 WORD PTR [edi+104], ax
  000a5	75 0e		 jne	 SHORT $LN6@GetTargetD

; 932  : 	{
; 933  : 		targetdefense += lpTargetObj->m_ItemOptionExFor380.OpAddDefense / 2;

  000a7	0f bf 87 04 20
	00 00		 movsx	 eax, WORD PTR [edi+8196]
  000ae	99		 cdq
  000af	2b c2		 sub	 eax, edx
  000b1	d1 f8		 sar	 eax, 1
  000b3	03 d8		 add	 ebx, eax
$LN6@GetTargetD:

; 934  : 	}
; 935  : 
; 936  : 	int iSkillMagumReduceDefense = 0;
; 937  : 	iSkillMagumReduceDefense = gObjGetActiveEffect(lpTargetObj, ADD_OPTION_REDUCE_DEFENSE);

  000b5	6a 17		 push	 23			; 00000017H
  000b7	57		 push	 edi
  000b8	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect
  000bd	8b c8		 mov	 ecx, eax

; 938  : 	targetdefense -= (targetdefense * iSkillMagumReduceDefense)/100;

  000bf	0f af cb	 imul	 ecx, ebx
  000c2	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  000c7	f7 e9		 imul	 ecx
  000c9	c1 fa 05	 sar	 edx, 5
  000cc	8b c2		 mov	 eax, edx
  000ce	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d1	03 c2		 add	 eax, edx
  000d3	83 c4 08	 add	 esp, 8
  000d6	03 d8		 add	 ebx, eax

; 939  : 	
; 940  : 	if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementDefenseTime > 0 )

  000d8	83 be 24 1c 00
	00 00		 cmp	 DWORD PTR [esi+7204], 0
  000df	7e 0a		 jle	 SHORT $LN4@GetTargetD

; 941  : 	{
; 942  : 		targetdefense += lpObj->m_MonsterSkillElementInfo.m_iSkillElementDefense;

  000e1	03 9e 20 1c 00
	00		 add	 ebx, DWORD PTR [esi+7200]

; 943  : 
; 944  : 		if ( targetdefense <0 )

  000e7	79 02		 jns	 SHORT $LN4@GetTargetD

; 945  : 		{
; 946  : 			targetdefense = 0;

  000e9	33 db		 xor	 ebx, ebx
$LN4@GetTargetD:

; 947  : 		}
; 948  : 	}
; 949  : 
; 950  : 	int percentdamage = 0; //loc4
; 951  : 
; 952  : 	if ( lpObj->pInventory[7].IsItem() != FALSE )

  000eb	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  000f1	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  000f7	33 ff		 xor	 edi, edi
  000f9	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000fe	85 c0		 test	 eax, eax
  00100	74 26		 je	 SHORT $LN3@GetTargetD

; 953  : 	{
; 954  : 		percentdamage = lpObj->pInventory[7].IsWingOpGetOnePercentDamage();

  00102	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00108	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  0010e	e8 00 00 00 00	 call	 ?IsWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::IsWingOpGetOnePercentDamage

; 955  : 		percentdamage += lpObj->pInventory[7].IsThirdWingOpGetOnePercentDamage();

  00113	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00119	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  0011f	8b f8		 mov	 edi, eax
  00121	e8 00 00 00 00	 call	 ?IsThirdWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::IsThirdWingOpGetOnePercentDamage
  00126	03 f8		 add	 edi, eax
$LN3@GetTargetD:

; 956  : 	}
; 957  : 
; 958  : 	percentdamage += lpObj->SetOpIgnoreDefense;

  00128	0f b6 8e 3e 11
	00 00		 movzx	 ecx, BYTE PTR [esi+4414]
  0012f	03 f9		 add	 edi, ecx

; 959  : 
; 960  : 	if ( percentdamage != 0)

  00131	74 19		 je	 SHORT $LN1@GetTargetD

; 961  : 	{
; 962  : 		if ( (rand()%100) <= percentdamage)

  00133	e8 00 00 00 00	 call	 _rand
  00138	99		 cdq
  00139	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0013e	f7 f9		 idiv	 ecx
  00140	3b d7		 cmp	 edx, edi
  00142	7f 08		 jg	 SHORT $LN1@GetTargetD

; 963  : 		{
; 964  : 			targetdefense = 0;
; 965  : 			MsgDamage = 1;

  00144	8b 55 10	 mov	 edx, DWORD PTR _MsgDamage$[ebp]
  00147	33 db		 xor	 ebx, ebx
  00149	c6 02 01	 mov	 BYTE PTR [edx], 1
$LN1@GetTargetD:

; 966  : 		}
; 967  : 	}
; 968  : 
; 969  : 	return targetdefense;

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	8b c3		 mov	 eax, ebx
  00150	5b		 pop	 ebx

; 970  : }

  00151	5d		 pop	 ebp
  00152	c2 0c 00	 ret	 12			; 0000000cH
?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ENDP ; CObjBaseAttack::GetTargetDefense
_TEXT	ENDS
END
