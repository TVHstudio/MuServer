; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\PKClear.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_PKClear@@3VPKClear@@A			; g_PKClear
_BSS	SEGMENT
?g_PKClear@@3VPKClear@@A DB 028H DUP (?)		; g_PKClear
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@PKClear@@QAEXXZ				; PKClear::Init
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\pkclear.cpp
;	COMDAT ?Init@PKClear@@QAEXXZ
_TEXT	SEGMENT
?Init@PKClear@@QAEXXZ PROC				; PKClear::Init, COMDAT
; _this$ = ecx

; 16   : 	this->Enable = false;

  00000	33 c0		 xor	 eax, eax
  00002	88 01		 mov	 BYTE PTR [ecx], al

; 17   : 
; 18   : 	this->NPC_Class = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 19   : 	this->NPC_Map = 0;

  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 20   : 	this->NPC_X = 0;

  0000a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 21   : 	this->NPC_Y = 0;

  0000d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 22   : 
; 23   : 	this->ZenMoney = 0;

  00010	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 24   : 	this->JewelOfChaos = 0;
; 25   : 	this->JewelOfBless = 0;

  00013	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 26   : 	this->JewelOfChaos = 0;

  00016	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 27   : }

  00019	c3		 ret	 0
?Init@PKClear@@QAEXXZ ENDP				; PKClear::Init
_TEXT	ENDS
PUBLIC	??_C@_0M@BBLCIGAM@JewelOfSoul?$AA@		; `string'
PUBLIC	??_C@_0N@MFPMMMKE@JewelOfBless?$AA@		; `string'
PUBLIC	??_C@_0N@GBHOHEIC@JewelOfChaos?$AA@		; `string'
PUBLIC	??_C@_08HOLEALLE@ZenMoney?$AA@			; `string'
PUBLIC	??_C@_0L@HJIIIOON@ZenFormula?$AA@		; `string'
PUBLIC	??_C@_05MGEEICMI@NPC_Y?$AA@			; `string'
PUBLIC	??_C@_05NPFPLDIJ@NPC_X?$AA@			; `string'
PUBLIC	??_C@_07LJMEGBCH@NPC_Map?$AA@			; `string'
PUBLIC	??_C@_09JIOKDDGI@NPC_Class?$AA@			; `string'
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	?Read@PKClear@@QAEXPAD@Z			; PKClear::Read
EXTRN	?CheckAndFixMinNumber@@YAXAAHH@Z:PROC		; CheckAndFixMinNumber
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_0M@BBLCIGAM@JewelOfSoul?$AA@
CONST	SEGMENT
??_C@_0M@BBLCIGAM@JewelOfSoul?$AA@ DB 'JewelOfSoul', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MFPMMMKE@JewelOfBless?$AA@
CONST	SEGMENT
??_C@_0N@MFPMMMKE@JewelOfBless?$AA@ DB 'JewelOfBless', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GBHOHEIC@JewelOfChaos?$AA@
CONST	SEGMENT
??_C@_0N@GBHOHEIC@JewelOfChaos?$AA@ DB 'JewelOfChaos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOLEALLE@ZenMoney?$AA@
CONST	SEGMENT
??_C@_08HOLEALLE@ZenMoney?$AA@ DB 'ZenMoney', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HJIIIOON@ZenFormula?$AA@
CONST	SEGMENT
??_C@_0L@HJIIIOON@ZenFormula?$AA@ DB 'ZenFormula', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGEEICMI@NPC_Y?$AA@
CONST	SEGMENT
??_C@_05MGEEICMI@NPC_Y?$AA@ DB 'NPC_Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NPFPLDIJ@NPC_X?$AA@
CONST	SEGMENT
??_C@_05NPFPLDIJ@NPC_X?$AA@ DB 'NPC_X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJMEGBCH@NPC_Map?$AA@
CONST	SEGMENT
??_C@_07LJMEGBCH@NPC_Map?$AA@ DB 'NPC_Map', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JIOKDDGI@NPC_Class?$AA@
CONST	SEGMENT
??_C@_09JIOKDDGI@NPC_Class?$AA@ DB 'NPC_Class', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@PKClear@@QAEXPAD@Z
_TEXT	SEGMENT
tv208 = -8						; size = 4
tv206 = -4						; size = 4
tv204 = 8						; size = 4
_File$ = 8						; size = 4
?Read@PKClear@@QAEXPAD@Z PROC				; PKClear::Read, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 46   : 	this->Enable = GetPrivateProfileInt("ZtTeam", "Enable", 0, File);

  00007	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetPrivateProfileIntA@16
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]
  00012	57		 push	 edi
  00013	6a 00		 push	 0
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  0001f	8b f1		 mov	 esi, ecx
  00021	ff d3		 call	 ebx

; 47   : 
; 48   : 	this->NPC_Class = GetPrivateProfileInt("ZtTeam", "NPC_Class", 0, File);

  00023	57		 push	 edi
  00024	6a 00		 push	 0
  00026	85 c0		 test	 eax, eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_09JIOKDDGI@NPC_Class?$AA@
  0002d	0f 95 c0	 setne	 al
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00035	88 06		 mov	 BYTE PTR [esi], al
  00037	ff d3		 call	 ebx

; 49   : 	this->NPC_Map = GetPrivateProfileInt("ZtTeam", "NPC_Map", 0, File);

  00039	57		 push	 edi
  0003a	6a 00		 push	 0
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_07LJMEGBCH@NPC_Map?$AA@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00046	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00049	ff d3		 call	 ebx

; 50   : 	this->NPC_X = GetPrivateProfileInt("ZtTeam", "NPC_X", 0, File);

  0004b	57		 push	 edi
  0004c	6a 00		 push	 0
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_05NPFPLDIJ@NPC_X?$AA@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00058	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0005b	ff d3		 call	 ebx

; 51   : 	this->NPC_Y = GetPrivateProfileInt("ZtTeam", "NPC_Y", 0, File);

  0005d	57		 push	 edi
  0005e	6a 00		 push	 0
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_05MGEEICMI@NPC_Y?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  0006a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0006d	ff d3		 call	 ebx

; 52   : 
; 53   : 	this->ZenFormula = GetPrivateProfileInt("ZtTeam", "ZenFormula", 0, File);

  0006f	57		 push	 edi
  00070	6a 00		 push	 0
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HJIIIOON@ZenFormula?$AA@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  0007c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0007f	ff d3		 call	 ebx

; 54   : 
; 55   : 	this->ZenMoney = GetPrivateProfileInt("ZtTeam", "ZenMoney", 0, File);

  00081	57		 push	 edi
  00082	6a 00		 push	 0
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_08HOLEALLE@ZenMoney?$AA@
  00089	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00091	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00094	89 4d 08	 mov	 DWORD PTR tv204[ebp], ecx
  00097	ff d3		 call	 ebx
  00099	8b 55 08	 mov	 edx, DWORD PTR tv204[ebp]

; 56   : 	this->JewelOfChaos = GetPrivateProfileInt("ZtTeam", "JewelOfChaos", 0, File);

  0009c	57		 push	 edi
  0009d	6a 00		 push	 0
  0009f	89 02		 mov	 DWORD PTR [edx], eax
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GBHOHEIC@JewelOfChaos?$AA@
  000a6	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  000ae	89 45 fc	 mov	 DWORD PTR tv206[ebp], eax
  000b1	ff d3		 call	 ebx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR tv206[ebp]

; 57   : 	this->JewelOfBless = GetPrivateProfileInt("ZtTeam", "JewelOfBless", 0, File);

  000b6	57		 push	 edi
  000b7	6a 00		 push	 0
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MFPMMMKE@JewelOfBless?$AA@
  000be	8d 56 20	 lea	 edx, DWORD PTR [esi+32]
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  000c6	89 01		 mov	 DWORD PTR [ecx], eax
  000c8	89 55 f8	 mov	 DWORD PTR tv208[ebp], edx
  000cb	ff d3		 call	 ebx
  000cd	8b 4d f8	 mov	 ecx, DWORD PTR tv208[ebp]

; 58   : 	this->JewelOfSoul = GetPrivateProfileInt("ZtTeam", "JewelOfSoul", 0, File);

  000d0	57		 push	 edi
  000d1	6a 00		 push	 0
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BBLCIGAM@JewelOfSoul?$AA@
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  000dd	89 01		 mov	 DWORD PTR [ecx], eax
  000df	83 c6 24	 add	 esi, 36			; 00000024H
  000e2	ff d3		 call	 ebx

; 59   : 
; 60   : 	CheckAndFixMinNumber(ZenMoney, 0);

  000e4	8b 55 08	 mov	 edx, DWORD PTR tv204[ebp]
  000e7	6a 00		 push	 0
  000e9	89 06		 mov	 DWORD PTR [esi], eax
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 ?CheckAndFixMinNumber@@YAXAAHH@Z ; CheckAndFixMinNumber

; 61   : 	CheckAndFixMinNumber(JewelOfChaos, 0);

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv206[ebp]
  000f4	6a 00		 push	 0
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?CheckAndFixMinNumber@@YAXAAHH@Z ; CheckAndFixMinNumber

; 62   : 	CheckAndFixMinNumber(JewelOfBless, 0);

  000fc	8b 4d f8	 mov	 ecx, DWORD PTR tv208[ebp]
  000ff	6a 00		 push	 0
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 ?CheckAndFixMinNumber@@YAXAAHH@Z ; CheckAndFixMinNumber

; 63   : 	CheckAndFixMinNumber(JewelOfSoul, 0);

  00107	6a 00		 push	 0
  00109	56		 push	 esi
  0010a	e8 00 00 00 00	 call	 ?CheckAndFixMinNumber@@YAXAAHH@Z ; CheckAndFixMinNumber
  0010f	83 c4 20	 add	 esp, 32			; 00000020H
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx

; 64   : }

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?Read@PKClear@@QAEXPAD@Z ENDP				; PKClear::Read
_TEXT	ENDS
PUBLIC	?Check@PKClear@@QAE_NHAAH@Z			; PKClear::Check
EXTRN	?gObjGetItemCountInInventory@@YAHHHH@Z:PROC	; gObjGetItemCountInInventory
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?Check@PKClear@@QAE_NHAAH@Z
_TEXT	SEGMENT
_iBlessMoney$ = -12					; size = 4
_iSoulMoney$ = -8					; size = 4
_iPkLevel$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_iZen$ = 12						; size = 4
?Check@PKClear@@QAE_NHAAH@Z PROC			; PKClear::Check, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 97   : 	LPOBJ lpUser = &gObj[aIndex];

  00006	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00009	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0000f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	53		 push	 ebx

; 98   : 
; 99   : 	BYTE bResult = 1;
; 100  : 	int iPkLevel = lpUser->m_PK_Level;

  00016	0f be 90 3d 01
	00 00		 movsx	 edx, BYTE PTR [eax+317]
  0001d	89 55 fc	 mov	 DWORD PTR _iPkLevel$[ebp], edx

; 101  : 
; 102  : 	int iZenMoney = this->ZenMoney;
; 103  : 	int iChaosMoney = this->JewelOfChaos;
; 104  : 	int iBlessMoney = this->JewelOfBless;

  00020	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00023	56		 push	 esi
  00024	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00027	89 55 f4	 mov	 DWORD PTR _iBlessMoney$[ebp], edx

; 105  : 	int iSoulMoney = this->JewelOfSoul;

  0002a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0002d	57		 push	 edi
  0002e	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  00031	b3 01		 mov	 bl, 1
  00033	89 55 f8	 mov	 DWORD PTR _iSoulMoney$[ebp], edx

; 106  : 
; 107  : 	if(this->ZenMoney)

  00036	85 f6		 test	 esi, esi
  00038	74 16		 je	 SHORT $LN16@Check

; 108  : 	{
; 109  : 		if(this->ZenFormula == 0)

  0003a	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0

; 110  : 		{
; 111  : 			if(iPkLevel > 3)
; 112  : 			{
; 113  : 				iZenMoney = this->ZenMoney;
; 114  : 			}
; 115  : 		}
; 116  : 		else

  0003e	74 10		 je	 SHORT $LN16@Check

; 117  : 		{
; 118  : 			if(iPkLevel > 3)

  00040	83 7d fc 03	 cmp	 DWORD PTR _iPkLevel$[ebp], 3
  00044	7e 0a		 jle	 SHORT $LN16@Check

; 119  : 			{
; 120  : 				iZenMoney = this->ZenMoney * ( iPkLevel - 3 );

  00046	8b 75 fc	 mov	 esi, DWORD PTR _iPkLevel$[ebp]
  00049	83 c6 fd	 add	 esi, -3			; fffffffdH
  0004c	0f af 71 18	 imul	 esi, DWORD PTR [ecx+24]
$LN16@Check:

; 121  : 			}
; 122  : 		}
; 123  : 	}
; 124  : 
; 125  : 	if(iZenMoney > lpUser->Money)

  00050	3b b0 f0 00 00
	00		 cmp	 esi, DWORD PTR [eax+240]
  00056	7e 02		 jle	 SHORT $LN8@Check

; 126  : 	{
; 127  : 		bResult = 0;

  00058	32 db		 xor	 bl, bl
$LN8@Check:

; 128  : 	}
; 129  : 
; 130  : 	if(iChaosMoney > 0)

  0005a	85 ff		 test	 edi, edi
  0005c	7e 19		 jle	 SHORT $LN19@Check

; 131  : 	{
; 132  : 		if(gObjGetItemCountInInventory(aIndex, ITEMGET(12,15), 0) < iChaosMoney)

  0005e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00061	6a 00		 push	 0
  00063	68 0f 18 00 00	 push	 6159			; 0000180fH
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	3b c7		 cmp	 eax, edi
  00073	7d 02		 jge	 SHORT $LN19@Check

; 133  : 		{
; 134  : 			bResult = 0;

  00075	32 db		 xor	 bl, bl
$LN19@Check:

; 135  : 		}
; 136  : 	}
; 137  : 
; 138  : 	if(iBlessMoney > 0)

  00077	8b 7d f4	 mov	 edi, DWORD PTR _iBlessMoney$[ebp]
  0007a	85 ff		 test	 edi, edi
  0007c	7e 19		 jle	 SHORT $LN20@Check

; 139  : 	{
; 140  : 		if(gObjGetItemCountInInventory(aIndex, ITEMGET(14,13), 0) < iBlessMoney)

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00081	6a 00		 push	 0
  00083	68 0d 1c 00 00	 push	 7181			; 00001c0dH
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00091	3b c7		 cmp	 eax, edi
  00093	7d 02		 jge	 SHORT $LN20@Check

; 141  : 		{
; 142  : 			bResult = 0;

  00095	32 db		 xor	 bl, bl
$LN20@Check:

; 143  : 		}
; 144  : 	}
; 145  : 
; 146  : 	if(iSoulMoney > 0)

  00097	83 7d f8 00	 cmp	 DWORD PTR _iSoulMoney$[ebp], 0
  0009b	7e 1a		 jle	 SHORT $LN22@Check

; 147  : 	{
; 148  : 		if(gObjGetItemCountInInventory(aIndex, ITEMGET(14,14), 0) < iSoulMoney)

  0009d	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  000a0	6a 00		 push	 0
  000a2	68 0e 1c 00 00	 push	 7182			; 00001c0eH
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	3b 45 f8	 cmp	 eax, DWORD PTR _iSoulMoney$[ebp]
  000b3	7d 02		 jge	 SHORT $LN22@Check

; 149  : 		{
; 150  : 			bResult = 0;

  000b5	32 db		 xor	 bl, bl
$LN22@Check:

; 151  : 		}
; 152  : 	}
; 153  : 
; 154  : 	if(iPkLevel <= 3)

  000b7	83 7d fc 03	 cmp	 DWORD PTR _iPkLevel$[ebp], 3
  000bb	7f 02		 jg	 SHORT $LN1@Check

; 155  : 	{
; 156  : 		bResult = 0;

  000bd	32 db		 xor	 bl, bl
$LN1@Check:

; 157  : 	}
; 158  : 
; 159  : 	iZen = iZenMoney;

  000bf	8b 45 0c	 mov	 eax, DWORD PTR _iZen$[ebp]
  000c2	5f		 pop	 edi
  000c3	89 30		 mov	 DWORD PTR [eax], esi

; 160  : 
; 161  : 	return bResult;

  000c5	84 db		 test	 bl, bl
  000c7	5e		 pop	 esi
  000c8	0f 95 c0	 setne	 al
  000cb	5b		 pop	 ebx

; 162  : }

  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
?Check@PKClear@@QAE_NHAAH@Z ENDP			; PKClear::Check
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GC_Price@PKClear@@QAEXH@Z			; PKClear::GC_Price
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GC_Price@PKClear@@QAEXH@Z
_TEXT	SEGMENT
_iSoulMoney$ = -36					; size = 4
_iBlessMoney$ = -32					; size = 4
_iZenMoney$ = -28					; size = 4
_pSend$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GC_Price@PKClear@@QAEXH@Z PROC				; PKClear::GC_Price, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 167  : 	LPOBJ lpUser = &gObj[aIndex];
; 168  : 	
; 169  : 	int iZenMoney = 0;
; 170  : 	int iPkLevel = lpUser->m_PK_Level;

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	53		 push	 ebx

; 171  : 	int iChaosMoney = this->JewelOfChaos;

  00017	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0001e	8b c6		 mov	 eax, esi
  00020	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00026	57		 push	 edi
  00027	0f be bc 10 3d
	01 00 00	 movsx	 edi, BYTE PTR [eax+edx+317]

; 172  : 	int iBlessMoney = this->JewelOfBless;

  0002f	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]

; 173  : 	int iSoulMoney = this->JewelOfSoul;

  00032	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00035	89 45 e0	 mov	 DWORD PTR _iBlessMoney$[ebp], eax

; 174  : 
; 175  : 	BYTE bResult = this->Check(aIndex, iZenMoney);

  00038	8d 45 e4	 lea	 eax, DWORD PTR _iZenMoney$[ebp]
  0003b	50		 push	 eax
  0003c	56		 push	 esi
  0003d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iZenMoney$[ebp], 0
  00044	89 55 dc	 mov	 DWORD PTR _iSoulMoney$[ebp], edx
  00047	e8 00 00 00 00	 call	 ?Check@PKClear@@QAE_NHAAH@Z ; PKClear::Check

; 176  : 
; 177  : 	GC_PKCLEAR_PRICE pSend;
; 178  : 	pSend.h.set((LPBYTE)&pSend, 0xFB, 0xAC, sizeof(pSend));
; 179  : 	pSend.Result = bResult;
; 180  : 	pSend.PkLevel = iPkLevel;
; 181  : 	pSend.Zen = iZenMoney;

  0004c	8b 4d e4	 mov	 ecx, DWORD PTR _iZenMoney$[ebp]

; 182  : 	pSend.Chaos = iChaosMoney;
; 183  : 	pSend.Bless = iBlessMoney;

  0004f	66 8b 55 e0	 mov	 dx, WORD PTR _iBlessMoney$[ebp]
  00053	89 4d f0	 mov	 DWORD PTR _pSend$[ebp+8], ecx

; 184  : 	pSend.Soul = iSoulMoney;
; 185  : 	DataSend(aIndex, (LPBYTE)&pSend, pSend.h.size);

  00056	6a 14		 push	 20			; 00000014H
  00058	8d 4d e8	 lea	 ecx, DWORD PTR _pSend$[ebp]
  0005b	88 45 ec	 mov	 BYTE PTR _pSend$[ebp+4], al
  0005e	66 8b 45 dc	 mov	 ax, WORD PTR _iSoulMoney$[ebp]
  00062	51		 push	 ecx
  00063	56		 push	 esi
  00064	c7 45 e8 c1 14
	fb ac		 mov	 DWORD PTR _pSend$[ebp], -1392831295 ; acfb14c1H
  0006b	66 89 7d ee	 mov	 WORD PTR _pSend$[ebp+6], di
  0006f	66 89 5d f4	 mov	 WORD PTR _pSend$[ebp+12], bx
  00073	66 89 55 f6	 mov	 WORD PTR _pSend$[ebp+14], dx
  00077	66 89 45 f8	 mov	 WORD PTR _pSend$[ebp+16], ax
  0007b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 186  : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	33 cd		 xor	 ecx, ebp
  0008a	5b		 pop	 ebx
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?GC_Price@PKClear@@QAEXH@Z ENDP				; PKClear::GC_Price
_TEXT	ENDS
PUBLIC	?CG_ResultRecv@PKClear@@QAEXHPAUCG_PKCLEAR_RESULT@@@Z ; PKClear::CG_ResultRecv
EXTRN	?GCPkLevelSend@@YAXHE@Z:PROC			; GCPkLevelSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?gObjDeleteItemsCount@@YAHHFFH@Z:PROC		; gObjDeleteItemsCount
EXTRN	?gObjIsConnectedZt@@YA_NH@Z:PROC		; gObjIsConnectedZt
; Function compile flags: /Ogtp
;	COMDAT ?CG_ResultRecv@PKClear@@QAEXHPAUCG_PKCLEAR_RESULT@@@Z
_TEXT	SEGMENT
_iSoulMoney$ = -8					; size = 4
_iBlessMoney$ = -4					; size = 4
_iZenMoney$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_iChaosMoney$ = 12					; size = 4
_aRecv$ = 12						; size = 4
?CG_ResultRecv@PKClear@@QAEXHPAUCG_PKCLEAR_RESULT@@@Z PROC ; PKClear::CG_ResultRecv, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 191  : 	if(!this->Enable)

  00009	80 3f 00	 cmp	 BYTE PTR [edi], 0
  0000c	0f 84 e3 00 00
	00		 je	 $LN10@CG_ResultR

; 192  : 	{
; 193  :  		return;
; 194  : 	}
; 195  : 
; 196  : 	if(!gObjIsConnectedZt(aIndex))

  00012	53		 push	 ebx
  00013	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00016	53		 push	 ebx
  00017	e8 00 00 00 00	 call	 ?gObjIsConnectedZt@@YA_NH@Z ; gObjIsConnectedZt
  0001c	83 c4 04	 add	 esp, 4
  0001f	84 c0		 test	 al, al
  00021	0f 84 cd 00 00
	00		 je	 $LN12@CG_ResultR

; 197  : 	{
; 198  : 		return;
; 199  : 	}
; 200  : 
; 201  : 	if(aRecv->Result != 1)

  00027	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0002a	80 78 04 01	 cmp	 BYTE PTR [eax+4], 1
  0002e	0f 85 c0 00 00
	00		 jne	 $LN12@CG_ResultR

; 202  : 	{
; 203  : 		return;
; 204  : 	}
; 205  : 
; 206  : 	LPOBJ lpUser = &gObj[aIndex];
; 207  : 
; 208  : 	int iZenMoney = 0;
; 209  : 	int iChaosMoney = this->JewelOfChaos;

  00034	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]

; 210  : 	int iBlessMoney = this->JewelOfBless;

  00037	8b 57 20	 mov	 edx, DWORD PTR [edi+32]

; 211  : 	int iSoulMoney = this->JewelOfSoul;

  0003a	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0003d	56		 push	 esi
  0003e	8b f3		 mov	 esi, ebx
  00040	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00046	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004c	89 4d 0c	 mov	 DWORD PTR _iChaosMoney$[ebp], ecx

; 212  : 
; 213  : 	if(!this->Check(aIndex, iZenMoney))

  0004f	8d 4d 08	 lea	 ecx, DWORD PTR _iZenMoney$[ebp]
  00052	51		 push	 ecx
  00053	53		 push	 ebx
  00054	8b cf		 mov	 ecx, edi
  00056	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iZenMoney$[ebp], 0
  0005d	89 55 fc	 mov	 DWORD PTR _iBlessMoney$[ebp], edx
  00060	89 45 f8	 mov	 DWORD PTR _iSoulMoney$[ebp], eax
  00063	e8 00 00 00 00	 call	 ?Check@PKClear@@QAE_NHAAH@Z ; PKClear::Check
  00068	84 c0		 test	 al, al
  0006a	0f 84 83 00 00
	00		 je	 $LN13@CG_ResultR

; 214  : 	{
; 215  : 		return;
; 216  : 	}
; 217  : 
; 218  : 	if(iZenMoney > 0)

  00070	8b 7d 08	 mov	 edi, DWORD PTR _iZenMoney$[ebp]
  00073	85 ff		 test	 edi, edi
  00075	7e 06		 jle	 SHORT $LN5@CG_ResultR

; 219  : 	{
; 220  : 		lpUser->Money -= iZenMoney;

  00077	29 be f0 00 00
	00		 sub	 DWORD PTR [esi+240], edi
$LN5@CG_ResultR:

; 221  : 	}
; 222  : 	if(iChaosMoney > 0)

  0007d	8b 45 0c	 mov	 eax, DWORD PTR _iChaosMoney$[ebp]
  00080	85 c0		 test	 eax, eax
  00082	7e 11		 jle	 SHORT $LN4@CG_ResultR

; 223  : 	{
; 224  : 		gObjDeleteItemsCount(aIndex, ITEMGET(12,15), 0, iChaosMoney);

  00084	50		 push	 eax
  00085	6a 00		 push	 0
  00087	68 0f 18 00 00	 push	 6159			; 0000180fH
  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount
  00092	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@CG_ResultR:

; 225  : 	}
; 226  : 	if(iBlessMoney > 0)

  00095	8b 45 fc	 mov	 eax, DWORD PTR _iBlessMoney$[ebp]
  00098	85 c0		 test	 eax, eax
  0009a	7e 11		 jle	 SHORT $LN3@CG_ResultR

; 227  : 	{
; 228  : 		gObjDeleteItemsCount(aIndex, ITEMGET(14,13), 0, iBlessMoney);

  0009c	50		 push	 eax
  0009d	6a 00		 push	 0
  0009f	68 0d 1c 00 00	 push	 7181			; 00001c0dH
  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@CG_ResultR:

; 229  : 	}
; 230  : 	if(iSoulMoney > 0)

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _iSoulMoney$[ebp]
  000b0	85 c0		 test	 eax, eax
  000b2	7e 11		 jle	 SHORT $LN2@CG_ResultR

; 231  : 	{
; 232  : 		gObjDeleteItemsCount(aIndex, ITEMGET(14,14), 0, iSoulMoney);

  000b4	50		 push	 eax
  000b5	6a 00		 push	 0
  000b7	68 0e 1c 00 00	 push	 7182			; 00001c0eH
  000bc	53		 push	 ebx
  000bd	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount
  000c2	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@CG_ResultR:

; 233  : 	}
; 234  : 
; 235  : 	lpUser->m_PK_Level = 3;

  000c5	66 c7 86 3c 01
	00 00 00 03	 mov	 WORD PTR [esi+316], 768	; 00000300H

; 236  : 	lpUser->m_PK_Count = 0;
; 237  : 
; 238  : 	if(iZenMoney > 0)

  000ce	85 ff		 test	 edi, edi
  000d0	7e 10		 jle	 SHORT $LN1@CG_ResultR

; 239  : 	{
; 240  : 		GCMoneySend(aIndex,lpUser->Money);

  000d2	8b 96 f0 00 00
	00		 mov	 edx, DWORD PTR [esi+240]
  000d8	52		 push	 edx
  000d9	53		 push	 ebx
  000da	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  000df	83 c4 08	 add	 esp, 8
$LN1@CG_ResultR:

; 241  : 	}
; 242  : 
; 243  : 	GCPkLevelSend(aIndex,lpUser->m_PK_Level);

  000e2	0f b6 86 3d 01
	00 00		 movzx	 eax, BYTE PTR [esi+317]
  000e9	50		 push	 eax
  000ea	53		 push	 ebx
  000eb	e8 00 00 00 00	 call	 ?GCPkLevelSend@@YAXHE@Z	; GCPkLevelSend
  000f0	83 c4 08	 add	 esp, 8
$LN13@CG_ResultR:
  000f3	5e		 pop	 esi
$LN12@CG_ResultR:
  000f4	5b		 pop	 ebx
$LN10@CG_ResultR:
  000f5	5f		 pop	 edi

; 244  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 08 00	 ret	 8
?CG_ResultRecv@PKClear@@QAEXHPAUCG_PKCLEAR_RESULT@@@Z ENDP ; PKClear::CG_ResultRecv
_TEXT	ENDS
PUBLIC	??_C@_0BD@EIIMOIGH@ZtData?2PKClear?4ini?$AA@	; `string'
PUBLIC	?Load@PKClear@@QAEXXZ				; PKClear::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0BD@EIIMOIGH@ZtData?2PKClear?4ini?$AA@
CONST	SEGMENT
??_C@_0BD@EIIMOIGH@ZtData?2PKClear?4ini?$AA@ DB 'ZtData\PKClear.ini', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@PKClear@@QAEXXZ
_TEXT	SEGMENT
?Load@PKClear@@QAEXXZ PROC				; PKClear::Load, COMDAT
; _this$ = ecx

; 31   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 32   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@PKClear@@QAEXXZ	; PKClear::Init

; 33   : 
; 34   : 	if(	g_ZtLicense.CheckUser(Local) || 
; 35   : 		g_ZtLicense.CheckUser(Artem)	|| 
; 36   : 		g_ZtLicense.CheckUser(eZtUB::Artem2) ||
; 37   : 		g_ZtLicense.GetCustom())

  00008	6a 00		 push	 0
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00014	84 c0		 test	 al, al
  00016	75 2e		 jne	 SHORT $LN1@Load
  00018	6a 30		 push	 48			; 00000030H
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00024	84 c0		 test	 al, al
  00026	75 1e		 jne	 SHORT $LN1@Load
  00028	6a 31		 push	 49			; 00000031H
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00034	84 c0		 test	 al, al
  00036	75 0e		 jne	 SHORT $LN1@Load
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003d	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  00042	85 c0		 test	 eax, eax
  00044	74 17		 je	 SHORT $LN2@Load
$LN1@Load:

; 38   : 	{
; 39   : 		this->Read(gDirPath.GetNewPath("ZtData\\PKClear.ini"));

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EIIMOIGH@ZtData?2PKClear?4ini?$AA@
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00050	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?Read@PKClear@@QAEXPAD@Z ; PKClear::Read
$LN2@Load:
  0005d	5e		 pop	 esi

; 40   : 	}
; 41   : }

  0005e	c3		 ret	 0
?Load@PKClear@@QAEXXZ ENDP				; PKClear::Load
_TEXT	ENDS
PUBLIC	?NPCDialog@PKClear@@QAE_NHH@Z			; PKClear::NPCDialog
; Function compile flags: /Ogtp
;	COMDAT ?NPCDialog@PKClear@@QAE_NHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aNpcIndex$ = 12					; size = 4
?NPCDialog@PKClear@@QAE_NHH@Z PROC			; PKClear::NPCDialog, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 69   : 	if(!this->Enable)

  00006	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00009	75 07		 jne	 SHORT $LN3@NPCDialog

; 70   : 	{
; 71   :  		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 92   : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
$LN3@NPCDialog:
  00012	57		 push	 edi

; 72   : 	}
; 73   : 
; 74   : 	if(!gObjIsConnectedZt(aIndex))

  00013	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ?gObjIsConnectedZt@@YA_NH@Z ; gObjIsConnectedZt
  0001c	83 c4 04	 add	 esp, 4
  0001f	84 c0		 test	 al, al

; 75   : 	{
; 76   : 		return false;

  00021	74 4f		 je	 SHORT $LN1@NPCDialog

; 77   : 	}
; 78   : 
; 79   : 	LPOBJ lpUser = &gObj[aIndex];
; 80   : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  00023	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  00026	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 81   : 
; 82   : 	if(		lpNpc->Class		== this->NPC_Class 
; 83   : 		&&	lpNpc->MapNumber	== this->NPC_Map
; 84   : 		&&	lpNpc->X			== this->NPC_X
; 85   : 		&&	lpNpc->Y			== this->NPC_Y )

  00032	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00039	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0003c	75 34		 jne	 SHORT $LN1@NPCDialog
  0003e	0f b6 90 49 01
	00 00		 movzx	 edx, BYTE PTR [eax+329]
  00045	3b 56 08	 cmp	 edx, DWORD PTR [esi+8]
  00048	75 28		 jne	 SHORT $LN1@NPCDialog
  0004a	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00051	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00054	75 1c		 jne	 SHORT $LN1@NPCDialog
  00056	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]
  0005d	3b 56 10	 cmp	 edx, DWORD PTR [esi+16]
  00060	75 10		 jne	 SHORT $LN1@NPCDialog

; 86   : 	{
; 87   : 		this->GC_Price(aIndex);

  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?GC_Price@PKClear@@QAEXH@Z ; PKClear::GC_Price
  0006a	5f		 pop	 edi

; 88   : 		return true;

  0006b	b0 01		 mov	 al, 1
  0006d	5e		 pop	 esi

; 92   : }

  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
$LN1@NPCDialog:
  00072	5f		 pop	 edi

; 89   : 	}
; 90   : 	// ----
; 91   : 	return false;

  00073	32 c0		 xor	 al, al
  00075	5e		 pop	 esi

; 92   : }

  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
?NPCDialog@PKClear@@QAE_NHH@Z ENDP			; PKClear::NPCDialog
_TEXT	ENDS
END
