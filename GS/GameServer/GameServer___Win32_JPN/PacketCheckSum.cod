; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\PacketCheckSum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CPacketCheckSum@@6B@			; CPacketCheckSum::`vftable'
PUBLIC	??1CPacketCheckSum@@UAE@XZ			; CPacketCheckSum::~CPacketCheckSum
PUBLIC	??_R4CPacketCheckSum@@6B@			; CPacketCheckSum::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPacketCheckSum@@@8			; CPacketCheckSum `RTTI Type Descriptor'
PUBLIC	??_R3CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPacketCheckSum@@8		; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECPacketCheckSum@@UAEPAXI@Z:PROC		; CPacketCheckSum::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPacketCheckSum@@8
; File e:\work\tranet_version\gs\gameserver\packetchecksum.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CPacketCheckSum@@8 DD FLAT:??_R0?AVCPacketCheckSum@@@8 ; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R2CPacketCheckSum@@8
rdata$r	SEGMENT
??_R2CPacketCheckSum@@8 DD FLAT:??_R1A@?0A@EA@CPacketCheckSum@@8 ; CPacketCheckSum::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPacketCheckSum@@8
rdata$r	SEGMENT
??_R3CPacketCheckSum@@8 DD 00H				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPacketCheckSum@@@8
_DATA	SEGMENT
??_R0?AVCPacketCheckSum@@@8 DD FLAT:??_7type_info@@6B@	; CPacketCheckSum `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPacketCheckSum@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPacketCheckSum@@6B@
rdata$r	SEGMENT
??_R4CPacketCheckSum@@6B@ DD 00H			; CPacketCheckSum::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPacketCheckSum@@@8
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_7CPacketCheckSum@@6B@
CONST	SEGMENT
??_7CPacketCheckSum@@6B@ DD FLAT:??_R4CPacketCheckSum@@6B@ ; CPacketCheckSum::`vftable'
	DD	FLAT:??_ECPacketCheckSum@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CPacketCheckSum@@UAE@XZ
_TEXT	SEGMENT
??1CPacketCheckSum@@UAE@XZ PROC				; CPacketCheckSum::~CPacketCheckSum, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CPacketCheckSum@@6B@

; 23   : 	return;
; 24   : }

  00006	c3		 ret	 0
??1CPacketCheckSum@@UAE@XZ ENDP				; CPacketCheckSum::~CPacketCheckSum
_TEXT	ENDS
PUBLIC	?Init@CPacketCheckSum@@QAEXXZ			; CPacketCheckSum::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CPacketCheckSum@@QAEXXZ
_TEXT	SEGMENT
?Init@CPacketCheckSum@@QAEXXZ PROC			; CPacketCheckSum::Init, COMDAT
; _this$ = ecx

; 29   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 30   : 	this->m_ChecksumTableAllClearState = 0;
; 31   : 	memset(this->m_ChecksumTableClearState, 0, sizeof(this->m_ChecksumTableClearState));

  00003	6a 58		 push	 88			; 00000058H
  00005	8d 86 48 24 14
	00		 lea	 eax, DWORD PTR [esi+1320008]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	c7 86 44 24 14
	00 00 00 00 00	 mov	 DWORD PTR [esi+1320004], 0
  00018	e8 00 00 00 00	 call	 _memset

; 32   : 	memset(this->m_ChecksumTableAVGCount, 0, sizeof(this->m_ChecksumTableAVGCount));

  0001d	6a 58		 push	 88			; 00000058H
  0001f	8d 8e a0 24 14
	00		 lea	 ecx, DWORD PTR [esi+1320096]
  00025	6a 00		 push	 0
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _memset

; 33   : 	memset(this->m_ChecksumTableAVG, 0, sizeof(this->m_ChecksumTableAVG));

  0002d	68 60 22 00 00	 push	 8800			; 00002260H
  00032	8d 96 f8 24 14
	00		 lea	 edx, DWORD PTR [esi+1320184]
  00038	6a 00		 push	 0
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 _memset

; 34   : 	memset(this->PaketChecksum, 0, sizeof(this->PaketChecksum));

  00040	68 40 24 14 00	 push	 1320000			; 00142440H
  00045	6a 00		 push	 0
  00047	83 c6 04	 add	 esi, 4
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _memset
  00050	83 c4 30	 add	 esp, 48			; 00000030H
  00053	5e		 pop	 esi

; 35   : }

  00054	c3		 ret	 0
?Init@CPacketCheckSum@@QAEXXZ ENDP			; CPacketCheckSum::Init
_TEXT	ENDS
PUBLIC	?ClearCheckSum@CPacketCheckSum@@QAEXH@Z		; CPacketCheckSum::ClearCheckSum
; Function compile flags: /Ogtp
;	COMDAT ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z PROC		; CPacketCheckSum::ClearCheckSum, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	memset(&this->PaketChecksum[aIndex], 0, sizeof(PAKETCHECKSUM) );

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	6b c0 58	 imul	 eax, 88			; 00000058H
  00009	6a 58		 push	 88			; 00000058H
  0000b	8d 4c 08 04	 lea	 ecx, DWORD PTR [eax+ecx+4]
  0000f	6a 00		 push	 0
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ENDP		; CPacketCheckSum::ClearCheckSum
_TEXT	ENDS
PUBLIC	??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ ; `string'
PUBLIC	??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Add@CPacketCheckSum@@QAEHHHK@Z			; CPacketCheckSum::Add
EXTRN	?gObjCloseSet@@YAXHH@Z:PROC			; gObjCloseSet
EXTRN	?gDisconnectHackUser@@3HA:DWORD			; gDisconnectHackUser
EXTRN	?Send@CSendHackLog@@QAEXHEPAD@Z:PROC		; CSendHackLog::Send
EXTRN	?gSendHackLog@@3VCSendHackLog@@A:BYTE		; gSendHackLog
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
CONST	SEGMENT
??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ DB 'PacketChec'
	DB	'kSum : Compare Fail : (%d,%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
CONST	SEGMENT
??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ DB 'PacketChe'
	DB	'ckSum : Compare Fail : [%d][%s][%s] (%d,%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Add@CPacketCheckSum@@QAEHHHK@Z
_TEXT	SEGMENT
_szPacketError$209032 = -260				; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?Add@CPacketCheckSum@@QAEHHHK@Z PROC			; CPacketCheckSum::Add, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 86   : 	if ( gObj[aIndex].m_InWebzen != false )

  00017	8b c6		 mov	 eax, esi
  00019	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	57		 push	 edi
  00026	80 b8 e5 10 00
	00 00		 cmp	 BYTE PTR [eax+4325], 0
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _funcindex$[ebp]

; 87   : 	{
; 88   : 		return true;

  00030	0f 85 85 00 00
	00		 jne	 $LN8@Add

; 89   : 	}
; 90   : 
; 91   : 	if ( this->m_ChecksumTableAllClearState == 0 )

  00036	83 b9 44 24 14
	00 00		 cmp	 DWORD PTR [ecx+1320004], 0
  0003d	75 0e		 jne	 SHORT $LN4@Add

; 92   : 	{
; 93   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  0003f	8b 45 10	 mov	 eax, DWORD PTR _checksum$[ebp]
  00042	6b f6 16	 imul	 esi, 22			; 00000016H
  00045	03 f7		 add	 esi, edi
  00047	89 44 b1 04	 mov	 DWORD PTR [ecx+esi*4+4], eax

; 94   : 		return TRUE;

  0004b	eb 6e		 jmp	 SHORT $LN8@Add
$LN4@Add:
  0004d	53		 push	 ebx

; 95   : 	}
; 96   : 	
; 97   : 	if ( this->m_ChecksumTable[funcindex] == checksum )

  0004e	8b 5d 10	 mov	 ebx, DWORD PTR _checksum$[ebp]
  00051	39 9c b9 58 47
	14 00		 cmp	 DWORD PTR [ecx+edi*4+1328984], ebx
  00058	75 0b		 jne	 SHORT $LN3@Add

; 98   : 	{
; 99   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  0005a	6b f6 16	 imul	 esi, 22			; 00000016H
  0005d	03 f7		 add	 esi, edi
  0005f	89 5c b1 04	 mov	 DWORD PTR [ecx+esi*4+4], ebx

; 100  : 	}
; 101  : 	else

  00063	eb 55		 jmp	 SHORT $LN1@Add
$LN3@Add:

; 102  : 	{
; 103  : 		char szPacketError[256];
; 104  : 
; 105  : 		LogAddTD("PacketCheckSum : Compare Fail : [%d][%s][%s] (%d,%d)", aIndex,
; 106  : 			gObj[aIndex].AccountID, gObj[aIndex].Name, funcindex, checksum);

  00065	53		 push	 ebx
  00066	57		 push	 edi
  00067	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  0006a	51		 push	 ecx
  0006b	83 c0 6c	 add	 eax, 108		; 0000006cH
  0006e	50		 push	 eax
  0006f	56		 push	 esi
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 107  : 
; 108  : 		wsprintf(szPacketError, "PacketCheckSum : Compare Fail : (%d,%d)", funcindex, checksum);

  0007b	53		 push	 ebx
  0007c	57		 push	 edi
  0007d	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szPacketError$209032[ebp]
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
  00088	52		 push	 edx
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0008f	83 c4 28	 add	 esp, 40			; 00000028H

; 109  : 
; 110  : 		gSendHackLog.Send(aIndex, 1, szPacketError);

  00092	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szPacketError$209032[ebp]
  00098	50		 push	 eax
  00099	6a 01		 push	 1
  0009b	56		 push	 esi
  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSendHackLog@@3VCSendHackLog@@A ; gSendHackLog
  000a1	e8 00 00 00 00	 call	 ?Send@CSendHackLog@@QAEXHEPAD@Z ; CSendHackLog::Send

; 111  : 
; 112  : 		if ( gDisconnectHackUser != FALSE )

  000a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  000ad	74 0b		 je	 SHORT $LN1@Add

; 113  : 		{
; 114  : 			gObjCloseSet(aIndex, 0);

  000af	6a 00		 push	 0
  000b1	56		 push	 esi
  000b2	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  000b7	83 c4 08	 add	 esp, 8
$LN1@Add:
  000ba	5b		 pop	 ebx
$LN8@Add:

; 115  : 		}
; 116  : 	}
; 117  : 
; 118  : 	return TRUE;
; 119  : }

  000bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	5f		 pop	 edi
  000bf	33 cd		 xor	 ecx, ebp
  000c1	b8 01 00 00 00	 mov	 eax, 1
  000c6	5e		 pop	 esi
  000c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 0c 00	 ret	 12			; 0000000cH
?Add@CPacketCheckSum@@QAEHHHK@Z ENDP			; CPacketCheckSum::Add
_TEXT	ENDS
PUBLIC	??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ ; `string'
PUBLIC	?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z	; CPacketCheckSum::SetClearChecksumFunc
;	COMDAT ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@ DB '%d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
CONST	SEGMENT
??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ DB 'Complete Init Checks'
	DB	'um', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
tv799 = 8						; size = 4
_funcindex$ = 8						; size = 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z PROC	; CPacketCheckSum::SetClearChecksumFunc, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 162  : 	int Checksum = this->m_ChecksumTableAVG[funcindex][0];

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _funcindex$[ebp]
  00007	8b c3		 mov	 eax, ebx
  00009	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  0000f	56		 push	 esi
  00010	8b b4 08 f8 24
	14 00		 mov	 esi, DWORD PTR [eax+ecx+1320184]
  00017	03 c1		 add	 eax, ecx
  00019	33 d2		 xor	 edx, edx
  0001b	57		 push	 edi
  0001c	05 fc 24 14 00	 add	 eax, 1320188		; 001424fcH
  00021	8d 7a 14	 lea	 edi, DWORD PTR [edx+20]
$LL13@SetClearCh:

; 165  : 	{
; 166  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  00024	39 70 fc	 cmp	 DWORD PTR [eax-4], esi
  00027	75 01		 jne	 SHORT $LN12@SetClearCh

; 167  : 		{
; 168  : 			iCount++;

  00029	42		 inc	 edx
$LN12@SetClearCh:

; 165  : 	{
; 166  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0002a	39 30		 cmp	 DWORD PTR [eax], esi
  0002c	75 01		 jne	 SHORT $LN23@SetClearCh

; 167  : 		{
; 168  : 			iCount++;

  0002e	42		 inc	 edx
$LN23@SetClearCh:

; 165  : 	{
; 166  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0002f	39 70 04	 cmp	 DWORD PTR [eax+4], esi
  00032	75 01		 jne	 SHORT $LN24@SetClearCh

; 167  : 		{
; 168  : 			iCount++;

  00034	42		 inc	 edx
$LN24@SetClearCh:

; 165  : 	{
; 166  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  00035	39 70 08	 cmp	 DWORD PTR [eax+8], esi
  00038	75 01		 jne	 SHORT $LN25@SetClearCh

; 167  : 		{
; 168  : 			iCount++;

  0003a	42		 inc	 edx
$LN25@SetClearCh:

; 165  : 	{
; 166  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0003b	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  0003e	75 01		 jne	 SHORT $LN26@SetClearCh

; 167  : 		{
; 168  : 			iCount++;

  00040	42		 inc	 edx
$LN26@SetClearCh:

; 161  : 	int iCount = 0;

  00041	83 c0 14	 add	 eax, 20			; 00000014H

; 163  : 
; 164  : 	for ( int i=0;i<MAX_CHECKSUM_TABLE_AVG;i++)

  00044	4f		 dec	 edi
  00045	75 dd		 jne	 SHORT $LL13@SetClearCh

; 169  : 		}
; 170  : 	}
; 171  : 
; 172  : 	if ( iCount >= MAX_CHECKSUM_TABLE_AVG-1 )

  00047	83 fa 63	 cmp	 edx, 99			; 00000063H
  0004a	0f 8c 93 00 00
	00		 jl	 $LN1@SetClearCh

; 173  : 	{
; 174  : 		this->m_ChecksumTableClearState[funcindex] = 1;

  00050	b8 01 00 00 00	 mov	 eax, 1
  00055	89 84 99 48 24
	14 00		 mov	 DWORD PTR [ecx+ebx*4+1320008], eax
  0005c	8d b9 58 47 14
	00		 lea	 edi, DWORD PTR [ecx+1328984]
  00062	8d 91 f8 24 14
	00		 lea	 edx, DWORD PTR [ecx+1320184]

; 175  : 		this->m_ChecksumTableAllClearState = TRUE;

  00068	89 81 44 24 14
	00		 mov	 DWORD PTR [ecx+1320004], eax
  0006e	8b c7		 mov	 eax, edi
  00070	89 55 08	 mov	 DWORD PTR tv799[ebp], edx
  00073	be 16 00 00 00	 mov	 esi, 22			; 00000016H
  00078	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL28@SetClearCh:

; 176  : 
; 177  : 		for (int i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)
; 178  : 		{
; 179  : 			if ( this->m_ChecksumTableClearState[i] == 0 )

  00080	83 b8 f0 dc ff
	ff 00		 cmp	 DWORD PTR [eax-8976], 0
  00087	75 0a		 jne	 SHORT $LN5@SetClearCh

; 180  : 			{
; 181  : 				this->m_ChecksumTableAllClearState = FALSE;

  00089	c7 81 44 24 14
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1320004], 0
$LN5@SetClearCh:

; 182  : 			}
; 183  : 
; 184  : 			this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  00093	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00095	89 18		 mov	 DWORD PTR [eax], ebx
  00097	83 c0 04	 add	 eax, 4
  0009a	81 c2 90 01 00
	00		 add	 edx, 400		; 00000190H
  000a0	4e		 dec	 esi
  000a1	75 dd		 jne	 SHORT $LL28@SetClearCh

; 185  : 		}
; 186  : 
; 187  : 		if ( this->m_ChecksumTableAllClearState != FALSE )

  000a3	39 b1 44 24 14
	00		 cmp	 DWORD PTR [ecx+1320004], esi
  000a9	74 38		 je	 SHORT $LN1@SetClearCh

; 188  : 		{
; 189  : 			LogAddTD("Complete Init Checksum");

  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b6	8b 5d 08	 mov	 ebx, DWORD PTR tv799[ebp]
  000b9	83 c4 04	 add	 esp, 4
  000bc	8d 64 24 00	 npad	 4
$LL3@SetClearCh:

; 190  : 
; 191  : 			for (int i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)
; 192  : 			{
; 193  : 				this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 194  : 				LogAddTD("%d, %d", i, this->m_ChecksumTable[i]);

  000c2	50		 push	 eax
  000c3	56		 push	 esi
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
  000c9	89 07		 mov	 DWORD PTR [edi], eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d1	46		 inc	 esi
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	83 c7 04	 add	 edi, 4
  000d8	81 c3 90 01 00
	00		 add	 ebx, 400		; 00000190H
  000de	83 fe 16	 cmp	 esi, 22			; 00000016H
  000e1	7c dd		 jl	 SHORT $LL3@SetClearCh
$LN1@SetClearCh:
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx

; 195  : 			}
; 196  : 		}
; 197  : 	}
; 198  : }

  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ENDP	; CPacketCheckSum::SetClearChecksumFunc
_TEXT	ENDS
PUBLIC	??0CPacketCheckSum@@QAE@XZ			; CPacketCheckSum::CPacketCheckSum
; Function compile flags: /Ogtp
;	COMDAT ??0CPacketCheckSum@@QAE@XZ
_TEXT	SEGMENT
??0CPacketCheckSum@@QAE@XZ PROC				; CPacketCheckSum::CPacketCheckSum, COMDAT
; _this$ = ecx

; 14   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPacketCheckSum@@6B@

; 15   : 	this->Init();

  00009	e8 00 00 00 00	 call	 ?Init@CPacketCheckSum@@QAEXXZ ; CPacketCheckSum::Init

; 16   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CPacketCheckSum@@QAE@XZ ENDP				; CPacketCheckSum::CPacketCheckSum
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCPacketCheckSum@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPacketCheckSum@@UAEPAXI@Z PROC			; CPacketCheckSum::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCPacketCheckSum@@UAEPAXI@Z ENDP			; CPacketCheckSum::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Check@CPacketCheckSum@@QAEXH@Z			; CPacketCheckSum::Check
;	COMDAT ??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@ DB 'PacketCheckSum E'
	DB	'rror %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'P'
	DB	'acketCheckSum Error [%d][%s][%s] %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'C'
	DB	'heck PacketCheckSum [%d][%s][%s]', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Check@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
_szPacketError$209012 = -260				; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?Check@CPacketCheckSum@@QAEXH@Z PROC			; CPacketCheckSum::Check, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 42   : 	if ( gObj[aIndex].m_InWebzen != false )	// Olny for Local Test and Test Mains

  00018	8b c6		 mov	 eax, esi
  0001a	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00020	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00026	8b d9		 mov	 ebx, ecx
  00028	80 b8 e5 10 00
	00 00		 cmp	 BYTE PTR [eax+4325], 0
  0002f	75 3d		 jne	 SHORT $LN7@Check

; 43   : 	{
; 44   : 		return;
; 45   : 	}
; 46   : 
; 47   : 	for ( int i=0 ; i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX ; i++)

  00031	57		 push	 edi
  00032	8b d6		 mov	 edx, esi
  00034	33 ff		 xor	 edi, edi
  00036	6b d2 58	 imul	 edx, 88			; 00000058H
  00039	8d 4c 1a 04	 lea	 ecx, DWORD PTR [edx+ebx+4]
  0003d	8d 49 00	 npad	 3
$LL5@Check:

; 48   : 	{
; 49   : 		if ( this->PaketChecksum[aIndex].Check[i] == 0 )

  00040	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00043	74 3b		 je	 SHORT $LN10@Check

; 43   : 	{
; 44   : 		return;
; 45   : 	}
; 46   : 
; 47   : 	for ( int i=0 ; i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX ; i++)

  00045	47		 inc	 edi
  00046	83 c1 04	 add	 ecx, 4
  00049	83 ff 16	 cmp	 edi, 22			; 00000016H
  0004c	7c f2		 jl	 SHORT $LL5@Check

; 65   : 			}
; 66   : 
; 67   : 			return;
; 68   : 		}
; 69   : 	}
; 70   : 
; 71   : 	LogAddTD("Check PacketCheckSum [%d][%s][%s]", aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name);

  0004e	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  00051	51		 push	 ecx
  00052	83 c0 6c	 add	 eax, 108		; 0000006cH
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00062	83 c4 10	 add	 esp, 16			; 00000010H

; 72   : 	this->ClearCheckSum(aIndex);

  00065	56		 push	 esi
  00066	8b cb		 mov	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum
$LN12@Check:
  0006d	5f		 pop	 edi
$LN7@Check:
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 73   : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
$LN10@Check:

; 50   : 		{
; 51   : 			char szPacketError[256];
; 52   : 
; 53   : 			LogAddTD("PacketCheckSum Error [%d][%s][%s] %d",
; 54   : 				aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name, i);

  00080	57		 push	 edi
  00081	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  00084	51		 push	 ecx
  00085	83 c0 6c	 add	 eax, 108		; 0000006cH
  00088	50		 push	 eax
  00089	56		 push	 esi
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 55   : 			
; 56   : 			wsprintf(szPacketError, "PacketCheckSum Error %d", i);

  00095	57		 push	 edi
  00096	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szPacketError$209012[ebp]
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@
  000a1	52		 push	 edx
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000a8	83 c4 20	 add	 esp, 32			; 00000020H

; 57   : 
; 58   : 			gSendHackLog.Send(aIndex, 1, szPacketError);	// Hack Log Server

  000ab	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szPacketError$209012[ebp]
  000b1	50		 push	 eax
  000b2	6a 01		 push	 1
  000b4	56		 push	 esi
  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSendHackLog@@3VCSendHackLog@@A ; gSendHackLog
  000ba	e8 00 00 00 00	 call	 ?Send@CSendHackLog@@QAEXHEPAD@Z ; CSendHackLog::Send

; 59   : 
; 60   : 			this->ClearCheckSum(aIndex);

  000bf	56		 push	 esi
  000c0	8b cb		 mov	 ecx, ebx
  000c2	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum

; 61   : 
; 62   : 			if ( gDisconnectHackUser != FALSE )

  000c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  000ce	74 9d		 je	 SHORT $LN12@Check

; 63   : 			{
; 64   : 				gObjCloseSet(aIndex, 0);

  000d0	6a 00		 push	 0
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet

; 73   : }

  000d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000db	83 c4 08	 add	 esp, 8
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	33 cd		 xor	 ecx, ebp
  000e2	5b		 pop	 ebx
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 04 00	 ret	 4
?Check@CPacketCheckSum@@QAEXH@Z ENDP			; CPacketCheckSum::Check
_TEXT	ENDS
PUBLIC	??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ ; `string'
PUBLIC	??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z		; CPacketCheckSum::AddCheckSum
;	COMDAT ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
CONST	SEGMENT
??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ DB 'PacketCheckS'
	DB	'um : Invalid FuncIndex : %d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ DB 'I'
	DB	'nsert PacketCheckSum %d, %d,%d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z PROC		; CPacketCheckSum::AddCheckSum, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 127  : 	if ( funcindex < 0 || funcindex >= MAX_PACKET_CHECKSUM_FUNCTION_INDEX )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _funcindex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 fe 15	 cmp	 esi, 21			; 00000015H
  0000d	77 77		 ja	 SHORT $LN4@AddCheckSu

; 130  : 		return;
; 131  : 	}
; 132  : 
; 133  : 	this->Add(aIndex, funcindex, checksum);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00012	53		 push	 ebx
  00013	8b 5d 10	 mov	 ebx, DWORD PTR _checksum$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Add@CPacketCheckSum@@QAEHHHK@Z ; CPacketCheckSum::Add

; 134  : 
; 135  : 	if ( this->m_ChecksumTableAllClearState != 0 )

  0001e	83 bf 44 24 14
	00 00		 cmp	 DWORD PTR [edi+1320004], 0
  00025	75 58		 jne	 SHORT $LN8@AddCheckSu

; 136  : 	{
; 137  : 		return;
; 138  : 	}
; 139  : 
; 140  : 	if ( this->m_ChecksumTableClearState[funcindex] != 0 )

  00027	83 bc b7 48 24
	14 00 00	 cmp	 DWORD PTR [edi+esi*4+1320008], 0
  0002f	75 4e		 jne	 SHORT $LN8@AddCheckSu

; 141  : 	{
; 142  : 		return;
; 143  : 	}
; 144  : 
; 145  : 	this->m_ChecksumTableAVG[funcindex][this->m_ChecksumTableAVGCount[funcindex] % MAX_CHECKSUM_TABLE_AVG] = checksum;

  00031	8b 84 b7 a0 24
	14 00		 mov	 eax, DWORD PTR [edi+esi*4+1320096]
  00038	99		 cdq
  00039	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003e	f7 f9		 idiv	 ecx
  00040	8b c6		 mov	 eax, esi
  00042	6b c0 64	 imul	 eax, 100		; 00000064H

; 146  : 	this->m_ChecksumTableAVGCount[funcindex]++;
; 147  : 
; 148  : 	LogAddTD("Insert PacketCheckSum %d, %d,%d", funcindex, this->m_ChecksumTableAVGCount[funcindex], checksum);

  00045	53		 push	 ebx
  00046	03 d0		 add	 edx, eax
  00048	89 9c 97 f8 24
	14 00		 mov	 DWORD PTR [edi+edx*4+1320184], ebx
  0004f	ff 84 b7 a0 24
	14 00		 inc	 DWORD PTR [edi+esi*4+1320096]
  00056	8b 84 b7 a0 24
	14 00		 mov	 eax, DWORD PTR [edi+esi*4+1320096]
  0005d	50		 push	 eax
  0005e	56		 push	 esi
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006a	83 c4 10	 add	 esp, 16			; 00000010H

; 149  : 
; 150  : 	if ( this->m_ChecksumTableAVGCount[funcindex] >= MAX_CHECKSUM_TABLE_AVG )

  0006d	83 bc b7 a0 24
	14 00 64	 cmp	 DWORD PTR [edi+esi*4+1320096], 100 ; 00000064H
  00075	7c 08		 jl	 SHORT $LN8@AddCheckSu

; 151  : 	{
; 152  : 		this->SetClearChecksumFunc(funcindex);

  00077	56		 push	 esi
  00078	8b cf		 mov	 ecx, edi
  0007a	e8 00 00 00 00	 call	 ?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::SetClearChecksumFunc
$LN8@AddCheckSu:
  0007f	5b		 pop	 ebx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 153  : 	}
; 154  : }

  00082	5d		 pop	 ebp
  00083	c2 0c 00	 ret	 12			; 0000000cH
$LN4@AddCheckSu:

; 128  : 	{
; 129  : 		LogAddTD("PacketCheckSum : Invalid FuncIndex : %d, %d", aIndex, funcindex);

  00086	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00089	56		 push	 esi
  0008a	51		 push	 ecx
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi

; 153  : 	}
; 154  : }

  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z ENDP		; CPacketCheckSum::AddCheckSum
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgPacketCheckSum@@YAXXZ
text$yc	SEGMENT
??__EgPacketCheckSum@@YAXXZ PROC			; `dynamic initializer for 'gPacketCheckSum'', COMDAT

; 9    : CPacketCheckSum gPacketCheckSum;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  00005	e8 00 00 00 00	 call	 ??0CPacketCheckSum@@QAE@XZ ; CPacketCheckSum::CPacketCheckSum
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgPacketCheckSum@@YAXXZ ; `dynamic atexit destructor for 'gPacketCheckSum''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgPacketCheckSum@@YAXXZ ENDP			; `dynamic initializer for 'gPacketCheckSum''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgPacketCheckSum@@YAXXZ
text$yd	SEGMENT
??__FgPacketCheckSum@@YAXXZ PROC			; `dynamic atexit destructor for 'gPacketCheckSum'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  00005	e9 00 00 00 00	 jmp	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
??__FgPacketCheckSum@@YAXXZ ENDP			; `dynamic atexit destructor for 'gPacketCheckSum''
text$yd	ENDS
PUBLIC	?gPacketCheckSum@@3VCPacketCheckSum@@A		; gPacketCheckSum
_BSS	SEGMENT
?gPacketCheckSum@@3VCPacketCheckSum@@A DB 01447b0H DUP (?) ; gPacketCheckSum
_BSS	ENDS
CRT$XCU	SEGMENT
_gPacketCheckSum$initializer$ DD FLAT:??__EgPacketCheckSum@@YAXXZ
CRT$XCU	ENDS
END
