; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\PartyClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7PartyClass@@6B@				; PartyClass::`vftable'
PUBLIC	??0PartyClass@@QAE@XZ				; PartyClass::PartyClass
PUBLIC	??_R4PartyClass@@6B@				; PartyClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPartyClass@@@8				; PartyClass `RTTI Type Descriptor'
PUBLIC	??_R3PartyClass@@8				; PartyClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PartyClass@@8				; PartyClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PartyClass@@8			; PartyClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EPartyClass@@UAEPAXI@Z:PROC			; PartyClass::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@PartyClass@@8
; File e:\work\tranet_version\gs\gameserver\partyclass.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@PartyClass@@8 DD FLAT:??_R0?AVPartyClass@@@8 ; PartyClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PartyClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PartyClass@@8
rdata$r	SEGMENT
??_R2PartyClass@@8 DD FLAT:??_R1A@?0A@EA@PartyClass@@8	; PartyClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PartyClass@@8
rdata$r	SEGMENT
??_R3PartyClass@@8 DD 00H				; PartyClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PartyClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPartyClass@@@8
_DATA	SEGMENT
??_R0?AVPartyClass@@@8 DD FLAT:??_7type_info@@6B@	; PartyClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPartyClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PartyClass@@6B@
rdata$r	SEGMENT
??_R4PartyClass@@6B@ DD 00H				; PartyClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPartyClass@@@8
	DD	FLAT:??_R3PartyClass@@8
rdata$r	ENDS
;	COMDAT ??_7PartyClass@@6B@
CONST	SEGMENT
??_7PartyClass@@6B@ DD FLAT:??_R4PartyClass@@6B@	; PartyClass::`vftable'
	DD	FLAT:??_EPartyClass@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0PartyClass@@QAE@XZ
_TEXT	SEGMENT
??0PartyClass@@QAE@XZ PROC				; PartyClass::PartyClass, COMDAT
; _this$ = ecx

; 14   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PartyClass@@6B@

; 15   : #if(CUSTOM_SAVE_PT==1)
; 16   : 	this->DBIndex = 0;

  00008	c7 80 c8 ce 17
	00 00 00 00 00	 mov	 DWORD PTR [eax+1560264], 0

; 17   : #endif
; 18   : }

  00012	c3		 ret	 0
??0PartyClass@@QAE@XZ ENDP				; PartyClass::PartyClass
_TEXT	ENDS
PUBLIC	??1PartyClass@@UAE@XZ				; PartyClass::~PartyClass
; Function compile flags: /Ogtp
;	COMDAT ??1PartyClass@@UAE@XZ
_TEXT	SEGMENT
??1PartyClass@@UAE@XZ PROC				; PartyClass::~PartyClass, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7PartyClass@@6B@

; 22   : 
; 23   : }

  00006	c3		 ret	 0
??1PartyClass@@UAE@XZ ENDP				; PartyClass::~PartyClass
_TEXT	ENDS
PUBLIC	?IsParty@PartyClass@@QAEHH@Z			; PartyClass::IsParty
; Function compile flags: /Ogtp
;	COMDAT ?IsParty@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?IsParty@PartyClass@@QAEHH@Z PROC			; PartyClass::IsParty, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : 	if ( party_number < 0 || party_number > OBJMAX )

  00003	8b 45 08	 mov	 eax, DWORD PTR _party_number$[ebp]
  00006	3d 98 3a 00 00	 cmp	 eax, 15000		; 00003a98H
  0000b	77 12		 ja	 SHORT $LN2@IsParty

; 30   : 	}
; 31   : 
; 32   : 	if ( this->m_PartyS[party_number].Count == 0 )

  0000d	6b c0 68	 imul	 eax, 104		; 00000068H
  00010	33 d2		 xor	 edx, edx
  00012	39 54 08 08	 cmp	 DWORD PTR [eax+ecx+8], edx
  00016	0f 95 c2	 setne	 dl
  00019	8b c2		 mov	 eax, edx

; 33   : 	{
; 34   : 		return FALSE;
; 35   : 	}
; 36   : 
; 37   : 	return TRUE;
; 38   : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN2@IsParty:

; 28   : 	{
; 29   : 		return FALSE;

  0001f	33 c0		 xor	 eax, eax

; 33   : 	{
; 34   : 		return FALSE;
; 35   : 	}
; 36   : 
; 37   : 	return TRUE;
; 38   : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?IsParty@PartyClass@@QAEHH@Z ENDP			; PartyClass::IsParty
_TEXT	ENDS
PUBLIC	?Isleader@PartyClass@@QAEHHHH@Z			; PartyClass::Isleader
; Function compile flags: /Ogtp
;	COMDAT ?Isleader@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
?Isleader@PartyClass@@QAEHHHH@Z PROC			; PartyClass::Isleader, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 42   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax

; 43   : 	{
; 44   : 		return FALSE;

  0000f	74 20		 je	 SHORT $LN1@Isleader

; 45   : 	}
; 46   : 
; 47   : 	if ( this->m_PartyS[party_number].Number[0] == usernumber && this->m_PartyS[party_number].DbNumber[0] == dbnumber )

  00011	6b f6 68	 imul	 esi, 104		; 00000068H
  00014	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00017	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001a	3b 4d 0c	 cmp	 ecx, DWORD PTR _usernumber$[ebp]
  0001d	75 12		 jne	 SHORT $LN1@Isleader
  0001f	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  00022	3b 55 10	 cmp	 edx, DWORD PTR _dbnumber$[ebp]
  00025	75 0a		 jne	 SHORT $LN1@Isleader

; 48   : 	{
; 49   : 		return TRUE;

  00027	b8 01 00 00 00	 mov	 eax, 1
  0002c	5e		 pop	 esi

; 53   : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN1@Isleader:

; 50   : 	}
; 51   : 
; 52   : 	return FALSE;

  00031	33 c0		 xor	 eax, eax
  00033	5e		 pop	 esi

; 53   : }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?Isleader@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::Isleader
_TEXT	ENDS
PUBLIC	?GetCount@PartyClass@@QAEHH@Z			; PartyClass::GetCount
; Function compile flags: /Ogtp
;	COMDAT ?GetCount@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?GetCount@PartyClass@@QAEHH@Z PROC			; PartyClass::GetCount, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 58   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 05		 jne	 SHORT $LN1@GetCount
  00011	5e		 pop	 esi

; 64   : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN1@GetCount:

; 59   : 	{
; 60   : 		return 0;
; 61   : 	}
; 62   : 
; 63   : 	return this->m_PartyS[party_number].Count;

  00016	6b f6 68	 imul	 esi, 104		; 00000068H
  00019	8b 44 0e 08	 mov	 eax, DWORD PTR [esi+ecx+8]
  0001d	5e		 pop	 esi

; 64   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?GetCount@PartyClass@@QAEHH@Z ENDP			; PartyClass::GetCount
_TEXT	ENDS
PUBLIC	?GetIndexUser@PartyClass@@QAEHHHAAH0@Z		; PartyClass::GetIndexUser
; Function compile flags: /Ogtp
;	COMDAT ?GetIndexUser@PartyClass@@QAEHHHAAH0@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_index$ = 12						; size = 4
_usernumber$ = 16					; size = 4
_dbnumber$ = 20						; size = 4
?GetIndexUser@PartyClass@@QAEHHHAAH0@Z PROC		; PartyClass::GetIndexUser, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 69   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax

; 70   : 	{
; 71   : 		return FALSE;

  0000f	74 29		 je	 SHORT $LN1@GetIndexUs

; 72   : 	}
; 73   : 
; 74   : 	if ( index <0 || index > MAX_USER_IN_PARTY-1 )

  00011	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00014	83 f8 09	 cmp	 eax, 9
  00017	77 21		 ja	 SHORT $LN1@GetIndexUs

; 77   : 	}
; 78   : 
; 79   : 	usernumber = this->m_PartyS[party_number].Number[index];

  00019	6b f6 1a	 imul	 esi, 26			; 0000001aH
  0001c	03 c6		 add	 eax, esi
  0001e	8b 54 81 0c	 mov	 edx, DWORD PTR [ecx+eax*4+12]
  00022	8b 75 10	 mov	 esi, DWORD PTR _usernumber$[ebp]
  00025	89 16		 mov	 DWORD PTR [esi], edx

; 80   : 	dbnumber = this->m_PartyS[party_number].DbNumber[index];

  00027	8b 44 81 34	 mov	 eax, DWORD PTR [ecx+eax*4+52]
  0002b	8b 4d 14	 mov	 ecx, DWORD PTR _dbnumber$[ebp]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax

; 81   : 
; 82   : 	return TRUE;

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	5e		 pop	 esi

; 83   : }

  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
$LN1@GetIndexUs:

; 75   : 	{
; 76   : 		return FALSE;

  0003a	33 c0		 xor	 eax, eax
  0003c	5e		 pop	 esi

; 83   : }

  0003d	5d		 pop	 ebp
  0003e	c2 10 00	 ret	 16			; 00000010H
?GetIndexUser@PartyClass@@QAEHHHAAH0@Z ENDP		; PartyClass::GetIndexUser
_TEXT	ENDS
PUBLIC	?GetIndex@PartyClass@@QAEHHHH@Z			; PartyClass::GetIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetIndex@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
?GetIndex@PartyClass@@QAEHHHH@Z PROC			; PartyClass::GetIndex, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 87   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 05		 jne	 SHORT $LN6@GetIndex
  00011	5e		 pop	 esi

; 101  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN6@GetIndex:

; 88   : 	{
; 89   : 		return 0;
; 90   : 	}
; 91   : 
; 92   : 	for ( int n=0; n<MAX_USER_IN_PARTY;n++)

  00016	8b d6		 mov	 edx, esi
  00018	33 c0		 xor	 eax, eax
  0001a	6b d2 1a	 imul	 edx, 26			; 0000001aH
  0001d	57		 push	 edi
  0001e	8b 7d 10	 mov	 edi, DWORD PTR _dbnumber$[ebp]
  00021	8d 74 91 0c	 lea	 esi, DWORD PTR [ecx+edx*4+12]
  00025	53		 push	 ebx
$LL12@GetIndex:

; 93   : 	{
; 94   : 		if ( this->m_PartyS[party_number].Number[n] == usernumber || this->m_PartyS[party_number].DbNumber[n] == dbnumber )

  00026	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00028	3b 5d 0c	 cmp	 ebx, DWORD PTR _usernumber$[ebp]
  0002b	74 15		 je	 SHORT $LN14@GetIndex
  0002d	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  00030	39 7c 99 34	 cmp	 DWORD PTR [ecx+ebx*4+52], edi
  00034	74 0c		 je	 SHORT $LN14@GetIndex

; 88   : 	{
; 89   : 		return 0;
; 90   : 	}
; 91   : 
; 92   : 	for ( int n=0; n<MAX_USER_IN_PARTY;n++)

  00036	40		 inc	 eax
  00037	83 c6 04	 add	 esi, 4
  0003a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0003d	7c e7		 jl	 SHORT $LL12@GetIndex

; 95   : 		{
; 96   : 			return n;
; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return -1;

  0003f	83 c8 ff	 or	 eax, -1
$LN14@GetIndex:
  00042	5b		 pop	 ebx
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 101  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?GetIndex@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::GetIndex
_TEXT	ENDS
PUBLIC	?SetLevel@PartyClass@@QAEHHH@Z			; PartyClass::SetLevel
; Function compile flags: /Ogtp
;	COMDAT ?SetLevel@PartyClass@@QAEHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_level$ = 12						; size = 4
?SetLevel@PartyClass@@QAEHHH@Z PROC			; PartyClass::SetLevel, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  : 	if ( this->m_PartyS[party_number].m_MaxLevel  < level )

  00003	8b 45 08	 mov	 eax, DWORD PTR _party_number$[ebp]
  00006	6b c0 68	 imul	 eax, 104		; 00000068H
  00009	0f bf 54 08 5c	 movsx	 edx, WORD PTR [eax+ecx+92]
  0000e	03 c1		 add	 eax, ecx
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  00013	3b d1		 cmp	 edx, ecx
  00015	7d 04		 jge	 SHORT $LN3@SetLevel

; 179  : 	{
; 180  : 		this->m_PartyS[party_number].m_MaxLevel  = level;

  00017	66 89 48 5c	 mov	 WORD PTR [eax+92], cx
$LN3@SetLevel:

; 181  : 	}
; 182  : 
; 183  : 	if ( this->m_PartyS[party_number].m_MinLevel  == 0 )

  0001b	66 83 78 5e 00	 cmp	 WORD PTR [eax+94], 0
  00020	75 04		 jne	 SHORT $LN2@SetLevel

; 184  : 	{
; 185  : 		this->m_PartyS[party_number].m_MinLevel = level;

  00022	66 89 48 5e	 mov	 WORD PTR [eax+94], cx
$LN2@SetLevel:

; 186  : 	}
; 187  : 
; 188  : 	if ( this->m_PartyS[party_number].m_MinLevel > level )

  00026	0f bf 50 5e	 movsx	 edx, WORD PTR [eax+94]
  0002a	3b d1		 cmp	 edx, ecx
  0002c	7e 04		 jle	 SHORT $LN6@SetLevel

; 189  : 	{
; 190  : 		this->m_PartyS[party_number].m_MinLevel = level;

  0002e	66 89 48 5e	 mov	 WORD PTR [eax+94], cx
$LN6@SetLevel:

; 191  : 	}
; 192  : 
; 193  : 	return TRUE;

  00032	b8 01 00 00 00	 mov	 eax, 1

; 194  : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?SetLevel@PartyClass@@QAEHHH@Z ENDP			; PartyClass::SetLevel
_TEXT	ENDS
PUBLIC	?GetLevel@PartyClass@@QAEHHAAH0@Z		; PartyClass::GetLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetLevel@PartyClass@@QAEHHAAH0@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
_minlevel$ = 16						; size = 4
?GetLevel@PartyClass@@QAEHHAAH0@Z PROC			; PartyClass::GetLevel, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 199  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 05		 jne	 SHORT $LN1@GetLevel
  00011	5e		 pop	 esi

; 208  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN1@GetLevel:

; 200  : 	{
; 201  : 		return FALSE;
; 202  : 	}
; 203  : 
; 204  : 	maxlevel = this->m_PartyS[party_number].m_MaxLevel;

  00016	8b 55 0c	 mov	 edx, DWORD PTR _maxlevel$[ebp]
  00019	6b f6 68	 imul	 esi, 104		; 00000068H
  0001c	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  0001f	0f bf 48 5c	 movsx	 ecx, WORD PTR [eax+92]
  00023	89 0a		 mov	 DWORD PTR [edx], ecx

; 205  : 	minlevel = this->m_PartyS[party_number].m_MinLevel;

  00025	0f bf 40 5e	 movsx	 eax, WORD PTR [eax+94]
  00029	8b 4d 10	 mov	 ecx, DWORD PTR _minlevel$[ebp]
  0002c	89 01		 mov	 DWORD PTR [ecx], eax

; 206  : 
; 207  : 	return TRUE;

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	5e		 pop	 esi

; 208  : }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?GetLevel@PartyClass@@QAEHHAAH0@Z ENDP			; PartyClass::GetLevel
_TEXT	ENDS
PUBLIC	?Destroy@PartyClass@@QAEHH@Z			; PartyClass::Destroy
; Function compile flags: /Ogtp
;	COMDAT ?Destroy@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?Destroy@PartyClass@@QAEHH@Z PROC			; PartyClass::Destroy, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 213  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax

; 214  : 	{
; 215  : 		return FALSE;

  0000f	74 19		 je	 SHORT $LN4@Destroy

; 216  : 	}
; 217  : 
; 218  : 	this->m_PartyS[party_number].Count = 0;

  00011	6b f6 68	 imul	 esi, 104		; 00000068H
  00014	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 219  : 	this->m_PartyS[party_number].Number[0] = -1;

  00017	83 ca ff	 or	 edx, -1
  0001a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00021	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 220  : 	this->m_PartyS[party_number].DbNumber[0] = -1;

  00024	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 221  : 	this->m_PartyCount--;

  00027	01 51 04	 add	 DWORD PTR [ecx+4], edx
$LN4@Destroy:

; 222  : 
; 223  : 	return FALSE;

  0002a	33 c0		 xor	 eax, eax
  0002c	5e		 pop	 esi

; 224  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Destroy@PartyClass@@QAEHH@Z ENDP			; PartyClass::Destroy
_TEXT	ENDS
PUBLIC	?Add@PartyClass@@QAEHHHHH@Z			; PartyClass::Add
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_MaxPartyMember@@3HA:DWORD			; g_MaxPartyMember
; Function compile flags: /Ogtp
;	COMDAT ?Add@PartyClass@@QAEHHHHH@Z
_TEXT	SEGMENT
tv354 = -4						; size = 4
tv289 = -4						; size = 4
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
_level$ = 20						; size = 4
?Add@PartyClass@@QAEHHHHH@Z PROC			; PartyClass::Add, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 229  : 	if ( this->IsParty(party_number ) == FALSE )

  00006	8b 7d 08	 mov	 edi, DWORD PTR _party_number$[ebp]
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00011	85 c0		 test	 eax, eax
  00013	75 0b		 jne	 SHORT $LN14@Add

; 230  : 	{
; 231  : 		return -1;

  00015	5f		 pop	 edi
  00016	83 c8 ff	 or	 eax, -1
  00019	5e		 pop	 esi

; 286  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
$LN14@Add:
  00020	53		 push	 ebx

; 232  : 	}
; 233  : 
; 234  : 	if ( this->m_PartyS[party_number].Count >= OBJMAX )

  00021	8b df		 mov	 ebx, edi
  00023	6b db 68	 imul	 ebx, 104		; 00000068H
  00026	81 7c 33 08 98
	3a 00 00	 cmp	 DWORD PTR [ebx+esi+8], 15000 ; 00003a98H
  0002e	89 5d fc	 mov	 DWORD PTR tv289[ebp], ebx

; 235  : 	{
; 236  : 		return -1;

  00031	7d 51		 jge	 SHORT $LN6@Add

; 237  : 	}
; 238  : 
; 239  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++)

  00033	8b cf		 mov	 ecx, edi
  00035	33 c0		 xor	 eax, eax
  00037	6b c9 1a	 imul	 ecx, 26			; 0000001aH
  0003a	8d 7c 8e 0c	 lea	 edi, DWORD PTR [esi+ecx*4+12]
  0003e	8b ff		 npad	 2
$LL12@Add:

; 240  : 	{
; 241  : 		if ( (this->m_PartyS[party_number].Number[i] >= 0) && (this->m_PartyS[party_number].Number[i] == usernumber) && (this->m_PartyS[party_number].DbNumber[i] == dbnumber) )

  00040	8b 17		 mov	 edx, DWORD PTR [edi]
  00042	85 d2		 test	 edx, edx
  00044	78 14		 js	 SHORT $LN11@Add
  00046	3b 55 0c	 cmp	 edx, DWORD PTR _usernumber$[ebp]
  00049	75 0c		 jne	 SHORT $LN25@Add
  0004b	8b 5d 10	 mov	 ebx, DWORD PTR _dbnumber$[ebp]
  0004e	8d 14 01	 lea	 edx, DWORD PTR [ecx+eax]
  00051	39 5c 96 34	 cmp	 DWORD PTR [esi+edx*4+52], ebx
  00055	74 39		 je	 SHORT $LN19@Add
$LN25@Add:
  00057	8b 5d fc	 mov	 ebx, DWORD PTR tv289[ebp]
$LN11@Add:

; 237  : 	}
; 238  : 
; 239  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++)

  0005a	40		 inc	 eax
  0005b	83 c7 04	 add	 edi, 4
  0005e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00061	7c dd		 jl	 SHORT $LL12@Add

; 244  : 		}
; 245  : 	}
; 246  : 
; 247  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00063	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_MaxPartyMember@@3HA ; g_MaxPartyMember
  00069	8d 44 33 0c	 lea	 eax, DWORD PTR [ebx+esi+12]
  0006d	33 ff		 xor	 edi, edi
  0006f	89 45 fc	 mov	 DWORD PTR tv354[ebp], eax
$LL8@Add:

; 248  : 	{
; 249  : #if _NEW_PARTY_SYSTEM_ == TRUE
; 250  : 		if( i >= g_MaxPartyMember)

  00072	3b fa		 cmp	 edi, edx
  00074	7d 0e		 jge	 SHORT $LN6@Add

; 251  : 		{
; 252  : 			return -1;
; 253  : 		}
; 254  : #endif
; 255  : 		if ( this->m_PartyS[party_number].Number[i] == -1 )

  00076	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00079	74 23		 je	 SHORT $LN21@Add

; 244  : 		}
; 245  : 	}
; 246  : 
; 247  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  0007b	47		 inc	 edi
  0007c	83 c0 04	 add	 eax, 4
  0007f	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  00082	7c ee		 jl	 SHORT $LL8@Add
$LN6@Add:
  00084	5b		 pop	 ebx
  00085	5f		 pop	 edi

; 282  : 		}
; 283  : 	}
; 284  : 
; 285  : 	return -1;

  00086	83 c8 ff	 or	 eax, -1
  00089	5e		 pop	 esi

; 286  : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 10 00	 ret	 16			; 00000010H
$LN19@Add:
  00090	5b		 pop	 ebx
  00091	5f		 pop	 edi

; 242  : 		{
; 243  : 			return -2;

  00092	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00097	5e		 pop	 esi

; 286  : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 10 00	 ret	 16			; 00000010H
$LN21@Add:

; 256  : 		{
; 257  : 			this->m_PartyS[party_number].Number[i] = usernumber;
; 258  : 			this->m_PartyS[party_number].DbNumber[i] = dbnumber;

  0009e	8b 55 10	 mov	 edx, DWORD PTR _dbnumber$[ebp]
  000a1	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _usernumber$[ebp]
  000a7	89 4c 86 0c	 mov	 DWORD PTR [esi+eax*4+12], ecx

; 259  : 			this->m_PartyS[party_number].Count++;
; 260  : 			this->SetLevel(party_number, level);

  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _party_number$[ebp]
  000ae	89 54 86 34	 mov	 DWORD PTR [esi+eax*4+52], edx
  000b2	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  000b5	ff 44 33 08	 inc	 DWORD PTR [ebx+esi+8]
  000b9	50		 push	 eax
  000ba	51		 push	 ecx
  000bb	8b ce		 mov	 ecx, esi
  000bd	e8 00 00 00 00	 call	 ?SetLevel@PartyClass@@QAEHHH@Z ; PartyClass::SetLevel

; 261  : 			this->m_PartyS[party_number].m_PkLevel[i] = gObj[usernumber].m_PK_Level; //Season 2.5 add-on

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _usernumber$[ebp]
  000c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cb	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000d1	8a 8c 10 3d 01
	00 00		 mov	 cl, BYTE PTR [eax+edx+317]
  000d8	8d 14 3b	 lea	 edx, DWORD PTR [ebx+edi]
  000db	88 4c 32 60	 mov	 BYTE PTR [edx+esi+96], cl

; 262  : 			
; 263  : 			if( this->m_PartyS[party_number].m_PkLevel[i] >= 5 ) //Season 2.5 add-on

  000df	80 f9 05	 cmp	 cl, 5
  000e2	7c 12		 jl	 SHORT $LN3@Add

; 264  : 			{
; 265  : 				if( this->m_PartyS[party_number].m_PartyPkLevel < this->m_PartyS[party_number].m_PkLevel[i] )

  000e4	38 4c 33 6a	 cmp	 BYTE PTR [ebx+esi+106], cl
  000e8	7d 04		 jge	 SHORT $LN2@Add

; 266  : 				{
; 267  : 					this->m_PartyS[party_number].m_PartyPkLevel = this->m_PartyS[party_number].m_PkLevel[i];

  000ea	88 4c 33 6a	 mov	 BYTE PTR [ebx+esi+106], cl
$LN2@Add:

; 268  : 				}
; 269  : 					
; 270  : 				this->m_PartyS[party_number].m_PkCount += 1;

  000ee	ff 44 33 6c	 inc	 DWORD PTR [ebx+esi+108]
  000f2	8d 74 33 6c	 lea	 esi, DWORD PTR [ebx+esi+108]
$LN3@Add:

; 271  : 			}
; 272  : #if(CUSTOM_SAVE_PT==TRUE)		
; 273  : 			if(g_ZtLicense.user.PartySave)

  000f6	80 3d e4 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+228, 0
  000fd	74 1f		 je	 SHORT $LN1@Add

; 274  : 			{
; 275  : 				int pmIndex = this->m_PartyS[party_number].Number[0];
; 276  : 				LPOBJ pmObj = &gObj[pmIndex];

  000ff	8b 4d fc	 mov	 ecx, DWORD PTR tv354[ebp]
  00102	8b 11		 mov	 edx, DWORD PTR [ecx]

; 277  : 				gObj[usernumber].PartyIndex = pmObj->PartyIndex;

  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010a	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00110	8b 94 0a d0 28
	00 00		 mov	 edx, DWORD PTR [edx+ecx+10448]
  00117	89 94 08 d0 28
	00 00		 mov	 DWORD PTR [eax+ecx+10448], edx
$LN1@Add:

; 278  : 				//GJSetCharacterInfo(&gObj[usernumber], usernumber, 0);
; 279  : 			}
; 280  : #endif		
; 281  : 			return i;

  0011e	5b		 pop	 ebx
  0011f	8b c7		 mov	 eax, edi
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi

; 286  : }

  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 10 00	 ret	 16			; 00000010H
?Add@PartyClass@@QAEHHHHH@Z ENDP			; PartyClass::Add
_TEXT	ENDS
PUBLIC	?Delete@PartyClass@@QAEHHHH@Z			; PartyClass::Delete
; Function compile flags: /Ogtp
;	COMDAT ?Delete@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
?Delete@PartyClass@@QAEHHHH@Z PROC			; PartyClass::Delete, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 290  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 08		 jne	 SHORT $LN5@Delete

; 291  : 	{
; 292  : 		return -1;

  00011	83 c8 ff	 or	 eax, -1
  00014	5e		 pop	 esi

; 308  : }

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Delete:

; 293  : 	}
; 294  : 
; 295  : 	for ( int i = 0 ; i<MAX_USER_IN_PARTY ; i++ )

  00019	8b d6		 mov	 edx, esi
  0001b	33 c0		 xor	 eax, eax
  0001d	6b d2 1a	 imul	 edx, 26			; 0000001aH
  00020	57		 push	 edi
  00021	8b 7d 10	 mov	 edi, DWORD PTR _dbnumber$[ebp]
  00024	8d 74 91 0c	 lea	 esi, DWORD PTR [ecx+edx*4+12]
  00028	53		 push	 ebx
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL4@Delete:

; 296  : 	{
; 297  : 		if ( (this->m_PartyS[party_number].Number[i] == usernumber) && (this->m_PartyS[party_number].DbNumber[i] == dbnumber) )

  00030	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00032	3b 5d 0c	 cmp	 ebx, DWORD PTR _usernumber$[ebp]
  00035	75 09		 jne	 SHORT $LN3@Delete
  00037	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  0003a	39 7c 99 34	 cmp	 DWORD PTR [ecx+ebx*4+52], edi
  0003e	74 13		 je	 SHORT $LN9@Delete
$LN3@Delete:

; 293  : 	}
; 294  : 
; 295  : 	for ( int i = 0 ; i<MAX_USER_IN_PARTY ; i++ )

  00040	40		 inc	 eax
  00041	83 c6 04	 add	 esi, 4
  00044	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00047	7c e7		 jl	 SHORT $LL4@Delete

; 303  : 			return i;
; 304  : 		}
; 305  : 	}
; 306  : 
; 307  : 	return -1;

  00049	5b		 pop	 ebx
  0004a	5f		 pop	 edi
  0004b	83 c8 ff	 or	 eax, -1
  0004e	5e		 pop	 esi

; 308  : }

  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
$LN9@Delete:

; 298  : 		{
; 299  : 			this->m_PartyS[party_number].Number[i] = -1;

  00053	03 d0		 add	 edx, eax
  00055	83 ce ff	 or	 esi, -1
  00058	89 74 91 0c	 mov	 DWORD PTR [ecx+edx*4+12], esi

; 300  : 			this->m_PartyS[party_number].DbNumber[i] = -1;

  0005c	89 74 91 34	 mov	 DWORD PTR [ecx+edx*4+52], esi

; 301  : 			this->m_PartyS[party_number].Count--;

  00060	8b 55 08	 mov	 edx, DWORD PTR _party_number$[ebp]
  00063	6b d2 68	 imul	 edx, 104		; 00000068H
  00066	01 74 0a 08	 add	 DWORD PTR [edx+ecx+8], esi
  0006a	5b		 pop	 ebx

; 302  : 			this->m_PartyS[party_number].m_PkLevel[i] = 3; //Season 2.5 add-on

  0006b	03 d0		 add	 edx, eax
  0006d	5f		 pop	 edi
  0006e	c6 44 0a 60 03	 mov	 BYTE PTR [edx+ecx+96], 3
  00073	5e		 pop	 esi

; 308  : }

  00074	5d		 pop	 ebp
  00075	c2 0c 00	 ret	 12			; 0000000cH
?Delete@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::Delete
_TEXT	ENDS
PUBLIC	?Delete@PartyClass@@QAEXHH@Z			; PartyClass::Delete
; Function compile flags: /Ogtp
;	COMDAT ?Delete@PartyClass@@QAEXHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_index$ = 12						; size = 4
?Delete@PartyClass@@QAEXHH@Z PROC			; PartyClass::Delete, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 312  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	74 36		 je	 SHORT $LN2@Delete@2

; 313  : 	{
; 314  : 		return;
; 315  : 	}
; 316  : 
; 317  : 	if ( index < 0 || index > MAX_USER_IN_PARTY -1 )

  00011	8b 55 0c	 mov	 edx, DWORD PTR _index$[ebp]
  00014	83 fa 09	 cmp	 edx, 9
  00017	77 2e		 ja	 SHORT $LN2@Delete@2

; 318  : 	{
; 319  : 		return;
; 320  : 	}
; 321  : 
; 322  : 	if ( this->m_PartyS[party_number].Number[index] >= 0 )

  00019	8b c6		 mov	 eax, esi
  0001b	6b c0 1a	 imul	 eax, 26			; 0000001aH
  0001e	03 c2		 add	 eax, edx
  00020	83 7c 81 0c 00	 cmp	 DWORD PTR [ecx+eax*4+12], 0
  00025	7c 20		 jl	 SHORT $LN2@Delete@2

; 323  : 	{
; 324  : 		this->m_PartyS[party_number].Number[index] = -1;

  00027	c7 44 81 0c ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+12], -1

; 325  : 		this->m_PartyS[party_number].DbNumber[index] = -1;

  0002f	c7 44 81 34 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+52], -1

; 326  : 		this->m_PartyS[party_number].Count--;

  00037	8b c6		 mov	 eax, esi
  00039	6b c0 68	 imul	 eax, 104		; 00000068H
  0003c	ff 4c 08 08	 dec	 DWORD PTR [eax+ecx+8]

; 327  : 		this->m_PartyS[party_number].m_PkLevel[index] = 3; //Season 2.5 add-on

  00040	03 c2		 add	 eax, edx
  00042	c6 44 08 60 03	 mov	 BYTE PTR [eax+ecx+96], 3
$LN2@Delete@2:
  00047	5e		 pop	 esi

; 328  : 	}
; 329  : }

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
?Delete@PartyClass@@QAEXHH@Z ENDP			; PartyClass::Delete
_TEXT	ENDS
PUBLIC	?GetPartyCount@PartyClass@@QAEHH@Z		; PartyClass::GetPartyCount
; Function compile flags: /Ogtp
;	COMDAT ?GetPartyCount@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?GetPartyCount@PartyClass@@QAEHH@Z PROC			; PartyClass::GetPartyCount, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 334  : 	if ( this->IsParty( party_number ) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 08		 jne	 SHORT $LN1@GetPartyCo

; 335  : 	{
; 336  : 		return -1;

  00011	83 c8 ff	 or	 eax, -1
  00014	5e		 pop	 esi

; 340  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetPartyCo:

; 337  : 	}
; 338  : 
; 339  : 	return this->m_PartyS[party_number].Count;

  00019	6b f6 68	 imul	 esi, 104		; 00000068H
  0001c	8b 44 0e 08	 mov	 eax, DWORD PTR [esi+ecx+8]
  00020	5e		 pop	 esi

; 340  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetPartyCount@PartyClass@@QAEHH@Z ENDP			; PartyClass::GetPartyCount
_TEXT	ENDS
PUBLIC	??_C@_03EDAPGMLK@?$FN?0?5?$AA@			; `string'
PUBLIC	??_C@_02DNJFBPJB@?$FN?$FL?$AA@			; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@ ; `string'
PUBLIC	?Paint@PartyClass@@QAEXH@Z			; PartyClass::Paint
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_03EDAPGMLK@?$FN?0?5?$AA@
CONST	SEGMENT
??_C@_03EDAPGMLK@?$FN?0?5?$AA@ DB '], ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
CONST	SEGMENT
??_C@_02DNJFBPJB@?$FN?$FL?$AA@ DB '][', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@
CONST	SEGMENT
??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@ DB 'PartyMember(%d) '
	DB	':', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Paint@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
tv200 = -20						; size = 4
_this$ = -16						; size = 4
tv198 = -12						; size = 4
tv257 = -8						; size = 4
_i$210873 = -4						; size = 4
tv254 = 8						; size = 4
_party_number$ = 8					; size = 4
?Paint@PartyClass@@QAEXH@Z PROC				; PartyClass::Paint, COMDAT
; _this$ = ecx

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 345  : 	if (this->IsParty(party_number) == FALSE )

  00007	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	56		 push	 esi
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00016	85 c0		 test	 eax, eax
  00018	0f 84 47 01 00
	00		 je	 $LN7@Paint

; 346  : 	{
; 347  : 		return;
; 348  : 	}
; 349  : 
; 350  : 	int usern = 0;
; 351  : 	wsprintf( this->m_szTempPaint, "PartyMember(%d) :", this->m_PartyS[party_number].Count);

  0001e	8b c6		 mov	 eax, esi
  00020	6b c0 68	 imul	 eax, 104		; 00000068H
  00023	8b 4c 38 08	 mov	 ecx, DWORD PTR [eax+edi+8]
  00027	53		 push	 ebx
  00028	51		 push	 ecx
  00029	8d 9f c8 cd 17
	00		 lea	 ebx, DWORD PTR [edi+1560008]
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@
  00034	53		 push	 ebx
  00035	89 5d f4	 mov	 DWORD PTR tv198[ebp], ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 352  : 
; 353  : 	for ( int i = 0; i< MAX_USER_IN_PARTY ; i++ )

  0003e	33 c9		 xor	 ecx, ecx
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	6b f6 1a	 imul	 esi, 26			; 0000001aH
  00046	8d 54 b7 0c	 lea	 edx, DWORD PTR [edi+esi*4+12]
  0004a	89 4d fc	 mov	 DWORD PTR _i$210873[ebp], ecx
  0004d	89 75 ec	 mov	 DWORD PTR tv200[ebp], esi
  00050	89 55 08	 mov	 DWORD PTR tv254[ebp], edx
$LL19@Paint:

; 354  : 	{
; 355  : 		if ( (this->m_PartyS[party_number].Number[i] != 0 ) && (this->m_PartyS[party_number].DbNumber[i] != 0 ) )

  00053	8b 45 08	 mov	 eax, DWORD PTR tv254[ebp]
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
  00058	89 45 f8	 mov	 DWORD PTR tv257[ebp], eax
  0005b	85 c0		 test	 eax, eax
  0005d	0f 84 e3 00 00
	00		 je	 $LN4@Paint
  00063	03 ce		 add	 ecx, esi
  00065	83 7c 8f 34 00	 cmp	 DWORD PTR [edi+ecx*4+52], 0
  0006a	0f 84 d6 00 00
	00		 je	 $LN4@Paint

; 356  : 		{
; 357  : 			usern = this->m_PartyS[party_number].Number[i];
; 358  : 
; 359  : 			if ( !gObjIsConnected(usern) )

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00076	83 c4 04	 add	 esp, 4
  00079	85 c0		 test	 eax, eax
  0007b	0f 84 c5 00 00
	00		 je	 $LN4@Paint

; 360  : 				continue;
; 361  : 
; 362  : 			strcat(this->m_szTempPaint, "[");

  00081	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
$LL11@Paint:
  00084	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00087	47		 inc	 edi
  00088	84 c0		 test	 al, al
  0008a	75 f8		 jne	 SHORT $LL11@Paint
  0008c	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
  00093	66 89 17	 mov	 WORD PTR [edi], dx

; 363  : 			strcat(this->m_szTempPaint, gObj[usern].AccountID);

  00096	8b 55 f8	 mov	 edx, DWORD PTR tv257[ebp]
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009e	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  000a4	8d 44 02 6c	 lea	 eax, DWORD PTR [edx+eax+108]
  000a8	8b c8		 mov	 ecx, eax
  000aa	8d 9b 00 00 00
	00		 npad	 6
$LL12@Paint:
  000b0	8a 18		 mov	 bl, BYTE PTR [eax]
  000b2	40		 inc	 eax
  000b3	84 db		 test	 bl, bl
  000b5	75 f9		 jne	 SHORT $LL12@Paint
  000b7	8b 5d f4	 mov	 ebx, DWORD PTR tv198[ebp]
  000ba	2b c1		 sub	 eax, ecx
  000bc	8b f1		 mov	 esi, ecx
  000be	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
$LL13@Paint:
  000c1	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000c4	47		 inc	 edi
  000c5	84 c9		 test	 cl, cl
  000c7	75 f8		 jne	 SHORT $LL13@Paint
  000c9	8b c8		 mov	 ecx, eax
  000cb	c1 e9 02	 shr	 ecx, 2
  000ce	f3 a5		 rep movsd
  000d0	8b c8		 mov	 ecx, eax
  000d2	83 e1 03	 and	 ecx, 3
  000d5	f3 a4		 rep movsb

; 364  : 			strcat(this->m_szTempPaint, "][");

  000d7	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  000da	8d 9b 00 00 00
	00		 npad	 6
$LL14@Paint:
  000e0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e3	40		 inc	 eax
  000e4	84 c9		 test	 cl, cl
  000e6	75 f8		 jne	 SHORT $LL14@Paint
  000e8	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
  000ef	66 89 08	 mov	 WORD PTR [eax], cx
  000f2	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@+2
  000f8	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 365  : 			strcat(this->m_szTempPaint, gObj[usern].Name);

  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00100	8d 44 02 77	 lea	 eax, DWORD PTR [edx+eax+119]
  00104	8b c8		 mov	 ecx, eax
$LL15@Paint:
  00106	8a 10		 mov	 dl, BYTE PTR [eax]
  00108	40		 inc	 eax
  00109	84 d2		 test	 dl, dl
  0010b	75 f9		 jne	 SHORT $LL15@Paint
  0010d	2b c1		 sub	 eax, ecx
  0010f	8b f1		 mov	 esi, ecx
  00111	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
$LL16@Paint:
  00114	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00117	47		 inc	 edi
  00118	84 c9		 test	 cl, cl
  0011a	75 f8		 jne	 SHORT $LL16@Paint
  0011c	8b c8		 mov	 ecx, eax
  0011e	c1 e9 02	 shr	 ecx, 2
  00121	f3 a5		 rep movsd
  00123	8b c8		 mov	 ecx, eax
  00125	83 e1 03	 and	 ecx, 3
  00128	f3 a4		 rep movsb

; 366  : 			strcat(this->m_szTempPaint, "], ");

  0012a	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  0012d	8d 49 00	 npad	 3
$LL17@Paint:
  00130	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00133	47		 inc	 edi
  00134	84 c0		 test	 al, al
  00136	75 f8		 jne	 SHORT $LL17@Paint
  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_03EDAPGMLK@?$FN?0?5?$AA@
  0013e	8b 75 ec	 mov	 esi, DWORD PTR tv200[ebp]
  00141	89 0f		 mov	 DWORD PTR [edi], ecx
  00143	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
$LN4@Paint:

; 352  : 
; 353  : 	for ( int i = 0; i< MAX_USER_IN_PARTY ; i++ )

  00146	8b 4d fc	 mov	 ecx, DWORD PTR _i$210873[ebp]
  00149	83 45 08 04	 add	 DWORD PTR tv254[ebp], 4
  0014d	41		 inc	 ecx
  0014e	89 4d fc	 mov	 DWORD PTR _i$210873[ebp], ecx
  00151	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00154	0f 8c f9 fe ff
	ff		 jl	 $LL19@Paint

; 367  : 		}
; 368  : 	}
; 369  : 
; 370  : 	LogAddTD(this->m_szTempPaint);

  0015a	53		 push	 ebx
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00161	83 c4 04	 add	 esp, 4
  00164	5b		 pop	 ebx
$LN7@Paint:
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi

; 371  : }

  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
?Paint@PartyClass@@QAEXH@Z ENDP				; PartyClass::Paint
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?PartyMemberLifeSend@PartyClass@@QAEXH@Z	; PartyClass::PartyMemberLifeSend
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PartyMemberLifeSend@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -548					; size = 4
tv258 = -544						; size = 4
tv263 = -540						; size = 4
tv407 = -536						; size = 4
tv405 = -536						; size = 4
_pCount$ = -532						; size = 4
tv380 = -528						; size = 4
_lOfs$ = -524						; size = 4
tv410 = -518						; size = 2
_sendbuf$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_party_number$ = 8					; size = 4
?PartyMemberLifeSend@PartyClass@@QAEXH@Z PROC		; PartyClass::PartyMemberLifeSend, COMDAT
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 02 00
	00		 sub	 esp, 548		; 00000224H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 386  : 	if ( this->IsParty(party_number) == FALSE )

  0001a	56		 push	 esi

; 417  : 			{
; 418  : 				this->m_PartyS[party_number].Number[i] = -1;

  0001b	89 bd dc fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00021	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00026	85 c0		 test	 eax, eax
  00028	0f 84 85 01 00
	00		 je	 $LN2@PartyMembe

; 387  : 	{
; 388  : 		return;
; 389  : 	}
; 390  : 
; 391  : 	PMSG_DEFAULT_COUNT pCount;
; 392  : 	PMSG_PARTYLIFEALL pList;
; 393  : 	int usern;
; 394  : 	char sendbuf[512];
; 395  : 	int lOfs = 0;
; 396  : 	int tlife = 0;
; 397  : 
; 398  : 	PHeadSetB((LPBYTE)&pCount, 0x44, sizeof(pCount));

  0002e	53		 push	 ebx
  0002f	6a 04		 push	 4
  00031	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _pCount$[ebp]
  00037	6a 44		 push	 68			; 00000044H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 399  : 	pCount.Count = this->m_PartyS[party_number].Count;

  0003f	8b c6		 mov	 eax, esi
  00041	6b c0 68	 imul	 eax, 104		; 00000068H
  00044	8a 54 38 08	 mov	 dl, BYTE PTR [eax+edi+8]
  00048	03 c7		 add	 eax, edi
  0004a	89 85 e0 fd ff
	ff		 mov	 DWORD PTR tv258[ebp], eax

; 400  : 	lOfs += sizeof(pCount);
; 401  : 	
; 402  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00050	8b c6		 mov	 eax, esi
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	33 db		 xor	 ebx, ebx
  00057	6b c0 1a	 imul	 eax, 26			; 0000001aH
  0005a	8d 4c 87 0c	 lea	 ecx, DWORD PTR [edi+eax*4+12]
  0005e	88 95 ef fd ff
	ff		 mov	 BYTE PTR _pCount$[ebp+3], dl
  00064	c7 85 f4 fd ff
	ff 04 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 4
  0006e	89 85 e4 fd ff
	ff		 mov	 DWORD PTR tv263[ebp], eax
  00074	89 8d f0 fd ff
	ff		 mov	 DWORD PTR tv380[ebp], ecx
  0007a	eb 0a		 jmp	 SHORT $LN10@PartyMembe
  0007c	8d 64 24 00	 npad	 4
$LL20@PartyMembe:

; 387  : 	{
; 388  : 		return;
; 389  : 	}
; 390  : 
; 391  : 	PMSG_DEFAULT_COUNT pCount;
; 392  : 	PMSG_PARTYLIFEALL pList;
; 393  : 	int usern;
; 394  : 	char sendbuf[512];
; 395  : 	int lOfs = 0;
; 396  : 	int tlife = 0;
; 397  : 
; 398  : 	PHeadSetB((LPBYTE)&pCount, 0x44, sizeof(pCount));

  00080	8b bd dc fd ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
$LN10@PartyMembe:

; 403  : 	{
; 404  : 		if ( (this->m_PartyS[party_number].Number[i] >= 0 ) && (this->m_PartyS[party_number].DbNumber[i] >= 0) )

  00086	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR tv380[ebp]
  0008c	8b 32		 mov	 esi, DWORD PTR [edx]
  0008e	85 f6		 test	 esi, esi
  00090	0f 88 c0 00 00
	00		 js	 $LN9@PartyMembe
  00096	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
  00099	83 7c 8f 34 00	 cmp	 DWORD PTR [edi+ecx*4+52], 0
  0009e	8d 7c 8f 34	 lea	 edi, DWORD PTR [edi+ecx*4+52]
  000a2	0f 8c ae 00 00
	00		 jl	 $LN9@PartyMembe

; 405  : 		{
; 406  : 			usern = this->m_PartyS[party_number].Number[i];
; 407  : 
; 408  : 			if ( gObjIsConnected(usern) != PLAYER_EMPTY )

  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000ae	83 c4 04	 add	 esp, 4
  000b1	85 c0		 test	 eax, eax
  000b3	0f 84 7c 00 00
	00		 je	 $LN6@PartyMembe

; 409  : 			{
; 410  : 				pList.Number = (i << 4) & 0xF0 ;
; 411  : 				tlife = ( (BYTE)(  gObj[usern].Life / ((gObj[usern].MaxLife + gObj[usern].AddLife )/10.0f)     )  ) & 0x0F;

  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bf	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 412  : 				pList.Number |= tlife;
; 413  : 				memcpy(sendbuf+lOfs, (char*)&pList, 1);

  000c5	d9 bd fa fd ff
	ff		 fnstcw	 WORD PTR tv410[ebp]
  000cb	d9 84 16 fc 00
	00 00		 fld	 DWORD PTR [esi+edx+252]
  000d2	db 84 16 4c 01
	00 00		 fild	 DWORD PTR [esi+edx+332]
  000d9	d8 84 16 00 01
	00 00		 fadd	 DWORD PTR [esi+edx+256]
  000e0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  000e6	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000e9	0f b7 85 fa fd
	ff ff		 movzx	 eax, WORD PTR tv410[ebp]
  000f0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000f5	89 85 e8 fd ff
	ff		 mov	 DWORD PTR tv407[ebp], eax
  000fb	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  00101	8a d3		 mov	 dl, bl
  00103	c0 e2 04	 shl	 dl, 4
  00106	de f9		 fdivp	 ST(1), ST(0)
  00108	d9 ad e8 fd ff
	ff		 fldcw	 WORD PTR tv407[ebp]
  0010e	db 9d e8 fd ff
	ff		 fistp	 DWORD PTR tv405[ebp]
  00114	8a 8d e8 fd ff
	ff		 mov	 cl, BYTE PTR tv405[ebp]
  0011a	80 e1 0f	 and	 cl, 15			; 0000000fH
  0011d	0a ca		 or	 cl, dl
  0011f	d9 ad fa fd ff
	ff		 fldcw	 WORD PTR tv410[ebp]
  00125	88 8c 05 fc fd
	ff ff		 mov	 BYTE PTR _sendbuf$[ebp+eax], cl

; 414  : 				lOfs++;

  0012c	40		 inc	 eax
  0012d	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], eax

; 415  : 			}
; 416  : 			else

  00133	eb 1b		 jmp	 SHORT $LN22@PartyMembe
$LN6@PartyMembe:

; 417  : 			{
; 418  : 				this->m_PartyS[party_number].Number[i] = -1;

  00135	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR tv380[ebp]
  0013b	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 419  : 				this->m_PartyS[party_number].DbNumber[i] = -1;
; 420  : 				this->m_PartyS[party_number].Count--;

  00141	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR tv258[ebp]
  00147	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1
  0014d	ff 48 08	 dec	 DWORD PTR [eax+8]
$LN22@PartyMembe:
  00150	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR tv263[ebp]
$LN9@PartyMembe:

; 400  : 	lOfs += sizeof(pCount);
; 401  : 	
; 402  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00156	83 85 f0 fd ff
	ff 04		 add	 DWORD PTR tv380[ebp], 4
  0015d	43		 inc	 ebx
  0015e	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00161	0f 8c 19 ff ff
	ff		 jl	 $LL20@PartyMembe

; 421  : 			}
; 422  : 		}
; 423  : 	}
; 424  : 
; 425  : 	pCount.h.size = lOfs;

  00167	8a 8d f4 fd ff
	ff		 mov	 cl, BYTE PTR _lOfs$[ebp]
  0016d	8b b5 e0 fd ff
	ff		 mov	 esi, DWORD PTR tv258[ebp]
  00173	88 8d ed fd ff
	ff		 mov	 BYTE PTR _pCount$[ebp+1], cl

; 426  : 	memcpy(sendbuf, (char*)&pCount, sizeof(pCount));

  00179	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _pCount$[ebp]
  0017f	89 95 fc fd ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp], edx
  00185	83 c6 0c	 add	 esi, 12			; 0000000cH
  00188	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
  0018d	5b		 pop	 ebx
  0018e	8b ff		 npad	 2
$LL21@PartyMembe:

; 429  : 	{
; 430  : 		usern = this->m_PartyS[party_number].Number[i];

  00190	8b 06		 mov	 eax, DWORD PTR [esi]

; 431  : 
; 432  : 		if ( usern >= 0 )

  00192	85 c0		 test	 eax, eax
  00194	78 17		 js	 SHORT $LN3@PartyMembe

; 433  : 		{
; 434  : 			DataSend(usern, (LPBYTE)sendbuf, lOfs);

  00196	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _lOfs$[ebp]
  0019c	51		 push	 ecx
  0019d	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _sendbuf$[ebp]
  001a3	52		 push	 edx
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001aa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@PartyMembe:

; 427  : 
; 428  : 	for (int i=0 ; i<MAX_USER_IN_PARTY ; i++ )

  001ad	83 c6 04	 add	 esi, 4
  001b0	4f		 dec	 edi
  001b1	75 dd		 jne	 SHORT $LL21@PartyMembe
$LN2@PartyMembe:

; 435  : 		}
; 436  : 	}
; 437  : }

  001b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b6	5f		 pop	 edi
  001b7	33 cd		 xor	 ecx, ebp
  001b9	5e		 pop	 esi
  001ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 04 00	 ret	 4
?PartyMemberLifeSend@PartyClass@@QAEXH@Z ENDP		; PartyClass::PartyMemberLifeSend
_TEXT	ENDS
PUBLIC	?GetPkLevel@PartyClass@@QAEDH@Z			; PartyClass::GetPkLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetPkLevel@PartyClass@@QAEDH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?GetPkLevel@PartyClass@@QAEDH@Z PROC			; PartyClass::GetPkLevel, COMDAT
; _this$ = ecx

; 441  : #if(FIX_PKLEVEL)
; 442  : 	return 3;

  00000	b0 03		 mov	 al, 3

; 443  : #else
; 444  : 	return this->m_PartyS[party_number].m_PartyPkLevel;
; 445  : #endif
; 446  : }

  00002	c2 04 00	 ret	 4
?GetPkLevel@PartyClass@@QAEDH@Z ENDP			; PartyClass::GetPkLevel
_TEXT	ENDS
PUBLIC	?SetPkLevel@PartyClass@@QAEXHHHD@Z		; PartyClass::SetPkLevel
; Function compile flags: /Ogtp
;	COMDAT ?SetPkLevel@PartyClass@@QAEXHHHD@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
_pklevel$ = 20						; size = 1
?SetPkLevel@PartyClass@@QAEXHHHD@Z PROC			; PartyClass::SetPkLevel, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 450  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	74 41		 je	 SHORT $LN2@SetPkLevel

; 451  : 	{
; 452  : 		return;
; 453  : 	}
; 454  : 	
; 455  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00011	8b d6		 mov	 edx, esi
  00013	33 c0		 xor	 eax, eax
  00015	6b d2 1a	 imul	 edx, 26			; 0000001aH
  00018	57		 push	 edi
  00019	8b 7d 10	 mov	 edi, DWORD PTR _dbnumber$[ebp]
  0001c	8d 74 91 0c	 lea	 esi, DWORD PTR [ecx+edx*4+12]
  00020	53		 push	 ebx
$LL4@SetPkLevel:

; 456  : 	{
; 457  : 		if ( (this->m_PartyS[party_number].Number[i] == usernumber ) && (this->m_PartyS[party_number].DbNumber[i] == dbnumber) )

  00021	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00023	3b 5d 0c	 cmp	 ebx, DWORD PTR _usernumber$[ebp]
  00026	75 09		 jne	 SHORT $LN3@SetPkLevel
  00028	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  0002b	39 7c 99 34	 cmp	 DWORD PTR [ecx+ebx*4+52], edi
  0002f	74 10		 je	 SHORT $LN9@SetPkLevel
$LN3@SetPkLevel:

; 451  : 	{
; 452  : 		return;
; 453  : 	}
; 454  : 	
; 455  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00031	40		 inc	 eax
  00032	83 c6 04	 add	 esi, 4
  00035	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00038	7c e7		 jl	 SHORT $LL4@SetPkLevel
  0003a	5b		 pop	 ebx
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 460  : 			break;
; 461  : 		}
; 462  : 	}
; 463  : }

  0003d	5d		 pop	 ebp
  0003e	c2 10 00	 ret	 16			; 00000010H
$LN9@SetPkLevel:

; 458  : 		{
; 459  : 			this->m_PartyS[party_number].m_PkLevel[i] = pklevel;

  00041	8b 55 08	 mov	 edx, DWORD PTR _party_number$[ebp]
  00044	6b d2 68	 imul	 edx, 104		; 00000068H
  00047	03 d0		 add	 edx, eax
  00049	8a 45 14	 mov	 al, BYTE PTR _pklevel$[ebp]
  0004c	5b		 pop	 ebx
  0004d	88 44 0a 60	 mov	 BYTE PTR [edx+ecx+96], al
  00051	5f		 pop	 edi
$LN2@SetPkLevel:
  00052	5e		 pop	 esi

; 460  : 			break;
; 461  : 		}
; 462  : 	}
; 463  : }

  00053	5d		 pop	 ebp
  00054	c2 10 00	 ret	 16			; 00000010H
?SetPkLevel@PartyClass@@QAEXHHHD@Z ENDP			; PartyClass::SetPkLevel
_TEXT	ENDS
PUBLIC	?SetPkCount@PartyClass@@QAEXH@Z			; PartyClass::SetPkCount
; Function compile flags: /Ogtp
;	COMDAT ?SetPkCount@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?SetPkCount@PartyClass@@QAEXH@Z PROC			; PartyClass::SetPkCount, COMDAT
; _this$ = ecx

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 467  : 	int PKUserCount = 0;//lc2

  00003	8b 45 08	 mov	 eax, DWORD PTR _party_number$[ebp]
  00006	6b c0 68	 imul	 eax, 104		; 00000068H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi

; 468  : 	int usern = 0;//lc3
; 469  : 
; 470  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  0000d	33 d2		 xor	 edx, edx
  0000f	03 c1		 add	 eax, ecx
  00011	8d 70 10	 lea	 esi, DWORD PTR [eax+16]
$LL6@SetPkCount:

; 471  : 	{
; 472  : 		usern = this->m_PartyS[party_number].Number[i];
; 473  : 
; 474  : 		if( usern >= 0 && this->m_PartyS[party_number].m_PkLevel[i] >= 5)

  00014	83 7e fc 00	 cmp	 DWORD PTR [esi-4], 0
  00018	7c 12		 jl	 SHORT $LN5@SetPkCount
  0001a	8a 4c 10 60	 mov	 cl, BYTE PTR [eax+edx+96]
  0001e	80 f9 05	 cmp	 cl, 5
  00021	7c 09		 jl	 SHORT $LN5@SetPkCount

; 475  : 		{
; 476  : 			if( this->m_PartyS[party_number].m_PartyPkLevel  < this->m_PartyS[party_number].m_PkLevel[i] )

  00023	38 48 6a	 cmp	 BYTE PTR [eax+106], cl
  00026	7d 03		 jge	 SHORT $LN2@SetPkCount

; 477  : 			{
; 478  : 				this->m_PartyS[party_number].m_PartyPkLevel = this->m_PartyS[party_number].m_PkLevel[i];

  00028	88 48 6a	 mov	 BYTE PTR [eax+106], cl
$LN2@SetPkCount:

; 479  : 			}
; 480  : 			PKUserCount++;

  0002b	47		 inc	 edi
$LN5@SetPkCount:

; 471  : 	{
; 472  : 		usern = this->m_PartyS[party_number].Number[i];
; 473  : 
; 474  : 		if( usern >= 0 && this->m_PartyS[party_number].m_PkLevel[i] >= 5)

  0002c	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0002f	7c 12		 jl	 SHORT $LN13@SetPkCount
  00031	8a 4c 10 61	 mov	 cl, BYTE PTR [eax+edx+97]
  00035	80 f9 05	 cmp	 cl, 5
  00038	7c 09		 jl	 SHORT $LN13@SetPkCount

; 475  : 		{
; 476  : 			if( this->m_PartyS[party_number].m_PartyPkLevel  < this->m_PartyS[party_number].m_PkLevel[i] )

  0003a	38 48 6a	 cmp	 BYTE PTR [eax+106], cl
  0003d	7d 03		 jge	 SHORT $LN12@SetPkCount

; 477  : 			{
; 478  : 				this->m_PartyS[party_number].m_PartyPkLevel = this->m_PartyS[party_number].m_PkLevel[i];

  0003f	88 48 6a	 mov	 BYTE PTR [eax+106], cl
$LN12@SetPkCount:

; 479  : 			}
; 480  : 			PKUserCount++;

  00042	47		 inc	 edi
$LN13@SetPkCount:

; 471  : 	{
; 472  : 		usern = this->m_PartyS[party_number].Number[i];
; 473  : 
; 474  : 		if( usern >= 0 && this->m_PartyS[party_number].m_PkLevel[i] >= 5)

  00043	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00047	7c 12		 jl	 SHORT $LN15@SetPkCount
  00049	8a 4c 10 62	 mov	 cl, BYTE PTR [eax+edx+98]
  0004d	80 f9 05	 cmp	 cl, 5
  00050	7c 09		 jl	 SHORT $LN15@SetPkCount

; 475  : 		{
; 476  : 			if( this->m_PartyS[party_number].m_PartyPkLevel  < this->m_PartyS[party_number].m_PkLevel[i] )

  00052	38 48 6a	 cmp	 BYTE PTR [eax+106], cl
  00055	7d 03		 jge	 SHORT $LN14@SetPkCount

; 477  : 			{
; 478  : 				this->m_PartyS[party_number].m_PartyPkLevel = this->m_PartyS[party_number].m_PkLevel[i];

  00057	88 48 6a	 mov	 BYTE PTR [eax+106], cl
$LN14@SetPkCount:

; 479  : 			}
; 480  : 			PKUserCount++;

  0005a	47		 inc	 edi
$LN15@SetPkCount:

; 471  : 	{
; 472  : 		usern = this->m_PartyS[party_number].Number[i];
; 473  : 
; 474  : 		if( usern >= 0 && this->m_PartyS[party_number].m_PkLevel[i] >= 5)

  0005b	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0005f	7c 12		 jl	 SHORT $LN17@SetPkCount
  00061	8a 4c 10 63	 mov	 cl, BYTE PTR [eax+edx+99]
  00065	80 f9 05	 cmp	 cl, 5
  00068	7c 09		 jl	 SHORT $LN17@SetPkCount

; 475  : 		{
; 476  : 			if( this->m_PartyS[party_number].m_PartyPkLevel  < this->m_PartyS[party_number].m_PkLevel[i] )

  0006a	38 48 6a	 cmp	 BYTE PTR [eax+106], cl
  0006d	7d 03		 jge	 SHORT $LN16@SetPkCount

; 477  : 			{
; 478  : 				this->m_PartyS[party_number].m_PartyPkLevel = this->m_PartyS[party_number].m_PkLevel[i];

  0006f	88 48 6a	 mov	 BYTE PTR [eax+106], cl
$LN16@SetPkCount:

; 479  : 			}
; 480  : 			PKUserCount++;

  00072	47		 inc	 edi
$LN17@SetPkCount:

; 471  : 	{
; 472  : 		usern = this->m_PartyS[party_number].Number[i];
; 473  : 
; 474  : 		if( usern >= 0 && this->m_PartyS[party_number].m_PkLevel[i] >= 5)

  00073	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00077	7c 12		 jl	 SHORT $LN19@SetPkCount
  00079	8a 4c 10 64	 mov	 cl, BYTE PTR [eax+edx+100]
  0007d	80 f9 05	 cmp	 cl, 5
  00080	7c 09		 jl	 SHORT $LN19@SetPkCount

; 475  : 		{
; 476  : 			if( this->m_PartyS[party_number].m_PartyPkLevel  < this->m_PartyS[party_number].m_PkLevel[i] )

  00082	38 48 6a	 cmp	 BYTE PTR [eax+106], cl
  00085	7d 03		 jge	 SHORT $LN18@SetPkCount

; 477  : 			{
; 478  : 				this->m_PartyS[party_number].m_PartyPkLevel = this->m_PartyS[party_number].m_PkLevel[i];

  00087	88 48 6a	 mov	 BYTE PTR [eax+106], cl
$LN18@SetPkCount:

; 479  : 			}
; 480  : 			PKUserCount++;

  0008a	47		 inc	 edi
$LN19@SetPkCount:
  0008b	83 c2 05	 add	 edx, 5

; 467  : 	int PKUserCount = 0;//lc2

  0008e	83 c6 14	 add	 esi, 20			; 00000014H

; 468  : 	int usern = 0;//lc3
; 469  : 
; 470  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00091	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00094	0f 8c 7a ff ff
	ff		 jl	 $LL6@SetPkCount

; 481  : 		}
; 482  : 	}
; 483  : 	
; 484  : 	this->m_PartyS[party_number].m_PkCount = PKUserCount;

  0009a	89 78 6c	 mov	 DWORD PTR [eax+108], edi

; 485  : 
; 486  : 	if( PKUserCount == 0 )

  0009d	85 ff		 test	 edi, edi
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	75 04		 jne	 SHORT $LN1@SetPkCount

; 487  : 	{
; 488  : 		this->m_PartyS[party_number].m_PartyPkLevel = 3;

  000a3	c6 40 6a 03	 mov	 BYTE PTR [eax+106], 3
$LN1@SetPkCount:

; 489  : 	}
; 490  : }

  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
?SetPkCount@PartyClass@@QAEXH@Z ENDP			; PartyClass::SetPkCount
_TEXT	ENDS
PUBLIC	?ResetPkLevel@PartyClass@@QAEXH@Z		; PartyClass::ResetPkLevel
; Function compile flags: /Ogtp
;	COMDAT ?ResetPkLevel@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?ResetPkLevel@PartyClass@@QAEXH@Z PROC			; PartyClass::ResetPkLevel, COMDAT
; _this$ = ecx

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 494  : 	int usern = 0;
; 495  : 
; 496  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00003	8b 55 08	 mov	 edx, DWORD PTR _party_number$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b c2		 mov	 eax, edx
  0000a	33 f6		 xor	 esi, esi
  0000c	6b c0 68	 imul	 eax, 104		; 00000068H
  0000f	8d 5c 08 0c	 lea	 ebx, DWORD PTR [eax+ecx+12]
  00013	57		 push	 edi
  00014	8b fb		 mov	 edi, ebx
$LL4@ResetPkLev:

; 497  : 	{
; 498  : 		usern = this->m_PartyS[party_number].Number[i];
; 499  : 
; 500  : 		if( usern >= 0 )

  00016	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00019	7d 10		 jge	 SHORT $LN8@ResetPkLev

; 494  : 	int usern = 0;
; 495  : 
; 496  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  0001b	46		 inc	 esi
  0001c	83 c7 04	 add	 edi, 4
  0001f	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00022	7c f2		 jl	 SHORT $LL4@ResetPkLev
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx

; 508  : 			break;
; 509  : 		}
; 510  : 	}
; 511  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN8@ResetPkLev:

; 501  : 		{
; 502  : 			this->m_PartyS[party_number].Number[0] = this->m_PartyS[party_number].Number[i];

  0002b	6b d2 1a	 imul	 edx, 26			; 0000001aH
  0002e	03 d6		 add	 edx, esi
  00030	8b 7c 91 0c	 mov	 edi, DWORD PTR [ecx+edx*4+12]
  00034	89 3b		 mov	 DWORD PTR [ebx], edi

; 503  : 			this->m_PartyS[party_number].Number[i] = -1;
; 504  : 			this->m_PartyS[party_number].DbNumber[0] = this->m_PartyS[party_number].DbNumber[i];

  00036	8b 5c 91 34	 mov	 ebx, DWORD PTR [ecx+edx*4+52]
  0003a	83 cf ff	 or	 edi, -1
  0003d	89 7c 91 0c	 mov	 DWORD PTR [ecx+edx*4+12], edi
  00041	89 5c 08 34	 mov	 DWORD PTR [eax+ecx+52], ebx

; 505  : 			this->m_PartyS[party_number].DbNumber[i] = -1;

  00045	89 7c 91 34	 mov	 DWORD PTR [ecx+edx*4+52], edi

; 506  : 			this->m_PartyS[party_number].m_PkLevel[0] = this->m_PartyS[party_number].m_PkLevel[i];

  00049	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0004c	8d 74 0a 60	 lea	 esi, DWORD PTR [edx+ecx+96]
  00050	8a 16		 mov	 dl, BYTE PTR [esi]
  00052	5f		 pop	 edi
  00053	88 54 08 60	 mov	 BYTE PTR [eax+ecx+96], dl

; 507  : 			this->m_PartyS[party_number].m_PkLevel[i] = 3;

  00057	c6 06 03	 mov	 BYTE PTR [esi], 3
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 508  : 			break;
; 509  : 		}
; 510  : 	}
; 511  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?ResetPkLevel@PartyClass@@QAEXH@Z ENDP			; PartyClass::ResetPkLevel
_TEXT	ENDS
PUBLIC	?ChangeLeader@PartyClass@@QAEXH@Z		; PartyClass::ChangeLeader
; Function compile flags: /Ogtp
;	COMDAT ?ChangeLeader@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?ChangeLeader@PartyClass@@QAEXH@Z PROC			; PartyClass::ChangeLeader, COMDAT
; _this$ = ecx

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 516  : 	for( int i = 0; i < MAX_USER_IN_PARTY; i++ )

  00003	8b 55 08	 mov	 edx, DWORD PTR _party_number$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b c2		 mov	 eax, edx
  0000a	33 f6		 xor	 esi, esi
  0000c	6b c0 68	 imul	 eax, 104		; 00000068H
  0000f	8d 5c 08 0c	 lea	 ebx, DWORD PTR [eax+ecx+12]
  00013	57		 push	 edi
  00014	8b fb		 mov	 edi, ebx
$LL4@ChangeLead:

; 517  : 	{
; 518  : 		if( this->m_PartyS[party_number].Number[i] >= 0 )

  00016	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00019	7d 10		 jge	 SHORT $LN8@ChangeLead

; 516  : 	for( int i = 0; i < MAX_USER_IN_PARTY; i++ )

  0001b	46		 inc	 esi
  0001c	83 c7 04	 add	 edi, 4
  0001f	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00022	7c f2		 jl	 SHORT $LL4@ChangeLead
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx

; 526  : 			// ----
; 527  : 			return;
; 528  : 		}
; 529  : 	}
; 530  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN8@ChangeLead:

; 519  : 		{
; 520  : 			this->m_PartyS[party_number].Number[0]			= this->m_PartyS[party_number].Number[i];

  0002b	6b d2 1a	 imul	 edx, 26			; 0000001aH
  0002e	03 d6		 add	 edx, esi
  00030	8b 7c 91 0c	 mov	 edi, DWORD PTR [ecx+edx*4+12]
  00034	89 3b		 mov	 DWORD PTR [ebx], edi

; 521  : 			this->m_PartyS[party_number].Number[i]			= -1;
; 522  : 			this->m_PartyS[party_number].DbNumber[0]		= this->m_PartyS[party_number].DbNumber[i];

  00036	8b 5c 91 34	 mov	 ebx, DWORD PTR [ecx+edx*4+52]
  0003a	83 cf ff	 or	 edi, -1
  0003d	89 7c 91 0c	 mov	 DWORD PTR [ecx+edx*4+12], edi
  00041	89 5c 08 34	 mov	 DWORD PTR [eax+ecx+52], ebx

; 523  : 			this->m_PartyS[party_number].DbNumber[i]		= -1;

  00045	89 7c 91 34	 mov	 DWORD PTR [ecx+edx*4+52], edi

; 524  : 			this->m_PartyS[party_number].m_PkLevel[0]		= this->m_PartyS[party_number].m_PkLevel[i];

  00049	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0004c	8d 74 0a 60	 lea	 esi, DWORD PTR [edx+ecx+96]
  00050	8a 16		 mov	 dl, BYTE PTR [esi]
  00052	5f		 pop	 edi
  00053	88 54 08 60	 mov	 BYTE PTR [eax+ecx+96], dl

; 525  : 			this->m_PartyS[party_number].m_PkLevel[i]		= 3;

  00057	c6 06 03	 mov	 BYTE PTR [esi], 3
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 526  : 			// ----
; 527  : 			return;
; 528  : 		}
; 529  : 	}
; 530  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?ChangeLeader@PartyClass@@QAEXH@Z ENDP			; PartyClass::ChangeLeader
_TEXT	ENDS
PUBLIC	??_C@_0EP@LJAEGDAD@?$FLHACKTOOL?$FN?5?3?5NPC?9TradeRequest?$CIre@ ; `string'
PUBLIC	?ReAdd@PartyClass@@QAEXH@Z			; PartyClass::ReAdd
EXTRN	?CGPartyListAll@@YAXH@Z:PROC			; CGPartyListAll
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?SearchPartyZtUSer@@YAXPAUOBJECTSTRUCT@@AAH1@Z:PROC ; SearchPartyZtUSer
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
;	COMDAT ??_C@_0EP@LJAEGDAD@?$FLHACKTOOL?$FN?5?3?5NPC?9TradeRequest?$CIre@
CONST	SEGMENT
??_C@_0EP@LJAEGDAD@?$FLHACKTOOL?$FN?5?3?5NPC?9TradeRequest?$CIre@ DB '[HA'
	DB	'CKTOOL] : NPC-TradeRequest(result) npc:%d ip:%s account:%s na'
	DB	'me:%s State:%d', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReAdd@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_PartyTick$ = -8					; size = 4
_Party$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?ReAdd@PartyClass@@QAEXH@Z PROC				; PartyClass::ReAdd, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 534  : 	if(g_ZtLicense.user.PartySave)

  00006	80 3d e4 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+228, 0
  0000d	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00010	0f 85 a8 01 00
	00		 jne	 $LN11@ReAdd

; 535  : 	{
; 536  : 		return;
; 537  : 	}
; 538  : 
; 539  : 	if(!ZtConfig.CommonServer.RePartyEnable)return;

  00016	83 3d 00 01 00
	00 00		 cmp	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+256, 0
  0001d	0f 84 9b 01 00
	00		 je	 $LN11@ReAdd

; 540  : 
; 541  : 	LPOBJ lpObj = &gObj[aIndex];

  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	56		 push	 esi
  0002a	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0002d	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00033	57		 push	 edi

; 542  : 
; 543  : 	int pnumber = -1;
; 544  : 
; 545  : 	int number = -1;
; 546  : 	int Party = -1;
; 547  : 
; 548  : 	int PartyTick = -1;
; 549  : 
; 550  : 	SearchPartyZtUSer(lpObj, Party, PartyTick);

  00034	8d 45 f8	 lea	 eax, DWORD PTR _PartyTick$[ebp]
  00037	50		 push	 eax
  00038	8d 4d fc	 lea	 ecx, DWORD PTR _Party$[ebp]
  0003b	51		 push	 ecx
  0003c	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0003f	83 cf ff	 or	 edi, -1
  00042	50		 push	 eax
  00043	89 7d fc	 mov	 DWORD PTR _Party$[ebp], edi
  00046	89 7d f8	 mov	 DWORD PTR _PartyTick$[ebp], edi
  00049	e8 00 00 00 00	 call	 ?SearchPartyZtUSer@@YAXPAUOBJECTSTRUCT@@AAH1@Z ; SearchPartyZtUSer
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 551  : 
; 552  : 	if(Party == -1)

  00051	39 7d fc	 cmp	 DWORD PTR _Party$[ebp], edi
  00054	0f 84 62 01 00
	00		 je	 $LN29@ReAdd

; 553  : 	{
; 554  : 		return;
; 555  : 	}
; 556  : 
; 557  : 	for( int n = OBJ_STARTUSERINDZT; n < OBJMAX; n++ )

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005f	53		 push	 ebx
  00060	bb b0 36 00 00	 mov	 ebx, 14000		; 000036b0H
  00065	bf 00 a7 40 09	 mov	 edi, 155232000		; 0940a700H
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL28@ReAdd:

; 558  : 	{
; 559  : 		if( gObj[n].Connected >= PLAYER_PLAYING )

  00070	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  00075	7c 22		 jl	 SHORT $LN18@ReAdd

; 560  : 		{
; 561  : 			if(gObj[n].PartyNumber == Party)

  00077	8b 4d fc	 mov	 ecx, DWORD PTR _Party$[ebp]
  0007a	39 8c 07 2c 04
	00 00		 cmp	 DWORD PTR [edi+eax+1068], ecx
  00081	75 16		 jne	 SHORT $LN18@ReAdd

; 562  : 			{
; 563  : 				if(GetTickCount() - PartyTick < ZtConfig.CommonServer.RePartyTime)

  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00089	2b 45 f8	 sub	 eax, DWORD PTR _PartyTick$[ebp]
  0008c	3b 05 04 01 00
	00		 cmp	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+260
  00092	72 1d		 jb	 SHORT $LN26@ReAdd
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN18@ReAdd:

; 553  : 	{
; 554  : 		return;
; 555  : 	}
; 556  : 
; 557  : 	for( int n = OBJ_STARTUSERINDZT; n < OBJMAX; n++ )

  00099	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  0009f	43		 inc	 ebx
  000a0	81 ff 80 d7 e9
	09		 cmp	 edi, 166320000		; 09e9d780H
  000a6	7c c8		 jl	 SHORT $LL28@ReAdd
  000a8	5b		 pop	 ebx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi

; 655  : 	}
; 656  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN26@ReAdd:

; 564  : 				{
; 565  : 					number = n;
; 566  : 					break;
; 567  : 				}
; 568  : 			}
; 569  : 		}
; 570  : 	}
; 571  : 
; 572  : 	if(number == -1) return;

  000b1	83 fb ff	 cmp	 ebx, -1
  000b4	0f 84 01 01 00
	00		 je	 $LN31@ReAdd

; 573  : 
; 574  : 	//bool br = false;
; 575  : 
; 576  : 	//for( int n = OBJ_STARTUSERINDZT; n < OBJMAX; n++ )
; 577  : 	//{
; 578  : 	//	if( gObj[n].Connected >= PLAYER_PLAYING )
; 579  : 	//	{
; 580  : 	//		if(gObj[n].PartyNumber >= 0)
; 581  : 	//		{
; 582  : 	//			for(int i=0;i<5;i++)
; 583  : 	//			{
; 584  : 	//				if(strcmp(gObj[aIndex].Name , this->m_PartyS[gObj[n].PartyNumber].Names[i]) == 0 )
; 585  : 	//				{
; 586  : 	//					if(GetTickCount() - this->m_PartyS[gObj[n].PartyNumber].TickTimes[i] < ZtConfig.CommonServer.RePartyTime)	//1000 - 1 Sec
; 587  : 	//					{
; 588  : 	//						number = n;
; 589  : 	//					}
; 590  : 	//					br = true;
; 591  : 	//					break;
; 592  : 	//				}
; 593  : 	//			}
; 594  : 	//		}
; 595  : 	//	}
; 596  : 	//	if(br == true)
; 597  : 	//	{
; 598  : 	//		break;
; 599  : 	//	}
; 600  : 	//}
; 601  : 
; 602  : 	//if(number == -1)
; 603  : 	//{
; 604  : 	//	return;
; 605  : 	//}
; 606  : 
; 607  : 	if ( number < 0 || number > OBJMAX-1)

  000ba	85 db		 test	 ebx, ebx
  000bc	0f 88 f9 00 00
	00		 js	 $LN31@ReAdd
  000c2	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  000c8	0f 8f ed 00 00
	00		 jg	 $LN31@ReAdd

; 608  : 	{
; 609  : 		return;
; 610  : 	}
; 611  : 
; 612  : 	if ( !gObjIsConnected(&gObj[aIndex]))

  000ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d4	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000dd	83 c4 04	 add	 esp, 4
  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 d3 00 00
	00		 je	 $LN31@ReAdd

; 613  : 	{
; 614  : 		return;
; 615  : 	}
; 616  : 
; 617  : 	if ( !gObjIsConnected(&gObj[number]))

  000e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ee	8b fb		 mov	 edi, ebx
  000f0	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  000f6	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000ff	83 c4 04	 add	 esp, 4
  00102	85 c0		 test	 eax, eax
  00104	0f 84 b1 00 00
	00		 je	 $LN31@ReAdd

; 618  : 	{
; 619  : 		return;
; 620  : 	}
; 621  : 
; 622  : 	if( gObj[number].Type != OBJ_USER ) //season4 add-on

  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010f	66 83 7c 07 68
	01		 cmp	 WORD PTR [edi+eax+104], 1
  00115	74 3f		 je	 SHORT $LN8@ReAdd

; 623  : 	{
; 624  : 		LogAddC(2,"[HACKTOOL] : NPC-TradeRequest(result) npc:%d ip:%s account:%s name:%s State:%d",
; 625  : 			gObj[number].Class,gObj[aIndex].Ip_addr,gObj[aIndex].AccountID,
; 626  : 			gObj[aIndex].Name,gObj[aIndex].Connected);

  00117	8b 4c 06 04	 mov	 ecx, DWORD PTR [esi+eax+4]
  0011b	51		 push	 ecx
  0011c	8d 54 06 77	 lea	 edx, DWORD PTR [esi+eax+119]
  00120	52		 push	 edx
  00121	8d 4c 06 6c	 lea	 ecx, DWORD PTR [esi+eax+108]
  00125	51		 push	 ecx
  00126	8d 54 06 18	 lea	 edx, DWORD PTR [esi+eax+24]
  0012a	0f b7 84 07 b8
	00 00 00	 movzx	 eax, WORD PTR [edi+eax+184]
  00132	52		 push	 edx
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LJAEGDAD@?$FLHACKTOOL?$FN?5?3?5NPC?9TradeRequest?$CIre@
  00139	6a 02		 push	 2
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 627  : 		CloseClient(aIndex);

  00141	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00144	51		 push	 ecx
  00145	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0014a	83 c4 20	 add	 esp, 32			; 00000020H
  0014d	5b		 pop	 ebx
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi

; 655  : 	}
; 656  : }

  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 04 00	 ret	 4
$LN8@ReAdd:

; 628  : 		return;
; 629  : 	}
; 630  : 
; 631  : 	if ( gObj[number].PartyNumber >= 0  )

  00156	83 bc 07 2c 04
	00 00 00	 cmp	 DWORD PTR [edi+eax+1068], 0
  0015e	7c 5b		 jl	 SHORT $LN31@ReAdd

; 632  : 	{
; 633  : 		pnumber = gObj[number].PartyNumber;
; 634  : 		int iPartyPos = this->Add(gObj[number].PartyNumber, aIndex, gObj[aIndex].DBNumber, gObj[aIndex].Level);

  00160	0f bf 94 06 be
	00 00 00	 movsx	 edx, WORD PTR [esi+eax+190]
  00168	8b 9c 07 2c 04
	00 00		 mov	 ebx, DWORD PTR [edi+eax+1068]
  0016f	8b 44 06 2c	 mov	 eax, DWORD PTR [esi+eax+44]
  00173	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00176	52		 push	 edx
  00177	50		 push	 eax
  00178	51		 push	 ecx
  00179	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0017c	53		 push	 ebx
  0017d	e8 00 00 00 00	 call	 ?Add@PartyClass@@QAEHHHHH@Z ; PartyClass::Add

; 635  : 
; 636  : 		if ( iPartyPos >= 0 )

  00182	85 c0		 test	 eax, eax
  00184	78 1e		 js	 SHORT $LN6@ReAdd

; 637  : 		{
; 638  : 			gObj[aIndex].PartyNumber = gObj[number].PartyNumber;

  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018b	8b 94 07 2c 04
	00 00		 mov	 edx, DWORD PTR [edi+eax+1068]

; 639  : 
; 640  : 			this->Paint(pnumber);

  00192	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	53		 push	 ebx
  00196	89 94 06 2c 04
	00 00		 mov	 DWORD PTR [esi+eax+1068], edx
  0019d	e8 00 00 00 00	 call	 ?Paint@PartyClass@@QAEXH@Z ; PartyClass::Paint
  001a2	eb 0a		 jmp	 SHORT $LN2@ReAdd
$LN6@ReAdd:

; 641  : 		}
; 642  : 		else if ( iPartyPos == -1 )

  001a4	83 f8 ff	 cmp	 eax, -1
  001a7	74 12		 je	 SHORT $LN31@ReAdd

; 643  : 		{
; 644  : 			return;
; 645  : 		}
; 646  : 		else if ( iPartyPos == -2 )

  001a9	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  001ac	74 0d		 je	 SHORT $LN31@ReAdd
$LN2@ReAdd:

; 647  : 		{
; 648  : 			return;
; 649  : 		}
; 650  : 	}
; 651  : 
; 652  : 	if ( pnumber >= 0 )

  001ae	85 db		 test	 ebx, ebx
  001b0	78 09		 js	 SHORT $LN31@ReAdd

; 653  : 	{
; 654  : 		CGPartyListAll(pnumber);

  001b2	53		 push	 ebx
  001b3	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  001b8	83 c4 04	 add	 esp, 4
$LN31@ReAdd:
  001bb	5b		 pop	 ebx
$LN29@ReAdd:
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
$LN11@ReAdd:

; 655  : 	}
; 656  : }

  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c2 04 00	 ret	 4
?ReAdd@PartyClass@@QAEXH@Z ENDP				; PartyClass::ReAdd
_TEXT	ENDS
PUBLIC	??_C@_0BF@OFNDHPCK@New?5party?5leader?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CD@LEEFHALA@Your?5character?5is?5not?5party?5lead@ ; `string'
PUBLIC	??_C@_0BL@DDDPOLAI@Target?5is?5not?5party?5member?$AA@ ; `string'
PUBLIC	??_C@_0BP@GIPBDNCJ@Your?5character?5is?5not?5in?5party?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SetLeader@PartyClass@@QAE_NHH@Z		; PartyClass::SetLeader
EXTRN	?CGPartyList@@YAXH@Z:PROC			; CGPartyList
EXTRN	_sprintf:PROC
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BF@OFNDHPCK@New?5party?5leader?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@OFNDHPCK@New?5party?5leader?3?5?$CFs?$AA@ DB 'New party leader:'
	DB	' %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LEEFHALA@Your?5character?5is?5not?5party?5lead@
CONST	SEGMENT
??_C@_0CD@LEEFHALA@Your?5character?5is?5not?5party?5lead@ DB 'Your charac'
	DB	'ter is not party leader', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DDDPOLAI@Target?5is?5not?5party?5member?$AA@
CONST	SEGMENT
??_C@_0BL@DDDPOLAI@Target?5is?5not?5party?5member?$AA@ DB 'Target is not '
	DB	'party member', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GIPBDNCJ@Your?5character?5is?5not?5in?5party?$AA@
CONST	SEGMENT
??_C@_0BP@GIPBDNCJ@Your?5character?5is?5not?5in?5party?$AA@ DB 'Your char'
	DB	'acter is not in party', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetLeader@PartyClass@@QAE_NHH@Z
_TEXT	SEGMENT
_lpTargetObj$ = -112					; size = 4
tv265 = -108						; size = 4
_TempIndex$ = -108					; size = 4
_Text$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_OldLeader$ = 8						; size = 4
_NewLeader$ = 12					; size = 4
?SetLeader@PartyClass@@QAE_NHH@Z PROC			; PartyClass::SetLeader, COMDAT
; _this$ = ecx

; 659  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _NewLeader$[ebp]
  00013	53		 push	 ebx

; 660  : 	LPOBJ lpObj			= &gObj[OldLeader];
; 661  : 	LPOBJ lpTargetObj	= &gObj[NewLeader];		

  00014	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001a	8b 5d 08	 mov	 ebx, DWORD PTR _OldLeader$[ebp]
  0001d	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00023	56		 push	 esi
  00024	8b f1		 mov	 esi, ecx
  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	57		 push	 edi

; 662  : 	// ----
; 663  : 	int PartyNumber		= lpObj->PartyNumber;

  0002d	8b bc 0b 2c 04
	00 00		 mov	 edi, DWORD PTR [ebx+ecx+1068]
  00034	03 d9		 add	 ebx, ecx
  00036	03 c1		 add	 eax, ecx

; 664  : 	// ----
; 665  : 	if( !this->IsParty(PartyNumber) )

  00038	57		 push	 edi
  00039	8b ce		 mov	 ecx, esi
  0003b	89 45 90	 mov	 DWORD PTR _lpTargetObj$[ebp], eax
  0003e	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00043	85 c0		 test	 eax, eax
  00045	75 27		 jne	 SHORT $LN7@SetLeader

; 666  : 	{
; 667  : 		GCServerMsgStringSend("Your character is not in party", lpObj->m_Index, 1);

  00047	8b 03		 mov	 eax, DWORD PTR [ebx]
  00049	6a 01		 push	 1
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GIPBDNCJ@Your?5character?5is?5not?5in?5party?$AA@
  00051	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 668  : 		return false;

  0005b	32 c0		 xor	 al, al
  0005d	5b		 pop	 ebx

; 704  : 		}
; 705  : 	}
; 706  : 	// ----
; 707  : 	return true;
; 708  : }

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00061	33 cd		 xor	 ecx, ebp
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
$LN7@SetLeader:

; 669  : 	}
; 670  : 	// ----
; 671  : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  0006e	8b 4d 90	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00071	3b b9 2c 04 00
	00		 cmp	 edi, DWORD PTR [ecx+1068]
  00077	74 27		 je	 SHORT $LN6@SetLeader

; 672  : 	{
; 673  : 		GCServerMsgStringSend("Target is not party member", lpObj->m_Index, 1);

  00079	8b 13		 mov	 edx, DWORD PTR [ebx]
  0007b	6a 01		 push	 1
  0007d	52		 push	 edx
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DDDPOLAI@Target?5is?5not?5party?5member?$AA@
  00083	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi

; 674  : 		return false;

  0008d	32 c0		 xor	 al, al
  0008f	5b		 pop	 ebx

; 704  : 		}
; 705  : 	}
; 706  : 	// ----
; 707  : 	return true;
; 708  : }

  00090	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
$LN6@SetLeader:

; 675  : 	}
; 676  : 	// ----
; 677  : 	if( !this->Isleader(PartyNumber, lpObj->m_Index, lpObj->DBNumber) )

  000a0	8b 4b 2c	 mov	 ecx, DWORD PTR [ebx+44]
  000a3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a5	51		 push	 ecx
  000a6	50		 push	 eax
  000a7	57		 push	 edi
  000a8	8b ce		 mov	 ecx, esi
  000aa	e8 00 00 00 00	 call	 ?Isleader@PartyClass@@QAEHHHH@Z ; PartyClass::Isleader
  000af	85 c0		 test	 eax, eax
  000b1	75 27		 jne	 SHORT $LN5@SetLeader

; 678  : 	{
; 679  : 		GCServerMsgStringSend("Your character is not party leader", lpObj->m_Index, 1);

  000b3	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b5	6a 01		 push	 1
  000b7	52		 push	 edx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LEEFHALA@Your?5character?5is?5not?5party?5lead@
  000bd	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi

; 680  : 		return false;

  000c7	32 c0		 xor	 al, al
  000c9	5b		 pop	 ebx

; 704  : 		}
; 705  : 	}
; 706  : 	// ----
; 707  : 	return true;
; 708  : }

  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cd	33 cd		 xor	 ecx, ebp
  000cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 08 00	 ret	 8
$LN5@SetLeader:

; 681  : 	}
; 682  : 	// ----
; 683  : 	int TempIndex = this->GetIndex(PartyNumber, lpTargetObj->m_Index, lpTargetObj->DBNumber);

  000da	8b 45 90	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  000dd	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000e0	8b 10		 mov	 edx, DWORD PTR [eax]
  000e2	51		 push	 ecx
  000e3	52		 push	 edx
  000e4	57		 push	 edi
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?GetIndex@PartyClass@@QAEHHHH@Z ; PartyClass::GetIndex

; 684  : 	// ----
; 685  : 	this->m_PartyS[PartyNumber].Number[0]					= this->m_PartyS[PartyNumber].Number[TempIndex];

  000ec	8b d7		 mov	 edx, edi
  000ee	6b ff 68	 imul	 edi, 104		; 00000068H
  000f1	6b d2 1a	 imul	 edx, 26			; 0000001aH
  000f4	03 d0		 add	 edx, eax
  000f6	89 45 94	 mov	 DWORD PTR _TempIndex$[ebp], eax
  000f9	8b 44 96 0c	 mov	 eax, DWORD PTR [esi+edx*4+12]
  000fd	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  00100	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 686  : 	this->m_PartyS[PartyNumber].DbNumber[0]					= this->m_PartyS[PartyNumber].DbNumber[TempIndex];

  00103	8b 44 96 34	 mov	 eax, DWORD PTR [esi+edx*4+52]
  00107	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 687  : 	this->m_PartyS[PartyNumber].m_PkLevel[0]			= this->m_PartyS[PartyNumber].m_PkLevel[TempIndex];

  0010a	8b 45 94	 mov	 eax, DWORD PTR _TempIndex$[ebp]
  0010d	8a 44 01 60	 mov	 al, BYTE PTR [ecx+eax+96]
  00111	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  00114	88 41 60	 mov	 BYTE PTR [ecx+96], al

; 688  : 	// ----
; 689  : 	this->m_PartyS[PartyNumber].Number[TempIndex]			= lpObj->m_Index;

  00117	8b 03		 mov	 eax, DWORD PTR [ebx]
  00119	89 44 96 0c	 mov	 DWORD PTR [esi+edx*4+12], eax

; 690  : 	this->m_PartyS[PartyNumber].DbNumber[TempIndex]			= lpObj->DBNumber;

  0011d	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  00120	89 44 96 34	 mov	 DWORD PTR [esi+edx*4+52], eax

; 691  : 	this->m_PartyS[PartyNumber].m_PkLevel[TempIndex]	= lpObj->m_PK_Level;

  00124	8a 93 3d 01 00
	00		 mov	 dl, BYTE PTR [ebx+317]
  0012a	8b 45 94	 mov	 eax, DWORD PTR _TempIndex$[ebp]

; 692  : 	// ----
; 693  : 	char Text[100] = { 0 };

  0012d	6a 63		 push	 99			; 00000063H
  0012f	88 54 01 60	 mov	 BYTE PTR [ecx+eax+96], dl
  00133	8d 4d 99	 lea	 ecx, DWORD PTR _Text$[ebp+1]
  00136	6a 00		 push	 0
  00138	51		 push	 ecx
  00139	c6 45 98 00	 mov	 BYTE PTR _Text$[ebp], 0
  0013d	e8 00 00 00 00	 call	 _memset

; 694  : 	sprintf(Text, "New party leader: %s", lpTargetObj->Name);

  00142	8b 55 90	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00145	83 c2 77	 add	 edx, 119		; 00000077H
  00148	52		 push	 edx
  00149	8d 45 98	 lea	 eax, DWORD PTR _Text$[ebp]
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OFNDHPCK@New?5party?5leader?3?5?$CFs?$AA@
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 _sprintf
  00157	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  0015c	83 c4 18	 add	 esp, 24			; 00000018H
  0015f	8d 5e f9	 lea	 ebx, DWORD PTR [esi-7]
$LL4@SetLeader:

; 697  : 	{
; 698  : 		int UserIndex = this->m_PartyS[PartyNumber].Number[i];

  00162	8b 07		 mov	 eax, DWORD PTR [edi]

; 699  : 		// ----
; 700  : 		if( UserIndex >= 0 && gObj[UserIndex].Connected == 3 )

  00164	85 c0		 test	 eax, eax
  00166	78 2b		 js	 SHORT $LN3@SetLeader
  00168	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016e	8b c8		 mov	 ecx, eax
  00170	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00176	39 5c 11 04	 cmp	 DWORD PTR [ecx+edx+4], ebx
  0017a	75 17		 jne	 SHORT $LN3@SetLeader

; 701  : 		{
; 702  : 			GCServerMsgStringSend(Text, this->m_PartyS[PartyNumber].Number[i], 1);

  0017c	6a 01		 push	 1
  0017e	50		 push	 eax
  0017f	8d 45 98	 lea	 eax, DWORD PTR _Text$[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 703  : 			CGPartyList(this->m_PartyS[PartyNumber].Number[i]);

  00188	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 ?CGPartyList@@YAXH@Z	; CGPartyList
  00190	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@SetLeader:

; 695  : 	// ----
; 696  : 	for( int i = 0; i < MAX_USER_IN_PARTY; i++ )

  00193	83 c7 04	 add	 edi, 4
  00196	4e		 dec	 esi
  00197	75 c9		 jne	 SHORT $LL4@SetLeader

; 704  : 		}
; 705  : 	}
; 706  : 	// ----
; 707  : 	return true;
; 708  : }

  00199	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	33 cd		 xor	 ecx, ebp
  001a0	b0 01		 mov	 al, 1
  001a2	5b		 pop	 ebx
  001a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c2 08 00	 ret	 8
?SetLeader@PartyClass@@QAE_NHH@Z ENDP			; PartyClass::SetLeader
_TEXT	ENDS
PUBLIC	?CreateEx@PartyClass@@QAEHHHH@Z			; PartyClass::CreateEx
; Function compile flags: /Ogtp
;	COMDAT ?CreateEx@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_usernumber$ = 8					; size = 4
_dbnumber$ = 12						; size = 4
_level$ = 16						; size = 4
?CreateEx@PartyClass@@QAEHHHH@Z PROC			; PartyClass::CreateEx, COMDAT
; _this$ = ecx

; 713  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 714  : 	int n = this->m_PartyCount;

  00007	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]

; 715  : 
; 716  : 	int loopcount = 0;
; 717  : 
; 718  : 	while ( true )
; 719  : 	{
; 720  : 		if ( this->m_PartyS[n].Count == 0 )

  0000a	8b cb		 mov	 ecx, ebx
  0000c	6b c9 68	 imul	 ecx, 104		; 00000068H
  0000f	33 c0		 xor	 eax, eax
  00011	39 44 31 08	 cmp	 DWORD PTR [ecx+esi+8], eax
  00015	74 23		 je	 SHORT $LN30@CreateEx
$LL11@CreateEx:

; 755  : 		}
; 756  : 
; 757  : 		n++;

  00017	43		 inc	 ebx

; 758  : 
; 759  : 		if ( n> OBJMAX-1 )

  00018	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0001e	7e 02		 jle	 SHORT $LN2@CreateEx

; 760  : 		{
; 761  : 			n=0;

  00020	33 db		 xor	 ebx, ebx
$LN2@CreateEx:

; 762  : 		}
; 763  : 
; 764  : 		loopcount++;

  00022	40		 inc	 eax

; 765  : 
; 766  : 		if ( loopcount > OBJMAX-1 )

  00023	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00028	0f 8f e2 00 00
	00		 jg	 $LN18@CreateEx

; 715  : 
; 716  : 	int loopcount = 0;
; 717  : 
; 718  : 	while ( true )
; 719  : 	{
; 720  : 		if ( this->m_PartyS[n].Count == 0 )

  0002e	8b d3		 mov	 edx, ebx
  00030	6b d2 68	 imul	 edx, 104		; 00000068H
  00033	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00038	75 dd		 jne	 SHORT $LL11@CreateEx
$LN30@CreateEx:

; 721  : 		{
; 722  : 			this->m_PartyS[n].Count = 1;
; 723  : 			this->m_PartyS[n].Number[0] = usernumber;
; 724  : 			this->m_PartyS[n].DbNumber[0] = dbnumber;

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _dbnumber$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _usernumber$[ebp]
  00040	57		 push	 edi
  00041	8b fb		 mov	 edi, ebx
  00043	6b ff 68	 imul	 edi, 104		; 00000068H
  00046	89 44 37 34	 mov	 DWORD PTR [edi+esi+52], eax
  0004a	89 4c 37 0c	 mov	 DWORD PTR [edi+esi+12], ecx

; 725  : 
; 726  : 			for ( int i=1;i<MAX_USER_IN_PARTY;i++)
; 727  : 			{
; 728  : 				this->m_PartyS[n].DbNumber[i] = -1;

  0004e	83 c9 ff	 or	 ecx, -1
  00051	03 fe		 add	 edi, esi
  00053	8b c3		 mov	 eax, ebx
  00055	6b c0 1a	 imul	 eax, 26			; 0000001aH
  00058	ba 01 00 00 00	 mov	 edx, 1
  0005d	89 57 08	 mov	 DWORD PTR [edi+8], edx
  00060	89 4c 86 38	 mov	 DWORD PTR [esi+eax*4+56], ecx

; 729  : 				this->m_PartyS[n].Number[i] = -1;

  00064	89 4c 86 10	 mov	 DWORD PTR [esi+eax*4+16], ecx
  00068	89 4c 86 3c	 mov	 DWORD PTR [esi+eax*4+60], ecx
  0006c	89 4c 86 14	 mov	 DWORD PTR [esi+eax*4+20], ecx
  00070	89 4c 86 40	 mov	 DWORD PTR [esi+eax*4+64], ecx
  00074	89 4c 86 18	 mov	 DWORD PTR [esi+eax*4+24], ecx
  00078	89 4c 86 44	 mov	 DWORD PTR [esi+eax*4+68], ecx
  0007c	89 4c 86 1c	 mov	 DWORD PTR [esi+eax*4+28], ecx
  00080	89 4c 86 48	 mov	 DWORD PTR [esi+eax*4+72], ecx
  00084	89 4c 86 20	 mov	 DWORD PTR [esi+eax*4+32], ecx
  00088	89 4c 86 4c	 mov	 DWORD PTR [esi+eax*4+76], ecx
  0008c	89 4c 86 24	 mov	 DWORD PTR [esi+eax*4+36], ecx
  00090	89 4c 86 50	 mov	 DWORD PTR [esi+eax*4+80], ecx
  00094	89 4c 86 28	 mov	 DWORD PTR [esi+eax*4+40], ecx
  00098	89 4c 86 54	 mov	 DWORD PTR [esi+eax*4+84], ecx
  0009c	89 4c 86 2c	 mov	 DWORD PTR [esi+eax*4+44], ecx
  000a0	89 4c 86 58	 mov	 DWORD PTR [esi+eax*4+88], ecx
  000a4	89 4c 86 30	 mov	 DWORD PTR [esi+eax*4+48], ecx

; 730  : 			}
; 731  : 
; 732  : 			this->m_PartyCount++;
; 733  : 			this->m_PartyS[n].m_MaxLevel = 0;
; 734  : 			this->m_PartyS[n].m_MinLevel = 0;
; 735  : 			this->SetLevel(n, level);

  000a8	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  000ab	01 56 04	 add	 DWORD PTR [esi+4], edx
  000ae	51		 push	 ecx
  000af	33 d2		 xor	 edx, edx
  000b1	53		 push	 ebx
  000b2	8b ce		 mov	 ecx, esi
  000b4	89 57 5c	 mov	 DWORD PTR [edi+92], edx
  000b7	e8 00 00 00 00	 call	 ?SetLevel@PartyClass@@QAEHHH@Z ; PartyClass::SetLevel

; 736  : 
; 737  : 			if ( this->m_PartyCount > OBJMAX-1 )

  000bc	81 7e 04 97 3a
	00 00		 cmp	 DWORD PTR [esi+4], 14999 ; 00003a97H
  000c3	7e 07		 jle	 SHORT $LN31@CreateEx

; 738  : 			{
; 739  : 				this->m_PartyCount=0;

  000c5	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN31@CreateEx:

; 740  : 			}
; 741  : 
; 742  : 			this->m_PartyS[n].m_PkLevel[0] = gObj[usernumber].m_PK_Level;

  000cc	8b 45 08	 mov	 eax, DWORD PTR _usernumber$[ebp]
  000cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d5	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000db	8a 84 10 3d 01
	00 00		 mov	 al, BYTE PTR [eax+edx+317]
  000e2	88 47 60	 mov	 BYTE PTR [edi+96], al

; 743  : 
; 744  : 			if( this->m_PartyS[n].m_PkLevel[0] >= 5 )

  000e5	3c 05		 cmp	 al, 5
  000e7	7c 13		 jl	 SHORT $LN4@CreateEx

; 745  : 			{
; 746  : 				this->m_PartyS[n].m_PartyPkLevel = this->m_PartyS[n].m_PkLevel[0];

  000e9	88 47 6a	 mov	 BYTE PTR [edi+106], al

; 747  : 				this->m_PartyS[n].m_PkCount = 1;

  000ec	c7 47 6c 01 00
	00 00		 mov	 DWORD PTR [edi+108], 1
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi

; 753  : 			}
; 754  : 			return n;

  000f5	8b c3		 mov	 eax, ebx
  000f7	5b		 pop	 ebx

; 773  : }

  000f8	5d		 pop	 ebp
  000f9	c2 0c 00	 ret	 12			; 0000000cH
$LN4@CreateEx:

; 748  : 			}
; 749  : 			else
; 750  : 			{
; 751  : 				this->m_PartyS[n].m_PartyPkLevel = 3;

  000fc	c6 47 6a 03	 mov	 BYTE PTR [edi+106], 3

; 752  : 				this->m_PartyS[n].m_PkCount = 0;

  00100	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], 0
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi

; 753  : 			}
; 754  : 			return n;

  00109	8b c3		 mov	 eax, ebx
  0010b	5b		 pop	 ebx

; 773  : }

  0010c	5d		 pop	 ebp
  0010d	c2 0c 00	 ret	 12			; 0000000cH
$LN18@CreateEx:
  00110	5e		 pop	 esi

; 767  : 		{
; 768  : 			break;
; 769  : 		}
; 770  : 	}
; 771  : 
; 772  : 	return -1;

  00111	83 c8 ff	 or	 eax, -1
  00114	5b		 pop	 ebx

; 773  : }

  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
?CreateEx@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::CreateEx
_TEXT	ENDS
PUBLIC	?AddEx@PartyClass@@QAEHHHHH@Z			; PartyClass::AddEx
; Function compile flags: /Ogtp
;	COMDAT ?AddEx@PartyClass@@QAEHHHHH@Z
_TEXT	SEGMENT
tv259 = -12						; size = 4
tv257 = -8						; size = 4
tv372 = -4						; size = 4
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
_level$ = 20						; size = 4
?AddEx@PartyClass@@QAEHHHHH@Z PROC			; PartyClass::AddEx, COMDAT
; _this$ = ecx

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 778  : 	if ( this->IsParty(party_number ) == FALSE )

  00008	8b 7d 08	 mov	 edi, DWORD PTR _party_number$[ebp]
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00013	85 c0		 test	 eax, eax
  00015	75 0b		 jne	 SHORT $LN13@AddEx
$LN25@AddEx:
  00017	5f		 pop	 edi

; 779  : 	{
; 780  : 		return -1;

  00018	83 c8 ff	 or	 eax, -1
  0001b	5e		 pop	 esi

; 826  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 10 00	 ret	 16			; 00000010H
$LN13@AddEx:

; 781  : 	}
; 782  : 
; 783  : 	if ( this->m_PartyS[party_number].Count >= OBJMAX )

  00022	8b d7		 mov	 edx, edi
  00024	6b d2 68	 imul	 edx, 104		; 00000068H
  00027	81 7c 32 08 98
	3a 00 00	 cmp	 DWORD PTR [edx+esi+8], 15000 ; 00003a98H
  0002f	8d 44 32 08	 lea	 eax, DWORD PTR [edx+esi+8]
  00033	89 55 f8	 mov	 DWORD PTR tv257[ebp], edx
  00036	89 45 f4	 mov	 DWORD PTR tv259[ebp], eax

; 784  : 	{
; 785  : 		return -1;

  00039	7d dc		 jge	 SHORT $LN25@AddEx

; 786  : 	}
; 787  : 
; 788  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++)

  0003b	8b cf		 mov	 ecx, edi
  0003d	33 c0		 xor	 eax, eax
  0003f	6b c9 1a	 imul	 ecx, 26			; 0000001aH
  00042	8d 7c 8e 0c	 lea	 edi, DWORD PTR [esi+ecx*4+12]
  00046	53		 push	 ebx
  00047	8b 5d 0c	 mov	 ebx, DWORD PTR _usernumber$[ebp]
  0004a	89 7d fc	 mov	 DWORD PTR tv372[ebp], edi
  0004d	8d 49 00	 npad	 3
$LL23@AddEx:

; 789  : 	{
; 790  : 		if ( (this->m_PartyS[party_number].Number[i] >= 0) && (this->m_PartyS[party_number].Number[i] == usernumber) && (this->m_PartyS[party_number].DbNumber[i] == dbnumber) )

  00050	8b 7d fc	 mov	 edi, DWORD PTR tv372[ebp]
  00053	8b 3f		 mov	 edi, DWORD PTR [edi]
  00055	85 ff		 test	 edi, edi
  00057	78 13		 js	 SHORT $LN10@AddEx
  00059	3b fb		 cmp	 edi, ebx
  0005b	75 0f		 jne	 SHORT $LN10@AddEx
  0005d	8b 7d 10	 mov	 edi, DWORD PTR _dbnumber$[ebp]
  00060	8d 14 01	 lea	 edx, DWORD PTR [ecx+eax]
  00063	39 7c 96 34	 cmp	 DWORD PTR [esi+edx*4+52], edi
  00067	74 39		 je	 SHORT $LN18@AddEx
  00069	8b 55 f8	 mov	 edx, DWORD PTR tv257[ebp]
$LN10@AddEx:

; 786  : 	}
; 787  : 
; 788  : 	for ( int i = 0; i<MAX_USER_IN_PARTY ; i++)

  0006c	83 45 fc 04	 add	 DWORD PTR tv372[ebp], 4
  00070	40		 inc	 eax
  00071	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00074	7c da		 jl	 SHORT $LL23@AddEx

; 793  : 		}
; 794  : 	}
; 795  : 
; 796  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00076	33 ff		 xor	 edi, edi
  00078	8d 44 32 0c	 lea	 eax, DWORD PTR [edx+esi+12]
  0007c	8d 64 24 00	 npad	 4
$LL7@AddEx:

; 797  : 	{
; 798  : #if _NEW_PARTY_SYSTEM_ == TRUE
; 799  : 		if( i >= g_MaxPartyMember)

  00080	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?g_MaxPartyMember@@3HA ; g_MaxPartyMember
  00086	7d 0e		 jge	 SHORT $LN5@AddEx

; 800  : 		{
; 801  : 			return -1;
; 802  : 		}
; 803  : #endif
; 804  : 		if ( this->m_PartyS[party_number].Number[i] == -1 )

  00088	83 38 ff	 cmp	 DWORD PTR [eax], -1
  0008b	74 23		 je	 SHORT $LN20@AddEx

; 793  : 		}
; 794  : 	}
; 795  : 
; 796  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  0008d	47		 inc	 edi
  0008e	83 c0 04	 add	 eax, 4
  00091	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  00094	7c ea		 jl	 SHORT $LL7@AddEx
$LN5@AddEx:
  00096	5b		 pop	 ebx
  00097	5f		 pop	 edi

; 822  : 		}
; 823  : 	}
; 824  : 
; 825  : 	return -1;

  00098	83 c8 ff	 or	 eax, -1
  0009b	5e		 pop	 esi

; 826  : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 10 00	 ret	 16			; 00000010H
$LN18@AddEx:
  000a2	5b		 pop	 ebx
  000a3	5f		 pop	 edi

; 791  : 		{
; 792  : 			return -2;

  000a4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000a9	5e		 pop	 esi

; 826  : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 10 00	 ret	 16			; 00000010H
$LN20@AddEx:

; 805  : 		{
; 806  : 			this->m_PartyS[party_number].Number[i] = usernumber;
; 807  : 			this->m_PartyS[party_number].DbNumber[i] = dbnumber;
; 808  : 			this->m_PartyS[party_number].Count++;
; 809  : 			this->SetLevel(party_number, level);

  000b0	8b 55 14	 mov	 edx, DWORD PTR _level$[ebp]
  000b3	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000b6	8b 4d 10	 mov	 ecx, DWORD PTR _dbnumber$[ebp]
  000b9	89 4c 86 34	 mov	 DWORD PTR [esi+eax*4+52], ecx
  000bd	89 5c 86 0c	 mov	 DWORD PTR [esi+eax*4+12], ebx
  000c1	8b 45 f4	 mov	 eax, DWORD PTR tv259[ebp]
  000c4	ff 00		 inc	 DWORD PTR [eax]
  000c6	8b 45 08	 mov	 eax, DWORD PTR _party_number$[ebp]
  000c9	52		 push	 edx
  000ca	50		 push	 eax
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?SetLevel@PartyClass@@QAEHHH@Z ; PartyClass::SetLevel

; 810  : 			this->m_PartyS[party_number].m_PkLevel[i] = gObj[usernumber].m_PK_Level;

  000d2	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000de	8a 84 0b 3d 01
	00 00		 mov	 al, BYTE PTR [ebx+ecx+317]
  000e5	8b 4d f8	 mov	 ecx, DWORD PTR tv257[ebp]
  000e8	8d 14 39	 lea	 edx, DWORD PTR [ecx+edi]
  000eb	88 44 32 60	 mov	 BYTE PTR [edx+esi+96], al

; 811  : 			
; 812  : 			if( this->m_PartyS[party_number].m_PkLevel[i] >= 5 )

  000ef	3c 05		 cmp	 al, 5
  000f1	7c 12		 jl	 SHORT $LN2@AddEx

; 813  : 			{
; 814  : 				if( this->m_PartyS[party_number].m_PartyPkLevel < this->m_PartyS[party_number].m_PkLevel[i] )

  000f3	38 44 31 6a	 cmp	 BYTE PTR [ecx+esi+106], al
  000f7	7d 04		 jge	 SHORT $LN1@AddEx

; 815  : 				{
; 816  : 					this->m_PartyS[party_number].m_PartyPkLevel = this->m_PartyS[party_number].m_PkLevel[i];

  000f9	88 44 31 6a	 mov	 BYTE PTR [ecx+esi+106], al
$LN1@AddEx:

; 817  : 				}
; 818  : 					
; 819  : 				this->m_PartyS[party_number].m_PkCount += 1;

  000fd	ff 44 31 6c	 inc	 DWORD PTR [ecx+esi+108]
  00101	8d 74 31 6c	 lea	 esi, DWORD PTR [ecx+esi+108]
$LN2@AddEx:

; 820  : 			}
; 821  : 			return i;

  00105	5b		 pop	 ebx
  00106	8b c7		 mov	 eax, edi
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi

; 826  : }

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 10 00	 ret	 16			; 00000010H
?AddEx@PartyClass@@QAEHHHHH@Z ENDP			; PartyClass::AddEx
_TEXT	ENDS
PUBLIC	?RestoreParty@PartyClass@@QAEXH@Z		; PartyClass::RestoreParty
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
; Function compile flags: /Ogtp
;	COMDAT ?RestoreParty@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
_TargetIndex$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?RestoreParty@PartyClass@@QAEXH@Z PROC			; PartyClass::RestoreParty, COMDAT
; _this$ = ecx

; 830  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 831  : 	if(!g_ZtLicense.user.PartySave)

  00004	80 3d e4 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+228, 0
  0000b	0f 84 a6 01 00
	00		 je	 $LN1@RestorePar

; 832  : 	{
; 833  : 		return;
; 834  : 	}
; 835  : 
; 836  : 	if(!OBJMAX_RANGE(aIndex))

  00011	53		 push	 ebx
  00012	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00015	85 db		 test	 ebx, ebx
  00017	0f 88 99 01 00
	00		 js	 $LN42@RestorePar
  0001d	33 c0		 xor	 eax, eax
  0001f	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  00025	0f 9e c0	 setle	 al
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 86 01 00
	00		 je	 $LN42@RestorePar

; 837  : 	{
; 838  : 		return;
; 839  : 	}
; 840  : 
; 841  : 	LPOBJ lpUser = &gObj[aIndex];

  00030	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00036	57		 push	 edi
  00037	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003d	03 df		 add	 ebx, edi

; 842  : 
; 843  : 	if(!lpUser->PartyIndex)

  0003f	83 bb d0 28 00
	00 00		 cmp	 DWORD PTR [ebx+10448], 0
  00046	0f 84 69 01 00
	00		 je	 $LN43@RestorePar

; 844  : 	{
; 845  : 		return;
; 846  : 	}
; 847  : 
; 848  : 	int TargetIndex = -1;

  0004c	56		 push	 esi
  0004d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _TargetIndex$[ebp], -1

; 849  : 
; 850  : 	//Join
; 851  : 	for(int n = OBJ_STARTUSERINDZT; n < OBJMAX; n++)

  00054	be b0 36 00 00	 mov	 esi, 14000		; 000036b0H
  00059	81 c7 d0 cf 40
	09		 add	 edi, 155242448		; 0940cfd0H
  0005f	90		 npad	 1
$LL25@RestorePar:

; 852  : 	{
; 853  : 		LPOBJ sObj = &gObj[n];
; 854  : 		if(sObj->Connected >= PLAYER_PLAYING)

  00060	83 bf 34 d7 ff
	ff 03		 cmp	 DWORD PTR [edi-10444], 3
  00067	7c 2b		 jl	 SHORT $LN24@RestorePar

; 855  : 		{
; 856  : 			if(lpUser->m_Index == n)

  00069	39 33		 cmp	 DWORD PTR [ebx], esi
  0006b	74 27		 je	 SHORT $LN24@RestorePar

; 857  : 			{
; 858  : 				continue;
; 859  : 			}
; 860  : 			if(sObj->PartyIndex == lpUser->PartyIndex)

  0006d	8b 83 d0 28 00
	00		 mov	 eax, DWORD PTR [ebx+10448]
  00073	39 07		 cmp	 DWORD PTR [edi], eax
  00075	75 1d		 jne	 SHORT $LN24@RestorePar

; 861  : 			{
; 862  : 				if(gParty.Isleader(sObj->PartyNumber, n, sObj->DBNumber))

  00077	8b 87 5c d7 ff
	ff		 mov	 eax, DWORD PTR [edi-10404]
  0007d	8b 8f 5c db ff
	ff		 mov	 ecx, DWORD PTR [edi-9380]
  00083	50		 push	 eax
  00084	56		 push	 esi
  00085	51		 push	 ecx
  00086	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0008b	e8 00 00 00 00	 call	 ?Isleader@PartyClass@@QAEHHHH@Z ; PartyClass::Isleader
  00090	85 c0		 test	 eax, eax
  00092	75 11		 jne	 SHORT $LN35@RestorePar
$LN24@RestorePar:

; 849  : 
; 850  : 	//Join
; 851  : 	for(int n = OBJ_STARTUSERINDZT; n < OBJMAX; n++)

  00094	46		 inc	 esi
  00095	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  0009b	81 fe 98 3a 00
	00		 cmp	 esi, 15000		; 00003a98H
  000a1	7c bd		 jl	 SHORT $LL25@RestorePar

; 879  : 				{
; 880  : 					continue;
; 881  : 				}
; 882  : 				if(sObj->PartyIndex == lpUser->PartyIndex)

  000a3	eb 07		 jmp	 SHORT $LN40@RestorePar
$LN35@RestorePar:

; 863  : 				{
; 864  : 					TargetIndex = n;

  000a5	89 75 fc	 mov	 DWORD PTR _TargetIndex$[ebp], esi

; 865  : 					break;
; 866  : 				}
; 867  : 			}
; 868  : 		}
; 869  : 	}
; 870  : 	//Create
; 871  : 	if(TargetIndex < 0)

  000a8	85 f6		 test	 esi, esi
  000aa	79 48		 jns	 SHORT $LN41@RestorePar
$LN40@RestorePar:

; 872  : 	{
; 873  : 		for(int n = OBJ_STARTUSERINDZT; n < OBJMAX; n++)

  000ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b2	b8 b0 36 00 00	 mov	 eax, 14000		; 000036b0H
  000b7	81 c1 d0 cf 40
	09		 add	 ecx, 155242448		; 0940cfd0H
  000bd	8d 49 00	 npad	 3
$LL17@RestorePar:

; 874  : 		{
; 875  : 			LPOBJ sObj = &gObj[n];
; 876  : 			if(sObj->Connected >= PLAYER_PLAYING)

  000c0	83 b9 34 d7 ff
	ff 03		 cmp	 DWORD PTR [ecx-10444], 3
  000c7	7c 0e		 jl	 SHORT $LN16@RestorePar

; 877  : 			{
; 878  : 				if(lpUser->m_Index == n)

  000c9	39 03		 cmp	 DWORD PTR [ebx], eax
  000cb	74 0a		 je	 SHORT $LN16@RestorePar

; 879  : 				{
; 880  : 					continue;
; 881  : 				}
; 882  : 				if(sObj->PartyIndex == lpUser->PartyIndex)

  000cd	8b 93 d0 28 00
	00		 mov	 edx, DWORD PTR [ebx+10448]
  000d3	39 11		 cmp	 DWORD PTR [ecx], edx
  000d5	74 10		 je	 SHORT $LN36@RestorePar
$LN16@RestorePar:

; 872  : 	{
; 873  : 		for(int n = OBJ_STARTUSERINDZT; n < OBJMAX; n++)

  000d7	40		 inc	 eax
  000d8	81 c1 50 2b 00
	00		 add	 ecx, 11088		; 00002b50H
  000de	3d 98 3a 00 00	 cmp	 eax, 15000		; 00003a98H
  000e3	7c db		 jl	 SHORT $LL17@RestorePar

; 879  : 				{
; 880  : 					continue;
; 881  : 				}
; 882  : 				if(sObj->PartyIndex == lpUser->PartyIndex)

  000e5	eb 03		 jmp	 SHORT $LN15@RestorePar
$LN36@RestorePar:

; 883  : 				{
; 884  : 					TargetIndex = n;

  000e7	89 45 fc	 mov	 DWORD PTR _TargetIndex$[ebp], eax
$LN15@RestorePar:

; 885  : 					break;
; 886  : 				}
; 887  : 			}
; 888  : 		}
; 889  : 	}
; 890  : 
; 891  : 	if(TargetIndex < 0)

  000ea	83 7d fc 00	 cmp	 DWORD PTR _TargetIndex$[ebp], 0
  000ee	0f 8c c0 00 00
	00		 jl	 $LN44@RestorePar
$LN41@RestorePar:

; 892  : 	{
; 893  : 		return;
; 894  : 	}
; 895  : 
; 896  : 	LPOBJ lpTarget = &gObj[TargetIndex];

  000f4	8b 45 fc	 mov	 eax, DWORD PTR _TargetIndex$[ebp]
  000f7	8b f0		 mov	 esi, eax
  000f9	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000ff	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 897  : 
; 898  : 	int pnumber = -1;
; 899  : 
; 900  : 	if(lpTarget->PartyNumber < 0)

  00105	83 be 2c 04 00
	00 00		 cmp	 DWORD PTR [esi+1068], 0
  0010c	7d 1d		 jge	 SHORT $LN10@RestorePar

; 901  : 	{
; 902  : 		lpTarget->PartyNumber = gParty.CreateEx(TargetIndex, lpTarget->DBNumber, lpTarget->Level);

  0010e	0f bf 96 be 00
	00 00		 movsx	 edx, WORD PTR [esi+190]
  00115	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00118	52		 push	 edx
  00119	51		 push	 ecx
  0011a	50		 push	 eax
  0011b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00120	e8 00 00 00 00	 call	 ?CreateEx@PartyClass@@QAEHHHH@Z ; PartyClass::CreateEx
  00125	89 86 2c 04 00
	00		 mov	 DWORD PTR [esi+1068], eax
$LN10@RestorePar:

; 903  : 	}
; 904  : 
; 905  : 	if(lpTarget->PartyNumber >= 0 && lpUser->PartyNumber == -1)

  0012b	8b be 2c 04 00
	00		 mov	 edi, DWORD PTR [esi+1068]
  00131	85 ff		 test	 edi, edi
  00133	78 7f		 js	 SHORT $LN44@RestorePar
  00135	83 bb 2c 04 00
	00 ff		 cmp	 DWORD PTR [ebx+1068], -1
  0013c	75 76		 jne	 SHORT $LN44@RestorePar

; 906  : 	{
; 907  : 		if(!gParty.Isleader(lpTarget->PartyNumber, TargetIndex, lpTarget->DBNumber))

  0013e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00141	8b 45 fc	 mov	 eax, DWORD PTR _TargetIndex$[ebp]
  00144	52		 push	 edx
  00145	50		 push	 eax
  00146	57		 push	 edi
  00147	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0014c	e8 00 00 00 00	 call	 ?Isleader@PartyClass@@QAEHHHH@Z ; PartyClass::Isleader
  00151	85 c0		 test	 eax, eax
  00153	74 5f		 je	 SHORT $LN44@RestorePar

; 908  : 		{
; 909  : 			return;
; 910  : 		}
; 911  : 
; 912  : 		if(gParty.GetCount(lpTarget->PartyNumber) >= MAX_USER_IN_PARTY)

  00155	57		 push	 edi
  00156	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0015b	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount
  00160	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00163	7d 4f		 jge	 SHORT $LN44@RestorePar

; 913  : 		{
; 914  : 			return;
; 915  : 		}
; 916  : 
; 917  : 		pnumber = lpTarget->PartyNumber;
; 918  : 
; 919  : 		int iPartyPos = gParty.AddEx(lpTarget->PartyNumber, aIndex, lpUser->DBNumber, lpUser->Level);

  00165	0f bf 8b be 00
	00 00		 movsx	 ecx, WORD PTR [ebx+190]
  0016c	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  0016f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00172	51		 push	 ecx
  00173	52		 push	 edx
  00174	50		 push	 eax
  00175	57		 push	 edi
  00176	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0017b	e8 00 00 00 00	 call	 ?AddEx@PartyClass@@QAEHHHHH@Z ; PartyClass::AddEx

; 920  : 
; 921  : 		if(iPartyPos >= 0)

  00180	85 c0		 test	 eax, eax
  00182	78 19		 js	 SHORT $LN6@RestorePar

; 922  : 		{
; 923  : 			lpUser->PartyNumber = lpTarget->PartyNumber;

  00184	8b 8e 2c 04 00
	00		 mov	 ecx, DWORD PTR [esi+1068]
  0018a	89 8b 2c 04 00
	00		 mov	 DWORD PTR [ebx+1068], ecx

; 924  : 			gParty.Paint(pnumber);

  00190	57		 push	 edi
  00191	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00196	e8 00 00 00 00	 call	 ?Paint@PartyClass@@QAEXH@Z ; PartyClass::Paint
  0019b	eb 0a		 jmp	 SHORT $LN2@RestorePar
$LN6@RestorePar:

; 925  : 		}
; 926  : 		else if(iPartyPos == -1)

  0019d	83 f8 ff	 cmp	 eax, -1
  001a0	74 12		 je	 SHORT $LN44@RestorePar

; 927  : 		{
; 928  : 			return;
; 929  : 		}
; 930  : 		else if(iPartyPos == -2)

  001a2	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  001a5	74 0d		 je	 SHORT $LN44@RestorePar
$LN2@RestorePar:

; 931  : 		{
; 932  : 			return;
; 933  : 		}
; 934  : 	}
; 935  : 
; 936  : 	if(pnumber >= 0)

  001a7	85 ff		 test	 edi, edi
  001a9	78 09		 js	 SHORT $LN44@RestorePar

; 937  : 	{
; 938  : 		CGPartyListAll(pnumber);

  001ab	57		 push	 edi
  001ac	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  001b1	83 c4 04	 add	 esp, 4
$LN44@RestorePar:
  001b4	5e		 pop	 esi
$LN43@RestorePar:
  001b5	5f		 pop	 edi
$LN42@RestorePar:
  001b6	5b		 pop	 ebx
$LN1@RestorePar:

; 939  : 	}
; 940  : }

  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c2 04 00	 ret	 4
?RestoreParty@PartyClass@@QAEXH@Z ENDP			; PartyClass::RestoreParty
_TEXT	ENDS
PUBLIC	?SetPartyIndex@PartyClass@@QAEXPAUPMSG_PARTYDELUSER@@H@Z ; PartyClass::SetPartyIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetPartyIndex@PartyClass@@QAEXPAUPMSG_PARTYDELUSER@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?SetPartyIndex@PartyClass@@QAEXPAUPMSG_PARTYDELUSER@@H@Z PROC ; PartyClass::SetPartyIndex, COMDAT
; _this$ = ecx

; 944  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 945  : 	if(!OBJMAX_RANGE(aIndex))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 78		 js	 SHORT $LN2@SetPartyIn
  0000a	33 d2		 xor	 edx, edx
  0000c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00011	0f 9e c2	 setle	 dl
  00014	85 d2		 test	 edx, edx
  00016	74 6a		 je	 SHORT $LN2@SetPartyIn

; 946  : 	{
; 947  : 		return;
; 948  : 	}
; 949  : 
; 950  : 	LPOBJ lpUser = &gObj[aIndex];

  00018	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001e	53		 push	 ebx
  0001f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 951  : 
; 952  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00025	83 7c 18 04 03	 cmp	 DWORD PTR [eax+ebx+4], 3
  0002a	7c 55		 jl	 SHORT $LN15@SetPartyIn

; 953  : 	{
; 954  : 		return;
; 955  : 	}
; 956  : 
; 957  : 	int pnumber = lpUser->PartyNumber;

  0002c	56		 push	 esi
  0002d	8b b4 18 2c 04
	00 00		 mov	 esi, DWORD PTR [eax+ebx+1068]

; 958  : 	int puser = lpMsg->Number;

  00034	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00037	57		 push	 edi
  00038	0f b6 78 03	 movzx	 edi, BYTE PTR [eax+3]

; 959  : 
; 960  : 	if(lpUser->PartyNumber < 0)

  0003c	85 f6		 test	 esi, esi
  0003e	78 3f		 js	 SHORT $LN16@SetPartyIn

; 961  : 	{
; 962  : 		return;
; 963  : 	}
; 964  : 
; 965  : 	if(!OBJMAX_RANGE(pnumber))

  00040	33 c0		 xor	 eax, eax
  00042	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00048	0f 9e c0	 setle	 al
  0004b	85 c0		 test	 eax, eax
  0004d	74 30		 je	 SHORT $LN16@SetPartyIn

; 966  : 	{
; 967  : 		return;
; 968  : 	}
; 969  : 
; 970  : 	if (!this->IsParty(pnumber))

  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00055	85 c0		 test	 eax, eax
  00057	74 26		 je	 SHORT $LN16@SetPartyIn

; 971  : 	{
; 972  : 		return;
; 973  : 	}
; 974  : 
; 975  : 	if(puser < 0 || puser >= MAX_USER_IN_PARTY)

  00059	83 ff 09	 cmp	 edi, 9
  0005c	77 21		 ja	 SHORT $LN16@SetPartyIn

; 976  : 	{
; 977  : 		return;
; 978  : 	}
; 979  : 
; 980  : 	int TargetIndex = this->m_PartyS[pnumber].Number[puser];
; 981  : 
; 982  : 	LPOBJ lpTarget = &gObj[TargetIndex];

  0005e	6b f6 1a	 imul	 esi, 26			; 0000001aH
  00061	03 f7		 add	 esi, edi
  00063	8b 44 b1 0c	 mov	 eax, DWORD PTR [ecx+esi*4+12]
  00067	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H

; 983  : 
; 984  : 	if(lpTarget->Connected < PLAYER_PLAYING)

  0006d	83 7c 18 04 03	 cmp	 DWORD PTR [eax+ebx+4], 3
  00072	7c 0b		 jl	 SHORT $LN16@SetPartyIn

; 985  : 	{
; 986  : 		return;
; 987  : 	}
; 988  : 
; 989  : 	lpTarget->PartyIndex = 0;

  00074	c7 84 18 d0 28
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+ebx+10448], 0
$LN16@SetPartyIn:
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
$LN15@SetPartyIn:
  00081	5b		 pop	 ebx
$LN2@SetPartyIn:

; 990  : 	//GJSetCharacterInfo(lpTarget, lpTarget->m_Index, 0);
; 991  : }

  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
?SetPartyIndex@PartyClass@@QAEXPAUPMSG_PARTYDELUSER@@H@Z ENDP ; PartyClass::SetPartyIndex
_TEXT	ENDS
PUBLIC	?GD_SetPartyCount@PartyClass@@QAEXXZ		; PartyClass::GD_SetPartyCount
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
; Function compile flags: /Ogtp
;	COMDAT ?GD_SetPartyCount@PartyClass@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 8
?GD_SetPartyCount@PartyClass@@QAEXXZ PROC		; PartyClass::GD_SetPartyCount, COMDAT
; _this$ = ecx

; 995  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 996  : 	GD_PMSG_PARTYCOUNT pMsg = { 0 };

  00006	33 c0		 xor	 eax, eax
  00008	89 45 f9	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  0000b	66 89 45 fd	 mov	 WORD PTR _pMsg$[ebp+5], ax
  0000f	88 45 ff	 mov	 BYTE PTR _pMsg$[ebp+7], al

; 997  : 	pMsg.h.set((LPBYTE)&pMsg, 0xE2, 0x07, sizeof(GD_PMSG_PARTYCOUNT));
; 998  : 	pMsg.PartyCount = this->DBIndex;

  00012	8b 81 c8 ce 17
	00		 mov	 eax, DWORD PTR [ecx+1560264]

; 999  : 	cDBSMng.Send((char*)&pMsg, sizeof(pMsg));

  00018	6a 08		 push	 8
  0001a	8d 4d f8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0001d	51		 push	 ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00023	c7 45 f8 c1 08
	e2 07		 mov	 DWORD PTR _pMsg$[ebp], 132253889 ; 07e208c1H
  0002a	89 45 fc	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0002d	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 1000 : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GD_SetPartyCount@PartyClass@@QAEXXZ ENDP		; PartyClass::GD_SetPartyCount
_TEXT	ENDS
PUBLIC	??_C@_0P@GAPFACKC@User?5Not?5found?$AA@		; `string'
PUBLIC	??_C@_0P@JLFGIHAP@No?5Party?5?$CFs?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0P@GAONGKIG@PartyClass?4cpp?$AA@		; `string'
PUBLIC	?CGNewLeader@PartyClass@@QAEXHPAUGC_PARTYNEWLEADER@@@Z ; PartyClass::CGNewLeader
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
;	COMDAT ??_C@_0P@GAPFACKC@User?5Not?5found?$AA@
CONST	SEGMENT
??_C@_0P@GAPFACKC@User?5Not?5found?$AA@ DB 'User Not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JLFGIHAP@No?5Party?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0P@JLFGIHAP@No?5Party?5?$CFs?5?$CFs?$AA@ DB 'No Party %s %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GAONGKIG@PartyClass?4cpp?$AA@
CONST	SEGMENT
??_C@_0P@GAONGKIG@PartyClass?4cpp?$AA@ DB 'PartyClass.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CGNewLeader@PartyClass@@QAEXHPAUGC_PARTYNEWLEADER@@@Z
_TEXT	SEGMENT
_usernumber$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_dbnumber$ = 12						; size = 4
_aRecv$ = 12						; size = 4
?CGNewLeader@PartyClass@@QAEXHPAUGC_PARTYNEWLEADER@@@Z PROC ; PartyClass::CGNewLeader, COMDAT
; _this$ = ecx

; 1006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1007 : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 0f		 js	 SHORT $LN10@CGNewLeade
  0000e	33 c0		 xor	 eax, eax
  00010	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	75 1e		 jne	 SHORT $LN5@CGNewLeade
$LN10@CGNewLeade:

; 1008 : 	{
; 1009 : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  0001d	68 f1 03 00 00	 push	 1009			; 000003f1H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GAONGKIG@PartyClass?4cpp?$AA@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 1043 : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN5@CGNewLeade:

; 1010 : 		return;
; 1011 : 	}
; 1012 : 
; 1013 : 	int usernumber = -1; //loc1
; 1014 : 	int dbnumber = -1; //loc2
; 1015 : 
; 1016 : 	if ( gObj[aIndex].PartyNumber < 0 )

  0003b	8b c6		 mov	 eax, esi
  0003d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00043	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00049	c7 45 08 ff ff
	ff ff		 mov	 DWORD PTR _usernumber$[ebp], -1
  00050	8b 88 2c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1068]
  00056	85 c9		 test	 ecx, ecx
  00058	79 1c		 jns	 SHORT $LN4@CGNewLeade

; 1017 : 	{
; 1018 : 		LogAdd("No Party %s %s", gObj[aIndex].AccountID, gObj[aIndex].Name);

  0005a	8d 50 77	 lea	 edx, DWORD PTR [eax+119]
  0005d	52		 push	 edx
  0005e	83 c0 6c	 add	 eax, 108		; 0000006cH
  00061	50		 push	 eax
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JLFGIHAP@No?5Party?5?$CFs?5?$CFs?$AA@
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi

; 1043 : }

  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
$LN4@CGNewLeade:

; 1019 : 		return;
; 1020 : 	}
; 1021 : 
; 1022 : 	if ( !this->GetIndexUser(gObj[aIndex].PartyNumber, aRecv->id, usernumber, dbnumber))

  00076	8d 45 0c	 lea	 eax, DWORD PTR _dbnumber$[ebp]
  00079	50		 push	 eax
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0007d	8d 55 08	 lea	 edx, DWORD PTR _usernumber$[ebp]
  00080	52		 push	 edx
  00081	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  00085	52		 push	 edx
  00086	51		 push	 ecx
  00087	8b cf		 mov	 ecx, edi
  00089	e8 00 00 00 00	 call	 ?GetIndexUser@PartyClass@@QAEHHHAAH0@Z ; PartyClass::GetIndexUser
  0008e	85 c0		 test	 eax, eax
  00090	75 14		 jne	 SHORT $LN3@CGNewLeade
$LN11@CGNewLeade:

; 1023 : 	{
; 1024 : 		LogAdd("User Not found");

  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GAPFACKC@User?5Not?5found?$AA@
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0009d	83 c4 04	 add	 esp, 4
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi

; 1043 : }

  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
$LN3@CGNewLeade:

; 1025 : 		return;
; 1026 : 	}
; 1027 : 
; 1028 : 	if ( usernumber < 0 )

  000a6	8b 45 08	 mov	 eax, DWORD PTR _usernumber$[ebp]
  000a9	85 c0		 test	 eax, eax

; 1029 : 	{
; 1030 : 		LogAdd("User Not found");
; 1031 : 		return;

  000ab	78 e5		 js	 SHORT $LN11@CGNewLeade

; 1032 : 	}
; 1033 : 
; 1034 : 	int pnumber = gObj[aIndex].PartyNumber; //loc5
; 1035 : 
; 1036 : 	if ( pnumber < 0 )
; 1037 : 	{
; 1038 : 		LogAdd("%s %d", __FILE__, __LINE__);
; 1039 : 		return;
; 1040 : 	}
; 1041 : 
; 1042 : 	this->SetLeader(aIndex, usernumber);

  000ad	50		 push	 eax
  000ae	56		 push	 esi
  000af	8b cf		 mov	 ecx, edi
  000b1	e8 00 00 00 00	 call	 ?SetLeader@PartyClass@@QAE_NHH@Z ; PartyClass::SetLeader
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi

; 1043 : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
?CGNewLeader@PartyClass@@QAEXHPAUGC_PARTYNEWLEADER@@@Z ENDP ; PartyClass::CGNewLeader
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GPartyClass@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPartyClass@@UAEPAXI@Z PROC				; PartyClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1PartyClass@@UAE@XZ	; PartyClass::~PartyClass
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GPartyClass@@UAEPAXI@Z ENDP				; PartyClass::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Create@PartyClass@@QAEHHHH@Z			; PartyClass::Create
; Function compile flags: /Ogtp
;	COMDAT ?Create@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
tv805 = 8						; size = 4
_usernumber$ = 8					; size = 4
_dbnumber$ = 12						; size = 4
_level$ = 16						; size = 4
?Create@PartyClass@@QAEHHHH@Z PROC			; PartyClass::Create, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 105  : 	int n = this->m_PartyCount;

  00007	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]

; 106  : 	int loopcount = 0;
; 107  : 
; 108  : 	while ( true )
; 109  : 	{
; 110  : 		if ( this->m_PartyS[n].Count == 0 )

  0000a	8b cb		 mov	 ecx, ebx
  0000c	6b c9 68	 imul	 ecx, 104		; 00000068H
  0000f	33 c0		 xor	 eax, eax
  00011	39 44 31 08	 cmp	 DWORD PTR [ecx+esi+8], eax
  00015	74 23		 je	 SHORT $LN31@Create
$LL12@Create:

; 156  : 		}
; 157  : 
; 158  : 		n++;

  00017	43		 inc	 ebx

; 159  : 
; 160  : 		if ( n> OBJMAX-1 )

  00018	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0001e	7e 02		 jle	 SHORT $LN2@Create

; 161  : 		{
; 162  : 			n=0;

  00020	33 db		 xor	 ebx, ebx
$LN2@Create:

; 163  : 		}
; 164  : 
; 165  : 		loopcount++;

  00022	40		 inc	 eax

; 166  : 
; 167  : 		if ( loopcount > OBJMAX-1 )

  00023	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00028	0f 8f 0a 01 00
	00		 jg	 $LN19@Create

; 106  : 	int loopcount = 0;
; 107  : 
; 108  : 	while ( true )
; 109  : 	{
; 110  : 		if ( this->m_PartyS[n].Count == 0 )

  0002e	8b d3		 mov	 edx, ebx
  00030	6b d2 68	 imul	 edx, 104		; 00000068H
  00033	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00038	75 dd		 jne	 SHORT $LL12@Create
$LN31@Create:

; 111  : 		{
; 112  : 			this->m_PartyS[n].Count = 1;
; 113  : 			this->m_PartyS[n].Number[0] = usernumber;
; 114  : 			this->m_PartyS[n].DbNumber[0] = dbnumber;

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _dbnumber$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _usernumber$[ebp]
  00040	57		 push	 edi
  00041	8b fb		 mov	 edi, ebx
  00043	6b ff 68	 imul	 edi, 104		; 00000068H
  00046	89 44 37 34	 mov	 DWORD PTR [edi+esi+52], eax
  0004a	89 4c 37 0c	 mov	 DWORD PTR [edi+esi+12], ecx

; 115  : 
; 116  : 			for ( int i=1;i<MAX_USER_IN_PARTY;i++)
; 117  : 			{
; 118  : 				this->m_PartyS[n].DbNumber[i] = -1;

  0004e	83 c9 ff	 or	 ecx, -1
  00051	03 fe		 add	 edi, esi
  00053	8b c3		 mov	 eax, ebx
  00055	6b c0 1a	 imul	 eax, 26			; 0000001aH
  00058	ba 01 00 00 00	 mov	 edx, 1
  0005d	89 57 08	 mov	 DWORD PTR [edi+8], edx
  00060	89 4c 86 38	 mov	 DWORD PTR [esi+eax*4+56], ecx

; 119  : 				this->m_PartyS[n].Number[i] = -1;

  00064	89 4c 86 10	 mov	 DWORD PTR [esi+eax*4+16], ecx
  00068	89 4c 86 3c	 mov	 DWORD PTR [esi+eax*4+60], ecx
  0006c	89 4c 86 14	 mov	 DWORD PTR [esi+eax*4+20], ecx
  00070	89 4c 86 40	 mov	 DWORD PTR [esi+eax*4+64], ecx
  00074	89 4c 86 18	 mov	 DWORD PTR [esi+eax*4+24], ecx
  00078	89 4c 86 44	 mov	 DWORD PTR [esi+eax*4+68], ecx
  0007c	89 4c 86 1c	 mov	 DWORD PTR [esi+eax*4+28], ecx
  00080	89 4c 86 48	 mov	 DWORD PTR [esi+eax*4+72], ecx
  00084	89 4c 86 20	 mov	 DWORD PTR [esi+eax*4+32], ecx
  00088	89 4c 86 4c	 mov	 DWORD PTR [esi+eax*4+76], ecx
  0008c	89 4c 86 24	 mov	 DWORD PTR [esi+eax*4+36], ecx
  00090	89 4c 86 50	 mov	 DWORD PTR [esi+eax*4+80], ecx
  00094	89 4c 86 28	 mov	 DWORD PTR [esi+eax*4+40], ecx
  00098	89 4c 86 54	 mov	 DWORD PTR [esi+eax*4+84], ecx
  0009c	89 4c 86 2c	 mov	 DWORD PTR [esi+eax*4+44], ecx
  000a0	89 4c 86 58	 mov	 DWORD PTR [esi+eax*4+88], ecx
  000a4	89 4c 86 30	 mov	 DWORD PTR [esi+eax*4+48], ecx

; 120  : 			}
; 121  : 
; 122  : 			this->m_PartyCount++;
; 123  : 			this->m_PartyS[n].m_MaxLevel = 0;
; 124  : 			this->m_PartyS[n].m_MinLevel = 0;
; 125  : 			this->SetLevel(n, level);

  000a8	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  000ab	01 56 04	 add	 DWORD PTR [esi+4], edx
  000ae	51		 push	 ecx
  000af	33 d2		 xor	 edx, edx
  000b1	53		 push	 ebx
  000b2	8b ce		 mov	 ecx, esi
  000b4	89 57 5c	 mov	 DWORD PTR [edi+92], edx
  000b7	e8 00 00 00 00	 call	 ?SetLevel@PartyClass@@QAEHHH@Z ; PartyClass::SetLevel

; 126  : 
; 127  : 			if ( this->m_PartyCount > OBJMAX-1 )

  000bc	81 7e 04 97 3a
	00 00		 cmp	 DWORD PTR [esi+4], 14999 ; 00003a97H
  000c3	7e 07		 jle	 SHORT $LN32@Create

; 128  : 			{
; 129  : 				this->m_PartyCount=0;

  000c5	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN32@Create:

; 130  : 			}
; 131  : 
; 132  : 			this->m_PartyS[n].m_PkLevel[0] = gObj[usernumber].m_PK_Level; //Season 2.5 add-on (PK Party)

  000cc	8b 45 08	 mov	 eax, DWORD PTR _usernumber$[ebp]
  000cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d5	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000db	89 45 08	 mov	 DWORD PTR tv805[ebp], eax
  000de	8a 84 10 3d 01
	00 00		 mov	 al, BYTE PTR [eax+edx+317]
  000e5	88 47 60	 mov	 BYTE PTR [edi+96], al

; 133  : 
; 134  : 			if( this->m_PartyS[n].m_PkLevel[0] >= 5 ) //Season 2.5 add-on

  000e8	3c 05		 cmp	 al, 5
  000ea	7c 0c		 jl	 SHORT $LN5@Create

; 135  : 			{
; 136  : 				this->m_PartyS[n].m_PartyPkLevel = this->m_PartyS[n].m_PkLevel[0];

  000ec	88 47 6a	 mov	 BYTE PTR [edi+106], al

; 137  : 				this->m_PartyS[n].m_PkCount = 1;

  000ef	c7 47 6c 01 00
	00 00		 mov	 DWORD PTR [edi+108], 1

; 138  : 			}
; 139  : 			else

  000f6	eb 0b		 jmp	 SHORT $LN4@Create
$LN5@Create:

; 140  : 			{
; 141  : 				this->m_PartyS[n].m_PartyPkLevel = 3;

  000f8	c6 47 6a 03	 mov	 BYTE PTR [edi+106], 3

; 142  : 				this->m_PartyS[n].m_PkCount = 0;

  000fc	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], 0
$LN4@Create:

; 143  : 			}
; 144  : 
; 145  : #if(CUSTOM_SAVE_PT==TRUE)
; 146  : 			if(g_ZtLicense.user.PartySave)

  00103	80 3d e4 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+228, 0
  0010a	5f		 pop	 edi
  0010b	74 23		 je	 SHORT $LN3@Create

; 147  : 			{
; 148  : 				this->DBIndex++;

  0010d	ff 86 c8 ce 17
	00		 inc	 DWORD PTR [esi+1560264]

; 149  : 				this->GD_SetPartyCount();

  00113	8b ce		 mov	 ecx, esi
  00115	e8 00 00 00 00	 call	 ?GD_SetPartyCount@PartyClass@@QAEXXZ ; PartyClass::GD_SetPartyCount

; 150  : 				gObj[usernumber].PartyIndex = this->DBIndex;	

  0011a	8b 86 c8 ce 17
	00		 mov	 eax, DWORD PTR [esi+1560264]
  00120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00126	8b 55 08	 mov	 edx, DWORD PTR tv805[ebp]
  00129	89 84 0a d0 28
	00 00		 mov	 DWORD PTR [edx+ecx+10448], eax
$LN3@Create:

; 151  : 				//GJSetCharacterInfo(&gObj[usernumber], usernumber, 0);
; 152  : 			}
; 153  : #endif
; 154  : 
; 155  : 			return n;

  00130	5e		 pop	 esi
  00131	8b c3		 mov	 eax, ebx
  00133	5b		 pop	 ebx

; 174  : }

  00134	5d		 pop	 ebp
  00135	c2 0c 00	 ret	 12			; 0000000cH
$LN19@Create:
  00138	5e		 pop	 esi

; 168  : 		{
; 169  : 			break;
; 170  : 		}
; 171  : 	}
; 172  : 
; 173  : 	return -1;

  00139	83 c8 ff	 or	 eax, -1
  0013c	5b		 pop	 ebx

; 174  : }

  0013d	5d		 pop	 ebp
  0013e	c2 0c 00	 ret	 12			; 0000000cH
?Create@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::Create
_TEXT	ENDS
END
