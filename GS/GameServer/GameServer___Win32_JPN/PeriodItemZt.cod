; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\PeriodItemZt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Clear@ITEMDATA@@QAEXXZ				; ITEMDATA::Clear
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\perioditemzt.h
;	COMDAT ?Clear@ITEMDATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@ITEMDATA@@QAEXXZ PROC				; ITEMDATA::Clear, COMDAT
; _this$ = ecx

; 13   : 		bInUse = 0;
; 14   : 		wItemCode = 0;

  00000	33 c0		 xor	 eax, eax
  00002	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00005	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 15   : 		lCurentDate = 0;

  00009	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 16   : 	}

  0000c	c3		 ret	 0
?Clear@ITEMDATA@@QAEXXZ ENDP				; ITEMDATA::Clear
_TEXT	ENDS
PUBLIC	??_7CPeriodItemZt@@6B@				; CPeriodItemZt::`vftable'
PUBLIC	??0CPeriodItemZt@@QAE@XZ			; CPeriodItemZt::CPeriodItemZt
PUBLIC	??_R4CPeriodItemZt@@6B@				; CPeriodItemZt::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPeriodItemZt@@@8			; CPeriodItemZt `RTTI Type Descriptor'
PUBLIC	??_R3CPeriodItemZt@@8				; CPeriodItemZt::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPeriodItemZt@@8				; CPeriodItemZt::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPeriodItemZt@@8			; CPeriodItemZt::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECPeriodItemZt@@UAEPAXI@Z:PROC		; CPeriodItemZt::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPeriodItemZt@@8
; File e:\work\tranet_version\gs\gameserver\perioditemzt.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CPeriodItemZt@@8 DD FLAT:??_R0?AVCPeriodItemZt@@@8 ; CPeriodItemZt::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPeriodItemZt@@8
rdata$r	ENDS
;	COMDAT ??_R2CPeriodItemZt@@8
rdata$r	SEGMENT
??_R2CPeriodItemZt@@8 DD FLAT:??_R1A@?0A@EA@CPeriodItemZt@@8 ; CPeriodItemZt::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPeriodItemZt@@8
rdata$r	SEGMENT
??_R3CPeriodItemZt@@8 DD 00H				; CPeriodItemZt::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPeriodItemZt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPeriodItemZt@@@8
_DATA	SEGMENT
??_R0?AVCPeriodItemZt@@@8 DD FLAT:??_7type_info@@6B@	; CPeriodItemZt `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPeriodItemZt@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPeriodItemZt@@6B@
rdata$r	SEGMENT
??_R4CPeriodItemZt@@6B@ DD 00H				; CPeriodItemZt::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPeriodItemZt@@@8
	DD	FLAT:??_R3CPeriodItemZt@@8
rdata$r	ENDS
;	COMDAT ??_7CPeriodItemZt@@6B@
CONST	SEGMENT
??_7CPeriodItemZt@@6B@ DD FLAT:??_R4CPeriodItemZt@@6B@	; CPeriodItemZt::`vftable'
	DD	FLAT:??_ECPeriodItemZt@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CPeriodItemZt@@QAE@XZ
_TEXT	SEGMENT
??0CPeriodItemZt@@QAE@XZ PROC				; CPeriodItemZt::CPeriodItemZt, COMDAT
; _this$ = ecx

; 20   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPeriodItemZt@@6B@

; 21   : 
; 22   : }

  00008	c3		 ret	 0
??0CPeriodItemZt@@QAE@XZ ENDP				; CPeriodItemZt::CPeriodItemZt
_TEXT	ENDS
PUBLIC	??1CPeriodItemZt@@UAE@XZ			; CPeriodItemZt::~CPeriodItemZt
; Function compile flags: /Ogtp
;	COMDAT ??1CPeriodItemZt@@UAE@XZ
_TEXT	SEGMENT
??1CPeriodItemZt@@UAE@XZ PROC				; CPeriodItemZt::~CPeriodItemZt, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CPeriodItemZt@@6B@

; 26   : 
; 27   : }

  00006	c3		 ret	 0
??1CPeriodItemZt@@UAE@XZ ENDP				; CPeriodItemZt::~CPeriodItemZt
_TEXT	ENDS
PUBLIC	?Clear@PERIOD_DATA@@QAEXXZ			; PERIOD_DATA::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@PERIOD_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@PERIOD_DATA@@QAEXXZ PROC				; PERIOD_DATA::Clear, COMDAT
; _this$ = ecx

; 39   : 	this->bInUse = 0;

  00000	33 d2		 xor	 edx, edx
  00002	88 11		 mov	 BYTE PTR [ecx], dl
  00004	8d 41 30	 lea	 eax, DWORD PTR [ecx+48]
  00007	8d 4a 1e	 lea	 ecx, DWORD PTR [edx+30]
  0000a	56		 push	 esi
  0000b	eb 03 8d 49 00	 npad	 5
$LL3@Clear:

; 40   : 	for(int i = 0; i < MAX_ITEMDATA; i++)
; 41   : 		this->itemData[i].Clear();

  00010	33 f6		 xor	 esi, esi
  00012	88 50 f4	 mov	 BYTE PTR [eax-12], dl
  00015	66 89 70 f6	 mov	 WORD PTR [eax-10], si
  00019	89 10		 mov	 DWORD PTR [eax], edx
  0001b	83 c0 1c	 add	 eax, 28			; 0000001cH
  0001e	49		 dec	 ecx
  0001f	75 ef		 jne	 SHORT $LL3@Clear
  00021	5e		 pop	 esi

; 42   : }

  00022	c3		 ret	 0
?Clear@PERIOD_DATA@@QAEXXZ ENDP				; PERIOD_DATA::Clear
_TEXT	ENDS
PUBLIC	?AddPeriodInfo@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::AddPeriodInfo
; Function compile flags: /Ogtp
;	COMDAT ?AddPeriodInfo@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?AddPeriodInfo@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CPeriodItemZt::AddPeriodInfo, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	int iPeriodInfoIndex = -1;

  00004	83 c8 ff	 or	 eax, -1

; 48   : 	for(int i = 0; i < OBJMAXUSER; i++)

  00007	33 ff		 xor	 edi, edi
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	8d 64 24 00	 npad	 4
$LL4@AddPeriodI:

; 49   : 	{
; 50   : 		if( this->m_PeriodData[i].bInUse == 0 )

  00010	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00013	74 14		 je	 SHORT $LN8@AddPeriodI

; 48   : 	for(int i = 0; i < OBJMAXUSER; i++)

  00015	47		 inc	 edi
  00016	81 c2 6c 03 00
	00		 add	 edx, 876		; 0000036cH
  0001c	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00022	7c ec		 jl	 SHORT $LL4@AddPeriodI
  00024	5f		 pop	 edi

; 68   : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN8@AddPeriodI:
  00029	53		 push	 ebx
  0002a	56		 push	 esi

; 51   : 		{
; 52   : 			this->m_PeriodData[i].Clear();

  0002b	8b f7		 mov	 esi, edi
  0002d	69 f6 6c 03 00
	00		 imul	 esi, 876		; 0000036cH
  00033	03 f1		 add	 esi, ecx
  00035	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00038	e8 00 00 00 00	 call	 ?Clear@PERIOD_DATA@@QAEXXZ ; PERIOD_DATA::Clear

; 53   : 			this->m_PeriodData[i].bInUse = TRUE;
; 54   : 			this->m_PeriodData[i].lpObj = lpObj;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00040	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00043	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1

; 55   : 			this->m_PeriodData[i].DBNumber = lpObj->DBNumber;

  00047	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0004a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 56   : 			this->m_PeriodData[i].aIndex = lpObj->m_Index;

  0004d	0f b7 10	 movzx	 edx, WORD PTR [eax]
  00050	66 89 56 06	 mov	 WORD PTR [esi+6], dx

; 57   : 			this->m_PeriodData[i].btType = 0;

  00054	c6 46 05 00	 mov	 BYTE PTR [esi+5], 0

; 58   : 
; 59   : 			memcpy(this->m_PeriodData[i].Name,lpObj->Name,sizeof(this->m_PeriodData[i].Name));

  00058	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0005b	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0005e	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00061	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00064	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  00068	66 89 4e 18	 mov	 WORD PTR [esi+24], cx
  0006c	0f b6 90 81 00
	00 00		 movzx	 edx, BYTE PTR [eax+129]
  00073	88 56 1a	 mov	 BYTE PTR [esi+26], dl

; 60   : 			memcpy(this->m_PeriodData[i].AccountID,lpObj->AccountID,sizeof(this->m_PeriodData[i].AccountID));

  00076	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00079	89 56 1b	 mov	 DWORD PTR [esi+27], edx
  0007c	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  0007f	89 56 1f	 mov	 DWORD PTR [esi+31], edx
  00082	0f b7 50 74	 movzx	 edx, WORD PTR [eax+116]
  00086	66 89 56 23	 mov	 WORD PTR [esi+35], dx
  0008a	0f b6 50 76	 movzx	 edx, BYTE PTR [eax+118]
  0008e	88 56 25	 mov	 BYTE PTR [esi+37], dl
  00091	5e		 pop	 esi

; 61   : 
; 62   : 			lpObj->m_PeriodDataIndex = i;

  00092	89 b8 20 26 00
	00		 mov	 DWORD PTR [eax+9760], edi
  00098	5b		 pop	 ebx

; 63   : 			iPeriodInfoIndex = i;
; 64   : 			break;
; 65   : 		}
; 66   : 	}
; 67   : return iPeriodInfoIndex;

  00099	8b c7		 mov	 eax, edi
  0009b	5f		 pop	 edi

; 68   : }

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?AddPeriodInfo@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CPeriodItemZt::AddPeriodInfo
_TEXT	ENDS
PUBLIC	?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::IsCorrectUser
; Function compile flags: /Ogtp
;	COMDAT ?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CPeriodItemZt::IsCorrectUser, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	int iPeriodItemSlotIndex = lpObj->m_PeriodDataIndex;

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00006	8b 82 20 26 00
	00		 mov	 eax, DWORD PTR [edx+9760]

; 88   : 
; 89   : 	if( iPeriodItemSlotIndex < 0 )

  0000c	85 c0		 test	 eax, eax

; 90   : 		return false;

  0000e	78 1c		 js	 SHORT $LN1@IsCorrectU

; 91   : 
; 92   : 	if( this->m_PeriodData[iPeriodItemSlotIndex].bInUse == 1 &&
; 93   : 		this->m_PeriodData[iPeriodItemSlotIndex].DBNumber == lpObj->DBNumber )

  00010	69 c0 6c 03 00
	00		 imul	 eax, 876		; 0000036cH
  00016	03 c1		 add	 eax, ecx
  00018	80 78 04 01	 cmp	 BYTE PTR [eax+4], 1
  0001c	75 0e		 jne	 SHORT $LN1@IsCorrectU
  0001e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00021	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  00024	75 06		 jne	 SHORT $LN1@IsCorrectU

; 94   : 		return true;

  00026	b0 01		 mov	 al, 1

; 97   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN1@IsCorrectU:

; 95   : 
; 96   : 	return false;

  0002c	32 c0		 xor	 al, al

; 97   : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CPeriodItemZt::IsCorrectUser
_TEXT	ENDS
PUBLIC	?SetExpireNotMatchedData@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::SetExpireNotMatchedData
EXTRN	?GCItemListSend@@YAXH@Z:PROC			; GCItemListSend
EXTRN	?SetPeriodItemZtpire@CItem@@QAEXXZ:PROC		; CItem::SetPeriodItemZtpire
EXTRN	?IsPeriodItemZtpire@CItem@@QAE_NXZ:PROC		; CItem::IsPeriodItemZtpire
EXTRN	?IsPeriodItem@CItem@@QAE_NXZ:PROC		; CItem::IsPeriodItem
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Ogtp
;	COMDAT ?SetExpireNotMatchedData@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv1378 = -8						; size = 4
_iSetExpiredItemCount$ = -4				; size = 4
_lpObj$ = 8						; size = 4
_bIsValidMatchedItem$ = 11				; size = 1
?SetExpireNotMatchedData@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CPeriodItemZt::SetExpireNotMatchedData, COMDAT
; _this$ = ecx

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 625  : 	BYTE bIsValidMatchedItem = 0;
; 626  : 	int iSetExpiredItemCount = 0;

  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	57		 push	 edi
  0000c	33 ff		 xor	 edi, edi
  0000e	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00011	89 7d fc	 mov	 DWORD PTR _iSetExpiredItemCount$[ebp], edi
  00014	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00017	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL31@SetExpireN:

; 631  : 	{
; 632  : 		if( !lpObj->pInventory[i].IsItem() )

  00020	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00026	03 cf		 add	 ecx, edi
  00028	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 35 01 00
	00		 je	 $LN12@SetExpireN

; 633  : 			continue;
; 634  : 
; 635  : 		if( lpObj->pInventory[i].IsPeriodItem() == TRUE )

  00035	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  0003b	03 cf		 add	 ecx, edi
  0003d	e8 00 00 00 00	 call	 ?IsPeriodItem@CItem@@QAE_NXZ ; CItem::IsPeriodItem
  00042	3a c3		 cmp	 al, bl
  00044	0f 85 20 01 00
	00		 jne	 $LN12@SetExpireN

; 636  : 		{
; 637  : 			if( !lpObj->pInventory[i].IsPeriodItemZtpire() )

  0004a	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00050	03 cf		 add	 ecx, edi
  00052	e8 00 00 00 00	 call	 ?IsPeriodItemZtpire@CItem@@QAE_NXZ ; CItem::IsPeriodItemZtpire
  00057	84 c0		 test	 al, al
  00059	0f 85 0b 01 00
	00		 jne	 $LN12@SetExpireN

; 638  : 			{
; 639  : 				bIsValidMatchedItem = 0;

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	88 45 0b	 mov	 BYTE PTR _bIsValidMatchedItem$[ebp], al
  00065	8b 86 20 26 00
	00		 mov	 eax, DWORD PTR [esi+9760]
  0006b	69 c0 6c 03 00
	00		 imul	 eax, 876		; 0000036cH
  00071	8d 44 08 2a	 lea	 eax, DWORD PTR [eax+ecx+42]
  00075	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR tv1378[ebp], 6
  0007c	8d 64 24 00	 npad	 4
$LL32@SetExpireN:

; 642  : 				{
; 643  : 					if( !this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].bInUse )

  00080	80 78 fe 00	 cmp	 BYTE PTR [eax-2], 0
  00084	74 1f		 je	 SHORT $LN6@SetExpireN

; 644  : 						continue;
; 645  : 
; 646  : 					if( lpObj->pInventory[i].m_Type == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].wItemCode &&
; 647  : 						lpObj->pInventory[i].m_Number == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].dwSerial )

  00086	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  0008c	0f b7 18	 movzx	 ebx, WORD PTR [eax]
  0008f	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  00092	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00096	3b d3		 cmp	 edx, ebx
  00098	75 0b		 jne	 SHORT $LN6@SetExpireN
  0009a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009c	3b 48 06	 cmp	 ecx, DWORD PTR [eax+6]
  0009f	75 04		 jne	 SHORT $LN6@SetExpireN

; 648  : 					{
; 649  : 						bIsValidMatchedItem = TRUE;

  000a1	c6 45 0b 01	 mov	 BYTE PTR _bIsValidMatchedItem$[ebp], 1
$LN6@SetExpireN:

; 642  : 				{
; 643  : 					if( !this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].bInUse )

  000a5	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  000a9	74 21		 je	 SHORT $LN26@SetExpireN

; 644  : 						continue;
; 645  : 
; 646  : 					if( lpObj->pInventory[i].m_Type == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].wItemCode &&
; 647  : 						lpObj->pInventory[i].m_Number == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].dwSerial )

  000ab	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  000b1	0f bf 5c 17 06	 movsx	 ebx, WORD PTR [edi+edx+6]
  000b6	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  000b9	0f b7 50 1c	 movzx	 edx, WORD PTR [eax+28]
  000bd	3b da		 cmp	 ebx, edx
  000bf	75 0b		 jne	 SHORT $LN26@SetExpireN
  000c1	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c3	3b 48 22	 cmp	 ecx, DWORD PTR [eax+34]
  000c6	75 04		 jne	 SHORT $LN26@SetExpireN

; 648  : 					{
; 649  : 						bIsValidMatchedItem = TRUE;

  000c8	c6 45 0b 01	 mov	 BYTE PTR _bIsValidMatchedItem$[ebp], 1
$LN26@SetExpireN:

; 642  : 				{
; 643  : 					if( !this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].bInUse )

  000cc	80 78 36 00	 cmp	 BYTE PTR [eax+54], 0
  000d0	74 21		 je	 SHORT $LN27@SetExpireN

; 644  : 						continue;
; 645  : 
; 646  : 					if( lpObj->pInventory[i].m_Type == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].wItemCode &&
; 647  : 						lpObj->pInventory[i].m_Number == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].dwSerial )

  000d2	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  000d8	0f bf 5c 17 06	 movsx	 ebx, WORD PTR [edi+edx+6]
  000dd	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  000e0	0f b7 50 38	 movzx	 edx, WORD PTR [eax+56]
  000e4	3b da		 cmp	 ebx, edx
  000e6	75 0b		 jne	 SHORT $LN27@SetExpireN
  000e8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000ea	3b 48 3e	 cmp	 ecx, DWORD PTR [eax+62]
  000ed	75 04		 jne	 SHORT $LN27@SetExpireN

; 648  : 					{
; 649  : 						bIsValidMatchedItem = TRUE;

  000ef	c6 45 0b 01	 mov	 BYTE PTR _bIsValidMatchedItem$[ebp], 1
$LN27@SetExpireN:

; 642  : 				{
; 643  : 					if( !this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].bInUse )

  000f3	80 78 52 00	 cmp	 BYTE PTR [eax+82], 0
  000f7	74 21		 je	 SHORT $LN28@SetExpireN

; 644  : 						continue;
; 645  : 
; 646  : 					if( lpObj->pInventory[i].m_Type == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].wItemCode &&
; 647  : 						lpObj->pInventory[i].m_Number == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].dwSerial )

  000f9	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  000ff	0f bf 5c 17 06	 movsx	 ebx, WORD PTR [edi+edx+6]
  00104	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  00107	0f b7 50 54	 movzx	 edx, WORD PTR [eax+84]
  0010b	3b da		 cmp	 ebx, edx
  0010d	75 0b		 jne	 SHORT $LN28@SetExpireN
  0010f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00111	3b 48 5a	 cmp	 ecx, DWORD PTR [eax+90]
  00114	75 04		 jne	 SHORT $LN28@SetExpireN

; 648  : 					{
; 649  : 						bIsValidMatchedItem = TRUE;

  00116	c6 45 0b 01	 mov	 BYTE PTR _bIsValidMatchedItem$[ebp], 1
$LN28@SetExpireN:

; 642  : 				{
; 643  : 					if( !this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].bInUse )

  0011a	80 78 6e 00	 cmp	 BYTE PTR [eax+110], 0
  0011e	74 21		 je	 SHORT $LN29@SetExpireN

; 644  : 						continue;
; 645  : 
; 646  : 					if( lpObj->pInventory[i].m_Type == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].wItemCode &&
; 647  : 						lpObj->pInventory[i].m_Number == this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iPeriodItemData].dwSerial )

  00120	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00126	0f bf 5c 17 06	 movsx	 ebx, WORD PTR [edi+edx+6]
  0012b	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  0012e	0f b7 50 70	 movzx	 edx, WORD PTR [eax+112]
  00132	3b da		 cmp	 ebx, edx
  00134	75 0b		 jne	 SHORT $LN29@SetExpireN
  00136	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00138	3b 48 76	 cmp	 ecx, DWORD PTR [eax+118]
  0013b	75 04		 jne	 SHORT $LN29@SetExpireN

; 648  : 					{
; 649  : 						bIsValidMatchedItem = TRUE;

  0013d	c6 45 0b 01	 mov	 BYTE PTR _bIsValidMatchedItem$[ebp], 1
$LN29@SetExpireN:

; 640  : 
; 641  : 				for( iPeriodItemData = 0; iPeriodItemData < MAX_ITEMDATA; iPeriodItemData++)

  00141	bb 01 00 00 00	 mov	 ebx, 1
  00146	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  0014b	29 5d f8	 sub	 DWORD PTR tv1378[ebp], ebx
  0014e	0f 85 2c ff ff
	ff		 jne	 $LL32@SetExpireN

; 650  : 					}
; 651  : 				}
; 652  : 
; 653  : 				if( !bIsValidMatchedItem )

  00154	80 7d 0b 00	 cmp	 BYTE PTR _bIsValidMatchedItem$[ebp], 0
  00158	75 10		 jne	 SHORT $LN12@SetExpireN

; 654  : 				{
; 655  : 					lpObj->pInventory[i].SetPeriodItemZtpire();

  0015a	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00160	03 cf		 add	 ecx, edi
  00162	e8 00 00 00 00	 call	 ?SetPeriodItemZtpire@CItem@@QAEXXZ ; CItem::SetPeriodItemZtpire

; 656  : 					iSetExpiredItemCount++;

  00167	01 5d fc	 add	 DWORD PTR _iSetExpiredItemCount$[ebp], ebx
$LN12@SetExpireN:

; 627  : 	int i;
; 628  : 	int iPeriodItemData;
; 629  : 
; 630  : 	for( i = 0; i < MAIN_INVENTORY_SIZE; i++)

  0016a	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00170	81 ff f0 a8 00
	00		 cmp	 edi, 43248		; 0000a8f0H
  00176	0f 8c a4 fe ff
	ff		 jl	 $LL31@SetExpireN

; 657  : 				}
; 658  : 			}
; 659  : 		}
; 660  : 	}
; 661  : 
; 662  : 	if( iSetExpiredItemCount > 0 )

  0017c	83 7d fc 00	 cmp	 DWORD PTR _iSetExpiredItemCount$[ebp], 0
  00180	7e 0b		 jle	 SHORT $LN1@SetExpireN

; 663  : 		GCItemListSend(lpObj->m_Index);

  00182	8b 16		 mov	 edx, DWORD PTR [esi]
  00184	52		 push	 edx
  00185	e8 00 00 00 00	 call	 ?GCItemListSend@@YAXH@Z	; GCItemListSend
  0018a	83 c4 04	 add	 esp, 4
$LN1@SetExpireN:
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	5b		 pop	 ebx

; 664  : }

  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c2 04 00	 ret	 4
?SetExpireNotMatchedData@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CPeriodItemZt::SetExpireNotMatchedData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?RequestPeriodItemInfo@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::RequestPeriodItemInfo
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?RequestPeriodItemInfo@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?RequestPeriodItemInfo@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CPeriodItemZt::RequestPeriodItemInfo, COMDAT
; _this$ = ecx

; 668  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 669  : 	PMSG_REQ_PERIODITEMZT_SELECT pMsg;
; 670  : 	pMsg.wUserIndex = lpObj->m_Index;

  00013	0f b7 08	 movzx	 ecx, WORD PTR [eax]

; 671  : 	pMsg.dwUserGuid = lpObj->DBNumber;

  00016	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00019	66 89 4d ec	 mov	 WORD PTR _pMsg$[ebp+8], cx

; 672  : 	memcpy(pMsg.chCharacterName,lpObj->Name,11);

  0001d	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00020	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+4], edx
  00023	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 673  : 
; 674  : 	PHeadSubSetB((LPBYTE)&pMsg,0xD1,0x03,sizeof(pMsg));

  00026	6a 18		 push	 24			; 00000018H
  00028	89 4d ee	 mov	 DWORD PTR _pMsg$[ebp+10], ecx
  0002b	0f b7 48 7f	 movzx	 ecx, WORD PTR [eax+127]
  0002f	89 55 f2	 mov	 DWORD PTR _pMsg$[ebp+14], edx
  00032	8a 90 81 00 00
	00		 mov	 dl, BYTE PTR [eax+129]
  00038	6a 03		 push	 3
  0003a	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003d	68 d1 00 00 00	 push	 209			; 000000d1H
  00042	50		 push	 eax
  00043	66 89 4d f6	 mov	 WORD PTR _pMsg$[ebp+18], cx
  00047	88 55 f8	 mov	 BYTE PTR _pMsg$[ebp+20], dl
  0004a	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0004f	83 c4 10	 add	 esp, 16			; 00000010H

; 675  : 
; 676  : 	cDBSMng.Send((char*)&pMsg,sizeof(pMsg));

  00052	6a 18		 push	 24			; 00000018H
  00054	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00057	51		 push	 ecx
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005d	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 677  : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?RequestPeriodItemInfo@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CPeriodItemZt::RequestPeriodItemInfo
_TEXT	ENDS
PUBLIC	??_C@_0IF@OKCMJPGC@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?RequestPeriodItemDelete@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ; CPeriodItemZt::RequestPeriodItemDelete
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
;	COMDAT ??_C@_0IF@OKCMJPGC@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@
CONST	SEGMENT
??_C@_0IF@OKCMJPGC@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@ DB '[Perio'
	DB	'dItemZt][Delete PeriodItem] Request Delete PeriodItem Data. U'
	DB	'ser Id : %s(%d), Name : %s, Item : %s(%d), Type : %d, Serial '
	DB	': %u', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RequestPeriodItemDelete@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpItemData$ = 12					; size = 4
?RequestPeriodItemDelete@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z PROC ; CPeriodItemZt::RequestPeriodItemDelete, COMDAT
; _this$ = ecx

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _lpItemData$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 708  : 	PMSG_REQ_PERIODITEMZT_DELETE pMsg;
; 709  : 	pMsg.wUserIndex = lpObj->m_Index;

  00019	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 710  : 	pMsg.dwUserGuid = lpObj->DBNumber;
; 711  : 	memcpy(pMsg.chCharacterName,lpObj->Name,11);

  0001c	8b 57 77	 mov	 edx, DWORD PTR [edi+119]
  0001f	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00022	8d 5f 77	 lea	 ebx, DWORD PTR [edi+119]
  00025	66 89 45 e4	 mov	 WORD PTR _pMsg$[ebp+8], ax
  00029	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0002c	89 45 f3	 mov	 DWORD PTR _pMsg$[ebp+23], eax

; 712  : 
; 713  : 	pMsg.wItemCode = lpItemData->wItemCode;

  0002f	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]

; 714  : 	pMsg.btItemType = lpItemData->btType;
; 715  : 	pMsg.dwSerial = lpItemData->dwSerial;
; 716  : 
; 717  : 	PHeadSubSetB((LPBYTE)&pMsg,0xD1,0x02,sizeof(pMsg));

  00033	6a 20		 push	 32			; 00000020H
  00035	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00038	66 8b 4b 08	 mov	 cx, WORD PTR [ebx+8]
  0003c	89 55 ef	 mov	 DWORD PTR _pMsg$[ebp+19], edx
  0003f	8a 53 0a	 mov	 dl, BYTE PTR [ebx+10]
  00042	6a 02		 push	 2
  00044	66 89 45 ec	 mov	 WORD PTR _pMsg$[ebp+16], ax
  00048	66 89 4d f7	 mov	 WORD PTR _pMsg$[ebp+27], cx
  0004c	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]
  0004f	88 55 f9	 mov	 BYTE PTR _pMsg$[ebp+29], dl
  00052	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00055	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00058	68 d1 00 00 00	 push	 209			; 000000d1H
  0005d	50		 push	 eax
  0005e	88 4d ee	 mov	 BYTE PTR _pMsg$[ebp+18], cl
  00061	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00064	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 718  : 
; 719  : 	LogAddTD("[PeriodItemZt][Delete PeriodItem] Request Delete PeriodItem Data. User Id : %s(%d), Name : %s, Item : %s(%d), Type : %d, Serial : %u",
; 720  : 		lpObj->AccountID,lpObj->DBNumber,lpObj->Name,ItemAttribute[lpItemData->wItemCode].Name,lpItemData->wItemCode,lpItemData->btType,lpItemData->dwSerial);

  00069	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0006c	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  00070	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	50		 push	 eax
  00077	6b c0 70	 imul	 eax, 112		; 00000070H
  0007a	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0007f	50		 push	 eax
  00080	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00083	53		 push	 ebx
  00084	50		 push	 eax
  00085	83 c7 6c	 add	 edi, 108		; 0000006cH
  00088	57		 push	 edi
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0IF@OKCMJPGC@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00094	83 c4 30	 add	 esp, 48			; 00000030H

; 721  : 
; 722  : 	cDBSMng.Send((char*)&pMsg,sizeof(pMsg));

  00097	6a 20		 push	 32			; 00000020H
  00099	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0009c	51		 push	 ecx
  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000a2	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 723  : }

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	33 cd		 xor	 ecx, ebp
  000ae	5b		 pop	 ebx
  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 08 00	 ret	 8
?RequestPeriodItemDelete@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ENDP ; CPeriodItemZt::RequestPeriodItemDelete
_TEXT	ENDS
PUBLIC	?RequestPeriodItemUpdate@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ; CPeriodItemZt::RequestPeriodItemUpdate
; Function compile flags: /Ogtp
;	COMDAT ?RequestPeriodItemUpdate@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpItemData$ = 12					; size = 4
?RequestPeriodItemUpdate@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z PROC ; CPeriodItemZt::RequestPeriodItemUpdate, COMDAT
; _this$ = ecx

; 728  : 	// ----
; 729  : }

  00000	c2 08 00	 ret	 8
?RequestPeriodItemUpdate@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ENDP ; CPeriodItemZt::RequestPeriodItemUpdate
_TEXT	ENDS
PUBLIC	??_C@_0GN@ICBBDEFH@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@ ; `string'
PUBLIC	?DGPeriodItemZtDelete@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_DELETE@@@Z ; CPeriodItemZt::DGPeriodItemZtDelete
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0GN@ICBBDEFH@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@
CONST	SEGMENT
??_C@_0GN@ICBBDEFH@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@ DB '[Perio'
	DB	'dItemZt][Delete PeriodItem] OnRequest Delete PeriodItem Data.'
	DB	' User Id : %s(%d), Name : %s, Result : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGPeriodItemZtDelete@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_DELETE@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?DGPeriodItemZtDelete@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_DELETE@@@Z PROC ; CPeriodItemZt::DGPeriodItemZtDelete, COMDAT
; _this$ = ecx

; 772  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 773  : 	int iIndex = lpMsg->wUserIndex;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  00006	0f b7 41 08	 movzx	 eax, WORD PTR [ecx+8]

; 774  : 
; 775  : 	if( iIndex < 0 || iIndex >= OBJMAX )

  0000a	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0000f	77 3d		 ja	 SHORT $LN3@DGPeriodIt

; 776  : 		return;
; 777  : 
; 778  : 	LPOBJ lpObj = &gObj[iIndex];

  00011	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00017	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 779  : 
; 780  : 	if( lpObj == NULL )

  0001d	74 2f		 je	 SHORT $LN3@DGPeriodIt

; 781  : 		return;
; 782  : 
; 783  : 	if( lpObj->Type != OBJ_USER ||
; 784  : 		lpObj->Connected < PLAYER_LOGGED )

  0001f	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  00024	75 28		 jne	 SHORT $LN3@DGPeriodIt
  00026	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  0002a	7c 22		 jl	 SHORT $LN3@DGPeriodIt

; 785  : 		return;
; 786  : 
; 787  : 	if( lpMsg->btResultCode )

  0002c	80 79 0a 00	 cmp	 BYTE PTR [ecx+10], 0
  00030	75 1c		 jne	 SHORT $LN3@DGPeriodIt

; 788  : 	{
; 789  : 
; 790  : 	}
; 791  : 	else
; 792  : 	{
; 793  : 		LogAddTD("[PeriodItemZt][Delete PeriodItem] OnRequest Delete PeriodItem Data. User Id : %s(%d), Name : %s, Result : %d",
; 794  : 			lpObj->AccountID,lpObj->DBNumber,lpObj->Name,lpMsg->btResultCode);

  00032	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00035	6a 00		 push	 0
  00037	8d 48 77	 lea	 ecx, DWORD PTR [eax+119]
  0003a	51		 push	 ecx
  0003b	52		 push	 edx
  0003c	83 c0 6c	 add	 eax, 108		; 0000006cH
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@ICBBDEFH@?$FLPeriodItemZt?$FN?$FLDelete?5PeriodItem@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@DGPeriodIt:

; 795  : 	}
; 796  : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?DGPeriodItemZtDelete@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_DELETE@@@Z ENDP ; CPeriodItemZt::DGPeriodItemZtDelete
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN6@AtlThrowIm:
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN7@AtlThrowIm:
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory
EXTRN	?GetNumber@CItem@@QAEKXZ:PROC			; CItem::GetNumber
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\perioditemzt.cpp
;	COMDAT ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z
_TEXT	SEGMENT
_iReturnIndex$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
_dwSerial$ = 16						; size = 4
?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z PROC ; CPeriodItemZt::GetItemFromInventory, COMDAT
; _this$ = ecx

; 961  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 962  : 	int iReturnIndex = -1;
; 963  : 
; 964  : 	if( !lpObj )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	83 c8 ff	 or	 eax, -1
  0000b	89 45 fc	 mov	 DWORD PTR _iReturnIndex$[ebp], eax
  0000e	85 ff		 test	 edi, edi

; 965  : 		return -1;

  00010	74 6d		 je	 SHORT $LN10@GetItemFro

; 966  : 
; 967  : 	if( lpObj->Type != OBJ_USER ||
; 968  : 		lpObj->Connected < PLAYER_LOGGED )

  00012	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00017	75 66		 jne	 SHORT $LN10@GetItemFro
  00019	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  0001d	7c 60		 jl	 SHORT $LN10@GetItemFro

; 969  : 		return -1;
; 970  : 
; 971  : 	for(int i = 0; i < MAIN_INVENTORY_SIZE; i++)

  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	33 db		 xor	 ebx, ebx
  00023	33 f6		 xor	 esi, esi
  00025	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL6@GetItemFro:

; 972  : 	{
; 973  : 		if( lpObj->pInventory[i].IsItem() )

  00030	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  00036	03 ce		 add	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003d	85 c0		 test	 eax, eax
  0003f	74 1f		 je	 SHORT $LN5@GetItemFro

; 974  : 		{
; 975  : 			if( lpObj->pInventory[i].m_Type == wItemCode )

  00041	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  00047	0f bf 54 31 06	 movsx	 edx, WORD PTR [ecx+esi+6]
  0004c	0f b7 45 0c	 movzx	 eax, WORD PTR _wItemCode$[ebp]
  00050	03 ce		 add	 ecx, esi
  00052	3b d0		 cmp	 edx, eax
  00054	75 0a		 jne	 SHORT $LN5@GetItemFro

; 976  : 			{
; 977  : #ifdef DEBUG_CODE
; 978  : 				LogAddC(2,"wItemCode:%d dwSerial:%d lpObj->pInventory[i].GetNumber():%d",wItemCode,dwSerial,lpObj->pInventory[i].GetNumber());
; 979  : #endif
; 980  : 				if( lpObj->pInventory[i].GetNumber() == dwSerial )

  00056	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  0005b	3b 45 10	 cmp	 eax, DWORD PTR _dwSerial$[ebp]
  0005e	74 1b		 je	 SHORT $LN13@GetItemFro
$LN5@GetItemFro:

; 969  : 		return -1;
; 970  : 
; 971  : 	for(int i = 0; i < MAIN_INVENTORY_SIZE; i++)

  00060	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00066	43		 inc	 ebx
  00067	81 fe f0 a8 00
	00		 cmp	 esi, 43248		; 0000a8f0H
  0006d	7c c1		 jl	 SHORT $LL6@GetItemFro

; 976  : 			{
; 977  : #ifdef DEBUG_CODE
; 978  : 				LogAddC(2,"wItemCode:%d dwSerial:%d lpObj->pInventory[i].GetNumber():%d",wItemCode,dwSerial,lpObj->pInventory[i].GetNumber());
; 979  : #endif
; 980  : 				if( lpObj->pInventory[i].GetNumber() == dwSerial )

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _iReturnIndex$[ebp]
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	5f		 pop	 edi

; 983  : 					break;
; 984  : 				}
; 985  : 			}
; 986  : 		}
; 987  : 	}
; 988  : 	return iReturnIndex;
; 989  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
$LN13@GetItemFro:
  0007b	5e		 pop	 esi

; 981  : 				{
; 982  : 					iReturnIndex = i;

  0007c	8b c3		 mov	 eax, ebx
  0007e	5b		 pop	 ebx
$LN10@GetItemFro:
  0007f	5f		 pop	 edi

; 983  : 					break;
; 984  : 				}
; 985  : 			}
; 986  : 		}
; 987  : 	}
; 988  : 	return iReturnIndex;
; 989  : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 0c 00	 ret	 12			; 0000000cH
?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ENDP ; CPeriodItemZt::GetItemFromInventory
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?OnRequestPeriodItemList@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::OnRequestPeriodItemList
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?OnRequestPeriodItemList@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
tv436 = -28						; size = 4
_pCount$ = -24						; size = 5
_pList$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?OnRequestPeriodItemList@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CPeriodItemZt::OnRequestPeriodItemList, COMDAT
; _this$ = ecx

; 1001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 1002 : 	int iPeriodItemInfoSlotIndex = 0;
; 1003 : 	PMSG_ANS_PERIODLIST_COUNT pCount = {0};

  00012	33 c0		 xor	 eax, eax
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 1004 : 	PMSG_ANS_PERIODLIST pList = {0};
; 1005 : 
; 1006 : 	WORD wItemCode = 0;
; 1007 : 	DWORD dwSerial = 0;
; 1008 : 	int iItemSlotIndex = 0;
; 1009 : 	long lExpireDate = 0;
; 1010 : 
; 1011 : 	iPeriodItemInfoSlotIndex = lpObj->m_PeriodDataIndex;

  00018	8b b7 20 26 00
	00		 mov	 esi, DWORD PTR [edi+9760]

; 1012 : 
; 1013 : 	PHeadSubSetB((LPBYTE)&pCount,0xD2,0x11,sizeof(pCount));

  0001e	6a 05		 push	 5
  00020	6a 11		 push	 17			; 00000011H
  00022	88 45 e8	 mov	 BYTE PTR _pCount$[ebp], al
  00025	89 45 e9	 mov	 DWORD PTR _pCount$[ebp+1], eax
  00028	88 45 f0	 mov	 BYTE PTR _pList$[ebp], al
  0002b	89 45 f1	 mov	 DWORD PTR _pList$[ebp+1], eax
  0002e	89 45 f5	 mov	 DWORD PTR _pList$[ebp+5], eax
  00031	66 89 45 f9	 mov	 WORD PTR _pList$[ebp+9], ax
  00035	88 45 fb	 mov	 BYTE PTR _pList$[ebp+11], al
  00038	8d 45 e8	 lea	 eax, DWORD PTR _pCount$[ebp]
  0003b	8b d9		 mov	 ebx, ecx
  0003d	68 d2 00 00 00	 push	 210			; 000000d2H
  00042	50		 push	 eax

; 1024 : 			{
; 1025 : 				wItemCode = this->m_PeriodData[iPeriodItemInfoSlotIndex].itemData[i].wItemCode;

  00043	89 5d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00046	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0004b	6a 0c		 push	 12			; 0000000cH
  0004d	6a 12		 push	 18			; 00000012H
  0004f	8d 4d f0	 lea	 ecx, DWORD PTR _pList$[ebp]
  00052	68 d2 00 00 00	 push	 210			; 000000d2H
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0005d	69 f6 6c 03 00
	00		 imul	 esi, 876		; 0000036cH
  00063	0f b6 45 e9	 movzx	 eax, BYTE PTR _pCount$[ebp+1]
  00067	8a 54 1e 05	 mov	 dl, BYTE PTR [esi+ebx+5]
  0006b	03 f3		 add	 esi, ebx
  0006d	50		 push	 eax
  0006e	8d 4d e8	 lea	 ecx, DWORD PTR _pCount$[ebp]
  00071	88 55 ec	 mov	 BYTE PTR _pCount$[ebp+4], dl
  00074	8b 17		 mov	 edx, DWORD PTR [edi]
  00076	51		 push	 ecx
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0007d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00080	80 7e 04 01	 cmp	 BYTE PTR [esi+4], 1
  00084	75 4b		 jne	 SHORT $LN2@OnRequestP

; 1014 : 	PHeadSubSetB((LPBYTE)&pList,0xD2,0x12,sizeof(pList));
; 1015 : 
; 1016 : 	pCount.btItemCount = this->m_PeriodData[iPeriodItemInfoSlotIndex].btType;
; 1017 : 	DataSend(lpObj->m_Index,(LPBYTE)&pCount,pCount.h.size);
; 1018 : 
; 1019 : 	if( this->m_PeriodData[iPeriodItemInfoSlotIndex].bInUse == 1 )
; 1020 : 	{
; 1021 : 		for(int i = 0; i < MAX_ITEMDATA; i++)

  00086	83 c6 2a	 add	 esi, 42			; 0000002aH
  00089	c7 45 e4 1e 00
	00 00		 mov	 DWORD PTR tv436[ebp], 30 ; 0000001eH
$LL4@OnRequestP:

; 1022 : 		{
; 1023 : 			if( this->m_PeriodData[iPeriodItemInfoSlotIndex].itemData[i].bInUse == TRUE )

  00090	80 7e fe 01	 cmp	 BYTE PTR [esi-2], 1
  00094	75 33		 jne	 SHORT $LN3@OnRequestP

; 1024 : 			{
; 1025 : 				wItemCode = this->m_PeriodData[iPeriodItemInfoSlotIndex].itemData[i].wItemCode;

  00096	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 1026 : 				dwSerial = this->m_PeriodData[iPeriodItemInfoSlotIndex].itemData[i].dwSerial;

  00099	8b 46 06	 mov	 eax, DWORD PTR [esi+6]

; 1027 : 				iItemSlotIndex = this->GetItemFromInventory(lpObj,wItemCode,dwSerial);

  0009c	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0009f	50		 push	 eax
  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory

; 1028 : 				lExpireDate = this->m_PeriodData[iPeriodItemInfoSlotIndex].itemData[i].lExpireDate;
; 1029 : 
; 1030 : 				pList.wItemCode = wItemCode;
; 1031 : 				pList.wItemPos = iItemSlotIndex;
; 1032 : 				pList.lExpireDate = lExpireDate;
; 1033 : 
; 1034 : 				DataSend(lpObj->m_Index,(LPBYTE)&pList,pList.h.size);

  000a7	0f b6 4d f1	 movzx	 ecx, BYTE PTR _pList$[ebp+1]
  000ab	66 89 45 f6	 mov	 WORD PTR _pList$[ebp+6], ax
  000af	8b 46 0e	 mov	 eax, DWORD PTR [esi+14]
  000b2	51		 push	 ecx
  000b3	8d 55 f0	 lea	 edx, DWORD PTR _pList$[ebp]
  000b6	89 45 f8	 mov	 DWORD PTR _pList$[ebp+8], eax
  000b9	8b 07		 mov	 eax, DWORD PTR [edi]
  000bb	52		 push	 edx
  000bc	50		 push	 eax
  000bd	66 89 5d f4	 mov	 WORD PTR _pList$[ebp+4], bx
  000c1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@OnRequestP:

; 1014 : 	PHeadSubSetB((LPBYTE)&pList,0xD2,0x12,sizeof(pList));
; 1015 : 
; 1016 : 	pCount.btItemCount = this->m_PeriodData[iPeriodItemInfoSlotIndex].btType;
; 1017 : 	DataSend(lpObj->m_Index,(LPBYTE)&pCount,pCount.h.size);
; 1018 : 
; 1019 : 	if( this->m_PeriodData[iPeriodItemInfoSlotIndex].bInUse == 1 )
; 1020 : 	{
; 1021 : 		for(int i = 0; i < MAX_ITEMDATA; i++)

  000c9	83 c6 1c	 add	 esi, 28			; 0000001cH
  000cc	ff 4d e4	 dec	 DWORD PTR tv436[ebp]
  000cf	75 bf		 jne	 SHORT $LL4@OnRequestP
$LN2@OnRequestP:

; 1035 : 			}
; 1036 : 		}
; 1037 : 	}
; 1038 : }

  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	33 cd		 xor	 ecx, ebp
  000d8	5b		 pop	 ebx
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 04 00	 ret	 4
?OnRequestPeriodItemList@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CPeriodItemZt::OnRequestPeriodItemList
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?OnRequestPeriodItemListOnce@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ; CPeriodItemZt::OnRequestPeriodItemListOnce
; Function compile flags: /Ogtp
;	COMDAT ?OnRequestPeriodItemListOnce@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpItemData$ = 12					; size = 4
?OnRequestPeriodItemListOnce@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z PROC ; CPeriodItemZt::OnRequestPeriodItemListOnce, COMDAT
; _this$ = ecx

; 1042 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 1043 : 	if( !lpObj || !lpItemData )

  00014	33 c0		 xor	 eax, eax
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _lpItemData$[ebp]
  0001a	89 4d ec	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001d	3b d8		 cmp	 ebx, eax
  0001f	74 63		 je	 SHORT $LN2@OnRequestP@2
  00021	3b f0		 cmp	 esi, eax
  00023	74 5f		 je	 SHORT $LN2@OnRequestP@2

; 1044 : 		return;
; 1045 : 
; 1046 : 	if( !lpItemData->bInUse )

  00025	38 06		 cmp	 BYTE PTR [esi], al
  00027	74 5b		 je	 SHORT $LN2@OnRequestP@2

; 1047 : 		return;
; 1048 : 
; 1049 : 	PMSG_ANS_PERIODLIST pMsg = {0};
; 1050 : 	PHeadSubSetB((LPBYTE)&pMsg,0xD2,0x12,sizeof(pMsg));

  00029	57		 push	 edi
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	6a 12		 push	 18			; 00000012H
  0002e	88 45 f0	 mov	 BYTE PTR _pMsg$[ebp], al
  00031	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  00034	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  00037	66 89 45 f9	 mov	 WORD PTR _pMsg$[ebp+9], ax
  0003b	88 45 fb	 mov	 BYTE PTR _pMsg$[ebp+11], al
  0003e	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00041	68 d2 00 00 00	 push	 210			; 000000d2H
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1051 : 	
; 1052 : 	WORD wItemCode = 0;
; 1053 : 	DWORD dwSerial = 0;
; 1054 : 	int iItemSlotIndex = 0;
; 1055 : 	DWORD dwLeftTime = 0;
; 1056 : 
; 1057 : 	wItemCode			= lpItemData->wItemCode;

  0004c	0f b7 7e 02	 movzx	 edi, WORD PTR [esi+2]

; 1058 : 	dwSerial			= lpItemData->dwSerial;

  00050	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1059 : 	iItemSlotIndex		= this->GetItemFromInventory(lpObj,wItemCode,dwSerial);

  00053	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00056	83 c4 10	 add	 esp, 16			; 00000010H
  00059	50		 push	 eax
  0005a	57		 push	 edi
  0005b	53		 push	 ebx
  0005c	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory

; 1060 : 
; 1061 : 	pMsg.wItemCode		= wItemCode;
; 1062 : 	pMsg.wItemPos		= iItemSlotIndex;
; 1063 : 	pMsg.lExpireDate	= lpItemData->lExpireDate;
; 1064 : 
; 1065 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00061	0f b6 55 f1	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00065	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00068	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+6], ax
  0006c	52		 push	 edx
  0006d	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00070	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00073	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00075	50		 push	 eax
  00076	51		 push	 ecx
  00077	66 89 7d f4	 mov	 WORD PTR _pMsg$[ebp+4], di
  0007b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	5f		 pop	 edi
$LN2@OnRequestP@2:

; 1066 : }

  00084	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00087	5e		 pop	 esi
  00088	33 cd		 xor	 ecx, ebp
  0008a	5b		 pop	 ebx
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
?OnRequestPeriodItemListOnce@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ENDP ; CPeriodItemZt::OnRequestPeriodItemListOnce
_TEXT	ENDS
PUBLIC	?OnRequestPeriodExpiredItem@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ; CPeriodItemZt::OnRequestPeriodExpiredItem
; Function compile flags: /Ogtp
;	COMDAT ?OnRequestPeriodExpiredItem@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpItemData$ = 12					; size = 4
?OnRequestPeriodExpiredItem@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z PROC ; CPeriodItemZt::OnRequestPeriodExpiredItem, COMDAT
; _this$ = ecx

; 1071 : 	// not implemented
; 1072 : }

  00000	c2 08 00	 ret	 8
?OnRequestPeriodExpiredItem@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ENDP ; CPeriodItemZt::OnRequestPeriodExpiredItem
_TEXT	ENDS
PUBLIC	?SendPeriodItemInfoOnce@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@PAVCItem@@@Z ; CPeriodItemZt::SendPeriodItemInfoOnce
; Function compile flags: /Ogtp
;	COMDAT ?SendPeriodItemInfoOnce@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@PAVCItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpItem$ = 12						; size = 4
?SendPeriodItemInfoOnce@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@PAVCItem@@@Z PROC ; CPeriodItemZt::SendPeriodItemInfoOnce, COMDAT
; _this$ = ecx

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1077 : 	int iPeriodInfoIndex = 0;
; 1078 : 	iPeriodInfoIndex = lpObj->m_PeriodDataIndex;

  00004	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00007	53		 push	 ebx
  00008	8b 98 20 26 00
	00		 mov	 ebx, DWORD PTR [eax+9760]

; 1079 : 
; 1080 : 	if( this->m_PeriodData[iPeriodInfoIndex].bInUse == TRUE &&
; 1081 : 		this->m_PeriodData[iPeriodInfoIndex].DBNumber == lpObj->DBNumber )

  0000e	69 db 6c 03 00
	00		 imul	 ebx, 876		; 0000036cH
  00014	80 7c 0b 04 01	 cmp	 BYTE PTR [ebx+ecx+4], 1
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	75 2b		 jne	 SHORT $LN3@SendPeriod
  00020	8b 54 0b 08	 mov	 edx, DWORD PTR [ebx+ecx+8]
  00024	3b 50 2c	 cmp	 edx, DWORD PTR [eax+44]
  00027	75 22		 jne	 SHORT $LN3@SendPeriod

; 1082 : 	{
; 1083 : 		for(int i = 0; i < MAX_ITEMDATA; i++)

  00029	33 f6		 xor	 esi, esi
  0002b	8d 7c 0b 30	 lea	 edi, DWORD PTR [ebx+ecx+48]
  0002f	90		 npad	 1
$LL5@SendPeriod:

; 1084 : 		{
; 1085 : 			if( this->m_PeriodData[iPeriodInfoIndex].itemData[i].bInUse == TRUE )

  00030	80 7f f8 01	 cmp	 BYTE PTR [edi-8], 1
  00034	75 0c		 jne	 SHORT $LN4@SendPeriod

; 1086 : 			{
; 1087 : 				if( this->m_PeriodData[iPeriodInfoIndex].itemData[i].dwSerial == lpItem->GetNumber() )

  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  00039	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber
  0003e	39 07		 cmp	 DWORD PTR [edi], eax
  00040	74 14		 je	 SHORT $LN10@SendPeriod
$LN4@SendPeriod:

; 1082 : 	{
; 1083 : 		for(int i = 0; i < MAX_ITEMDATA; i++)

  00042	46		 inc	 esi
  00043	83 c7 1c	 add	 edi, 28			; 0000001cH
  00046	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  00049	7c e5		 jl	 SHORT $LL5@SendPeriod
$LN3@SendPeriod:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 1091 : 				}
; 1092 : 			}
; 1093 : 		}
; 1094 : 	}
; 1095 : 	return false;

  0004d	32 c0		 xor	 al, al
  0004f	5b		 pop	 ebx

; 1096 : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN10@SendPeriod:

; 1088 : 				{
; 1089 : 					this->OnRequestPeriodItemListOnce(lpObj,&this->m_PeriodData[iPeriodInfoIndex].itemData[i]);

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00060	2b c6		 sub	 eax, esi
  00062	8d 14 83	 lea	 edx, DWORD PTR [ebx+eax*4]
  00065	8d 44 0a 28	 lea	 eax, DWORD PTR [edx+ecx+40]
  00069	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0006c	50		 push	 eax
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 ?OnRequestPeriodItemListOnce@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ; CPeriodItemZt::OnRequestPeriodItemListOnce
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi

; 1090 : 					return true;

  00075	b0 01		 mov	 al, 1
  00077	5b		 pop	 ebx

; 1096 : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
?SendPeriodItemInfoOnce@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@PAVCItem@@@Z ENDP ; CPeriodItemZt::SendPeriodItemInfoOnce
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@XZ			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTimeSpan@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTimeSpan@ATL@@QAE@XZ PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 28   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 29   : }

  0000f	c3		 ret	 0
??0CTimeSpan@ATL@@QAE@XZ ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@_J@Z			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogtp
;	COMDAT ??0CTimeSpan@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTimeSpan@ATL@@QAE@_J@Z PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 34   : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTimeSpan@ATL@@QAE@_J@Z ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@JHHH@Z			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogtp
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  00006	99		 cdq
  00007	56		 push	 esi
  00008	8b f0		 mov	 esi, eax
  0000a	57		 push	 edi
  0000b	8b fa		 mov	 edi, edx
  0000d	0f a4 c2 01	 shld	 edx, eax, 1
  00011	03 c0		 add	 eax, eax
  00013	03 f0		 add	 esi, eax
  00015	13 fa		 adc	 edi, edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  0001a	0f a4 f7 03	 shld	 edi, esi, 3
  0001e	99		 cdq
  0001f	03 f6		 add	 esi, esi
  00021	03 f6		 add	 esi, esi
  00023	03 f6		 add	 esi, esi
  00025	03 f0		 add	 esi, eax
  00027	13 fa		 adc	 edi, edx
  00029	8b c6		 mov	 eax, esi
  0002b	8b d7		 mov	 edx, edi
  0002d	0f a4 c2 04	 shld	 edx, eax, 4
  00031	c1 e0 04	 shl	 eax, 4
  00034	2b c6		 sub	 eax, esi
  00036	1b d7		 sbb	 edx, edi
  00038	8b f0		 mov	 esi, eax
  0003a	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  0003d	8b fa		 mov	 edi, edx
  0003f	0f a4 f7 02	 shld	 edi, esi, 2
  00043	99		 cdq
  00044	03 f6		 add	 esi, esi
  00046	03 f6		 add	 esi, esi
  00048	03 f0		 add	 esi, eax
  0004a	13 fa		 adc	 edi, edx
  0004c	8b c6		 mov	 eax, esi
  0004e	8b d7		 mov	 edx, edi
  00050	0f a4 c2 04	 shld	 edx, eax, 4
  00054	c1 e0 04	 shl	 eax, 4
  00057	2b c6		 sub	 eax, esi
  00059	1b d7		 sbb	 edx, edi
  0005b	0f a4 c2 02	 shld	 edx, eax, 2
  0005f	03 c0		 add	 eax, eax
  00061	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
  00064	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  00067	8b fa		 mov	 edi, edx
  00069	99		 cdq
  0006a	03 f0		 add	 esi, eax
  0006c	13 fa		 adc	 edi, edx
  0006e	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  00071	5f		 pop	 edi
  00072	89 31		 mov	 DWORD PTR [ecx], esi

; 43   : }

  00074	8b c1		 mov	 eax, ecx
  00076	5e		 pop	 esi
  00077	5d		 pop	 ebp
  00078	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTotalMinutes
EXTRN	__alldiv:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTotalMinutes, COMDAT
; _this$ = ecx

; 62   : 	return( m_timeSpan/60 );

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	6a 00		 push	 0
  00007	6a 3c		 push	 60			; 0000003cH
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 __alldiv

; 63   : }

  00010	c3		 ret	 0
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTotalMinutes
_TEXT	ENDS
PUBLIC	?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTotalSeconds
; Function compile flags: /Ogtp
;	COMDAT ?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTotalSeconds, COMDAT
; _this$ = ecx

; 72   : 	return( m_timeSpan );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 73   : }

  00005	c3		 ret	 0
?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTotalSeconds
_TEXT	ENDS
PUBLIC	?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTimeSpan
; Function compile flags: /Ogtp
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 82   : 	return( m_timeSpan );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 83   : }

  00005	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@XZ				; ATL::CTime::CTime
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 166  : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 167  : }

  0000f	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 172  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
EXTRN	__mktime64:PROC
; Function compile flags: /Ogtp
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
_atm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00010	8b 55 08	 mov	 edx, DWORD PTR _nYear$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	81 fa 6c 07 00
	00		 cmp	 edx, 1900		; 0000076cH
  0001c	7d 0a		 jge	 SHORT $LN66@CTime
  0001e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00023	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN86@CTime:
$LN66@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00028	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  0002b	48		 dec	 eax
  0002c	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0002f	76 0a		 jbe	 SHORT $LN56@CTime
  00031	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00036	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN87@CTime:
$LN56@CTime:
  0003b	53		 push	 ebx

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0003c	8b 5d 10	 mov	 ebx, DWORD PTR _nDay$[ebp]
  0003f	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00042	57		 push	 edi
  00043	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00046	76 0a		 jbe	 SHORT $LN46@CTime
  00048	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0004d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN88@CTime:
$LN46@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  00052	8b 7d 14	 mov	 edi, DWORD PTR _nHour$[ebp]
  00055	83 ff 17	 cmp	 edi, 23			; 00000017H
  00058	76 0a		 jbe	 SHORT $LN36@CTime
  0005a	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0005f	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN89@CTime:
$LN36@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00064	8b 4d 18	 mov	 ecx, DWORD PTR _nMin$[ebp]
  00067	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0006a	76 0a		 jbe	 SHORT $LN26@CTime
  0006c	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00071	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN90@CTime:
$LN26@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00076	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  00079	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  0007c	76 0a		 jbe	 SHORT $LN16@CTime
  0007e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00083	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN91@CTime:
$LN16@CTime:

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;
; 198  : 	atm.tm_min = nMin;
; 199  : 	atm.tm_hour = nHour;
; 200  : 	atm.tm_mday = nDay;
; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  00088	81 c2 94 f8 ff
	ff		 add	 edx, -1900		; fffff894H
  0008e	89 45 d8	 mov	 DWORD PTR _atm$[ebp], eax
  00091	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  00094	89 55 ec	 mov	 DWORD PTR _atm$[ebp+20], edx
  00097	89 4d dc	 mov	 DWORD PTR _atm$[ebp+4], ecx

; 203  : 	atm.tm_isdst = nDST;

  0009a	8b 4d 20	 mov	 ecx, DWORD PTR _nDST$[ebp]

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  0009d	8d 55 d8	 lea	 edx, DWORD PTR _atm$[ebp]
  000a0	48		 dec	 eax
  000a1	52		 push	 edx
  000a2	89 7d e0	 mov	 DWORD PTR _atm$[ebp+8], edi
  000a5	89 5d e4	 mov	 DWORD PTR _atm$[ebp+12], ebx
  000a8	89 45 e8	 mov	 DWORD PTR _atm$[ebp+16], eax
  000ab	89 4d f8	 mov	 DWORD PTR _atm$[ebp+32], ecx
  000ae	e8 00 00 00 00	 call	 __mktime64
  000b3	83 c4 04	 add	 esp, 4
  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 207  : 	if(m_time == -1)

  000b8	23 c2		 and	 eax, edx
  000ba	5f		 pop	 edi
  000bb	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000be	5b		 pop	 ebx
  000bf	83 f8 ff	 cmp	 eax, -1
  000c2	75 0a		 jne	 SHORT $LN1@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  000c4	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN92@CTime:
$LN1@CTime:

; 210  : 	}
; 211  : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	8b c6		 mov	 eax, esi
  000d3	33 cd		 xor	 ecx, ebp
  000d5	5e		 pop	 esi
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 1c 00	 ret	 28			; 0000001cH
$LN85@CTime:
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z		; ATL::CTime::operator-
; Function compile flags: /Ogtp
;	COMDAT ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_time$ = 12						; size = 8
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z PROC		; ATL::CTime::operator-, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 305  : 	return( CTimeSpan( m_time-time.m_time ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	2b 55 0c	 sub	 edx, DWORD PTR _time$[ebp]
  00008	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000b	1b 4d 10	 sbb	 ecx, DWORD PTR _time$[ebp+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 306  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ENDP		; ATL::CTime::operator-
_TEXT	ENDS
PUBLIC	??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z		; ATL::CTime::operator+
; Function compile flags: /Ogtp
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 315  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	03 55 0c	 add	 edx, DWORD PTR _span$[ebp]
  00008	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000b	13 4d 10	 adc	 ecx, DWORD PTR _span$[ebp+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 316  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
_TEXT	ENDS
PUBLIC	?GetTime@CTime@ATL@@QBE_JXZ			; ATL::CTime::GetTime
; Function compile flags: /Ogtp
;	COMDAT ?GetTime@CTime@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTime@CTime@ATL@@QBE_JXZ PROC			; ATL::CTime::GetTime, COMDAT
; _this$ = ecx

; 415  : 	return( m_time );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 416  : }

  00005	c3		 ret	 0
?GetTime@CTime@ATL@@QBE_JXZ ENDP			; ATL::CTime::GetTime
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCPeriodItemZt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPeriodItemZt@@UAEPAXI@Z PROC			; CPeriodItemZt::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPeriodItemZt@@UAE@XZ ; CPeriodItemZt::~CPeriodItemZt
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCPeriodItemZt@@UAEPAXI@Z ENDP			; CPeriodItemZt::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Initialize@CPeriodItemZt@@QAEXXZ		; CPeriodItemZt::Initialize
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\perioditemzt.cpp
;	COMDAT ?Initialize@CPeriodItemZt@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CPeriodItemZt@@QAEXXZ PROC			; CPeriodItemZt::Initialize, COMDAT
; _this$ = ecx

; 31   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 32   : 	for(int i = 0; i < OBJMAXUSER; i++)

  00002	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00005	bf e8 03 00 00	 mov	 edi, 1000		; 000003e8H
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL3@Initialize:

; 33   : 		this->m_PeriodData[i].Clear();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?Clear@PERIOD_DATA@@QAEXXZ ; PERIOD_DATA::Clear
  00017	81 c6 6c 03 00
	00		 add	 esi, 876		; 0000036cH
  0001d	4f		 dec	 edi
  0001e	75 f0		 jne	 SHORT $LL3@Initialize

; 34   : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
?Initialize@CPeriodItemZt@@QAEXXZ ENDP			; CPeriodItemZt::Initialize
_TEXT	ENDS
PUBLIC	?RemovePeriodInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::RemovePeriodInfo
; Function compile flags: /Ogtp
;	COMDAT ?RemovePeriodInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?RemovePeriodInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z PROC ; CPeriodItemZt::RemovePeriodInfo, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	int iPeriodItemSlotIndex = lpObj->m_PeriodDataIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	56		 push	 esi
  00007	8b b0 20 26 00
	00		 mov	 esi, DWORD PTR [eax+9760]

; 74   : 
; 75   : 	if( IsCorrectUser(lpObj) == true &&
; 76   : 		iPeriodItemSlotIndex >= 0 && iPeriodItemSlotIndex < 1000 )

  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::IsCorrectUser
  00013	3c 01		 cmp	 al, 1
  00015	75 1d		 jne	 SHORT $LN7@RemovePeri
  00017	81 fe e7 03 00
	00		 cmp	 esi, 999		; 000003e7H
  0001d	77 15		 ja	 SHORT $LN7@RemovePeri

; 77   : 	{
; 78   : 		if( this->m_PeriodData[iPeriodItemSlotIndex].bInUse == 1 )

  0001f	69 f6 6c 03 00
	00		 imul	 esi, 876		; 0000036cH
  00025	38 44 0e 04	 cmp	 BYTE PTR [esi+ecx+4], al
  00029	8d 4c 0e 04	 lea	 ecx, DWORD PTR [esi+ecx+4]
  0002d	75 05		 jne	 SHORT $LN7@RemovePeri

; 79   : 			this->m_PeriodData[iPeriodItemSlotIndex].Clear();

  0002f	e8 00 00 00 00	 call	 ?Clear@PERIOD_DATA@@QAEXXZ ; PERIOD_DATA::Clear
$LN7@RemovePeri:

; 80   : 	}
; 81   : return false;

  00034	32 c0		 xor	 al, al
  00036	5e		 pop	 esi

; 82   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?RemovePeriodInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CPeriodItemZt::RemovePeriodInfo
_TEXT	ENDS
PUBLIC	?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKHJ@Z ; CPeriodItemZt::AddPeriodItemData
EXTRN	?SetPeriodItem@CItem@@QAEXXZ:PROC		; CItem::SetPeriodItem
; Function compile flags: /Ogtp
;	COMDAT ?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKHJ@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
_dwSerial$ = 16						; size = 4
_iDuration$ = 20					; size = 4
_lExpireDate$ = 24					; size = 4
?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKHJ@Z PROC ; CPeriodItemZt::AddPeriodItemData, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 167  : 	int iPeriodItemSlotIndex = lpObj->m_PeriodDataIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	57		 push	 edi
  00007	8b b8 20 26 00
	00		 mov	 edi, DWORD PTR [eax+9760]

; 168  : 
; 169  : 	if( !IsCorrectUser(lpObj) )

  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::IsCorrectUser
  00013	84 c0		 test	 al, al
  00015	75 08		 jne	 SHORT $LN6@AddPeriodI@2

; 170  : 		return -1;

  00017	83 c8 ff	 or	 eax, -1
  0001a	5f		 pop	 edi

; 197  : }

  0001b	5d		 pop	 ebp
  0001c	c2 14 00	 ret	 20			; 00000014H
$LN6@AddPeriodI@2:
  0001f	56		 push	 esi

; 171  : 
; 172  : 	int iItemSlotIndex = 0;
; 173  : 
; 174  : 	for(int i = 0; i < MAX_ITEMDATA; i++)

  00020	8b d7		 mov	 edx, edi
  00022	33 f6		 xor	 esi, esi
  00024	69 d2 6c 03 00
	00		 imul	 edx, 876		; 0000036cH
  0002a	8d 44 0a 28	 lea	 eax, DWORD PTR [edx+ecx+40]
  0002e	8b ff		 npad	 2
$LL5@AddPeriodI@2:

; 175  : 	{
; 176  : 		if( !this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].bInUse )

  00030	80 38 00	 cmp	 BYTE PTR [eax], 0
  00033	74 12		 je	 SHORT $LN10@AddPeriodI@2

; 171  : 
; 172  : 	int iItemSlotIndex = 0;
; 173  : 
; 174  : 	for(int i = 0; i < MAX_ITEMDATA; i++)

  00035	46		 inc	 esi
  00036	83 c0 1c	 add	 eax, 28			; 0000001cH
  00039	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  0003c	7c f2		 jl	 SHORT $LL5@AddPeriodI@2

; 194  : 		}
; 195  : 	}
; 196  : 	return -1;

  0003e	5e		 pop	 esi
  0003f	83 c8 ff	 or	 eax, -1
  00042	5f		 pop	 edi

; 197  : }

  00043	5d		 pop	 ebp
  00044	c2 14 00	 ret	 20			; 00000014H
$LN10@AddPeriodI@2:

; 177  : 		{
; 178  : 
; 179  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].bInUse = TRUE;
; 180  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].btType = 2;
; 181  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].wItemCode = wItemCode;

  00047	66 8b 7d 0c	 mov	 di, WORD PTR _wItemCode$[ebp]
  0004b	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00052	2b c6		 sub	 eax, esi
  00054	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00057	03 c1		 add	 eax, ecx
  00059	66 89 78 2a	 mov	 WORD PTR [eax+42], di

; 182  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].dwSerial = dwSerial;

  0005d	8b 7d 10	 mov	 edi, DWORD PTR _dwSerial$[ebp]
  00060	89 78 30	 mov	 DWORD PTR [eax+48], edi
  00063	53		 push	 ebx

; 183  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].lExpireDate = lExpireDate;

  00064	8d 7e 02	 lea	 edi, DWORD PTR [esi+2]
  00067	8d 1c fd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*8]
  0006e	2b df		 sub	 ebx, edi
  00070	8b 7d 18	 mov	 edi, DWORD PTR _lExpireDate$[ebp]
  00073	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]
  00076	89 3c 0a	 mov	 DWORD PTR [edx+ecx], edi

; 184  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].iDuration = iDuration;

  00079	8b 55 14	 mov	 edx, DWORD PTR _iDuration$[ebp]

; 185  : 
; 186  : 			iItemSlotIndex = GetItemFromInventory(lpObj,wItemCode,dwSerial);

  0007c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0007f	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00082	8b 55 0c	 mov	 edx, DWORD PTR _wItemCode$[ebp]
  00085	66 c7 40 28 01
	02		 mov	 WORD PTR [eax+40], 513	; 00000201H
  0008b	8b 45 10	 mov	 eax, DWORD PTR _dwSerial$[ebp]
  0008e	50		 push	 eax
  0008f	52		 push	 edx
  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory
  00096	5b		 pop	 ebx

; 187  : 
; 188  : 			if( iItemSlotIndex != -1 )

  00097	83 f8 ff	 cmp	 eax, -1
  0009a	74 13		 je	 SHORT $LN1@AddPeriodI@2

; 189  : 			{
; 190  : 				lpObj->pInventory[iItemSlotIndex].SetPeriodItem();

  0009c	8b c8		 mov	 ecx, eax
  0009e	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  000a4	03 8f 24 0e 00
	00		 add	 ecx, DWORD PTR [edi+3620]
  000aa	e8 00 00 00 00	 call	 ?SetPeriodItem@CItem@@QAEXXZ ; CItem::SetPeriodItem
$LN1@AddPeriodI@2:

; 191  : 			}
; 192  : 
; 193  : 			return i;

  000af	8b c6		 mov	 eax, esi
  000b1	5e		 pop	 esi
  000b2	5f		 pop	 edi

; 197  : }

  000b3	5d		 pop	 ebp
  000b4	c2 14 00	 ret	 20			; 00000014H
?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKHJ@Z ENDP ; CPeriodItemZt::AddPeriodItemData
_TEXT	ENDS
PUBLIC	?SetDisableItemToExpire@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CPeriodItemZt::SetDisableItemToExpire
; Function compile flags: /Ogtp
;	COMDAT ?SetDisableItemToExpire@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iInventoryPosition$ = 12				; size = 4
?SetDisableItemToExpire@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@H@Z PROC ; CPeriodItemZt::SetDisableItemToExpire, COMDAT
; _this$ = ecx

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 603  : 	if( !lpObj )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	75 07		 jne	 SHORT $LN5@SetDisable
$LN3@SetDisable:

; 604  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5f		 pop	 edi

; 619  : 
; 620  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
$LN5@SetDisable:

; 605  : 
; 606  : 	if( lpObj->Connected < PLAYER_LOGGED ||
; 607  : 		lpObj->Type != OBJ_USER )

  00012	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  00016	7c f3		 jl	 SHORT $LN3@SetDisable
  00018	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  0001d	75 ec		 jne	 SHORT $LN3@SetDisable

; 608  : 		return false;
; 609  : 
; 610  : 	if( iInventoryPosition == -1 )

  0001f	56		 push	 esi
  00020	8b 75 0c	 mov	 esi, DWORD PTR _iInventoryPosition$[ebp]
  00023	83 fe ff	 cmp	 esi, -1

; 611  : 		return false;

  00026	74 17		 je	 SHORT $LN9@SetDisable

; 612  : 
; 613  : 	if( !lpObj->pInventory[iInventoryPosition].IsPeriodItem() )

  00028	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  0002e	69 f6 d4 00 00
	00		 imul	 esi, 212		; 000000d4H
  00034	03 ce		 add	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?IsPeriodItem@CItem@@QAE_NXZ ; CItem::IsPeriodItem
  0003b	84 c0		 test	 al, al
  0003d	75 08		 jne	 SHORT $LN1@SetDisable
$LN9@SetDisable:
  0003f	5e		 pop	 esi

; 614  : 		return false;

  00040	32 c0		 xor	 al, al
  00042	5f		 pop	 edi

; 619  : 
; 620  : }

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN1@SetDisable:

; 615  : 
; 616  : 	lpObj->pInventory[iInventoryPosition].SetPeriodItemZtpire();

  00047	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  0004d	03 ce		 add	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?SetPeriodItemZtpire@CItem@@QAEXXZ ; CItem::SetPeriodItemZtpire

; 617  : 	GCItemListSend(lpObj->m_Index);

  00054	8b 07		 mov	 eax, DWORD PTR [edi]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?GCItemListSend@@YAXH@Z	; GCItemListSend
  0005c	83 c4 04	 add	 esp, 4

; 618  : 	g_PeriodItemZt.OnRequestPeriodItemList(lpObj);

  0005f	57		 push	 edi
  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  00065	e8 00 00 00 00	 call	 ?OnRequestPeriodItemList@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::OnRequestPeriodItemList
  0006a	5e		 pop	 esi
  0006b	5f		 pop	 edi

; 619  : 
; 620  : }

  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?SetDisableItemToExpire@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@H@Z ENDP ; CPeriodItemZt::SetDisableItemToExpire
_TEXT	ENDS
PUBLIC	??_C@_0HP@HDHLEIFJ@?$FLPeriodItemZt?$FN?$FLSetExpiredItemLis@ ; `string'
PUBLIC	?DGPeriodItemZtExpiredItemList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_EXPIRED_ITEMLIST@@@Z ; CPeriodItemZt::DGPeriodItemZtExpiredItemList
;	COMDAT ??_C@_0HP@HDHLEIFJ@?$FLPeriodItemZt?$FN?$FLSetExpiredItemLis@
CONST	SEGMENT
??_C@_0HP@HDHLEIFJ@?$FLPeriodItemZt?$FN?$FLSetExpiredItemLis@ DB '[Period'
	DB	'ItemZt][SetExpiredItemList] OnRequest Expired Item Set Disabl'
	DB	'e. User Id : %s(%d), Name : %s, Item : %s(%d), Serial : %u', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGPeriodItemZtExpiredItemList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_EXPIRED_ITEMLIST@@@Z
_TEXT	SEGMENT
_iInventoryPosition$ = -12				; size = 4
_i$204949 = -8						; size = 4
_this$ = -4						; size = 4
_lpMsg$ = 8						; size = 4
?DGPeriodItemZtExpiredItemList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_EXPIRED_ITEMLIST@@@Z PROC ; CPeriodItemZt::DGPeriodItemZtExpiredItemList, COMDAT
; _this$ = ecx

; 847  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 848  : 	int iIndex = lpMsg->wUserIndex;

  00008	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]
  0000b	0f b7 77 04	 movzx	 esi, WORD PTR [edi+4]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 849  : 
; 850  : 	if( iIndex < 0 || iIndex >= OBJMAX )

  00012	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00018	0f 87 aa 00 00
	00		 ja	 $LN5@DGPeriodIt@2

; 851  : 		return;
; 852  : 
; 853  : 	LPOBJ lpObj = &gObj[iIndex];

  0001e	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00024	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 854  : 
; 855  : 	if( lpObj == NULL )

  0002a	0f 84 98 00 00
	00		 je	 $LN5@DGPeriodIt@2

; 856  : 		return;
; 857  : 
; 858  : 	if( lpObj->Type != OBJ_USER ||
; 859  : 		lpObj->Connected < PLAYER_LOGGED )

  00030	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00035	0f 85 8d 00 00
	00		 jne	 $LN5@DGPeriodIt@2
  0003b	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  0003f	0f 8c 83 00 00
	00		 jl	 $LN5@DGPeriodIt@2

; 860  : 		return;
; 861  : 
; 862  : 	int iInventoryPosition = 0;
; 863  : 
; 864  : 	for(int i = 0; i < lpMsg->btExpiredItemCount; i++)

  00045	80 7f 06 00	 cmp	 BYTE PTR [edi+6], 0
  00049	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$204949[ebp], 0
  00050	76 76		 jbe	 SHORT $LN5@DGPeriodIt@2
  00052	53		 push	 ebx
  00053	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  00056	83 c7 30	 add	 edi, 48			; 00000030H
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL14@DGPeriodIt@2:

; 865  : 	{
; 866  : 		iInventoryPosition = this->GetItemFromInventory(lpObj,lpMsg->wItemCode[i],lpMsg->dwSerial[i]);

  00060	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00063	8b 07		 mov	 eax, DWORD PTR [edi]
  00065	50		 push	 eax
  00066	51		 push	 ecx
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory
  00070	89 45 f4	 mov	 DWORD PTR _iInventoryPosition$[ebp], eax

; 867  : 
; 868  : 		if( iInventoryPosition != -1 )

  00073	83 f8 ff	 cmp	 eax, -1
  00076	74 37		 je	 SHORT $LN3@DGPeriodIt@2

; 869  : 		{
; 870  : 			LogAddTD("[PeriodItemZt][SetExpiredItemList] OnRequest Expired Item Set Disable. User Id : %s(%d), Name : %s, Item : %s(%d), Serial : %u",
; 871  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,ItemAttribute[lpMsg->wItemCode[i]].Name,lpMsg->wItemCode[i],lpMsg->dwSerial[i]);

  00078	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0007b	8b 17		 mov	 edx, DWORD PTR [edi]
  0007d	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00080	52		 push	 edx
  00081	50		 push	 eax
  00082	6b c0 70	 imul	 eax, 112		; 00000070H
  00085	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0008a	50		 push	 eax
  0008b	8d 46 77	 lea	 eax, DWORD PTR [esi+119]
  0008e	50		 push	 eax
  0008f	51		 push	 ecx
  00090	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00093	52		 push	 edx
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0HP@HDHLEIFJ@?$FLPeriodItemZt?$FN?$FLSetExpiredItemLis@
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 872  : 
; 873  : 			SetDisableItemToExpire(lpObj,iInventoryPosition);

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _iInventoryPosition$[ebp]
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	83 c4 1c	 add	 esp, 28			; 0000001cH
  000a8	50		 push	 eax
  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 ?SetDisableItemToExpire@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CPeriodItemZt::SetDisableItemToExpire
$LN3@DGPeriodIt@2:

; 860  : 		return;
; 861  : 
; 862  : 	int iInventoryPosition = 0;
; 863  : 
; 864  : 	for(int i = 0; i < lpMsg->btExpiredItemCount; i++)

  000af	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  000b2	8b 45 f8	 mov	 eax, DWORD PTR _i$204949[ebp]
  000b5	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  000b9	40		 inc	 eax
  000ba	83 c7 04	 add	 edi, 4
  000bd	83 c3 02	 add	 ebx, 2
  000c0	89 45 f8	 mov	 DWORD PTR _i$204949[ebp], eax
  000c3	3b c2		 cmp	 eax, edx
  000c5	7c 99		 jl	 SHORT $LL14@DGPeriodIt@2
  000c7	5b		 pop	 ebx
$LN5@DGPeriodIt@2:
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi

; 874  : 		}
; 875  : 	}
; 876  : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?DGPeriodItemZtExpiredItemList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_EXPIRED_ITEMLIST@@@Z ENDP ; CPeriodItemZt::DGPeriodItemZtExpiredItemList
_TEXT	ENDS
PUBLIC	??_C@_0FM@NLJNIKNO@?$FLPeriodItemZt?$FN?$FLSelectItemListCou@ ; `string'
PUBLIC	?DGPeriodItemZtListCount@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST_COUNT@@@Z ; CPeriodItemZt::DGPeriodItemZtListCount
;	COMDAT ??_C@_0FM@NLJNIKNO@?$FLPeriodItemZt?$FN?$FLSelectItemListCou@
CONST	SEGMENT
??_C@_0FM@NLJNIKNO@?$FLPeriodItemZt?$FN?$FLSelectItemListCou@ DB '[Period'
	DB	'ItemZt][SelectItemListCount] End PeriodItem List Receive User'
	DB	' Id : %s(%d), Name : %s', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGPeriodItemZtListCount@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST_COUNT@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?DGPeriodItemZtListCount@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST_COUNT@@@Z PROC ; CPeriodItemZt::DGPeriodItemZtListCount, COMDAT
; _this$ = ecx

; 880  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 881  : 	int iIndex = lpMsg->wUserIndex;

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  0000a	0f b7 71 04	 movzx	 esi, WORD PTR [ecx+4]

; 882  : 
; 883  : 	if( iIndex < 0 || iIndex >= OBJMAX )

  0000e	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00014	77 4a		 ja	 SHORT $LN2@DGPeriodIt@3

; 884  : 		return;
; 885  : 
; 886  : 	LPOBJ lpObj = &gObj[iIndex];

  00016	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001c	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 887  : 
; 888  : 	if( lpObj == NULL )

  00022	74 3c		 je	 SHORT $LN2@DGPeriodIt@3

; 889  : 		return;
; 890  : 
; 891  : 	if( lpObj->Type != OBJ_USER ||
; 892  : 		lpObj->Connected < PLAYER_LOGGED )

  00024	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00029	75 35		 jne	 SHORT $LN2@DGPeriodIt@3
  0002b	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  0002f	7c 2f		 jl	 SHORT $LN2@DGPeriodIt@3

; 893  : 		return;
; 894  : 
; 895  : 	if( lpObj->DBNumber != lpMsg->dwUserGuid )

  00031	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00034	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00037	75 27		 jne	 SHORT $LN2@DGPeriodIt@3

; 896  : 		return;
; 897  : 
; 898  : 	LogAddTD("[PeriodItemZt][SelectItemListCount] End PeriodItem List Receive User Id : %s(%d), Name : %s",
; 899  : 		lpObj->AccountID,lpObj->DBNumber,lpObj->Name);

  00039	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  0003c	51		 push	 ecx
  0003d	50		 push	 eax
  0003e	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NLJNIKNO@?$FLPeriodItemZt?$FN?$FLSelectItemListCou@
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 900  : 
; 901  : 	SetExpireNotMatchedData(lpObj);

  00050	56		 push	 esi
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?SetExpireNotMatchedData@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::SetExpireNotMatchedData

; 902  : 	OnRequestPeriodItemList(lpObj);

  00058	56		 push	 esi
  00059	8b cf		 mov	 ecx, edi
  0005b	e8 00 00 00 00	 call	 ?OnRequestPeriodItemList@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::OnRequestPeriodItemList
$LN2@DGPeriodIt@3:
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 903  : }

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?DGPeriodItemZtListCount@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST_COUNT@@@Z ENDP ; CPeriodItemZt::DGPeriodItemZtListCount
_TEXT	ENDS
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	return( CTime( ::_time64( NULL ) ) );

  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 __time64
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	89 01		 mov	 DWORD PTR [ecx], eax
  0000f	83 c4 04	 add	 esp, 4
  00012	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00015	8b c1		 mov	 eax, ecx

; 144  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
PUBLIC	_wItemCode$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGK@Z ; CPeriodItemZt::RemovePeriodItemData
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?LevelSmallConvert@@YAEHH@Z:PROC		; LevelSmallConvert
EXTRN	?ItemByteConvert@@YAXPAEVCItem@@@Z:PROC		; ItemByteConvert
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?gObjMakePreviewCharSet@@YAXH@Z:PROC		; gObjMakePreviewCharSet
EXTRN	?SkillChangeUse@CObjUseSkill@@QAEHH@Z:PROC	; CObjUseSkill::SkillChangeUse
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?gObjInventoryDeleteItem@@YAEHH@Z:PROC		; gObjInventoryDeleteItem
EXTRN	?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?GetBuffInfo@CBuffManager@@QAEPAUBUFF_EFFECT_DATA@@H@Z:PROC ; CBuffManager::GetBuffInfo
EXTRN	?g_BuffManager@@3VCBuffManager@@A:DWORD		; g_BuffManager
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\perioditemzt.cpp
;	COMDAT ?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGK@Z
_TEXT	SEGMENT
_this$GSCopy$ = -44					; size = 4
_wItemCode$GSCopy$ = -40				; size = 2
_iInventoryPosition$204652 = -36			; size = 4
_ItemData$ = -32					; size = 28
_pChange$204657 = -24					; size = 17
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_btItemType$ = 12					; size = 1
_wItemCode$ = 16					; size = 2
_dwSerial$ = 20						; size = 4
?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGK@Z PROC ; CPeriodItemZt::RemovePeriodItemData, COMDAT
; _this$ = ecx

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	0f b7 7d 10	 movzx	 edi, WORD PTR _wItemCode$[ebp]
  0001a	8b f1		 mov	 esi, ecx

; 252  : 		}
; 253  : 	}
; 254  : 	else
; 255  : 	{
; 256  : 		return false;
; 257  : 	}
; 258  : 
; 259  : 
; 260  : 	ITEMDATA ItemData;
; 261  : 	ItemData.btType = btItemType;

  0001c	89 75 d4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0001f	89 7d d8	 mov	 DWORD PTR _wItemCode$GSCopy$[ebp], edi
  00022	85 db		 test	 ebx, ebx
  00024	0f 84 80 01 00
	00		 je	 $LN11@RemovePeri@2

; 202  : 	if( !lpObj )
; 203  : 		return false;
; 204  : 
; 205  : 	if( lpObj->Type != OBJ_USER || lpObj->Connected < 2 )

  0002a	66 83 7b 68 01	 cmp	 WORD PTR [ebx+104], 1
  0002f	0f 85 75 01 00
	00		 jne	 $LN11@RemovePeri@2
  00035	83 7b 04 02	 cmp	 DWORD PTR [ebx+4], 2
  00039	0f 8c 6b 01 00
	00		 jl	 $LN11@RemovePeri@2

; 206  : 		return false;
; 207  : 
; 208  : 	if( btItemType == 1 )

  0003f	8a 45 0c	 mov	 al, BYTE PTR _btItemType$[ebp]
  00042	3c 01		 cmp	 al, 1
  00044	75 28		 jne	 SHORT $LN10@RemovePeri@2

; 209  : 	{
; 210  : 		BUFF_EFFECT_DATE* lpBuffData = 0;
; 211  : 		lpBuffData = (LPBUFF_EFFECT_DATE)g_BuffManager.GetBuffInfo(wItemCode);

  00046	0f b7 c7	 movzx	 eax, di
  00049	50		 push	 eax
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffManager@@3VCBuffManager@@A ; g_BuffManager
  0004f	e8 00 00 00 00	 call	 ?GetBuffInfo@CBuffManager@@QAEPAUBUFF_EFFECT_DATA@@H@Z ; CBuffManager::GetBuffInfo

; 212  : 
; 213  : 		if( !lpBuffData )

  00054	85 c0		 test	 eax, eax

; 214  : 			return false;

  00056	0f 84 4e 01 00
	00		 je	 $LN11@RemovePeri@2

; 215  : 
; 216  : 		gObjRemoveBuffEffect(lpObj,lpBuffData->btIndex);

  0005c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0005f	51		 push	 ecx
  00060	53		 push	 ebx
  00061	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00066	83 c4 08	 add	 esp, 8
  00069	e9 0b 01 00 00	 jmp	 $LN4@RemovePeri@2
$LN10@RemovePeri@2:

; 217  : 	}
; 218  : 	else if( btItemType == 2 )

  0006e	3c 02		 cmp	 al, 2
  00070	0f 85 34 01 00
	00		 jne	 $LN11@RemovePeri@2

; 219  : 	{
; 220  : 		if( dwSerial == 0 )

  00076	8b 45 14	 mov	 eax, DWORD PTR _dwSerial$[ebp]
  00079	85 c0		 test	 eax, eax

; 221  : 			return false;

  0007b	0f 84 29 01 00
	00		 je	 $LN11@RemovePeri@2

; 222  : 
; 223  : 		int iInventoryPosition = 0;
; 224  : 		iInventoryPosition = this->GetItemFromInventory(lpObj,wItemCode,dwSerial);

  00081	50		 push	 eax
  00082	57		 push	 edi
  00083	53		 push	 ebx
  00084	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory
  00089	89 45 dc	 mov	 DWORD PTR _iInventoryPosition$204652[ebp], eax

; 225  : 
; 226  : 		if( iInventoryPosition == -1 )

  0008c	83 f8 ff	 cmp	 eax, -1

; 227  : 			return false;

  0008f	0f 84 15 01 00
	00		 je	 $LN11@RemovePeri@2

; 228  : 
; 229  : 		SetDisableItemToExpire(lpObj,iInventoryPosition);

  00095	50		 push	 eax
  00096	53		 push	 ebx
  00097	8b ce		 mov	 ecx, esi
  00099	e8 00 00 00 00	 call	 ?SetDisableItemToExpire@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CPeriodItemZt::SetDisableItemToExpire

; 230  : 		//auto-deleting
; 231  : 		gObjInventoryDeleteItem(lpObj->m_Index, iInventoryPosition);

  0009e	8b 55 dc	 mov	 edx, DWORD PTR _iInventoryPosition$204652[ebp]
  000a1	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a3	52		 push	 edx
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 232  : 		GCInventoryItemDeleteSend(lpObj->m_Index, iInventoryPosition, 1);

  000aa	8b 4d dc	 mov	 ecx, DWORD PTR _iInventoryPosition$204652[ebp]
  000ad	8b 13		 mov	 edx, DWORD PTR [ebx]
  000af	6a 01		 push	 1
  000b1	51		 push	 ecx
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 233  : 		gObjCalCharacter(lpObj->m_Index);

  000b8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 234  : 		// ----
; 235  : 		if( iInventoryPosition < 12 )

  000c0	8b 45 dc	 mov	 eax, DWORD PTR _iInventoryPosition$204652[ebp]
  000c3	83 c4 18	 add	 esp, 24			; 00000018H
  000c6	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  000c9	0f 8d aa 00 00
	00		 jge	 $LN4@RemovePeri@2

; 236  : 		{
; 237  : 			if( iInventoryPosition == 10 || iInventoryPosition == 11 )

  000cf	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000d2	74 05		 je	 SHORT $LN2@RemovePeri@2
  000d4	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000d7	75 0d		 jne	 SHORT $LN3@RemovePeri@2
$LN2@RemovePeri@2:

; 238  : 			{
; 239  : 				gObjUseSkill.SkillChangeUse(lpObj->m_Index);

  000d9	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000db	51		 push	 ecx
  000dc	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  000e1	e8 00 00 00 00	 call	 ?SkillChangeUse@CObjUseSkill@@QAEHH@Z ; CObjUseSkill::SkillChangeUse
$LN3@RemovePeri@2:

; 240  : 			}
; 241  : 			// ----
; 242  : 			gObjMakePreviewCharSet(lpObj->m_Index);

  000e6	8b 13		 mov	 edx, DWORD PTR [ebx]
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 ?gObjMakePreviewCharSet@@YAXH@Z ; gObjMakePreviewCharSet

; 243  : 			PMSG_USEREQUIPMENTCHANGED pChange;
; 244  : 			PHeadSetB((LPBYTE)&pChange, 0x25, sizeof(pChange));

  000ee	6a 11		 push	 17			; 00000011H
  000f0	8d 45 e8	 lea	 eax, DWORD PTR _pChange$204657[ebp]
  000f3	6a 25		 push	 37			; 00000025H
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 245  : 			pChange.NumberH = SET_NUMBERH(lpObj->m_Index);
; 246  : 			pChange.NumberL = SET_NUMBERL(lpObj->m_Index);
; 247  : 			ItemByteConvert(pChange.ItemInfo, lpObj->pInventory[iInventoryPosition]);

  000fb	8b 45 dc	 mov	 eax, DWORD PTR _iInventoryPosition$204652[ebp]
  000fe	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00100	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  00106	8b b3 24 0e 00
	00		 mov	 esi, DWORD PTR [ebx+3620]
  0010c	8a 13		 mov	 dl, BYTE PTR [ebx]
  0010e	c1 e9 08	 shr	 ecx, 8
  00111	88 4d eb	 mov	 BYTE PTR _pChange$204657[ebp+3], cl
  00114	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  0011a	03 f0		 add	 esi, eax
  0011c	8b fc		 mov	 edi, esp
  0011e	88 55 ec	 mov	 BYTE PTR _pChange$204657[ebp+4], dl
  00121	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00126	f3 a5		 rep movsd
  00128	8d 4d ed	 lea	 ecx, DWORD PTR _pChange$204657[ebp+5]
  0012b	51		 push	 ecx
  0012c	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 248  : 			pChange.ItemInfo[1] = iInventoryPosition <<  4;

  00131	8b 45 dc	 mov	 eax, DWORD PTR _iInventoryPosition$204652[ebp]
  00134	8a d0		 mov	 dl, al

; 249  : 			pChange.ItemInfo[1] |= LevelSmallConvert(lpObj->m_Index, iInventoryPosition) & 0x0F;

  00136	50		 push	 eax
  00137	8b 03		 mov	 eax, DWORD PTR [ebx]
  00139	c0 e2 04	 shl	 dl, 4
  0013c	50		 push	 eax
  0013d	88 55 ee	 mov	 BYTE PTR _pChange$204657[ebp+6], dl
  00140	e8 00 00 00 00	 call	 ?LevelSmallConvert@@YAEHH@Z ; LevelSmallConvert

; 250  : 			DataSend(lpObj->m_Index, (LPBYTE)&pChange, pChange.h.size);

  00145	0f b6 4d e9	 movzx	 ecx, BYTE PTR _pChange$204657[ebp+1]
  00149	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0014f	24 0f		 and	 al, 15			; 0000000fH
  00151	08 45 ee	 or	 BYTE PTR _pChange$204657[ebp+6], al
  00154	8b 03		 mov	 eax, DWORD PTR [ebx]
  00156	51		 push	 ecx
  00157	8d 55 e8	 lea	 edx, DWORD PTR _pChange$204657[ebp]
  0015a	52		 push	 edx
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 251  : 			MsgSendV2(lpObj, (LPBYTE)&pChange, pChange.h.size);

  00161	0f b6 4d e9	 movzx	 ecx, BYTE PTR _pChange$204657[ebp+1]
  00165	51		 push	 ecx
  00166	8d 55 e8	 lea	 edx, DWORD PTR _pChange$204657[ebp]
  00169	52		 push	 edx
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  00170	8b 7d d8	 mov	 edi, DWORD PTR _wItemCode$GSCopy$[ebp]
  00173	8b 75 d4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00176	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@RemovePeri@2:

; 262  : 	ItemData.wItemCode = wItemCode;
; 263  : 	ItemData.dwSerial = dwSerial;

  00179	8b 4d 14	 mov	 ecx, DWORD PTR _dwSerial$[ebp]
  0017c	8a 45 0c	 mov	 al, BYTE PTR _btItemType$[ebp]

; 264  : 
; 265  : 	RequestPeriodItemDelete(lpObj,&ItemData);

  0017f	8d 55 e0	 lea	 edx, DWORD PTR _ItemData$[ebp]
  00182	52		 push	 edx
  00183	89 4d e8	 mov	 DWORD PTR _ItemData$[ebp+8], ecx
  00186	53		 push	 ebx
  00187	8b ce		 mov	 ecx, esi
  00189	88 45 e1	 mov	 BYTE PTR _ItemData$[ebp+1], al
  0018c	66 89 7d e2	 mov	 WORD PTR _ItemData$[ebp+2], di
  00190	e8 00 00 00 00	 call	 ?RequestPeriodItemDelete@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ; CPeriodItemZt::RequestPeriodItemDelete

; 266  : 	return true;

  00195	b0 01		 mov	 al, 1

; 267  : }

  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019d	33 cd		 xor	 ecx, ebp
  0019f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c2 10 00	 ret	 16			; 00000010H
$LN11@RemovePeri@2:
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	33 cd		 xor	 ecx, ebp
  001b1	32 c0		 xor	 al, al
  001b3	5b		 pop	 ebx
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c2 10 00	 ret	 16			; 00000010H
?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGK@Z ENDP ; CPeriodItemZt::RemovePeriodItemData
_TEXT	ENDS
PUBLIC	?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::RemovePeriodItemData
; Function compile flags: /Ogtp
;	COMDAT ?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GK@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
_dwSerial$ = 16						; size = 4
?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GK@Z PROC ; CPeriodItemZt::RemovePeriodItemData, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 272  : 	int iInventoryPosition = 0;
; 273  : 
; 274  : 	if( !lpObj )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	75 08		 jne	 SHORT $LN4@RemovePeri@3
$LN2@RemovePeri@3:
  0000e	5e		 pop	 esi

; 275  : 		return false;

  0000f	32 c0		 xor	 al, al
  00011	5b		 pop	 ebx

; 291  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN4@RemovePeri@3:

; 276  : 
; 277  : 	if( lpObj->Type != OBJ_USER || lpObj->Connected < PLAYER_LOGGED )

  00016	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0001b	75 f1		 jne	 SHORT $LN2@RemovePeri@3
  0001d	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00021	7c eb		 jl	 SHORT $LN2@RemovePeri@3

; 278  : 		return false;
; 279  : 
; 280  : 	iInventoryPosition = this->GetItemFromInventory(lpObj,wItemCode,dwSerial);

  00023	8b 45 10	 mov	 eax, DWORD PTR _dwSerial$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _wItemCode$[ebp]
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	51		 push	 ecx
  0002c	56		 push	 esi
  0002d	8b cb		 mov	 ecx, ebx
  0002f	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory
  00034	8b f8		 mov	 edi, eax

; 281  : 
; 282  : 	if( iInventoryPosition == -1 )

  00036	83 ff ff	 cmp	 edi, -1
  00039	75 09		 jne	 SHORT $LN1@RemovePeri@3

; 283  : 		return false;

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	32 c0		 xor	 al, al
  0003f	5b		 pop	 ebx

; 291  : }

  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
$LN1@RemovePeri@3:

; 284  : 	//auto-deleting
; 285  : 	gObjInventoryDeleteItem(lpObj->m_Index, iInventoryPosition);

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	57		 push	 edi
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 286  : 	GCInventoryItemDeleteSend(lpObj->m_Index, iInventoryPosition, 1);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	6a 01		 push	 1
  00051	57		 push	 edi
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 287  : 	gObjCalCharacter(lpObj->m_Index);

  00058	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00060	83 c4 18	 add	 esp, 24			; 00000018H

; 288  : 	// ----
; 289  : 	this->SetDisableItemToExpire(lpObj,iInventoryPosition);

  00063	57		 push	 edi
  00064	56		 push	 esi
  00065	8b cb		 mov	 ecx, ebx
  00067	e8 00 00 00 00	 call	 ?SetDisableItemToExpire@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CPeriodItemZt::SetDisableItemToExpire
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 290  : 	return true;

  0006e	b0 01		 mov	 al, 1
  00070	5b		 pop	 ebx

; 291  : }

  00071	5d		 pop	 ebp
  00072	c2 0c 00	 ret	 12			; 0000000cH
?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GK@Z ENDP ; CPeriodItemZt::RemovePeriodItemData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertStringToTime@CPeriodItemZt@@QAEJPBD@Z	; CPeriodItemZt::ConvertStringToTime
EXTRN	_atoi:PROC
EXTRN	_strtok:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ConvertStringToTime@CPeriodItemZt@@QAEJPBD@Z
_TEXT	SEGMENT
_tCurrentTime$ = -44					; size = 8
_tReturnTime$ = -36					; size = 8
_iHour$ = -32						; size = 4
_seps$ = -28						; size = 4
_chDate$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_pchTime$ = 8						; size = 4
?ConvertStringToTime@CPeriodItemZt@@QAEJPBD@Z PROC	; CPeriodItemZt::ConvertStringToTime, COMDAT
; _this$ = ecx

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _pchTime$[ebp]

; 326  : 	int iYear = 0;
; 327  : 	int iMonth = 0;
; 328  : 	int iDay = 0;
; 329  : 	int iHour = 0;
; 330  : 	int iMinute = 0;
; 331  : 	int iDateLength = 0;
; 332  : 
; 333  : 	CTime tCurrentTime(CTime::GetTickCount());

  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 __time64
  0001b	83 c4 04	 add	 esp, 4
  0001e	89 45 d4	 mov	 DWORD PTR _tCurrentTime$[ebp], eax
  00021	89 55 d8	 mov	 DWORD PTR _tCurrentTime$[ebp+4], edx

; 334  : 	CTime tExpireTime;
; 335  : 	CTimeSpan tSpanTime;
; 336  : 
; 337  : 	long lReturnTime = 0;
; 338  : 	char chDate[20];
; 339  : 
; 340  : 	char* Token;
; 341  : 	char seps[4] = "-: ";

  00024	c7 45 e4 2d 3a
	20 00		 mov	 DWORD PTR _seps$[ebp], 2112045 ; 00203a2dH

; 342  : 
; 343  : 	if( !pchTime )

  0002b	85 f6		 test	 esi, esi

; 344  : 		return 0;

  0002d	0f 84 d8 00 00
	00		 je	 $LN1@ConvertStr

; 345  : 
; 346  : 	memcpy(chDate,pchTime,sizeof(chDate));

  00033	8b 06		 mov	 eax, DWORD PTR [esi]
  00035	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00038	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0003b	89 45 e8	 mov	 DWORD PTR _chDate$[ebp], eax
  0003e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00041	89 4d ec	 mov	 DWORD PTR _chDate$[ebp+4], ecx
  00044	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00047	89 45 f4	 mov	 DWORD PTR _chDate$[ebp+12], eax

; 347  : 	iDateLength = strlen(chDate);

  0004a	8d 45 e8	 lea	 eax, DWORD PTR _chDate$[ebp]
  0004d	89 55 f0	 mov	 DWORD PTR _chDate$[ebp+8], edx
  00050	89 4d f8	 mov	 DWORD PTR _chDate$[ebp+16], ecx
  00053	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL20@ConvertStr:
  00056	8a 08		 mov	 cl, BYTE PTR [eax]
  00058	40		 inc	 eax
  00059	84 c9		 test	 cl, cl
  0005b	75 f9		 jne	 SHORT $LL20@ConvertStr
  0005d	2b c2		 sub	 eax, edx

; 348  : 
; 349  : 	if( iDateLength < 0 || iDateLength > 20 )

  0005f	83 f8 14	 cmp	 eax, 20			; 00000014H
  00062	0f 87 a3 00 00
	00		 ja	 $LN1@ConvertStr

; 350  : 		return 0;
; 351  : 
; 352  : 	Token = strtok(chDate,seps);

  00068	53		 push	 ebx
  00069	57		 push	 edi
  0006a	8d 55 e4	 lea	 edx, DWORD PTR _seps$[ebp]
  0006d	52		 push	 edx
  0006e	8d 45 e8	 lea	 eax, DWORD PTR _chDate$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _strtok

; 353  : 	iYear = atoi(Token);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _atoi

; 354  : 
; 355  : 	Token = strtok(0,seps);

  0007d	8d 4d e4	 lea	 ecx, DWORD PTR _seps$[ebp]
  00080	51		 push	 ecx
  00081	6a 00		 push	 0
  00083	8b f0		 mov	 esi, eax
  00085	e8 00 00 00 00	 call	 _strtok

; 356  : 	iMonth = atoi(Token);

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atoi

; 357  : 
; 358  : 	Token = strtok(0,seps);

  00090	8d 55 e4	 lea	 edx, DWORD PTR _seps$[ebp]
  00093	52		 push	 edx
  00094	6a 00		 push	 0
  00096	8b f8		 mov	 edi, eax
  00098	e8 00 00 00 00	 call	 _strtok

; 359  : 	iDay = atoi(Token);

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _atoi
  000a3	8b d8		 mov	 ebx, eax

; 360  : 
; 361  : 	Token = strtok(0,seps);

  000a5	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  000a8	50		 push	 eax
  000a9	6a 00		 push	 0
  000ab	e8 00 00 00 00	 call	 _strtok

; 362  : 	iHour = atoi(Token);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _atoi

; 363  : 
; 364  : 	Token = strtok(0,seps);

  000b6	8d 4d e4	 lea	 ecx, DWORD PTR _seps$[ebp]
  000b9	51		 push	 ecx
  000ba	6a 00		 push	 0
  000bc	89 45 e0	 mov	 DWORD PTR _iHour$[ebp], eax
  000bf	e8 00 00 00 00	 call	 _strtok

; 365  : 	iMinute = atoi(Token);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _atoi

; 366  : 
; 367  : 	CTime tReturnTime(iYear,iMonth,iDay,iHour,iMinute,0,-1);

  000ca	8b 55 e0	 mov	 edx, DWORD PTR _iHour$[ebp]
  000cd	83 c4 3c	 add	 esp, 60			; 0000003cH
  000d0	6a ff		 push	 -1
  000d2	6a 00		 push	 0
  000d4	50		 push	 eax
  000d5	52		 push	 edx
  000d6	53		 push	 ebx
  000d7	57		 push	 edi
  000d8	56		 push	 esi
  000d9	8d 4d dc	 lea	 ecx, DWORD PTR _tReturnTime$[ebp]
  000dc	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 368  : 	tSpanTime = tReturnTime - tCurrentTime;

  000e1	8b 45 dc	 mov	 eax, DWORD PTR _tReturnTime$[ebp]
  000e4	2b 45 d4	 sub	 eax, DWORD PTR _tCurrentTime$[ebp]
  000e7	8b 4d e0	 mov	 ecx, DWORD PTR _tReturnTime$[ebp+4]
  000ea	1b 4d d8	 sbb	 ecx, DWORD PTR _tCurrentTime$[ebp+4]

; 369  : 	lReturnTime = tSpanTime.GetTotalMinutes();

  000ed	6a 00		 push	 0
  000ef	6a 3c		 push	 60			; 0000003cH
  000f1	51		 push	 ecx
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 __alldiv
  000f8	5f		 pop	 edi
  000f9	5b		 pop	 ebx
  000fa	5e		 pop	 esi

; 370  : 	return lReturnTime;
; 371  : }

  000fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	33 cd		 xor	 ecx, ebp
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 04 00	 ret	 4
$LN1@ConvertStr:
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	33 c0		 xor	 eax, eax
  00112	5e		 pop	 esi
  00113	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 04 00	 ret	 4
?ConvertStringToTime@CPeriodItemZt@@QAEJPBD@Z ENDP	; CPeriodItemZt::ConvertStringToTime
_TEXT	ENDS
PUBLIC	?GetCurrentDate@CPeriodItemZt@@QAEJXZ		; CPeriodItemZt::GetCurrentDate
; Function compile flags: /Ogtp
;	COMDAT ?GetCurrentDate@CPeriodItemZt@@QAEJXZ
_TEXT	SEGMENT
?GetCurrentDate@CPeriodItemZt@@QAEJXZ PROC		; CPeriodItemZt::GetCurrentDate, COMDAT
; _this$ = ecx

; 377  : 	CTime tCurrentTime(CTime::GetTickCount());

  00000	6a 00		 push	 0
  00002	e8 00 00 00 00	 call	 __time64
  00007	83 c4 04	 add	 esp, 4

; 378  : 	long tCurrent = tCurrentTime.GetTime();
; 379  : 	return tCurrent;
; 380  : }

  0000a	c3		 ret	 0
?GetCurrentDate@CPeriodItemZt@@QAEJXZ ENDP		; CPeriodItemZt::GetCurrentDate
_TEXT	ENDS
PUBLIC	?GetExpireDate@CPeriodItemZt@@QAEJH@Z		; CPeriodItemZt::GetExpireDate
; Function compile flags: /Ogtp
;	COMDAT ?GetExpireDate@CPeriodItemZt@@QAEJH@Z
_TEXT	SEGMENT
$T205455 = -8						; size = 8
_iDuration$ = 8						; size = 4
?GetExpireDate@CPeriodItemZt@@QAEJH@Z PROC		; CPeriodItemZt::GetExpireDate, COMDAT
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 386  : 	CTime tExpireTime;
; 387  : 	CTime tCurrentTime(CTime::GetTickCount());
; 388  : 	CTimeSpan tLeftTime(0,0,0,iDuration);
; 389  : 
; 390  : 	tExpireTime = tCurrentTime + tLeftTime;

  00006	8b 45 08	 mov	 eax, DWORD PTR _iDuration$[ebp]
  00009	99		 cdq
  0000a	56		 push	 esi
  0000b	6a 00		 push	 0
  0000d	8b f0		 mov	 esi, eax
  0000f	89 55 fc	 mov	 DWORD PTR $T205455[ebp+4], edx
  00012	e8 00 00 00 00	 call	 __time64
  00017	83 c4 04	 add	 esp, 4
  0001a	03 c6		 add	 eax, esi
  0001c	5e		 pop	 esi

; 391  : 	long tReturnTime = tExpireTime.GetTime();
; 392  : 	return tReturnTime;
; 393  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?GetExpireDate@CPeriodItemZt@@QAEJH@Z ENDP		; CPeriodItemZt::GetExpireDate
_TEXT	ENDS
PUBLIC	?CheckExpireDate@CPeriodItemZt@@QAE_NJ@Z	; CPeriodItemZt::CheckExpireDate
; Function compile flags: /Ogtp
;	COMDAT ?CheckExpireDate@CPeriodItemZt@@QAE_NJ@Z
_TEXT	SEGMENT
_dwItemExpireDate$ = 8					; size = 4
?CheckExpireDate@CPeriodItemZt@@QAE_NJ@Z PROC		; CPeriodItemZt::CheckExpireDate, COMDAT
; _this$ = ecx

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 398  : 	if( this->GetCurrentDate() > dwItemExpireDate )

  00003	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate
  00008	3b 45 08	 cmp	 eax, DWORD PTR _dwItemExpireDate$[ebp]
  0000b	0f 9f c0	 setg	 al

; 399  : 		return true;
; 400  : 	return false;
; 401  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?CheckExpireDate@CPeriodItemZt@@QAE_NJ@Z ENDP		; CPeriodItemZt::CheckExpireDate
_TEXT	ENDS
PUBLIC	?GetLeftDate@CPeriodItemZt@@QAEKJ@Z		; CPeriodItemZt::GetLeftDate
; Function compile flags: /Ogtp
;	COMDAT ?GetLeftDate@CPeriodItemZt@@QAEKJ@Z
_TEXT	SEGMENT
_lExpireDate$ = 8					; size = 4
?GetLeftDate@CPeriodItemZt@@QAEKJ@Z PROC		; CPeriodItemZt::GetLeftDate, COMDAT
; _this$ = ecx

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 406  : 	unsigned long dwReturnValue = 0;
; 407  : 	CTime tExpireTime(lExpireDate);
; 408  : 	CTime tCurrentTime(CTime::GetTickCount());

  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 __time64

; 409  : 	CTimeSpan tSpanTime;
; 410  : 	tSpanTime = tExpireTime - tCurrentTime;

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _lExpireDate$[ebp]
  0000d	83 c4 04	 add	 esp, 4
  00010	2b c8		 sub	 ecx, eax

; 411  : 	dwReturnValue = tSpanTime.GetTotalSeconds();
; 412  : 	return dwReturnValue;

  00012	8b c1		 mov	 eax, ecx

; 413  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?GetLeftDate@CPeriodItemZt@@QAEKJ@Z ENDP		; CPeriodItemZt::GetLeftDate
_TEXT	ENDS
PUBLIC	??_C@_0JE@NJOEPLCN@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RequestPeriodItemInsert@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@K@Z ; CPeriodItemZt::RequestPeriodItemInsert
;	COMDAT ??_C@_0JE@NJOEPLCN@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@
CONST	SEGMENT
??_C@_0JE@NJOEPLCN@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@ DB '[Perio'
	DB	'dItemZt][Insert PeriodItem] Request Insert PeriodItem Data. U'
	DB	'ser Id : %s(%d), Name : %s, Item : %s(%d), Type : %d, Serial '
	DB	': %u, Duration : %d', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RequestPeriodItemInsert@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@K@Z
_TEXT	SEGMENT
_this$GSCopy$ = -52					; size = 4
_pMsg$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpItemData$ = 12					; size = 4
_dwDuration$ = 16					; size = 4
?RequestPeriodItemInsert@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@K@Z PROC ; CPeriodItemZt::RequestPeriodItemInsert, COMDAT
; _this$ = ecx

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _lpItemData$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 683  : 	PMSG_REQ_PERIODITEMZT_INSERT pMsg;
; 684  : 	pMsg.wUserIndex = lpObj->m_Index;

  00019	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 685  : 	pMsg.dwUserGuid = lpObj->DBNumber;

  0001c	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  0001f	66 89 45 d8	 mov	 WORD PTR _pMsg$[ebp+8], ax

; 686  : 	memcpy(pMsg.chCharacterName,lpObj->Name,11);

  00023	8b 47 77	 mov	 eax, DWORD PTR [edi+119]
  00026	8d 5f 77	 lea	 ebx, DWORD PTR [edi+119]
  00029	89 45 da	 mov	 DWORD PTR _pMsg$[ebp+10], eax
  0002c	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  00030	89 55 d4	 mov	 DWORD PTR _pMsg$[ebp+4], edx
  00033	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00036	89 55 de	 mov	 DWORD PTR _pMsg$[ebp+14], edx
  00039	0f b6 53 0a	 movzx	 edx, BYTE PTR [ebx+10]
  0003d	66 89 45 e2	 mov	 WORD PTR _pMsg$[ebp+18], ax

; 687  : 
; 688  : 	pMsg.wItemCode = lpItemData->wItemCode;

  00041	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  00045	88 55 e4	 mov	 BYTE PTR _pMsg$[ebp+20], dl

; 689  : 	pMsg.btItemType = lpItemData->btType;

  00048	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  0004c	66 89 45 e6	 mov	 WORD PTR _pMsg$[ebp+22], ax

; 690  : 	pMsg.btEffectType1 = lpItemData->btEffectType1;

  00050	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  00054	88 55 e5	 mov	 BYTE PTR _pMsg$[ebp+21], dl

; 691  : 	pMsg.btEffectType2 = lpItemData->btEffectType2;

  00057	0f b6 56 06	 movzx	 edx, BYTE PTR [esi+6]
  0005b	88 45 e9	 mov	 BYTE PTR _pMsg$[ebp+25], al

; 692  : 	pMsg.btOptionType = lpItemData->btTmp;

  0005e	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00062	88 55 ea	 mov	 BYTE PTR _pMsg$[ebp+26], dl

; 693  : 	pMsg.dwSerial = lpItemData->dwSerial;

  00065	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00068	88 45 e8	 mov	 BYTE PTR _pMsg$[ebp+24], al

; 694  : 	pMsg.dwDuration = dwDuration;

  0006b	8b 45 10	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  0006e	89 4d cc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00071	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+28], edx
  00074	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+32], eax

; 695  : 	pMsg.lBuyDate = this->GetCurrentDate();

  00077	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate

; 696  : 	pMsg.lExpireDate = this->GetExpireDate(dwDuration);

  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _dwDuration$[ebp]
  0007f	51		 push	 ecx
  00080	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00083	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+36], eax
  00086	e8 00 00 00 00	 call	 ?GetExpireDate@CPeriodItemZt@@QAEJH@Z ; CPeriodItemZt::GetExpireDate

; 697  : 
; 698  : 	PHeadSubSetB((LPBYTE)&pMsg,0xD1,0x01,sizeof(pMsg));

  0008b	6a 2c		 push	 44			; 0000002cH
  0008d	6a 01		 push	 1
  0008f	8d 55 d0	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00092	68 d1 00 00 00	 push	 209			; 000000d1H
  00097	52		 push	 edx
  00098	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+40], eax
  0009b	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 699  : 	LogAddTD("[PeriodItemZt][Insert PeriodItem] Request Insert PeriodItem Data. User Id : %s(%d), Name : %s, Item : %s(%d), Type : %d, Serial : %u, Duration : %d",
; 700  : 		lpObj->AccountID,lpObj->DBNumber,lpObj->Name,ItemAttribute[lpItemData->wItemCode].Name,lpItemData->wItemCode,lpItemData->btType,lpItemData->dwSerial,dwDuration);

  000a0	8b 4d 10	 mov	 ecx, DWORD PTR _dwDuration$[ebp]
  000a3	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000a6	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  000aa	51		 push	 ecx
  000ab	0f b6 4e 01	 movzx	 ecx, BYTE PTR [esi+1]
  000af	52		 push	 edx
  000b0	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  000b3	51		 push	 ecx
  000b4	50		 push	 eax
  000b5	6b c0 70	 imul	 eax, 112		; 00000070H
  000b8	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  000bd	50		 push	 eax
  000be	53		 push	 ebx
  000bf	52		 push	 edx
  000c0	83 c7 6c	 add	 edi, 108		; 0000006cH
  000c3	57		 push	 edi
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0JE@NJOEPLCN@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000cf	83 c4 34	 add	 esp, 52			; 00000034H

; 701  : 
; 702  : 	cDBSMng.Send((char*)&pMsg,sizeof(pMsg));

  000d2	6a 2c		 push	 44			; 0000002cH
  000d4	8d 45 d0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000d7	50		 push	 eax
  000d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000dd	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 703  : }

  000e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	33 cd		 xor	 ecx, ebp
  000e9	5b		 pop	 ebx
  000ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 0c 00	 ret	 12			; 0000000cH
?RequestPeriodItemInsert@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@K@Z ENDP ; CPeriodItemZt::RequestPeriodItemInsert
_TEXT	ENDS
PUBLIC	??_C@_0IN@GHPKHPAI@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5U@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DGPeriodItemZtSelect@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_SELECT@@@Z ; CPeriodItemZt::DGPeriodItemZtSelect
EXTRN	?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z:PROC ; gObjApplyBuffEffectItemPeriod
;	COMDAT ??_C@_0IN@GHPKHPAI@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5U@
CONST	SEGMENT
??_C@_0IN@GHPKHPAI@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5U@ DB '[Pe'
	DB	'riodItemZt][SelectItemList] User Id : %s(%d), Name : %s, Item'
	DB	' Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, '
	DB	'ExpireDate : %d', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGPeriodItemZtSelect@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_SELECT@@@Z
_TEXT	SEGMENT
tv196 = -632						; size = 4
_this$GSCopy$ = -628					; size = 4
_lpObj$ = -624						; size = 4
_ItemList$204926 = -620					; size = 616
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGPeriodItemZtSelect@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_SELECT@@@Z PROC ; CPeriodItemZt::DGPeriodItemZtSelect, COMDAT
; _this$ = ecx

; 800  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 02 00
	00		 sub	 esp, 632		; 00000278H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	89 8d 8c fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]

; 801  : 	int iIndex = lpMsg->wUserIndex;

  0001c	0f b7 41 08	 movzx	 eax, WORD PTR [ecx+8]

; 802  : 
; 803  : 	if( iIndex < 0 || iIndex >= OBJMAX )

  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 87 1a 01 00
	00		 ja	 $LN8@DGPeriodIt@4

; 804  : 		return;
; 805  : 
; 806  : 	LPOBJ lpObj = &gObj[iIndex];

  0002b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00031	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00037	89 85 90 fd ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], eax

; 807  : 
; 808  : 	if( lpObj == NULL )

  0003d	0f 84 02 01 00
	00		 je	 $LN8@DGPeriodIt@4

; 809  : 		return;
; 810  : 
; 811  : 	if( lpObj->Type != OBJ_USER ||
; 812  : 		lpObj->Connected < PLAYER_LOGGED )

  00043	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  00048	0f 85 f7 00 00
	00		 jne	 $LN8@DGPeriodIt@4
  0004e	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00052	0f 8c ed 00 00
	00		 jl	 $LN8@DGPeriodIt@4

; 813  : 		return;
; 814  : 
; 815  : 	if( lpMsg->btResultCode > 0 )

  00058	80 79 0a 00	 cmp	 BYTE PTR [ecx+10], 0
  0005c	0f 86 e3 00 00
	00		 jbe	 $LN8@DGPeriodIt@4

; 816  : 	{
; 817  : 		PERIOD_ITEMLIST ItemList;
; 818  : 		memcpy(&ItemList,&lpMsg->ItemList,sizeof(ItemList));

  00062	56		 push	 esi
  00063	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
  00066	57		 push	 edi
  00067	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  0006c	8d bd 94 fd ff
	ff		 lea	 edi, DWORD PTR _ItemList$204926[ebp]
  00072	f3 a5		 rep movsd

; 819  : 
; 820  : 		int iItemCount = ItemList.btItemCount;

  00074	0f b6 8d 98 fd
	ff ff		 movzx	 ecx, BYTE PTR _ItemList$204926[ebp+4]

; 821  : 		DWORD dwDuration;
; 822  : 
; 823  : 		for(int i = 0; i < iItemCount; i++)

  0007b	85 c9		 test	 ecx, ecx
  0007d	0f 8e b4 00 00
	00		 jle	 $LN4@DGPeriodIt@4

; 816  : 	{
; 817  : 		PERIOD_ITEMLIST ItemList;
; 818  : 		memcpy(&ItemList,&lpMsg->ItemList,sizeof(ItemList));

  00083	8d b5 b4 fd ff
	ff		 lea	 esi, DWORD PTR _ItemList$204926[ebp+32]
  00089	89 8d 88 fd ff
	ff		 mov	 DWORD PTR tv196[ebp], ecx
  0008f	53		 push	 ebx
$LL17@DGPeriodIt@4:

; 824  : 		{
; 825  : 			dwDuration = this->GetLeftDate(ItemList.ItemData[i].lItemExpireDate);

  00090	8b 3e		 mov	 edi, DWORD PTR [esi]
  00092	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00098	57		 push	 edi
  00099	e8 00 00 00 00	 call	 ?GetLeftDate@CPeriodItemZt@@QAEKJ@Z ; CPeriodItemZt::GetLeftDate
  0009e	8b d8		 mov	 ebx, eax

; 826  : 
; 827  : 			if( ItemList.ItemData[i].btItemType == 1 )

  000a0	8a 46 f1	 mov	 al, BYTE PTR [esi-15]
  000a3	3c 01		 cmp	 al, 1
  000a5	75 17		 jne	 SHORT $LN3@DGPeriodIt@4

; 828  : 			{
; 829  : 				gObjApplyBuffEffectItemPeriod(lpObj,ItemList.ItemData[i].wItemCode,dwDuration);

  000a7	0f b7 46 f2	 movzx	 eax, WORD PTR [esi-14]
  000ab	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000b1	53		 push	 ebx
  000b2	50		 push	 eax
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjApplyBuffEffectItemPeriod
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	eb 21		 jmp	 SHORT $LN1@DGPeriodIt@4
$LN3@DGPeriodIt@4:

; 830  : 			}
; 831  : 			else if( ItemList.ItemData[i].btItemType == 2 )

  000be	3c 02		 cmp	 al, 2
  000c0	75 1d		 jne	 SHORT $LN1@DGPeriodIt@4

; 832  : 			{
; 833  : 				AddPeriodItemData(lpObj,ItemList.ItemData[i].wItemCode,ItemList.ItemData[i].dwSerial,dwDuration,ItemList.ItemData[i].lItemExpireDate);

  000c2	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  000c5	0f b7 46 f2	 movzx	 eax, WORD PTR [esi-14]
  000c9	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000cf	57		 push	 edi
  000d0	53		 push	 ebx
  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000da	e8 00 00 00 00	 call	 ?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKHJ@Z ; CPeriodItemZt::AddPeriodItemData
$LN1@DGPeriodIt@4:

; 834  : 			}
; 835  : 	
; 836  : 			LogAddTD("[PeriodItemZt][SelectItemList] User Id : %s(%d), Name : %s, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, ExpireDate : %d",
; 837  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,ItemList.ItemData[i].wItemCode,ItemAttribute[ItemList.ItemData[i].wItemCode].Name,ItemList.ItemData[i].btItemType,
; 838  : 				ItemList.ItemData[i].dwSerial,dwDuration,ItemList.ItemData[i].lItemExpireDate);

  000df	0f b7 46 f2	 movzx	 eax, WORD PTR [esi-14]
  000e3	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  000e6	0f b6 4e f1	 movzx	 ecx, BYTE PTR [esi-15]
  000ea	57		 push	 edi
  000eb	53		 push	 ebx
  000ec	52		 push	 edx
  000ed	8b d0		 mov	 edx, eax
  000ef	6b d2 70	 imul	 edx, 112		; 00000070H
  000f2	51		 push	 ecx
  000f3	81 c2 00 00 00
	00		 add	 edx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  000f9	52		 push	 edx
  000fa	50		 push	 eax
  000fb	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  00101	83 c0 77	 add	 eax, 119		; 00000077H
  00104	50		 push	 eax
  00105	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  0010b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0010e	51		 push	 ecx
  0010f	83 c0 6c	 add	 eax, 108		; 0000006cH
  00112	50		 push	 eax
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0IN@GHPKHPAI@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5U@
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011e	83 c4 28	 add	 esp, 40			; 00000028H
  00121	83 c6 14	 add	 esi, 20			; 00000014H
  00124	ff 8d 88 fd ff
	ff		 dec	 DWORD PTR tv196[ebp]
  0012a	0f 85 60 ff ff
	ff		 jne	 $LL17@DGPeriodIt@4

; 821  : 		DWORD dwDuration;
; 822  : 
; 823  : 		for(int i = 0; i < iItemCount; i++)

  00130	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  00136	5b		 pop	 ebx
$LN4@DGPeriodIt@4:

; 839  : 		}
; 840  : 		//GCItemListSend(lpObj->m_Index);//test
; 841  : 		OnRequestPeriodItemList(lpObj);

  00137	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?OnRequestPeriodItemList@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::OnRequestPeriodItemList
  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
$LN8@DGPeriodIt@4:

; 842  : 	}
; 843  : }

  00145	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00148	33 cd		 xor	 ecx, ebp
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 04 00	 ret	 4
?DGPeriodItemZtSelect@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_SELECT@@@Z ENDP ; CPeriodItemZt::DGPeriodItemZtSelect
_TEXT	ENDS
PUBLIC	??_C@_0JE@EOKKEEPE@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5F@ ; `string'
PUBLIC	?DGPeriodItemZtList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST@@@Z ; CPeriodItemZt::DGPeriodItemZtList
;	COMDAT ??_C@_0JE@EOKKEEPE@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5F@
CONST	SEGMENT
??_C@_0JE@EOKKEEPE@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5F@ DB '[Pe'
	DB	'riodItemZt][SelectItemList] Failed User Id : %s(%d), Name : %'
	DB	's, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration'
	DB	' : %d, ExpireDate : %d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGPeriodItemZtList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpMsg$ = 8						; size = 4
?DGPeriodItemZtList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST@@@Z PROC ; CPeriodItemZt::DGPeriodItemZtList, COMDAT
; _this$ = ecx

; 907  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 908  : 	int iIndex = lpMsg->wUserIndex;

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]
  00008	57		 push	 edi
  00009	0f b7 7e 08	 movzx	 edi, WORD PTR [esi+8]
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 909  : 
; 910  : 	if( iIndex < 0 || iIndex >= OBJMAX )

  00010	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00016	0f 87 5f 01 00
	00		 ja	 $LN9@DGPeriodIt@5

; 911  : 		return;
; 912  : 
; 913  : 	LPOBJ lpObj = &gObj[iIndex];

  0001c	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00022	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 914  : 
; 915  : 	if( lpObj == NULL )

  00028	0f 84 4d 01 00
	00		 je	 $LN9@DGPeriodIt@5

; 916  : 		return;
; 917  : 
; 918  : 	if( lpObj->Type != OBJ_USER ||
; 919  : 		lpObj->Connected < PLAYER_LOGGED )

  0002e	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00033	0f 85 42 01 00
	00		 jne	 $LN9@DGPeriodIt@5
  00039	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  0003d	0f 8c 38 01 00
	00		 jl	 $LN9@DGPeriodIt@5

; 920  : 		return;
; 921  : 
; 922  : 	if( lpObj->DBNumber != lpMsg->dwUserGuid )

  00043	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00046	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00049	0f 85 2c 01 00
	00		 jne	 $LN9@DGPeriodIt@5

; 923  : 		return;
; 924  : 
; 925  : 	int iItemCount = 0;
; 926  : 	DWORD dwDuration = 0;
; 927  : 
; 928  : 	dwDuration = this->GetLeftDate(lpMsg->lItemExpireDate);

  0004f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00052	53		 push	 ebx
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?GetLeftDate@CPeriodItemZt@@QAEKJ@Z ; CPeriodItemZt::GetLeftDate
  00059	8b d8		 mov	 ebx, eax

; 929  : 
; 930  : 	if( lpMsg->btItemType == 1 )

  0005b	8a 46 0b	 mov	 al, BYTE PTR [esi+11]
  0005e	3c 01		 cmp	 al, 1
  00060	75 7d		 jne	 SHORT $LN7@DGPeriodIt@5

; 931  : 	{
; 932  : 		if( !gObjApplyBuffEffectItemPeriod(lpObj,lpMsg->wItemCode,dwDuration) )

  00062	0f b7 46 18	 movzx	 eax, WORD PTR [esi+24]
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	57		 push	 edi
  00069	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjApplyBuffEffectItemPeriod
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	84 c0		 test	 al, al

; 933  : 		{
; 934  : 			LogAddTD("[PeriodItemZt][SelectItemList] Failed User Id : %s(%d), Name : %s, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, ExpireDate : %d",
; 935  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,lpMsg->wItemCode,ItemAttribute[lpMsg->wItemCode].Name,lpMsg->btItemType,lpMsg->dwSerial,dwDuration,lpMsg->lItemExpireDate);

  00073	0f b7 46 18	 movzx	 eax, WORD PTR [esi+24]
  00077	75 28		 jne	 SHORT $LN6@DGPeriodIt@5
  00079	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0007c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0007f	51		 push	 ecx
  00080	0f b6 4e 0b	 movzx	 ecx, BYTE PTR [esi+11]
  00084	53		 push	 ebx
  00085	52		 push	 edx
  00086	8b d0		 mov	 edx, eax
  00088	6b d2 70	 imul	 edx, 112		; 00000070H
  0008b	51		 push	 ecx
  0008c	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  0008f	81 c2 00 00 00
	00		 add	 edx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00095	52		 push	 edx
  00096	50		 push	 eax
  00097	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  0009a	50		 push	 eax
  0009b	51		 push	 ecx

; 936  : 		}
; 937  : 		else

  0009c	e9 c7 00 00 00	 jmp	 $LN17@DGPeriodIt@5
$LN6@DGPeriodIt@5:

; 938  : 		{
; 939  : 			LogAddTD("[PeriodItemZt][SelectItemList] User Id : %s(%d), Name : %s, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, ExpireDate : %d",
; 940  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,lpMsg->wItemCode,ItemAttribute[lpMsg->wItemCode].Name,lpMsg->btItemType,lpMsg->dwSerial,dwDuration,lpMsg->lItemExpireDate);

  000a1	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000a4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000a7	52		 push	 edx
  000a8	0f b6 56 0b	 movzx	 edx, BYTE PTR [esi+11]
  000ac	53		 push	 ebx
  000ad	51		 push	 ecx
  000ae	8b c8		 mov	 ecx, eax
  000b0	6b c9 70	 imul	 ecx, 112		; 00000070H
  000b3	52		 push	 edx
  000b4	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  000ba	51		 push	 ecx
  000bb	50		 push	 eax
  000bc	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000bf	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	83 c7 6c	 add	 edi, 108		; 0000006cH
  000c7	57		 push	 edi
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0IN@GHPKHPAI@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5U@

; 949  : 		}
; 950  : 		else
; 951  : 		{
; 952  : 			LogAddTD("[PeriodItemZt][SelectItemList] Failed User Id : %s(%d), Name : %s, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, ExpireDate : %d",
; 953  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,lpMsg->wItemCode,ItemAttribute[lpMsg->wItemCode].Name,lpMsg->btItemType,lpMsg->dwSerial,dwDuration,lpMsg->lItemExpireDate);

  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d3	83 c4 28	 add	 esp, 40			; 00000028H
  000d6	5b		 pop	 ebx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi

; 954  : 		}
; 955  : 	}
; 956  : 
; 957  : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN7@DGPeriodIt@5:

; 941  : 		}
; 942  : 	}
; 943  : 	else if( lpMsg->btItemType == 2 )

  000df	3c 02		 cmp	 al, 2
  000e1	0f 85 93 00 00
	00		 jne	 $LN16@DGPeriodIt@5

; 944  : 	{
; 945  : 		if( this->AddPeriodItemData(lpObj,lpMsg->wItemCode,lpMsg->dwSerial,dwDuration,lpMsg->lItemExpireDate) != -1 )

  000e7	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000ea	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000ed	0f b7 46 18	 movzx	 eax, WORD PTR [esi+24]
  000f1	51		 push	 ecx
  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	53		 push	 ebx
  000f6	52		 push	 edx
  000f7	50		 push	 eax
  000f8	57		 push	 edi
  000f9	e8 00 00 00 00	 call	 ?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKHJ@Z ; CPeriodItemZt::AddPeriodItemData
  000fe	83 f8 ff	 cmp	 eax, -1

; 946  : 		{
; 947  : 			LogAddTD("[PeriodItemZt][SelectItemList] User Id : %s(%d), Name : %s, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, ExpireDate : %d",
; 948  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,lpMsg->wItemCode,ItemAttribute[lpMsg->wItemCode].Name,lpMsg->btItemType,lpMsg->dwSerial,dwDuration,lpMsg->lItemExpireDate);

  00101	0f b7 46 18	 movzx	 eax, WORD PTR [esi+24]
  00105	74 3e		 je	 SHORT $LN2@DGPeriodIt@5
  00107	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0010a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0010d	51		 push	 ecx
  0010e	0f b6 4e 0b	 movzx	 ecx, BYTE PTR [esi+11]
  00112	53		 push	 ebx
  00113	52		 push	 edx
  00114	8b d0		 mov	 edx, eax
  00116	6b d2 70	 imul	 edx, 112		; 00000070H
  00119	51		 push	 ecx
  0011a	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  0011d	81 c2 00 00 00
	00		 add	 edx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00123	52		 push	 edx
  00124	50		 push	 eax
  00125	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00128	50		 push	 eax
  00129	51		 push	 ecx
  0012a	83 c7 6c	 add	 edi, 108		; 0000006cH
  0012d	57		 push	 edi
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0IN@GHPKHPAI@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5U@

; 949  : 		}
; 950  : 		else
; 951  : 		{
; 952  : 			LogAddTD("[PeriodItemZt][SelectItemList] Failed User Id : %s(%d), Name : %s, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, ExpireDate : %d",
; 953  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,lpMsg->wItemCode,ItemAttribute[lpMsg->wItemCode].Name,lpMsg->btItemType,lpMsg->dwSerial,dwDuration,lpMsg->lItemExpireDate);

  00133	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00139	83 c4 28	 add	 esp, 40			; 00000028H
  0013c	5b		 pop	 ebx
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi

; 954  : 		}
; 955  : 	}
; 956  : 
; 957  : }

  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 04 00	 ret	 4
$LN2@DGPeriodIt@5:

; 949  : 		}
; 950  : 		else
; 951  : 		{
; 952  : 			LogAddTD("[PeriodItemZt][SelectItemList] Failed User Id : %s(%d), Name : %s, Item Code : %d(%s), PeriodType : %d, Serial : %u, Duration : %d, ExpireDate : %d",
; 953  : 				lpObj->AccountID,lpObj->DBNumber,lpObj->Name,lpMsg->wItemCode,ItemAttribute[lpMsg->wItemCode].Name,lpMsg->btItemType,lpMsg->dwSerial,dwDuration,lpMsg->lItemExpireDate);

  00145	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00148	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0014b	52		 push	 edx
  0014c	0f b6 56 0b	 movzx	 edx, BYTE PTR [esi+11]
  00150	53		 push	 ebx
  00151	51		 push	 ecx
  00152	8b c8		 mov	 ecx, eax
  00154	6b c9 70	 imul	 ecx, 112		; 00000070H
  00157	52		 push	 edx
  00158	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0015e	51		 push	 ecx
  0015f	50		 push	 eax
  00160	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00163	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  00166	52		 push	 edx
  00167	50		 push	 eax
$LN17@DGPeriodIt@5:
  00168	83 c7 6c	 add	 edi, 108		; 0000006cH
  0016b	57		 push	 edi
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0JE@EOKKEEPE@?$FLPeriodItemZt?$FN?$FLSelectItemList?$FN?5F@
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00177	83 c4 28	 add	 esp, 40			; 00000028H
$LN16@DGPeriodIt@5:
  0017a	5b		 pop	 ebx
$LN9@DGPeriodIt@5:
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi

; 954  : 		}
; 955  : 	}
; 956  : 
; 957  : }

  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 04 00	 ret	 4
?DGPeriodItemZtList@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_LIST@@@Z ENDP ; CPeriodItemZt::DGPeriodItemZtList
_TEXT	ENDS
PUBLIC	?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GEEHJ@Z ; CPeriodItemZt::AddPeriodItemData
; Function compile flags: /Ogtp
;	COMDAT ?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GEEHJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
_btEffectType1$ = 16					; size = 1
_btEffectType2$ = 20					; size = 1
_iDuration$ = 24					; size = 4
_lExpireDate$ = 28					; size = 4
?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GEEHJ@Z PROC ; CPeriodItemZt::AddPeriodItemData, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 102  : 	int iPeriodItemSlotIndex = lpObj->m_PeriodDataIndex;

  00004	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00007	53		 push	 ebx
  00008	8b 98 20 26 00
	00		 mov	 ebx, DWORD PTR [eax+9760]

; 103  : 
; 104  : 	if( !IsCorrectUser(lpObj) )

  0000e	50		 push	 eax
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	e8 00 00 00 00	 call	 ?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::IsCorrectUser
  00017	84 c0		 test	 al, al
  00019	75 0a		 jne	 SHORT $LN5@AddPeriodI@3

; 105  : 		return -1;

  0001b	83 c8 ff	 or	 eax, -1
  0001e	5b		 pop	 ebx

; 125  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 18 00	 ret	 24			; 00000018H
$LN5@AddPeriodI@3:
  00025	57		 push	 edi

; 106  : 
; 107  : 	for(int i = 0; i < MAX_ITEMDATA; i++)

  00026	33 ff		 xor	 edi, edi
  00028	69 db 6c 03 00
	00		 imul	 ebx, 876		; 0000036cH
  0002e	8d 44 0b 28	 lea	 eax, DWORD PTR [ebx+ecx+40]
  00032	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
$LL4@AddPeriodI@3:

; 108  : 	{
; 109  : 		if( !this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].bInUse )

  00035	80 38 00	 cmp	 BYTE PTR [eax], 0
  00038	74 15		 je	 SHORT $LN9@AddPeriodI@3

; 106  : 
; 107  : 	for(int i = 0; i < MAX_ITEMDATA; i++)

  0003a	03 fa		 add	 edi, edx
  0003c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0003f	83 ff 1e	 cmp	 edi, 30			; 0000001eH
  00042	7c f1		 jl	 SHORT $LL4@AddPeriodI@3

; 121  : 		}
; 122  : 	}
; 123  : 
; 124  : 	return -1;

  00044	5f		 pop	 edi
  00045	83 c8 ff	 or	 eax, -1
  00048	5b		 pop	 ebx

; 125  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 18 00	 ret	 24			; 00000018H
$LN9@AddPeriodI@3:

; 110  : 		{
; 111  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].bInUse = TRUE;
; 112  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].btType = 1;
; 113  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].wItemCode = wItemCode;
; 114  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].btEffectType1 = btEffectType1;

  0004f	8a 55 10	 mov	 dl, BYTE PTR _btEffectType1$[ebp]
  00052	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00059	2b c7		 sub	 eax, edi
  0005b	56		 push	 esi
  0005c	8d 34 83	 lea	 esi, DWORD PTR [ebx+eax*4]

; 115  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].btEffectType2 = btEffectType2;

  0005f	8a 45 14	 mov	 al, BYTE PTR _btEffectType2$[ebp]
  00062	03 f1		 add	 esi, ecx
  00064	66 8b 4d 0c	 mov	 cx, WORD PTR _wItemCode$[ebp]
  00068	66 89 4e 2a	 mov	 WORD PTR [esi+42], cx

; 116  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].lCurentDate = this->GetCurrentDate();

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	66 c7 46 28 01
	01		 mov	 WORD PTR [esi+40], 257	; 00000101H
  00075	88 56 2d	 mov	 BYTE PTR [esi+45], dl
  00078	88 46 2e	 mov	 BYTE PTR [esi+46], al
  0007b	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate
  00080	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 117  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].lExpireDate = lExpireDate;

  00083	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  00086	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0008d	2b c8		 sub	 ecx, eax
  0008f	8b 45 1c	 mov	 eax, DWORD PTR _lExpireDate$[ebp]
  00092	8d 14 8b	 lea	 edx, DWORD PTR [ebx+ecx*4]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 118  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].iDuration = iDuration;

  0009b	8b 55 18	 mov	 edx, DWORD PTR _iDuration$[ebp]
  0009e	89 56 40	 mov	 DWORD PTR [esi+64], edx

; 119  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].iUnk3 = 0;

  000a1	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  000a8	5e		 pop	 esi

; 120  : 			return i;

  000a9	8b c7		 mov	 eax, edi
  000ab	5f		 pop	 edi
  000ac	5b		 pop	 ebx

; 125  : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 18 00	 ret	 24			; 00000018H
?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GEEHJ@Z ENDP ; CPeriodItemZt::AddPeriodItemData
_TEXT	ENDS
PUBLIC	?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKH@Z ; CPeriodItemZt::AddPeriodItemData
; Function compile flags: /Ogtp
;	COMDAT ?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKH@Z
_TEXT	SEGMENT
_lExpireDate$ = -8					; size = 4
tv229 = -4						; size = 4
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
_dwSerial$ = 16						; size = 4
_iDuration$ = 20					; size = 4
?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKH@Z PROC ; CPeriodItemZt::AddPeriodItemData, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  : 	int iPeriodItemSlotIndex = lpObj->m_PeriodDataIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	8b b0 20 26 00
	00		 mov	 esi, DWORD PTR [eax+9760]
  00010	57		 push	 edi

; 131  : 	long lExpireDate = 0;
; 132  : 	int iInventoryPosition = 0;
; 133  : 
; 134  : 	if( !IsCorrectUser(lpObj) )

  00011	50		 push	 eax
  00012	8b f9		 mov	 edi, ecx
  00014	e8 00 00 00 00	 call	 ?IsCorrectUser@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@@Z ; CPeriodItemZt::IsCorrectUser
  00019	84 c0		 test	 al, al
  0001b	75 0b		 jne	 SHORT $LN6@AddPeriodI@4

; 135  : 		return -1;

  0001d	5f		 pop	 edi
  0001e	83 c8 ff	 or	 eax, -1
  00021	5e		 pop	 esi

; 162  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 10 00	 ret	 16			; 00000010H
$LN6@AddPeriodI@4:
  00028	53		 push	 ebx

; 136  : 
; 137  : 	for(int i = 0; i < MAX_ITEMDATA; i++)

  00029	33 db		 xor	 ebx, ebx
  0002b	69 f6 6c 03 00
	00		 imul	 esi, 876		; 0000036cH
  00031	89 75 fc	 mov	 DWORD PTR tv229[ebp], esi
  00034	8d 44 3e 28	 lea	 eax, DWORD PTR [esi+edi+40]
$LL5@AddPeriodI@4:

; 138  : 	{
; 139  : 		if( !this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].bInUse )

  00038	80 38 00	 cmp	 BYTE PTR [eax], 0
  0003b	74 15		 je	 SHORT $LN10@AddPeriodI@4

; 136  : 
; 137  : 	for(int i = 0; i < MAX_ITEMDATA; i++)

  0003d	43		 inc	 ebx
  0003e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00041	83 fb 1e	 cmp	 ebx, 30			; 0000001eH
  00044	7c f2		 jl	 SHORT $LL5@AddPeriodI@4

; 158  : 		}
; 159  : 	}
; 160  : 
; 161  : return -1;

  00046	5b		 pop	 ebx
  00047	5f		 pop	 edi
  00048	83 c8 ff	 or	 eax, -1
  0004b	5e		 pop	 esi

; 162  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 10 00	 ret	 16			; 00000010H
$LN10@AddPeriodI@4:

; 140  : 		{
; 141  : 			lExpireDate = GetExpireDate(iDuration);

  00052	8b 45 14	 mov	 eax, DWORD PTR _iDuration$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?GetExpireDate@CPeriodItemZt@@QAEJH@Z ; CPeriodItemZt::GetExpireDate

; 142  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].bInUse = TRUE;

  0005b	8d 0c dd 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*8]
  00062	2b cb		 sub	 ecx, ebx
  00064	8d 34 8e	 lea	 esi, DWORD PTR [esi+ecx*4]

; 143  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].btType = 2;
; 144  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].wItemCode = wItemCode;
; 145  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].dwSerial = dwSerial;

  00067	8b 4d 10	 mov	 ecx, DWORD PTR _dwSerial$[ebp]
  0006a	03 f7		 add	 esi, edi
  0006c	89 45 f8	 mov	 DWORD PTR _lExpireDate$[ebp], eax
  0006f	66 8b 45 0c	 mov	 ax, WORD PTR _wItemCode$[ebp]
  00073	89 4e 30	 mov	 DWORD PTR [esi+48], ecx

; 146  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].lCurentDate = this->GetCurrentDate();

  00076	8b cf		 mov	 ecx, edi
  00078	66 c7 46 28 01
	02		 mov	 WORD PTR [esi+40], 513	; 00000201H
  0007e	66 89 46 2a	 mov	 WORD PTR [esi+42], ax
  00082	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate
  00087	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 147  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].lExpireDate = lExpireDate;

  0008a	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  0008d	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  00094	2b d0		 sub	 edx, eax
  00096	8b 45 fc	 mov	 eax, DWORD PTR tv229[ebp]
  00099	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0009c	8b 55 f8	 mov	 edx, DWORD PTR _lExpireDate$[ebp]

; 148  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].iDuration = iDuration;

  0009f	8b 45 14	 mov	 eax, DWORD PTR _iDuration$[ebp]
  000a2	89 14 39	 mov	 DWORD PTR [ecx+edi], edx

; 149  : 			this->m_PeriodData[iPeriodItemSlotIndex].itemData[i].iUnk3 = 0;
; 150  : 
; 151  : 			iInventoryPosition = GetItemFromInventory(lpObj,wItemCode,dwSerial);

  000a5	8b 4d 10	 mov	 ecx, DWORD PTR _dwSerial$[ebp]
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _wItemCode$[ebp]
  000ab	51		 push	 ecx
  000ac	89 46 40	 mov	 DWORD PTR [esi+64], eax
  000af	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  000b6	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  000b9	52		 push	 edx
  000ba	56		 push	 esi
  000bb	8b cf		 mov	 ecx, edi
  000bd	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory

; 152  : 
; 153  : 			if( iInventoryPosition == -1 )

  000c2	83 f8 ff	 cmp	 eax, -1
  000c5	75 0e		 jne	 SHORT $LN1@AddPeriodI@4

; 154  : 				return -2;

  000c7	5b		 pop	 ebx
  000c8	5f		 pop	 edi
  000c9	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000ce	5e		 pop	 esi

; 162  : }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 10 00	 ret	 16			; 00000010H
$LN1@AddPeriodI@4:

; 155  : 
; 156  : 			lpObj->pInventory[iInventoryPosition].SetPeriodItem();

  000d5	8b c8		 mov	 ecx, eax
  000d7	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  000dd	03 8e 24 0e 00
	00		 add	 ecx, DWORD PTR [esi+3620]
  000e3	e8 00 00 00 00	 call	 ?SetPeriodItem@CItem@@QAEXXZ ; CItem::SetPeriodItem

; 157  : 			return i;

  000e8	8b c3		 mov	 eax, ebx
  000ea	5b		 pop	 ebx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi

; 162  : }

  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 10 00	 ret	 16			; 00000010H
?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKH@Z ENDP ; CPeriodItemZt::AddPeriodItemData
_TEXT	ENDS
PUBLIC	??_C@_0IO@HBGGEPPF@?$FLPeriodItemZt?$FN?$FLRemove?5PeriodItem@ ; `string'
PUBLIC	?CheckPeriodData@CPeriodItemZt@@QAEXXZ		; CPeriodItemZt::CheckPeriodData
;	COMDAT ??_C@_0IO@HBGGEPPF@?$FLPeriodItemZt?$FN?$FLRemove?5PeriodItem@
; File e:\work\tranet_version\gs\gameserver\perioditemzt.h
CONST	SEGMENT
??_C@_0IO@HBGGEPPF@?$FLPeriodItemZt?$FN?$FLRemove?5PeriodItem@ DB '[Perio'
	DB	'dItemZt][Remove PeriodItem] Expire PeriodItem Data. User Id :'
	DB	' %s(%d), Name : %s, Item : %s(%d), Type : %d, Serial : %u, Ex'
	DB	'pireDate : %d', 00H				; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\perioditemzt.cpp
CONST	ENDS
;	COMDAT ?CheckPeriodData@CPeriodItemZt@@QAEXXZ
_TEXT	SEGMENT
tv836 = -12						; size = 4
tv796 = -8						; size = 4
tv682 = -4						; size = 4
?CheckPeriodData@CPeriodItemZt@@QAEXXZ PROC		; CPeriodItemZt::CheckPeriodData, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 296  : 	LPOBJ lpObj = 0;
; 297  : 
; 298  : 	for(int i = 0; i < OBJMAXUSER; i++)

  0000a	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
  0000d	57		 push	 edi
  0000e	89 75 f8	 mov	 DWORD PTR tv796[ebp], esi
  00011	c7 45 f4 e8 03
	00 00		 mov	 DWORD PTR tv836[ebp], 1000 ; 000003e8H
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL9@CheckPerio:

; 299  : 	{
; 300  : 		if( this->m_PeriodData[i].bInUse == true && this->m_PeriodData[i].lpObj != NULL )

  00020	80 7e f8 01	 cmp	 BYTE PTR [esi-8], 1
  00024	0f 85 bb 00 00
	00		 jne	 $LN8@CheckPerio
  0002a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002c	85 ff		 test	 edi, edi
  0002e	0f 84 b1 00 00
	00		 je	 $LN8@CheckPerio

; 301  : 		{
; 302  : 			lpObj = this->m_PeriodData[i].lpObj;
; 303  : 
; 304  : 			if( lpObj->Type == OBJ_USER && lpObj->Connected >= PLAYER_LOGGED )

  00034	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00039	0f 85 a6 00 00
	00		 jne	 $LN8@CheckPerio
  0003f	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  00043	0f 8c 9c 00 00
	00		 jl	 $LN8@CheckPerio

; 305  : 			{
; 306  : 				for(int iItemSlotIndex = 0; iItemSlotIndex < MAX_ITEMDATA; iItemSlotIndex++)

  00049	83 c6 2c	 add	 esi, 44			; 0000002cH
  0004c	c7 45 fc 1e 00
	00 00		 mov	 DWORD PTR tv682[ebp], 30 ; 0000001eH
$LL4@CheckPerio:

; 307  : 				{
; 308  : 					if( this->m_PeriodData[i].itemData[iItemSlotIndex].bInUse == true && this->CheckExpireDate(this->m_PeriodData[i].itemData[iItemSlotIndex].lExpireDate) == true )

  00053	80 7e f0 01	 cmp	 BYTE PTR [esi-16], 1
  00057	75 7d		 jne	 SHORT $LN3@CheckPerio
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	50		 push	 eax
  0005c	8b cb		 mov	 ecx, ebx
  0005e	e8 00 00 00 00	 call	 ?CheckExpireDate@CPeriodItemZt@@QAE_NJ@Z ; CPeriodItemZt::CheckExpireDate
  00063	3c 01		 cmp	 al, 1
  00065	75 6f		 jne	 SHORT $LN3@CheckPerio

; 309  : 					{
; 310  : 						LogAddTD("[PeriodItemZt][Remove PeriodItem] Expire PeriodItem Data. User Id : %s(%d), Name : %s, Item : %s(%d), Type : %d, Serial : %u, ExpireDate : %d",
; 311  : 							lpObj->AccountID,lpObj->DBNumber,lpObj->Name,ItemAttribute[this->m_PeriodData[i].itemData[iItemSlotIndex].wItemCode].Name,this->m_PeriodData[i].itemData[iItemSlotIndex].wItemCode,this->m_PeriodData[i].itemData[iItemSlotIndex].btType,this->m_PeriodData[i].itemData[iItemSlotIndex].dwSerial,this->m_PeriodData[i].itemData[iItemSlotIndex].lExpireDate);

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  0006c	0f b7 46 f2	 movzx	 eax, WORD PTR [esi-14]
  00070	51		 push	 ecx
  00071	0f b6 4e f1	 movzx	 ecx, BYTE PTR [esi-15]
  00075	52		 push	 edx
  00076	51		 push	 ecx
  00077	50		 push	 eax
  00078	6b c0 70	 imul	 eax, 112		; 00000070H
  0007b	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00080	50		 push	 eax
  00081	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00084	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  00087	52		 push	 edx
  00088	50		 push	 eax
  00089	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  0008c	51		 push	 ecx
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0IO@HBGGEPPF@?$FLPeriodItemZt?$FN?$FLRemove?5PeriodItem@
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 312  : 						this->RemovePeriodItemData(lpObj,this->m_PeriodData[i].itemData[iItemSlotIndex].btType,this->m_PeriodData[i].itemData[iItemSlotIndex].wItemCode,this->m_PeriodData[i].itemData[iItemSlotIndex].dwSerial);

  00098	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  0009b	0f b7 46 f2	 movzx	 eax, WORD PTR [esi-14]
  0009f	0f b6 4e f1	 movzx	 ecx, BYTE PTR [esi-15]
  000a3	83 c4 24	 add	 esp, 36			; 00000024H
  000a6	52		 push	 edx
  000a7	50		 push	 eax
  000a8	51		 push	 ecx
  000a9	57		 push	 edi
  000aa	8b cb		 mov	 ecx, ebx
  000ac	e8 00 00 00 00	 call	 ?RemovePeriodItemData@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGK@Z ; CPeriodItemZt::RemovePeriodItemData

; 313  : 						this->m_PeriodData[i].itemData[iItemSlotIndex].Clear();

  000b1	33 d2		 xor	 edx, edx
  000b3	c6 46 f0 00	 mov	 BYTE PTR [esi-16], 0
  000b7	66 89 56 f2	 mov	 WORD PTR [esi-14], dx
  000bb	89 56 fc	 mov	 DWORD PTR [esi-4], edx

; 314  : 						gObjUseSkill.SkillChangeUse(lpObj->m_Index);

  000be	8b 07		 mov	 eax, DWORD PTR [edi]
  000c0	50		 push	 eax
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  000c6	e8 00 00 00 00	 call	 ?SkillChangeUse@CObjUseSkill@@QAEHH@Z ; CObjUseSkill::SkillChangeUse

; 315  : 						gObjCalCharacter(lpObj->m_Index);

  000cb	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  000d3	83 c4 04	 add	 esp, 4
$LN3@CheckPerio:

; 305  : 			{
; 306  : 				for(int iItemSlotIndex = 0; iItemSlotIndex < MAX_ITEMDATA; iItemSlotIndex++)

  000d6	83 c6 1c	 add	 esi, 28			; 0000001cH
  000d9	ff 4d fc	 dec	 DWORD PTR tv682[ebp]
  000dc	0f 85 71 ff ff
	ff		 jne	 $LL4@CheckPerio
  000e2	8b 75 f8	 mov	 esi, DWORD PTR tv796[ebp]
$LN8@CheckPerio:

; 296  : 	LPOBJ lpObj = 0;
; 297  : 
; 298  : 	for(int i = 0; i < OBJMAXUSER; i++)

  000e5	81 c6 6c 03 00
	00		 add	 esi, 876		; 0000036cH
  000eb	ff 4d f4	 dec	 DWORD PTR tv836[ebp]
  000ee	89 75 f8	 mov	 DWORD PTR tv796[ebp], esi
  000f1	0f 85 29 ff ff
	ff		 jne	 $LL9@CheckPerio
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx

; 316  : 					}
; 317  : 				}
; 318  : 			}
; 319  : 		}
; 320  : 	}
; 321  : }

  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
?CheckPeriodData@CPeriodItemZt@@QAEXXZ ENDP		; CPeriodItemZt::CheckPeriodData
_TEXT	ENDS
PUBLIC	?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GKK@Z ; CPeriodItemZt::SetPeriodItemInfo
EXTRN	?GCInventoryItemOneSend@@YAXHH@Z:PROC		; GCInventoryItemOneSend
EXTRN	?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z:PROC ; CItemAddOption::SearchItemEffectType1
EXTRN	?g_ItemAddOption@@3VCItemAddOption@@A:BYTE	; g_ItemAddOption
; Function compile flags: /Ogtp
;	COMDAT ?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GKK@Z
_TEXT	SEGMENT
_ItemData$ = -28					; size = 28
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
_lpItemEffect$ = 16					; size = 4
_dwSerial$ = 16						; size = 4
_dwExpireDate$ = 20					; size = 4
_dwDuration$ = 20					; size = 4
?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GKK@Z PROC ; CPeriodItemZt::SetPeriodItemInfo, COMDAT
; _this$ = ecx

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 422  : 	if( !lpObj )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	85 c0		 test	 eax, eax
  0000e	75 09		 jne	 SHORT $LN10@SetPeriodI
$LN8@SetPeriodI:

; 423  : 		return false;

  00010	32 c0		 xor	 al, al
  00012	5b		 pop	 ebx

; 488  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
$LN10@SetPeriodI:

; 424  : 
; 425  : 	if( lpObj->Type != OBJ_USER || lpObj->Connected < PLAYER_LOGGED )

  00019	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  0001e	75 f0		 jne	 SHORT $LN8@SetPeriodI
  00020	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00024	7c ea		 jl	 SHORT $LN8@SetPeriodI

; 426  : 		return false;
; 427  : 
; 428  : 	int iInventoryPosition = 0;
; 429  : 	DWORD dwExpireDate = 0;
; 430  : 	CItem* lpItem = NULL;
; 431  : 	ITEMDATA ItemData;
; 432  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 433  : 	LPITEMEFFECT lpItemEffect = NULL;
; 434  : 
; 435  : 	if( !dwSerial )

  00026	8b 4d 10	 mov	 ecx, DWORD PTR _dwSerial$[ebp]
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	85 c9		 test	 ecx, ecx
  0002d	0f 85 83 00 00
	00		 jne	 $LN7@SetPeriodI

; 436  : 	{
; 437  : 		lpBuffData		= (LPBUFF_EFFECT_DATE)g_BuffManager.GetBuffInfo(wItemCode);

  00033	0f b7 7d 0c	 movzx	 edi, WORD PTR _wItemCode$[ebp]
  00037	57		 push	 edi
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffManager@@3VCBuffManager@@A ; g_BuffManager
  0003d	e8 00 00 00 00	 call	 ?GetBuffInfo@CBuffManager@@QAEPAUBUFF_EFFECT_DATA@@H@Z ; CBuffManager::GetBuffInfo

; 438  : 		lpItemEffect	= g_ItemAddOption.SearchItemEffectType1(wItemCode);

  00042	57		 push	 edi
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00048	8b f0		 mov	 esi, eax
  0004a	e8 00 00 00 00	 call	 ?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ; CItemAddOption::SearchItemEffectType1
  0004f	89 45 10	 mov	 DWORD PTR _lpItemEffect$[ebp], eax

; 439  : 
; 440  : 		if( !lpBuffData || !lpItemEffect )

  00052	85 f6		 test	 esi, esi
  00054	74 74		 je	 SHORT $LN5@SetPeriodI
  00056	85 c0		 test	 eax, eax
  00058	74 70		 je	 SHORT $LN5@SetPeriodI

; 441  : 			return false;
; 442  : 
; 443  : 		if( gObjApplyBuffEffectItemPeriod(lpObj,lpBuffData->btIndex,dwDuration) == TRUE )

  0005a	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0005d	8b 7d 14	 mov	 edi, DWORD PTR _dwDuration$[ebp]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00063	57		 push	 edi
  00064	50		 push	 eax
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjApplyBuffEffectItemPeriod
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	3c 01		 cmp	 al, 1
  00070	75 58		 jne	 SHORT $LN5@SetPeriodI

; 444  : 		{
; 445  : 			ItemData.Clear();
; 446  : 			ItemData.btType = 1;
; 447  : 			ItemData.wItemCode = wItemCode;
; 448  : 			ItemData.btTmp = lpBuffData->btViewPortIndex;

  00072	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00075	66 8b 55 0c	 mov	 dx, WORD PTR _wItemCode$[ebp]
  00079	88 45 e8	 mov	 BYTE PTR _ItemData$[ebp+4], al

; 449  : 			ItemData.btEffectType1 = lpItemEffect->wEffectType1;

  0007c	8b 45 10	 mov	 eax, DWORD PTR _lpItemEffect$[ebp]
  0007f	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00082	66 89 55 e6	 mov	 WORD PTR _ItemData$[ebp+2], dx

; 450  : 			ItemData.btEffectType2 = lpItemEffect->wEffectType2;

  00086	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00089	88 4d e9	 mov	 BYTE PTR _ItemData$[ebp+5], cl

; 451  : 			ItemData.iDuration = dwDuration;
; 452  : 			ItemData.iUnk3 = 0;
; 453  : 			ItemData.lCurentDate = this->GetCurrentDate();

  0008c	8b cb		 mov	 ecx, ebx
  0008e	66 c7 45 e4 00
	01		 mov	 WORD PTR _ItemData$[ebp], 256 ; 00000100H
  00094	88 55 ea	 mov	 BYTE PTR _ItemData$[ebp+6], dl
  00097	89 7d fc	 mov	 DWORD PTR _ItemData$[ebp+24], edi
  0009a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ItemData$[ebp+20], 0
  000a1	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate

; 454  : 			ItemData.lExpireDate = this->GetExpireDate(dwDuration);

  000a6	57		 push	 edi
  000a7	8b cb		 mov	 ecx, ebx
  000a9	89 45 f0	 mov	 DWORD PTR _ItemData$[ebp+12], eax
  000ac	e8 00 00 00 00	 call	 ?GetExpireDate@CPeriodItemZt@@QAEJH@Z ; CPeriodItemZt::GetExpireDate

; 455  : 		}
; 456  : 		else
; 457  : 		{
; 458  : 			return FALSE;
; 459  : 		}
; 460  : 	}
; 461  : 	else

  000b1	e9 98 00 00 00	 jmp	 $LN19@SetPeriodI
$LN7@SetPeriodI:

; 462  : 	{
; 463  : 		iInventoryPosition = this->GetItemFromInventory(lpObj,wItemCode,dwSerial);

  000b6	51		 push	 ecx
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _wItemCode$[ebp]
  000ba	51		 push	 ecx
  000bb	50		 push	 eax
  000bc	8b cb		 mov	 ecx, ebx
  000be	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory
  000c3	8b f8		 mov	 edi, eax

; 464  : 
; 465  : 		if( iInventoryPosition == -1 )

  000c5	83 ff ff	 cmp	 edi, -1
  000c8	75 0b		 jne	 SHORT $LN1@SetPeriodI
$LN5@SetPeriodI:
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi

; 466  : 		{
; 467  : 			return false;

  000cc	32 c0		 xor	 al, al
  000ce	5b		 pop	 ebx

; 488  : }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 10 00	 ret	 16			; 00000010H
$LN1@SetPeriodI:

; 468  : 		}
; 469  : 
; 470  : 		lpItem = &lpObj->pInventory[iInventoryPosition];

  000d5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000d8	8b f7		 mov	 esi, edi
  000da	69 f6 d4 00 00
	00		 imul	 esi, 212		; 000000d4H
  000e0	03 b2 24 0e 00
	00		 add	 esi, DWORD PTR [edx+3620]

; 471  : 		lpItem->SetPeriodItem();

  000e6	8b ce		 mov	 ecx, esi
  000e8	e8 00 00 00 00	 call	 ?SetPeriodItem@CItem@@QAEXXZ ; CItem::SetPeriodItem

; 472  : 
; 473  : 		GCInventoryItemOneSend(lpObj->m_Index, iInventoryPosition);

  000ed	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	57		 push	 edi
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?GCInventoryItemOneSend@@YAXHH@Z ; GCInventoryItemOneSend

; 474  : 
; 475  : 		dwExpireDate = this->GetExpireDate(dwDuration);

  000f9	8b 7d 14	 mov	 edi, DWORD PTR _dwDuration$[ebp]
  000fc	83 c4 08	 add	 esp, 8
  000ff	57		 push	 edi
  00100	8b cb		 mov	 ecx, ebx
  00102	e8 00 00 00 00	 call	 ?GetExpireDate@CPeriodItemZt@@QAEJH@Z ; CPeriodItemZt::GetExpireDate

; 476  : 		AddPeriodItemData(lpObj,wItemCode,dwSerial,dwDuration,dwExpireDate);

  00107	8b 55 10	 mov	 edx, DWORD PTR _dwSerial$[ebp]
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0010d	50		 push	 eax
  0010e	57		 push	 edi
  0010f	89 45 14	 mov	 DWORD PTR _dwExpireDate$[ebp], eax
  00112	8b 45 0c	 mov	 eax, DWORD PTR _wItemCode$[ebp]
  00115	52		 push	 edx
  00116	50		 push	 eax
  00117	51		 push	 ecx
  00118	8b cb		 mov	 ecx, ebx
  0011a	e8 00 00 00 00	 call	 ?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKHJ@Z ; CPeriodItemZt::AddPeriodItemData

; 477  : 		ItemData.Clear();
; 478  : 		ItemData.wItemCode		= wItemCode;

  0011f	66 8b 55 0c	 mov	 dx, WORD PTR _wItemCode$[ebp]

; 479  : 		ItemData.btType			= 2;
; 480  : 		ItemData.dwSerial		= lpItem->GetNumber();

  00123	8b ce		 mov	 ecx, esi
  00125	66 89 55 e6	 mov	 WORD PTR _ItemData$[ebp+2], dx
  00129	66 c7 45 e4 00
	02		 mov	 WORD PTR _ItemData$[ebp], 512 ; 00000200H
  0012f	e8 00 00 00 00	 call	 ?GetNumber@CItem@@QAEKXZ ; CItem::GetNumber

; 481  : 		ItemData.iDuration		= dwDuration;
; 482  : 		ItemData.iUnk3			= 0;
; 483  : 		ItemData.lCurentDate	= this->GetCurrentDate();

  00134	8b cb		 mov	 ecx, ebx
  00136	89 45 ec	 mov	 DWORD PTR _ItemData$[ebp+8], eax
  00139	89 7d fc	 mov	 DWORD PTR _ItemData$[ebp+24], edi
  0013c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ItemData$[ebp+20], 0
  00143	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate
  00148	89 45 f0	 mov	 DWORD PTR _ItemData$[ebp+12], eax

; 484  : 		ItemData.lExpireDate	= dwExpireDate;

  0014b	8b 45 14	 mov	 eax, DWORD PTR _dwExpireDate$[ebp]
$LN19@SetPeriodI:

; 485  : 	}
; 486  : 	RequestPeriodItemInsert(lpObj,&ItemData,dwDuration);

  0014e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00151	57		 push	 edi
  00152	8d 4d e4	 lea	 ecx, DWORD PTR _ItemData$[ebp]
  00155	51		 push	 ecx
  00156	52		 push	 edx
  00157	8b cb		 mov	 ecx, ebx
  00159	89 45 f4	 mov	 DWORD PTR _ItemData$[ebp+16], eax
  0015c	e8 00 00 00 00	 call	 ?RequestPeriodItemInsert@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@K@Z ; CPeriodItemZt::RequestPeriodItemInsert
  00161	5f		 pop	 edi
  00162	5e		 pop	 esi

; 487  : 	return true;

  00163	b0 01		 mov	 al, 1
  00165	5b		 pop	 ebx

; 488  : }

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 10 00	 ret	 16			; 00000010H
?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@GKK@Z ENDP ; CPeriodItemZt::SetPeriodItemInfo
_TEXT	ENDS
PUBLIC	?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGKK@Z ; CPeriodItemZt::SetPeriodItemInfo
; Function compile flags: /Ogtp
;	COMDAT ?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGKK@Z
_TEXT	SEGMENT
_ItemData$ = -28					; size = 28
_lpObj$ = 8						; size = 4
_btItemType$ = 12					; size = 1
_wItemCode$ = 16					; size = 2
_dwSerial$ = 20						; size = 4
_dwDuration$ = 24					; size = 4
?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGKK@Z PROC ; CPeriodItemZt::SetPeriodItemInfo, COMDAT
; _this$ = ecx

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 493  : 	if( !lpObj )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	85 c0		 test	 eax, eax
  0000e	75 09		 jne	 SHORT $LN11@SetPeriodI@2
$LN9@SetPeriodI@2:

; 494  : 		return false;

  00010	32 c0		 xor	 al, al
  00012	5f		 pop	 edi

; 554  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 14 00	 ret	 20			; 00000014H
$LN11@SetPeriodI@2:

; 495  : 
; 496  : 	if( lpObj->Type != OBJ_USER ||
; 497  : 		lpObj->Connected < PLAYER_LOGGED )

  00019	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  0001e	75 f0		 jne	 SHORT $LN9@SetPeriodI@2
  00020	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00024	7c ea		 jl	 SHORT $LN9@SetPeriodI@2

; 498  : 		return false;
; 499  : 
; 500  : 	ITEMDATA ItemData;
; 501  : 	
; 502  : 	if( btItemType == 1 )

  00026	8a 4d 0c	 mov	 cl, BYTE PTR _btItemType$[ebp]
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	80 f9 01	 cmp	 cl, 1
  0002e	75 48		 jne	 SHORT $LN8@SetPeriodI@2

; 503  : 	{
; 504  : 		LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 505  : 		LPITEMEFFECT lpItemEffect = NULL;
; 506  : 
; 507  : 		lpBuffData =(LPBUFF_EFFECT_DATE) g_BuffManager.GetBuffInfo(wItemCode);

  00030	0f b7 5d 10	 movzx	 ebx, WORD PTR _wItemCode$[ebp]
  00034	53		 push	 ebx
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffManager@@3VCBuffManager@@A ; g_BuffManager
  0003a	e8 00 00 00 00	 call	 ?GetBuffInfo@CBuffManager@@QAEPAUBUFF_EFFECT_DATA@@H@Z ; CBuffManager::GetBuffInfo

; 508  : 		lpItemEffect = g_ItemAddOption.SearchItemEffectType1(wItemCode);

  0003f	53		 push	 ebx
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00045	8b f0		 mov	 esi, eax
  00047	e8 00 00 00 00	 call	 ?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ; CItemAddOption::SearchItemEffectType1

; 509  : 
; 510  : 		if( !lpBuffData || !lpItemEffect )

  0004c	85 f6		 test	 esi, esi
  0004e	74 46		 je	 SHORT $LN21@SetPeriodI@2
  00050	85 c0		 test	 eax, eax
  00052	74 42		 je	 SHORT $LN21@SetPeriodI@2

; 511  : 			return false;
; 512  : 
; 513  : 		ItemData.Clear();
; 514  : 		ItemData.btType = 1;
; 515  : 		ItemData.wItemCode = wItemCode;
; 516  : 		ItemData.btTmp = lpBuffData->btViewPortIndex;

  00054	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  00058	66 8b 4d 10	 mov	 cx, WORD PTR _wItemCode$[ebp]
  0005c	88 55 e8	 mov	 BYTE PTR _ItemData$[ebp+4], dl

; 517  : 		ItemData.btEffectType1 = lpItemEffect->wEffectType1;
; 518  : 		ItemData.btEffectType2 = lpItemEffect->wEffectType2;

  0005f	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  00063	66 89 4d e6	 mov	 WORD PTR _ItemData$[ebp+2], cx
  00067	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0006a	66 c7 45 e4 00
	01		 mov	 WORD PTR _ItemData$[ebp], 256 ; 00000100H
  00070	88 4d e9	 mov	 BYTE PTR _ItemData$[ebp+5], cl
  00073	88 55 ea	 mov	 BYTE PTR _ItemData$[ebp+6], dl

; 519  : 		ItemData.iDuration = dwDuration;
; 520  : 		ItemData.iUnk3 = 0;
; 521  : 		ItemData.lCurentDate = this->GetCurrentDate();
; 522  : 		ItemData.lExpireDate = this->GetExpireDate(dwDuration);

  00076	eb 36		 jmp	 SHORT $LN20@SetPeriodI@2
$LN8@SetPeriodI@2:

; 523  : 	}
; 524  : 	else if( btItemType == 2 )

  00078	80 f9 02	 cmp	 cl, 2
  0007b	75 19		 jne	 SHORT $LN21@SetPeriodI@2

; 525  : 	{
; 526  : 		if( dwSerial == 0 )

  0007d	8b 75 14	 mov	 esi, DWORD PTR _dwSerial$[ebp]
  00080	85 f6		 test	 esi, esi

; 527  : 			return false;

  00082	74 12		 je	 SHORT $LN21@SetPeriodI@2

; 528  : 
; 529  : 		int iInventoryPosition = 0;
; 530  : 
; 531  : 		iInventoryPosition = this->GetItemFromInventory(lpObj,wItemCode,dwSerial);

  00084	8b 5d 10	 mov	 ebx, DWORD PTR _wItemCode$[ebp]
  00087	56		 push	 esi
  00088	53		 push	 ebx
  00089	50		 push	 eax
  0008a	8b cf		 mov	 ecx, edi
  0008c	e8 00 00 00 00	 call	 ?GetItemFromInventory@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GK@Z ; CPeriodItemZt::GetItemFromInventory

; 532  : 
; 533  : 		if( iInventoryPosition == -1 )

  00091	83 f8 ff	 cmp	 eax, -1
  00094	75 0b		 jne	 SHORT $LN2@SetPeriodI@2
$LN21@SetPeriodI@2:
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 534  : 			return false;

  00098	32 c0		 xor	 al, al
  0009a	5f		 pop	 edi

; 554  : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 14 00	 ret	 20			; 00000014H
$LN2@SetPeriodI@2:

; 535  : 
; 536  : 		//lpObj->pInventory[iInventoryPosition].SetPeriodItem(); //not original, fix
; 537  : 
; 538  : 		ItemData.Clear();
; 539  : 		ItemData.wItemCode = wItemCode;

  000a1	66 89 5d e6	 mov	 WORD PTR _ItemData$[ebp+2], bx
  000a5	66 c7 45 e4 00
	02		 mov	 WORD PTR _ItemData$[ebp], 512 ; 00000200H

; 540  : 		ItemData.btType = 2;
; 541  : 		ItemData.dwSerial = dwSerial;

  000ab	89 75 ec	 mov	 DWORD PTR _ItemData$[ebp+8], esi
$LN20@SetPeriodI@2:

; 542  : 		ItemData.iDuration = dwDuration;

  000ae	8b 75 18	 mov	 esi, DWORD PTR _dwDuration$[ebp]

; 543  : 		ItemData.iUnk3 = 0;
; 544  : 		ItemData.lCurentDate = this->GetCurrentDate();

  000b1	8b cf		 mov	 ecx, edi
  000b3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ItemData$[ebp+20], 0
  000ba	89 75 fc	 mov	 DWORD PTR _ItemData$[ebp+24], esi
  000bd	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate

; 545  : 		ItemData.lExpireDate = this->GetExpireDate(dwDuration);

  000c2	56		 push	 esi
  000c3	8b cf		 mov	 ecx, edi
  000c5	89 45 f0	 mov	 DWORD PTR _ItemData$[ebp+12], eax
  000c8	e8 00 00 00 00	 call	 ?GetExpireDate@CPeriodItemZt@@QAEJH@Z ; CPeriodItemZt::GetExpireDate

; 546  : 	}
; 547  : 	else
; 548  : 	{
; 549  : 		return false;
; 550  : 	}
; 551  : 
; 552  : 	RequestPeriodItemInsert(lpObj,&ItemData,dwDuration);

  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000d0	89 45 f4	 mov	 DWORD PTR _ItemData$[ebp+16], eax
  000d3	56		 push	 esi
  000d4	8d 45 e4	 lea	 eax, DWORD PTR _ItemData$[ebp]
  000d7	50		 push	 eax
  000d8	51		 push	 ecx
  000d9	8b cf		 mov	 ecx, edi
  000db	e8 00 00 00 00	 call	 ?RequestPeriodItemInsert@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@K@Z ; CPeriodItemZt::RequestPeriodItemInsert
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx

; 553  : return true;

  000e2	b0 01		 mov	 al, 1
  000e4	5f		 pop	 edi

; 554  : }

  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 14 00	 ret	 20			; 00000014H
?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@EGKK@Z ENDP ; CPeriodItemZt::SetPeriodItemInfo
_TEXT	ENDS
PUBLIC	?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@G@Z ; CPeriodItemZt::SetPeriodItemInfo
; Function compile flags: /Ogtp
;	COMDAT ?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@G@Z
_TEXT	SEGMENT
_ItemData$ = -28					; size = 28
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@G@Z PROC ; CPeriodItemZt::SetPeriodItemInfo, COMDAT
; _this$ = ecx

; 558  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 559  : 	if( !lpObj )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	85 c0		 test	 eax, eax
  0000e	75 09		 jne	 SHORT $LN7@SetPeriodI@3
$LN5@SetPeriodI@3:

; 560  : 		return false;

  00010	32 c0		 xor	 al, al
  00012	5b		 pop	 ebx

; 598  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN7@SetPeriodI@3:

; 561  : 
; 562  : 	if( lpObj->Type != OBJ_USER ||
; 563  : 		lpObj->Connected < PLAYER_LOGGED )

  00019	66 83 78 68 01	 cmp	 WORD PTR [eax+104], 1
  0001e	75 f0		 jne	 SHORT $LN5@SetPeriodI@3
  00020	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00024	7c ea		 jl	 SHORT $LN5@SetPeriodI@3

; 564  : 		return false;
; 565  : 
; 566  : 	DWORD dwExpireDate = 0;
; 567  : 	CItem* lpItem = NULL;
; 568  : 	ITEMDATA ItemData;
; 569  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 570  : 	LPITEMEFFECT lpItemEffect = NULL;
; 571  : 
; 572  : 	lpBuffData = (LPBUFF_EFFECT_DATE)g_BuffManager.GetBuffInfo(wItemCode);

  00026	56		 push	 esi
  00027	0f b7 75 0c	 movzx	 esi, WORD PTR _wItemCode$[ebp]
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffManager@@3VCBuffManager@@A ; g_BuffManager
  00032	e8 00 00 00 00	 call	 ?GetBuffInfo@CBuffManager@@QAEPAUBUFF_EFFECT_DATA@@H@Z ; CBuffManager::GetBuffInfo

; 573  : 	lpItemEffect = g_ItemAddOption.SearchItemEffectType1(wItemCode);

  00037	56		 push	 esi
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  0003d	8b f8		 mov	 edi, eax
  0003f	e8 00 00 00 00	 call	 ?SearchItemEffectType1@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ; CItemAddOption::SearchItemEffectType1
  00044	8b f0		 mov	 esi, eax

; 574  : 
; 575  : 	if( !lpBuffData || !lpItemEffect )

  00046	85 ff		 test	 edi, edi
  00048	74 7f		 je	 SHORT $LN3@SetPeriodI@3
  0004a	85 f6		 test	 esi, esi
  0004c	74 7b		 je	 SHORT $LN3@SetPeriodI@3

; 577  : 
; 578  : 	if( gObjApplyBuffEffectItemPeriod(lpObj,lpBuffData->btIndex,lpItemEffect->iEffectValidTime) == TRUE )

  0004e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00051	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00054	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00057	50		 push	 eax
  00058	51		 push	 ecx
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjApplyBuffEffectItemPeriod
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	3c 01		 cmp	 al, 1
  00064	75 63		 jne	 SHORT $LN3@SetPeriodI@3

; 579  : 	{
; 580  : 		ItemData.Clear();
; 581  : 		ItemData.btType = 1;
; 582  : 		ItemData.wItemCode = wItemCode;
; 583  : 		ItemData.btTmp = lpBuffData->btViewPortIndex;

  00066	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00069	66 8b 45 0c	 mov	 ax, WORD PTR _wItemCode$[ebp]

; 584  : 		ItemData.btEffectType1 = lpItemEffect->wEffectType1;

  0006d	8a 56 02	 mov	 dl, BYTE PTR [esi+2]
  00070	88 4d e8	 mov	 BYTE PTR _ItemData$[ebp+4], cl

; 585  : 		ItemData.btEffectType2 = lpItemEffect->wEffectType2;
; 586  : 		ItemData.iDuration = lpItemEffect->iEffectValidTime;

  00073	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00076	66 89 45 e6	 mov	 WORD PTR _ItemData$[ebp+2], ax
  0007a	8a 46 04	 mov	 al, BYTE PTR [esi+4]
  0007d	89 4d fc	 mov	 DWORD PTR _ItemData$[ebp+24], ecx

; 587  : 		ItemData.iUnk3 = 0;
; 588  : 		ItemData.lCurentDate = this->GetCurrentDate();

  00080	8b cb		 mov	 ecx, ebx
  00082	66 c7 45 e4 00
	01		 mov	 WORD PTR _ItemData$[ebp], 256 ; 00000100H
  00088	88 55 e9	 mov	 BYTE PTR _ItemData$[ebp+5], dl
  0008b	88 45 ea	 mov	 BYTE PTR _ItemData$[ebp+6], al
  0008e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ItemData$[ebp+20], 0
  00095	e8 00 00 00 00	 call	 ?GetCurrentDate@CPeriodItemZt@@QAEJXZ ; CPeriodItemZt::GetCurrentDate

; 589  : 		ItemData.lExpireDate = this->GetExpireDate(lpItemEffect->iEffectValidTime);

  0009a	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0009d	52		 push	 edx
  0009e	8b cb		 mov	 ecx, ebx
  000a0	89 45 f0	 mov	 DWORD PTR _ItemData$[ebp+12], eax
  000a3	e8 00 00 00 00	 call	 ?GetExpireDate@CPeriodItemZt@@QAEJH@Z ; CPeriodItemZt::GetExpireDate

; 590  : 	}
; 591  : 	else
; 592  : 	{
; 593  : 		return FALSE;
; 594  : 	}
; 595  : 
; 596  : 	RequestPeriodItemInsert(lpObj,&ItemData,lpItemEffect->iEffectValidTime);

  000a8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000ab	89 45 f4	 mov	 DWORD PTR _ItemData$[ebp+16], eax
  000ae	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000b1	50		 push	 eax
  000b2	8d 4d e4	 lea	 ecx, DWORD PTR _ItemData$[ebp]
  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	8b cb		 mov	 ecx, ebx
  000b9	e8 00 00 00 00	 call	 ?RequestPeriodItemInsert@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@K@Z ; CPeriodItemZt::RequestPeriodItemInsert
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi

; 597  : 	return true;

  000c0	b0 01		 mov	 al, 1
  000c2	5b		 pop	 ebx

; 598  : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 08 00	 ret	 8
$LN3@SetPeriodI@3:
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi

; 576  : 		return false;

  000cb	32 c0		 xor	 al, al
  000cd	5b		 pop	 ebx

; 598  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?SetPeriodItemInfo@CPeriodItemZt@@QAE_NPAUOBJECTSTRUCT@@G@Z ENDP ; CPeriodItemZt::SetPeriodItemInfo
_TEXT	ENDS
PUBLIC	??_C@_0KD@FLGCCPJB@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@ ; `string'
PUBLIC	?DGPeriodItemZtInsert@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_INSERT@@@Z ; CPeriodItemZt::DGPeriodItemZtInsert
;	COMDAT ??_C@_0KD@FLGCCPJB@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@
CONST	SEGMENT
??_C@_0KD@FLGCCPJB@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@ DB '[Perio'
	DB	'dItemZt][Insert PeriodItem] OnRequest Insert PeriodItem Data.'
	DB	' User Id : %s(%d), Name : %s, Item : %s(%d), Type : %d, Seria'
	DB	'l : %u, Duration : %d, Result : %d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DGPeriodItemZtInsert@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_INSERT@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?DGPeriodItemZtInsert@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_INSERT@@@Z PROC ; CPeriodItemZt::DGPeriodItemZtInsert, COMDAT
; _this$ = ecx

; 733  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 734  : 	int iIndex = lpMsg->wUserIndex;

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]
  00008	57		 push	 edi
  00009	0f b7 7e 08	 movzx	 edi, WORD PTR [esi+8]
  0000d	8b d9		 mov	 ebx, ecx

; 735  : 	int iInsertedSlotIndex = 0;
; 736  : 
; 737  : 	if( iIndex < 0 || iIndex >= OBJMAX )

  0000f	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00015	0f 87 c9 00 00
	00		 ja	 $LN8@DGPeriodIt@6

; 738  : 		return;
; 739  : 
; 740  : 	LPOBJ lpObj = &gObj[iIndex];

  0001b	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00021	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 741  : 
; 742  : 	if( lpObj == NULL )

  00027	0f 84 b7 00 00
	00		 je	 $LN8@DGPeriodIt@6

; 743  : 		return;
; 744  : 
; 745  : 	if( lpObj->Type != OBJ_USER ||
; 746  : 		lpObj->Connected < PLAYER_LOGGED )

  0002d	66 83 7f 68 01	 cmp	 WORD PTR [edi+104], 1
  00032	0f 85 ac 00 00
	00		 jne	 $LN8@DGPeriodIt@6
  00038	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  0003c	0f 8c a2 00 00
	00		 jl	 $LN8@DGPeriodIt@6

; 747  : 		return;
; 748  : 
; 749  : 
; 750  : 	switch( lpMsg->btResultCode )

  00042	80 7e 0a 00	 cmp	 BYTE PTR [esi+10], 0
  00046	75 58		 jne	 SHORT $LN2@DGPeriodIt@6

; 751  : 	{
; 752  : 	case 0:
; 753  : 		if( lpMsg->btItemtype == 1 )

  00048	8a 46 0b	 mov	 al, BYTE PTR [esi+11]
  0004b	3c 01		 cmp	 al, 1
  0004d	75 14		 jne	 SHORT $LN4@DGPeriodIt@6

; 754  : 		{
; 755  : 			gObjApplyBuffEffectItemPeriod(lpObj,lpMsg->wItemCode,lpMsg->dwDuration);

  0004f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00052	0f b7 4e 0c	 movzx	 ecx, WORD PTR [esi+12]
  00056	50		 push	 eax
  00057	51		 push	 ecx
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectItemPeriod@@YAEPAUOBJECTSTRUCT@@HH@Z ; gObjApplyBuffEffectItemPeriod
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	eb 3d		 jmp	 SHORT $LN2@DGPeriodIt@6
$LN4@DGPeriodIt@6:

; 756  : 		}
; 757  : 		else if( lpMsg->btItemtype == 2 )

  00063	3c 02		 cmp	 al, 2
  00065	75 39		 jne	 SHORT $LN2@DGPeriodIt@6

; 758  : 		{
; 759  : 			iInsertedSlotIndex = this->AddPeriodItemData(lpObj,lpMsg->wItemCode,lpMsg->dwSerial,lpMsg->dwDuration);

  00067	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0006a	0f b7 4e 0c	 movzx	 ecx, WORD PTR [esi+12]
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	52		 push	 edx
  00072	50		 push	 eax
  00073	51		 push	 ecx
  00074	57		 push	 edi
  00075	8b cb		 mov	 ecx, ebx
  00077	e8 00 00 00 00	 call	 ?AddPeriodItemData@CPeriodItemZt@@QAEHPAUOBJECTSTRUCT@@GKH@Z ; CPeriodItemZt::AddPeriodItemData

; 760  : 			OnRequestPeriodItemListOnce(lpObj,&this->m_PeriodData[lpObj->m_PeriodDataIndex].itemData[iInsertedSlotIndex]);

  0007c	8b 97 20 26 00
	00		 mov	 edx, DWORD PTR [edi+9760]
  00082	69 d2 6c 03 00
	00		 imul	 edx, 876		; 0000036cH
  00088	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0008f	2b c8		 sub	 ecx, eax
  00091	03 d3		 add	 edx, ebx
  00093	8d 54 8a 28	 lea	 edx, DWORD PTR [edx+ecx*4+40]
  00097	52		 push	 edx
  00098	57		 push	 edi
  00099	8b cb		 mov	 ecx, ebx
  0009b	e8 00 00 00 00	 call	 ?OnRequestPeriodItemListOnce@CPeriodItemZt@@QAEXPAUOBJECTSTRUCT@@PAUITEMDATA@@@Z ; CPeriodItemZt::OnRequestPeriodItemListOnce
$LN2@DGPeriodIt@6:

; 761  : 		}
; 762  : 		break;
; 763  : 	default:break;
; 764  : 	}
; 765  : 
; 766  : 	LogAddTD("[PeriodItemZt][Insert PeriodItem] OnRequest Insert PeriodItem Data. User Id : %s(%d), Name : %s, Item : %s(%d), Type : %d, Serial : %u, Duration : %d, Result : %d",
; 767  : 		lpObj->AccountID,lpObj->DBNumber,lpObj->Name,ItemAttribute[lpMsg->wItemCode].Name,lpMsg->wItemCode,lpMsg->btItemtype,lpMsg->dwSerial,lpMsg->dwDuration,lpMsg->btResultCode);

  000a0	0f b6 4e 0a	 movzx	 ecx, BYTE PTR [esi+10]
  000a4	0f b7 46 0c	 movzx	 eax, WORD PTR [esi+12]
  000a8	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000ab	51		 push	 ecx
  000ac	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000af	52		 push	 edx
  000b0	0f b6 56 0b	 movzx	 edx, BYTE PTR [esi+11]
  000b4	51		 push	 ecx
  000b5	52		 push	 edx
  000b6	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  000bd	2b c8		 sub	 ecx, eax
  000bf	50		 push	 eax
  000c0	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000c3	c1 e1 04	 shl	 ecx, 4
  000c6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  000cc	51		 push	 ecx
  000cd	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  000d0	52		 push	 edx
  000d1	50		 push	 eax
  000d2	83 c7 6c	 add	 edi, 108		; 0000006cH
  000d5	57		 push	 edi
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0KD@FLGCCPJB@?$FLPeriodItemZt?$FN?$FLInsert?5PeriodItem@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e1	83 c4 28	 add	 esp, 40			; 00000028H
$LN8@DGPeriodIt@6:
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 768  : }

  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
?DGPeriodItemZtInsert@CPeriodItemZt@@QAEXPAUPMSG_ANS_PERIODITEMZT_INSERT@@@Z ENDP ; CPeriodItemZt::DGPeriodItemZtInsert
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_PeriodItemZt@@YAXXZ
text$yc	SEGMENT
??__Eg_PeriodItemZt@@YAXXZ PROC				; `dynamic initializer for 'g_PeriodItemZt'', COMDAT

; 17   : CPeriodItemZt g_PeriodItemZt;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  00005	e8 00 00 00 00	 call	 ??0CPeriodItemZt@@QAE@XZ ; CPeriodItemZt::CPeriodItemZt
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_PeriodItemZt@@YAXXZ ; `dynamic atexit destructor for 'g_PeriodItemZt''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_PeriodItemZt@@YAXXZ ENDP				; `dynamic initializer for 'g_PeriodItemZt''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_PeriodItemZt@@YAXXZ
text$yd	SEGMENT
??__Fg_PeriodItemZt@@YAXXZ PROC				; `dynamic atexit destructor for 'g_PeriodItemZt'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PeriodItemZt@@3VCPeriodItemZt@@A ; g_PeriodItemZt
  00005	e9 00 00 00 00	 jmp	 ??1CPeriodItemZt@@UAE@XZ ; CPeriodItemZt::~CPeriodItemZt
??__Fg_PeriodItemZt@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_PeriodItemZt''
text$yd	ENDS
PUBLIC	?g_PeriodItemZt@@3VCPeriodItemZt@@A		; g_PeriodItemZt
_BSS	SEGMENT
?g_PeriodItemZt@@3VCPeriodItemZt@@A DB 0d5de4H DUP (?)	; g_PeriodItemZt
_BSS	ENDS
CRT$XCU	SEGMENT
_g_PeriodItemZt$initializer$ DD FLAT:??__Eg_PeriodItemZt@@YAXXZ
CRT$XCU	ENDS
END
