; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\PetZt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1CPetZt@@QAE@XZ				; CPetZt::~CPetZt
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\petzt.cpp
;	COMDAT ??1CPetZt@@QAE@XZ
_TEXT	SEGMENT
??1CPetZt@@QAE@XZ PROC					; CPetZt::~CPetZt, COMDAT
; _this$ = ecx

; 19   : }

  00000	c3		 ret	 0
??1CPetZt@@QAE@XZ ENDP					; CPetZt::~CPetZt
_TEXT	ENDS
PUBLIC	?Init@CPetZt@@QAEXXZ				; CPetZt::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CPetZt@@QAEXXZ
_TEXT	SEGMENT
?Init@CPetZt@@QAEXXZ PROC				; CPetZt::Init, COMDAT
; _this$ = ecx

; 23   : 	this->m_Enable = 0;

  00000	33 d2		 xor	 edx, edx
  00002	56		 push	 esi
  00003	57		 push	 edi
  00004	89 11		 mov	 DWORD PTR [ecx], edx

; 24   : 	this->m_PetCount = 0;

  00006	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 25   : 	this->m_ImmortalCount = 0;

  00009	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0000c	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  0000f	8d 72 64	 lea	 esi, DWORD PTR [edx+100]
  00012	83 cf ff	 or	 edi, -1
$LL9@Init:

; 26   : 
; 27   : 	for(int i = 0; i < MAX_PETZT_COUNT; i++)
; 28   : 	{
; 29   : 		this->m_Data[i].Active = false;	

  00015	89 50 fc	 mov	 DWORD PTR [eax-4], edx

; 30   : 		this->m_Data[i].ItemType = -1;	

  00018	89 38		 mov	 DWORD PTR [eax], edi

; 31   : 		this->m_Data[i].ItemIndex = -1;	

  0001a	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 32   : 		
; 33   : 		for(int n = 0; n < MAX_PETZT_OPTION; n++)
; 34   : 		{
; 35   : 			this->m_Data[i].Option[n].Type = 0;

  0001d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 36   : 			this->m_Data[i].Option[n].Value = 0;		

  00020	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00023	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00026	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00029	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0002c	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  0002f	89 50 20	 mov	 DWORD PTR [eax+32], edx
  00032	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00035	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00038	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  0003b	83 c0 34	 add	 eax, 52			; 00000034H
  0003e	4e		 dec	 esi
  0003f	75 d4		 jne	 SHORT $LL9@Init

; 37   : 		}
; 38   : 	}
; 39   : 
; 40   : 	for(int i = 0; i < MAX_PETZT_COUNT; i++)

  00041	8d 81 60 14 00
	00		 lea	 eax, DWORD PTR [ecx+5216]
  00047	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL3@Init:

; 41   : 	{
; 42   : 		this->m_Immoirtal[i].Active = false;	

  00050	89 50 fc	 mov	 DWORD PTR [eax-4], edx

; 43   : 		this->m_Immoirtal[i].ItemType = -1;	

  00053	89 38		 mov	 DWORD PTR [eax], edi

; 44   : 		this->m_Immoirtal[i].ItemIndex = -1;	

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005b	49		 dec	 ecx
  0005c	75 f2		 jne	 SHORT $LL3@Init

; 45   : 	}
; 46   : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	c3		 ret	 0
?Init@CPetZt@@QAEXXZ ENDP				; CPetZt::Init
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Read@CPetZt@@QAEXPAD@Z				; CPetZt::Read
EXTRN	_fclose:PROC
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@CPetZt@@QAEXPAD@Z
_TEXT	SEGMENT
_iMaxType$ = -4						; size = 4
_filename$ = 8						; size = 4
?Read@CPetZt@@QAEXPAD@Z PROC				; CPetZt::Read, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 58   : 	SMDFile = fopen(filename, "r");

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _filename$[ebp]
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000e	53		 push	 ebx
  0000f	8b f9		 mov	 edi, ecx
  00011	e8 00 00 00 00	 call	 _fopen
  00016	83 c4 08	 add	 esp, 8
  00019	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 59   : 
; 60   : 	if(SMDFile == NULL)

  0001e	85 c0		 test	 eax, eax
  00020	75 22		 jne	 SHORT $LN23@Read

; 61   : 	{
; 62   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), filename);

  00022	53		 push	 ebx
  00023	68 c6 01 00 00	 push	 454			; 000001c6H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5b		 pop	 ebx

; 166  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN23@Read:
  00044	56		 push	 esi

; 63   : 		return;
; 64   : 	}
; 65   : 
; 66   : 	SMDToken Token;
; 67   : 
; 68   : 	int iType = -1;
; 69   : 	int iMaxType = 1;

  00045	be 01 00 00 00	 mov	 esi, 1

; 70   : 
; 71   : 	if(g_ZtLicense.CheckUser(eZtUB::SILVER1) || g_ZtLicense.CheckUser(eZtUB::SILVER2))

  0004a	6a 07		 push	 7
  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00051	89 75 fc	 mov	 DWORD PTR _iMaxType$[ebp], esi
  00054	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00059	84 c0		 test	 al, al
  0005b	75 10		 jne	 SHORT $LN21@Read
  0005d	6a 08		 push	 8
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00064	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00069	84 c0		 test	 al, al
  0006b	74 07		 je	 SHORT $LN50@Read
$LN21@Read:

; 72   : 	{
; 73   : 		iMaxType = 2;

  0006d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _iMaxType$[ebp], 2
$LN50@Read:

; 74   : 	}
; 75   : 
; 76   : 	while(true)
; 77   : 	{
; 78   : 		Token = GetToken();

  00074	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 
; 80   :         if(Token == END)

  00079	83 f8 02	 cmp	 eax, 2
  0007c	0f 84 d4 01 00
	00		 je	 $LN35@Read
$LL20@Read:

; 81   : 		{
; 82   :             break;
; 83   : 		}
; 84   : 
; 85   : 		iType = (int)TokenNumber;

  00082	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00088	e8 00 00 00 00	 call	 __ftol2_sse
  0008d	8b d8		 mov	 ebx, eax

; 86   : 
; 87   : 		if(iType < 0 || iType > iMaxType)

  0008f	85 db		 test	 ebx, ebx
  00091	0f 88 bc 01 00
	00		 js	 $LN51@Read
  00097	3b 5d fc	 cmp	 ebx, DWORD PTR _iMaxType$[ebp]
  0009a	0f 8f b3 01 00
	00		 jg	 $LN51@Read
$LL15@Read:

; 88   : 		{
; 89   : 			break;
; 90   : 		}
; 91   : 
; 92   : 		while(true)
; 93   : 		{
; 94   : 			if(iType == 0)

  000a0	85 db		 test	 ebx, ebx
  000a2	75 40		 jne	 SHORT $LN13@Read

; 95   : 			{
; 96   : 				Token = GetToken();

  000a4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 
; 98   : 				if(!strcmp("end", TokenString))

  000a9	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000ae	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL38@Read:
  000b3	8a 10		 mov	 dl, BYTE PTR [eax]
  000b5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000b7	75 1a		 jne	 SHORT $LN39@Read
  000b9	84 d2		 test	 dl, dl
  000bb	74 12		 je	 SHORT $LN40@Read
  000bd	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000c0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c3	75 0e		 jne	 SHORT $LN39@Read
  000c5	83 c0 02	 add	 eax, 2
  000c8	83 c1 02	 add	 ecx, 2
  000cb	84 d2		 test	 dl, dl
  000cd	75 e4		 jne	 SHORT $LL38@Read
$LN40@Read:
  000cf	33 c0		 xor	 eax, eax
  000d1	eb 05		 jmp	 SHORT $LN41@Read
$LN39@Read:
  000d3	1b c0		 sbb	 eax, eax
  000d5	83 d8 ff	 sbb	 eax, -1
$LN41@Read:
  000d8	85 c0		 test	 eax, eax
  000da	0f 84 65 01 00
	00		 je	 $LN30@Read

; 99   : 				{
; 100  : 					break;
; 101  : 				}
; 102  : 
; 103  : 				this->m_Enable = (int)1;

  000e0	89 37		 mov	 DWORD PTR [edi], esi
  000e2	eb bc		 jmp	 SHORT $LL15@Read
$LN13@Read:

; 104  : 			}
; 105  : 			else if(iType == 1)

  000e4	3b de		 cmp	 ebx, esi
  000e6	0f 85 d2 00 00
	00		 jne	 $LN10@Read

; 106  : 			{
; 107  : 				Token = GetToken();

  000ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 
; 109  : 				if(!strcmp("end", TokenString))

  000f1	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000f6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000fb	eb 03 8d 49 00	 npad	 5
$LL42@Read:
  00100	8a 10		 mov	 dl, BYTE PTR [eax]
  00102	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00104	75 1a		 jne	 SHORT $LN43@Read
  00106	84 d2		 test	 dl, dl
  00108	74 12		 je	 SHORT $LN44@Read
  0010a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0010d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00110	75 0e		 jne	 SHORT $LN43@Read
  00112	83 c0 02	 add	 eax, 2
  00115	83 c1 02	 add	 ecx, 2
  00118	84 d2		 test	 dl, dl
  0011a	75 e4		 jne	 SHORT $LL42@Read
$LN44@Read:
  0011c	33 c0		 xor	 eax, eax
  0011e	eb 05		 jmp	 SHORT $LN45@Read
$LN43@Read:
  00120	1b c0		 sbb	 eax, eax
  00122	83 d8 ff	 sbb	 eax, -1
$LN45@Read:
  00125	85 c0		 test	 eax, eax
  00127	0f 84 18 01 00
	00		 je	 $LN30@Read

; 110  : 				{
; 111  : 					break;
; 112  : 				}
; 113  : 
; 114  : 				if(this->m_PetCount >= MAX_PETZT_COUNT)

  0012d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00130	83 f8 64	 cmp	 eax, 100		; 00000064H
  00133	0f 8d 0c 01 00
	00		 jge	 $LN30@Read

; 115  : 				{
; 116  : 					break;
; 117  : 				}
; 118  : 
; 119  : 				this->m_Data[this->m_PetCount].Active = true;
; 120  : 
; 121  : 				this->m_Data[this->m_PetCount].ItemType = TokenNumber;

  00139	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0013f	6b c0 34	 imul	 eax, 52			; 00000034H
  00142	89 74 38 0c	 mov	 DWORD PTR [eax+edi+12], esi
  00146	e8 00 00 00 00	 call	 __ftol2_sse
  0014b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0014e	6b c9 34	 imul	 ecx, 52			; 00000034H
  00151	89 44 39 10	 mov	 DWORD PTR [ecx+edi+16], eax

; 122  : 
; 123  : 				Token = GetToken();

  00155	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 				this->m_Data[this->m_PetCount].ItemIndex = TokenNumber;

  0015a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00160	e8 00 00 00 00	 call	 __ftol2_sse
  00165	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00168	6b d2 34	 imul	 edx, 52			; 00000034H
  0016b	89 44 3a 14	 mov	 DWORD PTR [edx+edi+20], eax
  0016f	33 f6		 xor	 esi, esi
$LL7@Read:

; 125  : 
; 126  : 				for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 127  : 				{
; 128  : 					Token = GetToken();

  00171	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 129  : 					this->m_Data[this->m_PetCount].Option[i].Type = TokenNumber;

  00176	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0017c	e8 00 00 00 00	 call	 __ftol2_sse
  00181	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00184	6b c9 34	 imul	 ecx, 52			; 00000034H
  00187	03 ce		 add	 ecx, esi
  00189	89 44 39 18	 mov	 DWORD PTR [ecx+edi+24], eax

; 130  : 
; 131  : 					Token = GetToken();

  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 					this->m_Data[this->m_PetCount].Option[i].Value = TokenNumber;

  00192	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00198	e8 00 00 00 00	 call	 __ftol2_sse
  0019d	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  001a0	6b d2 34	 imul	 edx, 52			; 00000034H
  001a3	03 d6		 add	 edx, esi
  001a5	83 c6 08	 add	 esi, 8
  001a8	89 44 3a 1c	 mov	 DWORD PTR [edx+edi+28], eax
  001ac	83 fe 28	 cmp	 esi, 40			; 00000028H
  001af	7c c0		 jl	 SHORT $LL7@Read

; 133  : 				}
; 134  : 
; 135  : 				this->m_PetCount++;

  001b1	ff 47 04	 inc	 DWORD PTR [edi+4]
  001b4	be 01 00 00 00	 mov	 esi, 1
  001b9	e9 e2 fe ff ff	 jmp	 $LL15@Read
$LN10@Read:

; 136  : 			}
; 137  : 			else if(iType == 2)

  001be	83 fb 02	 cmp	 ebx, 2
  001c1	0f 85 d9 fe ff
	ff		 jne	 $LL15@Read

; 138  : 			{
; 139  : 				Token = GetToken();

  001c7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 
; 141  : 				if(!strcmp("end", TokenString))

  001cc	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001d1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL46@Read:
  001d6	8a 10		 mov	 dl, BYTE PTR [eax]
  001d8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001da	75 1a		 jne	 SHORT $LN47@Read
  001dc	84 d2		 test	 dl, dl
  001de	74 12		 je	 SHORT $LN48@Read
  001e0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001e3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001e6	75 0e		 jne	 SHORT $LN47@Read
  001e8	83 c0 02	 add	 eax, 2
  001eb	83 c1 02	 add	 ecx, 2
  001ee	84 d2		 test	 dl, dl
  001f0	75 e4		 jne	 SHORT $LL46@Read
$LN48@Read:
  001f2	33 c0		 xor	 eax, eax
  001f4	eb 05		 jmp	 SHORT $LN49@Read
$LN47@Read:
  001f6	1b c0		 sbb	 eax, eax
  001f8	83 d8 ff	 sbb	 eax, -1
$LN49@Read:
  001fb	85 c0		 test	 eax, eax
  001fd	74 46		 je	 SHORT $LN30@Read

; 142  : 				{
; 143  : 					break;
; 144  : 				}
; 145  : 
; 146  : 				if(this->m_ImmortalCount >= MAX_PETZT_COUNT)

  001ff	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00202	83 f8 64	 cmp	 eax, 100		; 00000064H
  00205	7d 3e		 jge	 SHORT $LN30@Read

; 147  : 				{
; 148  : 					break;
; 149  : 				}
; 150  : 
; 151  : 				this->m_Data[this->m_ImmortalCount].Active = true;
; 152  : 
; 153  : 				this->m_Data[this->m_ImmortalCount].ItemType = TokenNumber;

  00207	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0020d	6b c0 34	 imul	 eax, 52			; 00000034H
  00210	89 74 38 0c	 mov	 DWORD PTR [eax+edi+12], esi
  00214	e8 00 00 00 00	 call	 __ftol2_sse
  00219	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0021c	6b c9 34	 imul	 ecx, 52			; 00000034H
  0021f	89 44 39 10	 mov	 DWORD PTR [ecx+edi+16], eax

; 154  : 
; 155  : 				Token = GetToken();

  00223	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 156  : 				this->m_Data[this->m_ImmortalCount].ItemIndex = TokenNumber;

  00228	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022e	e8 00 00 00 00	 call	 __ftol2_sse
  00233	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00236	6b d2 34	 imul	 edx, 52			; 00000034H
  00239	89 44 3a 14	 mov	 DWORD PTR [edx+edi+20], eax

; 157  : 
; 158  : 				this->m_ImmortalCount++;

  0023d	01 77 08	 add	 DWORD PTR [edi+8], esi

; 159  : 			}
; 160  : 		}

  00240	e9 5b fe ff ff	 jmp	 $LL15@Read
$LN30@Read:

; 74   : 	}
; 75   : 
; 76   : 	while(true)
; 77   : 	{
; 78   : 		Token = GetToken();

  00245	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 
; 80   :         if(Token == END)

  0024a	83 f8 02	 cmp	 eax, 2
  0024d	0f 85 2f fe ff
	ff		 jne	 $LL20@Read
$LN51@Read:
  00253	8b 5d 08	 mov	 ebx, DWORD PTR _filename$[ebp]
$LN35@Read:

; 161  : 	}
; 162  : 
; 163  : 	fclose(SMDFile);

  00256	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 _fclose

; 164  : 
; 165  : 	LogAdd("%s file load!", filename);

  00261	53		 push	 ebx
  00262	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0026d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00270	5e		 pop	 esi
  00271	5f		 pop	 edi
  00272	5b		 pop	 ebx

; 166  : }

  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c2 04 00	 ret	 4
?Read@CPetZt@@QAEXPAD@Z ENDP				; CPetZt::Read
_TEXT	ENDS
PUBLIC	?IsPet@CPetZt@@QAE_NH@Z				; CPetZt::IsPet
; Function compile flags: /Ogtp
;	COMDAT ?IsPet@CPetZt@@QAE_NH@Z
_TEXT	SEGMENT
_ItemID$ = 8						; size = 4
?IsPet@CPetZt@@QAE_NH@Z PROC				; CPetZt::IsPet, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 	if(!this->m_Enable)

  00003	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00006	75 06		 jne	 SHORT $LN5@IsPet

; 171  : 	{
; 172  : 		return false;

  00008	32 c0		 xor	 al, al

; 184  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN5@IsPet:
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	56		 push	 esi

; 173  : 	}	
; 174  : 
; 175  : 	for(int i = 0; i < this->m_PetCount; i++)

  00012	33 c0		 xor	 eax, eax
  00014	57		 push	 edi
  00015	85 d2		 test	 edx, edx
  00017	7e 1b		 jle	 SHORT $LN2@IsPet
  00019	8b 75 08	 mov	 esi, DWORD PTR _ItemID$[ebp]
  0001c	83 c1 14	 add	 ecx, 20			; 00000014H
  0001f	90		 npad	 1
$LL4@IsPet:

; 176  : 	{
; 177  : 		if(ITEMGET(this->m_Data[i].ItemType, this->m_Data[i].ItemIndex) == ItemID)

  00020	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  00023	c1 e7 09	 shl	 edi, 9
  00026	03 39		 add	 edi, DWORD PTR [ecx]
  00028	3b fe		 cmp	 edi, esi
  0002a	74 10		 je	 SHORT $LN9@IsPet

; 173  : 	}	
; 174  : 
; 175  : 	for(int i = 0; i < this->m_PetCount; i++)

  0002c	40		 inc	 eax
  0002d	83 c1 34	 add	 ecx, 52			; 00000034H
  00030	3b c2		 cmp	 eax, edx
  00032	7c ec		 jl	 SHORT $LL4@IsPet
$LN2@IsPet:
  00034	5f		 pop	 edi

; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return false;

  00035	32 c0		 xor	 al, al
  00037	5e		 pop	 esi

; 184  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN9@IsPet:
  0003c	5f		 pop	 edi

; 178  : 		{
; 179  : 			return true;

  0003d	b0 01		 mov	 al, 1
  0003f	5e		 pop	 esi

; 184  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?IsPet@CPetZt@@QAE_NH@Z ENDP				; CPetZt::IsPet
_TEXT	ENDS
PUBLIC	?IsPetImmortal@CPetZt@@QAE_NH@Z			; CPetZt::IsPetImmortal
; Function compile flags: /Ogtp
;	COMDAT ?IsPetImmortal@CPetZt@@QAE_NH@Z
_TEXT	SEGMENT
_ItemID$ = 8						; size = 4
?IsPetImmortal@CPetZt@@QAE_NH@Z PROC			; CPetZt::IsPetImmortal, COMDAT
; _this$ = ecx

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : 	if(!this->m_Enable)

  00003	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00006	75 06		 jne	 SHORT $LN6@IsPetImmor

; 189  : 	{
; 190  : 		return false;

  00008	32 c0		 xor	 al, al

; 205  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN6@IsPetImmor:
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 191  : 	}	
; 192  : 
; 193  : 	for(int i = 0; i < this->m_ImmortalCount; i++)

  00013	33 c0		 xor	 eax, eax
  00015	57		 push	 edi
  00016	85 f6		 test	 esi, esi
  00018	7e 28		 jle	 SHORT $LN3@IsPetImmor
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _ItemID$[ebp]
  0001d	8d 51 14	 lea	 edx, DWORD PTR [ecx+20]
  00020	81 c1 5c 14 00
	00		 add	 ecx, 5212		; 0000145cH
$LL12@IsPetImmor:

; 194  : 	{
; 195  : 		if(this->m_Immoirtal[i].Active)

  00026	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00029	74 0c		 je	 SHORT $LN4@IsPetImmor

; 196  : 		{
; 197  : 			if(ITEMGET(this->m_Data[i].ItemType, this->m_Data[i].ItemIndex) == ItemID)

  0002b	8b 5a fc	 mov	 ebx, DWORD PTR [edx-4]
  0002e	c1 e3 09	 shl	 ebx, 9
  00031	03 1a		 add	 ebx, DWORD PTR [edx]
  00033	3b df		 cmp	 ebx, edi
  00035	74 14		 je	 SHORT $LN10@IsPetImmor
$LN4@IsPetImmor:

; 191  : 	}	
; 192  : 
; 193  : 	for(int i = 0; i < this->m_ImmortalCount; i++)

  00037	40		 inc	 eax
  00038	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003b	83 c2 34	 add	 edx, 52			; 00000034H
  0003e	3b c6		 cmp	 eax, esi
  00040	7c e4		 jl	 SHORT $LL12@IsPetImmor
$LN3@IsPetImmor:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 200  : 			}
; 201  : 		}
; 202  : 	}
; 203  : 
; 204  : 	return false;

  00044	32 c0		 xor	 al, al
  00046	5b		 pop	 ebx

; 205  : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN10@IsPetImmor:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 198  : 			{
; 199  : 				return true;

  0004d	b0 01		 mov	 al, 1
  0004f	5b		 pop	 ebx

; 205  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?IsPetImmortal@CPetZt@@QAE_NH@Z ENDP			; CPetZt::IsPetImmortal
_TEXT	ENDS
PUBLIC	?GetPetData@CPetZt@@QAEPAUPETZT_DATA@@H@Z	; CPetZt::GetPetData
; Function compile flags: /Ogtp
;	COMDAT ?GetPetData@CPetZt@@QAEPAUPETZT_DATA@@H@Z
_TEXT	SEGMENT
_ItemID$ = 8						; size = 4
?GetPetData@CPetZt@@QAEPAUPETZT_DATA@@H@Z PROC		; CPetZt::GetPetData, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 209  : 	if(!this->m_Enable)
; 210  : 	{
; 211  : 		return false;

  00003	33 c0		 xor	 eax, eax
  00005	39 01		 cmp	 DWORD PTR [ecx], eax
  00007	74 30		 je	 SHORT $LN6@GetPetData

; 212  : 	}	
; 213  : 
; 214  : 	for(int i = 0; i < this->m_PetCount; i++)

  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000e	57		 push	 edi
  0000f	85 f6		 test	 esi, esi
  00011	7e 21		 jle	 SHORT $LN2@GetPetData
  00013	8b 7d 08	 mov	 edi, DWORD PTR _ItemID$[ebp]
  00016	8d 51 14	 lea	 edx, DWORD PTR [ecx+20]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL4@GetPetData:

; 215  : 	{
; 216  : 		if(ITEMGET(this->m_Data[i].ItemType, this->m_Data[i].ItemIndex) == ItemID)

  00020	8b 5a fc	 mov	 ebx, DWORD PTR [edx-4]
  00023	c1 e3 09	 shl	 ebx, 9
  00026	03 1a		 add	 ebx, DWORD PTR [edx]
  00028	3b df		 cmp	 ebx, edi
  0002a	74 11		 je	 SHORT $LN9@GetPetData

; 212  : 	}	
; 213  : 
; 214  : 	for(int i = 0; i < this->m_PetCount; i++)

  0002c	40		 inc	 eax
  0002d	83 c2 34	 add	 edx, 52			; 00000034H
  00030	3b c6		 cmp	 eax, esi
  00032	7c ec		 jl	 SHORT $LL4@GetPetData
$LN2@GetPetData:
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 219  : 		}
; 220  : 	}
; 221  : 
; 222  : 	return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	5b		 pop	 ebx
$LN6@GetPetData:

; 223  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN9@GetPetData:

; 217  : 		{
; 218  : 			return &this->m_Data[i];

  0003d	6b c0 34	 imul	 eax, 52			; 00000034H
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	8d 44 08 0c	 lea	 eax, DWORD PTR [eax+ecx+12]
  00046	5b		 pop	 ebx

; 223  : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?GetPetData@CPetZt@@QAEPAUPETZT_DATA@@H@Z ENDP		; CPetZt::GetPetData
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?PetLife@CPetZt@@QAE_NH@Z			; CPetZt::PetLife
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PetLife@CPetZt@@QAE_NH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?PetLife@CPetZt@@QAE_NH@Z PROC				; CPetZt::PetLife, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 227  : 	if(!this->m_Enable)

  00006	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00009	75 07		 jne	 SHORT $LN5@PetLife
$LN10@PetLife:

; 228  : 	{
; 229  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5f		 pop	 edi

; 257  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN5@PetLife:

; 230  : 	}	
; 231  : 
; 232  : 	if(!OBJMAX_RANGE(aIndex))

  00012	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00015	85 c0		 test	 eax, eax
  00017	78 f2		 js	 SHORT $LN10@PetLife
  00019	33 c9		 xor	 ecx, ecx
  0001b	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00020	0f 9e c1	 setle	 cl
  00023	85 c9		 test	 ecx, ecx

; 233  : 	{
; 234  : 		return false;

  00025	74 e4		 je	 SHORT $LN10@PetLife

; 235  : 	}
; 236  : 
; 237  : 	LPOBJ lpObj = &gObj[aIndex];

  00027	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	56		 push	 esi
  00034	8b f0		 mov	 esi, eax

; 238  : 
; 239  : 	if(lpObj->Type != OBJ_USER)

  00036	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 240  : 	{
; 241  : 		return false;

  0003b	75 45		 jne	 SHORT $LN1@PetLife

; 242  : 	}
; 243  : 
; 244  : 	if(!lpObj->pInventory[8].IsItem())

  0003d	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00043	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  00049	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004e	85 c0		 test	 eax, eax

; 245  : 	{
; 246  : 		return false;

  00050	74 30		 je	 SHORT $LN1@PetLife

; 247  : 	}
; 248  : 
; 249  : 	CItem * Item = &lpObj->pInventory[8];

  00052	8b b6 24 0e 00
	00		 mov	 esi, DWORD PTR [esi+3620]

; 250  : 
; 251  : 	if(this->IsPet(Item->m_Type) && Item->m_Durability > 0.0f)

  00058	0f bf 86 a6 06
	00 00		 movsx	 eax, WORD PTR [esi+1702]
  0005f	50		 push	 eax
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?IsPet@CPetZt@@QAE_NH@Z	; CPetZt::IsPet
  00067	84 c0		 test	 al, al
  00069	74 17		 je	 SHORT $LN1@PetLife
  0006b	d9 ee		 fldz
  0006d	d8 9e c4 06 00
	00		 fcomp	 DWORD PTR [esi+1732]
  00073	df e0		 fnstsw	 ax
  00075	f6 c4 05	 test	 ah, 5
  00078	7a 08		 jp	 SHORT $LN1@PetLife

; 252  : 	{
; 253  : 		return true;

  0007a	5e		 pop	 esi
  0007b	b0 01		 mov	 al, 1
  0007d	5f		 pop	 edi

; 257  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN1@PetLife:
  00082	5e		 pop	 esi

; 254  : 	}
; 255  : 
; 256  : 	return false;

  00083	32 c0		 xor	 al, al
  00085	5f		 pop	 edi

; 257  : }

  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?PetLife@CPetZt@@QAE_NH@Z ENDP				; CPetZt::PetLife
_TEXT	ENDS
PUBLIC	?Calc@CPetZt@@QAEXH@Z				; CPetZt::Calc
; Function compile flags: /Ogtp
;	COMDAT ?Calc@CPetZt@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?Calc@CPetZt@@QAEXH@Z PROC				; CPetZt::Calc, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 261  : 	if(!this->m_Enable)

  00006	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00009	0f 84 0c 01 00
	00		 je	 $LN14@Calc

; 262  : 	{
; 263  : 		return;
; 264  : 	}	
; 265  : 
; 266  : 	if(!OBJMAX_RANGE(aIndex))

  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00013	85 f6		 test	 esi, esi
  00015	0f 88 ff 00 00
	00		 js	 $LN27@Calc
  0001b	33 c0		 xor	 eax, eax
  0001d	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	0f 84 ec 00 00
	00		 je	 $LN27@Calc

; 267  : 	{
; 268  : 		return;
; 269  : 	}
; 270  : 
; 271  : 	if(!this->PetLife(aIndex))

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?PetLife@CPetZt@@QAE_NH@Z ; CPetZt::PetLife
  00034	84 c0		 test	 al, al
  00036	0f 84 de 00 00
	00		 je	 $LN27@Calc

; 272  : 	{
; 273  : 		return;
; 274  : 	}
; 275  : 
; 276  : 	LPOBJ lpObj = &gObj[aIndex];

  0003c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00042	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 277  : 
; 278  : 	PETZT_DATA* pPetData = this->GetPetData(lpObj->pInventory[8].m_Type);

  00048	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  0004e	0f bf 88 a6 06
	00 00		 movsx	 ecx, WORD PTR [eax+1702]
  00055	51		 push	 ecx
  00056	8b cf		 mov	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?GetPetData@CPetZt@@QAEPAUPETZT_DATA@@H@Z ; CPetZt::GetPetData

; 279  : 
; 280  : 	if(!pPetData)

  0005d	85 c0		 test	 eax, eax
  0005f	0f 84 b5 00 00
	00		 je	 $LN27@Calc

; 281  : 	{
; 282  : 		return;
; 283  : 	}
; 284  : 
; 285  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)

  00065	83 c0 10	 add	 eax, 16			; 00000010H
  00068	ba 05 00 00 00	 mov	 edx, 5
  0006d	8d 49 00	 npad	 3
$LL16@Calc:

; 286  : 	{
; 287  : 		switch(pPetData->Option[i].Type)

  00070	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00073	49		 dec	 ecx
  00074	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00077	0f 87 93 00 00
	00		 ja	 $LN15@Calc
  0007d	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN28@Calc[ecx*4]
$LN11@Calc:

; 288  : 		{
; 289  : 		case ePET_DAMAGE:
; 290  : 			lpObj->m_AttackDamageMinRight += pPetData->Option[i].Value;

  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	01 8e 84 04 00
	00		 add	 DWORD PTR [esi+1156], ecx

; 291  : 			lpObj->m_AttackDamageMaxRight += pPetData->Option[i].Value;

  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	01 8e 80 04 00
	00		 add	 DWORD PTR [esi+1152], ecx

; 292  : 			lpObj->m_AttackDamageMinLeft += pPetData->Option[i].Value;

  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	01 8e 7c 04 00
	00		 add	 DWORD PTR [esi+1148], ecx

; 293  : 			lpObj->m_AttackDamageMaxLeft += pPetData->Option[i].Value;

  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	01 8e 78 04 00
	00		 add	 DWORD PTR [esi+1144], ecx

; 294  : 			break;

  000a4	eb 6a		 jmp	 SHORT $LN15@Calc
$LN10@Calc:

; 295  : 		case ePET_DEFENCE:
; 296  : 			lpObj->m_Defense += pPetData->Option[i].Value;

  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	01 8e 94 04 00
	00		 add	 DWORD PTR [esi+1172], ecx

; 297  : 			break;

  000ae	eb 60		 jmp	 SHORT $LN15@Calc
$LN9@Calc:

; 298  : 		case ePET_IGNOREDEFENCE:
; 299  : 			lpObj->SetOpIgnoreDefense += pPetData->Option[i].Value;

  000b0	8a 08		 mov	 cl, BYTE PTR [eax]
  000b2	00 8e 3e 11 00
	00		 add	 BYTE PTR [esi+4414], cl

; 300  : 			break;

  000b8	eb 56		 jmp	 SHORT $LN15@Calc
$LN8@Calc:

; 301  : 		case ePET_CRITICALDAMAGE:
; 302  : 			lpObj->m_CriticalDamage += pPetData->Option[i].Value;

  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	01 8e bc 04 00
	00		 add	 DWORD PTR [esi+1212], ecx

; 303  : 			break;

  000c2	eb 4c		 jmp	 SHORT $LN15@Calc
$LN7@Calc:

; 304  : 		case ePET_EXELLENTDAMAGEe:
; 305  : 			lpObj->m_ExcelentDamage += pPetData->Option[i].Value;

  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	01 8e c0 04 00
	00		 add	 DWORD PTR [esi+1216], ecx

; 306  : 			break;

  000cc	eb 42		 jmp	 SHORT $LN15@Calc
$LN6@Calc:

; 307  : 		case ePET_DOUBLEDAMAGE:
; 308  : 			lpObj->SetOpDoubleDamage += pPetData->Option[i].Value;

  000ce	8a 08		 mov	 cl, BYTE PTR [eax]
  000d0	00 8e 3f 11 00
	00		 add	 BYTE PTR [esi+4415], cl

; 309  : 			break;

  000d6	eb 38		 jmp	 SHORT $LN15@Calc
$LN5@Calc:

; 310  : 		case ePET_DECRISEDAMAGE:
; 311  : 			lpObj->DamageMinus += pPetData->Option[i].Value;

  000d8	8a 08		 mov	 cl, BYTE PTR [eax]
  000da	00 8e 70 01 00
	00		 add	 BYTE PTR [esi+368], cl

; 312  : 			break;

  000e0	eb 2e		 jmp	 SHORT $LN15@Calc
$LN4@Calc:

; 313  : 		case ePET_REFLECTDAMAGE:
; 314  : 			lpObj->DamageReflect += pPetData->Option[i].Value;

  000e2	8a 08		 mov	 cl, BYTE PTR [eax]
  000e4	00 8e 71 01 00
	00		 add	 BYTE PTR [esi+369], cl

; 315  : 			break;

  000ea	eb 24		 jmp	 SHORT $LN15@Calc
$LN3@Calc:

; 316  : 		case ePET_SD:
; 317  : 			lpObj->iAddShield += pPetData->Option[i].Value;

  000ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ee	01 8e 5c 01 00
	00		 add	 DWORD PTR [esi+348], ecx

; 318  : 			break;

  000f4	eb 1a		 jmp	 SHORT $LN15@Calc
$LN2@Calc:

; 319  : 		case ePET_LIFE:
; 320  : 			lpObj->AddLife += pPetData->Option[i].Value;

  000f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f8	01 8e 4c 01 00
	00		 add	 DWORD PTR [esi+332], ecx

; 321  : 			break;

  000fe	eb 10		 jmp	 SHORT $LN15@Calc
$LN1@Calc:

; 322  : 		case ePET_MAGICDAMAGE:
; 323  : 			lpObj->m_MagicDamageMin += pPetData->Option[i].Value;

  00100	8b 08		 mov	 ecx, DWORD PTR [eax]
  00102	01 8e 68 04 00
	00		 add	 DWORD PTR [esi+1128], ecx

; 324  : 			lpObj->m_MagicDamageMax += pPetData->Option[i].Value;

  00108	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010a	01 8e 6c 04 00
	00		 add	 DWORD PTR [esi+1132], ecx
$LN15@Calc:

; 281  : 	{
; 282  : 		return;
; 283  : 	}
; 284  : 
; 285  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)

  00110	83 c0 08	 add	 eax, 8
  00113	4a		 dec	 edx
  00114	0f 85 56 ff ff
	ff		 jne	 $LL16@Calc
$LN27@Calc:
  0011a	5e		 pop	 esi
$LN14@Calc:
  0011b	5f		 pop	 edi

; 325  : 			break;
; 326  : 		}
; 327  : 	}
; 328  : }

  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
$LN28@Calc:
  00120	00 00 00 00	 DD	 $LN11@Calc
  00124	00 00 00 00	 DD	 $LN10@Calc
  00128	00 00 00 00	 DD	 $LN9@Calc
  0012c	00 00 00 00	 DD	 $LN8@Calc
  00130	00 00 00 00	 DD	 $LN7@Calc
  00134	00 00 00 00	 DD	 $LN6@Calc
  00138	00 00 00 00	 DD	 $LN5@Calc
  0013c	00 00 00 00	 DD	 $LN4@Calc
  00140	00 00 00 00	 DD	 $LN3@Calc
  00144	00 00 00 00	 DD	 $LN2@Calc
  00148	00 00 00 00	 DD	 $LN1@Calc
?Calc@CPetZt@@QAEXH@Z ENDP				; CPetZt::Calc
_TEXT	ENDS
PUBLIC	?Exp@CPetZt@@QAEXHAA_J@Z			; CPetZt::Exp
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Exp@CPetZt@@QAEXHAA_J@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_exp$ = 12						; size = 4
?Exp@CPetZt@@QAEXHAA_J@Z PROC				; CPetZt::Exp, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 332  : 	if(!this->m_Enable)

  00006	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00009	0f 84 3f 01 00
	00		 je	 $LN27@Exp

; 333  : 	{
; 334  : 		return;
; 335  : 	}	
; 336  : 
; 337  : 	if(!OBJMAX_RANGE(aIndex))

  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00013	85 f6		 test	 esi, esi
  00015	0f 88 32 01 00
	00		 js	 $LN29@Exp
  0001b	33 c0		 xor	 eax, eax
  0001d	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	0f 84 1f 01 00
	00		 je	 $LN29@Exp

; 338  : 	{
; 339  : 		return;
; 340  : 	}
; 341  : 
; 342  : 	if(!this->PetLife(aIndex))

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?PetLife@CPetZt@@QAE_NH@Z ; CPetZt::PetLife
  00034	84 c0		 test	 al, al
  00036	0f 84 11 01 00
	00		 je	 $LN29@Exp

; 343  : 	{
; 344  : 		return;
; 345  : 	}
; 346  : 
; 347  : 	LPOBJ lpObj = &gObj[aIndex];
; 348  : 
; 349  : 	PETZT_DATA* pPetData = this->GetPetData(lpObj->pInventory[8].m_Type);

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00047	8b 8c 06 24 0e
	00 00		 mov	 ecx, DWORD PTR [esi+eax+3620]
  0004e	0f bf 91 a6 06
	00 00		 movsx	 edx, WORD PTR [ecx+1702]
  00055	52		 push	 edx
  00056	8b cf		 mov	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?GetPetData@CPetZt@@QAEPAUPETZT_DATA@@H@Z ; CPetZt::GetPetData
  0005d	8b f8		 mov	 edi, eax

; 350  : 
; 351  : 	if(!pPetData)

  0005f	85 ff		 test	 edi, edi
  00061	0f 84 e6 00 00
	00		 je	 $LN29@Exp

; 352  : 	{
; 353  : 		return;
; 354  : 	}
; 355  : 
; 356  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 357  : 	{
; 358  : 		switch(pPetData->Option[i].Type)

  00067	83 7f 0c 0c	 cmp	 DWORD PTR [edi+12], 12	; 0000000cH
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _exp$[ebp]
  0006e	53		 push	 ebx
  0006f	75 27		 jne	 SHORT $LN5@Exp

; 359  : 		{
; 360  : 		case ePET_EXPERIENCE:
; 361  : 			exp += ( exp * pPetData->Option[i].Value ) / 100;

  00071	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00074	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00077	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00079	51		 push	 ecx
  0007a	99		 cdq
  0007b	53		 push	 ebx
  0007c	52		 push	 edx
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 __allmul
  00083	6a 00		 push	 0
  00085	6a 64		 push	 100			; 00000064H
  00087	52		 push	 edx
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 __alldiv
  0008e	03 c3		 add	 eax, ebx
  00090	13 56 04	 adc	 edx, DWORD PTR [esi+4]
  00093	89 06		 mov	 DWORD PTR [esi], eax
  00095	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Exp:

; 352  : 	{
; 353  : 		return;
; 354  : 	}
; 355  : 
; 356  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 357  : 	{
; 358  : 		switch(pPetData->Option[i].Type)

  00098	83 7f 14 0c	 cmp	 DWORD PTR [edi+20], 12	; 0000000cH
  0009c	75 27		 jne	 SHORT $LN21@Exp

; 359  : 		{
; 360  : 		case ePET_EXPERIENCE:
; 361  : 			exp += ( exp * pPetData->Option[i].Value ) / 100;

  0009e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a1	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000a4	8b 1e		 mov	 ebx, DWORD PTR [esi]
  000a6	51		 push	 ecx
  000a7	99		 cdq
  000a8	53		 push	 ebx
  000a9	52		 push	 edx
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 __allmul
  000b0	6a 00		 push	 0
  000b2	6a 64		 push	 100			; 00000064H
  000b4	52		 push	 edx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 __alldiv
  000bb	03 c3		 add	 eax, ebx
  000bd	13 56 04	 adc	 edx, DWORD PTR [esi+4]
  000c0	89 06		 mov	 DWORD PTR [esi], eax
  000c2	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN21@Exp:

; 352  : 	{
; 353  : 		return;
; 354  : 	}
; 355  : 
; 356  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 357  : 	{
; 358  : 		switch(pPetData->Option[i].Type)

  000c5	83 7f 1c 0c	 cmp	 DWORD PTR [edi+28], 12	; 0000000cH
  000c9	75 27		 jne	 SHORT $LN23@Exp

; 359  : 		{
; 360  : 		case ePET_EXPERIENCE:
; 361  : 			exp += ( exp * pPetData->Option[i].Value ) / 100;

  000cb	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ce	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d1	8b 1e		 mov	 ebx, DWORD PTR [esi]
  000d3	51		 push	 ecx
  000d4	99		 cdq
  000d5	53		 push	 ebx
  000d6	52		 push	 edx
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 __allmul
  000dd	6a 00		 push	 0
  000df	6a 64		 push	 100			; 00000064H
  000e1	52		 push	 edx
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 __alldiv
  000e8	03 c3		 add	 eax, ebx
  000ea	13 56 04	 adc	 edx, DWORD PTR [esi+4]
  000ed	89 06		 mov	 DWORD PTR [esi], eax
  000ef	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN23@Exp:

; 352  : 	{
; 353  : 		return;
; 354  : 	}
; 355  : 
; 356  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 357  : 	{
; 358  : 		switch(pPetData->Option[i].Type)

  000f2	83 7f 24 0c	 cmp	 DWORD PTR [edi+36], 12	; 0000000cH
  000f6	75 27		 jne	 SHORT $LN25@Exp

; 359  : 		{
; 360  : 		case ePET_EXPERIENCE:
; 361  : 			exp += ( exp * pPetData->Option[i].Value ) / 100;

  000f8	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000fb	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000fe	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00100	51		 push	 ecx
  00101	99		 cdq
  00102	53		 push	 ebx
  00103	52		 push	 edx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 __allmul
  0010a	6a 00		 push	 0
  0010c	6a 64		 push	 100			; 00000064H
  0010e	52		 push	 edx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 __alldiv
  00115	03 c3		 add	 eax, ebx
  00117	13 56 04	 adc	 edx, DWORD PTR [esi+4]
  0011a	89 06		 mov	 DWORD PTR [esi], eax
  0011c	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN25@Exp:

; 352  : 	{
; 353  : 		return;
; 354  : 	}
; 355  : 
; 356  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 357  : 	{
; 358  : 		switch(pPetData->Option[i].Type)

  0011f	83 7f 2c 0c	 cmp	 DWORD PTR [edi+44], 12	; 0000000cH
  00123	75 27		 jne	 SHORT $LN30@Exp

; 359  : 		{
; 360  : 		case ePET_EXPERIENCE:
; 361  : 			exp += ( exp * pPetData->Option[i].Value ) / 100;

  00125	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00128	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0012b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0012d	51		 push	 ecx
  0012e	99		 cdq
  0012f	53		 push	 ebx
  00130	52		 push	 edx
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 __allmul
  00137	6a 00		 push	 0
  00139	6a 64		 push	 100			; 00000064H
  0013b	52		 push	 edx
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 __alldiv
  00142	03 c3		 add	 eax, ebx
  00144	13 56 04	 adc	 edx, DWORD PTR [esi+4]
  00147	89 06		 mov	 DWORD PTR [esi], eax
  00149	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN30@Exp:
  0014c	5b		 pop	 ebx
$LN29@Exp:
  0014d	5e		 pop	 esi
$LN27@Exp:
  0014e	5f		 pop	 edi

; 362  : 			break;
; 363  : 		}
; 364  : 	}
; 365  : }

  0014f	5d		 pop	 ebp
  00150	c2 08 00	 ret	 8
?Exp@CPetZt@@QAEXHAA_J@Z ENDP				; CPetZt::Exp
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?Zen@CPetZt@@QAEXHAAM@Z				; CPetZt::Zen
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Zen@CPetZt@@QAEXHAAM@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_money$ = 12						; size = 4
?Zen@CPetZt@@QAEXHAAM@Z PROC				; CPetZt::Zen, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 369  : 	if(!this->m_Enable)

  00006	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00009	0f 84 b9 00 00
	00		 je	 $LN27@Zen

; 370  : 	{
; 371  : 		return;
; 372  : 	}	
; 373  : 
; 374  : 	if(!OBJMAX_RANGE(aIndex))

  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00013	85 f6		 test	 esi, esi
  00015	0f 88 ac 00 00
	00		 js	 $LN28@Zen
  0001b	33 c0		 xor	 eax, eax
  0001d	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	0f 84 99 00 00
	00		 je	 $LN28@Zen

; 375  : 	{
; 376  : 		return;
; 377  : 	}
; 378  : 
; 379  : 	if(!this->PetLife(aIndex))

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?PetLife@CPetZt@@QAE_NH@Z ; CPetZt::PetLife
  00034	84 c0		 test	 al, al
  00036	0f 84 8b 00 00
	00		 je	 $LN28@Zen

; 380  : 	{
; 381  : 		return;
; 382  : 	}
; 383  : 
; 384  : 	LPOBJ lpObj = &gObj[aIndex];
; 385  : 
; 386  : 	PETZT_DATA* pPetData = this->GetPetData(lpObj->pInventory[8].m_Type);

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00047	8b 8c 06 24 0e
	00 00		 mov	 ecx, DWORD PTR [esi+eax+3620]
  0004e	0f bf 91 a6 06
	00 00		 movsx	 edx, WORD PTR [ecx+1702]
  00055	52		 push	 edx
  00056	8b cf		 mov	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?GetPetData@CPetZt@@QAEPAUPETZT_DATA@@H@Z ; CPetZt::GetPetData

; 387  : 
; 388  : 	if(!pPetData)

  0005d	85 c0		 test	 eax, eax
  0005f	74 66		 je	 SHORT $LN28@Zen

; 389  : 	{
; 390  : 		return;
; 391  : 	}
; 392  : 
; 393  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 394  : 	{
; 395  : 		switch(pPetData->Option[i].Type)

  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _money$[ebp]
  00064	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  0006a	ba 0d 00 00 00	 mov	 edx, 13			; 0000000dH
  0006f	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  00072	75 0b		 jne	 SHORT $LN5@Zen

; 396  : 		{
; 397  : 		case ePET_ZENMONEY:
; 398  : 			money += ( money * pPetData->Option[i].Value ) / 100;

  00074	db 40 10	 fild	 DWORD PTR [eax+16]
  00077	d8 09		 fmul	 DWORD PTR [ecx]
  00079	d8 f1		 fdiv	 ST(0), ST(1)
  0007b	d8 01		 fadd	 DWORD PTR [ecx]
  0007d	d9 19		 fstp	 DWORD PTR [ecx]
$LN5@Zen:

; 389  : 	{
; 390  : 		return;
; 391  : 	}
; 392  : 
; 393  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 394  : 	{
; 395  : 		switch(pPetData->Option[i].Type)

  0007f	39 50 14	 cmp	 DWORD PTR [eax+20], edx
  00082	75 0b		 jne	 SHORT $LN21@Zen

; 396  : 		{
; 397  : 		case ePET_ZENMONEY:
; 398  : 			money += ( money * pPetData->Option[i].Value ) / 100;

  00084	db 40 18	 fild	 DWORD PTR [eax+24]
  00087	d8 09		 fmul	 DWORD PTR [ecx]
  00089	d8 f1		 fdiv	 ST(0), ST(1)
  0008b	d8 01		 fadd	 DWORD PTR [ecx]
  0008d	d9 19		 fstp	 DWORD PTR [ecx]
$LN21@Zen:

; 389  : 	{
; 390  : 		return;
; 391  : 	}
; 392  : 
; 393  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 394  : 	{
; 395  : 		switch(pPetData->Option[i].Type)

  0008f	39 50 1c	 cmp	 DWORD PTR [eax+28], edx
  00092	75 0b		 jne	 SHORT $LN23@Zen

; 396  : 		{
; 397  : 		case ePET_ZENMONEY:
; 398  : 			money += ( money * pPetData->Option[i].Value ) / 100;

  00094	db 40 20	 fild	 DWORD PTR [eax+32]
  00097	d8 09		 fmul	 DWORD PTR [ecx]
  00099	d8 f1		 fdiv	 ST(0), ST(1)
  0009b	d8 01		 fadd	 DWORD PTR [ecx]
  0009d	d9 19		 fstp	 DWORD PTR [ecx]
$LN23@Zen:

; 389  : 	{
; 390  : 		return;
; 391  : 	}
; 392  : 
; 393  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 394  : 	{
; 395  : 		switch(pPetData->Option[i].Type)

  0009f	39 50 24	 cmp	 DWORD PTR [eax+36], edx
  000a2	75 0b		 jne	 SHORT $LN25@Zen

; 396  : 		{
; 397  : 		case ePET_ZENMONEY:
; 398  : 			money += ( money * pPetData->Option[i].Value ) / 100;

  000a4	db 40 28	 fild	 DWORD PTR [eax+40]
  000a7	d8 09		 fmul	 DWORD PTR [ecx]
  000a9	d8 f1		 fdiv	 ST(0), ST(1)
  000ab	d8 01		 fadd	 DWORD PTR [ecx]
  000ad	d9 19		 fstp	 DWORD PTR [ecx]
$LN25@Zen:

; 389  : 	{
; 390  : 		return;
; 391  : 	}
; 392  : 
; 393  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 394  : 	{
; 395  : 		switch(pPetData->Option[i].Type)

  000af	39 50 2c	 cmp	 DWORD PTR [eax+44], edx
  000b2	75 11		 jne	 SHORT $LN42@Zen

; 396  : 		{
; 397  : 		case ePET_ZENMONEY:
; 398  : 			money += ( money * pPetData->Option[i].Value ) / 100;

  000b4	db 40 30	 fild	 DWORD PTR [eax+48]
  000b7	5e		 pop	 esi
  000b8	5f		 pop	 edi
  000b9	d8 09		 fmul	 DWORD PTR [ecx]
  000bb	de f1		 fdivrp	 ST(1), ST(0)
  000bd	d8 01		 fadd	 DWORD PTR [ecx]
  000bf	d9 19		 fstp	 DWORD PTR [ecx]

; 399  : 			break;
; 400  : 		}
; 401  : 	}
; 402  : }

  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
$LN42@Zen:

; 389  : 	{
; 390  : 		return;
; 391  : 	}
; 392  : 
; 393  : 	for(int i = 0; i < MAX_PETZT_OPTION; i++)
; 394  : 	{
; 395  : 		switch(pPetData->Option[i].Type)

  000c5	dd d8		 fstp	 ST(0)
$LN28@Zen:
  000c7	5e		 pop	 esi
$LN27@Zen:
  000c8	5f		 pop	 edi

; 399  : 			break;
; 400  : 		}
; 401  : 	}
; 402  : }

  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
?Zen@CPetZt@@QAEXHAAM@Z ENDP				; CPetZt::Zen
_TEXT	ENDS
PUBLIC	??0CPetZt@@QAE@XZ				; CPetZt::CPetZt
; Function compile flags: /Ogtp
;	COMDAT ??0CPetZt@@QAE@XZ
_TEXT	SEGMENT
??0CPetZt@@QAE@XZ PROC					; CPetZt::CPetZt, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 14   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@CPetZt@@QAEXXZ	; CPetZt::Init

; 15   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0CPetZt@@QAE@XZ ENDP					; CPetZt::CPetZt
_TEXT	ENDS
PUBLIC	??_C@_0BB@PHCIBDOI@ZtData?2PetZt?4dat?$AA@	; `string'
PUBLIC	?Load@CPetZt@@QAEXXZ				; CPetZt::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BB@PHCIBDOI@ZtData?2PetZt?4dat?$AA@
CONST	SEGMENT
??_C@_0BB@PHCIBDOI@ZtData?2PetZt?4dat?$AA@ DB 'ZtData\PetZt.dat', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CPetZt@@QAEXXZ
_TEXT	SEGMENT
?Load@CPetZt@@QAEXXZ PROC				; CPetZt::Load, COMDAT
; _this$ = ecx

; 49   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 50   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@CPetZt@@QAEXXZ	; CPetZt::Init

; 51   : 	this->Read(gDirPath.GetNewPath("ZtData\\PetZt.dat"));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PHCIBDOI@ZtData?2PetZt?4dat?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Read@CPetZt@@QAEXPAD@Z	; CPetZt::Read
  0001f	5e		 pop	 esi

; 52   : 	
; 53   : }

  00020	c3		 ret	 0
?Load@CPetZt@@QAEXXZ ENDP				; CPetZt::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_PetZt@@YAXXZ
text$yc	SEGMENT
??__Eg_PetZt@@YAXXZ PROC				; `dynamic initializer for 'g_PetZt'', COMDAT

; 10   : CPetZt g_PetZt;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PetZt@@3VCPetZt@@A ; g_PetZt
  00005	e8 00 00 00 00	 call	 ??0CPetZt@@QAE@XZ	; CPetZt::CPetZt
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_PetZt@@YAXXZ ; `dynamic atexit destructor for 'g_PetZt''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_PetZt@@YAXXZ ENDP				; `dynamic initializer for 'g_PetZt''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_PetZt@@YAXXZ
text$yd	SEGMENT
??__Fg_PetZt@@YAXXZ PROC				; `dynamic atexit destructor for 'g_PetZt'', COMDAT
  00000	c3		 ret	 0
??__Fg_PetZt@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_PetZt''
text$yd	ENDS
PUBLIC	?g_PetZt@@3VCPetZt@@A				; g_PetZt
_BSS	SEGMENT
?g_PetZt@@3VCPetZt@@A DB 0190cH DUP (?)			; g_PetZt
_BSS	ENDS
CRT$XCU	SEGMENT
_g_PetZt$initializer$ DD FLAT:??__Eg_PetZt@@YAXXZ
CRT$XCU	ENDS
END
