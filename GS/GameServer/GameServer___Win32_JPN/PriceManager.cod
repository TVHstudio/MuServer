; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\PriceManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?PriceManager@@3VcPriceManager@@A		; PriceManager
_BSS	SEGMENT
?PriceManager@@3VcPriceManager@@A DB 05010H DUP (?)	; PriceManager
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?SellPriceItem@cPriceManager@@QAEXHHAAH@Z	; cPriceManager::SellPriceItem
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\pricemanager.cpp
;	COMDAT ?SellPriceItem@cPriceManager@@QAEXHHAAH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
tv279 = 12						; size = 4
_iPos$ = 12						; size = 4
_money$ = 16						; size = 4
?SellPriceItem@cPriceManager@@QAEXHHAAH@Z PROC		; cPriceManager::SellPriceItem, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 	if(!this->Enable) return;

  00003	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00006	0f 84 8e 00 00
	00		 je	 $LN1@SellPriceI

; 207  : 	LPOBJ lpObj = &gObj[aIndex];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000f	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00015	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001b	53		 push	 ebx

; 208  : 	for(int i=0;i<this->sCount;i++)

  0001c	33 d2		 xor	 edx, edx
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	39 91 08 28 00
	00		 cmp	 DWORD PTR [ecx+10248], edx
  00026	7e 60		 jle	 SHORT $LN12@SellPriceI
  00028	8b 75 0c	 mov	 esi, DWORD PTR _iPos$[ebp]
  0002b	69 f6 d4 00 00
	00		 imul	 esi, 212		; 000000d4H
  00031	03 b0 24 0e 00
	00		 add	 esi, DWORD PTR [eax+3620]
  00037	8d 79 14	 lea	 edi, DWORD PTR [ecx+20]
  0003a	0f bf 5e 06	 movsx	 ebx, WORD PTR [esi+6]

; 244  : 				return;
; 245  : 			}
; 246  : 		}
; 247  : 	}
; 248  : 
; 249  : 	if(this->AllSellNull)

  0003e	89 75 0c	 mov	 DWORD PTR tv279[ebp], esi
$LL14@SellPriceI:

; 209  : 	{
; 210  : 		if ( lpObj->pInventory[iPos].m_Type == ITEMGET(this->SellPrice[i].Type,this->SellPrice[i].Index) &&
; 211  : 			 lpObj->pInventory[iPos].m_Level == this->SellPrice[i].Level )

  00041	8b 77 f4	 mov	 esi, DWORD PTR [edi-12]
  00044	c1 e6 09	 shl	 esi, 9
  00047	03 77 f8	 add	 esi, DWORD PTR [edi-8]
  0004a	3b de		 cmp	 ebx, esi
  0004c	75 2e		 jne	 SHORT $LN13@SellPriceI
  0004e	8b 75 0c	 mov	 esi, DWORD PTR tv279[ebp]
  00051	0f bf 76 08	 movsx	 esi, WORD PTR [esi+8]
  00055	3b 77 fc	 cmp	 esi, DWORD PTR [edi-4]
  00058	75 22		 jne	 SHORT $LN13@SellPriceI

; 212  : 		{
; 213  : 			if(this->SellPrice[i].PriceType == 0)	//Zen

  0005a	8b 37		 mov	 esi, DWORD PTR [edi]
  0005c	85 f6		 test	 esi, esi
  0005e	74 3e		 je	 SHORT $LN19@SellPriceI

; 216  : 				return;
; 217  : 			}
; 218  : 			else if(this->SellPrice[i].PriceType == 1)	//Credits

  00060	83 fe 01	 cmp	 esi, 1
  00063	74 4c		 je	 SHORT $LN20@SellPriceI

; 223  : 				return;
; 224  : 			}
; 225  : 			else if(this->SellPrice[i].PriceType == 2)	//WcoinC

  00065	83 fe 02	 cmp	 esi, 2
  00068	74 76		 je	 SHORT $LN21@SellPriceI

; 231  : 			}
; 232  : 			else if(this->SellPrice[i].PriceType == 3)	//Wcoin

  0006a	83 fe 03	 cmp	 esi, 3
  0006d	0f 84 82 00 00
	00		 je	 $LN22@SellPriceI

; 238  : 			}
; 239  : 			else if(this->SellPrice[i].PriceType == 4)	//Wcoin

  00073	83 fe 04	 cmp	 esi, 4
  00076	0f 84 8e 00 00
	00		 je	 $LN23@SellPriceI
$LN13@SellPriceI:

; 208  : 	for(int i=0;i<this->sCount;i++)

  0007c	42		 inc	 edx
  0007d	83 c7 14	 add	 edi, 20			; 00000014H
  00080	3b 91 08 28 00
	00		 cmp	 edx, DWORD PTR [ecx+10248]
  00086	7c b9		 jl	 SHORT $LL14@SellPriceI
$LN12@SellPriceI:

; 244  : 				return;
; 245  : 			}
; 246  : 		}
; 247  : 	}
; 248  : 
; 249  : 	if(this->AllSellNull)

  00088	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0008c	74 09		 je	 SHORT $LN26@SellPriceI

; 250  : 	{
; 251  : 		money = 0;

  0008e	8b 55 10	 mov	 edx, DWORD PTR _money$[ebp]
  00091	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN26@SellPriceI:
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
$LN1@SellPriceI:

; 252  : 	}
; 253  : }

  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
$LN19@SellPriceI:

; 214  : 			{
; 215  : 				money = this->SellPrice[i].Price;

  0009e	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  000a1	8b 4c 81 18	 mov	 ecx, DWORD PTR [ecx+eax*4+24]
  000a5	8b 55 10	 mov	 edx, DWORD PTR _money$[ebp]
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	89 0a		 mov	 DWORD PTR [edx], ecx
  000ac	5b		 pop	 ebx

; 252  : 	}
; 253  : }

  000ad	5d		 pop	 ebp
  000ae	c2 0c 00	 ret	 12			; 0000000cH
$LN20@SellPriceI:

; 219  : 			{
; 220  : 				lpObj->ZtCred += this->SellPrice[i].Price;

  000b1	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  000b4	db 44 91 18	 fild	 DWORD PTR [ecx+edx*4+24]

; 221  : 				money = 0;
; 222  : 				ZtUserDataSend(aIndex);

  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000bb	51		 push	 ecx
  000bc	d8 80 a8 22 00
	00		 fadd	 DWORD PTR [eax+8872]
  000c2	d9 98 a8 22 00
	00		 fstp	 DWORD PTR [eax+8872]
  000c8	8b 45 10	 mov	 eax, DWORD PTR _money$[ebp]
  000cb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000d1	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  000d6	83 c4 04	 add	 esp, 4
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx

; 252  : 	}
; 253  : }

  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
$LN21@SellPriceI:

; 226  : 			{
; 227  : 				lpObj->GameShop.WCoinC += this->SellPrice[i].Price;

  000e0	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  000e3	db 44 91 18	 fild	 DWORD PTR [ecx+edx*4+24]
  000e7	dc 80 00 23 00
	00		 fadd	 QWORD PTR [eax+8960]
  000ed	dd 98 00 23 00
	00		 fstp	 QWORD PTR [eax+8960]

; 228  : 				gGameShop.GDSaveUserInfo(aIndex);
; 229  : 				money = 0;
; 230  : 				return;

  000f3	eb 28		 jmp	 SHORT $LN29@SellPriceI
$LN22@SellPriceI:

; 233  : 			{
; 234  : 				lpObj->GameShop.WCoinP += this->SellPrice[i].Price;

  000f5	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  000f8	db 44 91 18	 fild	 DWORD PTR [ecx+edx*4+24]
  000fc	dc 80 f8 22 00
	00		 fadd	 QWORD PTR [eax+8952]
  00102	dd 98 f8 22 00
	00		 fstp	 QWORD PTR [eax+8952]

; 235  : 				gGameShop.GDSaveUserInfo(aIndex);
; 236  : 				money = 0;
; 237  : 				return;

  00108	eb 13		 jmp	 SHORT $LN29@SellPriceI
$LN23@SellPriceI:

; 240  : 			{
; 241  : 				lpObj->GameShop.GoblinPoint += this->SellPrice[i].Price;

  0010a	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0010d	db 44 91 18	 fild	 DWORD PTR [ecx+edx*4+24]
  00111	dc 80 08 23 00
	00		 fadd	 QWORD PTR [eax+8968]
  00117	dd 98 08 23 00
	00		 fstp	 QWORD PTR [eax+8968]
$LN29@SellPriceI:

; 242  : 				gGameShop.GDSaveUserInfo(aIndex);

  0011d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00120	50		 push	 eax
  00121	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00126	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 243  : 				money = 0;

  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _money$[ebp]
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00136	5b		 pop	 ebx

; 252  : 	}
; 253  : }

  00137	5d		 pop	 ebp
  00138	c2 0c 00	 ret	 12			; 0000000cH
?SellPriceItem@cPriceManager@@QAEXHHAAH@Z ENDP		; cPriceManager::SellPriceItem
_TEXT	ENDS
PUBLIC	?BuyPriceItem@cPriceManager@@QAE_NHHAAHH@Z	; cPriceManager::BuyPriceItem
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
EXTRN	?GetText@CZtText@@QAEPADH@Z:PROC		; CZtText::GetText
EXTRN	?g_ZtText@@3VCZtText@@A:BYTE			; g_ZtText
; Function compile flags: /Ogtp
;	COMDAT ?BuyPriceItem@cPriceManager@@QAE_NHHAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv416 = 8						; size = 4
_aIndex$ = 8						; size = 4
_iType$ = 12						; size = 4
_iStoreTaxMoney$ = 16					; size = 4
_ItemLevel$ = 20					; size = 4
?BuyPriceItem@cPriceManager@@QAE_NHHAAHH@Z PROC		; cPriceManager::BuyPriceItem, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 257  : 	if(!this->Enable) return true;

  00004	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	75 08		 jne	 SHORT $LN19@BuyPriceIt
  0000c	b0 01		 mov	 al, 1

; 343  : }

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 10 00	 ret	 16			; 00000010H
$LN19@BuyPriceIt:
  00014	53		 push	 ebx

; 258  : 	LPOBJ lpObj = &gObj[aIndex];

  00015	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00018	56		 push	 esi
  00019	8b f3		 mov	 esi, ebx
  0001b	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00021	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 259  : 	for(int i=0;i<this->bCount;i++)

  00027	33 c0		 xor	 eax, eax
  00029	57		 push	 edi
  0002a	39 81 0c 50 00
	00		 cmp	 DWORD PTR [ecx+20492], eax
  00030	0f 8e ff 01 00
	00		 jle	 $LN16@BuyPriceIt

; 258  : 	LPOBJ lpObj = &gObj[aIndex];

  00036	8d b9 18 28 00
	00		 lea	 edi, DWORD PTR [ecx+10264]
  0003c	8d 64 24 00	 npad	 4
$LL18@BuyPriceIt:

; 260  : 	{
; 261  : 		if ( iType == ITEMGET(this->BuyPrice[i].Type,this->BuyPrice[i].Index) && this->BuyPrice[i].Level == ItemLevel)

  00040	8b 4f f4	 mov	 ecx, DWORD PTR [edi-12]
  00043	c1 e1 09	 shl	 ecx, 9
  00046	03 4f f8	 add	 ecx, DWORD PTR [edi-8]
  00049	39 4d 0c	 cmp	 DWORD PTR _iType$[ebp], ecx
  0004c	75 4b		 jne	 SHORT $LN17@BuyPriceIt
  0004e	8b 55 14	 mov	 edx, DWORD PTR _ItemLevel$[ebp]
  00051	39 57 fc	 cmp	 DWORD PTR [edi-4], edx
  00054	75 43		 jne	 SHORT $LN17@BuyPriceIt

; 262  : 		{
; 263  : 			if(this->BuyPrice[i].PriceType == 0)	//Zen

  00056	8b 17		 mov	 edx, DWORD PTR [edi]
  00058	85 d2		 test	 edx, edx
  0005a	75 1d		 jne	 SHORT $LN14@BuyPriceIt

; 264  : 			{
; 265  : 				iStoreTaxMoney = this->BuyPrice[i].Price;

  0005c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0005f	8b 55 10	 mov	 edx, DWORD PTR _iStoreTaxMoney$[ebp]
  00062	89 0a		 mov	 DWORD PTR [edx], ecx

; 266  : 				if(iStoreTaxMoney > lpObj->Money)

  00064	3b 8e f0 00 00
	00		 cmp	 ecx, DWORD PTR [esi+240]
  0006a	7e 2d		 jle	 SHORT $LN17@BuyPriceIt

; 267  : 				{
; 268  : 					MsgNormal(aIndex,g_ZtText.GetText(79),iStoreTaxMoney);

  0006c	51		 push	 ecx
  0006d	6a 4f		 push	 79			; 0000004fH
  0006f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText

; 269  : 					return false;

  00074	e9 6f 01 00 00	 jmp	 $LN33@BuyPriceIt
$LN14@BuyPriceIt:

; 270  : 				}
; 271  : 			}
; 272  : 			else if(this->BuyPrice[i].PriceType == 1)	//Credits

  00079	83 fa 01	 cmp	 edx, 1
  0007c	74 35		 je	 SHORT $LN24@BuyPriceIt

; 296  : 					iStoreTaxMoney = 0;
; 297  : 				//}
; 298  : 				return true;
; 299  : 			}
; 300  : 			else if(this->BuyPrice[i].PriceType == 2)	//WcoinC

  0007e	83 fa 02	 cmp	 edx, 2
  00081	0f 84 9d 00 00
	00		 je	 $LN25@BuyPriceIt

; 312  : 			}
; 313  : 			else if(this->BuyPrice[i].PriceType == 3)	//Wcoin

  00087	83 fa 03	 cmp	 edx, 3
  0008a	0f 84 e4 00 00
	00		 je	 $LN26@BuyPriceIt

; 325  : 			}
; 326  : 			else if(this->BuyPrice[i].PriceType == 4)	//Wcoin

  00090	83 fa 04	 cmp	 edx, 4
  00093	0f 84 25 01 00
	00		 je	 $LN27@BuyPriceIt
$LN17@BuyPriceIt:

; 259  : 	for(int i=0;i<this->bCount;i++)

  00099	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	40		 inc	 eax
  0009d	83 c7 14	 add	 edi, 20			; 00000014H
  000a0	3b 81 0c 50 00
	00		 cmp	 eax, DWORD PTR [ecx+20492]
  000a6	7c 98		 jl	 SHORT $LL18@BuyPriceIt

; 337  : 				return true;
; 338  : 			}
; 339  : 		}
; 340  : 	}
; 341  : 
; 342  : 	return true;

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	b0 01		 mov	 al, 1
  000ac	5b		 pop	 ebx

; 343  : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 10 00	 ret	 16			; 00000010H
$LN24@BuyPriceIt:

; 273  : 			{
; 274  : 				//if(g_ZtLicense.CheckUser(eZtUB::NSGames))
; 275  : 				//{
; 276  : 				//	if(this->BuyPrice[i].Price > lpObj->PCPoint)
; 277  : 				//	{
; 278  : 				//		MsgNormal(aIndex,"Need %d NSPoint", this->BuyPrice[i].Price);
; 279  : 				//		return false;
; 280  : 				//	}
; 281  : 				//	MsgNormal(aIndex, "Price: %d NSPoint",this->BuyPrice[i].Price);
; 282  : 				//	lpObj->ZtCred -= this->BuyPrice[i].Price;
; 283  : 				//	ZtUserDataSend(lpObj->m_Index);
; 284  : 				//	iStoreTaxMoney = 0;
; 285  : 				//}
; 286  : 				//else
; 287  : 				//{
; 288  : 					if(this->BuyPrice[i].Price > lpObj->ZtCred)

  000b3	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 8c 90 1c 28
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+10268]
  000c0	8d bc 90 1c 28
	00 00		 lea	 edi, DWORD PTR [eax+edx*4+10268]
  000c7	89 4d 08	 mov	 DWORD PTR tv416[ebp], ecx
  000ca	db 45 08	 fild	 DWORD PTR tv416[ebp]

; 289  : 					{
; 290  : 						MsgNormal(aIndex,g_ZtText.GetText(80),this->BuyPrice[i].Price);

  000cd	51		 push	 ecx
  000ce	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  000d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000d9	de d9		 fcompp
  000db	df e0		 fnstsw	 ax
  000dd	f6 c4 05	 test	 ah, 5
  000e0	7a 07		 jp	 SHORT $LN10@BuyPriceIt
  000e2	6a 50		 push	 80			; 00000050H

; 291  : 						return false;

  000e4	e9 ff 00 00 00	 jmp	 $LN33@BuyPriceIt
$LN10@BuyPriceIt:

; 292  : 					}
; 293  : 					MsgNormal(aIndex,g_ZtText.GetText(81),this->BuyPrice[i].Price);

  000e9	6a 51		 push	 81			; 00000051H
  000eb	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000f0	50		 push	 eax
  000f1	53		 push	 ebx
  000f2	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal

; 294  : 					lpObj->ZtCred -= this->BuyPrice[i].Price;

  000f7	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  000fd	da 27		 fisub	 DWORD PTR [edi]

; 295  : 					ZtUserDataSend(lpObj->m_Index);

  000ff	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00101	51		 push	 ecx
  00102	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]
  00108	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend

; 336  : 				iStoreTaxMoney = 0;

  0010d	8b 55 10	 mov	 edx, DWORD PTR _iStoreTaxMoney$[ebp]
  00110	83 c4 10	 add	 esp, 16			; 00000010H
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 337  : 				return true;
; 338  : 			}
; 339  : 		}
; 340  : 	}
; 341  : 
; 342  : 	return true;

  0011b	b0 01		 mov	 al, 1
  0011d	5b		 pop	 ebx

; 343  : }

  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 10 00	 ret	 16			; 00000010H
$LN25@BuyPriceIt:

; 301  : 			{
; 302  : 				if(this->BuyPrice[i].Price > lpObj->GameShop.WCoinC)

  00124	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0012a	8d bc 81 1c 28
	00 00		 lea	 edi, DWORD PTR [ecx+eax*4+10268]
  00131	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00133	89 4d 08	 mov	 DWORD PTR tv416[ebp], ecx
  00136	db 45 08	 fild	 DWORD PTR tv416[ebp]

; 303  : 				{
; 304  : 					MsgNormal(aIndex,g_ZtText.GetText(82),this->BuyPrice[i].Price);

  00139	51		 push	 ecx
  0013a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0013f	dc 9e 00 23 00
	00		 fcomp	 QWORD PTR [esi+8960]
  00145	df e0		 fnstsw	 ax
  00147	f6 c4 41	 test	 ah, 65			; 00000041H
  0014a	75 07		 jne	 SHORT $LN7@BuyPriceIt
  0014c	6a 52		 push	 82			; 00000052H

; 305  : 					return false;

  0014e	e9 95 00 00 00	 jmp	 $LN33@BuyPriceIt
$LN7@BuyPriceIt:

; 306  : 				}
; 307  : 				MsgNormal(aIndex,g_ZtText.GetText(83),this->BuyPrice[i].Price);

  00153	6a 53		 push	 83			; 00000053H
  00155	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0015a	50		 push	 eax
  0015b	53		 push	 ebx
  0015c	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal

; 308  : 				lpObj->GameShop.WCoinC -= this->BuyPrice[i].Price;

  00161	db 07		 fild	 DWORD PTR [edi]
  00163	dc ae 00 23 00
	00		 fsubr	 QWORD PTR [esi+8960]
  00169	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]

; 309  : 				gGameShop.GDSaveUserInfo(aIndex);
; 310  : 				iStoreTaxMoney = 0;
; 311  : 				return true;

  0016f	e9 aa 00 00 00	 jmp	 $LN35@BuyPriceIt
$LN26@BuyPriceIt:

; 314  : 			{
; 315  : 				if(this->BuyPrice[i].Price > lpObj->GameShop.WCoinP)

  00174	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0017a	8d bc 81 1c 28
	00 00		 lea	 edi, DWORD PTR [ecx+eax*4+10268]
  00181	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00183	89 4d 08	 mov	 DWORD PTR tv416[ebp], ecx
  00186	db 45 08	 fild	 DWORD PTR tv416[ebp]

; 316  : 				{
; 317  : 					MsgNormal(aIndex,g_ZtText.GetText(84),this->BuyPrice[i].Price);

  00189	51		 push	 ecx
  0018a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0018f	dc 9e f8 22 00
	00		 fcomp	 QWORD PTR [esi+8952]
  00195	df e0		 fnstsw	 ax
  00197	f6 c4 41	 test	 ah, 65			; 00000041H
  0019a	75 04		 jne	 SHORT $LN4@BuyPriceIt
  0019c	6a 54		 push	 84			; 00000054H

; 318  : 					return false;

  0019e	eb 48		 jmp	 SHORT $LN33@BuyPriceIt
$LN4@BuyPriceIt:

; 319  : 				}
; 320  : 				MsgNormal(aIndex,g_ZtText.GetText(85),this->BuyPrice[i].Price);

  001a0	6a 55		 push	 85			; 00000055H
  001a2	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001a7	50		 push	 eax
  001a8	53		 push	 ebx
  001a9	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal

; 321  : 				lpObj->GameShop.WCoinP -= this->BuyPrice[i].Price;

  001ae	db 07		 fild	 DWORD PTR [edi]
  001b0	dc ae f8 22 00
	00		 fsubr	 QWORD PTR [esi+8952]
  001b6	dd 9e f8 22 00
	00		 fstp	 QWORD PTR [esi+8952]

; 322  : 				gGameShop.GDSaveUserInfo(aIndex);
; 323  : 				iStoreTaxMoney = 0;
; 324  : 				return true;

  001bc	eb 60		 jmp	 SHORT $LN35@BuyPriceIt
$LN27@BuyPriceIt:

; 327  : 			{
; 328  : 				if(this->BuyPrice[i].Price > lpObj->GameShop.GoblinPoint)

  001be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c1	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001c4	8d bc 81 1c 28
	00 00		 lea	 edi, DWORD PTR [ecx+eax*4+10268]
  001cb	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001cd	89 4d 08	 mov	 DWORD PTR tv416[ebp], ecx
  001d0	db 45 08	 fild	 DWORD PTR tv416[ebp]

; 329  : 				{
; 330  : 					MsgNormal(aIndex,g_ZtText.GetText(86),this->BuyPrice[i].Price);

  001d3	51		 push	 ecx
  001d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001d9	dc 9e 08 23 00
	00		 fcomp	 QWORD PTR [esi+8968]
  001df	df e0		 fnstsw	 ax
  001e1	f6 c4 41	 test	 ah, 65			; 00000041H
  001e4	75 1c		 jne	 SHORT $LN1@BuyPriceIt
  001e6	6a 56		 push	 86			; 00000056H
$LN33@BuyPriceIt:
  001e8	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001ed	50		 push	 eax
  001ee	53		 push	 ebx
  001ef	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f7	5f		 pop	 edi
  001f8	5e		 pop	 esi

; 331  : 					return false;

  001f9	32 c0		 xor	 al, al
  001fb	5b		 pop	 ebx

; 343  : }

  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 10 00	 ret	 16			; 00000010H
$LN1@BuyPriceIt:

; 332  : 				}
; 333  : 				MsgNormal(aIndex,g_ZtText.GetText(87),this->BuyPrice[i].Price);

  00202	6a 57		 push	 87			; 00000057H
  00204	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00209	50		 push	 eax
  0020a	53		 push	 ebx
  0020b	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal

; 334  : 				lpObj->GameShop.GoblinPoint -= this->BuyPrice[i].Price;

  00210	db 07		 fild	 DWORD PTR [edi]
  00212	dc ae 08 23 00
	00		 fsubr	 QWORD PTR [esi+8968]
  00218	dd 9e 08 23 00
	00		 fstp	 QWORD PTR [esi+8968]
$LN35@BuyPriceIt:

; 335  : 				gGameShop.GDSaveUserInfo(aIndex);

  0021e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00221	53		 push	 ebx
  00222	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00227	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 336  : 				iStoreTaxMoney = 0;

  0022c	8b 55 10	 mov	 edx, DWORD PTR _iStoreTaxMoney$[ebp]
  0022f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN16@BuyPriceIt:

; 337  : 				return true;
; 338  : 			}
; 339  : 		}
; 340  : 	}
; 341  : 
; 342  : 	return true;

  00235	5f		 pop	 edi
  00236	5e		 pop	 esi
  00237	b0 01		 mov	 al, 1
  00239	5b		 pop	 ebx

; 343  : }

  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 10 00	 ret	 16			; 00000010H
?BuyPriceItem@cPriceManager@@QAE_NHHAAHH@Z ENDP		; cPriceManager::BuyPriceItem
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0BE@DLABEGHF@?$CFs?5?9?5file?5nor?5found?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadList@cPriceManager@@QAEXPAD@Z		; cPriceManager::ReadList
EXTRN	_fclose:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DLABEGHF@?$CFs?5?9?5file?5nor?5found?$AA@
CONST	SEGMENT
??_C@_0BE@DLABEGHF@?$CFs?5?9?5file?5nor?5found?$AA@ DB '%s - file nor fou'
	DB	'nd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadList@cPriceManager@@QAEXPAD@Z
_TEXT	SEGMENT
_Category$ = 8						; size = 4
_File$ = 8						; size = 4
?ReadList@cPriceManager@@QAEXPAD@Z PROC			; cPriceManager::ReadList, COMDAT
; _this$ = ecx

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 377  : 	//this->Init();
; 378  : 	int Token;
; 379  : 	// ----
; 380  : 	SMDFile = fopen(File, "r");

  00005	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000d	57		 push	 edi
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8
  00018	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 381  : 	// ----
; 382  : 	if (!SMDFile)

  0001d	85 c0		 test	 eax, eax
  0001f	75 16		 jne	 SHORT $LN17@ReadList

; 383  : 	{
; 384  : 		MsgBox("%s - file nor found", File);

  00021	57		 push	 edi
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DLABEGHF@?$CFs?5?9?5file?5nor?5found?$AA@
  00027	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002c	83 c4 08	 add	 esp, 8

; 385  : 		ExitProcess(0);

  0002f	6a 00		 push	 0
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN46@ReadList:
$LN17@ReadList:

; 386  : 		return;
; 387  : 	}
; 388  : 	// ----
; 389  : 	int Category = -1;
; 390  : 	// ----
; 391  : 	while (true)
; 392  : 	{
; 393  : 		Token = GetToken();

  00037	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 394  : 		// ----
; 395  : 		if (Token == END)

  0003c	83 f8 02	 cmp	 eax, 2
  0003f	0f 84 7e 02 00
	00		 je	 $LN30@ReadList
  00045	53		 push	 ebx
  00046	bb 01 00 00 00	 mov	 ebx, 1
  0004b	eb 03 8d 49 00	 npad	 5
$LL16@ReadList:

; 396  : 		{
; 397  : 			break;
; 398  : 		}
; 399  : 		// ----
; 400  : 		if (Token != NUMBER)

  00050	3b c3		 cmp	 eax, ebx
  00052	0f 85 5c 02 00
	00		 jne	 $LN43@ReadList

; 401  : 		{
; 402  : 			continue;
; 403  : 		}
; 404  : 		// ----
; 405  : 		Category = TokenNumber;

  00058	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0005e	e8 00 00 00 00	 call	 __ftol2_sse
  00063	8b f8		 mov	 edi, eax
  00065	89 7d 08	 mov	 DWORD PTR _Category$[ebp], edi
$LL12@ReadList:

; 406  : 		// ----
; 407  : 		while (true)
; 408  : 		{
; 409  : 			if (Category == 0)

  00068	85 ff		 test	 edi, edi
  0006a	75 63		 jne	 SHORT $LN10@ReadList

; 410  : 			{
; 411  : 				Token = GetToken();

  0006c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 412  : 				// ----
; 413  : 				if (strcmp("end", TokenString) == NULL)

  00071	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00076	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0007b	eb 03 8d 49 00	 npad	 5
$LL31@ReadList:
  00080	8a 10		 mov	 dl, BYTE PTR [eax]
  00082	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00084	75 1a		 jne	 SHORT $LN32@ReadList
  00086	84 d2		 test	 dl, dl
  00088	74 12		 je	 SHORT $LN33@ReadList
  0008a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0008d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00090	75 0e		 jne	 SHORT $LN32@ReadList
  00092	83 c0 02	 add	 eax, 2
  00095	83 c1 02	 add	 ecx, 2
  00098	84 d2		 test	 dl, dl
  0009a	75 e4		 jne	 SHORT $LL31@ReadList
$LN33@ReadList:
  0009c	33 c0		 xor	 eax, eax
  0009e	eb 05		 jmp	 SHORT $LN34@ReadList
$LN32@ReadList:
  000a0	1b c0		 sbb	 eax, eax
  000a2	83 d8 ff	 sbb	 eax, -1
$LN34@ReadList:
  000a5	85 c0		 test	 eax, eax
  000a7	0f 84 07 02 00
	00		 je	 $LN43@ReadList

; 414  : 				{
; 415  : 					break;
; 416  : 				}
; 417  : 				// ----
; 418  : 				this->Enable = TokenNumber;

  000ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b3	e8 00 00 00 00	 call	 __ftol2_sse
  000b8	89 06		 mov	 DWORD PTR [esi], eax

; 419  : 				// ----
; 420  : 				Token = GetToken();

  000ba	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 421  : 				this->AllSellNull = TokenNumber;

  000bf	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c5	e8 00 00 00 00	 call	 __ftol2_sse
  000ca	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000cd	eb 99		 jmp	 SHORT $LL12@ReadList
$LN10@ReadList:

; 422  : 			}
; 423  : 			else if (Category == 1)	//-> Sell List	//-> Need Check Dev

  000cf	3b fb		 cmp	 edi, ebx
  000d1	0f 85 e3 00 00
	00		 jne	 $LN7@ReadList

; 424  : 			{
; 425  : 				Token = GetToken();

  000d7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 426  : 				// ----
; 427  : 				if (strcmp("end", TokenString) == NULL)

  000dc	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000e1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL35@ReadList:
  000e6	8a 10		 mov	 dl, BYTE PTR [eax]
  000e8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000ea	75 1a		 jne	 SHORT $LN36@ReadList
  000ec	84 d2		 test	 dl, dl
  000ee	74 12		 je	 SHORT $LN37@ReadList
  000f0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000f3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000f6	75 0e		 jne	 SHORT $LN36@ReadList
  000f8	83 c0 02	 add	 eax, 2
  000fb	83 c1 02	 add	 ecx, 2
  000fe	84 d2		 test	 dl, dl
  00100	75 e4		 jne	 SHORT $LL35@ReadList
$LN37@ReadList:
  00102	33 c0		 xor	 eax, eax
  00104	eb 05		 jmp	 SHORT $LN38@ReadList
$LN36@ReadList:
  00106	1b c0		 sbb	 eax, eax
  00108	83 d8 ff	 sbb	 eax, -1
$LN38@ReadList:
  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 a1 01 00
	00		 je	 $LN43@ReadList

; 428  : 				{
; 429  : 					break;
; 430  : 				}
; 431  : 				// ----
; 432  : 				if (this->sCount >= MAX_PRICE_ITEM)

  00113	8b be 08 28 00
	00		 mov	 edi, DWORD PTR [esi+10248]
  00119	81 ff 00 02 00
	00		 cmp	 edi, 512		; 00000200H
  0011f	0f 8d 8f 01 00
	00		 jge	 $LN43@ReadList

; 433  : 				{
; 434  : 					break;
; 435  : 				}
; 436  : 				// ----
; 437  : 				this->SellPrice[this->sCount].Type = TokenNumber;

  00125	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012b	e8 00 00 00 00	 call	 __ftol2_sse
  00130	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00133	89 44 8e 08	 mov	 DWORD PTR [esi+ecx*4+8], eax

; 438  : 				// ----
; 439  : 				Token = GetToken();

  00137	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 440  : 				this->SellPrice[this->sCount].Index = TokenNumber;

  0013c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00142	e8 00 00 00 00	 call	 __ftol2_sse
  00147	8b 8e 08 28 00
	00		 mov	 ecx, DWORD PTR [esi+10248]
  0014d	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00150	89 44 96 0c	 mov	 DWORD PTR [esi+edx*4+12], eax

; 441  : 				// ----
; 442  : 				Token = GetToken();

  00154	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 443  : 				this->SellPrice[this->sCount].Level = TokenNumber;

  00159	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015f	e8 00 00 00 00	 call	 __ftol2_sse
  00164	8b 8e 08 28 00
	00		 mov	 ecx, DWORD PTR [esi+10248]
  0016a	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0016d	89 44 8e 10	 mov	 DWORD PTR [esi+ecx*4+16], eax

; 444  : 				// ----
; 445  : 				Token = GetToken();

  00171	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 446  : 				this->SellPrice[this->sCount].PriceType = TokenNumber;

  00176	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0017c	e8 00 00 00 00	 call	 __ftol2_sse
  00181	8b 8e 08 28 00
	00		 mov	 ecx, DWORD PTR [esi+10248]
  00187	03 cb		 add	 ecx, ebx
  00189	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  0018c	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax

; 447  : 				// ----
; 448  : 				Token = GetToken();

  0018f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 449  : 				this->SellPrice[this->sCount].Price = TokenNumber;

  00194	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019a	e8 00 00 00 00	 call	 __ftol2_sse
  0019f	8b 8e 08 28 00
	00		 mov	 ecx, DWORD PTR [esi+10248]

; 450  : 				// ----
; 451  : 				this->sCount++;

  001a5	8b 7d 08	 mov	 edi, DWORD PTR _Category$[ebp]
  001a8	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  001ab	89 44 8e 18	 mov	 DWORD PTR [esi+ecx*4+24], eax
  001af	01 9e 08 28 00
	00		 add	 DWORD PTR [esi+10248], ebx
  001b5	e9 ae fe ff ff	 jmp	 $LL12@ReadList
$LN7@ReadList:

; 452  : 			}
; 453  : 			else if (Category == 2)	//-> Buy List	//-> Need Check	Dev

  001ba	83 ff 02	 cmp	 edi, 2
  001bd	0f 85 a5 fe ff
	ff		 jne	 $LL12@ReadList

; 454  : 			{
; 455  : 				Token = GetToken();

  001c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 456  : 				// ----
; 457  : 				if (strcmp("end", TokenString) == NULL)

  001c8	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001cd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL39@ReadList:
  001d2	8a 10		 mov	 dl, BYTE PTR [eax]
  001d4	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001d6	75 1a		 jne	 SHORT $LN40@ReadList
  001d8	84 d2		 test	 dl, dl
  001da	74 12		 je	 SHORT $LN41@ReadList
  001dc	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001df	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001e2	75 0e		 jne	 SHORT $LN40@ReadList
  001e4	83 c0 02	 add	 eax, 2
  001e7	83 c1 02	 add	 ecx, 2
  001ea	84 d2		 test	 dl, dl
  001ec	75 e4		 jne	 SHORT $LL39@ReadList
$LN41@ReadList:
  001ee	33 c0		 xor	 eax, eax
  001f0	eb 05		 jmp	 SHORT $LN42@ReadList
$LN40@ReadList:
  001f2	1b c0		 sbb	 eax, eax
  001f4	83 d8 ff	 sbb	 eax, -1
$LN42@ReadList:
  001f7	85 c0		 test	 eax, eax
  001f9	0f 84 b5 00 00
	00		 je	 $LN43@ReadList

; 458  : 				{
; 459  : 					break;
; 460  : 				}
; 461  : 				// ----
; 462  : 				if (this->bCount >= MAX_PRICE_ITEM)

  001ff	8b be 0c 50 00
	00		 mov	 edi, DWORD PTR [esi+20492]
  00205	81 ff 00 02 00
	00		 cmp	 edi, 512		; 00000200H
  0020b	0f 8d a3 00 00
	00		 jge	 $LN43@ReadList

; 463  : 				{
; 464  : 					break;
; 465  : 				}
; 466  : 				// ----
; 467  : 				this->BuyPrice[this->bCount].Type = TokenNumber;

  00211	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00217	e8 00 00 00 00	 call	 __ftol2_sse
  0021c	8d 14 bf	 lea	 edx, DWORD PTR [edi+edi*4]
  0021f	89 84 96 0c 28
	00 00		 mov	 DWORD PTR [esi+edx*4+10252], eax

; 468  : 				// ----
; 469  : 				Token = GetToken();

  00226	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 470  : 				this->BuyPrice[this->bCount].Index = TokenNumber;

  0022b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00231	e8 00 00 00 00	 call	 __ftol2_sse
  00236	8b 8e 0c 50 00
	00		 mov	 ecx, DWORD PTR [esi+20492]
  0023c	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0023f	89 84 8e 10 28
	00 00		 mov	 DWORD PTR [esi+ecx*4+10256], eax

; 471  : 				// ----
; 472  : 				Token = GetToken();

  00246	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 473  : 				this->BuyPrice[this->bCount].Level = TokenNumber;

  0024b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00251	e8 00 00 00 00	 call	 __ftol2_sse
  00256	8b 8e 0c 50 00
	00		 mov	 ecx, DWORD PTR [esi+20492]
  0025c	8d 94 89 05 0a
	00 00		 lea	 edx, DWORD PTR [ecx+ecx*4+2565]
  00263	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax

; 474  : 				// ----
; 475  : 				Token = GetToken();

  00266	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 476  : 				this->BuyPrice[this->bCount].PriceType = TokenNumber;

  0026b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00271	e8 00 00 00 00	 call	 __ftol2_sse
  00276	8b 8e 0c 50 00
	00		 mov	 ecx, DWORD PTR [esi+20492]
  0027c	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0027f	89 84 8e 18 28
	00 00		 mov	 DWORD PTR [esi+ecx*4+10264], eax

; 477  : 				// ----
; 478  : 				Token = GetToken();

  00286	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 479  : 				this->BuyPrice[this->bCount].Price = TokenNumber;

  0028b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00291	e8 00 00 00 00	 call	 __ftol2_sse
  00296	8b 8e 0c 50 00
	00		 mov	 ecx, DWORD PTR [esi+20492]

; 480  : 				// ----
; 481  : 				this->bCount++;
; 482  : 			}
; 483  : 		}

  0029c	8b 7d 08	 mov	 edi, DWORD PTR _Category$[ebp]
  0029f	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  002a2	89 84 96 1c 28
	00 00		 mov	 DWORD PTR [esi+edx*4+10268], eax
  002a9	01 9e 0c 50 00
	00		 add	 DWORD PTR [esi+20492], ebx
  002af	e9 b4 fd ff ff	 jmp	 $LL12@ReadList
$LN43@ReadList:

; 386  : 		return;
; 387  : 	}
; 388  : 	// ----
; 389  : 	int Category = -1;
; 390  : 	// ----
; 391  : 	while (true)
; 392  : 	{
; 393  : 		Token = GetToken();

  002b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 394  : 		// ----
; 395  : 		if (Token == END)

  002b9	83 f8 02	 cmp	 eax, 2
  002bc	0f 85 8e fd ff
	ff		 jne	 $LL16@ReadList
  002c2	5b		 pop	 ebx
$LN30@ReadList:

; 484  : 	}
; 485  : 	// ----
; 486  : 	fclose(SMDFile);

  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 _fclose
  002ce	83 c4 04	 add	 esp, 4
  002d1	5f		 pop	 edi
  002d2	5e		 pop	 esi

; 487  : }

  002d3	5d		 pop	 ebp
  002d4	c2 04 00	 ret	 4
$LN45@ReadList:
?ReadList@cPriceManager@@QAEXPAD@Z ENDP			; cPriceManager::ReadList
_TEXT	ENDS
PUBLIC	??_C@_0M@GNKKLILL@AllSellNull?$AA@		; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CA@DNNIHHEN@?4?4?2Data?2ZtData?2PriceManager?4ini?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadConfig@cPriceManager@@QAEXXZ		; cPriceManager::LoadConfig
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_0M@GNKKLILL@AllSellNull?$AA@
CONST	SEGMENT
??_C@_0M@GNKKLILL@AllSellNull?$AA@ DB 'AllSellNull', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DNNIHHEN@?4?4?2Data?2ZtData?2PriceManager?4ini?$AA@
CONST	SEGMENT
??_C@_0CA@DNNIHHEN@?4?4?2Data?2ZtData?2PriceManager?4ini?$AA@ DB '..\Data'
	DB	'\ZtData\PriceManager.ini', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadConfig@cPriceManager@@QAEXXZ
_TEXT	SEGMENT
__$ArrayPad$ = -4					; size = 4
?LoadConfig@cPriceManager@@QAEXXZ PROC			; cPriceManager::LoadConfig, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00009	33 c5		 xor	 eax, ebp
  0000b	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0000e	53		 push	 ebx

; 17   : 	this->Enable = GetPrivateProfileInt("Common","Enable",0,PRICEMANAGER_DIR);

  0000f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetPrivateProfileIntA@16
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DNNIHHEN@?4?4?2Data?2ZtData?2PriceManager?4ini?$AA@
  0001c	33 ff		 xor	 edi, edi
  0001e	57		 push	 edi
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00029	8b f1		 mov	 esi, ecx
  0002b	ff d3		 call	 ebx

; 18   : 	this->AllSellNull = GetPrivateProfileInt("Common","AllSellNull",0,PRICEMANAGER_DIR);

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DNNIHHEN@?4?4?2Data?2ZtData?2PriceManager?4ini?$AA@
  00032	57		 push	 edi
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GNKKLILL@AllSellNull?$AA@
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0003d	89 06		 mov	 DWORD PTR [esi], eax
  0003f	ff d3		 call	 ebx
  00041	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 19   : 
; 20   : 	this->sCount = 0;

  00044	89 be 08 28 00
	00		 mov	 DWORD PTR [esi+10248], edi

; 21   : 	this->bCount = 0;

  0004a	89 be 0c 50 00
	00		 mov	 DWORD PTR [esi+20492], edi

; 22   : 
; 23   : 	for(int i(0);i<MAX_PRICE_ITEM;i++)

  00050	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00053	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
$LL15@LoadConfig:

; 24   : 	{
; 25   : 		this->SellPrice[i].Type = 0;

  00058	89 78 fc	 mov	 DWORD PTR [eax-4], edi

; 26   : 		this->SellPrice[i].Index = 0;

  0005b	89 38		 mov	 DWORD PTR [eax], edi

; 27   : 		this->SellPrice[i].Level = 0;

  0005d	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 28   : 		this->SellPrice[i].Price = 0;

  00060	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  00063	83 c0 14	 add	 eax, 20			; 00000014H
  00066	49		 dec	 ecx
  00067	75 ef		 jne	 SHORT $LL15@LoadConfig

; 29   : 	}
; 30   : 
; 31   : 	for (int i(0); i<MAX_PRICE_ITEM; i++)

  00069	8d 86 10 28 00
	00		 lea	 eax, DWORD PTR [esi+10256]
  0006f	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
$LL12@LoadConfig:

; 32   : 	{
; 33   : 		this->BuyPrice[i].Type = 0;

  00074	89 78 fc	 mov	 DWORD PTR [eax-4], edi

; 34   : 		this->BuyPrice[i].Index = 0;

  00077	89 38		 mov	 DWORD PTR [eax], edi

; 35   : 		this->BuyPrice[i].Level = 0;

  00079	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 36   : 		this->BuyPrice[i].Price = 0;

  0007c	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  0007f	83 c0 14	 add	 eax, 20			; 00000014H
  00082	49		 dec	 ecx
  00083	75 ef		 jne	 SHORT $LL12@LoadConfig

; 37   : 	}
; 38   : 
; 39   : 	this->ReadList(PRICEMANAGER_DIR);

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DNNIHHEN@?4?4?2Data?2ZtData?2PriceManager?4ini?$AA@
  0008a	8b ce		 mov	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?ReadList@cPriceManager@@QAEXPAD@Z ; cPriceManager::ReadList

; 40   : 
; 41   : 	return;
; 42   : 
; 43   : 	FILE * file = fopen(PRICEMANAGER_DIR,"r");
; 44   : 	if(file == NULL)
; 45   : 	{
; 46   : 		MessageBoxA(0,PRICEMANAGER_DIR,"LOAD ERROR",0);
; 47   : 		this->Enable = false;
; 48   : 	}
; 49   : 	if(!this->Enable)return;
; 50   : 
; 51   : 	char Buff[256];
; 52   : 	int Flag = 0;
; 53   : 	this->sCount = 0;
; 54   : 	this->bCount = 0;
; 55   : 
; 56   : 	while(!feof(file))
; 57   : 	{
; 58   : 		fgets(Buff,256,file);
; 59   : 		if(Zt_IsBadFileLine(Buff, Flag))
; 60   : 			continue;
; 61   : 		if(Flag == 1)
; 62   : 		{
; 63   : 			if(this->sCount == MAX_PRICE_ITEM) break;
; 64   : 
; 65   : 			int n[5];
; 66   : 			sscanf(Buff, "%d %d %d %d %d", &n[0], &n[1], &n[2], &n[3], &n[4]);
; 67   : 			this->SellPrice[this->sCount].Type = n[0];
; 68   : 			this->SellPrice[this->sCount].Index = n[1];
; 69   : 			this->SellPrice[this->sCount].Level = n[2];
; 70   : 			this->SellPrice[this->sCount].PriceType = n[3];
; 71   : 			this->SellPrice[this->sCount].Price = n[4];
; 72   : 			this->sCount++;
; 73   : 		}
; 74   : 
; 75   : 		if(Flag == 2)
; 76   : 		{
; 77   : 			if(this->bCount == MAX_PRICE_ITEM) break;
; 78   : 
; 79   : 			int n[5];
; 80   : 			sscanf(Buff, "%d %d %d %d %d", &n[0], &n[1], &n[2], &n[3], &n[4]);
; 81   : 			this->BuyPrice[this->bCount].Type = n[0];
; 82   : 			this->BuyPrice[this->bCount].Index = n[1];
; 83   : 			this->BuyPrice[this->bCount].Level = n[2];
; 84   : 			this->BuyPrice[this->bCount].PriceType = n[3];
; 85   : 			this->BuyPrice[this->bCount].Price = n[4];
; 86   : 			this->bCount++;
; 87   : 		}
; 88   : 	}
; 89   : 	fclose(file);
; 90   : /*
; 91   : this->Init();
; 92   : int Token;
; 93   : // ----
; 94   : SMDFile = fopen(File, "r");
; 95   : // ----
; 96   : if ( !SMDFile )
; 97   : {
; 98   : MessageBox(NULL, "file not found", "[ItemPrice]", ERROR);
; 99   : return;
; 100  : }
; 101  : // ----
; 102  : int Category = -1;
; 103  : // ----
; 104  : while (true)
; 105  : {
; 106  : Token = GetToken();
; 107  : // ----
; 108  : if( Token == END )
; 109  : {
; 110  : break;
; 111  : }
; 112  : // ----
; 113  : if( Token != NUMBER )
; 114  : {
; 115  : continue;
; 116  : }
; 117  : // ----
; 118  : Category = TokenNumber;
; 119  : // ----
; 120  : while(true)
; 121  : {
; 122  : if( Category == 0)
; 123  : {
; 124  : Token = GetToken();
; 125  : // ----
; 126  : if( strcmp("end", TokenString) == NULL )
; 127  : {
; 128  : break;
; 129  : }
; 130  : // ----
; 131  : this->Enable = TokenNumber;
; 132  : // ----
; 133  : Token = GetToken();
; 134  : this->SellItemNull = TokenNumber;
; 135  : }
; 136  : else if( Category == 1 )	//-> Sell List
; 137  : {
; 138  : Token = GetToken();
; 139  : // ----
; 140  : if( strcmp("end", TokenString) == NULL )
; 141  : {
; 142  : break;
; 143  : }
; 144  : // ----
; 145  : if( this->m_LoadedSellCount >= MAX_ITEMPRICE_ITEM )
; 146  : {
; 147  : break;
; 148  : }
; 149  : // ----
; 150  : this->m_SellData[this->m_LoadedSellCount].ItemType = TokenNumber;
; 151  : // ----
; 152  : Token = GetToken();
; 153  : this->m_SellData[this->m_LoadedSellCount].ItemIndex = TokenNumber;
; 154  : // ----
; 155  : Token = GetToken();
; 156  : this->m_SellData[this->m_LoadedSellCount].ItemLevel = TokenNumber;
; 157  : // ----
; 158  : Token = GetToken();
; 159  : this->m_SellData[this->m_LoadedSellCount].PriceType = TokenNumber;
; 160  : // ----
; 161  : Token = GetToken();
; 162  : this->m_SellData[this->m_LoadedSellCount].Price = TokenNumber;
; 163  : // ----
; 164  : this->m_LoadedSellCount++;
; 165  : }
; 166  : else if( Category == 2)	//-> Buy List
; 167  : {
; 168  : Token = GetToken();
; 169  : // ----
; 170  : if( strcmp("end", TokenString) == NULL )
; 171  : {
; 172  : break;
; 173  : }
; 174  : // ----
; 175  : if( this->m_LoadedBuyCount >= MAX_ITEMPRICE_ITEM )
; 176  : {
; 177  : break;
; 178  : }
; 179  : // ----
; 180  : this->m_BuyData[this->m_LoadedBuyCount].ItemType = TokenNumber;
; 181  : // ----
; 182  : Token = GetToken();
; 183  : this->m_BuyData[this->m_LoadedBuyCount].ItemIndex = TokenNumber;
; 184  : // ----
; 185  : Token = GetToken();
; 186  : this->m_BuyData[this->m_LoadedBuyCount].ItemLevel = TokenNumber;
; 187  : // ----
; 188  : Token = GetToken();
; 189  : this->m_BuyData[this->m_LoadedBuyCount].PriceType = TokenNumber;
; 190  : // ----
; 191  : Token = GetToken();
; 192  : this->m_BuyData[this->m_LoadedBuyCount].Price = TokenNumber;
; 193  : // ----
; 194  : this->m_LoadedBuyCount++;
; 195  : }
; 196  : }
; 197  : }
; 198  : // ----
; 199  : this->m_IsLoaded = true;
; 200  : fclose(SMDFile);
; 201  : */
; 202  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	33 cd		 xor	 ecx, ebp
  00098	5b		 pop	 ebx
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?LoadConfig@cPriceManager@@QAEXXZ ENDP			; cPriceManager::LoadConfig
_TEXT	ENDS
END
